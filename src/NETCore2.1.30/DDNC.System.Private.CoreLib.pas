//----------------------------------------------------------------------------
//  System.Private.CoreLib.dll: System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 2.1.30
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.Private.CoreLib
//  Author: ying32
//----------------------------------------------------------------------------

unit DDNC.System.Private.CoreLib;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.InitNETCore;

type

{ types } 

  SByte = ShortInt;
  PSByte = PShortInt;
  PInt16 = ^SmallInt;
  PUInt16 = ^Word;
  PInt32 = ^Integer;
  PUInt32 = ^Cardinal;

type

{ enums }

  //-------------namespace: System----------------
  [DNTypeName('System.AttributeTargets')]
  DNAttributeTargets = type Integer;
  DNAttributeTargetsHelper = record helper for DNAttributeTargets
  public const
    Assembly = 1;
    Module = 2;
    Class_ = 4;
    Struct = 8;
    Enum = 16;
    Constructor_ = 32;
    Method = 64;
    Property_ = 128;
    Field = 256;
    Event = 512;
    Interface_ = 1024;
    Parameter = 2048;
    Delegate = 4096;
    ReturnValue = 8192;
    GenericParameter = 16384;
    All = 32767;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.Base64FormattingOptions')]
  DNBase64FormattingOptions = type Integer;
  DNBase64FormattingOptionsHelper = record helper for DNBase64FormattingOptions
  public const
    None = 0;
    InsertLineBreaks = 1;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.EditorBrowsableState')]
  DNEditorBrowsableState = type Integer;
  DNEditorBrowsableStateHelper = record helper for DNEditorBrowsableState
  public const
    Always = 0;
    Never = 1;
    Advanced = 2;
  end;


  //-------------namespace: System.Configuration.Assemblies----------------
  [DNTypeName('System.Configuration.Assemblies.AssemblyHashAlgorithm')]
  DNAssemblyHashAlgorithm = type Integer;
  DNAssemblyHashAlgorithmHelper = record helper for DNAssemblyHashAlgorithm
  public const
    None = 0;
    MD5 = 32771;
    SHA1 = 32772;
    SHA256 = 32780;
    SHA384 = 32781;
    SHA512 = 32782;
  end;


  //-------------namespace: System.Configuration.Assemblies----------------
  [DNTypeName('System.Configuration.Assemblies.AssemblyVersionCompatibility')]
  DNAssemblyVersionCompatibility = type Integer;
  DNAssemblyVersionCompatibilityHelper = record helper for DNAssemblyVersionCompatibility
  public const
    SameMachine = 1;
    SameProcess = 2;
    SameDomain = 3;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.DateTimeKind')]
  DNDateTimeKind = type Integer;
  DNDateTimeKindHelper = record helper for DNDateTimeKind
  public const
    Unspecified = 0;
    Utc = 1;
    Local = 2;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.DayOfWeek')]
  DNDayOfWeek = type Integer;
  DNDayOfWeekHelper = record helper for DNDayOfWeek
  public const
    Sunday = 0;
    Monday = 1;
    Tuesday = 2;
    Wednesday = 3;
    Thursday = 4;
    Friday = 5;
    Saturday = 6;
  end;


  //-------------namespace: System.Diagnostics.Contracts----------------
  [DNTypeName('System.Diagnostics.Contracts.ContractFailureKind')]
  DNContractFailureKind = type Integer;
  DNContractFailureKindHelper = record helper for DNContractFailureKind
  public const
    Precondition = 0;
    Postcondition = 1;
    PostconditionOnException = 2;
    Invariant = 3;
    Assert = 4;
    Assume = 5;
  end;


  //-------------namespace: System.Diagnostics----------------
  [DNTypeName('System.Diagnostics.DebuggableAttribute+DebuggingModes')]
  DNDebuggableAttribute_DebuggingModes = type Integer;
  DNDebuggableAttribute_DebuggingModesHelper = record helper for DNDebuggableAttribute_DebuggingModes
  public const
    None = 0;
    Default_ = 1;
    IgnoreSymbolStoreSequencePoints = 2;
    EnableEditAndContinue = 4;
    DisableOptimizations = 256;
  end;


  //-------------namespace: System.Diagnostics----------------
  [DNTypeName('System.Diagnostics.DebuggerBrowsableState')]
  DNDebuggerBrowsableState = type Integer;
  DNDebuggerBrowsableStateHelper = record helper for DNDebuggerBrowsableState
  public const
    Never = 0;
    Collapsed = 2;
    RootHidden = 3;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventActivityOptions')]
  DNEventActivityOptions = type Integer;
  DNEventActivityOptionsHelper = record helper for DNEventActivityOptions
  public const
    None = 0;
    Disable = 2;
    Recursive = 4;
    Detachable = 8;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventChannel')]
  DNEventChannel = type Integer;
  DNEventChannelHelper = record helper for DNEventChannel
  public const
    None = 0;
    Admin = 16;
    Operational = 17;
    Analytic = 18;
    Debug = 19;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventCommand')]
  DNEventCommand = type Integer;
  DNEventCommandHelper = record helper for DNEventCommand
  public const
    Update = 0;
    Disable = -3;
    Enable = -2;
    SendManifest = -1;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventFieldFormat')]
  DNEventFieldFormat = type Integer;
  DNEventFieldFormatHelper = record helper for DNEventFieldFormat
  public const
    Default_ = 0;
    String_ = 2;
    Boolean = 3;
    Hexadecimal = 4;
    Xml = 11;
    Json = 12;
    HResult = 15;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventFieldTags')]
  DNEventFieldTags = type Integer;
  DNEventFieldTagsHelper = record helper for DNEventFieldTags
  public const
    None = 0;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventKeywords')]
  DNEventKeywords = type Integer;
  DNEventKeywordsHelper = record helper for DNEventKeywords
  public const
    None = 0;
    MicrosoftTelemetry = 562949953421312;
    WdiContext = 562949953421312;
    WdiDiagnostic = 1125899906842624;
    Sqm = 2251799813685248;
    AuditFailure = 4503599627370496;
    CorrelationHint = 4503599627370496;
    AuditSuccess = 9007199254740992;
    EventLogClassic = 36028797018963968;
    All = -1;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventLevel')]
  DNEventLevel = type Integer;
  DNEventLevelHelper = record helper for DNEventLevel
  public const
    LogAlways = 0;
    Critical = 1;
    Error = 2;
    Warning = 3;
    Informational = 4;
    Verbose = 5;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventManifestOptions')]
  DNEventManifestOptions = type Integer;
  DNEventManifestOptionsHelper = record helper for DNEventManifestOptions
  public const
    None = 0;
    Strict_ = 1;
    AllCultures = 2;
    OnlyIfNeededForRegistration = 4;
    AllowEventSourceOverride = 8;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventOpcode')]
  DNEventOpcode = type Integer;
  DNEventOpcodeHelper = record helper for DNEventOpcode
  public const
    Info = 0;
    Start = 1;
    Stop = 2;
    DataCollectionStart = 3;
    DataCollectionStop = 4;
    Extension = 5;
    Reply = 6;
    Resume = 7;
    Suspend = 8;
    Send = 9;
    Receive = 240;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventSourceSettings')]
  DNEventSourceSettings = type Integer;
  DNEventSourceSettingsHelper = record helper for DNEventSourceSettings
  public const
    Default_ = 0;
    ThrowOnEventWriteErrors = 1;
    EtwManifestEventFormat = 4;
    EtwSelfDescribingEventFormat = 8;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventTags')]
  DNEventTags = type Integer;
  DNEventTagsHelper = record helper for DNEventTags
  public const
    None = 0;
  end;


  //-------------namespace: System.Diagnostics.Tracing----------------
  [DNTypeName('System.Diagnostics.Tracing.EventTask')]
  DNEventTask = type Integer;
  DNEventTaskHelper = record helper for DNEventTask
  public const
    None = 0;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.EnvironmentVariableTarget')]
  DNEnvironmentVariableTarget = type Integer;
  DNEnvironmentVariableTargetHelper = record helper for DNEnvironmentVariableTarget
  public const
    Process = 0;
    User = 1;
    Machine = 2;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.GCCollectionMode')]
  DNGCCollectionMode = type Integer;
  DNGCCollectionModeHelper = record helper for DNGCCollectionMode
  public const
    Default_ = 0;
    Forced = 1;
    Optimized = 2;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.GCNotificationStatus')]
  DNGCNotificationStatus = type Integer;
  DNGCNotificationStatusHelper = record helper for DNGCNotificationStatus
  public const
    Succeeded = 0;
    Failed = 1;
    Canceled = 2;
    Timeout = 3;
    NotApplicable = 4;
  end;


  //-------------namespace: System.Globalization----------------
  [DNTypeName('System.Globalization.CalendarAlgorithmType')]
  DNCalendarAlgorithmType = type Integer;
  DNCalendarAlgorithmTypeHelper = record helper for DNCalendarAlgorithmType
  public const
    Unknown = 0;
    SolarCalendar = 1;
    LunarCalendar = 2;
    LunisolarCalendar = 3;
  end;


  //-------------namespace: System.Globalization----------------
  [DNTypeName('System.Globalization.CalendarWeekRule')]
  DNCalendarWeekRule = type Integer;
  DNCalendarWeekRuleHelper = record helper for DNCalendarWeekRule
  public const
    FirstDay = 0;
    FirstFullWeek = 1;
    FirstFourDayWeek = 2;
  end;


  //-------------namespace: System.Globalization----------------
  [DNTypeName('System.Globalization.CompareOptions')]
  DNCompareOptions = type Integer;
  DNCompareOptionsHelper = record helper for DNCompareOptions
  public const
    None = 0;
    IgnoreCase = 1;
    IgnoreNonSpace = 2;
    IgnoreSymbols = 4;
    IgnoreKanaType = 8;
    IgnoreWidth = 16;
    OrdinalIgnoreCase = 268435456;
    StringSort = 536870912;
    Ordinal = 1073741824;
  end;


  //-------------namespace: System.Globalization----------------
  [DNTypeName('System.Globalization.CultureTypes')]
  DNCultureTypes = type Integer;
  DNCultureTypesHelper = record helper for DNCultureTypes
  public const
    NeutralCultures = 1;
    SpecificCultures = 2;
    InstalledWin32Cultures = 4;
    AllCultures = 7;
    UserCustomCulture = 8;
    ReplacementCultures = 16;
    WindowsOnlyCultures = 32;
    FrameworkCultures = 64;
  end;


  //-------------namespace: System.Globalization----------------
  [DNTypeName('System.Globalization.DateTimeStyles')]
  DNDateTimeStyles = type Integer;
  DNDateTimeStylesHelper = record helper for DNDateTimeStyles
  public const
    None = 0;
    AllowLeadingWhite = 1;
    AllowTrailingWhite = 2;
    AllowInnerWhite = 4;
    AllowWhiteSpaces = 7;
    NoCurrentDateDefault = 8;
    AdjustToUniversal = 16;
    AssumeLocal = 32;
    AssumeUniversal = 64;
    RoundtripKind = 128;
  end;


  //-------------namespace: System.Globalization----------------
  [DNTypeName('System.Globalization.DigitShapes')]
  DNDigitShapes = type Integer;
  DNDigitShapesHelper = record helper for DNDigitShapes
  public const
    Context = 0;
    None = 1;
    NativeNational = 2;
  end;


  //-------------namespace: System.Globalization----------------
  [DNTypeName('System.Globalization.GregorianCalendarTypes')]
  DNGregorianCalendarTypes = type Integer;
  DNGregorianCalendarTypesHelper = record helper for DNGregorianCalendarTypes
  public const
    Localized = 1;
    USEnglish = 2;
    MiddleEastFrench = 9;
    Arabic = 10;
    TransliteratedEnglish = 11;
    TransliteratedFrench = 12;
  end;


  //-------------namespace: System.Globalization----------------
  [DNTypeName('System.Globalization.NumberStyles')]
  DNNumberStyles = type Integer;
  DNNumberStylesHelper = record helper for DNNumberStyles
  public const
    None = 0;
    AllowLeadingWhite = 1;
    AllowTrailingWhite = 2;
    AllowLeadingSign = 4;
    Integer = 7;
    AllowTrailingSign = 8;
    AllowParentheses = 16;
    AllowDecimalPoint = 32;
    AllowThousands = 64;
    Number = 111;
    AllowExponent = 128;
    Float = 167;
    AllowCurrencySymbol = 256;
    Currency = 383;
    Any = 511;
    AllowHexSpecifier = 512;
    HexNumber = 515;
  end;


  //-------------namespace: System.Globalization----------------
  [DNTypeName('System.Globalization.TimeSpanStyles')]
  DNTimeSpanStyles = type Integer;
  DNTimeSpanStylesHelper = record helper for DNTimeSpanStyles
  public const
    None = 0;
    AssumeNegative = 1;
  end;


  //-------------namespace: System.Globalization----------------
  [DNTypeName('System.Globalization.UnicodeCategory')]
  DNUnicodeCategory = type Integer;
  DNUnicodeCategoryHelper = record helper for DNUnicodeCategory
  public const
    UppercaseLetter = 0;
    LowercaseLetter = 1;
    TitlecaseLetter = 2;
    ModifierLetter = 3;
    OtherLetter = 4;
    NonSpacingMark = 5;
    SpacingCombiningMark = 6;
    EnclosingMark = 7;
    DecimalDigitNumber = 8;
    LetterNumber = 9;
    OtherNumber = 10;
    SpaceSeparator = 11;
    LineSeparator = 12;
    ParagraphSeparator = 13;
    Control = 14;
    Format = 15;
    Surrogate = 16;
    PrivateUse = 17;
    ConnectorPunctuation = 18;
    DashPunctuation = 19;
    OpenPunctuation = 20;
    ClosePunctuation = 21;
    InitialQuotePunctuation = 22;
    FinalQuotePunctuation = 23;
    OtherPunctuation = 24;
    MathSymbol = 25;
    CurrencySymbol = 26;
    ModifierSymbol = 27;
    OtherSymbol = 28;
    OtherNotAssigned = 29;
  end;


  //-------------namespace: System.IO----------------
  [DNTypeName('System.IO.FileAccess')]
  DNFileAccess = type Integer;
  DNFileAccessHelper = record helper for DNFileAccess
  public const
    Read = 1;
    Write = 2;
    ReadWrite = 3;
  end;


  //-------------namespace: System.IO----------------
  [DNTypeName('System.IO.FileMode')]
  DNFileMode = type Integer;
  DNFileModeHelper = record helper for DNFileMode
  public const
    CreateNew = 1;
    Create = 2;
    Open = 3;
    OpenOrCreate = 4;
    Truncate = 5;
    Append = 6;
  end;


  //-------------namespace: System.IO----------------
  [DNTypeName('System.IO.FileOptions')]
  DNFileOptions = type Integer;
  DNFileOptionsHelper = record helper for DNFileOptions
  public const
    None = 0;
    Encrypted = 16384;
    DeleteOnClose = 67108864;
    SequentialScan = 134217728;
    RandomAccess = 268435456;
    Asynchronous = 1073741824;
    WriteThrough = -2147483648;
  end;


  //-------------namespace: System.IO----------------
  [DNTypeName('System.IO.FileShare')]
  DNFileShare = type Integer;
  DNFileShareHelper = record helper for DNFileShare
  public const
    None = 0;
    Read = 1;
    Write = 2;
    ReadWrite = 3;
    Delete = 4;
    Inheritable = 16;
  end;


  //-------------namespace: System.IO----------------
  [DNTypeName('System.IO.SeekOrigin')]
  DNSeekOrigin = type Integer;
  DNSeekOriginHelper = record helper for DNSeekOrigin
  public const
    Begin_ = 0;
    Current = 1;
    End_ = 2;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.MidpointRounding')]
  DNMidpointRounding = type Integer;
  DNMidpointRoundingHelper = record helper for DNMidpointRounding
  public const
    ToEven = 0;
    AwayFromZero = 1;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.AssemblyContentType')]
  DNAssemblyContentType = type Integer;
  DNAssemblyContentTypeHelper = record helper for DNAssemblyContentType
  public const
    Default_ = 0;
    WindowsRuntime = 1;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.AssemblyNameFlags')]
  DNAssemblyNameFlags = type Integer;
  DNAssemblyNameFlagsHelper = record helper for DNAssemblyNameFlags
  public const
    None = 0;
    PublicKey = 1;
    Retargetable = 256;
    EnableJITcompileOptimizer = 16384;
    EnableJITcompileTracking = 32768;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.BindingFlags')]
  DNBindingFlags = type Integer;
  DNBindingFlagsHelper = record helper for DNBindingFlags
  public const
    Default_ = 0;
    IgnoreCase = 1;
    DeclaredOnly = 2;
    Instance = 4;
    Static_ = 8;
    Public_ = 16;
    NonPublic = 32;
    FlattenHierarchy = 64;
    InvokeMethod = 256;
    CreateInstance = 512;
    GetField = 1024;
    SetField = 2048;
    GetProperty = 4096;
    SetProperty = 8192;
    PutDispProperty = 16384;
    PutRefDispProperty = 32768;
    ExactBinding = 65536;
    SuppressChangeType = 131072;
    OptionalParamBinding = 262144;
    IgnoreReturn = 16777216;
    DoNotWrapExceptions = 33554432;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.CallingConventions')]
  DNCallingConventions = type Integer;
  DNCallingConventionsHelper = record helper for DNCallingConventions
  public const
    Standard = 1;
    VarArgs_ = 2;
    Any = 3;
    HasThis = 32;
    ExplicitThis = 64;
  end;


  //-------------namespace: System.Reflection.Emit----------------
  [DNTypeName('System.Reflection.Emit.AssemblyBuilderAccess')]
  DNAssemblyBuilderAccess = type Integer;
  DNAssemblyBuilderAccessHelper = record helper for DNAssemblyBuilderAccess
  public const
    Run = 1;
    RunAndCollect = 9;
  end;


  //-------------namespace: System.Reflection.Emit----------------
  [DNTypeName('System.Reflection.Emit.FlowControl')]
  DNFlowControl = type Integer;
  DNFlowControlHelper = record helper for DNFlowControl
  public const
    Branch = 0;
    Break = 1;
    Call = 2;
    Cond_Branch = 3;
    Meta = 4;
    Next = 5;
    Phi = 6;
    Return = 7;
    Throw = 8;
  end;


  //-------------namespace: System.Reflection.Emit----------------
  [DNTypeName('System.Reflection.Emit.OpCodeType')]
  DNOpCodeType = type Integer;
  DNOpCodeTypeHelper = record helper for DNOpCodeType
  public const
    Annotation = 0;
    Macro = 1;
    Nternal = 2;
    Objmodel = 3;
    Prefix = 4;
    Primitive = 5;
  end;


  //-------------namespace: System.Reflection.Emit----------------
  [DNTypeName('System.Reflection.Emit.OperandType')]
  DNOperandType = type Integer;
  DNOperandTypeHelper = record helper for DNOperandType
  public const
    InlineBrTarget = 0;
    InlineField = 1;
    InlineI = 2;
    InlineI8 = 3;
    InlineMethod = 4;
    InlineNone = 5;
    InlinePhi = 6;
    InlineR = 7;
    InlineSig = 9;
    InlineString = 10;
    InlineSwitch = 11;
    InlineTok = 12;
    InlineType = 13;
    InlineVar = 14;
    ShortInlineBrTarget = 15;
    ShortInlineI = 16;
    ShortInlineR = 17;
    ShortInlineVar = 18;
  end;


  //-------------namespace: System.Reflection.Emit----------------
  [DNTypeName('System.Reflection.Emit.PackingSize')]
  DNPackingSize = type Integer;
  DNPackingSizeHelper = record helper for DNPackingSize
  public const
    Unspecified = 0;
    Size1 = 1;
    Size2 = 2;
    Size4 = 4;
    Size8 = 8;
    Size16 = 16;
    Size32 = 32;
    Size64 = 64;
    Size128 = 128;
  end;


  //-------------namespace: System.Reflection.Emit----------------
  [DNTypeName('System.Reflection.Emit.PEFileKinds')]
  DNPEFileKinds = type Integer;
  DNPEFileKindsHelper = record helper for DNPEFileKinds
  public const
    Dll = 1;
    ConsoleApplication = 2;
    WindowApplication = 3;
  end;


  //-------------namespace: System.Reflection.Emit----------------
  [DNTypeName('System.Reflection.Emit.StackBehaviour')]
  DNStackBehaviour = type Integer;
  DNStackBehaviourHelper = record helper for DNStackBehaviour
  public const
    Pop0 = 0;
    Pop1 = 1;
    Pop1_pop1 = 2;
    Popi = 3;
    Popi_pop1 = 4;
    Popi_popi = 5;
    Popi_popi8 = 6;
    Popi_popi_popi = 7;
    Popi_popr4 = 8;
    Popi_popr8 = 9;
    Popref = 10;
    Popref_pop1 = 11;
    Popref_popi = 12;
    Popref_popi_popi = 13;
    Popref_popi_popi8 = 14;
    Popref_popi_popr4 = 15;
    Popref_popi_popr8 = 16;
    Popref_popi_popref = 17;
    Push0 = 18;
    Push1 = 19;
    Push1_push1 = 20;
    Pushi = 21;
    Pushi8 = 22;
    Pushr4 = 23;
    Pushr8 = 24;
    Pushref = 25;
    Varpop = 26;
    Varpush = 27;
    Popref_popi_pop1 = 28;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.EventAttributes')]
  DNEventAttributes = type Integer;
  DNEventAttributesHelper = record helper for DNEventAttributes
  public const
    None = 0;
    SpecialName = 512;
    RTSpecialName = 1024;
    ReservedMask = 1024;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.ExceptionHandlingClauseOptions')]
  DNExceptionHandlingClauseOptions = type Integer;
  DNExceptionHandlingClauseOptionsHelper = record helper for DNExceptionHandlingClauseOptions
  public const
    Clause = 0;
    Filter = 1;
    Finally_ = 2;
    Fault = 4;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.FieldAttributes')]
  DNFieldAttributes = type Integer;
  DNFieldAttributesHelper = record helper for DNFieldAttributes
  public const
    PrivateScope = 0;
    Private_ = 1;
    FamANDAssem = 2;
    Assembly = 3;
    Family = 4;
    FamORAssem = 5;
    Public_ = 6;
    FieldAccessMask = 7;
    Static_ = 16;
    InitOnly = 32;
    Literal = 64;
    NotSerialized = 128;
    HasFieldRVA = 256;
    SpecialName = 512;
    RTSpecialName = 1024;
    HasFieldMarshal = 4096;
    PinvokeImpl = 8192;
    HasDefault = 32768;
    ReservedMask = 38144;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.GenericParameterAttributes')]
  DNGenericParameterAttributes = type Integer;
  DNGenericParameterAttributesHelper = record helper for DNGenericParameterAttributes
  public const
    None = 0;
    Covariant = 1;
    Contravariant = 2;
    VarianceMask = 3;
    ReferenceTypeConstraint = 4;
    NotNullableValueTypeConstraint = 8;
    DefaultConstructorConstraint = 16;
    SpecialConstraintMask = 28;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.ImageFileMachine')]
  DNImageFileMachine = type Integer;
  DNImageFileMachineHelper = record helper for DNImageFileMachine
  public const
    I386 = 332;
    ARM = 452;
    IA64 = 512;
    AMD64 = 34404;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.MemberTypes')]
  DNMemberTypes = type Integer;
  DNMemberTypesHelper = record helper for DNMemberTypes
  public const
    Constructor_ = 1;
    Event = 2;
    Field = 4;
    Method = 8;
    Property_ = 16;
    TypeInfo = 32;
    Custom = 64;
    NestedType = 128;
    All = 191;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.MethodAttributes')]
  DNMethodAttributes = type Integer;
  DNMethodAttributesHelper = record helper for DNMethodAttributes
  public const
    ReuseSlot = 0;
    PrivateScope = 0;
    Private_ = 1;
    FamANDAssem = 2;
    Assembly = 3;
    Family = 4;
    FamORAssem = 5;
    Public_ = 6;
    MemberAccessMask = 7;
    UnmanagedExport = 8;
    Static_ = 16;
    Final_ = 32;
    Virtual_ = 64;
    HideBySig = 128;
    NewSlot = 256;
    VtableLayoutMask = 256;
    CheckAccessOnOverride = 512;
    Abstract_ = 1024;
    SpecialName = 2048;
    RTSpecialName = 4096;
    PinvokeImpl = 8192;
    HasSecurity = 16384;
    RequireSecObject = 32768;
    ReservedMask = 53248;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.MethodImplAttributes')]
  DNMethodImplAttributes = type Integer;
  DNMethodImplAttributesHelper = record helper for DNMethodImplAttributes
  public const
    Managed = 0;
    IL = 0;
    Native = 1;
    OPTIL = 2;
    Runtime = 3;
    CodeTypeMask = 3;
    Unmanaged = 4;
    ManagedMask = 4;
    NoInlining = 8;
    ForwardRef = 16;
    Synchronized = 32;
    NoOptimization = 64;
    PreserveSig = 128;
    AggressiveInlining = 256;
    InternalCall = 4096;
    MaxMethodImplVal = 65535;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.ParameterAttributes')]
  DNParameterAttributes = type Integer;
  DNParameterAttributesHelper = record helper for DNParameterAttributes
  public const
    None = 0;
    In_ = 1;
    Out_ = 2;
    Lcid = 4;
    Retval = 8;
    Optional = 16;
    HasDefault = 4096;
    HasFieldMarshal = 8192;
    Reserved3 = 16384;
    Reserved4 = 32768;
    ReservedMask = 61440;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.PortableExecutableKinds')]
  DNPortableExecutableKinds = type Integer;
  DNPortableExecutableKindsHelper = record helper for DNPortableExecutableKinds
  public const
    NotAPortableExecutableImage = 0;
    ILOnly = 1;
    Required32Bit = 2;
    PE32Plus = 4;
    Unmanaged32Bit = 8;
    Preferred32Bit = 16;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.ProcessorArchitecture')]
  DNProcessorArchitecture = type Integer;
  DNProcessorArchitectureHelper = record helper for DNProcessorArchitecture
  public const
    None = 0;
    MSIL = 1;
    X86 = 2;
    IA64 = 3;
    Amd64 = 4;
    Arm = 5;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.PropertyAttributes')]
  DNPropertyAttributes = type Integer;
  DNPropertyAttributesHelper = record helper for DNPropertyAttributes
  public const
    None = 0;
    SpecialName = 512;
    RTSpecialName = 1024;
    HasDefault = 4096;
    Reserved2 = 8192;
    Reserved3 = 16384;
    Reserved4 = 32768;
    ReservedMask = 62464;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.ResourceAttributes')]
  DNResourceAttributes = type Integer;
  DNResourceAttributesHelper = record helper for DNResourceAttributes
  public const
    Public_ = 1;
    Private_ = 2;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.ResourceLocation')]
  DNResourceLocation = type Integer;
  DNResourceLocationHelper = record helper for DNResourceLocation
  public const
    Embedded = 1;
    ContainedInAnotherAssembly = 2;
    ContainedInManifestFile = 4;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.TypeAttributes')]
  DNTypeAttributes = type Integer;
  DNTypeAttributesHelper = record helper for DNTypeAttributes
  public const
    NotPublic = 0;
    AutoLayout = 0;
    AnsiClass = 0;
    Class_ = 0;
    Public_ = 1;
    NestedPublic = 2;
    NestedPrivate = 3;
    NestedFamily = 4;
    NestedAssembly = 5;
    NestedFamANDAssem = 6;
    NestedFamORAssem = 7;
    VisibilityMask = 7;
    SequentialLayout = 8;
    ExplicitLayout = 16;
    LayoutMask = 24;
    Interface_ = 32;
    ClassSemanticsMask = 32;
    Abstract_ = 128;
    Sealed_ = 256;
    SpecialName = 1024;
    RTSpecialName = 2048;
    Import = 4096;
    Serializable = 8192;
    WindowsRuntime = 16384;
    UnicodeClass = 65536;
    AutoClass = 131072;
    CustomFormatClass = 196608;
    StringFormatMask = 196608;
    HasSecurity = 262144;
    ReservedMask = 264192;
    BeforeFieldInit = 1048576;
    CustomFormatMask = 12582912;
  end;


  //-------------namespace: System.Resources----------------
  [DNTypeName('System.Resources.UltimateResourceFallbackLocation')]
  DNUltimateResourceFallbackLocation = type Integer;
  DNUltimateResourceFallbackLocationHelper = record helper for DNUltimateResourceFallbackLocation
  public const
    MainAssembly = 0;
    Satellite = 1;
  end;


  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.CompilationRelaxations')]
  DNCompilationRelaxations = type Integer;
  DNCompilationRelaxationsHelper = record helper for DNCompilationRelaxations
  public const
    NoStringInterning = 8;
  end;


  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.LoadHint')]
  DNLoadHint = type Integer;
  DNLoadHintHelper = record helper for DNLoadHint
  public const
    Default_ = 0;
    Always = 1;
    Sometimes = 2;
  end;


  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.MethodCodeType')]
  DNMethodCodeType = type Integer;
  DNMethodCodeTypeHelper = record helper for DNMethodCodeType
  public const
    IL = 0;
    Native = 1;
    OPTIL = 2;
    Runtime = 3;
  end;


  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.MethodImplOptions')]
  DNMethodImplOptions = type Integer;
  DNMethodImplOptionsHelper = record helper for DNMethodImplOptions
  public const
    Unmanaged = 4;
    NoInlining = 8;
    ForwardRef = 16;
    Synchronized = 32;
    NoOptimization = 64;
    PreserveSig = 128;
    AggressiveInlining = 256;
    InternalCall = 4096;
  end;


  //-------------namespace: System.Runtime.ConstrainedExecution----------------
  [DNTypeName('System.Runtime.ConstrainedExecution.Cer')]
  DNCer = type Integer;
  DNCerHelper = record helper for DNCer
  public const
    None = 0;
    MayFail = 1;
    Success = 2;
  end;


  //-------------namespace: System.Runtime.ConstrainedExecution----------------
  [DNTypeName('System.Runtime.ConstrainedExecution.Consistency')]
  DNConsistency = type Integer;
  DNConsistencyHelper = record helper for DNConsistency
  public const
    MayCorruptProcess = 0;
    MayCorruptAppDomain = 1;
    MayCorruptInstance = 2;
    WillNotCorruptState = 3;
  end;


  //-------------namespace: System.Runtime----------------
  [DNTypeName('System.Runtime.GCLargeObjectHeapCompactionMode')]
  DNGCLargeObjectHeapCompactionMode = type Integer;
  DNGCLargeObjectHeapCompactionModeHelper = record helper for DNGCLargeObjectHeapCompactionMode
  public const
    Default_ = 1;
    CompactOnce = 2;
  end;


  //-------------namespace: System.Runtime----------------
  [DNTypeName('System.Runtime.GCLatencyMode')]
  DNGCLatencyMode = type Integer;
  DNGCLatencyModeHelper = record helper for DNGCLatencyMode
  public const
    Batch = 0;
    Interactive = 1;
    LowLatency = 2;
    SustainedLowLatency = 3;
    NoGCRegion = 4;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.CallingConvention')]
  DNCallingConvention = type Integer;
  DNCallingConventionHelper = record helper for DNCallingConvention
  public const
    Winapi = 1;
    Cdecl_ = 2;
    StdCall_ = 3;
    ThisCall = 4;
    FastCall = 5;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.CharSet')]
  DNCharSet = type Integer;
  DNCharSetHelper = record helper for DNCharSet
  public const
    None = 1;
    Ansi = 2;
    Unicode = 3;
    Auto = 4;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.ClassInterfaceType')]
  DNClassInterfaceType = type Integer;
  DNClassInterfaceTypeHelper = record helper for DNClassInterfaceType
  public const
    None = 0;
    AutoDispatch = 1;
    AutoDual = 2;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.ComInterfaceType')]
  DNComInterfaceType = type Integer;
  DNComInterfaceTypeHelper = record helper for DNComInterfaceType
  public const
    InterfaceIsDual = 0;
    InterfaceIsIUnknown = 1;
    InterfaceIsIDispatch = 2;
    InterfaceIsIInspectable = 3;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.ComMemberType')]
  DNComMemberType = type Integer;
  DNComMemberTypeHelper = record helper for DNComMemberType
  public const
    Method = 0;
    PropGet = 1;
    PropSet = 2;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.CALLCONV')]
  DNCALLCONV = type Integer;
  DNCALLCONVHelper = record helper for DNCALLCONV
  public const
    CC_CDECL = 1;
    CC_MSCPASCAL = 2;
    CC_PASCAL = 2;
    CC_MACPASCAL = 3;
    CC_STDCALL = 4;
    CC_RESERVED = 5;
    CC_SYSCALL = 6;
    CC_MPWCDECL = 7;
    CC_MPWPASCAL = 8;
    CC_MAX = 9;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.DESCKIND')]
  DNDESCKIND = type Integer;
  DNDESCKINDHelper = record helper for DNDESCKIND
  public const
    DESCKIND_NONE = 0;
    DESCKIND_FUNCDESC = 1;
    DESCKIND_VARDESC = 2;
    DESCKIND_TYPECOMP = 3;
    DESCKIND_IMPLICITAPPOBJ = 4;
    DESCKIND_MAX = 5;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.FUNCFLAGS')]
  DNFUNCFLAGS = type Integer;
  DNFUNCFLAGSHelper = record helper for DNFUNCFLAGS
  public const
    FUNCFLAG_FRESTRICTED = 1;
    FUNCFLAG_FSOURCE = 2;
    FUNCFLAG_FBINDABLE = 4;
    FUNCFLAG_FREQUESTEDIT = 8;
    FUNCFLAG_FDISPLAYBIND = 16;
    FUNCFLAG_FDEFAULTBIND = 32;
    FUNCFLAG_FHIDDEN = 64;
    FUNCFLAG_FUSESGETLASTERROR = 128;
    FUNCFLAG_FDEFAULTCOLLELEM = 256;
    FUNCFLAG_FUIDEFAULT = 512;
    FUNCFLAG_FNONBROWSABLE = 1024;
    FUNCFLAG_FREPLACEABLE = 2048;
    FUNCFLAG_FIMMEDIATEBIND = 4096;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.FUNCKIND')]
  DNFUNCKIND = type Integer;
  DNFUNCKINDHelper = record helper for DNFUNCKIND
  public const
    FUNC_VIRTUAL = 0;
    FUNC_PUREVIRTUAL = 1;
    FUNC_NONVIRTUAL = 2;
    FUNC_STATIC = 3;
    FUNC_DISPATCH = 4;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IDLFLAG')]
  DNIDLFLAG = type Integer;
  DNIDLFLAGHelper = record helper for DNIDLFLAG
  public const
    IDLFLAG_NONE = 0;
    IDLFLAG_FIN = 1;
    IDLFLAG_FOUT = 2;
    IDLFLAG_FLCID = 4;
    IDLFLAG_FRETVAL = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS')]
  DNIMPLTYPEFLAGS = type Integer;
  DNIMPLTYPEFLAGSHelper = record helper for DNIMPLTYPEFLAGS
  public const
    IMPLTYPEFLAG_FDEFAULT = 1;
    IMPLTYPEFLAG_FSOURCE = 2;
    IMPLTYPEFLAG_FRESTRICTED = 4;
    IMPLTYPEFLAG_FDEFAULTVTABLE = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.INVOKEKIND')]
  DNINVOKEKIND = type Integer;
  DNINVOKEKINDHelper = record helper for DNINVOKEKIND
  public const
    INVOKE_FUNC = 1;
    INVOKE_PROPERTYGET = 2;
    INVOKE_PROPERTYPUT = 4;
    INVOKE_PROPERTYPUTREF = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.LIBFLAGS')]
  DNLIBFLAGS = type Integer;
  DNLIBFLAGSHelper = record helper for DNLIBFLAGS
  public const
    LIBFLAG_FRESTRICTED = 1;
    LIBFLAG_FCONTROL = 2;
    LIBFLAG_FHIDDEN = 4;
    LIBFLAG_FHASDISKIMAGE = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.PARAMFLAG')]
  DNPARAMFLAG = type Integer;
  DNPARAMFLAGHelper = record helper for DNPARAMFLAG
  public const
    PARAMFLAG_NONE = 0;
    PARAMFLAG_FIN = 1;
    PARAMFLAG_FOUT = 2;
    PARAMFLAG_FLCID = 4;
    PARAMFLAG_FRETVAL = 8;
    PARAMFLAG_FOPT = 16;
    PARAMFLAG_FHASDEFAULT = 32;
    PARAMFLAG_FHASCUSTDATA = 64;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.SYSKIND')]
  DNSYSKIND = type Integer;
  DNSYSKINDHelper = record helper for DNSYSKIND
  public const
    SYS_WIN16 = 0;
    SYS_WIN32 = 1;
    SYS_MAC = 2;
    SYS_WIN64 = 3;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.TYPEFLAGS')]
  DNTYPEFLAGS = type Integer;
  DNTYPEFLAGSHelper = record helper for DNTYPEFLAGS
  public const
    TYPEFLAG_FAPPOBJECT = 1;
    TYPEFLAG_FCANCREATE = 2;
    TYPEFLAG_FLICENSED = 4;
    TYPEFLAG_FPREDECLID = 8;
    TYPEFLAG_FHIDDEN = 16;
    TYPEFLAG_FCONTROL = 32;
    TYPEFLAG_FDUAL = 64;
    TYPEFLAG_FNONEXTENSIBLE = 128;
    TYPEFLAG_FOLEAUTOMATION = 256;
    TYPEFLAG_FRESTRICTED = 512;
    TYPEFLAG_FAGGREGATABLE = 1024;
    TYPEFLAG_FREPLACEABLE = 2048;
    TYPEFLAG_FDISPATCHABLE = 4096;
    TYPEFLAG_FREVERSEBIND = 8192;
    TYPEFLAG_FPROXY = 16384;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.TYPEKIND')]
  DNTYPEKIND = type Integer;
  DNTYPEKINDHelper = record helper for DNTYPEKIND
  public const
    TKIND_ENUM = 0;
    TKIND_RECORD = 1;
    TKIND_MODULE = 2;
    TKIND_INTERFACE = 3;
    TKIND_DISPATCH = 4;
    TKIND_COCLASS = 5;
    TKIND_ALIAS = 6;
    TKIND_UNION = 7;
    TKIND_MAX = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.VARFLAGS')]
  DNVARFLAGS = type Integer;
  DNVARFLAGSHelper = record helper for DNVARFLAGS
  public const
    VARFLAG_FREADONLY = 1;
    VARFLAG_FSOURCE = 2;
    VARFLAG_FBINDABLE = 4;
    VARFLAG_FREQUESTEDIT = 8;
    VARFLAG_FDISPLAYBIND = 16;
    VARFLAG_FDEFAULTBIND = 32;
    VARFLAG_FHIDDEN = 64;
    VARFLAG_FRESTRICTED = 128;
    VARFLAG_FDEFAULTCOLLELEM = 256;
    VARFLAG_FUIDEFAULT = 512;
    VARFLAG_FNONBROWSABLE = 1024;
    VARFLAG_FREPLACEABLE = 2048;
    VARFLAG_FIMMEDIATEBIND = 4096;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.VARKIND')]
  DNVARKIND = type Integer;
  DNVARKINDHelper = record helper for DNVARKIND
  public const
    VAR_PERINSTANCE = 0;
    VAR_STATIC = 1;
    VAR_CONST = 2;
    VAR_DISPATCH = 3;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.CustomQueryInterfaceMode')]
  DNCustomQueryInterfaceMode = type Integer;
  DNCustomQueryInterfaceModeHelper = record helper for DNCustomQueryInterfaceMode
  public const
    Ignore = 0;
    Allow = 1;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.CustomQueryInterfaceResult')]
  DNCustomQueryInterfaceResult = type Integer;
  DNCustomQueryInterfaceResultHelper = record helper for DNCustomQueryInterfaceResult
  public const
    Handled = 0;
    NotHandled = 1;
    Failed = 2;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.DllImportSearchPath')]
  DNDllImportSearchPath = type Integer;
  DNDllImportSearchPathHelper = record helper for DNDllImportSearchPath
  public const
    LegacyBehavior = 0;
    AssemblyDirectory = 2;
    UseDllDirectoryForDependencies = 256;
    ApplicationDirectory = 512;
    UserDirectories = 1024;
    System32 = 2048;
    SafeDirectories = 4096;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.GCHandleType')]
  DNGCHandleType = type Integer;
  DNGCHandleTypeHelper = record helper for DNGCHandleType
  public const
    Weak = 0;
    WeakTrackResurrection = 1;
    Normal = 2;
    Pinned = 3;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.LayoutKind')]
  DNLayoutKind = type Integer;
  DNLayoutKindHelper = record helper for DNLayoutKind
  public const
    Sequential = 0;
    Explicit = 2;
    Auto = 3;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.UnmanagedType')]
  DNUnmanagedType = type Integer;
  DNUnmanagedTypeHelper = record helper for DNUnmanagedType
  public const
    Bool = 2;
    I1 = 3;
    U1 = 4;
    I2 = 5;
    U2 = 6;
    I4 = 7;
    U4 = 8;
    I8 = 9;
    U8 = 10;
    R4 = 11;
    R8 = 12;
    Currency = 15;
    BStr = 19;
    LPStr = 20;
    LPWStr = 21;
    LPTStr = 22;
    ByValTStr = 23;
    IUnknown = 25;
    IDispatch = 26;
    Struct = 27;
    Interface_ = 28;
    SafeArray = 29;
    ByValArray = 30;
    SysInt = 31;
    SysUInt = 32;
    VBByRefStr = 34;
    AnsiBStr = 35;
    TBStr = 36;
    VariantBool = 37;
    FunctionPtr = 38;
    AsAny = 40;
    LPArray = 42;
    LPStruct = 43;
    CustomMarshaler = 44;
    Error = 45;
    IInspectable = 46;
    HString = 47;
    LPUTF8Str = 48;
  end;


  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.VarEnum')]
  DNVarEnum = type Integer;
  DNVarEnumHelper = record helper for DNVarEnum
  public const
    VT_EMPTY = 0;
    VT_NULL = 1;
    VT_I2 = 2;
    VT_I4 = 3;
    VT_R4 = 4;
    VT_R8 = 5;
    VT_CY = 6;
    VT_DATE = 7;
    VT_BSTR = 8;
    VT_DISPATCH = 9;
    VT_ERROR = 10;
    VT_BOOL = 11;
    VT_VARIANT = 12;
    VT_UNKNOWN = 13;
    VT_DECIMAL = 14;
    VT_I1 = 16;
    VT_UI1 = 17;
    VT_UI2 = 18;
    VT_UI4 = 19;
    VT_I8 = 20;
    VT_UI8 = 21;
    VT_INT = 22;
    VT_UINT = 23;
    VT_VOID = 24;
    VT_HRESULT = 25;
    VT_PTR = 26;
    VT_SAFEARRAY = 27;
    VT_CARRAY = 28;
    VT_USERDEFINED = 29;
    VT_LPSTR = 30;
    VT_LPWSTR = 31;
    VT_RECORD = 36;
    VT_FILETIME = 64;
    VT_BLOB = 65;
    VT_STREAM = 66;
    VT_STORAGE = 67;
    VT_STREAMED_OBJECT = 68;
    VT_STORED_OBJECT = 69;
    VT_BLOB_OBJECT = 70;
    VT_CF = 71;
    VT_CLSID = 72;
    VT_VECTOR = 4096;
    VT_ARRAY = 8192;
    VT_BYREF = 16384;
  end;


  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  [DNTypeName('System.Runtime.Intrinsics.X86.FloatComparisonMode')]
  DNFloatComparisonMode = type Integer;
  DNFloatComparisonModeHelper = record helper for DNFloatComparisonMode
  public const
    EqualOrderedNonSignaling = 0;
    LessThanOrderedSignaling = 1;
    LessThanOrEqualOrderedSignaling = 2;
    UnorderedNonSignaling = 3;
    NotEqualUnorderedNonSignaling = 4;
    NotLessThanUnorderedSignaling = 5;
    NotLessThanOrEqualUnorderedSignaling = 6;
    OrderedNonSignaling = 7;
    EqualUnorderedNonSignaling = 8;
    NotGreaterThanOrEqualUnorderedSignaling = 9;
    NotGreaterThanUnorderedSignaling = 10;
    FalseOrderedNonSignaling = 11;
    NotEqualOrderedNonSignaling = 12;
    GreaterThanOrEqualOrderedSignaling = 13;
    GreaterThanOrderedSignaling = 14;
    TrueUnorderedNonSignaling = 15;
    EqualOrderedSignaling = 16;
    LessThanOrderedNonSignaling = 17;
    LessThanOrEqualOrderedNonSignaling = 18;
    UnorderedSignaling = 19;
    NotEqualUnorderedSignaling = 20;
    NotLessThanUnorderedNonSignaling = 21;
    NotLessThanOrEqualUnorderedNonSignaling = 22;
    OrderedSignaling = 23;
    EqualUnorderedSignaling = 24;
    NotGreaterThanOrEqualUnorderedNonSignaling = 25;
    NotGreaterThanUnorderedNonSignaling = 26;
    FalseOrderedSignaling = 27;
    NotEqualOrderedSignaling = 28;
    GreaterThanOrEqualOrderedNonSignaling = 29;
    GreaterThanOrderedNonSignaling = 30;
    TrueUnorderedSignaling = 31;
  end;


  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  [DNTypeName('System.Runtime.Intrinsics.X86.ResultsFlag')]
  DNResultsFlag = type Integer;
  DNResultsFlagHelper = record helper for DNResultsFlag
  public const
    CFlag = 0;
    NotCFlagAndNotZFlag = 1;
    OFlag = 2;
    SFlag = 3;
    ZFlag = 4;
  end;


  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  [DNTypeName('System.Runtime.Intrinsics.X86.StringComparisonMode')]
  DNStringComparisonMode = type Integer;
  DNStringComparisonModeHelper = record helper for DNStringComparisonMode
  public const
    EqualAny = 0;
    LeastSignificant = 0;
    Ranges = 4;
    EqualEach = 8;
    EqualOrdered = 12;
    NegativePolarity = 16;
    MaskedNegativePolarity = 48;
    MostSignificant = 64;
  end;


  //-------------namespace: System.Runtime.Serialization----------------
  [DNTypeName('System.Runtime.Serialization.StreamingContextStates')]
  DNStreamingContextStates = type Integer;
  DNStreamingContextStatesHelper = record helper for DNStreamingContextStates
  public const
    CrossProcess = 1;
    CrossMachine = 2;
    File_ = 4;
    Persistence = 8;
    Remoting = 16;
    Other = 32;
    Clone = 64;
    CrossAppDomain = 128;
    All = 255;
  end;


  //-------------namespace: System.Security----------------
  [DNTypeName('System.Security.PartialTrustVisibilityLevel')]
  DNPartialTrustVisibilityLevel = type Integer;
  DNPartialTrustVisibilityLevelHelper = record helper for DNPartialTrustVisibilityLevel
  public const
    VisibleToAllHosts = 0;
    NotVisibleByDefault = 1;
  end;


  //-------------namespace: System.Security----------------
  [DNTypeName('System.Security.SecurityCriticalScope')]
  DNSecurityCriticalScope = type Integer;
  DNSecurityCriticalScopeHelper = record helper for DNSecurityCriticalScope
  public const
    Explicit = 0;
    Everything = 1;
  end;


  //-------------namespace: System.Security----------------
  [DNTypeName('System.Security.SecurityRuleSet')]
  DNSecurityRuleSet = type Integer;
  DNSecurityRuleSetHelper = record helper for DNSecurityRuleSet
  public const
    None = 0;
    Level1 = 1;
    Level2 = 2;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.StringComparison')]
  DNStringComparison = type Integer;
  DNStringComparisonHelper = record helper for DNStringComparison
  public const
    CurrentCulture = 0;
    CurrentCultureIgnoreCase = 1;
    InvariantCulture = 2;
    InvariantCultureIgnoreCase = 3;
    Ordinal = 4;
    OrdinalIgnoreCase = 5;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.StringSplitOptions')]
  DNStringSplitOptions = type Integer;
  DNStringSplitOptionsHelper = record helper for DNStringSplitOptions
  public const
    None = 0;
    RemoveEmptyEntries = 1;
  end;


  //-------------namespace: System.Text----------------
  [DNTypeName('System.Text.NormalizationForm')]
  DNNormalizationForm = type Integer;
  DNNormalizationFormHelper = record helper for DNNormalizationForm
  public const
    FormC = 1;
    FormD = 2;
    FormKC = 5;
    FormKD = 6;
  end;


  //-------------namespace: System.Threading----------------
  [DNTypeName('System.Threading.ApartmentState')]
  DNApartmentState = type Integer;
  DNApartmentStateHelper = record helper for DNApartmentState
  public const
    STA = 0;
    MTA = 1;
    Unknown = 2;
  end;


  //-------------namespace: System.Threading----------------
  [DNTypeName('System.Threading.EventResetMode')]
  DNEventResetMode = type Integer;
  DNEventResetModeHelper = record helper for DNEventResetMode
  public const
    AutoReset = 0;
    ManualReset = 1;
  end;


  //-------------namespace: System.Threading----------------
  [DNTypeName('System.Threading.LazyThreadSafetyMode')]
  DNLazyThreadSafetyMode = type Integer;
  DNLazyThreadSafetyModeHelper = record helper for DNLazyThreadSafetyMode
  public const
    None = 0;
    PublicationOnly = 1;
    ExecutionAndPublication = 2;
  end;


  //-------------namespace: System.Threading----------------
  [DNTypeName('System.Threading.LockRecursionPolicy')]
  DNLockRecursionPolicy = type Integer;
  DNLockRecursionPolicyHelper = record helper for DNLockRecursionPolicy
  public const
    NoRecursion = 0;
    SupportsRecursion = 1;
  end;


  //-------------namespace: System.Threading.Tasks.Sources----------------
  [DNTypeName('System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags')]
  DNValueTaskSourceOnCompletedFlags = type Integer;
  DNValueTaskSourceOnCompletedFlagsHelper = record helper for DNValueTaskSourceOnCompletedFlags
  public const
    None = 0;
    UseSchedulingContext = 1;
    FlowExecutionContext = 2;
  end;


  //-------------namespace: System.Threading.Tasks.Sources----------------
  [DNTypeName('System.Threading.Tasks.Sources.ValueTaskSourceStatus')]
  DNValueTaskSourceStatus = type Integer;
  DNValueTaskSourceStatusHelper = record helper for DNValueTaskSourceStatus
  public const
    Pending = 0;
    Succeeded = 1;
    Faulted = 2;
    Canceled = 3;
  end;


  //-------------namespace: System.Threading.Tasks----------------
  [DNTypeName('System.Threading.Tasks.TaskContinuationOptions')]
  DNTaskContinuationOptions = type Integer;
  DNTaskContinuationOptionsHelper = record helper for DNTaskContinuationOptions
  public const
    None = 0;
    PreferFairness = 1;
    LongRunning = 2;
    AttachedToParent = 4;
    DenyChildAttach = 8;
    HideScheduler = 16;
    LazyCancellation = 32;
    RunContinuationsAsynchronously = 64;
    NotOnRanToCompletion = 65536;
    NotOnFaulted = 131072;
    OnlyOnCanceled = 196608;
    NotOnCanceled = 262144;
    OnlyOnFaulted = 327680;
    OnlyOnRanToCompletion = 393216;
    ExecuteSynchronously = 524288;
  end;


  //-------------namespace: System.Threading.Tasks----------------
  [DNTypeName('System.Threading.Tasks.TaskCreationOptions')]
  DNTaskCreationOptions = type Integer;
  DNTaskCreationOptionsHelper = record helper for DNTaskCreationOptions
  public const
    None = 0;
    PreferFairness = 1;
    LongRunning = 2;
    AttachedToParent = 4;
    DenyChildAttach = 8;
    HideScheduler = 16;
    RunContinuationsAsynchronously = 64;
  end;


  //-------------namespace: System.Threading.Tasks----------------
  [DNTypeName('System.Threading.Tasks.TaskStatus')]
  DNTaskStatus = type Integer;
  DNTaskStatusHelper = record helper for DNTaskStatus
  public const
    Created = 0;
    WaitingForActivation = 1;
    WaitingToRun = 2;
    Running = 3;
    WaitingForChildrenToComplete = 4;
    RanToCompletion = 5;
    Canceled = 6;
    Faulted = 7;
  end;


  //-------------namespace: System.Threading----------------
  [DNTypeName('System.Threading.ThreadPriority')]
  DNThreadPriority = type Integer;
  DNThreadPriorityHelper = record helper for DNThreadPriority
  public const
    Lowest = 0;
    BelowNormal = 1;
    Normal = 2;
    AboveNormal = 3;
    Highest = 4;
  end;


  //-------------namespace: System.Threading----------------
  [DNTypeName('System.Threading.ThreadState')]
  DNThreadState = type Integer;
  DNThreadStateHelper = record helper for DNThreadState
  public const
    Running = 0;
    StopRequested = 1;
    SuspendRequested = 2;
    Background = 4;
    Unstarted = 8;
    Stopped = 16;
    WaitSleepJoin = 32;
    Suspended = 64;
    AbortRequested = 128;
    Aborted = 256;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.TypeCode')]
  DNTypeCode = type Integer;
  DNTypeCodeHelper = record helper for DNTypeCode
  public const
    Empty = 0;
    Object_ = 1;
    DBNull = 2;
    Boolean = 3;
    Char = 4;
    SByte = 5;
    Byte = 6;
    Int16 = 7;
    UInt16 = 8;
    Int32 = 9;
    UInt32 = 10;
    Int64 = 11;
    UInt64 = 12;
    Single = 13;
    Double = 14;
    Decimal = 15;
    DateTime = 16;
    String_ = 18;
  end;




type


{ declares }

  DNObject = interface; // System.Object
  DNIDisposable = interface; // type: System.IDisposable, namespace: System
  DNIEnumerator = interface; // type: System.Collections.IEnumerator, namespace: System.Collections
  DNIEnumerator<T> = interface; // type: System.Collections.Generic.IEnumerator`1, namespace: System.Collections.Generic
  DNIEnumerable = interface; // type: System.Collections.IEnumerable, namespace: System.Collections
  DNIEnumerable<T> = interface; // type: System.Collections.Generic.IEnumerable`1, namespace: System.Collections.Generic
  DNICollection = interface; // type: System.Collections.ICollection, namespace: System.Collections
  DNICollection<T> = interface; // type: System.Collections.Generic.ICollection`1, namespace: System.Collections.Generic
  DNIList = interface; // type: System.Collections.IList, namespace: System.Collections
  DNIList<T> = interface; // type: System.Collections.Generic.IList`1, namespace: System.Collections.Generic
  DNIDictionary = interface; // type: System.Collections.IDictionary, namespace: System.Collections
  DNIDictionary<TKey, TValue> = interface; // type: System.Collections.Generic.IDictionary`2, namespace: System.Collections.Generic
  DNIComparer = interface; // type: System.Collections.IComparer, namespace: System.Collections
  DNIComparer<T> = interface; // type: System.Collections.Generic.IComparer`1, namespace: System.Collections.Generic
  DNIEqualityComparer = interface; // type: System.Collections.IEqualityComparer, namespace: System.Collections
  DNEqualityComparer<T> = interface; // type: System.Collections.Generic.EqualityComparer`1, namespace: System.Collections.Generic
  DNIPinnable = interface; // type: System.Buffers.IPinnable, namespace: System.Buffers
  DNIEqualityComparer<T> = interface; // type: System.Collections.Generic.IEqualityComparer`1, namespace: System.Collections.Generic
  DNIReadOnlyCollection<T> = interface; // type: System.Collections.Generic.IReadOnlyCollection`1, namespace: System.Collections.Generic
  DNIReadOnlyDictionary<TKey, TValue> = interface; // type: System.Collections.Generic.IReadOnlyDictionary`2, namespace: System.Collections.Generic
  DNIReadOnlyList<T> = interface; // type: System.Collections.Generic.IReadOnlyList`1, namespace: System.Collections.Generic
  DNIResourceReader = interface; // type: System.Resources.IResourceReader, namespace: System.Resources
  DNIDictionaryEnumerator = interface; // type: System.Collections.IDictionaryEnumerator, namespace: System.Collections
  DNIStructuralComparable = interface; // type: System.Collections.IStructuralComparable, namespace: System.Collections
  DNIStructuralEquatable = interface; // type: System.Collections.IStructuralEquatable, namespace: System.Collections
  DNISymbolDocumentWriter = interface; // type: System.Diagnostics.SymbolStore.ISymbolDocumentWriter, namespace: System.Diagnostics.SymbolStore
  DNIAsyncResult = interface; // type: System.IAsyncResult, namespace: System
  DNICloneable = interface; // type: System.ICloneable, namespace: System
  DNIComparable<T> = interface; // type: System.IComparable`1, namespace: System
  DNIComparable = interface; // type: System.IComparable, namespace: System
  DNIConvertible = interface; // type: System.IConvertible, namespace: System
  DNICustomFormatter = interface; // type: System.ICustomFormatter, namespace: System
  DNIMemoryOwner<T> = interface; // type: System.Buffers.IMemoryOwner`1, namespace: System.Buffers
  DNIEquatable<T> = interface; // type: System.IEquatable`1, namespace: System
  DNIFormatProvider = interface; // type: System.IFormatProvider, namespace: System
  DNIFormattable = interface; // type: System.IFormattable, namespace: System
  DNIObservable<T> = interface; // type: System.IObservable`1, namespace: System
  DNIObserver<T> = interface; // type: System.IObserver`1, namespace: System
  DNIProgress<T> = interface; // type: System.IProgress`1, namespace: System
  DNICustomAttributeProvider = interface; // type: System.Reflection.ICustomAttributeProvider, namespace: System.Reflection
  DNIReflect = interface; // type: System.Reflection.IReflect, namespace: System.Reflection
  DNIReflectableType = interface; // type: System.Reflection.IReflectableType, namespace: System.Reflection
  DNIAsyncStateMachine = interface; // type: System.Runtime.CompilerServices.IAsyncStateMachine, namespace: System.Runtime.CompilerServices
  DNICastable = interface; // type: System.Runtime.CompilerServices.ICastable, namespace: System.Runtime.CompilerServices
  DNINotifyCompletion = interface; // type: System.Runtime.CompilerServices.INotifyCompletion, namespace: System.Runtime.CompilerServices
  DNICriticalNotifyCompletion = interface; // type: System.Runtime.CompilerServices.ICriticalNotifyCompletion, namespace: System.Runtime.CompilerServices
  DNIStrongBox = interface; // type: System.Runtime.CompilerServices.IStrongBox, namespace: System.Runtime.CompilerServices
  DNITuple = interface; // type: System.Runtime.CompilerServices.ITuple, namespace: System.Runtime.CompilerServices
  DNIBindCtx = interface; // type: System.Runtime.InteropServices.ComTypes.IBindCtx, namespace: System.Runtime.InteropServices.ComTypes
  DNIConnectionPoint = interface; // type: System.Runtime.InteropServices.ComTypes.IConnectionPoint, namespace: System.Runtime.InteropServices.ComTypes
  DNIConnectionPointContainer = interface; // type: System.Runtime.InteropServices.ComTypes.IConnectionPointContainer, namespace: System.Runtime.InteropServices.ComTypes
  DNIEnumConnectionPoints = interface; // type: System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints, namespace: System.Runtime.InteropServices.ComTypes
  DNIEnumConnections = interface; // type: System.Runtime.InteropServices.ComTypes.IEnumConnections, namespace: System.Runtime.InteropServices.ComTypes
  DNIEnumMoniker = interface; // type: System.Runtime.InteropServices.ComTypes.IEnumMoniker, namespace: System.Runtime.InteropServices.ComTypes
  DNIEnumString = interface; // type: System.Runtime.InteropServices.ComTypes.IEnumString, namespace: System.Runtime.InteropServices.ComTypes
  DNIEnumVARIANT = interface; // type: System.Runtime.InteropServices.ComTypes.IEnumVARIANT, namespace: System.Runtime.InteropServices.ComTypes
  DNIMoniker = interface; // type: System.Runtime.InteropServices.ComTypes.IMoniker, namespace: System.Runtime.InteropServices.ComTypes
  DNIPersistFile = interface; // type: System.Runtime.InteropServices.ComTypes.IPersistFile, namespace: System.Runtime.InteropServices.ComTypes
  DNIRunningObjectTable = interface; // type: System.Runtime.InteropServices.ComTypes.IRunningObjectTable, namespace: System.Runtime.InteropServices.ComTypes
  DNIStream = interface; // type: System.Runtime.InteropServices.ComTypes.IStream, namespace: System.Runtime.InteropServices.ComTypes
  DNITypeComp = interface; // type: System.Runtime.InteropServices.ComTypes.ITypeComp, namespace: System.Runtime.InteropServices.ComTypes
  DNITypeInfo = interface; // type: System.Runtime.InteropServices.ComTypes.ITypeInfo, namespace: System.Runtime.InteropServices.ComTypes
  DNITypeInfo2 = interface; // type: System.Runtime.InteropServices.ComTypes.ITypeInfo2, namespace: System.Runtime.InteropServices.ComTypes
  DNITypeLib = interface; // type: System.Runtime.InteropServices.ComTypes.ITypeLib, namespace: System.Runtime.InteropServices.ComTypes
  DNITypeLib2 = interface; // type: System.Runtime.InteropServices.ComTypes.ITypeLib2, namespace: System.Runtime.InteropServices.ComTypes
  DNICustomAdapter = interface; // type: System.Runtime.InteropServices.ICustomAdapter, namespace: System.Runtime.InteropServices
  DNICustomFactory = interface; // type: System.Runtime.InteropServices.ICustomFactory, namespace: System.Runtime.InteropServices
  DNICustomMarshaler = interface; // type: System.Runtime.InteropServices.ICustomMarshaler, namespace: System.Runtime.InteropServices
  DNICustomQueryInterface = interface; // type: System.Runtime.InteropServices.ICustomQueryInterface, namespace: System.Runtime.InteropServices
  DNIActivationFactory = interface; // type: System.Runtime.InteropServices.WindowsRuntime.IActivationFactory, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNIDeserializationCallback = interface; // type: System.Runtime.Serialization.IDeserializationCallback, namespace: System.Runtime.Serialization
  DNIFormatterConverter = interface; // type: System.Runtime.Serialization.IFormatterConverter, namespace: System.Runtime.Serialization
  DNIObjectReference = interface; // type: System.Runtime.Serialization.IObjectReference, namespace: System.Runtime.Serialization
  DNISafeSerializationData = interface; // type: System.Runtime.Serialization.ISafeSerializationData, namespace: System.Runtime.Serialization
  DNISerializable = interface; // type: System.Runtime.Serialization.ISerializable, namespace: System.Runtime.Serialization
  DNIValueTaskSource<TResult> = interface; // type: System.Threading.Tasks.Sources.IValueTaskSource`1, namespace: System.Threading.Tasks.Sources
  DNIValueTaskSource = interface; // type: System.Threading.Tasks.Sources.IValueTaskSource, namespace: System.Threading.Tasks.Sources
  DNConsole = interface; // type: Internal.Console, namespace: Internal
  DNEnvironmentAugments = interface; // type: Internal.Runtime.Augments.EnvironmentAugments, namespace: Internal.Runtime.Augments
  DNUnsafe = interface; // type: Internal.Runtime.CompilerServices.Unsafe, namespace: Internal.Runtime.CompilerServices
  DNActivator = interface; // type: System.Activator, namespace: System
  DNAppContext = interface; // type: System.AppContext, namespace: System
  DNArray = interface; // type: System.Array, namespace: System
  DNAttribute = interface; // type: System.Attribute, namespace: System
  DNAttributeUsageAttribute = interface; // type: System.AttributeUsageAttribute, namespace: System
  DNCLSCompliantAttribute = interface; // type: System.CLSCompliantAttribute, namespace: System
  DNDefaultValueAttribute = interface; // type: System.ComponentModel.DefaultValueAttribute, namespace: System.ComponentModel
  DNEditorBrowsableAttribute = interface; // type: System.ComponentModel.EditorBrowsableAttribute, namespace: System.ComponentModel
  DNSuppressMessageAttribute = interface; // type: System.Diagnostics.CodeAnalysis.SuppressMessageAttribute, namespace: System.Diagnostics.CodeAnalysis
  DNConditionalAttribute = interface; // type: System.Diagnostics.ConditionalAttribute, namespace: System.Diagnostics
  DNContractAbbreviatorAttribute = interface; // type: System.Diagnostics.Contracts.ContractAbbreviatorAttribute, namespace: System.Diagnostics.Contracts
  DNContractArgumentValidatorAttribute = interface; // type: System.Diagnostics.Contracts.ContractArgumentValidatorAttribute, namespace: System.Diagnostics.Contracts
  DNContractClassAttribute = interface; // type: System.Diagnostics.Contracts.ContractClassAttribute, namespace: System.Diagnostics.Contracts
  DNContractClassForAttribute = interface; // type: System.Diagnostics.Contracts.ContractClassForAttribute, namespace: System.Diagnostics.Contracts
  DNContractInvariantMethodAttribute = interface; // type: System.Diagnostics.Contracts.ContractInvariantMethodAttribute, namespace: System.Diagnostics.Contracts
  DNContractOptionAttribute = interface; // type: System.Diagnostics.Contracts.ContractOptionAttribute, namespace: System.Diagnostics.Contracts
  DNContractPublicPropertyNameAttribute = interface; // type: System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute, namespace: System.Diagnostics.Contracts
  DNContractReferenceAssemblyAttribute = interface; // type: System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute, namespace: System.Diagnostics.Contracts
  DNContractRuntimeIgnoredAttribute = interface; // type: System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute, namespace: System.Diagnostics.Contracts
  DNContractVerificationAttribute = interface; // type: System.Diagnostics.Contracts.ContractVerificationAttribute, namespace: System.Diagnostics.Contracts
  DNPureAttribute = interface; // type: System.Diagnostics.Contracts.PureAttribute, namespace: System.Diagnostics.Contracts
  DNDebuggableAttribute = interface; // type: System.Diagnostics.DebuggableAttribute, namespace: System.Diagnostics
  DNDebuggerBrowsableAttribute = interface; // type: System.Diagnostics.DebuggerBrowsableAttribute, namespace: System.Diagnostics
  DNDebuggerDisplayAttribute = interface; // type: System.Diagnostics.DebuggerDisplayAttribute, namespace: System.Diagnostics
  DNDebuggerHiddenAttribute = interface; // type: System.Diagnostics.DebuggerHiddenAttribute, namespace: System.Diagnostics
  DNDebuggerNonUserCodeAttribute = interface; // type: System.Diagnostics.DebuggerNonUserCodeAttribute, namespace: System.Diagnostics
  DNDebuggerStepperBoundaryAttribute = interface; // type: System.Diagnostics.DebuggerStepperBoundaryAttribute, namespace: System.Diagnostics
  DNDebuggerStepThroughAttribute = interface; // type: System.Diagnostics.DebuggerStepThroughAttribute, namespace: System.Diagnostics
  DNDebuggerTypeProxyAttribute = interface; // type: System.Diagnostics.DebuggerTypeProxyAttribute, namespace: System.Diagnostics
  DNDebuggerVisualizerAttribute = interface; // type: System.Diagnostics.DebuggerVisualizerAttribute, namespace: System.Diagnostics
  DNEventAttribute = interface; // type: System.Diagnostics.Tracing.EventAttribute, namespace: System.Diagnostics.Tracing
  DNEventDataAttribute = interface; // type: System.Diagnostics.Tracing.EventDataAttribute, namespace: System.Diagnostics.Tracing
  DNEventFieldAttribute = interface; // type: System.Diagnostics.Tracing.EventFieldAttribute, namespace: System.Diagnostics.Tracing
  DNEventIgnoreAttribute = interface; // type: System.Diagnostics.Tracing.EventIgnoreAttribute, namespace: System.Diagnostics.Tracing
  DNEventSourceAttribute = interface; // type: System.Diagnostics.Tracing.EventSourceAttribute, namespace: System.Diagnostics.Tracing
  DNNonEventAttribute = interface; // type: System.Diagnostics.Tracing.NonEventAttribute, namespace: System.Diagnostics.Tracing
  DNFlagsAttribute = interface; // type: System.FlagsAttribute, namespace: System
  DNMTAThreadAttribute = interface; // type: System.MTAThreadAttribute, namespace: System
  DNNonSerializedAttribute = interface; // type: System.NonSerializedAttribute, namespace: System
  DNObsoleteAttribute = interface; // type: System.ObsoleteAttribute, namespace: System
  DNParamArrayAttribute = interface; // type: System.ParamArrayAttribute, namespace: System
  DNAssemblyAlgorithmIdAttribute = interface; // type: System.Reflection.AssemblyAlgorithmIdAttribute, namespace: System.Reflection
  DNAssemblyCompanyAttribute = interface; // type: System.Reflection.AssemblyCompanyAttribute, namespace: System.Reflection
  DNAssemblyConfigurationAttribute = interface; // type: System.Reflection.AssemblyConfigurationAttribute, namespace: System.Reflection
  DNAssemblyCopyrightAttribute = interface; // type: System.Reflection.AssemblyCopyrightAttribute, namespace: System.Reflection
  DNAssemblyCultureAttribute = interface; // type: System.Reflection.AssemblyCultureAttribute, namespace: System.Reflection
  DNAssemblyDefaultAliasAttribute = interface; // type: System.Reflection.AssemblyDefaultAliasAttribute, namespace: System.Reflection
  DNAssemblyDelaySignAttribute = interface; // type: System.Reflection.AssemblyDelaySignAttribute, namespace: System.Reflection
  DNAssemblyDescriptionAttribute = interface; // type: System.Reflection.AssemblyDescriptionAttribute, namespace: System.Reflection
  DNAssemblyFileVersionAttribute = interface; // type: System.Reflection.AssemblyFileVersionAttribute, namespace: System.Reflection
  DNAssemblyFlagsAttribute = interface; // type: System.Reflection.AssemblyFlagsAttribute, namespace: System.Reflection
  DNAssemblyInformationalVersionAttribute = interface; // type: System.Reflection.AssemblyInformationalVersionAttribute, namespace: System.Reflection
  DNAssemblyKeyFileAttribute = interface; // type: System.Reflection.AssemblyKeyFileAttribute, namespace: System.Reflection
  DNAssemblyKeyNameAttribute = interface; // type: System.Reflection.AssemblyKeyNameAttribute, namespace: System.Reflection
  DNAssemblyMetadataAttribute = interface; // type: System.Reflection.AssemblyMetadataAttribute, namespace: System.Reflection
  DNAssemblyProductAttribute = interface; // type: System.Reflection.AssemblyProductAttribute, namespace: System.Reflection
  DNAssemblySignatureKeyAttribute = interface; // type: System.Reflection.AssemblySignatureKeyAttribute, namespace: System.Reflection
  DNAssemblyTitleAttribute = interface; // type: System.Reflection.AssemblyTitleAttribute, namespace: System.Reflection
  DNAssemblyTrademarkAttribute = interface; // type: System.Reflection.AssemblyTrademarkAttribute, namespace: System.Reflection
  DNAssemblyVersionAttribute = interface; // type: System.Reflection.AssemblyVersionAttribute, namespace: System.Reflection
  DNDefaultMemberAttribute = interface; // type: System.Reflection.DefaultMemberAttribute, namespace: System.Reflection
  DNObfuscateAssemblyAttribute = interface; // type: System.Reflection.ObfuscateAssemblyAttribute, namespace: System.Reflection
  DNObfuscationAttribute = interface; // type: System.Reflection.ObfuscationAttribute, namespace: System.Reflection
  DNNeutralResourcesLanguageAttribute = interface; // type: System.Resources.NeutralResourcesLanguageAttribute, namespace: System.Resources
  DNSatelliteContractVersionAttribute = interface; // type: System.Resources.SatelliteContractVersionAttribute, namespace: System.Resources
  DNAccessedThroughPropertyAttribute = interface; // type: System.Runtime.CompilerServices.AccessedThroughPropertyAttribute, namespace: System.Runtime.CompilerServices
  DNAsyncMethodBuilderAttribute = interface; // type: System.Runtime.CompilerServices.AsyncMethodBuilderAttribute, namespace: System.Runtime.CompilerServices
  DNCallerFilePathAttribute = interface; // type: System.Runtime.CompilerServices.CallerFilePathAttribute, namespace: System.Runtime.CompilerServices
  DNCallerLineNumberAttribute = interface; // type: System.Runtime.CompilerServices.CallerLineNumberAttribute, namespace: System.Runtime.CompilerServices
  DNCallerMemberNameAttribute = interface; // type: System.Runtime.CompilerServices.CallerMemberNameAttribute, namespace: System.Runtime.CompilerServices
  DNCompilationRelaxationsAttribute = interface; // type: System.Runtime.CompilerServices.CompilationRelaxationsAttribute, namespace: System.Runtime.CompilerServices
  DNCompilerGeneratedAttribute = interface; // type: System.Runtime.CompilerServices.CompilerGeneratedAttribute, namespace: System.Runtime.CompilerServices
  DNCompilerGlobalScopeAttribute = interface; // type: System.Runtime.CompilerServices.CompilerGlobalScopeAttribute, namespace: System.Runtime.CompilerServices
  DNCustomConstantAttribute = interface; // type: System.Runtime.CompilerServices.CustomConstantAttribute, namespace: System.Runtime.CompilerServices
  DNDateTimeConstantAttribute = interface; // type: System.Runtime.CompilerServices.DateTimeConstantAttribute, namespace: System.Runtime.CompilerServices
  DNDecimalConstantAttribute = interface; // type: System.Runtime.CompilerServices.DecimalConstantAttribute, namespace: System.Runtime.CompilerServices
  DNDefaultDependencyAttribute = interface; // type: System.Runtime.CompilerServices.DefaultDependencyAttribute, namespace: System.Runtime.CompilerServices
  DNDependencyAttribute = interface; // type: System.Runtime.CompilerServices.DependencyAttribute, namespace: System.Runtime.CompilerServices
  DNDisablePrivateReflectionAttribute = interface; // type: System.Runtime.CompilerServices.DisablePrivateReflectionAttribute, namespace: System.Runtime.CompilerServices
  DNDiscardableAttribute = interface; // type: System.Runtime.CompilerServices.DiscardableAttribute, namespace: System.Runtime.CompilerServices
  DNExtensionAttribute = interface; // type: System.Runtime.CompilerServices.ExtensionAttribute, namespace: System.Runtime.CompilerServices
  DNFixedAddressValueTypeAttribute = interface; // type: System.Runtime.CompilerServices.FixedAddressValueTypeAttribute, namespace: System.Runtime.CompilerServices
  DNFixedBufferAttribute = interface; // type: System.Runtime.CompilerServices.FixedBufferAttribute, namespace: System.Runtime.CompilerServices
  DNIndexerNameAttribute = interface; // type: System.Runtime.CompilerServices.IndexerNameAttribute, namespace: System.Runtime.CompilerServices
  DNInternalsVisibleToAttribute = interface; // type: System.Runtime.CompilerServices.InternalsVisibleToAttribute, namespace: System.Runtime.CompilerServices
  DNIsByRefLikeAttribute = interface; // type: System.Runtime.CompilerServices.IsByRefLikeAttribute, namespace: System.Runtime.CompilerServices
  DNIsReadOnlyAttribute = interface; // type: System.Runtime.CompilerServices.IsReadOnlyAttribute, namespace: System.Runtime.CompilerServices
  DNMethodImplAttribute = interface; // type: System.Runtime.CompilerServices.MethodImplAttribute, namespace: System.Runtime.CompilerServices
  DNReferenceAssemblyAttribute = interface; // type: System.Runtime.CompilerServices.ReferenceAssemblyAttribute, namespace: System.Runtime.CompilerServices
  DNRuntimeCompatibilityAttribute = interface; // type: System.Runtime.CompilerServices.RuntimeCompatibilityAttribute, namespace: System.Runtime.CompilerServices
  DNSpecialNameAttribute = interface; // type: System.Runtime.CompilerServices.SpecialNameAttribute, namespace: System.Runtime.CompilerServices
  DNStateMachineAttribute = interface; // type: System.Runtime.CompilerServices.StateMachineAttribute, namespace: System.Runtime.CompilerServices
  DNAsyncStateMachineAttribute = interface; // type: System.Runtime.CompilerServices.AsyncStateMachineAttribute, namespace: System.Runtime.CompilerServices
  DNIteratorStateMachineAttribute = interface; // type: System.Runtime.CompilerServices.IteratorStateMachineAttribute, namespace: System.Runtime.CompilerServices
  DNStringFreezingAttribute = interface; // type: System.Runtime.CompilerServices.StringFreezingAttribute, namespace: System.Runtime.CompilerServices
  DNSuppressIldasmAttribute = interface; // type: System.Runtime.CompilerServices.SuppressIldasmAttribute, namespace: System.Runtime.CompilerServices
  DNTupleElementNamesAttribute = interface; // type: System.Runtime.CompilerServices.TupleElementNamesAttribute, namespace: System.Runtime.CompilerServices
  DNTypeForwardedFromAttribute = interface; // type: System.Runtime.CompilerServices.TypeForwardedFromAttribute, namespace: System.Runtime.CompilerServices
  DNTypeForwardedToAttribute = interface; // type: System.Runtime.CompilerServices.TypeForwardedToAttribute, namespace: System.Runtime.CompilerServices
  DNUnsafeValueTypeAttribute = interface; // type: System.Runtime.CompilerServices.UnsafeValueTypeAttribute, namespace: System.Runtime.CompilerServices
  DNReliabilityContractAttribute = interface; // type: System.Runtime.ConstrainedExecution.ReliabilityContractAttribute, namespace: System.Runtime.ConstrainedExecution
  DNHandleProcessCorruptedStateExceptionsAttribute = interface; // type: System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute, namespace: System.Runtime.ExceptionServices
  DNAllowReversePInvokeCallsAttribute = interface; // type: System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute, namespace: System.Runtime.InteropServices
  DNBestFitMappingAttribute = interface; // type: System.Runtime.InteropServices.BestFitMappingAttribute, namespace: System.Runtime.InteropServices
  DNClassInterfaceAttribute = interface; // type: System.Runtime.InteropServices.ClassInterfaceAttribute, namespace: System.Runtime.InteropServices
  DNCoClassAttribute = interface; // type: System.Runtime.InteropServices.CoClassAttribute, namespace: System.Runtime.InteropServices
  DNComDefaultInterfaceAttribute = interface; // type: System.Runtime.InteropServices.ComDefaultInterfaceAttribute, namespace: System.Runtime.InteropServices
  DNComImportAttribute = interface; // type: System.Runtime.InteropServices.ComImportAttribute, namespace: System.Runtime.InteropServices
  DNComSourceInterfacesAttribute = interface; // type: System.Runtime.InteropServices.ComSourceInterfacesAttribute, namespace: System.Runtime.InteropServices
  DNComVisibleAttribute = interface; // type: System.Runtime.InteropServices.ComVisibleAttribute, namespace: System.Runtime.InteropServices
  DNDefaultCharSetAttribute = interface; // type: System.Runtime.InteropServices.DefaultCharSetAttribute, namespace: System.Runtime.InteropServices
  DNDefaultDllImportSearchPathsAttribute = interface; // type: System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute, namespace: System.Runtime.InteropServices
  DNDispIdAttribute = interface; // type: System.Runtime.InteropServices.DispIdAttribute, namespace: System.Runtime.InteropServices
  DNDllImportAttribute = interface; // type: System.Runtime.InteropServices.DllImportAttribute, namespace: System.Runtime.InteropServices
  DNFieldOffsetAttribute = interface; // type: System.Runtime.InteropServices.FieldOffsetAttribute, namespace: System.Runtime.InteropServices
  DNGuidAttribute = interface; // type: System.Runtime.InteropServices.GuidAttribute, namespace: System.Runtime.InteropServices
  DNInAttribute = interface; // type: System.Runtime.InteropServices.InAttribute, namespace: System.Runtime.InteropServices
  DNInterfaceTypeAttribute = interface; // type: System.Runtime.InteropServices.InterfaceTypeAttribute, namespace: System.Runtime.InteropServices
  DNLCIDConversionAttribute = interface; // type: System.Runtime.InteropServices.LCIDConversionAttribute, namespace: System.Runtime.InteropServices
  DNMarshalAsAttribute = interface; // type: System.Runtime.InteropServices.MarshalAsAttribute, namespace: System.Runtime.InteropServices
  DNNativeCallableAttribute = interface; // type: System.Runtime.InteropServices.NativeCallableAttribute, namespace: System.Runtime.InteropServices
  DNOptionalAttribute = interface; // type: System.Runtime.InteropServices.OptionalAttribute, namespace: System.Runtime.InteropServices
  DNOutAttribute = interface; // type: System.Runtime.InteropServices.OutAttribute, namespace: System.Runtime.InteropServices
  DNPreserveSigAttribute = interface; // type: System.Runtime.InteropServices.PreserveSigAttribute, namespace: System.Runtime.InteropServices
  DNProgIdAttribute = interface; // type: System.Runtime.InteropServices.ProgIdAttribute, namespace: System.Runtime.InteropServices
  DNStructLayoutAttribute = interface; // type: System.Runtime.InteropServices.StructLayoutAttribute, namespace: System.Runtime.InteropServices
  DNTypeIdentifierAttribute = interface; // type: System.Runtime.InteropServices.TypeIdentifierAttribute, namespace: System.Runtime.InteropServices
  DNUnmanagedFunctionPointerAttribute = interface; // type: System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute, namespace: System.Runtime.InteropServices
  DNDefaultInterfaceAttribute = interface; // type: System.Runtime.InteropServices.WindowsRuntime.DefaultInterfaceAttribute, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNInterfaceImplementedInVersionAttribute = interface; // type: System.Runtime.InteropServices.WindowsRuntime.InterfaceImplementedInVersionAttribute, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNReadOnlyArrayAttribute = interface; // type: System.Runtime.InteropServices.WindowsRuntime.ReadOnlyArrayAttribute, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNReturnValueNameAttribute = interface; // type: System.Runtime.InteropServices.WindowsRuntime.ReturnValueNameAttribute, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNWriteOnlyArrayAttribute = interface; // type: System.Runtime.InteropServices.WindowsRuntime.WriteOnlyArrayAttribute, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNOnDeserializedAttribute = interface; // type: System.Runtime.Serialization.OnDeserializedAttribute, namespace: System.Runtime.Serialization
  DNOnDeserializingAttribute = interface; // type: System.Runtime.Serialization.OnDeserializingAttribute, namespace: System.Runtime.Serialization
  DNOnSerializedAttribute = interface; // type: System.Runtime.Serialization.OnSerializedAttribute, namespace: System.Runtime.Serialization
  DNOnSerializingAttribute = interface; // type: System.Runtime.Serialization.OnSerializingAttribute, namespace: System.Runtime.Serialization
  DNOptionalFieldAttribute = interface; // type: System.Runtime.Serialization.OptionalFieldAttribute, namespace: System.Runtime.Serialization
  DNTargetFrameworkAttribute = interface; // type: System.Runtime.Versioning.TargetFrameworkAttribute, namespace: System.Runtime.Versioning
  DNAllowPartiallyTrustedCallersAttribute = interface; // type: System.Security.AllowPartiallyTrustedCallersAttribute, namespace: System.Security
  DNSecurityCriticalAttribute = interface; // type: System.Security.SecurityCriticalAttribute, namespace: System.Security
  DNSecurityRulesAttribute = interface; // type: System.Security.SecurityRulesAttribute, namespace: System.Security
  DNSecuritySafeCriticalAttribute = interface; // type: System.Security.SecuritySafeCriticalAttribute, namespace: System.Security
  DNSecurityTransparentAttribute = interface; // type: System.Security.SecurityTransparentAttribute, namespace: System.Security
  DNSecurityTreatAsSafeAttribute = interface; // type: System.Security.SecurityTreatAsSafeAttribute, namespace: System.Security
  DNSuppressUnmanagedCodeSecurityAttribute = interface; // type: System.Security.SuppressUnmanagedCodeSecurityAttribute, namespace: System.Security
  DNUnverifiableCodeAttribute = interface; // type: System.Security.UnverifiableCodeAttribute, namespace: System.Security
  DNSerializableAttribute = interface; // type: System.SerializableAttribute, namespace: System
  DNSTAThreadAttribute = interface; // type: System.STAThreadAttribute, namespace: System
  DNThreadStaticAttribute = interface; // type: System.ThreadStaticAttribute, namespace: System
  DNBitConverter = interface; // type: System.BitConverter, namespace: System
  DNBuffer = interface; // type: System.Buffer, namespace: System
  DNArrayPool<T> = interface; // type: System.Buffers.ArrayPool`1, namespace: System.Buffers
  DNMemoryManager<T> = interface; // type: System.Buffers.MemoryManager`1, namespace: System.Buffers
  DNCharEnumerator = interface; // type: System.CharEnumerator, namespace: System
  DNComparer = interface; // type: System.Collections.Comparer, namespace: System.Collections
  DNComparer<T> = interface; // type: System.Collections.Generic.Comparer`1, namespace: System.Collections.Generic
  DNGenericComparer<T> = interface; // type: System.Collections.Generic.GenericComparer`1, namespace: System.Collections.Generic
  DNNullableComparer<T> = interface; // type: System.Collections.Generic.NullableComparer`1, namespace: System.Collections.Generic
  DNObjectComparer<T> = interface; // type: System.Collections.Generic.ObjectComparer`1, namespace: System.Collections.Generic
  DNDictionary<TKey, TValue> = interface; // type: System.Collections.Generic.Dictionary`2, namespace: System.Collections.Generic
  DNDictionary_KeyCollection<TKey, TValue> = interface; // type: System.Collections.Generic.Dictionary`2+KeyCollection, namespace: System.Collections.Generic
  DNDictionary_ValueCollection<TKey, TValue> = interface; // type: System.Collections.Generic.Dictionary`2+ValueCollection, namespace: System.Collections.Generic
  DNByteEqualityComparer = interface; // type: System.Collections.Generic.ByteEqualityComparer, namespace: System.Collections.Generic
  DNNonRandomizedStringEqualityComparer = interface; // type: System.Collections.Generic.NonRandomizedStringEqualityComparer, namespace: System.Collections.Generic
  DNEnumEqualityComparer<T> = interface; // type: System.Collections.Generic.EnumEqualityComparer`1, namespace: System.Collections.Generic
  DNGenericEqualityComparer<T> = interface; // type: System.Collections.Generic.GenericEqualityComparer`1, namespace: System.Collections.Generic
  DNNullableEqualityComparer<T> = interface; // type: System.Collections.Generic.NullableEqualityComparer`1, namespace: System.Collections.Generic
  DNObjectEqualityComparer<T> = interface; // type: System.Collections.Generic.ObjectEqualityComparer`1, namespace: System.Collections.Generic
  DNKeyValuePair = interface; // type: System.Collections.Generic.KeyValuePair, namespace: System.Collections.Generic
  DNList<T> = interface; // type: System.Collections.Generic.List`1, namespace: System.Collections.Generic
  DNListDictionaryInternal = interface; // type: System.Collections.ListDictionaryInternal, namespace: System.Collections
  DNCollection<T> = interface; // type: System.Collections.ObjectModel.Collection`1, namespace: System.Collections.ObjectModel
  DNReadOnlyCollection<T> = interface; // type: System.Collections.ObjectModel.ReadOnlyCollection`1, namespace: System.Collections.ObjectModel
  DNConvert = interface; // type: System.Convert, namespace: System
  DNDBNull = interface; // type: System.DBNull, namespace: System
  DNDelegate = interface; // type: System.Delegate, namespace: System
  DNMulticastDelegate = interface; // type: System.MulticastDelegate, namespace: System
  DNContract = interface; // type: System.Diagnostics.Contracts.Contract, namespace: System.Diagnostics.Contracts
  DNDebug = interface; // type: System.Diagnostics.Debug, namespace: System.Diagnostics
  DNDebugger = interface; // type: System.Diagnostics.Debugger, namespace: System.Diagnostics
  DNStackFrame = interface; // type: System.Diagnostics.StackFrame, namespace: System.Diagnostics
  DNStackTrace = interface; // type: System.Diagnostics.StackTrace, namespace: System.Diagnostics
  DNEventListener = interface; // type: System.Diagnostics.Tracing.EventListener, namespace: System.Diagnostics.Tracing
  DNEventSource = interface; // type: System.Diagnostics.Tracing.EventSource, namespace: System.Diagnostics.Tracing
  DNTraceLoggingEventTypes = interface; // type: System.Diagnostics.Tracing.TraceLoggingEventTypes, namespace: System.Diagnostics.Tracing
  DNEventArgs = interface; // type: System.EventArgs, namespace: System
  DNAssemblyLoadEventArgs = interface; // type: System.AssemblyLoadEventArgs, namespace: System
  DNContractFailedEventArgs = interface; // type: System.Diagnostics.Contracts.ContractFailedEventArgs, namespace: System.Diagnostics.Contracts
  DNEventCommandEventArgs = interface; // type: System.Diagnostics.Tracing.EventCommandEventArgs, namespace: System.Diagnostics.Tracing
  DNEventSourceCreatedEventArgs = interface; // type: System.Diagnostics.Tracing.EventSourceCreatedEventArgs, namespace: System.Diagnostics.Tracing
  DNEventWrittenEventArgs = interface; // type: System.Diagnostics.Tracing.EventWrittenEventArgs, namespace: System.Diagnostics.Tracing
  DNResolveEventArgs = interface; // type: System.ResolveEventArgs, namespace: System
  DNFirstChanceExceptionEventArgs = interface; // type: System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs, namespace: System.Runtime.ExceptionServices
  DNSafeSerializationEventArgs = interface; // type: System.Runtime.Serialization.SafeSerializationEventArgs, namespace: System.Runtime.Serialization
  DNUnobservedTaskExceptionEventArgs = interface; // type: System.Threading.Tasks.UnobservedTaskExceptionEventArgs, namespace: System.Threading.Tasks
  DNUnhandledExceptionEventArgs = interface; // type: System.UnhandledExceptionEventArgs, namespace: System
  DNException = interface; // type: System.Exception, namespace: System
  DNAggregateException = interface; // type: System.AggregateException, namespace: System
  DNApplicationException = interface; // type: System.ApplicationException, namespace: System
  DNInvalidFilterCriteriaException = interface; // type: System.Reflection.InvalidFilterCriteriaException, namespace: System.Reflection
  DNTargetException = interface; // type: System.Reflection.TargetException, namespace: System.Reflection
  DNTargetInvocationException = interface; // type: System.Reflection.TargetInvocationException, namespace: System.Reflection
  DNTargetParameterCountException = interface; // type: System.Reflection.TargetParameterCountException, namespace: System.Reflection
  DNWaitHandleCannotBeOpenedException = interface; // type: System.Threading.WaitHandleCannotBeOpenedException, namespace: System.Threading
  DNContractException = interface; // type: System.Diagnostics.Contracts.ContractException, namespace: System.Diagnostics.Contracts
  DNEventSourceException = interface; // type: System.Diagnostics.Tracing.EventSourceException, namespace: System.Diagnostics.Tracing
  DNInvalidTimeZoneException = interface; // type: System.InvalidTimeZoneException, namespace: System
  DNRuntimeWrappedException = interface; // type: System.Runtime.CompilerServices.RuntimeWrappedException, namespace: System.Runtime.CompilerServices
  DNSystemException = interface; // type: System.SystemException, namespace: System
  DNAccessViolationException = interface; // type: System.AccessViolationException, namespace: System
  DNArgumentException = interface; // type: System.ArgumentException, namespace: System
  DNArgumentNullException = interface; // type: System.ArgumentNullException, namespace: System
  DNArgumentOutOfRangeException = interface; // type: System.ArgumentOutOfRangeException, namespace: System
  DNDuplicateWaitObjectException = interface; // type: System.DuplicateWaitObjectException, namespace: System
  DNCultureNotFoundException = interface; // type: System.Globalization.CultureNotFoundException, namespace: System.Globalization
  DNDecoderFallbackException = interface; // type: System.Text.DecoderFallbackException, namespace: System.Text
  DNEncoderFallbackException = interface; // type: System.Text.EncoderFallbackException, namespace: System.Text
  DNArithmeticException = interface; // type: System.ArithmeticException, namespace: System
  DNDivideByZeroException = interface; // type: System.DivideByZeroException, namespace: System
  DNNotFiniteNumberException = interface; // type: System.NotFiniteNumberException, namespace: System
  DNOverflowException = interface; // type: System.OverflowException, namespace: System
  DNArrayTypeMismatchException = interface; // type: System.ArrayTypeMismatchException, namespace: System
  DNBadImageFormatException = interface; // type: System.BadImageFormatException, namespace: System
  DNKeyNotFoundException = interface; // type: System.Collections.Generic.KeyNotFoundException, namespace: System.Collections.Generic
  DNDataMisalignedException = interface; // type: System.DataMisalignedException, namespace: System
  DNExecutionEngineException = interface; // type: System.ExecutionEngineException, namespace: System
  DNFormatException = interface; // type: System.FormatException, namespace: System
  DNCustomAttributeFormatException = interface; // type: System.Reflection.CustomAttributeFormatException, namespace: System.Reflection
  DNIndexOutOfRangeException = interface; // type: System.IndexOutOfRangeException, namespace: System
  DNInsufficientExecutionStackException = interface; // type: System.InsufficientExecutionStackException, namespace: System
  DNInvalidCastException = interface; // type: System.InvalidCastException, namespace: System
  DNInvalidOperationException = interface; // type: System.InvalidOperationException, namespace: System
  DNObjectDisposedException = interface; // type: System.ObjectDisposedException, namespace: System
  DNInvalidProgramException = interface; // type: System.InvalidProgramException, namespace: System
  DNIOException = interface; // type: System.IO.IOException, namespace: System.IO
  DNDirectoryNotFoundException = interface; // type: System.IO.DirectoryNotFoundException, namespace: System.IO
  DNEndOfStreamException = interface; // type: System.IO.EndOfStreamException, namespace: System.IO
  DNFileLoadException = interface; // type: System.IO.FileLoadException, namespace: System.IO
  DNFileNotFoundException = interface; // type: System.IO.FileNotFoundException, namespace: System.IO
  DNPathTooLongException = interface; // type: System.IO.PathTooLongException, namespace: System.IO
  DNMemberAccessException = interface; // type: System.MemberAccessException, namespace: System
  DNFieldAccessException = interface; // type: System.FieldAccessException, namespace: System
  DNMethodAccessException = interface; // type: System.MethodAccessException, namespace: System
  DNMissingMemberException = interface; // type: System.MissingMemberException, namespace: System
  DNMissingFieldException = interface; // type: System.MissingFieldException, namespace: System
  DNMissingMethodException = interface; // type: System.MissingMethodException, namespace: System
  DNMulticastNotSupportedException = interface; // type: System.MulticastNotSupportedException, namespace: System
  DNNotImplementedException = interface; // type: System.NotImplementedException, namespace: System
  DNNotSupportedException = interface; // type: System.NotSupportedException, namespace: System
  DNPlatformNotSupportedException = interface; // type: System.PlatformNotSupportedException, namespace: System
  DNNullReferenceException = interface; // type: System.NullReferenceException, namespace: System
  DNOperationCanceledException = interface; // type: System.OperationCanceledException, namespace: System
  DNTaskCanceledException = interface; // type: System.Threading.Tasks.TaskCanceledException, namespace: System.Threading.Tasks
  DNOutOfMemoryException = interface; // type: System.OutOfMemoryException, namespace: System
  DNInsufficientMemoryException = interface; // type: System.InsufficientMemoryException, namespace: System
  DNRankException = interface; // type: System.RankException, namespace: System
  DNAmbiguousMatchException = interface; // type: System.Reflection.AmbiguousMatchException, namespace: System.Reflection
  DNReflectionTypeLoadException = interface; // type: System.Reflection.ReflectionTypeLoadException, namespace: System.Reflection
  DNMissingManifestResourceException = interface; // type: System.Resources.MissingManifestResourceException, namespace: System.Resources
  DNMissingSatelliteAssemblyException = interface; // type: System.Resources.MissingSatelliteAssemblyException, namespace: System.Resources
  DNExternalException = interface; // type: System.Runtime.InteropServices.ExternalException, namespace: System.Runtime.InteropServices
  DNCOMException = interface; // type: System.Runtime.InteropServices.COMException, namespace: System.Runtime.InteropServices
  DNSEHException = interface; // type: System.Runtime.InteropServices.SEHException, namespace: System.Runtime.InteropServices
  DNInvalidComObjectException = interface; // type: System.Runtime.InteropServices.InvalidComObjectException, namespace: System.Runtime.InteropServices
  DNInvalidOleVariantTypeException = interface; // type: System.Runtime.InteropServices.InvalidOleVariantTypeException, namespace: System.Runtime.InteropServices
  DNMarshalDirectiveException = interface; // type: System.Runtime.InteropServices.MarshalDirectiveException, namespace: System.Runtime.InteropServices
  DNSafeArrayRankMismatchException = interface; // type: System.Runtime.InteropServices.SafeArrayRankMismatchException, namespace: System.Runtime.InteropServices
  DNSafeArrayTypeMismatchException = interface; // type: System.Runtime.InteropServices.SafeArrayTypeMismatchException, namespace: System.Runtime.InteropServices
  DNSerializationException = interface; // type: System.Runtime.Serialization.SerializationException, namespace: System.Runtime.Serialization
  DNCryptographicException = interface; // type: System.Security.Cryptography.CryptographicException, namespace: System.Security.Cryptography
  DNSecurityException = interface; // type: System.Security.SecurityException, namespace: System.Security
  DNVerificationException = interface; // type: System.Security.VerificationException, namespace: System.Security
  DNStackOverflowException = interface; // type: System.StackOverflowException, namespace: System
  DNAbandonedMutexException = interface; // type: System.Threading.AbandonedMutexException, namespace: System.Threading
  DNSemaphoreFullException = interface; // type: System.Threading.SemaphoreFullException, namespace: System.Threading
  DNSynchronizationLockException = interface; // type: System.Threading.SynchronizationLockException, namespace: System.Threading
  DNThreadAbortException = interface; // type: System.Threading.ThreadAbortException, namespace: System.Threading
  DNThreadInterruptedException = interface; // type: System.Threading.ThreadInterruptedException, namespace: System.Threading
  DNThreadStartException = interface; // type: System.Threading.ThreadStartException, namespace: System.Threading
  DNThreadStateException = interface; // type: System.Threading.ThreadStateException, namespace: System.Threading
  DNTimeoutException = interface; // type: System.TimeoutException, namespace: System
  DNTypeInitializationException = interface; // type: System.TypeInitializationException, namespace: System
  DNTypeLoadException = interface; // type: System.TypeLoadException, namespace: System
  DNDllNotFoundException = interface; // type: System.DllNotFoundException, namespace: System
  DNEntryPointNotFoundException = interface; // type: System.EntryPointNotFoundException, namespace: System
  DNTypeAccessException = interface; // type: System.TypeAccessException, namespace: System
  DNTypeUnloadedException = interface; // type: System.TypeUnloadedException, namespace: System
  DNUnauthorizedAccessException = interface; // type: System.UnauthorizedAccessException, namespace: System
  DNLockRecursionException = interface; // type: System.Threading.LockRecursionException, namespace: System.Threading
  DNTaskSchedulerException = interface; // type: System.Threading.Tasks.TaskSchedulerException, namespace: System.Threading.Tasks
  DNTimeZoneNotFoundException = interface; // type: System.TimeZoneNotFoundException, namespace: System
  DNFormattableString = interface; // type: System.FormattableString, namespace: System
  DNGC = interface; // type: System.GC, namespace: System
  DNCalendar = interface; // type: System.Globalization.Calendar, namespace: System.Globalization
  DNEastAsianLunisolarCalendar = interface; // type: System.Globalization.EastAsianLunisolarCalendar, namespace: System.Globalization
  DNChineseLunisolarCalendar = interface; // type: System.Globalization.ChineseLunisolarCalendar, namespace: System.Globalization
  DNJapaneseLunisolarCalendar = interface; // type: System.Globalization.JapaneseLunisolarCalendar, namespace: System.Globalization
  DNKoreanLunisolarCalendar = interface; // type: System.Globalization.KoreanLunisolarCalendar, namespace: System.Globalization
  DNTaiwanLunisolarCalendar = interface; // type: System.Globalization.TaiwanLunisolarCalendar, namespace: System.Globalization
  DNGregorianCalendar = interface; // type: System.Globalization.GregorianCalendar, namespace: System.Globalization
  DNHebrewCalendar = interface; // type: System.Globalization.HebrewCalendar, namespace: System.Globalization
  DNHijriCalendar = interface; // type: System.Globalization.HijriCalendar, namespace: System.Globalization
  DNJapaneseCalendar = interface; // type: System.Globalization.JapaneseCalendar, namespace: System.Globalization
  DNJulianCalendar = interface; // type: System.Globalization.JulianCalendar, namespace: System.Globalization
  DNKoreanCalendar = interface; // type: System.Globalization.KoreanCalendar, namespace: System.Globalization
  DNPersianCalendar = interface; // type: System.Globalization.PersianCalendar, namespace: System.Globalization
  DNTaiwanCalendar = interface; // type: System.Globalization.TaiwanCalendar, namespace: System.Globalization
  DNThaiBuddhistCalendar = interface; // type: System.Globalization.ThaiBuddhistCalendar, namespace: System.Globalization
  DNUmAlQuraCalendar = interface; // type: System.Globalization.UmAlQuraCalendar, namespace: System.Globalization
  DNCharUnicodeInfo = interface; // type: System.Globalization.CharUnicodeInfo, namespace: System.Globalization
  DNCompareInfo = interface; // type: System.Globalization.CompareInfo, namespace: System.Globalization
  DNCultureInfo = interface; // type: System.Globalization.CultureInfo, namespace: System.Globalization
  DNDateTimeFormatInfo = interface; // type: System.Globalization.DateTimeFormatInfo, namespace: System.Globalization
  DNDaylightTime = interface; // type: System.Globalization.DaylightTime, namespace: System.Globalization
  DNGlobalizationExtensions = interface; // type: System.Globalization.GlobalizationExtensions, namespace: System.Globalization
  DNIdnMapping = interface; // type: System.Globalization.IdnMapping, namespace: System.Globalization
  DNNumberFormatInfo = interface; // type: System.Globalization.NumberFormatInfo, namespace: System.Globalization
  DNRegionInfo = interface; // type: System.Globalization.RegionInfo, namespace: System.Globalization
  DNSortKey = interface; // type: System.Globalization.SortKey, namespace: System.Globalization
  DNSortVersion = interface; // type: System.Globalization.SortVersion, namespace: System.Globalization
  DNStringInfo = interface; // type: System.Globalization.StringInfo, namespace: System.Globalization
  DNTextElementEnumerator = interface; // type: System.Globalization.TextElementEnumerator, namespace: System.Globalization
  DNTextInfo = interface; // type: System.Globalization.TextInfo, namespace: System.Globalization
  DNBinaryReader = interface; // type: System.IO.BinaryReader, namespace: System.IO
  DNBinaryWriter = interface; // type: System.IO.BinaryWriter, namespace: System.IO
  DNPath = interface; // type: System.IO.Path, namespace: System.IO
  DNUnmanagedMemoryAccessor = interface; // type: System.IO.UnmanagedMemoryAccessor, namespace: System.IO
  DNLazy<T> = interface; // type: System.Lazy`1, namespace: System
  DNMarshalByRefObject = interface; // type: System.MarshalByRefObject, namespace: System
  DNStream = interface; // type: System.IO.Stream, namespace: System.IO
  DNFileStream = interface; // type: System.IO.FileStream, namespace: System.IO
  DNMemoryStream = interface; // type: System.IO.MemoryStream, namespace: System.IO
  DNUnmanagedMemoryStream = interface; // type: System.IO.UnmanagedMemoryStream, namespace: System.IO
  DNTextReader = interface; // type: System.IO.TextReader, namespace: System.IO
  DNStreamReader = interface; // type: System.IO.StreamReader, namespace: System.IO
  DNTextWriter = interface; // type: System.IO.TextWriter, namespace: System.IO
  DNStreamWriter = interface; // type: System.IO.StreamWriter, namespace: System.IO
  DNRegisteredWaitHandle = interface; // type: System.Threading.RegisteredWaitHandle, namespace: System.Threading
  DNTimer = interface; // type: System.Threading.Timer, namespace: System.Threading
  DNWaitHandle = interface; // type: System.Threading.WaitHandle, namespace: System.Threading
  DNEventWaitHandle = interface; // type: System.Threading.EventWaitHandle, namespace: System.Threading
  DNAutoResetEvent = interface; // type: System.Threading.AutoResetEvent, namespace: System.Threading
  DNManualResetEvent = interface; // type: System.Threading.ManualResetEvent, namespace: System.Threading
  DNMutex = interface; // type: System.Threading.Mutex, namespace: System.Threading
  DNSemaphore = interface; // type: System.Threading.Semaphore, namespace: System.Threading
  DNMath = interface; // type: System.Math, namespace: System
  DNMathF = interface; // type: System.MathF, namespace: System
  DNMemoryExtensions = interface; // type: System.MemoryExtensions, namespace: System
  DNNullable = interface; // type: System.Nullable, namespace: System
  DNVector = interface; // type: System.Numerics.Vector, namespace: System.Numerics
  DNProgress<T> = interface; // type: System.Progress`1, namespace: System
  DNRandom = interface; // type: System.Random, namespace: System
  DNAssembly = interface; // type: System.Reflection.Assembly, namespace: System.Reflection
  DNAssemblyBuilder = interface; // type: System.Reflection.Emit.AssemblyBuilder, namespace: System.Reflection.Emit
  DNAssemblyName = interface; // type: System.Reflection.AssemblyName, namespace: System.Reflection
  DNBinder = interface; // type: System.Reflection.Binder, namespace: System.Reflection
  DNCustomAttributeData = interface; // type: System.Reflection.CustomAttributeData, namespace: System.Reflection
  DNCustomAttributeExtensions = interface; // type: System.Reflection.CustomAttributeExtensions, namespace: System.Reflection
  DNCustomAttributeBuilder = interface; // type: System.Reflection.Emit.CustomAttributeBuilder, namespace: System.Reflection.Emit
  DNEventBuilder = interface; // type: System.Reflection.Emit.EventBuilder, namespace: System.Reflection.Emit
  DNILGenerator = interface; // type: System.Reflection.Emit.ILGenerator, namespace: System.Reflection.Emit
  DNOpCodes = interface; // type: System.Reflection.Emit.OpCodes, namespace: System.Reflection.Emit
  DNParameterBuilder = interface; // type: System.Reflection.Emit.ParameterBuilder, namespace: System.Reflection.Emit
  DNSignatureHelper = interface; // type: System.Reflection.Emit.SignatureHelper, namespace: System.Reflection.Emit
  DNExceptionHandlingClause = interface; // type: System.Reflection.ExceptionHandlingClause, namespace: System.Reflection
  DNIntrospectionExtensions = interface; // type: System.Reflection.IntrospectionExtensions, namespace: System.Reflection
  DNLocalVariableInfo = interface; // type: System.Reflection.LocalVariableInfo, namespace: System.Reflection
  DNLocalBuilder = interface; // type: System.Reflection.Emit.LocalBuilder, namespace: System.Reflection.Emit
  DNManifestResourceInfo = interface; // type: System.Reflection.ManifestResourceInfo, namespace: System.Reflection
  DNMemberInfo = interface; // type: System.Reflection.MemberInfo, namespace: System.Reflection
  DNEventInfo = interface; // type: System.Reflection.EventInfo, namespace: System.Reflection
  DNFieldInfo = interface; // type: System.Reflection.FieldInfo, namespace: System.Reflection
  DNFieldBuilder = interface; // type: System.Reflection.Emit.FieldBuilder, namespace: System.Reflection.Emit
  DNMethodBase = interface; // type: System.Reflection.MethodBase, namespace: System.Reflection
  DNConstructorInfo = interface; // type: System.Reflection.ConstructorInfo, namespace: System.Reflection
  DNConstructorBuilder = interface; // type: System.Reflection.Emit.ConstructorBuilder, namespace: System.Reflection.Emit
  DNMethodInfo = interface; // type: System.Reflection.MethodInfo, namespace: System.Reflection
  DNDynamicMethod = interface; // type: System.Reflection.Emit.DynamicMethod, namespace: System.Reflection.Emit
  DNMethodBuilder = interface; // type: System.Reflection.Emit.MethodBuilder, namespace: System.Reflection.Emit
  DNPropertyInfo = interface; // type: System.Reflection.PropertyInfo, namespace: System.Reflection
  DNPropertyBuilder = interface; // type: System.Reflection.Emit.PropertyBuilder, namespace: System.Reflection.Emit
  DNType = interface; // type: System.Type, namespace: System
  DNTypeInfo = interface; // type: System.Reflection.TypeInfo, namespace: System.Reflection
  DNEnumBuilder = interface; // type: System.Reflection.Emit.EnumBuilder, namespace: System.Reflection.Emit
  DNGenericTypeParameterBuilder = interface; // type: System.Reflection.Emit.GenericTypeParameterBuilder, namespace: System.Reflection.Emit
  DNTypeBuilder = interface; // type: System.Reflection.Emit.TypeBuilder, namespace: System.Reflection.Emit
  DNTypeDelegator = interface; // type: System.Reflection.TypeDelegator, namespace: System.Reflection
  DNAssemblyExtensions = interface; // type: System.Reflection.Metadata.AssemblyExtensions, namespace: System.Reflection.Metadata
  DNMethodBody = interface; // type: System.Reflection.MethodBody, namespace: System.Reflection
  DNMissing = interface; // type: System.Reflection.Missing, namespace: System.Reflection
  DNModule = interface; // type: System.Reflection.Module, namespace: System.Reflection
  DNModuleBuilder = interface; // type: System.Reflection.Emit.ModuleBuilder, namespace: System.Reflection.Emit
  DNParameterInfo = interface; // type: System.Reflection.ParameterInfo, namespace: System.Reflection
  DNPointer = interface; // type: System.Reflection.Pointer, namespace: System.Reflection
  DNReflectionContext = interface; // type: System.Reflection.ReflectionContext, namespace: System.Reflection
  DNStrongNameKeyPair = interface; // type: System.Reflection.StrongNameKeyPair, namespace: System.Reflection
  DNResourceManager = interface; // type: System.Resources.ResourceManager, namespace: System.Resources
  DNResourceReader = interface; // type: System.Resources.ResourceReader, namespace: System.Resources
  DNResourceSet = interface; // type: System.Resources.ResourceSet, namespace: System.Resources
  DNConditionalWeakTable<TKey, TValue> = interface; // type: System.Runtime.CompilerServices.ConditionalWeakTable`2, namespace: System.Runtime.CompilerServices
  DNContractHelper = interface; // type: System.Runtime.CompilerServices.ContractHelper, namespace: System.Runtime.CompilerServices
  DNFormattableStringFactory = interface; // type: System.Runtime.CompilerServices.FormattableStringFactory, namespace: System.Runtime.CompilerServices
  DNIsConst = interface; // type: System.Runtime.CompilerServices.IsConst, namespace: System.Runtime.CompilerServices
  DNIsVolatile = interface; // type: System.Runtime.CompilerServices.IsVolatile, namespace: System.Runtime.CompilerServices
  DNRuntimeFeature = interface; // type: System.Runtime.CompilerServices.RuntimeFeature, namespace: System.Runtime.CompilerServices
  DNRuntimeHelpers = interface; // type: System.Runtime.CompilerServices.RuntimeHelpers, namespace: System.Runtime.CompilerServices
  DNStrongBox<T> = interface; // type: System.Runtime.CompilerServices.StrongBox`1, namespace: System.Runtime.CompilerServices
  DNCriticalFinalizerObject = interface; // type: System.Runtime.ConstrainedExecution.CriticalFinalizerObject, namespace: System.Runtime.ConstrainedExecution
  DNRuntimeThread = interface; // type: Internal.Runtime.Augments.RuntimeThread, namespace: Internal.Runtime.Augments
  DNCriticalHandle = interface; // type: System.Runtime.InteropServices.CriticalHandle, namespace: System.Runtime.InteropServices
  DNCriticalHandleMinusOneIsInvalid = interface; // type: Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid, namespace: Microsoft.Win32.SafeHandles
  DNCriticalHandleZeroOrMinusOneIsInvalid = interface; // type: Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid, namespace: Microsoft.Win32.SafeHandles
  DNSafeHandle = interface; // type: System.Runtime.InteropServices.SafeHandle, namespace: System.Runtime.InteropServices
  DNSafeHandleMinusOneIsInvalid = interface; // type: Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid, namespace: Microsoft.Win32.SafeHandles
  DNSafeHandleZeroOrMinusOneIsInvalid = interface; // type: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid, namespace: Microsoft.Win32.SafeHandles
  DNSafeFileHandle = interface; // type: Microsoft.Win32.SafeHandles.SafeFileHandle, namespace: Microsoft.Win32.SafeHandles
  DNSafeWaitHandle = interface; // type: Microsoft.Win32.SafeHandles.SafeWaitHandle, namespace: Microsoft.Win32.SafeHandles
  DNSafeBuffer = interface; // type: System.Runtime.InteropServices.SafeBuffer, namespace: System.Runtime.InteropServices
  DNMemoryFailPoint = interface; // type: System.Runtime.MemoryFailPoint, namespace: System.Runtime
  DNExceptionDispatchInfo = interface; // type: System.Runtime.ExceptionServices.ExceptionDispatchInfo, namespace: System.Runtime.ExceptionServices
  DNGCSettings = interface; // type: System.Runtime.GCSettings, namespace: System.Runtime
  DNBStrWrapper = interface; // type: System.Runtime.InteropServices.BStrWrapper, namespace: System.Runtime.InteropServices
  DNComEventsHelper = interface; // type: System.Runtime.InteropServices.ComEventsHelper, namespace: System.Runtime.InteropServices
  DNCurrencyWrapper = interface; // type: System.Runtime.InteropServices.CurrencyWrapper, namespace: System.Runtime.InteropServices
  DNDispatchWrapper = interface; // type: System.Runtime.InteropServices.DispatchWrapper, namespace: System.Runtime.InteropServices
  DNErrorWrapper = interface; // type: System.Runtime.InteropServices.ErrorWrapper, namespace: System.Runtime.InteropServices
  DNMarshal = interface; // type: System.Runtime.InteropServices.Marshal, namespace: System.Runtime.InteropServices
  DNMemoryMarshal = interface; // type: System.Runtime.InteropServices.MemoryMarshal, namespace: System.Runtime.InteropServices
  DNUnknownWrapper = interface; // type: System.Runtime.InteropServices.UnknownWrapper, namespace: System.Runtime.InteropServices
  DNVariantWrapper = interface; // type: System.Runtime.InteropServices.VariantWrapper, namespace: System.Runtime.InteropServices
  DNEventRegistrationTokenTable<T> = interface; // type: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNWindowsRuntimeMarshal = interface; // type: System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNArm64_Aes = interface; // type: System.Runtime.Intrinsics.Arm.Arm64.Aes, namespace: System.Runtime.Intrinsics.Arm.Arm64
  DNBase = interface; // type: System.Runtime.Intrinsics.Arm.Arm64.Base, namespace: System.Runtime.Intrinsics.Arm.Arm64
  DNSha1 = interface; // type: System.Runtime.Intrinsics.Arm.Arm64.Sha1, namespace: System.Runtime.Intrinsics.Arm.Arm64
  DNSha256 = interface; // type: System.Runtime.Intrinsics.Arm.Arm64.Sha256, namespace: System.Runtime.Intrinsics.Arm.Arm64
  DNSimd = interface; // type: System.Runtime.Intrinsics.Arm.Arm64.Simd, namespace: System.Runtime.Intrinsics.Arm.Arm64
  DNX86_Aes = interface; // type: System.Runtime.Intrinsics.X86.Aes, namespace: System.Runtime.Intrinsics.X86
  DNAvx = interface; // type: System.Runtime.Intrinsics.X86.Avx, namespace: System.Runtime.Intrinsics.X86
  DNAvx2 = interface; // type: System.Runtime.Intrinsics.X86.Avx2, namespace: System.Runtime.Intrinsics.X86
  DNBmi1 = interface; // type: System.Runtime.Intrinsics.X86.Bmi1, namespace: System.Runtime.Intrinsics.X86
  DNBmi2 = interface; // type: System.Runtime.Intrinsics.X86.Bmi2, namespace: System.Runtime.Intrinsics.X86
  DNFma = interface; // type: System.Runtime.Intrinsics.X86.Fma, namespace: System.Runtime.Intrinsics.X86
  DNLzcnt = interface; // type: System.Runtime.Intrinsics.X86.Lzcnt, namespace: System.Runtime.Intrinsics.X86
  DNPclmulqdq = interface; // type: System.Runtime.Intrinsics.X86.Pclmulqdq, namespace: System.Runtime.Intrinsics.X86
  DNPopcnt = interface; // type: System.Runtime.Intrinsics.X86.Popcnt, namespace: System.Runtime.Intrinsics.X86
  DNSse = interface; // type: System.Runtime.Intrinsics.X86.Sse, namespace: System.Runtime.Intrinsics.X86
  DNSse2 = interface; // type: System.Runtime.Intrinsics.X86.Sse2, namespace: System.Runtime.Intrinsics.X86
  DNSse3 = interface; // type: System.Runtime.Intrinsics.X86.Sse3, namespace: System.Runtime.Intrinsics.X86
  DNSse41 = interface; // type: System.Runtime.Intrinsics.X86.Sse41, namespace: System.Runtime.Intrinsics.X86
  DNSse42 = interface; // type: System.Runtime.Intrinsics.X86.Sse42, namespace: System.Runtime.Intrinsics.X86
  DNSsse3 = interface; // type: System.Runtime.Intrinsics.X86.Ssse3, namespace: System.Runtime.Intrinsics.X86
  DNAssemblyLoadContext = interface; // type: System.Runtime.Loader.AssemblyLoadContext, namespace: System.Runtime.Loader
  DNRuntimeImports = interface; // type: System.Runtime.RuntimeImports, namespace: System.Runtime
  DNSerializationInfo = interface; // type: System.Runtime.Serialization.SerializationInfo, namespace: System.Runtime.Serialization
  DNSerializationInfoEnumerator = interface; // type: System.Runtime.Serialization.SerializationInfoEnumerator, namespace: System.Runtime.Serialization
  DNSecureString = interface; // type: System.Security.SecureString, namespace: System.Security
  DNString = interface; // type: System.String, namespace: System
  DNStringComparer = interface; // type: System.StringComparer, namespace: System
  DNCultureAwareComparer = interface; // type: System.CultureAwareComparer, namespace: System
  DNOrdinalComparer = interface; // type: System.OrdinalComparer, namespace: System
  DNDecoder = interface; // type: System.Text.Decoder, namespace: System.Text
  DNDecoderFallback = interface; // type: System.Text.DecoderFallback, namespace: System.Text
  DNDecoderExceptionFallback = interface; // type: System.Text.DecoderExceptionFallback, namespace: System.Text
  DNDecoderReplacementFallback = interface; // type: System.Text.DecoderReplacementFallback, namespace: System.Text
  DNDecoderFallbackBuffer = interface; // type: System.Text.DecoderFallbackBuffer, namespace: System.Text
  DNDecoderExceptionFallbackBuffer = interface; // type: System.Text.DecoderExceptionFallbackBuffer, namespace: System.Text
  DNDecoderReplacementFallbackBuffer = interface; // type: System.Text.DecoderReplacementFallbackBuffer, namespace: System.Text
  DNEncoder = interface; // type: System.Text.Encoder, namespace: System.Text
  DNEncoderFallback = interface; // type: System.Text.EncoderFallback, namespace: System.Text
  DNEncoderExceptionFallback = interface; // type: System.Text.EncoderExceptionFallback, namespace: System.Text
  DNEncoderReplacementFallback = interface; // type: System.Text.EncoderReplacementFallback, namespace: System.Text
  DNEncoderFallbackBuffer = interface; // type: System.Text.EncoderFallbackBuffer, namespace: System.Text
  DNEncoderExceptionFallbackBuffer = interface; // type: System.Text.EncoderExceptionFallbackBuffer, namespace: System.Text
  DNEncoderReplacementFallbackBuffer = interface; // type: System.Text.EncoderReplacementFallbackBuffer, namespace: System.Text
  DNEncoding = interface; // type: System.Text.Encoding, namespace: System.Text
  DNASCIIEncoding = interface; // type: System.Text.ASCIIEncoding, namespace: System.Text
  DNUnicodeEncoding = interface; // type: System.Text.UnicodeEncoding, namespace: System.Text
  DNUTF32Encoding = interface; // type: System.Text.UTF32Encoding, namespace: System.Text
  DNUTF7Encoding = interface; // type: System.Text.UTF7Encoding, namespace: System.Text
  DNUTF8Encoding = interface; // type: System.Text.UTF8Encoding, namespace: System.Text
  DNEncodingInfo = interface; // type: System.Text.EncodingInfo, namespace: System.Text
  DNEncodingProvider = interface; // type: System.Text.EncodingProvider, namespace: System.Text
  DNStringBuilder = interface; // type: System.Text.StringBuilder, namespace: System.Text
  DNAsyncLocal<T> = interface; // type: System.Threading.AsyncLocal`1, namespace: System.Threading
  DNCancellationTokenSource = interface; // type: System.Threading.CancellationTokenSource, namespace: System.Threading
  DNExecutionContext = interface; // type: System.Threading.ExecutionContext, namespace: System.Threading
  DNInterlocked = interface; // type: System.Threading.Interlocked, namespace: System.Threading
  DNLazyInitializer = interface; // type: System.Threading.LazyInitializer, namespace: System.Threading
  DNManualResetEventSlim = interface; // type: System.Threading.ManualResetEventSlim, namespace: System.Threading
  DNMonitor = interface; // type: System.Threading.Monitor, namespace: System.Threading
  DNOverlapped = interface; // type: System.Threading.Overlapped, namespace: System.Threading
  DNPreAllocatedOverlapped = interface; // type: System.Threading.PreAllocatedOverlapped, namespace: System.Threading
  DNReaderWriterLockSlim = interface; // type: System.Threading.ReaderWriterLockSlim, namespace: System.Threading
  DNSemaphoreSlim = interface; // type: System.Threading.SemaphoreSlim, namespace: System.Threading
  DNSynchronizationContext = interface; // type: System.Threading.SynchronizationContext, namespace: System.Threading
  DNConcurrentExclusiveSchedulerPair = interface; // type: System.Threading.Tasks.ConcurrentExclusiveSchedulerPair, namespace: System.Threading.Tasks
  DNTask = interface; // type: System.Threading.Tasks.Task, namespace: System.Threading.Tasks
  DNTask<TResult> = interface; // type: System.Threading.Tasks.Task`1, namespace: System.Threading.Tasks
  DNTaskCompletionSource<TResult> = interface; // type: System.Threading.Tasks.TaskCompletionSource`1, namespace: System.Threading.Tasks
  DNTaskExtensions = interface; // type: System.Threading.Tasks.TaskExtensions, namespace: System.Threading.Tasks
  DNTaskFactory<TResult> = interface; // type: System.Threading.Tasks.TaskFactory`1, namespace: System.Threading.Tasks
  DNTaskFactory = interface; // type: System.Threading.Tasks.TaskFactory, namespace: System.Threading.Tasks
  DNTaskScheduler = interface; // type: System.Threading.Tasks.TaskScheduler, namespace: System.Threading.Tasks
  DNThreadLocal<T> = interface; // type: System.Threading.ThreadLocal`1, namespace: System.Threading
  DNThreadPool = interface; // type: System.Threading.ThreadPool, namespace: System.Threading
  DNThreadPoolBoundHandle = interface; // type: System.Threading.ThreadPoolBoundHandle, namespace: System.Threading
  DNTimeout = interface; // type: System.Threading.Timeout, namespace: System.Threading
  DNVolatile = interface; // type: System.Threading.Volatile, namespace: System.Threading
  DNTimeZone = interface; // type: System.TimeZone, namespace: System
  DNTimeZoneInfo = interface; // type: System.TimeZoneInfo, namespace: System
  DNTimeZoneInfo_AdjustmentRule = interface; // type: System.TimeZoneInfo+AdjustmentRule, namespace: System
  DNTuple<T1> = interface; // type: System.Tuple`1, namespace: System
  DNTuple<T1, T2> = interface; // type: System.Tuple`2, namespace: System
  DNTuple<T1, T2, T3> = interface; // type: System.Tuple`3, namespace: System
  DNTuple<T1, T2, T3, T4> = interface; // type: System.Tuple`4, namespace: System
  DNTuple<T1, T2, T3, T4, T5> = interface; // type: System.Tuple`5, namespace: System
  DNTuple<T1, T2, T3, T4, T5, T6> = interface; // type: System.Tuple`6, namespace: System
  DNTuple<T1, T2, T3, T4, T5, T6, T7> = interface; // type: System.Tuple`7, namespace: System
  DNTuple<T1, T2, T3, T4, T5, T6, T7, TRest> = interface; // type: System.Tuple`8, namespace: System
  DNTuple = interface; // type: System.Tuple, namespace: System
  DNTupleExtensions = interface; // type: System.TupleExtensions, namespace: System
  DNUnitySerializationHolder = interface; // type: System.UnitySerializationHolder, namespace: System
  DNValueType = interface; // type: System.ValueType, namespace: System
  DNArgIterator = interface; // type: System.ArgIterator, namespace: System
  DNArraySegment<T> = interface; // type: System.ArraySegment`1, namespace: System
  DNArraySegment_Enumerator<T> = interface; // type: System.ArraySegment`1+Enumerator, namespace: System
  DNBoolean = interface; // type: System.Boolean, namespace: System
  DNMemoryHandle = interface; // type: System.Buffers.MemoryHandle, namespace: System.Buffers
  DNByte = interface; // type: System.Byte, namespace: System
  DNChar = interface; // type: System.Char, namespace: System
  DNDictionaryEntry = interface; // type: System.Collections.DictionaryEntry, namespace: System.Collections
  DNDictionary_Enumerator<TKey, TValue> = interface; // type: System.Collections.Generic.Dictionary`2+Enumerator, namespace: System.Collections.Generic
  DNDictionary_KeyCollection_Enumerator<TKey, TValue> = interface; // type: System.Collections.Generic.Dictionary`2+KeyCollection+Enumerator, namespace: System.Collections.Generic
  DNDictionary_ValueCollection_Enumerator<TKey, TValue> = interface; // type: System.Collections.Generic.Dictionary`2+ValueCollection+Enumerator, namespace: System.Collections.Generic
  DNKeyValuePair<TKey, TValue> = interface; // type: System.Collections.Generic.KeyValuePair`2, namespace: System.Collections.Generic
  DNList_Enumerator<T> = interface; // type: System.Collections.Generic.List`1+Enumerator, namespace: System.Collections.Generic
  DNDateTime = interface; // type: System.DateTime, namespace: System
  DNDateTimeOffset = interface; // type: System.DateTimeOffset, namespace: System
  DNDecimal = interface; // type: System.Decimal, namespace: System
  DNEventSourceOptions = interface; // type: System.Diagnostics.Tracing.EventSourceOptions, namespace: System.Diagnostics.Tracing
  DNDouble = interface; // type: System.Double, namespace: System
  DNEnum = interface; // type: System.Enum, namespace: System
  DNGuid = interface; // type: System.Guid, namespace: System
  DNHashCode = interface; // type: System.HashCode, namespace: System
  DNInt16 = interface; // type: System.Int16, namespace: System
  DNInt32 = interface; // type: System.Int32, namespace: System
  DNInt64 = interface; // type: System.Int64, namespace: System
  DNIntPtr = interface; // type: System.IntPtr, namespace: System
  DNMemory<T> = interface; // type: System.Memory`1, namespace: System
  DNModuleHandle = interface; // type: System.ModuleHandle, namespace: System
  DNNullable<T> = interface; // type: System.Nullable`1, namespace: System
  DNVector<T> = interface; // type: System.Numerics.Vector`1, namespace: System.Numerics
  DNReadOnlyMemory<T> = interface; // type: System.ReadOnlyMemory`1, namespace: System
  DNReadOnlySpan<T> = interface; // type: System.ReadOnlySpan`1, namespace: System
  DNReadOnlySpan_Enumerator<T> = interface; // type: System.ReadOnlySpan`1+Enumerator, namespace: System
  DNCustomAttributeNamedArgument = interface; // type: System.Reflection.CustomAttributeNamedArgument, namespace: System.Reflection
  DNCustomAttributeTypedArgument = interface; // type: System.Reflection.CustomAttributeTypedArgument, namespace: System.Reflection
  DNEventToken = interface; // type: System.Reflection.Emit.EventToken, namespace: System.Reflection.Emit
  DNFieldToken = interface; // type: System.Reflection.Emit.FieldToken, namespace: System.Reflection.Emit
  DNLabel = interface; // type: System.Reflection.Emit.Label, namespace: System.Reflection.Emit
  DNMethodToken = interface; // type: System.Reflection.Emit.MethodToken, namespace: System.Reflection.Emit
  DNOpCode = interface; // type: System.Reflection.Emit.OpCode, namespace: System.Reflection.Emit
  DNParameterToken = interface; // type: System.Reflection.Emit.ParameterToken, namespace: System.Reflection.Emit
  DNPropertyToken = interface; // type: System.Reflection.Emit.PropertyToken, namespace: System.Reflection.Emit
  DNSignatureToken = interface; // type: System.Reflection.Emit.SignatureToken, namespace: System.Reflection.Emit
  DNStringToken = interface; // type: System.Reflection.Emit.StringToken, namespace: System.Reflection.Emit
  DNTypeToken = interface; // type: System.Reflection.Emit.TypeToken, namespace: System.Reflection.Emit
  DNInterfaceMapping = interface; // type: System.Reflection.InterfaceMapping, namespace: System.Reflection
  DNParameterModifier = interface; // type: System.Reflection.ParameterModifier, namespace: System.Reflection
  DNAsyncTaskMethodBuilder<TResult> = interface; // type: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1, namespace: System.Runtime.CompilerServices
  DNAsyncTaskMethodBuilder = interface; // type: System.Runtime.CompilerServices.AsyncTaskMethodBuilder, namespace: System.Runtime.CompilerServices
  DNAsyncValueTaskMethodBuilder<TResult> = interface; // type: System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1, namespace: System.Runtime.CompilerServices
  DNAsyncValueTaskMethodBuilder = interface; // type: System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder, namespace: System.Runtime.CompilerServices
  DNAsyncVoidMethodBuilder = interface; // type: System.Runtime.CompilerServices.AsyncVoidMethodBuilder, namespace: System.Runtime.CompilerServices
  DNConfiguredTaskAwaitable<TResult> = interface; // type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1, namespace: System.Runtime.CompilerServices
  DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter<TResult> = interface; // type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1+ConfiguredTaskAwaiter, namespace: System.Runtime.CompilerServices
  DNConfiguredTaskAwaitable = interface; // type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable, namespace: System.Runtime.CompilerServices
  DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter = interface; // type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable+ConfiguredTaskAwaiter, namespace: System.Runtime.CompilerServices
  DNConfiguredValueTaskAwaitable<TResult> = interface; // type: System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1, namespace: System.Runtime.CompilerServices
  DNCompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter<TResult> = interface; // type: System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1+ConfiguredValueTaskAwaiter, namespace: System.Runtime.CompilerServices
  DNConfiguredValueTaskAwaitable = interface; // type: System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable, namespace: System.Runtime.CompilerServices
  DNCompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter = interface; // type: System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable+ConfiguredValueTaskAwaiter, namespace: System.Runtime.CompilerServices
  DNTaskAwaiter<TResult> = interface; // type: System.Runtime.CompilerServices.TaskAwaiter`1, namespace: System.Runtime.CompilerServices
  DNTaskAwaiter = interface; // type: System.Runtime.CompilerServices.TaskAwaiter, namespace: System.Runtime.CompilerServices
  DNValueTaskAwaiter<TResult> = interface; // type: System.Runtime.CompilerServices.ValueTaskAwaiter`1, namespace: System.Runtime.CompilerServices
  DNValueTaskAwaiter = interface; // type: System.Runtime.CompilerServices.ValueTaskAwaiter, namespace: System.Runtime.CompilerServices
  DNYieldAwaitable = interface; // type: System.Runtime.CompilerServices.YieldAwaitable, namespace: System.Runtime.CompilerServices
  DNYieldAwaitable_YieldAwaiter = interface; // type: System.Runtime.CompilerServices.YieldAwaitable+YieldAwaiter, namespace: System.Runtime.CompilerServices
  DNArrayWithOffset = interface; // type: System.Runtime.InteropServices.ArrayWithOffset, namespace: System.Runtime.InteropServices
  DNBIND_OPTS = interface; // type: System.Runtime.InteropServices.ComTypes.BIND_OPTS, namespace: System.Runtime.InteropServices.ComTypes
  DNBINDPTR = interface; // type: System.Runtime.InteropServices.ComTypes.BINDPTR, namespace: System.Runtime.InteropServices.ComTypes
  DNCONNECTDATA = interface; // type: System.Runtime.InteropServices.ComTypes.CONNECTDATA, namespace: System.Runtime.InteropServices.ComTypes
  DNDISPPARAMS = interface; // type: System.Runtime.InteropServices.ComTypes.DISPPARAMS, namespace: System.Runtime.InteropServices.ComTypes
  DNELEMDESC = interface; // type: System.Runtime.InteropServices.ComTypes.ELEMDESC, namespace: System.Runtime.InteropServices.ComTypes
  DNELEMDESC_DESCUNION = interface; // type: System.Runtime.InteropServices.ComTypes.ELEMDESC+DESCUNION, namespace: System.Runtime.InteropServices.ComTypes
  DNEXCEPINFO = interface; // type: System.Runtime.InteropServices.ComTypes.EXCEPINFO, namespace: System.Runtime.InteropServices.ComTypes
  DNFILETIME = interface; // type: System.Runtime.InteropServices.ComTypes.FILETIME, namespace: System.Runtime.InteropServices.ComTypes
  DNFUNCDESC = interface; // type: System.Runtime.InteropServices.ComTypes.FUNCDESC, namespace: System.Runtime.InteropServices.ComTypes
  DNIDLDESC = interface; // type: System.Runtime.InteropServices.ComTypes.IDLDESC, namespace: System.Runtime.InteropServices.ComTypes
  DNPARAMDESC = interface; // type: System.Runtime.InteropServices.ComTypes.PARAMDESC, namespace: System.Runtime.InteropServices.ComTypes
  DNSTATSTG = interface; // type: System.Runtime.InteropServices.ComTypes.STATSTG, namespace: System.Runtime.InteropServices.ComTypes
  DNTYPEATTR = interface; // type: System.Runtime.InteropServices.ComTypes.TYPEATTR, namespace: System.Runtime.InteropServices.ComTypes
  DNTYPEDESC = interface; // type: System.Runtime.InteropServices.ComTypes.TYPEDESC, namespace: System.Runtime.InteropServices.ComTypes
  DNTYPELIBATTR = interface; // type: System.Runtime.InteropServices.ComTypes.TYPELIBATTR, namespace: System.Runtime.InteropServices.ComTypes
  DNVARDESC = interface; // type: System.Runtime.InteropServices.ComTypes.VARDESC, namespace: System.Runtime.InteropServices.ComTypes
  DNVARDESC_DESCUNION = interface; // type: System.Runtime.InteropServices.ComTypes.VARDESC+DESCUNION, namespace: System.Runtime.InteropServices.ComTypes
  DNGCHandle = interface; // type: System.Runtime.InteropServices.GCHandle, namespace: System.Runtime.InteropServices
  DNHandleRef = interface; // type: System.Runtime.InteropServices.HandleRef, namespace: System.Runtime.InteropServices
  DNEventRegistrationToken = interface; // type: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken, namespace: System.Runtime.InteropServices.WindowsRuntime
  DNVector128<T> = interface; // type: System.Runtime.Intrinsics.Vector128`1, namespace: System.Runtime.Intrinsics
  DNVector256<T> = interface; // type: System.Runtime.Intrinsics.Vector256`1, namespace: System.Runtime.Intrinsics
  DNVector64<T> = interface; // type: System.Runtime.Intrinsics.Vector64`1, namespace: System.Runtime.Intrinsics
  DNSerializationEntry = interface; // type: System.Runtime.Serialization.SerializationEntry, namespace: System.Runtime.Serialization
  DNStreamingContext = interface; // type: System.Runtime.Serialization.StreamingContext, namespace: System.Runtime.Serialization
  DNRuntimeArgumentHandle = interface; // type: System.RuntimeArgumentHandle, namespace: System
  DNRuntimeFieldHandle = interface; // type: System.RuntimeFieldHandle, namespace: System
  DNRuntimeMethodHandle = interface; // type: System.RuntimeMethodHandle, namespace: System
  DNRuntimeTypeHandle = interface; // type: System.RuntimeTypeHandle, namespace: System
  DNSByte = interface; // type: System.SByte, namespace: System
  DNSingle = interface; // type: System.Single, namespace: System
  DNSpan<T> = interface; // type: System.Span`1, namespace: System
  DNSpan_Enumerator<T> = interface; // type: System.Span`1+Enumerator, namespace: System
  DNAsyncFlowControl = interface; // type: System.Threading.AsyncFlowControl, namespace: System.Threading
  DNAsyncLocalValueChangedArgs<T> = interface; // type: System.Threading.AsyncLocalValueChangedArgs`1, namespace: System.Threading
  DNCancellationToken = interface; // type: System.Threading.CancellationToken, namespace: System.Threading
  DNCancellationTokenRegistration = interface; // type: System.Threading.CancellationTokenRegistration, namespace: System.Threading
  DNNativeOverlapped = interface; // type: System.Threading.NativeOverlapped, namespace: System.Threading
  DNSpinLock = interface; // type: System.Threading.SpinLock, namespace: System.Threading
  DNSpinWait = interface; // type: System.Threading.SpinWait, namespace: System.Threading
  DNValueTask<TResult> = interface; // type: System.Threading.Tasks.ValueTask`1, namespace: System.Threading.Tasks
  DNValueTask = interface; // type: System.Threading.Tasks.ValueTask, namespace: System.Threading.Tasks
  DNTimeSpan = interface; // type: System.TimeSpan, namespace: System
  DNTimeZoneInfo_TransitionTime = interface; // type: System.TimeZoneInfo+TransitionTime, namespace: System
  DNTypedReference = interface; // type: System.TypedReference, namespace: System
  DNUInt16 = interface; // type: System.UInt16, namespace: System
  DNUInt32 = interface; // type: System.UInt32, namespace: System
  DNUInt64 = interface; // type: System.UInt64, namespace: System
  DNUIntPtr = interface; // type: System.UIntPtr, namespace: System
  DNValueTuple<T1> = interface; // type: System.ValueTuple`1, namespace: System
  DNValueTuple<T1, T2> = interface; // type: System.ValueTuple`2, namespace: System
  DNValueTuple<T1, T2, T3> = interface; // type: System.ValueTuple`3, namespace: System
  DNValueTuple<T1, T2, T3, T4> = interface; // type: System.ValueTuple`4, namespace: System
  DNValueTuple<T1, T2, T3, T4, T5> = interface; // type: System.ValueTuple`5, namespace: System
  DNValueTuple<T1, T2, T3, T4, T5, T6> = interface; // type: System.ValueTuple`6, namespace: System
  DNValueTuple<T1, T2, T3, T4, T5, T6, T7> = interface; // type: System.ValueTuple`7, namespace: System
  DNValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> = interface; // type: System.ValueTuple`8, namespace: System
  DNValueTuple = interface; // type: System.ValueTuple, namespace: System
  DNVoid = interface; // type: System.Void, namespace: System
  DNVersion = interface; // type: System.Version, namespace: System
  DNWeakReference<T> = interface; // type: System.WeakReference`1, namespace: System
  DNWeakReference = interface; // type: System.WeakReference, namespace: System

{ delegates }

  [DNTypeName('System.Action`1')]
  DNAction<T> = procedure(obj: T) of object;

  [DNTypeName('System.Action`2')]
  DNAction<T1, T2> = procedure(arg1: T1; arg2: T2) of object;

  [DNTypeName('System.Action`3')]
  DNAction<T1, T2, T3> = procedure(arg1: T1; arg2: T2; arg3: T3) of object;

  [DNTypeName('System.Action`4')]
  DNAction<T1, T2, T3, T4> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4) of object;

  [DNTypeName('System.Action`5')]
  DNAction<T1, T2, T3, T4, T5> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5) of object;

  [DNTypeName('System.Action`6')]
  DNAction<T1, T2, T3, T4, T5, T6> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6) of object;

  [DNTypeName('System.Action`7')]
  DNAction<T1, T2, T3, T4, T5, T6, T7> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7) of object;

  [DNTypeName('System.Action`8')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8) of object;

  [DNTypeName('System.Action')]
  DNAction = procedure of object;

  [DNTypeName('System.AssemblyLoadEventHandler')]
  DNAssemblyLoadEventHandler = procedure(sender: DNObject; args: DNAssemblyLoadEventArgs) of object;

  [DNTypeName('System.AsyncCallback')]
  DNAsyncCallback = procedure(ar: DNIAsyncResult) of object;

  [DNTypeName('System.Buffers.ReadOnlySpanAction`2')]
  DNReadOnlySpanAction<T, TArg> = procedure(span: DNReadOnlySpan<T>; arg: TArg) of object;

  [DNTypeName('System.Buffers.SpanAction`2')]
  DNSpanAction<T, TArg> = procedure(span: DNSpan<T>; arg: TArg) of object;

  [DNTypeName('System.Comparison`1')]
  DNComparison<T> = function(x: T; y: T): Int32 of object;

  [DNTypeName('System.Converter`2')]
  DNConverter<TInput, TOutput> = function(input: TInput): TOutput of object;

  [DNTypeName('System.EventHandler`1')]
  DNEventHandler<TEventArgs> = procedure(sender: DNObject; e: TEventArgs) of object;

  [DNTypeName('System.EventHandler')]
  DNEventHandler = procedure(sender: DNObject; e: DNEventArgs) of object;

  [DNTypeName('System.Func`1')]
  DNFunc<TResult> = function: TResult of object;

  [DNTypeName('System.Func`2')]
  DNFunc<T, TResult> = function(arg: T): TResult of object;

  [DNTypeName('System.Func`3')]
  DNFunc<T1, T2, TResult> = function(arg1: T1; arg2: T2): TResult of object;

  [DNTypeName('System.Func`4')]
  DNFunc<T1, T2, T3, TResult> = function(arg1: T1; arg2: T2; arg3: T3): TResult of object;

  [DNTypeName('System.Func`5')]
  DNFunc<T1, T2, T3, T4, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4): TResult of object;

  [DNTypeName('System.Func`6')]
  DNFunc<T1, T2, T3, T4, T5, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5): TResult of object;

  [DNTypeName('System.Func`7')]
  DNFunc<T1, T2, T3, T4, T5, T6, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6): TResult of object;

  [DNTypeName('System.Func`8')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7): TResult of object;

  [DNTypeName('System.Func`9')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8): TResult of object;

  [DNTypeName('System.Predicate`1')]
  DNPredicate<T> = function(obj: T): Boolean of object;

  [DNTypeName('System.Reflection.MemberFilter')]
  DNMemberFilter = function(m: DNMemberInfo; filterCriteria: DNObject): Boolean of object;

  [DNTypeName('System.Reflection.ModuleResolveEventHandler')]
  DNModuleResolveEventHandler = function(sender: DNObject; e: DNResolveEventArgs): DNModule of object;

  [DNTypeName('System.Reflection.TypeFilter')]
  DNTypeFilter = function(m: DNType; filterCriteria: DNObject): Boolean of object;

  [DNTypeName('System.ResolveEventHandler')]
  DNResolveEventHandler = function(sender: DNObject; args: DNResolveEventArgs): DNAssembly of object;

  [DNTypeName('System.Runtime.CompilerServices.ConditionalWeakTable`2+CreateValueCallback')]
  DNConditionalWeakTable_CreateValueCallback<TKey, TValue> = function(key: TKey): TValue of object;

  [DNTypeName('System.Runtime.CompilerServices.RuntimeHelpers+CleanupCode')]
  DNRuntimeHelpers_CleanupCode = procedure(userData: DNObject; exceptionThrown: Boolean) of object;

  [DNTypeName('System.Runtime.CompilerServices.RuntimeHelpers+TryCode')]
  DNRuntimeHelpers_TryCode = procedure(userData: DNObject) of object;

  [DNTypeName('System.Threading.ContextCallback')]
  DNContextCallback = procedure(state: DNObject) of object;

  [DNTypeName('System.Threading.IOCompletionCallback')]
  DNIOCompletionCallback = procedure(errorCode: UInt32; numBytes: UInt32; var pOVERLAP: DNNativeOverlapped) of object;

  [DNTypeName('System.Threading.ParameterizedThreadStart')]
  DNParameterizedThreadStart = procedure(obj: DNObject) of object;

  [DNTypeName('System.Threading.SendOrPostCallback')]
  DNSendOrPostCallback = procedure(state: DNObject) of object;

  [DNTypeName('System.Threading.ThreadStart')]
  DNThreadStart = procedure of object;

  [DNTypeName('System.Threading.TimerCallback')]
  DNTimerCallback = procedure(state: DNObject) of object;

  [DNTypeName('System.Threading.WaitCallback')]
  DNWaitCallback = procedure(state: DNObject) of object;

  [DNTypeName('System.Threading.WaitOrTimerCallback')]
  DNWaitOrTimerCallback = procedure(state: DNObject; timedOut: Boolean) of object;

  [DNTypeName('System.UnhandledExceptionEventHandler')]
  DNUnhandledExceptionEventHandler = procedure(sender: DNObject; e: DNUnhandledExceptionEventArgs) of object;



  { TDNGenericImport }

  TDNGenericImport<C: IDNClass; T: IDNInstance> = class(TDNCustomGenericImport<C, T>)
  private
    class function GetTypeId: DNType; static;
  public
    class property typeid: DNType read GetTypeId;
  end;

{ objects }


  DNObjectClass = interface(IDNClass)
    [IID_DNObjectClass_Name]
    {class} function init: DNObject;
    {class} function ReferenceEquals(objA, objB: DNObject): Boolean;
    {class} function Equals(objA, objB: DNObject): Boolean;
  end;

  [DNTypeName(DNObject_FullName)]
  DNObject = interface(IDNInstance)
    [IID_DNObject_Name]
    function Equals(obj: DNObject) : Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;
    function ToString: string;
  end;
  TDNObject = class(TDNGenericImport<DNObjectClass, DNObject>) end;


  //-------------namespace: System----------------
  [DNTypeName('System.IDisposable')]
  DNIDisposable = interface(DNObject)
  ['{805D7A98-D4AF-3F0F-967F-E5CF45312D2C}']
  { methods } 

    procedure Dispose;

  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.IEnumerator')]
  DNIEnumerator = interface(DNObject)
  ['{12B7CD10-B855-33F9-AA28-0914C392435A}']
  { getters & setters } 

    function get_Current: DNObject;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;

  { propertys } 

    property Current: DNObject read get_Current;
  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.IEnumerator`1')]
  DNIEnumerator<T> = interface(DNIEnumerator)
  ['{ACCB6202-26B6-3447-AEFA-73B653F93530}']
  { getters & setters } 

    function get_Current: T;

  { propertys } 

    property Current: T read get_Current;
  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.IEnumerable')]
  DNIEnumerable = interface(DNObject)
  ['{98EE7132-2BE0-3939-8ED0-1A562E549561}']
  { methods } 

    function GetEnumerator: DNIEnumerator;

  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.IEnumerable`1')]
  DNIEnumerable<T> = interface(DNIEnumerable)
  ['{AEF9EC8A-1E73-365B-8DA2-800A3A6166E6}']
  { methods } 

    function GetEnumerator: DNIEnumerator<T>;

  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.ICollection')]
  DNICollection = interface(DNIEnumerable)
  ['{DE8DB6F8-D101-3A92-8D1C-E72E5F10E992}']
  { getters & setters } 

    function get_Count: Int32;
    function get_SyncRoot: DNObject;
    function get_IsSynchronized: Boolean;

  { methods } 

    procedure CopyTo(&array: DNArray; index: Int32);

  { propertys } 

    property Count: Int32 read get_Count;
    property SyncRoot: DNObject read get_SyncRoot;
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.ICollection`1')]
  DNICollection<T> = interface(DNIEnumerable<T>)
  ['{4E0BA8E9-C074-3990-BE19-EF596EC42B01}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;

  { methods } 

    procedure Add(item: T);
    procedure Clear;
    function &Contains(item: T): Boolean;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32);
    function Remove(item: T): Boolean;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.IList')]
  DNIList = interface(DNICollection)
  ['{7BCFA00F-F764-3113-9140-3BBD127A96BB}']
  { getters & setters } 

    function get_Item(index: Int32): DNObject;
    procedure set_Item(index: Int32; value: DNObject);
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;

  { methods } 

    function Add(value: DNObject): Int32;
    function &Contains(value: DNObject): Boolean;
    procedure Clear;
    function IndexOf(value: DNObject): Int32;
    procedure Insert(index: Int32; value: DNObject);
    procedure Remove(value: DNObject);
    procedure RemoveAt(index: Int32);

  { propertys } 

    property Item[index: Int32]: DNObject read get_Item write set_Item; default;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.IList`1')]
  DNIList<T> = interface(DNICollection<T>)
  ['{5C185EDF-6A24-396D-886F-16F49368D2AB}']
  { getters & setters } 

    function get_Item(index: Int32): T;
    procedure set_Item(index: Int32; value: T);

  { methods } 

    function IndexOf(item: T): Int32;
    procedure Insert(index: Int32; item: T);
    procedure RemoveAt(index: Int32);

  { propertys } 

    property Item[index: Int32]: T read get_Item write set_Item; default;
  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.IDictionary')]
  DNIDictionary = interface(DNICollection)
  ['{6A6841DF-3287-3D87-8060-CE0B4C77D2A1}']
  { getters & setters } 

    function get_Item(key: DNObject): DNObject;
    procedure set_Item(key: DNObject; value: DNObject);
    function get_Keys: DNICollection;
    function get_Values: DNICollection;
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;

  { methods } 

    function &Contains(key: DNObject): Boolean;
    procedure Add(key: DNObject; value: DNObject);
    procedure Clear;
    function GetEnumerator: DNIDictionaryEnumerator;
    procedure Remove(key: DNObject);

  { propertys } 

    property Item[key: DNObject]: DNObject read get_Item write set_Item; default;
    property Keys: DNICollection read get_Keys;
    property Values: DNICollection read get_Values;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.IDictionary`2')]
  DNIDictionary<TKey, TValue> = interface(DNICollection<DNKeyValuePair<TKey, TValue>>)
  ['{A799EDAA-B36F-31DA-9B95-D75BE19D1CCC}']
  { getters & setters } 

    function get_Item(key: TKey): TValue;
    procedure set_Item(key: TKey; value: TValue);
    function get_Keys: DNICollection<TKey>;
    function get_Values: DNICollection<TValue>;

  { methods } 

    function ContainsKey(key: TKey): Boolean;
    procedure Add(key: TKey; value: TValue);
    function Remove(key: TKey): Boolean;
    function TryGetValue(key: TKey; out value: TValue): Boolean;

  { propertys } 

    property Item[key: TKey]: TValue read get_Item write set_Item; default;
    property Keys: DNICollection<TKey> read get_Keys;
    property Values: DNICollection<TValue> read get_Values;
  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.IComparer')]
  DNIComparer = interface(DNObject)
  ['{C20FD3EB-7022-3D14-8477-760FAB54E50D}']
  { methods } 

    function Compare(x: DNObject; y: DNObject): Int32;

  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.IComparer`1')]
  DNIComparer<T> = interface(DNObject)
  ['{2EABC2B4-F497-3FA8-AB24-876A15E92896}']
  { methods } 

    function Compare(x: T; y: T): Int32;

  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.IEqualityComparer')]
  DNIEqualityComparer = interface(DNObject)
  ['{AAB7C6EA-CAB0-3ADB-82AA-CF32E29AF238}']
  { methods } 

    function Equals(x: DNObject; y: DNObject): Boolean;
    function GetHashCode(obj: DNObject): Int32;

  end;

  //-------------namespace: System.Collections.Generic----------------
  DNEqualityComparerClass<T> = interface(DNObjectClass)
  ['{9335239C-E886-54BC-8BB2-CF5A8954C948}']
  { static getter & setter } 

    {class} function get_Default: DNEqualityComparer<T>;

  { static propertys } 

    {class} property &Default: DNEqualityComparer<T> read get_Default;
  end;

  [DNTypeName('System.Collections.Generic.EqualityComparer`1')]
  DNEqualityComparer<T> = interface(DNIEqualityComparer)
  ['{2FAA22E3-9D70-38A8-AD33-BFE0F9A36C66}']
  { methods } 

    function Equals(x: T; y: T): Boolean; overload;
    function GetHashCode(obj: T): Int32; overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;
    function GetType: DNType;

  end;

  TDNEqualityComparer<T> = class(TDNGenericImport<DNEqualityComparerClass<T>, DNEqualityComparer<T>>) end;

  //-------------namespace: System.Buffers----------------
  [DNTypeName('System.Buffers.IPinnable')]
  DNIPinnable = interface(DNObject)
  ['{0859CA54-6C45-32AE-B3BE-3B5DCD84E135}']
  { methods } 

    function Pin(elementIndex: Int32): DNMemoryHandle;
    procedure Unpin;

  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.IEqualityComparer`1')]
  DNIEqualityComparer<T> = interface(DNObject)
  ['{042728AF-01BC-3F31-8294-AC99DF654C3A}']
  { methods } 

    function Equals(x: T; y: T): Boolean;
    function GetHashCode(obj: T): Int32;

  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.IReadOnlyCollection`1')]
  DNIReadOnlyCollection<T> = interface(DNIEnumerable<T>)
  ['{476EF854-57E0-3FEB-908B-5CA9913352C0}']
  { getters & setters } 

    function get_Count: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.IReadOnlyDictionary`2')]
  DNIReadOnlyDictionary<TKey, TValue> = interface(DNIReadOnlyCollection<DNKeyValuePair<TKey, TValue>>)
  ['{A8F1184E-7A7F-3F9F-A938-E036EE41494D}']
  { getters & setters } 

    function get_Item(key: TKey): TValue;
    function get_Keys: DNIEnumerable<TKey>;
    function get_Values: DNIEnumerable<TValue>;

  { methods } 

    function ContainsKey(key: TKey): Boolean;
    function TryGetValue(key: TKey; out value: TValue): Boolean;

  { propertys } 

    property Item[key: TKey]: TValue read get_Item; default;
    property Keys: DNIEnumerable<TKey> read get_Keys;
    property Values: DNIEnumerable<TValue> read get_Values;
  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.IReadOnlyList`1')]
  DNIReadOnlyList<T> = interface(DNIReadOnlyCollection<T>)
  ['{9F6980D7-8DC2-39CF-875B-A8A36DDC242D}']
  { getters & setters } 

    function get_Item(index: Int32): T;

  { propertys } 

    property Item[index: Int32]: T read get_Item; default;
  end;

  //-------------namespace: System.Resources----------------
  [DNTypeName('System.Resources.IResourceReader')]
  DNIResourceReader = interface(DNIEnumerable)
  ['{8965A22F-FBA8-36AD-8132-70BBD0DA457D}']
  { methods } 

    procedure Close;
    function GetEnumerator: DNIDictionaryEnumerator;

  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.IDictionaryEnumerator')]
  DNIDictionaryEnumerator = interface(DNIEnumerator)
  ['{35D574BF-7A4F-3588-8C19-12212A0FE4DC}']
  { getters & setters } 

    function get_Key: DNObject;
    function get_Value: DNObject;
    function get_Entry: DNDictionaryEntry;

  { propertys } 

    property Key: DNObject read get_Key;
    property Value: DNObject read get_Value;
    property Entry: DNDictionaryEntry read get_Entry;
  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.IStructuralComparable')]
  DNIStructuralComparable = interface(DNObject)
  ['{5F42069E-418C-3D99-802E-D15197F23880}']
  { methods } 

    function CompareTo(other: DNObject; comparer: DNIComparer): Int32;

  end;

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.IStructuralEquatable')]
  DNIStructuralEquatable = interface(DNObject)
  ['{F077A941-0EFB-39D2-8DE3-E207BCB7A7DB}']
  { methods } 

    function Equals(other: DNObject; comparer: DNIEqualityComparer): Boolean;
    function GetHashCode(comparer: DNIEqualityComparer): Int32;

  end;

  //-------------namespace: System.Diagnostics.SymbolStore----------------
  [DNTypeName('System.Diagnostics.SymbolStore.ISymbolDocumentWriter')]
  DNISymbolDocumentWriter = interface(DNObject)
  ['{FA682F24-3A3C-390D-B8A2-96F1106F4B37}']
  { methods } 

    procedure SetSource(source: TArray<Byte>);
    procedure SetCheckSum(algorithmId: DNGuid; checkSum: TArray<Byte>);

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IAsyncResult')]
  DNIAsyncResult = interface(DNObject)
  ['{11AB34E7-0176-3C9E-9EFE-197858400A3D}']
  { getters & setters } 

    function get_IsCompleted: Boolean;
    function get_AsyncWaitHandle: DNWaitHandle;
    function get_AsyncState: DNObject;
    function get_CompletedSynchronously: Boolean;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
    property AsyncWaitHandle: DNWaitHandle read get_AsyncWaitHandle;
    property AsyncState: DNObject read get_AsyncState;
    property CompletedSynchronously: Boolean read get_CompletedSynchronously;
  end;

  //-------------namespace: System----------------
  [DNTypeName('System.ICloneable')]
  DNICloneable = interface(DNObject)
  ['{0CB251A7-3AB3-3B5C-A0B8-9DDF88824B85}']
  { methods } 

    function Clone: DNObject;

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IComparable`1')]
  DNIComparable<T> = interface(DNObject)
  ['{338A8432-786C-3D79-B779-A4F8DCF27835}']
  { methods } 

    function CompareTo(other: T): Int32;

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IComparable')]
  DNIComparable = interface(DNObject)
  ['{DEB0E770-91FD-3CF6-9A6C-E6A3656F3965}']
  { methods } 

    function CompareTo(obj: DNObject): Int32;

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IConvertible')]
  DNIConvertible = interface(DNObject)
  ['{805E3B62-B5E9-393D-8941-377D8BF4556B}']
  { methods } 

    function GetTypeCode: DNTypeCode;
    function ToBoolean(provider: DNIFormatProvider): Boolean;
    function ToChar(provider: DNIFormatProvider): Char;
    function ToSByte(provider: DNIFormatProvider): SByte;
    function ToByte(provider: DNIFormatProvider): Byte;
    function ToInt16(provider: DNIFormatProvider): Int16;
    function ToUInt16(provider: DNIFormatProvider): UInt16;
    function ToInt32(provider: DNIFormatProvider): Int32;
    function ToUInt32(provider: DNIFormatProvider): UInt32;
    function ToInt64(provider: DNIFormatProvider): Int64;
    function ToUInt64(provider: DNIFormatProvider): UInt64;
    function ToSingle(provider: DNIFormatProvider): Single;
    function ToDouble(provider: DNIFormatProvider): Double;
    function ToDecimal(provider: DNIFormatProvider): DNDecimal;
    function ToDateTime(provider: DNIFormatProvider): DNDateTime;
    function ToString(provider: DNIFormatProvider): string;
    function ToType(conversionType: DNType; provider: DNIFormatProvider): DNObject;

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.ICustomFormatter')]
  DNICustomFormatter = interface(DNObject)
  ['{2B130940-CA5E-3406-8385-E259E68AB039}']
  { methods } 

    function Format(format: string; arg: DNObject; formatProvider: DNIFormatProvider): string;

  end;

  //-------------namespace: System.Buffers----------------
  [DNTypeName('System.Buffers.IMemoryOwner`1')]
  DNIMemoryOwner<T> = interface(DNIDisposable)
  ['{845BF426-6E86-3201-BDC4-69932800908F}']
  { getters & setters } 

    function get_Memory: DNMemory<T>;

  { propertys } 

    property Memory: DNMemory<T> read get_Memory;
  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IEquatable`1')]
  DNIEquatable<T> = interface(DNObject)
  ['{D8C49BA7-BBAC-3BE5-8E80-A1E4303A61C0}']
  { methods } 

    function Equals(other: T): Boolean;

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IFormatProvider')]
  DNIFormatProvider = interface(DNObject)
  ['{C8CB1DED-2814-396A-9CC0-473CA49779CC}']
  { methods } 

    function GetFormat(formatType: DNType): DNObject;

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IFormattable')]
  DNIFormattable = interface(DNObject)
  ['{9A604EE7-E630-3DED-9444-BAAE247075AB}']
  { methods } 

    function ToString(format: string; formatProvider: DNIFormatProvider): string;

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IObservable`1')]
  DNIObservable<T> = interface(DNObject)
  ['{77D444A0-2C02-3905-95B0-C8472428A426}']
  { methods } 

    function Subscribe(observer: DNIObserver<T>): DNIDisposable;

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IObserver`1')]
  DNIObserver<T> = interface(DNObject)
  ['{4A56B314-BB5D-3AF3-94A0-2AEE2D46D190}']
  { methods } 

    procedure OnNext(value: T);
    procedure OnError(error: DNException);
    procedure OnCompleted;

  end;

  //-------------namespace: System----------------
  [DNTypeName('System.IProgress`1')]
  DNIProgress<T> = interface(DNObject)
  ['{8085FDF6-F705-333C-ABF8-57C1AB36DB20}']
  { methods } 

    procedure Report(value: T);

  end;

  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.ICustomAttributeProvider')]
  DNICustomAttributeProvider = interface(DNObject)
  ['{BF4FE6BC-376A-38E4-8BF2-7A8F01A5968D}']
  { methods } 

    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;

  end;

  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.IReflect')]
  DNIReflect = interface(DNObject)
  ['{C1586712-CBCF-3FB9-81FB-777905BC30E6}']
  { getters & setters } 

    function get_UnderlyingSystemType: DNType;

  { methods } 

    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags): DNMethodInfo; overload;
    function GetMethods(bindingAttr: DNBindingFlags): TArray<DNMethodInfo>;
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo;
    function GetFields(bindingAttr: DNBindingFlags): TArray<DNFieldInfo>;
    function GetProperty(name: string; bindingAttr: DNBindingFlags): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DNBindingFlags): TArray<DNPropertyInfo>;
    function GetMember(name: string; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>;
    function GetMembers(bindingAttr: DNBindingFlags): TArray<DNMemberInfo>;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; namedParameters: TArray<string>): DNObject;

  { propertys } 

    property UnderlyingSystemType: DNType read get_UnderlyingSystemType;
  end;

  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.IReflectableType')]
  DNIReflectableType = interface(DNObject)
  ['{9D4D816F-A167-38FF-83F1-F4AFAF7C0412}']
  { methods } 

    function GetTypeInfo: DNTypeInfo;

  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.IAsyncStateMachine')]
  DNIAsyncStateMachine = interface(DNObject)
  ['{78436D2D-A751-3D5C-B4B8-D2275D0542E7}']
  { methods } 

    procedure MoveNext;
    procedure SetStateMachine(stateMachine: DNIAsyncStateMachine);

  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.ICastable')]
  DNICastable = interface(DNObject)
  ['{2DD1150C-8EEB-3C36-8E6A-332EDB82024D}']
  { methods } 

    function IsInstanceOfInterface(interfaceType: DNRuntimeTypeHandle; out castError: DNException): Boolean;
    function GetImplType(interfaceType: DNRuntimeTypeHandle): DNRuntimeTypeHandle;

  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.INotifyCompletion')]
  DNINotifyCompletion = interface(DNObject)
  ['{D4C9B012-6CD0-35E2-9FE8-56E01550DF1E}']
  { methods } 

    procedure OnCompleted(continuation: DNAction);

  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.ICriticalNotifyCompletion')]
  DNICriticalNotifyCompletion = interface(DNINotifyCompletion)
  ['{11441015-06E6-3E6A-8764-473239C52FE3}']
  { methods } 

    procedure UnsafeOnCompleted(continuation: DNAction);

  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.IStrongBox')]
  DNIStrongBox = interface(DNObject)
  ['{53080814-DA86-3D64-AA57-5B4C3EF730E5}']
  { getters & setters } 

    function get_Value: DNObject;
    procedure set_Value(value: DNObject);

  { propertys } 

    property Value: DNObject read get_Value write set_Value;
  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.ITuple')]
  DNITuple = interface(DNObject)
  ['{2AEF8AB4-8880-35C3-90A9-47409DCB82E5}']
  { getters & setters } 

    function get_Length: Int32;
    function get_Item(index: Int32): DNObject;

  { propertys } 

    property Length: Int32 read get_Length;
    property Item[index: Int32]: DNObject read get_Item; default;
  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IBindCtx')]
  DNIBindCtx = interface(DNObject)
  ['{0000000E-0000-0000-C000-000000000046}']
  { methods } 

    procedure RegisterObjectBound(punk: DNObject);
    procedure RevokeObjectBound(punk: DNObject);
    procedure ReleaseBoundObjects;
    procedure SetBindOptions(out pbindopts: DNBIND_OPTS);
    procedure GetBindOptions(out pbindopts: DNBIND_OPTS);
    procedure GetRunningObjectTable(out pprot: DNIRunningObjectTable);
    procedure RegisterObjectParam(pszKey: string; punk: DNObject);
    procedure GetObjectParam(pszKey: string; out ppunk: DNObject);
    procedure EnumObjectParam(out ppenum: DNIEnumString);
    function RevokeObjectParam(pszKey: string): Int32;

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IConnectionPoint')]
  DNIConnectionPoint = interface(DNObject)
  ['{B196B286-BAB4-101A-B69C-00AA00341D07}']
  { methods } 

    procedure GetConnectionInterface(out pIID: DNGuid);
    procedure GetConnectionPointContainer(out ppCPC: DNIConnectionPointContainer);
    procedure Advise(pUnkSink: DNObject; out pdwCookie: Int32);
    procedure Unadvise(dwCookie: Int32);
    procedure EnumConnections(out ppEnum: DNIEnumConnections);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IConnectionPointContainer')]
  DNIConnectionPointContainer = interface(DNObject)
  ['{B196B284-BAB4-101A-B69C-00AA00341D07}']
  { methods } 

    procedure EnumConnectionPoints(out ppEnum: DNIEnumConnectionPoints);
    procedure FindConnectionPoint(out riid: DNGuid; out ppCP: DNIConnectionPoint);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints')]
  DNIEnumConnectionPoints = interface(DNObject)
  ['{B196B285-BAB4-101A-B69C-00AA00341D07}']
  { methods } 

    function Next(celt: Int32; [out]rgelt: TArray<DNIConnectionPoint>; pceltFetched: IntPtr): Int32;
    function Skip(celt: Int32): Int32;
    procedure Reset;
    procedure Clone(out ppenum: DNIEnumConnectionPoints);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IEnumConnections')]
  DNIEnumConnections = interface(DNObject)
  ['{B196B287-BAB4-101A-B69C-00AA00341D07}']
  { methods } 

    function Next(celt: Int32; [out]rgelt: TArray<DNCONNECTDATA>; pceltFetched: IntPtr): Int32;
    function Skip(celt: Int32): Int32;
    procedure Reset;
    procedure Clone(out ppenum: DNIEnumConnections);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IEnumMoniker')]
  DNIEnumMoniker = interface(DNObject)
  ['{00000102-0000-0000-C000-000000000046}']
  { methods } 

    function Next(celt: Int32; [out]rgelt: TArray<DNIMoniker>; pceltFetched: IntPtr): Int32;
    function Skip(celt: Int32): Int32;
    procedure Reset;
    procedure Clone(out ppenum: DNIEnumMoniker);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IEnumString')]
  DNIEnumString = interface(DNObject)
  ['{00000101-0000-0000-C000-000000000046}']
  { methods } 

    function Next(celt: Int32; [out]rgelt: TArray<string>; pceltFetched: IntPtr): Int32;
    function Skip(celt: Int32): Int32;
    procedure Reset;
    procedure Clone(out ppenum: DNIEnumString);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IEnumVARIANT')]
  DNIEnumVARIANT = interface(DNObject)
  ['{00020404-0000-0000-C000-000000000046}']
  { methods } 

    function Next(celt: Int32; [out]rgVar: TArray<DNObject>; pceltFetched: IntPtr): Int32;
    function Skip(celt: Int32): Int32;
    function Reset: Int32;
    function Clone: DNIEnumVARIANT;

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IMoniker')]
  DNIMoniker = interface(DNObject)
  ['{0000000F-0000-0000-C000-000000000046}']
  { methods } 

    procedure GetClassID(out pClassID: DNGuid);
    function IsDirty: Int32;
    procedure Load(pStm: DNIStream);
    procedure Save(pStm: DNIStream; fClearDirty: Boolean);
    procedure GetSizeMax(out pcbSize: Int64);
    procedure BindToObject(pbc: DNIBindCtx; pmkToLeft: DNIMoniker; out riidResult: DNGuid; out ppvResult: DNObject);
    procedure BindToStorage(pbc: DNIBindCtx; pmkToLeft: DNIMoniker; out riid: DNGuid; out ppvObj: DNObject);
    procedure Reduce(pbc: DNIBindCtx; dwReduceHowFar: Int32; out ppmkToLeft: DNIMoniker; out ppmkReduced: DNIMoniker);
    procedure ComposeWith(pmkRight: DNIMoniker; fOnlyIfNotGeneric: Boolean; out ppmkComposite: DNIMoniker);
    procedure Enum(fForward: Boolean; out ppenumMoniker: DNIEnumMoniker);
    function IsEqual(pmkOtherMoniker: DNIMoniker): Int32;
    procedure Hash(out pdwHash: Int32);
    function IsRunning(pbc: DNIBindCtx; pmkToLeft: DNIMoniker; pmkNewlyRunning: DNIMoniker): Int32;
    procedure GetTimeOfLastChange(pbc: DNIBindCtx; pmkToLeft: DNIMoniker; out pFileTime: DNFILETIME);
    procedure Inverse(out ppmk: DNIMoniker);
    procedure CommonPrefixWith(pmkOther: DNIMoniker; out ppmkPrefix: DNIMoniker);
    procedure RelativePathTo(pmkOther: DNIMoniker; out ppmkRelPath: DNIMoniker);
    procedure GetDisplayName(pbc: DNIBindCtx; pmkToLeft: DNIMoniker; out ppszDisplayName: string);
    procedure ParseDisplayName(pbc: DNIBindCtx; pmkToLeft: DNIMoniker; pszDisplayName: string; out pchEaten: Int32; out ppmkOut: DNIMoniker);
    function IsSystemMoniker(out pdwMksys: Int32): Int32;

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IPersistFile')]
  DNIPersistFile = interface(DNObject)
  ['{0000010B-0000-0000-C000-000000000046}']
  { methods } 

    procedure GetClassID(out pClassID: DNGuid);
    function IsDirty: Int32;
    procedure Load(pszFileName: string; dwMode: Int32);
    procedure Save(pszFileName: string; fRemember: Boolean);
    procedure SaveCompleted(pszFileName: string);
    procedure GetCurFile(out ppszFileName: string);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IRunningObjectTable')]
  DNIRunningObjectTable = interface(DNObject)
  ['{00000010-0000-0000-C000-000000000046}']
  { methods } 

    function &Register(grfFlags: Int32; punkObject: DNObject; pmkObjectName: DNIMoniker): Int32;
    procedure Revoke(dwRegister: Int32);
    function IsRunning(pmkObjectName: DNIMoniker): Int32;
    function GetObject(pmkObjectName: DNIMoniker; out ppunkObject: DNObject): Int32;
    procedure NoteChangeTime(dwRegister: Int32; out pfiletime: DNFILETIME);
    function GetTimeOfLastChange(pmkObjectName: DNIMoniker; out pfiletime: DNFILETIME): Int32;
    procedure EnumRunning(out ppenumMoniker: DNIEnumMoniker);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IStream')]
  DNIStream = interface(DNObject)
  ['{0000000C-0000-0000-C000-000000000046}']
  { methods } 

    procedure Read([out]pv: TArray<Byte>; cb: Int32; pcbRead: IntPtr);
    procedure Write(pv: TArray<Byte>; cb: Int32; pcbWritten: IntPtr);
    procedure Seek(dlibMove: Int64; dwOrigin: Int32; plibNewPosition: IntPtr);
    procedure SetSize(libNewSize: Int64);
    procedure CopyTo(pstm: DNIStream; cb: Int64; pcbRead: IntPtr; pcbWritten: IntPtr);
    procedure Commit(grfCommitFlags: Int32);
    procedure Revert;
    procedure LockRegion(libOffset: Int64; cb: Int64; dwLockType: Int32);
    procedure UnlockRegion(libOffset: Int64; cb: Int64; dwLockType: Int32);
    procedure Stat(out pstatstg: DNSTATSTG; grfStatFlag: Int32);
    procedure Clone(out ppstm: DNIStream);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.ITypeComp')]
  DNITypeComp = interface(DNObject)
  ['{00020403-0000-0000-C000-000000000046}']
  { methods } 

    procedure Bind(szName: string; lHashVal: Int32; wFlags: Int16; out ppTInfo: DNITypeInfo; out pDescKind: DNDESCKIND; out pBindPtr: DNBINDPTR);
    procedure BindType(szName: string; lHashVal: Int32; out ppTInfo: DNITypeInfo; out ppTComp: DNITypeComp);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.ITypeInfo')]
  DNITypeInfo = interface(DNObject)
  ['{00020401-0000-0000-C000-000000000046}']
  { methods } 

    procedure GetTypeAttr(out ppTypeAttr: IntPtr);
    procedure GetTypeComp(out ppTComp: DNITypeComp);
    procedure GetFuncDesc(index: Int32; out ppFuncDesc: IntPtr);
    procedure GetVarDesc(index: Int32; out ppVarDesc: IntPtr);
    procedure GetNames(memid: Int32; [out]rgBstrNames: TArray<string>; cMaxNames: Int32; out pcNames: Int32);
    procedure GetRefTypeOfImplType(index: Int32; out href: Int32);
    procedure GetImplTypeFlags(index: Int32; out pImplTypeFlags: DNIMPLTYPEFLAGS);
    procedure GetIDsOfNames([in]rgszNames: TArray<string>; cNames: Int32; [out]pMemId: TArray<Int32>);
    procedure Invoke(pvInstance: DNObject; memid: Int32; wFlags: Int16; out pDispParams: DNDISPPARAMS; pVarResult: IntPtr; pExcepInfo: IntPtr; out puArgErr: Int32);
    procedure GetDocumentation(index: Int32; out strName: string; out strDocString: string; out dwHelpContext: Int32; out strHelpFile: string);
    procedure GetDllEntry(memid: Int32; invKind: DNINVOKEKIND; pBstrDllName: IntPtr; pBstrName: IntPtr; pwOrdinal: IntPtr);
    procedure GetRefTypeInfo(hRef: Int32; out ppTI: DNITypeInfo);
    procedure AddressOfMember(memid: Int32; invKind: DNINVOKEKIND; out ppv: IntPtr);
    procedure CreateInstance(pUnkOuter: DNObject; out riid: DNGuid; out ppvObj: DNObject);
    procedure GetMops(memid: Int32; out pBstrMops: string);
    procedure GetContainingTypeLib(out ppTLB: DNITypeLib; out pIndex: Int32);
    procedure ReleaseTypeAttr(pTypeAttr: IntPtr);
    procedure ReleaseFuncDesc(pFuncDesc: IntPtr);
    procedure ReleaseVarDesc(pVarDesc: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.ITypeInfo2')]
  DNITypeInfo2 = interface(DNITypeInfo)
  ['{00020412-0000-0000-C000-000000000046}']
  { methods } 

    procedure GetTypeAttr(out ppTypeAttr: IntPtr);
    procedure GetTypeComp(out ppTComp: DNITypeComp);
    procedure GetFuncDesc(index: Int32; out ppFuncDesc: IntPtr);
    procedure GetVarDesc(index: Int32; out ppVarDesc: IntPtr);
    procedure GetNames(memid: Int32; [out]rgBstrNames: TArray<string>; cMaxNames: Int32; out pcNames: Int32);
    procedure GetRefTypeOfImplType(index: Int32; out href: Int32);
    procedure GetImplTypeFlags(index: Int32; out pImplTypeFlags: DNIMPLTYPEFLAGS);
    procedure GetIDsOfNames([in]rgszNames: TArray<string>; cNames: Int32; [out]pMemId: TArray<Int32>);
    procedure Invoke(pvInstance: DNObject; memid: Int32; wFlags: Int16; out pDispParams: DNDISPPARAMS; pVarResult: IntPtr; pExcepInfo: IntPtr; out puArgErr: Int32);
    procedure GetDocumentation(index: Int32; out strName: string; out strDocString: string; out dwHelpContext: Int32; out strHelpFile: string);
    procedure GetDllEntry(memid: Int32; invKind: DNINVOKEKIND; pBstrDllName: IntPtr; pBstrName: IntPtr; pwOrdinal: IntPtr);
    procedure GetRefTypeInfo(hRef: Int32; out ppTI: DNITypeInfo);
    procedure AddressOfMember(memid: Int32; invKind: DNINVOKEKIND; out ppv: IntPtr);
    procedure CreateInstance(pUnkOuter: DNObject; out riid: DNGuid; out ppvObj: DNObject);
    procedure GetMops(memid: Int32; out pBstrMops: string);
    procedure GetContainingTypeLib(out ppTLB: DNITypeLib; out pIndex: Int32);
    procedure ReleaseTypeAttr(pTypeAttr: IntPtr);
    procedure ReleaseFuncDesc(pFuncDesc: IntPtr);
    procedure ReleaseVarDesc(pVarDesc: IntPtr);
    procedure GetTypeKind(out pTypeKind: DNTYPEKIND);
    procedure GetTypeFlags(out pTypeFlags: Int32);
    procedure GetFuncIndexOfMemId(memid: Int32; invKind: DNINVOKEKIND; out pFuncIndex: Int32);
    procedure GetVarIndexOfMemId(memid: Int32; out pVarIndex: Int32);
    procedure GetCustData(out guid: DNGuid; out pVarVal: DNObject);
    procedure GetFuncCustData(index: Int32; out guid: DNGuid; out pVarVal: DNObject);
    procedure GetParamCustData(indexFunc: Int32; indexParam: Int32; out guid: DNGuid; out pVarVal: DNObject);
    procedure GetVarCustData(index: Int32; out guid: DNGuid; out pVarVal: DNObject);
    procedure GetImplTypeCustData(index: Int32; out guid: DNGuid; out pVarVal: DNObject);
    procedure GetDocumentation2(memid: Int32; out pbstrHelpString: string; out pdwHelpStringContext: Int32; out pbstrHelpStringDll: string);
    procedure GetAllCustData(pCustData: IntPtr);
    procedure GetAllFuncCustData(index: Int32; pCustData: IntPtr);
    procedure GetAllParamCustData(indexFunc: Int32; indexParam: Int32; pCustData: IntPtr);
    procedure GetAllVarCustData(index: Int32; pCustData: IntPtr);
    procedure GetAllImplTypeCustData(index: Int32; pCustData: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.ITypeLib')]
  DNITypeLib = interface(DNObject)
  ['{00020402-0000-0000-C000-000000000046}']
  { methods } 

    function GetTypeInfoCount: Int32;
    procedure GetTypeInfo(index: Int32; out ppTI: DNITypeInfo);
    procedure GetTypeInfoType(index: Int32; out pTKind: DNTYPEKIND);
    procedure GetTypeInfoOfGuid(out guid: DNGuid; out ppTInfo: DNITypeInfo);
    procedure GetLibAttr(out ppTLibAttr: IntPtr);
    procedure GetTypeComp(out ppTComp: DNITypeComp);
    procedure GetDocumentation(index: Int32; out strName: string; out strDocString: string; out dwHelpContext: Int32; out strHelpFile: string);
    function IsName(szNameBuf: string; lHashVal: Int32): Boolean;
    procedure FindName(szNameBuf: string; lHashVal: Int32; [out]ppTInfo: TArray<DNITypeInfo>; [out]rgMemId: TArray<Int32>; out pcFound: Int16);
    procedure ReleaseTLibAttr(pTLibAttr: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.ITypeLib2')]
  DNITypeLib2 = interface(DNITypeLib)
  ['{00020411-0000-0000-C000-000000000046}']
  { methods } 

    function GetTypeInfoCount: Int32;
    procedure GetTypeInfo(index: Int32; out ppTI: DNITypeInfo);
    procedure GetTypeInfoType(index: Int32; out pTKind: DNTYPEKIND);
    procedure GetTypeInfoOfGuid(out guid: DNGuid; out ppTInfo: DNITypeInfo);
    procedure GetLibAttr(out ppTLibAttr: IntPtr);
    procedure GetTypeComp(out ppTComp: DNITypeComp);
    procedure GetDocumentation(index: Int32; out strName: string; out strDocString: string; out dwHelpContext: Int32; out strHelpFile: string);
    function IsName(szNameBuf: string; lHashVal: Int32): Boolean;
    procedure FindName(szNameBuf: string; lHashVal: Int32; [out]ppTInfo: TArray<DNITypeInfo>; [out]rgMemId: TArray<Int32>; out pcFound: Int16);
    procedure ReleaseTLibAttr(pTLibAttr: IntPtr);
    procedure GetCustData(out guid: DNGuid; out pVarVal: DNObject);
    procedure GetDocumentation2(index: Int32; out pbstrHelpString: string; out pdwHelpStringContext: Int32; out pbstrHelpStringDll: string);
    procedure GetLibStatistics(pcUniqueNames: IntPtr; out pcchUniqueNames: Int32);
    procedure GetAllCustData(pCustData: IntPtr);

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.ICustomAdapter')]
  DNICustomAdapter = interface(DNObject)
  ['{3CC86595-FEB5-3CE9-BA14-D05C8DC3321C}']
  { methods } 

    function GetUnderlyingObject: DNObject;

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.ICustomFactory')]
  DNICustomFactory = interface(DNObject)
  ['{0CA9008E-EE90-356E-9F6D-B59E6006B9A4}']
  { methods } 

    function CreateInstance(serverType: DNType): DNMarshalByRefObject;

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.ICustomMarshaler')]
  DNICustomMarshaler = interface(DNObject)
  ['{601CD486-04BF-3213-9EA9-06EBE4351D74}']
  { methods } 

    function MarshalNativeToManaged(pNativeData: IntPtr): DNObject;
    function MarshalManagedToNative(ManagedObj: DNObject): IntPtr;
    procedure CleanUpNativeData(pNativeData: IntPtr);
    procedure CleanUpManagedData(ManagedObj: DNObject);
    function GetNativeDataSize: Int32;

  end;

  //-------------namespace: System.Runtime.InteropServices----------------
  [DNTypeName('System.Runtime.InteropServices.ICustomQueryInterface')]
  DNICustomQueryInterface = interface(DNObject)
  ['{8888FE72-8A4D-3E9A-845B-946F7A635805}']
  { methods } 

    function GetInterface(out iid: DNGuid; out ppv: IntPtr): DNCustomQueryInterfaceResult;

  end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.IActivationFactory')]
  DNIActivationFactory = interface(DNObject)
  ['{00000035-0000-0000-C000-000000000046}']
  { methods } 

    function ActivateInstance: DNObject;

  end;

  //-------------namespace: System.Runtime.Serialization----------------
  [DNTypeName('System.Runtime.Serialization.IDeserializationCallback')]
  DNIDeserializationCallback = interface(DNObject)
  ['{AB3F47E4-C227-3B05-BF9F-94649BEF9888}']
  { methods } 

    procedure OnDeserialization(sender: DNObject);

  end;

  //-------------namespace: System.Runtime.Serialization----------------
  [DNTypeName('System.Runtime.Serialization.IFormatterConverter')]
  DNIFormatterConverter = interface(DNObject)
  ['{F4F5C303-FAD3-3D0C-A4DF-BB82B5EE308F}']
  { methods } 

    function Convert(value: DNObject; &type: DNType): DNObject; overload;
    function Convert(value: DNObject; typeCode: DNTypeCode): DNObject; overload;
    function ToBoolean(value: DNObject): Boolean;
    function ToChar(value: DNObject): Char;
    function ToSByte(value: DNObject): SByte;
    function ToByte(value: DNObject): Byte;
    function ToInt16(value: DNObject): Int16;
    function ToUInt16(value: DNObject): UInt16;
    function ToInt32(value: DNObject): Int32;
    function ToUInt32(value: DNObject): UInt32;
    function ToInt64(value: DNObject): Int64;
    function ToUInt64(value: DNObject): UInt64;
    function ToSingle(value: DNObject): Single;
    function ToDouble(value: DNObject): Double;
    function ToDecimal(value: DNObject): DNDecimal;
    function ToDateTime(value: DNObject): DNDateTime;
    function ToString(value: DNObject): string;

  end;

  //-------------namespace: System.Runtime.Serialization----------------
  [DNTypeName('System.Runtime.Serialization.IObjectReference')]
  DNIObjectReference = interface(DNObject)
  ['{6E70ED5F-0439-38CE-83BB-860F1421F29F}']
  { methods } 

    function GetRealObject(context: DNStreamingContext): DNObject;

  end;

  //-------------namespace: System.Runtime.Serialization----------------
  [DNTypeName('System.Runtime.Serialization.ISafeSerializationData')]
  DNISafeSerializationData = interface(DNObject)
  ['{6638EFCA-7315-308E-9696-D2EE876EBC8C}']
  { methods } 

    procedure CompleteDeserialization(deserialized: DNObject);

  end;

  //-------------namespace: System.Runtime.Serialization----------------
  [DNTypeName('System.Runtime.Serialization.ISerializable')]
  DNISerializable = interface(DNObject)
  ['{D0EEAA62-3D30-3EE2-B896-A2F34DDA47D8}']
  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);

  end;

  //-------------namespace: System.Threading.Tasks.Sources----------------
  [DNTypeName('System.Threading.Tasks.Sources.IValueTaskSource`1')]
  DNIValueTaskSource<TResult> = interface(DNObject)
  ['{F6CEC039-F5AA-3768-9A63-D85070FE8B67}']
  { methods } 

    function GetStatus(token: Int16): DNValueTaskSourceStatus;
    procedure OnCompleted(continuation: DNAction<DNObject>; state: DNObject; token: Int16; flags: DNValueTaskSourceOnCompletedFlags);
    function GetResult(token: Int16): TResult;

  end;

  //-------------namespace: System.Threading.Tasks.Sources----------------
  [DNTypeName('System.Threading.Tasks.Sources.IValueTaskSource')]
  DNIValueTaskSource = interface(DNObject)
  ['{03CBD2D7-DC72-30CD-B5B7-6B0F3A6FF9AA}']
  { methods } 

    function GetStatus(token: Int16): DNValueTaskSourceStatus;
    procedure OnCompleted(continuation: DNAction<DNObject>; state: DNObject; token: Int16; flags: DNValueTaskSourceOnCompletedFlags);
    procedure GetResult(token: Int16);

  end;

  //-------------namespace: Internal----------------
  DNConsoleClass = interface(DNObjectClass)
  ['{CFB8B464-00E1-54CC-9AC3-53ADA254867C}']
  { static methods } 

    {class} procedure Write(s: string);
    {class} procedure WriteLine(s: string); overload;
    {class} procedure WriteLine; overload;

  end;

  [DNTypeName('Internal.Console')]
  DNConsole = interface(DNObject)
  ['{687EFDE1-1200-38CD-A93A-41879F87C31F}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNConsole = class(TDNGenericImport<DNConsoleClass, DNConsole>) end;

  //-------------namespace: Internal.Runtime.Augments----------------
  DNEnvironmentAugmentsClass = interface(DNObjectClass)
  ['{F3896BF3-0EEC-5C73-989F-F05B5BB3D184}']
  { static getter & setter } 

    {class} function get_CurrentManagedThreadId: Int32;
    {class} function get_ExitCode: Int32;
    {class} procedure set_ExitCode(value: Int32);
    {class} function get_HasShutdownStarted: Boolean;
    {class} function get_TickCount: Int32;
    {class} function get_ProcessorCount: Int32;
    {class} function get_StackTrace: string;

  { static methods } 

    {class} procedure &Exit(exitCode: Int32);
    {class} procedure FailFast(message: string; error: DNException);
    {class} function GetCommandLineArgs: TArray<string>;
    {class} function GetEnvironmentVariable(variable: string): string; overload;
    {class} function GetEnvironmentVariable(variable: string; target: DNEnvironmentVariableTarget): string; overload;
    {class} function EnumerateEnvironmentVariables: DNIEnumerable<DNKeyValuePair<string, string>>; overload;
    {class} function EnumerateEnvironmentVariables(target: DNEnvironmentVariableTarget): DNIEnumerable<DNKeyValuePair<string, string>>; overload;
    {class} procedure SetEnvironmentVariable(variable: string; value: string); overload;
    {class} procedure SetEnvironmentVariable(variable: string; value: string; target: DNEnvironmentVariableTarget); overload;

  { static propertys } 

    {class} property CurrentManagedThreadId: Int32 read get_CurrentManagedThreadId;
    {class} property ExitCode: Int32 read get_ExitCode write set_ExitCode;
    {class} property HasShutdownStarted: Boolean read get_HasShutdownStarted;
    {class} property TickCount: Int32 read get_TickCount;
    {class} property ProcessorCount: Int32 read get_ProcessorCount;
    {class} property StackTrace: string read get_StackTrace;
  end;

  [DNTypeName('Internal.Runtime.Augments.EnvironmentAugments')]
  DNEnvironmentAugments = interface(DNObject)
  ['{82E083F0-D9D3-3965-A6D1-CCE42B752EFB}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNEnvironmentAugments = class(TDNGenericImport<DNEnvironmentAugmentsClass, DNEnvironmentAugments>) end;

  //-------------namespace: Internal.Runtime.CompilerServices----------------
  DNUnsafeClass = interface(DNObjectClass)
  ['{7A59D6ED-5B7A-5D7B-B580-2B58ACC9381A}']
  { static methods } 

    {class} procedure InitBlockUnaligned(out startAddress: Byte; value: Byte; byteCount: UInt32);

  end;

  [DNTypeName('Internal.Runtime.CompilerServices.Unsafe')]
  DNUnsafe = interface(DNObject)
  ['{DFC13DB0-5E94-392D-9191-123190D4B630}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNUnsafe = class(TDNGenericImport<DNUnsafeClass, DNUnsafe>) end;

  //-------------namespace: System----------------
  DNActivatorClass = interface(DNObjectClass)
  ['{789DBB16-E954-5224-9BAA-2C6B6F821224}']
  { static methods } 

    {class} function CreateInstance(&type: DNType; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    {class} function CreateInstance(&type: DNType; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObject; overload;
    {class} function CreateInstance(&type: DNType; args: TArray<DNObject>): DNObject; overload;
    {class} function CreateInstance(&type: DNType; args: TArray<DNObject>; activationAttributes: TArray<DNObject>): DNObject; overload;
    {class} function CreateInstance(&type: DNType): DNObject; overload;
    {class} function CreateInstance(&type: DNType; nonPublic: Boolean): DNObject; overload;

  end;

  [DNTypeName('System.Activator')]
  DNActivator = interface(DNObject)
  ['{457BFD17-477E-3BCB-AF57-51C1BC54344A}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNActivator = class(TDNGenericImport<DNActivatorClass, DNActivator>) end;

  //-------------namespace: System----------------
  DNAppContextClass = interface(DNObjectClass)
  ['{4990D6C8-2950-532F-94AB-30DC32ADECB3}']
  { static getter & setter } 

    {class} function get_BaseDirectory: string;
    {class} function get_TargetFrameworkName: string;

  { static methods } 

    {class} function GetData(name: string): DNObject;
    {class} procedure SetData(name: string; data: DNObject);
    {class} function TryGetSwitch(switchName: string; out isEnabled: Boolean): Boolean;
    {class} procedure SetSwitch(switchName: string; isEnabled: Boolean);

  { static propertys } 

    {class} property BaseDirectory: string read get_BaseDirectory;
    {class} property TargetFrameworkName: string read get_TargetFrameworkName;
  end;

  [DNTypeName('System.AppContext')]
  DNAppContext = interface(DNObject)
  ['{7B7B3D1C-D854-3E4E-A62C-567022137C4C}']
  { events } 

    {class} procedure add_UnhandledException(value: DNUnhandledExceptionEventHandler);
    {class} procedure remove_UnhandledException(value: DNUnhandledExceptionEventHandler);
    {class} procedure add_FirstChanceException(value: DNEventHandler<DNFirstChanceExceptionEventArgs>);
    {class} procedure remove_FirstChanceException(value: DNEventHandler<DNFirstChanceExceptionEventArgs>);
    {class} procedure add_ProcessExit(value: DNEventHandler);
    {class} procedure remove_ProcessExit(value: DNEventHandler);

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNAppContext = class(TDNGenericImport<DNAppContextClass, DNAppContext>) end;

  //-------------namespace: System----------------
  DNArrayClass = interface(DNObjectClass)
  ['{62ECF526-A7FA-5591-9B27-AFB08ABB247E}']
  { static methods } 

    {class} function CreateInstance(elementType: DNType; length: Int32): DNArray; overload;
    {class} function CreateInstance(elementType: DNType; length1: Int32; length2: Int32): DNArray; overload;
    {class} function CreateInstance(elementType: DNType; length1: Int32; length2: Int32; length3: Int32): DNArray; overload;
    {class} function CreateInstance(elementType: DNType; lengths: TArray<Int32>): DNArray; overload;
    {class} function CreateInstance(elementType: DNType; lengths: TArray<Int64>): DNArray; overload;
    {class} function CreateInstance(elementType: DNType; lengths: TArray<Int32>; lowerBounds: TArray<Int32>): DNArray; overload;
    {class} procedure Copy(sourceArray: DNArray; destinationArray: DNArray; length: Int32); overload;
    {class} procedure Copy(sourceArray: DNArray; sourceIndex: Int32; destinationArray: DNArray; destinationIndex: Int32; length: Int32); overload;
    {class} procedure ConstrainedCopy(sourceArray: DNArray; sourceIndex: Int32; destinationArray: DNArray; destinationIndex: Int32; length: Int32);
    {class} procedure Copy(sourceArray: DNArray; destinationArray: DNArray; length: Int64); overload;
    {class} procedure Copy(sourceArray: DNArray; sourceIndex: Int64; destinationArray: DNArray; destinationIndex: Int64; length: Int64); overload;
    {class} procedure Clear(&array: DNArray; index: Int32; length: Int32);
    {class} function BinarySearch(&array: DNArray; value: DNObject): Int32; overload;
    {class} function BinarySearch(&array: DNArray; index: Int32; length: Int32; value: DNObject): Int32; overload;
    {class} function BinarySearch(&array: DNArray; value: DNObject; comparer: DNIComparer): Int32; overload;
    {class} function BinarySearch(&array: DNArray; index: Int32; length: Int32; value: DNObject; comparer: DNIComparer): Int32; overload;
    {class} function IndexOf(&array: DNArray; value: DNObject): Int32; overload;
    {class} function IndexOf(&array: DNArray; value: DNObject; startIndex: Int32): Int32; overload;
    {class} function IndexOf(&array: DNArray; value: DNObject; startIndex: Int32; count: Int32): Int32; overload;
    {class} function LastIndexOf(&array: DNArray; value: DNObject): Int32; overload;
    {class} function LastIndexOf(&array: DNArray; value: DNObject; startIndex: Int32): Int32; overload;
    {class} function LastIndexOf(&array: DNArray; value: DNObject; startIndex: Int32; count: Int32): Int32; overload;
    {class} procedure Reverse(&array: DNArray); overload;
    {class} procedure Reverse(&array: DNArray; index: Int32; length: Int32); overload;
    {class} procedure Sort(&array: DNArray); overload;
    {class} procedure Sort(keys: DNArray; items: DNArray); overload;
    {class} procedure Sort(&array: DNArray; index: Int32; length: Int32); overload;
    {class} procedure Sort(keys: DNArray; items: DNArray; index: Int32; length: Int32); overload;
    {class} procedure Sort(&array: DNArray; comparer: DNIComparer); overload;
    {class} procedure Sort(keys: DNArray; items: DNArray; comparer: DNIComparer); overload;
    {class} procedure Sort(&array: DNArray; index: Int32; length: Int32; comparer: DNIComparer); overload;
    {class} procedure Sort(keys: DNArray; items: DNArray; index: Int32; length: Int32; comparer: DNIComparer); overload;

  end;

  [DNTypeName('System.Array')]
  DNArray = interface(DNICloneable)
  ['{48701428-5F58-3BD3-B481-ABB3BC025803}']
  { getters & setters } 

    function get_Length: Int32;
    function get_LongLength: Int64;
    function get_Rank: Int32;
    function get_SyncRoot: DNObject;
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_IsSynchronized: Boolean;

  { methods } 

    function GetValue(indices: TArray<Int32>): DNObject; overload;
    function GetValue(index: Int32): DNObject; overload;
    function GetValue(index1: Int32; index2: Int32): DNObject; overload;
    function GetValue(index1: Int32; index2: Int32; index3: Int32): DNObject; overload;
    function GetValue(index: Int64): DNObject; overload;
    function GetValue(index1: Int64; index2: Int64): DNObject; overload;
    function GetValue(index1: Int64; index2: Int64; index3: Int64): DNObject; overload;
    function GetValue(indices: TArray<Int64>): DNObject; overload;
    procedure SetValue(value: DNObject; index: Int32); overload;
    procedure SetValue(value: DNObject; index1: Int32; index2: Int32); overload;
    procedure SetValue(value: DNObject; index1: Int32; index2: Int32; index3: Int32); overload;
    procedure SetValue(value: DNObject; indices: TArray<Int32>); overload;
    procedure SetValue(value: DNObject; index: Int64); overload;
    procedure SetValue(value: DNObject; index1: Int64; index2: Int64); overload;
    procedure SetValue(value: DNObject; index1: Int64; index2: Int64; index3: Int64); overload;
    procedure SetValue(value: DNObject; indices: TArray<Int64>); overload;
    function GetLength(dimension: Int32): Int32;
    function GetLongLength(dimension: Int32): Int64;
    function GetUpperBound(dimension: Int32): Int32;
    function GetLowerBound(dimension: Int32): Int32;
    function Clone: DNObject;
    procedure CopyTo(&array: DNArray; index: Int32); overload;
    procedure CopyTo(&array: DNArray; index: Int64); overload;
    function GetEnumerator: DNIEnumerator;
    procedure Initialize;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Length: Int32 read get_Length;
    property LongLength: Int64 read get_LongLength;
    property Rank: Int32 read get_Rank;
    property SyncRoot: DNObject read get_SyncRoot;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  TDNArray = class(TDNGenericImport<DNArrayClass, DNArray>) end;

  //-------------namespace: System----------------
  DNAttributeClass = interface(DNObjectClass)
  ['{89E7015F-BCB9-5253-AB0F-6F5ECFBCE3A5}']
  { static methods } 

    {class} function GetCustomAttributes(element: DNMemberInfo; &type: DNType): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNMemberInfo; &type: DNType; inherit: Boolean): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNMemberInfo): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNMemberInfo; inherit: Boolean): TArray<DNAttribute>; overload;
    {class} function IsDefined(element: DNMemberInfo; attributeType: DNType): Boolean; overload;
    {class} function IsDefined(element: DNMemberInfo; attributeType: DNType; inherit: Boolean): Boolean; overload;
    {class} function GetCustomAttribute(element: DNMemberInfo; attributeType: DNType): DNAttribute; overload;
    {class} function GetCustomAttribute(element: DNMemberInfo; attributeType: DNType; inherit: Boolean): DNAttribute; overload;
    {class} function GetCustomAttributes(element: DNParameterInfo): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNParameterInfo; attributeType: DNType): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNParameterInfo; attributeType: DNType; inherit: Boolean): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNParameterInfo; inherit: Boolean): TArray<DNAttribute>; overload;
    {class} function IsDefined(element: DNParameterInfo; attributeType: DNType): Boolean; overload;
    {class} function IsDefined(element: DNParameterInfo; attributeType: DNType; inherit: Boolean): Boolean; overload;
    {class} function GetCustomAttribute(element: DNParameterInfo; attributeType: DNType): DNAttribute; overload;
    {class} function GetCustomAttribute(element: DNParameterInfo; attributeType: DNType; inherit: Boolean): DNAttribute; overload;
    {class} function GetCustomAttributes(element: DNModule; attributeType: DNType): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNModule): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNModule; inherit: Boolean): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNModule; attributeType: DNType; inherit: Boolean): TArray<DNAttribute>; overload;
    {class} function IsDefined(element: DNModule; attributeType: DNType): Boolean; overload;
    {class} function IsDefined(element: DNModule; attributeType: DNType; inherit: Boolean): Boolean; overload;
    {class} function GetCustomAttribute(element: DNModule; attributeType: DNType): DNAttribute; overload;
    {class} function GetCustomAttribute(element: DNModule; attributeType: DNType; inherit: Boolean): DNAttribute; overload;
    {class} function GetCustomAttributes(element: DNAssembly; attributeType: DNType): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNAssembly; attributeType: DNType; inherit: Boolean): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNAssembly): TArray<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNAssembly; inherit: Boolean): TArray<DNAttribute>; overload;
    {class} function IsDefined(element: DNAssembly; attributeType: DNType): Boolean; overload;
    {class} function IsDefined(element: DNAssembly; attributeType: DNType; inherit: Boolean): Boolean; overload;
    {class} function GetCustomAttribute(element: DNAssembly; attributeType: DNType): DNAttribute; overload;
    {class} function GetCustomAttribute(element: DNAssembly; attributeType: DNType; inherit: Boolean): DNAttribute; overload;

  end;

  [DNTypeName('System.Attribute')]
  DNAttribute = interface(DNObject)
  ['{FB849751-4D50-3F90-80EA-F70FCCEF447D}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNAttribute = class(TDNGenericImport<DNAttributeClass, DNAttribute>) end;

  //-------------namespace: System----------------
  DNAttributeUsageAttributeClass = interface(DNAttributeClass)
  ['{37E8C0E1-3C4A-5B3B-957F-B6D11DA2B9E2}']
  { constructors } 

    {class} function init(validOn: DNAttributeTargets): DNAttributeUsageAttribute;

  end;

  [DNTypeName('System.AttributeUsageAttribute')]
  DNAttributeUsageAttribute = interface(DNAttribute)
  ['{E794D823-7685-367A-818A-F1DE48BF51E9}']
  { getters & setters } 

    function get_Inherited: Boolean;
    procedure set_Inherited(value: Boolean);
    function get_AllowMultiple: Boolean;
    procedure set_AllowMultiple(value: Boolean);
    function get_ValidOn: DNAttributeTargets;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property &Inherited: Boolean read get_Inherited write set_Inherited;
    property AllowMultiple: Boolean read get_AllowMultiple write set_AllowMultiple;
    property ValidOn: DNAttributeTargets read get_ValidOn;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAttributeUsageAttribute = class(TDNGenericImport<DNAttributeUsageAttributeClass, DNAttributeUsageAttribute>) end;

  //-------------namespace: System----------------
  DNCLSCompliantAttributeClass = interface(DNAttributeClass)
  ['{B5545EBB-8167-5360-8384-49AE803FB14A}']
  { constructors } 

    {class} function init(isCompliant: Boolean): DNCLSCompliantAttribute;

  end;

  [DNTypeName('System.CLSCompliantAttribute')]
  DNCLSCompliantAttribute = interface(DNAttribute)
  ['{DB39F1B4-8FF1-3BB3-9BB6-40D4FB6D6EBA}']
  { getters & setters } 

    function get_IsCompliant: Boolean;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property IsCompliant: Boolean read get_IsCompliant;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNCLSCompliantAttribute = class(TDNGenericImport<DNCLSCompliantAttributeClass, DNCLSCompliantAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDefaultValueAttributeClass = interface(DNAttributeClass)
  ['{DEF39B7F-C95B-52BD-BAAB-124637DCA0C2}']
  { constructors } 

    {class} function init(&type: DNType; value: string): DNDefaultValueAttribute; overload;
    {class} function init(value: Char): DNDefaultValueAttribute; overload;
    {class} function init(value: Byte): DNDefaultValueAttribute; overload;
    {class} function init(value: Int16): DNDefaultValueAttribute; overload;
    {class} function init(value: Int32): DNDefaultValueAttribute; overload;
    {class} function init(value: Int64): DNDefaultValueAttribute; overload;
    {class} function init(value: Single): DNDefaultValueAttribute; overload;
    {class} function init(value: Double): DNDefaultValueAttribute; overload;
    {class} function init(value: Boolean): DNDefaultValueAttribute; overload;
    {class} function init(value: string): DNDefaultValueAttribute; overload;
    {class} function init(value: DNObject): DNDefaultValueAttribute; overload;
    {class} function init(value: SByte): DNDefaultValueAttribute; overload;
    {class} function init(value: UInt16): DNDefaultValueAttribute; overload;
    {class} function init(value: UInt32): DNDefaultValueAttribute; overload;
    {class} function init(value: UInt64): DNDefaultValueAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DefaultValueAttribute')]
  DNDefaultValueAttribute = interface(DNAttribute)
  ['{680D9C01-137E-3860-9D35-6B40A20E030A}']
  { getters & setters } 

    function get_Value: DNObject;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: DNObject read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDefaultValueAttribute = class(TDNGenericImport<DNDefaultValueAttributeClass, DNDefaultValueAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNEditorBrowsableAttributeClass = interface(DNAttributeClass)
  ['{FADE82F3-7D5B-5D5B-986F-2685F8E253EE}']
  { constructors } 

    {class} function init(state: DNEditorBrowsableState): DNEditorBrowsableAttribute; overload;
    {class} function init: DNEditorBrowsableAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.EditorBrowsableAttribute')]
  DNEditorBrowsableAttribute = interface(DNAttribute)
  ['{66FEFF7B-31A6-3688-8C20-D223E77781CB}']
  { getters & setters } 

    function get_State: DNEditorBrowsableState;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property State: DNEditorBrowsableState read get_State;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNEditorBrowsableAttribute = class(TDNGenericImport<DNEditorBrowsableAttributeClass, DNEditorBrowsableAttribute>) end;

  //-------------namespace: System.Diagnostics.CodeAnalysis----------------
  DNSuppressMessageAttributeClass = interface(DNAttributeClass)
  ['{B89FBAE0-BE33-5F6D-9599-1B4CD1FA6D22}']
  { constructors } 

    {class} function init(category: string; checkId: string): DNSuppressMessageAttribute;

  end;

  [DNTypeName('System.Diagnostics.CodeAnalysis.SuppressMessageAttribute')]
  DNSuppressMessageAttribute = interface(DNAttribute)
  ['{DECBA577-BC50-3BD1-91FD-DD45CA143D2A}']
  { getters & setters } 

    function get_Category: string;
    function get_CheckId: string;
    function get_Scope: string;
    procedure set_Scope(value: string);
    function get_Target: string;
    procedure set_Target(value: string);
    function get_MessageId: string;
    procedure set_MessageId(value: string);
    function get_Justification: string;
    procedure set_Justification(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Category: string read get_Category;
    property CheckId: string read get_CheckId;
    property Scope: string read get_Scope write set_Scope;
    property Target: string read get_Target write set_Target;
    property MessageId: string read get_MessageId write set_MessageId;
    property Justification: string read get_Justification write set_Justification;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSuppressMessageAttribute = class(TDNGenericImport<DNSuppressMessageAttributeClass, DNSuppressMessageAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNConditionalAttributeClass = interface(DNAttributeClass)
  ['{28B48B74-1969-54FB-8557-8624BDC7BED7}']
  { constructors } 

    {class} function init(conditionString: string): DNConditionalAttribute;

  end;

  [DNTypeName('System.Diagnostics.ConditionalAttribute')]
  DNConditionalAttribute = interface(DNAttribute)
  ['{F0A8C9A5-74F8-331A-A9F3-CEA572E43F9B}']
  { getters & setters } 

    function get_ConditionString: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property ConditionString: string read get_ConditionString;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNConditionalAttribute = class(TDNGenericImport<DNConditionalAttributeClass, DNConditionalAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractAbbreviatorAttributeClass = interface(DNAttributeClass)
  ['{3D4EDBD2-AE11-5C5B-A50A-6ABE668833E1}']
  { constructors } 

    {class} function init: DNContractAbbreviatorAttribute;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractAbbreviatorAttribute')]
  DNContractAbbreviatorAttribute = interface(DNAttribute)
  ['{C76369B0-07A6-34B8-B3F3-1B0F2746048A}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractAbbreviatorAttribute = class(TDNGenericImport<DNContractAbbreviatorAttributeClass, DNContractAbbreviatorAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractArgumentValidatorAttributeClass = interface(DNAttributeClass)
  ['{DBA74265-89F4-55CB-A9CC-38853C715599}']
  { constructors } 

    {class} function init: DNContractArgumentValidatorAttribute;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractArgumentValidatorAttribute')]
  DNContractArgumentValidatorAttribute = interface(DNAttribute)
  ['{501F682A-2856-3A3D-A1AD-63C581372A99}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractArgumentValidatorAttribute = class(TDNGenericImport<DNContractArgumentValidatorAttributeClass, DNContractArgumentValidatorAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractClassAttributeClass = interface(DNAttributeClass)
  ['{DE663F00-B89E-5F6C-8E71-9D399FB6FD52}']
  { constructors } 

    {class} function init(typeContainingContracts: DNType): DNContractClassAttribute;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractClassAttribute')]
  DNContractClassAttribute = interface(DNAttribute)
  ['{5F489E4D-8DC1-3154-90D8-BB296E740D69}']
  { getters & setters } 

    function get_TypeContainingContracts: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeContainingContracts: DNType read get_TypeContainingContracts;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractClassAttribute = class(TDNGenericImport<DNContractClassAttributeClass, DNContractClassAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractClassForAttributeClass = interface(DNAttributeClass)
  ['{E265F8E2-337A-5CA3-8B55-1EB0CA8CD121}']
  { constructors } 

    {class} function init(typeContractsAreFor: DNType): DNContractClassForAttribute;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractClassForAttribute')]
  DNContractClassForAttribute = interface(DNAttribute)
  ['{D8191AB4-BE6C-332C-86FF-29EC2A62E7CE}']
  { getters & setters } 

    function get_TypeContractsAreFor: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeContractsAreFor: DNType read get_TypeContractsAreFor;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractClassForAttribute = class(TDNGenericImport<DNContractClassForAttributeClass, DNContractClassForAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractInvariantMethodAttributeClass = interface(DNAttributeClass)
  ['{1D13FE88-4C12-54F6-AA08-960207A70357}']
  { constructors } 

    {class} function init: DNContractInvariantMethodAttribute;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractInvariantMethodAttribute')]
  DNContractInvariantMethodAttribute = interface(DNAttribute)
  ['{7B8932AF-1C6A-37C9-B43D-0078292F2B27}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractInvariantMethodAttribute = class(TDNGenericImport<DNContractInvariantMethodAttributeClass, DNContractInvariantMethodAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractOptionAttributeClass = interface(DNAttributeClass)
  ['{DBADF1B1-667D-5D48-844D-49680059F3A9}']
  { constructors } 

    {class} function init(category: string; setting: string; enabled: Boolean): DNContractOptionAttribute; overload;
    {class} function init(category: string; setting: string; value: string): DNContractOptionAttribute; overload;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractOptionAttribute')]
  DNContractOptionAttribute = interface(DNAttribute)
  ['{A4A868AA-2B6E-31CB-9DC9-142A0B008DD0}']
  { getters & setters } 

    function get_Category: string;
    function get_Setting: string;
    function get_Enabled: Boolean;
    function get_Value: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Category: string read get_Category;
    property Setting: string read get_Setting;
    property Enabled: Boolean read get_Enabled;
    property Value: string read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractOptionAttribute = class(TDNGenericImport<DNContractOptionAttributeClass, DNContractOptionAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractPublicPropertyNameAttributeClass = interface(DNAttributeClass)
  ['{3E16BC91-09E8-55E0-AD84-20248F4DFF56}']
  { constructors } 

    {class} function init(name: string): DNContractPublicPropertyNameAttribute;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute')]
  DNContractPublicPropertyNameAttribute = interface(DNAttribute)
  ['{778DCC39-A3CB-3995-9B23-9D91F97B7381}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Name: string read get_Name;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractPublicPropertyNameAttribute = class(TDNGenericImport<DNContractPublicPropertyNameAttributeClass, DNContractPublicPropertyNameAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractReferenceAssemblyAttributeClass = interface(DNAttributeClass)
  ['{A4DA99A7-376F-5358-BCD2-23053E54C8B9}']
  { constructors } 

    {class} function init: DNContractReferenceAssemblyAttribute;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute')]
  DNContractReferenceAssemblyAttribute = interface(DNAttribute)
  ['{8946E5CB-EF9D-308F-9F46-9DB80AAC61C5}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractReferenceAssemblyAttribute = class(TDNGenericImport<DNContractReferenceAssemblyAttributeClass, DNContractReferenceAssemblyAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractRuntimeIgnoredAttributeClass = interface(DNAttributeClass)
  ['{0A21B2F8-6A35-57A2-B682-0ADEB1FFFA35}']
  { constructors } 

    {class} function init: DNContractRuntimeIgnoredAttribute;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute')]
  DNContractRuntimeIgnoredAttribute = interface(DNAttribute)
  ['{540AE8DD-5DED-39B8-BB28-65AA81195F2F}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractRuntimeIgnoredAttribute = class(TDNGenericImport<DNContractRuntimeIgnoredAttributeClass, DNContractRuntimeIgnoredAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractVerificationAttributeClass = interface(DNAttributeClass)
  ['{5067B558-FCD3-5A6B-B315-C6A8E0EBFF30}']
  { constructors } 

    {class} function init(value: Boolean): DNContractVerificationAttribute;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractVerificationAttribute')]
  DNContractVerificationAttribute = interface(DNAttribute)
  ['{58403B11-F0BC-336D-B7E2-A81C284DEB65}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: Boolean read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNContractVerificationAttribute = class(TDNGenericImport<DNContractVerificationAttributeClass, DNContractVerificationAttribute>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNPureAttributeClass = interface(DNAttributeClass)
  ['{B5CF29CA-E75D-5F81-98BD-EC9E2EEE9E67}']
  { constructors } 

    {class} function init: DNPureAttribute;

  end;

  [DNTypeName('System.Diagnostics.Contracts.PureAttribute')]
  DNPureAttribute = interface(DNAttribute)
  ['{AD1FD8C2-A801-3603-BE57-13E12AD3B6FC}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNPureAttribute = class(TDNGenericImport<DNPureAttributeClass, DNPureAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggableAttributeClass = interface(DNAttributeClass)
  ['{4B61AF40-BCEA-5042-A9D2-52733E802E00}']
  { constructors } 

    {class} function init(isJITTrackingEnabled: Boolean; isJITOptimizerDisabled: Boolean): DNDebuggableAttribute; overload;
    {class} function init(modes: DNDebuggableAttribute_DebuggingModes): DNDebuggableAttribute; overload;

  end;

  [DNTypeName('System.Diagnostics.DebuggableAttribute')]
  DNDebuggableAttribute = interface(DNAttribute)
  ['{C062B5B9-CEA7-3C0D-8271-507E87E7C171}']
  { getters & setters } 

    function get_IsJITTrackingEnabled: Boolean;
    function get_IsJITOptimizerDisabled: Boolean;
    function get_DebuggingFlags: DNDebuggableAttribute_DebuggingModes;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property IsJITTrackingEnabled: Boolean read get_IsJITTrackingEnabled;
    property IsJITOptimizerDisabled: Boolean read get_IsJITOptimizerDisabled;
    property DebuggingFlags: DNDebuggableAttribute_DebuggingModes read get_DebuggingFlags;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggableAttribute = class(TDNGenericImport<DNDebuggableAttributeClass, DNDebuggableAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerBrowsableAttributeClass = interface(DNAttributeClass)
  ['{A68CDAD0-450D-52AE-A597-C6BD5DC1E89B}']
  { constructors } 

    {class} function init(state: DNDebuggerBrowsableState): DNDebuggerBrowsableAttribute;

  end;

  [DNTypeName('System.Diagnostics.DebuggerBrowsableAttribute')]
  DNDebuggerBrowsableAttribute = interface(DNAttribute)
  ['{222BA8B8-3BE8-3A61-8952-2361189DDBB4}']
  { getters & setters } 

    function get_State: DNDebuggerBrowsableState;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property State: DNDebuggerBrowsableState read get_State;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerBrowsableAttribute = class(TDNGenericImport<DNDebuggerBrowsableAttributeClass, DNDebuggerBrowsableAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerDisplayAttributeClass = interface(DNAttributeClass)
  ['{88FAE11F-5DDC-5695-8657-D360A07A44E9}']
  { constructors } 

    {class} function init(value: string): DNDebuggerDisplayAttribute;

  end;

  [DNTypeName('System.Diagnostics.DebuggerDisplayAttribute')]
  DNDebuggerDisplayAttribute = interface(DNAttribute)
  ['{B8DF4144-87C6-3D2D-A155-0CD779A63FB4}']
  { getters & setters } 

    function get_Value: string;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: string;
    procedure set_Type(value: string);
    function get_Target: DNType;
    procedure set_Target(value: DNType);
    function get_TargetTypeName: string;
    procedure set_TargetTypeName(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: string read get_Value;
    property Name: string read get_Name write set_Name;
    property &Type: string read get_Type write set_Type;
    property Target: DNType read get_Target write set_Target;
    property TargetTypeName: string read get_TargetTypeName write set_TargetTypeName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerDisplayAttribute = class(TDNGenericImport<DNDebuggerDisplayAttributeClass, DNDebuggerDisplayAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerHiddenAttributeClass = interface(DNAttributeClass)
  ['{66FE20DF-5B87-54EB-BFAC-F48A4E745C80}']
  { constructors } 

    {class} function init: DNDebuggerHiddenAttribute;

  end;

  [DNTypeName('System.Diagnostics.DebuggerHiddenAttribute')]
  DNDebuggerHiddenAttribute = interface(DNAttribute)
  ['{2CFC13C6-F609-345F-BDE4-76CC78408734}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerHiddenAttribute = class(TDNGenericImport<DNDebuggerHiddenAttributeClass, DNDebuggerHiddenAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerNonUserCodeAttributeClass = interface(DNAttributeClass)
  ['{99F6ADB6-1B70-58CC-B808-BB086F560385}']
  { constructors } 

    {class} function init: DNDebuggerNonUserCodeAttribute;

  end;

  [DNTypeName('System.Diagnostics.DebuggerNonUserCodeAttribute')]
  DNDebuggerNonUserCodeAttribute = interface(DNAttribute)
  ['{79559626-1923-3DDC-BA15-A6302E224D8D}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerNonUserCodeAttribute = class(TDNGenericImport<DNDebuggerNonUserCodeAttributeClass, DNDebuggerNonUserCodeAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerStepperBoundaryAttributeClass = interface(DNAttributeClass)
  ['{7E77B9EA-0D0E-5A4F-A504-B50E9B0DEF23}']
  { constructors } 

    {class} function init: DNDebuggerStepperBoundaryAttribute;

  end;

  [DNTypeName('System.Diagnostics.DebuggerStepperBoundaryAttribute')]
  DNDebuggerStepperBoundaryAttribute = interface(DNAttribute)
  ['{F98D31A2-47D0-39F8-9886-644168DFCF78}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerStepperBoundaryAttribute = class(TDNGenericImport<DNDebuggerStepperBoundaryAttributeClass, DNDebuggerStepperBoundaryAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerStepThroughAttributeClass = interface(DNAttributeClass)
  ['{C0906266-1290-53CD-A9E0-EAEBCCCAF389}']
  { constructors } 

    {class} function init: DNDebuggerStepThroughAttribute;

  end;

  [DNTypeName('System.Diagnostics.DebuggerStepThroughAttribute')]
  DNDebuggerStepThroughAttribute = interface(DNAttribute)
  ['{388CBE43-9C62-3422-BE07-E659125F605C}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerStepThroughAttribute = class(TDNGenericImport<DNDebuggerStepThroughAttributeClass, DNDebuggerStepThroughAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerTypeProxyAttributeClass = interface(DNAttributeClass)
  ['{B8DB8522-B5DB-54F0-94CD-FF5A2D1C45C4}']
  { constructors } 

    {class} function init(&type: DNType): DNDebuggerTypeProxyAttribute; overload;
    {class} function init(typeName: string): DNDebuggerTypeProxyAttribute; overload;

  end;

  [DNTypeName('System.Diagnostics.DebuggerTypeProxyAttribute')]
  DNDebuggerTypeProxyAttribute = interface(DNAttribute)
  ['{8A233F3F-F7F4-37F1-94D3-9BEAD6CC7747}']
  { getters & setters } 

    function get_ProxyTypeName: string;
    function get_Target: DNType;
    procedure set_Target(value: DNType);
    function get_TargetTypeName: string;
    procedure set_TargetTypeName(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property ProxyTypeName: string read get_ProxyTypeName;
    property Target: DNType read get_Target write set_Target;
    property TargetTypeName: string read get_TargetTypeName write set_TargetTypeName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerTypeProxyAttribute = class(TDNGenericImport<DNDebuggerTypeProxyAttributeClass, DNDebuggerTypeProxyAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerVisualizerAttributeClass = interface(DNAttributeClass)
  ['{9FD62561-C96D-5E5D-87D7-6CEBE1F1EAAD}']
  { constructors } 

    {class} function init(visualizerTypeName: string): DNDebuggerVisualizerAttribute; overload;
    {class} function init(visualizerTypeName: string; visualizerObjectSourceTypeName: string): DNDebuggerVisualizerAttribute; overload;
    {class} function init(visualizerTypeName: string; visualizerObjectSource: DNType): DNDebuggerVisualizerAttribute; overload;
    {class} function init(visualizer: DNType): DNDebuggerVisualizerAttribute; overload;
    {class} function init(visualizer: DNType; visualizerObjectSource: DNType): DNDebuggerVisualizerAttribute; overload;
    {class} function init(visualizer: DNType; visualizerObjectSourceTypeName: string): DNDebuggerVisualizerAttribute; overload;

  end;

  [DNTypeName('System.Diagnostics.DebuggerVisualizerAttribute')]
  DNDebuggerVisualizerAttribute = interface(DNAttribute)
  ['{76CBABAC-0AB1-321F-8B9A-8060C399827B}']
  { getters & setters } 

    function get_VisualizerObjectSourceTypeName: string;
    function get_VisualizerTypeName: string;
    function get_Description: string;
    procedure set_Description(value: string);
    function get_Target: DNType;
    procedure set_Target(value: DNType);
    function get_TargetTypeName: string;
    procedure set_TargetTypeName(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property VisualizerObjectSourceTypeName: string read get_VisualizerObjectSourceTypeName;
    property VisualizerTypeName: string read get_VisualizerTypeName;
    property Description: string read get_Description write set_Description;
    property Target: DNType read get_Target write set_Target;
    property TargetTypeName: string read get_TargetTypeName write set_TargetTypeName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDebuggerVisualizerAttribute = class(TDNGenericImport<DNDebuggerVisualizerAttributeClass, DNDebuggerVisualizerAttribute>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventAttributeClass = interface(DNAttributeClass)
  ['{A95382C5-F6C9-547B-BB2D-645B1C924C2A}']
  { constructors } 

    {class} function init(eventId: Int32): DNEventAttribute;

  end;

  [DNTypeName('System.Diagnostics.Tracing.EventAttribute')]
  DNEventAttribute = interface(DNAttribute)
  ['{113828D6-A29C-34B3-8ED9-65074D4EBFB8}']
  { getters & setters } 

    function get_EventId: Int32;
    function get_Level: DNEventLevel;
    procedure set_Level(value: DNEventLevel);
    function get_Keywords: DNEventKeywords;
    procedure set_Keywords(value: DNEventKeywords);
    function get_Opcode: DNEventOpcode;
    procedure set_Opcode(value: DNEventOpcode);
    function get_Task: DNEventTask;
    procedure set_Task(value: DNEventTask);
    function get_Channel: DNEventChannel;
    procedure set_Channel(value: DNEventChannel);
    function get_Version: Byte;
    procedure set_Version(value: Byte);
    function get_Message: string;
    procedure set_Message(value: string);
    function get_Tags: DNEventTags;
    procedure set_Tags(value: DNEventTags);
    function get_ActivityOptions: DNEventActivityOptions;
    procedure set_ActivityOptions(value: DNEventActivityOptions);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property EventId: Int32 read get_EventId;
    property Level: DNEventLevel read get_Level write set_Level;
    property Keywords: DNEventKeywords read get_Keywords write set_Keywords;
    property Opcode: DNEventOpcode read get_Opcode write set_Opcode;
    property Task: DNEventTask read get_Task write set_Task;
    property Channel: DNEventChannel read get_Channel write set_Channel;
    property Version: Byte read get_Version write set_Version;
    property Message: string read get_Message write set_Message;
    property Tags: DNEventTags read get_Tags write set_Tags;
    property ActivityOptions: DNEventActivityOptions read get_ActivityOptions write set_ActivityOptions;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNEventAttribute = class(TDNGenericImport<DNEventAttributeClass, DNEventAttribute>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventDataAttributeClass = interface(DNAttributeClass)
  ['{01A28759-DB31-50FE-A498-3714F99C1392}']
  { constructors } 

    {class} function init: DNEventDataAttribute;

  end;

  [DNTypeName('System.Diagnostics.Tracing.EventDataAttribute')]
  DNEventDataAttribute = interface(DNAttribute)
  ['{1231C5DE-B861-388F-A6FA-4275DF0AB0E4}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNEventDataAttribute = class(TDNGenericImport<DNEventDataAttributeClass, DNEventDataAttribute>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventFieldAttributeClass = interface(DNAttributeClass)
  ['{A8D4E851-4B11-5003-A41B-97085D974A19}']
  { constructors } 

    {class} function init: DNEventFieldAttribute;

  end;

  [DNTypeName('System.Diagnostics.Tracing.EventFieldAttribute')]
  DNEventFieldAttribute = interface(DNAttribute)
  ['{C5CE5FD2-1779-3867-8869-6E3B180B6B6E}']
  { getters & setters } 

    function get_Tags: DNEventFieldTags;
    procedure set_Tags(value: DNEventFieldTags);
    function get_Format: DNEventFieldFormat;
    procedure set_Format(value: DNEventFieldFormat);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Tags: DNEventFieldTags read get_Tags write set_Tags;
    property Format: DNEventFieldFormat read get_Format write set_Format;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNEventFieldAttribute = class(TDNGenericImport<DNEventFieldAttributeClass, DNEventFieldAttribute>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventIgnoreAttributeClass = interface(DNAttributeClass)
  ['{226A6FB4-C52C-5A2B-B6EE-C1A02201D85F}']
  { constructors } 

    {class} function init: DNEventIgnoreAttribute;

  end;

  [DNTypeName('System.Diagnostics.Tracing.EventIgnoreAttribute')]
  DNEventIgnoreAttribute = interface(DNAttribute)
  ['{BD708362-6C57-3F12-8CB3-CBBA47CEA525}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNEventIgnoreAttribute = class(TDNGenericImport<DNEventIgnoreAttributeClass, DNEventIgnoreAttribute>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventSourceAttributeClass = interface(DNAttributeClass)
  ['{025228FA-6C24-5167-8EA6-27C74CB901DC}']
  { constructors } 

    {class} function init: DNEventSourceAttribute;

  end;

  [DNTypeName('System.Diagnostics.Tracing.EventSourceAttribute')]
  DNEventSourceAttribute = interface(DNAttribute)
  ['{21DF403D-FFFC-341F-967F-4F671D0329A3}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Guid: string;
    procedure set_Guid(value: string);
    function get_LocalizationResources: string;
    procedure set_LocalizationResources(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Guid: string read get_Guid write set_Guid;
    property LocalizationResources: string read get_LocalizationResources write set_LocalizationResources;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNEventSourceAttribute = class(TDNGenericImport<DNEventSourceAttributeClass, DNEventSourceAttribute>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNNonEventAttributeClass = interface(DNAttributeClass)
  ['{9E8786FD-ACC2-5EE1-8F8E-B009DCB14D15}']
  { constructors } 

    {class} function init: DNNonEventAttribute;

  end;

  [DNTypeName('System.Diagnostics.Tracing.NonEventAttribute')]
  DNNonEventAttribute = interface(DNAttribute)
  ['{3C6BBCAA-7739-361D-B9A9-4ABE58078C05}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNNonEventAttribute = class(TDNGenericImport<DNNonEventAttributeClass, DNNonEventAttribute>) end;

  //-------------namespace: System----------------
  DNFlagsAttributeClass = interface(DNAttributeClass)
  ['{6879A503-C525-592B-B507-2960427B78DB}']
  { constructors } 

    {class} function init: DNFlagsAttribute;

  end;

  [DNTypeName('System.FlagsAttribute')]
  DNFlagsAttribute = interface(DNAttribute)
  ['{3BD9CD37-6DE5-3BD9-8D48-CD19F5D0BB54}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNFlagsAttribute = class(TDNGenericImport<DNFlagsAttributeClass, DNFlagsAttribute>) end;

  //-------------namespace: System----------------
  DNMTAThreadAttributeClass = interface(DNAttributeClass)
  ['{BE19B7C2-8A94-535C-BB0D-A6D5A5F6A0EC}']
  { constructors } 

    {class} function init: DNMTAThreadAttribute;

  end;

  [DNTypeName('System.MTAThreadAttribute')]
  DNMTAThreadAttribute = interface(DNAttribute)
  ['{454ACF20-BE99-3504-B4E6-A3A7FD4899EF}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNMTAThreadAttribute = class(TDNGenericImport<DNMTAThreadAttributeClass, DNMTAThreadAttribute>) end;

  //-------------namespace: System----------------
  DNNonSerializedAttributeClass = interface(DNAttributeClass)
  ['{5CE4BCE1-AE83-51A0-B7AA-93426F517CA3}']
  { constructors } 

    {class} function init: DNNonSerializedAttribute;

  end;

  [DNTypeName('System.NonSerializedAttribute')]
  DNNonSerializedAttribute = interface(DNAttribute)
  ['{7E5115BB-15DC-38DD-9EAF-B658236F04E3}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNNonSerializedAttribute = class(TDNGenericImport<DNNonSerializedAttributeClass, DNNonSerializedAttribute>) end;

  //-------------namespace: System----------------
  DNObsoleteAttributeClass = interface(DNAttributeClass)
  ['{53BAB2B6-2426-5E43-960F-CB7662639310}']
  { constructors } 

    {class} function init: DNObsoleteAttribute; overload;
    {class} function init(message: string): DNObsoleteAttribute; overload;
    {class} function init(message: string; error: Boolean): DNObsoleteAttribute; overload;

  end;

  [DNTypeName('System.ObsoleteAttribute')]
  DNObsoleteAttribute = interface(DNAttribute)
  ['{46A7683A-32DB-3475-B520-574A4633064F}']
  { getters & setters } 

    function get_Message: string;
    function get_IsError: Boolean;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property IsError: Boolean read get_IsError;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNObsoleteAttribute = class(TDNGenericImport<DNObsoleteAttributeClass, DNObsoleteAttribute>) end;

  //-------------namespace: System----------------
  DNParamArrayAttributeClass = interface(DNAttributeClass)
  ['{635385E1-94D0-50DC-B231-2D204A7C6C5B}']
  { constructors } 

    {class} function init: DNParamArrayAttribute;

  end;

  [DNTypeName('System.ParamArrayAttribute')]
  DNParamArrayAttribute = interface(DNAttribute)
  ['{A2C2F69B-8EB4-38D2-8AB5-BDEFB90E74C7}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNParamArrayAttribute = class(TDNGenericImport<DNParamArrayAttributeClass, DNParamArrayAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyAlgorithmIdAttributeClass = interface(DNAttributeClass)
  ['{38E004F0-EE0F-5EE8-A903-53F49EF9FD18}']
  { constructors } 

    {class} function init(algorithmId: DNAssemblyHashAlgorithm): DNAssemblyAlgorithmIdAttribute; overload;
    {class} function init(algorithmId: UInt32): DNAssemblyAlgorithmIdAttribute; overload;

  end;

  [DNTypeName('System.Reflection.AssemblyAlgorithmIdAttribute')]
  DNAssemblyAlgorithmIdAttribute = interface(DNAttribute)
  ['{650B7546-45CC-31CA-A348-EC1006717547}']
  { getters & setters } 

    function get_AlgorithmId: UInt32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property AlgorithmId: UInt32 read get_AlgorithmId;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyAlgorithmIdAttribute = class(TDNGenericImport<DNAssemblyAlgorithmIdAttributeClass, DNAssemblyAlgorithmIdAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyCompanyAttributeClass = interface(DNAttributeClass)
  ['{CEE08AF1-5580-51F8-AEA5-6EAF0E9D943D}']
  { constructors } 

    {class} function init(company: string): DNAssemblyCompanyAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyCompanyAttribute')]
  DNAssemblyCompanyAttribute = interface(DNAttribute)
  ['{3C4BD73F-17EA-3DBC-A231-27397EE78170}']
  { getters & setters } 

    function get_Company: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Company: string read get_Company;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyCompanyAttribute = class(TDNGenericImport<DNAssemblyCompanyAttributeClass, DNAssemblyCompanyAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyConfigurationAttributeClass = interface(DNAttributeClass)
  ['{51AE7C90-D0AA-5C58-B34B-C4A96BD08E54}']
  { constructors } 

    {class} function init(configuration: string): DNAssemblyConfigurationAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyConfigurationAttribute')]
  DNAssemblyConfigurationAttribute = interface(DNAttribute)
  ['{B1F65923-E1E1-3895-9D7D-8D3C889BA868}']
  { getters & setters } 

    function get_Configuration: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Configuration: string read get_Configuration;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyConfigurationAttribute = class(TDNGenericImport<DNAssemblyConfigurationAttributeClass, DNAssemblyConfigurationAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyCopyrightAttributeClass = interface(DNAttributeClass)
  ['{EB2C65E7-65DB-5255-9CD0-FB2FE486537E}']
  { constructors } 

    {class} function init(copyright: string): DNAssemblyCopyrightAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyCopyrightAttribute')]
  DNAssemblyCopyrightAttribute = interface(DNAttribute)
  ['{A5C6671C-A320-32C8-B537-37FA366BC59C}']
  { getters & setters } 

    function get_Copyright: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Copyright: string read get_Copyright;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyCopyrightAttribute = class(TDNGenericImport<DNAssemblyCopyrightAttributeClass, DNAssemblyCopyrightAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyCultureAttributeClass = interface(DNAttributeClass)
  ['{CC9B0FE3-C30F-50CE-A7FB-925DD4F342CA}']
  { constructors } 

    {class} function init(culture: string): DNAssemblyCultureAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyCultureAttribute')]
  DNAssemblyCultureAttribute = interface(DNAttribute)
  ['{DBD0DF5C-434C-389B-9CAB-0756BBE5907F}']
  { getters & setters } 

    function get_Culture: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Culture: string read get_Culture;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyCultureAttribute = class(TDNGenericImport<DNAssemblyCultureAttributeClass, DNAssemblyCultureAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyDefaultAliasAttributeClass = interface(DNAttributeClass)
  ['{FE9A9812-29C9-5AC4-842B-DCAF611A7E0A}']
  { constructors } 

    {class} function init(defaultAlias: string): DNAssemblyDefaultAliasAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyDefaultAliasAttribute')]
  DNAssemblyDefaultAliasAttribute = interface(DNAttribute)
  ['{CF8AB096-F5D6-3236-A68E-F9A2F4E1AC52}']
  { getters & setters } 

    function get_DefaultAlias: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property DefaultAlias: string read get_DefaultAlias;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyDefaultAliasAttribute = class(TDNGenericImport<DNAssemblyDefaultAliasAttributeClass, DNAssemblyDefaultAliasAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyDelaySignAttributeClass = interface(DNAttributeClass)
  ['{5328ADC4-8C2D-50B3-963A-5A023302661C}']
  { constructors } 

    {class} function init(delaySign: Boolean): DNAssemblyDelaySignAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyDelaySignAttribute')]
  DNAssemblyDelaySignAttribute = interface(DNAttribute)
  ['{B2EFF0ED-2D25-3091-BD62-C852A2532BCB}']
  { getters & setters } 

    function get_DelaySign: Boolean;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property DelaySign: Boolean read get_DelaySign;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyDelaySignAttribute = class(TDNGenericImport<DNAssemblyDelaySignAttributeClass, DNAssemblyDelaySignAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyDescriptionAttributeClass = interface(DNAttributeClass)
  ['{7343F2B4-DDF5-5DBF-9828-C9FEF21C44E5}']
  { constructors } 

    {class} function init(description: string): DNAssemblyDescriptionAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyDescriptionAttribute')]
  DNAssemblyDescriptionAttribute = interface(DNAttribute)
  ['{6DFA4AF2-554F-3141-9C8E-727088956EF4}']
  { getters & setters } 

    function get_Description: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Description: string read get_Description;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyDescriptionAttribute = class(TDNGenericImport<DNAssemblyDescriptionAttributeClass, DNAssemblyDescriptionAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyFileVersionAttributeClass = interface(DNAttributeClass)
  ['{95E70004-68B1-5AEE-BD21-66F5C12BB5B1}']
  { constructors } 

    {class} function init(version: string): DNAssemblyFileVersionAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyFileVersionAttribute')]
  DNAssemblyFileVersionAttribute = interface(DNAttribute)
  ['{B9218785-781C-34EF-B898-AB20FA01A03D}']
  { getters & setters } 

    function get_Version: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Version: string read get_Version;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyFileVersionAttribute = class(TDNGenericImport<DNAssemblyFileVersionAttributeClass, DNAssemblyFileVersionAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyFlagsAttributeClass = interface(DNAttributeClass)
  ['{C68A600C-659B-5510-9734-CCD97D290699}']
  { constructors } 

    {class} function init(flags: UInt32): DNAssemblyFlagsAttribute; overload;
    {class} function init(assemblyFlags: Int32): DNAssemblyFlagsAttribute; overload;
    {class} function init(assemblyFlags: DNAssemblyNameFlags): DNAssemblyFlagsAttribute; overload;

  end;

  [DNTypeName('System.Reflection.AssemblyFlagsAttribute')]
  DNAssemblyFlagsAttribute = interface(DNAttribute)
  ['{1B9B5AE7-8813-3284-B1DE-2A9661BC4839}']
  { getters & setters } 

    function get_Flags: UInt32;
    function get_AssemblyFlags: Int32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Flags: UInt32 read get_Flags;
    property AssemblyFlags: Int32 read get_AssemblyFlags;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyFlagsAttribute = class(TDNGenericImport<DNAssemblyFlagsAttributeClass, DNAssemblyFlagsAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyInformationalVersionAttributeClass = interface(DNAttributeClass)
  ['{D78A0F1B-6D79-5E4F-8306-29A879ADE0D9}']
  { constructors } 

    {class} function init(informationalVersion: string): DNAssemblyInformationalVersionAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyInformationalVersionAttribute')]
  DNAssemblyInformationalVersionAttribute = interface(DNAttribute)
  ['{03C10B8D-CFA3-3F6E-80B8-AB8FC9C9B55C}']
  { getters & setters } 

    function get_InformationalVersion: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property InformationalVersion: string read get_InformationalVersion;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyInformationalVersionAttribute = class(TDNGenericImport<DNAssemblyInformationalVersionAttributeClass, DNAssemblyInformationalVersionAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyKeyFileAttributeClass = interface(DNAttributeClass)
  ['{03F53E57-0784-5ECF-B54E-08CEC7847B56}']
  { constructors } 

    {class} function init(keyFile: string): DNAssemblyKeyFileAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyKeyFileAttribute')]
  DNAssemblyKeyFileAttribute = interface(DNAttribute)
  ['{B2AADEEB-E9E1-3094-9825-A4C83A27B55B}']
  { getters & setters } 

    function get_KeyFile: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property KeyFile: string read get_KeyFile;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyKeyFileAttribute = class(TDNGenericImport<DNAssemblyKeyFileAttributeClass, DNAssemblyKeyFileAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyKeyNameAttributeClass = interface(DNAttributeClass)
  ['{E1253EDD-1808-50D7-B010-5842EC8F751B}']
  { constructors } 

    {class} function init(keyName: string): DNAssemblyKeyNameAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyKeyNameAttribute')]
  DNAssemblyKeyNameAttribute = interface(DNAttribute)
  ['{377334C5-B246-3E44-84D7-52A9FB688F25}']
  { getters & setters } 

    function get_KeyName: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property KeyName: string read get_KeyName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyKeyNameAttribute = class(TDNGenericImport<DNAssemblyKeyNameAttributeClass, DNAssemblyKeyNameAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyMetadataAttributeClass = interface(DNAttributeClass)
  ['{0AD49850-7589-545F-ADA7-19FF9DFF48C3}']
  { constructors } 

    {class} function init(key: string; value: string): DNAssemblyMetadataAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyMetadataAttribute')]
  DNAssemblyMetadataAttribute = interface(DNAttribute)
  ['{AF705685-5079-3195-B2F3-F9135161EEB6}']
  { getters & setters } 

    function get_Key: string;
    function get_Value: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Key: string read get_Key;
    property Value: string read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyMetadataAttribute = class(TDNGenericImport<DNAssemblyMetadataAttributeClass, DNAssemblyMetadataAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyProductAttributeClass = interface(DNAttributeClass)
  ['{8B6295D7-7671-5C5B-BE2D-CAD2E62B18EC}']
  { constructors } 

    {class} function init(product: string): DNAssemblyProductAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyProductAttribute')]
  DNAssemblyProductAttribute = interface(DNAttribute)
  ['{295F6F0F-5BE5-3BF2-BB55-413D6F31ED3D}']
  { getters & setters } 

    function get_Product: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Product: string read get_Product;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyProductAttribute = class(TDNGenericImport<DNAssemblyProductAttributeClass, DNAssemblyProductAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblySignatureKeyAttributeClass = interface(DNAttributeClass)
  ['{57491CCC-4E52-5D67-A572-EEC3DD911DBF}']
  { constructors } 

    {class} function init(publicKey: string; countersignature: string): DNAssemblySignatureKeyAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblySignatureKeyAttribute')]
  DNAssemblySignatureKeyAttribute = interface(DNAttribute)
  ['{87D80C5F-6BEB-3066-8BF4-761417FFD19B}']
  { getters & setters } 

    function get_PublicKey: string;
    function get_Countersignature: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property PublicKey: string read get_PublicKey;
    property Countersignature: string read get_Countersignature;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblySignatureKeyAttribute = class(TDNGenericImport<DNAssemblySignatureKeyAttributeClass, DNAssemblySignatureKeyAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyTitleAttributeClass = interface(DNAttributeClass)
  ['{EA5F3A0B-9314-56F2-8763-937F8A6857E1}']
  { constructors } 

    {class} function init(title: string): DNAssemblyTitleAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyTitleAttribute')]
  DNAssemblyTitleAttribute = interface(DNAttribute)
  ['{643DD9E9-AE45-38DB-B81B-E0795973A4B6}']
  { getters & setters } 

    function get_Title: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Title: string read get_Title;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyTitleAttribute = class(TDNGenericImport<DNAssemblyTitleAttributeClass, DNAssemblyTitleAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyTrademarkAttributeClass = interface(DNAttributeClass)
  ['{E3A4190F-CEFE-57A7-95D5-4E18503D72F1}']
  { constructors } 

    {class} function init(trademark: string): DNAssemblyTrademarkAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyTrademarkAttribute')]
  DNAssemblyTrademarkAttribute = interface(DNAttribute)
  ['{4621EDBD-00A7-33E6-8B2E-8EBDBD656DA2}']
  { getters & setters } 

    function get_Trademark: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Trademark: string read get_Trademark;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyTrademarkAttribute = class(TDNGenericImport<DNAssemblyTrademarkAttributeClass, DNAssemblyTrademarkAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyVersionAttributeClass = interface(DNAttributeClass)
  ['{6F361A54-B62D-5180-AC11-BA6297676BFB}']
  { constructors } 

    {class} function init(version: string): DNAssemblyVersionAttribute;

  end;

  [DNTypeName('System.Reflection.AssemblyVersionAttribute')]
  DNAssemblyVersionAttribute = interface(DNAttribute)
  ['{386FA0E8-F7D7-3E71-8459-E2D75D93F227}']
  { getters & setters } 

    function get_Version: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Version: string read get_Version;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAssemblyVersionAttribute = class(TDNGenericImport<DNAssemblyVersionAttributeClass, DNAssemblyVersionAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNDefaultMemberAttributeClass = interface(DNAttributeClass)
  ['{988255B4-7CF2-5830-87DD-FF0DF761175C}']
  { constructors } 

    {class} function init(memberName: string): DNDefaultMemberAttribute;

  end;

  [DNTypeName('System.Reflection.DefaultMemberAttribute')]
  DNDefaultMemberAttribute = interface(DNAttribute)
  ['{C3BB6C84-F0E4-3BBA-AECC-79D95368D632}']
  { getters & setters } 

    function get_MemberName: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property MemberName: string read get_MemberName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDefaultMemberAttribute = class(TDNGenericImport<DNDefaultMemberAttributeClass, DNDefaultMemberAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNObfuscateAssemblyAttributeClass = interface(DNAttributeClass)
  ['{C24D7F03-4089-551C-8551-E458E160EC22}']
  { constructors } 

    {class} function init(assemblyIsPrivate: Boolean): DNObfuscateAssemblyAttribute;

  end;

  [DNTypeName('System.Reflection.ObfuscateAssemblyAttribute')]
  DNObfuscateAssemblyAttribute = interface(DNAttribute)
  ['{36C8A595-0BBF-34AE-B54F-669C21F8CF20}']
  { getters & setters } 

    function get_AssemblyIsPrivate: Boolean;
    function get_StripAfterObfuscation: Boolean;
    procedure set_StripAfterObfuscation(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property AssemblyIsPrivate: Boolean read get_AssemblyIsPrivate;
    property StripAfterObfuscation: Boolean read get_StripAfterObfuscation write set_StripAfterObfuscation;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNObfuscateAssemblyAttribute = class(TDNGenericImport<DNObfuscateAssemblyAttributeClass, DNObfuscateAssemblyAttribute>) end;

  //-------------namespace: System.Reflection----------------
  DNObfuscationAttributeClass = interface(DNAttributeClass)
  ['{02A035DD-0E1A-54B1-B468-277E241002EB}']
  { constructors } 

    {class} function init: DNObfuscationAttribute;

  end;

  [DNTypeName('System.Reflection.ObfuscationAttribute')]
  DNObfuscationAttribute = interface(DNAttribute)
  ['{E718FD9C-E45C-360B-961D-63EEEE16BB7C}']
  { getters & setters } 

    function get_StripAfterObfuscation: Boolean;
    procedure set_StripAfterObfuscation(value: Boolean);
    function get_Exclude: Boolean;
    procedure set_Exclude(value: Boolean);
    function get_ApplyToMembers: Boolean;
    procedure set_ApplyToMembers(value: Boolean);
    function get_Feature: string;
    procedure set_Feature(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property StripAfterObfuscation: Boolean read get_StripAfterObfuscation write set_StripAfterObfuscation;
    property Exclude: Boolean read get_Exclude write set_Exclude;
    property ApplyToMembers: Boolean read get_ApplyToMembers write set_ApplyToMembers;
    property Feature: string read get_Feature write set_Feature;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNObfuscationAttribute = class(TDNGenericImport<DNObfuscationAttributeClass, DNObfuscationAttribute>) end;

  //-------------namespace: System.Resources----------------
  DNNeutralResourcesLanguageAttributeClass = interface(DNAttributeClass)
  ['{F5A72963-1D9C-5395-9AD3-0A385DE8A3DC}']
  { constructors } 

    {class} function init(cultureName: string): DNNeutralResourcesLanguageAttribute; overload;
    {class} function init(cultureName: string; location: DNUltimateResourceFallbackLocation): DNNeutralResourcesLanguageAttribute; overload;

  end;

  [DNTypeName('System.Resources.NeutralResourcesLanguageAttribute')]
  DNNeutralResourcesLanguageAttribute = interface(DNAttribute)
  ['{4D705CC4-C712-3DC4-8607-3BB5DFE8C9DF}']
  { getters & setters } 

    function get_CultureName: string;
    function get_Location: DNUltimateResourceFallbackLocation;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property CultureName: string read get_CultureName;
    property Location: DNUltimateResourceFallbackLocation read get_Location;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNNeutralResourcesLanguageAttribute = class(TDNGenericImport<DNNeutralResourcesLanguageAttributeClass, DNNeutralResourcesLanguageAttribute>) end;

  //-------------namespace: System.Resources----------------
  DNSatelliteContractVersionAttributeClass = interface(DNAttributeClass)
  ['{4099F87E-A151-58B7-B4FD-863F814D2289}']
  { constructors } 

    {class} function init(version: string): DNSatelliteContractVersionAttribute;

  end;

  [DNTypeName('System.Resources.SatelliteContractVersionAttribute')]
  DNSatelliteContractVersionAttribute = interface(DNAttribute)
  ['{B3C12A5F-0318-31DA-B9AC-5C2F486DDB7E}']
  { getters & setters } 

    function get_Version: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Version: string read get_Version;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSatelliteContractVersionAttribute = class(TDNGenericImport<DNSatelliteContractVersionAttributeClass, DNSatelliteContractVersionAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNAccessedThroughPropertyAttributeClass = interface(DNAttributeClass)
  ['{465CBC58-E207-5021-B28B-22BC4EE79F42}']
  { constructors } 

    {class} function init(propertyName: string): DNAccessedThroughPropertyAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.AccessedThroughPropertyAttribute')]
  DNAccessedThroughPropertyAttribute = interface(DNAttribute)
  ['{574AC1AD-B40F-3349-8ECB-C64030F4849D}']
  { getters & setters } 

    function get_PropertyName: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property PropertyName: string read get_PropertyName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAccessedThroughPropertyAttribute = class(TDNGenericImport<DNAccessedThroughPropertyAttributeClass, DNAccessedThroughPropertyAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNAsyncMethodBuilderAttributeClass = interface(DNAttributeClass)
  ['{D5AE0CED-579E-5C15-8A41-19DD4850C92C}']
  { constructors } 

    {class} function init(builderType: DNType): DNAsyncMethodBuilderAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.AsyncMethodBuilderAttribute')]
  DNAsyncMethodBuilderAttribute = interface(DNAttribute)
  ['{6FE2F3EC-7BDD-3F21-9E97-4D358939D257}']
  { getters & setters } 

    function get_BuilderType: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property BuilderType: DNType read get_BuilderType;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAsyncMethodBuilderAttribute = class(TDNGenericImport<DNAsyncMethodBuilderAttributeClass, DNAsyncMethodBuilderAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallerFilePathAttributeClass = interface(DNAttributeClass)
  ['{5D4901F1-DE52-56D2-A970-9EF42B12828B}']
  { constructors } 

    {class} function init: DNCallerFilePathAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CallerFilePathAttribute')]
  DNCallerFilePathAttribute = interface(DNAttribute)
  ['{CE6929A4-FCA3-314B-97AE-0C16CFB634A1}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNCallerFilePathAttribute = class(TDNGenericImport<DNCallerFilePathAttributeClass, DNCallerFilePathAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallerLineNumberAttributeClass = interface(DNAttributeClass)
  ['{9535B3C2-4C0A-5F1F-B51E-69BEC1DD9AA0}']
  { constructors } 

    {class} function init: DNCallerLineNumberAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CallerLineNumberAttribute')]
  DNCallerLineNumberAttribute = interface(DNAttribute)
  ['{EB42777A-673E-3355-B14B-C5BFBACE7A7B}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNCallerLineNumberAttribute = class(TDNGenericImport<DNCallerLineNumberAttributeClass, DNCallerLineNumberAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallerMemberNameAttributeClass = interface(DNAttributeClass)
  ['{EA21C58A-68C6-5901-94FC-EF30A268379E}']
  { constructors } 

    {class} function init: DNCallerMemberNameAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CallerMemberNameAttribute')]
  DNCallerMemberNameAttribute = interface(DNAttribute)
  ['{14709F98-EE2B-3460-82C4-D41471EB2DFF}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNCallerMemberNameAttribute = class(TDNGenericImport<DNCallerMemberNameAttributeClass, DNCallerMemberNameAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCompilationRelaxationsAttributeClass = interface(DNAttributeClass)
  ['{C29F3548-90D9-559E-82F9-C6831AD697F3}']
  { constructors } 

    {class} function init(relaxations: Int32): DNCompilationRelaxationsAttribute; overload;
    {class} function init(relaxations: DNCompilationRelaxations): DNCompilationRelaxationsAttribute; overload;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CompilationRelaxationsAttribute')]
  DNCompilationRelaxationsAttribute = interface(DNAttribute)
  ['{4D0D6E82-9637-3B53-A520-7B0BDC45481D}']
  { getters & setters } 

    function get_CompilationRelaxations: Int32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property CompilationRelaxations: Int32 read get_CompilationRelaxations;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNCompilationRelaxationsAttribute = class(TDNGenericImport<DNCompilationRelaxationsAttributeClass, DNCompilationRelaxationsAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCompilerGeneratedAttributeClass = interface(DNAttributeClass)
  ['{15FB1DFB-A102-56DA-91DF-1CF5CA63D973}']
  { constructors } 

    {class} function init: DNCompilerGeneratedAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CompilerGeneratedAttribute')]
  DNCompilerGeneratedAttribute = interface(DNAttribute)
  ['{B8F92799-C429-3BA9-B204-66029A5833C6}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNCompilerGeneratedAttribute = class(TDNGenericImport<DNCompilerGeneratedAttributeClass, DNCompilerGeneratedAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCompilerGlobalScopeAttributeClass = interface(DNAttributeClass)
  ['{18865D91-E8BB-585B-B8EC-53C2C9B1B47E}']
  { constructors } 

    {class} function init: DNCompilerGlobalScopeAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CompilerGlobalScopeAttribute')]
  DNCompilerGlobalScopeAttribute = interface(DNAttribute)
  ['{1F13A7AE-5DE7-3128-B11A-12599DE4C9C3}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNCompilerGlobalScopeAttribute = class(TDNGenericImport<DNCompilerGlobalScopeAttributeClass, DNCompilerGlobalScopeAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCustomConstantAttributeClass = interface(DNAttributeClass)
  ['{C3FCD0DE-0222-55BA-9890-A78223DFE4D0}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.CustomConstantAttribute')]
  DNCustomConstantAttribute = interface(DNAttribute)
  ['{3C56BEF6-CEB0-339B-BFC8-5C91B4E66B3D}']
  { getters & setters } 

    function get_Value: DNObject;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: DNObject read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNCustomConstantAttribute = class(TDNGenericImport<DNCustomConstantAttributeClass, DNCustomConstantAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDateTimeConstantAttributeClass = interface(DNCustomConstantAttributeClass)
  ['{714D6EF2-1C2C-5C15-AC2E-EF5F547D4AF6}']
  { constructors } 

    {class} function init(ticks: Int64): DNDateTimeConstantAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.DateTimeConstantAttribute')]
  DNDateTimeConstantAttribute = interface(DNCustomConstantAttribute)
  ['{F357652D-6BA3-3A2E-8BD2-DD18D02C38F9}']
  { getters & setters } 

    function get_Value: DNObject;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: DNObject read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDateTimeConstantAttribute = class(TDNGenericImport<DNDateTimeConstantAttributeClass, DNDateTimeConstantAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDecimalConstantAttributeClass = interface(DNAttributeClass)
  ['{249BED6F-6C1E-5F4E-BE3B-3ADC9A38BDD1}']
  { constructors } 

    {class} function init(scale: Byte; sign: Byte; hi: UInt32; mid: UInt32; low: UInt32): DNDecimalConstantAttribute; overload;
    {class} function init(scale: Byte; sign: Byte; hi: Int32; mid: Int32; low: Int32): DNDecimalConstantAttribute; overload;

  end;

  [DNTypeName('System.Runtime.CompilerServices.DecimalConstantAttribute')]
  DNDecimalConstantAttribute = interface(DNAttribute)
  ['{43A9C856-0542-3266-9CD5-A49CC3F77E06}']
  { getters & setters } 

    function get_Value: DNDecimal;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: DNDecimal read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDecimalConstantAttribute = class(TDNGenericImport<DNDecimalConstantAttributeClass, DNDecimalConstantAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDefaultDependencyAttributeClass = interface(DNAttributeClass)
  ['{CCF54C52-4AA2-5FB4-AC65-D404B82846E7}']
  { constructors } 

    {class} function init(loadHintArgument: DNLoadHint): DNDefaultDependencyAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.DefaultDependencyAttribute')]
  DNDefaultDependencyAttribute = interface(DNAttribute)
  ['{7E68EB0E-32C8-3923-8417-24E2FE81FC2E}']
  { getters & setters } 

    function get_LoadHint: DNLoadHint;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property LoadHint: DNLoadHint read get_LoadHint;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDefaultDependencyAttribute = class(TDNGenericImport<DNDefaultDependencyAttributeClass, DNDefaultDependencyAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDependencyAttributeClass = interface(DNAttributeClass)
  ['{2B6D65BD-E28B-5FC7-BE2C-DC19D92AF558}']
  { constructors } 

    {class} function init(dependentAssemblyArgument: string; loadHintArgument: DNLoadHint): DNDependencyAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.DependencyAttribute')]
  DNDependencyAttribute = interface(DNAttribute)
  ['{CBEEBAC5-5795-3230-B756-F5E34F5AEFED}']
  { getters & setters } 

    function get_DependentAssembly: string;
    function get_LoadHint: DNLoadHint;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property DependentAssembly: string read get_DependentAssembly;
    property LoadHint: DNLoadHint read get_LoadHint;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDependencyAttribute = class(TDNGenericImport<DNDependencyAttributeClass, DNDependencyAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDisablePrivateReflectionAttributeClass = interface(DNAttributeClass)
  ['{7E8C80DB-085A-555C-8E63-C117AC28FDE7}']
  { constructors } 

    {class} function init: DNDisablePrivateReflectionAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.DisablePrivateReflectionAttribute')]
  DNDisablePrivateReflectionAttribute = interface(DNAttribute)
  ['{3C5EB585-3E42-3C25-BB00-7C77AF7F75A5}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNDisablePrivateReflectionAttribute = class(TDNGenericImport<DNDisablePrivateReflectionAttributeClass, DNDisablePrivateReflectionAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDiscardableAttributeClass = interface(DNAttributeClass)
  ['{076B7326-B118-5CEC-BA62-DAC571295283}']
  { constructors } 

    {class} function init: DNDiscardableAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.DiscardableAttribute')]
  DNDiscardableAttribute = interface(DNAttribute)
  ['{18A65FD2-9A56-3A40-B93F-015151C8AD76}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNDiscardableAttribute = class(TDNGenericImport<DNDiscardableAttributeClass, DNDiscardableAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNExtensionAttributeClass = interface(DNAttributeClass)
  ['{29DB6968-F4E7-5170-AB54-92117B14BD97}']
  { constructors } 

    {class} function init: DNExtensionAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.ExtensionAttribute')]
  DNExtensionAttribute = interface(DNAttribute)
  ['{29A7EF7D-1110-3607-9F7A-91CB4CD63345}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNExtensionAttribute = class(TDNGenericImport<DNExtensionAttributeClass, DNExtensionAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNFixedAddressValueTypeAttributeClass = interface(DNAttributeClass)
  ['{C284B5BB-D1C2-5B88-BBBD-7ED5C1036D7F}']
  { constructors } 

    {class} function init: DNFixedAddressValueTypeAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.FixedAddressValueTypeAttribute')]
  DNFixedAddressValueTypeAttribute = interface(DNAttribute)
  ['{755B21CB-F119-3AA5-A610-10113C7B2DB8}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNFixedAddressValueTypeAttribute = class(TDNGenericImport<DNFixedAddressValueTypeAttributeClass, DNFixedAddressValueTypeAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNFixedBufferAttributeClass = interface(DNAttributeClass)
  ['{F086BE99-E125-5192-BA09-FD1D2F406215}']
  { constructors } 

    {class} function init(elementType: DNType; length: Int32): DNFixedBufferAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.FixedBufferAttribute')]
  DNFixedBufferAttribute = interface(DNAttribute)
  ['{5C52F863-C8E7-3890-B43C-7DF2F1D7F98D}']
  { getters & setters } 

    function get_ElementType: DNType;
    function get_Length: Int32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property ElementType: DNType read get_ElementType;
    property Length: Int32 read get_Length;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNFixedBufferAttribute = class(TDNGenericImport<DNFixedBufferAttributeClass, DNFixedBufferAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIndexerNameAttributeClass = interface(DNAttributeClass)
  ['{51C96097-EA24-58DC-8ACC-461643085DEE}']
  { constructors } 

    {class} function init(indexerName: string): DNIndexerNameAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.IndexerNameAttribute')]
  DNIndexerNameAttribute = interface(DNAttribute)
  ['{521C50A4-BBDC-343B-BA25-6E05B20C697D}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNIndexerNameAttribute = class(TDNGenericImport<DNIndexerNameAttributeClass, DNIndexerNameAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNInternalsVisibleToAttributeClass = interface(DNAttributeClass)
  ['{10F740D0-255D-5297-8669-FFB75BA5DBC1}']
  { constructors } 

    {class} function init(assemblyName: string): DNInternalsVisibleToAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.InternalsVisibleToAttribute')]
  DNInternalsVisibleToAttribute = interface(DNAttribute)
  ['{0AD31983-52D9-3237-A9CD-96A046DE9647}']
  { getters & setters } 

    function get_AssemblyName: string;
    function get_AllInternalsVisible: Boolean;
    procedure set_AllInternalsVisible(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property AssemblyName: string read get_AssemblyName;
    property AllInternalsVisible: Boolean read get_AllInternalsVisible write set_AllInternalsVisible;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNInternalsVisibleToAttribute = class(TDNGenericImport<DNInternalsVisibleToAttributeClass, DNInternalsVisibleToAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsByRefLikeAttributeClass = interface(DNAttributeClass)
  ['{58E4C9B1-E6FE-54C2-8D94-B82ED6599872}']
  { constructors } 

    {class} function init: DNIsByRefLikeAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.IsByRefLikeAttribute')]
  DNIsByRefLikeAttribute = interface(DNAttribute)
  ['{C2CD42E4-AA9E-3317-B0E3-2541333E60ED}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNIsByRefLikeAttribute = class(TDNGenericImport<DNIsByRefLikeAttributeClass, DNIsByRefLikeAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsReadOnlyAttributeClass = interface(DNAttributeClass)
  ['{699F2DC3-3234-585B-B767-A02F3499A029}']
  { constructors } 

    {class} function init: DNIsReadOnlyAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.IsReadOnlyAttribute')]
  DNIsReadOnlyAttribute = interface(DNAttribute)
  ['{BD8AB8DE-F503-34C5-B627-B16E0B64DCE1}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNIsReadOnlyAttribute = class(TDNGenericImport<DNIsReadOnlyAttributeClass, DNIsReadOnlyAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNMethodImplAttributeClass = interface(DNAttributeClass)
  ['{E43FCE46-01F6-5CF9-BC7D-63C3C4F42746}']
  { constructors } 

    {class} function init(methodImplOptions: DNMethodImplOptions): DNMethodImplAttribute; overload;
    {class} function init(value: Int16): DNMethodImplAttribute; overload;
    {class} function init: DNMethodImplAttribute; overload;

  end;

  [DNTypeName('System.Runtime.CompilerServices.MethodImplAttribute')]
  DNMethodImplAttribute = interface(DNAttribute)
  ['{257B3EB7-4E91-3A35-AF4E-E07BBDA91909}']
  { getters & setters } 

    function get_Value: DNMethodImplOptions;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: DNMethodImplOptions read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNMethodImplAttribute = class(TDNGenericImport<DNMethodImplAttributeClass, DNMethodImplAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNReferenceAssemblyAttributeClass = interface(DNAttributeClass)
  ['{E0260782-9951-50E6-9DC4-22DE6725F9AA}']
  { constructors } 

    {class} function init: DNReferenceAssemblyAttribute; overload;
    {class} function init(description: string): DNReferenceAssemblyAttribute; overload;

  end;

  [DNTypeName('System.Runtime.CompilerServices.ReferenceAssemblyAttribute')]
  DNReferenceAssemblyAttribute = interface(DNAttribute)
  ['{F74E034D-E344-38B4-B2E7-B7AA29D6C2B1}']
  { getters & setters } 

    function get_Description: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Description: string read get_Description;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNReferenceAssemblyAttribute = class(TDNGenericImport<DNReferenceAssemblyAttributeClass, DNReferenceAssemblyAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNRuntimeCompatibilityAttributeClass = interface(DNAttributeClass)
  ['{3D8E0B2F-6D90-5821-9A3E-429DFEB799FC}']
  { constructors } 

    {class} function init: DNRuntimeCompatibilityAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.RuntimeCompatibilityAttribute')]
  DNRuntimeCompatibilityAttribute = interface(DNAttribute)
  ['{BA345F59-5CD7-33C0-9F64-2129D9B76D32}']
  { getters & setters } 

    function get_WrapNonExceptionThrows: Boolean;
    procedure set_WrapNonExceptionThrows(value: Boolean);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property WrapNonExceptionThrows: Boolean read get_WrapNonExceptionThrows write set_WrapNonExceptionThrows;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNRuntimeCompatibilityAttribute = class(TDNGenericImport<DNRuntimeCompatibilityAttributeClass, DNRuntimeCompatibilityAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNSpecialNameAttributeClass = interface(DNAttributeClass)
  ['{E7DF8651-1519-5F28-BC81-8C2AA58C1A7A}']
  { constructors } 

    {class} function init: DNSpecialNameAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.SpecialNameAttribute')]
  DNSpecialNameAttribute = interface(DNAttribute)
  ['{B40A4145-4542-3962-9EDF-C4E43FE1DEBD}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSpecialNameAttribute = class(TDNGenericImport<DNSpecialNameAttributeClass, DNSpecialNameAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNStateMachineAttributeClass = interface(DNAttributeClass)
  ['{CD5E76AA-F4EF-562D-9CB1-5CFF5D90977B}']
  { constructors } 

    {class} function init(stateMachineType: DNType): DNStateMachineAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.StateMachineAttribute')]
  DNStateMachineAttribute = interface(DNAttribute)
  ['{89CF5CFA-E2F9-3E1C-B760-75641DD0908F}']
  { getters & setters } 

    function get_StateMachineType: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property StateMachineType: DNType read get_StateMachineType;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNStateMachineAttribute = class(TDNGenericImport<DNStateMachineAttributeClass, DNStateMachineAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNAsyncStateMachineAttributeClass = interface(DNStateMachineAttributeClass)
  ['{8D688311-50AE-5097-95D1-06DE0FF3F242}']
  { constructors } 

    {class} function init(stateMachineType: DNType): DNAsyncStateMachineAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.AsyncStateMachineAttribute')]
  DNAsyncStateMachineAttribute = interface(DNStateMachineAttribute)
  ['{A12F61D4-E68C-3E7A-B766-113C7CCA4D56}']
  { getters & setters } 

    function get_StateMachineType: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property StateMachineType: DNType read get_StateMachineType;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAsyncStateMachineAttribute = class(TDNGenericImport<DNAsyncStateMachineAttributeClass, DNAsyncStateMachineAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIteratorStateMachineAttributeClass = interface(DNStateMachineAttributeClass)
  ['{7DA6261B-8BCF-538B-A92F-FCA45DB0BECD}']
  { constructors } 

    {class} function init(stateMachineType: DNType): DNIteratorStateMachineAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.IteratorStateMachineAttribute')]
  DNIteratorStateMachineAttribute = interface(DNStateMachineAttribute)
  ['{7E060152-BB2F-3C52-B75B-832437587BBA}']
  { getters & setters } 

    function get_StateMachineType: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property StateMachineType: DNType read get_StateMachineType;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNIteratorStateMachineAttribute = class(TDNGenericImport<DNIteratorStateMachineAttributeClass, DNIteratorStateMachineAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNStringFreezingAttributeClass = interface(DNAttributeClass)
  ['{40EE1F36-7629-5DD4-8D1E-3BBA0F51FB79}']
  { constructors } 

    {class} function init: DNStringFreezingAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.StringFreezingAttribute')]
  DNStringFreezingAttribute = interface(DNAttribute)
  ['{D2421953-8006-3E62-B53D-18892C3934B6}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNStringFreezingAttribute = class(TDNGenericImport<DNStringFreezingAttributeClass, DNStringFreezingAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNSuppressIldasmAttributeClass = interface(DNAttributeClass)
  ['{D1ECF3D6-5083-5FB8-A884-134FE3E022B0}']
  { constructors } 

    {class} function init: DNSuppressIldasmAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.SuppressIldasmAttribute')]
  DNSuppressIldasmAttribute = interface(DNAttribute)
  ['{503DCEF7-058D-3548-A034-01C63DE95624}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSuppressIldasmAttribute = class(TDNGenericImport<DNSuppressIldasmAttributeClass, DNSuppressIldasmAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNTupleElementNamesAttributeClass = interface(DNAttributeClass)
  ['{7F6E6EDF-9417-5798-9FF3-773220F2EBAB}']
  { constructors } 

    {class} function init(transformNames: TArray<string>): DNTupleElementNamesAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.TupleElementNamesAttribute')]
  DNTupleElementNamesAttribute = interface(DNAttribute)
  ['{FF9AEBC2-55F5-3E4C-8564-9565B3EF197C}']
  { getters & setters } 

    function get_TransformNames: DNIList<string>;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TransformNames: DNIList<string> read get_TransformNames;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTupleElementNamesAttribute = class(TDNGenericImport<DNTupleElementNamesAttributeClass, DNTupleElementNamesAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNTypeForwardedFromAttributeClass = interface(DNAttributeClass)
  ['{59527AB6-5AEC-510A-AC06-997E0041BBA1}']
  { constructors } 

    {class} function init(assemblyFullName: string): DNTypeForwardedFromAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.TypeForwardedFromAttribute')]
  DNTypeForwardedFromAttribute = interface(DNAttribute)
  ['{30908AB7-88DD-31A4-A191-D01835DA3471}']
  { getters & setters } 

    function get_AssemblyFullName: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property AssemblyFullName: string read get_AssemblyFullName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTypeForwardedFromAttribute = class(TDNGenericImport<DNTypeForwardedFromAttributeClass, DNTypeForwardedFromAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNTypeForwardedToAttributeClass = interface(DNAttributeClass)
  ['{E2FD9FD8-FEC3-50D5-BB9B-9A77941D14BF}']
  { constructors } 

    {class} function init(destination: DNType): DNTypeForwardedToAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.TypeForwardedToAttribute')]
  DNTypeForwardedToAttribute = interface(DNAttribute)
  ['{F876FDDA-A5FF-3B11-8926-D3F597798988}']
  { getters & setters } 

    function get_Destination: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Destination: DNType read get_Destination;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTypeForwardedToAttribute = class(TDNGenericImport<DNTypeForwardedToAttributeClass, DNTypeForwardedToAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNUnsafeValueTypeAttributeClass = interface(DNAttributeClass)
  ['{53B0ABEB-6254-56F4-B871-C44E9ED0F598}']
  { constructors } 

    {class} function init: DNUnsafeValueTypeAttribute;

  end;

  [DNTypeName('System.Runtime.CompilerServices.UnsafeValueTypeAttribute')]
  DNUnsafeValueTypeAttribute = interface(DNAttribute)
  ['{C616B000-27CA-39CF-9818-1963666F3A93}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNUnsafeValueTypeAttribute = class(TDNGenericImport<DNUnsafeValueTypeAttributeClass, DNUnsafeValueTypeAttribute>) end;

  //-------------namespace: System.Runtime.ConstrainedExecution----------------
  DNReliabilityContractAttributeClass = interface(DNAttributeClass)
  ['{49A0425D-15C2-57C5-9069-1668028B2EF8}']
  { constructors } 

    {class} function init(consistencyGuarantee: DNConsistency; cer: DNCer): DNReliabilityContractAttribute;

  end;

  [DNTypeName('System.Runtime.ConstrainedExecution.ReliabilityContractAttribute')]
  DNReliabilityContractAttribute = interface(DNAttribute)
  ['{611FD861-A50A-365D-BE4A-3D6E31E974C3}']
  { getters & setters } 

    function get_ConsistencyGuarantee: DNConsistency;
    function get_Cer: DNCer;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property ConsistencyGuarantee: DNConsistency read get_ConsistencyGuarantee;
    property Cer: DNCer read get_Cer;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNReliabilityContractAttribute = class(TDNGenericImport<DNReliabilityContractAttributeClass, DNReliabilityContractAttribute>) end;

  //-------------namespace: System.Runtime.ExceptionServices----------------
  DNHandleProcessCorruptedStateExceptionsAttributeClass = interface(DNAttributeClass)
  ['{BB41DEA4-980A-548D-84F8-567FDB12A5AA}']
  { constructors } 

    {class} function init: DNHandleProcessCorruptedStateExceptionsAttribute;

  end;

  [DNTypeName('System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute')]
  DNHandleProcessCorruptedStateExceptionsAttribute = interface(DNAttribute)
  ['{C7C9CEA6-BF47-3EB0-A453-DF23E128572A}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNHandleProcessCorruptedStateExceptionsAttribute = class(TDNGenericImport<DNHandleProcessCorruptedStateExceptionsAttributeClass, DNHandleProcessCorruptedStateExceptionsAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNAllowReversePInvokeCallsAttributeClass = interface(DNAttributeClass)
  ['{540556FE-4C47-54C8-B091-BD6868D6F46E}']
  { constructors } 

    {class} function init: DNAllowReversePInvokeCallsAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute')]
  DNAllowReversePInvokeCallsAttribute = interface(DNAttribute)
  ['{505B1978-736E-3C47-979C-223BD8A319B6}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNAllowReversePInvokeCallsAttribute = class(TDNGenericImport<DNAllowReversePInvokeCallsAttributeClass, DNAllowReversePInvokeCallsAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNBestFitMappingAttributeClass = interface(DNAttributeClass)
  ['{8BC49BD5-2C26-5DFD-9333-13C3E0BD6705}']
  { constructors } 

    {class} function init(BestFitMapping: Boolean): DNBestFitMappingAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.BestFitMappingAttribute')]
  DNBestFitMappingAttribute = interface(DNAttribute)
  ['{03F0080E-2E46-38CF-8C4C-0C5538A0D9CC}']
  { getters & setters } 

    function get_BestFitMapping: Boolean;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property BestFitMapping: Boolean read get_BestFitMapping;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNBestFitMappingAttribute = class(TDNGenericImport<DNBestFitMappingAttributeClass, DNBestFitMappingAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNClassInterfaceAttributeClass = interface(DNAttributeClass)
  ['{E802CF79-6EFB-5AEC-B5B5-B517DDCD6DF0}']
  { constructors } 

    {class} function init(classInterfaceType: DNClassInterfaceType): DNClassInterfaceAttribute; overload;
    {class} function init(classInterfaceType: Int16): DNClassInterfaceAttribute; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.ClassInterfaceAttribute')]
  DNClassInterfaceAttribute = interface(DNAttribute)
  ['{02CB8951-926A-3FAC-BFB1-C71362F156A2}']
  { getters & setters } 

    function get_Value: DNClassInterfaceType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: DNClassInterfaceType read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNClassInterfaceAttribute = class(TDNGenericImport<DNClassInterfaceAttributeClass, DNClassInterfaceAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNCoClassAttributeClass = interface(DNAttributeClass)
  ['{F0A25769-787A-5B55-A0F9-02601750F370}']
  { constructors } 

    {class} function init(coClass: DNType): DNCoClassAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.CoClassAttribute')]
  DNCoClassAttribute = interface(DNAttribute)
  ['{273CC1D6-D4CB-3D29-8636-1E83F2531FC3}']
  { getters & setters } 

    function get_CoClass: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property CoClass: DNType read get_CoClass;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNCoClassAttribute = class(TDNGenericImport<DNCoClassAttributeClass, DNCoClassAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComDefaultInterfaceAttributeClass = interface(DNAttributeClass)
  ['{1DDC5222-FFBB-56F7-8C87-09F41484297F}']
  { constructors } 

    {class} function init(defaultInterface: DNType): DNComDefaultInterfaceAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.ComDefaultInterfaceAttribute')]
  DNComDefaultInterfaceAttribute = interface(DNAttribute)
  ['{A45B73AE-D2DC-3FC2-8C08-5C3D5FD66BF4}']
  { getters & setters } 

    function get_Value: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: DNType read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNComDefaultInterfaceAttribute = class(TDNGenericImport<DNComDefaultInterfaceAttributeClass, DNComDefaultInterfaceAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComImportAttributeClass = interface(DNAttributeClass)
  ['{A96C7E3F-618C-5BFE-BD1A-9992027CC4F9}']
  { constructors } 

    {class} function init: DNComImportAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.ComImportAttribute')]
  DNComImportAttribute = interface(DNAttribute)
  ['{1F306C51-0F69-38F6-9CBB-93C37EE8A649}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNComImportAttribute = class(TDNGenericImport<DNComImportAttributeClass, DNComImportAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComSourceInterfacesAttributeClass = interface(DNAttributeClass)
  ['{87131F26-F6F0-514D-AFA0-BADD83373962}']
  { constructors } 

    {class} function init(sourceInterfaces: string): DNComSourceInterfacesAttribute; overload;
    {class} function init(sourceInterface: DNType): DNComSourceInterfacesAttribute; overload;
    {class} function init(sourceInterface1: DNType; sourceInterface2: DNType): DNComSourceInterfacesAttribute; overload;
    {class} function init(sourceInterface1: DNType; sourceInterface2: DNType; sourceInterface3: DNType): DNComSourceInterfacesAttribute; overload;
    {class} function init(sourceInterface1: DNType; sourceInterface2: DNType; sourceInterface3: DNType; sourceInterface4: DNType): DNComSourceInterfacesAttribute; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.ComSourceInterfacesAttribute')]
  DNComSourceInterfacesAttribute = interface(DNAttribute)
  ['{9D8541C3-3913-3DC4-A4E5-C9E93C3F7736}']
  { getters & setters } 

    function get_Value: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: string read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNComSourceInterfacesAttribute = class(TDNGenericImport<DNComSourceInterfacesAttributeClass, DNComSourceInterfacesAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComVisibleAttributeClass = interface(DNAttributeClass)
  ['{A401C60C-5099-5EBA-934E-CCB3F8112589}']
  { constructors } 

    {class} function init(visibility: Boolean): DNComVisibleAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.ComVisibleAttribute')]
  DNComVisibleAttribute = interface(DNAttribute)
  ['{94306A00-B8E3-3A94-88F2-9E9B1474E26D}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: Boolean read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNComVisibleAttribute = class(TDNGenericImport<DNComVisibleAttributeClass, DNComVisibleAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNDefaultCharSetAttributeClass = interface(DNAttributeClass)
  ['{C42AD602-9635-5C0E-B2FF-A9D18019F46F}']
  { constructors } 

    {class} function init(charSet: DNCharSet): DNDefaultCharSetAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.DefaultCharSetAttribute')]
  DNDefaultCharSetAttribute = interface(DNAttribute)
  ['{EAD44A9B-560E-331A-BA8F-04089C49DCF1}']
  { getters & setters } 

    function get_CharSet: DNCharSet;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property CharSet: DNCharSet read get_CharSet;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDefaultCharSetAttribute = class(TDNGenericImport<DNDefaultCharSetAttributeClass, DNDefaultCharSetAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNDefaultDllImportSearchPathsAttributeClass = interface(DNAttributeClass)
  ['{E6223E3C-2E85-5270-8336-35953D253BEF}']
  { constructors } 

    {class} function init(paths: DNDllImportSearchPath): DNDefaultDllImportSearchPathsAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute')]
  DNDefaultDllImportSearchPathsAttribute = interface(DNAttribute)
  ['{BC71CE1C-05D2-3678-AEFD-12287E16975E}']
  { getters & setters } 

    function get_Paths: DNDllImportSearchPath;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Paths: DNDllImportSearchPath read get_Paths;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDefaultDllImportSearchPathsAttribute = class(TDNGenericImport<DNDefaultDllImportSearchPathsAttributeClass, DNDefaultDllImportSearchPathsAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNDispIdAttributeClass = interface(DNAttributeClass)
  ['{5B5D5319-E7F6-5F6F-8837-60A7F384B955}']
  { constructors } 

    {class} function init(&dispId: Int32): DNDispIdAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.DispIdAttribute')]
  DNDispIdAttribute = interface(DNAttribute)
  ['{385B0AF9-02FB-3E44-BF4C-C8011CA2254A}']
  { getters & setters } 

    function get_Value: Int32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: Int32 read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDispIdAttribute = class(TDNGenericImport<DNDispIdAttributeClass, DNDispIdAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNDllImportAttributeClass = interface(DNAttributeClass)
  ['{A19CCA94-5041-52F2-A788-C0F9330589E0}']
  { constructors } 

    {class} function init(dllName: string): DNDllImportAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.DllImportAttribute')]
  DNDllImportAttribute = interface(DNAttribute)
  ['{E99CCE66-FE86-3169-A237-61173AFC4B46}']
  { getters & setters } 

    function get_Value: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: string read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDllImportAttribute = class(TDNGenericImport<DNDllImportAttributeClass, DNDllImportAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNFieldOffsetAttributeClass = interface(DNAttributeClass)
  ['{51823DDD-75F1-5262-9D7C-9C927042A440}']
  { constructors } 

    {class} function init(offset: Int32): DNFieldOffsetAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.FieldOffsetAttribute')]
  DNFieldOffsetAttribute = interface(DNAttribute)
  ['{4468ED0D-BC34-3E54-AF85-A5072E3AE72B}']
  { getters & setters } 

    function get_Value: Int32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: Int32 read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNFieldOffsetAttribute = class(TDNGenericImport<DNFieldOffsetAttributeClass, DNFieldOffsetAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNGuidAttributeClass = interface(DNAttributeClass)
  ['{7694E885-EC90-533A-BD15-47AC42FFCC1C}']
  { constructors } 

    {class} function init(guid: string): DNGuidAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.GuidAttribute')]
  DNGuidAttribute = interface(DNAttribute)
  ['{3D30F7E9-B6B7-3626-AAC4-F0166924A298}']
  { getters & setters } 

    function get_Value: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: string read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNGuidAttribute = class(TDNGenericImport<DNGuidAttributeClass, DNGuidAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInAttributeClass = interface(DNAttributeClass)
  ['{CFA42DAD-6146-5AD4-B58C-64FD0F630F44}']
  { constructors } 

    {class} function init: DNInAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.InAttribute')]
  DNInAttribute = interface(DNAttribute)
  ['{F1052EF5-3C56-3A7A-B0EC-D89BC58EABB1}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNInAttribute = class(TDNGenericImport<DNInAttributeClass, DNInAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInterfaceTypeAttributeClass = interface(DNAttributeClass)
  ['{3B1E76B7-103D-564A-92E3-33ABA9801D59}']
  { constructors } 

    {class} function init(interfaceType: DNComInterfaceType): DNInterfaceTypeAttribute; overload;
    {class} function init(interfaceType: Int16): DNInterfaceTypeAttribute; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.InterfaceTypeAttribute')]
  DNInterfaceTypeAttribute = interface(DNAttribute)
  ['{8D4D0EDF-7440-3059-9941-722880DCEA0B}']
  { getters & setters } 

    function get_Value: DNComInterfaceType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: DNComInterfaceType read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNInterfaceTypeAttribute = class(TDNGenericImport<DNInterfaceTypeAttributeClass, DNInterfaceTypeAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNLCIDConversionAttributeClass = interface(DNAttributeClass)
  ['{24732D08-FD6B-5D6D-B030-1B7A7497B814}']
  { constructors } 

    {class} function init(lcid: Int32): DNLCIDConversionAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.LCIDConversionAttribute')]
  DNLCIDConversionAttribute = interface(DNAttribute)
  ['{9958E9D1-4B9B-30FF-91AD-AFC0A827581D}']
  { getters & setters } 

    function get_Value: Int32;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: Int32 read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNLCIDConversionAttribute = class(TDNGenericImport<DNLCIDConversionAttributeClass, DNLCIDConversionAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNMarshalAsAttributeClass = interface(DNAttributeClass)
  ['{A74656F3-FCCD-5E72-A16A-B57B3158637B}']
  { constructors } 

    {class} function init(unmanagedType: DNUnmanagedType): DNMarshalAsAttribute; overload;
    {class} function init(unmanagedType: Int16): DNMarshalAsAttribute; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.MarshalAsAttribute')]
  DNMarshalAsAttribute = interface(DNAttribute)
  ['{4EC1DFC1-D3DF-3ADC-835F-833015D73175}']
  { getters & setters } 

    function get_Value: DNUnmanagedType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: DNUnmanagedType read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNMarshalAsAttribute = class(TDNGenericImport<DNMarshalAsAttributeClass, DNMarshalAsAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNNativeCallableAttributeClass = interface(DNAttributeClass)
  ['{13591F7F-1846-5B11-B34C-BC0D1E214A03}']
  { constructors } 

    {class} function init: DNNativeCallableAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.NativeCallableAttribute')]
  DNNativeCallableAttribute = interface(DNAttribute)
  ['{353F422B-CB42-3DF2-B79C-B592D120631D}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNNativeCallableAttribute = class(TDNGenericImport<DNNativeCallableAttributeClass, DNNativeCallableAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNOptionalAttributeClass = interface(DNAttributeClass)
  ['{27460DB2-4F7E-5095-9A7B-2459428CEF25}']
  { constructors } 

    {class} function init: DNOptionalAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.OptionalAttribute')]
  DNOptionalAttribute = interface(DNAttribute)
  ['{6A9816DA-5140-3D29-A8BE-22AA2430667F}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNOptionalAttribute = class(TDNGenericImport<DNOptionalAttributeClass, DNOptionalAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNOutAttributeClass = interface(DNAttributeClass)
  ['{28312C52-2EE8-5CAB-BA17-67DEDBADB78D}']
  { constructors } 

    {class} function init: DNOutAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.OutAttribute')]
  DNOutAttribute = interface(DNAttribute)
  ['{68DDBDF0-891E-3B4F-874D-FEB911216D96}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNOutAttribute = class(TDNGenericImport<DNOutAttributeClass, DNOutAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNPreserveSigAttributeClass = interface(DNAttributeClass)
  ['{777FC023-CA40-5570-AC05-F68F8574AFBA}']
  { constructors } 

    {class} function init: DNPreserveSigAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.PreserveSigAttribute')]
  DNPreserveSigAttribute = interface(DNAttribute)
  ['{396C00A3-8D62-3125-8D79-44BEB8B5BE57}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNPreserveSigAttribute = class(TDNGenericImport<DNPreserveSigAttributeClass, DNPreserveSigAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNProgIdAttributeClass = interface(DNAttributeClass)
  ['{5ED8AFE7-DD7E-5E5F-99C5-E9751B4E57C1}']
  { constructors } 

    {class} function init(progId: string): DNProgIdAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.ProgIdAttribute')]
  DNProgIdAttribute = interface(DNAttribute)
  ['{150208F5-1519-3AEA-A5F1-4D17BFCC3DDB}']
  { getters & setters } 

    function get_Value: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: string read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNProgIdAttribute = class(TDNGenericImport<DNProgIdAttributeClass, DNProgIdAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNStructLayoutAttributeClass = interface(DNAttributeClass)
  ['{74F5E373-5A0A-5405-A270-6D3960D09A2F}']
  { constructors } 

    {class} function init(layoutKind: DNLayoutKind): DNStructLayoutAttribute; overload;
    {class} function init(layoutKind: Int16): DNStructLayoutAttribute; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.StructLayoutAttribute')]
  DNStructLayoutAttribute = interface(DNAttribute)
  ['{898CDE76-7D22-3BE4-9A2D-50CA75B71EB3}']
  { getters & setters } 

    function get_Value: DNLayoutKind;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: DNLayoutKind read get_Value;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNStructLayoutAttribute = class(TDNGenericImport<DNStructLayoutAttributeClass, DNStructLayoutAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNTypeIdentifierAttributeClass = interface(DNAttributeClass)
  ['{3C1D0E1D-BA5D-5751-915E-CC1F0CC26054}']
  { constructors } 

    {class} function init: DNTypeIdentifierAttribute; overload;
    {class} function init(scope: string; identifier: string): DNTypeIdentifierAttribute; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.TypeIdentifierAttribute')]
  DNTypeIdentifierAttribute = interface(DNAttribute)
  ['{B8907D18-46A3-33AF-9627-65DC1A09EC8C}']
  { getters & setters } 

    function get_Scope: string;
    function get_Identifier: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Scope: string read get_Scope;
    property Identifier: string read get_Identifier;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTypeIdentifierAttribute = class(TDNGenericImport<DNTypeIdentifierAttributeClass, DNTypeIdentifierAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNUnmanagedFunctionPointerAttributeClass = interface(DNAttributeClass)
  ['{2E36AEE1-3935-5DD8-B595-8951C067A8BF}']
  { constructors } 

    {class} function init: DNUnmanagedFunctionPointerAttribute; overload;
    {class} function init(callingConvention: DNCallingConvention): DNUnmanagedFunctionPointerAttribute; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute')]
  DNUnmanagedFunctionPointerAttribute = interface(DNAttribute)
  ['{B100A9E8-3CA9-3269-B295-79125B36F200}']
  { getters & setters } 

    function get_CallingConvention: DNCallingConvention;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property CallingConvention: DNCallingConvention read get_CallingConvention;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNUnmanagedFunctionPointerAttribute = class(TDNGenericImport<DNUnmanagedFunctionPointerAttributeClass, DNUnmanagedFunctionPointerAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  DNDefaultInterfaceAttributeClass = interface(DNAttributeClass)
  ['{CE52ECB9-66D1-5FD1-9357-EA1343354B42}']
  { constructors } 

    {class} function init(defaultInterface: DNType): DNDefaultInterfaceAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.DefaultInterfaceAttribute')]
  DNDefaultInterfaceAttribute = interface(DNAttribute)
  ['{6965CB68-B8CB-35C9-851D-33032FB8C5B2}']
  { getters & setters } 

    function get_DefaultInterface: DNType;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property DefaultInterface: DNType read get_DefaultInterface;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNDefaultInterfaceAttribute = class(TDNGenericImport<DNDefaultInterfaceAttributeClass, DNDefaultInterfaceAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  DNInterfaceImplementedInVersionAttributeClass = interface(DNAttributeClass)
  ['{068F8FC2-CF31-5E66-B57B-EB4CAAAB412E}']
  { constructors } 

    {class} function init(interfaceType: DNType; majorVersion: Byte; minorVersion: Byte; buildVersion: Byte; revisionVersion: Byte): DNInterfaceImplementedInVersionAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.InterfaceImplementedInVersionAttribute')]
  DNInterfaceImplementedInVersionAttribute = interface(DNAttribute)
  ['{CC3C9D11-EA2B-33D5-B10A-FE99FBBF15DB}']
  { getters & setters } 

    function get_InterfaceType: DNType;
    function get_MajorVersion: Byte;
    function get_MinorVersion: Byte;
    function get_BuildVersion: Byte;
    function get_RevisionVersion: Byte;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property InterfaceType: DNType read get_InterfaceType;
    property MajorVersion: Byte read get_MajorVersion;
    property MinorVersion: Byte read get_MinorVersion;
    property BuildVersion: Byte read get_BuildVersion;
    property RevisionVersion: Byte read get_RevisionVersion;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNInterfaceImplementedInVersionAttribute = class(TDNGenericImport<DNInterfaceImplementedInVersionAttributeClass, DNInterfaceImplementedInVersionAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  DNReadOnlyArrayAttributeClass = interface(DNAttributeClass)
  ['{E39B8E43-F5B0-5C74-963E-B75A425C02DB}']
  { constructors } 

    {class} function init: DNReadOnlyArrayAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.ReadOnlyArrayAttribute')]
  DNReadOnlyArrayAttribute = interface(DNAttribute)
  ['{E5162C49-743C-313E-AB18-5E5135EDA9AD}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNReadOnlyArrayAttribute = class(TDNGenericImport<DNReadOnlyArrayAttributeClass, DNReadOnlyArrayAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  DNReturnValueNameAttributeClass = interface(DNAttributeClass)
  ['{42BD5FA4-66EA-5DDF-B898-3D54EA3C4C8D}']
  { constructors } 

    {class} function init(name: string): DNReturnValueNameAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.ReturnValueNameAttribute')]
  DNReturnValueNameAttribute = interface(DNAttribute)
  ['{AE28A9B5-3C1D-357A-918D-90A9D684C8F1}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Name: string read get_Name;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNReturnValueNameAttribute = class(TDNGenericImport<DNReturnValueNameAttributeClass, DNReturnValueNameAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  DNWriteOnlyArrayAttributeClass = interface(DNAttributeClass)
  ['{9CCE1F05-91AB-5734-98D9-B3E045D5E6C1}']
  { constructors } 

    {class} function init: DNWriteOnlyArrayAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.WriteOnlyArrayAttribute')]
  DNWriteOnlyArrayAttribute = interface(DNAttribute)
  ['{EBC8F448-7D54-3177-B486-016928BC2FA0}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNWriteOnlyArrayAttribute = class(TDNGenericImport<DNWriteOnlyArrayAttributeClass, DNWriteOnlyArrayAttribute>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNOnDeserializedAttributeClass = interface(DNAttributeClass)
  ['{3FDC5212-B901-573A-A737-38660B48898D}']
  { constructors } 

    {class} function init: DNOnDeserializedAttribute;

  end;

  [DNTypeName('System.Runtime.Serialization.OnDeserializedAttribute')]
  DNOnDeserializedAttribute = interface(DNAttribute)
  ['{B2DF32DB-DBB4-38A6-898C-19DE5AAE6539}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNOnDeserializedAttribute = class(TDNGenericImport<DNOnDeserializedAttributeClass, DNOnDeserializedAttribute>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNOnDeserializingAttributeClass = interface(DNAttributeClass)
  ['{2338CFD0-3B85-53CF-93B2-DDB0C9EBA37A}']
  { constructors } 

    {class} function init: DNOnDeserializingAttribute;

  end;

  [DNTypeName('System.Runtime.Serialization.OnDeserializingAttribute')]
  DNOnDeserializingAttribute = interface(DNAttribute)
  ['{28CDEC7F-44E4-32C7-A2F0-0401F2240827}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNOnDeserializingAttribute = class(TDNGenericImport<DNOnDeserializingAttributeClass, DNOnDeserializingAttribute>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNOnSerializedAttributeClass = interface(DNAttributeClass)
  ['{FC800F61-AB2A-50D2-BCEE-3CCF6B82EABE}']
  { constructors } 

    {class} function init: DNOnSerializedAttribute;

  end;

  [DNTypeName('System.Runtime.Serialization.OnSerializedAttribute')]
  DNOnSerializedAttribute = interface(DNAttribute)
  ['{3F34452A-E592-3D9D-8520-DF8652AFB028}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNOnSerializedAttribute = class(TDNGenericImport<DNOnSerializedAttributeClass, DNOnSerializedAttribute>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNOnSerializingAttributeClass = interface(DNAttributeClass)
  ['{459DD10D-AC33-5E94-BF7E-B1AFC7849354}']
  { constructors } 

    {class} function init: DNOnSerializingAttribute;

  end;

  [DNTypeName('System.Runtime.Serialization.OnSerializingAttribute')]
  DNOnSerializingAttribute = interface(DNAttribute)
  ['{4B488F6D-E6DC-3BE0-AD2F-23C0402E797F}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNOnSerializingAttribute = class(TDNGenericImport<DNOnSerializingAttributeClass, DNOnSerializingAttribute>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNOptionalFieldAttributeClass = interface(DNAttributeClass)
  ['{DB70550B-1546-53BC-8BED-E630036FB601}']
  { constructors } 

    {class} function init: DNOptionalFieldAttribute;

  end;

  [DNTypeName('System.Runtime.Serialization.OptionalFieldAttribute')]
  DNOptionalFieldAttribute = interface(DNAttribute)
  ['{09997647-E649-3E0C-9FA7-893E98C22A88}']
  { getters & setters } 

    function get_VersionAdded: Int32;
    procedure set_VersionAdded(value: Int32);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property VersionAdded: Int32 read get_VersionAdded write set_VersionAdded;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNOptionalFieldAttribute = class(TDNGenericImport<DNOptionalFieldAttributeClass, DNOptionalFieldAttribute>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNTargetFrameworkAttributeClass = interface(DNAttributeClass)
  ['{604E62AF-B4BB-5EA3-B829-C3EDCA878049}']
  { constructors } 

    {class} function init(frameworkName: string): DNTargetFrameworkAttribute;

  end;

  [DNTypeName('System.Runtime.Versioning.TargetFrameworkAttribute')]
  DNTargetFrameworkAttribute = interface(DNAttribute)
  ['{DEB2B50E-260C-3048-ACCA-0AFEC66AFC8F}']
  { getters & setters } 

    function get_FrameworkName: string;
    function get_FrameworkDisplayName: string;
    procedure set_FrameworkDisplayName(value: string);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property FrameworkName: string read get_FrameworkName;
    property FrameworkDisplayName: string read get_FrameworkDisplayName write set_FrameworkDisplayName;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNTargetFrameworkAttribute = class(TDNGenericImport<DNTargetFrameworkAttributeClass, DNTargetFrameworkAttribute>) end;

  //-------------namespace: System.Security----------------
  DNAllowPartiallyTrustedCallersAttributeClass = interface(DNAttributeClass)
  ['{EF9343F2-7940-5AF6-AF8A-CAFD6791B1CC}']
  { constructors } 

    {class} function init: DNAllowPartiallyTrustedCallersAttribute;

  end;

  [DNTypeName('System.Security.AllowPartiallyTrustedCallersAttribute')]
  DNAllowPartiallyTrustedCallersAttribute = interface(DNAttribute)
  ['{28C72CA9-21F8-32B3-885C-391E8D957E9C}']
  { getters & setters } 

    function get_PartialTrustVisibilityLevel: DNPartialTrustVisibilityLevel;
    procedure set_PartialTrustVisibilityLevel(value: DNPartialTrustVisibilityLevel);
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property PartialTrustVisibilityLevel: DNPartialTrustVisibilityLevel read get_PartialTrustVisibilityLevel write set_PartialTrustVisibilityLevel;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNAllowPartiallyTrustedCallersAttribute = class(TDNGenericImport<DNAllowPartiallyTrustedCallersAttributeClass, DNAllowPartiallyTrustedCallersAttribute>) end;

  //-------------namespace: System.Security----------------
  DNSecurityCriticalAttributeClass = interface(DNAttributeClass)
  ['{787FE706-BC32-552A-80C1-3DE7CAB0F986}']
  { constructors } 

    {class} function init: DNSecurityCriticalAttribute; overload;
    {class} function init(scope: DNSecurityCriticalScope): DNSecurityCriticalAttribute; overload;

  end;

  [DNTypeName('System.Security.SecurityCriticalAttribute')]
  DNSecurityCriticalAttribute = interface(DNAttribute)
  ['{83498F6E-8A4C-3051-AAA1-2931F8490973}']
  { getters & setters } 

    function get_Scope: DNSecurityCriticalScope;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Scope: DNSecurityCriticalScope read get_Scope;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSecurityCriticalAttribute = class(TDNGenericImport<DNSecurityCriticalAttributeClass, DNSecurityCriticalAttribute>) end;

  //-------------namespace: System.Security----------------
  DNSecurityRulesAttributeClass = interface(DNAttributeClass)
  ['{0EF4B6C5-0536-5FE6-ADF1-C6C64A29E369}']
  { constructors } 

    {class} function init(ruleSet: DNSecurityRuleSet): DNSecurityRulesAttribute;

  end;

  [DNTypeName('System.Security.SecurityRulesAttribute')]
  DNSecurityRulesAttribute = interface(DNAttribute)
  ['{84CE4A47-FE28-3BC2-8571-5E81CDF41046}']
  { getters & setters } 

    function get_SkipVerificationInFullTrust: Boolean;
    procedure set_SkipVerificationInFullTrust(value: Boolean);
    function get_RuleSet: DNSecurityRuleSet;
    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property SkipVerificationInFullTrust: Boolean read get_SkipVerificationInFullTrust write set_SkipVerificationInFullTrust;
    property RuleSet: DNSecurityRuleSet read get_RuleSet;
    property TypeId: DNObject read get_TypeId;
  end;

  TDNSecurityRulesAttribute = class(TDNGenericImport<DNSecurityRulesAttributeClass, DNSecurityRulesAttribute>) end;

  //-------------namespace: System.Security----------------
  DNSecuritySafeCriticalAttributeClass = interface(DNAttributeClass)
  ['{B9BC2420-F67D-5E98-82A2-636F1B90BF33}']
  { constructors } 

    {class} function init: DNSecuritySafeCriticalAttribute;

  end;

  [DNTypeName('System.Security.SecuritySafeCriticalAttribute')]
  DNSecuritySafeCriticalAttribute = interface(DNAttribute)
  ['{366753F5-8F24-3F0F-A670-0E88A4E8F96E}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSecuritySafeCriticalAttribute = class(TDNGenericImport<DNSecuritySafeCriticalAttributeClass, DNSecuritySafeCriticalAttribute>) end;

  //-------------namespace: System.Security----------------
  DNSecurityTransparentAttributeClass = interface(DNAttributeClass)
  ['{00F67B4D-BA9F-5F77-A901-9CDD3615D5AE}']
  { constructors } 

    {class} function init: DNSecurityTransparentAttribute;

  end;

  [DNTypeName('System.Security.SecurityTransparentAttribute')]
  DNSecurityTransparentAttribute = interface(DNAttribute)
  ['{CFC5DF3E-B6A6-348E-892D-F339161B478C}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSecurityTransparentAttribute = class(TDNGenericImport<DNSecurityTransparentAttributeClass, DNSecurityTransparentAttribute>) end;

  //-------------namespace: System.Security----------------
  DNSecurityTreatAsSafeAttributeClass = interface(DNAttributeClass)
  ['{AF5E7442-B7FD-5E92-A97D-1C9767C03086}']
  { constructors } 

    {class} function init: DNSecurityTreatAsSafeAttribute;

  end;

  [DNTypeName('System.Security.SecurityTreatAsSafeAttribute')]
  DNSecurityTreatAsSafeAttribute = interface(DNAttribute)
  ['{404255BC-65EF-3A44-884C-C1372A2061FF}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSecurityTreatAsSafeAttribute = class(TDNGenericImport<DNSecurityTreatAsSafeAttributeClass, DNSecurityTreatAsSafeAttribute>) end;

  //-------------namespace: System.Security----------------
  DNSuppressUnmanagedCodeSecurityAttributeClass = interface(DNAttributeClass)
  ['{E3761CE4-9387-5C00-8236-DAD981E5DD42}']
  { constructors } 

    {class} function init: DNSuppressUnmanagedCodeSecurityAttribute;

  end;

  [DNTypeName('System.Security.SuppressUnmanagedCodeSecurityAttribute')]
  DNSuppressUnmanagedCodeSecurityAttribute = interface(DNAttribute)
  ['{92610E24-ED7C-3D29-86E5-AE0E6ED40725}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSuppressUnmanagedCodeSecurityAttribute = class(TDNGenericImport<DNSuppressUnmanagedCodeSecurityAttributeClass, DNSuppressUnmanagedCodeSecurityAttribute>) end;

  //-------------namespace: System.Security----------------
  DNUnverifiableCodeAttributeClass = interface(DNAttributeClass)
  ['{B4E04659-B1DF-523C-AA4F-15FAD871FA54}']
  { constructors } 

    {class} function init: DNUnverifiableCodeAttribute;

  end;

  [DNTypeName('System.Security.UnverifiableCodeAttribute')]
  DNUnverifiableCodeAttribute = interface(DNAttribute)
  ['{ED7E8B1E-9C93-3D9C-A3BE-A76EEEDAC14D}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNUnverifiableCodeAttribute = class(TDNGenericImport<DNUnverifiableCodeAttributeClass, DNUnverifiableCodeAttribute>) end;

  //-------------namespace: System----------------
  DNSerializableAttributeClass = interface(DNAttributeClass)
  ['{05163FAF-CB4C-505E-90B3-032332BF624F}']
  { constructors } 

    {class} function init: DNSerializableAttribute;

  end;

  [DNTypeName('System.SerializableAttribute')]
  DNSerializableAttribute = interface(DNAttribute)
  ['{0B3A073B-C1B3-39D5-A3E0-DEA3095B884B}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSerializableAttribute = class(TDNGenericImport<DNSerializableAttributeClass, DNSerializableAttribute>) end;

  //-------------namespace: System----------------
  DNSTAThreadAttributeClass = interface(DNAttributeClass)
  ['{30FF4B66-6481-5CBE-8241-317018275F71}']
  { constructors } 

    {class} function init: DNSTAThreadAttribute;

  end;

  [DNTypeName('System.STAThreadAttribute')]
  DNSTAThreadAttribute = interface(DNAttribute)
  ['{10286BBF-F63C-3E81-A501-39D6710AD840}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNSTAThreadAttribute = class(TDNGenericImport<DNSTAThreadAttributeClass, DNSTAThreadAttribute>) end;

  //-------------namespace: System----------------
  DNThreadStaticAttributeClass = interface(DNAttributeClass)
  ['{F3D6CD13-F8B4-5220-BD14-6C99F66C3334}']
  { constructors } 

    {class} function init: DNThreadStaticAttribute;

  end;

  [DNTypeName('System.ThreadStaticAttribute')]
  DNThreadStaticAttribute = interface(DNAttribute)
  ['{2D8C56E8-26C1-3624-BD17-657EDD2A75E1}']
  { getters & setters } 

    function get_TypeId: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TypeId: DNObject read get_TypeId;
  end;

  TDNThreadStaticAttribute = class(TDNGenericImport<DNThreadStaticAttributeClass, DNThreadStaticAttribute>) end;

  //-------------namespace: System----------------
  DNBitConverterClass = interface(DNObjectClass)
  ['{78560BBF-B832-5297-B13D-EE5191B788E5}']
  { static fields getter & setter } 

   function __fakeFieldGet_IsLittleEndian: Boolean;

  { static fields } 

    {class} property IsLittleEndian: Boolean read __fakeFieldGet_IsLittleEndian;

  { static methods } 

    {class} function GetBytes(value: Boolean): TArray<Byte>; overload;
    {class} function TryWriteBytes(destination: DNSpan<Byte>; value: Boolean): Boolean; overload;
    {class} function GetBytes(value: Char): TArray<Byte>; overload;
    {class} function TryWriteBytes(destination: DNSpan<Byte>; value: Char): Boolean; overload;
    {class} function GetBytes(value: Int16): TArray<Byte>; overload;
    {class} function TryWriteBytes(destination: DNSpan<Byte>; value: Int16): Boolean; overload;
    {class} function GetBytes(value: Int32): TArray<Byte>; overload;
    {class} function TryWriteBytes(destination: DNSpan<Byte>; value: Int32): Boolean; overload;
    {class} function GetBytes(value: Int64): TArray<Byte>; overload;
    {class} function TryWriteBytes(destination: DNSpan<Byte>; value: Int64): Boolean; overload;
    {class} function GetBytes(value: UInt16): TArray<Byte>; overload;
    {class} function TryWriteBytes(destination: DNSpan<Byte>; value: UInt16): Boolean; overload;
    {class} function GetBytes(value: UInt32): TArray<Byte>; overload;
    {class} function TryWriteBytes(destination: DNSpan<Byte>; value: UInt32): Boolean; overload;
    {class} function GetBytes(value: UInt64): TArray<Byte>; overload;
    {class} function TryWriteBytes(destination: DNSpan<Byte>; value: UInt64): Boolean; overload;
    {class} function GetBytes(value: Single): TArray<Byte>; overload;
    {class} function TryWriteBytes(destination: DNSpan<Byte>; value: Single): Boolean; overload;
    {class} function GetBytes(value: Double): TArray<Byte>; overload;
    {class} function TryWriteBytes(destination: DNSpan<Byte>; value: Double): Boolean; overload;
    {class} function ToChar(value: TArray<Byte>; startIndex: Int32): Char; overload;
    {class} function ToChar(value: DNReadOnlySpan<Byte>): Char; overload;
    {class} function ToInt16(value: TArray<Byte>; startIndex: Int32): Int16; overload;
    {class} function ToInt16(value: DNReadOnlySpan<Byte>): Int16; overload;
    {class} function ToInt32(value: TArray<Byte>; startIndex: Int32): Int32; overload;
    {class} function ToInt32(value: DNReadOnlySpan<Byte>): Int32; overload;
    {class} function ToInt64(value: TArray<Byte>; startIndex: Int32): Int64; overload;
    {class} function ToInt64(value: DNReadOnlySpan<Byte>): Int64; overload;
    {class} function ToUInt16(value: TArray<Byte>; startIndex: Int32): UInt16; overload;
    {class} function ToUInt16(value: DNReadOnlySpan<Byte>): UInt16; overload;
    {class} function ToUInt32(value: TArray<Byte>; startIndex: Int32): UInt32; overload;
    {class} function ToUInt32(value: DNReadOnlySpan<Byte>): UInt32; overload;
    {class} function ToUInt64(value: TArray<Byte>; startIndex: Int32): UInt64; overload;
    {class} function ToUInt64(value: DNReadOnlySpan<Byte>): UInt64; overload;
    {class} function ToSingle(value: TArray<Byte>; startIndex: Int32): Single; overload;
    {class} function ToSingle(value: DNReadOnlySpan<Byte>): Single; overload;
    {class} function ToDouble(value: TArray<Byte>; startIndex: Int32): Double; overload;
    {class} function ToDouble(value: DNReadOnlySpan<Byte>): Double; overload;
    {class} function ToString(value: TArray<Byte>; startIndex: Int32; length: Int32): string; overload;
    {class} function ToString(value: TArray<Byte>): string; overload;
    {class} function ToString(value: TArray<Byte>; startIndex: Int32): string; overload;
    {class} function ToBoolean(value: TArray<Byte>; startIndex: Int32): Boolean; overload;
    {class} function ToBoolean(value: DNReadOnlySpan<Byte>): Boolean; overload;
    {class} function DoubleToInt64Bits(value: Double): Int64;
    {class} function Int64BitsToDouble(value: Int64): Double;
    {class} function SingleToInt32Bits(value: Single): Int32;
    {class} function Int32BitsToSingle(value: Int32): Single;

  end;

  [DNTypeName('System.BitConverter')]
  DNBitConverter = interface(DNObject)
  ['{176571B8-D4B6-314C-A813-BEC17325D119}']
  { methods } 

    function ToString: string; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNBitConverter = class(TDNGenericImport<DNBitConverterClass, DNBitConverter>) end;

  //-------------namespace: System----------------
  DNBufferClass = interface(DNObjectClass)
  ['{153FF38F-6957-596A-88BE-3E610356ADE9}']
  { static methods } 

    {class} procedure BlockCopy(src: DNArray; srcOffset: Int32; dst: DNArray; dstOffset: Int32; count: Int32);
    {class} function GetByte(&array: DNArray; index: Int32): Byte;
    {class} procedure SetByte(&array: DNArray; index: Int32; value: Byte);
    {class} function ByteLength(&array: DNArray): Int32;
    {class} procedure MemoryCopy(var source: DNVoid; var destination: DNVoid; destinationSizeInBytes: Int64; sourceBytesToCopy: Int64); overload;
    {class} procedure MemoryCopy(var source: DNVoid; var destination: DNVoid; destinationSizeInBytes: UInt64; sourceBytesToCopy: UInt64); overload;

  end;

  [DNTypeName('System.Buffer')]
  DNBuffer = interface(DNObject)
  ['{56DD04EC-4010-30D7-8FF7-DEE1C0CAEE39}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNBuffer = class(TDNGenericImport<DNBufferClass, DNBuffer>) end;

  //-------------namespace: System.Buffers----------------
  DNArrayPoolClass<T> = interface(DNObjectClass)
  ['{B7DD1883-F70C-54E6-A5F5-DA81E1C5C2C0}']
  { static getter & setter } 

    {class} function get_Shared: DNArrayPool<T>;

  { static methods } 

    {class} function Create: DNArrayPool<T>; overload;
    {class} function Create(maxArrayLength: Int32; maxArraysPerBucket: Int32): DNArrayPool<T>; overload;

  { static propertys } 

    {class} property Shared: DNArrayPool<T> read get_Shared;
  end;

  [DNTypeName('System.Buffers.ArrayPool`1')]
  DNArrayPool<T> = interface(DNObject)
  ['{BEDEE967-9C52-3EF6-B3A8-D3080499FD90}']
  { methods } 

    function Rent(minimumLength: Int32): TArray<T>;
    procedure Return(&array: TArray<T>; clearArray: Boolean);
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNArrayPool<T> = class(TDNGenericImport<DNArrayPoolClass<T>, DNArrayPool<T>>) end;

  //-------------namespace: System.Buffers----------------
  DNMemoryManagerClass<T> = interface(DNObjectClass)
  ['{6F5C27B5-83F8-5DCB-80BB-178386E7DAC1}']
  end;

  [DNTypeName('System.Buffers.MemoryManager`1')]
  DNMemoryManager<T> = interface(DNIMemoryOwner<T>)
  ['{39C94174-C899-38A1-B454-4FDBDCF059C0}']
  { getters & setters } 

    function get_Memory: DNMemory<T>;

  { methods } 

    function GetSpan: DNSpan<T>;
    function Pin(elementIndex: Int32): DNMemoryHandle;
    procedure Unpin;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Memory: DNMemory<T> read get_Memory;
  end;

  TDNMemoryManager<T> = class(TDNGenericImport<DNMemoryManagerClass<T>, DNMemoryManager<T>>) end;

  //-------------namespace: System----------------
  DNCharEnumeratorClass = interface(DNObjectClass)
  ['{CA4A1BCD-C66B-57CC-9C0D-413EDF16E873}']
  end;

  [DNTypeName('System.CharEnumerator')]
  DNCharEnumerator = interface(DNIEnumerator)
  ['{0BA8597C-F27D-372A-B5C7-4F83F589FE3C}']
  { getters & setters } 

    function get_Current: Char;

  { methods } 

    function Clone: DNObject;
    function MoveNext: Boolean;
    procedure Dispose;
    procedure Reset;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Current: Char read get_Current;
  end;

  TDNCharEnumerator = class(TDNGenericImport<DNCharEnumeratorClass, DNCharEnumerator>) end;

  //-------------namespace: System.Collections----------------
  DNComparerClass = interface(DNObjectClass)
  ['{4C158D0B-D169-5E11-9F72-98EDE7C805B4}']
  { constructors } 

    {class} function init(culture: DNCultureInfo): DNComparer;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNComparer;
   function __fakeFieldGet_DefaultInvariant: DNComparer;

  { static fields } 

    {class} property &Default: DNComparer read __fakeFieldGet_Default;
    {class} property DefaultInvariant: DNComparer read __fakeFieldGet_DefaultInvariant;

  end;

  [DNTypeName('System.Collections.Comparer')]
  DNComparer = interface(DNIComparer)
  ['{7D92D5AE-EDD7-34A8-B9D8-BE16AFE410B9}']
  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Compare(a: DNObject; b: DNObject): Int32;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComparer = class(TDNGenericImport<DNComparerClass, DNComparer>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNComparerClass<T> = interface(DNObjectClass)
  ['{ACCB4AF4-98DD-5BA1-817C-B674DB5BD196}']
  { static getter & setter } 

    {class} function get_Default: DNComparer<T>;

  { static methods } 

    {class} function Create(comparison: DNComparison<T>): DNComparer<T>;

  { static propertys } 

    {class} property &Default: DNComparer<T> read get_Default;
  end;

  [DNTypeName('System.Collections.Generic.Comparer`1')]
  DNComparer<T> = interface(DNIComparer)
  ['{52B76716-2D32-3240-B52B-ABBF46554EAD}']
  { methods } 

    function Compare(x: T; y: T): Int32;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComparer<T> = class(TDNGenericImport<DNComparerClass<T>, DNComparer<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNGenericComparerClass<T> = interface(DNComparerClass<T>)
  ['{8047DF6A-981B-5A2F-9E25-B1E30EAC656B}']
  { constructors } 

    {class} function init: DNGenericComparer<T>;

  end;

  [DNTypeName('System.Collections.Generic.GenericComparer`1')]
  DNGenericComparer<T> = interface(DNComparer<T>)
  ['{0549E0F8-64BE-386A-BFB9-A6013004BCC1}']
  { methods } 

    function Compare(x: T; y: T): Int32;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNGenericComparer<T> = class(TDNGenericImport<DNGenericComparerClass<T>, DNGenericComparer<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNNullableComparerClass<T> = interface(DNComparerClass<DNNullable<T>>)
  ['{6362812C-F83B-5F4E-AED6-D75CF9639622}']
  { constructors } 

    {class} function init: DNNullableComparer<T>;

  end;

  [DNTypeName('System.Collections.Generic.NullableComparer`1')]
  DNNullableComparer<T> = interface(DNComparer<DNNullable<T>>)
  ['{F93B5456-C47B-352A-ADD9-39889297DA33}']
  { methods } 

    function Compare(x: DNNullable<T>; y: DNNullable<T>): Int32;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNNullableComparer<T> = class(TDNGenericImport<DNNullableComparerClass<T>, DNNullableComparer<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNObjectComparerClass<T> = interface(DNComparerClass<T>)
  ['{2285E8CF-7F46-5AF4-976D-37AD795393AA}']
  { constructors } 

    {class} function init: DNObjectComparer<T>;

  end;

  [DNTypeName('System.Collections.Generic.ObjectComparer`1')]
  DNObjectComparer<T> = interface(DNComparer<T>)
  ['{A456207E-3AA9-3EDE-A7FE-117C5C1EBABE}']
  { methods } 

    function Compare(x: T; y: T): Int32;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNObjectComparer<T> = class(TDNGenericImport<DNObjectComparerClass<T>, DNObjectComparer<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNDictionaryClass<TKey, TValue> = interface(DNObjectClass)
  ['{247F5871-74B7-5051-882E-160F0BD7CFF3}']
  { constructors } 

    {class} function init: DNDictionary<TKey, TValue>; overload;
    {class} function init(capacity: Int32): DNDictionary<TKey, TValue>; overload;
    {class} function init(comparer: DNIEqualityComparer<TKey>): DNDictionary<TKey, TValue>; overload;
    {class} function init(capacity: Int32; comparer: DNIEqualityComparer<TKey>): DNDictionary<TKey, TValue>; overload;
    {class} function init(dictionary: DNIDictionary<TKey, TValue>): DNDictionary<TKey, TValue>; overload;
    {class} function init(dictionary: DNIDictionary<TKey, TValue>; comparer: DNIEqualityComparer<TKey>): DNDictionary<TKey, TValue>; overload;
    {class} function init(collection: DNIEnumerable<DNKeyValuePair<TKey, TValue>>): DNDictionary<TKey, TValue>; overload;
    {class} function init(collection: DNIEnumerable<DNKeyValuePair<TKey, TValue>>; comparer: DNIEqualityComparer<TKey>): DNDictionary<TKey, TValue>; overload;

  end;

  [DNTypeName('System.Collections.Generic.Dictionary`2')]
  DNDictionary<TKey, TValue> = interface(DNIDictionary<TKey, TValue>)
  ['{734EDE5C-A8ED-31C8-B603-244F73E4C660}']
  { getters & setters } 

    function get_Comparer: DNIEqualityComparer<TKey>;
    function get_Count: Int32;
    function get_Keys: DNDictionary_KeyCollection<TKey, TValue>;
    function get_Values: DNDictionary_ValueCollection<TKey, TValue>;

  { methods } 

    function ContainsKey(key: TKey): Boolean;
    function ContainsValue(value: TValue): Boolean;
    function GetEnumerator: DNDictionary_Enumerator<TKey, TValue>;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    procedure OnDeserialization(sender: DNObject);
    function Remove(key: TKey; out value: TValue): Boolean;
    function TryGetValue(key: TKey; out value: TValue): Boolean;
    function TryAdd(key: TKey; value: TValue): Boolean;
    function EnsureCapacity(capacity: Int32): Int32;
    procedure TrimExcess; overload;
    procedure TrimExcess(capacity: Int32); overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Comparer: DNIEqualityComparer<TKey> read get_Comparer;
    property Count: Int32 read get_Count;
    property Keys: DNDictionary_KeyCollection<TKey, TValue> read get_Keys;
    property Values: DNDictionary_ValueCollection<TKey, TValue> read get_Values;
  end;

  TDNDictionary<TKey, TValue> = class(TDNGenericImport<DNDictionaryClass<TKey, TValue>, DNDictionary<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNDictionary_KeyCollectionClass<TKey, TValue> = interface(DNObjectClass)
  ['{EAB621F7-C067-5C7F-972E-002A269F0810}']
  { constructors } 

    {class} function init(dictionary: DNDictionary<TKey, TValue>): DNDictionary_KeyCollection<TKey, TValue>;

  end;

  [DNTypeName('System.Collections.Generic.Dictionary`2+KeyCollection')]
  DNDictionary_KeyCollection<TKey, TValue> = interface(DNICollection<TKey>)
  ['{9A873059-121C-33A5-B081-D37492344DAD}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNDictionary_KeyCollection_Enumerator<TKey, TValue>;
    procedure CopyTo(&array: TArray<TKey>; index: Int32);
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNDictionary_KeyCollection<TKey, TValue> = class(TDNGenericImport<DNDictionary_KeyCollectionClass<TKey, TValue>, DNDictionary_KeyCollection<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNDictionary_ValueCollectionClass<TKey, TValue> = interface(DNObjectClass)
  ['{987A32F9-0FD7-59EF-88F8-DD811EBF5416}']
  { constructors } 

    {class} function init(dictionary: DNDictionary<TKey, TValue>): DNDictionary_ValueCollection<TKey, TValue>;

  end;

  [DNTypeName('System.Collections.Generic.Dictionary`2+ValueCollection')]
  DNDictionary_ValueCollection<TKey, TValue> = interface(DNICollection<TValue>)
  ['{53703923-949A-3F87-B8AF-28D9FF155820}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNDictionary_ValueCollection_Enumerator<TKey, TValue>;
    procedure CopyTo(&array: TArray<TValue>; index: Int32);
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNDictionary_ValueCollection<TKey, TValue> = class(TDNGenericImport<DNDictionary_ValueCollectionClass<TKey, TValue>, DNDictionary_ValueCollection<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNByteEqualityComparerClass = interface(DNEqualityComparerClass<Byte>)
  ['{5CE5BA9D-21A7-599E-A430-44FCBFA404FD}']
  { constructors } 

    {class} function init: DNByteEqualityComparer;

  end;

  [DNTypeName('System.Collections.Generic.ByteEqualityComparer')]
  DNByteEqualityComparer = interface(DNEqualityComparer<Byte>)
  ['{C6C61288-A644-3916-BE27-9E9499EF1D01}']
  { methods } 

    function Equals(x: Byte; y: Byte): Boolean; overload;
    function GetHashCode(b: Byte): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNByteEqualityComparer = class(TDNGenericImport<DNByteEqualityComparerClass, DNByteEqualityComparer>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNNonRandomizedStringEqualityComparerClass = interface(DNEqualityComparerClass<string>)
  ['{D5B407C7-9501-5782-9D35-BD298FC57383}']
  end;

  [DNTypeName('System.Collections.Generic.NonRandomizedStringEqualityComparer')]
  DNNonRandomizedStringEqualityComparer = interface(DNEqualityComparer<string>)
  ['{79AFFF7D-24DB-382C-BBA9-61C0ABA15E67}']
  { methods } 

    function Equals(x: string; y: string): Boolean; overload;
    function GetHashCode(obj: string): Int32; overload;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;
    function GetType: DNType;

  end;

  TDNNonRandomizedStringEqualityComparer = class(TDNGenericImport<DNNonRandomizedStringEqualityComparerClass, DNNonRandomizedStringEqualityComparer>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNEnumEqualityComparerClass<T> = interface(DNEqualityComparerClass<T>)
  ['{38CEBC21-D497-5D19-AA64-8918E4E3E787}']
  end;

  [DNTypeName('System.Collections.Generic.EnumEqualityComparer`1')]
  DNEnumEqualityComparer<T> = interface(DNEqualityComparer<T>)
  ['{219D1735-4331-309C-B44C-D462F2DA4627}']
  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(x: T; y: T): Boolean; overload;
    function GetHashCode(obj: T): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNEnumEqualityComparer<T> = class(TDNGenericImport<DNEnumEqualityComparerClass<T>, DNEnumEqualityComparer<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNGenericEqualityComparerClass<T> = interface(DNEqualityComparerClass<T>)
  ['{49377A1C-1071-5097-8302-339027E11BBF}']
  { constructors } 

    {class} function init: DNGenericEqualityComparer<T>;

  end;

  [DNTypeName('System.Collections.Generic.GenericEqualityComparer`1')]
  DNGenericEqualityComparer<T> = interface(DNEqualityComparer<T>)
  ['{A34B64DE-66AD-3E9D-BAF3-DFC18E88D6F9}']
  { methods } 

    function Equals(x: T; y: T): Boolean; overload;
    function GetHashCode(obj: T): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNGenericEqualityComparer<T> = class(TDNGenericImport<DNGenericEqualityComparerClass<T>, DNGenericEqualityComparer<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNNullableEqualityComparerClass<T> = interface(DNEqualityComparerClass<DNNullable<T>>)
  ['{BA547A2B-CF22-5586-8BBE-17DB1759FF42}']
  { constructors } 

    {class} function init: DNNullableEqualityComparer<T>;

  end;

  [DNTypeName('System.Collections.Generic.NullableEqualityComparer`1')]
  DNNullableEqualityComparer<T> = interface(DNEqualityComparer<DNNullable<T>>)
  ['{937BDD17-D13C-3E8F-BD61-D01A418CD6B6}']
  { methods } 

    function Equals(x: DNNullable<T>; y: DNNullable<T>): Boolean; overload;
    function GetHashCode(obj: DNNullable<T>): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNNullableEqualityComparer<T> = class(TDNGenericImport<DNNullableEqualityComparerClass<T>, DNNullableEqualityComparer<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNObjectEqualityComparerClass<T> = interface(DNEqualityComparerClass<T>)
  ['{B5243770-DE6E-5047-B0F7-BBF278BE0373}']
  { constructors } 

    {class} function init: DNObjectEqualityComparer<T>;

  end;

  [DNTypeName('System.Collections.Generic.ObjectEqualityComparer`1')]
  DNObjectEqualityComparer<T> = interface(DNEqualityComparer<T>)
  ['{8A1C12A4-52C7-3AA6-8CD9-0A4613A395EC}']
  { methods } 

    function Equals(x: T; y: T): Boolean; overload;
    function GetHashCode(obj: T): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNObjectEqualityComparer<T> = class(TDNGenericImport<DNObjectEqualityComparerClass<T>, DNObjectEqualityComparer<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNKeyValuePairClass = interface(DNObjectClass)
  ['{427BCDBB-0A0E-59CB-806F-8942EE7AC82A}']
  end;

  [DNTypeName('System.Collections.Generic.KeyValuePair')]
  DNKeyValuePair = interface(DNObject)
  ['{BA8F0800-0B76-3295-92C8-66E6019016D7}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNKeyValuePair = class(TDNGenericImport<DNKeyValuePairClass, DNKeyValuePair>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNListClass<T> = interface(DNObjectClass)
  ['{D19CC9E8-9DC4-579F-B717-0B287F3304C1}']
  { constructors } 

    {class} function init: DNList<T>; overload;
    {class} function init(capacity: Int32): DNList<T>; overload;
    {class} function init(collection: DNIEnumerable<T>): DNList<T>; overload;

  end;

  [DNTypeName('System.Collections.Generic.List`1')]
  DNList<T> = interface(DNIList<T>)
  ['{A2A068CB-FDFB-3727-BD8B-2D36CD9356FB}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    procedure AddRange(collection: DNIEnumerable<T>);
    function AsReadOnly: DNReadOnlyCollection<T>;
    function BinarySearch(index: Int32; count: Int32; item: T; comparer: DNIComparer<T>): Int32; overload;
    function BinarySearch(item: T): Int32; overload;
    function BinarySearch(item: T; comparer: DNIComparer<T>): Int32; overload;
    function &Contains(item: T): Boolean;
    procedure CopyTo(&array: TArray<T>); overload;
    procedure CopyTo(index: Int32; &array: TArray<T>; arrayIndex: Int32; count: Int32); overload;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32); overload;
    function Exists(match: DNPredicate<T>): Boolean;
    function Find(match: DNPredicate<T>): T;
    function FindAll(match: DNPredicate<T>): DNList<T>;
    function FindIndex(match: DNPredicate<T>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DNPredicate<T>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DNPredicate<T>): Int32; overload;
    function FindLast(match: DNPredicate<T>): T;
    function FindLastIndex(match: DNPredicate<T>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DNPredicate<T>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DNPredicate<T>): Int32; overload;
    procedure ForEach(action: DNAction<T>);
    function GetEnumerator: DNList_Enumerator<T>;
    function GetRange(index: Int32; count: Int32): DNList<T>;
    function IndexOf(item: T): Int32; overload;
    function IndexOf(item: T; index: Int32): Int32; overload;
    function IndexOf(item: T; index: Int32; count: Int32): Int32; overload;
    procedure Insert(index: Int32; item: T);
    procedure InsertRange(index: Int32; collection: DNIEnumerable<T>);
    function LastIndexOf(item: T): Int32; overload;
    function LastIndexOf(item: T; index: Int32): Int32; overload;
    function LastIndexOf(item: T; index: Int32; count: Int32): Int32; overload;
    function RemoveAll(match: DNPredicate<T>): Int32;
    procedure RemoveAt(index: Int32);
    procedure RemoveRange(index: Int32; count: Int32);
    procedure Reverse; overload;
    procedure Reverse(index: Int32; count: Int32); overload;
    procedure Sort; overload;
    procedure Sort(comparer: DNIComparer<T>); overload;
    procedure Sort(index: Int32; count: Int32; comparer: DNIComparer<T>); overload;
    procedure Sort(comparison: DNComparison<T>); overload;
    function ToArray: TArray<T>;
    procedure TrimExcess;
    function TrueForAll(match: DNPredicate<T>): Boolean;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNList<T> = class(TDNGenericImport<DNListClass<T>, DNList<T>>) end;

  //-------------namespace: System.Collections----------------
  DNListDictionaryInternalClass = interface(DNObjectClass)
  ['{D58B4753-3A5C-5922-9F64-522160E1DBF4}']
  { constructors } 

    {class} function init: DNListDictionaryInternal;

  end;

  [DNTypeName('System.Collections.ListDictionaryInternal')]
  DNListDictionaryInternal = interface(DNIDictionary)
  ['{868F760A-F709-3514-B0E9-B99937E63480}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Keys: DNICollection;
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DNObject;
    function get_Values: DNICollection;

  { methods } 

    function &Contains(key: DNObject): Boolean;
    procedure CopyTo(&array: DNArray; index: Int32);
    function GetEnumerator: DNIDictionaryEnumerator;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Count: Int32 read get_Count;
    property Keys: DNICollection read get_Keys;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DNObject read get_SyncRoot;
    property Values: DNICollection read get_Values;
  end;

  TDNListDictionaryInternal = class(TDNGenericImport<DNListDictionaryInternalClass, DNListDictionaryInternal>) end;

  //-------------namespace: System.Collections.ObjectModel----------------
  DNCollectionClass<T> = interface(DNObjectClass)
  ['{85064474-F651-5F28-84D0-909BE837D885}']
  { constructors } 

    {class} function init: DNCollection<T>; overload;
    {class} function init(list: DNIList<T>): DNCollection<T>; overload;

  end;

  [DNTypeName('System.Collections.ObjectModel.Collection`1')]
  DNCollection<T> = interface(DNIList<T>)
  ['{A98E2BEB-C694-36DE-AFCD-B52CE0781601}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure CopyTo(&array: TArray<T>; index: Int32);
    function &Contains(item: T): Boolean;
    function GetEnumerator: DNIEnumerator<T>;
    function IndexOf(item: T): Int32;
    procedure Insert(index: Int32; item: T);
    procedure RemoveAt(index: Int32);
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNCollection<T> = class(TDNGenericImport<DNCollectionClass<T>, DNCollection<T>>) end;

  //-------------namespace: System.Collections.ObjectModel----------------
  DNReadOnlyCollectionClass<T> = interface(DNObjectClass)
  ['{640E70A8-7DD2-5D80-864C-3E5354784677}']
  { constructors } 

    {class} function init(list: DNIList<T>): DNReadOnlyCollection<T>;

  end;

  [DNTypeName('System.Collections.ObjectModel.ReadOnlyCollection`1')]
  DNReadOnlyCollection<T> = interface(DNIList<T>)
  ['{17E6BEEA-AB07-3104-B89F-4FD07B7D5320}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function &Contains(value: T): Boolean;
    procedure CopyTo(&array: TArray<T>; index: Int32);
    function GetEnumerator: DNIEnumerator<T>;
    function IndexOf(value: T): Int32;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNReadOnlyCollection<T> = class(TDNGenericImport<DNReadOnlyCollectionClass<T>, DNReadOnlyCollection<T>>) end;

  //-------------namespace: System----------------
  DNConvertClass = interface(DNObjectClass)
  ['{A4478989-EAF4-580F-AABB-3799B8E85AFF}']
  { static fields getter & setter } 

   function __fakeFieldGet_DBNull: DNObject;

  { static fields } 

    {class} property DBNull: DNObject read __fakeFieldGet_DBNull;

  { static methods } 

    {class} function GetTypeCode(value: DNObject): DNTypeCode;
    {class} function IsDBNull(value: DNObject): Boolean;
    {class} function ChangeType(value: DNObject; typeCode: DNTypeCode): DNObject; overload;
    {class} function ChangeType(value: DNObject; typeCode: DNTypeCode; provider: DNIFormatProvider): DNObject; overload;
    {class} function ChangeType(value: DNObject; conversionType: DNType): DNObject; overload;
    {class} function ChangeType(value: DNObject; conversionType: DNType; provider: DNIFormatProvider): DNObject; overload;
    {class} function ToBoolean(value: DNObject): Boolean; overload;
    {class} function ToBoolean(value: DNObject; provider: DNIFormatProvider): Boolean; overload;
    {class} function ToBoolean(value: Boolean): Boolean; overload;
    {class} function ToBoolean(value: SByte): Boolean; overload;
    {class} function ToBoolean(value: Char): Boolean; overload;
    {class} function ToBoolean(value: Byte): Boolean; overload;
    {class} function ToBoolean(value: Int16): Boolean; overload;
    {class} function ToBoolean(value: UInt16): Boolean; overload;
    {class} function ToBoolean(value: Int32): Boolean; overload;
    {class} function ToBoolean(value: UInt32): Boolean; overload;
    {class} function ToBoolean(value: Int64): Boolean; overload;
    {class} function ToBoolean(value: UInt64): Boolean; overload;
    {class} function ToBoolean(value: string): Boolean; overload;
    {class} function ToBoolean(value: string; provider: DNIFormatProvider): Boolean; overload;
    {class} function ToBoolean(value: Single): Boolean; overload;
    {class} function ToBoolean(value: Double): Boolean; overload;
    {class} function ToBoolean(value: DNDecimal): Boolean; overload;
    {class} function ToBoolean(value: DNDateTime): Boolean; overload;
    {class} function ToChar(value: DNObject): Char; overload;
    {class} function ToChar(value: DNObject; provider: DNIFormatProvider): Char; overload;
    {class} function ToChar(value: Boolean): Char; overload;
    {class} function ToChar(value: Char): Char; overload;
    {class} function ToChar(value: SByte): Char; overload;
    {class} function ToChar(value: Byte): Char; overload;
    {class} function ToChar(value: Int16): Char; overload;
    {class} function ToChar(value: UInt16): Char; overload;
    {class} function ToChar(value: Int32): Char; overload;
    {class} function ToChar(value: UInt32): Char; overload;
    {class} function ToChar(value: Int64): Char; overload;
    {class} function ToChar(value: UInt64): Char; overload;
    {class} function ToChar(value: string): Char; overload;
    {class} function ToChar(value: string; provider: DNIFormatProvider): Char; overload;
    {class} function ToChar(value: Single): Char; overload;
    {class} function ToChar(value: Double): Char; overload;
    {class} function ToChar(value: DNDecimal): Char; overload;
    {class} function ToChar(value: DNDateTime): Char; overload;
    {class} function ToSByte(value: DNObject): SByte; overload;
    {class} function ToSByte(value: DNObject; provider: DNIFormatProvider): SByte; overload;
    {class} function ToSByte(value: Boolean): SByte; overload;
    {class} function ToSByte(value: SByte): SByte; overload;
    {class} function ToSByte(value: Char): SByte; overload;
    {class} function ToSByte(value: Byte): SByte; overload;
    {class} function ToSByte(value: Int16): SByte; overload;
    {class} function ToSByte(value: UInt16): SByte; overload;
    {class} function ToSByte(value: Int32): SByte; overload;
    {class} function ToSByte(value: UInt32): SByte; overload;
    {class} function ToSByte(value: Int64): SByte; overload;
    {class} function ToSByte(value: UInt64): SByte; overload;
    {class} function ToSByte(value: Single): SByte; overload;
    {class} function ToSByte(value: Double): SByte; overload;
    {class} function ToSByte(value: DNDecimal): SByte; overload;
    {class} function ToSByte(value: string): SByte; overload;
    {class} function ToSByte(value: string; provider: DNIFormatProvider): SByte; overload;
    {class} function ToSByte(value: DNDateTime): SByte; overload;
    {class} function ToByte(value: DNObject): Byte; overload;
    {class} function ToByte(value: DNObject; provider: DNIFormatProvider): Byte; overload;
    {class} function ToByte(value: Boolean): Byte; overload;
    {class} function ToByte(value: Byte): Byte; overload;
    {class} function ToByte(value: Char): Byte; overload;
    {class} function ToByte(value: SByte): Byte; overload;
    {class} function ToByte(value: Int16): Byte; overload;
    {class} function ToByte(value: UInt16): Byte; overload;
    {class} function ToByte(value: Int32): Byte; overload;
    {class} function ToByte(value: UInt32): Byte; overload;
    {class} function ToByte(value: Int64): Byte; overload;
    {class} function ToByte(value: UInt64): Byte; overload;
    {class} function ToByte(value: Single): Byte; overload;
    {class} function ToByte(value: Double): Byte; overload;
    {class} function ToByte(value: DNDecimal): Byte; overload;
    {class} function ToByte(value: string): Byte; overload;
    {class} function ToByte(value: string; provider: DNIFormatProvider): Byte; overload;
    {class} function ToByte(value: DNDateTime): Byte; overload;
    {class} function ToInt16(value: DNObject): Int16; overload;
    {class} function ToInt16(value: DNObject; provider: DNIFormatProvider): Int16; overload;
    {class} function ToInt16(value: Boolean): Int16; overload;
    {class} function ToInt16(value: Char): Int16; overload;
    {class} function ToInt16(value: SByte): Int16; overload;
    {class} function ToInt16(value: Byte): Int16; overload;
    {class} function ToInt16(value: UInt16): Int16; overload;
    {class} function ToInt16(value: Int32): Int16; overload;
    {class} function ToInt16(value: UInt32): Int16; overload;
    {class} function ToInt16(value: Int16): Int16; overload;
    {class} function ToInt16(value: Int64): Int16; overload;
    {class} function ToInt16(value: UInt64): Int16; overload;
    {class} function ToInt16(value: Single): Int16; overload;
    {class} function ToInt16(value: Double): Int16; overload;
    {class} function ToInt16(value: DNDecimal): Int16; overload;
    {class} function ToInt16(value: string): Int16; overload;
    {class} function ToInt16(value: string; provider: DNIFormatProvider): Int16; overload;
    {class} function ToInt16(value: DNDateTime): Int16; overload;
    {class} function ToUInt16(value: DNObject): UInt16; overload;
    {class} function ToUInt16(value: DNObject; provider: DNIFormatProvider): UInt16; overload;
    {class} function ToUInt16(value: Boolean): UInt16; overload;
    {class} function ToUInt16(value: Char): UInt16; overload;
    {class} function ToUInt16(value: SByte): UInt16; overload;
    {class} function ToUInt16(value: Byte): UInt16; overload;
    {class} function ToUInt16(value: Int16): UInt16; overload;
    {class} function ToUInt16(value: Int32): UInt16; overload;
    {class} function ToUInt16(value: UInt16): UInt16; overload;
    {class} function ToUInt16(value: UInt32): UInt16; overload;
    {class} function ToUInt16(value: Int64): UInt16; overload;
    {class} function ToUInt16(value: UInt64): UInt16; overload;
    {class} function ToUInt16(value: Single): UInt16; overload;
    {class} function ToUInt16(value: Double): UInt16; overload;
    {class} function ToUInt16(value: DNDecimal): UInt16; overload;
    {class} function ToUInt16(value: string): UInt16; overload;
    {class} function ToUInt16(value: string; provider: DNIFormatProvider): UInt16; overload;
    {class} function ToUInt16(value: DNDateTime): UInt16; overload;
    {class} function ToInt32(value: DNObject): Int32; overload;
    {class} function ToInt32(value: DNObject; provider: DNIFormatProvider): Int32; overload;
    {class} function ToInt32(value: Boolean): Int32; overload;
    {class} function ToInt32(value: Char): Int32; overload;
    {class} function ToInt32(value: SByte): Int32; overload;
    {class} function ToInt32(value: Byte): Int32; overload;
    {class} function ToInt32(value: Int16): Int32; overload;
    {class} function ToInt32(value: UInt16): Int32; overload;
    {class} function ToInt32(value: UInt32): Int32; overload;
    {class} function ToInt32(value: Int32): Int32; overload;
    {class} function ToInt32(value: Int64): Int32; overload;
    {class} function ToInt32(value: UInt64): Int32; overload;
    {class} function ToInt32(value: Single): Int32; overload;
    {class} function ToInt32(value: Double): Int32; overload;
    {class} function ToInt32(value: DNDecimal): Int32; overload;
    {class} function ToInt32(value: string): Int32; overload;
    {class} function ToInt32(value: string; provider: DNIFormatProvider): Int32; overload;
    {class} function ToInt32(value: DNDateTime): Int32; overload;
    {class} function ToUInt32(value: DNObject): UInt32; overload;
    {class} function ToUInt32(value: DNObject; provider: DNIFormatProvider): UInt32; overload;
    {class} function ToUInt32(value: Boolean): UInt32; overload;
    {class} function ToUInt32(value: Char): UInt32; overload;
    {class} function ToUInt32(value: SByte): UInt32; overload;
    {class} function ToUInt32(value: Byte): UInt32; overload;
    {class} function ToUInt32(value: Int16): UInt32; overload;
    {class} function ToUInt32(value: UInt16): UInt32; overload;
    {class} function ToUInt32(value: Int32): UInt32; overload;
    {class} function ToUInt32(value: UInt32): UInt32; overload;
    {class} function ToUInt32(value: Int64): UInt32; overload;
    {class} function ToUInt32(value: UInt64): UInt32; overload;
    {class} function ToUInt32(value: Single): UInt32; overload;
    {class} function ToUInt32(value: Double): UInt32; overload;
    {class} function ToUInt32(value: DNDecimal): UInt32; overload;
    {class} function ToUInt32(value: string): UInt32; overload;
    {class} function ToUInt32(value: string; provider: DNIFormatProvider): UInt32; overload;
    {class} function ToUInt32(value: DNDateTime): UInt32; overload;
    {class} function ToInt64(value: DNObject): Int64; overload;
    {class} function ToInt64(value: DNObject; provider: DNIFormatProvider): Int64; overload;
    {class} function ToInt64(value: Boolean): Int64; overload;
    {class} function ToInt64(value: Char): Int64; overload;
    {class} function ToInt64(value: SByte): Int64; overload;
    {class} function ToInt64(value: Byte): Int64; overload;
    {class} function ToInt64(value: Int16): Int64; overload;
    {class} function ToInt64(value: UInt16): Int64; overload;
    {class} function ToInt64(value: Int32): Int64; overload;
    {class} function ToInt64(value: UInt32): Int64; overload;
    {class} function ToInt64(value: UInt64): Int64; overload;
    {class} function ToInt64(value: Int64): Int64; overload;
    {class} function ToInt64(value: Single): Int64; overload;
    {class} function ToInt64(value: Double): Int64; overload;
    {class} function ToInt64(value: DNDecimal): Int64; overload;
    {class} function ToInt64(value: string): Int64; overload;
    {class} function ToInt64(value: string; provider: DNIFormatProvider): Int64; overload;
    {class} function ToInt64(value: DNDateTime): Int64; overload;
    {class} function ToUInt64(value: DNObject): UInt64; overload;
    {class} function ToUInt64(value: DNObject; provider: DNIFormatProvider): UInt64; overload;
    {class} function ToUInt64(value: Boolean): UInt64; overload;
    {class} function ToUInt64(value: Char): UInt64; overload;
    {class} function ToUInt64(value: SByte): UInt64; overload;
    {class} function ToUInt64(value: Byte): UInt64; overload;
    {class} function ToUInt64(value: Int16): UInt64; overload;
    {class} function ToUInt64(value: UInt16): UInt64; overload;
    {class} function ToUInt64(value: Int32): UInt64; overload;
    {class} function ToUInt64(value: UInt32): UInt64; overload;
    {class} function ToUInt64(value: Int64): UInt64; overload;
    {class} function ToUInt64(value: UInt64): UInt64; overload;
    {class} function ToUInt64(value: Single): UInt64; overload;
    {class} function ToUInt64(value: Double): UInt64; overload;
    {class} function ToUInt64(value: DNDecimal): UInt64; overload;
    {class} function ToUInt64(value: string): UInt64; overload;
    {class} function ToUInt64(value: string; provider: DNIFormatProvider): UInt64; overload;
    {class} function ToUInt64(value: DNDateTime): UInt64; overload;
    {class} function ToSingle(value: DNObject): Single; overload;
    {class} function ToSingle(value: DNObject; provider: DNIFormatProvider): Single; overload;
    {class} function ToSingle(value: SByte): Single; overload;
    {class} function ToSingle(value: Byte): Single; overload;
    {class} function ToSingle(value: Char): Single; overload;
    {class} function ToSingle(value: Int16): Single; overload;
    {class} function ToSingle(value: UInt16): Single; overload;
    {class} function ToSingle(value: Int32): Single; overload;
    {class} function ToSingle(value: UInt32): Single; overload;
    {class} function ToSingle(value: Int64): Single; overload;
    {class} function ToSingle(value: UInt64): Single; overload;
    {class} function ToSingle(value: Single): Single; overload;
    {class} function ToSingle(value: Double): Single; overload;
    {class} function ToSingle(value: DNDecimal): Single; overload;
    {class} function ToSingle(value: string): Single; overload;
    {class} function ToSingle(value: string; provider: DNIFormatProvider): Single; overload;
    {class} function ToSingle(value: Boolean): Single; overload;
    {class} function ToSingle(value: DNDateTime): Single; overload;
    {class} function ToDouble(value: DNObject): Double; overload;
    {class} function ToDouble(value: DNObject; provider: DNIFormatProvider): Double; overload;
    {class} function ToDouble(value: SByte): Double; overload;
    {class} function ToDouble(value: Byte): Double; overload;
    {class} function ToDouble(value: Int16): Double; overload;
    {class} function ToDouble(value: Char): Double; overload;
    {class} function ToDouble(value: UInt16): Double; overload;
    {class} function ToDouble(value: Int32): Double; overload;
    {class} function ToDouble(value: UInt32): Double; overload;
    {class} function ToDouble(value: Int64): Double; overload;
    {class} function ToDouble(value: UInt64): Double; overload;
    {class} function ToDouble(value: Single): Double; overload;
    {class} function ToDouble(value: Double): Double; overload;
    {class} function ToDouble(value: DNDecimal): Double; overload;
    {class} function ToDouble(value: string): Double; overload;
    {class} function ToDouble(value: string; provider: DNIFormatProvider): Double; overload;
    {class} function ToDouble(value: Boolean): Double; overload;
    {class} function ToDouble(value: DNDateTime): Double; overload;
    {class} function ToDecimal(value: DNObject): DNDecimal; overload;
    {class} function ToDecimal(value: DNObject; provider: DNIFormatProvider): DNDecimal; overload;
    {class} function ToDecimal(value: SByte): DNDecimal; overload;
    {class} function ToDecimal(value: Byte): DNDecimal; overload;
    {class} function ToDecimal(value: Char): DNDecimal; overload;
    {class} function ToDecimal(value: Int16): DNDecimal; overload;
    {class} function ToDecimal(value: UInt16): DNDecimal; overload;
    {class} function ToDecimal(value: Int32): DNDecimal; overload;
    {class} function ToDecimal(value: UInt32): DNDecimal; overload;
    {class} function ToDecimal(value: Int64): DNDecimal; overload;
    {class} function ToDecimal(value: UInt64): DNDecimal; overload;
    {class} function ToDecimal(value: Single): DNDecimal; overload;
    {class} function ToDecimal(value: Double): DNDecimal; overload;
    {class} function ToDecimal(value: string): DNDecimal; overload;
    {class} function ToDecimal(value: string; provider: DNIFormatProvider): DNDecimal; overload;
    {class} function ToDecimal(value: DNDecimal): DNDecimal; overload;
    {class} function ToDecimal(value: Boolean): DNDecimal; overload;
    {class} function ToDecimal(value: DNDateTime): DNDecimal; overload;
    {class} function ToDateTime(value: DNDateTime): DNDateTime; overload;
    {class} function ToDateTime(value: DNObject): DNDateTime; overload;
    {class} function ToDateTime(value: DNObject; provider: DNIFormatProvider): DNDateTime; overload;
    {class} function ToDateTime(value: string): DNDateTime; overload;
    {class} function ToDateTime(value: string; provider: DNIFormatProvider): DNDateTime; overload;
    {class} function ToDateTime(value: SByte): DNDateTime; overload;
    {class} function ToDateTime(value: Byte): DNDateTime; overload;
    {class} function ToDateTime(value: Int16): DNDateTime; overload;
    {class} function ToDateTime(value: UInt16): DNDateTime; overload;
    {class} function ToDateTime(value: Int32): DNDateTime; overload;
    {class} function ToDateTime(value: UInt32): DNDateTime; overload;
    {class} function ToDateTime(value: Int64): DNDateTime; overload;
    {class} function ToDateTime(value: UInt64): DNDateTime; overload;
    {class} function ToDateTime(value: Boolean): DNDateTime; overload;
    {class} function ToDateTime(value: Char): DNDateTime; overload;
    {class} function ToDateTime(value: Single): DNDateTime; overload;
    {class} function ToDateTime(value: Double): DNDateTime; overload;
    {class} function ToDateTime(value: DNDecimal): DNDateTime; overload;
    {class} function ToString(value: DNObject): string; overload;
    {class} function ToString(value: DNObject; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: Boolean): string; overload;
    {class} function ToString(value: Boolean; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: Char): string; overload;
    {class} function ToString(value: Char; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: SByte): string; overload;
    {class} function ToString(value: SByte; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: Byte): string; overload;
    {class} function ToString(value: Byte; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: Int16): string; overload;
    {class} function ToString(value: Int16; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: UInt16): string; overload;
    {class} function ToString(value: UInt16; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: Int32): string; overload;
    {class} function ToString(value: Int32; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: UInt32): string; overload;
    {class} function ToString(value: UInt32; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: Int64): string; overload;
    {class} function ToString(value: Int64; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: UInt64): string; overload;
    {class} function ToString(value: UInt64; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: Single): string; overload;
    {class} function ToString(value: Single; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: Double): string; overload;
    {class} function ToString(value: Double; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: DNDecimal): string; overload;
    {class} function ToString(value: DNDecimal; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: DNDateTime): string; overload;
    {class} function ToString(value: DNDateTime; provider: DNIFormatProvider): string; overload;
    {class} function ToString(value: string): string; overload;
    {class} function ToString(value: string; provider: DNIFormatProvider): string; overload;
    {class} function ToByte(value: string; fromBase: Int32): Byte; overload;
    {class} function ToSByte(value: string; fromBase: Int32): SByte; overload;
    {class} function ToInt16(value: string; fromBase: Int32): Int16; overload;
    {class} function ToUInt16(value: string; fromBase: Int32): UInt16; overload;
    {class} function ToInt32(value: string; fromBase: Int32): Int32; overload;
    {class} function ToUInt32(value: string; fromBase: Int32): UInt32; overload;
    {class} function ToInt64(value: string; fromBase: Int32): Int64; overload;
    {class} function ToUInt64(value: string; fromBase: Int32): UInt64; overload;
    {class} function ToString(value: Byte; toBase: Int32): string; overload;
    {class} function ToString(value: Int16; toBase: Int32): string; overload;
    {class} function ToString(value: Int32; toBase: Int32): string; overload;
    {class} function ToString(value: Int64; toBase: Int32): string; overload;
    {class} function ToBase64String(inArray: TArray<Byte>): string; overload;
    {class} function ToBase64String(inArray: TArray<Byte>; options: DNBase64FormattingOptions): string; overload;
    {class} function ToBase64String(inArray: TArray<Byte>; offset: Int32; length: Int32): string; overload;
    {class} function ToBase64String(inArray: TArray<Byte>; offset: Int32; length: Int32; options: DNBase64FormattingOptions): string; overload;
    {class} function ToBase64String(bytes: DNReadOnlySpan<Byte>; options: DNBase64FormattingOptions): string; overload;
    {class} function ToBase64CharArray(inArray: TArray<Byte>; offsetIn: Int32; length: Int32; outArray: TArray<Char>; offsetOut: Int32): Int32; overload;
    {class} function ToBase64CharArray(inArray: TArray<Byte>; offsetIn: Int32; length: Int32; outArray: TArray<Char>; offsetOut: Int32; options: DNBase64FormattingOptions): Int32; overload;
    {class} function TryToBase64Chars(bytes: DNReadOnlySpan<Byte>; chars: DNSpan<Char>; out charsWritten: Int32; options: DNBase64FormattingOptions): Boolean;
    {class} function FromBase64String(s: string): TArray<Byte>;
    {class} function TryFromBase64String(s: string; bytes: DNSpan<Byte>; out bytesWritten: Int32): Boolean;
    {class} function TryFromBase64Chars(chars: DNReadOnlySpan<Char>; bytes: DNSpan<Byte>; out bytesWritten: Int32): Boolean;
    {class} function FromBase64CharArray(inArray: TArray<Char>; offset: Int32; length: Int32): TArray<Byte>;

  end;

  [DNTypeName('System.Convert')]
  DNConvert = interface(DNObject)
  ['{18877722-4B15-379C-B561-064F2D199377}']
  { methods } 

    function ToString: string; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNConvert = class(TDNGenericImport<DNConvertClass, DNConvert>) end;

  //-------------namespace: System----------------
  DNDBNullClass = interface(DNObjectClass)
  ['{DA68CC0C-CC51-5476-8412-225C0149768A}']
  { static fields getter & setter } 

   function __fakeFieldGet_Value: DNDBNull;

  { static fields } 

    {class} property Value: DNDBNull read __fakeFieldGet_Value;

  end;

  [DNTypeName('System.DBNull')]
  DNDBNull = interface(DNISerializable)
  ['{DC8DF18A-E0BB-39DC-875F-0ADA0005F0FB}']
  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function GetTypeCode: DNTypeCode;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNDBNull = class(TDNGenericImport<DNDBNullClass, DNDBNull>) end;

  //-------------namespace: System----------------
  DNDelegateClass = interface(DNObjectClass)
  ['{9DCCFF83-A7BD-5E0B-8B5B-361D78DAFC32}']
  { static methods } 

    {class} function Combine(a: DNDelegate; b: DNDelegate): DNDelegate; overload;
    {class} function Combine(delegates: TArray<DNDelegate>): DNDelegate; overload;
    {class} function Remove(source: DNDelegate; value: DNDelegate): DNDelegate;
    {class} function RemoveAll(source: DNDelegate; value: DNDelegate): DNDelegate;
    {class} function CreateDelegate(&type: DNType; target: DNObject; method: string): DNDelegate; overload;
    {class} function CreateDelegate(&type: DNType; target: DNObject; method: string; ignoreCase: Boolean): DNDelegate; overload;
    {class} function CreateDelegate(&type: DNType; target: DNObject; method: string; ignoreCase: Boolean; throwOnBindFailure: Boolean): DNDelegate; overload;
    {class} function CreateDelegate(&type: DNType; target: DNType; method: string): DNDelegate; overload;
    {class} function CreateDelegate(&type: DNType; target: DNType; method: string; ignoreCase: Boolean): DNDelegate; overload;
    {class} function CreateDelegate(&type: DNType; target: DNType; method: string; ignoreCase: Boolean; throwOnBindFailure: Boolean): DNDelegate; overload;
    {class} function CreateDelegate(&type: DNType; method: DNMethodInfo; throwOnBindFailure: Boolean): DNDelegate; overload;
    {class} function CreateDelegate(&type: DNType; firstArgument: DNObject; method: DNMethodInfo): DNDelegate; overload;
    {class} function CreateDelegate(&type: DNType; firstArgument: DNObject; method: DNMethodInfo; throwOnBindFailure: Boolean): DNDelegate; overload;
    {class} function CreateDelegate(&type: DNType; method: DNMethodInfo): DNDelegate; overload;

  end;

  [DNTypeName('System.Delegate')]
  DNDelegate = interface(DNICloneable)
  ['{1554B2C6-E1EA-3BB7-8EEE-C95A06569294}']
  { getters & setters } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetInvocationList: TArray<DNDelegate>;
    function Clone: DNObject;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNDelegate = class(TDNGenericImport<DNDelegateClass, DNDelegate>) end;

  //-------------namespace: System----------------
  DNMulticastDelegateClass = interface(DNDelegateClass)
  ['{F6897770-4266-59FA-96C6-8A4E21A76F92}']
  end;

  [DNTypeName('System.MulticastDelegate')]
  DNMulticastDelegate = interface(DNDelegate)
  ['{57A1FDAD-7031-3AC7-A5DF-1F06D73C4FDB}']
  { getters & setters } 

    function get_Method: DNMethodInfo;
    function get_Target: DNObject;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(obj: DNObject): Boolean;
    function GetInvocationList: TArray<DNDelegate>;
    function GetHashCode: Int32;
    function DynamicInvoke(args: TArray<DNObject>): DNObject;
    function Clone: DNObject;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Method: DNMethodInfo read get_Method;
    property Target: DNObject read get_Target;
  end;

  TDNMulticastDelegate = class(TDNGenericImport<DNMulticastDelegateClass, DNMulticastDelegate>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractClass = interface(DNObjectClass)
  ['{D63C31A7-6A92-5413-AEAD-A4525CA8A5AE}']
  { static methods } 

    {class} procedure Assume(condition: Boolean); overload;
    {class} procedure Assume(condition: Boolean; userMessage: string); overload;
    {class} procedure Assert(condition: Boolean); overload;
    {class} procedure Assert(condition: Boolean; userMessage: string); overload;
    {class} procedure &Requires(condition: Boolean); overload;
    {class} procedure &Requires(condition: Boolean; userMessage: string); overload;
    {class} procedure Ensures(condition: Boolean); overload;
    {class} procedure Ensures(condition: Boolean; userMessage: string); overload;
    {class} procedure Invariant(condition: Boolean); overload;
    {class} procedure Invariant(condition: Boolean; userMessage: string); overload;
    {class} function ForAll(fromInclusive: Int32; toExclusive: Int32; predicate: DNPredicate<Int32>): Boolean; overload;
    {class} function Exists(fromInclusive: Int32; toExclusive: Int32; predicate: DNPredicate<Int32>): Boolean; overload;
    {class} procedure EndContractBlock;

  end;

  [DNTypeName('System.Diagnostics.Contracts.Contract')]
  DNContract = interface(DNObject)
  ['{2986A187-E41C-3409-937B-EFAB0728FB6D}']
  { events } 

    {class} procedure add_ContractFailed(value: DNEventHandler<DNContractFailedEventArgs>);
    {class} procedure remove_ContractFailed(value: DNEventHandler<DNContractFailedEventArgs>);

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNContract = class(TDNGenericImport<DNContractClass, DNContract>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebugClass = interface(DNObjectClass)
  ['{F4D93639-462D-5342-B187-1033B26FBADF}']
  { static getter & setter } 

    {class} function get_AutoFlush: Boolean;
    {class} procedure set_AutoFlush(value: Boolean);
    {class} function get_IndentLevel: Int32;
    {class} procedure set_IndentLevel(value: Int32);
    {class} function get_IndentSize: Int32;
    {class} procedure set_IndentSize(value: Int32);

  { static methods } 

    {class} procedure Close;
    {class} procedure Flush;
    {class} procedure Indent;
    {class} procedure Unindent;
    {class} procedure Print(message: string); overload;
    {class} procedure Print(format: string; args: TArray<DNObject>); overload;
    {class} procedure Assert(condition: Boolean); overload;
    {class} procedure Assert(condition: Boolean; message: string); overload;
    {class} procedure Assert(condition: Boolean; message: string; detailMessage: string); overload;
    {class} procedure Fail(message: string); overload;
    {class} procedure Fail(message: string; detailMessage: string); overload;
    {class} procedure Assert(condition: Boolean; message: string; detailMessageFormat: string; args: TArray<DNObject>); overload;
    {class} procedure WriteLine(message: string); overload;
    {class} procedure Write(message: string); overload;
    {class} procedure WriteLine(value: DNObject); overload;
    {class} procedure WriteLine(value: DNObject; category: string); overload;
    {class} procedure WriteLine(format: string; args: TArray<DNObject>); overload;
    {class} procedure WriteLine(message: string; category: string); overload;
    {class} procedure Write(value: DNObject); overload;
    {class} procedure Write(message: string; category: string); overload;
    {class} procedure Write(value: DNObject; category: string); overload;
    {class} procedure WriteIf(condition: Boolean; message: string); overload;
    {class} procedure WriteIf(condition: Boolean; value: DNObject); overload;
    {class} procedure WriteIf(condition: Boolean; message: string; category: string); overload;
    {class} procedure WriteIf(condition: Boolean; value: DNObject; category: string); overload;
    {class} procedure WriteLineIf(condition: Boolean; value: DNObject); overload;
    {class} procedure WriteLineIf(condition: Boolean; value: DNObject; category: string); overload;
    {class} procedure WriteLineIf(condition: Boolean; message: string); overload;
    {class} procedure WriteLineIf(condition: Boolean; message: string; category: string); overload;

  { static propertys } 

    {class} property AutoFlush: Boolean read get_AutoFlush write set_AutoFlush;
    {class} property IndentLevel: Int32 read get_IndentLevel write set_IndentLevel;
    {class} property IndentSize: Int32 read get_IndentSize write set_IndentSize;
  end;

  [DNTypeName('System.Diagnostics.Debug')]
  DNDebug = interface(DNObject)
  ['{F08456B8-BD19-3C03-A90D-F70615CB7E9A}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNDebug = class(TDNGenericImport<DNDebugClass, DNDebug>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebuggerClass = interface(DNObjectClass)
  ['{075A1C5D-DF3F-5A21-949E-D8FB3AA5A937}']
  { static getter & setter } 

    {class} function get_IsAttached: Boolean;

  { static fields getter & setter } 

   function __fakeFieldGet_DefaultCategory: string;

  { static fields } 

    {class} property DefaultCategory: string read __fakeFieldGet_DefaultCategory;

  { static methods } 

    {class} procedure Break;
    {class} function Launch: Boolean;
    {class} procedure NotifyOfCrossThreadDependency;
    {class} procedure Log(level: Int32; category: string; message: string);
    {class} function IsLogging: Boolean;

  { static propertys } 

    {class} property IsAttached: Boolean read get_IsAttached;
  end;

  [DNTypeName('System.Diagnostics.Debugger')]
  DNDebugger = interface(DNObject)
  ['{6B3FAD60-89F8-36D7-B1BF-80288577EE99}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNDebugger = class(TDNGenericImport<DNDebuggerClass, DNDebugger>) end;

  //-------------namespace: System.Diagnostics----------------
  DNStackFrameClass = interface(DNObjectClass)
  ['{57C0C5B1-C05E-5366-8D5F-D343AC9FFF5D}']
  { constructors } 

    {class} function init: DNStackFrame; overload;
    {class} function init(fNeedFileInfo: Boolean): DNStackFrame; overload;
    {class} function init(skipFrames: Int32): DNStackFrame; overload;
    {class} function init(skipFrames: Int32; fNeedFileInfo: Boolean): DNStackFrame; overload;
    {class} function init(fileName: string; lineNumber: Int32): DNStackFrame; overload;
    {class} function init(fileName: string; lineNumber: Int32; colNumber: Int32): DNStackFrame; overload;

  end;

  [DNTypeName('System.Diagnostics.StackFrame')]
  DNStackFrame = interface(DNObject)
  ['{0A5623D1-55FC-3A97-A9E8-32BF79A9E1B8}']
  { methods } 

    function GetMethod: DNMethodBase;
    function GetNativeOffset: Int32;
    function GetILOffset: Int32;
    function GetFileName: string;
    function GetFileLineNumber: Int32;
    function GetFileColumnNumber: Int32;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNStackFrame = class(TDNGenericImport<DNStackFrameClass, DNStackFrame>)
  public const
   OFFSET_UNKNOWN = -1;
  end;

  //-------------namespace: System.Diagnostics----------------
  DNStackTraceClass = interface(DNObjectClass)
  ['{8CF99063-8A4D-57F9-9C9B-868FEA79AE49}']
  { constructors } 

    {class} function init: DNStackTrace; overload;
    {class} function init(fNeedFileInfo: Boolean): DNStackTrace; overload;
    {class} function init(skipFrames: Int32): DNStackTrace; overload;
    {class} function init(skipFrames: Int32; fNeedFileInfo: Boolean): DNStackTrace; overload;
    {class} function init(e: DNException): DNStackTrace; overload;
    {class} function init(e: DNException; fNeedFileInfo: Boolean): DNStackTrace; overload;
    {class} function init(e: DNException; skipFrames: Int32): DNStackTrace; overload;
    {class} function init(e: DNException; skipFrames: Int32; fNeedFileInfo: Boolean): DNStackTrace; overload;
    {class} function init(frame: DNStackFrame): DNStackTrace; overload;

  end;

  [DNTypeName('System.Diagnostics.StackTrace')]
  DNStackTrace = interface(DNObject)
  ['{70C18407-4463-3892-BB8A-CDA22501F24F}']
  { getters & setters } 

    function get_FrameCount: Int32;

  { methods } 

    function GetFrame(index: Int32): DNStackFrame;
    function GetFrames: TArray<DNStackFrame>;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property FrameCount: Int32 read get_FrameCount;
  end;

  TDNStackTrace = class(TDNGenericImport<DNStackTraceClass, DNStackTrace>)
  public const
   METHODS_TO_SKIP = 0;
  end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventListenerClass = interface(DNObjectClass)
  ['{A0E4F10D-0F87-5209-94E6-218957CF2688}']
  { constructors } 

    {class} function init: DNEventListener;

  { static methods } 

    {class} function EventSourceIndex(eventSource: DNEventSource): Int32;

  end;

  [DNTypeName('System.Diagnostics.Tracing.EventListener')]
  DNEventListener = interface(DNIDisposable)
  ['{C58D0488-EC67-342F-ACF8-49C1A3C121BA}']
  { events } 

    procedure add_EventSourceCreated(value: DNEventHandler<DNEventSourceCreatedEventArgs>);
    procedure remove_EventSourceCreated(value: DNEventHandler<DNEventSourceCreatedEventArgs>);
    procedure add_EventWritten(value: DNEventHandler<DNEventWrittenEventArgs>);
    procedure remove_EventWritten(value: DNEventHandler<DNEventWrittenEventArgs>);

  { methods } 

    procedure Dispose;
    procedure EnableEvents(eventSource: DNEventSource; level: DNEventLevel); overload;
    procedure EnableEvents(eventSource: DNEventSource; level: DNEventLevel; matchAnyKeyword: DNEventKeywords); overload;
    procedure EnableEvents(eventSource: DNEventSource; level: DNEventLevel; matchAnyKeyword: DNEventKeywords; arguments: DNIDictionary<string, string>); overload;
    procedure DisableEvents(eventSource: DNEventSource);
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNEventListener = class(TDNGenericImport<DNEventListenerClass, DNEventListener>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventSourceClass = interface(DNObjectClass)
  ['{6C8EE1CB-5065-5ED8-BBED-AAF03C31C4CE}']
  { static getter & setter } 

    {class} function get_CurrentThreadActivityId: DNGuid;

  { constructors } 

    {class} function init(eventSourceName: string): DNEventSource; overload;
    {class} function init(eventSourceName: string; config: DNEventSourceSettings): DNEventSource; overload;
    {class} function init(eventSourceName: string; config: DNEventSourceSettings; traits: TArray<string>): DNEventSource; overload;

  { static methods } 

    {class} procedure SetCurrentThreadActivityId(activityId: DNGuid); overload;
    {class} procedure SetCurrentThreadActivityId(activityId: DNGuid; out oldActivityThatWillContinue: DNGuid); overload;
    {class} function GetGuid(eventSourceType: DNType): DNGuid;
    {class} function GetName(eventSourceType: DNType): string;
    {class} function GenerateManifest(eventSourceType: DNType; assemblyPathToIncludeInManifest: string): string; overload;
    {class} function GenerateManifest(eventSourceType: DNType; assemblyPathToIncludeInManifest: string; flags: DNEventManifestOptions): string; overload;
    {class} function GetSources: DNIEnumerable<DNEventSource>;
    {class} procedure SendCommand(eventSource: DNEventSource; command: DNEventCommand; commandArguments: DNIDictionary<string, string>);

  { static propertys } 

    {class} property CurrentThreadActivityId: DNGuid read get_CurrentThreadActivityId;
  end;

  [DNTypeName('System.Diagnostics.Tracing.EventSource')]
  DNEventSource = interface(DNIDisposable)
  ['{A7B70863-7D7F-3134-A706-CCB6F18B3AE9}']
  { getters & setters } 

    function get_Name: string;
    function get_Guid: DNGuid;
    function get_Settings: DNEventSourceSettings;
    function get_ConstructionException: DNException;

  { events } 

    procedure add_EventCommandExecuted(value: DNEventHandler<DNEventCommandEventArgs>);
    procedure remove_EventCommandExecuted(value: DNEventHandler<DNEventCommandEventArgs>);

  { methods } 

    function IsEnabled: Boolean; overload;
    function IsEnabled(level: DNEventLevel; keywords: DNEventKeywords): Boolean; overload;
    function IsEnabled(level: DNEventLevel; keywords: DNEventKeywords; channel: DNEventChannel): Boolean; overload;
    function GetTrait(key: string): string;
    function ToString: string;
    procedure Dispose;
    procedure Write(eventName: string); overload;
    procedure Write(eventName: string; options: DNEventSourceOptions); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Name: string read get_Name;
    property Guid: DNGuid read get_Guid;
    property Settings: DNEventSourceSettings read get_Settings;
    property ConstructionException: DNException read get_ConstructionException;
  end;

  TDNEventSource = class(TDNGenericImport<DNEventSourceClass, DNEventSource>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNTraceLoggingEventTypesClass = interface(DNObjectClass)
  ['{C8F8F86A-9D66-5C9B-829D-358B00755BB4}']
  end;

  [DNTypeName('System.Diagnostics.Tracing.TraceLoggingEventTypes')]
  DNTraceLoggingEventTypes = interface(DNObject)
  ['{33C0CFE4-21B8-3747-A240-837B354CB9FF}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNTraceLoggingEventTypes = class(TDNGenericImport<DNTraceLoggingEventTypesClass, DNTraceLoggingEventTypes>) end;

  //-------------namespace: System----------------
  DNEventArgsClass = interface(DNObjectClass)
  ['{9891227B-80F7-5E19-9C8D-56358401C184}']
  { constructors } 

    {class} function init: DNEventArgs;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNEventArgs;

  { static fields } 

    {class} property Empty: DNEventArgs read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.EventArgs')]
  DNEventArgs = interface(DNObject)
  ['{3D9F7068-7A72-3EFC-8A7A-29747CCBAB43}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNEventArgs = class(TDNGenericImport<DNEventArgsClass, DNEventArgs>) end;

  //-------------namespace: System----------------
  DNAssemblyLoadEventArgsClass = interface(DNEventArgsClass)
  ['{CAD64C21-30C4-516E-BFC1-9A034E65D26B}']
  { constructors } 

    {class} function init(loadedAssembly: DNAssembly): DNAssemblyLoadEventArgs;

  end;

  [DNTypeName('System.AssemblyLoadEventArgs')]
  DNAssemblyLoadEventArgs = interface(DNEventArgs)
  ['{B28B90A3-AC97-33CF-8B66-B17EA54F30FB}']
  { getters & setters } 

    function get_LoadedAssembly: DNAssembly;

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property LoadedAssembly: DNAssembly read get_LoadedAssembly;
  end;

  TDNAssemblyLoadEventArgs = class(TDNGenericImport<DNAssemblyLoadEventArgsClass, DNAssemblyLoadEventArgs>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractFailedEventArgsClass = interface(DNEventArgsClass)
  ['{83495623-50A1-5C59-B60F-76CCA47429EF}']
  { constructors } 

    {class} function init(failureKind: DNContractFailureKind; message: string; condition: string; originalException: DNException): DNContractFailedEventArgs;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractFailedEventArgs')]
  DNContractFailedEventArgs = interface(DNEventArgs)
  ['{D8D45C24-41B0-3350-898B-00564FB9FCFD}']
  { getters & setters } 

    function get_Message: string;
    function get_Condition: string;
    function get_FailureKind: DNContractFailureKind;
    function get_OriginalException: DNException;
    function get_Handled: Boolean;
    function get_Unwind: Boolean;

  { methods } 

    procedure SetHandled;
    procedure SetUnwind;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Message: string read get_Message;
    property Condition: string read get_Condition;
    property FailureKind: DNContractFailureKind read get_FailureKind;
    property OriginalException: DNException read get_OriginalException;
    property Handled: Boolean read get_Handled;
    property Unwind: Boolean read get_Unwind;
  end;

  TDNContractFailedEventArgs = class(TDNGenericImport<DNContractFailedEventArgsClass, DNContractFailedEventArgs>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventCommandEventArgsClass = interface(DNEventArgsClass)
  ['{F313F540-36E5-5867-AC86-F6BAD4020C80}']
  end;

  [DNTypeName('System.Diagnostics.Tracing.EventCommandEventArgs')]
  DNEventCommandEventArgs = interface(DNEventArgs)
  ['{2E318306-9596-3474-9831-693B33C12B77}']
  { getters & setters } 

    function get_Command: DNEventCommand;
    function get_Arguments: DNIDictionary<string, string>;

  { methods } 

    function EnableEvent(eventId: Int32): Boolean;
    function DisableEvent(eventId: Int32): Boolean;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Command: DNEventCommand read get_Command;
    property Arguments: DNIDictionary<string, string> read get_Arguments;
  end;

  TDNEventCommandEventArgs = class(TDNGenericImport<DNEventCommandEventArgsClass, DNEventCommandEventArgs>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventSourceCreatedEventArgsClass = interface(DNEventArgsClass)
  ['{F461F6C9-FAD1-58CB-8401-B574726864E6}']
  { constructors } 

    {class} function init: DNEventSourceCreatedEventArgs;

  end;

  [DNTypeName('System.Diagnostics.Tracing.EventSourceCreatedEventArgs')]
  DNEventSourceCreatedEventArgs = interface(DNEventArgs)
  ['{5D4D9F8D-7EA7-3DD0-BD80-11CB0DCC928E}']
  { getters & setters } 

    function get_EventSource: DNEventSource;

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property EventSource: DNEventSource read get_EventSource;
  end;

  TDNEventSourceCreatedEventArgs = class(TDNGenericImport<DNEventSourceCreatedEventArgsClass, DNEventSourceCreatedEventArgs>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventWrittenEventArgsClass = interface(DNEventArgsClass)
  ['{93D42385-D386-5194-811D-13315C0793F3}']
  end;

  [DNTypeName('System.Diagnostics.Tracing.EventWrittenEventArgs')]
  DNEventWrittenEventArgs = interface(DNEventArgs)
  ['{DD77119B-F6C6-3A0A-94FC-8154D54DE3F8}']
  { getters & setters } 

    function get_EventName: string;
    function get_EventId: Int32;
    function get_ActivityId: DNGuid;
    function get_RelatedActivityId: DNGuid;
    function get_Payload: DNReadOnlyCollection<DNObject>;
    function get_PayloadNames: DNReadOnlyCollection<string>;
    function get_EventSource: DNEventSource;
    function get_Keywords: DNEventKeywords;
    function get_Opcode: DNEventOpcode;
    function get_Task: DNEventTask;
    function get_Tags: DNEventTags;
    function get_Message: string;
    function get_Channel: DNEventChannel;
    function get_Version: Byte;
    function get_Level: DNEventLevel;

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property EventName: string read get_EventName;
    property EventId: Int32 read get_EventId;
    property ActivityId: DNGuid read get_ActivityId;
    property RelatedActivityId: DNGuid read get_RelatedActivityId;
    property Payload: DNReadOnlyCollection<DNObject> read get_Payload;
    property PayloadNames: DNReadOnlyCollection<string> read get_PayloadNames;
    property EventSource: DNEventSource read get_EventSource;
    property Keywords: DNEventKeywords read get_Keywords;
    property Opcode: DNEventOpcode read get_Opcode;
    property Task: DNEventTask read get_Task;
    property Tags: DNEventTags read get_Tags;
    property Message: string read get_Message;
    property Channel: DNEventChannel read get_Channel;
    property Version: Byte read get_Version;
    property Level: DNEventLevel read get_Level;
  end;

  TDNEventWrittenEventArgs = class(TDNGenericImport<DNEventWrittenEventArgsClass, DNEventWrittenEventArgs>) end;

  //-------------namespace: System----------------
  DNResolveEventArgsClass = interface(DNEventArgsClass)
  ['{15600E36-4D7C-505E-8153-262E9AF5D920}']
  { constructors } 

    {class} function init(name: string): DNResolveEventArgs; overload;
    {class} function init(name: string; requestingAssembly: DNAssembly): DNResolveEventArgs; overload;

  end;

  [DNTypeName('System.ResolveEventArgs')]
  DNResolveEventArgs = interface(DNEventArgs)
  ['{F094F5DA-F7AC-3EE5-979E-8FC59D98CE32}']
  { getters & setters } 

    function get_Name: string;
    function get_RequestingAssembly: DNAssembly;

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Name: string read get_Name;
    property RequestingAssembly: DNAssembly read get_RequestingAssembly;
  end;

  TDNResolveEventArgs = class(TDNGenericImport<DNResolveEventArgsClass, DNResolveEventArgs>) end;

  //-------------namespace: System.Runtime.ExceptionServices----------------
  DNFirstChanceExceptionEventArgsClass = interface(DNEventArgsClass)
  ['{C752DCE1-007B-5572-8B95-C85D4AC49DD3}']
  { constructors } 

    {class} function init(exception: DNException): DNFirstChanceExceptionEventArgs;

  end;

  [DNTypeName('System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs')]
  DNFirstChanceExceptionEventArgs = interface(DNEventArgs)
  ['{E9AF68E1-6F99-38BC-87D7-FB7F214AA1D7}']
  { getters & setters } 

    function get_Exception: DNException;

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Exception: DNException read get_Exception;
  end;

  TDNFirstChanceExceptionEventArgs = class(TDNGenericImport<DNFirstChanceExceptionEventArgsClass, DNFirstChanceExceptionEventArgs>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNSafeSerializationEventArgsClass = interface(DNEventArgsClass)
  ['{3A7CC7DD-7370-56CC-ABA2-DAE2B9883B71}']
  end;

  [DNTypeName('System.Runtime.Serialization.SafeSerializationEventArgs')]
  DNSafeSerializationEventArgs = interface(DNEventArgs)
  ['{92A03A10-A26A-3A91-94A0-34C44990B6B9}']
  { getters & setters } 

    function get_StreamingContext: DNStreamingContext;

  { methods } 

    procedure AddSerializedState(serializedState: DNISafeSerializationData);
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property StreamingContext: DNStreamingContext read get_StreamingContext;
  end;

  TDNSafeSerializationEventArgs = class(TDNGenericImport<DNSafeSerializationEventArgsClass, DNSafeSerializationEventArgs>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNUnobservedTaskExceptionEventArgsClass = interface(DNEventArgsClass)
  ['{F4EE6DC1-200F-5CA2-85F5-3752C32F28DD}']
  { constructors } 

    {class} function init(exception: DNAggregateException): DNUnobservedTaskExceptionEventArgs;

  end;

  [DNTypeName('System.Threading.Tasks.UnobservedTaskExceptionEventArgs')]
  DNUnobservedTaskExceptionEventArgs = interface(DNEventArgs)
  ['{CBEE8535-2236-3CD3-A348-970B244C2DC5}']
  { getters & setters } 

    function get_Observed: Boolean;
    function get_Exception: DNAggregateException;

  { methods } 

    procedure SetObserved;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Observed: Boolean read get_Observed;
    property Exception: DNAggregateException read get_Exception;
  end;

  TDNUnobservedTaskExceptionEventArgs = class(TDNGenericImport<DNUnobservedTaskExceptionEventArgsClass, DNUnobservedTaskExceptionEventArgs>) end;

  //-------------namespace: System----------------
  DNUnhandledExceptionEventArgsClass = interface(DNEventArgsClass)
  ['{DE9C777A-DE68-5C77-AB8B-59678FBFCF7C}']
  { constructors } 

    {class} function init(exception: DNObject; isTerminating: Boolean): DNUnhandledExceptionEventArgs;

  end;

  [DNTypeName('System.UnhandledExceptionEventArgs')]
  DNUnhandledExceptionEventArgs = interface(DNEventArgs)
  ['{AE089E5D-711A-3232-960E-B9E074815BCC}']
  { getters & setters } 

    function get_ExceptionObject: DNObject;
    function get_IsTerminating: Boolean;

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property ExceptionObject: DNObject read get_ExceptionObject;
    property IsTerminating: Boolean read get_IsTerminating;
  end;

  TDNUnhandledExceptionEventArgs = class(TDNGenericImport<DNUnhandledExceptionEventArgsClass, DNUnhandledExceptionEventArgs>) end;

  //-------------namespace: System----------------
  DNExceptionClass = interface(DNObjectClass)
  ['{BEB62971-CA8C-5854-89A8-A5B30FC2D51B}']
  { constructors } 

    {class} function init: DNException; overload;
    {class} function init(message: string): DNException; overload;
    {class} function init(message: string; innerException: DNException): DNException; overload;

  end;

  [DNTypeName('System.Exception')]
  DNException = interface(DNISerializable)
  ['{9462C5D2-7AD9-31DF-A7E8-86549D59EF8C}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNException = class(TDNGenericImport<DNExceptionClass, DNException>) end;

  //-------------namespace: System----------------
  DNAggregateExceptionClass = interface(DNExceptionClass)
  ['{FE854D18-E60A-576C-9AF3-9583ADBC1F0D}']
  { constructors } 

    {class} function init: DNAggregateException; overload;
    {class} function init(message: string): DNAggregateException; overload;
    {class} function init(message: string; innerException: DNException): DNAggregateException; overload;
    {class} function init(innerExceptions: DNIEnumerable<DNException>): DNAggregateException; overload;
    {class} function init(innerExceptions: TArray<DNException>): DNAggregateException; overload;
    {class} function init(message: string; innerExceptions: DNIEnumerable<DNException>): DNAggregateException; overload;
    {class} function init(message: string; innerExceptions: TArray<DNException>): DNAggregateException; overload;

  end;

  [DNTypeName('System.AggregateException')]
  DNAggregateException = interface(DNException)
  ['{298C7C21-0F90-3FC4-9863-4F18553F469B}']
  { getters & setters } 

    function get_InnerExceptions: DNReadOnlyCollection<DNException>;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    procedure Handle(predicate: DNFunc<DNException, Boolean>);
    function Flatten: DNAggregateException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property InnerExceptions: DNReadOnlyCollection<DNException> read get_InnerExceptions;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNAggregateException = class(TDNGenericImport<DNAggregateExceptionClass, DNAggregateException>) end;

  //-------------namespace: System----------------
  DNApplicationExceptionClass = interface(DNExceptionClass)
  ['{BA1A931B-A530-57BF-816B-316CFBE4A560}']
  { constructors } 

    {class} function init: DNApplicationException; overload;
    {class} function init(message: string): DNApplicationException; overload;
    {class} function init(message: string; innerException: DNException): DNApplicationException; overload;

  end;

  [DNTypeName('System.ApplicationException')]
  DNApplicationException = interface(DNException)
  ['{E916188D-71AC-315E-AB7F-00C4C2375F7E}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNApplicationException = class(TDNGenericImport<DNApplicationExceptionClass, DNApplicationException>) end;

  //-------------namespace: System.Reflection----------------
  DNInvalidFilterCriteriaExceptionClass = interface(DNApplicationExceptionClass)
  ['{E763C98C-1B5A-5E1B-8F99-69E9471AB4EC}']
  { constructors } 

    {class} function init: DNInvalidFilterCriteriaException; overload;
    {class} function init(message: string): DNInvalidFilterCriteriaException; overload;
    {class} function init(message: string; inner: DNException): DNInvalidFilterCriteriaException; overload;

  end;

  [DNTypeName('System.Reflection.InvalidFilterCriteriaException')]
  DNInvalidFilterCriteriaException = interface(DNApplicationException)
  ['{7145F9D2-C84D-3E98-9002-29502A513E49}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidFilterCriteriaException = class(TDNGenericImport<DNInvalidFilterCriteriaExceptionClass, DNInvalidFilterCriteriaException>) end;

  //-------------namespace: System.Reflection----------------
  DNTargetExceptionClass = interface(DNApplicationExceptionClass)
  ['{32EDBE1D-3A0E-5184-9A0A-9E6B1F89C85A}']
  { constructors } 

    {class} function init: DNTargetException; overload;
    {class} function init(message: string): DNTargetException; overload;
    {class} function init(message: string; inner: DNException): DNTargetException; overload;

  end;

  [DNTypeName('System.Reflection.TargetException')]
  DNTargetException = interface(DNApplicationException)
  ['{B47E0270-8F3E-3EAF-9E4F-0896C41D0310}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTargetException = class(TDNGenericImport<DNTargetExceptionClass, DNTargetException>) end;

  //-------------namespace: System.Reflection----------------
  DNTargetInvocationExceptionClass = interface(DNApplicationExceptionClass)
  ['{8B002DEC-84FB-50AD-ADF7-38AAAEF1E50C}']
  { constructors } 

    {class} function init(inner: DNException): DNTargetInvocationException; overload;
    {class} function init(message: string; inner: DNException): DNTargetInvocationException; overload;

  end;

  [DNTypeName('System.Reflection.TargetInvocationException')]
  DNTargetInvocationException = interface(DNApplicationException)
  ['{E2BA6B9C-18D7-3911-98B1-8DBF45A337D0}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTargetInvocationException = class(TDNGenericImport<DNTargetInvocationExceptionClass, DNTargetInvocationException>) end;

  //-------------namespace: System.Reflection----------------
  DNTargetParameterCountExceptionClass = interface(DNApplicationExceptionClass)
  ['{6F7207C5-74ED-5881-B656-3DBAC8A122AD}']
  { constructors } 

    {class} function init: DNTargetParameterCountException; overload;
    {class} function init(message: string): DNTargetParameterCountException; overload;
    {class} function init(message: string; inner: DNException): DNTargetParameterCountException; overload;

  end;

  [DNTypeName('System.Reflection.TargetParameterCountException')]
  DNTargetParameterCountException = interface(DNApplicationException)
  ['{30A6E797-388A-3313-87FD-F232D2D5A70E}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTargetParameterCountException = class(TDNGenericImport<DNTargetParameterCountExceptionClass, DNTargetParameterCountException>) end;

  //-------------namespace: System.Threading----------------
  DNWaitHandleCannotBeOpenedExceptionClass = interface(DNApplicationExceptionClass)
  ['{D3777728-3186-58ED-9DD0-02E4BAAB4277}']
  { constructors } 

    {class} function init: DNWaitHandleCannotBeOpenedException; overload;
    {class} function init(message: string): DNWaitHandleCannotBeOpenedException; overload;
    {class} function init(message: string; innerException: DNException): DNWaitHandleCannotBeOpenedException; overload;

  end;

  [DNTypeName('System.Threading.WaitHandleCannotBeOpenedException')]
  DNWaitHandleCannotBeOpenedException = interface(DNApplicationException)
  ['{E21AE874-555A-3E8C-9A30-FE487E0FD0E9}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNWaitHandleCannotBeOpenedException = class(TDNGenericImport<DNWaitHandleCannotBeOpenedExceptionClass, DNWaitHandleCannotBeOpenedException>) end;

  //-------------namespace: System.Diagnostics.Contracts----------------
  DNContractExceptionClass = interface(DNExceptionClass)
  ['{0E66EF26-042D-5375-974B-05AC77971406}']
  { constructors } 

    {class} function init(kind: DNContractFailureKind; failure: string; userMessage: string; condition: string; innerException: DNException): DNContractException;

  end;

  [DNTypeName('System.Diagnostics.Contracts.ContractException')]
  DNContractException = interface(DNException)
  ['{FF89A8FB-46B9-35DB-AF46-C25E1084F7FA}']
  { getters & setters } 

    function get_Kind: DNContractFailureKind;
    function get_Failure: string;
    function get_UserMessage: string;
    function get_Condition: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Kind: DNContractFailureKind read get_Kind;
    property Failure: string read get_Failure;
    property UserMessage: string read get_UserMessage;
    property Condition: string read get_Condition;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNContractException = class(TDNGenericImport<DNContractExceptionClass, DNContractException>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventSourceExceptionClass = interface(DNExceptionClass)
  ['{F8204E88-87FB-5FC1-A74B-835345BF06D3}']
  { constructors } 

    {class} function init: DNEventSourceException; overload;
    {class} function init(message: string): DNEventSourceException; overload;
    {class} function init(message: string; innerException: DNException): DNEventSourceException; overload;

  end;

  [DNTypeName('System.Diagnostics.Tracing.EventSourceException')]
  DNEventSourceException = interface(DNException)
  ['{F71A7AF7-5FFB-3C28-BD14-F598558493E4}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNEventSourceException = class(TDNGenericImport<DNEventSourceExceptionClass, DNEventSourceException>) end;

  //-------------namespace: System----------------
  DNInvalidTimeZoneExceptionClass = interface(DNExceptionClass)
  ['{2835AD95-9ACF-5F8A-AA38-575714FA3419}']
  { constructors } 

    {class} function init: DNInvalidTimeZoneException; overload;
    {class} function init(message: string): DNInvalidTimeZoneException; overload;
    {class} function init(message: string; innerException: DNException): DNInvalidTimeZoneException; overload;

  end;

  [DNTypeName('System.InvalidTimeZoneException')]
  DNInvalidTimeZoneException = interface(DNException)
  ['{2543E73C-B4AB-39F5-96CA-590123DA399C}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidTimeZoneException = class(TDNGenericImport<DNInvalidTimeZoneExceptionClass, DNInvalidTimeZoneException>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNRuntimeWrappedExceptionClass = interface(DNExceptionClass)
  ['{E8181A00-CD34-54AB-ABC4-9FAFC5E91F0E}']
  { constructors } 

    {class} function init(thrownObject: DNObject): DNRuntimeWrappedException;

  end;

  [DNTypeName('System.Runtime.CompilerServices.RuntimeWrappedException')]
  DNRuntimeWrappedException = interface(DNException)
  ['{0EDCAEDE-7AEF-3C85-8980-4B6B09BBB294}']
  { getters & setters } 

    function get_WrappedException: DNObject;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property WrappedException: DNObject read get_WrappedException;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNRuntimeWrappedException = class(TDNGenericImport<DNRuntimeWrappedExceptionClass, DNRuntimeWrappedException>) end;

  //-------------namespace: System----------------
  DNSystemExceptionClass = interface(DNExceptionClass)
  ['{CBBB70FF-49A8-58A1-A3FF-D3ECEDCA24A5}']
  { constructors } 

    {class} function init: DNSystemException; overload;
    {class} function init(message: string): DNSystemException; overload;
    {class} function init(message: string; innerException: DNException): DNSystemException; overload;

  end;

  [DNTypeName('System.SystemException')]
  DNSystemException = interface(DNException)
  ['{22653DE3-C275-3F9B-AAA2-0091B7D17ED9}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSystemException = class(TDNGenericImport<DNSystemExceptionClass, DNSystemException>) end;

  //-------------namespace: System----------------
  DNAccessViolationExceptionClass = interface(DNSystemExceptionClass)
  ['{A1E1AD16-E24D-52C8-9521-BACC3945C9A4}']
  { constructors } 

    {class} function init: DNAccessViolationException; overload;
    {class} function init(message: string): DNAccessViolationException; overload;
    {class} function init(message: string; innerException: DNException): DNAccessViolationException; overload;

  end;

  [DNTypeName('System.AccessViolationException')]
  DNAccessViolationException = interface(DNSystemException)
  ['{CBCD8921-1941-3820-AC16-3265715225B4}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNAccessViolationException = class(TDNGenericImport<DNAccessViolationExceptionClass, DNAccessViolationException>) end;

  //-------------namespace: System----------------
  DNArgumentExceptionClass = interface(DNSystemExceptionClass)
  ['{805CB5B4-C916-53FD-9B33-934C9B8840F6}']
  { constructors } 

    {class} function init: DNArgumentException; overload;
    {class} function init(message: string): DNArgumentException; overload;
    {class} function init(message: string; innerException: DNException): DNArgumentException; overload;
    {class} function init(message: string; paramName: string; innerException: DNException): DNArgumentException; overload;
    {class} function init(message: string; paramName: string): DNArgumentException; overload;

  end;

  [DNTypeName('System.ArgumentException')]
  DNArgumentException = interface(DNSystemException)
  ['{A9D1E23D-F092-36B9-A6CC-35916005EE1A}']
  { getters & setters } 

    function get_Message: string;
    function get_ParamName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property ParamName: string read get_ParamName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNArgumentException = class(TDNGenericImport<DNArgumentExceptionClass, DNArgumentException>) end;

  //-------------namespace: System----------------
  DNArgumentNullExceptionClass = interface(DNArgumentExceptionClass)
  ['{65FEB4B5-48A6-564A-AF1F-2175972BFBE7}']
  { constructors } 

    {class} function init: DNArgumentNullException; overload;
    {class} function init(paramName: string): DNArgumentNullException; overload;
    {class} function init(message: string; innerException: DNException): DNArgumentNullException; overload;
    {class} function init(paramName: string; message: string): DNArgumentNullException; overload;

  end;

  [DNTypeName('System.ArgumentNullException')]
  DNArgumentNullException = interface(DNArgumentException)
  ['{C0AFA8D8-344A-3901-A0CD-858713E91297}']
  { getters & setters } 

    function get_Message: string;
    function get_ParamName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property ParamName: string read get_ParamName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNArgumentNullException = class(TDNGenericImport<DNArgumentNullExceptionClass, DNArgumentNullException>) end;

  //-------------namespace: System----------------
  DNArgumentOutOfRangeExceptionClass = interface(DNArgumentExceptionClass)
  ['{382FAAAE-EF1A-5B8A-B3FB-263EC2730073}']
  { constructors } 

    {class} function init: DNArgumentOutOfRangeException; overload;
    {class} function init(paramName: string): DNArgumentOutOfRangeException; overload;
    {class} function init(paramName: string; message: string): DNArgumentOutOfRangeException; overload;
    {class} function init(message: string; innerException: DNException): DNArgumentOutOfRangeException; overload;
    {class} function init(paramName: string; actualValue: DNObject; message: string): DNArgumentOutOfRangeException; overload;

  end;

  [DNTypeName('System.ArgumentOutOfRangeException')]
  DNArgumentOutOfRangeException = interface(DNArgumentException)
  ['{9BE81835-82BC-3502-BB91-87BBF88E071A}']
  { getters & setters } 

    function get_Message: string;
    function get_ActualValue: DNObject;
    function get_ParamName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property ActualValue: DNObject read get_ActualValue;
    property ParamName: string read get_ParamName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNArgumentOutOfRangeException = class(TDNGenericImport<DNArgumentOutOfRangeExceptionClass, DNArgumentOutOfRangeException>) end;

  //-------------namespace: System----------------
  DNDuplicateWaitObjectExceptionClass = interface(DNArgumentExceptionClass)
  ['{5C96E3C5-05B1-5871-96E2-8CFFB9C8FF57}']
  { constructors } 

    {class} function init: DNDuplicateWaitObjectException; overload;
    {class} function init(parameterName: string): DNDuplicateWaitObjectException; overload;
    {class} function init(parameterName: string; message: string): DNDuplicateWaitObjectException; overload;
    {class} function init(message: string; innerException: DNException): DNDuplicateWaitObjectException; overload;

  end;

  [DNTypeName('System.DuplicateWaitObjectException')]
  DNDuplicateWaitObjectException = interface(DNArgumentException)
  ['{422EE121-E689-3B46-BD89-535B865473DC}']
  { getters & setters } 

    function get_Message: string;
    function get_ParamName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property ParamName: string read get_ParamName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDuplicateWaitObjectException = class(TDNGenericImport<DNDuplicateWaitObjectExceptionClass, DNDuplicateWaitObjectException>) end;

  //-------------namespace: System.Globalization----------------
  DNCultureNotFoundExceptionClass = interface(DNArgumentExceptionClass)
  ['{028B4C42-5187-56A3-B15E-4FE66C0E7896}']
  { constructors } 

    {class} function init: DNCultureNotFoundException; overload;
    {class} function init(message: string): DNCultureNotFoundException; overload;
    {class} function init(paramName: string; message: string): DNCultureNotFoundException; overload;
    {class} function init(message: string; innerException: DNException): DNCultureNotFoundException; overload;
    {class} function init(paramName: string; invalidCultureName: string; message: string): DNCultureNotFoundException; overload;
    {class} function init(message: string; invalidCultureName: string; innerException: DNException): DNCultureNotFoundException; overload;
    {class} function init(message: string; invalidCultureId: Int32; innerException: DNException): DNCultureNotFoundException; overload;
    {class} function init(paramName: string; invalidCultureId: Int32; message: string): DNCultureNotFoundException; overload;

  end;

  [DNTypeName('System.Globalization.CultureNotFoundException')]
  DNCultureNotFoundException = interface(DNArgumentException)
  ['{10E9D51B-982F-3AB6-9A1B-83BFF6594757}']
  { getters & setters } 

    function get_InvalidCultureId: DNNullable<Int32>;
    function get_InvalidCultureName: string;
    function get_Message: string;
    function get_ParamName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property InvalidCultureId: DNNullable<Int32> read get_InvalidCultureId;
    property InvalidCultureName: string read get_InvalidCultureName;
    property Message: string read get_Message;
    property ParamName: string read get_ParamName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCultureNotFoundException = class(TDNGenericImport<DNCultureNotFoundExceptionClass, DNCultureNotFoundException>) end;

  //-------------namespace: System.Text----------------
  DNDecoderFallbackExceptionClass = interface(DNArgumentExceptionClass)
  ['{BD2F31F9-3D47-54CB-B83F-B159A39D3C23}']
  { constructors } 

    {class} function init: DNDecoderFallbackException; overload;
    {class} function init(message: string): DNDecoderFallbackException; overload;
    {class} function init(message: string; innerException: DNException): DNDecoderFallbackException; overload;
    {class} function init(message: string; bytesUnknown: TArray<Byte>; index: Int32): DNDecoderFallbackException; overload;

  end;

  [DNTypeName('System.Text.DecoderFallbackException')]
  DNDecoderFallbackException = interface(DNArgumentException)
  ['{6DDD7E63-21F3-3C3C-9972-0A505DD93A44}']
  { getters & setters } 

    function get_BytesUnknown: TArray<Byte>;
    function get_Index: Int32;
    function get_Message: string;
    function get_ParamName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property BytesUnknown: TArray<Byte> read get_BytesUnknown;
    property Index: Int32 read get_Index;
    property Message: string read get_Message;
    property ParamName: string read get_ParamName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDecoderFallbackException = class(TDNGenericImport<DNDecoderFallbackExceptionClass, DNDecoderFallbackException>) end;

  //-------------namespace: System.Text----------------
  DNEncoderFallbackExceptionClass = interface(DNArgumentExceptionClass)
  ['{7D0CD4BD-9BE6-594F-BDD9-DD3FE5FCEA7D}']
  { constructors } 

    {class} function init: DNEncoderFallbackException; overload;
    {class} function init(message: string): DNEncoderFallbackException; overload;
    {class} function init(message: string; innerException: DNException): DNEncoderFallbackException; overload;

  end;

  [DNTypeName('System.Text.EncoderFallbackException')]
  DNEncoderFallbackException = interface(DNArgumentException)
  ['{C8B6B8BB-E5F6-34B4-B712-26EC7724A30E}']
  { getters & setters } 

    function get_CharUnknown: Char;
    function get_CharUnknownHigh: Char;
    function get_CharUnknownLow: Char;
    function get_Index: Int32;
    function get_Message: string;
    function get_ParamName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function IsUnknownSurrogate: Boolean;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property CharUnknown: Char read get_CharUnknown;
    property CharUnknownHigh: Char read get_CharUnknownHigh;
    property CharUnknownLow: Char read get_CharUnknownLow;
    property Index: Int32 read get_Index;
    property Message: string read get_Message;
    property ParamName: string read get_ParamName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNEncoderFallbackException = class(TDNGenericImport<DNEncoderFallbackExceptionClass, DNEncoderFallbackException>) end;

  //-------------namespace: System----------------
  DNArithmeticExceptionClass = interface(DNSystemExceptionClass)
  ['{C8ADFA9A-61EE-5A7B-81B4-AAF93F78C5F3}']
  { constructors } 

    {class} function init: DNArithmeticException; overload;
    {class} function init(message: string): DNArithmeticException; overload;
    {class} function init(message: string; innerException: DNException): DNArithmeticException; overload;

  end;

  [DNTypeName('System.ArithmeticException')]
  DNArithmeticException = interface(DNSystemException)
  ['{1EACEF59-B8FB-30A7-B00D-A5BC25FC87A7}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNArithmeticException = class(TDNGenericImport<DNArithmeticExceptionClass, DNArithmeticException>) end;

  //-------------namespace: System----------------
  DNDivideByZeroExceptionClass = interface(DNArithmeticExceptionClass)
  ['{5328EBAF-836B-5FD9-9533-A4443A81F067}']
  { constructors } 

    {class} function init: DNDivideByZeroException; overload;
    {class} function init(message: string): DNDivideByZeroException; overload;
    {class} function init(message: string; innerException: DNException): DNDivideByZeroException; overload;

  end;

  [DNTypeName('System.DivideByZeroException')]
  DNDivideByZeroException = interface(DNArithmeticException)
  ['{DE338AFD-7AB1-3B33-ACD3-84651E0BAA8E}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDivideByZeroException = class(TDNGenericImport<DNDivideByZeroExceptionClass, DNDivideByZeroException>) end;

  //-------------namespace: System----------------
  DNNotFiniteNumberExceptionClass = interface(DNArithmeticExceptionClass)
  ['{8F70D4F8-E715-57F6-9843-71980E0C235D}']
  { constructors } 

    {class} function init: DNNotFiniteNumberException; overload;
    {class} function init(offendingNumber: Double): DNNotFiniteNumberException; overload;
    {class} function init(message: string): DNNotFiniteNumberException; overload;
    {class} function init(message: string; offendingNumber: Double): DNNotFiniteNumberException; overload;
    {class} function init(message: string; innerException: DNException): DNNotFiniteNumberException; overload;
    {class} function init(message: string; offendingNumber: Double; innerException: DNException): DNNotFiniteNumberException; overload;

  end;

  [DNTypeName('System.NotFiniteNumberException')]
  DNNotFiniteNumberException = interface(DNArithmeticException)
  ['{7FC2A155-DBEF-360F-9EB3-8185F2C757D1}']
  { getters & setters } 

    function get_OffendingNumber: Double;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property OffendingNumber: Double read get_OffendingNumber;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNNotFiniteNumberException = class(TDNGenericImport<DNNotFiniteNumberExceptionClass, DNNotFiniteNumberException>) end;

  //-------------namespace: System----------------
  DNOverflowExceptionClass = interface(DNArithmeticExceptionClass)
  ['{756B5BBD-35F4-59FE-9C7C-1395ECE930FB}']
  { constructors } 

    {class} function init: DNOverflowException; overload;
    {class} function init(message: string): DNOverflowException; overload;
    {class} function init(message: string; innerException: DNException): DNOverflowException; overload;

  end;

  [DNTypeName('System.OverflowException')]
  DNOverflowException = interface(DNArithmeticException)
  ['{284D62C0-4B1F-39E9-8A87-CC41DD8CCDB2}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNOverflowException = class(TDNGenericImport<DNOverflowExceptionClass, DNOverflowException>) end;

  //-------------namespace: System----------------
  DNArrayTypeMismatchExceptionClass = interface(DNSystemExceptionClass)
  ['{B52F5DA2-C7D4-5C4D-A6D4-744934BC0381}']
  { constructors } 

    {class} function init: DNArrayTypeMismatchException; overload;
    {class} function init(message: string): DNArrayTypeMismatchException; overload;
    {class} function init(message: string; innerException: DNException): DNArrayTypeMismatchException; overload;

  end;

  [DNTypeName('System.ArrayTypeMismatchException')]
  DNArrayTypeMismatchException = interface(DNSystemException)
  ['{0B0CA66D-1AE4-360C-B831-CFDFF70B2691}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNArrayTypeMismatchException = class(TDNGenericImport<DNArrayTypeMismatchExceptionClass, DNArrayTypeMismatchException>) end;

  //-------------namespace: System----------------
  DNBadImageFormatExceptionClass = interface(DNSystemExceptionClass)
  ['{7D0FDAE1-6548-557D-8423-71A6B7F1818D}']
  { constructors } 

    {class} function init: DNBadImageFormatException; overload;
    {class} function init(message: string): DNBadImageFormatException; overload;
    {class} function init(message: string; inner: DNException): DNBadImageFormatException; overload;
    {class} function init(message: string; fileName: string): DNBadImageFormatException; overload;
    {class} function init(message: string; fileName: string; inner: DNException): DNBadImageFormatException; overload;

  end;

  [DNTypeName('System.BadImageFormatException')]
  DNBadImageFormatException = interface(DNSystemException)
  ['{541F7805-E457-332E-8E80-259303025D4B}']
  { getters & setters } 

    function get_Message: string;
    function get_FileName: string;
    function get_FusionLog: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetBaseException: DNException;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property FileName: string read get_FileName;
    property FusionLog: string read get_FusionLog;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNBadImageFormatException = class(TDNGenericImport<DNBadImageFormatExceptionClass, DNBadImageFormatException>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNKeyNotFoundExceptionClass = interface(DNSystemExceptionClass)
  ['{7F3D7F08-94F8-585A-9BAD-F673F0E12D88}']
  { constructors } 

    {class} function init: DNKeyNotFoundException; overload;
    {class} function init(message: string): DNKeyNotFoundException; overload;
    {class} function init(message: string; innerException: DNException): DNKeyNotFoundException; overload;

  end;

  [DNTypeName('System.Collections.Generic.KeyNotFoundException')]
  DNKeyNotFoundException = interface(DNSystemException)
  ['{AB75604B-767E-34C1-A1DF-2738D9B5FC3E}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNKeyNotFoundException = class(TDNGenericImport<DNKeyNotFoundExceptionClass, DNKeyNotFoundException>) end;

  //-------------namespace: System----------------
  DNDataMisalignedExceptionClass = interface(DNSystemExceptionClass)
  ['{EBC26950-FF34-5D48-8D7D-0180D4291B86}']
  { constructors } 

    {class} function init: DNDataMisalignedException; overload;
    {class} function init(message: string): DNDataMisalignedException; overload;
    {class} function init(message: string; innerException: DNException): DNDataMisalignedException; overload;

  end;

  [DNTypeName('System.DataMisalignedException')]
  DNDataMisalignedException = interface(DNSystemException)
  ['{FD72346F-00E8-3DD3-A612-B3D5875D7AB9}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDataMisalignedException = class(TDNGenericImport<DNDataMisalignedExceptionClass, DNDataMisalignedException>) end;

  //-------------namespace: System----------------
  DNExecutionEngineExceptionClass = interface(DNSystemExceptionClass)
  ['{ACEC9650-2AC0-583D-86F6-D7D32521D3B5}']
  { constructors } 

    {class} function init: DNExecutionEngineException; overload;
    {class} function init(message: string): DNExecutionEngineException; overload;
    {class} function init(message: string; innerException: DNException): DNExecutionEngineException; overload;

  end;

  [DNTypeName('System.ExecutionEngineException')]
  DNExecutionEngineException = interface(DNSystemException)
  ['{C8059465-47E1-30AE-9798-8291348EF458}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNExecutionEngineException = class(TDNGenericImport<DNExecutionEngineExceptionClass, DNExecutionEngineException>) end;

  //-------------namespace: System----------------
  DNFormatExceptionClass = interface(DNSystemExceptionClass)
  ['{39309340-76EC-5969-A68B-624AA3ECC7B5}']
  { constructors } 

    {class} function init: DNFormatException; overload;
    {class} function init(message: string): DNFormatException; overload;
    {class} function init(message: string; innerException: DNException): DNFormatException; overload;

  end;

  [DNTypeName('System.FormatException')]
  DNFormatException = interface(DNSystemException)
  ['{76F525B4-ABBD-3F28-AFBA-C984DE00B4A8}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNFormatException = class(TDNGenericImport<DNFormatExceptionClass, DNFormatException>) end;

  //-------------namespace: System.Reflection----------------
  DNCustomAttributeFormatExceptionClass = interface(DNFormatExceptionClass)
  ['{88B461FD-D784-54B6-BA68-0D88AEBF2AA8}']
  { constructors } 

    {class} function init: DNCustomAttributeFormatException; overload;
    {class} function init(message: string): DNCustomAttributeFormatException; overload;
    {class} function init(message: string; inner: DNException): DNCustomAttributeFormatException; overload;

  end;

  [DNTypeName('System.Reflection.CustomAttributeFormatException')]
  DNCustomAttributeFormatException = interface(DNFormatException)
  ['{BBC2DECC-C0F6-31AD-87BC-58A30843280E}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCustomAttributeFormatException = class(TDNGenericImport<DNCustomAttributeFormatExceptionClass, DNCustomAttributeFormatException>) end;

  //-------------namespace: System----------------
  DNIndexOutOfRangeExceptionClass = interface(DNSystemExceptionClass)
  ['{7586CAD5-7AAF-5194-816B-4D3428FA3A5A}']
  { constructors } 

    {class} function init: DNIndexOutOfRangeException; overload;
    {class} function init(message: string): DNIndexOutOfRangeException; overload;
    {class} function init(message: string; innerException: DNException): DNIndexOutOfRangeException; overload;

  end;

  [DNTypeName('System.IndexOutOfRangeException')]
  DNIndexOutOfRangeException = interface(DNSystemException)
  ['{76A60031-770C-3952-BA17-B55AB920F43C}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNIndexOutOfRangeException = class(TDNGenericImport<DNIndexOutOfRangeExceptionClass, DNIndexOutOfRangeException>) end;

  //-------------namespace: System----------------
  DNInsufficientExecutionStackExceptionClass = interface(DNSystemExceptionClass)
  ['{31F72482-DFCF-5F95-9F8A-68ADE29DD657}']
  { constructors } 

    {class} function init: DNInsufficientExecutionStackException; overload;
    {class} function init(message: string): DNInsufficientExecutionStackException; overload;
    {class} function init(message: string; innerException: DNException): DNInsufficientExecutionStackException; overload;

  end;

  [DNTypeName('System.InsufficientExecutionStackException')]
  DNInsufficientExecutionStackException = interface(DNSystemException)
  ['{F1BFD612-D3A7-3FC7-98A1-9A5D940CEE24}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInsufficientExecutionStackException = class(TDNGenericImport<DNInsufficientExecutionStackExceptionClass, DNInsufficientExecutionStackException>) end;

  //-------------namespace: System----------------
  DNInvalidCastExceptionClass = interface(DNSystemExceptionClass)
  ['{F9075172-90E5-57D3-9F29-0681F1814EED}']
  { constructors } 

    {class} function init: DNInvalidCastException; overload;
    {class} function init(message: string): DNInvalidCastException; overload;
    {class} function init(message: string; innerException: DNException): DNInvalidCastException; overload;
    {class} function init(message: string; errorCode: Int32): DNInvalidCastException; overload;

  end;

  [DNTypeName('System.InvalidCastException')]
  DNInvalidCastException = interface(DNSystemException)
  ['{DCC0B3A6-861B-3D31-9A0E-16D191C37CC2}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidCastException = class(TDNGenericImport<DNInvalidCastExceptionClass, DNInvalidCastException>) end;

  //-------------namespace: System----------------
  DNInvalidOperationExceptionClass = interface(DNSystemExceptionClass)
  ['{0549B743-C204-5E02-84A3-3EBF5CDE5A41}']
  { constructors } 

    {class} function init: DNInvalidOperationException; overload;
    {class} function init(message: string): DNInvalidOperationException; overload;
    {class} function init(message: string; innerException: DNException): DNInvalidOperationException; overload;

  end;

  [DNTypeName('System.InvalidOperationException')]
  DNInvalidOperationException = interface(DNSystemException)
  ['{49C80628-04DF-3549-97B5-D77B1024625D}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidOperationException = class(TDNGenericImport<DNInvalidOperationExceptionClass, DNInvalidOperationException>) end;

  //-------------namespace: System----------------
  DNObjectDisposedExceptionClass = interface(DNInvalidOperationExceptionClass)
  ['{ED7F20E4-53D0-5DF4-B4B6-59B97C910ED5}']
  { constructors } 

    {class} function init(objectName: string): DNObjectDisposedException; overload;
    {class} function init(objectName: string; message: string): DNObjectDisposedException; overload;
    {class} function init(message: string; innerException: DNException): DNObjectDisposedException; overload;

  end;

  [DNTypeName('System.ObjectDisposedException')]
  DNObjectDisposedException = interface(DNInvalidOperationException)
  ['{A58937BA-9CF9-3F6E-A83E-DAB46F1F3BFD}']
  { getters & setters } 

    function get_Message: string;
    function get_ObjectName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property ObjectName: string read get_ObjectName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNObjectDisposedException = class(TDNGenericImport<DNObjectDisposedExceptionClass, DNObjectDisposedException>) end;

  //-------------namespace: System----------------
  DNInvalidProgramExceptionClass = interface(DNSystemExceptionClass)
  ['{716C1303-2CB6-5343-A28C-3A377BD4F837}']
  { constructors } 

    {class} function init: DNInvalidProgramException; overload;
    {class} function init(message: string): DNInvalidProgramException; overload;
    {class} function init(message: string; inner: DNException): DNInvalidProgramException; overload;

  end;

  [DNTypeName('System.InvalidProgramException')]
  DNInvalidProgramException = interface(DNSystemException)
  ['{D3BEB78F-180F-3177-BCDF-ACC51B50E262}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidProgramException = class(TDNGenericImport<DNInvalidProgramExceptionClass, DNInvalidProgramException>) end;

  //-------------namespace: System.IO----------------
  DNIOExceptionClass = interface(DNSystemExceptionClass)
  ['{281B26F0-5658-546E-AB28-CED2CC8EFF62}']
  { constructors } 

    {class} function init: DNIOException; overload;
    {class} function init(message: string): DNIOException; overload;
    {class} function init(message: string; hresult: Int32): DNIOException; overload;
    {class} function init(message: string; innerException: DNException): DNIOException; overload;

  end;

  [DNTypeName('System.IO.IOException')]
  DNIOException = interface(DNSystemException)
  ['{30F87417-CBA0-3937-A29D-69ABA3822271}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNIOException = class(TDNGenericImport<DNIOExceptionClass, DNIOException>) end;

  //-------------namespace: System.IO----------------
  DNDirectoryNotFoundExceptionClass = interface(DNIOExceptionClass)
  ['{D216F3A1-6380-5B94-AAFB-2B528A64D974}']
  { constructors } 

    {class} function init: DNDirectoryNotFoundException; overload;
    {class} function init(message: string): DNDirectoryNotFoundException; overload;
    {class} function init(message: string; innerException: DNException): DNDirectoryNotFoundException; overload;

  end;

  [DNTypeName('System.IO.DirectoryNotFoundException')]
  DNDirectoryNotFoundException = interface(DNIOException)
  ['{0A508E31-9077-3531-AB2E-93B874C54010}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDirectoryNotFoundException = class(TDNGenericImport<DNDirectoryNotFoundExceptionClass, DNDirectoryNotFoundException>) end;

  //-------------namespace: System.IO----------------
  DNEndOfStreamExceptionClass = interface(DNIOExceptionClass)
  ['{DAA0878D-F717-5CB0-8B0C-9365AF7EC1D1}']
  { constructors } 

    {class} function init: DNEndOfStreamException; overload;
    {class} function init(message: string): DNEndOfStreamException; overload;
    {class} function init(message: string; innerException: DNException): DNEndOfStreamException; overload;

  end;

  [DNTypeName('System.IO.EndOfStreamException')]
  DNEndOfStreamException = interface(DNIOException)
  ['{64028313-F085-3B0C-BA6C-9558A81A24E2}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNEndOfStreamException = class(TDNGenericImport<DNEndOfStreamExceptionClass, DNEndOfStreamException>) end;

  //-------------namespace: System.IO----------------
  DNFileLoadExceptionClass = interface(DNIOExceptionClass)
  ['{396806A7-BE09-57C5-989D-7A2903664919}']
  { constructors } 

    {class} function init: DNFileLoadException; overload;
    {class} function init(message: string): DNFileLoadException; overload;
    {class} function init(message: string; inner: DNException): DNFileLoadException; overload;
    {class} function init(message: string; fileName: string): DNFileLoadException; overload;
    {class} function init(message: string; fileName: string; inner: DNException): DNFileLoadException; overload;

  end;

  [DNTypeName('System.IO.FileLoadException')]
  DNFileLoadException = interface(DNIOException)
  ['{D7DEB1DC-FE28-372E-AEDA-D4A69964778F}']
  { getters & setters } 

    function get_Message: string;
    function get_FileName: string;
    function get_FusionLog: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property FileName: string read get_FileName;
    property FusionLog: string read get_FusionLog;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNFileLoadException = class(TDNGenericImport<DNFileLoadExceptionClass, DNFileLoadException>) end;

  //-------------namespace: System.IO----------------
  DNFileNotFoundExceptionClass = interface(DNIOExceptionClass)
  ['{95F6DF39-776F-53C6-A456-506566A7EEEB}']
  { constructors } 

    {class} function init: DNFileNotFoundException; overload;
    {class} function init(message: string): DNFileNotFoundException; overload;
    {class} function init(message: string; innerException: DNException): DNFileNotFoundException; overload;
    {class} function init(message: string; fileName: string): DNFileNotFoundException; overload;
    {class} function init(message: string; fileName: string; innerException: DNException): DNFileNotFoundException; overload;

  end;

  [DNTypeName('System.IO.FileNotFoundException')]
  DNFileNotFoundException = interface(DNIOException)
  ['{B4590F65-AD14-3D20-86D7-C2514430BA67}']
  { getters & setters } 

    function get_Message: string;
    function get_FileName: string;
    function get_FusionLog: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property FileName: string read get_FileName;
    property FusionLog: string read get_FusionLog;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNFileNotFoundException = class(TDNGenericImport<DNFileNotFoundExceptionClass, DNFileNotFoundException>) end;

  //-------------namespace: System.IO----------------
  DNPathTooLongExceptionClass = interface(DNIOExceptionClass)
  ['{3EF72306-2C65-5B8F-BF14-04C83B80DDC0}']
  { constructors } 

    {class} function init: DNPathTooLongException; overload;
    {class} function init(message: string): DNPathTooLongException; overload;
    {class} function init(message: string; innerException: DNException): DNPathTooLongException; overload;

  end;

  [DNTypeName('System.IO.PathTooLongException')]
  DNPathTooLongException = interface(DNIOException)
  ['{9F003E5D-E9D2-31ED-A002-E43E80D911DC}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPathTooLongException = class(TDNGenericImport<DNPathTooLongExceptionClass, DNPathTooLongException>) end;

  //-------------namespace: System----------------
  DNMemberAccessExceptionClass = interface(DNSystemExceptionClass)
  ['{7213A337-75F6-550D-8309-CF5F960EC8DD}']
  { constructors } 

    {class} function init: DNMemberAccessException; overload;
    {class} function init(message: string): DNMemberAccessException; overload;
    {class} function init(message: string; inner: DNException): DNMemberAccessException; overload;

  end;

  [DNTypeName('System.MemberAccessException')]
  DNMemberAccessException = interface(DNSystemException)
  ['{ED45990E-BC40-3D29-AB4F-E523695C73FA}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMemberAccessException = class(TDNGenericImport<DNMemberAccessExceptionClass, DNMemberAccessException>) end;

  //-------------namespace: System----------------
  DNFieldAccessExceptionClass = interface(DNMemberAccessExceptionClass)
  ['{BAA64E83-84E4-5C41-901A-E2BE5F08EDB7}']
  { constructors } 

    {class} function init: DNFieldAccessException; overload;
    {class} function init(message: string): DNFieldAccessException; overload;
    {class} function init(message: string; inner: DNException): DNFieldAccessException; overload;

  end;

  [DNTypeName('System.FieldAccessException')]
  DNFieldAccessException = interface(DNMemberAccessException)
  ['{8D7620B6-AFB5-3D68-B4B2-6FA0934DED27}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNFieldAccessException = class(TDNGenericImport<DNFieldAccessExceptionClass, DNFieldAccessException>) end;

  //-------------namespace: System----------------
  DNMethodAccessExceptionClass = interface(DNMemberAccessExceptionClass)
  ['{820B2DA1-1007-5D41-BD28-09204FD5E87C}']
  { constructors } 

    {class} function init: DNMethodAccessException; overload;
    {class} function init(message: string): DNMethodAccessException; overload;
    {class} function init(message: string; inner: DNException): DNMethodAccessException; overload;

  end;

  [DNTypeName('System.MethodAccessException')]
  DNMethodAccessException = interface(DNMemberAccessException)
  ['{7DF10A8E-119A-320A-8E79-2DE497E0D7A3}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMethodAccessException = class(TDNGenericImport<DNMethodAccessExceptionClass, DNMethodAccessException>) end;

  //-------------namespace: System----------------
  DNMissingMemberExceptionClass = interface(DNMemberAccessExceptionClass)
  ['{20635D12-A47A-5CA5-9E0C-509264647CDB}']
  { constructors } 

    {class} function init: DNMissingMemberException; overload;
    {class} function init(message: string): DNMissingMemberException; overload;
    {class} function init(message: string; inner: DNException): DNMissingMemberException; overload;
    {class} function init(className: string; memberName: string): DNMissingMemberException; overload;

  end;

  [DNTypeName('System.MissingMemberException')]
  DNMissingMemberException = interface(DNMemberAccessException)
  ['{60C0052B-9555-3F9A-B31F-691B93BB85D2}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMissingMemberException = class(TDNGenericImport<DNMissingMemberExceptionClass, DNMissingMemberException>) end;

  //-------------namespace: System----------------
  DNMissingFieldExceptionClass = interface(DNMissingMemberExceptionClass)
  ['{FFF3A1A5-ED51-536D-A271-5C0B1FFA8250}']
  { constructors } 

    {class} function init: DNMissingFieldException; overload;
    {class} function init(message: string): DNMissingFieldException; overload;
    {class} function init(message: string; inner: DNException): DNMissingFieldException; overload;
    {class} function init(className: string; fieldName: string): DNMissingFieldException; overload;

  end;

  [DNTypeName('System.MissingFieldException')]
  DNMissingFieldException = interface(DNMissingMemberException)
  ['{759A3F6D-2CD7-35A2-9912-11B5175A4BA6}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMissingFieldException = class(TDNGenericImport<DNMissingFieldExceptionClass, DNMissingFieldException>) end;

  //-------------namespace: System----------------
  DNMissingMethodExceptionClass = interface(DNMissingMemberExceptionClass)
  ['{52DC9245-1AF6-5D61-ABF2-43D7973D01CE}']
  { constructors } 

    {class} function init: DNMissingMethodException; overload;
    {class} function init(message: string): DNMissingMethodException; overload;
    {class} function init(message: string; inner: DNException): DNMissingMethodException; overload;
    {class} function init(className: string; methodName: string): DNMissingMethodException; overload;

  end;

  [DNTypeName('System.MissingMethodException')]
  DNMissingMethodException = interface(DNMissingMemberException)
  ['{A68173D7-D8CD-32DB-94D2-0F193269A054}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMissingMethodException = class(TDNGenericImport<DNMissingMethodExceptionClass, DNMissingMethodException>) end;

  //-------------namespace: System----------------
  DNMulticastNotSupportedExceptionClass = interface(DNSystemExceptionClass)
  ['{C1B98507-5496-539D-9D32-A721690CC8E4}']
  { constructors } 

    {class} function init: DNMulticastNotSupportedException; overload;
    {class} function init(message: string): DNMulticastNotSupportedException; overload;
    {class} function init(message: string; inner: DNException): DNMulticastNotSupportedException; overload;

  end;

  [DNTypeName('System.MulticastNotSupportedException')]
  DNMulticastNotSupportedException = interface(DNSystemException)
  ['{E0DE8FF1-B151-348E-88AB-68F490AE374B}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMulticastNotSupportedException = class(TDNGenericImport<DNMulticastNotSupportedExceptionClass, DNMulticastNotSupportedException>) end;

  //-------------namespace: System----------------
  DNNotImplementedExceptionClass = interface(DNSystemExceptionClass)
  ['{AFB169A7-37C2-50E4-A6AB-F2DF94FDA707}']
  { constructors } 

    {class} function init: DNNotImplementedException; overload;
    {class} function init(message: string): DNNotImplementedException; overload;
    {class} function init(message: string; inner: DNException): DNNotImplementedException; overload;

  end;

  [DNTypeName('System.NotImplementedException')]
  DNNotImplementedException = interface(DNSystemException)
  ['{621DD3A8-3905-33CC-A28B-4387377C08D2}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNNotImplementedException = class(TDNGenericImport<DNNotImplementedExceptionClass, DNNotImplementedException>) end;

  //-------------namespace: System----------------
  DNNotSupportedExceptionClass = interface(DNSystemExceptionClass)
  ['{9BAB6810-6FCF-5D10-BCDD-1B077454BA53}']
  { constructors } 

    {class} function init: DNNotSupportedException; overload;
    {class} function init(message: string): DNNotSupportedException; overload;
    {class} function init(message: string; innerException: DNException): DNNotSupportedException; overload;

  end;

  [DNTypeName('System.NotSupportedException')]
  DNNotSupportedException = interface(DNSystemException)
  ['{580C65EE-E533-31EA-991A-FA6FA719E684}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNNotSupportedException = class(TDNGenericImport<DNNotSupportedExceptionClass, DNNotSupportedException>) end;

  //-------------namespace: System----------------
  DNPlatformNotSupportedExceptionClass = interface(DNNotSupportedExceptionClass)
  ['{720441AB-D127-5A73-AA1F-AFBF3808A889}']
  { constructors } 

    {class} function init: DNPlatformNotSupportedException; overload;
    {class} function init(message: string): DNPlatformNotSupportedException; overload;
    {class} function init(message: string; inner: DNException): DNPlatformNotSupportedException; overload;

  end;

  [DNTypeName('System.PlatformNotSupportedException')]
  DNPlatformNotSupportedException = interface(DNNotSupportedException)
  ['{D8C55FDC-134C-3245-821F-3792160FD5A1}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPlatformNotSupportedException = class(TDNGenericImport<DNPlatformNotSupportedExceptionClass, DNPlatformNotSupportedException>) end;

  //-------------namespace: System----------------
  DNNullReferenceExceptionClass = interface(DNSystemExceptionClass)
  ['{DC76760E-38F3-57EF-AEEE-BD78B7FB7024}']
  { constructors } 

    {class} function init: DNNullReferenceException; overload;
    {class} function init(message: string): DNNullReferenceException; overload;
    {class} function init(message: string; innerException: DNException): DNNullReferenceException; overload;

  end;

  [DNTypeName('System.NullReferenceException')]
  DNNullReferenceException = interface(DNSystemException)
  ['{77E764C0-F83E-39F7-B825-AB4E52A60D65}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNNullReferenceException = class(TDNGenericImport<DNNullReferenceExceptionClass, DNNullReferenceException>) end;

  //-------------namespace: System----------------
  DNOperationCanceledExceptionClass = interface(DNSystemExceptionClass)
  ['{46E7B8C0-5207-5DD4-85AD-030628A56544}']
  { constructors } 

    {class} function init: DNOperationCanceledException; overload;
    {class} function init(message: string): DNOperationCanceledException; overload;
    {class} function init(message: string; innerException: DNException): DNOperationCanceledException; overload;
    {class} function init(token: DNCancellationToken): DNOperationCanceledException; overload;
    {class} function init(message: string; token: DNCancellationToken): DNOperationCanceledException; overload;
    {class} function init(message: string; innerException: DNException; token: DNCancellationToken): DNOperationCanceledException; overload;

  end;

  [DNTypeName('System.OperationCanceledException')]
  DNOperationCanceledException = interface(DNSystemException)
  ['{B3C3135A-BA2C-3991-B559-B70845C69120}']
  { getters & setters } 

    function get_CancellationToken: DNCancellationToken;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property CancellationToken: DNCancellationToken read get_CancellationToken;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNOperationCanceledException = class(TDNGenericImport<DNOperationCanceledExceptionClass, DNOperationCanceledException>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskCanceledExceptionClass = interface(DNOperationCanceledExceptionClass)
  ['{02DE5B33-557A-51E9-B574-C4033B436063}']
  { constructors } 

    {class} function init: DNTaskCanceledException; overload;
    {class} function init(message: string): DNTaskCanceledException; overload;
    {class} function init(message: string; innerException: DNException): DNTaskCanceledException; overload;
    {class} function init(message: string; innerException: DNException; token: DNCancellationToken): DNTaskCanceledException; overload;
    {class} function init(task: DNTask): DNTaskCanceledException; overload;

  end;

  [DNTypeName('System.Threading.Tasks.TaskCanceledException')]
  DNTaskCanceledException = interface(DNOperationCanceledException)
  ['{7D32CB7A-6D8E-3F05-9072-3CF300A10499}']
  { getters & setters } 

    function get_Task: DNTask;
    function get_CancellationToken: DNCancellationToken;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Task: DNTask read get_Task;
    property CancellationToken: DNCancellationToken read get_CancellationToken;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTaskCanceledException = class(TDNGenericImport<DNTaskCanceledExceptionClass, DNTaskCanceledException>) end;

  //-------------namespace: System----------------
  DNOutOfMemoryExceptionClass = interface(DNSystemExceptionClass)
  ['{DFB3504B-8251-594C-81B6-54FD2C8C12FE}']
  { constructors } 

    {class} function init: DNOutOfMemoryException; overload;
    {class} function init(message: string): DNOutOfMemoryException; overload;
    {class} function init(message: string; innerException: DNException): DNOutOfMemoryException; overload;

  end;

  [DNTypeName('System.OutOfMemoryException')]
  DNOutOfMemoryException = interface(DNSystemException)
  ['{394BA3A5-32C1-35D4-8DE1-4C2A49D7C4B3}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNOutOfMemoryException = class(TDNGenericImport<DNOutOfMemoryExceptionClass, DNOutOfMemoryException>) end;

  //-------------namespace: System----------------
  DNInsufficientMemoryExceptionClass = interface(DNOutOfMemoryExceptionClass)
  ['{AE7E1155-3AD6-51A8-9995-BAF87A022D36}']
  { constructors } 

    {class} function init: DNInsufficientMemoryException; overload;
    {class} function init(message: string): DNInsufficientMemoryException; overload;
    {class} function init(message: string; innerException: DNException): DNInsufficientMemoryException; overload;

  end;

  [DNTypeName('System.InsufficientMemoryException')]
  DNInsufficientMemoryException = interface(DNOutOfMemoryException)
  ['{8A4D6A97-7635-3BD9-829E-B46AAAB06BE7}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInsufficientMemoryException = class(TDNGenericImport<DNInsufficientMemoryExceptionClass, DNInsufficientMemoryException>) end;

  //-------------namespace: System----------------
  DNRankExceptionClass = interface(DNSystemExceptionClass)
  ['{02D659FA-F25A-55B2-AAB6-B836BEC70BB0}']
  { constructors } 

    {class} function init: DNRankException; overload;
    {class} function init(message: string): DNRankException; overload;
    {class} function init(message: string; innerException: DNException): DNRankException; overload;

  end;

  [DNTypeName('System.RankException')]
  DNRankException = interface(DNSystemException)
  ['{6B5C2433-18BF-348D-A3CC-B6D2FA1C3949}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNRankException = class(TDNGenericImport<DNRankExceptionClass, DNRankException>) end;

  //-------------namespace: System.Reflection----------------
  DNAmbiguousMatchExceptionClass = interface(DNSystemExceptionClass)
  ['{E31476F1-916E-5A0B-9AE3-94806F103367}']
  { constructors } 

    {class} function init: DNAmbiguousMatchException; overload;
    {class} function init(message: string): DNAmbiguousMatchException; overload;
    {class} function init(message: string; inner: DNException): DNAmbiguousMatchException; overload;

  end;

  [DNTypeName('System.Reflection.AmbiguousMatchException')]
  DNAmbiguousMatchException = interface(DNSystemException)
  ['{DF12132B-0845-3307-9428-E8457F30585C}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNAmbiguousMatchException = class(TDNGenericImport<DNAmbiguousMatchExceptionClass, DNAmbiguousMatchException>) end;

  //-------------namespace: System.Reflection----------------
  DNReflectionTypeLoadExceptionClass = interface(DNSystemExceptionClass)
  ['{4BFA9E43-972A-5986-8BC9-A494D574B0C3}']
  { constructors } 

    {class} function init(classes: TArray<DNType>; exceptions: TArray<DNException>): DNReflectionTypeLoadException; overload;
    {class} function init(classes: TArray<DNType>; exceptions: TArray<DNException>; message: string): DNReflectionTypeLoadException; overload;

  end;

  [DNTypeName('System.Reflection.ReflectionTypeLoadException')]
  DNReflectionTypeLoadException = interface(DNSystemException)
  ['{E8C5E04B-5FB8-3880-93E7-23835B635565}']
  { getters & setters } 

    function get_Types: TArray<DNType>;
    function get_LoaderExceptions: TArray<DNException>;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetBaseException: DNException;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Types: TArray<DNType> read get_Types;
    property LoaderExceptions: TArray<DNException> read get_LoaderExceptions;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNReflectionTypeLoadException = class(TDNGenericImport<DNReflectionTypeLoadExceptionClass, DNReflectionTypeLoadException>) end;

  //-------------namespace: System.Resources----------------
  DNMissingManifestResourceExceptionClass = interface(DNSystemExceptionClass)
  ['{57BECEF6-469B-5044-BDCC-E702562C4E7A}']
  { constructors } 

    {class} function init: DNMissingManifestResourceException; overload;
    {class} function init(message: string): DNMissingManifestResourceException; overload;
    {class} function init(message: string; inner: DNException): DNMissingManifestResourceException; overload;

  end;

  [DNTypeName('System.Resources.MissingManifestResourceException')]
  DNMissingManifestResourceException = interface(DNSystemException)
  ['{612BA77A-DF6C-3DF7-8759-8C833375861E}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMissingManifestResourceException = class(TDNGenericImport<DNMissingManifestResourceExceptionClass, DNMissingManifestResourceException>) end;

  //-------------namespace: System.Resources----------------
  DNMissingSatelliteAssemblyExceptionClass = interface(DNSystemExceptionClass)
  ['{EE2A0F53-E749-57DB-BB0C-345B51B68E45}']
  { constructors } 

    {class} function init: DNMissingSatelliteAssemblyException; overload;
    {class} function init(message: string): DNMissingSatelliteAssemblyException; overload;
    {class} function init(message: string; cultureName: string): DNMissingSatelliteAssemblyException; overload;
    {class} function init(message: string; inner: DNException): DNMissingSatelliteAssemblyException; overload;

  end;

  [DNTypeName('System.Resources.MissingSatelliteAssemblyException')]
  DNMissingSatelliteAssemblyException = interface(DNSystemException)
  ['{DD8521AF-BCAC-3200-B4B9-08427F956685}']
  { getters & setters } 

    function get_CultureName: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property CultureName: string read get_CultureName;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMissingSatelliteAssemblyException = class(TDNGenericImport<DNMissingSatelliteAssemblyExceptionClass, DNMissingSatelliteAssemblyException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNExternalExceptionClass = interface(DNSystemExceptionClass)
  ['{FBCB942A-3279-5087-A438-580D1AA731E9}']
  { constructors } 

    {class} function init: DNExternalException; overload;
    {class} function init(message: string): DNExternalException; overload;
    {class} function init(message: string; inner: DNException): DNExternalException; overload;
    {class} function init(message: string; errorCode: Int32): DNExternalException; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.ExternalException')]
  DNExternalException = interface(DNSystemException)
  ['{E049CF42-28AB-3DE0-90AE-AD24D3EF5D38}']
  { getters & setters } 

    function get_ErrorCode: Int32;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function ToString: string;
    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ErrorCode: Int32 read get_ErrorCode;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNExternalException = class(TDNGenericImport<DNExternalExceptionClass, DNExternalException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNCOMExceptionClass = interface(DNExternalExceptionClass)
  ['{C7DE7730-789B-5E98-BD92-BB6C4BDD3E2F}']
  { constructors } 

    {class} function init: DNCOMException; overload;
    {class} function init(message: string): DNCOMException; overload;
    {class} function init(message: string; inner: DNException): DNCOMException; overload;
    {class} function init(message: string; errorCode: Int32): DNCOMException; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.COMException')]
  DNCOMException = interface(DNExternalException)
  ['{A288254E-8792-378A-83AC-D39A2AC6B588}']
  { getters & setters } 

    function get_ErrorCode: Int32;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function ToString: string;
    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ErrorCode: Int32 read get_ErrorCode;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCOMException = class(TDNGenericImport<DNCOMExceptionClass, DNCOMException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNSEHExceptionClass = interface(DNExternalExceptionClass)
  ['{EA03B5A3-2B24-5827-8844-9B4983C69A32}']
  { constructors } 

    {class} function init: DNSEHException; overload;
    {class} function init(message: string): DNSEHException; overload;
    {class} function init(message: string; inner: DNException): DNSEHException; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.SEHException')]
  DNSEHException = interface(DNExternalException)
  ['{6A365BC2-047A-3103-A102-B9EDF3A3639A}']
  { getters & setters } 

    function get_ErrorCode: Int32;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function CanResume: Boolean;
    function ToString: string;
    function GetBaseException: DNException;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ErrorCode: Int32 read get_ErrorCode;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSEHException = class(TDNGenericImport<DNSEHExceptionClass, DNSEHException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInvalidComObjectExceptionClass = interface(DNSystemExceptionClass)
  ['{46AF0F9B-E7D4-5DA9-B872-425FB1AF3EA9}']
  { constructors } 

    {class} function init: DNInvalidComObjectException; overload;
    {class} function init(message: string): DNInvalidComObjectException; overload;
    {class} function init(message: string; inner: DNException): DNInvalidComObjectException; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.InvalidComObjectException')]
  DNInvalidComObjectException = interface(DNSystemException)
  ['{733285D7-8E6C-3ED3-BC8E-2CCC7AF8768C}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidComObjectException = class(TDNGenericImport<DNInvalidComObjectExceptionClass, DNInvalidComObjectException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNInvalidOleVariantTypeExceptionClass = interface(DNSystemExceptionClass)
  ['{4A84F19B-B592-5D72-A98F-5941E3BFAA41}']
  { constructors } 

    {class} function init: DNInvalidOleVariantTypeException; overload;
    {class} function init(message: string): DNInvalidOleVariantTypeException; overload;
    {class} function init(message: string; inner: DNException): DNInvalidOleVariantTypeException; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.InvalidOleVariantTypeException')]
  DNInvalidOleVariantTypeException = interface(DNSystemException)
  ['{B7D99F9E-B70D-39A4-8BC4-94AB25C2D3A4}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidOleVariantTypeException = class(TDNGenericImport<DNInvalidOleVariantTypeExceptionClass, DNInvalidOleVariantTypeException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNMarshalDirectiveExceptionClass = interface(DNSystemExceptionClass)
  ['{92AE3480-49AD-5DD0-8AA0-86BFB0F247E2}']
  { constructors } 

    {class} function init: DNMarshalDirectiveException; overload;
    {class} function init(message: string): DNMarshalDirectiveException; overload;
    {class} function init(message: string; inner: DNException): DNMarshalDirectiveException; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.MarshalDirectiveException')]
  DNMarshalDirectiveException = interface(DNSystemException)
  ['{AF913276-721D-3617-83F8-10BA9908F9D3}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMarshalDirectiveException = class(TDNGenericImport<DNMarshalDirectiveExceptionClass, DNMarshalDirectiveException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNSafeArrayRankMismatchExceptionClass = interface(DNSystemExceptionClass)
  ['{69EEFCDF-252E-5BC3-A365-DB6A77EF45C3}']
  { constructors } 

    {class} function init: DNSafeArrayRankMismatchException; overload;
    {class} function init(message: string): DNSafeArrayRankMismatchException; overload;
    {class} function init(message: string; inner: DNException): DNSafeArrayRankMismatchException; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.SafeArrayRankMismatchException')]
  DNSafeArrayRankMismatchException = interface(DNSystemException)
  ['{BBC2CE2B-C520-3AEC-98E6-809683F1EBE1}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSafeArrayRankMismatchException = class(TDNGenericImport<DNSafeArrayRankMismatchExceptionClass, DNSafeArrayRankMismatchException>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNSafeArrayTypeMismatchExceptionClass = interface(DNSystemExceptionClass)
  ['{479A1F33-49C2-57F1-9E58-78BBF98CBC21}']
  { constructors } 

    {class} function init: DNSafeArrayTypeMismatchException; overload;
    {class} function init(message: string): DNSafeArrayTypeMismatchException; overload;
    {class} function init(message: string; inner: DNException): DNSafeArrayTypeMismatchException; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.SafeArrayTypeMismatchException')]
  DNSafeArrayTypeMismatchException = interface(DNSystemException)
  ['{D9825AF0-2827-3C01-A70D-95A4250F336E}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSafeArrayTypeMismatchException = class(TDNGenericImport<DNSafeArrayTypeMismatchExceptionClass, DNSafeArrayTypeMismatchException>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNSerializationExceptionClass = interface(DNSystemExceptionClass)
  ['{20E72833-2CA2-50B2-A950-AFA87B530A6D}']
  { constructors } 

    {class} function init: DNSerializationException; overload;
    {class} function init(message: string): DNSerializationException; overload;
    {class} function init(message: string; innerException: DNException): DNSerializationException; overload;

  end;

  [DNTypeName('System.Runtime.Serialization.SerializationException')]
  DNSerializationException = interface(DNSystemException)
  ['{DF9354AD-448B-3EB4-8ACB-A31C0AD6C68D}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSerializationException = class(TDNGenericImport<DNSerializationExceptionClass, DNSerializationException>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCryptographicExceptionClass = interface(DNSystemExceptionClass)
  ['{BC6B15CB-F460-5B33-A2BB-0FFD17CB3CF9}']
  { constructors } 

    {class} function init: DNCryptographicException; overload;
    {class} function init(hr: Int32): DNCryptographicException; overload;
    {class} function init(message: string): DNCryptographicException; overload;
    {class} function init(message: string; inner: DNException): DNCryptographicException; overload;
    {class} function init(format: string; insert: string): DNCryptographicException; overload;

  end;

  [DNTypeName('System.Security.Cryptography.CryptographicException')]
  DNCryptographicException = interface(DNSystemException)
  ['{8B123970-C793-3064-868F-8EA462B62E16}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCryptographicException = class(TDNGenericImport<DNCryptographicExceptionClass, DNCryptographicException>) end;

  //-------------namespace: System.Security----------------
  DNSecurityExceptionClass = interface(DNSystemExceptionClass)
  ['{22F59EC8-6B7D-5550-BC4B-9704549F767F}']
  { constructors } 

    {class} function init: DNSecurityException; overload;
    {class} function init(message: string): DNSecurityException; overload;
    {class} function init(message: string; inner: DNException): DNSecurityException; overload;
    {class} function init(message: string; &type: DNType): DNSecurityException; overload;
    {class} function init(message: string; &type: DNType; state: string): DNSecurityException; overload;

  end;

  [DNTypeName('System.Security.SecurityException')]
  DNSecurityException = interface(DNSystemException)
  ['{BC440A5D-BD74-307A-AADF-9EEC6E97BD49}']
  { getters & setters } 

    function get_Demanded: DNObject;
    procedure set_Demanded(value: DNObject);
    function get_DenySetInstance: DNObject;
    procedure set_DenySetInstance(value: DNObject);
    function get_FailedAssemblyInfo: DNAssemblyName;
    procedure set_FailedAssemblyInfo(value: DNAssemblyName);
    function get_GrantedSet: string;
    procedure set_GrantedSet(value: string);
    function get_Method: DNMethodInfo;
    procedure set_Method(value: DNMethodInfo);
    function get_PermissionState: string;
    procedure set_PermissionState(value: string);
    function get_PermissionType: DNType;
    procedure set_PermissionType(value: DNType);
    function get_PermitOnlySetInstance: DNObject;
    procedure set_PermitOnlySetInstance(value: DNObject);
    function get_RefusedSet: string;
    procedure set_RefusedSet(value: string);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Demanded: DNObject read get_Demanded write set_Demanded;
    property DenySetInstance: DNObject read get_DenySetInstance write set_DenySetInstance;
    property FailedAssemblyInfo: DNAssemblyName read get_FailedAssemblyInfo write set_FailedAssemblyInfo;
    property GrantedSet: string read get_GrantedSet write set_GrantedSet;
    property Method: DNMethodInfo read get_Method write set_Method;
    property PermissionState: string read get_PermissionState write set_PermissionState;
    property PermissionType: DNType read get_PermissionType write set_PermissionType;
    property PermitOnlySetInstance: DNObject read get_PermitOnlySetInstance write set_PermitOnlySetInstance;
    property RefusedSet: string read get_RefusedSet write set_RefusedSet;
    property Url: string read get_Url write set_Url;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSecurityException = class(TDNGenericImport<DNSecurityExceptionClass, DNSecurityException>) end;

  //-------------namespace: System.Security----------------
  DNVerificationExceptionClass = interface(DNSystemExceptionClass)
  ['{ED674E20-A2B3-5D7D-ABF1-17C2A6BE0E97}']
  { constructors } 

    {class} function init: DNVerificationException; overload;
    {class} function init(message: string): DNVerificationException; overload;
    {class} function init(message: string; innerException: DNException): DNVerificationException; overload;

  end;

  [DNTypeName('System.Security.VerificationException')]
  DNVerificationException = interface(DNSystemException)
  ['{3DADAD11-722C-3C87-A664-96DC9966D807}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNVerificationException = class(TDNGenericImport<DNVerificationExceptionClass, DNVerificationException>) end;

  //-------------namespace: System----------------
  DNStackOverflowExceptionClass = interface(DNSystemExceptionClass)
  ['{076DB8F8-FBF2-50C4-A2AC-FDD9B8D3B79F}']
  { constructors } 

    {class} function init: DNStackOverflowException; overload;
    {class} function init(message: string): DNStackOverflowException; overload;
    {class} function init(message: string; innerException: DNException): DNStackOverflowException; overload;

  end;

  [DNTypeName('System.StackOverflowException')]
  DNStackOverflowException = interface(DNSystemException)
  ['{C1BCFBCC-0C00-30A1-8259-C3DD55AA8614}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNStackOverflowException = class(TDNGenericImport<DNStackOverflowExceptionClass, DNStackOverflowException>) end;

  //-------------namespace: System.Threading----------------
  DNAbandonedMutexExceptionClass = interface(DNSystemExceptionClass)
  ['{4A282EB1-9CB6-53B8-AC70-4992444B52FB}']
  { constructors } 

    {class} function init: DNAbandonedMutexException; overload;
    {class} function init(message: string): DNAbandonedMutexException; overload;
    {class} function init(message: string; inner: DNException): DNAbandonedMutexException; overload;
    {class} function init(location: Int32; handle: DNWaitHandle): DNAbandonedMutexException; overload;
    {class} function init(message: string; location: Int32; handle: DNWaitHandle): DNAbandonedMutexException; overload;
    {class} function init(message: string; inner: DNException; location: Int32; handle: DNWaitHandle): DNAbandonedMutexException; overload;

  end;

  [DNTypeName('System.Threading.AbandonedMutexException')]
  DNAbandonedMutexException = interface(DNSystemException)
  ['{6065F385-C37F-325A-87EB-E66B49916F69}']
  { getters & setters } 

    function get_Mutex: DNMutex;
    function get_MutexIndex: Int32;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Mutex: DNMutex read get_Mutex;
    property MutexIndex: Int32 read get_MutexIndex;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNAbandonedMutexException = class(TDNGenericImport<DNAbandonedMutexExceptionClass, DNAbandonedMutexException>) end;

  //-------------namespace: System.Threading----------------
  DNSemaphoreFullExceptionClass = interface(DNSystemExceptionClass)
  ['{C267E81E-6E28-500B-A004-6CED6C7E3905}']
  { constructors } 

    {class} function init: DNSemaphoreFullException; overload;
    {class} function init(message: string): DNSemaphoreFullException; overload;
    {class} function init(message: string; innerException: DNException): DNSemaphoreFullException; overload;

  end;

  [DNTypeName('System.Threading.SemaphoreFullException')]
  DNSemaphoreFullException = interface(DNSystemException)
  ['{279F80FF-4350-3938-B48A-0DC995370F92}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSemaphoreFullException = class(TDNGenericImport<DNSemaphoreFullExceptionClass, DNSemaphoreFullException>) end;

  //-------------namespace: System.Threading----------------
  DNSynchronizationLockExceptionClass = interface(DNSystemExceptionClass)
  ['{AB9BE643-29A7-5A61-8AB6-59C71650775F}']
  { constructors } 

    {class} function init: DNSynchronizationLockException; overload;
    {class} function init(message: string): DNSynchronizationLockException; overload;
    {class} function init(message: string; innerException: DNException): DNSynchronizationLockException; overload;

  end;

  [DNTypeName('System.Threading.SynchronizationLockException')]
  DNSynchronizationLockException = interface(DNSystemException)
  ['{AB44E0DA-CE54-3990-92D8-8F843AFEAA2E}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSynchronizationLockException = class(TDNGenericImport<DNSynchronizationLockExceptionClass, DNSynchronizationLockException>) end;

  //-------------namespace: System.Threading----------------
  DNThreadAbortExceptionClass = interface(DNSystemExceptionClass)
  ['{332C6BBB-A273-5150-88A4-23D2D1636EA1}']
  end;

  [DNTypeName('System.Threading.ThreadAbortException')]
  DNThreadAbortException = interface(DNSystemException)
  ['{41F29B3F-74E0-3B3B-85F8-01C1F5C58DA9}']
  { getters & setters } 

    function get_ExceptionState: DNObject;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ExceptionState: DNObject read get_ExceptionState;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNThreadAbortException = class(TDNGenericImport<DNThreadAbortExceptionClass, DNThreadAbortException>) end;

  //-------------namespace: System.Threading----------------
  DNThreadInterruptedExceptionClass = interface(DNSystemExceptionClass)
  ['{B79099E3-8BE9-5270-85ED-07EC6A5B557C}']
  { constructors } 

    {class} function init: DNThreadInterruptedException; overload;
    {class} function init(message: string): DNThreadInterruptedException; overload;
    {class} function init(message: string; innerException: DNException): DNThreadInterruptedException; overload;

  end;

  [DNTypeName('System.Threading.ThreadInterruptedException')]
  DNThreadInterruptedException = interface(DNSystemException)
  ['{1AC1EA8D-C05B-3BE7-A2C2-3D76FF3D6BED}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNThreadInterruptedException = class(TDNGenericImport<DNThreadInterruptedExceptionClass, DNThreadInterruptedException>) end;

  //-------------namespace: System.Threading----------------
  DNThreadStartExceptionClass = interface(DNSystemExceptionClass)
  ['{1B68A70C-338F-5733-BE4F-10A5C07FA281}']
  end;

  [DNTypeName('System.Threading.ThreadStartException')]
  DNThreadStartException = interface(DNSystemException)
  ['{D676D675-D709-3E76-A581-51F815B44083}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNThreadStartException = class(TDNGenericImport<DNThreadStartExceptionClass, DNThreadStartException>) end;

  //-------------namespace: System.Threading----------------
  DNThreadStateExceptionClass = interface(DNSystemExceptionClass)
  ['{35D0ABCC-CF27-5F2F-9530-DC29D49BE06A}']
  { constructors } 

    {class} function init: DNThreadStateException; overload;
    {class} function init(message: string): DNThreadStateException; overload;
    {class} function init(message: string; innerException: DNException): DNThreadStateException; overload;

  end;

  [DNTypeName('System.Threading.ThreadStateException')]
  DNThreadStateException = interface(DNSystemException)
  ['{54255411-43E2-3723-9731-FEBECAA6B980}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNThreadStateException = class(TDNGenericImport<DNThreadStateExceptionClass, DNThreadStateException>) end;

  //-------------namespace: System----------------
  DNTimeoutExceptionClass = interface(DNSystemExceptionClass)
  ['{7E602618-101A-57ED-838C-08CBA2BCA1FD}']
  { constructors } 

    {class} function init: DNTimeoutException; overload;
    {class} function init(message: string): DNTimeoutException; overload;
    {class} function init(message: string; innerException: DNException): DNTimeoutException; overload;

  end;

  [DNTypeName('System.TimeoutException')]
  DNTimeoutException = interface(DNSystemException)
  ['{6B362CA1-08D4-37E6-87F3-6042233AD4E6}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTimeoutException = class(TDNGenericImport<DNTimeoutExceptionClass, DNTimeoutException>) end;

  //-------------namespace: System----------------
  DNTypeInitializationExceptionClass = interface(DNSystemExceptionClass)
  ['{ECC1C993-EB56-5450-8685-F72EB983A325}']
  { constructors } 

    {class} function init(fullTypeName: string; innerException: DNException): DNTypeInitializationException;

  end;

  [DNTypeName('System.TypeInitializationException')]
  DNTypeInitializationException = interface(DNSystemException)
  ['{E59BD20E-E58E-3D94-8F01-0309E43EFB3F}']
  { getters & setters } 

    function get_TypeName: string;
    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TypeName: string read get_TypeName;
    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTypeInitializationException = class(TDNGenericImport<DNTypeInitializationExceptionClass, DNTypeInitializationException>) end;

  //-------------namespace: System----------------
  DNTypeLoadExceptionClass = interface(DNSystemExceptionClass)
  ['{F7859BD4-D6EE-5B9E-ADDF-73AF15D1BC28}']
  { constructors } 

    {class} function init: DNTypeLoadException; overload;
    {class} function init(message: string): DNTypeLoadException; overload;
    {class} function init(message: string; inner: DNException): DNTypeLoadException; overload;

  end;

  [DNTypeName('System.TypeLoadException')]
  DNTypeLoadException = interface(DNSystemException)
  ['{403401F0-9A95-3092-962F-27260076CC14}']
  { getters & setters } 

    function get_Message: string;
    function get_TypeName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property TypeName: string read get_TypeName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTypeLoadException = class(TDNGenericImport<DNTypeLoadExceptionClass, DNTypeLoadException>) end;

  //-------------namespace: System----------------
  DNDllNotFoundExceptionClass = interface(DNTypeLoadExceptionClass)
  ['{34E338F2-76BD-568D-A4E5-6FCFEA8D0B39}']
  { constructors } 

    {class} function init: DNDllNotFoundException; overload;
    {class} function init(message: string): DNDllNotFoundException; overload;
    {class} function init(message: string; inner: DNException): DNDllNotFoundException; overload;

  end;

  [DNTypeName('System.DllNotFoundException')]
  DNDllNotFoundException = interface(DNTypeLoadException)
  ['{DE9F95AA-4B12-3210-BED2-2DCA35562AC5}']
  { getters & setters } 

    function get_Message: string;
    function get_TypeName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property TypeName: string read get_TypeName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDllNotFoundException = class(TDNGenericImport<DNDllNotFoundExceptionClass, DNDllNotFoundException>) end;

  //-------------namespace: System----------------
  DNEntryPointNotFoundExceptionClass = interface(DNTypeLoadExceptionClass)
  ['{ED00BCDF-FF3D-5966-8934-C6290AAE5AAB}']
  { constructors } 

    {class} function init: DNEntryPointNotFoundException; overload;
    {class} function init(message: string): DNEntryPointNotFoundException; overload;
    {class} function init(message: string; inner: DNException): DNEntryPointNotFoundException; overload;

  end;

  [DNTypeName('System.EntryPointNotFoundException')]
  DNEntryPointNotFoundException = interface(DNTypeLoadException)
  ['{9D6552E8-A5C3-37EF-B7CA-088FBEA9DFE2}']
  { getters & setters } 

    function get_Message: string;
    function get_TypeName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property TypeName: string read get_TypeName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNEntryPointNotFoundException = class(TDNGenericImport<DNEntryPointNotFoundExceptionClass, DNEntryPointNotFoundException>) end;

  //-------------namespace: System----------------
  DNTypeAccessExceptionClass = interface(DNTypeLoadExceptionClass)
  ['{BA5FED68-3C79-50FD-91D0-8210F8E0EE97}']
  { constructors } 

    {class} function init: DNTypeAccessException; overload;
    {class} function init(message: string): DNTypeAccessException; overload;
    {class} function init(message: string; inner: DNException): DNTypeAccessException; overload;

  end;

  [DNTypeName('System.TypeAccessException')]
  DNTypeAccessException = interface(DNTypeLoadException)
  ['{14D4FBD3-4059-34EA-9FC5-ABA2093A85AF}']
  { getters & setters } 

    function get_Message: string;
    function get_TypeName: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetBaseException: DNException;
    function ToString: string;
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property TypeName: string read get_TypeName;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTypeAccessException = class(TDNGenericImport<DNTypeAccessExceptionClass, DNTypeAccessException>) end;

  //-------------namespace: System----------------
  DNTypeUnloadedExceptionClass = interface(DNSystemExceptionClass)
  ['{00CCEB47-9B34-5B0C-82F8-C639A0380C1B}']
  { constructors } 

    {class} function init: DNTypeUnloadedException; overload;
    {class} function init(message: string): DNTypeUnloadedException; overload;
    {class} function init(message: string; innerException: DNException): DNTypeUnloadedException; overload;

  end;

  [DNTypeName('System.TypeUnloadedException')]
  DNTypeUnloadedException = interface(DNSystemException)
  ['{3C54180C-9548-34D1-A05D-2CCF0BBF84FC}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTypeUnloadedException = class(TDNGenericImport<DNTypeUnloadedExceptionClass, DNTypeUnloadedException>) end;

  //-------------namespace: System----------------
  DNUnauthorizedAccessExceptionClass = interface(DNSystemExceptionClass)
  ['{AF8571EE-D82F-5B1F-8EC5-9A80F4EEB69B}']
  { constructors } 

    {class} function init: DNUnauthorizedAccessException; overload;
    {class} function init(message: string): DNUnauthorizedAccessException; overload;
    {class} function init(message: string; inner: DNException): DNUnauthorizedAccessException; overload;

  end;

  [DNTypeName('System.UnauthorizedAccessException')]
  DNUnauthorizedAccessException = interface(DNSystemException)
  ['{83A437B5-A366-3849-8858-5CBA1E2829B9}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNUnauthorizedAccessException = class(TDNGenericImport<DNUnauthorizedAccessExceptionClass, DNUnauthorizedAccessException>) end;

  //-------------namespace: System.Threading----------------
  DNLockRecursionExceptionClass = interface(DNExceptionClass)
  ['{21CBD054-2ACF-51CB-AC20-88942582D014}']
  { constructors } 

    {class} function init: DNLockRecursionException; overload;
    {class} function init(message: string): DNLockRecursionException; overload;
    {class} function init(message: string; innerException: DNException): DNLockRecursionException; overload;

  end;

  [DNTypeName('System.Threading.LockRecursionException')]
  DNLockRecursionException = interface(DNException)
  ['{6A5A5080-57B5-34F9-8ADE-E83FD37DC0BC}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNLockRecursionException = class(TDNGenericImport<DNLockRecursionExceptionClass, DNLockRecursionException>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskSchedulerExceptionClass = interface(DNExceptionClass)
  ['{F72150B9-1B11-55AD-B327-37E507EB55B8}']
  { constructors } 

    {class} function init: DNTaskSchedulerException; overload;
    {class} function init(message: string): DNTaskSchedulerException; overload;
    {class} function init(innerException: DNException): DNTaskSchedulerException; overload;
    {class} function init(message: string; innerException: DNException): DNTaskSchedulerException; overload;

  end;

  [DNTypeName('System.Threading.Tasks.TaskSchedulerException')]
  DNTaskSchedulerException = interface(DNException)
  ['{0B457C9C-FE27-3DAD-AF15-09052E7F96D4}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTaskSchedulerException = class(TDNGenericImport<DNTaskSchedulerExceptionClass, DNTaskSchedulerException>) end;

  //-------------namespace: System----------------
  DNTimeZoneNotFoundExceptionClass = interface(DNExceptionClass)
  ['{5664DFE8-9082-57F8-B417-47CAB2F231F6}']
  { constructors } 

    {class} function init: DNTimeZoneNotFoundException; overload;
    {class} function init(message: string): DNTimeZoneNotFoundException; overload;
    {class} function init(message: string; innerException: DNException): DNTimeZoneNotFoundException; overload;

  end;

  [DNTypeName('System.TimeZoneNotFoundException')]
  DNTimeZoneNotFoundException = interface(DNException)
  ['{1E4496C4-D442-306D-8EC4-7EECD987ED59}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DNIDictionary;
    function get_InnerException: DNException;
    function get_TargetSite: DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DNException;
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetType: DNType;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DNIDictionary read get_Data;
    property InnerException: DNException read get_InnerException;
    property TargetSite: DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTimeZoneNotFoundException = class(TDNGenericImport<DNTimeZoneNotFoundExceptionClass, DNTimeZoneNotFoundException>) end;

  //-------------namespace: System----------------
  DNFormattableStringClass = interface(DNObjectClass)
  ['{89D94544-A981-5FAA-BCA3-0CB43B6E9817}']
  { static methods } 

    {class} function Invariant(formattable: DNFormattableString): string;

  end;

  [DNTypeName('System.FormattableString')]
  DNFormattableString = interface(DNIFormattable)
  ['{C893B96B-5FF3-3A6E-90FC-C3568A905559}']
  { getters & setters } 

    function get_Format: string;
    function get_ArgumentCount: Int32;

  { methods } 

    function GetArguments: TArray<DNObject>;
    function GetArgument(index: Int32): DNObject;
    function ToString(formatProvider: DNIFormatProvider): string; overload;
    function ToString: string; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Format: string read get_Format;
    property ArgumentCount: Int32 read get_ArgumentCount;
  end;

  TDNFormattableString = class(TDNGenericImport<DNFormattableStringClass, DNFormattableString>) end;

  //-------------namespace: System----------------
  DNGCClass = interface(DNObjectClass)
  ['{AEA0F993-A910-59FE-AF3B-44B65C0022BE}']
  { static getter & setter } 

    {class} function get_MaxGeneration: Int32;

  { static methods } 

    {class} procedure AddMemoryPressure(bytesAllocated: Int64);
    {class} procedure RemoveMemoryPressure(bytesAllocated: Int64);
    {class} function GetGeneration(obj: DNObject): Int32; overload;
    {class} procedure Collect(generation: Int32); overload;
    {class} procedure Collect; overload;
    {class} procedure Collect(generation: Int32; mode: DNGCCollectionMode); overload;
    {class} procedure Collect(generation: Int32; mode: DNGCCollectionMode; blocking: Boolean); overload;
    {class} procedure Collect(generation: Int32; mode: DNGCCollectionMode; blocking: Boolean; compacting: Boolean); overload;
    {class} function CollectionCount(generation: Int32): Int32;
    {class} procedure KeepAlive(obj: DNObject);
    {class} function GetGeneration(wo: DNWeakReference): Int32; overload;
    {class} procedure WaitForPendingFinalizers;
    {class} procedure SuppressFinalize(obj: DNObject);
    {class} procedure ReRegisterForFinalize(obj: DNObject);
    {class} function GetTotalMemory(forceFullCollection: Boolean): Int64;
    {class} function GetAllocatedBytesForCurrentThread: Int64;
    {class} procedure RegisterForFullGCNotification(maxGenerationThreshold: Int32; largeObjectHeapThreshold: Int32);
    {class} procedure CancelFullGCNotification;
    {class} function WaitForFullGCApproach: DNGCNotificationStatus; overload;
    {class} function WaitForFullGCApproach(millisecondsTimeout: Int32): DNGCNotificationStatus; overload;
    {class} function WaitForFullGCComplete: DNGCNotificationStatus; overload;
    {class} function WaitForFullGCComplete(millisecondsTimeout: Int32): DNGCNotificationStatus; overload;
    {class} function TryStartNoGCRegion(totalSize: Int64): Boolean; overload;
    {class} function TryStartNoGCRegion(totalSize: Int64; lohSize: Int64): Boolean; overload;
    {class} function TryStartNoGCRegion(totalSize: Int64; disallowFullBlockingGC: Boolean): Boolean; overload;
    {class} function TryStartNoGCRegion(totalSize: Int64; lohSize: Int64; disallowFullBlockingGC: Boolean): Boolean; overload;
    {class} procedure EndNoGCRegion;

  { static propertys } 

    {class} property MaxGeneration: Int32 read get_MaxGeneration;
  end;

  [DNTypeName('System.GC')]
  DNGC = interface(DNObject)
  ['{84F744EE-94CF-306A-A437-966E0883A5F4}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNGC = class(TDNGenericImport<DNGCClass, DNGC>) end;

  //-------------namespace: System.Globalization----------------
  DNCalendarClass = interface(DNObjectClass)
  ['{7B5024B0-F3F4-5404-8E58-13ADE4CAFDF3}']
  { static methods } 

    {class} function ReadOnly(calendar: DNCalendar): DNCalendar;

  end;

  [DNTypeName('System.Globalization.Calendar')]
  DNCalendar = interface(DNICloneable)
  ['{D589F3DB-3E12-3745-9235-270CB62673AA}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_IsReadOnly: Boolean;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);

  { methods } 

    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetEra(time: DNDateTime): Int32;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
  end;

  TDNCalendar = class(TDNGenericImport<DNCalendarClass, DNCalendar>)
  public const
   CurrentEra = 0;
  end;

  //-------------namespace: System.Globalization----------------
  DNEastAsianLunisolarCalendarClass = interface(DNCalendarClass)
  ['{726D5B7D-C5C0-5FC8-8A8D-758B6718C676}']
  end;

  [DNTypeName('System.Globalization.EastAsianLunisolarCalendar')]
  DNEastAsianLunisolarCalendar = interface(DNCalendar)
  ['{049E52B2-0B8A-386C-99EE-E353CF88DFA6}']
  { getters & setters } 

    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_IsReadOnly: Boolean;
    function get_Eras: TArray<Int32>;

  { methods } 

    function GetSexagenaryYear(time: DNDateTime): Int32;
    function GetCelestialStem(sexagenaryYear: Int32): Int32;
    function GetTerrestrialBranch(sexagenaryYear: Int32): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetEra(time: DNDateTime): Int32;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Eras: TArray<Int32> read get_Eras;
  end;

  TDNEastAsianLunisolarCalendar = class(TDNGenericImport<DNEastAsianLunisolarCalendarClass, DNEastAsianLunisolarCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNChineseLunisolarCalendarClass = interface(DNEastAsianLunisolarCalendarClass)
  ['{5939D7A9-EFB4-5037-A5AF-ABF7303BB82F}']
  { constructors } 

    {class} function init: DNChineseLunisolarCalendar;

  end;

  [DNTypeName('System.Globalization.ChineseLunisolarCalendar')]
  DNChineseLunisolarCalendar = interface(DNEastAsianLunisolarCalendar)
  ['{2EDC35D6-32D5-306E-A67F-7DA70E78D081}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_Eras: TArray<Int32>;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function GetEra(time: DNDateTime): Int32;
    function GetSexagenaryYear(time: DNDateTime): Int32;
    function GetCelestialStem(sexagenaryYear: Int32): Int32;
    function GetTerrestrialBranch(sexagenaryYear: Int32): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property Eras: TArray<Int32> read get_Eras;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNChineseLunisolarCalendar = class(TDNGenericImport<DNChineseLunisolarCalendarClass, DNChineseLunisolarCalendar>)
  public const
   ChineseEra = 1;
  end;

  //-------------namespace: System.Globalization----------------
  DNJapaneseLunisolarCalendarClass = interface(DNEastAsianLunisolarCalendarClass)
  ['{FE20ED47-13BB-574A-B7F0-8BA28B4B5E2B}']
  { constructors } 

    {class} function init: DNJapaneseLunisolarCalendar;

  end;

  [DNTypeName('System.Globalization.JapaneseLunisolarCalendar')]
  DNJapaneseLunisolarCalendar = interface(DNEastAsianLunisolarCalendar)
  ['{5BA0F965-4BB6-3A7D-936F-DC58AA084BB3}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_Eras: TArray<Int32>;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function GetEra(time: DNDateTime): Int32;
    function GetSexagenaryYear(time: DNDateTime): Int32;
    function GetCelestialStem(sexagenaryYear: Int32): Int32;
    function GetTerrestrialBranch(sexagenaryYear: Int32): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property Eras: TArray<Int32> read get_Eras;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNJapaneseLunisolarCalendar = class(TDNGenericImport<DNJapaneseLunisolarCalendarClass, DNJapaneseLunisolarCalendar>)
  public const
   JapaneseEra = 1;
  end;

  //-------------namespace: System.Globalization----------------
  DNKoreanLunisolarCalendarClass = interface(DNEastAsianLunisolarCalendarClass)
  ['{88706DC4-B372-57E5-81B5-511BF446F5F5}']
  { constructors } 

    {class} function init: DNKoreanLunisolarCalendar;

  end;

  [DNTypeName('System.Globalization.KoreanLunisolarCalendar')]
  DNKoreanLunisolarCalendar = interface(DNEastAsianLunisolarCalendar)
  ['{C5F46886-1916-3A7A-982B-72CED2E949F7}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_Eras: TArray<Int32>;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function GetEra(time: DNDateTime): Int32;
    function GetSexagenaryYear(time: DNDateTime): Int32;
    function GetCelestialStem(sexagenaryYear: Int32): Int32;
    function GetTerrestrialBranch(sexagenaryYear: Int32): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property Eras: TArray<Int32> read get_Eras;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNKoreanLunisolarCalendar = class(TDNGenericImport<DNKoreanLunisolarCalendarClass, DNKoreanLunisolarCalendar>)
  public const
   GregorianEra = 1;
  end;

  //-------------namespace: System.Globalization----------------
  DNTaiwanLunisolarCalendarClass = interface(DNEastAsianLunisolarCalendarClass)
  ['{2FDAC043-6482-5B83-AF08-A2B0667ACE76}']
  { constructors } 

    {class} function init: DNTaiwanLunisolarCalendar;

  end;

  [DNTypeName('System.Globalization.TaiwanLunisolarCalendar')]
  DNTaiwanLunisolarCalendar = interface(DNEastAsianLunisolarCalendar)
  ['{12215331-B498-3536-A00B-9B176A9C71D4}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_Eras: TArray<Int32>;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function GetEra(time: DNDateTime): Int32;
    function GetSexagenaryYear(time: DNDateTime): Int32;
    function GetCelestialStem(sexagenaryYear: Int32): Int32;
    function GetTerrestrialBranch(sexagenaryYear: Int32): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property Eras: TArray<Int32> read get_Eras;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNTaiwanLunisolarCalendar = class(TDNGenericImport<DNTaiwanLunisolarCalendarClass, DNTaiwanLunisolarCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNGregorianCalendarClass = interface(DNCalendarClass)
  ['{3296C1BA-C7C8-57D9-AA8E-9B7CFB5315C3}']
  { constructors } 

    {class} function init: DNGregorianCalendar; overload;
    {class} function init(&type: DNGregorianCalendarTypes): DNGregorianCalendar; overload;

  end;

  [DNTypeName('System.Globalization.GregorianCalendar')]
  DNGregorianCalendar = interface(DNCalendar)
  ['{73047CB0-C598-3A17-AD8B-58C117BF6FE5}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_CalendarType: DNGregorianCalendarTypes;
    procedure set_CalendarType(value: DNGregorianCalendarTypes);
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property CalendarType: DNGregorianCalendarTypes read get_CalendarType write set_CalendarType;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNGregorianCalendar = class(TDNGenericImport<DNGregorianCalendarClass, DNGregorianCalendar>)
  public const
   ADEra = 1;
  end;

  //-------------namespace: System.Globalization----------------
  DNHebrewCalendarClass = interface(DNCalendarClass)
  ['{C85102C8-68C2-5B06-9FDB-2E5EF6B908AD}']
  { constructors } 

    {class} function init: DNHebrewCalendar;

  { static fields getter & setter } 

   function __fakeFieldGet_HebrewEra: Int32;

  { static fields } 

    {class} property HebrewEra: Int32 read __fakeFieldGet_HebrewEra;

  end;

  [DNTypeName('System.Globalization.HebrewCalendar')]
  DNHebrewCalendar = interface(DNCalendar)
  ['{1CF32DD2-AA52-331C-B05F-0733B051A185}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNHebrewCalendar = class(TDNGenericImport<DNHebrewCalendarClass, DNHebrewCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNHijriCalendarClass = interface(DNCalendarClass)
  ['{CB71E449-5CE5-58FD-9D70-3C10C77A08FD}']
  { constructors } 

    {class} function init: DNHijriCalendar;

  { static fields getter & setter } 

   function __fakeFieldGet_HijriEra: Int32;

  { static fields } 

    {class} property HijriEra: Int32 read __fakeFieldGet_HijriEra;

  end;

  [DNTypeName('System.Globalization.HijriCalendar')]
  DNHijriCalendar = interface(DNCalendar)
  ['{6971363B-6329-35C0-A84F-5DBFB739C447}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_HijriAdjustment: Int32;
    procedure set_HijriAdjustment(value: Int32);
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property HijriAdjustment: Int32 read get_HijriAdjustment write set_HijriAdjustment;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNHijriCalendar = class(TDNGenericImport<DNHijriCalendarClass, DNHijriCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNJapaneseCalendarClass = interface(DNCalendarClass)
  ['{2459E53A-69FD-5FC7-8278-D335A3AB94DC}']
  { constructors } 

    {class} function init: DNJapaneseCalendar;

  end;

  [DNTypeName('System.Globalization.JapaneseCalendar')]
  DNJapaneseCalendar = interface(DNCalendar)
  ['{7F460982-EBDD-36A6-938B-A496E514DE40}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNJapaneseCalendar = class(TDNGenericImport<DNJapaneseCalendarClass, DNJapaneseCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNJulianCalendarClass = interface(DNCalendarClass)
  ['{DE5E61B1-20B6-55D6-A7C7-4AEAC0275D11}']
  { constructors } 

    {class} function init: DNJulianCalendar;

  { static fields getter & setter } 

   function __fakeFieldGet_JulianEra: Int32;

  { static fields } 

    {class} property JulianEra: Int32 read __fakeFieldGet_JulianEra;

  end;

  [DNTypeName('System.Globalization.JulianCalendar')]
  DNJulianCalendar = interface(DNCalendar)
  ['{22404C62-2435-3263-9445-DF34CB0D0924}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNJulianCalendar = class(TDNGenericImport<DNJulianCalendarClass, DNJulianCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNKoreanCalendarClass = interface(DNCalendarClass)
  ['{1ED52FB1-A70B-595A-98EB-A58E10768130}']
  { constructors } 

    {class} function init: DNKoreanCalendar;

  end;

  [DNTypeName('System.Globalization.KoreanCalendar')]
  DNKoreanCalendar = interface(DNCalendar)
  ['{6FE21F73-94C9-3ED3-B5F4-9CD587B31F4A}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNKoreanCalendar = class(TDNGenericImport<DNKoreanCalendarClass, DNKoreanCalendar>)
  public const
   KoreanEra = 1;
  end;

  //-------------namespace: System.Globalization----------------
  DNPersianCalendarClass = interface(DNCalendarClass)
  ['{24959A33-E84B-513B-ADA8-8DC6AFA42288}']
  { constructors } 

    {class} function init: DNPersianCalendar;

  { static fields getter & setter } 

   function __fakeFieldGet_PersianEra: Int32;

  { static fields } 

    {class} property PersianEra: Int32 read __fakeFieldGet_PersianEra;

  end;

  [DNTypeName('System.Globalization.PersianCalendar')]
  DNPersianCalendar = interface(DNCalendar)
  ['{83F9FCD2-8566-3298-996B-4424B7F9EFD1}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNPersianCalendar = class(TDNGenericImport<DNPersianCalendarClass, DNPersianCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNTaiwanCalendarClass = interface(DNCalendarClass)
  ['{DC318E45-799B-5E55-BDC7-B3E59F14D2EB}']
  { constructors } 

    {class} function init: DNTaiwanCalendar;

  end;

  [DNTypeName('System.Globalization.TaiwanCalendar')]
  DNTaiwanCalendar = interface(DNCalendar)
  ['{AB5C15A1-64AE-3540-BA5D-66EB84CC9DB8}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNTaiwanCalendar = class(TDNGenericImport<DNTaiwanCalendarClass, DNTaiwanCalendar>) end;

  //-------------namespace: System.Globalization----------------
  DNThaiBuddhistCalendarClass = interface(DNCalendarClass)
  ['{09AE9503-D5A2-53C3-9F80-3FE854717156}']
  { constructors } 

    {class} function init: DNThaiBuddhistCalendar;

  end;

  [DNTypeName('System.Globalization.ThaiBuddhistCalendar')]
  DNThaiBuddhistCalendar = interface(DNCalendar)
  ['{B86DAFCD-6B68-3608-B425-05676163E010}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNThaiBuddhistCalendar = class(TDNGenericImport<DNThaiBuddhistCalendarClass, DNThaiBuddhistCalendar>)
  public const
   ThaiBuddhistEra = 1;
  end;

  //-------------namespace: System.Globalization----------------
  DNUmAlQuraCalendarClass = interface(DNCalendarClass)
  ['{19899448-94F0-5FA7-9B5E-D36BA6886BA5}']
  { constructors } 

    {class} function init: DNUmAlQuraCalendar;

  end;

  [DNTypeName('System.Globalization.UmAlQuraCalendar')]
  DNUmAlQuraCalendar = interface(DNCalendar)
  ['{8423FB37-CD3A-3607-A8E5-30F63F6DD8C9}']
  { getters & setters } 

    function get_MinSupportedDateTime: DNDateTime;
    function get_MaxSupportedDateTime: DNDateTime;
    function get_AlgorithmType: DNCalendarAlgorithmType;
    function get_Eras: TArray<Int32>;
    function get_TwoDigitYearMax: Int32;
    procedure set_TwoDigitYearMax(value: Int32);
    function get_IsReadOnly: Boolean;

  { methods } 

    function AddMonths(time: DNDateTime; months: Int32): DNDateTime;
    function AddYears(time: DNDateTime; years: Int32): DNDateTime;
    function GetDayOfMonth(time: DNDateTime): Int32;
    function GetDayOfWeek(time: DNDateTime): DNDayOfWeek;
    function GetDayOfYear(time: DNDateTime): Int32;
    function GetDaysInMonth(year: Int32; month: Int32; era: Int32): Int32; overload;
    function GetDaysInYear(year: Int32; era: Int32): Int32; overload;
    function GetEra(time: DNDateTime): Int32;
    function GetMonth(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32; era: Int32): Int32; overload;
    function GetYear(time: DNDateTime): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32; era: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32; era: Int32): Int32; overload;
    function IsLeapMonth(year: Int32; month: Int32; era: Int32): Boolean; overload;
    function IsLeapYear(year: Int32; era: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; era: Int32): DNDateTime; overload;
    function ToFourDigitYear(year: Int32): Int32;
    function Clone: DNObject;
    function AddMilliseconds(time: DNDateTime; milliseconds: Double): DNDateTime;
    function AddDays(time: DNDateTime; days: Int32): DNDateTime;
    function AddHours(time: DNDateTime; hours: Int32): DNDateTime;
    function AddMinutes(time: DNDateTime; minutes: Int32): DNDateTime;
    function AddSeconds(time: DNDateTime; seconds: Int32): DNDateTime;
    function AddWeeks(time: DNDateTime; weeks: Int32): DNDateTime;
    function GetDaysInMonth(year: Int32; month: Int32): Int32; overload;
    function GetDaysInYear(year: Int32): Int32; overload;
    function GetHour(time: DNDateTime): Int32;
    function GetMilliseconds(time: DNDateTime): Double;
    function GetMinute(time: DNDateTime): Int32;
    function GetMonthsInYear(year: Int32): Int32; overload;
    function GetSecond(time: DNDateTime): Int32;
    function GetWeekOfYear(time: DNDateTime; rule: DNCalendarWeekRule; firstDayOfWeek: DNDayOfWeek): Int32;
    function IsLeapDay(year: Int32; month: Int32; day: Int32): Boolean; overload;
    function IsLeapMonth(year: Int32; month: Int32): Boolean; overload;
    function GetLeapMonth(year: Int32): Int32; overload;
    function IsLeapYear(year: Int32): Boolean; overload;
    function ToDateTime(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property MinSupportedDateTime: DNDateTime read get_MinSupportedDateTime;
    property MaxSupportedDateTime: DNDateTime read get_MaxSupportedDateTime;
    property AlgorithmType: DNCalendarAlgorithmType read get_AlgorithmType;
    property Eras: TArray<Int32> read get_Eras;
    property TwoDigitYearMax: Int32 read get_TwoDigitYearMax write set_TwoDigitYearMax;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNUmAlQuraCalendar = class(TDNGenericImport<DNUmAlQuraCalendarClass, DNUmAlQuraCalendar>)
  public const
   UmAlQuraEra = 1;
  end;

  //-------------namespace: System.Globalization----------------
  DNCharUnicodeInfoClass = interface(DNObjectClass)
  ['{095016B4-0D44-5B6B-A271-46929BC603B1}']
  { static methods } 

    {class} function GetNumericValue(ch: Char): Double; overload;
    {class} function GetNumericValue(s: string; index: Int32): Double; overload;
    {class} function GetDecimalDigitValue(ch: Char): Int32; overload;
    {class} function GetDecimalDigitValue(s: string; index: Int32): Int32; overload;
    {class} function GetDigitValue(ch: Char): Int32; overload;
    {class} function GetDigitValue(s: string; index: Int32): Int32; overload;
    {class} function GetUnicodeCategory(ch: Char): DNUnicodeCategory; overload;
    {class} function GetUnicodeCategory(s: string; index: Int32): DNUnicodeCategory; overload;
    {class} function GetUnicodeCategory(codePoint: Int32): DNUnicodeCategory; overload;

  end;

  [DNTypeName('System.Globalization.CharUnicodeInfo')]
  DNCharUnicodeInfo = interface(DNObject)
  ['{12648B77-F5DD-3698-8B32-DE13FA5E940F}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNCharUnicodeInfo = class(TDNGenericImport<DNCharUnicodeInfoClass, DNCharUnicodeInfo>) end;

  //-------------namespace: System.Globalization----------------
  DNCompareInfoClass = interface(DNObjectClass)
  ['{2DDB3CB0-1349-54C3-BA76-FE2B70C83A72}']
  { static methods } 

    {class} function GetCompareInfo(culture: Int32; assembly: DNAssembly): DNCompareInfo; overload;
    {class} function GetCompareInfo(name: string; assembly: DNAssembly): DNCompareInfo; overload;
    {class} function GetCompareInfo(culture: Int32): DNCompareInfo; overload;
    {class} function GetCompareInfo(name: string): DNCompareInfo; overload;
    {class} function IsSortable(ch: Char): Boolean; overload;
    {class} function IsSortable(text: string): Boolean; overload;

  end;

  [DNTypeName('System.Globalization.CompareInfo')]
  DNCompareInfo = interface(DNIDeserializationCallback)
  ['{827972C6-C3C6-317C-9364-03D39E6F6BFB}']
  { getters & setters } 

    function get_Name: string;
    function get_Version: DNSortVersion;
    function get_LCID: Int32;

  { methods } 

    function Compare(string1: string; string2: string): Int32; overload;
    function Compare(string1: string; string2: string; options: DNCompareOptions): Int32; overload;
    function Compare(string1: string; offset1: Int32; length1: Int32; string2: string; offset2: Int32; length2: Int32): Int32; overload;
    function Compare(string1: string; offset1: Int32; string2: string; offset2: Int32; options: DNCompareOptions): Int32; overload;
    function Compare(string1: string; offset1: Int32; string2: string; offset2: Int32): Int32; overload;
    function Compare(string1: string; offset1: Int32; length1: Int32; string2: string; offset2: Int32; length2: Int32; options: DNCompareOptions): Int32; overload;
    function IsPrefix(source: string; prefix: string; options: DNCompareOptions): Boolean; overload;
    function IsPrefix(source: string; prefix: string): Boolean; overload;
    function IsSuffix(source: string; suffix: string; options: DNCompareOptions): Boolean; overload;
    function IsSuffix(source: string; suffix: string): Boolean; overload;
    function IndexOf(source: string; value: Char): Int32; overload;
    function IndexOf(source: string; value: string): Int32; overload;
    function IndexOf(source: string; value: Char; options: DNCompareOptions): Int32; overload;
    function IndexOf(source: string; value: string; options: DNCompareOptions): Int32; overload;
    function IndexOf(source: string; value: Char; startIndex: Int32): Int32; overload;
    function IndexOf(source: string; value: string; startIndex: Int32): Int32; overload;
    function IndexOf(source: string; value: Char; startIndex: Int32; options: DNCompareOptions): Int32; overload;
    function IndexOf(source: string; value: string; startIndex: Int32; options: DNCompareOptions): Int32; overload;
    function IndexOf(source: string; value: Char; startIndex: Int32; count: Int32): Int32; overload;
    function IndexOf(source: string; value: string; startIndex: Int32; count: Int32): Int32; overload;
    function IndexOf(source: string; value: Char; startIndex: Int32; count: Int32; options: DNCompareOptions): Int32; overload;
    function IndexOf(source: string; value: string; startIndex: Int32; count: Int32; options: DNCompareOptions): Int32; overload;
    function LastIndexOf(source: string; value: Char): Int32; overload;
    function LastIndexOf(source: string; value: string): Int32; overload;
    function LastIndexOf(source: string; value: Char; options: DNCompareOptions): Int32; overload;
    function LastIndexOf(source: string; value: string; options: DNCompareOptions): Int32; overload;
    function LastIndexOf(source: string; value: Char; startIndex: Int32): Int32; overload;
    function LastIndexOf(source: string; value: string; startIndex: Int32): Int32; overload;
    function LastIndexOf(source: string; value: Char; startIndex: Int32; options: DNCompareOptions): Int32; overload;
    function LastIndexOf(source: string; value: string; startIndex: Int32; options: DNCompareOptions): Int32; overload;
    function LastIndexOf(source: string; value: Char; startIndex: Int32; count: Int32): Int32; overload;
    function LastIndexOf(source: string; value: string; startIndex: Int32; count: Int32): Int32; overload;
    function LastIndexOf(source: string; value: Char; startIndex: Int32; count: Int32; options: DNCompareOptions): Int32; overload;
    function LastIndexOf(source: string; value: string; startIndex: Int32; count: Int32; options: DNCompareOptions): Int32; overload;
    function GetSortKey(source: string; options: DNCompareOptions): DNSortKey; overload;
    function GetSortKey(source: string): DNSortKey; overload;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32; overload;
    function GetHashCode(source: string; options: DNCompareOptions): Int32; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Name: string read get_Name;
    property Version: DNSortVersion read get_Version;
    property LCID: Int32 read get_LCID;
  end;

  TDNCompareInfo = class(TDNGenericImport<DNCompareInfoClass, DNCompareInfo>) end;

  //-------------namespace: System.Globalization----------------
  DNCultureInfoClass = interface(DNObjectClass)
  ['{A80C3FB9-51E9-5046-BCAA-0A651DEDCFAF}']
  { static getter & setter } 

    {class} function get_InstalledUICulture: DNCultureInfo;
    {class} function get_DefaultThreadCurrentCulture: DNCultureInfo;
    {class} procedure set_DefaultThreadCurrentCulture(value: DNCultureInfo);
    {class} function get_DefaultThreadCurrentUICulture: DNCultureInfo;
    {class} procedure set_DefaultThreadCurrentUICulture(value: DNCultureInfo);
    {class} function get_InvariantCulture: DNCultureInfo;
    {class} function get_CurrentCulture: DNCultureInfo;
    {class} procedure set_CurrentCulture(value: DNCultureInfo);
    {class} function get_CurrentUICulture: DNCultureInfo;
    {class} procedure set_CurrentUICulture(value: DNCultureInfo);

  { constructors } 

    {class} function init(name: string): DNCultureInfo; overload;
    {class} function init(name: string; useUserOverride: Boolean): DNCultureInfo; overload;
    {class} function init(culture: Int32): DNCultureInfo; overload;
    {class} function init(culture: Int32; useUserOverride: Boolean): DNCultureInfo; overload;

  { static methods } 

    {class} function CreateSpecificCulture(name: string): DNCultureInfo;
    {class} function GetCultures(types: DNCultureTypes): TArray<DNCultureInfo>;
    {class} function ReadOnly(ci: DNCultureInfo): DNCultureInfo;
    {class} function GetCultureInfo(culture: Int32): DNCultureInfo; overload;
    {class} function GetCultureInfo(name: string): DNCultureInfo; overload;
    {class} function GetCultureInfo(name: string; altName: string): DNCultureInfo; overload;
    {class} function GetCultureInfoByIetfLanguageTag(name: string): DNCultureInfo;

  { static propertys } 

    {class} property InstalledUICulture: DNCultureInfo read get_InstalledUICulture;
    {class} property DefaultThreadCurrentCulture: DNCultureInfo read get_DefaultThreadCurrentCulture write set_DefaultThreadCurrentCulture;
    {class} property DefaultThreadCurrentUICulture: DNCultureInfo read get_DefaultThreadCurrentUICulture write set_DefaultThreadCurrentUICulture;
    {class} property InvariantCulture: DNCultureInfo read get_InvariantCulture;
    {class} property CurrentCulture: DNCultureInfo read get_CurrentCulture write set_CurrentCulture;
    {class} property CurrentUICulture: DNCultureInfo read get_CurrentUICulture write set_CurrentUICulture;
  end;

  [DNTypeName('System.Globalization.CultureInfo')]
  DNCultureInfo = interface(DNIFormatProvider)
  ['{B563DA21-8D09-32A2-962D-8A332EBB8BAB}']
  { getters & setters } 

    function get_Parent: DNCultureInfo;
    function get_LCID: Int32;
    function get_KeyboardLayoutId: Int32;
    function get_Name: string;
    function get_IetfLanguageTag: string;
    function get_DisplayName: string;
    function get_NativeName: string;
    function get_EnglishName: string;
    function get_TwoLetterISOLanguageName: string;
    function get_ThreeLetterISOLanguageName: string;
    function get_ThreeLetterWindowsLanguageName: string;
    function get_CompareInfo: DNCompareInfo;
    function get_TextInfo: DNTextInfo;
    function get_IsNeutralCulture: Boolean;
    function get_CultureTypes: DNCultureTypes;
    function get_NumberFormat: DNNumberFormatInfo;
    procedure set_NumberFormat(value: DNNumberFormatInfo);
    function get_DateTimeFormat: DNDateTimeFormatInfo;
    procedure set_DateTimeFormat(value: DNDateTimeFormatInfo);
    function get_Calendar: DNCalendar;
    function get_OptionalCalendars: TArray<DNCalendar>;
    function get_UseUserOverride: Boolean;
    function get_IsReadOnly: Boolean;

  { methods } 

    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetFormat(formatType: DNType): DNObject;
    procedure ClearCachedData;
    function GetConsoleFallbackUICulture: DNCultureInfo;
    function Clone: DNObject;
    function GetType: DNType;

  { propertys } 

    property Parent: DNCultureInfo read get_Parent;
    property LCID: Int32 read get_LCID;
    property KeyboardLayoutId: Int32 read get_KeyboardLayoutId;
    property Name: string read get_Name;
    property IetfLanguageTag: string read get_IetfLanguageTag;
    property DisplayName: string read get_DisplayName;
    property NativeName: string read get_NativeName;
    property EnglishName: string read get_EnglishName;
    property TwoLetterISOLanguageName: string read get_TwoLetterISOLanguageName;
    property ThreeLetterISOLanguageName: string read get_ThreeLetterISOLanguageName;
    property ThreeLetterWindowsLanguageName: string read get_ThreeLetterWindowsLanguageName;
    property CompareInfo: DNCompareInfo read get_CompareInfo;
    property TextInfo: DNTextInfo read get_TextInfo;
    property IsNeutralCulture: Boolean read get_IsNeutralCulture;
    property CultureTypes: DNCultureTypes read get_CultureTypes;
    property NumberFormat: DNNumberFormatInfo read get_NumberFormat write set_NumberFormat;
    property DateTimeFormat: DNDateTimeFormatInfo read get_DateTimeFormat write set_DateTimeFormat;
    property Calendar: DNCalendar read get_Calendar;
    property OptionalCalendars: TArray<DNCalendar> read get_OptionalCalendars;
    property UseUserOverride: Boolean read get_UseUserOverride;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNCultureInfo = class(TDNGenericImport<DNCultureInfoClass, DNCultureInfo>) end;

  //-------------namespace: System.Globalization----------------
  DNDateTimeFormatInfoClass = interface(DNObjectClass)
  ['{F54E9AFC-D472-5ECD-BCED-23D61FF11B72}']
  { static getter & setter } 

    {class} function get_InvariantInfo: DNDateTimeFormatInfo;
    {class} function get_CurrentInfo: DNDateTimeFormatInfo;

  { constructors } 

    {class} function init: DNDateTimeFormatInfo;

  { static methods } 

    {class} function GetInstance(provider: DNIFormatProvider): DNDateTimeFormatInfo;
    {class} function ReadOnly(dtfi: DNDateTimeFormatInfo): DNDateTimeFormatInfo;

  { static propertys } 

    {class} property InvariantInfo: DNDateTimeFormatInfo read get_InvariantInfo;
    {class} property CurrentInfo: DNDateTimeFormatInfo read get_CurrentInfo;
  end;

  [DNTypeName('System.Globalization.DateTimeFormatInfo')]
  DNDateTimeFormatInfo = interface(DNIFormatProvider)
  ['{71D84472-1A10-3C42-9221-2E19A4AE495A}']
  { getters & setters } 

    function get_AMDesignator: string;
    procedure set_AMDesignator(value: string);
    function get_Calendar: DNCalendar;
    procedure set_Calendar(value: DNCalendar);
    function get_DateSeparator: string;
    procedure set_DateSeparator(value: string);
    function get_FirstDayOfWeek: DNDayOfWeek;
    procedure set_FirstDayOfWeek(value: DNDayOfWeek);
    function get_CalendarWeekRule: DNCalendarWeekRule;
    procedure set_CalendarWeekRule(value: DNCalendarWeekRule);
    function get_FullDateTimePattern: string;
    procedure set_FullDateTimePattern(value: string);
    function get_LongDatePattern: string;
    procedure set_LongDatePattern(value: string);
    function get_LongTimePattern: string;
    procedure set_LongTimePattern(value: string);
    function get_MonthDayPattern: string;
    procedure set_MonthDayPattern(value: string);
    function get_PMDesignator: string;
    procedure set_PMDesignator(value: string);
    function get_RFC1123Pattern: string;
    function get_ShortDatePattern: string;
    procedure set_ShortDatePattern(value: string);
    function get_ShortTimePattern: string;
    procedure set_ShortTimePattern(value: string);
    function get_SortableDateTimePattern: string;
    function get_TimeSeparator: string;
    procedure set_TimeSeparator(value: string);
    function get_UniversalSortableDateTimePattern: string;
    function get_YearMonthPattern: string;
    procedure set_YearMonthPattern(value: string);
    function get_AbbreviatedDayNames: TArray<string>;
    procedure set_AbbreviatedDayNames(value: TArray<string>);
    function get_ShortestDayNames: TArray<string>;
    procedure set_ShortestDayNames(value: TArray<string>);
    function get_DayNames: TArray<string>;
    procedure set_DayNames(value: TArray<string>);
    function get_AbbreviatedMonthNames: TArray<string>;
    procedure set_AbbreviatedMonthNames(value: TArray<string>);
    function get_MonthNames: TArray<string>;
    procedure set_MonthNames(value: TArray<string>);
    function get_IsReadOnly: Boolean;
    function get_NativeCalendarName: string;
    function get_AbbreviatedMonthGenitiveNames: TArray<string>;
    procedure set_AbbreviatedMonthGenitiveNames(value: TArray<string>);
    function get_MonthGenitiveNames: TArray<string>;
    procedure set_MonthGenitiveNames(value: TArray<string>);

  { methods } 

    function GetFormat(formatType: DNType): DNObject;
    function Clone: DNObject;
    function GetEra(eraName: string): Int32;
    function GetEraName(era: Int32): string;
    function GetAbbreviatedEraName(era: Int32): string;
    function GetAbbreviatedDayName(dayofweek: DNDayOfWeek): string;
    function GetShortestDayName(dayOfWeek: DNDayOfWeek): string;
    function GetAllDateTimePatterns: TArray<string>; overload;
    function GetAllDateTimePatterns(format: Char): TArray<string>; overload;
    function GetDayName(dayofweek: DNDayOfWeek): string;
    function GetAbbreviatedMonthName(month: Int32): string;
    function GetMonthName(month: Int32): string;
    procedure SetAllDateTimePatterns(patterns: TArray<string>; format: Char);
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property AMDesignator: string read get_AMDesignator write set_AMDesignator;
    property Calendar: DNCalendar read get_Calendar write set_Calendar;
    property DateSeparator: string read get_DateSeparator write set_DateSeparator;
    property FirstDayOfWeek: DNDayOfWeek read get_FirstDayOfWeek write set_FirstDayOfWeek;
    property CalendarWeekRule: DNCalendarWeekRule read get_CalendarWeekRule write set_CalendarWeekRule;
    property FullDateTimePattern: string read get_FullDateTimePattern write set_FullDateTimePattern;
    property LongDatePattern: string read get_LongDatePattern write set_LongDatePattern;
    property LongTimePattern: string read get_LongTimePattern write set_LongTimePattern;
    property MonthDayPattern: string read get_MonthDayPattern write set_MonthDayPattern;
    property PMDesignator: string read get_PMDesignator write set_PMDesignator;
    property RFC1123Pattern: string read get_RFC1123Pattern;
    property ShortDatePattern: string read get_ShortDatePattern write set_ShortDatePattern;
    property ShortTimePattern: string read get_ShortTimePattern write set_ShortTimePattern;
    property SortableDateTimePattern: string read get_SortableDateTimePattern;
    property TimeSeparator: string read get_TimeSeparator write set_TimeSeparator;
    property UniversalSortableDateTimePattern: string read get_UniversalSortableDateTimePattern;
    property YearMonthPattern: string read get_YearMonthPattern write set_YearMonthPattern;
    property AbbreviatedDayNames: TArray<string> read get_AbbreviatedDayNames write set_AbbreviatedDayNames;
    property ShortestDayNames: TArray<string> read get_ShortestDayNames write set_ShortestDayNames;
    property DayNames: TArray<string> read get_DayNames write set_DayNames;
    property AbbreviatedMonthNames: TArray<string> read get_AbbreviatedMonthNames write set_AbbreviatedMonthNames;
    property MonthNames: TArray<string> read get_MonthNames write set_MonthNames;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property NativeCalendarName: string read get_NativeCalendarName;
    property AbbreviatedMonthGenitiveNames: TArray<string> read get_AbbreviatedMonthGenitiveNames write set_AbbreviatedMonthGenitiveNames;
    property MonthGenitiveNames: TArray<string> read get_MonthGenitiveNames write set_MonthGenitiveNames;
  end;

  TDNDateTimeFormatInfo = class(TDNGenericImport<DNDateTimeFormatInfoClass, DNDateTimeFormatInfo>) end;

  //-------------namespace: System.Globalization----------------
  DNDaylightTimeClass = interface(DNObjectClass)
  ['{70353477-4874-5944-B8A0-B6503E5C7954}']
  { constructors } 

    {class} function init(start: DNDateTime; &end: DNDateTime; delta: DNTimeSpan): DNDaylightTime;

  end;

  [DNTypeName('System.Globalization.DaylightTime')]
  DNDaylightTime = interface(DNObject)
  ['{A3C7282C-BD90-3024-A4C7-861FC0F096CD}']
  { getters & setters } 

    function get_Start: DNDateTime;
    function get_End: DNDateTime;
    function get_Delta: DNTimeSpan;

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Start: DNDateTime read get_Start;
    property &End: DNDateTime read get_End;
    property Delta: DNTimeSpan read get_Delta;
  end;

  TDNDaylightTime = class(TDNGenericImport<DNDaylightTimeClass, DNDaylightTime>) end;

  //-------------namespace: System.Globalization----------------
  DNGlobalizationExtensionsClass = interface(DNObjectClass)
  ['{858077A8-AA70-55E6-9268-9A2ACD4EC0CD}']
  { static methods } 

    {class} function GetStringComparer(compareInfo: DNCompareInfo; options: DNCompareOptions): DNStringComparer;

  end;

  [DNTypeName('System.Globalization.GlobalizationExtensions')]
  DNGlobalizationExtensions = interface(DNObject)
  ['{CA5590E2-0CDA-357F-80D8-68CA760FDA97}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNGlobalizationExtensions = class(TDNGenericImport<DNGlobalizationExtensionsClass, DNGlobalizationExtensions>) end;

  //-------------namespace: System.Globalization----------------
  DNIdnMappingClass = interface(DNObjectClass)
  ['{CB69843E-3CE9-5217-A03C-CEC3677503ED}']
  { constructors } 

    {class} function init: DNIdnMapping;

  end;

  [DNTypeName('System.Globalization.IdnMapping')]
  DNIdnMapping = interface(DNObject)
  ['{DC905120-6843-322F-A4F2-B13F8306356E}']
  { getters & setters } 

    function get_AllowUnassigned: Boolean;
    procedure set_AllowUnassigned(value: Boolean);
    function get_UseStd3AsciiRules: Boolean;
    procedure set_UseStd3AsciiRules(value: Boolean);

  { methods } 

    function GetAscii(unicode: string): string; overload;
    function GetAscii(unicode: string; index: Int32): string; overload;
    function GetAscii(unicode: string; index: Int32; count: Int32): string; overload;
    function GetUnicode(ascii: string): string; overload;
    function GetUnicode(ascii: string; index: Int32): string; overload;
    function GetUnicode(ascii: string; index: Int32; count: Int32): string; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property AllowUnassigned: Boolean read get_AllowUnassigned write set_AllowUnassigned;
    property UseStd3AsciiRules: Boolean read get_UseStd3AsciiRules write set_UseStd3AsciiRules;
  end;

  TDNIdnMapping = class(TDNGenericImport<DNIdnMappingClass, DNIdnMapping>) end;

  //-------------namespace: System.Globalization----------------
  DNNumberFormatInfoClass = interface(DNObjectClass)
  ['{87D57DC6-A6B2-5754-9725-19C141071182}']
  { static getter & setter } 

    {class} function get_InvariantInfo: DNNumberFormatInfo;
    {class} function get_CurrentInfo: DNNumberFormatInfo;

  { constructors } 

    {class} function init: DNNumberFormatInfo;

  { static methods } 

    {class} function GetInstance(formatProvider: DNIFormatProvider): DNNumberFormatInfo;
    {class} function ReadOnly(nfi: DNNumberFormatInfo): DNNumberFormatInfo;

  { static propertys } 

    {class} property InvariantInfo: DNNumberFormatInfo read get_InvariantInfo;
    {class} property CurrentInfo: DNNumberFormatInfo read get_CurrentInfo;
  end;

  [DNTypeName('System.Globalization.NumberFormatInfo')]
  DNNumberFormatInfo = interface(DNIFormatProvider)
  ['{EC8D0A10-5205-31ED-A1CE-3A6806EAB743}']
  { getters & setters } 

    function get_CurrencyDecimalDigits: Int32;
    procedure set_CurrencyDecimalDigits(value: Int32);
    function get_CurrencyDecimalSeparator: string;
    procedure set_CurrencyDecimalSeparator(value: string);
    function get_IsReadOnly: Boolean;
    function get_CurrencyGroupSizes: TArray<Int32>;
    procedure set_CurrencyGroupSizes(value: TArray<Int32>);
    function get_NumberGroupSizes: TArray<Int32>;
    procedure set_NumberGroupSizes(value: TArray<Int32>);
    function get_PercentGroupSizes: TArray<Int32>;
    procedure set_PercentGroupSizes(value: TArray<Int32>);
    function get_CurrencyGroupSeparator: string;
    procedure set_CurrencyGroupSeparator(value: string);
    function get_CurrencySymbol: string;
    procedure set_CurrencySymbol(value: string);
    function get_NaNSymbol: string;
    procedure set_NaNSymbol(value: string);
    function get_CurrencyNegativePattern: Int32;
    procedure set_CurrencyNegativePattern(value: Int32);
    function get_NumberNegativePattern: Int32;
    procedure set_NumberNegativePattern(value: Int32);
    function get_PercentPositivePattern: Int32;
    procedure set_PercentPositivePattern(value: Int32);
    function get_PercentNegativePattern: Int32;
    procedure set_PercentNegativePattern(value: Int32);
    function get_NegativeInfinitySymbol: string;
    procedure set_NegativeInfinitySymbol(value: string);
    function get_NegativeSign: string;
    procedure set_NegativeSign(value: string);
    function get_NumberDecimalDigits: Int32;
    procedure set_NumberDecimalDigits(value: Int32);
    function get_NumberDecimalSeparator: string;
    procedure set_NumberDecimalSeparator(value: string);
    function get_NumberGroupSeparator: string;
    procedure set_NumberGroupSeparator(value: string);
    function get_CurrencyPositivePattern: Int32;
    procedure set_CurrencyPositivePattern(value: Int32);
    function get_PositiveInfinitySymbol: string;
    procedure set_PositiveInfinitySymbol(value: string);
    function get_PositiveSign: string;
    procedure set_PositiveSign(value: string);
    function get_PercentDecimalDigits: Int32;
    procedure set_PercentDecimalDigits(value: Int32);
    function get_PercentDecimalSeparator: string;
    procedure set_PercentDecimalSeparator(value: string);
    function get_PercentGroupSeparator: string;
    procedure set_PercentGroupSeparator(value: string);
    function get_PercentSymbol: string;
    procedure set_PercentSymbol(value: string);
    function get_PerMilleSymbol: string;
    procedure set_PerMilleSymbol(value: string);
    function get_NativeDigits: TArray<string>;
    procedure set_NativeDigits(value: TArray<string>);
    function get_DigitSubstitution: DNDigitShapes;
    procedure set_DigitSubstitution(value: DNDigitShapes);

  { methods } 

    function Clone: DNObject;
    function GetFormat(formatType: DNType): DNObject;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property CurrencyDecimalDigits: Int32 read get_CurrencyDecimalDigits write set_CurrencyDecimalDigits;
    property CurrencyDecimalSeparator: string read get_CurrencyDecimalSeparator write set_CurrencyDecimalSeparator;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property CurrencyGroupSizes: TArray<Int32> read get_CurrencyGroupSizes write set_CurrencyGroupSizes;
    property NumberGroupSizes: TArray<Int32> read get_NumberGroupSizes write set_NumberGroupSizes;
    property PercentGroupSizes: TArray<Int32> read get_PercentGroupSizes write set_PercentGroupSizes;
    property CurrencyGroupSeparator: string read get_CurrencyGroupSeparator write set_CurrencyGroupSeparator;
    property CurrencySymbol: string read get_CurrencySymbol write set_CurrencySymbol;
    property NaNSymbol: string read get_NaNSymbol write set_NaNSymbol;
    property CurrencyNegativePattern: Int32 read get_CurrencyNegativePattern write set_CurrencyNegativePattern;
    property NumberNegativePattern: Int32 read get_NumberNegativePattern write set_NumberNegativePattern;
    property PercentPositivePattern: Int32 read get_PercentPositivePattern write set_PercentPositivePattern;
    property PercentNegativePattern: Int32 read get_PercentNegativePattern write set_PercentNegativePattern;
    property NegativeInfinitySymbol: string read get_NegativeInfinitySymbol write set_NegativeInfinitySymbol;
    property NegativeSign: string read get_NegativeSign write set_NegativeSign;
    property NumberDecimalDigits: Int32 read get_NumberDecimalDigits write set_NumberDecimalDigits;
    property NumberDecimalSeparator: string read get_NumberDecimalSeparator write set_NumberDecimalSeparator;
    property NumberGroupSeparator: string read get_NumberGroupSeparator write set_NumberGroupSeparator;
    property CurrencyPositivePattern: Int32 read get_CurrencyPositivePattern write set_CurrencyPositivePattern;
    property PositiveInfinitySymbol: string read get_PositiveInfinitySymbol write set_PositiveInfinitySymbol;
    property PositiveSign: string read get_PositiveSign write set_PositiveSign;
    property PercentDecimalDigits: Int32 read get_PercentDecimalDigits write set_PercentDecimalDigits;
    property PercentDecimalSeparator: string read get_PercentDecimalSeparator write set_PercentDecimalSeparator;
    property PercentGroupSeparator: string read get_PercentGroupSeparator write set_PercentGroupSeparator;
    property PercentSymbol: string read get_PercentSymbol write set_PercentSymbol;
    property PerMilleSymbol: string read get_PerMilleSymbol write set_PerMilleSymbol;
    property NativeDigits: TArray<string> read get_NativeDigits write set_NativeDigits;
    property DigitSubstitution: DNDigitShapes read get_DigitSubstitution write set_DigitSubstitution;
  end;

  TDNNumberFormatInfo = class(TDNGenericImport<DNNumberFormatInfoClass, DNNumberFormatInfo>) end;

  //-------------namespace: System.Globalization----------------
  DNRegionInfoClass = interface(DNObjectClass)
  ['{3BB58D74-A469-5806-8A60-050D20D6F919}']
  { static getter & setter } 

    {class} function get_CurrentRegion: DNRegionInfo;

  { constructors } 

    {class} function init(name: string): DNRegionInfo; overload;
    {class} function init(culture: Int32): DNRegionInfo; overload;

  { static propertys } 

    {class} property CurrentRegion: DNRegionInfo read get_CurrentRegion;
  end;

  [DNTypeName('System.Globalization.RegionInfo')]
  DNRegionInfo = interface(DNObject)
  ['{AEEB49CE-DE28-3F9D-B932-D2F307543DCD}']
  { getters & setters } 

    function get_Name: string;
    function get_EnglishName: string;
    function get_DisplayName: string;
    function get_NativeName: string;
    function get_TwoLetterISORegionName: string;
    function get_ThreeLetterISORegionName: string;
    function get_ThreeLetterWindowsRegionName: string;
    function get_IsMetric: Boolean;
    function get_GeoId: Int32;
    function get_CurrencyEnglishName: string;
    function get_CurrencyNativeName: string;
    function get_CurrencySymbol: string;
    function get_ISOCurrencySymbol: string;

  { methods } 

    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Name: string read get_Name;
    property EnglishName: string read get_EnglishName;
    property DisplayName: string read get_DisplayName;
    property NativeName: string read get_NativeName;
    property TwoLetterISORegionName: string read get_TwoLetterISORegionName;
    property ThreeLetterISORegionName: string read get_ThreeLetterISORegionName;
    property ThreeLetterWindowsRegionName: string read get_ThreeLetterWindowsRegionName;
    property IsMetric: Boolean read get_IsMetric;
    property GeoId: Int32 read get_GeoId;
    property CurrencyEnglishName: string read get_CurrencyEnglishName;
    property CurrencyNativeName: string read get_CurrencyNativeName;
    property CurrencySymbol: string read get_CurrencySymbol;
    property ISOCurrencySymbol: string read get_ISOCurrencySymbol;
  end;

  TDNRegionInfo = class(TDNGenericImport<DNRegionInfoClass, DNRegionInfo>) end;

  //-------------namespace: System.Globalization----------------
  DNSortKeyClass = interface(DNObjectClass)
  ['{25278DE3-A7D1-51A0-BC21-CDC379695C6F}']
  { static methods } 

    {class} function Compare(sortkey1: DNSortKey; sortkey2: DNSortKey): Int32;

  end;

  [DNTypeName('System.Globalization.SortKey')]
  DNSortKey = interface(DNObject)
  ['{C58EB2BA-AE51-3309-8481-60605F7B7707}']
  { getters & setters } 

    function get_OriginalString: string;
    function get_KeyData: TArray<Byte>;

  { methods } 

    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property OriginalString: string read get_OriginalString;
    property KeyData: TArray<Byte> read get_KeyData;
  end;

  TDNSortKey = class(TDNGenericImport<DNSortKeyClass, DNSortKey>) end;

  //-------------namespace: System.Globalization----------------
  DNSortVersionClass = interface(DNObjectClass)
  ['{BADB8A26-B597-53AD-8805-4E52E9CA4C9B}']
  { constructors } 

    {class} function init(fullVersion: Int32; sortId: DNGuid): DNSortVersion;

  end;

  [DNTypeName('System.Globalization.SortVersion')]
  DNSortVersion = interface(DNObject)
  ['{9FCC514D-CFF6-38B6-ACFB-C1CC771B206D}']
  { getters & setters } 

    function get_FullVersion: Int32;
    function get_SortId: DNGuid;

  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNSortVersion): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property FullVersion: Int32 read get_FullVersion;
    property SortId: DNGuid read get_SortId;
  end;

  TDNSortVersion = class(TDNGenericImport<DNSortVersionClass, DNSortVersion>) end;

  //-------------namespace: System.Globalization----------------
  DNStringInfoClass = interface(DNObjectClass)
  ['{CCAA346C-42BE-525E-A9AD-2A33C0A4C785}']
  { constructors } 

    {class} function init: DNStringInfo; overload;
    {class} function init(value: string): DNStringInfo; overload;

  { static methods } 

    {class} function GetNextTextElement(str: string): string; overload;
    {class} function GetNextTextElement(str: string; index: Int32): string; overload;
    {class} function GetTextElementEnumerator(str: string): DNTextElementEnumerator; overload;
    {class} function GetTextElementEnumerator(str: string; index: Int32): DNTextElementEnumerator; overload;
    {class} function ParseCombiningCharacters(str: string): TArray<Int32>;

  end;

  [DNTypeName('System.Globalization.StringInfo')]
  DNStringInfo = interface(DNObject)
  ['{FC8DCA52-E376-3EDA-8331-6524D56A472E}']
  { getters & setters } 

    function get_String: string;
    procedure set_String(value: string);
    function get_LengthInTextElements: Int32;

  { methods } 

    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function SubstringByTextElements(startingTextElement: Int32): string; overload;
    function SubstringByTextElements(startingTextElement: Int32; lengthInTextElements: Int32): string; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property &String: string read get_String write set_String;
    property LengthInTextElements: Int32 read get_LengthInTextElements;
  end;

  TDNStringInfo = class(TDNGenericImport<DNStringInfoClass, DNStringInfo>) end;

  //-------------namespace: System.Globalization----------------
  DNTextElementEnumeratorClass = interface(DNObjectClass)
  ['{17E7550E-6A79-56D5-8112-BEC55679A0A1}']
  end;

  [DNTypeName('System.Globalization.TextElementEnumerator')]
  DNTextElementEnumerator = interface(DNIEnumerator)
  ['{7F887207-B664-372B-9483-B0628061829D}']
  { getters & setters } 

    function get_Current: DNObject;
    function get_ElementIndex: Int32;

  { methods } 

    function MoveNext: Boolean;
    function GetTextElement: string;
    procedure Reset;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Current: DNObject read get_Current;
    property ElementIndex: Int32 read get_ElementIndex;
  end;

  TDNTextElementEnumerator = class(TDNGenericImport<DNTextElementEnumeratorClass, DNTextElementEnumerator>) end;

  //-------------namespace: System.Globalization----------------
  DNTextInfoClass = interface(DNObjectClass)
  ['{EC4ADF91-360F-58B2-8348-1789CF91A22E}']
  { static methods } 

    {class} function ReadOnly(textInfo: DNTextInfo): DNTextInfo;

  end;

  [DNTypeName('System.Globalization.TextInfo')]
  DNTextInfo = interface(DNICloneable)
  ['{0AFF26E6-B8D3-3618-B443-6D0681FD5681}']
  { getters & setters } 

    function get_ANSICodePage: Int32;
    function get_OEMCodePage: Int32;
    function get_MacCodePage: Int32;
    function get_EBCDICCodePage: Int32;
    function get_LCID: Int32;
    function get_CultureName: string;
    function get_IsReadOnly: Boolean;
    function get_ListSeparator: string;
    procedure set_ListSeparator(value: string);
    function get_IsRightToLeft: Boolean;

  { methods } 

    function Clone: DNObject;
    function ToLower(c: Char): Char; overload;
    function ToLower(str: string): string; overload;
    function ToUpper(c: Char): Char; overload;
    function ToUpper(str: string): string; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function ToTitleCase(str: string): string;
    function GetType: DNType;

  { propertys } 

    property ANSICodePage: Int32 read get_ANSICodePage;
    property OEMCodePage: Int32 read get_OEMCodePage;
    property MacCodePage: Int32 read get_MacCodePage;
    property EBCDICCodePage: Int32 read get_EBCDICCodePage;
    property LCID: Int32 read get_LCID;
    property CultureName: string read get_CultureName;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property ListSeparator: string read get_ListSeparator write set_ListSeparator;
    property IsRightToLeft: Boolean read get_IsRightToLeft;
  end;

  TDNTextInfo = class(TDNGenericImport<DNTextInfoClass, DNTextInfo>) end;

  //-------------namespace: System.IO----------------
  DNBinaryReaderClass = interface(DNObjectClass)
  ['{BAAA15AC-1C2E-587E-A5B8-AF96EEF43F78}']
  { constructors } 

    {class} function init(input: DNStream): DNBinaryReader; overload;
    {class} function init(input: DNStream; encoding: DNEncoding): DNBinaryReader; overload;
    {class} function init(input: DNStream; encoding: DNEncoding; leaveOpen: Boolean): DNBinaryReader; overload;

  end;

  [DNTypeName('System.IO.BinaryReader')]
  DNBinaryReader = interface(DNIDisposable)
  ['{E55E74EF-80CC-339F-92FB-A42D64C4D55C}']
  { getters & setters } 

    function get_BaseStream: DNStream;

  { methods } 

    procedure Close;
    procedure Dispose;
    function PeekChar: Int32;
    function Read: Int32; overload;
    function ReadBoolean: Boolean;
    function ReadByte: Byte;
    function ReadSByte: SByte;
    function ReadChar: Char;
    function ReadInt16: Int16;
    function ReadUInt16: UInt16;
    function ReadInt32: Int32;
    function ReadUInt32: UInt32;
    function ReadInt64: Int64;
    function ReadUInt64: UInt64;
    function ReadSingle: Single;
    function ReadDouble: Double;
    function ReadDecimal: DNDecimal;
    function ReadString: string;
    function Read(buffer: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function Read(buffer: DNSpan<Char>): Int32; overload;
    function ReadChars(count: Int32): TArray<Char>;
    function Read(buffer: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    function Read(buffer: DNSpan<Byte>): Int32; overload;
    function ReadBytes(count: Int32): TArray<Byte>;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property BaseStream: DNStream read get_BaseStream;
  end;

  TDNBinaryReader = class(TDNGenericImport<DNBinaryReaderClass, DNBinaryReader>) end;

  //-------------namespace: System.IO----------------
  DNBinaryWriterClass = interface(DNObjectClass)
  ['{5E493469-AEBA-5F5F-9B78-468C7617DDBD}']
  { constructors } 

    {class} function init(output: DNStream): DNBinaryWriter; overload;
    {class} function init(output: DNStream; encoding: DNEncoding): DNBinaryWriter; overload;
    {class} function init(output: DNStream; encoding: DNEncoding; leaveOpen: Boolean): DNBinaryWriter; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNBinaryWriter;

  { static fields } 

    {class} property Null: DNBinaryWriter read __fakeFieldGet_Null;

  end;

  [DNTypeName('System.IO.BinaryWriter')]
  DNBinaryWriter = interface(DNIDisposable)
  ['{35BF2575-3E5F-3FE1-80BE-A52ED3350AAE}']
  { getters & setters } 

    function get_BaseStream: DNStream;

  { methods } 

    procedure Close;
    procedure Dispose;
    procedure Flush;
    function Seek(offset: Int32; origin: DNSeekOrigin): Int64;
    procedure Write(value: Boolean); overload;
    procedure Write(value: Byte); overload;
    procedure Write(value: SByte); overload;
    procedure Write(buffer: TArray<Byte>); overload;
    procedure Write(buffer: TArray<Byte>; index: Int32; count: Int32); overload;
    procedure Write(ch: Char); overload;
    procedure Write(chars: TArray<Char>); overload;
    procedure Write(chars: TArray<Char>; index: Int32; count: Int32); overload;
    procedure Write(value: Double); overload;
    procedure Write(value: DNDecimal); overload;
    procedure Write(value: Int16); overload;
    procedure Write(value: UInt16); overload;
    procedure Write(value: Int32); overload;
    procedure Write(value: UInt32); overload;
    procedure Write(value: Int64); overload;
    procedure Write(value: UInt64); overload;
    procedure Write(value: Single); overload;
    procedure Write(value: string); overload;
    procedure Write(buffer: DNReadOnlySpan<Byte>); overload;
    procedure Write(chars: DNReadOnlySpan<Char>); overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property BaseStream: DNStream read get_BaseStream;
  end;

  TDNBinaryWriter = class(TDNGenericImport<DNBinaryWriterClass, DNBinaryWriter>) end;

  //-------------namespace: System.IO----------------
  DNPathClass = interface(DNObjectClass)
  ['{43921ED3-C355-55AA-96D4-7E84528FF085}']
  { static fields getter & setter } 

   function __fakeFieldGet_DirectorySeparatorChar: Char;
   function __fakeFieldGet_AltDirectorySeparatorChar: Char;
   function __fakeFieldGet_VolumeSeparatorChar: Char;
   function __fakeFieldGet_PathSeparator: Char;
   function __fakeFieldGet_InvalidPathChars: TArray<Char>;

  { static fields } 

    {class} property DirectorySeparatorChar: Char read __fakeFieldGet_DirectorySeparatorChar;
    {class} property AltDirectorySeparatorChar: Char read __fakeFieldGet_AltDirectorySeparatorChar;
    {class} property VolumeSeparatorChar: Char read __fakeFieldGet_VolumeSeparatorChar;
    {class} property PathSeparator: Char read __fakeFieldGet_PathSeparator;
    {class} property InvalidPathChars: TArray<Char> read __fakeFieldGet_InvalidPathChars;

  { static methods } 

    {class} function ChangeExtension(path: string; extension: string): string;
    {class} function GetDirectoryName(path: string): string; overload;
    {class} function GetDirectoryName(path: DNReadOnlySpan<Char>): DNReadOnlySpan<Char>; overload;
    {class} function GetExtension(path: string): string; overload;
    {class} function GetExtension(path: DNReadOnlySpan<Char>): DNReadOnlySpan<Char>; overload;
    {class} function GetFileName(path: string): string; overload;
    {class} function GetFileName(path: DNReadOnlySpan<Char>): DNReadOnlySpan<Char>; overload;
    {class} function GetFileNameWithoutExtension(path: string): string; overload;
    {class} function GetFileNameWithoutExtension(path: DNReadOnlySpan<Char>): DNReadOnlySpan<Char>; overload;
    {class} function GetRandomFileName: string;
    {class} function IsPathFullyQualified(path: string): Boolean; overload;
    {class} function IsPathFullyQualified(path: DNReadOnlySpan<Char>): Boolean; overload;
    {class} function HasExtension(path: string): Boolean; overload;
    {class} function HasExtension(path: DNReadOnlySpan<Char>): Boolean; overload;
    {class} function Combine(path1: string; path2: string): string; overload;
    {class} function Combine(path1: string; path2: string; path3: string): string; overload;
    {class} function Combine(path1: string; path2: string; path3: string; path4: string): string; overload;
    {class} function Combine(paths: TArray<string>): string; overload;
    {class} function Join(path1: DNReadOnlySpan<Char>; path2: DNReadOnlySpan<Char>): string; overload;
    {class} function Join(path1: DNReadOnlySpan<Char>; path2: DNReadOnlySpan<Char>; path3: DNReadOnlySpan<Char>): string; overload;
    {class} function TryJoin(path1: DNReadOnlySpan<Char>; path2: DNReadOnlySpan<Char>; destination: DNSpan<Char>; out charsWritten: Int32): Boolean; overload;
    {class} function TryJoin(path1: DNReadOnlySpan<Char>; path2: DNReadOnlySpan<Char>; path3: DNReadOnlySpan<Char>; destination: DNSpan<Char>; out charsWritten: Int32): Boolean; overload;
    {class} function GetRelativePath(relativeTo: string; path: string): string;
    {class} function GetInvalidFileNameChars: TArray<Char>;
    {class} function GetInvalidPathChars: TArray<Char>;
    {class} function GetFullPath(path: string): string; overload;
    {class} function GetFullPath(path: string; basePath: string): string; overload;
    {class} function GetTempPath: string;
    {class} function GetTempFileName: string;
    {class} function IsPathRooted(path: string): Boolean; overload;
    {class} function IsPathRooted(path: DNReadOnlySpan<Char>): Boolean; overload;
    {class} function GetPathRoot(path: string): string; overload;
    {class} function GetPathRoot(path: DNReadOnlySpan<Char>): DNReadOnlySpan<Char>; overload;

  end;

  [DNTypeName('System.IO.Path')]
  DNPath = interface(DNObject)
  ['{FE119D80-FD2F-39AB-834B-52050061904E}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNPath = class(TDNGenericImport<DNPathClass, DNPath>) end;

  //-------------namespace: System.IO----------------
  DNUnmanagedMemoryAccessorClass = interface(DNObjectClass)
  ['{E77B047E-57B4-5D3E-BD2D-954DF09E0203}']
  { constructors } 

    {class} function init(buffer: DNSafeBuffer; offset: Int64; capacity: Int64): DNUnmanagedMemoryAccessor; overload;
    {class} function init(buffer: DNSafeBuffer; offset: Int64; capacity: Int64; access: DNFileAccess): DNUnmanagedMemoryAccessor; overload;

  end;

  [DNTypeName('System.IO.UnmanagedMemoryAccessor')]
  DNUnmanagedMemoryAccessor = interface(DNIDisposable)
  ['{444EDB6F-D8DF-3FBB-8B9F-E3F4B00E7DEE}']
  { getters & setters } 

    function get_Capacity: Int64;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;

  { methods } 

    procedure Dispose;
    function ReadBoolean(position: Int64): Boolean;
    function ReadByte(position: Int64): Byte;
    function ReadChar(position: Int64): Char;
    function ReadInt16(position: Int64): Int16;
    function ReadInt32(position: Int64): Int32;
    function ReadInt64(position: Int64): Int64;
    function ReadDecimal(position: Int64): DNDecimal;
    function ReadSingle(position: Int64): Single;
    function ReadDouble(position: Int64): Double;
    function ReadSByte(position: Int64): SByte;
    function ReadUInt16(position: Int64): UInt16;
    function ReadUInt32(position: Int64): UInt32;
    function ReadUInt64(position: Int64): UInt64;
    procedure Write(position: Int64; value: Boolean); overload;
    procedure Write(position: Int64; value: Byte); overload;
    procedure Write(position: Int64; value: Char); overload;
    procedure Write(position: Int64; value: Int16); overload;
    procedure Write(position: Int64; value: Int32); overload;
    procedure Write(position: Int64; value: Int64); overload;
    procedure Write(position: Int64; value: DNDecimal); overload;
    procedure Write(position: Int64; value: Single); overload;
    procedure Write(position: Int64; value: Double); overload;
    procedure Write(position: Int64; value: SByte); overload;
    procedure Write(position: Int64; value: UInt16); overload;
    procedure Write(position: Int64; value: UInt32); overload;
    procedure Write(position: Int64; value: UInt64); overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Capacity: Int64 read get_Capacity;
    property CanRead: Boolean read get_CanRead;
    property CanWrite: Boolean read get_CanWrite;
  end;

  TDNUnmanagedMemoryAccessor = class(TDNGenericImport<DNUnmanagedMemoryAccessorClass, DNUnmanagedMemoryAccessor>) end;

  //-------------namespace: System----------------
  DNLazyClass<T> = interface(DNObjectClass)
  ['{BD7A3DDD-37DD-5E2D-BB2B-635CCD853B1D}']
  { constructors } 

    {class} function init: DNLazy<T>; overload;
    {class} function init(value: T): DNLazy<T>; overload;
    {class} function init(valueFactory: DNFunc<T>): DNLazy<T>; overload;
    {class} function init(isThreadSafe: Boolean): DNLazy<T>; overload;
    {class} function init(mode: DNLazyThreadSafetyMode): DNLazy<T>; overload;
    {class} function init(valueFactory: DNFunc<T>; isThreadSafe: Boolean): DNLazy<T>; overload;
    {class} function init(valueFactory: DNFunc<T>; mode: DNLazyThreadSafetyMode): DNLazy<T>; overload;

  end;

  [DNTypeName('System.Lazy`1')]
  DNLazy<T> = interface(DNObject)
  ['{59F31738-1FC5-35A0-98F4-E6DF094631DF}']
  { getters & setters } 

    function get_IsValueCreated: Boolean;
    function get_Value: T;

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property IsValueCreated: Boolean read get_IsValueCreated;
    property Value: T read get_Value;
  end;

  TDNLazy<T> = class(TDNGenericImport<DNLazyClass<T>, DNLazy<T>>) end;

  //-------------namespace: System----------------
  DNMarshalByRefObjectClass = interface(DNObjectClass)
  ['{9331FE40-D43A-5B16-8678-F6A88C0821EC}']
  end;

  [DNTypeName('System.MarshalByRefObject')]
  DNMarshalByRefObject = interface(DNObject)
  ['{7E441DF1-B249-326C-A937-1D5423BEBF04}']
  { methods } 

    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNMarshalByRefObject = class(TDNGenericImport<DNMarshalByRefObjectClass, DNMarshalByRefObject>) end;

  //-------------namespace: System.IO----------------
  DNStreamClass = interface(DNMarshalByRefObjectClass)
  ['{F9495770-92D4-553D-A647-653F298DB02D}']
  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNStream;

  { static fields } 

    {class} property Null: DNStream read __fakeFieldGet_Null;

  { static methods } 

    {class} function Synchronized(stream: DNStream): DNStream;

  end;

  [DNTypeName('System.IO.Stream')]
  DNStream = interface(DNMarshalByRefObject)
  ['{0BD206B4-8AD7-318C-A95A-756AD66556D6}']
  { getters & setters } 

    function get_CanRead: Boolean;
    function get_CanSeek: Boolean;
    function get_CanTimeout: Boolean;
    function get_CanWrite: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    function CopyToAsync(destination: DNStream): DNTask; overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32): DNTask; overload;
    function CopyToAsync(destination: DNStream; cancellationToken: DNCancellationToken): DNTask; overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    procedure CopyTo(destination: DNStream); overload;
    procedure CopyTo(destination: DNStream; bufferSize: Int32); overload;
    procedure Close;
    procedure Dispose;
    procedure Flush;
    function FlushAsync: DNTask; overload;
    function FlushAsync(cancellationToken: DNCancellationToken): DNTask; overload;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    function EndRead(asyncResult: DNIAsyncResult): Int32;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask<Int32>; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask<Int32>; overload;
    function ReadAsync(buffer: DNMemory<Byte>; cancellationToken: DNCancellationToken): DNValueTask<Int32>; overload;
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    procedure EndWrite(asyncResult: DNIAsyncResult);
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    function WriteAsync(buffer: DNReadOnlyMemory<Byte>; cancellationToken: DNCancellationToken): DNValueTask; overload;
    function Seek(offset: Int64; origin: DNSeekOrigin): Int64;
    procedure SetLength(value: Int64);
    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32; overload;
    function Read(buffer: DNSpan<Byte>): Int32; overload;
    function ReadByte: Int32;
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32); overload;
    procedure Write(buffer: DNReadOnlySpan<Byte>); overload;
    procedure WriteByte(value: Byte);
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property CanRead: Boolean read get_CanRead;
    property CanSeek: Boolean read get_CanSeek;
    property CanTimeout: Boolean read get_CanTimeout;
    property CanWrite: Boolean read get_CanWrite;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position write set_Position;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNStream = class(TDNGenericImport<DNStreamClass, DNStream>) end;

  //-------------namespace: System.IO----------------
  DNFileStreamClass = interface(DNStreamClass)
  ['{52B2E581-02A5-5076-9919-35600B45B16D}']
  { constructors } 

    {class} function init(handle: IntPtr; access: DNFileAccess): DNFileStream; overload;
    {class} function init(handle: IntPtr; access: DNFileAccess; ownsHandle: Boolean): DNFileStream; overload;
    {class} function init(handle: IntPtr; access: DNFileAccess; ownsHandle: Boolean; bufferSize: Int32): DNFileStream; overload;
    {class} function init(handle: IntPtr; access: DNFileAccess; ownsHandle: Boolean; bufferSize: Int32; isAsync: Boolean): DNFileStream; overload;
    {class} function init(handle: DNSafeFileHandle; access: DNFileAccess): DNFileStream; overload;
    {class} function init(handle: DNSafeFileHandle; access: DNFileAccess; bufferSize: Int32): DNFileStream; overload;
    {class} function init(handle: DNSafeFileHandle; access: DNFileAccess; bufferSize: Int32; isAsync: Boolean): DNFileStream; overload;
    {class} function init(path: string; mode: DNFileMode): DNFileStream; overload;
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess): DNFileStream; overload;
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess; share: DNFileShare): DNFileStream; overload;
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess; share: DNFileShare; bufferSize: Int32): DNFileStream; overload;
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess; share: DNFileShare; bufferSize: Int32; useAsync: Boolean): DNFileStream; overload;
    {class} function init(path: string; mode: DNFileMode; access: DNFileAccess; share: DNFileShare; bufferSize: Int32; options: DNFileOptions): DNFileStream; overload;

  end;

  [DNTypeName('System.IO.FileStream')]
  DNFileStream = interface(DNStream)
  ['{00A44B0A-F7ED-383A-B825-597C280BDA6C}']
  { getters & setters } 

    function get_Handle: IntPtr;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_SafeFileHandle: DNSafeFileHandle;
    function get_Name: string;
    function get_IsAsync: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_CanSeek: Boolean;
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    procedure Lock(position: Int64; length: Int64);
    procedure Unlock(position: Int64; length: Int64);
    function FlushAsync(cancellationToken: DNCancellationToken): DNTask; overload;
    function Read(&array: TArray<Byte>; offset: Int32; count: Int32): Int32; overload;
    function Read(buffer: DNSpan<Byte>): Int32; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask<Int32>; overload;
    function ReadAsync(buffer: DNMemory<Byte>; cancellationToken: DNCancellationToken): DNValueTask<Int32>; overload;
    procedure Write(&array: TArray<Byte>; offset: Int32; count: Int32); overload;
    procedure Write(buffer: DNReadOnlySpan<Byte>); overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    function WriteAsync(buffer: DNReadOnlyMemory<Byte>; cancellationToken: DNCancellationToken): DNValueTask; overload;
    procedure Flush; overload;
    procedure Flush(flushToDisk: Boolean); overload;
    procedure SetLength(value: Int64);
    function ReadByte: Int32;
    procedure WriteByte(value: Byte);
    function BeginRead(&array: TArray<Byte>; offset: Int32; numBytes: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    function BeginWrite(&array: TArray<Byte>; offset: Int32; numBytes: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    function EndRead(asyncResult: DNIAsyncResult): Int32;
    procedure EndWrite(asyncResult: DNIAsyncResult);
    function Seek(offset: Int64; origin: DNSeekOrigin): Int64;
    function CopyToAsync(destination: DNStream; bufferSize: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    function CopyToAsync(destination: DNStream): DNTask; overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32): DNTask; overload;
    function CopyToAsync(destination: DNStream; cancellationToken: DNCancellationToken): DNTask; overload;
    procedure CopyTo(destination: DNStream); overload;
    procedure CopyTo(destination: DNStream; bufferSize: Int32); overload;
    procedure Close;
    procedure Dispose;
    function FlushAsync: DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Handle: IntPtr read get_Handle;
    property CanRead: Boolean read get_CanRead;
    property CanWrite: Boolean read get_CanWrite;
    property SafeFileHandle: DNSafeFileHandle read get_SafeFileHandle;
    property Name: string read get_Name;
    property IsAsync: Boolean read get_IsAsync;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position write set_Position;
    property CanSeek: Boolean read get_CanSeek;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNFileStream = class(TDNGenericImport<DNFileStreamClass, DNFileStream>) end;

  //-------------namespace: System.IO----------------
  DNMemoryStreamClass = interface(DNStreamClass)
  ['{EC2C10F1-442E-588A-B4A6-C2E3D7FA1AF7}']
  { constructors } 

    {class} function init: DNMemoryStream; overload;
    {class} function init(capacity: Int32): DNMemoryStream; overload;
    {class} function init(buffer: TArray<Byte>): DNMemoryStream; overload;
    {class} function init(buffer: TArray<Byte>; writable: Boolean): DNMemoryStream; overload;
    {class} function init(buffer: TArray<Byte>; index: Int32; count: Int32): DNMemoryStream; overload;
    {class} function init(buffer: TArray<Byte>; index: Int32; count: Int32; writable: Boolean): DNMemoryStream; overload;
    {class} function init(buffer: TArray<Byte>; index: Int32; count: Int32; writable: Boolean; publiclyVisible: Boolean): DNMemoryStream; overload;

  end;

  [DNTypeName('System.IO.MemoryStream')]
  DNMemoryStream = interface(DNStream)
  ['{C1E79016-A168-37DB-81F5-8AE771AC8786}']
  { getters & setters } 

    function get_CanRead: Boolean;
    function get_CanSeek: Boolean;
    function get_CanWrite: Boolean;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    procedure Flush;
    function FlushAsync(cancellationToken: DNCancellationToken): DNTask; overload;
    function GetBuffer: TArray<Byte>;
    function TryGetBuffer(out buffer: DNArraySegment<Byte>): Boolean;
    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32; overload;
    function Read(buffer: DNSpan<Byte>): Int32; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask<Int32>; overload;
    function ReadAsync(buffer: DNMemory<Byte>; cancellationToken: DNCancellationToken): DNValueTask<Int32>; overload;
    function ReadByte: Int32;
    procedure CopyTo(destination: DNStream; bufferSize: Int32); overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    function Seek(offset: Int64; loc: DNSeekOrigin): Int64;
    procedure SetLength(value: Int64);
    function ToArray: TArray<Byte>;
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32); overload;
    procedure Write(buffer: DNReadOnlySpan<Byte>); overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    function WriteAsync(buffer: DNReadOnlyMemory<Byte>; cancellationToken: DNCancellationToken): DNValueTask; overload;
    procedure WriteByte(value: Byte);
    procedure WriteTo(stream: DNStream);
    function CopyToAsync(destination: DNStream): DNTask; overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32): DNTask; overload;
    function CopyToAsync(destination: DNStream; cancellationToken: DNCancellationToken): DNTask; overload;
    procedure CopyTo(destination: DNStream); overload;
    procedure Close;
    procedure Dispose;
    function FlushAsync: DNTask; overload;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    function EndRead(asyncResult: DNIAsyncResult): Int32;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask<Int32>; overload;
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    procedure EndWrite(asyncResult: DNIAsyncResult);
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property CanRead: Boolean read get_CanRead;
    property CanSeek: Boolean read get_CanSeek;
    property CanWrite: Boolean read get_CanWrite;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position write set_Position;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNMemoryStream = class(TDNGenericImport<DNMemoryStreamClass, DNMemoryStream>) end;

  //-------------namespace: System.IO----------------
  DNUnmanagedMemoryStreamClass = interface(DNStreamClass)
  ['{C45BDACF-160A-51D8-8B87-A9A949F4081A}']
  { constructors } 

    {class} function init(buffer: DNSafeBuffer; offset: Int64; length: Int64): DNUnmanagedMemoryStream; overload;
    {class} function init(buffer: DNSafeBuffer; offset: Int64; length: Int64; access: DNFileAccess): DNUnmanagedMemoryStream; overload;
    {class} function init(pointer: PByte; length: Int64): DNUnmanagedMemoryStream; overload;
    {class} function init(pointer: PByte; length: Int64; capacity: Int64; access: DNFileAccess): DNUnmanagedMemoryStream; overload;

  end;

  [DNTypeName('System.IO.UnmanagedMemoryStream')]
  DNUnmanagedMemoryStream = interface(DNStream)
  ['{88D641FA-F4A9-3477-AE97-5B9FA77427E8}']
  { getters & setters } 

    function get_CanRead: Boolean;
    function get_CanSeek: Boolean;
    function get_CanWrite: Boolean;
    function get_Length: Int64;
    function get_Capacity: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_PositionPointer: PByte;
    procedure set_PositionPointer(value: PByte);
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    procedure Flush;
    function FlushAsync(cancellationToken: DNCancellationToken): DNTask; overload;
    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32; overload;
    function Read(buffer: DNSpan<Byte>): Int32; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask<Int32>; overload;
    function ReadAsync(buffer: DNMemory<Byte>; cancellationToken: DNCancellationToken): DNValueTask<Int32>; overload;
    function ReadByte: Int32;
    function Seek(offset: Int64; loc: DNSeekOrigin): Int64;
    procedure SetLength(value: Int64);
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32); overload;
    procedure Write(buffer: DNReadOnlySpan<Byte>); overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    function WriteAsync(buffer: DNReadOnlyMemory<Byte>; cancellationToken: DNCancellationToken): DNValueTask; overload;
    procedure WriteByte(value: Byte);
    function CopyToAsync(destination: DNStream): DNTask; overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32): DNTask; overload;
    function CopyToAsync(destination: DNStream; cancellationToken: DNCancellationToken): DNTask; overload;
    function CopyToAsync(destination: DNStream; bufferSize: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    procedure CopyTo(destination: DNStream); overload;
    procedure CopyTo(destination: DNStream; bufferSize: Int32); overload;
    procedure Close;
    procedure Dispose;
    function FlushAsync: DNTask; overload;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    function EndRead(asyncResult: DNIAsyncResult): Int32;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask<Int32>; overload;
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DNAsyncCallback; state: DNObject): DNIAsyncResult;
    procedure EndWrite(asyncResult: DNIAsyncResult);
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DNTask; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property CanRead: Boolean read get_CanRead;
    property CanSeek: Boolean read get_CanSeek;
    property CanWrite: Boolean read get_CanWrite;
    property Length: Int64 read get_Length;
    property Capacity: Int64 read get_Capacity;
    property Position: Int64 read get_Position write set_Position;
    property PositionPointer: PByte read get_PositionPointer write set_PositionPointer;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNUnmanagedMemoryStream = class(TDNGenericImport<DNUnmanagedMemoryStreamClass, DNUnmanagedMemoryStream>) end;

  //-------------namespace: System.IO----------------
  DNTextReaderClass = interface(DNMarshalByRefObjectClass)
  ['{6D073F9A-6183-5C41-954A-68BE383A8948}']
  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNTextReader;

  { static fields } 

    {class} property Null: DNTextReader read __fakeFieldGet_Null;

  { static methods } 

    {class} function Synchronized(reader: DNTextReader): DNTextReader;

  end;

  [DNTypeName('System.IO.TextReader')]
  DNTextReader = interface(DNMarshalByRefObject)
  ['{111EC6F3-31A8-30FF-8C04-2AE56C48A3E8}']
  { methods } 

    procedure Close;
    procedure Dispose;
    function Peek: Int32;
    function Read: Int32; overload;
    function Read(buffer: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function Read(buffer: DNSpan<Char>): Int32; overload;
    function ReadToEnd: string;
    function ReadBlock(buffer: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function ReadBlock(buffer: DNSpan<Char>): Int32; overload;
    function ReadLine: string;
    function ReadLineAsync: DNTask<string>;
    function ReadToEndAsync: DNTask<string>;
    function ReadAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask<Int32>; overload;
    function ReadAsync(buffer: DNMemory<Char>; cancellationToken: DNCancellationToken): DNValueTask<Int32>; overload;
    function ReadBlockAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask<Int32>; overload;
    function ReadBlockAsync(buffer: DNMemory<Char>; cancellationToken: DNCancellationToken): DNValueTask<Int32>; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNTextReader = class(TDNGenericImport<DNTextReaderClass, DNTextReader>) end;

  //-------------namespace: System.IO----------------
  DNStreamReaderClass = interface(DNTextReaderClass)
  ['{EBA50133-895C-55CA-B932-5B9ECA5014F1}']
  { constructors } 

    {class} function init(stream: DNStream): DNStreamReader; overload;
    {class} function init(stream: DNStream; detectEncodingFromByteOrderMarks: Boolean): DNStreamReader; overload;
    {class} function init(stream: DNStream; encoding: DNEncoding): DNStreamReader; overload;
    {class} function init(stream: DNStream; encoding: DNEncoding; detectEncodingFromByteOrderMarks: Boolean): DNStreamReader; overload;
    {class} function init(stream: DNStream; encoding: DNEncoding; detectEncodingFromByteOrderMarks: Boolean; bufferSize: Int32): DNStreamReader; overload;
    {class} function init(stream: DNStream; encoding: DNEncoding; detectEncodingFromByteOrderMarks: Boolean; bufferSize: Int32; leaveOpen: Boolean): DNStreamReader; overload;
    {class} function init(path: string): DNStreamReader; overload;
    {class} function init(path: string; detectEncodingFromByteOrderMarks: Boolean): DNStreamReader; overload;
    {class} function init(path: string; encoding: DNEncoding): DNStreamReader; overload;
    {class} function init(path: string; encoding: DNEncoding; detectEncodingFromByteOrderMarks: Boolean): DNStreamReader; overload;
    {class} function init(path: string; encoding: DNEncoding; detectEncodingFromByteOrderMarks: Boolean; bufferSize: Int32): DNStreamReader; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNStreamReader;

  { static fields } 

    {class} property Null: DNStreamReader read __fakeFieldGet_Null;

  end;

  [DNTypeName('System.IO.StreamReader')]
  DNStreamReader = interface(DNTextReader)
  ['{EBDF378E-7237-3665-BA35-151F405539F9}']
  { getters & setters } 

    function get_CurrentEncoding: DNEncoding;
    function get_BaseStream: DNStream;
    function get_EndOfStream: Boolean;

  { methods } 

    procedure Close;
    procedure DiscardBufferedData;
    function Peek: Int32;
    function Read: Int32; overload;
    function Read(buffer: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function Read(buffer: DNSpan<Char>): Int32; overload;
    function ReadToEnd: string;
    function ReadBlock(buffer: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function ReadBlock(buffer: DNSpan<Char>): Int32; overload;
    function ReadLine: string;
    function ReadLineAsync: DNTask<string>;
    function ReadToEndAsync: DNTask<string>;
    function ReadAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask<Int32>; overload;
    function ReadAsync(buffer: DNMemory<Char>; cancellationToken: DNCancellationToken): DNValueTask<Int32>; overload;
    function ReadBlockAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask<Int32>; overload;
    function ReadBlockAsync(buffer: DNMemory<Char>; cancellationToken: DNCancellationToken): DNValueTask<Int32>; overload;
    procedure Dispose;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property CurrentEncoding: DNEncoding read get_CurrentEncoding;
    property BaseStream: DNStream read get_BaseStream;
    property EndOfStream: Boolean read get_EndOfStream;
  end;

  TDNStreamReader = class(TDNGenericImport<DNStreamReaderClass, DNStreamReader>) end;

  //-------------namespace: System.IO----------------
  DNTextWriterClass = interface(DNMarshalByRefObjectClass)
  ['{F82D94AD-F651-591B-8863-4CE9A2320750}']
  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNTextWriter;

  { static fields } 

    {class} property Null: DNTextWriter read __fakeFieldGet_Null;

  { static methods } 

    {class} function Synchronized(writer: DNTextWriter): DNTextWriter;

  end;

  [DNTypeName('System.IO.TextWriter')]
  DNTextWriter = interface(DNMarshalByRefObject)
  ['{69674B42-DD92-3FA2-BC3F-D89B57A001D8}']
  { getters & setters } 

    function get_FormatProvider: DNIFormatProvider;
    function get_Encoding: DNEncoding;
    function get_NewLine: string;
    procedure set_NewLine(value: string);

  { methods } 

    procedure Close;
    procedure Dispose;
    procedure Flush;
    procedure Write(value: Char); overload;
    procedure Write(buffer: TArray<Char>); overload;
    procedure Write(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure Write(buffer: DNReadOnlySpan<Char>); overload;
    procedure Write(value: Boolean); overload;
    procedure Write(value: Int32); overload;
    procedure Write(value: UInt32); overload;
    procedure Write(value: Int64); overload;
    procedure Write(value: UInt64); overload;
    procedure Write(value: Single); overload;
    procedure Write(value: Double); overload;
    procedure Write(value: DNDecimal); overload;
    procedure Write(value: string); overload;
    procedure Write(value: DNObject); overload;
    procedure Write(format: string; arg0: DNObject); overload;
    procedure Write(format: string; arg0: DNObject; arg1: DNObject); overload;
    procedure Write(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject); overload;
    procedure Write(format: string; arg: TArray<DNObject>); overload;
    procedure WriteLine; overload;
    procedure WriteLine(value: Char); overload;
    procedure WriteLine(buffer: TArray<Char>); overload;
    procedure WriteLine(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteLine(buffer: DNReadOnlySpan<Char>); overload;
    procedure WriteLine(value: Boolean); overload;
    procedure WriteLine(value: Int32); overload;
    procedure WriteLine(value: UInt32); overload;
    procedure WriteLine(value: Int64); overload;
    procedure WriteLine(value: UInt64); overload;
    procedure WriteLine(value: Single); overload;
    procedure WriteLine(value: Double); overload;
    procedure WriteLine(value: DNDecimal); overload;
    procedure WriteLine(value: string); overload;
    procedure WriteLine(value: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject; arg1: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject); overload;
    procedure WriteLine(format: string; arg: TArray<DNObject>); overload;
    function WriteAsync(value: Char): DNTask; overload;
    function WriteAsync(value: string): DNTask; overload;
    function WriteAsync(buffer: TArray<Char>): DNTask; overload;
    function WriteAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask; overload;
    function WriteAsync(buffer: DNReadOnlyMemory<Char>; cancellationToken: DNCancellationToken): DNTask; overload;
    function WriteLineAsync(value: Char): DNTask; overload;
    function WriteLineAsync(value: string): DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>): DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask; overload;
    function WriteLineAsync(buffer: DNReadOnlyMemory<Char>; cancellationToken: DNCancellationToken): DNTask; overload;
    function WriteLineAsync: DNTask; overload;
    function FlushAsync: DNTask;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property FormatProvider: DNIFormatProvider read get_FormatProvider;
    property Encoding: DNEncoding read get_Encoding;
    property NewLine: string read get_NewLine write set_NewLine;
  end;

  TDNTextWriter = class(TDNGenericImport<DNTextWriterClass, DNTextWriter>) end;

  //-------------namespace: System.IO----------------
  DNStreamWriterClass = interface(DNTextWriterClass)
  ['{484EB2E6-D55B-591D-84F6-284816790F2C}']
  { constructors } 

    {class} function init(stream: DNStream): DNStreamWriter; overload;
    {class} function init(stream: DNStream; encoding: DNEncoding): DNStreamWriter; overload;
    {class} function init(stream: DNStream; encoding: DNEncoding; bufferSize: Int32): DNStreamWriter; overload;
    {class} function init(stream: DNStream; encoding: DNEncoding; bufferSize: Int32; leaveOpen: Boolean): DNStreamWriter; overload;
    {class} function init(path: string): DNStreamWriter; overload;
    {class} function init(path: string; append: Boolean): DNStreamWriter; overload;
    {class} function init(path: string; append: Boolean; encoding: DNEncoding): DNStreamWriter; overload;
    {class} function init(path: string; append: Boolean; encoding: DNEncoding; bufferSize: Int32): DNStreamWriter; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Null: DNStreamWriter;

  { static fields } 

    {class} property Null: DNStreamWriter read __fakeFieldGet_Null;

  end;

  [DNTypeName('System.IO.StreamWriter')]
  DNStreamWriter = interface(DNTextWriter)
  ['{2FDDF019-120C-3759-B96D-882CD4629952}']
  { getters & setters } 

    function get_AutoFlush: Boolean;
    procedure set_AutoFlush(value: Boolean);
    function get_BaseStream: DNStream;
    function get_Encoding: DNEncoding;
    function get_FormatProvider: DNIFormatProvider;
    function get_NewLine: string;
    procedure set_NewLine(value: string);

  { methods } 

    procedure Close;
    procedure Flush;
    procedure Write(value: Char); overload;
    procedure Write(buffer: TArray<Char>); overload;
    procedure Write(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure Write(buffer: DNReadOnlySpan<Char>); overload;
    procedure Write(value: string); overload;
    procedure WriteLine(value: string); overload;
    procedure WriteLine(value: DNReadOnlySpan<Char>); overload;
    function WriteAsync(value: Char): DNTask; overload;
    function WriteAsync(value: string): DNTask; overload;
    function WriteAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask; overload;
    function WriteAsync(buffer: DNReadOnlyMemory<Char>; cancellationToken: DNCancellationToken): DNTask; overload;
    function WriteLineAsync: DNTask; overload;
    function WriteLineAsync(value: Char): DNTask; overload;
    function WriteLineAsync(value: string): DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>; index: Int32; count: Int32): DNTask; overload;
    function WriteLineAsync(buffer: DNReadOnlyMemory<Char>; cancellationToken: DNCancellationToken): DNTask; overload;
    function FlushAsync: DNTask;
    procedure Dispose;
    procedure Write(value: Boolean); overload;
    procedure Write(value: Int32); overload;
    procedure Write(value: UInt32); overload;
    procedure Write(value: Int64); overload;
    procedure Write(value: UInt64); overload;
    procedure Write(value: Single); overload;
    procedure Write(value: Double); overload;
    procedure Write(value: DNDecimal); overload;
    procedure Write(value: DNObject); overload;
    procedure Write(format: string; arg0: DNObject); overload;
    procedure Write(format: string; arg0: DNObject; arg1: DNObject); overload;
    procedure Write(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject); overload;
    procedure Write(format: string; arg: TArray<DNObject>); overload;
    procedure WriteLine; overload;
    procedure WriteLine(value: Char); overload;
    procedure WriteLine(buffer: TArray<Char>); overload;
    procedure WriteLine(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteLine(value: Boolean); overload;
    procedure WriteLine(value: Int32); overload;
    procedure WriteLine(value: UInt32); overload;
    procedure WriteLine(value: Int64); overload;
    procedure WriteLine(value: UInt64); overload;
    procedure WriteLine(value: Single); overload;
    procedure WriteLine(value: Double); overload;
    procedure WriteLine(value: DNDecimal); overload;
    procedure WriteLine(value: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject; arg1: DNObject); overload;
    procedure WriteLine(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject); overload;
    procedure WriteLine(format: string; arg: TArray<DNObject>); overload;
    function WriteAsync(buffer: TArray<Char>): DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>): DNTask; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property AutoFlush: Boolean read get_AutoFlush write set_AutoFlush;
    property BaseStream: DNStream read get_BaseStream;
    property Encoding: DNEncoding read get_Encoding;
    property FormatProvider: DNIFormatProvider read get_FormatProvider;
    property NewLine: string read get_NewLine write set_NewLine;
  end;

  TDNStreamWriter = class(TDNGenericImport<DNStreamWriterClass, DNStreamWriter>) end;

  //-------------namespace: System.Threading----------------
  DNRegisteredWaitHandleClass = interface(DNMarshalByRefObjectClass)
  ['{B91A8DF5-4E5D-5CF4-9C28-2E7E1EF32E57}']
  end;

  [DNTypeName('System.Threading.RegisteredWaitHandle')]
  DNRegisteredWaitHandle = interface(DNMarshalByRefObject)
  ['{133FAF8E-2535-3125-A36B-24FD0C21F150}']
  { methods } 

    function Unregister(waitObject: DNWaitHandle): Boolean;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNRegisteredWaitHandle = class(TDNGenericImport<DNRegisteredWaitHandleClass, DNRegisteredWaitHandle>) end;

  //-------------namespace: System.Threading----------------
  DNTimerClass = interface(DNMarshalByRefObjectClass)
  ['{163E91BC-5FFE-55DB-B6B2-89183E6F7E0D}']
  { constructors } 

    {class} function init(callback: DNTimerCallback; state: DNObject; dueTime: Int32; period: Int32): DNTimer; overload;
    {class} function init(callback: DNTimerCallback; state: DNObject; dueTime: DNTimeSpan; period: DNTimeSpan): DNTimer; overload;
    {class} function init(callback: DNTimerCallback; state: DNObject; dueTime: UInt32; period: UInt32): DNTimer; overload;
    {class} function init(callback: DNTimerCallback; state: DNObject; dueTime: Int64; period: Int64): DNTimer; overload;
    {class} function init(callback: DNTimerCallback): DNTimer; overload;

  end;

  [DNTypeName('System.Threading.Timer')]
  DNTimer = interface(DNMarshalByRefObject)
  ['{EE81DF77-AB69-3BB1-BAB6-7E1BDFE1959B}']
  { methods } 

    function Change(dueTime: Int32; period: Int32): Boolean; overload;
    function Change(dueTime: DNTimeSpan; period: DNTimeSpan): Boolean; overload;
    function Change(dueTime: UInt32; period: UInt32): Boolean; overload;
    function Change(dueTime: Int64; period: Int64): Boolean; overload;
    function Dispose(notifyObject: DNWaitHandle): Boolean; overload;
    procedure Dispose; overload;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNTimer = class(TDNGenericImport<DNTimerClass, DNTimer>) end;

  //-------------namespace: System.Threading----------------
  DNWaitHandleClass = interface(DNMarshalByRefObjectClass)
  ['{C9DBA8C2-DBB9-5216-B9AF-0B4A05B89882}']
  { static methods } 

    {class} function WaitAll(waitHandles: TArray<DNWaitHandle>; millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    {class} function WaitAll(waitHandles: TArray<DNWaitHandle>; timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    {class} function WaitAll(waitHandles: TArray<DNWaitHandle>): Boolean; overload;
    {class} function WaitAll(waitHandles: TArray<DNWaitHandle>; millisecondsTimeout: Int32): Boolean; overload;
    {class} function WaitAll(waitHandles: TArray<DNWaitHandle>; timeout: DNTimeSpan): Boolean; overload;
    {class} function WaitAny(waitHandles: TArray<DNWaitHandle>; millisecondsTimeout: Int32; exitContext: Boolean): Int32; overload;
    {class} function WaitAny(waitHandles: TArray<DNWaitHandle>; timeout: DNTimeSpan; exitContext: Boolean): Int32; overload;
    {class} function WaitAny(waitHandles: TArray<DNWaitHandle>; timeout: DNTimeSpan): Int32; overload;
    {class} function WaitAny(waitHandles: TArray<DNWaitHandle>): Int32; overload;
    {class} function WaitAny(waitHandles: TArray<DNWaitHandle>; millisecondsTimeout: Int32): Int32; overload;
    {class} function SignalAndWait(toSignal: DNWaitHandle; toWaitOn: DNWaitHandle): Boolean; overload;
    {class} function SignalAndWait(toSignal: DNWaitHandle; toWaitOn: DNWaitHandle; timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    {class} function SignalAndWait(toSignal: DNWaitHandle; toWaitOn: DNWaitHandle; millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;

  end;

  [DNTypeName('System.Threading.WaitHandle')]
  DNWaitHandle = interface(DNMarshalByRefObject)
  ['{F7CDAA30-DA27-398A-94D2-4C36EBE79C2E}']
  { getters & setters } 

    function get_Handle: IntPtr;
    procedure set_Handle(value: IntPtr);
    function get_SafeWaitHandle: DNSafeWaitHandle;
    procedure set_SafeWaitHandle(value: DNSafeWaitHandle);

  { methods } 

    function WaitOne(millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    function WaitOne: Boolean; overload;
    function WaitOne(millisecondsTimeout: Int32): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan): Boolean; overload;
    procedure Close;
    procedure Dispose;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Handle: IntPtr read get_Handle write set_Handle;
    property SafeWaitHandle: DNSafeWaitHandle read get_SafeWaitHandle write set_SafeWaitHandle;
  end;

  TDNWaitHandle = class(TDNGenericImport<DNWaitHandleClass, DNWaitHandle>)
  public const
   WaitTimeout = 258;
  end;

  //-------------namespace: System.Threading----------------
  DNEventWaitHandleClass = interface(DNWaitHandleClass)
  ['{1D10BFC4-7474-5382-AF60-99F2A7055097}']
  { constructors } 

    {class} function init(initialState: Boolean; mode: DNEventResetMode): DNEventWaitHandle; overload;
    {class} function init(initialState: Boolean; mode: DNEventResetMode; name: string): DNEventWaitHandle; overload;
    {class} function init(initialState: Boolean; mode: DNEventResetMode; name: string; out createdNew: Boolean): DNEventWaitHandle; overload;

  { static methods } 

    {class} function OpenExisting(name: string): DNEventWaitHandle;
    {class} function TryOpenExisting(name: string; out result: DNEventWaitHandle): Boolean;

  end;

  [DNTypeName('System.Threading.EventWaitHandle')]
  DNEventWaitHandle = interface(DNWaitHandle)
  ['{B6DEE331-C331-3063-9467-BCAC729D3F3C}']
  { getters & setters } 

    function get_Handle: IntPtr;
    procedure set_Handle(value: IntPtr);
    function get_SafeWaitHandle: DNSafeWaitHandle;
    procedure set_SafeWaitHandle(value: DNSafeWaitHandle);

  { methods } 

    function Reset: Boolean;
    function &Set: Boolean;
    function WaitOne(millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    function WaitOne: Boolean; overload;
    function WaitOne(millisecondsTimeout: Int32): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan): Boolean; overload;
    procedure Close;
    procedure Dispose;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Handle: IntPtr read get_Handle write set_Handle;
    property SafeWaitHandle: DNSafeWaitHandle read get_SafeWaitHandle write set_SafeWaitHandle;
  end;

  TDNEventWaitHandle = class(TDNGenericImport<DNEventWaitHandleClass, DNEventWaitHandle>) end;

  //-------------namespace: System.Threading----------------
  DNAutoResetEventClass = interface(DNEventWaitHandleClass)
  ['{E07C93DD-1681-5262-AB86-D2280703D80E}']
  { constructors } 

    {class} function init(initialState: Boolean): DNAutoResetEvent;

  end;

  [DNTypeName('System.Threading.AutoResetEvent')]
  DNAutoResetEvent = interface(DNEventWaitHandle)
  ['{4CE43E25-0844-3FB9-80FB-D7DABD271A62}']
  { getters & setters } 

    function get_Handle: IntPtr;
    procedure set_Handle(value: IntPtr);
    function get_SafeWaitHandle: DNSafeWaitHandle;
    procedure set_SafeWaitHandle(value: DNSafeWaitHandle);

  { methods } 

    function Reset: Boolean;
    function &Set: Boolean;
    function WaitOne(millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    function WaitOne: Boolean; overload;
    function WaitOne(millisecondsTimeout: Int32): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan): Boolean; overload;
    procedure Close;
    procedure Dispose;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Handle: IntPtr read get_Handle write set_Handle;
    property SafeWaitHandle: DNSafeWaitHandle read get_SafeWaitHandle write set_SafeWaitHandle;
  end;

  TDNAutoResetEvent = class(TDNGenericImport<DNAutoResetEventClass, DNAutoResetEvent>) end;

  //-------------namespace: System.Threading----------------
  DNManualResetEventClass = interface(DNEventWaitHandleClass)
  ['{6EB3AC3D-49C3-576A-85E0-3466FA4765B8}']
  { constructors } 

    {class} function init(initialState: Boolean): DNManualResetEvent;

  end;

  [DNTypeName('System.Threading.ManualResetEvent')]
  DNManualResetEvent = interface(DNEventWaitHandle)
  ['{2C68A4C8-A2D4-3FAC-B112-72F58D0F48E8}']
  { getters & setters } 

    function get_Handle: IntPtr;
    procedure set_Handle(value: IntPtr);
    function get_SafeWaitHandle: DNSafeWaitHandle;
    procedure set_SafeWaitHandle(value: DNSafeWaitHandle);

  { methods } 

    function Reset: Boolean;
    function &Set: Boolean;
    function WaitOne(millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    function WaitOne: Boolean; overload;
    function WaitOne(millisecondsTimeout: Int32): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan): Boolean; overload;
    procedure Close;
    procedure Dispose;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Handle: IntPtr read get_Handle write set_Handle;
    property SafeWaitHandle: DNSafeWaitHandle read get_SafeWaitHandle write set_SafeWaitHandle;
  end;

  TDNManualResetEvent = class(TDNGenericImport<DNManualResetEventClass, DNManualResetEvent>) end;

  //-------------namespace: System.Threading----------------
  DNMutexClass = interface(DNWaitHandleClass)
  ['{3CC4288F-A035-5903-8BFF-9C09CB0AFF8C}']
  { constructors } 

    {class} function init(initiallyOwned: Boolean; name: string; out createdNew: Boolean): DNMutex; overload;
    {class} function init(initiallyOwned: Boolean; name: string): DNMutex; overload;
    {class} function init(initiallyOwned: Boolean): DNMutex; overload;
    {class} function init: DNMutex; overload;

  { static methods } 

    {class} function OpenExisting(name: string): DNMutex;
    {class} function TryOpenExisting(name: string; out result: DNMutex): Boolean;

  end;

  [DNTypeName('System.Threading.Mutex')]
  DNMutex = interface(DNWaitHandle)
  ['{4FBF7F30-AD1D-344B-A1CC-CB6AF8AB0FC7}']
  { getters & setters } 

    function get_Handle: IntPtr;
    procedure set_Handle(value: IntPtr);
    function get_SafeWaitHandle: DNSafeWaitHandle;
    procedure set_SafeWaitHandle(value: DNSafeWaitHandle);

  { methods } 

    procedure ReleaseMutex;
    function WaitOne(millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    function WaitOne: Boolean; overload;
    function WaitOne(millisecondsTimeout: Int32): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan): Boolean; overload;
    procedure Close;
    procedure Dispose;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Handle: IntPtr read get_Handle write set_Handle;
    property SafeWaitHandle: DNSafeWaitHandle read get_SafeWaitHandle write set_SafeWaitHandle;
  end;

  TDNMutex = class(TDNGenericImport<DNMutexClass, DNMutex>) end;

  //-------------namespace: System.Threading----------------
  DNSemaphoreClass = interface(DNWaitHandleClass)
  ['{6A356014-C25F-5867-B809-A1D1CB2EEF77}']
  { constructors } 

    {class} function init(initialCount: Int32; maximumCount: Int32): DNSemaphore; overload;
    {class} function init(initialCount: Int32; maximumCount: Int32; name: string): DNSemaphore; overload;
    {class} function init(initialCount: Int32; maximumCount: Int32; name: string; out createdNew: Boolean): DNSemaphore; overload;

  { static methods } 

    {class} function OpenExisting(name: string): DNSemaphore;
    {class} function TryOpenExisting(name: string; out result: DNSemaphore): Boolean;

  end;

  [DNTypeName('System.Threading.Semaphore')]
  DNSemaphore = interface(DNWaitHandle)
  ['{33B27B5D-FD9A-321F-84A6-08AB13DB993A}']
  { getters & setters } 

    function get_Handle: IntPtr;
    procedure set_Handle(value: IntPtr);
    function get_SafeWaitHandle: DNSafeWaitHandle;
    procedure set_SafeWaitHandle(value: DNSafeWaitHandle);

  { methods } 

    function Release: Int32; overload;
    function Release(releaseCount: Int32): Int32; overload;
    function WaitOne(millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    function WaitOne: Boolean; overload;
    function WaitOne(millisecondsTimeout: Int32): Boolean; overload;
    function WaitOne(timeout: DNTimeSpan): Boolean; overload;
    procedure Close;
    procedure Dispose;
    function GetLifetimeService: DNObject;
    function InitializeLifetimeService: DNObject;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Handle: IntPtr read get_Handle write set_Handle;
    property SafeWaitHandle: DNSafeWaitHandle read get_SafeWaitHandle write set_SafeWaitHandle;
  end;

  TDNSemaphore = class(TDNGenericImport<DNSemaphoreClass, DNSemaphore>) end;

  //-------------namespace: System----------------
  DNMathClass = interface(DNObjectClass)
  ['{BFC53750-F76F-5276-BB8F-5D00CBD9191E}']
  { static methods } 

    {class} function Abs(value: Double): Double; overload;
    {class} function Abs(value: Single): Single; overload;
    {class} function Acos(d: Double): Double;
    {class} function Acosh(d: Double): Double;
    {class} function Asin(d: Double): Double;
    {class} function Asinh(d: Double): Double;
    {class} function Atan(d: Double): Double;
    {class} function Atan2(y: Double; x: Double): Double;
    {class} function Atanh(d: Double): Double;
    {class} function Cbrt(d: Double): Double;
    {class} function Ceiling(a: Double): Double; overload;
    {class} function Cos(d: Double): Double;
    {class} function Cosh(value: Double): Double;
    {class} function Exp(d: Double): Double;
    {class} function Floor(d: Double): Double; overload;
    {class} function Log(d: Double): Double; overload;
    {class} function Log10(d: Double): Double;
    {class} function Pow(x: Double; y: Double): Double;
    {class} function Sin(a: Double): Double;
    {class} function Sinh(value: Double): Double;
    {class} function Sqrt(d: Double): Double;
    {class} function Tan(a: Double): Double;
    {class} function Tanh(value: Double): Double;
    {class} function Abs(value: Int16): Int16; overload;
    {class} function Abs(value: Int32): Int32; overload;
    {class} function Abs(value: Int64): Int64; overload;
    {class} function Abs(value: SByte): SByte; overload;
    {class} function Abs(value: DNDecimal): DNDecimal; overload;
    {class} function BigMul(a: Int32; b: Int32): Int64;
    {class} function DivRem(a: Int32; b: Int32; out result: Int32): Int32; overload;
    {class} function DivRem(a: Int64; b: Int64; out result: Int64): Int64; overload;
    {class} function Ceiling(d: DNDecimal): DNDecimal; overload;
    {class} function Clamp(value: Byte; min: Byte; max: Byte): Byte; overload;
    {class} function Clamp(value: DNDecimal; min: DNDecimal; max: DNDecimal): DNDecimal; overload;
    {class} function Clamp(value: Double; min: Double; max: Double): Double; overload;
    {class} function Clamp(value: Int16; min: Int16; max: Int16): Int16; overload;
    {class} function Clamp(value: Int32; min: Int32; max: Int32): Int32; overload;
    {class} function Clamp(value: Int64; min: Int64; max: Int64): Int64; overload;
    {class} function Clamp(value: SByte; min: SByte; max: SByte): SByte; overload;
    {class} function Clamp(value: Single; min: Single; max: Single): Single; overload;
    {class} function Clamp(value: UInt16; min: UInt16; max: UInt16): UInt16; overload;
    {class} function Clamp(value: UInt32; min: UInt32; max: UInt32): UInt32; overload;
    {class} function Clamp(value: UInt64; min: UInt64; max: UInt64): UInt64; overload;
    {class} function Floor(d: DNDecimal): DNDecimal; overload;
    {class} function IEEERemainder(x: Double; y: Double): Double;
    {class} function Log(a: Double; newBase: Double): Double; overload;
    {class} function Max(val1: Byte; val2: Byte): Byte; overload;
    {class} function Max(val1: DNDecimal; val2: DNDecimal): DNDecimal; overload;
    {class} function Max(val1: Double; val2: Double): Double; overload;
    {class} function Max(val1: Int16; val2: Int16): Int16; overload;
    {class} function Max(val1: Int32; val2: Int32): Int32; overload;
    {class} function Max(val1: Int64; val2: Int64): Int64; overload;
    {class} function Max(val1: SByte; val2: SByte): SByte; overload;
    {class} function Max(val1: Single; val2: Single): Single; overload;
    {class} function Max(val1: UInt16; val2: UInt16): UInt16; overload;
    {class} function Max(val1: UInt32; val2: UInt32): UInt32; overload;
    {class} function Max(val1: UInt64; val2: UInt64): UInt64; overload;
    {class} function Min(val1: Byte; val2: Byte): Byte; overload;
    {class} function Min(val1: DNDecimal; val2: DNDecimal): DNDecimal; overload;
    {class} function Min(val1: Double; val2: Double): Double; overload;
    {class} function Min(val1: Int16; val2: Int16): Int16; overload;
    {class} function Min(val1: Int32; val2: Int32): Int32; overload;
    {class} function Min(val1: Int64; val2: Int64): Int64; overload;
    {class} function Min(val1: SByte; val2: SByte): SByte; overload;
    {class} function Min(val1: Single; val2: Single): Single; overload;
    {class} function Min(val1: UInt16; val2: UInt16): UInt16; overload;
    {class} function Min(val1: UInt32; val2: UInt32): UInt32; overload;
    {class} function Min(val1: UInt64; val2: UInt64): UInt64; overload;
    {class} function Round(d: DNDecimal): DNDecimal; overload;
    {class} function Round(d: DNDecimal; decimals: Int32): DNDecimal; overload;
    {class} function Round(d: DNDecimal; mode: DNMidpointRounding): DNDecimal; overload;
    {class} function Round(d: DNDecimal; decimals: Int32; mode: DNMidpointRounding): DNDecimal; overload;
    {class} function Round(a: Double): Double; overload;
    {class} function Round(value: Double; digits: Int32): Double; overload;
    {class} function Round(value: Double; mode: DNMidpointRounding): Double; overload;
    {class} function Round(value: Double; digits: Int32; mode: DNMidpointRounding): Double; overload;
    {class} function Sign(value: DNDecimal): Int32; overload;
    {class} function Sign(value: Double): Int32; overload;
    {class} function Sign(value: Int16): Int32; overload;
    {class} function Sign(value: Int32): Int32; overload;
    {class} function Sign(value: Int64): Int32; overload;
    {class} function Sign(value: SByte): Int32; overload;
    {class} function Sign(value: Single): Int32; overload;
    {class} function Truncate(d: DNDecimal): DNDecimal; overload;
    {class} function Truncate(d: Double): Double; overload;

  end;

  [DNTypeName('System.Math')]
  DNMath = interface(DNObject)
  ['{8433B1E9-4B84-3992-974A-06885A7344EA}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNMath = class(TDNGenericImport<DNMathClass, DNMath>)
  public const
   E = 2.71828182845905;
   PI = 3.14159265358979;
  end;

  //-------------namespace: System----------------
  DNMathFClass = interface(DNObjectClass)
  ['{9ED9DB03-0293-5BC4-8832-D423C5D908DA}']
  { static methods } 

    {class} function Acos(x: Single): Single;
    {class} function Acosh(x: Single): Single;
    {class} function Asin(x: Single): Single;
    {class} function Asinh(x: Single): Single;
    {class} function Atan(x: Single): Single;
    {class} function Atan2(y: Single; x: Single): Single;
    {class} function Atanh(x: Single): Single;
    {class} function Cbrt(x: Single): Single;
    {class} function Ceiling(x: Single): Single;
    {class} function Cos(x: Single): Single;
    {class} function Cosh(x: Single): Single;
    {class} function Exp(x: Single): Single;
    {class} function Floor(x: Single): Single;
    {class} function Log(x: Single): Single; overload;
    {class} function Log10(x: Single): Single;
    {class} function Pow(x: Single; y: Single): Single;
    {class} function Sin(x: Single): Single;
    {class} function Sinh(x: Single): Single;
    {class} function Sqrt(x: Single): Single;
    {class} function Tan(x: Single): Single;
    {class} function Tanh(x: Single): Single;
    {class} function Abs(x: Single): Single;
    {class} function IEEERemainder(x: Single; y: Single): Single;
    {class} function Log(x: Single; y: Single): Single; overload;
    {class} function Max(x: Single; y: Single): Single;
    {class} function Min(x: Single; y: Single): Single;
    {class} function Round(x: Single): Single; overload;
    {class} function Round(x: Single; digits: Int32): Single; overload;
    {class} function Round(x: Single; mode: DNMidpointRounding): Single; overload;
    {class} function Round(x: Single; digits: Int32; mode: DNMidpointRounding): Single; overload;
    {class} function Sign(x: Single): Int32;
    {class} function Truncate(x: Single): Single;

  end;

  [DNTypeName('System.MathF')]
  DNMathF = interface(DNObject)
  ['{3BEBCCE9-5515-3A7C-8FEA-2B62B156DF07}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNMathF = class(TDNGenericImport<DNMathFClass, DNMathF>)
  public const
   E = 2.718282;
   PI = 3.141593;
  end;

  //-------------namespace: System----------------
  DNMemoryExtensionsClass = interface(DNObjectClass)
  ['{98E5D62E-1755-545F-A8A6-B7F1CE4CEE96}']
  { static methods } 

    {class} function Trim(span: DNReadOnlySpan<Char>): DNReadOnlySpan<Char>; overload;
    {class} function TrimStart(span: DNReadOnlySpan<Char>): DNReadOnlySpan<Char>; overload;
    {class} function TrimEnd(span: DNReadOnlySpan<Char>): DNReadOnlySpan<Char>; overload;
    {class} function Trim(span: DNReadOnlySpan<Char>; trimChar: Char): DNReadOnlySpan<Char>; overload;
    {class} function TrimStart(span: DNReadOnlySpan<Char>; trimChar: Char): DNReadOnlySpan<Char>; overload;
    {class} function TrimEnd(span: DNReadOnlySpan<Char>; trimChar: Char): DNReadOnlySpan<Char>; overload;
    {class} function Trim(span: DNReadOnlySpan<Char>; trimChars: DNReadOnlySpan<Char>): DNReadOnlySpan<Char>; overload;
    {class} function TrimStart(span: DNReadOnlySpan<Char>; trimChars: DNReadOnlySpan<Char>): DNReadOnlySpan<Char>; overload;
    {class} function TrimEnd(span: DNReadOnlySpan<Char>; trimChars: DNReadOnlySpan<Char>): DNReadOnlySpan<Char>; overload;
    {class} function IsWhiteSpace(span: DNReadOnlySpan<Char>): Boolean;
    {class} function &Contains(span: DNReadOnlySpan<Char>; value: DNReadOnlySpan<Char>; comparisonType: DNStringComparison): Boolean;
    {class} function Equals(span: DNReadOnlySpan<Char>; other: DNReadOnlySpan<Char>; comparisonType: DNStringComparison): Boolean; overload;
    {class} function CompareTo(span: DNReadOnlySpan<Char>; other: DNReadOnlySpan<Char>; comparisonType: DNStringComparison): Int32;
    {class} function IndexOf(span: DNReadOnlySpan<Char>; value: DNReadOnlySpan<Char>; comparisonType: DNStringComparison): Int32; overload;
    {class} function ToLower(source: DNReadOnlySpan<Char>; destination: DNSpan<Char>; culture: DNCultureInfo): Int32;
    {class} function ToLowerInvariant(source: DNReadOnlySpan<Char>; destination: DNSpan<Char>): Int32;
    {class} function ToUpper(source: DNReadOnlySpan<Char>; destination: DNSpan<Char>; culture: DNCultureInfo): Int32;
    {class} function ToUpperInvariant(source: DNReadOnlySpan<Char>; destination: DNSpan<Char>): Int32;
    {class} function EndsWith(span: DNReadOnlySpan<Char>; value: DNReadOnlySpan<Char>; comparisonType: DNStringComparison): Boolean; overload;
    {class} function StartsWith(span: DNReadOnlySpan<Char>; value: DNReadOnlySpan<Char>; comparisonType: DNStringComparison): Boolean; overload;
    {class} function AsSpan(text: string): DNReadOnlySpan<Char>; overload;
    {class} function AsSpan(text: string; start: Int32): DNReadOnlySpan<Char>; overload;
    {class} function AsSpan(text: string; start: Int32; length: Int32): DNReadOnlySpan<Char>; overload;
    {class} function AsMemory(text: string): DNReadOnlyMemory<Char>; overload;
    {class} function AsMemory(text: string; start: Int32): DNReadOnlyMemory<Char>; overload;
    {class} function AsMemory(text: string; start: Int32; length: Int32): DNReadOnlyMemory<Char>; overload;

  end;

  [DNTypeName('System.MemoryExtensions')]
  DNMemoryExtensions = interface(DNObject)
  ['{ED29DC4B-94B4-3384-A3D4-518E43813D18}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNMemoryExtensions = class(TDNGenericImport<DNMemoryExtensionsClass, DNMemoryExtensions>) end;

  //-------------namespace: System----------------
  DNNullableClass = interface(DNObjectClass)
  ['{72870B90-7963-5459-A03D-908196627E5D}']
  { static methods } 

    {class} function GetUnderlyingType(nullableType: DNType): DNType;

  end;

  [DNTypeName('System.Nullable')]
  DNNullable = interface(DNObject)
  ['{F1027269-CAA2-30E2-B33E-D1612AF98CB4}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNNullable = class(TDNGenericImport<DNNullableClass, DNNullable>) end;

  //-------------namespace: System.Numerics----------------
  DNVectorClass = interface(DNObjectClass)
  ['{DE46CFA5-98DF-50CE-A05E-396DDA6B522A}']
  { static getter & setter } 

    {class} function get_IsHardwareAccelerated: Boolean;

  { static methods } 

    {class} procedure Widen(source: DNVector<Byte>; out low: DNVector<UInt16>; out high: DNVector<UInt16>); overload;
    {class} procedure Widen(source: DNVector<UInt16>; out low: DNVector<UInt32>; out high: DNVector<UInt32>); overload;
    {class} procedure Widen(source: DNVector<UInt32>; out low: DNVector<UInt64>; out high: DNVector<UInt64>); overload;
    {class} procedure Widen(source: DNVector<SByte>; out low: DNVector<Int16>; out high: DNVector<Int16>); overload;
    {class} procedure Widen(source: DNVector<Int16>; out low: DNVector<Int32>; out high: DNVector<Int32>); overload;
    {class} procedure Widen(source: DNVector<Int32>; out low: DNVector<Int64>; out high: DNVector<Int64>); overload;
    {class} procedure Widen(source: DNVector<Single>; out low: DNVector<Double>; out high: DNVector<Double>); overload;
    {class} function Narrow(low: DNVector<UInt16>; high: DNVector<UInt16>): DNVector<Byte>; overload;
    {class} function Narrow(low: DNVector<UInt32>; high: DNVector<UInt32>): DNVector<UInt16>; overload;
    {class} function Narrow(low: DNVector<UInt64>; high: DNVector<UInt64>): DNVector<UInt32>; overload;
    {class} function Narrow(low: DNVector<Int16>; high: DNVector<Int16>): DNVector<SByte>; overload;
    {class} function Narrow(low: DNVector<Int32>; high: DNVector<Int32>): DNVector<Int16>; overload;
    {class} function Narrow(low: DNVector<Int64>; high: DNVector<Int64>): DNVector<Int32>; overload;
    {class} function Narrow(low: DNVector<Double>; high: DNVector<Double>): DNVector<Single>; overload;
    {class} function ConvertToSingle(value: DNVector<Int32>): DNVector<Single>; overload;
    {class} function ConvertToSingle(value: DNVector<UInt32>): DNVector<Single>; overload;
    {class} function ConvertToDouble(value: DNVector<Int64>): DNVector<Double>; overload;
    {class} function ConvertToDouble(value: DNVector<UInt64>): DNVector<Double>; overload;
    {class} function ConvertToInt32(value: DNVector<Single>): DNVector<Int32>;
    {class} function ConvertToUInt32(value: DNVector<Single>): DNVector<UInt32>;
    {class} function ConvertToInt64(value: DNVector<Double>): DNVector<Int64>;
    {class} function ConvertToUInt64(value: DNVector<Double>): DNVector<UInt64>;
    {class} function ConditionalSelect(condition: DNVector<Int32>; left: DNVector<Single>; right: DNVector<Single>): DNVector<Single>; overload;
    {class} function ConditionalSelect(condition: DNVector<Int64>; left: DNVector<Double>; right: DNVector<Double>): DNVector<Double>; overload;
    {class} function Equals(left: DNVector<Single>; right: DNVector<Single>): DNVector<Int32>; overload;
    {class} function Equals(left: DNVector<Int32>; right: DNVector<Int32>): DNVector<Int32>; overload;
    {class} function Equals(left: DNVector<Double>; right: DNVector<Double>): DNVector<Int64>; overload;
    {class} function Equals(left: DNVector<Int64>; right: DNVector<Int64>): DNVector<Int64>; overload;
    {class} function LessThan(left: DNVector<Single>; right: DNVector<Single>): DNVector<Int32>; overload;
    {class} function LessThan(left: DNVector<Int32>; right: DNVector<Int32>): DNVector<Int32>; overload;
    {class} function LessThan(left: DNVector<Double>; right: DNVector<Double>): DNVector<Int64>; overload;
    {class} function LessThan(left: DNVector<Int64>; right: DNVector<Int64>): DNVector<Int64>; overload;
    {class} function LessThanOrEqual(left: DNVector<Single>; right: DNVector<Single>): DNVector<Int32>; overload;
    {class} function LessThanOrEqual(left: DNVector<Int32>; right: DNVector<Int32>): DNVector<Int32>; overload;
    {class} function LessThanOrEqual(left: DNVector<Int64>; right: DNVector<Int64>): DNVector<Int64>; overload;
    {class} function LessThanOrEqual(left: DNVector<Double>; right: DNVector<Double>): DNVector<Int64>; overload;
    {class} function GreaterThan(left: DNVector<Single>; right: DNVector<Single>): DNVector<Int32>; overload;
    {class} function GreaterThan(left: DNVector<Int32>; right: DNVector<Int32>): DNVector<Int32>; overload;
    {class} function GreaterThan(left: DNVector<Double>; right: DNVector<Double>): DNVector<Int64>; overload;
    {class} function GreaterThan(left: DNVector<Int64>; right: DNVector<Int64>): DNVector<Int64>; overload;
    {class} function GreaterThanOrEqual(left: DNVector<Single>; right: DNVector<Single>): DNVector<Int32>; overload;
    {class} function GreaterThanOrEqual(left: DNVector<Int32>; right: DNVector<Int32>): DNVector<Int32>; overload;
    {class} function GreaterThanOrEqual(left: DNVector<Int64>; right: DNVector<Int64>): DNVector<Int64>; overload;
    {class} function GreaterThanOrEqual(left: DNVector<Double>; right: DNVector<Double>): DNVector<Int64>; overload;

  { static propertys } 

    {class} property IsHardwareAccelerated: Boolean read get_IsHardwareAccelerated;
  end;

  [DNTypeName('System.Numerics.Vector')]
  DNVector = interface(DNObject)
  ['{E8D26BD0-F413-30C4-9A25-CE1F9038A351}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNVector = class(TDNGenericImport<DNVectorClass, DNVector>) end;

  //-------------namespace: System----------------
  DNProgressClass<T> = interface(DNObjectClass)
  ['{E2C04AD4-5786-55F3-9ED8-D7B0836A76BA}']
  { constructors } 

    {class} function init: DNProgress<T>; overload;
    {class} function init(handler: DNAction<T>): DNProgress<T>; overload;

  end;

  [DNTypeName('System.Progress`1')]
  DNProgress<T> = interface(DNIProgress<T>)
  ['{53351C8F-0C24-3297-B688-8A988931879F}']
  { events } 

    procedure add_ProgressChanged(value: DNEventHandler<T>);
    procedure remove_ProgressChanged(value: DNEventHandler<T>);

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNProgress<T> = class(TDNGenericImport<DNProgressClass<T>, DNProgress<T>>) end;

  //-------------namespace: System----------------
  DNRandomClass = interface(DNObjectClass)
  ['{133ED2A1-409F-54D3-9C77-3D8EDAB0B8DD}']
  { constructors } 

    {class} function init: DNRandom; overload;
    {class} function init(Seed: Int32): DNRandom; overload;

  end;

  [DNTypeName('System.Random')]
  DNRandom = interface(DNObject)
  ['{FFAD61C2-DB7B-39A7-B4DE-D7DDA1DD82EC}']
  { methods } 

    function Next: Int32; overload;
    function Next(minValue: Int32; maxValue: Int32): Int32; overload;
    function Next(maxValue: Int32): Int32; overload;
    function NextDouble: Double;
    procedure NextBytes(buffer: TArray<Byte>); overload;
    procedure NextBytes(buffer: DNSpan<Byte>); overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNRandom = class(TDNGenericImport<DNRandomClass, DNRandom>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyClass = interface(DNObjectClass)
  ['{61EC4431-1DBE-549E-9741-E20BABF5929F}']
  { static methods } 

    {class} function LoadFrom(assemblyFile: string): DNAssembly; overload;
    {class} function LoadFrom(assemblyFile: string; hashValue: TArray<Byte>; hashAlgorithm: DNAssemblyHashAlgorithm): DNAssembly; overload;
    {class} function Load(assemblyString: string): DNAssembly; overload;
    {class} function Load(assemblyRef: DNAssemblyName): DNAssembly; overload;
    {class} function Load(rawAssembly: TArray<Byte>; rawSymbolStore: TArray<Byte>): DNAssembly; overload;
    {class} function LoadFile(path: string): DNAssembly;
    {class} function GetExecutingAssembly: DNAssembly;
    {class} function GetCallingAssembly: DNAssembly;
    {class} function GetEntryAssembly: DNAssembly;
    {class} function CreateQualifiedName(assemblyName: string; typeName: string): string;
    {class} function GetAssembly(&type: DNType): DNAssembly;
    {class} function Load(rawAssembly: TArray<Byte>): DNAssembly; overload;
    {class} function LoadWithPartialName(partialName: string): DNAssembly;
    {class} function UnsafeLoadFrom(assemblyFile: string): DNAssembly;
    {class} function ReflectionOnlyLoad(rawAssembly: TArray<Byte>): DNAssembly; overload;
    {class} function ReflectionOnlyLoad(assemblyString: string): DNAssembly; overload;
    {class} function ReflectionOnlyLoadFrom(assemblyFile: string): DNAssembly;

  end;

  [DNTypeName('System.Reflection.Assembly')]
  DNAssembly = interface(DNICustomAttributeProvider)
  ['{7A7BFC3E-32C9-3A7F-BA89-25D73D473B74}']
  { getters & setters } 

    function get_DefinedTypes: DNIEnumerable<DNTypeInfo>;
    function get_ExportedTypes: DNIEnumerable<DNType>;
    function get_CodeBase: string;
    function get_EntryPoint: DNMethodInfo;
    function get_FullName: string;
    function get_ImageRuntimeVersion: string;
    function get_IsDynamic: Boolean;
    function get_Location: string;
    function get_ReflectionOnly: Boolean;
    function get_IsFullyTrusted: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_EscapedCodeBase: string;
    function get_ManifestModule: DNModule;
    function get_Modules: DNIEnumerable<DNModule>;
    function get_GlobalAssemblyCache: Boolean;
    function get_HostContext: Int64;
    function get_SecurityRuleSet: DNSecurityRuleSet;

  { events } 

    procedure add_ModuleResolve(value: DNModuleResolveEventHandler);
    procedure remove_ModuleResolve(value: DNModuleResolveEventHandler);

  { methods } 

    function GetTypes: TArray<DNType>;
    function GetExportedTypes: TArray<DNType>;
    function GetForwardedTypes: TArray<DNType>;
    function GetManifestResourceInfo(resourceName: string): DNManifestResourceInfo;
    function GetManifestResourceNames: TArray<string>;
    function GetManifestResourceStream(name: string): DNStream; overload;
    function GetManifestResourceStream(&type: DNType; name: string): DNStream; overload;
    function GetName: DNAssemblyName; overload;
    function GetName(copiedName: Boolean): DNAssemblyName; overload;
    function GetType(name: string): DNType; overload;
    function GetType(name: string; throwOnError: Boolean): DNType; overload;
    function GetType(name: string; throwOnError: Boolean; ignoreCase: Boolean): DNType; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function CreateInstance(typeName: string): DNObject; overload;
    function CreateInstance(typeName: string; ignoreCase: Boolean): DNObject; overload;
    function CreateInstance(typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObject; overload;
    function GetModule(name: string): DNModule;
    function GetModules: TArray<DNModule>; overload;
    function GetModules(getResourceModules: Boolean): TArray<DNModule>; overload;
    function GetLoadedModules: TArray<DNModule>; overload;
    function GetLoadedModules(getResourceModules: Boolean): TArray<DNModule>; overload;
    function GetReferencedAssemblies: TArray<DNAssemblyName>;
    function GetSatelliteAssembly(culture: DNCultureInfo): DNAssembly; overload;
    function GetSatelliteAssembly(culture: DNCultureInfo; version: DNVersion): DNAssembly; overload;
    function GetFile(name: string): DNFileStream;
    function GetFiles: TArray<DNFileStream>; overload;
    function GetFiles(getResourceModules: Boolean): TArray<DNFileStream>; overload;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function LoadModule(moduleName: string; rawModule: TArray<Byte>): DNModule; overload;
    function LoadModule(moduleName: string; rawModule: TArray<Byte>; rawSymbolStore: TArray<Byte>): DNModule; overload;
    function GetType: DNType; overload;

  { propertys } 

    property DefinedTypes: DNIEnumerable<DNTypeInfo> read get_DefinedTypes;
    property ExportedTypes: DNIEnumerable<DNType> read get_ExportedTypes;
    property CodeBase: string read get_CodeBase;
    property EntryPoint: DNMethodInfo read get_EntryPoint;
    property FullName: string read get_FullName;
    property ImageRuntimeVersion: string read get_ImageRuntimeVersion;
    property IsDynamic: Boolean read get_IsDynamic;
    property Location: string read get_Location;
    property ReflectionOnly: Boolean read get_ReflectionOnly;
    property IsFullyTrusted: Boolean read get_IsFullyTrusted;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property EscapedCodeBase: string read get_EscapedCodeBase;
    property ManifestModule: DNModule read get_ManifestModule;
    property Modules: DNIEnumerable<DNModule> read get_Modules;
    property GlobalAssemblyCache: Boolean read get_GlobalAssemblyCache;
    property HostContext: Int64 read get_HostContext;
    property SecurityRuleSet: DNSecurityRuleSet read get_SecurityRuleSet;
  end;

  TDNAssembly = class(TDNGenericImport<DNAssemblyClass, DNAssembly>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNAssemblyBuilderClass = interface(DNAssemblyClass)
  ['{C03B8059-37DD-516E-965E-AC8DA2D01845}']
  { static methods } 

    {class} function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess): DNAssemblyBuilder; overload;
    {class} function DefineDynamicAssembly(name: DNAssemblyName; access: DNAssemblyBuilderAccess; assemblyAttributes: DNIEnumerable<DNCustomAttributeBuilder>): DNAssemblyBuilder; overload;

  end;

  [DNTypeName('System.Reflection.Emit.AssemblyBuilder')]
  DNAssemblyBuilder = interface(DNAssembly)
  ['{5A435A61-A1D3-3BCA-8F4C-590AAA091873}']
  { getters & setters } 

    function get_Location: string;
    function get_ImageRuntimeVersion: string;
    function get_CodeBase: string;
    function get_EntryPoint: DNMethodInfo;
    function get_FullName: string;
    function get_ManifestModule: DNModule;
    function get_ReflectionOnly: Boolean;
    function get_GlobalAssemblyCache: Boolean;
    function get_HostContext: Int64;
    function get_IsDynamic: Boolean;
    function get_DefinedTypes: DNIEnumerable<DNTypeInfo>;
    function get_ExportedTypes: DNIEnumerable<DNType>;
    function get_IsFullyTrusted: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_EscapedCodeBase: string;
    function get_Modules: DNIEnumerable<DNModule>;
    function get_SecurityRuleSet: DNSecurityRuleSet;

  { events } 

    procedure add_ModuleResolve(value: DNModuleResolveEventHandler);
    procedure remove_ModuleResolve(value: DNModuleResolveEventHandler);

  { methods } 

    function DefineDynamicModule(name: string): DNModuleBuilder; overload;
    function DefineDynamicModule(name: string; emitSymbolInfo: Boolean): DNModuleBuilder; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetManifestResourceNames: TArray<string>;
    function GetFile(name: string): DNFileStream;
    function GetFiles(getResourceModules: Boolean): TArray<DNFileStream>; overload;
    function GetManifestResourceStream(&type: DNType; name: string): DNStream; overload;
    function GetManifestResourceStream(name: string): DNStream; overload;
    function GetManifestResourceInfo(resourceName: string): DNManifestResourceInfo;
    function GetExportedTypes: TArray<DNType>;
    function GetName(copiedName: Boolean): DNAssemblyName; overload;
    function GetType(name: string; throwOnError: Boolean; ignoreCase: Boolean): DNType; overload;
    function GetModule(name: string): DNModule;
    function GetReferencedAssemblies: TArray<DNAssemblyName>;
    function GetModules(getResourceModules: Boolean): TArray<DNModule>; overload;
    function GetLoadedModules(getResourceModules: Boolean): TArray<DNModule>; overload;
    function GetSatelliteAssembly(culture: DNCultureInfo): DNAssembly; overload;
    function GetSatelliteAssembly(culture: DNCultureInfo; version: DNVersion): DNAssembly; overload;
    function GetDynamicModule(name: string): DNModuleBuilder;
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    function GetTypes: TArray<DNType>;
    function GetForwardedTypes: TArray<DNType>;
    function GetName: DNAssemblyName; overload;
    function GetType(name: string): DNType; overload;
    function GetType(name: string; throwOnError: Boolean): DNType; overload;
    function CreateInstance(typeName: string): DNObject; overload;
    function CreateInstance(typeName: string; ignoreCase: Boolean): DNObject; overload;
    function CreateInstance(typeName: string; ignoreCase: Boolean; bindingAttr: DNBindingFlags; binder: DNBinder; args: TArray<DNObject>; culture: DNCultureInfo; activationAttributes: TArray<DNObject>): DNObject; overload;
    function GetModules: TArray<DNModule>; overload;
    function GetLoadedModules: TArray<DNModule>; overload;
    function GetFiles: TArray<DNFileStream>; overload;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function LoadModule(moduleName: string; rawModule: TArray<Byte>): DNModule; overload;
    function LoadModule(moduleName: string; rawModule: TArray<Byte>; rawSymbolStore: TArray<Byte>): DNModule; overload;
    function GetType: DNType; overload;

  { propertys } 

    property Location: string read get_Location;
    property ImageRuntimeVersion: string read get_ImageRuntimeVersion;
    property CodeBase: string read get_CodeBase;
    property EntryPoint: DNMethodInfo read get_EntryPoint;
    property FullName: string read get_FullName;
    property ManifestModule: DNModule read get_ManifestModule;
    property ReflectionOnly: Boolean read get_ReflectionOnly;
    property GlobalAssemblyCache: Boolean read get_GlobalAssemblyCache;
    property HostContext: Int64 read get_HostContext;
    property IsDynamic: Boolean read get_IsDynamic;
    property DefinedTypes: DNIEnumerable<DNTypeInfo> read get_DefinedTypes;
    property ExportedTypes: DNIEnumerable<DNType> read get_ExportedTypes;
    property IsFullyTrusted: Boolean read get_IsFullyTrusted;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property EscapedCodeBase: string read get_EscapedCodeBase;
    property Modules: DNIEnumerable<DNModule> read get_Modules;
    property SecurityRuleSet: DNSecurityRuleSet read get_SecurityRuleSet;
  end;

  TDNAssemblyBuilder = class(TDNGenericImport<DNAssemblyBuilderClass, DNAssemblyBuilder>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyNameClass = interface(DNObjectClass)
  ['{84D76E23-FFEF-59EE-BDC2-6532CE92B6DB}']
  { constructors } 

    {class} function init: DNAssemblyName; overload;
    {class} function init(assemblyName: string): DNAssemblyName; overload;

  { static methods } 

    {class} function GetAssemblyName(assemblyFile: string): DNAssemblyName;
    {class} function ReferenceMatchesDefinition(reference: DNAssemblyName; definition: DNAssemblyName): Boolean;

  end;

  [DNTypeName('System.Reflection.AssemblyName')]
  DNAssemblyName = interface(DNICloneable)
  ['{2B0D4E6A-D1A9-3958-8C4B-4A4C0376AF3E}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Version: DNVersion;
    procedure set_Version(value: DNVersion);
    function get_CultureInfo: DNCultureInfo;
    procedure set_CultureInfo(value: DNCultureInfo);
    function get_CultureName: string;
    procedure set_CultureName(value: string);
    function get_CodeBase: string;
    procedure set_CodeBase(value: string);
    function get_EscapedCodeBase: string;
    function get_ProcessorArchitecture: DNProcessorArchitecture;
    procedure set_ProcessorArchitecture(value: DNProcessorArchitecture);
    function get_ContentType: DNAssemblyContentType;
    procedure set_ContentType(value: DNAssemblyContentType);
    function get_Flags: DNAssemblyNameFlags;
    procedure set_Flags(value: DNAssemblyNameFlags);
    function get_HashAlgorithm: DNAssemblyHashAlgorithm;
    procedure set_HashAlgorithm(value: DNAssemblyHashAlgorithm);
    function get_VersionCompatibility: DNAssemblyVersionCompatibility;
    procedure set_VersionCompatibility(value: DNAssemblyVersionCompatibility);
    function get_KeyPair: DNStrongNameKeyPair;
    procedure set_KeyPair(value: DNStrongNameKeyPair);
    function get_FullName: string;

  { methods } 

    function Clone: DNObject;
    function GetPublicKey: TArray<Byte>;
    procedure SetPublicKey(publicKey: TArray<Byte>);
    function GetPublicKeyToken: TArray<Byte>;
    procedure SetPublicKeyToken(publicKeyToken: TArray<Byte>);
    function ToString: string;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    procedure OnDeserialization(sender: DNObject);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Version: DNVersion read get_Version write set_Version;
    property CultureInfo: DNCultureInfo read get_CultureInfo write set_CultureInfo;
    property CultureName: string read get_CultureName write set_CultureName;
    property CodeBase: string read get_CodeBase write set_CodeBase;
    property EscapedCodeBase: string read get_EscapedCodeBase;
    property ProcessorArchitecture: DNProcessorArchitecture read get_ProcessorArchitecture write set_ProcessorArchitecture;
    property ContentType: DNAssemblyContentType read get_ContentType write set_ContentType;
    property Flags: DNAssemblyNameFlags read get_Flags write set_Flags;
    property HashAlgorithm: DNAssemblyHashAlgorithm read get_HashAlgorithm write set_HashAlgorithm;
    property VersionCompatibility: DNAssemblyVersionCompatibility read get_VersionCompatibility write set_VersionCompatibility;
    property KeyPair: DNStrongNameKeyPair read get_KeyPair write set_KeyPair;
    property FullName: string read get_FullName;
  end;

  TDNAssemblyName = class(TDNGenericImport<DNAssemblyNameClass, DNAssemblyName>) end;

  //-------------namespace: System.Reflection----------------
  DNBinderClass = interface(DNObjectClass)
  ['{32B113A5-3924-52D8-8705-15643634C68F}']
  end;

  [DNTypeName('System.Reflection.Binder')]
  DNBinder = interface(DNObject)
  ['{C7959609-CCEB-307A-999C-4F55DE5EA0FA}']
  { methods } 

    function BindToField(bindingAttr: DNBindingFlags; match: TArray<DNFieldInfo>; value: DNObject; culture: DNCultureInfo): DNFieldInfo;
    function BindToMethod(bindingAttr: DNBindingFlags; match: TArray<DNMethodBase>; out args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; names: TArray<string>; out state: DNObject): DNMethodBase;
    function ChangeType(value: DNObject; &type: DNType; culture: DNCultureInfo): DNObject;
    procedure ReorderArgumentArray(out args: TArray<DNObject>; state: DNObject);
    function SelectMethod(bindingAttr: DNBindingFlags; match: TArray<DNMethodBase>; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodBase;
    function SelectProperty(bindingAttr: DNBindingFlags; match: TArray<DNPropertyInfo>; returnType: DNType; indexes: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNBinder = class(TDNGenericImport<DNBinderClass, DNBinder>) end;

  //-------------namespace: System.Reflection----------------
  DNCustomAttributeDataClass = interface(DNObjectClass)
  ['{7761F632-C0DA-5C2E-A68C-1DEC8DBFEE10}']
  { static methods } 

    {class} function GetCustomAttributes(target: DNMemberInfo): DNIList<DNCustomAttributeData>; overload;
    {class} function GetCustomAttributes(target: DNModule): DNIList<DNCustomAttributeData>; overload;
    {class} function GetCustomAttributes(target: DNAssembly): DNIList<DNCustomAttributeData>; overload;
    {class} function GetCustomAttributes(target: DNParameterInfo): DNIList<DNCustomAttributeData>; overload;

  end;

  [DNTypeName('System.Reflection.CustomAttributeData')]
  DNCustomAttributeData = interface(DNObject)
  ['{5CF66D52-812D-340A-9FBE-E772F1C8A919}']
  { getters & setters } 

    function get_AttributeType: DNType;
    function get_Constructor: DNConstructorInfo;
    function get_ConstructorArguments: DNIList<DNCustomAttributeTypedArgument>;
    function get_NamedArguments: DNIList<DNCustomAttributeNamedArgument>;

  { methods } 

    function ToString: string;
    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean;
    function GetType: DNType;

  { propertys } 

    property AttributeType: DNType read get_AttributeType;
    property &Constructor: DNConstructorInfo read get_Constructor;
    property ConstructorArguments: DNIList<DNCustomAttributeTypedArgument> read get_ConstructorArguments;
    property NamedArguments: DNIList<DNCustomAttributeNamedArgument> read get_NamedArguments;
  end;

  TDNCustomAttributeData = class(TDNGenericImport<DNCustomAttributeDataClass, DNCustomAttributeData>) end;

  //-------------namespace: System.Reflection----------------
  DNCustomAttributeExtensionsClass = interface(DNObjectClass)
  ['{F6E1CA43-BF20-5F38-B2A1-6FA33866B253}']
  { static methods } 

    {class} function GetCustomAttribute(element: DNAssembly; attributeType: DNType): DNAttribute; overload;
    {class} function GetCustomAttribute(element: DNModule; attributeType: DNType): DNAttribute; overload;
    {class} function GetCustomAttribute(element: DNMemberInfo; attributeType: DNType): DNAttribute; overload;
    {class} function GetCustomAttribute(element: DNParameterInfo; attributeType: DNType): DNAttribute; overload;
    {class} function GetCustomAttribute(element: DNMemberInfo; attributeType: DNType; inherit: Boolean): DNAttribute; overload;
    {class} function GetCustomAttribute(element: DNParameterInfo; attributeType: DNType; inherit: Boolean): DNAttribute; overload;
    {class} function GetCustomAttributes(element: DNAssembly): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNModule): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNMemberInfo): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNParameterInfo): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNMemberInfo; inherit: Boolean): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNParameterInfo; inherit: Boolean): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNAssembly; attributeType: DNType): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNModule; attributeType: DNType): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNMemberInfo; attributeType: DNType): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNParameterInfo; attributeType: DNType): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNMemberInfo; attributeType: DNType; inherit: Boolean): DNIEnumerable<DNAttribute>; overload;
    {class} function GetCustomAttributes(element: DNParameterInfo; attributeType: DNType; inherit: Boolean): DNIEnumerable<DNAttribute>; overload;
    {class} function IsDefined(element: DNAssembly; attributeType: DNType): Boolean; overload;
    {class} function IsDefined(element: DNModule; attributeType: DNType): Boolean; overload;
    {class} function IsDefined(element: DNMemberInfo; attributeType: DNType): Boolean; overload;
    {class} function IsDefined(element: DNParameterInfo; attributeType: DNType): Boolean; overload;
    {class} function IsDefined(element: DNMemberInfo; attributeType: DNType; inherit: Boolean): Boolean; overload;
    {class} function IsDefined(element: DNParameterInfo; attributeType: DNType; inherit: Boolean): Boolean; overload;

  end;

  [DNTypeName('System.Reflection.CustomAttributeExtensions')]
  DNCustomAttributeExtensions = interface(DNObject)
  ['{9C607BB2-1D61-312D-80C6-74338A00242A}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNCustomAttributeExtensions = class(TDNGenericImport<DNCustomAttributeExtensionsClass, DNCustomAttributeExtensions>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNCustomAttributeBuilderClass = interface(DNObjectClass)
  ['{363776CC-DD43-56F3-87B4-7A2E36835BAD}']
  { constructors } 

    {class} function init(con: DNConstructorInfo; constructorArgs: TArray<DNObject>): DNCustomAttributeBuilder; overload;
    {class} function init(con: DNConstructorInfo; constructorArgs: TArray<DNObject>; namedProperties: TArray<DNPropertyInfo>; propertyValues: TArray<DNObject>): DNCustomAttributeBuilder; overload;
    {class} function init(con: DNConstructorInfo; constructorArgs: TArray<DNObject>; namedFields: TArray<DNFieldInfo>; fieldValues: TArray<DNObject>): DNCustomAttributeBuilder; overload;
    {class} function init(con: DNConstructorInfo; constructorArgs: TArray<DNObject>; namedProperties: TArray<DNPropertyInfo>; propertyValues: TArray<DNObject>; namedFields: TArray<DNFieldInfo>; fieldValues: TArray<DNObject>): DNCustomAttributeBuilder; overload;

  end;

  [DNTypeName('System.Reflection.Emit.CustomAttributeBuilder')]
  DNCustomAttributeBuilder = interface(DNObject)
  ['{01557633-1E93-31EF-8AEF-C3682D1232DE}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNCustomAttributeBuilder = class(TDNGenericImport<DNCustomAttributeBuilderClass, DNCustomAttributeBuilder>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNEventBuilderClass = interface(DNObjectClass)
  ['{35A15709-B9F9-5B77-A64D-DDBC30835024}']
  end;

  [DNTypeName('System.Reflection.Emit.EventBuilder')]
  DNEventBuilder = interface(DNObject)
  ['{54821708-1004-3D04-929A-D37CE7AD31D6}']
  { methods } 

    function GetEventToken: DNEventToken;
    procedure SetAddOnMethod(mdBuilder: DNMethodBuilder);
    procedure SetRemoveOnMethod(mdBuilder: DNMethodBuilder);
    procedure SetRaiseMethod(mdBuilder: DNMethodBuilder);
    procedure AddOtherMethod(mdBuilder: DNMethodBuilder);
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNEventBuilder = class(TDNGenericImport<DNEventBuilderClass, DNEventBuilder>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNILGeneratorClass = interface(DNObjectClass)
  ['{C8307F56-D0DF-5948-8420-F3213BE219C3}']
  end;

  [DNTypeName('System.Reflection.Emit.ILGenerator')]
  DNILGenerator = interface(DNObject)
  ['{7B23EBDB-B9C4-3CB5-9FA8-A23A682E7D44}']
  { getters & setters } 

    function get_ILOffset: Int32;

  { methods } 

    procedure Emit(opcode: DNOpCode); overload;
    procedure Emit(opcode: DNOpCode; arg: Byte); overload;
    procedure Emit(opcode: DNOpCode; arg: SByte); overload;
    procedure Emit(opcode: DNOpCode; arg: Int16); overload;
    procedure Emit(opcode: DNOpCode; arg: Int32); overload;
    procedure Emit(opcode: DNOpCode; meth: DNMethodInfo); overload;
    procedure EmitCalli(opcode: DNOpCode; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>; optionalParameterTypes: TArray<DNType>); overload;
    procedure EmitCalli(opcode: DNOpCode; unmanagedCallConv: DNCallingConvention; returnType: DNType; parameterTypes: TArray<DNType>); overload;
    procedure EmitCall(opcode: DNOpCode; methodInfo: DNMethodInfo; optionalParameterTypes: TArray<DNType>);
    procedure Emit(opcode: DNOpCode; signature: DNSignatureHelper); overload;
    procedure Emit(opcode: DNOpCode; con: DNConstructorInfo); overload;
    procedure Emit(opcode: DNOpCode; cls: DNType); overload;
    procedure Emit(opcode: DNOpCode; arg: Int64); overload;
    procedure Emit(opcode: DNOpCode; arg: Single); overload;
    procedure Emit(opcode: DNOpCode; arg: Double); overload;
    procedure Emit(opcode: DNOpCode; &label: DNLabel); overload;
    procedure Emit(opcode: DNOpCode; labels: TArray<DNLabel>); overload;
    procedure Emit(opcode: DNOpCode; field: DNFieldInfo); overload;
    procedure Emit(opcode: DNOpCode; str: string); overload;
    procedure Emit(opcode: DNOpCode; local: DNLocalBuilder); overload;
    function BeginExceptionBlock: DNLabel;
    procedure EndExceptionBlock;
    procedure BeginExceptFilterBlock;
    procedure BeginCatchBlock(exceptionType: DNType);
    procedure BeginFaultBlock;
    procedure BeginFinallyBlock;
    function DefineLabel: DNLabel;
    procedure MarkLabel(loc: DNLabel);
    procedure ThrowException(excType: DNType);
    procedure EmitWriteLine(value: string); overload;
    procedure EmitWriteLine(localBuilder: DNLocalBuilder); overload;
    procedure EmitWriteLine(fld: DNFieldInfo); overload;
    function DeclareLocal(localType: DNType): DNLocalBuilder; overload;
    function DeclareLocal(localType: DNType; pinned: Boolean): DNLocalBuilder; overload;
    procedure UsingNamespace(usingNamespace: string);
    procedure MarkSequencePoint(document: DNISymbolDocumentWriter; startLine: Int32; startColumn: Int32; endLine: Int32; endColumn: Int32);
    procedure BeginScope;
    procedure EndScope;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property ILOffset: Int32 read get_ILOffset;
  end;

  TDNILGenerator = class(TDNGenericImport<DNILGeneratorClass, DNILGenerator>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNOpCodesClass = interface(DNObjectClass)
  ['{8E531E9B-1BA7-5423-BD13-484E9ECF3660}']
  { static fields getter & setter } 

   function __fakeFieldGet_Nop: DNOpCode;
   function __fakeFieldGet_Break: DNOpCode;
   function __fakeFieldGet_Ldarg_0: DNOpCode;
   function __fakeFieldGet_Ldarg_1: DNOpCode;
   function __fakeFieldGet_Ldarg_2: DNOpCode;
   function __fakeFieldGet_Ldarg_3: DNOpCode;
   function __fakeFieldGet_Ldloc_0: DNOpCode;
   function __fakeFieldGet_Ldloc_1: DNOpCode;
   function __fakeFieldGet_Ldloc_2: DNOpCode;
   function __fakeFieldGet_Ldloc_3: DNOpCode;
   function __fakeFieldGet_Stloc_0: DNOpCode;
   function __fakeFieldGet_Stloc_1: DNOpCode;
   function __fakeFieldGet_Stloc_2: DNOpCode;
   function __fakeFieldGet_Stloc_3: DNOpCode;
   function __fakeFieldGet_Ldarg_S: DNOpCode;
   function __fakeFieldGet_Ldarga_S: DNOpCode;
   function __fakeFieldGet_Starg_S: DNOpCode;
   function __fakeFieldGet_Ldloc_S: DNOpCode;
   function __fakeFieldGet_Ldloca_S: DNOpCode;
   function __fakeFieldGet_Stloc_S: DNOpCode;
   function __fakeFieldGet_Ldnull: DNOpCode;
   function __fakeFieldGet_Ldc_I4_M1: DNOpCode;
   function __fakeFieldGet_Ldc_I4_0: DNOpCode;
   function __fakeFieldGet_Ldc_I4_1: DNOpCode;
   function __fakeFieldGet_Ldc_I4_2: DNOpCode;
   function __fakeFieldGet_Ldc_I4_3: DNOpCode;
   function __fakeFieldGet_Ldc_I4_4: DNOpCode;
   function __fakeFieldGet_Ldc_I4_5: DNOpCode;
   function __fakeFieldGet_Ldc_I4_6: DNOpCode;
   function __fakeFieldGet_Ldc_I4_7: DNOpCode;
   function __fakeFieldGet_Ldc_I4_8: DNOpCode;
   function __fakeFieldGet_Ldc_I4_S: DNOpCode;
   function __fakeFieldGet_Ldc_I4: DNOpCode;
   function __fakeFieldGet_Ldc_I8: DNOpCode;
   function __fakeFieldGet_Ldc_R4: DNOpCode;
   function __fakeFieldGet_Ldc_R8: DNOpCode;
   function __fakeFieldGet_Dup: DNOpCode;
   function __fakeFieldGet_Pop: DNOpCode;
   function __fakeFieldGet_Jmp: DNOpCode;
   function __fakeFieldGet_Call: DNOpCode;
   function __fakeFieldGet_Calli: DNOpCode;
   function __fakeFieldGet_Ret: DNOpCode;
   function __fakeFieldGet_Br_S: DNOpCode;
   function __fakeFieldGet_Brfalse_S: DNOpCode;
   function __fakeFieldGet_Brtrue_S: DNOpCode;
   function __fakeFieldGet_Beq_S: DNOpCode;
   function __fakeFieldGet_Bge_S: DNOpCode;
   function __fakeFieldGet_Bgt_S: DNOpCode;
   function __fakeFieldGet_Ble_S: DNOpCode;
   function __fakeFieldGet_Blt_S: DNOpCode;
   function __fakeFieldGet_Bne_Un_S: DNOpCode;
   function __fakeFieldGet_Bge_Un_S: DNOpCode;
   function __fakeFieldGet_Bgt_Un_S: DNOpCode;
   function __fakeFieldGet_Ble_Un_S: DNOpCode;
   function __fakeFieldGet_Blt_Un_S: DNOpCode;
   function __fakeFieldGet_Br: DNOpCode;
   function __fakeFieldGet_Brfalse: DNOpCode;
   function __fakeFieldGet_Brtrue: DNOpCode;
   function __fakeFieldGet_Beq: DNOpCode;
   function __fakeFieldGet_Bge: DNOpCode;
   function __fakeFieldGet_Bgt: DNOpCode;
   function __fakeFieldGet_Ble: DNOpCode;
   function __fakeFieldGet_Blt: DNOpCode;
   function __fakeFieldGet_Bne_Un: DNOpCode;
   function __fakeFieldGet_Bge_Un: DNOpCode;
   function __fakeFieldGet_Bgt_Un: DNOpCode;
   function __fakeFieldGet_Ble_Un: DNOpCode;
   function __fakeFieldGet_Blt_Un: DNOpCode;
   function __fakeFieldGet_Switch: DNOpCode;
   function __fakeFieldGet_Ldind_I1: DNOpCode;
   function __fakeFieldGet_Ldind_U1: DNOpCode;
   function __fakeFieldGet_Ldind_I2: DNOpCode;
   function __fakeFieldGet_Ldind_U2: DNOpCode;
   function __fakeFieldGet_Ldind_I4: DNOpCode;
   function __fakeFieldGet_Ldind_U4: DNOpCode;
   function __fakeFieldGet_Ldind_I8: DNOpCode;
   function __fakeFieldGet_Ldind_I: DNOpCode;
   function __fakeFieldGet_Ldind_R4: DNOpCode;
   function __fakeFieldGet_Ldind_R8: DNOpCode;
   function __fakeFieldGet_Ldind_Ref: DNOpCode;
   function __fakeFieldGet_Stind_Ref: DNOpCode;
   function __fakeFieldGet_Stind_I1: DNOpCode;
   function __fakeFieldGet_Stind_I2: DNOpCode;
   function __fakeFieldGet_Stind_I4: DNOpCode;
   function __fakeFieldGet_Stind_I8: DNOpCode;
   function __fakeFieldGet_Stind_R4: DNOpCode;
   function __fakeFieldGet_Stind_R8: DNOpCode;
   function __fakeFieldGet_Add: DNOpCode;
   function __fakeFieldGet_Sub: DNOpCode;
   function __fakeFieldGet_Mul: DNOpCode;
   function __fakeFieldGet_Div: DNOpCode;
   function __fakeFieldGet_Div_Un: DNOpCode;
   function __fakeFieldGet_Rem: DNOpCode;
   function __fakeFieldGet_Rem_Un: DNOpCode;
   function __fakeFieldGet_And: DNOpCode;
   function __fakeFieldGet_Or: DNOpCode;
   function __fakeFieldGet_Xor: DNOpCode;
   function __fakeFieldGet_Shl: DNOpCode;
   function __fakeFieldGet_Shr: DNOpCode;
   function __fakeFieldGet_Shr_Un: DNOpCode;
   function __fakeFieldGet_Neg: DNOpCode;
   function __fakeFieldGet_Not: DNOpCode;
   function __fakeFieldGet_Conv_I1: DNOpCode;
   function __fakeFieldGet_Conv_I2: DNOpCode;
   function __fakeFieldGet_Conv_I4: DNOpCode;
   function __fakeFieldGet_Conv_I8: DNOpCode;
   function __fakeFieldGet_Conv_R4: DNOpCode;
   function __fakeFieldGet_Conv_R8: DNOpCode;
   function __fakeFieldGet_Conv_U4: DNOpCode;
   function __fakeFieldGet_Conv_U8: DNOpCode;
   function __fakeFieldGet_Callvirt: DNOpCode;
   function __fakeFieldGet_Cpobj: DNOpCode;
   function __fakeFieldGet_Ldobj: DNOpCode;
   function __fakeFieldGet_Ldstr: DNOpCode;
   function __fakeFieldGet_Newobj: DNOpCode;
   function __fakeFieldGet_Castclass: DNOpCode;
   function __fakeFieldGet_Isinst: DNOpCode;
   function __fakeFieldGet_Conv_R_Un: DNOpCode;
   function __fakeFieldGet_Unbox: DNOpCode;
   function __fakeFieldGet_Throw: DNOpCode;
   function __fakeFieldGet_Ldfld: DNOpCode;
   function __fakeFieldGet_Ldflda: DNOpCode;
   function __fakeFieldGet_Stfld: DNOpCode;
   function __fakeFieldGet_Ldsfld: DNOpCode;
   function __fakeFieldGet_Ldsflda: DNOpCode;
   function __fakeFieldGet_Stsfld: DNOpCode;
   function __fakeFieldGet_Stobj: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_I1_Un: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_I2_Un: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_I4_Un: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_I8_Un: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_U1_Un: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_U2_Un: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_U4_Un: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_U8_Un: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_I_Un: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_U_Un: DNOpCode;
   function __fakeFieldGet_Box: DNOpCode;
   function __fakeFieldGet_Newarr: DNOpCode;
   function __fakeFieldGet_Ldlen: DNOpCode;
   function __fakeFieldGet_Ldelema: DNOpCode;
   function __fakeFieldGet_Ldelem_I1: DNOpCode;
   function __fakeFieldGet_Ldelem_U1: DNOpCode;
   function __fakeFieldGet_Ldelem_I2: DNOpCode;
   function __fakeFieldGet_Ldelem_U2: DNOpCode;
   function __fakeFieldGet_Ldelem_I4: DNOpCode;
   function __fakeFieldGet_Ldelem_U4: DNOpCode;
   function __fakeFieldGet_Ldelem_I8: DNOpCode;
   function __fakeFieldGet_Ldelem_I: DNOpCode;
   function __fakeFieldGet_Ldelem_R4: DNOpCode;
   function __fakeFieldGet_Ldelem_R8: DNOpCode;
   function __fakeFieldGet_Ldelem_Ref: DNOpCode;
   function __fakeFieldGet_Stelem_I: DNOpCode;
   function __fakeFieldGet_Stelem_I1: DNOpCode;
   function __fakeFieldGet_Stelem_I2: DNOpCode;
   function __fakeFieldGet_Stelem_I4: DNOpCode;
   function __fakeFieldGet_Stelem_I8: DNOpCode;
   function __fakeFieldGet_Stelem_R4: DNOpCode;
   function __fakeFieldGet_Stelem_R8: DNOpCode;
   function __fakeFieldGet_Stelem_Ref: DNOpCode;
   function __fakeFieldGet_Ldelem: DNOpCode;
   function __fakeFieldGet_Stelem: DNOpCode;
   function __fakeFieldGet_Unbox_Any: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_I1: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_U1: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_I2: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_U2: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_I4: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_U4: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_I8: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_U8: DNOpCode;
   function __fakeFieldGet_Refanyval: DNOpCode;
   function __fakeFieldGet_Ckfinite: DNOpCode;
   function __fakeFieldGet_Mkrefany: DNOpCode;
   function __fakeFieldGet_Ldtoken: DNOpCode;
   function __fakeFieldGet_Conv_U2: DNOpCode;
   function __fakeFieldGet_Conv_U1: DNOpCode;
   function __fakeFieldGet_Conv_I: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_I: DNOpCode;
   function __fakeFieldGet_Conv_Ovf_U: DNOpCode;
   function __fakeFieldGet_Add_Ovf: DNOpCode;
   function __fakeFieldGet_Add_Ovf_Un: DNOpCode;
   function __fakeFieldGet_Mul_Ovf: DNOpCode;
   function __fakeFieldGet_Mul_Ovf_Un: DNOpCode;
   function __fakeFieldGet_Sub_Ovf: DNOpCode;
   function __fakeFieldGet_Sub_Ovf_Un: DNOpCode;
   function __fakeFieldGet_Endfinally: DNOpCode;
   function __fakeFieldGet_Leave: DNOpCode;
   function __fakeFieldGet_Leave_S: DNOpCode;
   function __fakeFieldGet_Stind_I: DNOpCode;
   function __fakeFieldGet_Conv_U: DNOpCode;
   function __fakeFieldGet_Prefix7: DNOpCode;
   function __fakeFieldGet_Prefix6: DNOpCode;
   function __fakeFieldGet_Prefix5: DNOpCode;
   function __fakeFieldGet_Prefix4: DNOpCode;
   function __fakeFieldGet_Prefix3: DNOpCode;
   function __fakeFieldGet_Prefix2: DNOpCode;
   function __fakeFieldGet_Prefix1: DNOpCode;
   function __fakeFieldGet_Prefixref: DNOpCode;
   function __fakeFieldGet_Arglist: DNOpCode;
   function __fakeFieldGet_Ceq: DNOpCode;
   function __fakeFieldGet_Cgt: DNOpCode;
   function __fakeFieldGet_Cgt_Un: DNOpCode;
   function __fakeFieldGet_Clt: DNOpCode;
   function __fakeFieldGet_Clt_Un: DNOpCode;
   function __fakeFieldGet_Ldftn: DNOpCode;
   function __fakeFieldGet_Ldvirtftn: DNOpCode;
   function __fakeFieldGet_Ldarg: DNOpCode;
   function __fakeFieldGet_Ldarga: DNOpCode;
   function __fakeFieldGet_Starg: DNOpCode;
   function __fakeFieldGet_Ldloc: DNOpCode;
   function __fakeFieldGet_Ldloca: DNOpCode;
   function __fakeFieldGet_Stloc: DNOpCode;
   function __fakeFieldGet_Localloc: DNOpCode;
   function __fakeFieldGet_Endfilter: DNOpCode;
   function __fakeFieldGet_Unaligned: DNOpCode;
   function __fakeFieldGet_Volatile: DNOpCode;
   function __fakeFieldGet_Tailcall: DNOpCode;
   function __fakeFieldGet_Initobj: DNOpCode;
   function __fakeFieldGet_Constrained: DNOpCode;
   function __fakeFieldGet_Cpblk: DNOpCode;
   function __fakeFieldGet_Initblk: DNOpCode;
   function __fakeFieldGet_Rethrow: DNOpCode;
   function __fakeFieldGet_Sizeof: DNOpCode;
   function __fakeFieldGet_Refanytype: DNOpCode;
   function __fakeFieldGet_Readonly: DNOpCode;

  { static fields } 

    {class} property Nop: DNOpCode read __fakeFieldGet_Nop;
    {class} property Break: DNOpCode read __fakeFieldGet_Break;
    {class} property Ldarg_0: DNOpCode read __fakeFieldGet_Ldarg_0;
    {class} property Ldarg_1: DNOpCode read __fakeFieldGet_Ldarg_1;
    {class} property Ldarg_2: DNOpCode read __fakeFieldGet_Ldarg_2;
    {class} property Ldarg_3: DNOpCode read __fakeFieldGet_Ldarg_3;
    {class} property Ldloc_0: DNOpCode read __fakeFieldGet_Ldloc_0;
    {class} property Ldloc_1: DNOpCode read __fakeFieldGet_Ldloc_1;
    {class} property Ldloc_2: DNOpCode read __fakeFieldGet_Ldloc_2;
    {class} property Ldloc_3: DNOpCode read __fakeFieldGet_Ldloc_3;
    {class} property Stloc_0: DNOpCode read __fakeFieldGet_Stloc_0;
    {class} property Stloc_1: DNOpCode read __fakeFieldGet_Stloc_1;
    {class} property Stloc_2: DNOpCode read __fakeFieldGet_Stloc_2;
    {class} property Stloc_3: DNOpCode read __fakeFieldGet_Stloc_3;
    {class} property Ldarg_S: DNOpCode read __fakeFieldGet_Ldarg_S;
    {class} property Ldarga_S: DNOpCode read __fakeFieldGet_Ldarga_S;
    {class} property Starg_S: DNOpCode read __fakeFieldGet_Starg_S;
    {class} property Ldloc_S: DNOpCode read __fakeFieldGet_Ldloc_S;
    {class} property Ldloca_S: DNOpCode read __fakeFieldGet_Ldloca_S;
    {class} property Stloc_S: DNOpCode read __fakeFieldGet_Stloc_S;
    {class} property Ldnull: DNOpCode read __fakeFieldGet_Ldnull;
    {class} property Ldc_I4_M1: DNOpCode read __fakeFieldGet_Ldc_I4_M1;
    {class} property Ldc_I4_0: DNOpCode read __fakeFieldGet_Ldc_I4_0;
    {class} property Ldc_I4_1: DNOpCode read __fakeFieldGet_Ldc_I4_1;
    {class} property Ldc_I4_2: DNOpCode read __fakeFieldGet_Ldc_I4_2;
    {class} property Ldc_I4_3: DNOpCode read __fakeFieldGet_Ldc_I4_3;
    {class} property Ldc_I4_4: DNOpCode read __fakeFieldGet_Ldc_I4_4;
    {class} property Ldc_I4_5: DNOpCode read __fakeFieldGet_Ldc_I4_5;
    {class} property Ldc_I4_6: DNOpCode read __fakeFieldGet_Ldc_I4_6;
    {class} property Ldc_I4_7: DNOpCode read __fakeFieldGet_Ldc_I4_7;
    {class} property Ldc_I4_8: DNOpCode read __fakeFieldGet_Ldc_I4_8;
    {class} property Ldc_I4_S: DNOpCode read __fakeFieldGet_Ldc_I4_S;
    {class} property Ldc_I4: DNOpCode read __fakeFieldGet_Ldc_I4;
    {class} property Ldc_I8: DNOpCode read __fakeFieldGet_Ldc_I8;
    {class} property Ldc_R4: DNOpCode read __fakeFieldGet_Ldc_R4;
    {class} property Ldc_R8: DNOpCode read __fakeFieldGet_Ldc_R8;
    {class} property Dup: DNOpCode read __fakeFieldGet_Dup;
    {class} property Pop: DNOpCode read __fakeFieldGet_Pop;
    {class} property Jmp: DNOpCode read __fakeFieldGet_Jmp;
    {class} property Call: DNOpCode read __fakeFieldGet_Call;
    {class} property Calli: DNOpCode read __fakeFieldGet_Calli;
    {class} property Ret: DNOpCode read __fakeFieldGet_Ret;
    {class} property Br_S: DNOpCode read __fakeFieldGet_Br_S;
    {class} property Brfalse_S: DNOpCode read __fakeFieldGet_Brfalse_S;
    {class} property Brtrue_S: DNOpCode read __fakeFieldGet_Brtrue_S;
    {class} property Beq_S: DNOpCode read __fakeFieldGet_Beq_S;
    {class} property Bge_S: DNOpCode read __fakeFieldGet_Bge_S;
    {class} property Bgt_S: DNOpCode read __fakeFieldGet_Bgt_S;
    {class} property Ble_S: DNOpCode read __fakeFieldGet_Ble_S;
    {class} property Blt_S: DNOpCode read __fakeFieldGet_Blt_S;
    {class} property Bne_Un_S: DNOpCode read __fakeFieldGet_Bne_Un_S;
    {class} property Bge_Un_S: DNOpCode read __fakeFieldGet_Bge_Un_S;
    {class} property Bgt_Un_S: DNOpCode read __fakeFieldGet_Bgt_Un_S;
    {class} property Ble_Un_S: DNOpCode read __fakeFieldGet_Ble_Un_S;
    {class} property Blt_Un_S: DNOpCode read __fakeFieldGet_Blt_Un_S;
    {class} property Br: DNOpCode read __fakeFieldGet_Br;
    {class} property Brfalse: DNOpCode read __fakeFieldGet_Brfalse;
    {class} property Brtrue: DNOpCode read __fakeFieldGet_Brtrue;
    {class} property Beq: DNOpCode read __fakeFieldGet_Beq;
    {class} property Bge: DNOpCode read __fakeFieldGet_Bge;
    {class} property Bgt: DNOpCode read __fakeFieldGet_Bgt;
    {class} property Ble: DNOpCode read __fakeFieldGet_Ble;
    {class} property Blt: DNOpCode read __fakeFieldGet_Blt;
    {class} property Bne_Un: DNOpCode read __fakeFieldGet_Bne_Un;
    {class} property Bge_Un: DNOpCode read __fakeFieldGet_Bge_Un;
    {class} property Bgt_Un: DNOpCode read __fakeFieldGet_Bgt_Un;
    {class} property Ble_Un: DNOpCode read __fakeFieldGet_Ble_Un;
    {class} property Blt_Un: DNOpCode read __fakeFieldGet_Blt_Un;
    {class} property Switch: DNOpCode read __fakeFieldGet_Switch;
    {class} property Ldind_I1: DNOpCode read __fakeFieldGet_Ldind_I1;
    {class} property Ldind_U1: DNOpCode read __fakeFieldGet_Ldind_U1;
    {class} property Ldind_I2: DNOpCode read __fakeFieldGet_Ldind_I2;
    {class} property Ldind_U2: DNOpCode read __fakeFieldGet_Ldind_U2;
    {class} property Ldind_I4: DNOpCode read __fakeFieldGet_Ldind_I4;
    {class} property Ldind_U4: DNOpCode read __fakeFieldGet_Ldind_U4;
    {class} property Ldind_I8: DNOpCode read __fakeFieldGet_Ldind_I8;
    {class} property Ldind_I: DNOpCode read __fakeFieldGet_Ldind_I;
    {class} property Ldind_R4: DNOpCode read __fakeFieldGet_Ldind_R4;
    {class} property Ldind_R8: DNOpCode read __fakeFieldGet_Ldind_R8;
    {class} property Ldind_Ref: DNOpCode read __fakeFieldGet_Ldind_Ref;
    {class} property Stind_Ref: DNOpCode read __fakeFieldGet_Stind_Ref;
    {class} property Stind_I1: DNOpCode read __fakeFieldGet_Stind_I1;
    {class} property Stind_I2: DNOpCode read __fakeFieldGet_Stind_I2;
    {class} property Stind_I4: DNOpCode read __fakeFieldGet_Stind_I4;
    {class} property Stind_I8: DNOpCode read __fakeFieldGet_Stind_I8;
    {class} property Stind_R4: DNOpCode read __fakeFieldGet_Stind_R4;
    {class} property Stind_R8: DNOpCode read __fakeFieldGet_Stind_R8;
    {class} property Add: DNOpCode read __fakeFieldGet_Add;
    {class} property Sub: DNOpCode read __fakeFieldGet_Sub;
    {class} property Mul: DNOpCode read __fakeFieldGet_Mul;
    {class} property &Div: DNOpCode read __fakeFieldGet_Div;
    {class} property Div_Un: DNOpCode read __fakeFieldGet_Div_Un;
    {class} property Rem: DNOpCode read __fakeFieldGet_Rem;
    {class} property Rem_Un: DNOpCode read __fakeFieldGet_Rem_Un;
    {class} property &And: DNOpCode read __fakeFieldGet_And;
    {class} property &Or: DNOpCode read __fakeFieldGet_Or;
    {class} property &Xor: DNOpCode read __fakeFieldGet_Xor;
    {class} property &Shl: DNOpCode read __fakeFieldGet_Shl;
    {class} property &Shr: DNOpCode read __fakeFieldGet_Shr;
    {class} property Shr_Un: DNOpCode read __fakeFieldGet_Shr_Un;
    {class} property Neg: DNOpCode read __fakeFieldGet_Neg;
    {class} property &Not: DNOpCode read __fakeFieldGet_Not;
    {class} property Conv_I1: DNOpCode read __fakeFieldGet_Conv_I1;
    {class} property Conv_I2: DNOpCode read __fakeFieldGet_Conv_I2;
    {class} property Conv_I4: DNOpCode read __fakeFieldGet_Conv_I4;
    {class} property Conv_I8: DNOpCode read __fakeFieldGet_Conv_I8;
    {class} property Conv_R4: DNOpCode read __fakeFieldGet_Conv_R4;
    {class} property Conv_R8: DNOpCode read __fakeFieldGet_Conv_R8;
    {class} property Conv_U4: DNOpCode read __fakeFieldGet_Conv_U4;
    {class} property Conv_U8: DNOpCode read __fakeFieldGet_Conv_U8;
    {class} property Callvirt: DNOpCode read __fakeFieldGet_Callvirt;
    {class} property Cpobj: DNOpCode read __fakeFieldGet_Cpobj;
    {class} property Ldobj: DNOpCode read __fakeFieldGet_Ldobj;
    {class} property Ldstr: DNOpCode read __fakeFieldGet_Ldstr;
    {class} property Newobj: DNOpCode read __fakeFieldGet_Newobj;
    {class} property Castclass: DNOpCode read __fakeFieldGet_Castclass;
    {class} property Isinst: DNOpCode read __fakeFieldGet_Isinst;
    {class} property Conv_R_Un: DNOpCode read __fakeFieldGet_Conv_R_Un;
    {class} property Unbox: DNOpCode read __fakeFieldGet_Unbox;
    {class} property Throw: DNOpCode read __fakeFieldGet_Throw;
    {class} property Ldfld: DNOpCode read __fakeFieldGet_Ldfld;
    {class} property Ldflda: DNOpCode read __fakeFieldGet_Ldflda;
    {class} property Stfld: DNOpCode read __fakeFieldGet_Stfld;
    {class} property Ldsfld: DNOpCode read __fakeFieldGet_Ldsfld;
    {class} property Ldsflda: DNOpCode read __fakeFieldGet_Ldsflda;
    {class} property Stsfld: DNOpCode read __fakeFieldGet_Stsfld;
    {class} property Stobj: DNOpCode read __fakeFieldGet_Stobj;
    {class} property Conv_Ovf_I1_Un: DNOpCode read __fakeFieldGet_Conv_Ovf_I1_Un;
    {class} property Conv_Ovf_I2_Un: DNOpCode read __fakeFieldGet_Conv_Ovf_I2_Un;
    {class} property Conv_Ovf_I4_Un: DNOpCode read __fakeFieldGet_Conv_Ovf_I4_Un;
    {class} property Conv_Ovf_I8_Un: DNOpCode read __fakeFieldGet_Conv_Ovf_I8_Un;
    {class} property Conv_Ovf_U1_Un: DNOpCode read __fakeFieldGet_Conv_Ovf_U1_Un;
    {class} property Conv_Ovf_U2_Un: DNOpCode read __fakeFieldGet_Conv_Ovf_U2_Un;
    {class} property Conv_Ovf_U4_Un: DNOpCode read __fakeFieldGet_Conv_Ovf_U4_Un;
    {class} property Conv_Ovf_U8_Un: DNOpCode read __fakeFieldGet_Conv_Ovf_U8_Un;
    {class} property Conv_Ovf_I_Un: DNOpCode read __fakeFieldGet_Conv_Ovf_I_Un;
    {class} property Conv_Ovf_U_Un: DNOpCode read __fakeFieldGet_Conv_Ovf_U_Un;
    {class} property Box: DNOpCode read __fakeFieldGet_Box;
    {class} property Newarr: DNOpCode read __fakeFieldGet_Newarr;
    {class} property Ldlen: DNOpCode read __fakeFieldGet_Ldlen;
    {class} property Ldelema: DNOpCode read __fakeFieldGet_Ldelema;
    {class} property Ldelem_I1: DNOpCode read __fakeFieldGet_Ldelem_I1;
    {class} property Ldelem_U1: DNOpCode read __fakeFieldGet_Ldelem_U1;
    {class} property Ldelem_I2: DNOpCode read __fakeFieldGet_Ldelem_I2;
    {class} property Ldelem_U2: DNOpCode read __fakeFieldGet_Ldelem_U2;
    {class} property Ldelem_I4: DNOpCode read __fakeFieldGet_Ldelem_I4;
    {class} property Ldelem_U4: DNOpCode read __fakeFieldGet_Ldelem_U4;
    {class} property Ldelem_I8: DNOpCode read __fakeFieldGet_Ldelem_I8;
    {class} property Ldelem_I: DNOpCode read __fakeFieldGet_Ldelem_I;
    {class} property Ldelem_R4: DNOpCode read __fakeFieldGet_Ldelem_R4;
    {class} property Ldelem_R8: DNOpCode read __fakeFieldGet_Ldelem_R8;
    {class} property Ldelem_Ref: DNOpCode read __fakeFieldGet_Ldelem_Ref;
    {class} property Stelem_I: DNOpCode read __fakeFieldGet_Stelem_I;
    {class} property Stelem_I1: DNOpCode read __fakeFieldGet_Stelem_I1;
    {class} property Stelem_I2: DNOpCode read __fakeFieldGet_Stelem_I2;
    {class} property Stelem_I4: DNOpCode read __fakeFieldGet_Stelem_I4;
    {class} property Stelem_I8: DNOpCode read __fakeFieldGet_Stelem_I8;
    {class} property Stelem_R4: DNOpCode read __fakeFieldGet_Stelem_R4;
    {class} property Stelem_R8: DNOpCode read __fakeFieldGet_Stelem_R8;
    {class} property Stelem_Ref: DNOpCode read __fakeFieldGet_Stelem_Ref;
    {class} property Ldelem: DNOpCode read __fakeFieldGet_Ldelem;
    {class} property Stelem: DNOpCode read __fakeFieldGet_Stelem;
    {class} property Unbox_Any: DNOpCode read __fakeFieldGet_Unbox_Any;
    {class} property Conv_Ovf_I1: DNOpCode read __fakeFieldGet_Conv_Ovf_I1;
    {class} property Conv_Ovf_U1: DNOpCode read __fakeFieldGet_Conv_Ovf_U1;
    {class} property Conv_Ovf_I2: DNOpCode read __fakeFieldGet_Conv_Ovf_I2;
    {class} property Conv_Ovf_U2: DNOpCode read __fakeFieldGet_Conv_Ovf_U2;
    {class} property Conv_Ovf_I4: DNOpCode read __fakeFieldGet_Conv_Ovf_I4;
    {class} property Conv_Ovf_U4: DNOpCode read __fakeFieldGet_Conv_Ovf_U4;
    {class} property Conv_Ovf_I8: DNOpCode read __fakeFieldGet_Conv_Ovf_I8;
    {class} property Conv_Ovf_U8: DNOpCode read __fakeFieldGet_Conv_Ovf_U8;
    {class} property Refanyval: DNOpCode read __fakeFieldGet_Refanyval;
    {class} property Ckfinite: DNOpCode read __fakeFieldGet_Ckfinite;
    {class} property Mkrefany: DNOpCode read __fakeFieldGet_Mkrefany;
    {class} property Ldtoken: DNOpCode read __fakeFieldGet_Ldtoken;
    {class} property Conv_U2: DNOpCode read __fakeFieldGet_Conv_U2;
    {class} property Conv_U1: DNOpCode read __fakeFieldGet_Conv_U1;
    {class} property Conv_I: DNOpCode read __fakeFieldGet_Conv_I;
    {class} property Conv_Ovf_I: DNOpCode read __fakeFieldGet_Conv_Ovf_I;
    {class} property Conv_Ovf_U: DNOpCode read __fakeFieldGet_Conv_Ovf_U;
    {class} property Add_Ovf: DNOpCode read __fakeFieldGet_Add_Ovf;
    {class} property Add_Ovf_Un: DNOpCode read __fakeFieldGet_Add_Ovf_Un;
    {class} property Mul_Ovf: DNOpCode read __fakeFieldGet_Mul_Ovf;
    {class} property Mul_Ovf_Un: DNOpCode read __fakeFieldGet_Mul_Ovf_Un;
    {class} property Sub_Ovf: DNOpCode read __fakeFieldGet_Sub_Ovf;
    {class} property Sub_Ovf_Un: DNOpCode read __fakeFieldGet_Sub_Ovf_Un;
    {class} property Endfinally: DNOpCode read __fakeFieldGet_Endfinally;
    {class} property Leave: DNOpCode read __fakeFieldGet_Leave;
    {class} property Leave_S: DNOpCode read __fakeFieldGet_Leave_S;
    {class} property Stind_I: DNOpCode read __fakeFieldGet_Stind_I;
    {class} property Conv_U: DNOpCode read __fakeFieldGet_Conv_U;
    {class} property Prefix7: DNOpCode read __fakeFieldGet_Prefix7;
    {class} property Prefix6: DNOpCode read __fakeFieldGet_Prefix6;
    {class} property Prefix5: DNOpCode read __fakeFieldGet_Prefix5;
    {class} property Prefix4: DNOpCode read __fakeFieldGet_Prefix4;
    {class} property Prefix3: DNOpCode read __fakeFieldGet_Prefix3;
    {class} property Prefix2: DNOpCode read __fakeFieldGet_Prefix2;
    {class} property Prefix1: DNOpCode read __fakeFieldGet_Prefix1;
    {class} property Prefixref: DNOpCode read __fakeFieldGet_Prefixref;
    {class} property Arglist: DNOpCode read __fakeFieldGet_Arglist;
    {class} property Ceq: DNOpCode read __fakeFieldGet_Ceq;
    {class} property Cgt: DNOpCode read __fakeFieldGet_Cgt;
    {class} property Cgt_Un: DNOpCode read __fakeFieldGet_Cgt_Un;
    {class} property Clt: DNOpCode read __fakeFieldGet_Clt;
    {class} property Clt_Un: DNOpCode read __fakeFieldGet_Clt_Un;
    {class} property Ldftn: DNOpCode read __fakeFieldGet_Ldftn;
    {class} property Ldvirtftn: DNOpCode read __fakeFieldGet_Ldvirtftn;
    {class} property Ldarg: DNOpCode read __fakeFieldGet_Ldarg;
    {class} property Ldarga: DNOpCode read __fakeFieldGet_Ldarga;
    {class} property Starg: DNOpCode read __fakeFieldGet_Starg;
    {class} property Ldloc: DNOpCode read __fakeFieldGet_Ldloc;
    {class} property Ldloca: DNOpCode read __fakeFieldGet_Ldloca;
    {class} property Stloc: DNOpCode read __fakeFieldGet_Stloc;
    {class} property Localloc: DNOpCode read __fakeFieldGet_Localloc;
    {class} property Endfilter: DNOpCode read __fakeFieldGet_Endfilter;
    {class} property Unaligned: DNOpCode read __fakeFieldGet_Unaligned;
    {class} property Volatile: DNOpCode read __fakeFieldGet_Volatile;
    {class} property Tailcall: DNOpCode read __fakeFieldGet_Tailcall;
    {class} property Initobj: DNOpCode read __fakeFieldGet_Initobj;
    {class} property Constrained: DNOpCode read __fakeFieldGet_Constrained;
    {class} property Cpblk: DNOpCode read __fakeFieldGet_Cpblk;
    {class} property Initblk: DNOpCode read __fakeFieldGet_Initblk;
    {class} property Rethrow: DNOpCode read __fakeFieldGet_Rethrow;
    {class} property Sizeof: DNOpCode read __fakeFieldGet_Sizeof;
    {class} property Refanytype: DNOpCode read __fakeFieldGet_Refanytype;
    {class} property Readonly: DNOpCode read __fakeFieldGet_Readonly;

  { static methods } 

    {class} function TakesSingleByteArgument(inst: DNOpCode): Boolean;

  end;

  [DNTypeName('System.Reflection.Emit.OpCodes')]
  DNOpCodes = interface(DNObject)
  ['{ABFA6553-8DD5-3353-ADF3-B3BD17399BD5}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNOpCodes = class(TDNGenericImport<DNOpCodesClass, DNOpCodes>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNParameterBuilderClass = interface(DNObjectClass)
  ['{F428F4F0-1225-585B-979F-F0EA3EAE4F8F}']
  end;

  [DNTypeName('System.Reflection.Emit.ParameterBuilder')]
  DNParameterBuilder = interface(DNObject)
  ['{7B0B8E9D-1955-338B-991A-0C219FCACAF9}']
  { getters & setters } 

    function get_Name: string;
    function get_Position: Int32;
    function get_Attributes: Int32;
    function get_IsIn: Boolean;
    function get_IsOut: Boolean;
    function get_IsOptional: Boolean;

  { methods } 

    procedure SetConstant(defaultValue: DNObject);
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    function GetToken: DNParameterToken;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Name: string read get_Name;
    property Position: Int32 read get_Position;
    property Attributes: Int32 read get_Attributes;
    property IsIn: Boolean read get_IsIn;
    property IsOut: Boolean read get_IsOut;
    property IsOptional: Boolean read get_IsOptional;
  end;

  TDNParameterBuilder = class(TDNGenericImport<DNParameterBuilderClass, DNParameterBuilder>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNSignatureHelperClass = interface(DNObjectClass)
  ['{5FBFCCD9-4988-5F65-B133-1922B4C95935}']
  { static methods } 

    {class} function GetMethodSigHelper(&mod: DNModule; returnType: DNType; parameterTypes: TArray<DNType>): DNSignatureHelper; overload;
    {class} function GetMethodSigHelper(&mod: DNModule; callingConvention: DNCallingConventions; returnType: DNType): DNSignatureHelper; overload;
    {class} function GetMethodSigHelper(&mod: DNModule; unmanagedCallConv: DNCallingConvention; returnType: DNType): DNSignatureHelper; overload;
    {class} function GetLocalVarSigHelper: DNSignatureHelper; overload;
    {class} function GetMethodSigHelper(callingConvention: DNCallingConventions; returnType: DNType): DNSignatureHelper; overload;
    {class} function GetMethodSigHelper(unmanagedCallingConvention: DNCallingConvention; returnType: DNType): DNSignatureHelper; overload;
    {class} function GetLocalVarSigHelper(&mod: DNModule): DNSignatureHelper; overload;
    {class} function GetFieldSigHelper(&mod: DNModule): DNSignatureHelper;
    {class} function GetPropertySigHelper(&mod: DNModule; returnType: DNType; parameterTypes: TArray<DNType>): DNSignatureHelper; overload;
    {class} function GetPropertySigHelper(&mod: DNModule; returnType: DNType; requiredReturnTypeCustomModifiers: TArray<DNType>; optionalReturnTypeCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; requiredParameterTypeCustomModifiers: TArray<TArray<DNType>>; optionalParameterTypeCustomModifiers: TArray<TArray<DNType>>): DNSignatureHelper; overload;
    {class} function GetPropertySigHelper(&mod: DNModule; callingConvention: DNCallingConventions; returnType: DNType; requiredReturnTypeCustomModifiers: TArray<DNType>; optionalReturnTypeCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; requiredParameterTypeCustomModifiers: TArray<TArray<DNType>>; optionalParameterTypeCustomModifiers: TArray<TArray<DNType>>): DNSignatureHelper; overload;

  end;

  [DNTypeName('System.Reflection.Emit.SignatureHelper')]
  DNSignatureHelper = interface(DNObject)
  ['{DC3C254E-D49C-3CB7-A01F-D19CFB7899C1}']
  { methods } 

    procedure AddArgument(clsArgument: DNType); overload;
    procedure AddArgument(argument: DNType; pinned: Boolean); overload;
    procedure AddArguments(arguments: TArray<DNType>; requiredCustomModifiers: TArray<TArray<DNType>>; optionalCustomModifiers: TArray<TArray<DNType>>);
    procedure AddArgument(argument: DNType; requiredCustomModifiers: TArray<DNType>; optionalCustomModifiers: TArray<DNType>); overload;
    procedure AddSentinel;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetSignature: TArray<Byte>;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNSignatureHelper = class(TDNGenericImport<DNSignatureHelperClass, DNSignatureHelper>) end;

  //-------------namespace: System.Reflection----------------
  DNExceptionHandlingClauseClass = interface(DNObjectClass)
  ['{85358372-49E3-5BDC-B175-C24751EA6B69}']
  end;

  [DNTypeName('System.Reflection.ExceptionHandlingClause')]
  DNExceptionHandlingClause = interface(DNObject)
  ['{B29AEE20-DB2E-3DEA-9AC5-CF282C61D75D}']
  { getters & setters } 

    function get_Flags: DNExceptionHandlingClauseOptions;
    function get_TryOffset: Int32;
    function get_TryLength: Int32;
    function get_HandlerOffset: Int32;
    function get_HandlerLength: Int32;
    function get_FilterOffset: Int32;
    function get_CatchType: DNType;

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Flags: DNExceptionHandlingClauseOptions read get_Flags;
    property TryOffset: Int32 read get_TryOffset;
    property TryLength: Int32 read get_TryLength;
    property HandlerOffset: Int32 read get_HandlerOffset;
    property HandlerLength: Int32 read get_HandlerLength;
    property FilterOffset: Int32 read get_FilterOffset;
    property CatchType: DNType read get_CatchType;
  end;

  TDNExceptionHandlingClause = class(TDNGenericImport<DNExceptionHandlingClauseClass, DNExceptionHandlingClause>) end;

  //-------------namespace: System.Reflection----------------
  DNIntrospectionExtensionsClass = interface(DNObjectClass)
  ['{99A5FD10-F2A5-5867-9145-DB31875ED1D4}']
  { static methods } 

    {class} function GetTypeInfo(&type: DNType): DNTypeInfo;

  end;

  [DNTypeName('System.Reflection.IntrospectionExtensions')]
  DNIntrospectionExtensions = interface(DNObject)
  ['{7C0686DF-03DC-397C-856F-8F4770F0236B}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNIntrospectionExtensions = class(TDNGenericImport<DNIntrospectionExtensionsClass, DNIntrospectionExtensions>) end;

  //-------------namespace: System.Reflection----------------
  DNLocalVariableInfoClass = interface(DNObjectClass)
  ['{A8BDE2EF-C033-5C06-A820-AFFEA2E74E39}']
  end;

  [DNTypeName('System.Reflection.LocalVariableInfo')]
  DNLocalVariableInfo = interface(DNObject)
  ['{19257FD2-30C9-3BD6-BBF6-09B38F86BDA1}']
  { getters & setters } 

    function get_LocalType: DNType;
    function get_IsPinned: Boolean;
    function get_LocalIndex: Int32;

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property LocalType: DNType read get_LocalType;
    property IsPinned: Boolean read get_IsPinned;
    property LocalIndex: Int32 read get_LocalIndex;
  end;

  TDNLocalVariableInfo = class(TDNGenericImport<DNLocalVariableInfoClass, DNLocalVariableInfo>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNLocalBuilderClass = interface(DNLocalVariableInfoClass)
  ['{0BC4669A-B9C0-5BDC-B857-C7AFD5D02E1E}']
  end;

  [DNTypeName('System.Reflection.Emit.LocalBuilder')]
  DNLocalBuilder = interface(DNLocalVariableInfo)
  ['{F377751A-B83C-3B6D-9FE1-FB2409FA7E8E}']
  { getters & setters } 

    function get_IsPinned: Boolean;
    function get_LocalType: DNType;
    function get_LocalIndex: Int32;

  { methods } 

    procedure SetLocalSymInfo(name: string); overload;
    procedure SetLocalSymInfo(name: string; startOffset: Int32; endOffset: Int32); overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property IsPinned: Boolean read get_IsPinned;
    property LocalType: DNType read get_LocalType;
    property LocalIndex: Int32 read get_LocalIndex;
  end;

  TDNLocalBuilder = class(TDNGenericImport<DNLocalBuilderClass, DNLocalBuilder>) end;

  //-------------namespace: System.Reflection----------------
  DNManifestResourceInfoClass = interface(DNObjectClass)
  ['{97681175-7608-5B66-9333-D7DEE313ABD2}']
  { constructors } 

    {class} function init(containingAssembly: DNAssembly; containingFileName: string; resourceLocation: DNResourceLocation): DNManifestResourceInfo;

  end;

  [DNTypeName('System.Reflection.ManifestResourceInfo')]
  DNManifestResourceInfo = interface(DNObject)
  ['{3313540F-C315-3360-BF6F-20540EA0E723}']
  { getters & setters } 

    function get_ReferencedAssembly: DNAssembly;
    function get_FileName: string;
    function get_ResourceLocation: DNResourceLocation;

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property ReferencedAssembly: DNAssembly read get_ReferencedAssembly;
    property FileName: string read get_FileName;
    property ResourceLocation: DNResourceLocation read get_ResourceLocation;
  end;

  TDNManifestResourceInfo = class(TDNGenericImport<DNManifestResourceInfoClass, DNManifestResourceInfo>) end;

  //-------------namespace: System.Reflection----------------
  DNMemberInfoClass = interface(DNObjectClass)
  ['{577A6897-8C71-5BE8-AB97-49E7AAFB5DAB}']
  end;

  [DNTypeName('System.Reflection.MemberInfo')]
  DNMemberInfo = interface(DNICustomAttributeProvider)
  ['{9FCC2A0B-47BA-3DC5-8A30-EFFFCA71B17C}']
  { getters & setters } 

    function get_MemberType: DNMemberTypes;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_Module: DNModule;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property MemberType: DNMemberTypes read get_MemberType;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property Module: DNModule read get_Module;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNMemberInfo = class(TDNGenericImport<DNMemberInfoClass, DNMemberInfo>) end;

  //-------------namespace: System.Reflection----------------
  DNEventInfoClass = interface(DNMemberInfoClass)
  ['{C2FA09A6-3424-5983-90FD-CF06F4D095B8}']
  end;

  [DNTypeName('System.Reflection.EventInfo')]
  DNEventInfo = interface(DNMemberInfo)
  ['{D2B4ACE9-9848-3923-A752-0A52FD14A49C}']
  { getters & setters } 

    function get_MemberType: DNMemberTypes;
    function get_Attributes: DNEventAttributes;
    function get_IsSpecialName: Boolean;
    function get_AddMethod: DNMethodInfo;
    function get_RemoveMethod: DNMethodInfo;
    function get_RaiseMethod: DNMethodInfo;
    function get_IsMulticast: Boolean;
    function get_EventHandlerType: DNType;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_Module: DNModule;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    function GetOtherMethods: TArray<DNMethodInfo>; overload;
    function GetOtherMethods(nonPublic: Boolean): TArray<DNMethodInfo>; overload;
    function GetAddMethod: DNMethodInfo; overload;
    function GetRemoveMethod: DNMethodInfo; overload;
    function GetRaiseMethod: DNMethodInfo; overload;
    function GetAddMethod(nonPublic: Boolean): DNMethodInfo; overload;
    function GetRemoveMethod(nonPublic: Boolean): DNMethodInfo; overload;
    function GetRaiseMethod(nonPublic: Boolean): DNMethodInfo; overload;
    procedure AddEventHandler(target: DNObject; handler: DNDelegate);
    procedure RemoveEventHandler(target: DNObject; handler: DNDelegate);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property MemberType: DNMemberTypes read get_MemberType;
    property Attributes: DNEventAttributes read get_Attributes;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property AddMethod: DNMethodInfo read get_AddMethod;
    property RemoveMethod: DNMethodInfo read get_RemoveMethod;
    property RaiseMethod: DNMethodInfo read get_RaiseMethod;
    property IsMulticast: Boolean read get_IsMulticast;
    property EventHandlerType: DNType read get_EventHandlerType;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property Module: DNModule read get_Module;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNEventInfo = class(TDNGenericImport<DNEventInfoClass, DNEventInfo>) end;

  //-------------namespace: System.Reflection----------------
  DNFieldInfoClass = interface(DNMemberInfoClass)
  ['{C85F7B06-513F-5691-83B9-254B6DB0A4A1}']
  { static methods } 

    {class} function GetFieldFromHandle(handle: DNRuntimeFieldHandle): DNFieldInfo; overload;
    {class} function GetFieldFromHandle(handle: DNRuntimeFieldHandle; declaringType: DNRuntimeTypeHandle): DNFieldInfo; overload;

  end;

  [DNTypeName('System.Reflection.FieldInfo')]
  DNFieldInfo = interface(DNMemberInfo)
  ['{13A46A2D-42C2-3436-916C-A38C72D4B7FF}']
  { getters & setters } 

    function get_MemberType: DNMemberTypes;
    function get_Attributes: DNFieldAttributes;
    function get_FieldType: DNType;
    function get_IsInitOnly: Boolean;
    function get_IsLiteral: Boolean;
    function get_IsNotSerialized: Boolean;
    function get_IsPinvokeImpl: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsStatic: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamily: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsPublic: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_FieldHandle: DNRuntimeFieldHandle;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_Module: DNModule;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetValue(obj: DNObject): DNObject;
    procedure SetValue(obj: DNObject; value: DNObject); overload;
    procedure SetValue(obj: DNObject; value: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; culture: DNCultureInfo); overload;
    procedure SetValueDirect(obj: DNTypedReference; value: DNObject);
    function GetValueDirect(obj: DNTypedReference): DNObject;
    function GetRawConstantValue: DNObject;
    function GetOptionalCustomModifiers: TArray<DNType>;
    function GetRequiredCustomModifiers: TArray<DNType>;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property MemberType: DNMemberTypes read get_MemberType;
    property Attributes: DNFieldAttributes read get_Attributes;
    property FieldType: DNType read get_FieldType;
    property IsInitOnly: Boolean read get_IsInitOnly;
    property IsLiteral: Boolean read get_IsLiteral;
    property IsNotSerialized: Boolean read get_IsNotSerialized;
    property IsPinvokeImpl: Boolean read get_IsPinvokeImpl;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsStatic: Boolean read get_IsStatic;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamily: Boolean read get_IsFamily;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsPublic: Boolean read get_IsPublic;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property FieldHandle: DNRuntimeFieldHandle read get_FieldHandle;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property Module: DNModule read get_Module;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNFieldInfo = class(TDNGenericImport<DNFieldInfoClass, DNFieldInfo>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNFieldBuilderClass = interface(DNFieldInfoClass)
  ['{893D71A9-CBE4-5025-9775-984E7CAC9C96}']
  end;

  [DNTypeName('System.Reflection.Emit.FieldBuilder')]
  DNFieldBuilder = interface(DNFieldInfo)
  ['{DFD6F8A8-5670-3F2E-B7FE-A7174D1757FE}']
  { getters & setters } 

    function get_Module: DNModule;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_FieldType: DNType;
    function get_FieldHandle: DNRuntimeFieldHandle;
    function get_Attributes: DNFieldAttributes;
    function get_MemberType: DNMemberTypes;
    function get_IsInitOnly: Boolean;
    function get_IsLiteral: Boolean;
    function get_IsNotSerialized: Boolean;
    function get_IsPinvokeImpl: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsStatic: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamily: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsPublic: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    function GetValue(obj: DNObject): DNObject;
    procedure SetValue(obj: DNObject; val: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; culture: DNCultureInfo); overload;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetToken: DNFieldToken;
    procedure SetOffset(iOffset: Int32);
    procedure SetConstant(defaultValue: DNObject);
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    procedure SetValue(obj: DNObject; value: DNObject); overload;
    procedure SetValueDirect(obj: DNTypedReference; value: DNObject);
    function GetValueDirect(obj: DNTypedReference): DNObject;
    function GetRawConstantValue: DNObject;
    function GetOptionalCustomModifiers: TArray<DNType>;
    function GetRequiredCustomModifiers: TArray<DNType>;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Module: DNModule read get_Module;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property FieldType: DNType read get_FieldType;
    property FieldHandle: DNRuntimeFieldHandle read get_FieldHandle;
    property Attributes: DNFieldAttributes read get_Attributes;
    property MemberType: DNMemberTypes read get_MemberType;
    property IsInitOnly: Boolean read get_IsInitOnly;
    property IsLiteral: Boolean read get_IsLiteral;
    property IsNotSerialized: Boolean read get_IsNotSerialized;
    property IsPinvokeImpl: Boolean read get_IsPinvokeImpl;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsStatic: Boolean read get_IsStatic;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamily: Boolean read get_IsFamily;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsPublic: Boolean read get_IsPublic;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNFieldBuilder = class(TDNGenericImport<DNFieldBuilderClass, DNFieldBuilder>) end;

  //-------------namespace: System.Reflection----------------
  DNMethodBaseClass = interface(DNMemberInfoClass)
  ['{DCEC3857-2950-55FA-97D1-03D68A01A5D4}']
  { static methods } 

    {class} function GetMethodFromHandle(handle: DNRuntimeMethodHandle): DNMethodBase; overload;
    {class} function GetMethodFromHandle(handle: DNRuntimeMethodHandle; declaringType: DNRuntimeTypeHandle): DNMethodBase; overload;
    {class} function GetCurrentMethod: DNMethodBase;

  end;

  [DNTypeName('System.Reflection.MethodBase')]
  DNMethodBase = interface(DNMemberInfo)
  ['{99ACEE48-E43F-3A61-9FBF-F8E502F11AA7}']
  { getters & setters } 

    function get_Attributes: DNMethodAttributes;
    function get_MethodImplementationFlags: DNMethodImplAttributes;
    function get_CallingConvention: DNCallingConventions;
    function get_IsAbstract: Boolean;
    function get_IsConstructor: Boolean;
    function get_IsFinal: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsStatic: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamily: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsPublic: Boolean;
    function get_IsConstructedGenericMethod: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_MethodHandle: DNRuntimeMethodHandle;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_MemberType: DNMemberTypes;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_Module: DNModule;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    function GetParameters: TArray<DNParameterInfo>;
    function GetMethodImplementationFlags: DNMethodImplAttributes;
    function GetMethodBody: DNMethodBody;
    function GetGenericArguments: TArray<DNType>;
    function Invoke(obj: DNObject; parameters: TArray<DNObject>): DNObject; overload;
    function Invoke(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Attributes: DNMethodAttributes read get_Attributes;
    property MethodImplementationFlags: DNMethodImplAttributes read get_MethodImplementationFlags;
    property CallingConvention: DNCallingConventions read get_CallingConvention;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsConstructor: Boolean read get_IsConstructor;
    property IsFinal: Boolean read get_IsFinal;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsStatic: Boolean read get_IsStatic;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamily: Boolean read get_IsFamily;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsPublic: Boolean read get_IsPublic;
    property IsConstructedGenericMethod: Boolean read get_IsConstructedGenericMethod;
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property MethodHandle: DNRuntimeMethodHandle read get_MethodHandle;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property MemberType: DNMemberTypes read get_MemberType;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property Module: DNModule read get_Module;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNMethodBase = class(TDNGenericImport<DNMethodBaseClass, DNMethodBase>) end;

  //-------------namespace: System.Reflection----------------
  DNConstructorInfoClass = interface(DNMethodBaseClass)
  ['{D6CB0840-A3AB-5893-BE1E-BA2763F67D41}']
  { static fields getter & setter } 

   function __fakeFieldGet_ConstructorName: string;
   function __fakeFieldGet_TypeConstructorName: string;

  { static fields } 

    {class} property ConstructorName: string read __fakeFieldGet_ConstructorName;
    {class} property TypeConstructorName: string read __fakeFieldGet_TypeConstructorName;

  end;

  [DNTypeName('System.Reflection.ConstructorInfo')]
  DNConstructorInfo = interface(DNMethodBase)
  ['{81C64293-B217-3A8F-8103-20C6949674EE}']
  { getters & setters } 

    function get_MemberType: DNMemberTypes;
    function get_Attributes: DNMethodAttributes;
    function get_MethodImplementationFlags: DNMethodImplAttributes;
    function get_CallingConvention: DNCallingConventions;
    function get_IsAbstract: Boolean;
    function get_IsConstructor: Boolean;
    function get_IsFinal: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsStatic: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamily: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsPublic: Boolean;
    function get_IsConstructedGenericMethod: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_MethodHandle: DNRuntimeMethodHandle;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_Module: DNModule;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    function Invoke(parameters: TArray<DNObject>): DNObject; overload;
    function Invoke(invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetParameters: TArray<DNParameterInfo>;
    function GetMethodImplementationFlags: DNMethodImplAttributes;
    function GetMethodBody: DNMethodBody;
    function GetGenericArguments: TArray<DNType>;
    function Invoke(obj: DNObject; parameters: TArray<DNObject>): DNObject; overload;
    function Invoke(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property MemberType: DNMemberTypes read get_MemberType;
    property Attributes: DNMethodAttributes read get_Attributes;
    property MethodImplementationFlags: DNMethodImplAttributes read get_MethodImplementationFlags;
    property CallingConvention: DNCallingConventions read get_CallingConvention;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsConstructor: Boolean read get_IsConstructor;
    property IsFinal: Boolean read get_IsFinal;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsStatic: Boolean read get_IsStatic;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamily: Boolean read get_IsFamily;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsPublic: Boolean read get_IsPublic;
    property IsConstructedGenericMethod: Boolean read get_IsConstructedGenericMethod;
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property MethodHandle: DNRuntimeMethodHandle read get_MethodHandle;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property Module: DNModule read get_Module;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNConstructorInfo = class(TDNGenericImport<DNConstructorInfoClass, DNConstructorInfo>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNConstructorBuilderClass = interface(DNConstructorInfoClass)
  ['{E873A1FC-D2E6-59E9-8474-696A0A9242DA}']
  end;

  [DNTypeName('System.Reflection.Emit.ConstructorBuilder')]
  DNConstructorBuilder = interface(DNConstructorInfo)
  ['{E6992F6A-D869-3969-82A2-825EA4774ACD}']
  { getters & setters } 

    function get_Module: DNModule;
    function get_ReflectedType: DNType;
    function get_DeclaringType: DNType;
    function get_Name: string;
    function get_Attributes: DNMethodAttributes;
    function get_MethodHandle: DNRuntimeMethodHandle;
    function get_CallingConvention: DNCallingConventions;
    function get_Signature: string;
    function get_InitLocals: Boolean;
    procedure set_InitLocals(value: Boolean);
    function get_MemberType: DNMemberTypes;
    function get_MethodImplementationFlags: DNMethodImplAttributes;
    function get_IsAbstract: Boolean;
    function get_IsConstructor: Boolean;
    function get_IsFinal: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsStatic: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamily: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsPublic: Boolean;
    function get_IsConstructedGenericMethod: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    function ToString: string;
    function Invoke(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetParameters: TArray<DNParameterInfo>;
    function GetMethodImplementationFlags: DNMethodImplAttributes;
    function Invoke(invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetToken: DNMethodToken;
    function DefineParameter(iSequence: Int32; attributes: DNParameterAttributes; strParamName: string): DNParameterBuilder;
    function GetILGenerator: DNILGenerator; overload;
    function GetILGenerator(streamSize: Int32): DNILGenerator; overload;
    function GetModule: DNModule;
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    procedure SetImplementationFlags(attributes: DNMethodImplAttributes);
    function Invoke(parameters: TArray<DNObject>): DNObject; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetMethodBody: DNMethodBody;
    function GetGenericArguments: TArray<DNType>;
    function Invoke(obj: DNObject; parameters: TArray<DNObject>): DNObject; overload;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;

  { propertys } 

    property Module: DNModule read get_Module;
    property ReflectedType: DNType read get_ReflectedType;
    property DeclaringType: DNType read get_DeclaringType;
    property Name: string read get_Name;
    property Attributes: DNMethodAttributes read get_Attributes;
    property MethodHandle: DNRuntimeMethodHandle read get_MethodHandle;
    property CallingConvention: DNCallingConventions read get_CallingConvention;
    property Signature: string read get_Signature;
    property InitLocals: Boolean read get_InitLocals write set_InitLocals;
    property MemberType: DNMemberTypes read get_MemberType;
    property MethodImplementationFlags: DNMethodImplAttributes read get_MethodImplementationFlags;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsConstructor: Boolean read get_IsConstructor;
    property IsFinal: Boolean read get_IsFinal;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsStatic: Boolean read get_IsStatic;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamily: Boolean read get_IsFamily;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsPublic: Boolean read get_IsPublic;
    property IsConstructedGenericMethod: Boolean read get_IsConstructedGenericMethod;
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNConstructorBuilder = class(TDNGenericImport<DNConstructorBuilderClass, DNConstructorBuilder>) end;

  //-------------namespace: System.Reflection----------------
  DNMethodInfoClass = interface(DNMethodBaseClass)
  ['{2BC94D6E-8C5F-56FB-828D-46C8787276EC}']
  end;

  [DNTypeName('System.Reflection.MethodInfo')]
  DNMethodInfo = interface(DNMethodBase)
  ['{65E92C99-D4DF-3244-9102-E8E7B599327A}']
  { getters & setters } 

    function get_MemberType: DNMemberTypes;
    function get_ReturnParameter: DNParameterInfo;
    function get_ReturnType: DNType;
    function get_ReturnTypeCustomAttributes: DNICustomAttributeProvider;
    function get_Attributes: DNMethodAttributes;
    function get_MethodImplementationFlags: DNMethodImplAttributes;
    function get_CallingConvention: DNCallingConventions;
    function get_IsAbstract: Boolean;
    function get_IsConstructor: Boolean;
    function get_IsFinal: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsStatic: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamily: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsPublic: Boolean;
    function get_IsConstructedGenericMethod: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_MethodHandle: DNRuntimeMethodHandle;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_Module: DNModule;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    function GetGenericArguments: TArray<DNType>;
    function GetGenericMethodDefinition: DNMethodInfo;
    function MakeGenericMethod(typeArguments: TArray<DNType>): DNMethodInfo;
    function GetBaseDefinition: DNMethodInfo;
    function CreateDelegate(delegateType: DNType): DNDelegate; overload;
    function CreateDelegate(delegateType: DNType; target: DNObject): DNDelegate; overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetParameters: TArray<DNParameterInfo>;
    function GetMethodImplementationFlags: DNMethodImplAttributes;
    function GetMethodBody: DNMethodBody;
    function Invoke(obj: DNObject; parameters: TArray<DNObject>): DNObject; overload;
    function Invoke(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property MemberType: DNMemberTypes read get_MemberType;
    property ReturnParameter: DNParameterInfo read get_ReturnParameter;
    property ReturnType: DNType read get_ReturnType;
    property ReturnTypeCustomAttributes: DNICustomAttributeProvider read get_ReturnTypeCustomAttributes;
    property Attributes: DNMethodAttributes read get_Attributes;
    property MethodImplementationFlags: DNMethodImplAttributes read get_MethodImplementationFlags;
    property CallingConvention: DNCallingConventions read get_CallingConvention;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsConstructor: Boolean read get_IsConstructor;
    property IsFinal: Boolean read get_IsFinal;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsStatic: Boolean read get_IsStatic;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamily: Boolean read get_IsFamily;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsPublic: Boolean read get_IsPublic;
    property IsConstructedGenericMethod: Boolean read get_IsConstructedGenericMethod;
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property MethodHandle: DNRuntimeMethodHandle read get_MethodHandle;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property Module: DNModule read get_Module;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNMethodInfo = class(TDNGenericImport<DNMethodInfoClass, DNMethodInfo>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNDynamicMethodClass = interface(DNMethodInfoClass)
  ['{0E64DB79-1D96-57E4-94C4-800EA76BE149}']
  { constructors } 

    {class} function init(name: string; returnType: DNType; parameterTypes: TArray<DNType>): DNDynamicMethod; overload;
    {class} function init(name: string; returnType: DNType; parameterTypes: TArray<DNType>; restrictedSkipVisibility: Boolean): DNDynamicMethod; overload;
    {class} function init(name: string; returnType: DNType; parameterTypes: TArray<DNType>; m: DNModule): DNDynamicMethod; overload;
    {class} function init(name: string; returnType: DNType; parameterTypes: TArray<DNType>; m: DNModule; skipVisibility: Boolean): DNDynamicMethod; overload;
    {class} function init(name: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>; m: DNModule; skipVisibility: Boolean): DNDynamicMethod; overload;
    {class} function init(name: string; returnType: DNType; parameterTypes: TArray<DNType>; owner: DNType): DNDynamicMethod; overload;
    {class} function init(name: string; returnType: DNType; parameterTypes: TArray<DNType>; owner: DNType; skipVisibility: Boolean): DNDynamicMethod; overload;
    {class} function init(name: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>; owner: DNType; skipVisibility: Boolean): DNDynamicMethod; overload;

  end;

  [DNTypeName('System.Reflection.Emit.DynamicMethod')]
  DNDynamicMethod = interface(DNMethodInfo)
  ['{448DAB94-7DA0-3665-873A-EE52292E967A}']
  { getters & setters } 

    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_Module: DNModule;
    function get_MethodHandle: DNRuntimeMethodHandle;
    function get_Attributes: DNMethodAttributes;
    function get_CallingConvention: DNCallingConventions;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_ReturnType: DNType;
    function get_ReturnParameter: DNParameterInfo;
    function get_ReturnTypeCustomAttributes: DNICustomAttributeProvider;
    function get_InitLocals: Boolean;
    procedure set_InitLocals(value: Boolean);
    function get_MemberType: DNMemberTypes;
    function get_MethodImplementationFlags: DNMethodImplAttributes;
    function get_IsAbstract: Boolean;
    function get_IsConstructor: Boolean;
    function get_IsFinal: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsStatic: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamily: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsPublic: Boolean;
    function get_IsConstructedGenericMethod: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    function CreateDelegate(delegateType: DNType): DNDelegate; overload;
    function CreateDelegate(delegateType: DNType; target: DNObject): DNDelegate; overload;
    function ToString: string;
    function GetBaseDefinition: DNMethodInfo;
    function GetParameters: TArray<DNParameterInfo>;
    function GetMethodImplementationFlags: DNMethodImplAttributes;
    function Invoke(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function DefineParameter(position: Int32; attributes: DNParameterAttributes; parameterName: string): DNParameterBuilder;
    function GetILGenerator: DNILGenerator; overload;
    function GetILGenerator(streamSize: Int32): DNILGenerator; overload;
    function GetGenericArguments: TArray<DNType>;
    function GetGenericMethodDefinition: DNMethodInfo;
    function MakeGenericMethod(typeArguments: TArray<DNType>): DNMethodInfo;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetMethodBody: DNMethodBody;
    function Invoke(obj: DNObject; parameters: TArray<DNObject>): DNObject; overload;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;

  { propertys } 

    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property Module: DNModule read get_Module;
    property MethodHandle: DNRuntimeMethodHandle read get_MethodHandle;
    property Attributes: DNMethodAttributes read get_Attributes;
    property CallingConvention: DNCallingConventions read get_CallingConvention;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property ReturnType: DNType read get_ReturnType;
    property ReturnParameter: DNParameterInfo read get_ReturnParameter;
    property ReturnTypeCustomAttributes: DNICustomAttributeProvider read get_ReturnTypeCustomAttributes;
    property InitLocals: Boolean read get_InitLocals write set_InitLocals;
    property MemberType: DNMemberTypes read get_MemberType;
    property MethodImplementationFlags: DNMethodImplAttributes read get_MethodImplementationFlags;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsConstructor: Boolean read get_IsConstructor;
    property IsFinal: Boolean read get_IsFinal;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsStatic: Boolean read get_IsStatic;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamily: Boolean read get_IsFamily;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsPublic: Boolean read get_IsPublic;
    property IsConstructedGenericMethod: Boolean read get_IsConstructedGenericMethod;
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNDynamicMethod = class(TDNGenericImport<DNDynamicMethodClass, DNDynamicMethod>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNMethodBuilderClass = interface(DNMethodInfoClass)
  ['{76E0673B-9C62-51B6-BDD3-63EEF5157D69}']
  end;

  [DNTypeName('System.Reflection.Emit.MethodBuilder')]
  DNMethodBuilder = interface(DNMethodInfo)
  ['{7F61376B-0C82-3D85-8EB4-DD7A3675B678}']
  { getters & setters } 

    function get_Name: string;
    function get_Module: DNModule;
    function get_DeclaringType: DNType;
    function get_ReturnTypeCustomAttributes: DNICustomAttributeProvider;
    function get_ReflectedType: DNType;
    function get_Attributes: DNMethodAttributes;
    function get_CallingConvention: DNCallingConventions;
    function get_MethodHandle: DNRuntimeMethodHandle;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_ReturnType: DNType;
    function get_ReturnParameter: DNParameterInfo;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_InitLocals: Boolean;
    procedure set_InitLocals(value: Boolean);
    function get_Signature: string;
    function get_MemberType: DNMemberTypes;
    function get_MethodImplementationFlags: DNMethodImplAttributes;
    function get_IsAbstract: Boolean;
    function get_IsConstructor: Boolean;
    function get_IsFinal: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsStatic: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamily: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsPublic: Boolean;
    function get_IsConstructedGenericMethod: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function Invoke(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; parameters: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetMethodImplementationFlags: DNMethodImplAttributes;
    function GetBaseDefinition: DNMethodInfo;
    function GetParameters: TArray<DNParameterInfo>;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetGenericMethodDefinition: DNMethodInfo;
    function GetGenericArguments: TArray<DNType>;
    function MakeGenericMethod(typeArguments: TArray<DNType>): DNMethodInfo;
    function DefineGenericParameters(names: TArray<string>): TArray<DNGenericTypeParameterBuilder>;
    function GetToken: DNMethodToken;
    procedure SetParameters(parameterTypes: TArray<DNType>);
    procedure SetReturnType(returnType: DNType);
    procedure SetSignature(returnType: DNType; returnTypeRequiredCustomModifiers: TArray<DNType>; returnTypeOptionalCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; parameterTypeRequiredCustomModifiers: TArray<TArray<DNType>>; parameterTypeOptionalCustomModifiers: TArray<TArray<DNType>>);
    function DefineParameter(position: Int32; attributes: DNParameterAttributes; strParamName: string): DNParameterBuilder;
    procedure SetImplementationFlags(attributes: DNMethodImplAttributes);
    function GetILGenerator: DNILGenerator; overload;
    function GetILGenerator(size: Int32): DNILGenerator; overload;
    function GetModule: DNModule;
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    function CreateDelegate(delegateType: DNType): DNDelegate; overload;
    function CreateDelegate(delegateType: DNType; target: DNObject): DNDelegate; overload;
    function GetMethodBody: DNMethodBody;
    function Invoke(obj: DNObject; parameters: TArray<DNObject>): DNObject; overload;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetType: DNType;

  { propertys } 

    property Name: string read get_Name;
    property Module: DNModule read get_Module;
    property DeclaringType: DNType read get_DeclaringType;
    property ReturnTypeCustomAttributes: DNICustomAttributeProvider read get_ReturnTypeCustomAttributes;
    property ReflectedType: DNType read get_ReflectedType;
    property Attributes: DNMethodAttributes read get_Attributes;
    property CallingConvention: DNCallingConventions read get_CallingConvention;
    property MethodHandle: DNRuntimeMethodHandle read get_MethodHandle;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property ReturnType: DNType read get_ReturnType;
    property ReturnParameter: DNParameterInfo read get_ReturnParameter;
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    property InitLocals: Boolean read get_InitLocals write set_InitLocals;
    property Signature: string read get_Signature;
    property MemberType: DNMemberTypes read get_MemberType;
    property MethodImplementationFlags: DNMethodImplAttributes read get_MethodImplementationFlags;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsConstructor: Boolean read get_IsConstructor;
    property IsFinal: Boolean read get_IsFinal;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsStatic: Boolean read get_IsStatic;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamily: Boolean read get_IsFamily;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsPublic: Boolean read get_IsPublic;
    property IsConstructedGenericMethod: Boolean read get_IsConstructedGenericMethod;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNMethodBuilder = class(TDNGenericImport<DNMethodBuilderClass, DNMethodBuilder>) end;

  //-------------namespace: System.Reflection----------------
  DNPropertyInfoClass = interface(DNMemberInfoClass)
  ['{CF81CE78-D014-5A5D-8B30-5A1364A205C1}']
  end;

  [DNTypeName('System.Reflection.PropertyInfo')]
  DNPropertyInfo = interface(DNMemberInfo)
  ['{25ECF356-DD18-3AB8-B746-A6560CE7CB8A}']
  { getters & setters } 

    function get_MemberType: DNMemberTypes;
    function get_PropertyType: DNType;
    function get_Attributes: DNPropertyAttributes;
    function get_IsSpecialName: Boolean;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_GetMethod: DNMethodInfo;
    function get_SetMethod: DNMethodInfo;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_Module: DNModule;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    function GetIndexParameters: TArray<DNParameterInfo>;
    function GetAccessors: TArray<DNMethodInfo>; overload;
    function GetAccessors(nonPublic: Boolean): TArray<DNMethodInfo>; overload;
    function GetGetMethod: DNMethodInfo; overload;
    function GetGetMethod(nonPublic: Boolean): DNMethodInfo; overload;
    function GetSetMethod: DNMethodInfo; overload;
    function GetSetMethod(nonPublic: Boolean): DNMethodInfo; overload;
    function GetOptionalCustomModifiers: TArray<DNType>;
    function GetRequiredCustomModifiers: TArray<DNType>;
    function GetValue(obj: DNObject): DNObject; overload;
    function GetValue(obj: DNObject; index: TArray<DNObject>): DNObject; overload;
    function GetValue(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; index: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetConstantValue: DNObject;
    function GetRawConstantValue: DNObject;
    procedure SetValue(obj: DNObject; value: DNObject); overload;
    procedure SetValue(obj: DNObject; value: DNObject; index: TArray<DNObject>); overload;
    procedure SetValue(obj: DNObject; value: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; index: TArray<DNObject>; culture: DNCultureInfo); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property MemberType: DNMemberTypes read get_MemberType;
    property PropertyType: DNType read get_PropertyType;
    property Attributes: DNPropertyAttributes read get_Attributes;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property CanRead: Boolean read get_CanRead;
    property CanWrite: Boolean read get_CanWrite;
    property GetMethod: DNMethodInfo read get_GetMethod;
    property SetMethod: DNMethodInfo read get_SetMethod;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property Module: DNModule read get_Module;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNPropertyInfo = class(TDNGenericImport<DNPropertyInfoClass, DNPropertyInfo>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNPropertyBuilderClass = interface(DNPropertyInfoClass)
  ['{81B42686-EF72-5BB6-BABF-485B6CCF3BF8}']
  end;

  [DNTypeName('System.Reflection.Emit.PropertyBuilder')]
  DNPropertyBuilder = interface(DNPropertyInfo)
  ['{595DDC30-922B-3293-A366-65EDF043A3EB}']
  { getters & setters } 

    function get_PropertyToken: DNPropertyToken;
    function get_Module: DNModule;
    function get_PropertyType: DNType;
    function get_Attributes: DNPropertyAttributes;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_Name: string;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_MemberType: DNMemberTypes;
    function get_IsSpecialName: Boolean;
    function get_GetMethod: DNMethodInfo;
    function get_SetMethod: DNMethodInfo;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    procedure SetConstant(defaultValue: DNObject);
    procedure SetGetMethod(mdBuilder: DNMethodBuilder);
    procedure SetSetMethod(mdBuilder: DNMethodBuilder);
    procedure AddOtherMethod(mdBuilder: DNMethodBuilder);
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    function GetValue(obj: DNObject; index: TArray<DNObject>): DNObject; overload;
    function GetValue(obj: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; index: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    procedure SetValue(obj: DNObject; value: DNObject; index: TArray<DNObject>); overload;
    procedure SetValue(obj: DNObject; value: DNObject; invokeAttr: DNBindingFlags; binder: DNBinder; index: TArray<DNObject>; culture: DNCultureInfo); overload;
    function GetAccessors(nonPublic: Boolean): TArray<DNMethodInfo>; overload;
    function GetGetMethod(nonPublic: Boolean): DNMethodInfo; overload;
    function GetSetMethod(nonPublic: Boolean): DNMethodInfo; overload;
    function GetIndexParameters: TArray<DNParameterInfo>;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetAccessors: TArray<DNMethodInfo>; overload;
    function GetGetMethod: DNMethodInfo; overload;
    function GetSetMethod: DNMethodInfo; overload;
    function GetOptionalCustomModifiers: TArray<DNType>;
    function GetRequiredCustomModifiers: TArray<DNType>;
    function GetValue(obj: DNObject): DNObject; overload;
    function GetConstantValue: DNObject;
    function GetRawConstantValue: DNObject;
    procedure SetValue(obj: DNObject; value: DNObject); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property PropertyToken: DNPropertyToken read get_PropertyToken;
    property Module: DNModule read get_Module;
    property PropertyType: DNType read get_PropertyType;
    property Attributes: DNPropertyAttributes read get_Attributes;
    property CanRead: Boolean read get_CanRead;
    property CanWrite: Boolean read get_CanWrite;
    property Name: string read get_Name;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property MemberType: DNMemberTypes read get_MemberType;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property GetMethod: DNMethodInfo read get_GetMethod;
    property SetMethod: DNMethodInfo read get_SetMethod;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNPropertyBuilder = class(TDNGenericImport<DNPropertyBuilderClass, DNPropertyBuilder>) end;

  //-------------namespace: System----------------
  DNTypeClass = interface(DNMemberInfoClass)
  ['{82A6F5E2-79C3-51DE-AB41-2F8F82FD6D7A}']
  { static getter & setter } 

    {class} function get_DefaultBinder: DNBinder;

  { static fields getter & setter } 

   function __fakeFieldGet_Delimiter: Char;
   function __fakeFieldGet_EmptyTypes: TArray<DNType>;
   function __fakeFieldGet_Missing: DNObject;
   function __fakeFieldGet_FilterAttribute: DNMemberFilter;
   function __fakeFieldGet_FilterName: DNMemberFilter;
   function __fakeFieldGet_FilterNameIgnoreCase: DNMemberFilter;

  { static fields } 

    {class} property Delimiter: Char read __fakeFieldGet_Delimiter;
    {class} property EmptyTypes: TArray<DNType> read __fakeFieldGet_EmptyTypes;
    {class} property Missing: DNObject read __fakeFieldGet_Missing;
    {class} property FilterAttribute: DNMemberFilter read __fakeFieldGet_FilterAttribute;
    {class} property FilterName: DNMemberFilter read __fakeFieldGet_FilterName;
    {class} property FilterNameIgnoreCase: DNMemberFilter read __fakeFieldGet_FilterNameIgnoreCase;

  { static methods } 

    {class} function GetTypeFromHandle(handle: DNRuntimeTypeHandle): DNType;
    {class} function GetType(typeName: string; throwOnError: Boolean; ignoreCase: Boolean): DNType; overload;
    {class} function GetType(typeName: string; throwOnError: Boolean): DNType; overload;
    {class} function GetType(typeName: string): DNType; overload;
    {class} function GetType(typeName: string; assemblyResolver: DNFunc<DNAssemblyName, DNAssembly>; typeResolver: DNFunc<DNAssembly, string, Boolean, DNType>): DNType; overload;
    {class} function GetType(typeName: string; assemblyResolver: DNFunc<DNAssemblyName, DNAssembly>; typeResolver: DNFunc<DNAssembly, string, Boolean, DNType>; throwOnError: Boolean): DNType; overload;
    {class} function GetType(typeName: string; assemblyResolver: DNFunc<DNAssemblyName, DNAssembly>; typeResolver: DNFunc<DNAssembly, string, Boolean, DNType>; throwOnError: Boolean; ignoreCase: Boolean): DNType; overload;
    {class} function GetTypeFromProgID(progID: string; server: string; throwOnError: Boolean): DNType; overload;
    {class} function GetTypeFromCLSID(clsid: DNGuid; server: string; throwOnError: Boolean): DNType; overload;
    {class} function GetTypeHandle(o: DNObject): DNRuntimeTypeHandle;
    {class} function GetTypeArray(args: TArray<DNObject>): TArray<DNType>;
    {class} function GetTypeCode(&type: DNType): DNTypeCode;
    {class} function GetTypeFromCLSID(clsid: DNGuid): DNType; overload;
    {class} function GetTypeFromCLSID(clsid: DNGuid; throwOnError: Boolean): DNType; overload;
    {class} function GetTypeFromCLSID(clsid: DNGuid; server: string): DNType; overload;
    {class} function GetTypeFromProgID(progID: string): DNType; overload;
    {class} function GetTypeFromProgID(progID: string; throwOnError: Boolean): DNType; overload;
    {class} function GetTypeFromProgID(progID: string; server: string): DNType; overload;
    {class} function MakeGenericMethodParameter(position: Int32): DNType;
    {class} function ReflectionOnlyGetType(typeName: string; throwIfNotFound: Boolean; ignoreCase: Boolean): DNType;

  { static propertys } 

    {class} property DefaultBinder: DNBinder read get_DefaultBinder;
  end;

  [DNTypeName('System.Type')]
  DNType = interface(DNMemberInfo)
  ['{A5134E9E-BD70-30BB-A479-1AFEF0DE36B9}']
  { getters & setters } 

    function get_IsInterface: Boolean;
    function get_MemberType: DNMemberTypes;
    function get_Namespace: string;
    function get_AssemblyQualifiedName: string;
    function get_FullName: string;
    function get_Assembly: DNAssembly;
    function get_Module: DNModule;
    function get_IsNested: Boolean;
    function get_DeclaringType: DNType;
    function get_DeclaringMethod: DNMethodBase;
    function get_ReflectedType: DNType;
    function get_UnderlyingSystemType: DNType;
    function get_IsTypeDefinition: Boolean;
    function get_IsArray: Boolean;
    function get_IsByRef: Boolean;
    function get_IsPointer: Boolean;
    function get_IsConstructedGenericType: Boolean;
    function get_IsGenericParameter: Boolean;
    function get_IsGenericTypeParameter: Boolean;
    function get_IsGenericMethodParameter: Boolean;
    function get_IsGenericType: Boolean;
    function get_IsGenericTypeDefinition: Boolean;
    function get_IsSZArray: Boolean;
    function get_IsVariableBoundArray: Boolean;
    function get_IsByRefLike: Boolean;
    function get_HasElementType: Boolean;
    function get_GenericTypeArguments: TArray<DNType>;
    function get_GenericParameterPosition: Int32;
    function get_GenericParameterAttributes: DNGenericParameterAttributes;
    function get_Attributes: DNTypeAttributes;
    function get_IsAbstract: Boolean;
    function get_IsImport: Boolean;
    function get_IsSealed: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsClass: Boolean;
    function get_IsNestedAssembly: Boolean;
    function get_IsNestedFamANDAssem: Boolean;
    function get_IsNestedFamily: Boolean;
    function get_IsNestedFamORAssem: Boolean;
    function get_IsNestedPrivate: Boolean;
    function get_IsNestedPublic: Boolean;
    function get_IsNotPublic: Boolean;
    function get_IsPublic: Boolean;
    function get_IsAutoLayout: Boolean;
    function get_IsExplicitLayout: Boolean;
    function get_IsLayoutSequential: Boolean;
    function get_IsAnsiClass: Boolean;
    function get_IsAutoClass: Boolean;
    function get_IsUnicodeClass: Boolean;
    function get_IsCOMObject: Boolean;
    function get_IsContextful: Boolean;
    function get_IsCollectible: Boolean;
    function get_IsEnum: Boolean;
    function get_IsMarshalByRef: Boolean;
    function get_IsPrimitive: Boolean;
    function get_IsValueType: Boolean;
    function get_IsSignatureType: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_StructLayoutAttribute: DNStructLayoutAttribute;
    function get_TypeInitializer: DNConstructorInfo;
    function get_TypeHandle: DNRuntimeTypeHandle;
    function get_GUID: DNGuid;
    function get_BaseType: DNType;
    function get_IsSerializable: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsVisible: Boolean;
    function get_Name: string;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    function GetType: DNType; overload;
    function GetElementType: DNType;
    function GetArrayRank: Int32;
    function GetGenericTypeDefinition: DNType;
    function GetGenericArguments: TArray<DNType>;
    function GetGenericParameterConstraints: TArray<DNType>;
    function GetConstructor(types: TArray<DNType>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructors: TArray<DNConstructorInfo>; overload;
    function GetConstructors(bindingAttr: DNBindingFlags): TArray<DNConstructorInfo>; overload;
    function GetEvent(name: string): DNEventInfo; overload;
    function GetEvent(name: string; bindingAttr: DNBindingFlags): DNEventInfo; overload;
    function GetEvents: TArray<DNEventInfo>; overload;
    function GetEvents(bindingAttr: DNBindingFlags): TArray<DNEventInfo>; overload;
    function GetField(name: string): DNFieldInfo; overload;
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    function GetFields: TArray<DNFieldInfo>; overload;
    function GetFields(bindingAttr: DNBindingFlags): TArray<DNFieldInfo>; overload;
    function GetMember(name: string): TArray<DNMemberInfo>; overload;
    function GetMember(name: string; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMember(name: string; &type: DNMemberTypes; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMembers: TArray<DNMemberInfo>; overload;
    function GetMembers(bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetMethods(bindingAttr: DNBindingFlags): TArray<DNMethodInfo>; overload;
    function GetNestedType(name: string): DNType; overload;
    function GetNestedType(name: string; bindingAttr: DNBindingFlags): DNType; overload;
    function GetNestedTypes: TArray<DNType>; overload;
    function GetNestedTypes(bindingAttr: DNBindingFlags): TArray<DNType>; overload;
    function GetProperty(name: string): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType): DNPropertyInfo; overload;
    function GetProperty(name: string; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperties: TArray<DNPropertyInfo>; overload;
    function GetProperties(bindingAttr: DNBindingFlags): TArray<DNPropertyInfo>; overload;
    function GetDefaultMembers: TArray<DNMemberInfo>;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>): DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; namedParameters: TArray<string>): DNObject; overload;
    function GetInterface(name: string): DNType; overload;
    function GetInterface(name: string; ignoreCase: Boolean): DNType; overload;
    function GetInterfaces: TArray<DNType>;
    function GetInterfaceMap(interfaceType: DNType): DNInterfaceMapping;
    function IsInstanceOfType(o: DNObject): Boolean;
    function IsEquivalentTo(other: DNType): Boolean;
    function GetEnumUnderlyingType: DNType;
    function GetEnumValues: DNArray;
    function MakeArrayType: DNType; overload;
    function MakeArrayType(rank: Int32): DNType; overload;
    function MakeByRefType: DNType;
    function MakeGenericType(typeArguments: TArray<DNType>): DNType;
    function MakePointerType: DNType;
    function ToString: string;
    function Equals(o: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function Equals(o: DNType): Boolean; overload;
    function IsEnumDefined(value: DNObject): Boolean;
    function GetEnumName(value: DNObject): string;
    function GetEnumNames: TArray<string>;
    function FindInterfaces(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function FindMembers(memberType: DNMemberTypes; bindingAttr: DNBindingFlags; filter: DNMemberFilter; filterCriteria: DNObject): TArray<DNMemberInfo>;
    function IsSubclassOf(c: DNType): Boolean;
    function IsAssignableFrom(c: DNType): Boolean;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;

  { propertys } 

    property IsInterface: Boolean read get_IsInterface;
    property MemberType: DNMemberTypes read get_MemberType;
    property Namespace: string read get_Namespace;
    property AssemblyQualifiedName: string read get_AssemblyQualifiedName;
    property FullName: string read get_FullName;
    property Assembly: DNAssembly read get_Assembly;
    property Module: DNModule read get_Module;
    property IsNested: Boolean read get_IsNested;
    property DeclaringType: DNType read get_DeclaringType;
    property DeclaringMethod: DNMethodBase read get_DeclaringMethod;
    property ReflectedType: DNType read get_ReflectedType;
    property UnderlyingSystemType: DNType read get_UnderlyingSystemType;
    property IsTypeDefinition: Boolean read get_IsTypeDefinition;
    property IsArray: Boolean read get_IsArray;
    property IsByRef: Boolean read get_IsByRef;
    property IsPointer: Boolean read get_IsPointer;
    property IsConstructedGenericType: Boolean read get_IsConstructedGenericType;
    property IsGenericParameter: Boolean read get_IsGenericParameter;
    property IsGenericTypeParameter: Boolean read get_IsGenericTypeParameter;
    property IsGenericMethodParameter: Boolean read get_IsGenericMethodParameter;
    property IsGenericType: Boolean read get_IsGenericType;
    property IsGenericTypeDefinition: Boolean read get_IsGenericTypeDefinition;
    property IsSZArray: Boolean read get_IsSZArray;
    property IsVariableBoundArray: Boolean read get_IsVariableBoundArray;
    property IsByRefLike: Boolean read get_IsByRefLike;
    property HasElementType: Boolean read get_HasElementType;
    property GenericTypeArguments: TArray<DNType> read get_GenericTypeArguments;
    property GenericParameterPosition: Int32 read get_GenericParameterPosition;
    property GenericParameterAttributes: DNGenericParameterAttributes read get_GenericParameterAttributes;
    property Attributes: DNTypeAttributes read get_Attributes;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsImport: Boolean read get_IsImport;
    property IsSealed: Boolean read get_IsSealed;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsClass: Boolean read get_IsClass;
    property IsNestedAssembly: Boolean read get_IsNestedAssembly;
    property IsNestedFamANDAssem: Boolean read get_IsNestedFamANDAssem;
    property IsNestedFamily: Boolean read get_IsNestedFamily;
    property IsNestedFamORAssem: Boolean read get_IsNestedFamORAssem;
    property IsNestedPrivate: Boolean read get_IsNestedPrivate;
    property IsNestedPublic: Boolean read get_IsNestedPublic;
    property IsNotPublic: Boolean read get_IsNotPublic;
    property IsPublic: Boolean read get_IsPublic;
    property IsAutoLayout: Boolean read get_IsAutoLayout;
    property IsExplicitLayout: Boolean read get_IsExplicitLayout;
    property IsLayoutSequential: Boolean read get_IsLayoutSequential;
    property IsAnsiClass: Boolean read get_IsAnsiClass;
    property IsAutoClass: Boolean read get_IsAutoClass;
    property IsUnicodeClass: Boolean read get_IsUnicodeClass;
    property IsCOMObject: Boolean read get_IsCOMObject;
    property IsContextful: Boolean read get_IsContextful;
    property IsCollectible: Boolean read get_IsCollectible;
    property IsEnum: Boolean read get_IsEnum;
    property IsMarshalByRef: Boolean read get_IsMarshalByRef;
    property IsPrimitive: Boolean read get_IsPrimitive;
    property IsValueType: Boolean read get_IsValueType;
    property IsSignatureType: Boolean read get_IsSignatureType;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property StructLayoutAttribute: DNStructLayoutAttribute read get_StructLayoutAttribute;
    property TypeInitializer: DNConstructorInfo read get_TypeInitializer;
    property TypeHandle: DNRuntimeTypeHandle read get_TypeHandle;
    property GUID: DNGuid read get_GUID;
    property BaseType: DNType read get_BaseType;
    property IsSerializable: Boolean read get_IsSerializable;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsVisible: Boolean read get_IsVisible;
    property Name: string read get_Name;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNType = class(TDNGenericImport<DNTypeClass, DNType>) end;

  //-------------namespace: System.Reflection----------------
  DNTypeInfoClass = interface(DNTypeClass)
  ['{D3B0DC56-9055-5958-85D5-1347BF0889E1}']
  end;

  [DNTypeName('System.Reflection.TypeInfo')]
  DNTypeInfo = interface(DNType)
  ['{2180138E-B379-33AB-8F38-146A9CA56F1B}']
  { getters & setters } 

    function get_GenericTypeParameters: TArray<DNType>;
    function get_DeclaredConstructors: DNIEnumerable<DNConstructorInfo>;
    function get_DeclaredEvents: DNIEnumerable<DNEventInfo>;
    function get_DeclaredFields: DNIEnumerable<DNFieldInfo>;
    function get_DeclaredMembers: DNIEnumerable<DNMemberInfo>;
    function get_DeclaredMethods: DNIEnumerable<DNMethodInfo>;
    function get_DeclaredNestedTypes: DNIEnumerable<DNTypeInfo>;
    function get_DeclaredProperties: DNIEnumerable<DNPropertyInfo>;
    function get_ImplementedInterfaces: DNIEnumerable<DNType>;
    function get_IsInterface: Boolean;
    function get_MemberType: DNMemberTypes;
    function get_Namespace: string;
    function get_AssemblyQualifiedName: string;
    function get_FullName: string;
    function get_Assembly: DNAssembly;
    function get_Module: DNModule;
    function get_IsNested: Boolean;
    function get_DeclaringType: DNType;
    function get_DeclaringMethod: DNMethodBase;
    function get_ReflectedType: DNType;
    function get_UnderlyingSystemType: DNType;
    function get_IsTypeDefinition: Boolean;
    function get_IsArray: Boolean;
    function get_IsByRef: Boolean;
    function get_IsPointer: Boolean;
    function get_IsConstructedGenericType: Boolean;
    function get_IsGenericParameter: Boolean;
    function get_IsGenericTypeParameter: Boolean;
    function get_IsGenericMethodParameter: Boolean;
    function get_IsGenericType: Boolean;
    function get_IsGenericTypeDefinition: Boolean;
    function get_IsSZArray: Boolean;
    function get_IsVariableBoundArray: Boolean;
    function get_IsByRefLike: Boolean;
    function get_HasElementType: Boolean;
    function get_GenericTypeArguments: TArray<DNType>;
    function get_GenericParameterPosition: Int32;
    function get_GenericParameterAttributes: DNGenericParameterAttributes;
    function get_Attributes: DNTypeAttributes;
    function get_IsAbstract: Boolean;
    function get_IsImport: Boolean;
    function get_IsSealed: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsClass: Boolean;
    function get_IsNestedAssembly: Boolean;
    function get_IsNestedFamANDAssem: Boolean;
    function get_IsNestedFamily: Boolean;
    function get_IsNestedFamORAssem: Boolean;
    function get_IsNestedPrivate: Boolean;
    function get_IsNestedPublic: Boolean;
    function get_IsNotPublic: Boolean;
    function get_IsPublic: Boolean;
    function get_IsAutoLayout: Boolean;
    function get_IsExplicitLayout: Boolean;
    function get_IsLayoutSequential: Boolean;
    function get_IsAnsiClass: Boolean;
    function get_IsAutoClass: Boolean;
    function get_IsUnicodeClass: Boolean;
    function get_IsCOMObject: Boolean;
    function get_IsContextful: Boolean;
    function get_IsCollectible: Boolean;
    function get_IsEnum: Boolean;
    function get_IsMarshalByRef: Boolean;
    function get_IsPrimitive: Boolean;
    function get_IsValueType: Boolean;
    function get_IsSignatureType: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_StructLayoutAttribute: DNStructLayoutAttribute;
    function get_TypeInitializer: DNConstructorInfo;
    function get_TypeHandle: DNRuntimeTypeHandle;
    function get_GUID: DNGuid;
    function get_BaseType: DNType;
    function get_IsSerializable: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsVisible: Boolean;
    function get_Name: string;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    function AsType: DNType;
    function GetDeclaredEvent(name: string): DNEventInfo;
    function GetDeclaredField(name: string): DNFieldInfo;
    function GetDeclaredMethod(name: string): DNMethodInfo;
    function GetDeclaredNestedType(name: string): DNTypeInfo;
    function GetDeclaredProperty(name: string): DNPropertyInfo;
    function GetDeclaredMethods(name: string): DNIEnumerable<DNMethodInfo>;
    function IsAssignableFrom(typeInfo: DNTypeInfo): Boolean; overload;
    function GetType: DNType;
    function GetElementType: DNType;
    function GetArrayRank: Int32;
    function GetGenericTypeDefinition: DNType;
    function GetGenericArguments: TArray<DNType>;
    function GetGenericParameterConstraints: TArray<DNType>;
    function GetConstructor(types: TArray<DNType>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructors: TArray<DNConstructorInfo>; overload;
    function GetConstructors(bindingAttr: DNBindingFlags): TArray<DNConstructorInfo>; overload;
    function GetEvent(name: string): DNEventInfo; overload;
    function GetEvent(name: string; bindingAttr: DNBindingFlags): DNEventInfo; overload;
    function GetEvents: TArray<DNEventInfo>; overload;
    function GetEvents(bindingAttr: DNBindingFlags): TArray<DNEventInfo>; overload;
    function GetField(name: string): DNFieldInfo; overload;
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    function GetFields: TArray<DNFieldInfo>; overload;
    function GetFields(bindingAttr: DNBindingFlags): TArray<DNFieldInfo>; overload;
    function GetMember(name: string): TArray<DNMemberInfo>; overload;
    function GetMember(name: string; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMember(name: string; &type: DNMemberTypes; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMembers: TArray<DNMemberInfo>; overload;
    function GetMembers(bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetMethods(bindingAttr: DNBindingFlags): TArray<DNMethodInfo>; overload;
    function GetNestedType(name: string): DNType; overload;
    function GetNestedType(name: string; bindingAttr: DNBindingFlags): DNType; overload;
    function GetNestedTypes: TArray<DNType>; overload;
    function GetNestedTypes(bindingAttr: DNBindingFlags): TArray<DNType>; overload;
    function GetProperty(name: string): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType): DNPropertyInfo; overload;
    function GetProperty(name: string; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperties: TArray<DNPropertyInfo>; overload;
    function GetProperties(bindingAttr: DNBindingFlags): TArray<DNPropertyInfo>; overload;
    function GetDefaultMembers: TArray<DNMemberInfo>;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>): DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; namedParameters: TArray<string>): DNObject; overload;
    function GetInterface(name: string): DNType; overload;
    function GetInterface(name: string; ignoreCase: Boolean): DNType; overload;
    function GetInterfaces: TArray<DNType>;
    function GetInterfaceMap(interfaceType: DNType): DNInterfaceMapping;
    function IsInstanceOfType(o: DNObject): Boolean;
    function IsEquivalentTo(other: DNType): Boolean;
    function GetEnumUnderlyingType: DNType;
    function GetEnumValues: DNArray;
    function MakeArrayType: DNType; overload;
    function MakeArrayType(rank: Int32): DNType; overload;
    function MakeByRefType: DNType;
    function MakeGenericType(typeArguments: TArray<DNType>): DNType;
    function MakePointerType: DNType;
    function ToString: string;
    function Equals(o: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function Equals(o: DNType): Boolean; overload;
    function IsEnumDefined(value: DNObject): Boolean;
    function GetEnumName(value: DNObject): string;
    function GetEnumNames: TArray<string>;
    function FindInterfaces(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function FindMembers(memberType: DNMemberTypes; bindingAttr: DNBindingFlags; filter: DNMemberFilter; filterCriteria: DNObject): TArray<DNMemberInfo>;
    function IsSubclassOf(c: DNType): Boolean;
    function IsAssignableFrom(c: DNType): Boolean; overload;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;

  { propertys } 

    property GenericTypeParameters: TArray<DNType> read get_GenericTypeParameters;
    property DeclaredConstructors: DNIEnumerable<DNConstructorInfo> read get_DeclaredConstructors;
    property DeclaredEvents: DNIEnumerable<DNEventInfo> read get_DeclaredEvents;
    property DeclaredFields: DNIEnumerable<DNFieldInfo> read get_DeclaredFields;
    property DeclaredMembers: DNIEnumerable<DNMemberInfo> read get_DeclaredMembers;
    property DeclaredMethods: DNIEnumerable<DNMethodInfo> read get_DeclaredMethods;
    property DeclaredNestedTypes: DNIEnumerable<DNTypeInfo> read get_DeclaredNestedTypes;
    property DeclaredProperties: DNIEnumerable<DNPropertyInfo> read get_DeclaredProperties;
    property ImplementedInterfaces: DNIEnumerable<DNType> read get_ImplementedInterfaces;
    property IsInterface: Boolean read get_IsInterface;
    property MemberType: DNMemberTypes read get_MemberType;
    property Namespace: string read get_Namespace;
    property AssemblyQualifiedName: string read get_AssemblyQualifiedName;
    property FullName: string read get_FullName;
    property Assembly: DNAssembly read get_Assembly;
    property Module: DNModule read get_Module;
    property IsNested: Boolean read get_IsNested;
    property DeclaringType: DNType read get_DeclaringType;
    property DeclaringMethod: DNMethodBase read get_DeclaringMethod;
    property ReflectedType: DNType read get_ReflectedType;
    property UnderlyingSystemType: DNType read get_UnderlyingSystemType;
    property IsTypeDefinition: Boolean read get_IsTypeDefinition;
    property IsArray: Boolean read get_IsArray;
    property IsByRef: Boolean read get_IsByRef;
    property IsPointer: Boolean read get_IsPointer;
    property IsConstructedGenericType: Boolean read get_IsConstructedGenericType;
    property IsGenericParameter: Boolean read get_IsGenericParameter;
    property IsGenericTypeParameter: Boolean read get_IsGenericTypeParameter;
    property IsGenericMethodParameter: Boolean read get_IsGenericMethodParameter;
    property IsGenericType: Boolean read get_IsGenericType;
    property IsGenericTypeDefinition: Boolean read get_IsGenericTypeDefinition;
    property IsSZArray: Boolean read get_IsSZArray;
    property IsVariableBoundArray: Boolean read get_IsVariableBoundArray;
    property IsByRefLike: Boolean read get_IsByRefLike;
    property HasElementType: Boolean read get_HasElementType;
    property GenericTypeArguments: TArray<DNType> read get_GenericTypeArguments;
    property GenericParameterPosition: Int32 read get_GenericParameterPosition;
    property GenericParameterAttributes: DNGenericParameterAttributes read get_GenericParameterAttributes;
    property Attributes: DNTypeAttributes read get_Attributes;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsImport: Boolean read get_IsImport;
    property IsSealed: Boolean read get_IsSealed;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsClass: Boolean read get_IsClass;
    property IsNestedAssembly: Boolean read get_IsNestedAssembly;
    property IsNestedFamANDAssem: Boolean read get_IsNestedFamANDAssem;
    property IsNestedFamily: Boolean read get_IsNestedFamily;
    property IsNestedFamORAssem: Boolean read get_IsNestedFamORAssem;
    property IsNestedPrivate: Boolean read get_IsNestedPrivate;
    property IsNestedPublic: Boolean read get_IsNestedPublic;
    property IsNotPublic: Boolean read get_IsNotPublic;
    property IsPublic: Boolean read get_IsPublic;
    property IsAutoLayout: Boolean read get_IsAutoLayout;
    property IsExplicitLayout: Boolean read get_IsExplicitLayout;
    property IsLayoutSequential: Boolean read get_IsLayoutSequential;
    property IsAnsiClass: Boolean read get_IsAnsiClass;
    property IsAutoClass: Boolean read get_IsAutoClass;
    property IsUnicodeClass: Boolean read get_IsUnicodeClass;
    property IsCOMObject: Boolean read get_IsCOMObject;
    property IsContextful: Boolean read get_IsContextful;
    property IsCollectible: Boolean read get_IsCollectible;
    property IsEnum: Boolean read get_IsEnum;
    property IsMarshalByRef: Boolean read get_IsMarshalByRef;
    property IsPrimitive: Boolean read get_IsPrimitive;
    property IsValueType: Boolean read get_IsValueType;
    property IsSignatureType: Boolean read get_IsSignatureType;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property StructLayoutAttribute: DNStructLayoutAttribute read get_StructLayoutAttribute;
    property TypeInitializer: DNConstructorInfo read get_TypeInitializer;
    property TypeHandle: DNRuntimeTypeHandle read get_TypeHandle;
    property GUID: DNGuid read get_GUID;
    property BaseType: DNType read get_BaseType;
    property IsSerializable: Boolean read get_IsSerializable;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsVisible: Boolean read get_IsVisible;
    property Name: string read get_Name;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNTypeInfo = class(TDNGenericImport<DNTypeInfoClass, DNTypeInfo>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNEnumBuilderClass = interface(DNTypeInfoClass)
  ['{C6BAA6D3-6693-52B1-8C96-C89D6E53F100}']
  end;

  [DNTypeName('System.Reflection.Emit.EnumBuilder')]
  DNEnumBuilder = interface(DNTypeInfo)
  ['{AF937F55-E4F0-3750-9F14-EBDA37976A96}']
  { getters & setters } 

    function get_TypeToken: DNTypeToken;
    function get_UnderlyingField: DNFieldBuilder;
    function get_Name: string;
    function get_GUID: DNGuid;
    function get_Module: DNModule;
    function get_Assembly: DNAssembly;
    function get_TypeHandle: DNRuntimeTypeHandle;
    function get_FullName: string;
    function get_AssemblyQualifiedName: string;
    function get_Namespace: string;
    function get_BaseType: DNType;
    function get_IsTypeDefinition: Boolean;
    function get_IsSZArray: Boolean;
    function get_IsConstructedGenericType: Boolean;
    function get_UnderlyingSystemType: DNType;
    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_GenericTypeParameters: TArray<DNType>;
    function get_DeclaredConstructors: DNIEnumerable<DNConstructorInfo>;
    function get_DeclaredEvents: DNIEnumerable<DNEventInfo>;
    function get_DeclaredFields: DNIEnumerable<DNFieldInfo>;
    function get_DeclaredMembers: DNIEnumerable<DNMemberInfo>;
    function get_DeclaredMethods: DNIEnumerable<DNMethodInfo>;
    function get_DeclaredNestedTypes: DNIEnumerable<DNTypeInfo>;
    function get_DeclaredProperties: DNIEnumerable<DNPropertyInfo>;
    function get_ImplementedInterfaces: DNIEnumerable<DNType>;
    function get_IsInterface: Boolean;
    function get_MemberType: DNMemberTypes;
    function get_IsNested: Boolean;
    function get_DeclaringMethod: DNMethodBase;
    function get_IsArray: Boolean;
    function get_IsByRef: Boolean;
    function get_IsPointer: Boolean;
    function get_IsGenericParameter: Boolean;
    function get_IsGenericTypeParameter: Boolean;
    function get_IsGenericMethodParameter: Boolean;
    function get_IsGenericType: Boolean;
    function get_IsGenericTypeDefinition: Boolean;
    function get_IsVariableBoundArray: Boolean;
    function get_IsByRefLike: Boolean;
    function get_HasElementType: Boolean;
    function get_GenericTypeArguments: TArray<DNType>;
    function get_GenericParameterPosition: Int32;
    function get_GenericParameterAttributes: DNGenericParameterAttributes;
    function get_Attributes: DNTypeAttributes;
    function get_IsAbstract: Boolean;
    function get_IsImport: Boolean;
    function get_IsSealed: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsClass: Boolean;
    function get_IsNestedAssembly: Boolean;
    function get_IsNestedFamANDAssem: Boolean;
    function get_IsNestedFamily: Boolean;
    function get_IsNestedFamORAssem: Boolean;
    function get_IsNestedPrivate: Boolean;
    function get_IsNestedPublic: Boolean;
    function get_IsNotPublic: Boolean;
    function get_IsPublic: Boolean;
    function get_IsAutoLayout: Boolean;
    function get_IsExplicitLayout: Boolean;
    function get_IsLayoutSequential: Boolean;
    function get_IsAnsiClass: Boolean;
    function get_IsAutoClass: Boolean;
    function get_IsUnicodeClass: Boolean;
    function get_IsCOMObject: Boolean;
    function get_IsContextful: Boolean;
    function get_IsCollectible: Boolean;
    function get_IsEnum: Boolean;
    function get_IsMarshalByRef: Boolean;
    function get_IsPrimitive: Boolean;
    function get_IsValueType: Boolean;
    function get_IsSignatureType: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_StructLayoutAttribute: DNStructLayoutAttribute;
    function get_TypeInitializer: DNConstructorInfo;
    function get_IsSerializable: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsVisible: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    function IsAssignableFrom(typeInfo: DNTypeInfo): Boolean; overload;
    function DefineLiteral(literalName: string; literalValue: DNObject): DNFieldBuilder;
    function CreateTypeInfo: DNTypeInfo;
    function CreateType: DNType;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; namedParameters: TArray<string>): DNObject; overload;
    function GetConstructors(bindingAttr: DNBindingFlags): TArray<DNConstructorInfo>; overload;
    function GetMethods(bindingAttr: DNBindingFlags): TArray<DNMethodInfo>; overload;
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    function GetFields(bindingAttr: DNBindingFlags): TArray<DNFieldInfo>; overload;
    function GetInterface(name: string; ignoreCase: Boolean): DNType; overload;
    function GetInterfaces: TArray<DNType>;
    function GetEvent(name: string; bindingAttr: DNBindingFlags): DNEventInfo; overload;
    function GetEvents: TArray<DNEventInfo>; overload;
    function GetProperties(bindingAttr: DNBindingFlags): TArray<DNPropertyInfo>; overload;
    function GetNestedTypes(bindingAttr: DNBindingFlags): TArray<DNType>; overload;
    function GetNestedType(name: string; bindingAttr: DNBindingFlags): DNType; overload;
    function GetMember(name: string; &type: DNMemberTypes; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMembers(bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetInterfaceMap(interfaceType: DNType): DNInterfaceMapping;
    function GetEvents(bindingAttr: DNBindingFlags): TArray<DNEventInfo>; overload;
    function GetElementType: DNType;
    function GetEnumUnderlyingType: DNType;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function MakePointerType: DNType;
    function MakeByRefType: DNType;
    function MakeArrayType: DNType; overload;
    function MakeArrayType(rank: Int32): DNType; overload;
    function AsType: DNType;
    function GetDeclaredEvent(name: string): DNEventInfo;
    function GetDeclaredField(name: string): DNFieldInfo;
    function GetDeclaredMethod(name: string): DNMethodInfo;
    function GetDeclaredNestedType(name: string): DNTypeInfo;
    function GetDeclaredProperty(name: string): DNPropertyInfo;
    function GetDeclaredMethods(name: string): DNIEnumerable<DNMethodInfo>;
    function GetType: DNType;
    function GetArrayRank: Int32;
    function GetGenericTypeDefinition: DNType;
    function GetGenericArguments: TArray<DNType>;
    function GetGenericParameterConstraints: TArray<DNType>;
    function GetConstructor(types: TArray<DNType>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructors: TArray<DNConstructorInfo>; overload;
    function GetEvent(name: string): DNEventInfo; overload;
    function GetField(name: string): DNFieldInfo; overload;
    function GetFields: TArray<DNFieldInfo>; overload;
    function GetMember(name: string): TArray<DNMemberInfo>; overload;
    function GetMember(name: string; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMembers: TArray<DNMemberInfo>; overload;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetNestedType(name: string): DNType; overload;
    function GetNestedTypes: TArray<DNType>; overload;
    function GetProperty(name: string): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType): DNPropertyInfo; overload;
    function GetProperty(name: string; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperties: TArray<DNPropertyInfo>; overload;
    function GetDefaultMembers: TArray<DNMemberInfo>;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>): DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetInterface(name: string): DNType; overload;
    function IsInstanceOfType(o: DNObject): Boolean;
    function IsEquivalentTo(other: DNType): Boolean;
    function GetEnumValues: DNArray;
    function MakeGenericType(typeArguments: TArray<DNType>): DNType;
    function ToString: string;
    function Equals(o: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function Equals(o: DNType): Boolean; overload;
    function IsEnumDefined(value: DNObject): Boolean;
    function GetEnumName(value: DNObject): string;
    function GetEnumNames: TArray<string>;
    function FindInterfaces(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function FindMembers(memberType: DNMemberTypes; bindingAttr: DNBindingFlags; filter: DNMemberFilter; filterCriteria: DNObject): TArray<DNMemberInfo>;
    function IsSubclassOf(c: DNType): Boolean;
    function IsAssignableFrom(c: DNType): Boolean; overload;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;

  { propertys } 

    property TypeToken: DNTypeToken read get_TypeToken;
    property UnderlyingField: DNFieldBuilder read get_UnderlyingField;
    property Name: string read get_Name;
    property GUID: DNGuid read get_GUID;
    property Module: DNModule read get_Module;
    property Assembly: DNAssembly read get_Assembly;
    property TypeHandle: DNRuntimeTypeHandle read get_TypeHandle;
    property FullName: string read get_FullName;
    property AssemblyQualifiedName: string read get_AssemblyQualifiedName;
    property Namespace: string read get_Namespace;
    property BaseType: DNType read get_BaseType;
    property IsTypeDefinition: Boolean read get_IsTypeDefinition;
    property IsSZArray: Boolean read get_IsSZArray;
    property IsConstructedGenericType: Boolean read get_IsConstructedGenericType;
    property UnderlyingSystemType: DNType read get_UnderlyingSystemType;
    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property GenericTypeParameters: TArray<DNType> read get_GenericTypeParameters;
    property DeclaredConstructors: DNIEnumerable<DNConstructorInfo> read get_DeclaredConstructors;
    property DeclaredEvents: DNIEnumerable<DNEventInfo> read get_DeclaredEvents;
    property DeclaredFields: DNIEnumerable<DNFieldInfo> read get_DeclaredFields;
    property DeclaredMembers: DNIEnumerable<DNMemberInfo> read get_DeclaredMembers;
    property DeclaredMethods: DNIEnumerable<DNMethodInfo> read get_DeclaredMethods;
    property DeclaredNestedTypes: DNIEnumerable<DNTypeInfo> read get_DeclaredNestedTypes;
    property DeclaredProperties: DNIEnumerable<DNPropertyInfo> read get_DeclaredProperties;
    property ImplementedInterfaces: DNIEnumerable<DNType> read get_ImplementedInterfaces;
    property IsInterface: Boolean read get_IsInterface;
    property MemberType: DNMemberTypes read get_MemberType;
    property IsNested: Boolean read get_IsNested;
    property DeclaringMethod: DNMethodBase read get_DeclaringMethod;
    property IsArray: Boolean read get_IsArray;
    property IsByRef: Boolean read get_IsByRef;
    property IsPointer: Boolean read get_IsPointer;
    property IsGenericParameter: Boolean read get_IsGenericParameter;
    property IsGenericTypeParameter: Boolean read get_IsGenericTypeParameter;
    property IsGenericMethodParameter: Boolean read get_IsGenericMethodParameter;
    property IsGenericType: Boolean read get_IsGenericType;
    property IsGenericTypeDefinition: Boolean read get_IsGenericTypeDefinition;
    property IsVariableBoundArray: Boolean read get_IsVariableBoundArray;
    property IsByRefLike: Boolean read get_IsByRefLike;
    property HasElementType: Boolean read get_HasElementType;
    property GenericTypeArguments: TArray<DNType> read get_GenericTypeArguments;
    property GenericParameterPosition: Int32 read get_GenericParameterPosition;
    property GenericParameterAttributes: DNGenericParameterAttributes read get_GenericParameterAttributes;
    property Attributes: DNTypeAttributes read get_Attributes;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsImport: Boolean read get_IsImport;
    property IsSealed: Boolean read get_IsSealed;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsClass: Boolean read get_IsClass;
    property IsNestedAssembly: Boolean read get_IsNestedAssembly;
    property IsNestedFamANDAssem: Boolean read get_IsNestedFamANDAssem;
    property IsNestedFamily: Boolean read get_IsNestedFamily;
    property IsNestedFamORAssem: Boolean read get_IsNestedFamORAssem;
    property IsNestedPrivate: Boolean read get_IsNestedPrivate;
    property IsNestedPublic: Boolean read get_IsNestedPublic;
    property IsNotPublic: Boolean read get_IsNotPublic;
    property IsPublic: Boolean read get_IsPublic;
    property IsAutoLayout: Boolean read get_IsAutoLayout;
    property IsExplicitLayout: Boolean read get_IsExplicitLayout;
    property IsLayoutSequential: Boolean read get_IsLayoutSequential;
    property IsAnsiClass: Boolean read get_IsAnsiClass;
    property IsAutoClass: Boolean read get_IsAutoClass;
    property IsUnicodeClass: Boolean read get_IsUnicodeClass;
    property IsCOMObject: Boolean read get_IsCOMObject;
    property IsContextful: Boolean read get_IsContextful;
    property IsCollectible: Boolean read get_IsCollectible;
    property IsEnum: Boolean read get_IsEnum;
    property IsMarshalByRef: Boolean read get_IsMarshalByRef;
    property IsPrimitive: Boolean read get_IsPrimitive;
    property IsValueType: Boolean read get_IsValueType;
    property IsSignatureType: Boolean read get_IsSignatureType;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property StructLayoutAttribute: DNStructLayoutAttribute read get_StructLayoutAttribute;
    property TypeInitializer: DNConstructorInfo read get_TypeInitializer;
    property IsSerializable: Boolean read get_IsSerializable;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsVisible: Boolean read get_IsVisible;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNEnumBuilder = class(TDNGenericImport<DNEnumBuilderClass, DNEnumBuilder>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNGenericTypeParameterBuilderClass = interface(DNTypeInfoClass)
  ['{9865DBE8-BC7A-5DC1-B918-0C9F1726E249}']
  end;

  [DNTypeName('System.Reflection.Emit.GenericTypeParameterBuilder')]
  DNGenericTypeParameterBuilder = interface(DNTypeInfo)
  ['{03465B02-8AB0-3A17-9FFA-0254565AD175}']
  { getters & setters } 

    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_Name: string;
    function get_Module: DNModule;
    function get_GUID: DNGuid;
    function get_Assembly: DNAssembly;
    function get_TypeHandle: DNRuntimeTypeHandle;
    function get_FullName: string;
    function get_Namespace: string;
    function get_AssemblyQualifiedName: string;
    function get_BaseType: DNType;
    function get_IsTypeDefinition: Boolean;
    function get_IsSZArray: Boolean;
    function get_UnderlyingSystemType: DNType;
    function get_IsGenericTypeDefinition: Boolean;
    function get_IsGenericType: Boolean;
    function get_IsGenericParameter: Boolean;
    function get_IsConstructedGenericType: Boolean;
    function get_GenericParameterPosition: Int32;
    function get_ContainsGenericParameters: Boolean;
    function get_GenericParameterAttributes: DNGenericParameterAttributes;
    function get_DeclaringMethod: DNMethodBase;
    function get_GenericTypeParameters: TArray<DNType>;
    function get_DeclaredConstructors: DNIEnumerable<DNConstructorInfo>;
    function get_DeclaredEvents: DNIEnumerable<DNEventInfo>;
    function get_DeclaredFields: DNIEnumerable<DNFieldInfo>;
    function get_DeclaredMembers: DNIEnumerable<DNMemberInfo>;
    function get_DeclaredMethods: DNIEnumerable<DNMethodInfo>;
    function get_DeclaredNestedTypes: DNIEnumerable<DNTypeInfo>;
    function get_DeclaredProperties: DNIEnumerable<DNPropertyInfo>;
    function get_ImplementedInterfaces: DNIEnumerable<DNType>;
    function get_IsInterface: Boolean;
    function get_MemberType: DNMemberTypes;
    function get_IsNested: Boolean;
    function get_IsArray: Boolean;
    function get_IsByRef: Boolean;
    function get_IsPointer: Boolean;
    function get_IsGenericTypeParameter: Boolean;
    function get_IsGenericMethodParameter: Boolean;
    function get_IsVariableBoundArray: Boolean;
    function get_IsByRefLike: Boolean;
    function get_HasElementType: Boolean;
    function get_GenericTypeArguments: TArray<DNType>;
    function get_Attributes: DNTypeAttributes;
    function get_IsAbstract: Boolean;
    function get_IsImport: Boolean;
    function get_IsSealed: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsClass: Boolean;
    function get_IsNestedAssembly: Boolean;
    function get_IsNestedFamANDAssem: Boolean;
    function get_IsNestedFamily: Boolean;
    function get_IsNestedFamORAssem: Boolean;
    function get_IsNestedPrivate: Boolean;
    function get_IsNestedPublic: Boolean;
    function get_IsNotPublic: Boolean;
    function get_IsPublic: Boolean;
    function get_IsAutoLayout: Boolean;
    function get_IsExplicitLayout: Boolean;
    function get_IsLayoutSequential: Boolean;
    function get_IsAnsiClass: Boolean;
    function get_IsAutoClass: Boolean;
    function get_IsUnicodeClass: Boolean;
    function get_IsCOMObject: Boolean;
    function get_IsContextful: Boolean;
    function get_IsCollectible: Boolean;
    function get_IsEnum: Boolean;
    function get_IsMarshalByRef: Boolean;
    function get_IsPrimitive: Boolean;
    function get_IsValueType: Boolean;
    function get_IsSignatureType: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_StructLayoutAttribute: DNStructLayoutAttribute;
    function get_TypeInitializer: DNConstructorInfo;
    function get_IsSerializable: Boolean;
    function get_IsVisible: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    function IsAssignableFrom(typeInfo: DNTypeInfo): Boolean; overload;
    function ToString: string;
    function Equals(o: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function MakePointerType: DNType;
    function MakeByRefType: DNType;
    function MakeArrayType: DNType; overload;
    function MakeArrayType(rank: Int32): DNType; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; namedParameters: TArray<string>): DNObject; overload;
    function GetConstructors(bindingAttr: DNBindingFlags): TArray<DNConstructorInfo>; overload;
    function GetMethods(bindingAttr: DNBindingFlags): TArray<DNMethodInfo>; overload;
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    function GetFields(bindingAttr: DNBindingFlags): TArray<DNFieldInfo>; overload;
    function GetInterface(name: string; ignoreCase: Boolean): DNType; overload;
    function GetInterfaces: TArray<DNType>;
    function GetEvent(name: string; bindingAttr: DNBindingFlags): DNEventInfo; overload;
    function GetEvents: TArray<DNEventInfo>; overload;
    function GetProperties(bindingAttr: DNBindingFlags): TArray<DNPropertyInfo>; overload;
    function GetNestedTypes(bindingAttr: DNBindingFlags): TArray<DNType>; overload;
    function GetNestedType(name: string; bindingAttr: DNBindingFlags): DNType; overload;
    function GetMember(name: string; &type: DNMemberTypes; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetInterfaceMap(interfaceType: DNType): DNInterfaceMapping;
    function GetEvents(bindingAttr: DNBindingFlags): TArray<DNEventInfo>; overload;
    function GetMembers(bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetElementType: DNType;
    function GetGenericArguments: TArray<DNType>;
    function GetGenericTypeDefinition: DNType;
    function MakeGenericType(typeArguments: TArray<DNType>): DNType;
    function IsAssignableFrom(c: DNType): Boolean; overload;
    function IsSubclassOf(c: DNType): Boolean;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    procedure SetBaseTypeConstraint(baseTypeConstraint: DNType);
    procedure SetInterfaceConstraints(interfaceConstraints: TArray<DNType>);
    procedure SetGenericParameterAttributes(genericParameterAttributes: DNGenericParameterAttributes);
    function AsType: DNType;
    function GetDeclaredEvent(name: string): DNEventInfo;
    function GetDeclaredField(name: string): DNFieldInfo;
    function GetDeclaredMethod(name: string): DNMethodInfo;
    function GetDeclaredNestedType(name: string): DNTypeInfo;
    function GetDeclaredProperty(name: string): DNPropertyInfo;
    function GetDeclaredMethods(name: string): DNIEnumerable<DNMethodInfo>;
    function GetType: DNType;
    function GetArrayRank: Int32;
    function GetGenericParameterConstraints: TArray<DNType>;
    function GetConstructor(types: TArray<DNType>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructors: TArray<DNConstructorInfo>; overload;
    function GetEvent(name: string): DNEventInfo; overload;
    function GetField(name: string): DNFieldInfo; overload;
    function GetFields: TArray<DNFieldInfo>; overload;
    function GetMember(name: string): TArray<DNMemberInfo>; overload;
    function GetMember(name: string; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMembers: TArray<DNMemberInfo>; overload;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetNestedType(name: string): DNType; overload;
    function GetNestedTypes: TArray<DNType>; overload;
    function GetProperty(name: string): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType): DNPropertyInfo; overload;
    function GetProperty(name: string; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperties: TArray<DNPropertyInfo>; overload;
    function GetDefaultMembers: TArray<DNMemberInfo>;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>): DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetInterface(name: string): DNType; overload;
    function IsInstanceOfType(o: DNObject): Boolean;
    function IsEquivalentTo(other: DNType): Boolean;
    function GetEnumUnderlyingType: DNType;
    function GetEnumValues: DNArray;
    function Equals(o: DNType): Boolean; overload;
    function IsEnumDefined(value: DNObject): Boolean;
    function GetEnumName(value: DNObject): string;
    function GetEnumNames: TArray<string>;
    function FindInterfaces(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function FindMembers(memberType: DNMemberTypes; bindingAttr: DNBindingFlags; filter: DNMemberFilter; filterCriteria: DNObject): TArray<DNMemberInfo>;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;

  { propertys } 

    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property Name: string read get_Name;
    property Module: DNModule read get_Module;
    property GUID: DNGuid read get_GUID;
    property Assembly: DNAssembly read get_Assembly;
    property TypeHandle: DNRuntimeTypeHandle read get_TypeHandle;
    property FullName: string read get_FullName;
    property Namespace: string read get_Namespace;
    property AssemblyQualifiedName: string read get_AssemblyQualifiedName;
    property BaseType: DNType read get_BaseType;
    property IsTypeDefinition: Boolean read get_IsTypeDefinition;
    property IsSZArray: Boolean read get_IsSZArray;
    property UnderlyingSystemType: DNType read get_UnderlyingSystemType;
    property IsGenericTypeDefinition: Boolean read get_IsGenericTypeDefinition;
    property IsGenericType: Boolean read get_IsGenericType;
    property IsGenericParameter: Boolean read get_IsGenericParameter;
    property IsConstructedGenericType: Boolean read get_IsConstructedGenericType;
    property GenericParameterPosition: Int32 read get_GenericParameterPosition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property GenericParameterAttributes: DNGenericParameterAttributes read get_GenericParameterAttributes;
    property DeclaringMethod: DNMethodBase read get_DeclaringMethod;
    property GenericTypeParameters: TArray<DNType> read get_GenericTypeParameters;
    property DeclaredConstructors: DNIEnumerable<DNConstructorInfo> read get_DeclaredConstructors;
    property DeclaredEvents: DNIEnumerable<DNEventInfo> read get_DeclaredEvents;
    property DeclaredFields: DNIEnumerable<DNFieldInfo> read get_DeclaredFields;
    property DeclaredMembers: DNIEnumerable<DNMemberInfo> read get_DeclaredMembers;
    property DeclaredMethods: DNIEnumerable<DNMethodInfo> read get_DeclaredMethods;
    property DeclaredNestedTypes: DNIEnumerable<DNTypeInfo> read get_DeclaredNestedTypes;
    property DeclaredProperties: DNIEnumerable<DNPropertyInfo> read get_DeclaredProperties;
    property ImplementedInterfaces: DNIEnumerable<DNType> read get_ImplementedInterfaces;
    property IsInterface: Boolean read get_IsInterface;
    property MemberType: DNMemberTypes read get_MemberType;
    property IsNested: Boolean read get_IsNested;
    property IsArray: Boolean read get_IsArray;
    property IsByRef: Boolean read get_IsByRef;
    property IsPointer: Boolean read get_IsPointer;
    property IsGenericTypeParameter: Boolean read get_IsGenericTypeParameter;
    property IsGenericMethodParameter: Boolean read get_IsGenericMethodParameter;
    property IsVariableBoundArray: Boolean read get_IsVariableBoundArray;
    property IsByRefLike: Boolean read get_IsByRefLike;
    property HasElementType: Boolean read get_HasElementType;
    property GenericTypeArguments: TArray<DNType> read get_GenericTypeArguments;
    property Attributes: DNTypeAttributes read get_Attributes;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsImport: Boolean read get_IsImport;
    property IsSealed: Boolean read get_IsSealed;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsClass: Boolean read get_IsClass;
    property IsNestedAssembly: Boolean read get_IsNestedAssembly;
    property IsNestedFamANDAssem: Boolean read get_IsNestedFamANDAssem;
    property IsNestedFamily: Boolean read get_IsNestedFamily;
    property IsNestedFamORAssem: Boolean read get_IsNestedFamORAssem;
    property IsNestedPrivate: Boolean read get_IsNestedPrivate;
    property IsNestedPublic: Boolean read get_IsNestedPublic;
    property IsNotPublic: Boolean read get_IsNotPublic;
    property IsPublic: Boolean read get_IsPublic;
    property IsAutoLayout: Boolean read get_IsAutoLayout;
    property IsExplicitLayout: Boolean read get_IsExplicitLayout;
    property IsLayoutSequential: Boolean read get_IsLayoutSequential;
    property IsAnsiClass: Boolean read get_IsAnsiClass;
    property IsAutoClass: Boolean read get_IsAutoClass;
    property IsUnicodeClass: Boolean read get_IsUnicodeClass;
    property IsCOMObject: Boolean read get_IsCOMObject;
    property IsContextful: Boolean read get_IsContextful;
    property IsCollectible: Boolean read get_IsCollectible;
    property IsEnum: Boolean read get_IsEnum;
    property IsMarshalByRef: Boolean read get_IsMarshalByRef;
    property IsPrimitive: Boolean read get_IsPrimitive;
    property IsValueType: Boolean read get_IsValueType;
    property IsSignatureType: Boolean read get_IsSignatureType;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property StructLayoutAttribute: DNStructLayoutAttribute read get_StructLayoutAttribute;
    property TypeInitializer: DNConstructorInfo read get_TypeInitializer;
    property IsSerializable: Boolean read get_IsSerializable;
    property IsVisible: Boolean read get_IsVisible;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNGenericTypeParameterBuilder = class(TDNGenericImport<DNGenericTypeParameterBuilderClass, DNGenericTypeParameterBuilder>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNTypeBuilderClass = interface(DNTypeInfoClass)
  ['{CD290AB5-89BC-545D-A96D-B84CFA6F5A15}']
  { static methods } 

    {class} function GetMethod(&type: DNType; method: DNMethodInfo): DNMethodInfo; overload;
    {class} function GetConstructor(&type: DNType; &constructor: DNConstructorInfo): DNConstructorInfo; overload;
    {class} function GetField(&type: DNType; field: DNFieldInfo): DNFieldInfo; overload;

  end;

  [DNTypeName('System.Reflection.Emit.TypeBuilder')]
  DNTypeBuilder = interface(DNTypeInfo)
  ['{F8D57026-3EAC-3E58-BA66-E73A701AD402}']
  { getters & setters } 

    function get_DeclaringType: DNType;
    function get_ReflectedType: DNType;
    function get_Name: string;
    function get_Module: DNModule;
    function get_GUID: DNGuid;
    function get_Assembly: DNAssembly;
    function get_TypeHandle: DNRuntimeTypeHandle;
    function get_FullName: string;
    function get_Namespace: string;
    function get_AssemblyQualifiedName: string;
    function get_BaseType: DNType;
    function get_IsTypeDefinition: Boolean;
    function get_IsSZArray: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_UnderlyingSystemType: DNType;
    function get_GenericParameterAttributes: DNGenericParameterAttributes;
    function get_IsGenericTypeDefinition: Boolean;
    function get_IsGenericType: Boolean;
    function get_IsGenericParameter: Boolean;
    function get_IsConstructedGenericType: Boolean;
    function get_GenericParameterPosition: Int32;
    function get_DeclaringMethod: DNMethodBase;
    function get_Size: Int32;
    function get_PackingSize: DNPackingSize;
    function get_TypeToken: DNTypeToken;
    function get_GenericTypeParameters: TArray<DNType>;
    function get_DeclaredConstructors: DNIEnumerable<DNConstructorInfo>;
    function get_DeclaredEvents: DNIEnumerable<DNEventInfo>;
    function get_DeclaredFields: DNIEnumerable<DNFieldInfo>;
    function get_DeclaredMembers: DNIEnumerable<DNMemberInfo>;
    function get_DeclaredMethods: DNIEnumerable<DNMethodInfo>;
    function get_DeclaredNestedTypes: DNIEnumerable<DNTypeInfo>;
    function get_DeclaredProperties: DNIEnumerable<DNPropertyInfo>;
    function get_ImplementedInterfaces: DNIEnumerable<DNType>;
    function get_IsInterface: Boolean;
    function get_MemberType: DNMemberTypes;
    function get_IsNested: Boolean;
    function get_IsArray: Boolean;
    function get_IsByRef: Boolean;
    function get_IsPointer: Boolean;
    function get_IsGenericTypeParameter: Boolean;
    function get_IsGenericMethodParameter: Boolean;
    function get_IsVariableBoundArray: Boolean;
    function get_IsByRefLike: Boolean;
    function get_HasElementType: Boolean;
    function get_GenericTypeArguments: TArray<DNType>;
    function get_Attributes: DNTypeAttributes;
    function get_IsAbstract: Boolean;
    function get_IsImport: Boolean;
    function get_IsSealed: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsClass: Boolean;
    function get_IsNestedAssembly: Boolean;
    function get_IsNestedFamANDAssem: Boolean;
    function get_IsNestedFamily: Boolean;
    function get_IsNestedFamORAssem: Boolean;
    function get_IsNestedPrivate: Boolean;
    function get_IsNestedPublic: Boolean;
    function get_IsNotPublic: Boolean;
    function get_IsPublic: Boolean;
    function get_IsAutoLayout: Boolean;
    function get_IsExplicitLayout: Boolean;
    function get_IsLayoutSequential: Boolean;
    function get_IsAnsiClass: Boolean;
    function get_IsAutoClass: Boolean;
    function get_IsUnicodeClass: Boolean;
    function get_IsCOMObject: Boolean;
    function get_IsContextful: Boolean;
    function get_IsCollectible: Boolean;
    function get_IsEnum: Boolean;
    function get_IsMarshalByRef: Boolean;
    function get_IsPrimitive: Boolean;
    function get_IsValueType: Boolean;
    function get_IsSignatureType: Boolean;
    function get_StructLayoutAttribute: DNStructLayoutAttribute;
    function get_TypeInitializer: DNConstructorInfo;
    function get_IsSerializable: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsVisible: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    function IsAssignableFrom(typeInfo: DNTypeInfo): Boolean; overload;
    function IsCreated: Boolean;
    function ToString: string;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; namedParameters: TArray<string>): DNObject; overload;
    function GetConstructors(bindingAttr: DNBindingFlags): TArray<DNConstructorInfo>; overload;
    function GetMethods(bindingAttr: DNBindingFlags): TArray<DNMethodInfo>; overload;
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    function GetFields(bindingAttr: DNBindingFlags): TArray<DNFieldInfo>; overload;
    function GetInterface(name: string; ignoreCase: Boolean): DNType; overload;
    function GetInterfaces: TArray<DNType>;
    function GetEvent(name: string; bindingAttr: DNBindingFlags): DNEventInfo; overload;
    function GetEvents: TArray<DNEventInfo>; overload;
    function GetProperties(bindingAttr: DNBindingFlags): TArray<DNPropertyInfo>; overload;
    function GetNestedTypes(bindingAttr: DNBindingFlags): TArray<DNType>; overload;
    function GetNestedType(name: string; bindingAttr: DNBindingFlags): DNType; overload;
    function GetMember(name: string; &type: DNMemberTypes; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetInterfaceMap(interfaceType: DNType): DNInterfaceMapping;
    function GetEvents(bindingAttr: DNBindingFlags): TArray<DNEventInfo>; overload;
    function GetMembers(bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function IsAssignableFrom(c: DNType): Boolean; overload;
    function GetElementType: DNType;
    function IsSubclassOf(c: DNType): Boolean;
    function MakePointerType: DNType;
    function MakeByRefType: DNType;
    function MakeArrayType: DNType; overload;
    function MakeArrayType(rank: Int32): DNType; overload;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function DefineGenericParameters(names: TArray<string>): TArray<DNGenericTypeParameterBuilder>;
    function MakeGenericType(typeArguments: TArray<DNType>): DNType;
    function GetGenericArguments: TArray<DNType>;
    function GetGenericTypeDefinition: DNType;
    procedure DefineMethodOverride(methodInfoBody: DNMethodInfo; methodInfoDeclaration: DNMethodInfo);
    function DefineMethod(name: string; attributes: DNMethodAttributes; returnType: DNType; parameterTypes: TArray<DNType>): DNMethodBuilder; overload;
    function DefineMethod(name: string; attributes: DNMethodAttributes): DNMethodBuilder; overload;
    function DefineMethod(name: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions): DNMethodBuilder; overload;
    function DefineMethod(name: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>): DNMethodBuilder; overload;
    function DefineMethod(name: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; returnTypeRequiredCustomModifiers: TArray<DNType>; returnTypeOptionalCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; parameterTypeRequiredCustomModifiers: TArray<TArray<DNType>>; parameterTypeOptionalCustomModifiers: TArray<TArray<DNType>>): DNMethodBuilder; overload;
    function DefineTypeInitializer: DNConstructorBuilder;
    function DefineDefaultConstructor(attributes: DNMethodAttributes): DNConstructorBuilder;
    function DefineConstructor(attributes: DNMethodAttributes; callingConvention: DNCallingConventions; parameterTypes: TArray<DNType>): DNConstructorBuilder; overload;
    function DefineConstructor(attributes: DNMethodAttributes; callingConvention: DNCallingConventions; parameterTypes: TArray<DNType>; requiredCustomModifiers: TArray<TArray<DNType>>; optionalCustomModifiers: TArray<TArray<DNType>>): DNConstructorBuilder; overload;
    function DefineNestedType(name: string): DNTypeBuilder; overload;
    function DefineNestedType(name: string; attr: DNTypeAttributes; parent: DNType; interfaces: TArray<DNType>): DNTypeBuilder; overload;
    function DefineNestedType(name: string; attr: DNTypeAttributes; parent: DNType): DNTypeBuilder; overload;
    function DefineNestedType(name: string; attr: DNTypeAttributes): DNTypeBuilder; overload;
    function DefineNestedType(name: string; attr: DNTypeAttributes; parent: DNType; typeSize: Int32): DNTypeBuilder; overload;
    function DefineNestedType(name: string; attr: DNTypeAttributes; parent: DNType; packSize: DNPackingSize): DNTypeBuilder; overload;
    function DefineNestedType(name: string; attr: DNTypeAttributes; parent: DNType; packSize: DNPackingSize; typeSize: Int32): DNTypeBuilder; overload;
    function DefineField(fieldName: string; &type: DNType; attributes: DNFieldAttributes): DNFieldBuilder; overload;
    function DefineField(fieldName: string; &type: DNType; requiredCustomModifiers: TArray<DNType>; optionalCustomModifiers: TArray<DNType>; attributes: DNFieldAttributes): DNFieldBuilder; overload;
    function DefineInitializedData(name: string; data: TArray<Byte>; attributes: DNFieldAttributes): DNFieldBuilder;
    function DefineUninitializedData(name: string; size: Int32; attributes: DNFieldAttributes): DNFieldBuilder;
    function DefineProperty(name: string; attributes: DNPropertyAttributes; returnType: DNType; parameterTypes: TArray<DNType>): DNPropertyBuilder; overload;
    function DefineProperty(name: string; attributes: DNPropertyAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>): DNPropertyBuilder; overload;
    function DefineProperty(name: string; attributes: DNPropertyAttributes; returnType: DNType; returnTypeRequiredCustomModifiers: TArray<DNType>; returnTypeOptionalCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; parameterTypeRequiredCustomModifiers: TArray<TArray<DNType>>; parameterTypeOptionalCustomModifiers: TArray<TArray<DNType>>): DNPropertyBuilder; overload;
    function DefineProperty(name: string; attributes: DNPropertyAttributes; callingConvention: DNCallingConventions; returnType: DNType; returnTypeRequiredCustomModifiers: TArray<DNType>; returnTypeOptionalCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; parameterTypeRequiredCustomModifiers: TArray<TArray<DNType>>; parameterTypeOptionalCustomModifiers: TArray<TArray<DNType>>): DNPropertyBuilder; overload;
    function DefineEvent(name: string; attributes: DNEventAttributes; eventtype: DNType): DNEventBuilder;
    function CreateTypeInfo: DNTypeInfo;
    function CreateType: DNType;
    procedure SetParent(parent: DNType);
    procedure AddInterfaceImplementation(interfaceType: DNType);
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    function AsType: DNType;
    function GetDeclaredEvent(name: string): DNEventInfo;
    function GetDeclaredField(name: string): DNFieldInfo;
    function GetDeclaredMethod(name: string): DNMethodInfo;
    function GetDeclaredNestedType(name: string): DNTypeInfo;
    function GetDeclaredProperty(name: string): DNPropertyInfo;
    function GetDeclaredMethods(name: string): DNIEnumerable<DNMethodInfo>;
    function GetType: DNType;
    function GetArrayRank: Int32;
    function GetGenericParameterConstraints: TArray<DNType>;
    function GetConstructor(types: TArray<DNType>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructors: TArray<DNConstructorInfo>; overload;
    function GetEvent(name: string): DNEventInfo; overload;
    function GetField(name: string): DNFieldInfo; overload;
    function GetFields: TArray<DNFieldInfo>; overload;
    function GetMember(name: string): TArray<DNMemberInfo>; overload;
    function GetMember(name: string; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMembers: TArray<DNMemberInfo>; overload;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetNestedType(name: string): DNType; overload;
    function GetNestedTypes: TArray<DNType>; overload;
    function GetProperty(name: string): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType): DNPropertyInfo; overload;
    function GetProperty(name: string; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperties: TArray<DNPropertyInfo>; overload;
    function GetDefaultMembers: TArray<DNMemberInfo>;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>): DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetInterface(name: string): DNType; overload;
    function IsInstanceOfType(o: DNObject): Boolean;
    function IsEquivalentTo(other: DNType): Boolean;
    function GetEnumUnderlyingType: DNType;
    function GetEnumValues: DNArray;
    function Equals(o: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function Equals(o: DNType): Boolean; overload;
    function IsEnumDefined(value: DNObject): Boolean;
    function GetEnumName(value: DNObject): string;
    function GetEnumNames: TArray<string>;
    function FindInterfaces(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function FindMembers(memberType: DNMemberTypes; bindingAttr: DNBindingFlags; filter: DNMemberFilter; filterCriteria: DNObject): TArray<DNMemberInfo>;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;

  { propertys } 

    property DeclaringType: DNType read get_DeclaringType;
    property ReflectedType: DNType read get_ReflectedType;
    property Name: string read get_Name;
    property Module: DNModule read get_Module;
    property GUID: DNGuid read get_GUID;
    property Assembly: DNAssembly read get_Assembly;
    property TypeHandle: DNRuntimeTypeHandle read get_TypeHandle;
    property FullName: string read get_FullName;
    property Namespace: string read get_Namespace;
    property AssemblyQualifiedName: string read get_AssemblyQualifiedName;
    property BaseType: DNType read get_BaseType;
    property IsTypeDefinition: Boolean read get_IsTypeDefinition;
    property IsSZArray: Boolean read get_IsSZArray;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property UnderlyingSystemType: DNType read get_UnderlyingSystemType;
    property GenericParameterAttributes: DNGenericParameterAttributes read get_GenericParameterAttributes;
    property IsGenericTypeDefinition: Boolean read get_IsGenericTypeDefinition;
    property IsGenericType: Boolean read get_IsGenericType;
    property IsGenericParameter: Boolean read get_IsGenericParameter;
    property IsConstructedGenericType: Boolean read get_IsConstructedGenericType;
    property GenericParameterPosition: Int32 read get_GenericParameterPosition;
    property DeclaringMethod: DNMethodBase read get_DeclaringMethod;
    property Size: Int32 read get_Size;
    property PackingSize: DNPackingSize read get_PackingSize;
    property TypeToken: DNTypeToken read get_TypeToken;
    property GenericTypeParameters: TArray<DNType> read get_GenericTypeParameters;
    property DeclaredConstructors: DNIEnumerable<DNConstructorInfo> read get_DeclaredConstructors;
    property DeclaredEvents: DNIEnumerable<DNEventInfo> read get_DeclaredEvents;
    property DeclaredFields: DNIEnumerable<DNFieldInfo> read get_DeclaredFields;
    property DeclaredMembers: DNIEnumerable<DNMemberInfo> read get_DeclaredMembers;
    property DeclaredMethods: DNIEnumerable<DNMethodInfo> read get_DeclaredMethods;
    property DeclaredNestedTypes: DNIEnumerable<DNTypeInfo> read get_DeclaredNestedTypes;
    property DeclaredProperties: DNIEnumerable<DNPropertyInfo> read get_DeclaredProperties;
    property ImplementedInterfaces: DNIEnumerable<DNType> read get_ImplementedInterfaces;
    property IsInterface: Boolean read get_IsInterface;
    property MemberType: DNMemberTypes read get_MemberType;
    property IsNested: Boolean read get_IsNested;
    property IsArray: Boolean read get_IsArray;
    property IsByRef: Boolean read get_IsByRef;
    property IsPointer: Boolean read get_IsPointer;
    property IsGenericTypeParameter: Boolean read get_IsGenericTypeParameter;
    property IsGenericMethodParameter: Boolean read get_IsGenericMethodParameter;
    property IsVariableBoundArray: Boolean read get_IsVariableBoundArray;
    property IsByRefLike: Boolean read get_IsByRefLike;
    property HasElementType: Boolean read get_HasElementType;
    property GenericTypeArguments: TArray<DNType> read get_GenericTypeArguments;
    property Attributes: DNTypeAttributes read get_Attributes;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsImport: Boolean read get_IsImport;
    property IsSealed: Boolean read get_IsSealed;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsClass: Boolean read get_IsClass;
    property IsNestedAssembly: Boolean read get_IsNestedAssembly;
    property IsNestedFamANDAssem: Boolean read get_IsNestedFamANDAssem;
    property IsNestedFamily: Boolean read get_IsNestedFamily;
    property IsNestedFamORAssem: Boolean read get_IsNestedFamORAssem;
    property IsNestedPrivate: Boolean read get_IsNestedPrivate;
    property IsNestedPublic: Boolean read get_IsNestedPublic;
    property IsNotPublic: Boolean read get_IsNotPublic;
    property IsPublic: Boolean read get_IsPublic;
    property IsAutoLayout: Boolean read get_IsAutoLayout;
    property IsExplicitLayout: Boolean read get_IsExplicitLayout;
    property IsLayoutSequential: Boolean read get_IsLayoutSequential;
    property IsAnsiClass: Boolean read get_IsAnsiClass;
    property IsAutoClass: Boolean read get_IsAutoClass;
    property IsUnicodeClass: Boolean read get_IsUnicodeClass;
    property IsCOMObject: Boolean read get_IsCOMObject;
    property IsContextful: Boolean read get_IsContextful;
    property IsCollectible: Boolean read get_IsCollectible;
    property IsEnum: Boolean read get_IsEnum;
    property IsMarshalByRef: Boolean read get_IsMarshalByRef;
    property IsPrimitive: Boolean read get_IsPrimitive;
    property IsValueType: Boolean read get_IsValueType;
    property IsSignatureType: Boolean read get_IsSignatureType;
    property StructLayoutAttribute: DNStructLayoutAttribute read get_StructLayoutAttribute;
    property TypeInitializer: DNConstructorInfo read get_TypeInitializer;
    property IsSerializable: Boolean read get_IsSerializable;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsVisible: Boolean read get_IsVisible;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNTypeBuilder = class(TDNGenericImport<DNTypeBuilderClass, DNTypeBuilder>)
  public const
   UnspecifiedTypeSize = 0;
  end;

  //-------------namespace: System.Reflection----------------
  DNTypeDelegatorClass = interface(DNTypeInfoClass)
  ['{B8B36FF5-6EEF-5D95-B402-7194A6440C2D}']
  { constructors } 

    {class} function init(delegatingType: DNType): DNTypeDelegator;

  end;

  [DNTypeName('System.Reflection.TypeDelegator')]
  DNTypeDelegator = interface(DNTypeInfo)
  ['{A7A13D15-13F1-365B-8090-E763159BA276}']
  { getters & setters } 

    function get_GUID: DNGuid;
    function get_MetadataToken: Int32;
    function get_Module: DNModule;
    function get_Assembly: DNAssembly;
    function get_TypeHandle: DNRuntimeTypeHandle;
    function get_Name: string;
    function get_FullName: string;
    function get_Namespace: string;
    function get_AssemblyQualifiedName: string;
    function get_BaseType: DNType;
    function get_IsTypeDefinition: Boolean;
    function get_IsSZArray: Boolean;
    function get_IsGenericTypeParameter: Boolean;
    function get_IsGenericMethodParameter: Boolean;
    function get_IsByRefLike: Boolean;
    function get_IsConstructedGenericType: Boolean;
    function get_IsCollectible: Boolean;
    function get_UnderlyingSystemType: DNType;
    function get_GenericTypeParameters: TArray<DNType>;
    function get_DeclaredConstructors: DNIEnumerable<DNConstructorInfo>;
    function get_DeclaredEvents: DNIEnumerable<DNEventInfo>;
    function get_DeclaredFields: DNIEnumerable<DNFieldInfo>;
    function get_DeclaredMembers: DNIEnumerable<DNMemberInfo>;
    function get_DeclaredMethods: DNIEnumerable<DNMethodInfo>;
    function get_DeclaredNestedTypes: DNIEnumerable<DNTypeInfo>;
    function get_DeclaredProperties: DNIEnumerable<DNPropertyInfo>;
    function get_ImplementedInterfaces: DNIEnumerable<DNType>;
    function get_IsInterface: Boolean;
    function get_MemberType: DNMemberTypes;
    function get_IsNested: Boolean;
    function get_DeclaringType: DNType;
    function get_DeclaringMethod: DNMethodBase;
    function get_ReflectedType: DNType;
    function get_IsArray: Boolean;
    function get_IsByRef: Boolean;
    function get_IsPointer: Boolean;
    function get_IsGenericParameter: Boolean;
    function get_IsGenericType: Boolean;
    function get_IsGenericTypeDefinition: Boolean;
    function get_IsVariableBoundArray: Boolean;
    function get_HasElementType: Boolean;
    function get_GenericTypeArguments: TArray<DNType>;
    function get_GenericParameterPosition: Int32;
    function get_GenericParameterAttributes: DNGenericParameterAttributes;
    function get_Attributes: DNTypeAttributes;
    function get_IsAbstract: Boolean;
    function get_IsImport: Boolean;
    function get_IsSealed: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsClass: Boolean;
    function get_IsNestedAssembly: Boolean;
    function get_IsNestedFamANDAssem: Boolean;
    function get_IsNestedFamily: Boolean;
    function get_IsNestedFamORAssem: Boolean;
    function get_IsNestedPrivate: Boolean;
    function get_IsNestedPublic: Boolean;
    function get_IsNotPublic: Boolean;
    function get_IsPublic: Boolean;
    function get_IsAutoLayout: Boolean;
    function get_IsExplicitLayout: Boolean;
    function get_IsLayoutSequential: Boolean;
    function get_IsAnsiClass: Boolean;
    function get_IsAutoClass: Boolean;
    function get_IsUnicodeClass: Boolean;
    function get_IsCOMObject: Boolean;
    function get_IsContextful: Boolean;
    function get_IsEnum: Boolean;
    function get_IsMarshalByRef: Boolean;
    function get_IsPrimitive: Boolean;
    function get_IsValueType: Boolean;
    function get_IsSignatureType: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_StructLayoutAttribute: DNStructLayoutAttribute;
    function get_TypeInitializer: DNConstructorInfo;
    function get_IsSerializable: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsVisible: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;

  { methods } 

    function IsAssignableFrom(typeInfo: DNTypeInfo): Boolean; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; modifiers: TArray<DNParameterModifier>; culture: DNCultureInfo; namedParameters: TArray<string>): DNObject; overload;
    function GetConstructors(bindingAttr: DNBindingFlags): TArray<DNConstructorInfo>; overload;
    function GetMethods(bindingAttr: DNBindingFlags): TArray<DNMethodInfo>; overload;
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    function GetFields(bindingAttr: DNBindingFlags): TArray<DNFieldInfo>; overload;
    function GetInterface(name: string; ignoreCase: Boolean): DNType; overload;
    function GetInterfaces: TArray<DNType>;
    function GetEvent(name: string; bindingAttr: DNBindingFlags): DNEventInfo; overload;
    function GetEvents: TArray<DNEventInfo>; overload;
    function GetProperties(bindingAttr: DNBindingFlags): TArray<DNPropertyInfo>; overload;
    function GetEvents(bindingAttr: DNBindingFlags): TArray<DNEventInfo>; overload;
    function GetNestedTypes(bindingAttr: DNBindingFlags): TArray<DNType>; overload;
    function GetNestedType(name: string; bindingAttr: DNBindingFlags): DNType; overload;
    function GetMember(name: string; &type: DNMemberTypes; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMembers(bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetElementType: DNType;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetInterfaceMap(interfaceType: DNType): DNInterfaceMapping;
    function AsType: DNType;
    function GetDeclaredEvent(name: string): DNEventInfo;
    function GetDeclaredField(name: string): DNFieldInfo;
    function GetDeclaredMethod(name: string): DNMethodInfo;
    function GetDeclaredNestedType(name: string): DNTypeInfo;
    function GetDeclaredProperty(name: string): DNPropertyInfo;
    function GetDeclaredMethods(name: string): DNIEnumerable<DNMethodInfo>;
    function GetType: DNType;
    function GetArrayRank: Int32;
    function GetGenericTypeDefinition: DNType;
    function GetGenericArguments: TArray<DNType>;
    function GetGenericParameterConstraints: TArray<DNType>;
    function GetConstructor(types: TArray<DNType>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructor(bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNConstructorInfo; overload;
    function GetConstructors: TArray<DNConstructorInfo>; overload;
    function GetEvent(name: string): DNEventInfo; overload;
    function GetField(name: string): DNFieldInfo; overload;
    function GetFields: TArray<DNFieldInfo>; overload;
    function GetMember(name: string): TArray<DNMemberInfo>; overload;
    function GetMember(name: string; bindingAttr: DNBindingFlags): TArray<DNMemberInfo>; overload;
    function GetMembers: TArray<DNMemberInfo>; overload;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; bindingAttr: DNBindingFlags; binder: DNBinder; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethod(name: string; genericParameterCount: Int32; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetNestedType(name: string): DNType; overload;
    function GetNestedTypes: TArray<DNType>; overload;
    function GetProperty(name: string): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType): DNPropertyInfo; overload;
    function GetProperty(name: string; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>): DNPropertyInfo; overload;
    function GetProperty(name: string; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperty(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; returnType: DNType; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNPropertyInfo; overload;
    function GetProperties: TArray<DNPropertyInfo>; overload;
    function GetDefaultMembers: TArray<DNMemberInfo>;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>): DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DNBindingFlags; binder: DNBinder; target: DNObject; args: TArray<DNObject>; culture: DNCultureInfo): DNObject; overload;
    function GetInterface(name: string): DNType; overload;
    function IsInstanceOfType(o: DNObject): Boolean;
    function IsEquivalentTo(other: DNType): Boolean;
    function GetEnumUnderlyingType: DNType;
    function GetEnumValues: DNArray;
    function MakeArrayType: DNType; overload;
    function MakeArrayType(rank: Int32): DNType; overload;
    function MakeByRefType: DNType;
    function MakeGenericType(typeArguments: TArray<DNType>): DNType;
    function MakePointerType: DNType;
    function ToString: string;
    function Equals(o: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function Equals(o: DNType): Boolean; overload;
    function IsEnumDefined(value: DNObject): Boolean;
    function GetEnumName(value: DNObject): string;
    function GetEnumNames: TArray<string>;
    function FindInterfaces(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function FindMembers(memberType: DNMemberTypes; bindingAttr: DNBindingFlags; filter: DNMemberFilter; filterCriteria: DNObject): TArray<DNMemberInfo>;
    function IsSubclassOf(c: DNType): Boolean;
    function IsAssignableFrom(c: DNType): Boolean; overload;
    function HasSameMetadataDefinitionAs(other: DNMemberInfo): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;

  { propertys } 

    property GUID: DNGuid read get_GUID;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DNModule read get_Module;
    property Assembly: DNAssembly read get_Assembly;
    property TypeHandle: DNRuntimeTypeHandle read get_TypeHandle;
    property Name: string read get_Name;
    property FullName: string read get_FullName;
    property Namespace: string read get_Namespace;
    property AssemblyQualifiedName: string read get_AssemblyQualifiedName;
    property BaseType: DNType read get_BaseType;
    property IsTypeDefinition: Boolean read get_IsTypeDefinition;
    property IsSZArray: Boolean read get_IsSZArray;
    property IsGenericTypeParameter: Boolean read get_IsGenericTypeParameter;
    property IsGenericMethodParameter: Boolean read get_IsGenericMethodParameter;
    property IsByRefLike: Boolean read get_IsByRefLike;
    property IsConstructedGenericType: Boolean read get_IsConstructedGenericType;
    property IsCollectible: Boolean read get_IsCollectible;
    property UnderlyingSystemType: DNType read get_UnderlyingSystemType;
    property GenericTypeParameters: TArray<DNType> read get_GenericTypeParameters;
    property DeclaredConstructors: DNIEnumerable<DNConstructorInfo> read get_DeclaredConstructors;
    property DeclaredEvents: DNIEnumerable<DNEventInfo> read get_DeclaredEvents;
    property DeclaredFields: DNIEnumerable<DNFieldInfo> read get_DeclaredFields;
    property DeclaredMembers: DNIEnumerable<DNMemberInfo> read get_DeclaredMembers;
    property DeclaredMethods: DNIEnumerable<DNMethodInfo> read get_DeclaredMethods;
    property DeclaredNestedTypes: DNIEnumerable<DNTypeInfo> read get_DeclaredNestedTypes;
    property DeclaredProperties: DNIEnumerable<DNPropertyInfo> read get_DeclaredProperties;
    property ImplementedInterfaces: DNIEnumerable<DNType> read get_ImplementedInterfaces;
    property IsInterface: Boolean read get_IsInterface;
    property MemberType: DNMemberTypes read get_MemberType;
    property IsNested: Boolean read get_IsNested;
    property DeclaringType: DNType read get_DeclaringType;
    property DeclaringMethod: DNMethodBase read get_DeclaringMethod;
    property ReflectedType: DNType read get_ReflectedType;
    property IsArray: Boolean read get_IsArray;
    property IsByRef: Boolean read get_IsByRef;
    property IsPointer: Boolean read get_IsPointer;
    property IsGenericParameter: Boolean read get_IsGenericParameter;
    property IsGenericType: Boolean read get_IsGenericType;
    property IsGenericTypeDefinition: Boolean read get_IsGenericTypeDefinition;
    property IsVariableBoundArray: Boolean read get_IsVariableBoundArray;
    property HasElementType: Boolean read get_HasElementType;
    property GenericTypeArguments: TArray<DNType> read get_GenericTypeArguments;
    property GenericParameterPosition: Int32 read get_GenericParameterPosition;
    property GenericParameterAttributes: DNGenericParameterAttributes read get_GenericParameterAttributes;
    property Attributes: DNTypeAttributes read get_Attributes;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsImport: Boolean read get_IsImport;
    property IsSealed: Boolean read get_IsSealed;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsClass: Boolean read get_IsClass;
    property IsNestedAssembly: Boolean read get_IsNestedAssembly;
    property IsNestedFamANDAssem: Boolean read get_IsNestedFamANDAssem;
    property IsNestedFamily: Boolean read get_IsNestedFamily;
    property IsNestedFamORAssem: Boolean read get_IsNestedFamORAssem;
    property IsNestedPrivate: Boolean read get_IsNestedPrivate;
    property IsNestedPublic: Boolean read get_IsNestedPublic;
    property IsNotPublic: Boolean read get_IsNotPublic;
    property IsPublic: Boolean read get_IsPublic;
    property IsAutoLayout: Boolean read get_IsAutoLayout;
    property IsExplicitLayout: Boolean read get_IsExplicitLayout;
    property IsLayoutSequential: Boolean read get_IsLayoutSequential;
    property IsAnsiClass: Boolean read get_IsAnsiClass;
    property IsAutoClass: Boolean read get_IsAutoClass;
    property IsUnicodeClass: Boolean read get_IsUnicodeClass;
    property IsCOMObject: Boolean read get_IsCOMObject;
    property IsContextful: Boolean read get_IsContextful;
    property IsEnum: Boolean read get_IsEnum;
    property IsMarshalByRef: Boolean read get_IsMarshalByRef;
    property IsPrimitive: Boolean read get_IsPrimitive;
    property IsValueType: Boolean read get_IsValueType;
    property IsSignatureType: Boolean read get_IsSignatureType;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property StructLayoutAttribute: DNStructLayoutAttribute read get_StructLayoutAttribute;
    property TypeInitializer: DNConstructorInfo read get_TypeInitializer;
    property IsSerializable: Boolean read get_IsSerializable;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsVisible: Boolean read get_IsVisible;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
  end;

  TDNTypeDelegator = class(TDNGenericImport<DNTypeDelegatorClass, DNTypeDelegator>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNAssemblyExtensionsClass = interface(DNObjectClass)
  ['{A033FA9D-D288-56E8-91CF-46BBA35B2E9A}']
  { static methods } 

    {class} function TryGetRawMetadata(assembly: DNAssembly; out blob: PByte; out length: Int32): Boolean;

  end;

  [DNTypeName('System.Reflection.Metadata.AssemblyExtensions')]
  DNAssemblyExtensions = interface(DNObject)
  ['{1CE5B16E-5CCB-366F-8C92-63E0FB76694E}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNAssemblyExtensions = class(TDNGenericImport<DNAssemblyExtensionsClass, DNAssemblyExtensions>) end;

  //-------------namespace: System.Reflection----------------
  DNMethodBodyClass = interface(DNObjectClass)
  ['{60FE1FE7-7205-5B2B-8C21-BC4DC21C589A}']
  end;

  [DNTypeName('System.Reflection.MethodBody')]
  DNMethodBody = interface(DNObject)
  ['{DCF6E0FF-F52E-36A8-B0D3-7EF000CD1F93}']
  { getters & setters } 

    function get_LocalSignatureMetadataToken: Int32;
    function get_LocalVariables: DNIList<DNLocalVariableInfo>;
    function get_MaxStackSize: Int32;
    function get_InitLocals: Boolean;
    function get_ExceptionHandlingClauses: DNIList<DNExceptionHandlingClause>;

  { methods } 

    function GetILAsByteArray: TArray<Byte>;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property LocalSignatureMetadataToken: Int32 read get_LocalSignatureMetadataToken;
    property LocalVariables: DNIList<DNLocalVariableInfo> read get_LocalVariables;
    property MaxStackSize: Int32 read get_MaxStackSize;
    property InitLocals: Boolean read get_InitLocals;
    property ExceptionHandlingClauses: DNIList<DNExceptionHandlingClause> read get_ExceptionHandlingClauses;
  end;

  TDNMethodBody = class(TDNGenericImport<DNMethodBodyClass, DNMethodBody>) end;

  //-------------namespace: System.Reflection----------------
  DNMissingClass = interface(DNObjectClass)
  ['{A2B0C84A-4DFA-5B46-AF07-784555ED9779}']
  { static fields getter & setter } 

   function __fakeFieldGet_Value: DNMissing;

  { static fields } 

    {class} property Value: DNMissing read __fakeFieldGet_Value;

  end;

  [DNTypeName('System.Reflection.Missing')]
  DNMissing = interface(DNISerializable)
  ['{096237C7-FE9F-339F-9F36-36EF310EF6FC}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNMissing = class(TDNGenericImport<DNMissingClass, DNMissing>) end;

  //-------------namespace: System.Reflection----------------
  DNModuleClass = interface(DNObjectClass)
  ['{AEF58153-B997-5048-BCE3-8C26B1D2D66E}']
  { static fields getter & setter } 

   function __fakeFieldGet_FilterTypeName: DNTypeFilter;
   function __fakeFieldGet_FilterTypeNameIgnoreCase: DNTypeFilter;

  { static fields } 

    {class} property FilterTypeName: DNTypeFilter read __fakeFieldGet_FilterTypeName;
    {class} property FilterTypeNameIgnoreCase: DNTypeFilter read __fakeFieldGet_FilterTypeNameIgnoreCase;

  end;

  [DNTypeName('System.Reflection.Module')]
  DNModule = interface(DNICustomAttributeProvider)
  ['{4FFF6451-6A52-31E3-B970-C3633CCD6C16}']
  { getters & setters } 

    function get_Assembly: DNAssembly;
    function get_FullyQualifiedName: string;
    function get_Name: string;
    function get_MDStreamVersion: Int32;
    function get_ModuleVersionId: DNGuid;
    function get_ScopeName: string;
    function get_ModuleHandle: DNModuleHandle;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    procedure GetPEKind(out peKind: DNPortableExecutableKinds; out machine: DNImageFileMachine);
    function IsResource: Boolean;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetMethods(bindingFlags: DNBindingFlags): TArray<DNMethodInfo>; overload;
    function GetField(name: string): DNFieldInfo; overload;
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    function GetFields: TArray<DNFieldInfo>; overload;
    function GetFields(bindingFlags: DNBindingFlags): TArray<DNFieldInfo>; overload;
    function GetTypes: TArray<DNType>;
    function GetType(className: string): DNType; overload;
    function GetType(className: string; ignoreCase: Boolean): DNType; overload;
    function GetType(className: string; throwOnError: Boolean; ignoreCase: Boolean): DNType; overload;
    function FindTypes(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function ResolveField(metadataToken: Int32): DNFieldInfo; overload;
    function ResolveField(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNFieldInfo; overload;
    function ResolveMember(metadataToken: Int32): DNMemberInfo; overload;
    function ResolveMember(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNMemberInfo; overload;
    function ResolveMethod(metadataToken: Int32): DNMethodBase; overload;
    function ResolveMethod(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNMethodBase; overload;
    function ResolveSignature(metadataToken: Int32): TArray<Byte>;
    function ResolveString(metadataToken: Int32): string;
    function ResolveType(metadataToken: Int32): DNType; overload;
    function ResolveType(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNType; overload;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType; overload;

  { propertys } 

    property Assembly: DNAssembly read get_Assembly;
    property FullyQualifiedName: string read get_FullyQualifiedName;
    property Name: string read get_Name;
    property MDStreamVersion: Int32 read get_MDStreamVersion;
    property ModuleVersionId: DNGuid read get_ModuleVersionId;
    property ScopeName: string read get_ScopeName;
    property ModuleHandle: DNModuleHandle read get_ModuleHandle;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNModule = class(TDNGenericImport<DNModuleClass, DNModule>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNModuleBuilderClass = interface(DNModuleClass)
  ['{8DC58D55-841E-5B0D-A97E-C78D927D7734}']
  end;

  [DNTypeName('System.Reflection.Emit.ModuleBuilder')]
  DNModuleBuilder = interface(DNModule)
  ['{135203B7-BB20-3DAE-9A2C-A646A21EB681}']
  { getters & setters } 

    function get_FullyQualifiedName: string;
    function get_MDStreamVersion: Int32;
    function get_ModuleVersionId: DNGuid;
    function get_MetadataToken: Int32;
    function get_ScopeName: string;
    function get_Name: string;
    function get_Assembly: DNAssembly;
    function get_ModuleHandle: DNModuleHandle;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetTypes: TArray<DNType>;
    function GetType(className: string): DNType; overload;
    function GetType(className: string; ignoreCase: Boolean): DNType; overload;
    function GetType(className: string; throwOnError: Boolean; ignoreCase: Boolean): DNType; overload;
    function ResolveSignature(metadataToken: Int32): TArray<Byte>;
    function ResolveMethod(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNMethodBase; overload;
    function ResolveField(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNFieldInfo; overload;
    function ResolveType(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNType; overload;
    function ResolveMember(metadataToken: Int32; genericTypeArguments: TArray<DNType>; genericMethodArguments: TArray<DNType>): DNMemberInfo; overload;
    function ResolveString(metadataToken: Int32): string;
    procedure GetPEKind(out peKind: DNPortableExecutableKinds; out machine: DNImageFileMachine);
    function IsResource: Boolean;
    function GetFields(bindingFlags: DNBindingFlags): TArray<DNFieldInfo>; overload;
    function GetField(name: string; bindingAttr: DNBindingFlags): DNFieldInfo; overload;
    function GetMethods(bindingFlags: DNBindingFlags): TArray<DNMethodInfo>; overload;
    function DefineType(name: string): DNTypeBuilder; overload;
    function DefineType(name: string; attr: DNTypeAttributes): DNTypeBuilder; overload;
    function DefineType(name: string; attr: DNTypeAttributes; parent: DNType): DNTypeBuilder; overload;
    function DefineType(name: string; attr: DNTypeAttributes; parent: DNType; typesize: Int32): DNTypeBuilder; overload;
    function DefineType(name: string; attr: DNTypeAttributes; parent: DNType; packingSize: DNPackingSize; typesize: Int32): DNTypeBuilder; overload;
    function DefineType(name: string; attr: DNTypeAttributes; parent: DNType; interfaces: TArray<DNType>): DNTypeBuilder; overload;
    function DefineType(name: string; attr: DNTypeAttributes; parent: DNType; packsize: DNPackingSize): DNTypeBuilder; overload;
    function DefineEnum(name: string; visibility: DNTypeAttributes; underlyingType: DNType): DNEnumBuilder;
    function DefineGlobalMethod(name: string; attributes: DNMethodAttributes; returnType: DNType; parameterTypes: TArray<DNType>): DNMethodBuilder; overload;
    function DefineGlobalMethod(name: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>): DNMethodBuilder; overload;
    function DefineGlobalMethod(name: string; attributes: DNMethodAttributes; callingConvention: DNCallingConventions; returnType: DNType; requiredReturnTypeCustomModifiers: TArray<DNType>; optionalReturnTypeCustomModifiers: TArray<DNType>; parameterTypes: TArray<DNType>; requiredParameterTypeCustomModifiers: TArray<TArray<DNType>>; optionalParameterTypeCustomModifiers: TArray<TArray<DNType>>): DNMethodBuilder; overload;
    procedure CreateGlobalFunctions;
    function DefineInitializedData(name: string; data: TArray<Byte>; attributes: DNFieldAttributes): DNFieldBuilder;
    function DefineUninitializedData(name: string; size: Int32; attributes: DNFieldAttributes): DNFieldBuilder;
    function GetTypeToken(&type: DNType): DNTypeToken; overload;
    function GetTypeToken(name: string): DNTypeToken; overload;
    function GetMethodToken(method: DNMethodInfo): DNMethodToken;
    function GetArrayMethodToken(arrayClass: DNType; methodName: string; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>): DNMethodToken;
    function GetArrayMethod(arrayClass: DNType; methodName: string; callingConvention: DNCallingConventions; returnType: DNType; parameterTypes: TArray<DNType>): DNMethodInfo;
    function GetConstructorToken(con: DNConstructorInfo): DNMethodToken;
    function GetFieldToken(field: DNFieldInfo): DNFieldToken;
    function GetStringConstant(str: string): DNStringToken;
    function GetSignatureToken(sigHelper: DNSignatureHelper): DNSignatureToken; overload;
    function GetSignatureToken(sigBytes: TArray<Byte>; sigLength: Int32): DNSignatureToken; overload;
    procedure SetCustomAttribute(con: DNConstructorInfo; binaryAttribute: TArray<Byte>); overload;
    procedure SetCustomAttribute(customBuilder: DNCustomAttributeBuilder); overload;
    function DefineDocument(url: string; language: DNGuid; languageVendor: DNGuid; documentType: DNGuid): DNISymbolDocumentWriter;
    function IsTransient: Boolean;
    function GetMethod(name: string): DNMethodInfo; overload;
    function GetMethod(name: string; types: TArray<DNType>): DNMethodInfo; overload;
    function GetMethod(name: string; bindingAttr: DNBindingFlags; binder: DNBinder; callConvention: DNCallingConventions; types: TArray<DNType>; modifiers: TArray<DNParameterModifier>): DNMethodInfo; overload;
    function GetMethods: TArray<DNMethodInfo>; overload;
    function GetField(name: string): DNFieldInfo; overload;
    function GetFields: TArray<DNFieldInfo>; overload;
    function FindTypes(filter: DNTypeFilter; filterCriteria: DNObject): TArray<DNType>;
    function ResolveField(metadataToken: Int32): DNFieldInfo; overload;
    function ResolveMember(metadataToken: Int32): DNMemberInfo; overload;
    function ResolveMethod(metadataToken: Int32): DNMethodBase; overload;
    function ResolveType(metadataToken: Int32): DNType; overload;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType; overload;

  { propertys } 

    property FullyQualifiedName: string read get_FullyQualifiedName;
    property MDStreamVersion: Int32 read get_MDStreamVersion;
    property ModuleVersionId: DNGuid read get_ModuleVersionId;
    property MetadataToken: Int32 read get_MetadataToken;
    property ScopeName: string read get_ScopeName;
    property Name: string read get_Name;
    property Assembly: DNAssembly read get_Assembly;
    property ModuleHandle: DNModuleHandle read get_ModuleHandle;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
  end;

  TDNModuleBuilder = class(TDNGenericImport<DNModuleBuilderClass, DNModuleBuilder>) end;

  //-------------namespace: System.Reflection----------------
  DNParameterInfoClass = interface(DNObjectClass)
  ['{917EFF0A-AEC6-5760-ADBF-4163721CF9A1}']
  end;

  [DNTypeName('System.Reflection.ParameterInfo')]
  DNParameterInfo = interface(DNICustomAttributeProvider)
  ['{39313FAC-58EF-3CE6-B4EF-3E468310B8AE}']
  { getters & setters } 

    function get_Attributes: DNParameterAttributes;
    function get_Member: DNMemberInfo;
    function get_Name: string;
    function get_ParameterType: DNType;
    function get_Position: Int32;
    function get_IsIn: Boolean;
    function get_IsLcid: Boolean;
    function get_IsOptional: Boolean;
    function get_IsOut: Boolean;
    function get_IsRetval: Boolean;
    function get_DefaultValue: DNObject;
    function get_RawDefaultValue: DNObject;
    function get_HasDefaultValue: Boolean;
    function get_CustomAttributes: DNIEnumerable<DNCustomAttributeData>;
    function get_MetadataToken: Int32;

  { methods } 

    function IsDefined(attributeType: DNType; inherit: Boolean): Boolean;
    function GetCustomAttributesData: DNIList<DNCustomAttributeData>;
    function GetCustomAttributes(inherit: Boolean): TArray<DNObject>; overload;
    function GetCustomAttributes(attributeType: DNType; inherit: Boolean): TArray<DNObject>; overload;
    function GetOptionalCustomModifiers: TArray<DNType>;
    function GetRequiredCustomModifiers: TArray<DNType>;
    function GetRealObject(context: DNStreamingContext): DNObject;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Attributes: DNParameterAttributes read get_Attributes;
    property Member: DNMemberInfo read get_Member;
    property Name: string read get_Name;
    property ParameterType: DNType read get_ParameterType;
    property Position: Int32 read get_Position;
    property IsIn: Boolean read get_IsIn;
    property IsLcid: Boolean read get_IsLcid;
    property IsOptional: Boolean read get_IsOptional;
    property IsOut: Boolean read get_IsOut;
    property IsRetval: Boolean read get_IsRetval;
    property DefaultValue: DNObject read get_DefaultValue;
    property RawDefaultValue: DNObject read get_RawDefaultValue;
    property HasDefaultValue: Boolean read get_HasDefaultValue;
    property CustomAttributes: DNIEnumerable<DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
  end;

  TDNParameterInfo = class(TDNGenericImport<DNParameterInfoClass, DNParameterInfo>) end;

  //-------------namespace: System.Reflection----------------
  DNPointerClass = interface(DNObjectClass)
  ['{298F8BF2-EB1A-5F3A-B387-4B7A8DE9CA0A}']
  { static methods } 

    {class} function Box(var ptr: DNVoid; &type: DNType): DNObject;
    {class} function Unbox(ptr: DNObject): DNVoid;

  end;

  [DNTypeName('System.Reflection.Pointer')]
  DNPointer = interface(DNISerializable)
  ['{389A82B8-BD3A-361E-9A08-09C1993F3604}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNPointer = class(TDNGenericImport<DNPointerClass, DNPointer>) end;

  //-------------namespace: System.Reflection----------------
  DNReflectionContextClass = interface(DNObjectClass)
  ['{C3B9FC9A-895E-51AC-A79F-9E1078E65505}']
  end;

  [DNTypeName('System.Reflection.ReflectionContext')]
  DNReflectionContext = interface(DNObject)
  ['{0EF7E2DF-EE4B-3385-8EAB-18982C0A1564}']
  { methods } 

    function MapAssembly(assembly: DNAssembly): DNAssembly;
    function MapType(&type: DNTypeInfo): DNTypeInfo;
    function GetTypeForObject(value: DNObject): DNTypeInfo;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNReflectionContext = class(TDNGenericImport<DNReflectionContextClass, DNReflectionContext>) end;

  //-------------namespace: System.Reflection----------------
  DNStrongNameKeyPairClass = interface(DNObjectClass)
  ['{0E13A680-BF44-5B1F-8FA8-B10FF1D6A05E}']
  { constructors } 

    {class} function init(keyPairFile: DNFileStream): DNStrongNameKeyPair; overload;
    {class} function init(keyPairArray: TArray<Byte>): DNStrongNameKeyPair; overload;
    {class} function init(keyPairContainer: string): DNStrongNameKeyPair; overload;

  end;

  [DNTypeName('System.Reflection.StrongNameKeyPair')]
  DNStrongNameKeyPair = interface(DNIDeserializationCallback)
  ['{9743A7C7-0643-3DEB-A468-6A5A6C6AFE60}']
  { getters & setters } 

    function get_PublicKey: TArray<Byte>;

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property PublicKey: TArray<Byte> read get_PublicKey;
  end;

  TDNStrongNameKeyPair = class(TDNGenericImport<DNStrongNameKeyPairClass, DNStrongNameKeyPair>) end;

  //-------------namespace: System.Resources----------------
  DNResourceManagerClass = interface(DNObjectClass)
  ['{814A5609-F332-500E-BF6D-C92521158896}']
  { constructors } 

    {class} function init(baseName: string; assembly: DNAssembly): DNResourceManager; overload;
    {class} function init(baseName: string; assembly: DNAssembly; usingResourceSet: DNType): DNResourceManager; overload;
    {class} function init(resourceSource: DNType): DNResourceManager; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_MagicNumber: Int32;
   function __fakeFieldGet_HeaderVersionNumber: Int32;

  { static fields } 

    {class} property MagicNumber: Int32 read __fakeFieldGet_MagicNumber;
    {class} property HeaderVersionNumber: Int32 read __fakeFieldGet_HeaderVersionNumber;

  { static methods } 

    {class} function CreateFileBasedResourceManager(baseName: string; resourceDir: string; usingResourceSet: DNType): DNResourceManager;

  end;

  [DNTypeName('System.Resources.ResourceManager')]
  DNResourceManager = interface(DNObject)
  ['{CC64412F-3F25-3593-9AF7-D7746321A13D}']
  { getters & setters } 

    function get_BaseName: string;
    function get_IgnoreCase: Boolean;
    procedure set_IgnoreCase(value: Boolean);
    function get_ResourceSetType: DNType;

  { methods } 

    procedure ReleaseAllResources;
    function GetResourceSet(culture: DNCultureInfo; createIfNotExists: Boolean; tryParents: Boolean): DNResourceSet;
    function GetString(name: string): string; overload;
    function GetString(name: string; culture: DNCultureInfo): string; overload;
    function GetObject(name: string): DNObject; overload;
    function GetObject(name: string; culture: DNCultureInfo): DNObject; overload;
    function GetStream(name: string): DNUnmanagedMemoryStream; overload;
    function GetStream(name: string; culture: DNCultureInfo): DNUnmanagedMemoryStream; overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property BaseName: string read get_BaseName;
    property IgnoreCase: Boolean read get_IgnoreCase write set_IgnoreCase;
    property ResourceSetType: DNType read get_ResourceSetType;
  end;

  TDNResourceManager = class(TDNGenericImport<DNResourceManagerClass, DNResourceManager>) end;

  //-------------namespace: System.Resources----------------
  DNResourceReaderClass = interface(DNObjectClass)
  ['{D4994F55-5F58-5A8A-A3D6-931ADE918712}']
  { constructors } 

    {class} function init(fileName: string): DNResourceReader; overload;
    {class} function init(stream: DNStream): DNResourceReader; overload;

  end;

  [DNTypeName('System.Resources.ResourceReader')]
  DNResourceReader = interface(DNIResourceReader)
  ['{96EA3F6A-DD9C-3312-88CA-75AD31AFE0D8}']
  { methods } 

    procedure Close;
    procedure Dispose;
    function GetEnumerator: DNIDictionaryEnumerator;
    procedure GetResourceData(resourceName: string; out resourceType: string; out resourceData: TArray<Byte>);
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNResourceReader = class(TDNGenericImport<DNResourceReaderClass, DNResourceReader>) end;

  //-------------namespace: System.Resources----------------
  DNResourceSetClass = interface(DNObjectClass)
  ['{CA7F5056-E429-502E-B3D4-F716CD55C904}']
  { constructors } 

    {class} function init(fileName: string): DNResourceSet; overload;
    {class} function init(stream: DNStream): DNResourceSet; overload;
    {class} function init(reader: DNIResourceReader): DNResourceSet; overload;

  end;

  [DNTypeName('System.Resources.ResourceSet')]
  DNResourceSet = interface(DNIDisposable)
  ['{E1F7FEEE-9D75-361F-B751-C131770A88D1}']
  { methods } 

    procedure Close;
    procedure Dispose;
    function GetDefaultReader: DNType;
    function GetDefaultWriter: DNType;
    function GetEnumerator: DNIDictionaryEnumerator;
    function GetString(name: string): string; overload;
    function GetString(name: string; ignoreCase: Boolean): string; overload;
    function GetObject(name: string): DNObject; overload;
    function GetObject(name: string; ignoreCase: Boolean): DNObject; overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNResourceSet = class(TDNGenericImport<DNResourceSetClass, DNResourceSet>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNConditionalWeakTableClass<TKey, TValue> = interface(DNObjectClass)
  ['{BE065BB9-8258-5217-B32D-EEB89508090B}']
  { constructors } 

    {class} function init: DNConditionalWeakTable<TKey, TValue>;

  end;

  [DNTypeName('System.Runtime.CompilerServices.ConditionalWeakTable`2')]
  DNConditionalWeakTable<TKey, TValue> = interface(DNIEnumerable<DNKeyValuePair<TKey, TValue>>)
  ['{10005141-43BA-3357-BA23-C2FC1A3F5330}']
  { methods } 

    function TryGetValue(key: TKey; out value: TValue): Boolean;
    procedure Add(key: TKey; value: TValue);
    procedure AddOrUpdate(key: TKey; value: TValue);
    function Remove(key: TKey): Boolean;
    procedure Clear;
    function GetValue(key: TKey; createValueCallback: DNConditionalWeakTable_CreateValueCallback<TKey, TValue>): TValue;
    function GetOrCreateValue(key: TKey): TValue;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNConditionalWeakTable<TKey, TValue> = class(TDNGenericImport<DNConditionalWeakTableClass<TKey, TValue>, DNConditionalWeakTable<TKey, TValue>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNContractHelperClass = interface(DNObjectClass)
  ['{D0BD347D-C85B-54C1-A85F-6DF5B6781B87}']
  { static methods } 

    {class} function RaiseContractFailedEvent(failureKind: DNContractFailureKind; userMessage: string; conditionText: string; innerException: DNException): string;
    {class} procedure TriggerFailure(kind: DNContractFailureKind; displayMessage: string; userMessage: string; conditionText: string; innerException: DNException);

  end;

  [DNTypeName('System.Runtime.CompilerServices.ContractHelper')]
  DNContractHelper = interface(DNObject)
  ['{76B40208-B3AC-3BE0-AC45-78EFCA5B650B}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNContractHelper = class(TDNGenericImport<DNContractHelperClass, DNContractHelper>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNFormattableStringFactoryClass = interface(DNObjectClass)
  ['{FEF130B3-2651-541D-9680-FF4E448E1740}']
  { static methods } 

    {class} function Create(format: string; arguments: TArray<DNObject>): DNFormattableString;

  end;

  [DNTypeName('System.Runtime.CompilerServices.FormattableStringFactory')]
  DNFormattableStringFactory = interface(DNObject)
  ['{DB620556-135B-3557-B440-3B7EBF36694F}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNFormattableStringFactory = class(TDNGenericImport<DNFormattableStringFactoryClass, DNFormattableStringFactory>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsConstClass = interface(DNObjectClass)
  ['{58BD3A56-1F6D-5819-8CE4-3025FA34203F}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.IsConst')]
  DNIsConst = interface(DNObject)
  ['{5A717C2A-B5D5-3EFE-823B-7CDFB54A8257}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNIsConst = class(TDNGenericImport<DNIsConstClass, DNIsConst>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNIsVolatileClass = interface(DNObjectClass)
  ['{33C9E70B-E92B-50F1-B6AB-99BFD847169E}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.IsVolatile')]
  DNIsVolatile = interface(DNObject)
  ['{C4F56DFB-2164-3007-90A0-3E68895C065B}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNIsVolatile = class(TDNGenericImport<DNIsVolatileClass, DNIsVolatile>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNRuntimeFeatureClass = interface(DNObjectClass)
  ['{7E6CA8EB-F8AD-5733-8D0F-ED7BE9A6B6AE}']
  { static methods } 

    {class} function IsSupported(feature: string): Boolean;

  end;

  [DNTypeName('System.Runtime.CompilerServices.RuntimeFeature')]
  DNRuntimeFeature = interface(DNObject)
  ['{1C7B9D68-B804-3496-B7A2-35CBBB9D3B43}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNRuntimeFeature = class(TDNGenericImport<DNRuntimeFeatureClass, DNRuntimeFeature>)
  public const
   PortablePdb = 'PortablePdb';
  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNRuntimeHelpersClass = interface(DNObjectClass)
  ['{4947A3B0-6A35-5EC9-973F-830455C4AB62}']
  { static getter & setter } 

    {class} function get_OffsetToStringData: Int32;

  { static methods } 

    {class} function GetUninitializedObject(&type: DNType): DNObject;
    {class} procedure InitializeArray(&array: DNArray; fldHandle: DNRuntimeFieldHandle);
    {class} function GetObjectValue(obj: DNObject): DNObject;
    {class} procedure RunClassConstructor(&type: DNRuntimeTypeHandle);
    {class} procedure RunModuleConstructor(module: DNModuleHandle);
    {class} procedure PrepareMethod(method: DNRuntimeMethodHandle); overload;
    {class} procedure PrepareMethod(method: DNRuntimeMethodHandle; instantiation: TArray<DNRuntimeTypeHandle>); overload;
    {class} procedure PrepareContractedDelegate(d: DNDelegate);
    {class} procedure PrepareDelegate(d: DNDelegate);
    {class} function GetHashCode(o: DNObject): Int32; overload;
    {class} function Equals(o1: DNObject; o2: DNObject): Boolean; overload;
    {class} procedure EnsureSufficientExecutionStack;
    {class} function TryEnsureSufficientExecutionStack: Boolean;
    {class} procedure ProbeForSufficientStack;
    {class} procedure PrepareConstrainedRegions;
    {class} procedure PrepareConstrainedRegionsNoOP;
    {class} procedure ExecuteCodeWithGuaranteedCleanup(code: DNRuntimeHelpers_TryCode; backoutCode: DNRuntimeHelpers_CleanupCode; userData: DNObject);

  { static propertys } 

    {class} property OffsetToStringData: Int32 read get_OffsetToStringData;
  end;

  [DNTypeName('System.Runtime.CompilerServices.RuntimeHelpers')]
  DNRuntimeHelpers = interface(DNObject)
  ['{99C74A45-7D24-3684-9CB6-38AE64B2E030}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;
    function GetType: DNType;

  end;

  TDNRuntimeHelpers = class(TDNGenericImport<DNRuntimeHelpersClass, DNRuntimeHelpers>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNStrongBoxClass<T> = interface(DNObjectClass)
  ['{371E8463-47A3-58A4-94CD-D4B42DF6393A}']
  { constructors } 

    {class} function init: DNStrongBox<T>; overload;
    {class} function init(value: T): DNStrongBox<T>; overload;

  end;

  [DNTypeName('System.Runtime.CompilerServices.StrongBox`1')]
  DNStrongBox<T> = interface(DNIStrongBox)
  ['{092408A8-26F4-3CA6-B847-7F8D3A6FDF21}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNStrongBox<T> = class(TDNGenericImport<DNStrongBoxClass<T>, DNStrongBox<T>>) end;

  //-------------namespace: System.Runtime.ConstrainedExecution----------------
  DNCriticalFinalizerObjectClass = interface(DNObjectClass)
  ['{90EF2624-648B-58AF-8587-C18C1A625C88}']
  end;

  [DNTypeName('System.Runtime.ConstrainedExecution.CriticalFinalizerObject')]
  DNCriticalFinalizerObject = interface(DNObject)
  ['{8C76985E-D4C1-32A9-B2D5-C55E81AAC177}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNCriticalFinalizerObject = class(TDNGenericImport<DNCriticalFinalizerObjectClass, DNCriticalFinalizerObject>) end;

  //-------------namespace: Internal.Runtime.Augments----------------
  DNRuntimeThreadClass = interface(DNCriticalFinalizerObjectClass)
  ['{F8A31CD2-C638-5497-A7C0-3FF7F38F8987}']
  { static getter & setter } 

    {class} function get_CurrentThread: DNRuntimeThread;

  { static methods } 

    {class} function Create(start: DNThreadStart): DNRuntimeThread; overload;
    {class} function Create(start: DNThreadStart; maxStackSize: Int32): DNRuntimeThread; overload;
    {class} function Create(start: DNParameterizedThreadStart): DNRuntimeThread; overload;
    {class} function Create(start: DNParameterizedThreadStart; maxStackSize: Int32): DNRuntimeThread; overload;
    {class} procedure Sleep(millisecondsTimeout: Int32);
    {class} function GetCurrentProcessorId: Int32;
    {class} procedure SpinWait(iterations: Int32);
    {class} function Yield: Boolean;

  { static propertys } 

    {class} property CurrentThread: DNRuntimeThread read get_CurrentThread;
  end;

  [DNTypeName('Internal.Runtime.Augments.RuntimeThread')]
  DNRuntimeThread = interface(DNCriticalFinalizerObject)
  ['{641DFD56-85E4-3667-9FC9-64D235F109A5}']
  { getters & setters } 

    function get_IsAlive: Boolean;
    function get_IsBackground: Boolean;
    procedure set_IsBackground(value: Boolean);
    function get_IsThreadPoolThread: Boolean;
    function get_ManagedThreadId: Int32;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Priority: DNThreadPriority;
    procedure set_Priority(value: DNThreadPriority);
    function get_ThreadState: DNThreadState;

  { methods } 

    function GetApartmentState: DNApartmentState;
    function TrySetApartmentState(state: DNApartmentState): Boolean;
    procedure DisableComObjectEagerCleanup;
    procedure Interrupt;
    procedure Join; overload;
    function Join(millisecondsTimeout: Int32): Boolean; overload;
    procedure Start; overload;
    procedure Start(parameter: DNObject); overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property IsAlive: Boolean read get_IsAlive;
    property IsBackground: Boolean read get_IsBackground write set_IsBackground;
    property IsThreadPoolThread: Boolean read get_IsThreadPoolThread;
    property ManagedThreadId: Int32 read get_ManagedThreadId;
    property Name: string read get_Name write set_Name;
    property Priority: DNThreadPriority read get_Priority write set_Priority;
    property ThreadState: DNThreadState read get_ThreadState;
  end;

  TDNRuntimeThread = class(TDNGenericImport<DNRuntimeThreadClass, DNRuntimeThread>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNCriticalHandleClass = interface(DNCriticalFinalizerObjectClass)
  ['{AF5D1BB3-2939-5FFB-9E63-E0A223F174FA}']
  end;

  [DNTypeName('System.Runtime.InteropServices.CriticalHandle')]
  DNCriticalHandle = interface(DNCriticalFinalizerObject)
  ['{EF993BDC-9222-3D63-B1A8-73C586AD0EBC}']
  { getters & setters } 

    function get_IsClosed: Boolean;
    function get_IsInvalid: Boolean;

  { methods } 

    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property IsClosed: Boolean read get_IsClosed;
    property IsInvalid: Boolean read get_IsInvalid;
  end;

  TDNCriticalHandle = class(TDNGenericImport<DNCriticalHandleClass, DNCriticalHandle>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNCriticalHandleMinusOneIsInvalidClass = interface(DNCriticalHandleClass)
  ['{EB2F6E4B-BD48-5135-AD26-069D2154C0D0}']
  end;

  [DNTypeName('Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid')]
  DNCriticalHandleMinusOneIsInvalid = interface(DNCriticalHandle)
  ['{9A499A01-1BA7-3AF2-B2C4-45E6F0FDCFA7}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNCriticalHandleMinusOneIsInvalid = class(TDNGenericImport<DNCriticalHandleMinusOneIsInvalidClass, DNCriticalHandleMinusOneIsInvalid>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNCriticalHandleZeroOrMinusOneIsInvalidClass = interface(DNCriticalHandleClass)
  ['{3B4611F2-AB4E-50C9-B2FE-B2EA59A1C475}']
  end;

  [DNTypeName('Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid')]
  DNCriticalHandleZeroOrMinusOneIsInvalid = interface(DNCriticalHandle)
  ['{AA14EC2F-BAC6-3BEB-A222-85663968AF47}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNCriticalHandleZeroOrMinusOneIsInvalid = class(TDNGenericImport<DNCriticalHandleZeroOrMinusOneIsInvalidClass, DNCriticalHandleZeroOrMinusOneIsInvalid>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNSafeHandleClass = interface(DNCriticalFinalizerObjectClass)
  ['{8EA2F99E-0E0E-590F-875B-01BBEAB99A6E}']
  end;

  [DNTypeName('System.Runtime.InteropServices.SafeHandle')]
  DNSafeHandle = interface(DNCriticalFinalizerObject)
  ['{099FFC98-CEA8-3D1E-80DB-6C2D2EB41FC0}']
  { getters & setters } 

    function get_IsClosed: Boolean;
    function get_IsInvalid: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property IsClosed: Boolean read get_IsClosed;
    property IsInvalid: Boolean read get_IsInvalid;
  end;

  TDNSafeHandle = class(TDNGenericImport<DNSafeHandleClass, DNSafeHandle>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeHandleMinusOneIsInvalidClass = interface(DNSafeHandleClass)
  ['{05A7956F-F55E-5760-853D-C636A2F13D3B}']
  end;

  [DNTypeName('Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid')]
  DNSafeHandleMinusOneIsInvalid = interface(DNSafeHandle)
  ['{6AA9642F-BF82-36CB-A5D9-37DB49AA3439}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeHandleMinusOneIsInvalid = class(TDNGenericImport<DNSafeHandleMinusOneIsInvalidClass, DNSafeHandleMinusOneIsInvalid>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeHandleZeroOrMinusOneIsInvalidClass = interface(DNSafeHandleClass)
  ['{6828B658-FC8D-57F6-A32F-2026A82D5D8D}']
  end;

  [DNTypeName('Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid')]
  DNSafeHandleZeroOrMinusOneIsInvalid = interface(DNSafeHandle)
  ['{65CE325D-F0CC-3CCF-9DAF-ECA502D3023B}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeHandleZeroOrMinusOneIsInvalid = class(TDNGenericImport<DNSafeHandleZeroOrMinusOneIsInvalidClass, DNSafeHandleZeroOrMinusOneIsInvalid>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeFileHandleClass = interface(DNSafeHandleZeroOrMinusOneIsInvalidClass)
  ['{58CD0155-18B8-5FD7-92E0-EC9EB159D586}']
  { constructors } 

    {class} function init(preexistingHandle: IntPtr; ownsHandle: Boolean): DNSafeFileHandle;

  end;

  [DNTypeName('Microsoft.Win32.SafeHandles.SafeFileHandle')]
  DNSafeFileHandle = interface(DNSafeHandleZeroOrMinusOneIsInvalid)
  ['{ADD9618A-C798-3EAA-BCDA-D6B1B0E55E15}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeFileHandle = class(TDNGenericImport<DNSafeFileHandleClass, DNSafeFileHandle>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeWaitHandleClass = interface(DNSafeHandleZeroOrMinusOneIsInvalidClass)
  ['{5A297F98-F665-5A06-ADEC-17CB9E8C044D}']
  { constructors } 

    {class} function init(existingHandle: IntPtr; ownsHandle: Boolean): DNSafeWaitHandle;

  end;

  [DNTypeName('Microsoft.Win32.SafeHandles.SafeWaitHandle')]
  DNSafeWaitHandle = interface(DNSafeHandleZeroOrMinusOneIsInvalid)
  ['{6C1E601D-3394-34C0-A100-0F04461F0559}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeWaitHandle = class(TDNGenericImport<DNSafeWaitHandleClass, DNSafeWaitHandle>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNSafeBufferClass = interface(DNSafeHandleZeroOrMinusOneIsInvalidClass)
  ['{AD87CDE3-4C9E-591A-BA88-EA924A3D0F33}']
  end;

  [DNTypeName('System.Runtime.InteropServices.SafeBuffer')]
  DNSafeBuffer = interface(DNSafeHandleZeroOrMinusOneIsInvalid)
  ['{348CD6A4-921C-38BC-A595-CF01367B1211}']
  { getters & setters } 

    function get_ByteLength: UInt64;
    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    procedure Initialize(numBytes: UInt64); overload;
    procedure Initialize(numElements: UInt32; sizeOfEachElement: UInt32); overload;
    procedure AcquirePointer(out pointer: PByte);
    procedure ReleasePointer;
    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property ByteLength: UInt64 read get_ByteLength;
    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeBuffer = class(TDNGenericImport<DNSafeBufferClass, DNSafeBuffer>) end;

  //-------------namespace: System.Runtime----------------
  DNMemoryFailPointClass = interface(DNCriticalFinalizerObjectClass)
  ['{925FFD78-244A-564F-8DDF-27F22D8114EE}']
  { constructors } 

    {class} function init(sizeInMegabytes: Int32): DNMemoryFailPoint;

  end;

  [DNTypeName('System.Runtime.MemoryFailPoint')]
  DNMemoryFailPoint = interface(DNCriticalFinalizerObject)
  ['{68CF1E47-5EF8-3AC3-B149-B16F93E34CAB}']
  { methods } 

    procedure Dispose;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNMemoryFailPoint = class(TDNGenericImport<DNMemoryFailPointClass, DNMemoryFailPoint>) end;

  //-------------namespace: System.Runtime.ExceptionServices----------------
  DNExceptionDispatchInfoClass = interface(DNObjectClass)
  ['{81EBFF4C-F7A0-5997-8052-D5912E67147C}']
  { static methods } 

    {class} function Capture(source: DNException): DNExceptionDispatchInfo;
    {class} procedure Throw(source: DNException); overload;

  end;

  [DNTypeName('System.Runtime.ExceptionServices.ExceptionDispatchInfo')]
  DNExceptionDispatchInfo = interface(DNObject)
  ['{11A19FC3-2F84-3AEE-9BB0-8DF68E3AB67A}']
  { getters & setters } 

    function get_SourceException: DNException;

  { methods } 

    procedure Throw; overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property SourceException: DNException read get_SourceException;
  end;

  TDNExceptionDispatchInfo = class(TDNGenericImport<DNExceptionDispatchInfoClass, DNExceptionDispatchInfo>) end;

  //-------------namespace: System.Runtime----------------
  DNGCSettingsClass = interface(DNObjectClass)
  ['{FFC88831-D4EE-51E1-AF09-84CF69C162CA}']
  { static getter & setter } 

    {class} function get_LatencyMode: DNGCLatencyMode;
    {class} procedure set_LatencyMode(value: DNGCLatencyMode);
    {class} function get_LargeObjectHeapCompactionMode: DNGCLargeObjectHeapCompactionMode;
    {class} procedure set_LargeObjectHeapCompactionMode(value: DNGCLargeObjectHeapCompactionMode);
    {class} function get_IsServerGC: Boolean;

  { static propertys } 

    {class} property LatencyMode: DNGCLatencyMode read get_LatencyMode write set_LatencyMode;
    {class} property LargeObjectHeapCompactionMode: DNGCLargeObjectHeapCompactionMode read get_LargeObjectHeapCompactionMode write set_LargeObjectHeapCompactionMode;
    {class} property IsServerGC: Boolean read get_IsServerGC;
  end;

  [DNTypeName('System.Runtime.GCSettings')]
  DNGCSettings = interface(DNObject)
  ['{1BF9AEF9-2653-3176-AEA6-2C55EE142BA1}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNGCSettings = class(TDNGenericImport<DNGCSettingsClass, DNGCSettings>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNBStrWrapperClass = interface(DNObjectClass)
  ['{C621B366-92BC-5AEC-9D60-B6E87C36507C}']
  { constructors } 

    {class} function init(value: string): DNBStrWrapper; overload;
    {class} function init(value: DNObject): DNBStrWrapper; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.BStrWrapper')]
  DNBStrWrapper = interface(DNObject)
  ['{0644FF3E-06F1-3813-A52E-4743D2726A53}']
  { getters & setters } 

    function get_WrappedObject: string;

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property WrappedObject: string read get_WrappedObject;
  end;

  TDNBStrWrapper = class(TDNGenericImport<DNBStrWrapperClass, DNBStrWrapper>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComEventsHelperClass = interface(DNObjectClass)
  ['{212329F4-79EA-5CAA-913D-6BF56BD5C7F4}']
  { static methods } 

    {class} procedure Combine(rcw: DNObject; iid: DNGuid; &dispid: Int32; d: DNDelegate);
    {class} function Remove(rcw: DNObject; iid: DNGuid; &dispid: Int32; d: DNDelegate): DNDelegate;

  end;

  [DNTypeName('System.Runtime.InteropServices.ComEventsHelper')]
  DNComEventsHelper = interface(DNObject)
  ['{C1DB5ABF-2F9C-3F65-940B-BFED05D04998}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNComEventsHelper = class(TDNGenericImport<DNComEventsHelperClass, DNComEventsHelper>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNCurrencyWrapperClass = interface(DNObjectClass)
  ['{97759AAC-84FB-596F-A933-9C4AF249CC14}']
  { constructors } 

    {class} function init(obj: DNDecimal): DNCurrencyWrapper; overload;
    {class} function init(obj: DNObject): DNCurrencyWrapper; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.CurrencyWrapper')]
  DNCurrencyWrapper = interface(DNObject)
  ['{63FB2922-BDCA-3346-B410-3D28ECE42FFF}']
  { getters & setters } 

    function get_WrappedObject: DNDecimal;

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property WrappedObject: DNDecimal read get_WrappedObject;
  end;

  TDNCurrencyWrapper = class(TDNGenericImport<DNCurrencyWrapperClass, DNCurrencyWrapper>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNDispatchWrapperClass = interface(DNObjectClass)
  ['{35196C58-A384-5D7A-8ECE-1D5B491F2802}']
  { constructors } 

    {class} function init(obj: DNObject): DNDispatchWrapper;

  end;

  [DNTypeName('System.Runtime.InteropServices.DispatchWrapper')]
  DNDispatchWrapper = interface(DNObject)
  ['{573CD622-6000-3A84-8A11-8317266D9857}']
  { getters & setters } 

    function get_WrappedObject: DNObject;

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property WrappedObject: DNObject read get_WrappedObject;
  end;

  TDNDispatchWrapper = class(TDNGenericImport<DNDispatchWrapperClass, DNDispatchWrapper>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNErrorWrapperClass = interface(DNObjectClass)
  ['{5E2D3ED5-1EC0-52B2-9AD8-37163EC621AC}']
  { constructors } 

    {class} function init(errorCode: Int32): DNErrorWrapper; overload;
    {class} function init(errorCode: DNObject): DNErrorWrapper; overload;
    {class} function init(e: DNException): DNErrorWrapper; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.ErrorWrapper')]
  DNErrorWrapper = interface(DNObject)
  ['{B7365201-4A4F-3EB8-936C-14905BD7C514}']
  { getters & setters } 

    function get_ErrorCode: Int32;

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property ErrorCode: Int32 read get_ErrorCode;
  end;

  TDNErrorWrapper = class(TDNGenericImport<DNErrorWrapperClass, DNErrorWrapper>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNMarshalClass = interface(DNObjectClass)
  ['{0EA65541-D63E-5AE9-9DBA-0B04BC119623}']
  { static fields getter & setter } 

   function __fakeFieldGet_SystemDefaultCharSize: Int32;
   function __fakeFieldGet_SystemMaxDBCSCharSize: Int32;

  { static fields } 

    {class} property SystemDefaultCharSize: Int32 read __fakeFieldGet_SystemDefaultCharSize;
    {class} property SystemMaxDBCSCharSize: Int32 read __fakeFieldGet_SystemMaxDBCSCharSize;

  { static methods } 

    {class} function PtrToStringAnsi(ptr: IntPtr): string; overload;
    {class} function PtrToStringAnsi(ptr: IntPtr; len: Int32): string; overload;
    {class} function PtrToStringUni(ptr: IntPtr; len: Int32): string; overload;
    {class} function PtrToStringAuto(ptr: IntPtr; len: Int32): string; overload;
    {class} function PtrToStringUni(ptr: IntPtr): string; overload;
    {class} function PtrToStringAuto(ptr: IntPtr): string; overload;
    {class} function PtrToStringUTF8(ptr: IntPtr): string; overload;
    {class} function PtrToStringUTF8(ptr: IntPtr; byteLen: Int32): string; overload;
    {class} function SizeOf(structure: DNObject): Int32; overload;
    {class} function SizeOf(t: DNType): Int32; overload;
    {class} function OffsetOf(t: DNType; fieldName: string): IntPtr; overload;
    {class} function UnsafeAddrOfPinnedArrayElement(arr: DNArray; index: Int32): IntPtr; overload;
    {class} procedure Copy(source: TArray<Int32>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    {class} procedure Copy(source: TArray<Char>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    {class} procedure Copy(source: TArray<Int16>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    {class} procedure Copy(source: TArray<Int64>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    {class} procedure Copy(source: TArray<Single>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    {class} procedure Copy(source: TArray<Double>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    {class} procedure Copy(source: TArray<Byte>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    {class} procedure Copy(source: TArray<IntPtr>; startIndex: Int32; destination: IntPtr; length: Int32); overload;
    {class} procedure Copy(source: IntPtr; destination: TArray<Int32>; startIndex: Int32; length: Int32); overload;
    {class} procedure Copy(source: IntPtr; destination: TArray<Char>; startIndex: Int32; length: Int32); overload;
    {class} procedure Copy(source: IntPtr; destination: TArray<Int16>; startIndex: Int32; length: Int32); overload;
    {class} procedure Copy(source: IntPtr; destination: TArray<Int64>; startIndex: Int32; length: Int32); overload;
    {class} procedure Copy(source: IntPtr; destination: TArray<Single>; startIndex: Int32; length: Int32); overload;
    {class} procedure Copy(source: IntPtr; destination: TArray<Double>; startIndex: Int32; length: Int32); overload;
    {class} procedure Copy(source: IntPtr; destination: TArray<Byte>; startIndex: Int32; length: Int32); overload;
    {class} procedure Copy(source: IntPtr; destination: TArray<IntPtr>; startIndex: Int32; length: Int32); overload;
    {class} function ReadByte(ptr: DNObject; ofs: Int32): Byte; overload;
    {class} function ReadByte(ptr: IntPtr; ofs: Int32): Byte; overload;
    {class} function ReadByte(ptr: IntPtr): Byte; overload;
    {class} function ReadInt16(ptr: DNObject; ofs: Int32): Int16; overload;
    {class} function ReadInt16(ptr: IntPtr; ofs: Int32): Int16; overload;
    {class} function ReadInt16(ptr: IntPtr): Int16; overload;
    {class} function ReadInt32(ptr: DNObject; ofs: Int32): Int32; overload;
    {class} function ReadInt32(ptr: IntPtr; ofs: Int32): Int32; overload;
    {class} function ReadInt32(ptr: IntPtr): Int32; overload;
    {class} function ReadIntPtr(ptr: DNObject; ofs: Int32): IntPtr; overload;
    {class} function ReadIntPtr(ptr: IntPtr; ofs: Int32): IntPtr; overload;
    {class} function ReadIntPtr(ptr: IntPtr): IntPtr; overload;
    {class} function ReadInt64([in]ptr: DNObject; ofs: Int32): Int64; overload;
    {class} function ReadInt64(ptr: IntPtr; ofs: Int32): Int64; overload;
    {class} function ReadInt64(ptr: IntPtr): Int64; overload;
    {class} procedure WriteByte(ptr: IntPtr; ofs: Int32; val: Byte); overload;
    {class} procedure WriteByte(ptr: DNObject; ofs: Int32; val: Byte); overload;
    {class} procedure WriteByte(ptr: IntPtr; val: Byte); overload;
    {class} procedure WriteInt16(ptr: IntPtr; ofs: Int32; val: Int16); overload;
    {class} procedure WriteInt16(ptr: DNObject; ofs: Int32; val: Int16); overload;
    {class} procedure WriteInt16(ptr: IntPtr; val: Int16); overload;
    {class} procedure WriteInt16(ptr: IntPtr; ofs: Int32; val: Char); overload;
    {class} procedure WriteInt16([in][out]ptr: DNObject; ofs: Int32; val: Char); overload;
    {class} procedure WriteInt16(ptr: IntPtr; val: Char); overload;
    {class} procedure WriteInt32(ptr: IntPtr; ofs: Int32; val: Int32); overload;
    {class} procedure WriteInt32(ptr: DNObject; ofs: Int32; val: Int32); overload;
    {class} procedure WriteInt32(ptr: IntPtr; val: Int32); overload;
    {class} procedure WriteIntPtr(ptr: IntPtr; ofs: Int32; val: IntPtr); overload;
    {class} procedure WriteIntPtr(ptr: DNObject; ofs: Int32; val: IntPtr); overload;
    {class} procedure WriteIntPtr(ptr: IntPtr; val: IntPtr); overload;
    {class} procedure WriteInt64(ptr: IntPtr; ofs: Int32; val: Int64); overload;
    {class} procedure WriteInt64(ptr: DNObject; ofs: Int32; val: Int64); overload;
    {class} procedure WriteInt64(ptr: IntPtr; val: Int64); overload;
    {class} function GetLastWin32Error: Int32;
    {class} function GetHRForLastWin32Error: Int32;
    {class} procedure Prelink(m: DNMethodInfo);
    {class} procedure PrelinkAll(c: DNType);
    {class} function GetExceptionPointers: IntPtr;
    {class} function GetExceptionCode: Int32;
    {class} procedure StructureToPtr(structure: DNObject; ptr: IntPtr; fDeleteOld: Boolean); overload;
    {class} procedure PtrToStructure(ptr: IntPtr; structure: DNObject); overload;
    {class} function PtrToStructure(ptr: IntPtr; structureType: DNType): DNObject; overload;
    {class} procedure DestroyStructure(ptr: IntPtr; structuretype: DNType); overload;
    {class} function GetHINSTANCE(m: DNModule): IntPtr;
    {class} procedure ThrowExceptionForHR(errorCode: Int32); overload;
    {class} procedure ThrowExceptionForHR(errorCode: Int32; errorInfo: IntPtr); overload;
    {class} function GetExceptionForHR(errorCode: Int32): DNException; overload;
    {class} function GetExceptionForHR(errorCode: Int32; errorInfo: IntPtr): DNException; overload;
    {class} function AllocHGlobal(cb: IntPtr): IntPtr; overload;
    {class} function AllocHGlobal(cb: Int32): IntPtr; overload;
    {class} procedure FreeHGlobal(hglobal: IntPtr);
    {class} function ReAllocHGlobal(pv: IntPtr; cb: IntPtr): IntPtr;
    {class} function StringToHGlobalAnsi(s: string): IntPtr;
    {class} function StringToHGlobalUni(s: string): IntPtr;
    {class} function StringToHGlobalAuto(s: string): IntPtr;
    {class} function GetHRForException(e: DNException): Int32;
    {class} function GetTypeInfoName(typeInfo: DNITypeInfo): string;
    {class} function GetTypeFromCLSID(clsid: DNGuid): DNType;
    {class} function GetIUnknownForObject(o: DNObject): IntPtr;
    {class} function GetIDispatchForObject(o: DNObject): IntPtr;
    {class} function GetComInterfaceForObject(o: DNObject; T: DNType): IntPtr; overload;
    {class} function GetComInterfaceForObject(o: DNObject; T: DNType; mode: DNCustomQueryInterfaceMode): IntPtr; overload;
    {class} function GetObjectForIUnknown(pUnk: IntPtr): DNObject;
    {class} function GetUniqueObjectForIUnknown(unknown: IntPtr): DNObject;
    {class} function GetTypedObjectForIUnknown(pUnk: IntPtr; t: DNType): DNObject;
    {class} function CreateAggregatedObject(pOuter: IntPtr; o: DNObject): IntPtr; overload;
    {class} procedure CleanupUnusedObjectsInCurrentContext;
    {class} function AreComObjectsAvailableForCleanup: Boolean;
    {class} function IsComObject(o: DNObject): Boolean;
    {class} function AllocCoTaskMem(cb: Int32): IntPtr;
    {class} function StringToCoTaskMemUni(s: string): IntPtr;
    {class} function StringToCoTaskMemUTF8(s: string): IntPtr;
    {class} function StringToCoTaskMemAuto(s: string): IntPtr;
    {class} function StringToCoTaskMemAnsi(s: string): IntPtr;
    {class} procedure FreeCoTaskMem(ptr: IntPtr);
    {class} function ReAllocCoTaskMem(pv: IntPtr; cb: Int32): IntPtr;
    {class} procedure FreeBSTR(ptr: IntPtr);
    {class} function StringToBSTR(s: string): IntPtr;
    {class} function PtrToStringBSTR(ptr: IntPtr): string;
    {class} function ReleaseComObject(o: DNObject): Int32;
    {class} function FinalReleaseComObject(o: DNObject): Int32;
    {class} function GetComObjectData(obj: DNObject; key: DNObject): DNObject;
    {class} function SetComObjectData(obj: DNObject; key: DNObject; data: DNObject): Boolean;
    {class} function CreateWrapperOfType(o: DNObject; t: DNType): DNObject; overload;
    {class} function QueryInterface(pUnk: IntPtr; out iid: DNGuid; out ppv: IntPtr): Int32;
    {class} function AddRef(pUnk: IntPtr): Int32;
    {class} function Release(pUnk: IntPtr): Int32;
    {class} procedure GetNativeVariantForObject(obj: DNObject; pDstNativeVariant: IntPtr); overload;
    {class} function GetObjectForNativeVariant(pSrcNativeVariant: IntPtr): DNObject;
    {class} function GetObjectsForNativeVariants(aSrcNativeVariant: IntPtr; cVars: Int32): TArray<DNObject>;
    {class} function GetStartComSlot(t: DNType): Int32;
    {class} function GenerateGuidForType(&type: DNType): DNGuid;
    {class} function GenerateProgIdForType(&type: DNType): string;
    {class} function BindToMoniker(monikerName: string): DNObject;
    {class} procedure ChangeWrapperHandleStrength(otp: DNObject; fIsWeak: Boolean);
    {class} function GetDelegateForFunctionPointer(ptr: IntPtr; t: DNType): DNDelegate; overload;
    {class} function GetFunctionPointerForDelegate(d: DNDelegate): IntPtr; overload;
    {class} function SecureStringToBSTR(s: DNSecureString): IntPtr;
    {class} function SecureStringToCoTaskMemAnsi(s: DNSecureString): IntPtr;
    {class} function SecureStringToCoTaskMemUnicode(s: DNSecureString): IntPtr;
    {class} procedure ZeroFreeBSTR(s: IntPtr);
    {class} procedure ZeroFreeCoTaskMemAnsi(s: IntPtr);
    {class} procedure ZeroFreeCoTaskMemUnicode(s: IntPtr);
    {class} procedure ZeroFreeCoTaskMemUTF8(s: IntPtr);
    {class} function SecureStringToGlobalAllocAnsi(s: DNSecureString): IntPtr;
    {class} function SecureStringToGlobalAllocUnicode(s: DNSecureString): IntPtr;
    {class} procedure ZeroFreeGlobalAllocAnsi(s: IntPtr);
    {class} procedure ZeroFreeGlobalAllocUnicode(s: IntPtr);

  end;

  [DNTypeName('System.Runtime.InteropServices.Marshal')]
  DNMarshal = interface(DNObject)
  ['{0D50E0CE-DA9A-3B5B-854E-2D7F94E20D50}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNMarshal = class(TDNGenericImport<DNMarshalClass, DNMarshal>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNMemoryMarshalClass = interface(DNObjectClass)
  ['{8B564298-27DD-5F53-B4F1-0E3CF1A527FE}']
  { static methods } 

    {class} function TryGetString(memory: DNReadOnlyMemory<Char>; out text: string; out start: Int32; out length: Int32): Boolean;

  end;

  [DNTypeName('System.Runtime.InteropServices.MemoryMarshal')]
  DNMemoryMarshal = interface(DNObject)
  ['{FC51913A-5A82-3D34-BDAE-92DC4A8F5A3A}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNMemoryMarshal = class(TDNGenericImport<DNMemoryMarshalClass, DNMemoryMarshal>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNUnknownWrapperClass = interface(DNObjectClass)
  ['{EEA971B9-C5D8-5A37-B972-C38FBF7DBEF6}']
  { constructors } 

    {class} function init(obj: DNObject): DNUnknownWrapper;

  end;

  [DNTypeName('System.Runtime.InteropServices.UnknownWrapper')]
  DNUnknownWrapper = interface(DNObject)
  ['{1104ADEF-0B94-3BAB-A733-2509F602AE65}']
  { getters & setters } 

    function get_WrappedObject: DNObject;

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property WrappedObject: DNObject read get_WrappedObject;
  end;

  TDNUnknownWrapper = class(TDNGenericImport<DNUnknownWrapperClass, DNUnknownWrapper>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNVariantWrapperClass = interface(DNObjectClass)
  ['{2A990577-3889-5DB0-AA87-ED23CAF2E609}']
  { constructors } 

    {class} function init(obj: DNObject): DNVariantWrapper;

  end;

  [DNTypeName('System.Runtime.InteropServices.VariantWrapper')]
  DNVariantWrapper = interface(DNObject)
  ['{A681B31C-DA6C-3F32-9753-524EA82C4E37}']
  { getters & setters } 

    function get_WrappedObject: DNObject;

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property WrappedObject: DNObject read get_WrappedObject;
  end;

  TDNVariantWrapper = class(TDNGenericImport<DNVariantWrapperClass, DNVariantWrapper>) end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  DNEventRegistrationTokenTableClass<T> = interface(DNObjectClass)
  ['{1B526CBA-7BC6-5B02-80EF-5A15CFA402AD}']
  { constructors } 

    {class} function init: DNEventRegistrationTokenTable<T>;

  { static methods } 

    {class} function GetOrCreateEventRegistrationTokenTable(out refEventTable: DNEventRegistrationTokenTable<T>): DNEventRegistrationTokenTable<T>;

  end;

  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1')]
  DNEventRegistrationTokenTable<T> = interface(DNObject)
  ['{8EB9601A-5B6E-3A3F-BE01-45537506D4F3}']
  { getters & setters } 

    function get_InvocationList: T;
    procedure set_InvocationList(value: T);

  { methods } 

    function AddEventHandler(handler: T): DNEventRegistrationToken;
    procedure RemoveEventHandler(token: DNEventRegistrationToken); overload;
    procedure RemoveEventHandler(handler: T); overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property InvocationList: T read get_InvocationList write set_InvocationList;
  end;

  TDNEventRegistrationTokenTable<T> = class(TDNGenericImport<DNEventRegistrationTokenTableClass<T>, DNEventRegistrationTokenTable<T>>) end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  DNWindowsRuntimeMarshalClass = interface(DNObjectClass)
  ['{10352EE7-8FFC-505E-82B4-BF14E599E582}']
  { static methods } 

    {class} procedure RemoveAllEventHandlers(removeMethod: DNAction<DNEventRegistrationToken>);
    {class} function GetActivationFactory(&type: DNType): DNIActivationFactory;
    {class} function StringToHString(s: string): IntPtr;
    {class} function PtrToStringHString(ptr: IntPtr): string;
    {class} procedure FreeHString(ptr: IntPtr);

  end;

  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal')]
  DNWindowsRuntimeMarshal = interface(DNObject)
  ['{5253E422-0A74-30BB-A577-1EB918AB5586}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNWindowsRuntimeMarshal = class(TDNGenericImport<DNWindowsRuntimeMarshalClass, DNWindowsRuntimeMarshal>) end;

  //-------------namespace: System.Runtime.Intrinsics.Arm.Arm64----------------
  DNArm64_AesClass = interface(DNObjectClass)
  ['{F8ACC538-6687-5BD9-B091-0F5CFCA7D7BC}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function Decrypt(value: DNVector128<Byte>; roundKey: DNVector128<Byte>): DNVector128<Byte>;
    {class} function Encrypt(value: DNVector128<Byte>; roundKey: DNVector128<Byte>): DNVector128<Byte>;
    {class} function MixColumns(value: DNVector128<Byte>): DNVector128<Byte>;
    {class} function InverseMixColumns(value: DNVector128<Byte>): DNVector128<Byte>;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.Arm.Arm64.Aes')]
  DNArm64_Aes = interface(DNObject)
  ['{03FAFCD0-3261-335A-97BE-8B26EAD854C8}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNArm64_Aes = class(TDNGenericImport<DNArm64_AesClass, DNArm64_Aes>) end;

  //-------------namespace: System.Runtime.Intrinsics.Arm.Arm64----------------
  DNBaseClass = interface(DNObjectClass)
  ['{32FF9796-183D-5755-B376-68A08194B740}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function LeadingSignCount(value: Int32): Int32; overload;
    {class} function LeadingSignCount(value: Int64): Int32; overload;
    {class} function LeadingZeroCount(value: Int32): Int32; overload;
    {class} function LeadingZeroCount(value: UInt32): Int32; overload;
    {class} function LeadingZeroCount(value: Int64): Int32; overload;
    {class} function LeadingZeroCount(value: UInt64): Int32; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.Arm.Arm64.Base')]
  DNBase = interface(DNObject)
  ['{2F0E073B-B531-3809-B593-C31F45F720D3}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNBase = class(TDNGenericImport<DNBaseClass, DNBase>) end;

  //-------------namespace: System.Runtime.Intrinsics.Arm.Arm64----------------
  DNSha1Class = interface(DNObjectClass)
  ['{F0EAC0B4-59B7-58F7-9C42-F63431A34CE7}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function HashChoose(hash_abcd: DNVector128<UInt32>; hash_e: UInt32; wk: DNVector128<UInt32>): DNVector128<UInt32>;
    {class} function HashMajority(hash_abcd: DNVector128<UInt32>; hash_e: UInt32; wk: DNVector128<UInt32>): DNVector128<UInt32>;
    {class} function HashParity(hash_abcd: DNVector128<UInt32>; hash_e: UInt32; wk: DNVector128<UInt32>): DNVector128<UInt32>;
    {class} function FixedRotate(hash_e: UInt32): UInt32;
    {class} function SchedulePart1(w0_3: DNVector128<UInt32>; w4_7: DNVector128<UInt32>; w8_11: DNVector128<UInt32>): DNVector128<UInt32>;
    {class} function SchedulePart2(tw0_3: DNVector128<UInt32>; w12_15: DNVector128<UInt32>): DNVector128<UInt32>;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.Arm.Arm64.Sha1')]
  DNSha1 = interface(DNObject)
  ['{E33C0ACB-C687-33EB-BF46-A0A438713FAF}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNSha1 = class(TDNGenericImport<DNSha1Class, DNSha1>) end;

  //-------------namespace: System.Runtime.Intrinsics.Arm.Arm64----------------
  DNSha256Class = interface(DNObjectClass)
  ['{0BA20131-E66A-5AA3-9D9E-CEDB5CC3CFB8}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function HashLower(hash_abcd: DNVector128<UInt32>; hash_efgh: DNVector128<UInt32>; wk: DNVector128<UInt32>): DNVector128<UInt32>;
    {class} function HashUpper(hash_efgh: DNVector128<UInt32>; hash_abcd: DNVector128<UInt32>; wk: DNVector128<UInt32>): DNVector128<UInt32>;
    {class} function SchedulePart1(w0_3: DNVector128<UInt32>; w4_7: DNVector128<UInt32>): DNVector128<UInt32>;
    {class} function SchedulePart2(w0_3: DNVector128<UInt32>; w8_11: DNVector128<UInt32>; w12_15: DNVector128<UInt32>): DNVector128<UInt32>;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.Arm.Arm64.Sha256')]
  DNSha256 = interface(DNObject)
  ['{26291DCD-F3D5-33A2-AAF1-38E976563187}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNSha256 = class(TDNGenericImport<DNSha256Class, DNSha256>) end;

  //-------------namespace: System.Runtime.Intrinsics.Arm.Arm64----------------
  DNSimdClass = interface(DNObjectClass)
  ['{0CBE54C3-7E84-5833-AB67-FF19D99C9CDD}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function Abs(value: DNVector64<SByte>): DNVector64<Byte>; overload;
    {class} function Abs(value: DNVector64<Int16>): DNVector64<UInt16>; overload;
    {class} function Abs(value: DNVector64<Int32>): DNVector64<UInt32>; overload;
    {class} function Abs(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function Abs(value: DNVector128<SByte>): DNVector128<Byte>; overload;
    {class} function Abs(value: DNVector128<Int16>): DNVector128<UInt16>; overload;
    {class} function Abs(value: DNVector128<Int32>): DNVector128<UInt32>; overload;
    {class} function Abs(value: DNVector128<Int64>): DNVector128<UInt64>; overload;
    {class} function Abs(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function Abs(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function Divide(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function Divide(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function Divide(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function LeadingSignCount(value: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function LeadingSignCount(value: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function LeadingSignCount(value: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function LeadingSignCount(value: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function LeadingSignCount(value: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function LeadingSignCount(value: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function LeadingZeroCount(value: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function LeadingZeroCount(value: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function LeadingZeroCount(value: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function LeadingZeroCount(value: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function LeadingZeroCount(value: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function LeadingZeroCount(value: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function LeadingZeroCount(value: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function LeadingZeroCount(value: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function LeadingZeroCount(value: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function LeadingZeroCount(value: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function LeadingZeroCount(value: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function LeadingZeroCount(value: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function Max(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function Max(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function Max(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function Max(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function Max(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function Max(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function Max(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function Max(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function Max(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function Max(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function Max(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function Max(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function Max(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function Max(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function Max(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function Min(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function Min(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function Min(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function Min(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function Min(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function Min(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function Min(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function Min(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function Min(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function Min(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function Min(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function Min(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function Min(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function Min(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function Min(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function Multiply(left: DNVector64<Byte>; right: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function Multiply(left: DNVector64<SByte>; right: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function Multiply(left: DNVector64<UInt16>; right: DNVector64<UInt16>): DNVector64<UInt16>; overload;
    {class} function Multiply(left: DNVector64<Int16>; right: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function Multiply(left: DNVector64<UInt32>; right: DNVector64<UInt32>): DNVector64<UInt32>; overload;
    {class} function Multiply(left: DNVector64<Int32>; right: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function Multiply(left: DNVector64<Single>; right: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function Multiply(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function Multiply(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function Multiply(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function Multiply(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function Multiply(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function Multiply(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function Multiply(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function Multiply(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function Negate(value: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function Negate(value: DNVector64<Int16>): DNVector64<Int16>; overload;
    {class} function Negate(value: DNVector64<Int32>): DNVector64<Int32>; overload;
    {class} function Negate(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function Negate(value: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function Negate(value: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function Negate(value: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function Negate(value: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function Negate(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function Negate(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function PopCount(value: DNVector64<Byte>): DNVector64<Byte>; overload;
    {class} function PopCount(value: DNVector64<SByte>): DNVector64<SByte>; overload;
    {class} function PopCount(value: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function PopCount(value: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function Sqrt(value: DNVector64<Single>): DNVector64<Single>; overload;
    {class} function Sqrt(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function Sqrt(value: DNVector128<Double>): DNVector128<Double>; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.Arm.Arm64.Simd')]
  DNSimd = interface(DNObject)
  ['{64945533-D969-3E9E-9E77-7719E0506BF7}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNSimd = class(TDNGenericImport<DNSimdClass, DNSimd>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNX86_AesClass = interface(DNObjectClass)
  ['{AA725E76-8F59-5B4C-AC46-1C19BDE82B78}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function Decrypt(value: DNVector128<SByte>; roundKey: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function Decrypt(value: DNVector128<Byte>; roundKey: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function DecryptLast(value: DNVector128<SByte>; roundKey: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function DecryptLast(value: DNVector128<Byte>; roundKey: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function Encrypt(value: DNVector128<SByte>; roundKey: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function Encrypt(value: DNVector128<Byte>; roundKey: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function EncryptLast(value: DNVector128<SByte>; roundKey: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function EncryptLast(value: DNVector128<Byte>; roundKey: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function InvisibleMixColumn(value: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function InvisibleMixColumn(value: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function KeygenAssist(value: DNVector128<SByte>; control: Byte): DNVector128<SByte>; overload;
    {class} function KeygenAssist(value: DNVector128<Byte>; control: Byte): DNVector128<Byte>; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Aes')]
  DNX86_Aes = interface(DNObject)
  ['{45EF48C9-6529-3B87-912A-FB55DA309415}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNX86_Aes = class(TDNGenericImport<DNX86_AesClass, DNX86_Aes>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNAvxClass = interface(DNObjectClass)
  ['{C546AED5-B351-53E5-921F-EA1409F659DC}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function Max(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function Min(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function Min(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function MoveMask(value: DNVector256<Single>): Int32; overload;
    {class} function MoveMask(value: DNVector256<Double>): Int32; overload;
    {class} function Multiply(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function Multiply(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function &Or(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function &Or(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function Permute(value: DNVector128<Single>; control: Byte): DNVector128<Single>; overload;
    {class} function Permute(value: DNVector128<Double>; control: Byte): DNVector128<Double>; overload;
    {class} function Permute(value: DNVector256<Single>; control: Byte): DNVector256<Single>; overload;
    {class} function Permute(value: DNVector256<Double>; control: Byte): DNVector256<Double>; overload;
    {class} function PermuteVar(left: DNVector128<Single>; mask: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function PermuteVar(left: DNVector128<Double>; mask: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function PermuteVar(left: DNVector256<Single>; mask: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function PermuteVar(left: DNVector256<Double>; mask: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function Reciprocal(value: DNVector256<Single>): DNVector256<Single>;
    {class} function ReciprocalSqrt(value: DNVector256<Single>): DNVector256<Single>;
    {class} function RoundToNearestInteger(value: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function RoundToNegativeInfinity(value: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function RoundToPositiveInfinity(value: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function RoundToZero(value: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function RoundCurrentDirection(value: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function RoundToNearestInteger(value: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function RoundToNegativeInfinity(value: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function RoundToPositiveInfinity(value: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function RoundToZero(value: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function RoundCurrentDirection(value: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function SetVector256(e31: SByte; e30: SByte; e29: SByte; e28: SByte; e27: SByte; e26: SByte; e25: SByte; e24: SByte; e23: SByte; e22: SByte; e21: SByte; e20: SByte; e19: SByte; e18: SByte; e17: SByte; e16: SByte; e15: SByte; e14: SByte; e13: SByte; e12: SByte; e11: SByte; e10: SByte; e9: SByte; e8: SByte; e7: SByte; e6: SByte; e5: SByte; e4: SByte; e3: SByte; e2: SByte; e1: SByte; e0: SByte): DNVector256<SByte>; overload;
    {class} function SetVector256(e31: Byte; e30: Byte; e29: Byte; e28: Byte; e27: Byte; e26: Byte; e25: Byte; e24: Byte; e23: Byte; e22: Byte; e21: Byte; e20: Byte; e19: Byte; e18: Byte; e17: Byte; e16: Byte; e15: Byte; e14: Byte; e13: Byte; e12: Byte; e11: Byte; e10: Byte; e9: Byte; e8: Byte; e7: Byte; e6: Byte; e5: Byte; e4: Byte; e3: Byte; e2: Byte; e1: Byte; e0: Byte): DNVector256<Byte>; overload;
    {class} function SetVector256(e15: Int16; e14: Int16; e13: Int16; e12: Int16; e11: Int16; e10: Int16; e9: Int16; e8: Int16; e7: Int16; e6: Int16; e5: Int16; e4: Int16; e3: Int16; e2: Int16; e1: Int16; e0: Int16): DNVector256<Int16>; overload;
    {class} function SetVector256(e15: UInt16; e14: UInt16; e13: UInt16; e12: UInt16; e11: UInt16; e10: UInt16; e9: UInt16; e8: UInt16; e7: UInt16; e6: UInt16; e5: UInt16; e4: UInt16; e3: UInt16; e2: UInt16; e1: UInt16; e0: UInt16): DNVector256<UInt16>; overload;
    {class} function SetVector256(e7: Int32; e6: Int32; e5: Int32; e4: Int32; e3: Int32; e2: Int32; e1: Int32; e0: Int32): DNVector256<Int32>; overload;
    {class} function SetVector256(e7: UInt32; e6: UInt32; e5: UInt32; e4: UInt32; e3: UInt32; e2: UInt32; e1: UInt32; e0: UInt32): DNVector256<UInt32>; overload;
    {class} function SetVector256(e3: Int64; e2: Int64; e1: Int64; e0: Int64): DNVector256<Int64>; overload;
    {class} function SetVector256(e3: UInt64; e2: UInt64; e1: UInt64; e0: UInt64): DNVector256<UInt64>; overload;
    {class} function SetVector256(e7: Single; e6: Single; e5: Single; e4: Single; e3: Single; e2: Single; e1: Single; e0: Single): DNVector256<Single>; overload;
    {class} function SetVector256(e3: Double; e2: Double; e1: Double; e0: Double): DNVector256<Double>; overload;
    {class} function Shuffle(value: DNVector256<Single>; right: DNVector256<Single>; control: Byte): DNVector256<Single>; overload;
    {class} function Shuffle(value: DNVector256<Double>; right: DNVector256<Double>; control: Byte): DNVector256<Double>; overload;
    {class} function Sqrt(value: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function Sqrt(value: DNVector256<Double>): DNVector256<Double>; overload;
    {class} procedure StoreAligned(address: PSByte; source: DNVector256<SByte>); overload;
    {class} procedure StoreAligned(address: PByte; source: DNVector256<Byte>); overload;
    {class} procedure StoreAligned(address: PInt16; source: DNVector256<Int16>); overload;
    {class} procedure StoreAligned(address: PUInt16; source: DNVector256<UInt16>); overload;
    {class} procedure StoreAligned(address: PInt32; source: DNVector256<Int32>); overload;
    {class} procedure StoreAligned(address: PUInt32; source: DNVector256<UInt32>); overload;
    {class} procedure StoreAligned(address: PInt64; source: DNVector256<Int64>); overload;
    {class} procedure StoreAligned(address: PUInt64; source: DNVector256<UInt64>); overload;
    {class} procedure StoreAligned(address: PSingle; source: DNVector256<Single>); overload;
    {class} procedure StoreAligned(address: PDouble; source: DNVector256<Double>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PSByte; source: DNVector256<SByte>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PByte; source: DNVector256<Byte>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PInt16; source: DNVector256<Int16>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PUInt16; source: DNVector256<UInt16>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PInt32; source: DNVector256<Int32>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PUInt32; source: DNVector256<UInt32>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PInt64; source: DNVector256<Int64>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PUInt64; source: DNVector256<UInt64>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PSingle; source: DNVector256<Single>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PDouble; source: DNVector256<Double>); overload;
    {class} procedure Store(address: PSByte; source: DNVector256<SByte>); overload;
    {class} procedure Store(address: PByte; source: DNVector256<Byte>); overload;
    {class} procedure Store(address: PInt16; source: DNVector256<Int16>); overload;
    {class} procedure Store(address: PUInt16; source: DNVector256<UInt16>); overload;
    {class} procedure Store(address: PInt32; source: DNVector256<Int32>); overload;
    {class} procedure Store(address: PUInt32; source: DNVector256<UInt32>); overload;
    {class} procedure Store(address: PInt64; source: DNVector256<Int64>); overload;
    {class} procedure Store(address: PUInt64; source: DNVector256<UInt64>); overload;
    {class} procedure Store(address: PSingle; source: DNVector256<Single>); overload;
    {class} procedure Store(address: PDouble; source: DNVector256<Double>); overload;
    {class} function Subtract(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function Subtract(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function TestC(left: DNVector128<Single>; right: DNVector128<Single>): Boolean; overload;
    {class} function TestC(left: DNVector128<Double>; right: DNVector128<Double>): Boolean; overload;
    {class} function TestNotZAndNotC(left: DNVector128<Single>; right: DNVector128<Single>): Boolean; overload;
    {class} function TestNotZAndNotC(left: DNVector128<Double>; right: DNVector128<Double>): Boolean; overload;
    {class} function TestZ(left: DNVector128<Single>; right: DNVector128<Single>): Boolean; overload;
    {class} function TestZ(left: DNVector128<Double>; right: DNVector128<Double>): Boolean; overload;
    {class} function UnpackHigh(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function UnpackHigh(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function UnpackLow(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function UnpackLow(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function &Xor(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function &Xor(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function Add(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function Add(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function AddSubtract(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function AddSubtract(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function &And(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function &And(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function AndNot(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function AndNot(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function Blend(left: DNVector256<Single>; right: DNVector256<Single>; control: Byte): DNVector256<Single>; overload;
    {class} function Blend(left: DNVector256<Double>; right: DNVector256<Double>; control: Byte): DNVector256<Double>; overload;
    {class} function BlendVariable(left: DNVector256<Single>; right: DNVector256<Single>; mask: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function BlendVariable(left: DNVector256<Double>; right: DNVector256<Double>; mask: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function BroadcastScalarToVector128(source: PSingle): DNVector128<Single>;
    {class} function BroadcastScalarToVector256(source: PSingle): DNVector256<Single>; overload;
    {class} function BroadcastScalarToVector256(source: PDouble): DNVector256<Double>; overload;
    {class} function BroadcastVector128ToVector256(address: PSingle): DNVector256<Single>; overload;
    {class} function BroadcastVector128ToVector256(address: PDouble): DNVector256<Double>; overload;
    {class} function Ceiling(value: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function Ceiling(value: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function Compare(left: DNVector128<Single>; right: DNVector128<Single>; mode: DNFloatComparisonMode): DNVector128<Single>; overload;
    {class} function Compare(left: DNVector128<Double>; right: DNVector128<Double>; mode: DNFloatComparisonMode): DNVector128<Double>; overload;
    {class} function Compare(left: DNVector256<Single>; right: DNVector256<Single>; mode: DNFloatComparisonMode): DNVector256<Single>; overload;
    {class} function Compare(left: DNVector256<Double>; right: DNVector256<Double>; mode: DNFloatComparisonMode): DNVector256<Double>; overload;
    {class} function CompareScalar(left: DNVector128<Double>; right: DNVector128<Double>; mode: DNFloatComparisonMode): DNVector128<Double>; overload;
    {class} function CompareScalar(left: DNVector128<Single>; right: DNVector128<Single>; mode: DNFloatComparisonMode): DNVector128<Single>; overload;
    {class} function ConvertToSingle(value: DNVector256<Single>): Single;
    {class} function ConvertToVector128Int32(value: DNVector256<Double>): DNVector128<Int32>;
    {class} function ConvertToVector128Single(value: DNVector256<Double>): DNVector128<Single>;
    {class} function ConvertToVector256Int32(value: DNVector256<Single>): DNVector256<Int32>;
    {class} function ConvertToVector256Single(value: DNVector256<Int32>): DNVector256<Single>;
    {class} function ConvertToVector256Double(value: DNVector128<Single>): DNVector256<Double>; overload;
    {class} function ConvertToVector256Double(value: DNVector128<Int32>): DNVector256<Double>; overload;
    {class} function ConvertToVector128Int32WithTruncation(value: DNVector256<Double>): DNVector128<Int32>;
    {class} function ConvertToVector256Int32WithTruncation(value: DNVector256<Single>): DNVector256<Int32>;
    {class} function Divide(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function Divide(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function DotProduct(left: DNVector256<Single>; right: DNVector256<Single>; control: Byte): DNVector256<Single>;
    {class} function DuplicateEvenIndexed(value: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function DuplicateEvenIndexed(value: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function DuplicateOddIndexed(value: DNVector256<Single>): DNVector256<Single>;
    {class} function Extract(value: DNVector256<SByte>; index: Byte): SByte; overload;
    {class} function Extract(value: DNVector256<Byte>; index: Byte): Byte; overload;
    {class} function Extract(value: DNVector256<Int16>; index: Byte): Int16; overload;
    {class} function Extract(value: DNVector256<UInt16>; index: Byte): UInt16; overload;
    {class} function Extract(value: DNVector256<Int32>; index: Byte): Int32; overload;
    {class} function Extract(value: DNVector256<UInt32>; index: Byte): UInt32; overload;
    {class} function Extract(value: DNVector256<Int64>; index: Byte): Int64; overload;
    {class} function Extract(value: DNVector256<UInt64>; index: Byte): UInt64; overload;
    {class} procedure ExtractVector128(address: PByte; value: DNVector256<Byte>; index: Byte); overload;
    {class} procedure ExtractVector128(address: PSByte; value: DNVector256<SByte>; index: Byte); overload;
    {class} procedure ExtractVector128(address: PInt16; value: DNVector256<Int16>; index: Byte); overload;
    {class} procedure ExtractVector128(address: PUInt16; value: DNVector256<UInt16>; index: Byte); overload;
    {class} procedure ExtractVector128(address: PInt32; value: DNVector256<Int32>; index: Byte); overload;
    {class} procedure ExtractVector128(address: PUInt32; value: DNVector256<UInt32>; index: Byte); overload;
    {class} procedure ExtractVector128(address: PInt64; value: DNVector256<Int64>; index: Byte); overload;
    {class} procedure ExtractVector128(address: PUInt64; value: DNVector256<UInt64>; index: Byte); overload;
    {class} procedure ExtractVector128(address: PSingle; value: DNVector256<Single>; index: Byte); overload;
    {class} procedure ExtractVector128(address: PDouble; value: DNVector256<Double>; index: Byte); overload;
    {class} function Floor(value: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function Floor(value: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function HorizontalAdd(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function HorizontalAdd(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function HorizontalSubtract(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function HorizontalSubtract(left: DNVector256<Double>; right: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function Insert(value: DNVector256<SByte>; data: SByte; index: Byte): DNVector256<SByte>; overload;
    {class} function Insert(value: DNVector256<Byte>; data: Byte; index: Byte): DNVector256<Byte>; overload;
    {class} function Insert(value: DNVector256<Int16>; data: Int16; index: Byte): DNVector256<Int16>; overload;
    {class} function Insert(value: DNVector256<UInt16>; data: UInt16; index: Byte): DNVector256<UInt16>; overload;
    {class} function Insert(value: DNVector256<Int32>; data: Int32; index: Byte): DNVector256<Int32>; overload;
    {class} function Insert(value: DNVector256<UInt32>; data: UInt32; index: Byte): DNVector256<UInt32>; overload;
    {class} function Insert(value: DNVector256<Int64>; data: Int64; index: Byte): DNVector256<Int64>; overload;
    {class} function Insert(value: DNVector256<UInt64>; data: UInt64; index: Byte): DNVector256<UInt64>; overload;
    {class} function InsertVector128(value: DNVector256<SByte>; address: PSByte; index: Byte): DNVector256<SByte>; overload;
    {class} function InsertVector128(value: DNVector256<Byte>; address: PByte; index: Byte): DNVector256<Byte>; overload;
    {class} function InsertVector128(value: DNVector256<Int16>; address: PInt16; index: Byte): DNVector256<Int16>; overload;
    {class} function InsertVector128(value: DNVector256<UInt16>; address: PUInt16; index: Byte): DNVector256<UInt16>; overload;
    {class} function InsertVector128(value: DNVector256<Int32>; address: PInt32; index: Byte): DNVector256<Int32>; overload;
    {class} function InsertVector128(value: DNVector256<UInt32>; address: PUInt32; index: Byte): DNVector256<UInt32>; overload;
    {class} function InsertVector128(value: DNVector256<Int64>; address: PInt64; index: Byte): DNVector256<Int64>; overload;
    {class} function InsertVector128(value: DNVector256<UInt64>; address: PUInt64; index: Byte): DNVector256<UInt64>; overload;
    {class} function InsertVector128(value: DNVector256<Single>; address: PSingle; index: Byte): DNVector256<Single>; overload;
    {class} function InsertVector128(value: DNVector256<Double>; address: PDouble; index: Byte): DNVector256<Double>; overload;
    {class} function LoadVector256(address: PSByte): DNVector256<SByte>; overload;
    {class} function LoadVector256(address: PByte): DNVector256<Byte>; overload;
    {class} function LoadVector256(address: PInt16): DNVector256<Int16>; overload;
    {class} function LoadVector256(address: PUInt16): DNVector256<UInt16>; overload;
    {class} function LoadVector256(address: PInt32): DNVector256<Int32>; overload;
    {class} function LoadVector256(address: PUInt32): DNVector256<UInt32>; overload;
    {class} function LoadVector256(address: PInt64): DNVector256<Int64>; overload;
    {class} function LoadVector256(address: PUInt64): DNVector256<UInt64>; overload;
    {class} function LoadVector256(address: PSingle): DNVector256<Single>; overload;
    {class} function LoadVector256(address: PDouble): DNVector256<Double>; overload;
    {class} function LoadAlignedVector256(address: PSByte): DNVector256<SByte>; overload;
    {class} function LoadAlignedVector256(address: PByte): DNVector256<Byte>; overload;
    {class} function LoadAlignedVector256(address: PInt16): DNVector256<Int16>; overload;
    {class} function LoadAlignedVector256(address: PUInt16): DNVector256<UInt16>; overload;
    {class} function LoadAlignedVector256(address: PInt32): DNVector256<Int32>; overload;
    {class} function LoadAlignedVector256(address: PUInt32): DNVector256<UInt32>; overload;
    {class} function LoadAlignedVector256(address: PInt64): DNVector256<Int64>; overload;
    {class} function LoadAlignedVector256(address: PUInt64): DNVector256<UInt64>; overload;
    {class} function LoadAlignedVector256(address: PSingle): DNVector256<Single>; overload;
    {class} function LoadAlignedVector256(address: PDouble): DNVector256<Double>; overload;
    {class} function LoadDquVector256(address: PSByte): DNVector256<SByte>; overload;
    {class} function LoadDquVector256(address: PByte): DNVector256<Byte>; overload;
    {class} function LoadDquVector256(address: PInt16): DNVector256<Int16>; overload;
    {class} function LoadDquVector256(address: PUInt16): DNVector256<UInt16>; overload;
    {class} function LoadDquVector256(address: PInt32): DNVector256<Int32>; overload;
    {class} function LoadDquVector256(address: PUInt32): DNVector256<UInt32>; overload;
    {class} function LoadDquVector256(address: PInt64): DNVector256<Int64>; overload;
    {class} function LoadDquVector256(address: PUInt64): DNVector256<UInt64>; overload;
    {class} function MaskLoad(address: PSingle; mask: DNVector128<UInt32>): DNVector128<Single>; overload;
    {class} function MaskLoad(address: PDouble; mask: DNVector128<UInt64>): DNVector128<Double>; overload;
    {class} function MaskLoad(address: PSingle; mask: DNVector256<UInt32>): DNVector256<Single>; overload;
    {class} function MaskLoad(address: PDouble; mask: DNVector256<UInt64>): DNVector256<Double>; overload;
    {class} procedure MaskStore(address: PSingle; mask: DNVector128<Single>; source: DNVector128<UInt32>); overload;
    {class} procedure MaskStore(address: PDouble; mask: DNVector128<Double>; source: DNVector128<UInt64>); overload;
    {class} procedure MaskStore(address: PSingle; mask: DNVector256<Single>; source: DNVector256<UInt32>); overload;
    {class} procedure MaskStore(address: PDouble; mask: DNVector256<Double>; source: DNVector256<UInt64>); overload;
    {class} function Max(left: DNVector256<Single>; right: DNVector256<Single>): DNVector256<Single>; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Avx')]
  DNAvx = interface(DNObject)
  ['{04F58204-C504-3D2F-BE59-AC268AC52EC0}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNAvx = class(TDNGenericImport<DNAvxClass, DNAvx>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNAvx2Class = interface(DNObjectClass)
  ['{4B6A86D1-BA27-56C3-B402-E2DD0ACFF9C6}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function ShiftLeftLogical128BitLane(value: DNVector256<Int16>; numBytes: Byte): DNVector256<Int16>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector256<UInt16>; numBytes: Byte): DNVector256<UInt16>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector256<Int32>; numBytes: Byte): DNVector256<Int32>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector256<UInt32>; numBytes: Byte): DNVector256<UInt32>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector256<Int64>; numBytes: Byte): DNVector256<Int64>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector256<UInt64>; numBytes: Byte): DNVector256<UInt64>; overload;
    {class} function ShiftLeftLogicalVariable(value: DNVector256<Int32>; count: DNVector256<UInt32>): DNVector256<Int32>; overload;
    {class} function ShiftLeftLogicalVariable(value: DNVector256<UInt32>; count: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function ShiftLeftLogicalVariable(value: DNVector256<Int64>; count: DNVector256<UInt64>): DNVector256<Int64>; overload;
    {class} function ShiftLeftLogicalVariable(value: DNVector256<UInt64>; count: DNVector256<UInt64>): DNVector256<UInt64>; overload;
    {class} function ShiftLeftLogicalVariable(value: DNVector128<Int32>; count: DNVector128<UInt32>): DNVector128<Int32>; overload;
    {class} function ShiftLeftLogicalVariable(value: DNVector128<UInt32>; count: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function ShiftLeftLogicalVariable(value: DNVector128<Int64>; count: DNVector128<UInt64>): DNVector128<Int64>; overload;
    {class} function ShiftLeftLogicalVariable(value: DNVector128<UInt64>; count: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function ShiftRightArithmetic(value: DNVector256<Int16>; count: DNVector128<Int16>): DNVector256<Int16>; overload;
    {class} function ShiftRightArithmetic(value: DNVector256<Int32>; count: DNVector128<Int32>): DNVector256<Int32>; overload;
    {class} function ShiftRightArithmetic(value: DNVector256<Int16>; count: Byte): DNVector256<Int16>; overload;
    {class} function ShiftRightArithmetic(value: DNVector256<Int32>; count: Byte): DNVector256<Int32>; overload;
    {class} function ShiftRightArithmeticVariable(value: DNVector256<Int32>; count: DNVector256<UInt32>): DNVector256<Int32>; overload;
    {class} function ShiftRightArithmeticVariable(value: DNVector128<Int32>; count: DNVector128<UInt32>): DNVector128<Int32>; overload;
    {class} function ShiftRightLogical(value: DNVector256<Int16>; count: DNVector128<Int16>): DNVector256<Int16>; overload;
    {class} function ShiftRightLogical(value: DNVector256<UInt16>; count: DNVector128<UInt16>): DNVector256<UInt16>; overload;
    {class} function ShiftRightLogical(value: DNVector256<Int32>; count: DNVector128<Int32>): DNVector256<Int32>; overload;
    {class} function ShiftRightLogical(value: DNVector256<UInt32>; count: DNVector128<UInt32>): DNVector256<UInt32>; overload;
    {class} function ShiftRightLogical(value: DNVector256<Int64>; count: DNVector128<Int64>): DNVector256<Int64>; overload;
    {class} function ShiftRightLogical(value: DNVector256<UInt64>; count: DNVector128<UInt64>): DNVector256<UInt64>; overload;
    {class} function ShiftRightLogical(value: DNVector256<Int16>; count: Byte): DNVector256<Int16>; overload;
    {class} function ShiftRightLogical(value: DNVector256<UInt16>; count: Byte): DNVector256<UInt16>; overload;
    {class} function ShiftRightLogical(value: DNVector256<Int32>; count: Byte): DNVector256<Int32>; overload;
    {class} function ShiftRightLogical(value: DNVector256<UInt32>; count: Byte): DNVector256<UInt32>; overload;
    {class} function ShiftRightLogical(value: DNVector256<Int64>; count: Byte): DNVector256<Int64>; overload;
    {class} function ShiftRightLogical(value: DNVector256<UInt64>; count: Byte): DNVector256<UInt64>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector256<SByte>; numBytes: Byte): DNVector256<SByte>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector256<Byte>; numBytes: Byte): DNVector256<Byte>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector256<Int16>; numBytes: Byte): DNVector256<Int16>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector256<UInt16>; numBytes: Byte): DNVector256<UInt16>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector256<Int32>; numBytes: Byte): DNVector256<Int32>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector256<UInt32>; numBytes: Byte): DNVector256<UInt32>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector256<Int64>; numBytes: Byte): DNVector256<Int64>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector256<UInt64>; numBytes: Byte): DNVector256<UInt64>; overload;
    {class} function ShiftRightLogicalVariable(value: DNVector256<Int32>; count: DNVector256<UInt32>): DNVector256<Int32>; overload;
    {class} function ShiftRightLogicalVariable(value: DNVector256<UInt32>; count: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function ShiftRightLogicalVariable(value: DNVector256<Int64>; count: DNVector256<UInt64>): DNVector256<Int64>; overload;
    {class} function ShiftRightLogicalVariable(value: DNVector256<UInt64>; count: DNVector256<UInt64>): DNVector256<UInt64>; overload;
    {class} function ShiftRightLogicalVariable(value: DNVector128<Int32>; count: DNVector128<UInt32>): DNVector128<Int32>; overload;
    {class} function ShiftRightLogicalVariable(value: DNVector128<UInt32>; count: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function ShiftRightLogicalVariable(value: DNVector128<Int64>; count: DNVector128<UInt64>): DNVector128<Int64>; overload;
    {class} function ShiftRightLogicalVariable(value: DNVector128<UInt64>; count: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function Shuffle(value: DNVector256<SByte>; mask: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function Shuffle(value: DNVector256<Byte>; mask: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function Shuffle(value: DNVector256<Int32>; control: Byte): DNVector256<Int32>; overload;
    {class} function Shuffle(value: DNVector256<UInt32>; control: Byte): DNVector256<UInt32>; overload;
    {class} function ShuffleHigh(value: DNVector256<Int16>; control: Byte): DNVector256<Int16>; overload;
    {class} function ShuffleHigh(value: DNVector256<UInt16>; control: Byte): DNVector256<UInt16>; overload;
    {class} function ShuffleLow(value: DNVector256<Int16>; control: Byte): DNVector256<Int16>; overload;
    {class} function ShuffleLow(value: DNVector256<UInt16>; control: Byte): DNVector256<UInt16>; overload;
    {class} function Sign(left: DNVector256<SByte>; right: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function Sign(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function Sign(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function Subtract(left: DNVector256<SByte>; right: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function Subtract(left: DNVector256<Byte>; right: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function Subtract(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function Subtract(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function Subtract(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function Subtract(left: DNVector256<UInt32>; right: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function Subtract(left: DNVector256<Int64>; right: DNVector256<Int64>): DNVector256<Int64>; overload;
    {class} function Subtract(left: DNVector256<UInt64>; right: DNVector256<UInt64>): DNVector256<UInt64>; overload;
    {class} function SubtractSaturate(left: DNVector256<SByte>; right: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function SubtractSaturate(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function SubtractSaturate(left: DNVector256<Byte>; right: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function SubtractSaturate(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function SumAbsoluteDifferences(left: DNVector256<Byte>; right: DNVector256<Byte>): DNVector256<UInt64>;
    {class} function UnpackHigh(left: DNVector256<SByte>; right: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function UnpackHigh(left: DNVector256<Byte>; right: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function UnpackHigh(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function UnpackHigh(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function UnpackHigh(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function UnpackHigh(left: DNVector256<UInt32>; right: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function UnpackHigh(left: DNVector256<Int64>; right: DNVector256<Int64>): DNVector256<Int64>; overload;
    {class} function UnpackHigh(left: DNVector256<UInt64>; right: DNVector256<UInt64>): DNVector256<UInt64>; overload;
    {class} function UnpackLow(left: DNVector256<SByte>; right: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function UnpackLow(left: DNVector256<Byte>; right: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function UnpackLow(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function UnpackLow(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function UnpackLow(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function UnpackLow(left: DNVector256<UInt32>; right: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function UnpackLow(left: DNVector256<Int64>; right: DNVector256<Int64>): DNVector256<Int64>; overload;
    {class} function UnpackLow(left: DNVector256<UInt64>; right: DNVector256<UInt64>): DNVector256<UInt64>; overload;
    {class} function &Xor(left: DNVector256<SByte>; right: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function &Xor(left: DNVector256<Byte>; right: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function &Xor(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function &Xor(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function &Xor(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function &Xor(left: DNVector256<UInt32>; right: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function &Xor(left: DNVector256<Int64>; right: DNVector256<Int64>): DNVector256<Int64>; overload;
    {class} function &Xor(left: DNVector256<UInt64>; right: DNVector256<UInt64>): DNVector256<UInt64>; overload;
    {class} function GatherMaskVector128(source: DNVector128<Int32>; baseAddress: PInt32; index: DNVector128<Int64>; mask: DNVector128<Int32>; scale: Byte): DNVector128<Int32>; overload;
    {class} function GatherMaskVector128(source: DNVector128<UInt32>; baseAddress: PUInt32; index: DNVector128<Int64>; mask: DNVector128<UInt32>; scale: Byte): DNVector128<UInt32>; overload;
    {class} function GatherMaskVector128(source: DNVector128<Int64>; baseAddress: PInt64; index: DNVector128<Int64>; mask: DNVector128<Int64>; scale: Byte): DNVector128<Int64>; overload;
    {class} function GatherMaskVector128(source: DNVector128<UInt64>; baseAddress: PUInt64; index: DNVector128<Int64>; mask: DNVector128<UInt64>; scale: Byte): DNVector128<UInt64>; overload;
    {class} function GatherMaskVector128(source: DNVector128<Single>; baseAddress: PSingle; index: DNVector128<Int64>; mask: DNVector128<Single>; scale: Byte): DNVector128<Single>; overload;
    {class} function GatherMaskVector128(source: DNVector128<Double>; baseAddress: PDouble; index: DNVector128<Int64>; mask: DNVector128<Double>; scale: Byte): DNVector128<Double>; overload;
    {class} function GatherMaskVector256(source: DNVector256<Int32>; baseAddress: PInt32; index: DNVector256<Int32>; mask: DNVector256<Int32>; scale: Byte): DNVector256<Int32>; overload;
    {class} function GatherMaskVector256(source: DNVector256<UInt32>; baseAddress: PUInt32; index: DNVector256<Int32>; mask: DNVector256<UInt32>; scale: Byte): DNVector256<UInt32>; overload;
    {class} function GatherMaskVector256(source: DNVector256<Int64>; baseAddress: PInt64; index: DNVector128<Int32>; mask: DNVector256<Int64>; scale: Byte): DNVector256<Int64>; overload;
    {class} function GatherMaskVector256(source: DNVector256<UInt64>; baseAddress: PUInt64; index: DNVector128<Int32>; mask: DNVector256<UInt64>; scale: Byte): DNVector256<UInt64>; overload;
    {class} function GatherMaskVector256(source: DNVector256<Single>; baseAddress: PSingle; index: DNVector256<Int32>; mask: DNVector256<Single>; scale: Byte): DNVector256<Single>; overload;
    {class} function GatherMaskVector256(source: DNVector256<Double>; baseAddress: PDouble; index: DNVector128<Int32>; mask: DNVector256<Double>; scale: Byte): DNVector256<Double>; overload;
    {class} function GatherMaskVector128(source: DNVector128<Int32>; baseAddress: PInt32; index: DNVector256<Int64>; mask: DNVector128<Int32>; scale: Byte): DNVector128<Int32>; overload;
    {class} function GatherMaskVector128(source: DNVector128<UInt32>; baseAddress: PUInt32; index: DNVector256<Int64>; mask: DNVector128<UInt32>; scale: Byte): DNVector128<UInt32>; overload;
    {class} function GatherMaskVector256(source: DNVector256<Int64>; baseAddress: PInt64; index: DNVector256<Int64>; mask: DNVector256<Int64>; scale: Byte): DNVector256<Int64>; overload;
    {class} function GatherMaskVector256(source: DNVector256<UInt64>; baseAddress: PUInt64; index: DNVector256<Int64>; mask: DNVector256<UInt64>; scale: Byte): DNVector256<UInt64>; overload;
    {class} function GatherMaskVector128(source: DNVector128<Single>; baseAddress: PSingle; index: DNVector256<Int64>; mask: DNVector128<Single>; scale: Byte): DNVector128<Single>; overload;
    {class} function GatherMaskVector256(source: DNVector256<Double>; baseAddress: PDouble; index: DNVector256<Int64>; mask: DNVector256<Double>; scale: Byte): DNVector256<Double>; overload;
    {class} function HorizontalAdd(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function HorizontalAdd(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function HorizontalAddSaturate(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>;
    {class} function HorizontalSubtract(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function HorizontalSubtract(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function HorizontalSubtractSaturate(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>;
    {class} function InsertVector128(value: DNVector256<SByte>; data: DNVector128<SByte>; index: Byte): DNVector256<SByte>; overload;
    {class} function InsertVector128(value: DNVector256<SByte>; address: PSByte; index: Byte): DNVector256<SByte>; overload;
    {class} function InsertVector128(value: DNVector256<Byte>; data: DNVector128<Byte>; index: Byte): DNVector256<Byte>; overload;
    {class} function InsertVector128(value: DNVector256<Byte>; address: PByte; index: Byte): DNVector256<Byte>; overload;
    {class} function InsertVector128(value: DNVector256<Int16>; data: DNVector128<Int16>; index: Byte): DNVector256<Int16>; overload;
    {class} function InsertVector128(value: DNVector256<Int16>; address: PInt16; index: Byte): DNVector256<Int16>; overload;
    {class} function InsertVector128(value: DNVector256<UInt16>; data: DNVector128<UInt16>; index: Byte): DNVector256<UInt16>; overload;
    {class} function InsertVector128(value: DNVector256<UInt16>; address: PUInt16; index: Byte): DNVector256<UInt16>; overload;
    {class} function InsertVector128(value: DNVector256<Int32>; data: DNVector128<Int32>; index: Byte): DNVector256<Int32>; overload;
    {class} function InsertVector128(value: DNVector256<Int32>; address: PInt32; index: Byte): DNVector256<Int32>; overload;
    {class} function InsertVector128(value: DNVector256<UInt32>; data: DNVector128<UInt32>; index: Byte): DNVector256<UInt32>; overload;
    {class} function InsertVector128(value: DNVector256<UInt32>; address: PUInt32; index: Byte): DNVector256<UInt32>; overload;
    {class} function InsertVector128(value: DNVector256<Int64>; data: DNVector128<Int64>; index: Byte): DNVector256<Int64>; overload;
    {class} function InsertVector128(value: DNVector256<Int64>; address: PInt64; index: Byte): DNVector256<Int64>; overload;
    {class} function InsertVector128(value: DNVector256<UInt64>; data: DNVector128<UInt64>; index: Byte): DNVector256<UInt64>; overload;
    {class} function InsertVector128(value: DNVector256<UInt64>; address: PUInt64; index: Byte): DNVector256<UInt64>; overload;
    {class} function LoadAlignedVector256NonTemporal(address: PSByte): DNVector256<SByte>; overload;
    {class} function LoadAlignedVector256NonTemporal(address: PByte): DNVector256<Byte>; overload;
    {class} function LoadAlignedVector256NonTemporal(address: PInt16): DNVector256<Int16>; overload;
    {class} function LoadAlignedVector256NonTemporal(address: PUInt16): DNVector256<UInt16>; overload;
    {class} function LoadAlignedVector256NonTemporal(address: PInt32): DNVector256<Int32>; overload;
    {class} function LoadAlignedVector256NonTemporal(address: PUInt32): DNVector256<UInt32>; overload;
    {class} function LoadAlignedVector256NonTemporal(address: PInt64): DNVector256<Int64>; overload;
    {class} function LoadAlignedVector256NonTemporal(address: PUInt64): DNVector256<UInt64>; overload;
    {class} function MaskLoad(address: PInt32; mask: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function MaskLoad(address: PUInt32; mask: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function MaskLoad(address: PInt64; mask: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function MaskLoad(address: PUInt64; mask: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function MaskLoad(address: PInt32; mask: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function MaskLoad(address: PUInt32; mask: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function MaskLoad(address: PInt64; mask: DNVector256<Int64>): DNVector256<Int64>; overload;
    {class} function MaskLoad(address: PUInt64; mask: DNVector256<UInt64>): DNVector256<UInt64>; overload;
    {class} procedure MaskStore(address: PInt32; mask: DNVector128<Int32>; source: DNVector128<Int32>); overload;
    {class} procedure MaskStore(address: PUInt32; mask: DNVector128<UInt32>; source: DNVector128<UInt32>); overload;
    {class} procedure MaskStore(address: PInt64; mask: DNVector128<Int64>; source: DNVector128<Int64>); overload;
    {class} procedure MaskStore(address: PUInt64; mask: DNVector128<UInt64>; source: DNVector128<UInt64>); overload;
    {class} procedure MaskStore(address: PInt32; mask: DNVector256<Int32>; source: DNVector256<Int32>); overload;
    {class} procedure MaskStore(address: PUInt32; mask: DNVector256<UInt32>; source: DNVector256<UInt32>); overload;
    {class} procedure MaskStore(address: PInt64; mask: DNVector256<Int64>; source: DNVector256<Int64>); overload;
    {class} procedure MaskStore(address: PUInt64; mask: DNVector256<UInt64>; source: DNVector256<UInt64>); overload;
    {class} function MultiplyAddAdjacent(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int32>; overload;
    {class} function MultiplyAddAdjacent(left: DNVector256<Byte>; right: DNVector256<SByte>): DNVector256<Int16>; overload;
    {class} function Max(left: DNVector256<SByte>; right: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function Max(left: DNVector256<Byte>; right: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function Max(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function Max(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function Max(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function Max(left: DNVector256<UInt32>; right: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function Min(left: DNVector256<SByte>; right: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function Min(left: DNVector256<Byte>; right: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function Min(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function Min(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function Min(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function Min(left: DNVector256<UInt32>; right: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function MoveMask(value: DNVector256<SByte>): Int32; overload;
    {class} function MoveMask(value: DNVector256<Byte>): Int32; overload;
    {class} function MultipleSumAbsoluteDifferences(left: DNVector256<Byte>; right: DNVector256<Byte>; mask: Byte): DNVector256<UInt16>;
    {class} function Multiply(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int64>; overload;
    {class} function Multiply(left: DNVector256<UInt32>; right: DNVector256<UInt32>): DNVector256<UInt64>; overload;
    {class} function MultiplyHigh(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function MultiplyHigh(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function MultiplyHighRoundScale(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>;
    {class} function MultiplyLow(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function MultiplyLow(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function &Or(left: DNVector256<SByte>; right: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function &Or(left: DNVector256<Byte>; right: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function &Or(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function &Or(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function &Or(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function &Or(left: DNVector256<UInt32>; right: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function &Or(left: DNVector256<Int64>; right: DNVector256<Int64>): DNVector256<Int64>; overload;
    {class} function &Or(left: DNVector256<UInt64>; right: DNVector256<UInt64>): DNVector256<UInt64>; overload;
    {class} function PackSignedSaturate(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<SByte>; overload;
    {class} function PackSignedSaturate(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int16>; overload;
    {class} function PackUnsignedSaturate(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Byte>; overload;
    {class} function PackUnsignedSaturate(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<UInt16>; overload;
    {class} function Permute2x128(left: DNVector256<SByte>; right: DNVector256<SByte>; control: Byte): DNVector256<SByte>; overload;
    {class} function Permute2x128(left: DNVector256<Byte>; right: DNVector256<Byte>; control: Byte): DNVector256<Byte>; overload;
    {class} function Permute2x128(left: DNVector256<Int16>; right: DNVector256<Int16>; control: Byte): DNVector256<Int16>; overload;
    {class} function Permute2x128(left: DNVector256<UInt16>; right: DNVector256<UInt16>; control: Byte): DNVector256<UInt16>; overload;
    {class} function Permute2x128(left: DNVector256<Int32>; right: DNVector256<Int32>; control: Byte): DNVector256<Int32>; overload;
    {class} function Permute2x128(left: DNVector256<UInt32>; right: DNVector256<UInt32>; control: Byte): DNVector256<UInt32>; overload;
    {class} function Permute2x128(left: DNVector256<Int64>; right: DNVector256<Int64>; control: Byte): DNVector256<Int64>; overload;
    {class} function Permute2x128(left: DNVector256<UInt64>; right: DNVector256<UInt64>; control: Byte): DNVector256<UInt64>; overload;
    {class} function Permute4x64(value: DNVector256<Int64>; control: Byte): DNVector256<Int64>; overload;
    {class} function Permute4x64(value: DNVector256<UInt64>; control: Byte): DNVector256<UInt64>; overload;
    {class} function Permute4x64(value: DNVector256<Double>; control: Byte): DNVector256<Double>; overload;
    {class} function PermuteVar8x32(left: DNVector256<Int32>; mask: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function PermuteVar8x32(left: DNVector256<UInt32>; mask: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function PermuteVar8x32(left: DNVector256<Single>; mask: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function ShiftLeftLogical(value: DNVector256<Int16>; count: DNVector128<Int16>): DNVector256<Int16>; overload;
    {class} function ShiftLeftLogical(value: DNVector256<UInt16>; count: DNVector128<UInt16>): DNVector256<UInt16>; overload;
    {class} function ShiftLeftLogical(value: DNVector256<Int32>; count: DNVector128<Int32>): DNVector256<Int32>; overload;
    {class} function ShiftLeftLogical(value: DNVector256<UInt32>; count: DNVector128<UInt32>): DNVector256<UInt32>; overload;
    {class} function ShiftLeftLogical(value: DNVector256<Int64>; count: DNVector128<Int64>): DNVector256<Int64>; overload;
    {class} function ShiftLeftLogical(value: DNVector256<UInt64>; count: DNVector128<UInt64>): DNVector256<UInt64>; overload;
    {class} function ShiftLeftLogical(value: DNVector256<Int16>; count: Byte): DNVector256<Int16>; overload;
    {class} function ShiftLeftLogical(value: DNVector256<UInt16>; count: Byte): DNVector256<UInt16>; overload;
    {class} function ShiftLeftLogical(value: DNVector256<Int32>; count: Byte): DNVector256<Int32>; overload;
    {class} function ShiftLeftLogical(value: DNVector256<UInt32>; count: Byte): DNVector256<UInt32>; overload;
    {class} function ShiftLeftLogical(value: DNVector256<Int64>; count: Byte): DNVector256<Int64>; overload;
    {class} function ShiftLeftLogical(value: DNVector256<UInt64>; count: Byte): DNVector256<UInt64>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector256<SByte>; numBytes: Byte): DNVector256<SByte>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector256<Byte>; numBytes: Byte): DNVector256<Byte>; overload;
    {class} function Abs(value: DNVector256<SByte>): DNVector256<Byte>; overload;
    {class} function Abs(value: DNVector256<Int16>): DNVector256<UInt16>; overload;
    {class} function Abs(value: DNVector256<Int32>): DNVector256<UInt32>; overload;
    {class} function Add(left: DNVector256<SByte>; right: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function Add(left: DNVector256<Byte>; right: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function Add(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function Add(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function Add(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function Add(left: DNVector256<UInt32>; right: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function Add(left: DNVector256<Int64>; right: DNVector256<Int64>): DNVector256<Int64>; overload;
    {class} function Add(left: DNVector256<UInt64>; right: DNVector256<UInt64>): DNVector256<UInt64>; overload;
    {class} function AddSaturate(left: DNVector256<SByte>; right: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function AddSaturate(left: DNVector256<Byte>; right: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function AddSaturate(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function AddSaturate(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function AlignRight(left: DNVector256<SByte>; right: DNVector256<SByte>; mask: Byte): DNVector256<SByte>;
    {class} function &And(left: DNVector256<SByte>; right: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function &And(left: DNVector256<Byte>; right: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function &And(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function &And(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function &And(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function &And(left: DNVector256<UInt32>; right: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function &And(left: DNVector256<Int64>; right: DNVector256<Int64>): DNVector256<Int64>; overload;
    {class} function &And(left: DNVector256<UInt64>; right: DNVector256<UInt64>): DNVector256<UInt64>; overload;
    {class} function AndNot(left: DNVector256<SByte>; right: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function AndNot(left: DNVector256<Byte>; right: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function AndNot(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function AndNot(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function AndNot(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function AndNot(left: DNVector256<UInt32>; right: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function AndNot(left: DNVector256<Int64>; right: DNVector256<Int64>): DNVector256<Int64>; overload;
    {class} function AndNot(left: DNVector256<UInt64>; right: DNVector256<UInt64>): DNVector256<UInt64>; overload;
    {class} function Average(left: DNVector256<Byte>; right: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function Average(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function Blend(left: DNVector128<Int32>; right: DNVector128<Int32>; control: Byte): DNVector128<Int32>; overload;
    {class} function Blend(left: DNVector128<UInt32>; right: DNVector128<UInt32>; control: Byte): DNVector128<UInt32>; overload;
    {class} function Blend(left: DNVector256<Int16>; right: DNVector256<Int16>; control: Byte): DNVector256<Int16>; overload;
    {class} function Blend(left: DNVector256<UInt16>; right: DNVector256<UInt16>; control: Byte): DNVector256<UInt16>; overload;
    {class} function Blend(left: DNVector256<Int32>; right: DNVector256<Int32>; control: Byte): DNVector256<Int32>; overload;
    {class} function Blend(left: DNVector256<UInt32>; right: DNVector256<UInt32>; control: Byte): DNVector256<UInt32>; overload;
    {class} function BlendVariable(left: DNVector256<SByte>; right: DNVector256<SByte>; mask: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function BlendVariable(left: DNVector256<Byte>; right: DNVector256<Byte>; mask: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function BroadcastVector128ToVector256(address: PSByte): DNVector256<SByte>; overload;
    {class} function BroadcastVector128ToVector256(address: PByte): DNVector256<Byte>; overload;
    {class} function BroadcastVector128ToVector256(address: PInt16): DNVector256<Int16>; overload;
    {class} function BroadcastVector128ToVector256(address: PUInt16): DNVector256<UInt16>; overload;
    {class} function BroadcastVector128ToVector256(address: PInt32): DNVector256<Int32>; overload;
    {class} function BroadcastVector128ToVector256(address: PUInt32): DNVector256<UInt32>; overload;
    {class} function BroadcastVector128ToVector256(address: PInt64): DNVector256<Int64>; overload;
    {class} function BroadcastVector128ToVector256(address: PUInt64): DNVector256<UInt64>; overload;
    {class} function CompareEqual(left: DNVector256<SByte>; right: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function CompareEqual(left: DNVector256<Byte>; right: DNVector256<Byte>): DNVector256<Byte>; overload;
    {class} function CompareEqual(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function CompareEqual(left: DNVector256<UInt16>; right: DNVector256<UInt16>): DNVector256<UInt16>; overload;
    {class} function CompareEqual(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function CompareEqual(left: DNVector256<UInt32>; right: DNVector256<UInt32>): DNVector256<UInt32>; overload;
    {class} function CompareEqual(left: DNVector256<Int64>; right: DNVector256<Int64>): DNVector256<Int64>; overload;
    {class} function CompareEqual(left: DNVector256<UInt64>; right: DNVector256<UInt64>): DNVector256<UInt64>; overload;
    {class} function CompareGreaterThan(left: DNVector256<SByte>; right: DNVector256<SByte>): DNVector256<SByte>; overload;
    {class} function CompareGreaterThan(left: DNVector256<Int16>; right: DNVector256<Int16>): DNVector256<Int16>; overload;
    {class} function CompareGreaterThan(left: DNVector256<Int32>; right: DNVector256<Int32>): DNVector256<Int32>; overload;
    {class} function CompareGreaterThan(left: DNVector256<Int64>; right: DNVector256<Int64>): DNVector256<Int64>; overload;
    {class} function ConvertToDouble(value: DNVector256<Double>): Double;
    {class} function ConvertToInt32(value: DNVector256<Int32>): Int32;
    {class} function ConvertToUInt32(value: DNVector256<UInt32>): UInt32;
    {class} function ConvertToVector256Int16(value: DNVector128<SByte>): DNVector256<Int16>;
    {class} function ConvertToVector256UInt16(value: DNVector128<Byte>): DNVector256<UInt16>;
    {class} function ConvertToVector256Int32(value: DNVector128<SByte>): DNVector256<Int32>; overload;
    {class} function ConvertToVector256Int32(value: DNVector128<Int16>): DNVector256<Int32>; overload;
    {class} function ConvertToVector256UInt32(value: DNVector128<Byte>): DNVector256<UInt32>; overload;
    {class} function ConvertToVector256UInt32(value: DNVector128<UInt16>): DNVector256<UInt32>; overload;
    {class} function ConvertToVector256Int64(value: DNVector128<SByte>): DNVector256<Int64>; overload;
    {class} function ConvertToVector256Int64(value: DNVector128<Int16>): DNVector256<Int64>; overload;
    {class} function ConvertToVector256Int64(value: DNVector128<Int32>): DNVector256<Int64>; overload;
    {class} function ConvertToVector256UInt64(value: DNVector128<Byte>): DNVector256<UInt64>; overload;
    {class} function ConvertToVector256UInt64(value: DNVector128<UInt16>): DNVector256<UInt64>; overload;
    {class} function ConvertToVector256UInt64(value: DNVector128<UInt32>): DNVector256<UInt64>; overload;
    {class} function ExtractVector128(value: DNVector256<SByte>; index: Byte): DNVector128<SByte>; overload;
    {class} procedure ExtractVector128(address: PSByte; value: DNVector256<SByte>; index: Byte); overload;
    {class} function ExtractVector128(value: DNVector256<Byte>; index: Byte): DNVector128<Byte>; overload;
    {class} procedure ExtractVector128(address: PByte; value: DNVector256<Byte>; index: Byte); overload;
    {class} function ExtractVector128(value: DNVector256<Int16>; index: Byte): DNVector128<Int16>; overload;
    {class} procedure ExtractVector128(address: PInt16; value: DNVector256<Int16>; index: Byte); overload;
    {class} function ExtractVector128(value: DNVector256<UInt16>; index: Byte): DNVector128<UInt16>; overload;
    {class} procedure ExtractVector128(address: PUInt16; value: DNVector256<UInt16>; index: Byte); overload;
    {class} function ExtractVector128(value: DNVector256<Int32>; index: Byte): DNVector128<Int32>; overload;
    {class} procedure ExtractVector128(address: PInt32; value: DNVector256<Int32>; index: Byte); overload;
    {class} function ExtractVector128(value: DNVector256<UInt32>; index: Byte): DNVector128<UInt32>; overload;
    {class} procedure ExtractVector128(address: PUInt32; value: DNVector256<UInt32>; index: Byte); overload;
    {class} function ExtractVector128(value: DNVector256<Int64>; index: Byte): DNVector128<Int64>; overload;
    {class} procedure ExtractVector128(address: PInt64; value: DNVector256<Int64>; index: Byte); overload;
    {class} function ExtractVector128(value: DNVector256<UInt64>; index: Byte): DNVector128<UInt64>; overload;
    {class} procedure ExtractVector128(address: PUInt64; value: DNVector256<UInt64>; index: Byte); overload;
    {class} function GatherVector128(baseAddress: PInt32; index: DNVector128<Int32>; scale: Byte): DNVector128<Int32>; overload;
    {class} function GatherVector128(baseAddress: PUInt32; index: DNVector128<Int32>; scale: Byte): DNVector128<UInt32>; overload;
    {class} function GatherVector128(baseAddress: PInt64; index: DNVector128<Int32>; scale: Byte): DNVector128<Int64>; overload;
    {class} function GatherVector128(baseAddress: PUInt64; index: DNVector128<Int32>; scale: Byte): DNVector128<UInt64>; overload;
    {class} function GatherVector128(baseAddress: PSingle; index: DNVector128<Int32>; scale: Byte): DNVector128<Single>; overload;
    {class} function GatherVector128(baseAddress: PDouble; index: DNVector128<Int32>; scale: Byte): DNVector128<Double>; overload;
    {class} function GatherVector128(baseAddress: PInt32; index: DNVector128<Int64>; scale: Byte): DNVector128<Int32>; overload;
    {class} function GatherVector128(baseAddress: PUInt32; index: DNVector128<Int64>; scale: Byte): DNVector128<UInt32>; overload;
    {class} function GatherVector128(baseAddress: PInt64; index: DNVector128<Int64>; scale: Byte): DNVector128<Int64>; overload;
    {class} function GatherVector128(baseAddress: PUInt64; index: DNVector128<Int64>; scale: Byte): DNVector128<UInt64>; overload;
    {class} function GatherVector128(baseAddress: PSingle; index: DNVector128<Int64>; scale: Byte): DNVector128<Single>; overload;
    {class} function GatherVector128(baseAddress: PDouble; index: DNVector128<Int64>; scale: Byte): DNVector128<Double>; overload;
    {class} function GatherVector256(baseAddress: PInt32; index: DNVector256<Int32>; scale: Byte): DNVector256<Int32>; overload;
    {class} function GatherVector256(baseAddress: PUInt32; index: DNVector256<Int32>; scale: Byte): DNVector256<UInt32>; overload;
    {class} function GatherVector256(baseAddress: PInt64; index: DNVector128<Int32>; scale: Byte): DNVector256<Int64>; overload;
    {class} function GatherVector256(baseAddress: PUInt64; index: DNVector128<Int32>; scale: Byte): DNVector256<UInt64>; overload;
    {class} function GatherVector256(baseAddress: PSingle; index: DNVector256<Int32>; scale: Byte): DNVector256<Single>; overload;
    {class} function GatherVector256(baseAddress: PDouble; index: DNVector128<Int32>; scale: Byte): DNVector256<Double>; overload;
    {class} function GatherVector128(baseAddress: PInt32; index: DNVector256<Int64>; scale: Byte): DNVector128<Int32>; overload;
    {class} function GatherVector128(baseAddress: PUInt32; index: DNVector256<Int64>; scale: Byte): DNVector128<UInt32>; overload;
    {class} function GatherVector256(baseAddress: PInt64; index: DNVector256<Int64>; scale: Byte): DNVector256<Int64>; overload;
    {class} function GatherVector256(baseAddress: PUInt64; index: DNVector256<Int64>; scale: Byte): DNVector256<UInt64>; overload;
    {class} function GatherVector128(baseAddress: PSingle; index: DNVector256<Int64>; scale: Byte): DNVector128<Single>; overload;
    {class} function GatherVector256(baseAddress: PDouble; index: DNVector256<Int64>; scale: Byte): DNVector256<Double>; overload;
    {class} function GatherMaskVector128(source: DNVector128<Int32>; baseAddress: PInt32; index: DNVector128<Int32>; mask: DNVector128<Int32>; scale: Byte): DNVector128<Int32>; overload;
    {class} function GatherMaskVector128(source: DNVector128<UInt32>; baseAddress: PUInt32; index: DNVector128<Int32>; mask: DNVector128<UInt32>; scale: Byte): DNVector128<UInt32>; overload;
    {class} function GatherMaskVector128(source: DNVector128<Int64>; baseAddress: PInt64; index: DNVector128<Int32>; mask: DNVector128<Int64>; scale: Byte): DNVector128<Int64>; overload;
    {class} function GatherMaskVector128(source: DNVector128<UInt64>; baseAddress: PUInt64; index: DNVector128<Int32>; mask: DNVector128<UInt64>; scale: Byte): DNVector128<UInt64>; overload;
    {class} function GatherMaskVector128(source: DNVector128<Single>; baseAddress: PSingle; index: DNVector128<Int32>; mask: DNVector128<Single>; scale: Byte): DNVector128<Single>; overload;
    {class} function GatherMaskVector128(source: DNVector128<Double>; baseAddress: PDouble; index: DNVector128<Int32>; mask: DNVector128<Double>; scale: Byte): DNVector128<Double>; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Avx2')]
  DNAvx2 = interface(DNObject)
  ['{80EB1625-3FDF-30D8-9E20-5427ECB4F11D}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNAvx2 = class(TDNGenericImport<DNAvx2Class, DNAvx2>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNBmi1Class = interface(DNObjectClass)
  ['{2FC670F2-247E-530C-9384-FA84ADC91E34}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function AndNot(left: UInt32; right: UInt32): UInt32; overload;
    {class} function AndNot(left: UInt64; right: UInt64): UInt64; overload;
    {class} function BitFieldExtract(value: UInt32; start: UInt32; length: UInt32): UInt32; overload;
    {class} function BitFieldExtract(value: UInt64; start: UInt64; length: UInt64): UInt64; overload;
    {class} function BitFieldExtract(value: UInt32; control: UInt32): UInt32; overload;
    {class} function BitFieldExtract(value: UInt64; control: UInt64): UInt64; overload;
    {class} function ExtractLowestSetBit(value: UInt32): UInt32; overload;
    {class} function ExtractLowestSetBit(value: UInt64): UInt64; overload;
    {class} function GetMaskUptoLowestSetBit(value: UInt32): UInt32; overload;
    {class} function GetMaskUptoLowestSetBit(value: UInt64): UInt64; overload;
    {class} function ResetLowestSetBit(value: UInt32): UInt32; overload;
    {class} function ResetLowestSetBit(value: UInt64): UInt64; overload;
    {class} function TrailingZeroCount(value: UInt32): UInt32; overload;
    {class} function TrailingZeroCount(value: UInt64): UInt64; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Bmi1')]
  DNBmi1 = interface(DNObject)
  ['{960F5708-D97B-3EEC-9F6E-4AE8D0973D8C}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNBmi1 = class(TDNGenericImport<DNBmi1Class, DNBmi1>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNBmi2Class = interface(DNObjectClass)
  ['{CD4D03B0-5934-5DDC-8CA3-B93D3D4CDC24}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function ZeroHighBits(value: UInt32; index: UInt32): UInt32; overload;
    {class} function ZeroHighBits(value: UInt64; index: UInt64): UInt64; overload;
    {class} function MultiplyNoFlags(left: UInt32; right: UInt32; high: PUInt32): UInt32; overload;
    {class} function MultiplyNoFlags(left: UInt64; right: UInt64; high: PUInt64): UInt64; overload;
    {class} function ParallelBitDeposit(value: UInt32; mask: UInt32): UInt32; overload;
    {class} function ParallelBitDeposit(value: UInt64; mask: UInt64): UInt64; overload;
    {class} function ParallelBitExtract(value: UInt32; mask: UInt32): UInt32; overload;
    {class} function ParallelBitExtract(value: UInt64; mask: UInt64): UInt64; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Bmi2')]
  DNBmi2 = interface(DNObject)
  ['{8947736A-7828-32C4-B046-8EE7594E0860}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNBmi2 = class(TDNGenericImport<DNBmi2Class, DNBmi2>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNFmaClass = interface(DNObjectClass)
  ['{741C27BF-61B9-5BF9-8F95-1ADF68215202}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function MultiplyAdd(a: DNVector128<Single>; b: DNVector128<Single>; c: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function MultiplyAdd(a: DNVector128<Double>; b: DNVector128<Double>; c: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MultiplyAdd(a: DNVector256<Single>; b: DNVector256<Single>; c: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function MultiplyAdd(a: DNVector256<Double>; b: DNVector256<Double>; c: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function MultiplyAddScalar(a: DNVector128<Single>; b: DNVector128<Single>; c: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function MultiplyAddScalar(a: DNVector128<Double>; b: DNVector128<Double>; c: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MultiplyAddSubtract(a: DNVector128<Single>; b: DNVector128<Single>; c: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function MultiplyAddSubtract(a: DNVector128<Double>; b: DNVector128<Double>; c: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MultiplyAddSubtract(a: DNVector256<Single>; b: DNVector256<Single>; c: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function MultiplyAddSubtract(a: DNVector256<Double>; b: DNVector256<Double>; c: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function MultiplySubtract(a: DNVector128<Single>; b: DNVector128<Single>; c: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function MultiplySubtract(a: DNVector128<Double>; b: DNVector128<Double>; c: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MultiplySubtract(a: DNVector256<Single>; b: DNVector256<Single>; c: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function MultiplySubtract(a: DNVector256<Double>; b: DNVector256<Double>; c: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function MultiplySubtractScalar(a: DNVector128<Single>; b: DNVector128<Single>; c: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function MultiplySubtractScalar(a: DNVector128<Double>; b: DNVector128<Double>; c: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MultiplySubtractAdd(a: DNVector128<Single>; b: DNVector128<Single>; c: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function MultiplySubtractAdd(a: DNVector128<Double>; b: DNVector128<Double>; c: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MultiplySubtractAdd(a: DNVector256<Single>; b: DNVector256<Single>; c: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function MultiplySubtractAdd(a: DNVector256<Double>; b: DNVector256<Double>; c: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function MultiplyAddNegated(a: DNVector128<Single>; b: DNVector128<Single>; c: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function MultiplyAddNegated(a: DNVector128<Double>; b: DNVector128<Double>; c: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MultiplyAddNegated(a: DNVector256<Single>; b: DNVector256<Single>; c: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function MultiplyAddNegated(a: DNVector256<Double>; b: DNVector256<Double>; c: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function MultiplyAddNegatedScalar(a: DNVector128<Single>; b: DNVector128<Single>; c: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function MultiplyAddNegatedScalar(a: DNVector128<Double>; b: DNVector128<Double>; c: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MultiplySubtractNegated(a: DNVector128<Single>; b: DNVector128<Single>; c: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function MultiplySubtractNegated(a: DNVector128<Double>; b: DNVector128<Double>; c: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MultiplySubtractNegated(a: DNVector256<Single>; b: DNVector256<Single>; c: DNVector256<Single>): DNVector256<Single>; overload;
    {class} function MultiplySubtractNegated(a: DNVector256<Double>; b: DNVector256<Double>; c: DNVector256<Double>): DNVector256<Double>; overload;
    {class} function MultiplySubtractNegatedScalar(a: DNVector128<Single>; b: DNVector128<Single>; c: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function MultiplySubtractNegatedScalar(a: DNVector128<Double>; b: DNVector128<Double>; c: DNVector128<Double>): DNVector128<Double>; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Fma')]
  DNFma = interface(DNObject)
  ['{2E3C91D1-8562-3A7E-8D13-BFF237B1D112}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNFma = class(TDNGenericImport<DNFmaClass, DNFma>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNLzcntClass = interface(DNObjectClass)
  ['{8195528E-8DDD-5478-8A2C-A937B7AB24EC}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function LeadingZeroCount(value: UInt32): UInt32; overload;
    {class} function LeadingZeroCount(value: UInt64): UInt64; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Lzcnt')]
  DNLzcnt = interface(DNObject)
  ['{5A71BD1F-91AD-31D6-A3A6-E334696E3F49}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNLzcnt = class(TDNGenericImport<DNLzcntClass, DNLzcnt>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNPclmulqdqClass = interface(DNObjectClass)
  ['{4177D47E-6E9E-58CE-A6A0-130C52D8AAD8}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function CarryLessMultiply(left: DNVector128<Int64>; right: DNVector128<Int64>; control: Byte): DNVector128<Int64>; overload;
    {class} function CarryLessMultiply(left: DNVector128<UInt64>; right: DNVector128<UInt64>; control: Byte): DNVector128<UInt64>; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Pclmulqdq')]
  DNPclmulqdq = interface(DNObject)
  ['{ECB43B66-4EE6-362F-B77B-9C1C0CD887F4}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNPclmulqdq = class(TDNGenericImport<DNPclmulqdqClass, DNPclmulqdq>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNPopcntClass = interface(DNObjectClass)
  ['{93653104-1AA3-5532-84B4-33CE68CE79E6}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function PopCount(value: UInt32): Int32; overload;
    {class} function PopCount(value: UInt64): Int64; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Popcnt')]
  DNPopcnt = interface(DNObject)
  ['{625C8C46-3281-38A3-ACE8-6708619A09A8}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNPopcnt = class(TDNGenericImport<DNPopcntClass, DNPopcnt>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNSseClass = interface(DNObjectClass)
  ['{88C8FC70-907F-521C-9CC4-9B64507C92CA}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function Add(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function AddScalar(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function &And(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function AndNot(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareEqual(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareEqualOrderedScalar(left: DNVector128<Single>; right: DNVector128<Single>): Boolean;
    {class} function CompareEqualUnorderedScalar(left: DNVector128<Single>; right: DNVector128<Single>): Boolean;
    {class} function CompareEqualScalar(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareGreaterThan(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareGreaterThanOrderedScalar(left: DNVector128<Single>; right: DNVector128<Single>): Boolean;
    {class} function CompareGreaterThanUnorderedScalar(left: DNVector128<Single>; right: DNVector128<Single>): Boolean;
    {class} function CompareGreaterThanScalar(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareGreaterThanOrEqual(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareGreaterThanOrEqualOrderedScalar(left: DNVector128<Single>; right: DNVector128<Single>): Boolean;
    {class} function CompareGreaterThanOrEqualUnorderedScalar(left: DNVector128<Single>; right: DNVector128<Single>): Boolean;
    {class} function CompareGreaterThanOrEqualScalar(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareLessThan(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareLessThanOrderedScalar(left: DNVector128<Single>; right: DNVector128<Single>): Boolean;
    {class} function CompareLessThanUnorderedScalar(left: DNVector128<Single>; right: DNVector128<Single>): Boolean;
    {class} function CompareLessThanScalar(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareLessThanOrEqual(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareLessThanOrEqualOrderedScalar(left: DNVector128<Single>; right: DNVector128<Single>): Boolean;
    {class} function CompareLessThanOrEqualUnorderedScalar(left: DNVector128<Single>; right: DNVector128<Single>): Boolean;
    {class} function CompareLessThanOrEqualScalar(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareNotEqual(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareNotEqualOrderedScalar(left: DNVector128<Single>; right: DNVector128<Single>): Boolean;
    {class} function CompareNotEqualUnorderedScalar(left: DNVector128<Single>; right: DNVector128<Single>): Boolean;
    {class} function CompareNotEqualScalar(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareNotGreaterThan(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareNotGreaterThanScalar(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareNotGreaterThanOrEqual(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareNotGreaterThanOrEqualScalar(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareNotLessThan(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareNotLessThanScalar(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareNotLessThanOrEqual(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareNotLessThanOrEqualScalar(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareOrdered(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareOrderedScalar(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareUnordered(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function CompareUnorderedScalar(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function ConvertToInt32(value: DNVector128<Single>): Int32;
    {class} function ConvertToInt64(value: DNVector128<Single>): Int64;
    {class} function ConvertToSingle(value: DNVector128<Single>): Single;
    {class} function ConvertScalarToVector128Single(upper: DNVector128<Single>; value: Int32): DNVector128<Single>; overload;
    {class} function ConvertScalarToVector128Single(upper: DNVector128<Single>; value: Int64): DNVector128<Single>; overload;
    {class} function ConvertToInt32WithTruncation(value: DNVector128<Single>): Int32;
    {class} function ConvertToInt64WithTruncation(value: DNVector128<Single>): Int64;
    {class} function Divide(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function DivideScalar(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function LoadVector128(address: PSingle): DNVector128<Single>;
    {class} function LoadScalarVector128(address: PSingle): DNVector128<Single>;
    {class} function LoadAlignedVector128(address: PSingle): DNVector128<Single>;
    {class} function LoadHigh(lower: DNVector128<Single>; address: PSingle): DNVector128<Single>;
    {class} function LoadLow(upper: DNVector128<Single>; address: PSingle): DNVector128<Single>;
    {class} function Max(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function MaxScalar(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function Min(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function MinScalar(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function MoveScalar(upper: DNVector128<Single>; value: DNVector128<Single>): DNVector128<Single>;
    {class} function MoveHighToLow(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function MoveLowToHigh(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function MoveMask(value: DNVector128<Single>): Int32;
    {class} function Multiply(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function MultiplyScalar(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function &Or(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} procedure Prefetch0(var address: DNVoid);
    {class} procedure Prefetch1(var address: DNVoid);
    {class} procedure Prefetch2(var address: DNVoid);
    {class} procedure PrefetchNonTemporal(var address: DNVoid);
    {class} function Reciprocal(value: DNVector128<Single>): DNVector128<Single>;
    {class} function ReciprocalScalar(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function ReciprocalScalar(upper: DNVector128<Single>; value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function ReciprocalSqrt(value: DNVector128<Single>): DNVector128<Single>;
    {class} function ReciprocalSqrtScalar(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function ReciprocalSqrtScalar(upper: DNVector128<Single>; value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function SetAllVector128(value: Single): DNVector128<Single>;
    {class} function SetScalarVector128(value: Single): DNVector128<Single>;
    {class} function SetVector128(e3: Single; e2: Single; e1: Single; e0: Single): DNVector128<Single>;
    {class} function SetZeroVector128: DNVector128<Single>;
    {class} function Shuffle(left: DNVector128<Single>; right: DNVector128<Single>; control: Byte): DNVector128<Single>;
    {class} function Sqrt(value: DNVector128<Single>): DNVector128<Single>;
    {class} function SqrtScalar(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function SqrtScalar(upper: DNVector128<Single>; value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} procedure StoreAligned(address: PSingle; source: DNVector128<Single>);
    {class} procedure StoreAlignedNonTemporal(address: PSingle; source: DNVector128<Single>);
    {class} procedure Store(address: PSingle; source: DNVector128<Single>);
    {class} procedure StoreFence;
    {class} procedure StoreScalar(address: PSingle; source: DNVector128<Single>);
    {class} procedure StoreHigh(address: PSingle; source: DNVector128<Single>);
    {class} procedure StoreLow(address: PSingle; source: DNVector128<Single>);
    {class} function Subtract(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function SubtractScalar(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function UnpackHigh(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function UnpackLow(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;
    {class} function &Xor(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Sse')]
  DNSse = interface(DNObject)
  ['{604D1A51-398A-3691-91F1-737DCE1BDAA4}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNSse = class(TDNGenericImport<DNSseClass, DNSse>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNSse2Class = interface(DNObjectClass)
  ['{62E2CE34-900B-5262-9BEA-4E1D6A0F84EF}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} procedure StoreAligned(address: PUInt16; source: DNVector128<UInt16>); overload;
    {class} procedure StoreAligned(address: PInt32; source: DNVector128<Int32>); overload;
    {class} procedure StoreAligned(address: PUInt32; source: DNVector128<UInt32>); overload;
    {class} procedure StoreAligned(address: PInt64; source: DNVector128<Int64>); overload;
    {class} procedure StoreAligned(address: PUInt64; source: DNVector128<UInt64>); overload;
    {class} procedure StoreAligned(address: PDouble; source: DNVector128<Double>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PSByte; source: DNVector128<SByte>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PByte; source: DNVector128<Byte>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PInt16; source: DNVector128<Int16>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PUInt16; source: DNVector128<UInt16>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PInt32; source: DNVector128<Int32>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PUInt32; source: DNVector128<UInt32>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PInt64; source: DNVector128<Int64>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PUInt64; source: DNVector128<UInt64>); overload;
    {class} procedure StoreAlignedNonTemporal(address: PDouble; source: DNVector128<Double>); overload;
    {class} procedure Store(address: PSByte; source: DNVector128<SByte>); overload;
    {class} procedure Store(address: PByte; source: DNVector128<Byte>); overload;
    {class} procedure Store(address: PInt16; source: DNVector128<Int16>); overload;
    {class} procedure Store(address: PUInt16; source: DNVector128<UInt16>); overload;
    {class} procedure Store(address: PInt32; source: DNVector128<Int32>); overload;
    {class} procedure Store(address: PUInt32; source: DNVector128<UInt32>); overload;
    {class} procedure Store(address: PInt64; source: DNVector128<Int64>); overload;
    {class} procedure Store(address: PUInt64; source: DNVector128<UInt64>); overload;
    {class} procedure Store(address: PDouble; source: DNVector128<Double>); overload;
    {class} procedure StoreHigh(address: PDouble; source: DNVector128<Double>);
    {class} procedure StoreLow(address: PInt64; source: DNVector128<Int64>); overload;
    {class} procedure StoreLow(address: PUInt64; source: DNVector128<UInt64>); overload;
    {class} procedure StoreLow(address: PDouble; source: DNVector128<Double>); overload;
    {class} procedure StoreNonTemporal(address: PInt32; value: Int32); overload;
    {class} procedure StoreNonTemporal(address: PUInt32; value: UInt32); overload;
    {class} procedure StoreNonTemporal(address: PInt64; value: Int64); overload;
    {class} procedure StoreNonTemporal(address: PUInt64; value: UInt64); overload;
    {class} function Subtract(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function Subtract(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function Subtract(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function Subtract(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function Subtract(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function Subtract(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function Subtract(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function Subtract(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function Subtract(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function SubtractScalar(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function SubtractSaturate(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function SubtractSaturate(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function SubtractSaturate(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function SubtractSaturate(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function UnpackHigh(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function UnpackHigh(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function UnpackHigh(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function UnpackHigh(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function UnpackHigh(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function UnpackHigh(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function UnpackHigh(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function UnpackHigh(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function UnpackHigh(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function UnpackLow(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function UnpackLow(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function UnpackLow(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function UnpackLow(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function UnpackLow(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function UnpackLow(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function UnpackLow(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function UnpackLow(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function UnpackLow(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function &Xor(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function &Xor(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function &Xor(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function &Xor(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function &Xor(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function &Xor(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function &Xor(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function &Xor(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function &Xor(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function LoadAlignedVector128(address: PInt32): DNVector128<Int32>; overload;
    {class} function LoadAlignedVector128(address: PUInt32): DNVector128<UInt32>; overload;
    {class} function LoadAlignedVector128(address: PInt64): DNVector128<Int64>; overload;
    {class} function LoadAlignedVector128(address: PUInt64): DNVector128<UInt64>; overload;
    {class} function LoadAlignedVector128(address: PDouble): DNVector128<Double>; overload;
    {class} procedure LoadFence;
    {class} function LoadHigh(lower: DNVector128<Double>; address: PDouble): DNVector128<Double>;
    {class} function LoadLow(upper: DNVector128<Double>; address: PDouble): DNVector128<Double>;
    {class} function LoadScalarVector128(address: PInt32): DNVector128<Int32>; overload;
    {class} function LoadScalarVector128(address: PUInt32): DNVector128<UInt32>; overload;
    {class} function LoadScalarVector128(address: PInt64): DNVector128<Int64>; overload;
    {class} function LoadScalarVector128(address: PUInt64): DNVector128<UInt64>; overload;
    {class} procedure MaskMove(source: DNVector128<SByte>; mask: DNVector128<SByte>; address: PSByte); overload;
    {class} procedure MaskMove(source: DNVector128<Byte>; mask: DNVector128<Byte>; address: PByte); overload;
    {class} function Max(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function Max(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function Max(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MaxScalar(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} procedure MemoryFence;
    {class} function Min(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function Min(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function Min(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MinScalar(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function MoveScalar(upper: DNVector128<Double>; value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MoveMask(value: DNVector128<SByte>): Int32; overload;
    {class} function MoveMask(value: DNVector128<Byte>): Int32; overload;
    {class} function MoveMask(value: DNVector128<Double>): Int32; overload;
    {class} function MoveScalar(value: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function MoveScalar(value: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function Multiply(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt64>; overload;
    {class} function Multiply(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function MultiplyScalar(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function MultiplyHigh(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function MultiplyHigh(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function MultiplyHorizontalAdd(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int32>;
    {class} function MultiplyLow(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>;
    {class} function &Or(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function &Or(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function &Or(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function &Or(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function &Or(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function &Or(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function &Or(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function &Or(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function &Or(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function PackSignedSaturate(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<SByte>; overload;
    {class} function PackSignedSaturate(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int16>; overload;
    {class} function PackUnsignedSaturate(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Byte>;
    {class} function SetAllVector128(value: Byte): DNVector128<Byte>; overload;
    {class} function SetAllVector128(value: SByte): DNVector128<SByte>; overload;
    {class} function SetAllVector128(value: Int16): DNVector128<Int16>; overload;
    {class} function SetAllVector128(value: UInt16): DNVector128<UInt16>; overload;
    {class} function SetAllVector128(value: Int32): DNVector128<Int32>; overload;
    {class} function SetAllVector128(value: UInt32): DNVector128<UInt32>; overload;
    {class} function SetAllVector128(value: Int64): DNVector128<Int64>; overload;
    {class} function SetAllVector128(value: UInt64): DNVector128<UInt64>; overload;
    {class} function SetAllVector128(value: Double): DNVector128<Double>; overload;
    {class} function SetScalarVector128(value: Double): DNVector128<Double>;
    {class} function SetVector128(e15: SByte; e14: SByte; e13: SByte; e12: SByte; e11: SByte; e10: SByte; e9: SByte; e8: SByte; e7: SByte; e6: SByte; e5: SByte; e4: SByte; e3: SByte; e2: SByte; e1: SByte; e0: SByte): DNVector128<SByte>; overload;
    {class} function SetVector128(e15: Byte; e14: Byte; e13: Byte; e12: Byte; e11: Byte; e10: Byte; e9: Byte; e8: Byte; e7: Byte; e6: Byte; e5: Byte; e4: Byte; e3: Byte; e2: Byte; e1: Byte; e0: Byte): DNVector128<Byte>; overload;
    {class} function SetVector128(e7: Int16; e6: Int16; e5: Int16; e4: Int16; e3: Int16; e2: Int16; e1: Int16; e0: Int16): DNVector128<Int16>; overload;
    {class} function SetVector128(e7: UInt16; e6: UInt16; e5: UInt16; e4: UInt16; e3: UInt16; e2: UInt16; e1: UInt16; e0: UInt16): DNVector128<UInt16>; overload;
    {class} function SetVector128(e3: Int32; e2: Int32; e1: Int32; e0: Int32): DNVector128<Int32>; overload;
    {class} function SetVector128(e3: UInt32; e2: UInt32; e1: UInt32; e0: UInt32): DNVector128<UInt32>; overload;
    {class} function SetVector128(e1: Int64; e0: Int64): DNVector128<Int64>; overload;
    {class} function SetVector128(e1: UInt64; e0: UInt64): DNVector128<UInt64>; overload;
    {class} function SetVector128(e1: Double; e0: Double): DNVector128<Double>; overload;
    {class} function SumAbsoluteDifferences(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Int64>;
    {class} function Shuffle(value: DNVector128<Int32>; control: Byte): DNVector128<Int32>; overload;
    {class} function Shuffle(value: DNVector128<UInt32>; control: Byte): DNVector128<UInt32>; overload;
    {class} function Shuffle(left: DNVector128<Double>; right: DNVector128<Double>; control: Byte): DNVector128<Double>; overload;
    {class} function ShuffleHigh(value: DNVector128<Int16>; control: Byte): DNVector128<Int16>; overload;
    {class} function ShuffleHigh(value: DNVector128<UInt16>; control: Byte): DNVector128<UInt16>; overload;
    {class} function ShuffleLow(value: DNVector128<Int16>; control: Byte): DNVector128<Int16>; overload;
    {class} function ShuffleLow(value: DNVector128<UInt16>; control: Byte): DNVector128<UInt16>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<Int16>; count: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<UInt16>; count: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<Int32>; count: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<UInt32>; count: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<Int64>; count: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<UInt64>; count: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<Int16>; count: Byte): DNVector128<Int16>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<UInt16>; count: Byte): DNVector128<UInt16>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<Int32>; count: Byte): DNVector128<Int32>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<UInt32>; count: Byte): DNVector128<UInt32>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<Int64>; count: Byte): DNVector128<Int64>; overload;
    {class} function ShiftLeftLogical(value: DNVector128<UInt64>; count: Byte): DNVector128<UInt64>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector128<SByte>; numBytes: Byte): DNVector128<SByte>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector128<Byte>; numBytes: Byte): DNVector128<Byte>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector128<Int16>; numBytes: Byte): DNVector128<Int16>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector128<UInt16>; numBytes: Byte): DNVector128<UInt16>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector128<Int32>; numBytes: Byte): DNVector128<Int32>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector128<UInt32>; numBytes: Byte): DNVector128<UInt32>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector128<Int64>; numBytes: Byte): DNVector128<Int64>; overload;
    {class} function ShiftLeftLogical128BitLane(value: DNVector128<UInt64>; numBytes: Byte): DNVector128<UInt64>; overload;
    {class} function ShiftRightArithmetic(value: DNVector128<Int16>; count: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function ShiftRightArithmetic(value: DNVector128<Int32>; count: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function ShiftRightArithmetic(value: DNVector128<Int16>; count: Byte): DNVector128<Int16>; overload;
    {class} function ShiftRightArithmetic(value: DNVector128<Int32>; count: Byte): DNVector128<Int32>; overload;
    {class} function ShiftRightLogical(value: DNVector128<Int16>; count: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function ShiftRightLogical(value: DNVector128<UInt16>; count: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function ShiftRightLogical(value: DNVector128<Int32>; count: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function ShiftRightLogical(value: DNVector128<UInt32>; count: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function ShiftRightLogical(value: DNVector128<Int64>; count: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function ShiftRightLogical(value: DNVector128<UInt64>; count: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function ShiftRightLogical(value: DNVector128<Int16>; count: Byte): DNVector128<Int16>; overload;
    {class} function ShiftRightLogical(value: DNVector128<UInt16>; count: Byte): DNVector128<UInt16>; overload;
    {class} function ShiftRightLogical(value: DNVector128<Int32>; count: Byte): DNVector128<Int32>; overload;
    {class} function ShiftRightLogical(value: DNVector128<UInt32>; count: Byte): DNVector128<UInt32>; overload;
    {class} function ShiftRightLogical(value: DNVector128<Int64>; count: Byte): DNVector128<Int64>; overload;
    {class} function ShiftRightLogical(value: DNVector128<UInt64>; count: Byte): DNVector128<UInt64>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector128<SByte>; numBytes: Byte): DNVector128<SByte>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector128<Byte>; numBytes: Byte): DNVector128<Byte>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector128<Int16>; numBytes: Byte): DNVector128<Int16>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector128<UInt16>; numBytes: Byte): DNVector128<UInt16>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector128<Int32>; numBytes: Byte): DNVector128<Int32>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector128<UInt32>; numBytes: Byte): DNVector128<UInt32>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector128<Int64>; numBytes: Byte): DNVector128<Int64>; overload;
    {class} function ShiftRightLogical128BitLane(value: DNVector128<UInt64>; numBytes: Byte): DNVector128<UInt64>; overload;
    {class} function Sqrt(value: DNVector128<Double>): DNVector128<Double>;
    {class} function SqrtScalar(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function SqrtScalar(upper: DNVector128<Double>; value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} procedure StoreScalar(address: PDouble; source: DNVector128<Double>);
    {class} procedure StoreAligned(address: PSByte; source: DNVector128<SByte>); overload;
    {class} procedure StoreAligned(address: PByte; source: DNVector128<Byte>); overload;
    {class} procedure StoreAligned(address: PInt16; source: DNVector128<Int16>); overload;
    {class} function Add(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function Add(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function Add(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function Add(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function Add(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function Add(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function Add(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function Add(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function Add(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function AddScalar(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function AddSaturate(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function AddSaturate(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function AddSaturate(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function AddSaturate(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function &And(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function &And(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function &And(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function &And(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function &And(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function &And(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function &And(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function &And(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function &And(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function AndNot(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function AndNot(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function AndNot(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function AndNot(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function AndNot(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function AndNot(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function AndNot(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function AndNot(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function AndNot(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function Average(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function Average(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function CompareEqual(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function CompareEqual(left: DNVector128<Byte>; right: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function CompareEqual(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function CompareEqual(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function CompareEqual(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function CompareEqual(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function CompareEqual(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function CompareEqualOrderedScalar(left: DNVector128<Double>; right: DNVector128<Double>): Boolean;
    {class} function CompareEqualUnorderedScalar(left: DNVector128<Double>; right: DNVector128<Double>): Boolean;
    {class} function CompareEqualScalar(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareGreaterThan(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function CompareGreaterThan(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function CompareGreaterThan(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function CompareGreaterThan(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function CompareGreaterThanOrderedScalar(left: DNVector128<Double>; right: DNVector128<Double>): Boolean;
    {class} function CompareGreaterThanUnorderedScalar(left: DNVector128<Double>; right: DNVector128<Double>): Boolean;
    {class} function CompareGreaterThanScalar(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareGreaterThanOrEqual(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareGreaterThanOrEqualOrderedScalar(left: DNVector128<Double>; right: DNVector128<Double>): Boolean;
    {class} function CompareGreaterThanOrEqualUnorderedScalar(left: DNVector128<Double>; right: DNVector128<Double>): Boolean;
    {class} function CompareGreaterThanOrEqualScalar(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareLessThan(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function CompareLessThan(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function CompareLessThan(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function CompareLessThan(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function CompareLessThanOrderedScalar(left: DNVector128<Double>; right: DNVector128<Double>): Boolean;
    {class} function CompareLessThanUnorderedScalar(left: DNVector128<Double>; right: DNVector128<Double>): Boolean;
    {class} function CompareLessThanScalar(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareLessThanOrEqual(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareLessThanOrEqualOrderedScalar(left: DNVector128<Double>; right: DNVector128<Double>): Boolean;
    {class} function CompareLessThanOrEqualUnorderedScalar(left: DNVector128<Double>; right: DNVector128<Double>): Boolean;
    {class} function CompareLessThanOrEqualScalar(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareNotEqual(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareNotEqualOrderedScalar(left: DNVector128<Double>; right: DNVector128<Double>): Boolean;
    {class} function CompareNotEqualUnorderedScalar(left: DNVector128<Double>; right: DNVector128<Double>): Boolean;
    {class} function CompareNotEqualScalar(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareNotGreaterThan(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareNotGreaterThanScalar(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareNotGreaterThanOrEqual(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareNotGreaterThanOrEqualScalar(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareNotLessThan(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareNotLessThanScalar(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareNotLessThanOrEqual(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareNotLessThanOrEqualScalar(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareOrdered(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareOrderedScalar(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareUnordered(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function CompareUnorderedScalar(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function ConvertToVector128Int32(value: DNVector128<Single>): DNVector128<Int32>; overload;
    {class} function ConvertToVector128Int32(value: DNVector128<Double>): DNVector128<Int32>; overload;
    {class} function ConvertToVector128Single(value: DNVector128<Int32>): DNVector128<Single>; overload;
    {class} function ConvertToVector128Single(value: DNVector128<Double>): DNVector128<Single>; overload;
    {class} function ConvertToVector128Double(value: DNVector128<Int32>): DNVector128<Double>; overload;
    {class} function ConvertToVector128Double(value: DNVector128<Single>): DNVector128<Double>; overload;
    {class} function ConvertToDouble(value: DNVector128<Double>): Double;
    {class} function ConvertToInt32(value: DNVector128<Double>): Int32; overload;
    {class} function ConvertToInt32(value: DNVector128<Int32>): Int32; overload;
    {class} function ConvertToInt64(value: DNVector128<Double>): Int64; overload;
    {class} function ConvertToInt64(value: DNVector128<Int64>): Int64; overload;
    {class} function ConvertToUInt32(value: DNVector128<UInt32>): UInt32;
    {class} function ConvertToUInt64(value: DNVector128<UInt64>): UInt64;
    {class} function ConvertScalarToVector128Double(upper: DNVector128<Double>; value: Int32): DNVector128<Double>; overload;
    {class} function ConvertScalarToVector128Double(upper: DNVector128<Double>; value: Int64): DNVector128<Double>; overload;
    {class} function ConvertScalarToVector128Double(upper: DNVector128<Double>; value: DNVector128<Single>): DNVector128<Double>; overload;
    {class} function ConvertScalarToVector128Int32(value: Int32): DNVector128<Int32>;
    {class} function ConvertScalarToVector128Int64(value: Int64): DNVector128<Int64>;
    {class} function ConvertScalarToVector128Single(upper: DNVector128<Single>; value: DNVector128<Double>): DNVector128<Single>;
    {class} function ConvertScalarToVector128UInt32(value: UInt32): DNVector128<UInt32>;
    {class} function ConvertScalarToVector128UInt64(value: UInt64): DNVector128<UInt64>;
    {class} function ConvertToVector128Int32WithTruncation(value: DNVector128<Single>): DNVector128<Int32>; overload;
    {class} function ConvertToVector128Int32WithTruncation(value: DNVector128<Double>): DNVector128<Int32>; overload;
    {class} function ConvertToInt32WithTruncation(value: DNVector128<Double>): Int32;
    {class} function ConvertToInt64WithTruncation(value: DNVector128<Double>): Int64;
    {class} function Divide(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function DivideScalar(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>;
    {class} function Extract(value: DNVector128<Int16>; index: Byte): Int16; overload;
    {class} function Extract(value: DNVector128<UInt16>; index: Byte): UInt16; overload;
    {class} function Insert(value: DNVector128<Int16>; data: Int16; index: Byte): DNVector128<Int16>; overload;
    {class} function Insert(value: DNVector128<UInt16>; data: UInt16; index: Byte): DNVector128<UInt16>; overload;
    {class} function LoadVector128(address: PSByte): DNVector128<SByte>; overload;
    {class} function LoadVector128(address: PByte): DNVector128<Byte>; overload;
    {class} function LoadVector128(address: PInt16): DNVector128<Int16>; overload;
    {class} function LoadVector128(address: PUInt16): DNVector128<UInt16>; overload;
    {class} function LoadVector128(address: PInt32): DNVector128<Int32>; overload;
    {class} function LoadVector128(address: PUInt32): DNVector128<UInt32>; overload;
    {class} function LoadVector128(address: PInt64): DNVector128<Int64>; overload;
    {class} function LoadVector128(address: PUInt64): DNVector128<UInt64>; overload;
    {class} function LoadVector128(address: PDouble): DNVector128<Double>; overload;
    {class} function LoadScalarVector128(address: PDouble): DNVector128<Double>; overload;
    {class} function LoadAlignedVector128(address: PSByte): DNVector128<SByte>; overload;
    {class} function LoadAlignedVector128(address: PByte): DNVector128<Byte>; overload;
    {class} function LoadAlignedVector128(address: PInt16): DNVector128<Int16>; overload;
    {class} function LoadAlignedVector128(address: PUInt16): DNVector128<UInt16>; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Sse2')]
  DNSse2 = interface(DNObject)
  ['{FEAE856F-DF55-3E86-A45B-F9D411C2D52B}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNSse2 = class(TDNGenericImport<DNSse2Class, DNSse2>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNSse3Class = interface(DNObjectClass)
  ['{710EF959-362F-50F7-9E46-893B702F4FCF}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function AddSubtract(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function AddSubtract(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function HorizontalAdd(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function HorizontalAdd(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function HorizontalSubtract(left: DNVector128<Single>; right: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function HorizontalSubtract(left: DNVector128<Double>; right: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function LoadAndDuplicateToVector128(address: PDouble): DNVector128<Double>;
    {class} function LoadDquVector128(address: PSByte): DNVector128<SByte>; overload;
    {class} function LoadDquVector128(address: PByte): DNVector128<Byte>; overload;
    {class} function LoadDquVector128(address: PInt16): DNVector128<Int16>; overload;
    {class} function LoadDquVector128(address: PUInt16): DNVector128<UInt16>; overload;
    {class} function LoadDquVector128(address: PInt32): DNVector128<Int32>; overload;
    {class} function LoadDquVector128(address: PUInt32): DNVector128<UInt32>; overload;
    {class} function LoadDquVector128(address: PInt64): DNVector128<Int64>; overload;
    {class} function LoadDquVector128(address: PUInt64): DNVector128<UInt64>; overload;
    {class} function MoveAndDuplicate(source: DNVector128<Double>): DNVector128<Double>;
    {class} function MoveHighAndDuplicate(source: DNVector128<Single>): DNVector128<Single>;
    {class} function MoveLowAndDuplicate(source: DNVector128<Single>): DNVector128<Single>;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Sse3')]
  DNSse3 = interface(DNObject)
  ['{0735B4F0-481C-3861-A9BD-EFBCA853F309}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNSse3 = class(TDNGenericImport<DNSse3Class, DNSse3>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNSse41Class = interface(DNObjectClass)
  ['{EE4A7D79-4A66-5A3E-9910-C8AB1E61ADD7}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function TestMixOnesZeros(left: DNVector128<Int16>; right: DNVector128<Int16>): Boolean; overload;
    {class} function TestMixOnesZeros(left: DNVector128<UInt16>; right: DNVector128<UInt16>): Boolean; overload;
    {class} function TestMixOnesZeros(left: DNVector128<Int32>; right: DNVector128<Int32>): Boolean; overload;
    {class} function TestMixOnesZeros(left: DNVector128<UInt32>; right: DNVector128<UInt32>): Boolean; overload;
    {class} function TestMixOnesZeros(left: DNVector128<Int64>; right: DNVector128<Int64>): Boolean; overload;
    {class} function TestMixOnesZeros(left: DNVector128<UInt64>; right: DNVector128<UInt64>): Boolean; overload;
    {class} function TestNotZAndNotC(left: DNVector128<SByte>; right: DNVector128<SByte>): Boolean; overload;
    {class} function TestNotZAndNotC(left: DNVector128<Byte>; right: DNVector128<Byte>): Boolean; overload;
    {class} function TestNotZAndNotC(left: DNVector128<Int16>; right: DNVector128<Int16>): Boolean; overload;
    {class} function TestNotZAndNotC(left: DNVector128<UInt16>; right: DNVector128<UInt16>): Boolean; overload;
    {class} function TestNotZAndNotC(left: DNVector128<Int32>; right: DNVector128<Int32>): Boolean; overload;
    {class} function TestNotZAndNotC(left: DNVector128<UInt32>; right: DNVector128<UInt32>): Boolean; overload;
    {class} function TestNotZAndNotC(left: DNVector128<Int64>; right: DNVector128<Int64>): Boolean; overload;
    {class} function TestNotZAndNotC(left: DNVector128<UInt64>; right: DNVector128<UInt64>): Boolean; overload;
    {class} function TestZ(left: DNVector128<SByte>; right: DNVector128<SByte>): Boolean; overload;
    {class} function TestZ(left: DNVector128<Byte>; right: DNVector128<Byte>): Boolean; overload;
    {class} function TestZ(left: DNVector128<Int16>; right: DNVector128<Int16>): Boolean; overload;
    {class} function TestZ(left: DNVector128<UInt16>; right: DNVector128<UInt16>): Boolean; overload;
    {class} function TestZ(left: DNVector128<Int32>; right: DNVector128<Int32>): Boolean; overload;
    {class} function TestZ(left: DNVector128<UInt32>; right: DNVector128<UInt32>): Boolean; overload;
    {class} function TestZ(left: DNVector128<Int64>; right: DNVector128<Int64>): Boolean; overload;
    {class} function TestZ(left: DNVector128<UInt64>; right: DNVector128<UInt64>): Boolean; overload;
    {class} function Blend(left: DNVector128<Int16>; right: DNVector128<Int16>; control: Byte): DNVector128<Int16>; overload;
    {class} function Blend(left: DNVector128<UInt16>; right: DNVector128<UInt16>; control: Byte): DNVector128<UInt16>; overload;
    {class} function Blend(left: DNVector128<Single>; right: DNVector128<Single>; control: Byte): DNVector128<Single>; overload;
    {class} function Blend(left: DNVector128<Double>; right: DNVector128<Double>; control: Byte): DNVector128<Double>; overload;
    {class} function BlendVariable(left: DNVector128<SByte>; right: DNVector128<SByte>; mask: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function BlendVariable(left: DNVector128<Byte>; right: DNVector128<Byte>; mask: DNVector128<Byte>): DNVector128<Byte>; overload;
    {class} function BlendVariable(left: DNVector128<Single>; right: DNVector128<Single>; mask: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function BlendVariable(left: DNVector128<Double>; right: DNVector128<Double>; mask: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function Ceiling(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function Ceiling(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function CeilingScalar(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function CeilingScalar(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function CeilingScalar(upper: DNVector128<Double>; value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function CeilingScalar(upper: DNVector128<Single>; value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function CompareEqual(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>; overload;
    {class} function CompareEqual(left: DNVector128<UInt64>; right: DNVector128<UInt64>): DNVector128<UInt64>; overload;
    {class} function ConvertToVector128Int16(value: DNVector128<SByte>): DNVector128<Int16>; overload;
    {class} function ConvertToVector128Int16(value: DNVector128<Byte>): DNVector128<Int16>; overload;
    {class} function ConvertToVector128Int32(value: DNVector128<SByte>): DNVector128<Int32>; overload;
    {class} function ConvertToVector128Int32(value: DNVector128<Byte>): DNVector128<Int32>; overload;
    {class} function ConvertToVector128Int32(value: DNVector128<Int16>): DNVector128<Int32>; overload;
    {class} function ConvertToVector128Int32(value: DNVector128<UInt16>): DNVector128<Int32>; overload;
    {class} function ConvertToVector128Int64(value: DNVector128<SByte>): DNVector128<Int64>; overload;
    {class} function ConvertToVector128Int64(value: DNVector128<Byte>): DNVector128<Int64>; overload;
    {class} function ConvertToVector128Int64(value: DNVector128<Int16>): DNVector128<Int64>; overload;
    {class} function ConvertToVector128Int64(value: DNVector128<UInt16>): DNVector128<Int64>; overload;
    {class} function ConvertToVector128Int64(value: DNVector128<Int32>): DNVector128<Int64>; overload;
    {class} function ConvertToVector128Int64(value: DNVector128<UInt32>): DNVector128<Int64>; overload;
    {class} function DotProduct(left: DNVector128<Single>; right: DNVector128<Single>; control: Byte): DNVector128<Single>; overload;
    {class} function DotProduct(left: DNVector128<Double>; right: DNVector128<Double>; control: Byte): DNVector128<Double>; overload;
    {class} function Extract(value: DNVector128<SByte>; index: Byte): SByte; overload;
    {class} function Extract(value: DNVector128<Byte>; index: Byte): Byte; overload;
    {class} function Extract(value: DNVector128<Int32>; index: Byte): Int32; overload;
    {class} function Extract(value: DNVector128<UInt32>; index: Byte): UInt32; overload;
    {class} function Extract(value: DNVector128<Int64>; index: Byte): Int64; overload;
    {class} function Extract(value: DNVector128<UInt64>; index: Byte): UInt64; overload;
    {class} function Extract(value: DNVector128<Single>; index: Byte): Single; overload;
    {class} function Floor(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function Floor(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function FloorScalar(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function FloorScalar(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function FloorScalar(upper: DNVector128<Double>; value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function FloorScalar(upper: DNVector128<Single>; value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function Insert(value: DNVector128<SByte>; data: SByte; index: Byte): DNVector128<SByte>; overload;
    {class} function Insert(value: DNVector128<Byte>; data: Byte; index: Byte): DNVector128<Byte>; overload;
    {class} function Insert(value: DNVector128<Int32>; data: Int32; index: Byte): DNVector128<Int32>; overload;
    {class} function Insert(value: DNVector128<UInt32>; data: UInt32; index: Byte): DNVector128<UInt32>; overload;
    {class} function Insert(value: DNVector128<Int64>; data: Int64; index: Byte): DNVector128<Int64>; overload;
    {class} function Insert(value: DNVector128<UInt64>; data: UInt64; index: Byte): DNVector128<UInt64>; overload;
    {class} function Insert(value: DNVector128<Single>; data: Single; index: Byte): DNVector128<Single>; overload;
    {class} function Max(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function Max(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function Max(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function Max(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function Min(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function Min(left: DNVector128<UInt16>; right: DNVector128<UInt16>): DNVector128<UInt16>; overload;
    {class} function Min(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function Min(left: DNVector128<UInt32>; right: DNVector128<UInt32>): DNVector128<UInt32>; overload;
    {class} function MinHorizontal(value: DNVector128<UInt16>): DNVector128<UInt16>;
    {class} function MultipleSumAbsoluteDifferences(left: DNVector128<Byte>; right: DNVector128<Byte>; mask: Byte): DNVector128<UInt16>;
    {class} function Multiply(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int64>;
    {class} function MultiplyLow(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>;
    {class} function PackUnsignedSaturate(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<UInt16>;
    {class} function RoundToNearestInteger(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundToNegativeInfinity(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundToPositiveInfinity(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundToZero(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundCurrentDirection(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundToNearestInteger(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function RoundToNegativeInfinity(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function RoundToPositiveInfinity(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function RoundToZero(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function RoundCurrentDirection(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function RoundCurrentDirectionScalar(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function RoundToNearestIntegerScalar(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function RoundToNegativeInfinityScalar(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function RoundToPositiveInfinityScalar(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function RoundToZeroScalar(value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function RoundCurrentDirectionScalar(upper: DNVector128<Double>; value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function RoundToNearestIntegerScalar(upper: DNVector128<Double>; value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function RoundToNegativeInfinityScalar(upper: DNVector128<Double>; value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function RoundToPositiveInfinityScalar(upper: DNVector128<Double>; value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function RoundToZeroScalar(upper: DNVector128<Double>; value: DNVector128<Double>): DNVector128<Double>; overload;
    {class} function RoundCurrentDirectionScalar(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundToNearestIntegerScalar(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundToNegativeInfinityScalar(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundToPositiveInfinityScalar(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundToZeroScalar(value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundCurrentDirectionScalar(upper: DNVector128<Single>; value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundToNearestIntegerScalar(upper: DNVector128<Single>; value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundToNegativeInfinityScalar(upper: DNVector128<Single>; value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundToPositiveInfinityScalar(upper: DNVector128<Single>; value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function RoundToZeroScalar(upper: DNVector128<Single>; value: DNVector128<Single>): DNVector128<Single>; overload;
    {class} function LoadAlignedVector128NonTemporal(address: PSByte): DNVector128<SByte>; overload;
    {class} function LoadAlignedVector128NonTemporal(address: PByte): DNVector128<Byte>; overload;
    {class} function LoadAlignedVector128NonTemporal(address: PInt16): DNVector128<Int16>; overload;
    {class} function LoadAlignedVector128NonTemporal(address: PUInt16): DNVector128<UInt16>; overload;
    {class} function LoadAlignedVector128NonTemporal(address: PInt32): DNVector128<Int32>; overload;
    {class} function LoadAlignedVector128NonTemporal(address: PUInt32): DNVector128<UInt32>; overload;
    {class} function LoadAlignedVector128NonTemporal(address: PInt64): DNVector128<Int64>; overload;
    {class} function LoadAlignedVector128NonTemporal(address: PUInt64): DNVector128<UInt64>; overload;
    {class} function TestAllOnes(value: DNVector128<SByte>): Boolean; overload;
    {class} function TestAllOnes(value: DNVector128<Byte>): Boolean; overload;
    {class} function TestAllOnes(value: DNVector128<Int16>): Boolean; overload;
    {class} function TestAllOnes(value: DNVector128<UInt16>): Boolean; overload;
    {class} function TestAllOnes(value: DNVector128<Int32>): Boolean; overload;
    {class} function TestAllOnes(value: DNVector128<UInt32>): Boolean; overload;
    {class} function TestAllOnes(value: DNVector128<Int64>): Boolean; overload;
    {class} function TestAllOnes(value: DNVector128<UInt64>): Boolean; overload;
    {class} function TestAllZeros(left: DNVector128<SByte>; right: DNVector128<SByte>): Boolean; overload;
    {class} function TestAllZeros(left: DNVector128<Byte>; right: DNVector128<Byte>): Boolean; overload;
    {class} function TestAllZeros(left: DNVector128<Int16>; right: DNVector128<Int16>): Boolean; overload;
    {class} function TestAllZeros(left: DNVector128<UInt16>; right: DNVector128<UInt16>): Boolean; overload;
    {class} function TestAllZeros(left: DNVector128<Int32>; right: DNVector128<Int32>): Boolean; overload;
    {class} function TestAllZeros(left: DNVector128<UInt32>; right: DNVector128<UInt32>): Boolean; overload;
    {class} function TestAllZeros(left: DNVector128<Int64>; right: DNVector128<Int64>): Boolean; overload;
    {class} function TestAllZeros(left: DNVector128<UInt64>; right: DNVector128<UInt64>): Boolean; overload;
    {class} function TestC(left: DNVector128<SByte>; right: DNVector128<SByte>): Boolean; overload;
    {class} function TestC(left: DNVector128<Byte>; right: DNVector128<Byte>): Boolean; overload;
    {class} function TestC(left: DNVector128<Int16>; right: DNVector128<Int16>): Boolean; overload;
    {class} function TestC(left: DNVector128<UInt16>; right: DNVector128<UInt16>): Boolean; overload;
    {class} function TestC(left: DNVector128<Int32>; right: DNVector128<Int32>): Boolean; overload;
    {class} function TestC(left: DNVector128<UInt32>; right: DNVector128<UInt32>): Boolean; overload;
    {class} function TestC(left: DNVector128<Int64>; right: DNVector128<Int64>): Boolean; overload;
    {class} function TestC(left: DNVector128<UInt64>; right: DNVector128<UInt64>): Boolean; overload;
    {class} function TestMixOnesZeros(left: DNVector128<SByte>; right: DNVector128<SByte>): Boolean; overload;
    {class} function TestMixOnesZeros(left: DNVector128<Byte>; right: DNVector128<Byte>): Boolean; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Sse41')]
  DNSse41 = interface(DNObject)
  ['{F90BA0B4-3CD3-3566-AC05-2AA9D47F44AE}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNSse41 = class(TDNGenericImport<DNSse41Class, DNSse41>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNSse42Class = interface(DNObjectClass)
  ['{E00127EF-B87C-5ADC-A1E0-255EB0C9FB67}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function CompareImplicitLength(left: DNVector128<SByte>; right: DNVector128<SByte>; flag: DNResultsFlag; mode: DNStringComparisonMode): Boolean; overload;
    {class} function CompareImplicitLength(left: DNVector128<Byte>; right: DNVector128<Byte>; flag: DNResultsFlag; mode: DNStringComparisonMode): Boolean; overload;
    {class} function CompareImplicitLength(left: DNVector128<Int16>; right: DNVector128<Int16>; flag: DNResultsFlag; mode: DNStringComparisonMode): Boolean; overload;
    {class} function CompareImplicitLength(left: DNVector128<UInt16>; right: DNVector128<UInt16>; flag: DNResultsFlag; mode: DNStringComparisonMode): Boolean; overload;
    {class} function CompareExplicitLength(left: DNVector128<SByte>; leftLength: Byte; right: DNVector128<SByte>; rightLength: Byte; flag: DNResultsFlag; mode: DNStringComparisonMode): Boolean; overload;
    {class} function CompareExplicitLength(left: DNVector128<Byte>; leftLength: Byte; right: DNVector128<Byte>; rightLength: Byte; flag: DNResultsFlag; mode: DNStringComparisonMode): Boolean; overload;
    {class} function CompareExplicitLength(left: DNVector128<Int16>; leftLength: Byte; right: DNVector128<Int16>; rightLength: Byte; flag: DNResultsFlag; mode: DNStringComparisonMode): Boolean; overload;
    {class} function CompareExplicitLength(left: DNVector128<UInt16>; leftLength: Byte; right: DNVector128<UInt16>; rightLength: Byte; flag: DNResultsFlag; mode: DNStringComparisonMode): Boolean; overload;
    {class} function CompareImplicitLengthIndex(left: DNVector128<SByte>; right: DNVector128<SByte>; mode: DNStringComparisonMode): Int32; overload;
    {class} function CompareImplicitLengthIndex(left: DNVector128<Byte>; right: DNVector128<Byte>; mode: DNStringComparisonMode): Int32; overload;
    {class} function CompareImplicitLengthIndex(left: DNVector128<Int16>; right: DNVector128<Int16>; mode: DNStringComparisonMode): Int32; overload;
    {class} function CompareImplicitLengthIndex(left: DNVector128<UInt16>; right: DNVector128<UInt16>; mode: DNStringComparisonMode): Int32; overload;
    {class} function CompareExplicitLengthIndex(left: DNVector128<SByte>; leftLength: Byte; right: DNVector128<SByte>; rightLength: Byte; mode: DNStringComparisonMode): Int32; overload;
    {class} function CompareExplicitLengthIndex(left: DNVector128<Byte>; leftLength: Byte; right: DNVector128<Byte>; rightLength: Byte; mode: DNStringComparisonMode): Int32; overload;
    {class} function CompareExplicitLengthIndex(left: DNVector128<Int16>; leftLength: Byte; right: DNVector128<Int16>; rightLength: Byte; mode: DNStringComparisonMode): Int32; overload;
    {class} function CompareExplicitLengthIndex(left: DNVector128<UInt16>; leftLength: Byte; right: DNVector128<UInt16>; rightLength: Byte; mode: DNStringComparisonMode): Int32; overload;
    {class} function CompareImplicitLengthBitMask(left: DNVector128<SByte>; right: DNVector128<SByte>; mode: DNStringComparisonMode): DNVector128<UInt16>; overload;
    {class} function CompareImplicitLengthBitMask(left: DNVector128<Byte>; right: DNVector128<Byte>; mode: DNStringComparisonMode): DNVector128<UInt16>; overload;
    {class} function CompareImplicitLengthBitMask(left: DNVector128<Int16>; right: DNVector128<Int16>; mode: DNStringComparisonMode): DNVector128<Byte>; overload;
    {class} function CompareImplicitLengthBitMask(left: DNVector128<UInt16>; right: DNVector128<UInt16>; mode: DNStringComparisonMode): DNVector128<Byte>; overload;
    {class} function CompareImplicitLengthUnitMask(left: DNVector128<SByte>; right: DNVector128<SByte>; mode: DNStringComparisonMode): DNVector128<Byte>; overload;
    {class} function CompareImplicitLengthUnitMask(left: DNVector128<Byte>; right: DNVector128<Byte>; mode: DNStringComparisonMode): DNVector128<Byte>; overload;
    {class} function CompareImplicitLengthUnitMask(left: DNVector128<Int16>; right: DNVector128<Int16>; mode: DNStringComparisonMode): DNVector128<UInt16>; overload;
    {class} function CompareImplicitLengthUnitMask(left: DNVector128<UInt16>; right: DNVector128<UInt16>; mode: DNStringComparisonMode): DNVector128<UInt16>; overload;
    {class} function CompareExplicitLengthBitMask(left: DNVector128<SByte>; leftLength: Byte; right: DNVector128<SByte>; rightLength: Byte; mode: DNStringComparisonMode): DNVector128<UInt16>; overload;
    {class} function CompareExplicitLengthBitMask(left: DNVector128<Byte>; leftLength: Byte; right: DNVector128<Byte>; rightLength: Byte; mode: DNStringComparisonMode): DNVector128<UInt16>; overload;
    {class} function CompareExplicitLengthBitMask(left: DNVector128<Int16>; leftLength: Byte; right: DNVector128<Int16>; rightLength: Byte; mode: DNStringComparisonMode): DNVector128<Byte>; overload;
    {class} function CompareExplicitLengthBitMask(left: DNVector128<UInt16>; leftLength: Byte; right: DNVector128<UInt16>; rightLength: Byte; mode: DNStringComparisonMode): DNVector128<Byte>; overload;
    {class} function CompareExplicitLengthUnitMask(left: DNVector128<SByte>; leftLength: Byte; right: DNVector128<SByte>; rightLength: Byte; mode: DNStringComparisonMode): DNVector128<Byte>; overload;
    {class} function CompareExplicitLengthUnitMask(left: DNVector128<Byte>; leftLength: Byte; right: DNVector128<Byte>; rightLength: Byte; mode: DNStringComparisonMode): DNVector128<Byte>; overload;
    {class} function CompareExplicitLengthUnitMask(left: DNVector128<Int16>; leftLength: Byte; right: DNVector128<Int16>; rightLength: Byte; mode: DNStringComparisonMode): DNVector128<UInt16>; overload;
    {class} function CompareExplicitLengthUnitMask(left: DNVector128<UInt16>; leftLength: Byte; right: DNVector128<UInt16>; rightLength: Byte; mode: DNStringComparisonMode): DNVector128<UInt16>; overload;
    {class} function CompareGreaterThan(left: DNVector128<Int64>; right: DNVector128<Int64>): DNVector128<Int64>;
    {class} function Crc32(crc: UInt32; data: Byte): UInt32; overload;
    {class} function Crc32(crc: UInt32; data: UInt16): UInt32; overload;
    {class} function Crc32(crc: UInt32; data: UInt32): UInt32; overload;
    {class} function Crc32(crc: UInt64; data: UInt64): UInt64; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Sse42')]
  DNSse42 = interface(DNObject)
  ['{468D328C-6A8C-3B5A-9FFF-04E98A428201}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNSse42 = class(TDNGenericImport<DNSse42Class, DNSse42>) end;

  //-------------namespace: System.Runtime.Intrinsics.X86----------------
  DNSsse3Class = interface(DNObjectClass)
  ['{55D574D6-071D-564E-BDE4-8D3551840A20}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { static methods } 

    {class} function Abs(value: DNVector128<SByte>): DNVector128<Byte>; overload;
    {class} function Abs(value: DNVector128<Int16>): DNVector128<UInt16>; overload;
    {class} function Abs(value: DNVector128<Int32>): DNVector128<UInt32>; overload;
    {class} function AlignRight(left: DNVector128<SByte>; right: DNVector128<SByte>; mask: Byte): DNVector128<SByte>;
    {class} function HorizontalAdd(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function HorizontalAdd(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function HorizontalAddSaturate(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>;
    {class} function HorizontalSubtract(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function HorizontalSubtract(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;
    {class} function HorizontalSubtractSaturate(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>;
    {class} function MultiplyAddAdjacent(left: DNVector128<Byte>; right: DNVector128<SByte>): DNVector128<Int16>;
    {class} function MultiplyHighRoundScale(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>;
    {class} function Shuffle(value: DNVector128<SByte>; mask: DNVector128<SByte>): DNVector128<SByte>;
    {class} function Sign(left: DNVector128<SByte>; right: DNVector128<SByte>): DNVector128<SByte>; overload;
    {class} function Sign(left: DNVector128<Int16>; right: DNVector128<Int16>): DNVector128<Int16>; overload;
    {class} function Sign(left: DNVector128<Int32>; right: DNVector128<Int32>): DNVector128<Int32>; overload;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Runtime.Intrinsics.X86.Ssse3')]
  DNSsse3 = interface(DNObject)
  ['{70582A22-FF32-3114-9825-216FEB5C78B7}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNSsse3 = class(TDNGenericImport<DNSsse3Class, DNSsse3>) end;

  //-------------namespace: System.Runtime.Loader----------------
  DNAssemblyLoadContextClass = interface(DNObjectClass)
  ['{EA4C2F69-5428-5D58-8A16-2857D43A9548}']
  { static getter & setter } 

    {class} function get_Default: DNAssemblyLoadContext;

  { static methods } 

    {class} function GetLoadedAssemblies: TArray<DNAssembly>;
    {class} function GetAssemblyName(assemblyPath: string): DNAssemblyName;
    {class} function GetLoadContext(assembly: DNAssembly): DNAssemblyLoadContext;

  { static propertys } 

    {class} property &Default: DNAssemblyLoadContext read get_Default;
  end;

  [DNTypeName('System.Runtime.Loader.AssemblyLoadContext')]
  DNAssemblyLoadContext = interface(DNObject)
  ['{D97D8576-2BC1-34DA-A89D-D6FD2A97BF72}']
  { events } 

    procedure add_Resolving(value: DNFunc<DNAssemblyLoadContext, DNAssemblyName, DNAssembly>);
    procedure remove_Resolving(value: DNFunc<DNAssemblyLoadContext, DNAssemblyName, DNAssembly>);
    procedure add_Unloading(value: DNAction<DNAssemblyLoadContext>);
    procedure remove_Unloading(value: DNAction<DNAssemblyLoadContext>);
    {class} procedure add_AssemblyLoad(value: DNAssemblyLoadEventHandler);
    {class} procedure remove_AssemblyLoad(value: DNAssemblyLoadEventHandler);
    {class} procedure add_TypeResolve(value: DNResolveEventHandler);
    {class} procedure remove_TypeResolve(value: DNResolveEventHandler);
    {class} procedure add_ResourceResolve(value: DNResolveEventHandler);
    {class} procedure remove_ResourceResolve(value: DNResolveEventHandler);
    {class} procedure add_AssemblyResolve(value: DNResolveEventHandler);
    {class} procedure remove_AssemblyResolve(value: DNResolveEventHandler);

  { methods } 

    function LoadFromAssemblyPath(assemblyPath: string): DNAssembly;
    function LoadFromNativeImagePath(nativeImagePath: string; assemblyPath: string): DNAssembly;
    function LoadFromStream(assembly: DNStream): DNAssembly; overload;
    function LoadFromStream(assembly: DNStream; assemblySymbols: DNStream): DNAssembly; overload;
    function LoadFromAssemblyName(assemblyName: DNAssemblyName): DNAssembly;
    procedure SetProfileOptimizationRoot(directoryPath: string);
    procedure StartProfileOptimization(profile: string);
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNAssemblyLoadContext = class(TDNGenericImport<DNAssemblyLoadContextClass, DNAssemblyLoadContext>) end;

  //-------------namespace: System.Runtime----------------
  DNRuntimeImportsClass = interface(DNObjectClass)
  ['{412D8D31-136B-5B99-AA52-647CF85BA112}']
  { constructors } 

    {class} function init: DNRuntimeImports;

  end;

  [DNTypeName('System.Runtime.RuntimeImports')]
  DNRuntimeImports = interface(DNObject)
  ['{70940618-EE81-3D68-BBD2-4A24984CDF90}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNRuntimeImports = class(TDNGenericImport<DNRuntimeImportsClass, DNRuntimeImports>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNSerializationInfoClass = interface(DNObjectClass)
  ['{0F117D8C-9978-5E93-9E54-DF28B03A2A63}']
  { constructors } 

    {class} function init(&type: DNType; converter: DNIFormatterConverter): DNSerializationInfo; overload;
    {class} function init(&type: DNType; converter: DNIFormatterConverter; requireSameTokenInPartialTrust: Boolean): DNSerializationInfo; overload;

  end;

  [DNTypeName('System.Runtime.Serialization.SerializationInfo')]
  DNSerializationInfo = interface(DNObject)
  ['{968A3201-9392-381A-88E1-1079995B8756}']
  { getters & setters } 

    function get_FullTypeName: string;
    procedure set_FullTypeName(value: string);
    function get_AssemblyName: string;
    procedure set_AssemblyName(value: string);
    function get_MemberCount: Int32;
    function get_ObjectType: DNType;
    function get_IsFullTypeNameSetExplicit: Boolean;
    function get_IsAssemblyNameSetExplicit: Boolean;

  { methods } 

    procedure SetType(&type: DNType);
    function GetEnumerator: DNSerializationInfoEnumerator;
    procedure AddValue(name: string; value: DNObject; &type: DNType); overload;
    procedure AddValue(name: string; value: DNObject); overload;
    procedure AddValue(name: string; value: Boolean); overload;
    procedure AddValue(name: string; value: Char); overload;
    procedure AddValue(name: string; value: SByte); overload;
    procedure AddValue(name: string; value: Byte); overload;
    procedure AddValue(name: string; value: Int16); overload;
    procedure AddValue(name: string; value: UInt16); overload;
    procedure AddValue(name: string; value: Int32); overload;
    procedure AddValue(name: string; value: UInt32); overload;
    procedure AddValue(name: string; value: Int64); overload;
    procedure AddValue(name: string; value: UInt64); overload;
    procedure AddValue(name: string; value: Single); overload;
    procedure AddValue(name: string; value: Double); overload;
    procedure AddValue(name: string; value: DNDecimal); overload;
    procedure AddValue(name: string; value: DNDateTime); overload;
    procedure UpdateValue(name: string; value: DNObject; &type: DNType);
    function GetValue(name: string; &type: DNType): DNObject;
    function GetBoolean(name: string): Boolean;
    function GetChar(name: string): Char;
    function GetSByte(name: string): SByte;
    function GetByte(name: string): Byte;
    function GetInt16(name: string): Int16;
    function GetUInt16(name: string): UInt16;
    function GetInt32(name: string): Int32;
    function GetUInt32(name: string): UInt32;
    function GetInt64(name: string): Int64;
    function GetUInt64(name: string): UInt64;
    function GetSingle(name: string): Single;
    function GetDouble(name: string): Double;
    function GetDecimal(name: string): DNDecimal;
    function GetDateTime(name: string): DNDateTime;
    function GetString(name: string): string;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property FullTypeName: string read get_FullTypeName write set_FullTypeName;
    property AssemblyName: string read get_AssemblyName write set_AssemblyName;
    property MemberCount: Int32 read get_MemberCount;
    property ObjectType: DNType read get_ObjectType;
    property IsFullTypeNameSetExplicit: Boolean read get_IsFullTypeNameSetExplicit;
    property IsAssemblyNameSetExplicit: Boolean read get_IsAssemblyNameSetExplicit;
  end;

  TDNSerializationInfo = class(TDNGenericImport<DNSerializationInfoClass, DNSerializationInfo>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNSerializationInfoEnumeratorClass = interface(DNObjectClass)
  ['{F7810949-B574-515A-8C20-41B947F5FD23}']
  end;

  [DNTypeName('System.Runtime.Serialization.SerializationInfoEnumerator')]
  DNSerializationInfoEnumerator = interface(DNIEnumerator)
  ['{41ACDBB2-0951-3EAA-9377-DE23DCFC4F45}']
  { getters & setters } 

    function get_Current: DNSerializationEntry;
    function get_Name: string;
    function get_Value: DNObject;
    function get_ObjectType: DNType;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Current: DNSerializationEntry read get_Current;
    property Name: string read get_Name;
    property Value: DNObject read get_Value;
    property ObjectType: DNType read get_ObjectType;
  end;

  TDNSerializationInfoEnumerator = class(TDNGenericImport<DNSerializationInfoEnumeratorClass, DNSerializationInfoEnumerator>) end;

  //-------------namespace: System.Security----------------
  DNSecureStringClass = interface(DNObjectClass)
  ['{D4A8EBB5-D9F8-5258-925A-AD3367D0EF6C}']
  { constructors } 

    {class} function init: DNSecureString; overload;
    {class} function init(value: PChar; length: Int32): DNSecureString; overload;

  end;

  [DNTypeName('System.Security.SecureString')]
  DNSecureString = interface(DNIDisposable)
  ['{EF0E01C4-4828-33F5-A595-3C913915B977}']
  { getters & setters } 

    function get_Length: Int32;

  { methods } 

    procedure AppendChar(c: Char);
    procedure Clear;
    function Copy: DNSecureString;
    procedure Dispose;
    procedure InsertAt(index: Int32; c: Char);
    function IsReadOnly: Boolean;
    procedure MakeReadOnly;
    procedure RemoveAt(index: Int32);
    procedure SetAt(index: Int32; c: Char);
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Length: Int32 read get_Length;
  end;

  TDNSecureString = class(TDNGenericImport<DNSecureStringClass, DNSecureString>) end;

  //-------------namespace: System----------------
  DNStringClass = interface(DNObjectClass)
  ['{92639FC7-2BAD-54B3-B7CC-6FD28EDEB60B}']
  { constructors } 

    {class} function init(value: TArray<Char>): DNString; overload;
    {class} function init(value: TArray<Char>; startIndex: Int32; length: Int32): DNString; overload;
    {class} function init(value: PChar): DNString; overload;
    {class} function init(value: PChar; startIndex: Int32; length: Int32): DNString; overload;
    {class} function init(value: PSByte): DNString; overload;
    {class} function init(value: PSByte; startIndex: Int32; length: Int32): DNString; overload;
    {class} function init(value: PSByte; startIndex: Int32; length: Int32; enc: DNEncoding): DNString; overload;
    {class} function init(c: Char; count: Int32): DNString; overload;
    {class} function init(value: DNReadOnlySpan<Char>): DNString; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: string;

  { static fields } 

    {class} property Empty: string read __fakeFieldGet_Empty;

  { static methods } 

    {class} function Intern(str: string): string;
    {class} function IsInterned(str: string): string;
    {class} function Copy(str: string): string;
    {class} function IsNullOrEmpty(value: string): Boolean;
    {class} function IsNullOrWhiteSpace(value: string): Boolean;
    {class} function Compare(strA: string; strB: string): Int32; overload;
    {class} function Compare(strA: string; strB: string; ignoreCase: Boolean): Int32; overload;
    {class} function Compare(strA: string; strB: string; comparisonType: DNStringComparison): Int32; overload;
    {class} function Compare(strA: string; strB: string; culture: DNCultureInfo; options: DNCompareOptions): Int32; overload;
    {class} function Compare(strA: string; strB: string; ignoreCase: Boolean; culture: DNCultureInfo): Int32; overload;
    {class} function Compare(strA: string; indexA: Int32; strB: string; indexB: Int32; length: Int32): Int32; overload;
    {class} function Compare(strA: string; indexA: Int32; strB: string; indexB: Int32; length: Int32; ignoreCase: Boolean): Int32; overload;
    {class} function Compare(strA: string; indexA: Int32; strB: string; indexB: Int32; length: Int32; ignoreCase: Boolean; culture: DNCultureInfo): Int32; overload;
    {class} function Compare(strA: string; indexA: Int32; strB: string; indexB: Int32; length: Int32; culture: DNCultureInfo; options: DNCompareOptions): Int32; overload;
    {class} function Compare(strA: string; indexA: Int32; strB: string; indexB: Int32; length: Int32; comparisonType: DNStringComparison): Int32; overload;
    {class} function CompareOrdinal(strA: string; strB: string): Int32; overload;
    {class} function CompareOrdinal(strA: string; indexA: Int32; strB: string; indexB: Int32; length: Int32): Int32; overload;
    {class} function Equals(a: string; b: string): Boolean; overload;
    {class} function Equals(a: string; b: string; comparisonType: DNStringComparison): Boolean; overload;
    {class} function Concat(arg0: DNObject): string; overload;
    {class} function Concat(arg0: DNObject; arg1: DNObject): string; overload;
    {class} function Concat(arg0: DNObject; arg1: DNObject; arg2: DNObject): string; overload;
    {class} function Concat(args: TArray<DNObject>): string; overload;
    {class} function Concat(values: DNIEnumerable<string>): string; overload;
    {class} function Concat(str0: string; str1: string): string; overload;
    {class} function Concat(str0: string; str1: string; str2: string): string; overload;
    {class} function Concat(str0: string; str1: string; str2: string; str3: string): string; overload;
    {class} function Concat(values: TArray<string>): string; overload;
    {class} function Format(format: string; arg0: DNObject): string; overload;
    {class} function Format(format: string; arg0: DNObject; arg1: DNObject): string; overload;
    {class} function Format(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject): string; overload;
    {class} function Format(format: string; args: TArray<DNObject>): string; overload;
    {class} function Format(provider: DNIFormatProvider; format: string; arg0: DNObject): string; overload;
    {class} function Format(provider: DNIFormatProvider; format: string; arg0: DNObject; arg1: DNObject): string; overload;
    {class} function Format(provider: DNIFormatProvider; format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject): string; overload;
    {class} function Format(provider: DNIFormatProvider; format: string; args: TArray<DNObject>): string; overload;
    {class} function Join(separator: Char; value: TArray<string>): string; overload;
    {class} function Join(separator: Char; values: TArray<DNObject>): string; overload;
    {class} function Join(separator: Char; value: TArray<string>; startIndex: Int32; count: Int32): string; overload;
    {class} function Join(separator: string; value: TArray<string>): string; overload;
    {class} function Join(separator: string; values: TArray<DNObject>): string; overload;
    {class} function Join(separator: string; values: DNIEnumerable<string>): string; overload;
    {class} function Join(separator: string; value: TArray<string>; startIndex: Int32; count: Int32): string; overload;

  end;

  [DNTypeName('System.String')]
  DNString = interface(DNIComparable)
  ['{E4B989A2-CCA8-35F1-A852-554469460CCD}']
  { getters & setters } 

    function get_Length: Int32;
    function get_Chars(index: Int32): Char;

  { methods } 

    function Clone: DNObject;
    procedure CopyTo(sourceIndex: Int32; destination: TArray<Char>; destinationIndex: Int32; count: Int32);
    function ToCharArray: TArray<Char>; overload;
    function ToCharArray(startIndex: Int32; length: Int32): TArray<Char>; overload;
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function GetEnumerator: DNCharEnumerator;
    function GetTypeCode: DNTypeCode;
    function IsNormalized: Boolean; overload;
    function IsNormalized(normalizationForm: DNNormalizationForm): Boolean; overload;
    function Normalize: string; overload;
    function Normalize(normalizationForm: DNNormalizationForm): string; overload;
    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(strB: string): Int32; overload;
    function EndsWith(value: string): Boolean; overload;
    function EndsWith(value: string; comparisonType: DNStringComparison): Boolean; overload;
    function EndsWith(value: string; ignoreCase: Boolean; culture: DNCultureInfo): Boolean; overload;
    function EndsWith(value: Char): Boolean; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(value: string): Boolean; overload;
    function Equals(value: string; comparisonType: DNStringComparison): Boolean; overload;
    function GetHashCode: Int32; overload;
    function GetHashCode(comparisonType: DNStringComparison): Int32; overload;
    function StartsWith(value: string): Boolean; overload;
    function StartsWith(value: string; comparisonType: DNStringComparison): Boolean; overload;
    function StartsWith(value: string; ignoreCase: Boolean; culture: DNCultureInfo): Boolean; overload;
    function StartsWith(value: Char): Boolean; overload;
    function Insert(startIndex: Int32; value: string): string;
    function PadLeft(totalWidth: Int32): string; overload;
    function PadLeft(totalWidth: Int32; paddingChar: Char): string; overload;
    function PadRight(totalWidth: Int32): string; overload;
    function PadRight(totalWidth: Int32; paddingChar: Char): string; overload;
    function Remove(startIndex: Int32; count: Int32): string; overload;
    function Remove(startIndex: Int32): string; overload;
    function Replace(oldValue: string; newValue: string; ignoreCase: Boolean; culture: DNCultureInfo): string; overload;
    function Replace(oldValue: string; newValue: string; comparisonType: DNStringComparison): string; overload;
    function Replace(oldChar: Char; newChar: Char): string; overload;
    function Replace(oldValue: string; newValue: string): string; overload;
    function Split(separator: Char; options: DNStringSplitOptions): TArray<string>; overload;
    function Split(separator: Char; count: Int32; options: DNStringSplitOptions): TArray<string>; overload;
    function Split(separator: TArray<Char>): TArray<string>; overload;
    function Split(separator: TArray<Char>; count: Int32): TArray<string>; overload;
    function Split(separator: TArray<Char>; options: DNStringSplitOptions): TArray<string>; overload;
    function Split(separator: TArray<Char>; count: Int32; options: DNStringSplitOptions): TArray<string>; overload;
    function Split(separator: string; options: DNStringSplitOptions): TArray<string>; overload;
    function Split(separator: string; count: Int32; options: DNStringSplitOptions): TArray<string>; overload;
    function Split(separator: TArray<string>; options: DNStringSplitOptions): TArray<string>; overload;
    function Split(separator: TArray<string>; count: Int32; options: DNStringSplitOptions): TArray<string>; overload;
    function Substring(startIndex: Int32): string; overload;
    function Substring(startIndex: Int32; length: Int32): string; overload;
    function ToLower: string; overload;
    function ToLower(culture: DNCultureInfo): string; overload;
    function ToLowerInvariant: string;
    function ToUpper: string; overload;
    function ToUpper(culture: DNCultureInfo): string; overload;
    function ToUpperInvariant: string;
    function Trim: string; overload;
    function Trim(trimChar: Char): string; overload;
    function Trim(trimChars: TArray<Char>): string; overload;
    function TrimStart: string; overload;
    function TrimStart(trimChar: Char): string; overload;
    function TrimStart(trimChars: TArray<Char>): string; overload;
    function TrimEnd: string; overload;
    function TrimEnd(trimChar: Char): string; overload;
    function TrimEnd(trimChars: TArray<Char>): string; overload;
    function &Contains(value: string): Boolean; overload;
    function &Contains(value: string; comparisonType: DNStringComparison): Boolean; overload;
    function &Contains(value: Char): Boolean; overload;
    function &Contains(value: Char; comparisonType: DNStringComparison): Boolean; overload;
    function IndexOf(value: Char): Int32; overload;
    function IndexOf(value: Char; startIndex: Int32): Int32; overload;
    function IndexOf(value: Char; comparisonType: DNStringComparison): Int32; overload;
    function IndexOf(value: Char; startIndex: Int32; count: Int32): Int32; overload;
    function IndexOfAny(anyOf: TArray<Char>): Int32; overload;
    function IndexOfAny(anyOf: TArray<Char>; startIndex: Int32): Int32; overload;
    function IndexOfAny(anyOf: TArray<Char>; startIndex: Int32; count: Int32): Int32; overload;
    function IndexOf(value: string): Int32; overload;
    function IndexOf(value: string; startIndex: Int32): Int32; overload;
    function IndexOf(value: string; startIndex: Int32; count: Int32): Int32; overload;
    function IndexOf(value: string; comparisonType: DNStringComparison): Int32; overload;
    function IndexOf(value: string; startIndex: Int32; comparisonType: DNStringComparison): Int32; overload;
    function IndexOf(value: string; startIndex: Int32; count: Int32; comparisonType: DNStringComparison): Int32; overload;
    function LastIndexOf(value: Char): Int32; overload;
    function LastIndexOf(value: Char; startIndex: Int32): Int32; overload;
    function LastIndexOf(value: Char; startIndex: Int32; count: Int32): Int32; overload;
    function LastIndexOfAny(anyOf: TArray<Char>): Int32; overload;
    function LastIndexOfAny(anyOf: TArray<Char>; startIndex: Int32): Int32; overload;
    function LastIndexOfAny(anyOf: TArray<Char>; startIndex: Int32; count: Int32): Int32; overload;
    function LastIndexOf(value: string): Int32; overload;
    function LastIndexOf(value: string; startIndex: Int32): Int32; overload;
    function LastIndexOf(value: string; startIndex: Int32; count: Int32): Int32; overload;
    function LastIndexOf(value: string; comparisonType: DNStringComparison): Int32; overload;
    function LastIndexOf(value: string; startIndex: Int32; comparisonType: DNStringComparison): Int32; overload;
    function LastIndexOf(value: string; startIndex: Int32; count: Int32; comparisonType: DNStringComparison): Int32; overload;
    function GetType: DNType;

  { propertys } 

    property Length: Int32 read get_Length;
    property Chars[index: Int32]: Char read get_Chars; default;
  end;

  TDNString = class(TDNGenericImport<DNStringClass, DNString>) end;

  //-------------namespace: System----------------
  DNStringComparerClass = interface(DNObjectClass)
  ['{BD18ED7D-BE22-52D7-B3D2-E75B9D35700E}']
  { static getter & setter } 

    {class} function get_InvariantCulture: DNStringComparer;
    {class} function get_InvariantCultureIgnoreCase: DNStringComparer;
    {class} function get_CurrentCulture: DNStringComparer;
    {class} function get_CurrentCultureIgnoreCase: DNStringComparer;
    {class} function get_Ordinal: DNStringComparer;
    {class} function get_OrdinalIgnoreCase: DNStringComparer;

  { static methods } 

    {class} function FromComparison(comparisonType: DNStringComparison): DNStringComparer;
    {class} function Create(culture: DNCultureInfo; ignoreCase: Boolean): DNStringComparer; overload;
    {class} function Create(culture: DNCultureInfo; options: DNCompareOptions): DNStringComparer; overload;

  { static propertys } 

    {class} property InvariantCulture: DNStringComparer read get_InvariantCulture;
    {class} property InvariantCultureIgnoreCase: DNStringComparer read get_InvariantCultureIgnoreCase;
    {class} property CurrentCulture: DNStringComparer read get_CurrentCulture;
    {class} property CurrentCultureIgnoreCase: DNStringComparer read get_CurrentCultureIgnoreCase;
    {class} property Ordinal: DNStringComparer read get_Ordinal;
    {class} property OrdinalIgnoreCase: DNStringComparer read get_OrdinalIgnoreCase;
  end;

  [DNTypeName('System.StringComparer')]
  DNStringComparer = interface(DNIComparer)
  ['{9341AD38-2E00-3532-B702-31B276F7C7D6}']
  { methods } 

    function Compare(x: DNObject; y: DNObject): Int32; overload;
    function Equals(x: DNObject; y: DNObject): Boolean; overload;
    function GetHashCode(obj: DNObject): Int32; overload;
    function Compare(x: string; y: string): Int32; overload;
    function Equals(x: string; y: string): Boolean; overload;
    function GetHashCode(obj: string): Int32; overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;
    function GetType: DNType;

  end;

  TDNStringComparer = class(TDNGenericImport<DNStringComparerClass, DNStringComparer>) end;

  //-------------namespace: System----------------
  DNCultureAwareComparerClass = interface(DNStringComparerClass)
  ['{471975B3-D2CE-5794-93DF-8A49AF945B60}']
  end;

  [DNTypeName('System.CultureAwareComparer')]
  DNCultureAwareComparer = interface(DNStringComparer)
  ['{57EBAC54-B0AD-3C27-A488-3B2561A71DD1}']
  { methods } 

    function Compare(x: string; y: string): Int32; overload;
    function Equals(x: string; y: string): Boolean; overload;
    function GetHashCode(obj: string): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function Compare(x: DNObject; y: DNObject): Int32; overload;
    function Equals(x: DNObject; y: DNObject): Boolean; overload;
    function GetHashCode(obj: DNObject): Int32; overload;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNCultureAwareComparer = class(TDNGenericImport<DNCultureAwareComparerClass, DNCultureAwareComparer>) end;

  //-------------namespace: System----------------
  DNOrdinalComparerClass = interface(DNStringComparerClass)
  ['{F7542723-2D6F-5318-A6C0-9DF597C860CA}']
  end;

  [DNTypeName('System.OrdinalComparer')]
  DNOrdinalComparer = interface(DNStringComparer)
  ['{9F7245AA-C9E1-3D7E-BF14-CA5DB15A6CF5}']
  { methods } 

    function Compare(x: string; y: string): Int32; overload;
    function Equals(x: string; y: string): Boolean; overload;
    function GetHashCode(obj: string): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;
    function Compare(x: DNObject; y: DNObject): Int32; overload;
    function Equals(x: DNObject; y: DNObject): Boolean; overload;
    function GetHashCode(obj: DNObject): Int32; overload;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNOrdinalComparer = class(TDNGenericImport<DNOrdinalComparerClass, DNOrdinalComparer>) end;

  //-------------namespace: System.Text----------------
  DNDecoderClass = interface(DNObjectClass)
  ['{6C4312C7-4FEC-5BF9-AE10-7A1347264D0C}']
  end;

  [DNTypeName('System.Text.Decoder')]
  DNDecoder = interface(DNObject)
  ['{837F98DF-C6C6-39C1-AA80-0863EC1DB7F9}']
  { getters & setters } 

    function get_Fallback: DNDecoderFallback;
    procedure set_Fallback(value: DNDecoderFallback);
    function get_FallbackBuffer: DNDecoderFallbackBuffer;

  { methods } 

    procedure Reset;
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32; flush: Boolean): Int32; overload;
    function GetCharCount(bytes: PByte; count: Int32; flush: Boolean): Int32; overload;
    function GetCharCount(bytes: DNReadOnlySpan<Byte>; flush: Boolean): Int32; overload;
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32): Int32; overload;
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32; flush: Boolean): Int32; overload;
    function GetChars(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32; flush: Boolean): Int32; overload;
    function GetChars(bytes: DNReadOnlySpan<Byte>; chars: DNSpan<Char>; flush: Boolean): Int32; overload;
    procedure Convert(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32; charCount: Int32; flush: Boolean; out bytesUsed: Int32; out charsUsed: Int32; out completed: Boolean); overload;
    procedure Convert(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32; flush: Boolean; out bytesUsed: Int32; out charsUsed: Int32; out completed: Boolean); overload;
    procedure Convert(bytes: DNReadOnlySpan<Byte>; chars: DNSpan<Char>; flush: Boolean; out bytesUsed: Int32; out charsUsed: Int32; out completed: Boolean); overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Fallback: DNDecoderFallback read get_Fallback write set_Fallback;
    property FallbackBuffer: DNDecoderFallbackBuffer read get_FallbackBuffer;
  end;

  TDNDecoder = class(TDNGenericImport<DNDecoderClass, DNDecoder>) end;

  //-------------namespace: System.Text----------------
  DNDecoderFallbackClass = interface(DNObjectClass)
  ['{FAACB2B6-DBA1-5B06-BA69-DBA17E9030B7}']
  { static getter & setter } 

    {class} function get_ReplacementFallback: DNDecoderFallback;
    {class} function get_ExceptionFallback: DNDecoderFallback;

  { static propertys } 

    {class} property ReplacementFallback: DNDecoderFallback read get_ReplacementFallback;
    {class} property ExceptionFallback: DNDecoderFallback read get_ExceptionFallback;
  end;

  [DNTypeName('System.Text.DecoderFallback')]
  DNDecoderFallback = interface(DNObject)
  ['{212A1DBD-1E17-32E0-8F33-FC2C864EE954}']
  { getters & setters } 

    function get_MaxCharCount: Int32;

  { methods } 

    function CreateFallbackBuffer: DNDecoderFallbackBuffer;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property MaxCharCount: Int32 read get_MaxCharCount;
  end;

  TDNDecoderFallback = class(TDNGenericImport<DNDecoderFallbackClass, DNDecoderFallback>) end;

  //-------------namespace: System.Text----------------
  DNDecoderExceptionFallbackClass = interface(DNDecoderFallbackClass)
  ['{9B835705-B886-50C4-8B46-0BD4D57FEF58}']
  { constructors } 

    {class} function init: DNDecoderExceptionFallback;

  end;

  [DNTypeName('System.Text.DecoderExceptionFallback')]
  DNDecoderExceptionFallback = interface(DNDecoderFallback)
  ['{6DA6A65E-295F-397B-AEBD-A984AAD14C7E}']
  { getters & setters } 

    function get_MaxCharCount: Int32;

  { methods } 

    function CreateFallbackBuffer: DNDecoderFallbackBuffer;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property MaxCharCount: Int32 read get_MaxCharCount;
  end;

  TDNDecoderExceptionFallback = class(TDNGenericImport<DNDecoderExceptionFallbackClass, DNDecoderExceptionFallback>) end;

  //-------------namespace: System.Text----------------
  DNDecoderReplacementFallbackClass = interface(DNDecoderFallbackClass)
  ['{48459FFA-5966-5AF0-8433-DACB4C7D49C3}']
  { constructors } 

    {class} function init: DNDecoderReplacementFallback; overload;
    {class} function init(replacement: string): DNDecoderReplacementFallback; overload;

  end;

  [DNTypeName('System.Text.DecoderReplacementFallback')]
  DNDecoderReplacementFallback = interface(DNDecoderFallback)
  ['{4D13660A-21F9-3184-9531-4792EFB7778E}']
  { getters & setters } 

    function get_DefaultString: string;
    function get_MaxCharCount: Int32;

  { methods } 

    function CreateFallbackBuffer: DNDecoderFallbackBuffer;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property DefaultString: string read get_DefaultString;
    property MaxCharCount: Int32 read get_MaxCharCount;
  end;

  TDNDecoderReplacementFallback = class(TDNGenericImport<DNDecoderReplacementFallbackClass, DNDecoderReplacementFallback>) end;

  //-------------namespace: System.Text----------------
  DNDecoderFallbackBufferClass = interface(DNObjectClass)
  ['{C410C4B0-CC49-5A59-9F40-05DB0CD5EA03}']
  end;

  [DNTypeName('System.Text.DecoderFallbackBuffer')]
  DNDecoderFallbackBuffer = interface(DNObject)
  ['{E3402B6B-3BEA-386B-821C-9DD187336235}']
  { getters & setters } 

    function get_Remaining: Int32;

  { methods } 

    function Fallback(bytesUnknown: TArray<Byte>; index: Int32): Boolean;
    function GetNextChar: Char;
    function MovePrevious: Boolean;
    procedure Reset;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Remaining: Int32 read get_Remaining;
  end;

  TDNDecoderFallbackBuffer = class(TDNGenericImport<DNDecoderFallbackBufferClass, DNDecoderFallbackBuffer>) end;

  //-------------namespace: System.Text----------------
  DNDecoderExceptionFallbackBufferClass = interface(DNDecoderFallbackBufferClass)
  ['{412979DE-A6AF-5B2E-8FF4-BEB8493C5FCA}']
  { constructors } 

    {class} function init: DNDecoderExceptionFallbackBuffer;

  end;

  [DNTypeName('System.Text.DecoderExceptionFallbackBuffer')]
  DNDecoderExceptionFallbackBuffer = interface(DNDecoderFallbackBuffer)
  ['{AF3E0C98-2C4A-3E9F-8D54-5589E684424D}']
  { getters & setters } 

    function get_Remaining: Int32;

  { methods } 

    function Fallback(bytesUnknown: TArray<Byte>; index: Int32): Boolean;
    function GetNextChar: Char;
    function MovePrevious: Boolean;
    procedure Reset;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Remaining: Int32 read get_Remaining;
  end;

  TDNDecoderExceptionFallbackBuffer = class(TDNGenericImport<DNDecoderExceptionFallbackBufferClass, DNDecoderExceptionFallbackBuffer>) end;

  //-------------namespace: System.Text----------------
  DNDecoderReplacementFallbackBufferClass = interface(DNDecoderFallbackBufferClass)
  ['{528DD715-D194-57F1-B88B-51C574028AE7}']
  { constructors } 

    {class} function init(fallback: DNDecoderReplacementFallback): DNDecoderReplacementFallbackBuffer;

  end;

  [DNTypeName('System.Text.DecoderReplacementFallbackBuffer')]
  DNDecoderReplacementFallbackBuffer = interface(DNDecoderFallbackBuffer)
  ['{E3544722-F45A-3326-9D3D-40C18F838527}']
  { getters & setters } 

    function get_Remaining: Int32;

  { methods } 

    function Fallback(bytesUnknown: TArray<Byte>; index: Int32): Boolean;
    function GetNextChar: Char;
    function MovePrevious: Boolean;
    procedure Reset;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Remaining: Int32 read get_Remaining;
  end;

  TDNDecoderReplacementFallbackBuffer = class(TDNGenericImport<DNDecoderReplacementFallbackBufferClass, DNDecoderReplacementFallbackBuffer>) end;

  //-------------namespace: System.Text----------------
  DNEncoderClass = interface(DNObjectClass)
  ['{2E69DD03-D813-502D-A92B-4FE27F4FCCC0}']
  end;

  [DNTypeName('System.Text.Encoder')]
  DNEncoder = interface(DNObject)
  ['{666B0F62-9ABA-38BD-AC64-C0442A2A5B75}']
  { getters & setters } 

    function get_Fallback: DNEncoderFallback;
    procedure set_Fallback(value: DNEncoderFallback);
    function get_FallbackBuffer: DNEncoderFallbackBuffer;

  { methods } 

    procedure Reset;
    function GetByteCount(chars: TArray<Char>; index: Int32; count: Int32; flush: Boolean): Int32; overload;
    function GetByteCount(chars: PChar; count: Int32; flush: Boolean): Int32; overload;
    function GetByteCount(chars: DNReadOnlySpan<Char>; flush: Boolean): Int32; overload;
    function GetBytes(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32; flush: Boolean): Int32; overload;
    function GetBytes(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32; flush: Boolean): Int32; overload;
    function GetBytes(chars: DNReadOnlySpan<Char>; bytes: DNSpan<Byte>; flush: Boolean): Int32; overload;
    procedure Convert(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; flush: Boolean; out charsUsed: Int32; out bytesUsed: Int32; out completed: Boolean); overload;
    procedure Convert(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32; flush: Boolean; out charsUsed: Int32; out bytesUsed: Int32; out completed: Boolean); overload;
    procedure Convert(chars: DNReadOnlySpan<Char>; bytes: DNSpan<Byte>; flush: Boolean; out charsUsed: Int32; out bytesUsed: Int32; out completed: Boolean); overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Fallback: DNEncoderFallback read get_Fallback write set_Fallback;
    property FallbackBuffer: DNEncoderFallbackBuffer read get_FallbackBuffer;
  end;

  TDNEncoder = class(TDNGenericImport<DNEncoderClass, DNEncoder>) end;

  //-------------namespace: System.Text----------------
  DNEncoderFallbackClass = interface(DNObjectClass)
  ['{96214E59-16AB-54F5-963B-A9116CD6B126}']
  { static getter & setter } 

    {class} function get_ReplacementFallback: DNEncoderFallback;
    {class} function get_ExceptionFallback: DNEncoderFallback;

  { static propertys } 

    {class} property ReplacementFallback: DNEncoderFallback read get_ReplacementFallback;
    {class} property ExceptionFallback: DNEncoderFallback read get_ExceptionFallback;
  end;

  [DNTypeName('System.Text.EncoderFallback')]
  DNEncoderFallback = interface(DNObject)
  ['{46EE8E62-0359-3234-BFBC-FE82F8998B57}']
  { getters & setters } 

    function get_MaxCharCount: Int32;

  { methods } 

    function CreateFallbackBuffer: DNEncoderFallbackBuffer;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property MaxCharCount: Int32 read get_MaxCharCount;
  end;

  TDNEncoderFallback = class(TDNGenericImport<DNEncoderFallbackClass, DNEncoderFallback>) end;

  //-------------namespace: System.Text----------------
  DNEncoderExceptionFallbackClass = interface(DNEncoderFallbackClass)
  ['{329D584E-C96E-533B-AA89-1D6A8B970B1F}']
  { constructors } 

    {class} function init: DNEncoderExceptionFallback;

  end;

  [DNTypeName('System.Text.EncoderExceptionFallback')]
  DNEncoderExceptionFallback = interface(DNEncoderFallback)
  ['{A2C0E990-D535-3B81-8479-26CCF38AE7F3}']
  { getters & setters } 

    function get_MaxCharCount: Int32;

  { methods } 

    function CreateFallbackBuffer: DNEncoderFallbackBuffer;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property MaxCharCount: Int32 read get_MaxCharCount;
  end;

  TDNEncoderExceptionFallback = class(TDNGenericImport<DNEncoderExceptionFallbackClass, DNEncoderExceptionFallback>) end;

  //-------------namespace: System.Text----------------
  DNEncoderReplacementFallbackClass = interface(DNEncoderFallbackClass)
  ['{418D4A85-C515-5105-BCED-755A70353B40}']
  { constructors } 

    {class} function init: DNEncoderReplacementFallback; overload;
    {class} function init(replacement: string): DNEncoderReplacementFallback; overload;

  end;

  [DNTypeName('System.Text.EncoderReplacementFallback')]
  DNEncoderReplacementFallback = interface(DNEncoderFallback)
  ['{2C5CA586-88C1-3C74-802C-6266A668E6E9}']
  { getters & setters } 

    function get_DefaultString: string;
    function get_MaxCharCount: Int32;

  { methods } 

    function CreateFallbackBuffer: DNEncoderFallbackBuffer;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property DefaultString: string read get_DefaultString;
    property MaxCharCount: Int32 read get_MaxCharCount;
  end;

  TDNEncoderReplacementFallback = class(TDNGenericImport<DNEncoderReplacementFallbackClass, DNEncoderReplacementFallback>) end;

  //-------------namespace: System.Text----------------
  DNEncoderFallbackBufferClass = interface(DNObjectClass)
  ['{55F29A21-BFBF-5F52-AF4F-43386B4A05B7}']
  end;

  [DNTypeName('System.Text.EncoderFallbackBuffer')]
  DNEncoderFallbackBuffer = interface(DNObject)
  ['{4AA1426D-5A99-394F-9CE9-9C249AB594F0}']
  { getters & setters } 

    function get_Remaining: Int32;

  { methods } 

    function Fallback(charUnknown: Char; index: Int32): Boolean; overload;
    function Fallback(charUnknownHigh: Char; charUnknownLow: Char; index: Int32): Boolean; overload;
    function GetNextChar: Char;
    function MovePrevious: Boolean;
    procedure Reset;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Remaining: Int32 read get_Remaining;
  end;

  TDNEncoderFallbackBuffer = class(TDNGenericImport<DNEncoderFallbackBufferClass, DNEncoderFallbackBuffer>) end;

  //-------------namespace: System.Text----------------
  DNEncoderExceptionFallbackBufferClass = interface(DNEncoderFallbackBufferClass)
  ['{9133ACA6-FB23-5099-BE95-29CF2D88AC54}']
  { constructors } 

    {class} function init: DNEncoderExceptionFallbackBuffer;

  end;

  [DNTypeName('System.Text.EncoderExceptionFallbackBuffer')]
  DNEncoderExceptionFallbackBuffer = interface(DNEncoderFallbackBuffer)
  ['{C3E6B392-2BE2-3254-9CB8-356569B25EF1}']
  { getters & setters } 

    function get_Remaining: Int32;

  { methods } 

    function Fallback(charUnknown: Char; index: Int32): Boolean; overload;
    function Fallback(charUnknownHigh: Char; charUnknownLow: Char; index: Int32): Boolean; overload;
    function GetNextChar: Char;
    function MovePrevious: Boolean;
    procedure Reset;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Remaining: Int32 read get_Remaining;
  end;

  TDNEncoderExceptionFallbackBuffer = class(TDNGenericImport<DNEncoderExceptionFallbackBufferClass, DNEncoderExceptionFallbackBuffer>) end;

  //-------------namespace: System.Text----------------
  DNEncoderReplacementFallbackBufferClass = interface(DNEncoderFallbackBufferClass)
  ['{73DF73CB-AEFB-5680-821C-742D109FD152}']
  { constructors } 

    {class} function init(fallback: DNEncoderReplacementFallback): DNEncoderReplacementFallbackBuffer;

  end;

  [DNTypeName('System.Text.EncoderReplacementFallbackBuffer')]
  DNEncoderReplacementFallbackBuffer = interface(DNEncoderFallbackBuffer)
  ['{30BABD3D-D635-33AB-BE6F-B059F1DEA171}']
  { getters & setters } 

    function get_Remaining: Int32;

  { methods } 

    function Fallback(charUnknown: Char; index: Int32): Boolean; overload;
    function Fallback(charUnknownHigh: Char; charUnknownLow: Char; index: Int32): Boolean; overload;
    function GetNextChar: Char;
    function MovePrevious: Boolean;
    procedure Reset;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Remaining: Int32 read get_Remaining;
  end;

  TDNEncoderReplacementFallbackBuffer = class(TDNGenericImport<DNEncoderReplacementFallbackBufferClass, DNEncoderReplacementFallbackBuffer>) end;

  //-------------namespace: System.Text----------------
  DNEncodingClass = interface(DNObjectClass)
  ['{D2B3BCEE-3E96-5C05-BF7F-34579E7D9E0F}']
  { static getter & setter } 

    {class} function get_Default: DNEncoding;
    {class} function get_ASCII: DNEncoding;
    {class} function get_Unicode: DNEncoding;
    {class} function get_BigEndianUnicode: DNEncoding;
    {class} function get_UTF7: DNEncoding;
    {class} function get_UTF8: DNEncoding;
    {class} function get_UTF32: DNEncoding;

  { static methods } 

    {class} function Convert(srcEncoding: DNEncoding; dstEncoding: DNEncoding; bytes: TArray<Byte>): TArray<Byte>; overload;
    {class} function Convert(srcEncoding: DNEncoding; dstEncoding: DNEncoding; bytes: TArray<Byte>; index: Int32; count: Int32): TArray<Byte>; overload;
    {class} procedure RegisterProvider(provider: DNEncodingProvider);
    {class} function GetEncoding(codepage: Int32): DNEncoding; overload;
    {class} function GetEncoding(codepage: Int32; encoderFallback: DNEncoderFallback; decoderFallback: DNDecoderFallback): DNEncoding; overload;
    {class} function GetEncoding(name: string): DNEncoding; overload;
    {class} function GetEncoding(name: string; encoderFallback: DNEncoderFallback; decoderFallback: DNDecoderFallback): DNEncoding; overload;
    {class} function GetEncodings: TArray<DNEncodingInfo>;

  { static propertys } 

    {class} property &Default: DNEncoding read get_Default;
    {class} property ASCII: DNEncoding read get_ASCII;
    {class} property Unicode: DNEncoding read get_Unicode;
    {class} property BigEndianUnicode: DNEncoding read get_BigEndianUnicode;
    {class} property UTF7: DNEncoding read get_UTF7;
    {class} property UTF8: DNEncoding read get_UTF8;
    {class} property UTF32: DNEncoding read get_UTF32;
  end;

  [DNTypeName('System.Text.Encoding')]
  DNEncoding = interface(DNICloneable)
  ['{5A044842-2634-3422-A814-E047123B3363}']
  { getters & setters } 

    function get_Preamble: DNReadOnlySpan<Byte>;
    function get_BodyName: string;
    function get_EncodingName: string;
    function get_HeaderName: string;
    function get_WebName: string;
    function get_WindowsCodePage: Int32;
    function get_IsBrowserDisplay: Boolean;
    function get_IsBrowserSave: Boolean;
    function get_IsMailNewsDisplay: Boolean;
    function get_IsMailNewsSave: Boolean;
    function get_IsSingleByte: Boolean;
    function get_EncoderFallback: DNEncoderFallback;
    procedure set_EncoderFallback(value: DNEncoderFallback);
    function get_DecoderFallback: DNDecoderFallback;
    procedure set_DecoderFallback(value: DNDecoderFallback);
    function get_IsReadOnly: Boolean;
    function get_CodePage: Int32;

  { methods } 

    function GetPreamble: TArray<Byte>;
    function Clone: DNObject;
    function GetByteCount(chars: TArray<Char>): Int32; overload;
    function GetByteCount(s: string): Int32; overload;
    function GetByteCount(chars: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function GetByteCount(s: string; index: Int32; count: Int32): Int32; overload;
    function GetByteCount(chars: PChar; count: Int32): Int32; overload;
    function GetByteCount(chars: DNReadOnlySpan<Char>): Int32; overload;
    function GetBytes(chars: TArray<Char>): TArray<Byte>; overload;
    function GetBytes(chars: TArray<Char>; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(s: string): TArray<Byte>; overload;
    function GetBytes(s: string; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(s: string; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32): Int32; overload;
    function GetBytes(chars: DNReadOnlySpan<Char>; bytes: DNSpan<Byte>): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    function GetCharCount(bytes: PByte; count: Int32): Int32; overload;
    function GetCharCount(bytes: DNReadOnlySpan<Byte>): Int32; overload;
    function GetChars(bytes: TArray<Byte>): TArray<Char>; overload;
    function GetChars(bytes: TArray<Byte>; index: Int32; count: Int32): TArray<Char>; overload;
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32): Int32; overload;
    function GetChars(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32): Int32; overload;
    function GetChars(bytes: DNReadOnlySpan<Byte>; chars: DNSpan<Char>): Int32; overload;
    function GetString(bytes: PByte; byteCount: Int32): string; overload;
    function GetString(bytes: DNReadOnlySpan<Byte>): string; overload;
    function IsAlwaysNormalized: Boolean; overload;
    function IsAlwaysNormalized(form: DNNormalizationForm): Boolean; overload;
    function GetDecoder: DNDecoder;
    function GetEncoder: DNEncoder;
    function GetMaxByteCount(charCount: Int32): Int32;
    function GetMaxCharCount(byteCount: Int32): Int32;
    function GetString(bytes: TArray<Byte>): string; overload;
    function GetString(bytes: TArray<Byte>; index: Int32; count: Int32): string; overload;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Preamble: DNReadOnlySpan<Byte> read get_Preamble;
    property BodyName: string read get_BodyName;
    property EncodingName: string read get_EncodingName;
    property HeaderName: string read get_HeaderName;
    property WebName: string read get_WebName;
    property WindowsCodePage: Int32 read get_WindowsCodePage;
    property IsBrowserDisplay: Boolean read get_IsBrowserDisplay;
    property IsBrowserSave: Boolean read get_IsBrowserSave;
    property IsMailNewsDisplay: Boolean read get_IsMailNewsDisplay;
    property IsMailNewsSave: Boolean read get_IsMailNewsSave;
    property IsSingleByte: Boolean read get_IsSingleByte;
    property EncoderFallback: DNEncoderFallback read get_EncoderFallback write set_EncoderFallback;
    property DecoderFallback: DNDecoderFallback read get_DecoderFallback write set_DecoderFallback;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property CodePage: Int32 read get_CodePage;
  end;

  TDNEncoding = class(TDNGenericImport<DNEncodingClass, DNEncoding>) end;

  //-------------namespace: System.Text----------------
  DNASCIIEncodingClass = interface(DNEncodingClass)
  ['{E56AA763-EF2F-5F03-B54A-2BD3F3AB2BD0}']
  { constructors } 

    {class} function init: DNASCIIEncoding;

  end;

  [DNTypeName('System.Text.ASCIIEncoding')]
  DNASCIIEncoding = interface(DNEncoding)
  ['{52A584DE-3657-3174-97B2-D897640315C4}']
  { getters & setters } 

    function get_IsSingleByte: Boolean;
    function get_Preamble: DNReadOnlySpan<Byte>;
    function get_BodyName: string;
    function get_EncodingName: string;
    function get_HeaderName: string;
    function get_WebName: string;
    function get_WindowsCodePage: Int32;
    function get_IsBrowserDisplay: Boolean;
    function get_IsBrowserSave: Boolean;
    function get_IsMailNewsDisplay: Boolean;
    function get_IsMailNewsSave: Boolean;
    function get_EncoderFallback: DNEncoderFallback;
    procedure set_EncoderFallback(value: DNEncoderFallback);
    function get_DecoderFallback: DNDecoderFallback;
    procedure set_DecoderFallback(value: DNDecoderFallback);
    function get_IsReadOnly: Boolean;
    function get_CodePage: Int32;

  { methods } 

    function GetByteCount(chars: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function GetByteCount(chars: string): Int32; overload;
    function GetByteCount(chars: PChar; count: Int32): Int32; overload;
    function GetBytes(chars: string; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    function GetCharCount(bytes: PByte; count: Int32): Int32; overload;
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32): Int32; overload;
    function GetChars(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32): Int32; overload;
    function GetString(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32): string; overload;
    function GetMaxByteCount(charCount: Int32): Int32;
    function GetMaxCharCount(byteCount: Int32): Int32;
    function GetDecoder: DNDecoder;
    function GetEncoder: DNEncoder;
    function GetPreamble: TArray<Byte>;
    function Clone: DNObject;
    function GetByteCount(chars: TArray<Char>): Int32; overload;
    function GetByteCount(s: string; index: Int32; count: Int32): Int32; overload;
    function GetByteCount(chars: DNReadOnlySpan<Char>): Int32; overload;
    function GetBytes(chars: TArray<Char>): TArray<Byte>; overload;
    function GetBytes(chars: TArray<Char>; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(s: string): TArray<Byte>; overload;
    function GetBytes(s: string; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(chars: DNReadOnlySpan<Char>; bytes: DNSpan<Byte>): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>): Int32; overload;
    function GetCharCount(bytes: DNReadOnlySpan<Byte>): Int32; overload;
    function GetChars(bytes: TArray<Byte>): TArray<Char>; overload;
    function GetChars(bytes: TArray<Byte>; index: Int32; count: Int32): TArray<Char>; overload;
    function GetChars(bytes: DNReadOnlySpan<Byte>; chars: DNSpan<Char>): Int32; overload;
    function GetString(bytes: PByte; byteCount: Int32): string; overload;
    function GetString(bytes: DNReadOnlySpan<Byte>): string; overload;
    function IsAlwaysNormalized: Boolean; overload;
    function IsAlwaysNormalized(form: DNNormalizationForm): Boolean; overload;
    function GetString(bytes: TArray<Byte>): string; overload;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property IsSingleByte: Boolean read get_IsSingleByte;
    property Preamble: DNReadOnlySpan<Byte> read get_Preamble;
    property BodyName: string read get_BodyName;
    property EncodingName: string read get_EncodingName;
    property HeaderName: string read get_HeaderName;
    property WebName: string read get_WebName;
    property WindowsCodePage: Int32 read get_WindowsCodePage;
    property IsBrowserDisplay: Boolean read get_IsBrowserDisplay;
    property IsBrowserSave: Boolean read get_IsBrowserSave;
    property IsMailNewsDisplay: Boolean read get_IsMailNewsDisplay;
    property IsMailNewsSave: Boolean read get_IsMailNewsSave;
    property EncoderFallback: DNEncoderFallback read get_EncoderFallback write set_EncoderFallback;
    property DecoderFallback: DNDecoderFallback read get_DecoderFallback write set_DecoderFallback;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property CodePage: Int32 read get_CodePage;
  end;

  TDNASCIIEncoding = class(TDNGenericImport<DNASCIIEncodingClass, DNASCIIEncoding>) end;

  //-------------namespace: System.Text----------------
  DNUnicodeEncodingClass = interface(DNEncodingClass)
  ['{77E24C54-6A3D-5231-882D-7C4C8516D608}']
  { constructors } 

    {class} function init: DNUnicodeEncoding; overload;
    {class} function init(bigEndian: Boolean; byteOrderMark: Boolean): DNUnicodeEncoding; overload;
    {class} function init(bigEndian: Boolean; byteOrderMark: Boolean; throwOnInvalidBytes: Boolean): DNUnicodeEncoding; overload;

  end;

  [DNTypeName('System.Text.UnicodeEncoding')]
  DNUnicodeEncoding = interface(DNEncoding)
  ['{73BFE7D8-19AC-3B04-BCC6-01E25F99669F}']
  { getters & setters } 

    function get_Preamble: DNReadOnlySpan<Byte>;
    function get_BodyName: string;
    function get_EncodingName: string;
    function get_HeaderName: string;
    function get_WebName: string;
    function get_WindowsCodePage: Int32;
    function get_IsBrowserDisplay: Boolean;
    function get_IsBrowserSave: Boolean;
    function get_IsMailNewsDisplay: Boolean;
    function get_IsMailNewsSave: Boolean;
    function get_IsSingleByte: Boolean;
    function get_EncoderFallback: DNEncoderFallback;
    procedure set_EncoderFallback(value: DNEncoderFallback);
    function get_DecoderFallback: DNDecoderFallback;
    procedure set_DecoderFallback(value: DNDecoderFallback);
    function get_IsReadOnly: Boolean;
    function get_CodePage: Int32;

  { methods } 

    function GetByteCount(chars: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function GetByteCount(s: string): Int32; overload;
    function GetByteCount(chars: PChar; count: Int32): Int32; overload;
    function GetBytes(s: string; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    function GetCharCount(bytes: PByte; count: Int32): Int32; overload;
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32): Int32; overload;
    function GetChars(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32): Int32; overload;
    function GetString(bytes: TArray<Byte>; index: Int32; count: Int32): string; overload;
    function GetEncoder: DNEncoder;
    function GetDecoder: DNDecoder;
    function GetPreamble: TArray<Byte>;
    function GetMaxByteCount(charCount: Int32): Int32;
    function GetMaxCharCount(byteCount: Int32): Int32;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function Clone: DNObject;
    function GetByteCount(chars: TArray<Char>): Int32; overload;
    function GetByteCount(s: string; index: Int32; count: Int32): Int32; overload;
    function GetByteCount(chars: DNReadOnlySpan<Char>): Int32; overload;
    function GetBytes(chars: TArray<Char>): TArray<Byte>; overload;
    function GetBytes(chars: TArray<Char>; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(s: string): TArray<Byte>; overload;
    function GetBytes(s: string; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(chars: DNReadOnlySpan<Char>; bytes: DNSpan<Byte>): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>): Int32; overload;
    function GetCharCount(bytes: DNReadOnlySpan<Byte>): Int32; overload;
    function GetChars(bytes: TArray<Byte>): TArray<Char>; overload;
    function GetChars(bytes: TArray<Byte>; index: Int32; count: Int32): TArray<Char>; overload;
    function GetChars(bytes: DNReadOnlySpan<Byte>; chars: DNSpan<Char>): Int32; overload;
    function GetString(bytes: PByte; byteCount: Int32): string; overload;
    function GetString(bytes: DNReadOnlySpan<Byte>): string; overload;
    function IsAlwaysNormalized: Boolean; overload;
    function IsAlwaysNormalized(form: DNNormalizationForm): Boolean; overload;
    function GetString(bytes: TArray<Byte>): string; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Preamble: DNReadOnlySpan<Byte> read get_Preamble;
    property BodyName: string read get_BodyName;
    property EncodingName: string read get_EncodingName;
    property HeaderName: string read get_HeaderName;
    property WebName: string read get_WebName;
    property WindowsCodePage: Int32 read get_WindowsCodePage;
    property IsBrowserDisplay: Boolean read get_IsBrowserDisplay;
    property IsBrowserSave: Boolean read get_IsBrowserSave;
    property IsMailNewsDisplay: Boolean read get_IsMailNewsDisplay;
    property IsMailNewsSave: Boolean read get_IsMailNewsSave;
    property IsSingleByte: Boolean read get_IsSingleByte;
    property EncoderFallback: DNEncoderFallback read get_EncoderFallback write set_EncoderFallback;
    property DecoderFallback: DNDecoderFallback read get_DecoderFallback write set_DecoderFallback;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property CodePage: Int32 read get_CodePage;
  end;

  TDNUnicodeEncoding = class(TDNGenericImport<DNUnicodeEncodingClass, DNUnicodeEncoding>)
  public const
   CharSize = 2;
  end;

  //-------------namespace: System.Text----------------
  DNUTF32EncodingClass = interface(DNEncodingClass)
  ['{EA718456-AEF5-596C-A801-421D08BA780F}']
  { constructors } 

    {class} function init: DNUTF32Encoding; overload;
    {class} function init(bigEndian: Boolean; byteOrderMark: Boolean): DNUTF32Encoding; overload;
    {class} function init(bigEndian: Boolean; byteOrderMark: Boolean; throwOnInvalidCharacters: Boolean): DNUTF32Encoding; overload;

  end;

  [DNTypeName('System.Text.UTF32Encoding')]
  DNUTF32Encoding = interface(DNEncoding)
  ['{D9098B7E-C662-32B8-B3BE-5CC39EC86DB3}']
  { getters & setters } 

    function get_Preamble: DNReadOnlySpan<Byte>;
    function get_BodyName: string;
    function get_EncodingName: string;
    function get_HeaderName: string;
    function get_WebName: string;
    function get_WindowsCodePage: Int32;
    function get_IsBrowserDisplay: Boolean;
    function get_IsBrowserSave: Boolean;
    function get_IsMailNewsDisplay: Boolean;
    function get_IsMailNewsSave: Boolean;
    function get_IsSingleByte: Boolean;
    function get_EncoderFallback: DNEncoderFallback;
    procedure set_EncoderFallback(value: DNEncoderFallback);
    function get_DecoderFallback: DNDecoderFallback;
    procedure set_DecoderFallback(value: DNDecoderFallback);
    function get_IsReadOnly: Boolean;
    function get_CodePage: Int32;

  { methods } 

    function GetByteCount(chars: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function GetByteCount(s: string): Int32; overload;
    function GetByteCount(chars: PChar; count: Int32): Int32; overload;
    function GetBytes(s: string; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    function GetCharCount(bytes: PByte; count: Int32): Int32; overload;
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32): Int32; overload;
    function GetChars(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32): Int32; overload;
    function GetString(bytes: TArray<Byte>; index: Int32; count: Int32): string; overload;
    function GetDecoder: DNDecoder;
    function GetEncoder: DNEncoder;
    function GetMaxByteCount(charCount: Int32): Int32;
    function GetMaxCharCount(byteCount: Int32): Int32;
    function GetPreamble: TArray<Byte>;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function Clone: DNObject;
    function GetByteCount(chars: TArray<Char>): Int32; overload;
    function GetByteCount(s: string; index: Int32; count: Int32): Int32; overload;
    function GetByteCount(chars: DNReadOnlySpan<Char>): Int32; overload;
    function GetBytes(chars: TArray<Char>): TArray<Byte>; overload;
    function GetBytes(chars: TArray<Char>; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(s: string): TArray<Byte>; overload;
    function GetBytes(s: string; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(chars: DNReadOnlySpan<Char>; bytes: DNSpan<Byte>): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>): Int32; overload;
    function GetCharCount(bytes: DNReadOnlySpan<Byte>): Int32; overload;
    function GetChars(bytes: TArray<Byte>): TArray<Char>; overload;
    function GetChars(bytes: TArray<Byte>; index: Int32; count: Int32): TArray<Char>; overload;
    function GetChars(bytes: DNReadOnlySpan<Byte>; chars: DNSpan<Char>): Int32; overload;
    function GetString(bytes: PByte; byteCount: Int32): string; overload;
    function GetString(bytes: DNReadOnlySpan<Byte>): string; overload;
    function IsAlwaysNormalized: Boolean; overload;
    function IsAlwaysNormalized(form: DNNormalizationForm): Boolean; overload;
    function GetString(bytes: TArray<Byte>): string; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Preamble: DNReadOnlySpan<Byte> read get_Preamble;
    property BodyName: string read get_BodyName;
    property EncodingName: string read get_EncodingName;
    property HeaderName: string read get_HeaderName;
    property WebName: string read get_WebName;
    property WindowsCodePage: Int32 read get_WindowsCodePage;
    property IsBrowserDisplay: Boolean read get_IsBrowserDisplay;
    property IsBrowserSave: Boolean read get_IsBrowserSave;
    property IsMailNewsDisplay: Boolean read get_IsMailNewsDisplay;
    property IsMailNewsSave: Boolean read get_IsMailNewsSave;
    property IsSingleByte: Boolean read get_IsSingleByte;
    property EncoderFallback: DNEncoderFallback read get_EncoderFallback write set_EncoderFallback;
    property DecoderFallback: DNDecoderFallback read get_DecoderFallback write set_DecoderFallback;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property CodePage: Int32 read get_CodePage;
  end;

  TDNUTF32Encoding = class(TDNGenericImport<DNUTF32EncodingClass, DNUTF32Encoding>) end;

  //-------------namespace: System.Text----------------
  DNUTF7EncodingClass = interface(DNEncodingClass)
  ['{B64A1C5D-82BE-5C47-A862-08ACB425D706}']
  { constructors } 

    {class} function init: DNUTF7Encoding; overload;
    {class} function init(allowOptionals: Boolean): DNUTF7Encoding; overload;

  end;

  [DNTypeName('System.Text.UTF7Encoding')]
  DNUTF7Encoding = interface(DNEncoding)
  ['{FB8E955C-C0F4-35B9-B995-E35DA66D0CBA}']
  { getters & setters } 

    function get_Preamble: DNReadOnlySpan<Byte>;
    function get_BodyName: string;
    function get_EncodingName: string;
    function get_HeaderName: string;
    function get_WebName: string;
    function get_WindowsCodePage: Int32;
    function get_IsBrowserDisplay: Boolean;
    function get_IsBrowserSave: Boolean;
    function get_IsMailNewsDisplay: Boolean;
    function get_IsMailNewsSave: Boolean;
    function get_IsSingleByte: Boolean;
    function get_EncoderFallback: DNEncoderFallback;
    procedure set_EncoderFallback(value: DNEncoderFallback);
    function get_DecoderFallback: DNDecoderFallback;
    procedure set_DecoderFallback(value: DNDecoderFallback);
    function get_IsReadOnly: Boolean;
    function get_CodePage: Int32;

  { methods } 

    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetByteCount(chars: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function GetByteCount(s: string): Int32; overload;
    function GetByteCount(chars: PChar; count: Int32): Int32; overload;
    function GetBytes(s: string; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    function GetCharCount(bytes: PByte; count: Int32): Int32; overload;
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32): Int32; overload;
    function GetChars(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32): Int32; overload;
    function GetString(bytes: TArray<Byte>; index: Int32; count: Int32): string; overload;
    function GetDecoder: DNDecoder;
    function GetEncoder: DNEncoder;
    function GetMaxByteCount(charCount: Int32): Int32;
    function GetMaxCharCount(byteCount: Int32): Int32;
    function GetPreamble: TArray<Byte>;
    function Clone: DNObject;
    function GetByteCount(chars: TArray<Char>): Int32; overload;
    function GetByteCount(s: string; index: Int32; count: Int32): Int32; overload;
    function GetByteCount(chars: DNReadOnlySpan<Char>): Int32; overload;
    function GetBytes(chars: TArray<Char>): TArray<Byte>; overload;
    function GetBytes(chars: TArray<Char>; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(s: string): TArray<Byte>; overload;
    function GetBytes(s: string; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(chars: DNReadOnlySpan<Char>; bytes: DNSpan<Byte>): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>): Int32; overload;
    function GetCharCount(bytes: DNReadOnlySpan<Byte>): Int32; overload;
    function GetChars(bytes: TArray<Byte>): TArray<Char>; overload;
    function GetChars(bytes: TArray<Byte>; index: Int32; count: Int32): TArray<Char>; overload;
    function GetChars(bytes: DNReadOnlySpan<Byte>; chars: DNSpan<Char>): Int32; overload;
    function GetString(bytes: PByte; byteCount: Int32): string; overload;
    function GetString(bytes: DNReadOnlySpan<Byte>): string; overload;
    function IsAlwaysNormalized: Boolean; overload;
    function IsAlwaysNormalized(form: DNNormalizationForm): Boolean; overload;
    function GetString(bytes: TArray<Byte>): string; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Preamble: DNReadOnlySpan<Byte> read get_Preamble;
    property BodyName: string read get_BodyName;
    property EncodingName: string read get_EncodingName;
    property HeaderName: string read get_HeaderName;
    property WebName: string read get_WebName;
    property WindowsCodePage: Int32 read get_WindowsCodePage;
    property IsBrowserDisplay: Boolean read get_IsBrowserDisplay;
    property IsBrowserSave: Boolean read get_IsBrowserSave;
    property IsMailNewsDisplay: Boolean read get_IsMailNewsDisplay;
    property IsMailNewsSave: Boolean read get_IsMailNewsSave;
    property IsSingleByte: Boolean read get_IsSingleByte;
    property EncoderFallback: DNEncoderFallback read get_EncoderFallback write set_EncoderFallback;
    property DecoderFallback: DNDecoderFallback read get_DecoderFallback write set_DecoderFallback;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property CodePage: Int32 read get_CodePage;
  end;

  TDNUTF7Encoding = class(TDNGenericImport<DNUTF7EncodingClass, DNUTF7Encoding>) end;

  //-------------namespace: System.Text----------------
  DNUTF8EncodingClass = interface(DNEncodingClass)
  ['{10B75F2E-89B6-512C-BF89-72FB4FC79EC1}']
  { constructors } 

    {class} function init: DNUTF8Encoding; overload;
    {class} function init(encoderShouldEmitUTF8Identifier: Boolean): DNUTF8Encoding; overload;
    {class} function init(encoderShouldEmitUTF8Identifier: Boolean; throwOnInvalidBytes: Boolean): DNUTF8Encoding; overload;

  end;

  [DNTypeName('System.Text.UTF8Encoding')]
  DNUTF8Encoding = interface(DNEncoding)
  ['{10B614E2-B648-3080-8EB8-84BB193C038F}']
  { getters & setters } 

    function get_Preamble: DNReadOnlySpan<Byte>;
    function get_BodyName: string;
    function get_EncodingName: string;
    function get_HeaderName: string;
    function get_WebName: string;
    function get_WindowsCodePage: Int32;
    function get_IsBrowserDisplay: Boolean;
    function get_IsBrowserSave: Boolean;
    function get_IsMailNewsDisplay: Boolean;
    function get_IsMailNewsSave: Boolean;
    function get_IsSingleByte: Boolean;
    function get_EncoderFallback: DNEncoderFallback;
    procedure set_EncoderFallback(value: DNEncoderFallback);
    function get_DecoderFallback: DNDecoderFallback;
    procedure set_DecoderFallback(value: DNDecoderFallback);
    function get_IsReadOnly: Boolean;
    function get_CodePage: Int32;

  { methods } 

    function GetByteCount(chars: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function GetByteCount(chars: string): Int32; overload;
    function GetByteCount(chars: PChar; count: Int32): Int32; overload;
    function GetBytes(s: string; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: TArray<Char>; charIndex: Int32; charCount: Int32; bytes: TArray<Byte>; byteIndex: Int32): Int32; overload;
    function GetBytes(chars: PChar; charCount: Int32; bytes: PByte; byteCount: Int32): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>; index: Int32; count: Int32): Int32; overload;
    function GetCharCount(bytes: PByte; count: Int32): Int32; overload;
    function GetChars(bytes: TArray<Byte>; byteIndex: Int32; byteCount: Int32; chars: TArray<Char>; charIndex: Int32): Int32; overload;
    function GetChars(bytes: PByte; byteCount: Int32; chars: PChar; charCount: Int32): Int32; overload;
    function GetString(bytes: TArray<Byte>; index: Int32; count: Int32): string; overload;
    function GetDecoder: DNDecoder;
    function GetEncoder: DNEncoder;
    function GetMaxByteCount(charCount: Int32): Int32;
    function GetMaxCharCount(byteCount: Int32): Int32;
    function GetPreamble: TArray<Byte>;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function Clone: DNObject;
    function GetByteCount(chars: TArray<Char>): Int32; overload;
    function GetByteCount(s: string; index: Int32; count: Int32): Int32; overload;
    function GetByteCount(chars: DNReadOnlySpan<Char>): Int32; overload;
    function GetBytes(chars: TArray<Char>): TArray<Byte>; overload;
    function GetBytes(chars: TArray<Char>; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(s: string): TArray<Byte>; overload;
    function GetBytes(s: string; index: Int32; count: Int32): TArray<Byte>; overload;
    function GetBytes(chars: DNReadOnlySpan<Char>; bytes: DNSpan<Byte>): Int32; overload;
    function GetCharCount(bytes: TArray<Byte>): Int32; overload;
    function GetCharCount(bytes: DNReadOnlySpan<Byte>): Int32; overload;
    function GetChars(bytes: TArray<Byte>): TArray<Char>; overload;
    function GetChars(bytes: TArray<Byte>; index: Int32; count: Int32): TArray<Char>; overload;
    function GetChars(bytes: DNReadOnlySpan<Byte>; chars: DNSpan<Char>): Int32; overload;
    function GetString(bytes: PByte; byteCount: Int32): string; overload;
    function GetString(bytes: DNReadOnlySpan<Byte>): string; overload;
    function IsAlwaysNormalized: Boolean; overload;
    function IsAlwaysNormalized(form: DNNormalizationForm): Boolean; overload;
    function GetString(bytes: TArray<Byte>): string; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Preamble: DNReadOnlySpan<Byte> read get_Preamble;
    property BodyName: string read get_BodyName;
    property EncodingName: string read get_EncodingName;
    property HeaderName: string read get_HeaderName;
    property WebName: string read get_WebName;
    property WindowsCodePage: Int32 read get_WindowsCodePage;
    property IsBrowserDisplay: Boolean read get_IsBrowserDisplay;
    property IsBrowserSave: Boolean read get_IsBrowserSave;
    property IsMailNewsDisplay: Boolean read get_IsMailNewsDisplay;
    property IsMailNewsSave: Boolean read get_IsMailNewsSave;
    property IsSingleByte: Boolean read get_IsSingleByte;
    property EncoderFallback: DNEncoderFallback read get_EncoderFallback write set_EncoderFallback;
    property DecoderFallback: DNDecoderFallback read get_DecoderFallback write set_DecoderFallback;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property CodePage: Int32 read get_CodePage;
  end;

  TDNUTF8Encoding = class(TDNGenericImport<DNUTF8EncodingClass, DNUTF8Encoding>) end;

  //-------------namespace: System.Text----------------
  DNEncodingInfoClass = interface(DNObjectClass)
  ['{045C7959-E682-5887-9DC6-271A3B3ED572}']
  end;

  [DNTypeName('System.Text.EncodingInfo')]
  DNEncodingInfo = interface(DNObject)
  ['{EE24E449-DF8C-37EC-B868-9829E0F0C854}']
  { getters & setters } 

    function get_CodePage: Int32;
    function get_Name: string;
    function get_DisplayName: string;

  { methods } 

    function GetEncoding: DNEncoding;
    function Equals(value: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property CodePage: Int32 read get_CodePage;
    property Name: string read get_Name;
    property DisplayName: string read get_DisplayName;
  end;

  TDNEncodingInfo = class(TDNGenericImport<DNEncodingInfoClass, DNEncodingInfo>) end;

  //-------------namespace: System.Text----------------
  DNEncodingProviderClass = interface(DNObjectClass)
  ['{9663CAA3-8571-5651-B0D1-1235E42B4514}']
  { constructors } 

    {class} function init: DNEncodingProvider;

  end;

  [DNTypeName('System.Text.EncodingProvider')]
  DNEncodingProvider = interface(DNObject)
  ['{C2ADCE8F-BE9E-3BC2-A205-34E34D90D696}']
  { methods } 

    function GetEncoding(name: string): DNEncoding; overload;
    function GetEncoding(codepage: Int32): DNEncoding; overload;
    function GetEncoding(name: string; encoderFallback: DNEncoderFallback; decoderFallback: DNDecoderFallback): DNEncoding; overload;
    function GetEncoding(codepage: Int32; encoderFallback: DNEncoderFallback; decoderFallback: DNDecoderFallback): DNEncoding; overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNEncodingProvider = class(TDNGenericImport<DNEncodingProviderClass, DNEncodingProvider>) end;

  //-------------namespace: System.Text----------------
  DNStringBuilderClass = interface(DNObjectClass)
  ['{85042A5E-9890-533B-803B-4F46D62365FD}']
  { constructors } 

    {class} function init: DNStringBuilder; overload;
    {class} function init(capacity: Int32): DNStringBuilder; overload;
    {class} function init(value: string): DNStringBuilder; overload;
    {class} function init(value: string; capacity: Int32): DNStringBuilder; overload;
    {class} function init(value: string; startIndex: Int32; length: Int32; capacity: Int32): DNStringBuilder; overload;
    {class} function init(capacity: Int32; maxCapacity: Int32): DNStringBuilder; overload;

  end;

  [DNTypeName('System.Text.StringBuilder')]
  DNStringBuilder = interface(DNISerializable)
  ['{CD1F7446-3132-31C1-9672-83825AEAF58C}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_MaxCapacity: Int32;
    function get_Length: Int32;
    procedure set_Length(value: Int32);
    function get_Chars(index: Int32): Char;
    procedure set_Chars(index: Int32; value: Char);

  { methods } 

    function EnsureCapacity(capacity: Int32): Int32;
    function ToString: string; overload;
    function ToString(startIndex: Int32; length: Int32): string; overload;
    function Clear: DNStringBuilder;
    function Append(value: Char; repeatCount: Int32): DNStringBuilder; overload;
    function Append(value: TArray<Char>; startIndex: Int32; charCount: Int32): DNStringBuilder; overload;
    function Append(value: string): DNStringBuilder; overload;
    function Append(value: string; startIndex: Int32; count: Int32): DNStringBuilder; overload;
    function Append(value: DNStringBuilder): DNStringBuilder; overload;
    function Append(value: DNStringBuilder; startIndex: Int32; count: Int32): DNStringBuilder; overload;
    function AppendLine: DNStringBuilder; overload;
    function AppendLine(value: string): DNStringBuilder; overload;
    procedure CopyTo(sourceIndex: Int32; destination: TArray<Char>; destinationIndex: Int32; count: Int32); overload;
    procedure CopyTo(sourceIndex: Int32; destination: DNSpan<Char>; count: Int32); overload;
    function Insert(index: Int32; value: string; count: Int32): DNStringBuilder; overload;
    function Remove(startIndex: Int32; length: Int32): DNStringBuilder;
    function Append(value: Boolean): DNStringBuilder; overload;
    function Append(value: Char): DNStringBuilder; overload;
    function Append(value: SByte): DNStringBuilder; overload;
    function Append(value: Byte): DNStringBuilder; overload;
    function Append(value: Int16): DNStringBuilder; overload;
    function Append(value: Int32): DNStringBuilder; overload;
    function Append(value: Int64): DNStringBuilder; overload;
    function Append(value: Single): DNStringBuilder; overload;
    function Append(value: Double): DNStringBuilder; overload;
    function Append(value: DNDecimal): DNStringBuilder; overload;
    function Append(value: UInt16): DNStringBuilder; overload;
    function Append(value: UInt32): DNStringBuilder; overload;
    function Append(value: UInt64): DNStringBuilder; overload;
    function Append(value: DNObject): DNStringBuilder; overload;
    function Append(value: TArray<Char>): DNStringBuilder; overload;
    function Append(value: DNReadOnlySpan<Char>): DNStringBuilder; overload;
    function AppendJoin(separator: string; values: TArray<DNObject>): DNStringBuilder; overload;
    function AppendJoin(separator: string; values: TArray<string>): DNStringBuilder; overload;
    function AppendJoin(separator: Char; values: TArray<DNObject>): DNStringBuilder; overload;
    function AppendJoin(separator: Char; values: TArray<string>): DNStringBuilder; overload;
    function Insert(index: Int32; value: string): DNStringBuilder; overload;
    function Insert(index: Int32; value: Boolean): DNStringBuilder; overload;
    function Insert(index: Int32; value: SByte): DNStringBuilder; overload;
    function Insert(index: Int32; value: Byte): DNStringBuilder; overload;
    function Insert(index: Int32; value: Int16): DNStringBuilder; overload;
    function Insert(index: Int32; value: Char): DNStringBuilder; overload;
    function Insert(index: Int32; value: TArray<Char>): DNStringBuilder; overload;
    function Insert(index: Int32; value: TArray<Char>; startIndex: Int32; charCount: Int32): DNStringBuilder; overload;
    function Insert(index: Int32; value: Int32): DNStringBuilder; overload;
    function Insert(index: Int32; value: Int64): DNStringBuilder; overload;
    function Insert(index: Int32; value: Single): DNStringBuilder; overload;
    function Insert(index: Int32; value: Double): DNStringBuilder; overload;
    function Insert(index: Int32; value: DNDecimal): DNStringBuilder; overload;
    function Insert(index: Int32; value: UInt16): DNStringBuilder; overload;
    function Insert(index: Int32; value: UInt32): DNStringBuilder; overload;
    function Insert(index: Int32; value: UInt64): DNStringBuilder; overload;
    function Insert(index: Int32; value: DNObject): DNStringBuilder; overload;
    function Insert(index: Int32; value: DNReadOnlySpan<Char>): DNStringBuilder; overload;
    function AppendFormat(format: string; arg0: DNObject): DNStringBuilder; overload;
    function AppendFormat(format: string; arg0: DNObject; arg1: DNObject): DNStringBuilder; overload;
    function AppendFormat(format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject): DNStringBuilder; overload;
    function AppendFormat(format: string; args: TArray<DNObject>): DNStringBuilder; overload;
    function AppendFormat(provider: DNIFormatProvider; format: string; arg0: DNObject): DNStringBuilder; overload;
    function AppendFormat(provider: DNIFormatProvider; format: string; arg0: DNObject; arg1: DNObject): DNStringBuilder; overload;
    function AppendFormat(provider: DNIFormatProvider; format: string; arg0: DNObject; arg1: DNObject; arg2: DNObject): DNStringBuilder; overload;
    function AppendFormat(provider: DNIFormatProvider; format: string; args: TArray<DNObject>): DNStringBuilder; overload;
    function Replace(oldValue: string; newValue: string): DNStringBuilder; overload;
    function Equals(sb: DNStringBuilder): Boolean; overload;
    function Equals(span: DNReadOnlySpan<Char>): Boolean; overload;
    function Replace(oldValue: string; newValue: string; startIndex: Int32; count: Int32): DNStringBuilder; overload;
    function Replace(oldChar: Char; newChar: Char): DNStringBuilder; overload;
    function Replace(oldChar: Char; newChar: Char; startIndex: Int32; count: Int32): DNStringBuilder; overload;
    function Append(value: PChar; valueCount: Int32): DNStringBuilder; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Capacity: Int32 read get_Capacity write set_Capacity;
    property MaxCapacity: Int32 read get_MaxCapacity;
    property Length: Int32 read get_Length write set_Length;
    property Chars[index: Int32]: Char read get_Chars write set_Chars; default;
  end;

  TDNStringBuilder = class(TDNGenericImport<DNStringBuilderClass, DNStringBuilder>) end;

  //-------------namespace: System.Threading----------------
  DNAsyncLocalClass<T> = interface(DNObjectClass)
  ['{A4F651F5-C5F0-5F3D-8929-C8FC2E174A9A}']
  { constructors } 

    {class} function init: DNAsyncLocal<T>; overload;
    {class} function init(valueChangedHandler: DNAction<DNAsyncLocalValueChangedArgs<T>>): DNAsyncLocal<T>; overload;

  end;

  [DNTypeName('System.Threading.AsyncLocal`1')]
  DNAsyncLocal<T> = interface(DNObject)
  ['{FD72F981-4085-37FE-9408-018571362A9F}']
  { getters & setters } 

    function get_Value: T;
    procedure set_Value(value: T);

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: T read get_Value write set_Value;
  end;

  TDNAsyncLocal<T> = class(TDNGenericImport<DNAsyncLocalClass<T>, DNAsyncLocal<T>>) end;

  //-------------namespace: System.Threading----------------
  DNCancellationTokenSourceClass = interface(DNObjectClass)
  ['{67685705-0DC4-5814-8CB3-E3B2829C9C93}']
  { constructors } 

    {class} function init: DNCancellationTokenSource; overload;
    {class} function init(delay: DNTimeSpan): DNCancellationTokenSource; overload;
    {class} function init(millisecondsDelay: Int32): DNCancellationTokenSource; overload;

  { static methods } 

    {class} function CreateLinkedTokenSource(token1: DNCancellationToken; token2: DNCancellationToken): DNCancellationTokenSource; overload;
    {class} function CreateLinkedTokenSource(tokens: TArray<DNCancellationToken>): DNCancellationTokenSource; overload;

  end;

  [DNTypeName('System.Threading.CancellationTokenSource')]
  DNCancellationTokenSource = interface(DNIDisposable)
  ['{9AA614A8-5FA7-326B-BFFF-BBD816B3D8FB}']
  { getters & setters } 

    function get_IsCancellationRequested: Boolean;
    function get_Token: DNCancellationToken;

  { methods } 

    procedure Cancel; overload;
    procedure Cancel(throwOnFirstException: Boolean); overload;
    procedure CancelAfter(delay: DNTimeSpan); overload;
    procedure CancelAfter(millisecondsDelay: Int32); overload;
    procedure Dispose;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property IsCancellationRequested: Boolean read get_IsCancellationRequested;
    property Token: DNCancellationToken read get_Token;
  end;

  TDNCancellationTokenSource = class(TDNGenericImport<DNCancellationTokenSourceClass, DNCancellationTokenSource>) end;

  //-------------namespace: System.Threading----------------
  DNExecutionContextClass = interface(DNObjectClass)
  ['{F2BBAF94-A8AF-5618-BEE0-CD9E0BB4B763}']
  { static methods } 

    {class} function Capture: DNExecutionContext;
    {class} function SuppressFlow: DNAsyncFlowControl;
    {class} procedure RestoreFlow;
    {class} function IsFlowSuppressed: Boolean;
    {class} procedure Run(executionContext: DNExecutionContext; callback: DNContextCallback; state: DNObject);

  end;

  [DNTypeName('System.Threading.ExecutionContext')]
  DNExecutionContext = interface(DNIDisposable)
  ['{226E7CAC-649A-35A8-8976-A5E3DCFC1ADC}']
  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function CreateCopy: DNExecutionContext;
    procedure Dispose;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNExecutionContext = class(TDNGenericImport<DNExecutionContextClass, DNExecutionContext>) end;

  //-------------namespace: System.Threading----------------
  DNInterlockedClass = interface(DNObjectClass)
  ['{2CD90B40-9358-5953-9705-CE07992C06D8}']
  { static methods } 

    {class} function Increment(out location: Int32): Int32; overload;
    {class} function Increment(out location: Int64): Int64; overload;
    {class} function Decrement(out location: Int32): Int32; overload;
    {class} function Decrement(out location: Int64): Int64; overload;
    {class} function Exchange(out location1: Int32; value: Int32): Int32; overload;
    {class} function Exchange(out location1: Int64; value: Int64): Int64; overload;
    {class} function Exchange(out location1: Single; value: Single): Single; overload;
    {class} function Exchange(out location1: Double; value: Double): Double; overload;
    {class} function Exchange(out location1: DNObject; value: DNObject): DNObject; overload;
    {class} function Exchange(out location1: IntPtr; value: IntPtr): IntPtr; overload;
    {class} function CompareExchange(out location1: Int32; value: Int32; comparand: Int32): Int32; overload;
    {class} function CompareExchange(out location1: Int64; value: Int64; comparand: Int64): Int64; overload;
    {class} function CompareExchange(out location1: Single; value: Single; comparand: Single): Single; overload;
    {class} function CompareExchange(out location1: Double; value: Double; comparand: Double): Double; overload;
    {class} function CompareExchange(out location1: DNObject; value: DNObject; comparand: DNObject): DNObject; overload;
    {class} function CompareExchange(out location1: IntPtr; value: IntPtr; comparand: IntPtr): IntPtr; overload;
    {class} function Add(out location1: Int32; value: Int32): Int32; overload;
    {class} function Add(out location1: Int64; value: Int64): Int64; overload;
    {class} function Read(out location: Int64): Int64;
    {class} procedure MemoryBarrier;
    {class} procedure MemoryBarrierProcessWide;

  end;

  [DNTypeName('System.Threading.Interlocked')]
  DNInterlocked = interface(DNObject)
  ['{DE5723EF-58E5-309C-BF27-167006957F60}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNInterlocked = class(TDNGenericImport<DNInterlockedClass, DNInterlocked>) end;

  //-------------namespace: System.Threading----------------
  DNLazyInitializerClass = interface(DNObjectClass)
  ['{DEA24861-9B97-5A4A-BBDF-A82D6363E123}']
  end;

  [DNTypeName('System.Threading.LazyInitializer')]
  DNLazyInitializer = interface(DNObject)
  ['{63A38868-7496-36F3-9C50-C5A186EC4B3E}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNLazyInitializer = class(TDNGenericImport<DNLazyInitializerClass, DNLazyInitializer>) end;

  //-------------namespace: System.Threading----------------
  DNManualResetEventSlimClass = interface(DNObjectClass)
  ['{8B6AFA3A-0926-5D00-A286-7B1D72F8FCBE}']
  { constructors } 

    {class} function init: DNManualResetEventSlim; overload;
    {class} function init(initialState: Boolean): DNManualResetEventSlim; overload;
    {class} function init(initialState: Boolean; spinCount: Int32): DNManualResetEventSlim; overload;

  end;

  [DNTypeName('System.Threading.ManualResetEventSlim')]
  DNManualResetEventSlim = interface(DNIDisposable)
  ['{098ACFBB-8F3E-3BEF-AD41-DA6A42F28C12}']
  { getters & setters } 

    function get_WaitHandle: DNWaitHandle;
    function get_IsSet: Boolean;
    function get_SpinCount: Int32;

  { methods } 

    procedure &Set;
    procedure Reset;
    procedure Wait; overload;
    procedure Wait(cancellationToken: DNCancellationToken); overload;
    function Wait(timeout: DNTimeSpan): Boolean; overload;
    function Wait(timeout: DNTimeSpan; cancellationToken: DNCancellationToken): Boolean; overload;
    function Wait(millisecondsTimeout: Int32): Boolean; overload;
    function Wait(millisecondsTimeout: Int32; cancellationToken: DNCancellationToken): Boolean; overload;
    procedure Dispose;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property WaitHandle: DNWaitHandle read get_WaitHandle;
    property IsSet: Boolean read get_IsSet;
    property SpinCount: Int32 read get_SpinCount;
  end;

  TDNManualResetEventSlim = class(TDNGenericImport<DNManualResetEventSlimClass, DNManualResetEventSlim>) end;

  //-------------namespace: System.Threading----------------
  DNMonitorClass = interface(DNObjectClass)
  ['{4016183A-14BD-5161-9F68-63083B02C6DB}']
  { static methods } 

    {class} procedure Enter(obj: DNObject); overload;
    {class} procedure Enter(obj: DNObject; out lockTaken: Boolean); overload;
    {class} procedure &Exit(obj: DNObject);
    {class} function TryEnter(obj: DNObject): Boolean; overload;
    {class} procedure TryEnter(obj: DNObject; out lockTaken: Boolean); overload;
    {class} function TryEnter(obj: DNObject; millisecondsTimeout: Int32): Boolean; overload;
    {class} function TryEnter(obj: DNObject; timeout: DNTimeSpan): Boolean; overload;
    {class} procedure TryEnter(obj: DNObject; millisecondsTimeout: Int32; out lockTaken: Boolean); overload;
    {class} procedure TryEnter(obj: DNObject; timeout: DNTimeSpan; out lockTaken: Boolean); overload;
    {class} function IsEntered(obj: DNObject): Boolean;
    {class} function Wait(obj: DNObject; millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    {class} function Wait(obj: DNObject; timeout: DNTimeSpan; exitContext: Boolean): Boolean; overload;
    {class} function Wait(obj: DNObject; millisecondsTimeout: Int32): Boolean; overload;
    {class} function Wait(obj: DNObject; timeout: DNTimeSpan): Boolean; overload;
    {class} function Wait(obj: DNObject): Boolean; overload;
    {class} procedure Pulse(obj: DNObject);
    {class} procedure PulseAll(obj: DNObject);

  end;

  [DNTypeName('System.Threading.Monitor')]
  DNMonitor = interface(DNObject)
  ['{E53E8C7E-7B33-3496-B6F0-AB8888F00375}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNMonitor = class(TDNGenericImport<DNMonitorClass, DNMonitor>) end;

  //-------------namespace: System.Threading----------------
  DNOverlappedClass = interface(DNObjectClass)
  ['{1FAEA814-B1EC-50E7-8361-AAE8F96B7B90}']
  { constructors } 

    {class} function init: DNOverlapped; overload;
    {class} function init(offsetLo: Int32; offsetHi: Int32; hEvent: IntPtr; ar: DNIAsyncResult): DNOverlapped; overload;
    {class} function init(offsetLo: Int32; offsetHi: Int32; hEvent: Int32; ar: DNIAsyncResult): DNOverlapped; overload;

  { static methods } 

    {class} function Unpack(var nativeOverlappedPtr: DNNativeOverlapped): DNOverlapped;
    {class} procedure Free(var nativeOverlappedPtr: DNNativeOverlapped);

  end;

  [DNTypeName('System.Threading.Overlapped')]
  DNOverlapped = interface(DNObject)
  ['{7A9E5D40-D289-31BB-8234-864B1E314475}']
  { getters & setters } 

    function get_AsyncResult: DNIAsyncResult;
    procedure set_AsyncResult(value: DNIAsyncResult);
    function get_OffsetLow: Int32;
    procedure set_OffsetLow(value: Int32);
    function get_OffsetHigh: Int32;
    procedure set_OffsetHigh(value: Int32);
    function get_EventHandle: Int32;
    procedure set_EventHandle(value: Int32);
    function get_EventHandleIntPtr: IntPtr;
    procedure set_EventHandleIntPtr(value: IntPtr);

  { methods } 

    function Pack(iocb: DNIOCompletionCallback): DNNativeOverlapped; overload;
    function Pack(iocb: DNIOCompletionCallback; userData: DNObject): DNNativeOverlapped; overload;
    function UnsafePack(iocb: DNIOCompletionCallback): DNNativeOverlapped; overload;
    function UnsafePack(iocb: DNIOCompletionCallback; userData: DNObject): DNNativeOverlapped; overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property AsyncResult: DNIAsyncResult read get_AsyncResult write set_AsyncResult;
    property OffsetLow: Int32 read get_OffsetLow write set_OffsetLow;
    property OffsetHigh: Int32 read get_OffsetHigh write set_OffsetHigh;
    property EventHandle: Int32 read get_EventHandle write set_EventHandle;
    property EventHandleIntPtr: IntPtr read get_EventHandleIntPtr write set_EventHandleIntPtr;
  end;

  TDNOverlapped = class(TDNGenericImport<DNOverlappedClass, DNOverlapped>) end;

  //-------------namespace: System.Threading----------------
  DNPreAllocatedOverlappedClass = interface(DNObjectClass)
  ['{6DFE503F-60D9-5332-924E-206A77F112FE}']
  { constructors } 

    {class} function init(callback: DNIOCompletionCallback; state: DNObject; pinData: DNObject): DNPreAllocatedOverlapped;

  end;

  [DNTypeName('System.Threading.PreAllocatedOverlapped')]
  DNPreAllocatedOverlapped = interface(DNIDisposable)
  ['{109220F1-22ED-30AC-BA95-1C4DA1877B9D}']
  { methods } 

    procedure Dispose;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNPreAllocatedOverlapped = class(TDNGenericImport<DNPreAllocatedOverlappedClass, DNPreAllocatedOverlapped>) end;

  //-------------namespace: System.Threading----------------
  DNReaderWriterLockSlimClass = interface(DNObjectClass)
  ['{FAFC649E-E392-5DEA-BDBA-0B8A67B40397}']
  { constructors } 

    {class} function init: DNReaderWriterLockSlim; overload;
    {class} function init(recursionPolicy: DNLockRecursionPolicy): DNReaderWriterLockSlim; overload;

  end;

  [DNTypeName('System.Threading.ReaderWriterLockSlim')]
  DNReaderWriterLockSlim = interface(DNIDisposable)
  ['{1218C21A-D7FD-329E-A94E-03F8B21B800F}']
  { getters & setters } 

    function get_IsReadLockHeld: Boolean;
    function get_IsUpgradeableReadLockHeld: Boolean;
    function get_IsWriteLockHeld: Boolean;
    function get_RecursionPolicy: DNLockRecursionPolicy;
    function get_CurrentReadCount: Int32;
    function get_RecursiveReadCount: Int32;
    function get_RecursiveUpgradeCount: Int32;
    function get_RecursiveWriteCount: Int32;
    function get_WaitingReadCount: Int32;
    function get_WaitingUpgradeCount: Int32;
    function get_WaitingWriteCount: Int32;

  { methods } 

    procedure EnterReadLock;
    function TryEnterReadLock(timeout: DNTimeSpan): Boolean; overload;
    function TryEnterReadLock(millisecondsTimeout: Int32): Boolean; overload;
    procedure EnterWriteLock;
    function TryEnterWriteLock(timeout: DNTimeSpan): Boolean; overload;
    function TryEnterWriteLock(millisecondsTimeout: Int32): Boolean; overload;
    procedure EnterUpgradeableReadLock;
    function TryEnterUpgradeableReadLock(timeout: DNTimeSpan): Boolean; overload;
    function TryEnterUpgradeableReadLock(millisecondsTimeout: Int32): Boolean; overload;
    procedure ExitReadLock;
    procedure ExitWriteLock;
    procedure ExitUpgradeableReadLock;
    procedure Dispose;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property IsReadLockHeld: Boolean read get_IsReadLockHeld;
    property IsUpgradeableReadLockHeld: Boolean read get_IsUpgradeableReadLockHeld;
    property IsWriteLockHeld: Boolean read get_IsWriteLockHeld;
    property RecursionPolicy: DNLockRecursionPolicy read get_RecursionPolicy;
    property CurrentReadCount: Int32 read get_CurrentReadCount;
    property RecursiveReadCount: Int32 read get_RecursiveReadCount;
    property RecursiveUpgradeCount: Int32 read get_RecursiveUpgradeCount;
    property RecursiveWriteCount: Int32 read get_RecursiveWriteCount;
    property WaitingReadCount: Int32 read get_WaitingReadCount;
    property WaitingUpgradeCount: Int32 read get_WaitingUpgradeCount;
    property WaitingWriteCount: Int32 read get_WaitingWriteCount;
  end;

  TDNReaderWriterLockSlim = class(TDNGenericImport<DNReaderWriterLockSlimClass, DNReaderWriterLockSlim>) end;

  //-------------namespace: System.Threading----------------
  DNSemaphoreSlimClass = interface(DNObjectClass)
  ['{AA624AC5-6351-5461-B129-A65FF5060255}']
  { constructors } 

    {class} function init(initialCount: Int32): DNSemaphoreSlim; overload;
    {class} function init(initialCount: Int32; maxCount: Int32): DNSemaphoreSlim; overload;

  end;

  [DNTypeName('System.Threading.SemaphoreSlim')]
  DNSemaphoreSlim = interface(DNIDisposable)
  ['{B682FB66-3B0E-326B-AFD2-D0BCAC5DEF7F}']
  { getters & setters } 

    function get_CurrentCount: Int32;
    function get_AvailableWaitHandle: DNWaitHandle;

  { methods } 

    procedure Wait; overload;
    procedure Wait(cancellationToken: DNCancellationToken); overload;
    function Wait(timeout: DNTimeSpan): Boolean; overload;
    function Wait(timeout: DNTimeSpan; cancellationToken: DNCancellationToken): Boolean; overload;
    function Wait(millisecondsTimeout: Int32): Boolean; overload;
    function Wait(millisecondsTimeout: Int32; cancellationToken: DNCancellationToken): Boolean; overload;
    function WaitAsync: DNTask; overload;
    function WaitAsync(cancellationToken: DNCancellationToken): DNTask; overload;
    function WaitAsync(millisecondsTimeout: Int32): DNTask<Boolean>; overload;
    function WaitAsync(timeout: DNTimeSpan): DNTask<Boolean>; overload;
    function WaitAsync(timeout: DNTimeSpan; cancellationToken: DNCancellationToken): DNTask<Boolean>; overload;
    function WaitAsync(millisecondsTimeout: Int32; cancellationToken: DNCancellationToken): DNTask<Boolean>; overload;
    function Release: Int32; overload;
    function Release(releaseCount: Int32): Int32; overload;
    procedure Dispose;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property CurrentCount: Int32 read get_CurrentCount;
    property AvailableWaitHandle: DNWaitHandle read get_AvailableWaitHandle;
  end;

  TDNSemaphoreSlim = class(TDNGenericImport<DNSemaphoreSlimClass, DNSemaphoreSlim>) end;

  //-------------namespace: System.Threading----------------
  DNSynchronizationContextClass = interface(DNObjectClass)
  ['{F988673E-B428-5C14-BECB-BCD8C994CF80}']
  { static getter & setter } 

    {class} function get_Current: DNSynchronizationContext;

  { constructors } 

    {class} function init: DNSynchronizationContext;

  { static methods } 

    {class} procedure SetSynchronizationContext(syncContext: DNSynchronizationContext);

  { static propertys } 

    {class} property Current: DNSynchronizationContext read get_Current;
  end;

  [DNTypeName('System.Threading.SynchronizationContext')]
  DNSynchronizationContext = interface(DNObject)
  ['{98A4FD9C-6CF1-31BB-80B4-A52EE72C2EFF}']
  { methods } 

    function IsWaitNotificationRequired: Boolean;
    procedure Send(d: DNSendOrPostCallback; state: DNObject);
    procedure Post(d: DNSendOrPostCallback; state: DNObject);
    procedure OperationStarted;
    procedure OperationCompleted;
    function Wait(waitHandles: TArray<IntPtr>; waitAll: Boolean; millisecondsTimeout: Int32): Int32;
    function CreateCopy: DNSynchronizationContext;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNSynchronizationContext = class(TDNGenericImport<DNSynchronizationContextClass, DNSynchronizationContext>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNConcurrentExclusiveSchedulerPairClass = interface(DNObjectClass)
  ['{41BF1848-1D7A-545D-B03D-42E797BDAF05}']
  { constructors } 

    {class} function init: DNConcurrentExclusiveSchedulerPair; overload;
    {class} function init(taskScheduler: DNTaskScheduler): DNConcurrentExclusiveSchedulerPair; overload;
    {class} function init(taskScheduler: DNTaskScheduler; maxConcurrencyLevel: Int32): DNConcurrentExclusiveSchedulerPair; overload;
    {class} function init(taskScheduler: DNTaskScheduler; maxConcurrencyLevel: Int32; maxItemsPerTask: Int32): DNConcurrentExclusiveSchedulerPair; overload;

  end;

  [DNTypeName('System.Threading.Tasks.ConcurrentExclusiveSchedulerPair')]
  DNConcurrentExclusiveSchedulerPair = interface(DNObject)
  ['{9B0B7B06-FAB0-38E7-BA4B-DDBE673F9E36}']
  { getters & setters } 

    function get_Completion: DNTask;
    function get_ConcurrentScheduler: DNTaskScheduler;
    function get_ExclusiveScheduler: DNTaskScheduler;

  { methods } 

    procedure Complete;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Completion: DNTask read get_Completion;
    property ConcurrentScheduler: DNTaskScheduler read get_ConcurrentScheduler;
    property ExclusiveScheduler: DNTaskScheduler read get_ExclusiveScheduler;
  end;

  TDNConcurrentExclusiveSchedulerPair = class(TDNGenericImport<DNConcurrentExclusiveSchedulerPairClass, DNConcurrentExclusiveSchedulerPair>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskClass = interface(DNObjectClass)
  ['{F44751B3-1657-53A7-931F-0F871CB73EEC}']
  { static getter & setter } 

    {class} function get_CurrentId: DNNullable<Int32>;
    {class} function get_Factory: DNTaskFactory;
    {class} function get_CompletedTask: DNTask;

  { constructors } 

    {class} function init(action: DNAction): DNTask; overload;
    {class} function init(action: DNAction; cancellationToken: DNCancellationToken): DNTask; overload;
    {class} function init(action: DNAction; creationOptions: DNTaskCreationOptions): DNTask; overload;
    {class} function init(action: DNAction; cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions): DNTask; overload;
    {class} function init(action: DNAction<DNObject>; state: DNObject): DNTask; overload;
    {class} function init(action: DNAction<DNObject>; state: DNObject; cancellationToken: DNCancellationToken): DNTask; overload;
    {class} function init(action: DNAction<DNObject>; state: DNObject; creationOptions: DNTaskCreationOptions): DNTask; overload;
    {class} function init(action: DNAction<DNObject>; state: DNObject; cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions): DNTask; overload;

  { static methods } 

    {class} function Yield: DNYieldAwaitable;
    {class} procedure WaitAll(tasks: TArray<DNTask>); overload;
    {class} function WaitAll(tasks: TArray<DNTask>; timeout: DNTimeSpan): Boolean; overload;
    {class} function WaitAll(tasks: TArray<DNTask>; millisecondsTimeout: Int32): Boolean; overload;
    {class} procedure WaitAll(tasks: TArray<DNTask>; cancellationToken: DNCancellationToken); overload;
    {class} function WaitAll(tasks: TArray<DNTask>; millisecondsTimeout: Int32; cancellationToken: DNCancellationToken): Boolean; overload;
    {class} function WaitAny(tasks: TArray<DNTask>): Int32; overload;
    {class} function WaitAny(tasks: TArray<DNTask>; timeout: DNTimeSpan): Int32; overload;
    {class} function WaitAny(tasks: TArray<DNTask>; cancellationToken: DNCancellationToken): Int32; overload;
    {class} function WaitAny(tasks: TArray<DNTask>; millisecondsTimeout: Int32): Int32; overload;
    {class} function WaitAny(tasks: TArray<DNTask>; millisecondsTimeout: Int32; cancellationToken: DNCancellationToken): Int32; overload;
    {class} function FromException(exception: DNException): DNTask;
    {class} function FromCanceled(cancellationToken: DNCancellationToken): DNTask;
    {class} function Run(action: DNAction): DNTask; overload;
    {class} function Run(action: DNAction; cancellationToken: DNCancellationToken): DNTask; overload;
    {class} function Run(&function: DNFunc<DNTask>): DNTask; overload;
    {class} function Run(&function: DNFunc<DNTask>; cancellationToken: DNCancellationToken): DNTask; overload;
    {class} function Delay(delay: DNTimeSpan): DNTask; overload;
    {class} function Delay(delay: DNTimeSpan; cancellationToken: DNCancellationToken): DNTask; overload;
    {class} function Delay(millisecondsDelay: Int32): DNTask; overload;
    {class} function Delay(millisecondsDelay: Int32; cancellationToken: DNCancellationToken): DNTask; overload;
    {class} function WhenAll(tasks: DNIEnumerable<DNTask>): DNTask; overload;
    {class} function WhenAll(tasks: TArray<DNTask>): DNTask; overload;
    {class} function WhenAny(tasks: TArray<DNTask>): DNTask<DNTask>; overload;
    {class} function WhenAny(tasks: DNIEnumerable<DNTask>): DNTask<DNTask>; overload;

  { static propertys } 

    {class} property CurrentId: DNNullable<Int32> read get_CurrentId;
    {class} property Factory: DNTaskFactory read get_Factory;
    {class} property CompletedTask: DNTask read get_CompletedTask;
  end;

  [DNTypeName('System.Threading.Tasks.Task')]
  DNTask = interface(DNObject)
  ['{486B6F9B-15BB-3F81-84C6-52E94AE53690}']
  { getters & setters } 

    function get_Id: Int32;
    function get_Exception: DNAggregateException;
    function get_Status: DNTaskStatus;
    function get_IsCanceled: Boolean;
    function get_IsCompleted: Boolean;
    function get_IsCompletedSuccessfully: Boolean;
    function get_CreationOptions: DNTaskCreationOptions;
    function get_AsyncState: DNObject;
    function get_IsFaulted: Boolean;

  { methods } 

    procedure Start; overload;
    procedure Start(scheduler: DNTaskScheduler); overload;
    procedure RunSynchronously; overload;
    procedure RunSynchronously(scheduler: DNTaskScheduler); overload;
    procedure Dispose;
    function GetAwaiter: DNTaskAwaiter;
    function ConfigureAwait(continueOnCapturedContext: Boolean): DNConfiguredTaskAwaitable;
    procedure Wait; overload;
    function Wait(timeout: DNTimeSpan): Boolean; overload;
    procedure Wait(cancellationToken: DNCancellationToken); overload;
    function Wait(millisecondsTimeout: Int32): Boolean; overload;
    function Wait(millisecondsTimeout: Int32; cancellationToken: DNCancellationToken): Boolean; overload;
    function ContinueWith(continuationAction: DNAction<DNTask>): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask>; cancellationToken: DNCancellationToken): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask>; scheduler: DNTaskScheduler): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask>; continuationOptions: DNTaskContinuationOptions): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask>; cancellationToken: DNCancellationToken; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask, DNObject>; state: DNObject): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask, DNObject>; state: DNObject; cancellationToken: DNCancellationToken): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask, DNObject>; state: DNObject; scheduler: DNTaskScheduler): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask, DNObject>; state: DNObject; continuationOptions: DNTaskContinuationOptions): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask, DNObject>; state: DNObject; cancellationToken: DNCancellationToken; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Id: Int32 read get_Id;
    property Exception: DNAggregateException read get_Exception;
    property Status: DNTaskStatus read get_Status;
    property IsCanceled: Boolean read get_IsCanceled;
    property IsCompleted: Boolean read get_IsCompleted;
    property IsCompletedSuccessfully: Boolean read get_IsCompletedSuccessfully;
    property CreationOptions: DNTaskCreationOptions read get_CreationOptions;
    property AsyncState: DNObject read get_AsyncState;
    property IsFaulted: Boolean read get_IsFaulted;
  end;

  TDNTask = class(TDNGenericImport<DNTaskClass, DNTask>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskClass<TResult> = interface(DNTaskClass)
  ['{05F84392-2017-5D64-AB44-7C51130CA685}']
  { static getter & setter } 

    {class} function get_Factory: DNTaskFactory<TResult>;

  { constructors } 

    {class} function init(&function: DNFunc<TResult>): DNTask<TResult>; overload;
    {class} function init(&function: DNFunc<TResult>; cancellationToken: DNCancellationToken): DNTask<TResult>; overload;
    {class} function init(&function: DNFunc<TResult>; creationOptions: DNTaskCreationOptions): DNTask<TResult>; overload;
    {class} function init(&function: DNFunc<TResult>; cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions): DNTask<TResult>; overload;
    {class} function init(&function: DNFunc<DNObject, TResult>; state: DNObject): DNTask<TResult>; overload;
    {class} function init(&function: DNFunc<DNObject, TResult>; state: DNObject; cancellationToken: DNCancellationToken): DNTask<TResult>; overload;
    {class} function init(&function: DNFunc<DNObject, TResult>; state: DNObject; creationOptions: DNTaskCreationOptions): DNTask<TResult>; overload;
    {class} function init(&function: DNFunc<DNObject, TResult>; state: DNObject; cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions): DNTask<TResult>; overload;

  { static propertys } 

    {class} property Factory: DNTaskFactory<TResult> read get_Factory;
  end;

  [DNTypeName('System.Threading.Tasks.Task`1')]
  DNTask<TResult> = interface(DNTask)
  ['{73097179-6C7B-36DD-8CB3-525D05F8BB34}']
  { getters & setters } 

    function get_Result: TResult;
    function get_Id: Int32;
    function get_Exception: DNAggregateException;
    function get_Status: DNTaskStatus;
    function get_IsCanceled: Boolean;
    function get_IsCompleted: Boolean;
    function get_IsCompletedSuccessfully: Boolean;
    function get_CreationOptions: DNTaskCreationOptions;
    function get_AsyncState: DNObject;
    function get_IsFaulted: Boolean;

  { methods } 

    function GetAwaiter: DNTaskAwaiter<TResult>;
    function ConfigureAwait(continueOnCapturedContext: Boolean): DNConfiguredTaskAwaitable<TResult>;
    function ContinueWith(continuationAction: DNAction<DNTask<TResult>>): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask<TResult>>; cancellationToken: DNCancellationToken): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask<TResult>>; scheduler: DNTaskScheduler): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask<TResult>>; continuationOptions: DNTaskContinuationOptions): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask<TResult>>; cancellationToken: DNCancellationToken; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask<TResult>, DNObject>; state: DNObject): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask<TResult>, DNObject>; state: DNObject; cancellationToken: DNCancellationToken): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask<TResult>, DNObject>; state: DNObject; scheduler: DNTaskScheduler): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask<TResult>, DNObject>; state: DNObject; continuationOptions: DNTaskContinuationOptions): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask<TResult>, DNObject>; state: DNObject; cancellationToken: DNCancellationToken; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    procedure Start; overload;
    procedure Start(scheduler: DNTaskScheduler); overload;
    procedure RunSynchronously; overload;
    procedure RunSynchronously(scheduler: DNTaskScheduler); overload;
    procedure Dispose;
    procedure Wait; overload;
    function Wait(timeout: DNTimeSpan): Boolean; overload;
    procedure Wait(cancellationToken: DNCancellationToken); overload;
    function Wait(millisecondsTimeout: Int32): Boolean; overload;
    function Wait(millisecondsTimeout: Int32; cancellationToken: DNCancellationToken): Boolean; overload;
    function ContinueWith(continuationAction: DNAction<DNTask>): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask>; cancellationToken: DNCancellationToken): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask>; scheduler: DNTaskScheduler): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask>; continuationOptions: DNTaskContinuationOptions): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask>; cancellationToken: DNCancellationToken; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask, DNObject>; state: DNObject): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask, DNObject>; state: DNObject; cancellationToken: DNCancellationToken): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask, DNObject>; state: DNObject; scheduler: DNTaskScheduler): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask, DNObject>; state: DNObject; continuationOptions: DNTaskContinuationOptions): DNTask; overload;
    function ContinueWith(continuationAction: DNAction<DNTask, DNObject>; state: DNObject; cancellationToken: DNCancellationToken; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Result: TResult read get_Result;
    property Id: Int32 read get_Id;
    property Exception: DNAggregateException read get_Exception;
    property Status: DNTaskStatus read get_Status;
    property IsCanceled: Boolean read get_IsCanceled;
    property IsCompleted: Boolean read get_IsCompleted;
    property IsCompletedSuccessfully: Boolean read get_IsCompletedSuccessfully;
    property CreationOptions: DNTaskCreationOptions read get_CreationOptions;
    property AsyncState: DNObject read get_AsyncState;
    property IsFaulted: Boolean read get_IsFaulted;
  end;

  TDNTask<TResult> = class(TDNGenericImport<DNTaskClass<TResult>, DNTask<TResult>>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskCompletionSourceClass<TResult> = interface(DNObjectClass)
  ['{4C724297-A497-5FE5-9F7A-B1215FE4D091}']
  { constructors } 

    {class} function init: DNTaskCompletionSource<TResult>; overload;
    {class} function init(creationOptions: DNTaskCreationOptions): DNTaskCompletionSource<TResult>; overload;
    {class} function init(state: DNObject): DNTaskCompletionSource<TResult>; overload;
    {class} function init(state: DNObject; creationOptions: DNTaskCreationOptions): DNTaskCompletionSource<TResult>; overload;

  end;

  [DNTypeName('System.Threading.Tasks.TaskCompletionSource`1')]
  DNTaskCompletionSource<TResult> = interface(DNObject)
  ['{5233BB21-22F1-32CE-83AE-1D501D39FA2E}']
  { getters & setters } 

    function get_Task: DNTask<TResult>;

  { methods } 

    function TrySetException(exception: DNException): Boolean; overload;
    function TrySetException(exceptions: DNIEnumerable<DNException>): Boolean; overload;
    procedure SetException(exception: DNException); overload;
    procedure SetException(exceptions: DNIEnumerable<DNException>); overload;
    function TrySetResult(result: TResult): Boolean;
    procedure SetResult(result: TResult);
    function TrySetCanceled: Boolean; overload;
    function TrySetCanceled(cancellationToken: DNCancellationToken): Boolean; overload;
    procedure SetCanceled;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Task: DNTask<TResult> read get_Task;
  end;

  TDNTaskCompletionSource<TResult> = class(TDNGenericImport<DNTaskCompletionSourceClass<TResult>, DNTaskCompletionSource<TResult>>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskExtensionsClass = interface(DNObjectClass)
  ['{91F8CDD6-644A-56B4-B6DF-661390A96D88}']
  { static methods } 

    {class} function Unwrap(task: DNTask<DNTask>): DNTask; overload;

  end;

  [DNTypeName('System.Threading.Tasks.TaskExtensions')]
  DNTaskExtensions = interface(DNObject)
  ['{F162CF70-1E37-35A3-BA43-1991FB376283}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNTaskExtensions = class(TDNGenericImport<DNTaskExtensionsClass, DNTaskExtensions>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskFactoryClass<TResult> = interface(DNObjectClass)
  ['{D2D4998B-656F-5577-B2CD-FC756D1D187E}']
  { constructors } 

    {class} function init: DNTaskFactory<TResult>; overload;
    {class} function init(cancellationToken: DNCancellationToken): DNTaskFactory<TResult>; overload;
    {class} function init(scheduler: DNTaskScheduler): DNTaskFactory<TResult>; overload;
    {class} function init(creationOptions: DNTaskCreationOptions; continuationOptions: DNTaskContinuationOptions): DNTaskFactory<TResult>; overload;
    {class} function init(cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTaskFactory<TResult>; overload;

  end;

  [DNTypeName('System.Threading.Tasks.TaskFactory`1')]
  DNTaskFactory<TResult> = interface(DNObject)
  ['{2FD92259-2AB6-311C-A208-036A9259D374}']
  { getters & setters } 

    function get_CancellationToken: DNCancellationToken;
    function get_Scheduler: DNTaskScheduler;
    function get_CreationOptions: DNTaskCreationOptions;
    function get_ContinuationOptions: DNTaskContinuationOptions;

  { methods } 

    function StartNew(&function: DNFunc<TResult>): DNTask<TResult>; overload;
    function StartNew(&function: DNFunc<TResult>; cancellationToken: DNCancellationToken): DNTask<TResult>; overload;
    function StartNew(&function: DNFunc<TResult>; creationOptions: DNTaskCreationOptions): DNTask<TResult>; overload;
    function StartNew(&function: DNFunc<TResult>; cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions; scheduler: DNTaskScheduler): DNTask<TResult>; overload;
    function StartNew(&function: DNFunc<DNObject, TResult>; state: DNObject): DNTask<TResult>; overload;
    function StartNew(&function: DNFunc<DNObject, TResult>; state: DNObject; cancellationToken: DNCancellationToken): DNTask<TResult>; overload;
    function StartNew(&function: DNFunc<DNObject, TResult>; state: DNObject; creationOptions: DNTaskCreationOptions): DNTask<TResult>; overload;
    function StartNew(&function: DNFunc<DNObject, TResult>; state: DNObject; cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions; scheduler: DNTaskScheduler): DNTask<TResult>; overload;
    function FromAsync(asyncResult: DNIAsyncResult; endMethod: DNFunc<DNIAsyncResult, TResult>): DNTask<TResult>; overload;
    function FromAsync(asyncResult: DNIAsyncResult; endMethod: DNFunc<DNIAsyncResult, TResult>; creationOptions: DNTaskCreationOptions): DNTask<TResult>; overload;
    function FromAsync(asyncResult: DNIAsyncResult; endMethod: DNFunc<DNIAsyncResult, TResult>; creationOptions: DNTaskCreationOptions; scheduler: DNTaskScheduler): DNTask<TResult>; overload;
    function FromAsync(beginMethod: DNFunc<DNAsyncCallback, DNObject, DNIAsyncResult>; endMethod: DNFunc<DNIAsyncResult, TResult>; state: DNObject): DNTask<TResult>; overload;
    function FromAsync(beginMethod: DNFunc<DNAsyncCallback, DNObject, DNIAsyncResult>; endMethod: DNFunc<DNIAsyncResult, TResult>; state: DNObject; creationOptions: DNTaskCreationOptions): DNTask<TResult>; overload;
    function ContinueWhenAll(tasks: TArray<DNTask>; continuationFunction: DNFunc<TArray<DNTask>, TResult>): DNTask<TResult>; overload;
    function ContinueWhenAll(tasks: TArray<DNTask>; continuationFunction: DNFunc<TArray<DNTask>, TResult>; cancellationToken: DNCancellationToken): DNTask<TResult>; overload;
    function ContinueWhenAll(tasks: TArray<DNTask>; continuationFunction: DNFunc<TArray<DNTask>, TResult>; continuationOptions: DNTaskContinuationOptions): DNTask<TResult>; overload;
    function ContinueWhenAll(tasks: TArray<DNTask>; continuationFunction: DNFunc<TArray<DNTask>, TResult>; cancellationToken: DNCancellationToken; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTask<TResult>; overload;
    function ContinueWhenAny(tasks: TArray<DNTask>; continuationFunction: DNFunc<DNTask, TResult>): DNTask<TResult>; overload;
    function ContinueWhenAny(tasks: TArray<DNTask>; continuationFunction: DNFunc<DNTask, TResult>; cancellationToken: DNCancellationToken): DNTask<TResult>; overload;
    function ContinueWhenAny(tasks: TArray<DNTask>; continuationFunction: DNFunc<DNTask, TResult>; continuationOptions: DNTaskContinuationOptions): DNTask<TResult>; overload;
    function ContinueWhenAny(tasks: TArray<DNTask>; continuationFunction: DNFunc<DNTask, TResult>; cancellationToken: DNCancellationToken; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTask<TResult>; overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property CancellationToken: DNCancellationToken read get_CancellationToken;
    property Scheduler: DNTaskScheduler read get_Scheduler;
    property CreationOptions: DNTaskCreationOptions read get_CreationOptions;
    property ContinuationOptions: DNTaskContinuationOptions read get_ContinuationOptions;
  end;

  TDNTaskFactory<TResult> = class(TDNGenericImport<DNTaskFactoryClass<TResult>, DNTaskFactory<TResult>>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskFactoryClass = interface(DNObjectClass)
  ['{C49BE7C9-8C05-5C45-904F-5A2BC369FC85}']
  { constructors } 

    {class} function init: DNTaskFactory; overload;
    {class} function init(cancellationToken: DNCancellationToken): DNTaskFactory; overload;
    {class} function init(scheduler: DNTaskScheduler): DNTaskFactory; overload;
    {class} function init(creationOptions: DNTaskCreationOptions; continuationOptions: DNTaskContinuationOptions): DNTaskFactory; overload;
    {class} function init(cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTaskFactory; overload;

  end;

  [DNTypeName('System.Threading.Tasks.TaskFactory')]
  DNTaskFactory = interface(DNObject)
  ['{29832585-303B-3B7E-B396-89B798F132DD}']
  { getters & setters } 

    function get_CancellationToken: DNCancellationToken;
    function get_Scheduler: DNTaskScheduler;
    function get_CreationOptions: DNTaskCreationOptions;
    function get_ContinuationOptions: DNTaskContinuationOptions;

  { methods } 

    function StartNew(action: DNAction): DNTask; overload;
    function StartNew(action: DNAction; cancellationToken: DNCancellationToken): DNTask; overload;
    function StartNew(action: DNAction; creationOptions: DNTaskCreationOptions): DNTask; overload;
    function StartNew(action: DNAction; cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    function StartNew(action: DNAction<DNObject>; state: DNObject): DNTask; overload;
    function StartNew(action: DNAction<DNObject>; state: DNObject; cancellationToken: DNCancellationToken): DNTask; overload;
    function StartNew(action: DNAction<DNObject>; state: DNObject; creationOptions: DNTaskCreationOptions): DNTask; overload;
    function StartNew(action: DNAction<DNObject>; state: DNObject; cancellationToken: DNCancellationToken; creationOptions: DNTaskCreationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    function FromAsync(asyncResult: DNIAsyncResult; endMethod: DNAction<DNIAsyncResult>): DNTask; overload;
    function FromAsync(asyncResult: DNIAsyncResult; endMethod: DNAction<DNIAsyncResult>; creationOptions: DNTaskCreationOptions): DNTask; overload;
    function FromAsync(asyncResult: DNIAsyncResult; endMethod: DNAction<DNIAsyncResult>; creationOptions: DNTaskCreationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    function FromAsync(beginMethod: DNFunc<DNAsyncCallback, DNObject, DNIAsyncResult>; endMethod: DNAction<DNIAsyncResult>; state: DNObject): DNTask; overload;
    function FromAsync(beginMethod: DNFunc<DNAsyncCallback, DNObject, DNIAsyncResult>; endMethod: DNAction<DNIAsyncResult>; state: DNObject; creationOptions: DNTaskCreationOptions): DNTask; overload;
    function ContinueWhenAll(tasks: TArray<DNTask>; continuationAction: DNAction<TArray<DNTask>>): DNTask; overload;
    function ContinueWhenAll(tasks: TArray<DNTask>; continuationAction: DNAction<TArray<DNTask>>; cancellationToken: DNCancellationToken): DNTask; overload;
    function ContinueWhenAll(tasks: TArray<DNTask>; continuationAction: DNAction<TArray<DNTask>>; continuationOptions: DNTaskContinuationOptions): DNTask; overload;
    function ContinueWhenAll(tasks: TArray<DNTask>; continuationAction: DNAction<TArray<DNTask>>; cancellationToken: DNCancellationToken; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    function ContinueWhenAny(tasks: TArray<DNTask>; continuationAction: DNAction<DNTask>): DNTask; overload;
    function ContinueWhenAny(tasks: TArray<DNTask>; continuationAction: DNAction<DNTask>; cancellationToken: DNCancellationToken): DNTask; overload;
    function ContinueWhenAny(tasks: TArray<DNTask>; continuationAction: DNAction<DNTask>; continuationOptions: DNTaskContinuationOptions): DNTask; overload;
    function ContinueWhenAny(tasks: TArray<DNTask>; continuationAction: DNAction<DNTask>; cancellationToken: DNCancellationToken; continuationOptions: DNTaskContinuationOptions; scheduler: DNTaskScheduler): DNTask; overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property CancellationToken: DNCancellationToken read get_CancellationToken;
    property Scheduler: DNTaskScheduler read get_Scheduler;
    property CreationOptions: DNTaskCreationOptions read get_CreationOptions;
    property ContinuationOptions: DNTaskContinuationOptions read get_ContinuationOptions;
  end;

  TDNTaskFactory = class(TDNGenericImport<DNTaskFactoryClass, DNTaskFactory>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskSchedulerClass = interface(DNObjectClass)
  ['{469B8756-F937-53CF-B486-B86192265301}']
  { static getter & setter } 

    {class} function get_Default: DNTaskScheduler;
    {class} function get_Current: DNTaskScheduler;

  { static methods } 

    {class} function FromCurrentSynchronizationContext: DNTaskScheduler;

  { static propertys } 

    {class} property &Default: DNTaskScheduler read get_Default;
    {class} property Current: DNTaskScheduler read get_Current;
  end;

  [DNTypeName('System.Threading.Tasks.TaskScheduler')]
  DNTaskScheduler = interface(DNObject)
  ['{3E6DF7FD-B38A-3A16-BD9D-C2599CD234D6}']
  { getters & setters } 

    function get_MaximumConcurrencyLevel: Int32;
    function get_Id: Int32;

  { events } 

    {class} procedure add_UnobservedTaskException(value: DNEventHandler<DNUnobservedTaskExceptionEventArgs>);
    {class} procedure remove_UnobservedTaskException(value: DNEventHandler<DNUnobservedTaskExceptionEventArgs>);

  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property MaximumConcurrencyLevel: Int32 read get_MaximumConcurrencyLevel;
    property Id: Int32 read get_Id;
  end;

  TDNTaskScheduler = class(TDNGenericImport<DNTaskSchedulerClass, DNTaskScheduler>) end;

  //-------------namespace: System.Threading----------------
  DNThreadLocalClass<T> = interface(DNObjectClass)
  ['{FA14259E-8B8B-5485-AF0C-8F9222762D7B}']
  { constructors } 

    {class} function init: DNThreadLocal<T>; overload;
    {class} function init(trackAllValues: Boolean): DNThreadLocal<T>; overload;
    {class} function init(valueFactory: DNFunc<T>): DNThreadLocal<T>; overload;
    {class} function init(valueFactory: DNFunc<T>; trackAllValues: Boolean): DNThreadLocal<T>; overload;

  end;

  [DNTypeName('System.Threading.ThreadLocal`1')]
  DNThreadLocal<T> = interface(DNIDisposable)
  ['{390219B6-0FAE-38E9-A62C-9DB3A7357F95}']
  { getters & setters } 

    function get_Value: T;
    procedure set_Value(value: T);
    function get_Values: DNIList<T>;
    function get_IsValueCreated: Boolean;

  { methods } 

    procedure Dispose;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Value: T read get_Value write set_Value;
    property Values: DNIList<T> read get_Values;
    property IsValueCreated: Boolean read get_IsValueCreated;
  end;

  TDNThreadLocal<T> = class(TDNGenericImport<DNThreadLocalClass<T>, DNThreadLocal<T>>) end;

  //-------------namespace: System.Threading----------------
  DNThreadPoolClass = interface(DNObjectClass)
  ['{7E2B0DD5-D017-560C-9200-65001996DE14}']
  { static methods } 

    {class} function SetMaxThreads(workerThreads: Int32; completionPortThreads: Int32): Boolean;
    {class} procedure GetMaxThreads(out workerThreads: Int32; out completionPortThreads: Int32);
    {class} function SetMinThreads(workerThreads: Int32; completionPortThreads: Int32): Boolean;
    {class} procedure GetMinThreads(out workerThreads: Int32; out completionPortThreads: Int32);
    {class} procedure GetAvailableThreads(out workerThreads: Int32; out completionPortThreads: Int32);
    {class} function RegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; millisecondsTimeOutInterval: UInt32; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    {class} function UnsafeRegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; millisecondsTimeOutInterval: UInt32; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    {class} function RegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; millisecondsTimeOutInterval: Int32; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    {class} function UnsafeRegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; millisecondsTimeOutInterval: Int32; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    {class} function RegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; millisecondsTimeOutInterval: Int64; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    {class} function UnsafeRegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; millisecondsTimeOutInterval: Int64; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    {class} function RegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; timeout: DNTimeSpan; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    {class} function UnsafeRegisterWaitForSingleObject(waitObject: DNWaitHandle; callBack: DNWaitOrTimerCallback; state: DNObject; timeout: DNTimeSpan; executeOnlyOnce: Boolean): DNRegisteredWaitHandle; overload;
    {class} function QueueUserWorkItem(callBack: DNWaitCallback): Boolean; overload;
    {class} function QueueUserWorkItem(callBack: DNWaitCallback; state: DNObject): Boolean; overload;
    {class} function UnsafeQueueUserWorkItem(callBack: DNWaitCallback; state: DNObject): Boolean;
    {class} function UnsafeQueueNativeOverlapped(var overlapped: DNNativeOverlapped): Boolean;
    {class} function BindHandle(osHandle: IntPtr): Boolean; overload;
    {class} function BindHandle(osHandle: DNSafeHandle): Boolean; overload;

  end;

  [DNTypeName('System.Threading.ThreadPool')]
  DNThreadPool = interface(DNObject)
  ['{4CDFF9F3-85D9-3412-A508-3832FF8AC0B2}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNThreadPool = class(TDNGenericImport<DNThreadPoolClass, DNThreadPool>) end;

  //-------------namespace: System.Threading----------------
  DNThreadPoolBoundHandleClass = interface(DNObjectClass)
  ['{45D5A8B3-8331-5FC7-BE46-B3E72400868A}']
  { static methods } 

    {class} function BindHandle(handle: DNSafeHandle): DNThreadPoolBoundHandle;
    {class} function GetNativeOverlappedState(var overlapped: DNNativeOverlapped): DNObject;

  end;

  [DNTypeName('System.Threading.ThreadPoolBoundHandle')]
  DNThreadPoolBoundHandle = interface(DNIDisposable)
  ['{BC58AA5A-7443-35DC-B6FB-ECC166AD32BA}']
  { getters & setters } 

    function get_Handle: DNSafeHandle;

  { methods } 

    function AllocateNativeOverlapped(callback: DNIOCompletionCallback; state: DNObject; pinData: DNObject): DNNativeOverlapped; overload;
    function AllocateNativeOverlapped(preAllocated: DNPreAllocatedOverlapped): DNNativeOverlapped; overload;
    procedure FreeNativeOverlapped(var overlapped: DNNativeOverlapped);
    procedure Dispose;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Handle: DNSafeHandle read get_Handle;
  end;

  TDNThreadPoolBoundHandle = class(TDNGenericImport<DNThreadPoolBoundHandleClass, DNThreadPoolBoundHandle>) end;

  //-------------namespace: System.Threading----------------
  DNTimeoutClass = interface(DNObjectClass)
  ['{76DD5929-42C0-59D4-8F03-458539BDDA87}']
  { static fields getter & setter } 

   function __fakeFieldGet_InfiniteTimeSpan: DNTimeSpan;

  { static fields } 

    {class} property InfiniteTimeSpan: DNTimeSpan read __fakeFieldGet_InfiniteTimeSpan;

  end;

  [DNTypeName('System.Threading.Timeout')]
  DNTimeout = interface(DNObject)
  ['{6A218BF4-9EEB-3E06-A4A4-C732CF5BA562}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNTimeout = class(TDNGenericImport<DNTimeoutClass, DNTimeout>)
  public const
   Infinite = -1;
  end;

  //-------------namespace: System.Threading----------------
  DNVolatileClass = interface(DNObjectClass)
  ['{285BB5DC-B3B6-5D1E-8245-70C1368CA6E1}']
  { static methods } 

    {class} function Read(out location: Boolean): Boolean; overload;
    {class} function Read(out location: SByte): SByte; overload;
    {class} function Read(out location: Byte): Byte; overload;
    {class} function Read(out location: Int16): Int16; overload;
    {class} function Read(out location: UInt16): UInt16; overload;
    {class} function Read(out location: Int32): Int32; overload;
    {class} function Read(out location: UInt32): UInt32; overload;
    {class} function Read(out location: Int64): Int64; overload;
    {class} function Read(out location: UInt64): UInt64; overload;
    {class} function Read(out location: IntPtr): IntPtr; overload;
    {class} function Read(out location: UIntPtr): UIntPtr; overload;
    {class} function Read(out location: Single): Single; overload;
    {class} function Read(out location: Double): Double; overload;
    {class} procedure Write(out location: Boolean; value: Boolean); overload;
    {class} procedure Write(out location: SByte; value: SByte); overload;
    {class} procedure Write(out location: Byte; value: Byte); overload;
    {class} procedure Write(out location: Int16; value: Int16); overload;
    {class} procedure Write(out location: UInt16; value: UInt16); overload;
    {class} procedure Write(out location: Int32; value: Int32); overload;
    {class} procedure Write(out location: UInt32; value: UInt32); overload;
    {class} procedure Write(out location: Int64; value: Int64); overload;
    {class} procedure Write(out location: UInt64; value: UInt64); overload;
    {class} procedure Write(out location: IntPtr; value: IntPtr); overload;
    {class} procedure Write(out location: UIntPtr; value: UIntPtr); overload;
    {class} procedure Write(out location: Single; value: Single); overload;
    {class} procedure Write(out location: Double; value: Double); overload;

  end;

  [DNTypeName('System.Threading.Volatile')]
  DNVolatile = interface(DNObject)
  ['{9CBCA705-58CA-3229-BFF4-5818A993EB31}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNVolatile = class(TDNGenericImport<DNVolatileClass, DNVolatile>) end;

  //-------------namespace: System----------------
  DNTimeZoneClass = interface(DNObjectClass)
  ['{B07F0F55-A088-57EF-8111-26914B523A9A}']
  { static getter & setter } 

    {class} function get_CurrentTimeZone: DNTimeZone;

  { static methods } 

    {class} function IsDaylightSavingTime(time: DNDateTime; daylightTimes: DNDaylightTime): Boolean; overload;

  { static propertys } 

    {class} property CurrentTimeZone: DNTimeZone read get_CurrentTimeZone;
  end;

  [DNTypeName('System.TimeZone')]
  DNTimeZone = interface(DNObject)
  ['{564FCE16-0CA0-3278-BEE6-081E5F4A5E68}']
  { getters & setters } 

    function get_StandardName: string;
    function get_DaylightName: string;

  { methods } 

    function GetUtcOffset(time: DNDateTime): DNTimeSpan;
    function ToUniversalTime(time: DNDateTime): DNDateTime;
    function ToLocalTime(time: DNDateTime): DNDateTime;
    function GetDaylightChanges(year: Int32): DNDaylightTime;
    function IsDaylightSavingTime(time: DNDateTime): Boolean; overload;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property StandardName: string read get_StandardName;
    property DaylightName: string read get_DaylightName;
  end;

  TDNTimeZone = class(TDNGenericImport<DNTimeZoneClass, DNTimeZone>) end;

  //-------------namespace: System----------------
  DNTimeZoneInfoClass = interface(DNObjectClass)
  ['{0C9165D7-2B73-56FB-BBE0-9F095C737876}']
  { static getter & setter } 

    {class} function get_Local: DNTimeZoneInfo;
    {class} function get_Utc: DNTimeZoneInfo;

  { static methods } 

    {class} procedure ClearCachedData;
    {class} function ConvertTimeBySystemTimeZoneId(dateTimeOffset: DNDateTimeOffset; destinationTimeZoneId: string): DNDateTimeOffset; overload;
    {class} function ConvertTimeBySystemTimeZoneId(dateTime: DNDateTime; destinationTimeZoneId: string): DNDateTime; overload;
    {class} function ConvertTimeBySystemTimeZoneId(dateTime: DNDateTime; sourceTimeZoneId: string; destinationTimeZoneId: string): DNDateTime; overload;
    {class} function ConvertTime(dateTimeOffset: DNDateTimeOffset; destinationTimeZone: DNTimeZoneInfo): DNDateTimeOffset; overload;
    {class} function ConvertTime(dateTime: DNDateTime; destinationTimeZone: DNTimeZoneInfo): DNDateTime; overload;
    {class} function ConvertTime(dateTime: DNDateTime; sourceTimeZone: DNTimeZoneInfo; destinationTimeZone: DNTimeZoneInfo): DNDateTime; overload;
    {class} function ConvertTimeFromUtc(dateTime: DNDateTime; destinationTimeZone: DNTimeZoneInfo): DNDateTime;
    {class} function ConvertTimeToUtc(dateTime: DNDateTime): DNDateTime; overload;
    {class} function ConvertTimeToUtc(dateTime: DNDateTime; sourceTimeZone: DNTimeZoneInfo): DNDateTime; overload;
    {class} function FromSerializedString(source: string): DNTimeZoneInfo;
    {class} function GetSystemTimeZones: DNReadOnlyCollection<DNTimeZoneInfo>;
    {class} function CreateCustomTimeZone(id: string; baseUtcOffset: DNTimeSpan; displayName: string; standardDisplayName: string): DNTimeZoneInfo; overload;
    {class} function CreateCustomTimeZone(id: string; baseUtcOffset: DNTimeSpan; displayName: string; standardDisplayName: string; daylightDisplayName: string; adjustmentRules: TArray<DNTimeZoneInfo_AdjustmentRule>): DNTimeZoneInfo; overload;
    {class} function CreateCustomTimeZone(id: string; baseUtcOffset: DNTimeSpan; displayName: string; standardDisplayName: string; daylightDisplayName: string; adjustmentRules: TArray<DNTimeZoneInfo_AdjustmentRule>; disableDaylightSavingTime: Boolean): DNTimeZoneInfo; overload;
    {class} function FindSystemTimeZoneById(id: string): DNTimeZoneInfo;

  { static propertys } 

    {class} property Local: DNTimeZoneInfo read get_Local;
    {class} property Utc: DNTimeZoneInfo read get_Utc;
  end;

  [DNTypeName('System.TimeZoneInfo')]
  DNTimeZoneInfo = interface(DNObject)
  ['{4E3C9C85-C9EB-33F5-B4CD-6357240EF7E0}']
  { getters & setters } 

    function get_Id: string;
    function get_DisplayName: string;
    function get_StandardName: string;
    function get_DaylightName: string;
    function get_BaseUtcOffset: DNTimeSpan;
    function get_SupportsDaylightSavingTime: Boolean;

  { methods } 

    function GetAmbiguousTimeOffsets(dateTimeOffset: DNDateTimeOffset): TArray<DNTimeSpan>; overload;
    function GetAmbiguousTimeOffsets(dateTime: DNDateTime): TArray<DNTimeSpan>; overload;
    function GetUtcOffset(dateTimeOffset: DNDateTimeOffset): DNTimeSpan; overload;
    function GetUtcOffset(dateTime: DNDateTime): DNTimeSpan; overload;
    function IsAmbiguousTime(dateTimeOffset: DNDateTimeOffset): Boolean; overload;
    function IsAmbiguousTime(dateTime: DNDateTime): Boolean; overload;
    function IsDaylightSavingTime(dateTimeOffset: DNDateTimeOffset): Boolean; overload;
    function IsDaylightSavingTime(dateTime: DNDateTime): Boolean; overload;
    function IsInvalidTime(dateTime: DNDateTime): Boolean;
    function Equals(other: DNTimeZoneInfo): Boolean; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function HasSameRules(other: DNTimeZoneInfo): Boolean;
    function ToSerializedString: string;
    function ToString: string;
    function GetAdjustmentRules: TArray<DNTimeZoneInfo_AdjustmentRule>;
    function GetType: DNType;

  { propertys } 

    property Id: string read get_Id;
    property DisplayName: string read get_DisplayName;
    property StandardName: string read get_StandardName;
    property DaylightName: string read get_DaylightName;
    property BaseUtcOffset: DNTimeSpan read get_BaseUtcOffset;
    property SupportsDaylightSavingTime: Boolean read get_SupportsDaylightSavingTime;
  end;

  TDNTimeZoneInfo = class(TDNGenericImport<DNTimeZoneInfoClass, DNTimeZoneInfo>) end;

  //-------------namespace: System----------------
  DNTimeZoneInfo_AdjustmentRuleClass = interface(DNObjectClass)
  ['{C7B59124-A96E-58BB-B1BF-41C6716C42BD}']
  { static methods } 

    {class} function CreateAdjustmentRule(dateStart: DNDateTime; dateEnd: DNDateTime; daylightDelta: DNTimeSpan; daylightTransitionStart: DNTimeZoneInfo_TransitionTime; daylightTransitionEnd: DNTimeZoneInfo_TransitionTime): DNTimeZoneInfo_AdjustmentRule;

  end;

  [DNTypeName('System.TimeZoneInfo+AdjustmentRule')]
  DNTimeZoneInfo_AdjustmentRule = interface(DNObject)
  ['{3B97B0D4-9560-3DD3-9CEE-EED0A5BAAC40}']
  { getters & setters } 

    function get_DateStart: DNDateTime;
    function get_DateEnd: DNDateTime;
    function get_DaylightDelta: DNTimeSpan;
    function get_DaylightTransitionStart: DNTimeZoneInfo_TransitionTime;
    function get_DaylightTransitionEnd: DNTimeZoneInfo_TransitionTime;

  { methods } 

    function Equals(other: DNTimeZoneInfo_AdjustmentRule): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function Equals(obj: DNObject): Boolean; overload;
    function GetType: DNType;

  { propertys } 

    property DateStart: DNDateTime read get_DateStart;
    property DateEnd: DNDateTime read get_DateEnd;
    property DaylightDelta: DNTimeSpan read get_DaylightDelta;
    property DaylightTransitionStart: DNTimeZoneInfo_TransitionTime read get_DaylightTransitionStart;
    property DaylightTransitionEnd: DNTimeZoneInfo_TransitionTime read get_DaylightTransitionEnd;
  end;

  TDNTimeZoneInfo_AdjustmentRule = class(TDNGenericImport<DNTimeZoneInfo_AdjustmentRuleClass, DNTimeZoneInfo_AdjustmentRule>) end;

  //-------------namespace: System----------------
  DNTupleClass<T1> = interface(DNObjectClass)
  ['{31E5E48D-0BDD-56FE-9984-CD564A2895DE}']
  { constructors } 

    {class} function init(item1: T1): DNTuple<T1>;

  end;

  [DNTypeName('System.Tuple`1')]
  DNTuple<T1> = interface(DNIStructuralEquatable)
  ['{07FFBC8B-7E6C-3D58-8163-9A9D835316AD}']
  { getters & setters } 

    function get_Item1: T1;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Item1: T1 read get_Item1;
  end;

  TDNTuple<T1> = class(TDNGenericImport<DNTupleClass<T1>, DNTuple<T1>>) end;

  //-------------namespace: System----------------
  DNTupleClass<T1, T2> = interface(DNObjectClass)
  ['{2EBC9D56-55F4-5B09-9AE1-B69783265799}']
  { constructors } 

    {class} function init(item1: T1; item2: T2): DNTuple<T1, T2>;

  end;

  [DNTypeName('System.Tuple`2')]
  DNTuple<T1, T2> = interface(DNIStructuralEquatable)
  ['{D4792491-B156-3562-8247-7ABCFD34C2D7}']
  { getters & setters } 

    function get_Item1: T1;
    function get_Item2: T2;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Item1: T1 read get_Item1;
    property Item2: T2 read get_Item2;
  end;

  TDNTuple<T1, T2> = class(TDNGenericImport<DNTupleClass<T1, T2>, DNTuple<T1, T2>>) end;

  //-------------namespace: System----------------
  DNTupleClass<T1, T2, T3> = interface(DNObjectClass)
  ['{5A934ABB-D8CF-5AEE-AFAB-6E7E612988E7}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3): DNTuple<T1, T2, T3>;

  end;

  [DNTypeName('System.Tuple`3')]
  DNTuple<T1, T2, T3> = interface(DNIStructuralEquatable)
  ['{40894EB6-7AE5-300B-81FC-6F6686208A8D}']
  { getters & setters } 

    function get_Item1: T1;
    function get_Item2: T2;
    function get_Item3: T3;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Item1: T1 read get_Item1;
    property Item2: T2 read get_Item2;
    property Item3: T3 read get_Item3;
  end;

  TDNTuple<T1, T2, T3> = class(TDNGenericImport<DNTupleClass<T1, T2, T3>, DNTuple<T1, T2, T3>>) end;

  //-------------namespace: System----------------
  DNTupleClass<T1, T2, T3, T4> = interface(DNObjectClass)
  ['{634D5712-00EF-530E-86F2-3162DADA9DA9}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3; item4: T4): DNTuple<T1, T2, T3, T4>;

  end;

  [DNTypeName('System.Tuple`4')]
  DNTuple<T1, T2, T3, T4> = interface(DNIStructuralEquatable)
  ['{A2071FBC-D36D-3DA8-A860-E3D11A50FA47}']
  { getters & setters } 

    function get_Item1: T1;
    function get_Item2: T2;
    function get_Item3: T3;
    function get_Item4: T4;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Item1: T1 read get_Item1;
    property Item2: T2 read get_Item2;
    property Item3: T3 read get_Item3;
    property Item4: T4 read get_Item4;
  end;

  TDNTuple<T1, T2, T3, T4> = class(TDNGenericImport<DNTupleClass<T1, T2, T3, T4>, DNTuple<T1, T2, T3, T4>>) end;

  //-------------namespace: System----------------
  DNTupleClass<T1, T2, T3, T4, T5> = interface(DNObjectClass)
  ['{8EC30B0E-A882-53F4-BD68-06AB55379DA5}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3; item4: T4; item5: T5): DNTuple<T1, T2, T3, T4, T5>;

  end;

  [DNTypeName('System.Tuple`5')]
  DNTuple<T1, T2, T3, T4, T5> = interface(DNIStructuralEquatable)
  ['{D84F0A1D-F0B6-350D-BBC7-A7BDED4912A5}']
  { getters & setters } 

    function get_Item1: T1;
    function get_Item2: T2;
    function get_Item3: T3;
    function get_Item4: T4;
    function get_Item5: T5;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Item1: T1 read get_Item1;
    property Item2: T2 read get_Item2;
    property Item3: T3 read get_Item3;
    property Item4: T4 read get_Item4;
    property Item5: T5 read get_Item5;
  end;

  TDNTuple<T1, T2, T3, T4, T5> = class(TDNGenericImport<DNTupleClass<T1, T2, T3, T4, T5>, DNTuple<T1, T2, T3, T4, T5>>) end;

  //-------------namespace: System----------------
  DNTupleClass<T1, T2, T3, T4, T5, T6> = interface(DNObjectClass)
  ['{24759C0E-95AD-5A81-9BCE-60A8562433BF}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3; item4: T4; item5: T5; item6: T6): DNTuple<T1, T2, T3, T4, T5, T6>;

  end;

  [DNTypeName('System.Tuple`6')]
  DNTuple<T1, T2, T3, T4, T5, T6> = interface(DNIStructuralEquatable)
  ['{0AD31187-98DD-33FC-B5F7-1D653F18CE8C}']
  { getters & setters } 

    function get_Item1: T1;
    function get_Item2: T2;
    function get_Item3: T3;
    function get_Item4: T4;
    function get_Item5: T5;
    function get_Item6: T6;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Item1: T1 read get_Item1;
    property Item2: T2 read get_Item2;
    property Item3: T3 read get_Item3;
    property Item4: T4 read get_Item4;
    property Item5: T5 read get_Item5;
    property Item6: T6 read get_Item6;
  end;

  TDNTuple<T1, T2, T3, T4, T5, T6> = class(TDNGenericImport<DNTupleClass<T1, T2, T3, T4, T5, T6>, DNTuple<T1, T2, T3, T4, T5, T6>>) end;

  //-------------namespace: System----------------
  DNTupleClass<T1, T2, T3, T4, T5, T6, T7> = interface(DNObjectClass)
  ['{B36C60E8-9C25-5E02-A249-A4ADDFC3C113}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3; item4: T4; item5: T5; item6: T6; item7: T7): DNTuple<T1, T2, T3, T4, T5, T6, T7>;

  end;

  [DNTypeName('System.Tuple`7')]
  DNTuple<T1, T2, T3, T4, T5, T6, T7> = interface(DNIStructuralEquatable)
  ['{830C6EA3-9B33-38C8-B71F-C94C4D5EEB6A}']
  { getters & setters } 

    function get_Item1: T1;
    function get_Item2: T2;
    function get_Item3: T3;
    function get_Item4: T4;
    function get_Item5: T5;
    function get_Item6: T6;
    function get_Item7: T7;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Item1: T1 read get_Item1;
    property Item2: T2 read get_Item2;
    property Item3: T3 read get_Item3;
    property Item4: T4 read get_Item4;
    property Item5: T5 read get_Item5;
    property Item6: T6 read get_Item6;
    property Item7: T7 read get_Item7;
  end;

  TDNTuple<T1, T2, T3, T4, T5, T6, T7> = class(TDNGenericImport<DNTupleClass<T1, T2, T3, T4, T5, T6, T7>, DNTuple<T1, T2, T3, T4, T5, T6, T7>>) end;

  //-------------namespace: System----------------
  DNTupleClass<T1, T2, T3, T4, T5, T6, T7, TRest> = interface(DNObjectClass)
  ['{2CEECA38-9E12-5B92-9941-10556D3650B3}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3; item4: T4; item5: T5; item6: T6; item7: T7; rest: TRest): DNTuple<T1, T2, T3, T4, T5, T6, T7, TRest>;

  end;

  [DNTypeName('System.Tuple`8')]
  DNTuple<T1, T2, T3, T4, T5, T6, T7, TRest> = interface(DNIStructuralEquatable)
  ['{05B38A37-F426-37C6-839F-6D1338B6E881}']
  { getters & setters } 

    function get_Item1: T1;
    function get_Item2: T2;
    function get_Item3: T3;
    function get_Item4: T4;
    function get_Item5: T5;
    function get_Item6: T6;
    function get_Item7: T7;
    function get_Rest: TRest;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Item1: T1 read get_Item1;
    property Item2: T2 read get_Item2;
    property Item3: T3 read get_Item3;
    property Item4: T4 read get_Item4;
    property Item5: T5 read get_Item5;
    property Item6: T6 read get_Item6;
    property Item7: T7 read get_Item7;
    property Rest: TRest read get_Rest;
  end;

  TDNTuple<T1, T2, T3, T4, T5, T6, T7, TRest> = class(TDNGenericImport<DNTupleClass<T1, T2, T3, T4, T5, T6, T7, TRest>, DNTuple<T1, T2, T3, T4, T5, T6, T7, TRest>>) end;

  //-------------namespace: System----------------
  DNTupleClass = interface(DNObjectClass)
  ['{A49285F2-4BFD-5C83-B412-40D86C093A4E}']
  end;

  [DNTypeName('System.Tuple')]
  DNTuple = interface(DNObject)
  ['{E6C0B557-B886-3EE3-A6EC-78E29EB323D9}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNTuple = class(TDNGenericImport<DNTupleClass, DNTuple>) end;

  //-------------namespace: System----------------
  DNTupleExtensionsClass = interface(DNObjectClass)
  ['{FD3937FC-15FB-5A8E-ADE3-B7896A1763AB}']
  end;

  [DNTypeName('System.TupleExtensions')]
  DNTupleExtensions = interface(DNObject)
  ['{F2449BA3-F054-3DDB-865B-399DE95B9413}']
  { methods } 

    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNTupleExtensions = class(TDNGenericImport<DNTupleExtensionsClass, DNTupleExtensions>) end;

  //-------------namespace: System----------------
  DNUnitySerializationHolderClass = interface(DNObjectClass)
  ['{51F40D69-2DA4-5202-BF14-55E0F481D23C}']
  { constructors } 

    {class} function init(info: DNSerializationInfo; context: DNStreamingContext): DNUnitySerializationHolder;

  end;

  [DNTypeName('System.UnitySerializationHolder')]
  DNUnitySerializationHolder = interface(DNISerializable)
  ['{64FB9EDB-0DCE-32DF-A996-D884231AEFF5}']
  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetRealObject(context: DNStreamingContext): DNObject;
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNUnitySerializationHolder = class(TDNGenericImport<DNUnitySerializationHolderClass, DNUnitySerializationHolder>) end;

  //-------------namespace: System----------------
  DNValueTypeClass = interface(DNObjectClass)
  ['{7EF06C40-8E6A-5147-BF4C-7220DDC709E4}']
  end;

  [DNTypeName('System.ValueType')]
  DNValueType = interface(DNObject)
  ['{B23CF104-7C39-37C4-9868-32AB9A1DBF1E}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNValueType = class(TDNGenericImport<DNValueTypeClass, DNValueType>) end;

  //-------------namespace: System----------------
  DNArgIteratorClass = interface(DNValueTypeClass)
  ['{9F1E2777-6244-5A3A-AA47-DBBAB076F153}']
  { constructors } 

    {class} function init(arglist: DNRuntimeArgumentHandle): DNArgIterator; overload;
    {class} function init(arglist: DNRuntimeArgumentHandle; var ptr: DNVoid): DNArgIterator; overload;

  end;

  [DNTypeName('System.ArgIterator')]
  DNArgIterator = interface(DNValueType)
  ['{B32AD4C4-4E81-3348-81F9-2D61F0ED0398}']
  { methods } 

    procedure &End;
    function Equals(o: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetNextArg: DNTypedReference; overload;
    function GetNextArg(rth: DNRuntimeTypeHandle): DNTypedReference; overload;
    function GetNextArgType: DNRuntimeTypeHandle;
    function GetRemainingCount: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNArgIterator = class(TDNGenericImport<DNArgIteratorClass, DNArgIterator>) end;

  //-------------namespace: System----------------
  DNArraySegmentClass<T> = interface(DNValueTypeClass)
  ['{BC9C06BA-10FB-5E28-922D-E3CE97A97ADD}']
  { static getter & setter } 

    {class} function get_Empty: DNArraySegment<T>;

  { constructors } 

    {class} function init(&array: TArray<T>): DNArraySegment<T>; overload;
    {class} function init(&array: TArray<T>; offset: Int32; count: Int32): DNArraySegment<T>; overload;

  { static propertys } 

    {class} property Empty: DNArraySegment<T> read get_Empty;
  end;

  [DNTypeName('System.ArraySegment`1')]
  DNArraySegment<T> = interface(DNValueType)
  ['{C7A7D29F-97ED-376D-8C9E-2E9813A392AF}']
  { getters & setters } 

    function get_Array: TArray<T>;
    function get_Offset: Int32;
    function get_Count: Int32;
    function get_Item(index: Int32): T;
    procedure set_Item(index: Int32; value: T);

  { methods } 

    function GetEnumerator: DNArraySegment_Enumerator<T>;
    function GetHashCode: Int32;
    procedure CopyTo(destination: TArray<T>); overload;
    procedure CopyTo(destination: TArray<T>; destinationIndex: Int32); overload;
    procedure CopyTo(destination: DNArraySegment<T>); overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNArraySegment<T>): Boolean; overload;
    function Slice(index: Int32): DNArraySegment<T>; overload;
    function Slice(index: Int32; count: Int32): DNArraySegment<T>; overload;
    function ToArray: TArray<T>;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property &Array: TArray<T> read get_Array;
    property Offset: Int32 read get_Offset;
    property Count: Int32 read get_Count;
    property Item[index: Int32]: T read get_Item write set_Item; default;
  end;

  TDNArraySegment<T> = class(TDNGenericImport<DNArraySegmentClass<T>, DNArraySegment<T>>) end;

  //-------------namespace: System----------------
  DNArraySegment_EnumeratorClass<T> = interface(DNValueTypeClass)
  ['{9A9939AD-53F6-552D-A6D3-825727C92969}']
  end;

  [DNTypeName('System.ArraySegment`1+Enumerator')]
  DNArraySegment_Enumerator<T> = interface(DNValueType)
  ['{5222AF6F-C4F7-314D-A6D4-4292B51613D6}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    function MoveNext: Boolean;
    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNArraySegment_Enumerator<T> = class(TDNGenericImport<DNArraySegment_EnumeratorClass<T>, DNArraySegment_Enumerator<T>>) end;

  //-------------namespace: System----------------
  DNBooleanClass = interface(DNValueTypeClass)
  ['{9F527B65-0141-5D5B-823B-0AB2DD1C29E2}']
  { static fields getter & setter } 

   function __fakeFieldGet_TrueString: string;
   function __fakeFieldGet_FalseString: string;

  { static fields } 

    {class} property TrueString: string read __fakeFieldGet_TrueString;
    {class} property FalseString: string read __fakeFieldGet_FalseString;

  { static methods } 

    {class} function Parse(value: string): Boolean; overload;
    {class} function Parse(value: DNReadOnlySpan<Char>): Boolean; overload;
    {class} function TryParse(value: string; out result: Boolean): Boolean; overload;
    {class} function TryParse(value: DNReadOnlySpan<Char>; out result: Boolean): Boolean; overload;

  end;

  [DNTypeName('System.Boolean')]
  DNBoolean = interface(DNValueType)
  ['{C3A0FDBF-A30B-315E-B019-42ABACF72CAE}']
  { methods } 

    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32): Boolean;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: Boolean): Boolean; overload;
    function CompareTo(obj: DNObject): Int32; overload;
    function CompareTo(value: Boolean): Int32; overload;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNBoolean = class(TDNGenericImport<DNBooleanClass, DNBoolean>) end;

  //-------------namespace: System.Buffers----------------
  DNMemoryHandleClass = interface(DNValueTypeClass)
  ['{26BA79AD-1AB5-535B-B530-948A17B73377}']
  { constructors } 

    {class} function init(var pointer: DNVoid; handle: DNGCHandle; pinnable: DNIPinnable): DNMemoryHandle;

  end;

  [DNTypeName('System.Buffers.MemoryHandle')]
  DNMemoryHandle = interface(DNValueType)
  ['{0CD15BDC-32F2-3AAD-8D83-44DB9E766753}']
  { getters & setters } 

    function get_Pointer: DNVoid;

  { methods } 

    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Pointer: DNVoid read get_Pointer;
  end;

  TDNMemoryHandle = class(TDNGenericImport<DNMemoryHandleClass, DNMemoryHandle>) end;

  //-------------namespace: System----------------
  DNByteClass = interface(DNValueTypeClass)
  ['{D063DBD7-48A4-541B-AF92-37621A782F09}']
  { static methods } 

    {class} function Parse(s: string): Byte; overload;
    {class} function Parse(s: string; style: DNNumberStyles): Byte; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): Byte; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): Byte; overload;
    {class} function Parse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider): Byte; overload;
    {class} function TryParse(s: string; out result: Byte): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; out result: Byte): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: Byte): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider; out result: Byte): Boolean; overload;

  end;

  [DNTypeName('System.Byte')]
  DNByte = interface(DNValueType)
  ['{B3B3B9F4-12DA-3EFD-B131-DF0E1F9F914B}']
  { methods } 

    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: Byte): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: Byte): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>; provider: DNIFormatProvider): Boolean;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNByte = class(TDNGenericImport<DNByteClass, DNByte>)
  public const
   MaxValue = 255;
   MinValue = 0;
  end;

  //-------------namespace: System----------------
  DNCharClass = interface(DNValueTypeClass)
  ['{8E12C731-3408-51C5-9087-F11B75748DF5}']
  { static methods } 

    {class} function ToString(c: Char): string; overload;
    {class} function Parse(s: string): Char;
    {class} function TryParse(s: string; out result: Char): Boolean;
    {class} function IsDigit(c: Char): Boolean; overload;
    {class} function IsLetter(c: Char): Boolean; overload;
    {class} function IsWhiteSpace(c: Char): Boolean; overload;
    {class} function IsUpper(c: Char): Boolean; overload;
    {class} function IsLower(c: Char): Boolean; overload;
    {class} function IsPunctuation(c: Char): Boolean; overload;
    {class} function IsLetterOrDigit(c: Char): Boolean; overload;
    {class} function ToUpper(c: Char; culture: DNCultureInfo): Char; overload;
    {class} function ToUpper(c: Char): Char; overload;
    {class} function ToUpperInvariant(c: Char): Char;
    {class} function ToLower(c: Char; culture: DNCultureInfo): Char; overload;
    {class} function ToLower(c: Char): Char; overload;
    {class} function ToLowerInvariant(c: Char): Char;
    {class} function IsControl(c: Char): Boolean; overload;
    {class} function IsControl(s: string; index: Int32): Boolean; overload;
    {class} function IsDigit(s: string; index: Int32): Boolean; overload;
    {class} function IsLetter(s: string; index: Int32): Boolean; overload;
    {class} function IsLetterOrDigit(s: string; index: Int32): Boolean; overload;
    {class} function IsLower(s: string; index: Int32): Boolean; overload;
    {class} function IsNumber(c: Char): Boolean; overload;
    {class} function IsNumber(s: string; index: Int32): Boolean; overload;
    {class} function IsPunctuation(s: string; index: Int32): Boolean; overload;
    {class} function IsSeparator(c: Char): Boolean; overload;
    {class} function IsSeparator(s: string; index: Int32): Boolean; overload;
    {class} function IsSurrogate(c: Char): Boolean; overload;
    {class} function IsSurrogate(s: string; index: Int32): Boolean; overload;
    {class} function IsSymbol(c: Char): Boolean; overload;
    {class} function IsSymbol(s: string; index: Int32): Boolean; overload;
    {class} function IsUpper(s: string; index: Int32): Boolean; overload;
    {class} function IsWhiteSpace(s: string; index: Int32): Boolean; overload;
    {class} function GetUnicodeCategory(c: Char): DNUnicodeCategory; overload;
    {class} function GetUnicodeCategory(s: string; index: Int32): DNUnicodeCategory; overload;
    {class} function GetNumericValue(c: Char): Double; overload;
    {class} function GetNumericValue(s: string; index: Int32): Double; overload;
    {class} function IsHighSurrogate(c: Char): Boolean; overload;
    {class} function IsHighSurrogate(s: string; index: Int32): Boolean; overload;
    {class} function IsLowSurrogate(c: Char): Boolean; overload;
    {class} function IsLowSurrogate(s: string; index: Int32): Boolean; overload;
    {class} function IsSurrogatePair(s: string; index: Int32): Boolean; overload;
    {class} function IsSurrogatePair(highSurrogate: Char; lowSurrogate: Char): Boolean; overload;
    {class} function ConvertFromUtf32(utf32: Int32): string;
    {class} function ConvertToUtf32(highSurrogate: Char; lowSurrogate: Char): Int32; overload;
    {class} function ConvertToUtf32(s: string; index: Int32): Int32; overload;

  end;

  [DNTypeName('System.Char')]
  DNChar = interface(DNValueType)
  ['{2D08EB84-64E6-3688-80D7-E0C548AC362D}']
  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: Char): Boolean; overload;
    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: Char): Int32; overload;
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNChar = class(TDNGenericImport<DNCharClass, DNChar>)
  public const
   MaxValue = #65535;
   MinValue = #0;
  end;

  //-------------namespace: System.Collections----------------
  DNDictionaryEntryClass = interface(DNValueTypeClass)
  ['{AEBA91F1-48F6-584D-9E3E-55B71A3B81DE}']
  { constructors } 

    {class} function init(key: DNObject; value: DNObject): DNDictionaryEntry;

  end;

  [DNTypeName('System.Collections.DictionaryEntry')]
  DNDictionaryEntry = interface(DNValueType)
  ['{6BDE513A-0DE0-329A-B061-2D50B9D99496}']
  { getters & setters } 

    function get_Key: DNObject;
    procedure set_Key(value: DNObject);
    function get_Value: DNObject;
    procedure set_Value(value: DNObject);

  { methods } 

    procedure Deconstruct(out key: DNObject; out value: DNObject);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Key: DNObject read get_Key write set_Key;
    property Value: DNObject read get_Value write set_Value;
  end;

  TDNDictionaryEntry = class(TDNGenericImport<DNDictionaryEntryClass, DNDictionaryEntry>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNDictionary_EnumeratorClass<TKey, TValue> = interface(DNValueTypeClass)
  ['{B4FEA0ED-0A99-51EC-8E6A-B5A6100EC608}']
  end;

  [DNTypeName('System.Collections.Generic.Dictionary`2+Enumerator')]
  DNDictionary_Enumerator<TKey, TValue> = interface(DNValueType)
  ['{08A30976-DBB1-36BE-8A0E-3BCC9525933B}']
  { getters & setters } 

    function get_Current: DNKeyValuePair<TKey, TValue>;

  { methods } 

    function MoveNext: Boolean;
    procedure Dispose;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Current: DNKeyValuePair<TKey, TValue> read get_Current;
  end;

  TDNDictionary_Enumerator<TKey, TValue> = class(TDNGenericImport<DNDictionary_EnumeratorClass<TKey, TValue>, DNDictionary_Enumerator<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNDictionary_KeyCollection_EnumeratorClass<TKey, TValue> = interface(DNValueTypeClass)
  ['{FAEE4FBD-F88E-53E4-B7C7-7F750028F13E}']
  end;

  [DNTypeName('System.Collections.Generic.Dictionary`2+KeyCollection+Enumerator')]
  DNDictionary_KeyCollection_Enumerator<TKey, TValue> = interface(DNValueType)
  ['{C457EA09-702E-3CF8-840F-FFFA6FE97818}']
  { getters & setters } 

    function get_Current: TKey;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Current: TKey read get_Current;
  end;

  TDNDictionary_KeyCollection_Enumerator<TKey, TValue> = class(TDNGenericImport<DNDictionary_KeyCollection_EnumeratorClass<TKey, TValue>, DNDictionary_KeyCollection_Enumerator<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNDictionary_ValueCollection_EnumeratorClass<TKey, TValue> = interface(DNValueTypeClass)
  ['{BBB2959C-79E8-5BF7-8E39-D84B51C6D47E}']
  end;

  [DNTypeName('System.Collections.Generic.Dictionary`2+ValueCollection+Enumerator')]
  DNDictionary_ValueCollection_Enumerator<TKey, TValue> = interface(DNValueType)
  ['{D93C9930-A717-3161-A1F2-F8D3818116F5}']
  { getters & setters } 

    function get_Current: TValue;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Current: TValue read get_Current;
  end;

  TDNDictionary_ValueCollection_Enumerator<TKey, TValue> = class(TDNGenericImport<DNDictionary_ValueCollection_EnumeratorClass<TKey, TValue>, DNDictionary_ValueCollection_Enumerator<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNKeyValuePairClass<TKey, TValue> = interface(DNValueTypeClass)
  ['{D42EE148-4FE2-5C29-B02C-0C90FAF28FB6}']
  { constructors } 

    {class} function init(key: TKey; value: TValue): DNKeyValuePair<TKey, TValue>;

  end;

  [DNTypeName('System.Collections.Generic.KeyValuePair`2')]
  DNKeyValuePair<TKey, TValue> = interface(DNValueType)
  ['{E6640393-AA9D-386F-90D4-1DD931420815}']
  { getters & setters } 

    function get_Key: TKey;
    function get_Value: TValue;

  { methods } 

    function ToString: string;
    procedure Deconstruct(out key: TKey; out value: TValue);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Key: TKey read get_Key;
    property Value: TValue read get_Value;
  end;

  TDNKeyValuePair<TKey, TValue> = class(TDNGenericImport<DNKeyValuePairClass<TKey, TValue>, DNKeyValuePair<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNList_EnumeratorClass<T> = interface(DNValueTypeClass)
  ['{5479F91B-E0F1-5A5C-9EE4-89237005414E}']
  end;

  [DNTypeName('System.Collections.Generic.List`1+Enumerator')]
  DNList_Enumerator<T> = interface(DNValueType)
  ['{C61A3E5E-0254-318E-A1E5-03106510B5A2}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNList_Enumerator<T> = class(TDNGenericImport<DNList_EnumeratorClass<T>, DNList_Enumerator<T>>) end;

  //-------------namespace: System----------------
  DNDateTimeClass = interface(DNValueTypeClass)
  ['{9F3E5ECB-0AF8-594F-8584-8BAAFAC29548}']
  { static getter & setter } 

    {class} function get_UtcNow: DNDateTime;
    {class} function get_Now: DNDateTime;
    {class} function get_Today: DNDateTime;

  { constructors } 

    {class} function init(ticks: Int64): DNDateTime; overload;
    {class} function init(ticks: Int64; kind: DNDateTimeKind): DNDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32): DNDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; calendar: DNCalendar): DNDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32): DNDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; kind: DNDateTimeKind): DNDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; calendar: DNCalendar): DNDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32): DNDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; kind: DNDateTimeKind): DNDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; calendar: DNCalendar): DNDateTime; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; calendar: DNCalendar; kind: DNDateTimeKind): DNDateTime; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_MinValue: DNDateTime;
   function __fakeFieldGet_MaxValue: DNDateTime;
   function __fakeFieldGet_UnixEpoch: DNDateTime;

  { static fields } 

    {class} property MinValue: DNDateTime read __fakeFieldGet_MinValue;
    {class} property MaxValue: DNDateTime read __fakeFieldGet_MaxValue;
    {class} property UnixEpoch: DNDateTime read __fakeFieldGet_UnixEpoch;

  { static methods } 

    {class} function Compare(t1: DNDateTime; t2: DNDateTime): Int32;
    {class} function DaysInMonth(year: Int32; month: Int32): Int32;
    {class} function Equals(t1: DNDateTime; t2: DNDateTime): Boolean; overload;
    {class} function FromBinary(dateData: Int64): DNDateTime;
    {class} function FromFileTime(fileTime: Int64): DNDateTime;
    {class} function FromFileTimeUtc(fileTime: Int64): DNDateTime;
    {class} function FromOADate(d: Double): DNDateTime;
    {class} function SpecifyKind(value: DNDateTime; kind: DNDateTimeKind): DNDateTime;
    {class} function IsLeapYear(year: Int32): Boolean;
    {class} function Parse(s: string): DNDateTime; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): DNDateTime; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider; styles: DNDateTimeStyles): DNDateTime; overload;
    {class} function Parse(s: DNReadOnlySpan<Char>; provider: DNIFormatProvider; styles: DNDateTimeStyles): DNDateTime; overload;
    {class} function ParseExact(s: string; format: string; provider: DNIFormatProvider): DNDateTime; overload;
    {class} function ParseExact(s: string; format: string; provider: DNIFormatProvider; style: DNDateTimeStyles): DNDateTime; overload;
    {class} function ParseExact(s: DNReadOnlySpan<Char>; format: DNReadOnlySpan<Char>; provider: DNIFormatProvider; style: DNDateTimeStyles): DNDateTime; overload;
    {class} function ParseExact(s: string; formats: TArray<string>; provider: DNIFormatProvider; style: DNDateTimeStyles): DNDateTime; overload;
    {class} function ParseExact(s: DNReadOnlySpan<Char>; formats: TArray<string>; provider: DNIFormatProvider; style: DNDateTimeStyles): DNDateTime; overload;
    {class} function TryParse(s: string; out result: DNDateTime): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; out result: DNDateTime): Boolean; overload;
    {class} function TryParse(s: string; provider: DNIFormatProvider; styles: DNDateTimeStyles; out result: DNDateTime): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; provider: DNIFormatProvider; styles: DNDateTimeStyles; out result: DNDateTime): Boolean; overload;
    {class} function TryParseExact(s: string; format: string; provider: DNIFormatProvider; style: DNDateTimeStyles; out result: DNDateTime): Boolean; overload;
    {class} function TryParseExact(s: DNReadOnlySpan<Char>; format: DNReadOnlySpan<Char>; provider: DNIFormatProvider; style: DNDateTimeStyles; out result: DNDateTime): Boolean; overload;
    {class} function TryParseExact(s: string; formats: TArray<string>; provider: DNIFormatProvider; style: DNDateTimeStyles; out result: DNDateTime): Boolean; overload;
    {class} function TryParseExact(s: DNReadOnlySpan<Char>; formats: TArray<string>; provider: DNIFormatProvider; style: DNDateTimeStyles; out result: DNDateTime): Boolean; overload;

  { static propertys } 

    {class} property UtcNow: DNDateTime read get_UtcNow;
    {class} property Now: DNDateTime read get_Now;
    {class} property Today: DNDateTime read get_Today;
  end;

  [DNTypeName('System.DateTime')]
  DNDateTime = interface(DNValueType)
  ['{0573B425-368A-369B-95D9-71C863DF45A5}']
  { getters & setters } 

    function get_Date: DNDateTime;
    function get_Day: Int32;
    function get_DayOfWeek: DNDayOfWeek;
    function get_DayOfYear: Int32;
    function get_Hour: Int32;
    function get_Kind: DNDateTimeKind;
    function get_Millisecond: Int32;
    function get_Minute: Int32;
    function get_Month: Int32;
    function get_Second: Int32;
    function get_Ticks: Int64;
    function get_TimeOfDay: DNTimeSpan;
    function get_Year: Int32;

  { methods } 

    function Add(value: DNTimeSpan): DNDateTime;
    function AddDays(value: Double): DNDateTime;
    function AddHours(value: Double): DNDateTime;
    function AddMilliseconds(value: Double): DNDateTime;
    function AddMinutes(value: Double): DNDateTime;
    function AddMonths(months: Int32): DNDateTime;
    function AddSeconds(value: Double): DNDateTime;
    function AddTicks(value: Int64): DNDateTime;
    function AddYears(value: Int32): DNDateTime;
    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: DNDateTime): Int32; overload;
    function Equals(value: DNObject): Boolean; overload;
    function Equals(value: DNDateTime): Boolean; overload;
    function IsDaylightSavingTime: Boolean;
    function ToBinary: Int64;
    function GetHashCode: Int32;
    function Subtract(value: DNDateTime): DNTimeSpan; overload;
    function Subtract(value: DNTimeSpan): DNDateTime; overload;
    function ToOADate: Double;
    function ToFileTime: Int64;
    function ToFileTimeUtc: Int64;
    function ToLocalTime: DNDateTime;
    function ToLongDateString: string;
    function ToLongTimeString: string;
    function ToShortDateString: string;
    function ToShortTimeString: string;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>; provider: DNIFormatProvider): Boolean;
    function ToUniversalTime: DNDateTime;
    function GetDateTimeFormats: TArray<string>; overload;
    function GetDateTimeFormats(provider: DNIFormatProvider): TArray<string>; overload;
    function GetDateTimeFormats(format: Char): TArray<string>; overload;
    function GetDateTimeFormats(format: Char; provider: DNIFormatProvider): TArray<string>; overload;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  { propertys } 

    property Date: DNDateTime read get_Date;
    property Day: Int32 read get_Day;
    property DayOfWeek: DNDayOfWeek read get_DayOfWeek;
    property DayOfYear: Int32 read get_DayOfYear;
    property Hour: Int32 read get_Hour;
    property Kind: DNDateTimeKind read get_Kind;
    property Millisecond: Int32 read get_Millisecond;
    property Minute: Int32 read get_Minute;
    property Month: Int32 read get_Month;
    property Second: Int32 read get_Second;
    property Ticks: Int64 read get_Ticks;
    property TimeOfDay: DNTimeSpan read get_TimeOfDay;
    property Year: Int32 read get_Year;
  end;

  TDNDateTime = class(TDNGenericImport<DNDateTimeClass, DNDateTime>) end;

  //-------------namespace: System----------------
  DNDateTimeOffsetClass = interface(DNValueTypeClass)
  ['{43FC2D7F-76D7-5311-8BBD-1B2B27EA555F}']
  { static getter & setter } 

    {class} function get_Now: DNDateTimeOffset;
    {class} function get_UtcNow: DNDateTimeOffset;

  { constructors } 

    {class} function init(ticks: Int64; offset: DNTimeSpan): DNDateTimeOffset; overload;
    {class} function init(dateTime: DNDateTime): DNDateTimeOffset; overload;
    {class} function init(dateTime: DNDateTime; offset: DNTimeSpan): DNDateTimeOffset; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; offset: DNTimeSpan): DNDateTimeOffset; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; offset: DNTimeSpan): DNDateTimeOffset; overload;
    {class} function init(year: Int32; month: Int32; day: Int32; hour: Int32; minute: Int32; second: Int32; millisecond: Int32; calendar: DNCalendar; offset: DNTimeSpan): DNDateTimeOffset; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_MinValue: DNDateTimeOffset;
   function __fakeFieldGet_MaxValue: DNDateTimeOffset;
   function __fakeFieldGet_UnixEpoch: DNDateTimeOffset;

  { static fields } 

    {class} property MinValue: DNDateTimeOffset read __fakeFieldGet_MinValue;
    {class} property MaxValue: DNDateTimeOffset read __fakeFieldGet_MaxValue;
    {class} property UnixEpoch: DNDateTimeOffset read __fakeFieldGet_UnixEpoch;

  { static methods } 

    {class} function Compare(first: DNDateTimeOffset; second: DNDateTimeOffset): Int32;
    {class} function Equals(first: DNDateTimeOffset; second: DNDateTimeOffset): Boolean; overload;
    {class} function FromFileTime(fileTime: Int64): DNDateTimeOffset;
    {class} function FromUnixTimeSeconds(seconds: Int64): DNDateTimeOffset;
    {class} function FromUnixTimeMilliseconds(milliseconds: Int64): DNDateTimeOffset;
    {class} function Parse(input: string): DNDateTimeOffset; overload;
    {class} function Parse(input: string; formatProvider: DNIFormatProvider): DNDateTimeOffset; overload;
    {class} function Parse(input: string; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles): DNDateTimeOffset; overload;
    {class} function Parse(input: DNReadOnlySpan<Char>; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles): DNDateTimeOffset; overload;
    {class} function ParseExact(input: string; format: string; formatProvider: DNIFormatProvider): DNDateTimeOffset; overload;
    {class} function ParseExact(input: string; format: string; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles): DNDateTimeOffset; overload;
    {class} function ParseExact(input: DNReadOnlySpan<Char>; format: DNReadOnlySpan<Char>; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles): DNDateTimeOffset; overload;
    {class} function ParseExact(input: string; formats: TArray<string>; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles): DNDateTimeOffset; overload;
    {class} function ParseExact(input: DNReadOnlySpan<Char>; formats: TArray<string>; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles): DNDateTimeOffset; overload;
    {class} function TryParse(input: string; out result: DNDateTimeOffset): Boolean; overload;
    {class} function TryParse(input: DNReadOnlySpan<Char>; out result: DNDateTimeOffset): Boolean; overload;
    {class} function TryParse(input: string; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles; out result: DNDateTimeOffset): Boolean; overload;
    {class} function TryParse(input: DNReadOnlySpan<Char>; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles; out result: DNDateTimeOffset): Boolean; overload;
    {class} function TryParseExact(input: string; format: string; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles; out result: DNDateTimeOffset): Boolean; overload;
    {class} function TryParseExact(input: DNReadOnlySpan<Char>; format: DNReadOnlySpan<Char>; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles; out result: DNDateTimeOffset): Boolean; overload;
    {class} function TryParseExact(input: string; formats: TArray<string>; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles; out result: DNDateTimeOffset): Boolean; overload;
    {class} function TryParseExact(input: DNReadOnlySpan<Char>; formats: TArray<string>; formatProvider: DNIFormatProvider; styles: DNDateTimeStyles; out result: DNDateTimeOffset): Boolean; overload;

  { static propertys } 

    {class} property Now: DNDateTimeOffset read get_Now;
    {class} property UtcNow: DNDateTimeOffset read get_UtcNow;
  end;

  [DNTypeName('System.DateTimeOffset')]
  DNDateTimeOffset = interface(DNValueType)
  ['{CAD586C7-D870-34EB-96A0-4B9A88A22A19}']
  { getters & setters } 

    function get_DateTime: DNDateTime;
    function get_UtcDateTime: DNDateTime;
    function get_LocalDateTime: DNDateTime;
    function get_Date: DNDateTime;
    function get_Day: Int32;
    function get_DayOfWeek: DNDayOfWeek;
    function get_DayOfYear: Int32;
    function get_Hour: Int32;
    function get_Millisecond: Int32;
    function get_Minute: Int32;
    function get_Month: Int32;
    function get_Offset: DNTimeSpan;
    function get_Second: Int32;
    function get_Ticks: Int64;
    function get_UtcTicks: Int64;
    function get_TimeOfDay: DNTimeSpan;
    function get_Year: Int32;

  { methods } 

    function ToOffset(offset: DNTimeSpan): DNDateTimeOffset;
    function Add(timeSpan: DNTimeSpan): DNDateTimeOffset;
    function AddDays(days: Double): DNDateTimeOffset;
    function AddHours(hours: Double): DNDateTimeOffset;
    function AddMilliseconds(milliseconds: Double): DNDateTimeOffset;
    function AddMinutes(minutes: Double): DNDateTimeOffset;
    function AddMonths(months: Int32): DNDateTimeOffset;
    function AddSeconds(seconds: Double): DNDateTimeOffset;
    function AddTicks(ticks: Int64): DNDateTimeOffset;
    function AddYears(years: Int32): DNDateTimeOffset;
    function CompareTo(other: DNDateTimeOffset): Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNDateTimeOffset): Boolean; overload;
    function EqualsExact(other: DNDateTimeOffset): Boolean;
    function GetHashCode: Int32;
    function Subtract(value: DNDateTimeOffset): DNTimeSpan; overload;
    function Subtract(value: DNTimeSpan): DNDateTimeOffset; overload;
    function ToFileTime: Int64;
    function ToUnixTimeSeconds: Int64;
    function ToUnixTimeMilliseconds: Int64;
    function ToLocalTime: DNDateTimeOffset;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToString(formatProvider: DNIFormatProvider): string; overload;
    function ToString(format: string; formatProvider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>; formatProvider: DNIFormatProvider): Boolean;
    function ToUniversalTime: DNDateTimeOffset;
    function GetType: DNType;

  { propertys } 

    property DateTime: DNDateTime read get_DateTime;
    property UtcDateTime: DNDateTime read get_UtcDateTime;
    property LocalDateTime: DNDateTime read get_LocalDateTime;
    property Date: DNDateTime read get_Date;
    property Day: Int32 read get_Day;
    property DayOfWeek: DNDayOfWeek read get_DayOfWeek;
    property DayOfYear: Int32 read get_DayOfYear;
    property Hour: Int32 read get_Hour;
    property Millisecond: Int32 read get_Millisecond;
    property Minute: Int32 read get_Minute;
    property Month: Int32 read get_Month;
    property Offset: DNTimeSpan read get_Offset;
    property Second: Int32 read get_Second;
    property Ticks: Int64 read get_Ticks;
    property UtcTicks: Int64 read get_UtcTicks;
    property TimeOfDay: DNTimeSpan read get_TimeOfDay;
    property Year: Int32 read get_Year;
  end;

  TDNDateTimeOffset = class(TDNGenericImport<DNDateTimeOffsetClass, DNDateTimeOffset>) end;

  //-------------namespace: System----------------
  DNDecimalClass = interface(DNValueTypeClass)
  ['{28DB066E-F265-54E4-BF6B-4F7A4E1C9EDF}']
  { constructors } 

    {class} function init(value: Int32): DNDecimal; overload;
    {class} function init(value: UInt32): DNDecimal; overload;
    {class} function init(value: Int64): DNDecimal; overload;
    {class} function init(value: UInt64): DNDecimal; overload;
    {class} function init(value: Single): DNDecimal; overload;
    {class} function init(value: Double): DNDecimal; overload;
    {class} function init(bits: TArray<Int32>): DNDecimal; overload;
    {class} function init(lo: Int32; mid: Int32; hi: Int32; isNegative: Boolean; scale: Byte): DNDecimal; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Zero: DNDecimal;
   function __fakeFieldGet_One: DNDecimal;
   function __fakeFieldGet_MinusOne: DNDecimal;
   function __fakeFieldGet_MaxValue: DNDecimal;
   function __fakeFieldGet_MinValue: DNDecimal;

  { static fields } 

    {class} property Zero: DNDecimal read __fakeFieldGet_Zero;
    {class} property One: DNDecimal read __fakeFieldGet_One;
    {class} property MinusOne: DNDecimal read __fakeFieldGet_MinusOne;
    {class} property MaxValue: DNDecimal read __fakeFieldGet_MaxValue;
    {class} property MinValue: DNDecimal read __fakeFieldGet_MinValue;

  { static methods } 

    {class} function ToOACurrency(value: DNDecimal): Int64;
    {class} function FromOACurrency(cy: Int64): DNDecimal;
    {class} function Add(d1: DNDecimal; d2: DNDecimal): DNDecimal;
    {class} function Ceiling(d: DNDecimal): DNDecimal;
    {class} function Compare(d1: DNDecimal; d2: DNDecimal): Int32;
    {class} function Divide(d1: DNDecimal; d2: DNDecimal): DNDecimal;
    {class} function Equals(d1: DNDecimal; d2: DNDecimal): Boolean; overload;
    {class} function Floor(d: DNDecimal): DNDecimal;
    {class} function Parse(s: string): DNDecimal; overload;
    {class} function Parse(s: string; style: DNNumberStyles): DNDecimal; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): DNDecimal; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): DNDecimal; overload;
    {class} function Parse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider): DNDecimal; overload;
    {class} function TryParse(s: string; out result: DNDecimal): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; out result: DNDecimal): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: DNDecimal): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider; out result: DNDecimal): Boolean; overload;
    {class} function GetBits(d: DNDecimal): TArray<Int32>;
    {class} function Remainder(d1: DNDecimal; d2: DNDecimal): DNDecimal;
    {class} function Multiply(d1: DNDecimal; d2: DNDecimal): DNDecimal;
    {class} function Negate(d: DNDecimal): DNDecimal;
    {class} function Round(d: DNDecimal): DNDecimal; overload;
    {class} function Round(d: DNDecimal; decimals: Int32): DNDecimal; overload;
    {class} function Round(d: DNDecimal; mode: DNMidpointRounding): DNDecimal; overload;
    {class} function Round(d: DNDecimal; decimals: Int32; mode: DNMidpointRounding): DNDecimal; overload;
    {class} function Subtract(d1: DNDecimal; d2: DNDecimal): DNDecimal;
    {class} function ToByte(value: DNDecimal): Byte;
    {class} function ToSByte(value: DNDecimal): SByte;
    {class} function ToInt16(value: DNDecimal): Int16;
    {class} function ToDouble(d: DNDecimal): Double;
    {class} function ToInt32(d: DNDecimal): Int32;
    {class} function ToInt64(d: DNDecimal): Int64;
    {class} function ToUInt16(value: DNDecimal): UInt16;
    {class} function ToUInt32(d: DNDecimal): UInt32;
    {class} function ToUInt64(d: DNDecimal): UInt64;
    {class} function ToSingle(d: DNDecimal): Single;
    {class} function Truncate(d: DNDecimal): DNDecimal;

  end;

  [DNTypeName('System.Decimal')]
  DNDecimal = interface(DNValueType)
  ['{3B0B7AA1-E4C0-3EAB-8E85-BCCA45B73AAF}']
  { methods } 

    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: DNDecimal): Int32; overload;
    function Equals(value: DNObject): Boolean; overload;
    function Equals(value: DNDecimal): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>; provider: DNIFormatProvider): Boolean;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNDecimal = class(TDNGenericImport<DNDecimalClass, DNDecimal>) end;

  //-------------namespace: System.Diagnostics.Tracing----------------
  DNEventSourceOptionsClass = interface(DNValueTypeClass)
  ['{7D94D5E2-4BBD-5A7C-BC67-C3BB5DB1A453}']
  end;

  [DNTypeName('System.Diagnostics.Tracing.EventSourceOptions')]
  DNEventSourceOptions = interface(DNValueType)
  ['{AA6026F1-4041-3B38-AB01-EFE5F75AF752}']
  { getters & setters } 

    function get_Level: DNEventLevel;
    procedure set_Level(value: DNEventLevel);
    function get_Opcode: DNEventOpcode;
    procedure set_Opcode(value: DNEventOpcode);
    function get_Keywords: DNEventKeywords;
    procedure set_Keywords(value: DNEventKeywords);
    function get_Tags: DNEventTags;
    procedure set_Tags(value: DNEventTags);
    function get_ActivityOptions: DNEventActivityOptions;
    procedure set_ActivityOptions(value: DNEventActivityOptions);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Level: DNEventLevel read get_Level write set_Level;
    property Opcode: DNEventOpcode read get_Opcode write set_Opcode;
    property Keywords: DNEventKeywords read get_Keywords write set_Keywords;
    property Tags: DNEventTags read get_Tags write set_Tags;
    property ActivityOptions: DNEventActivityOptions read get_ActivityOptions write set_ActivityOptions;
  end;

  TDNEventSourceOptions = class(TDNGenericImport<DNEventSourceOptionsClass, DNEventSourceOptions>) end;

  //-------------namespace: System----------------
  DNDoubleClass = interface(DNValueTypeClass)
  ['{4CFFE295-6378-5537-A6A4-73D0EE5AE22F}']
  { static methods } 

    {class} function IsFinite(d: Double): Boolean;
    {class} function IsInfinity(d: Double): Boolean;
    {class} function IsNaN(d: Double): Boolean;
    {class} function IsNegative(d: Double): Boolean;
    {class} function IsNegativeInfinity(d: Double): Boolean;
    {class} function IsNormal(d: Double): Boolean;
    {class} function IsPositiveInfinity(d: Double): Boolean;
    {class} function IsSubnormal(d: Double): Boolean;
    {class} function Parse(s: string): Double; overload;
    {class} function Parse(s: string; style: DNNumberStyles): Double; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): Double; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): Double; overload;
    {class} function Parse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider): Double; overload;
    {class} function TryParse(s: string; out result: Double): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; out result: Double): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: Double): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider; out result: Double): Boolean; overload;

  end;

  [DNTypeName('System.Double')]
  DNDouble = interface(DNValueType)
  ['{9144B7D6-3D5F-3B29-8131-FF0DB551E17C}']
  { methods } 

    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: Double): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: Double): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>; provider: DNIFormatProvider): Boolean;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNDouble = class(TDNGenericImport<DNDoubleClass, DNDouble>)
  public const
   MinValue = -1.79769313486232E+308;
   MaxValue = 1.79769313486232E+308;
   Epsilon = 4.94065645841247E-324;
  end;

  //-------------namespace: System----------------
  DNEnumClass = interface(DNValueTypeClass)
  ['{DB8EB4FC-D5EE-5B8A-ADB4-8E47D87E0A0B}']
  { static methods } 

    {class} function TryParse(enumType: DNType; value: string; out result: DNObject): Boolean; overload;
    {class} function TryParse(enumType: DNType; value: string; ignoreCase: Boolean; out result: DNObject): Boolean; overload;
    {class} function Parse(enumType: DNType; value: string): DNObject; overload;
    {class} function Parse(enumType: DNType; value: string; ignoreCase: Boolean): DNObject; overload;
    {class} function GetUnderlyingType(enumType: DNType): DNType;
    {class} function GetValues(enumType: DNType): DNArray;
    {class} function GetName(enumType: DNType; value: DNObject): string;
    {class} function GetNames(enumType: DNType): TArray<string>;
    {class} function ToObject(enumType: DNType; value: DNObject): DNObject; overload;
    {class} function IsDefined(enumType: DNType; value: DNObject): Boolean;
    {class} function Format(enumType: DNType; value: DNObject; format: string): string;
    {class} function ToObject(enumType: DNType; value: SByte): DNObject; overload;
    {class} function ToObject(enumType: DNType; value: Int16): DNObject; overload;
    {class} function ToObject(enumType: DNType; value: Int32): DNObject; overload;
    {class} function ToObject(enumType: DNType; value: Byte): DNObject; overload;
    {class} function ToObject(enumType: DNType; value: UInt16): DNObject; overload;
    {class} function ToObject(enumType: DNType; value: UInt32): DNObject; overload;
    {class} function ToObject(enumType: DNType; value: Int64): DNObject; overload;
    {class} function ToObject(enumType: DNType; value: UInt64): DNObject; overload;

  end;

  [DNTypeName('System.Enum')]
  DNEnum = interface(DNValueType)
  ['{ABEDD3FF-55E7-32F4-B22A-5A62A1005443}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function CompareTo(target: DNObject): Int32;
    function ToString(format: string): string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function HasFlag(flag: DNEnum): Boolean;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNEnum = class(TDNGenericImport<DNEnumClass, DNEnum>) end;

  //-------------namespace: System----------------
  DNGuidClass = interface(DNValueTypeClass)
  ['{ACB9BC95-EAF5-54EC-ACE8-274B7D700135}']
  { constructors } 

    {class} function init(b: TArray<Byte>): DNGuid; overload;
    {class} function init(b: DNReadOnlySpan<Byte>): DNGuid; overload;
    {class} function init(a: UInt32; b: UInt16; c: UInt16; d: Byte; e: Byte; f: Byte; g: Byte; h: Byte; i: Byte; j: Byte; k: Byte): DNGuid; overload;
    {class} function init(a: Int32; b: Int16; c: Int16; d: TArray<Byte>): DNGuid; overload;
    {class} function init(a: Int32; b: Int16; c: Int16; d: Byte; e: Byte; f: Byte; g: Byte; h: Byte; i: Byte; j: Byte; k: Byte): DNGuid; overload;
    {class} function init(g: string): DNGuid; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNGuid;

  { static fields } 

    {class} property Empty: DNGuid read __fakeFieldGet_Empty;

  { static methods } 

    {class} function Parse(input: string): DNGuid; overload;
    {class} function Parse(input: DNReadOnlySpan<Char>): DNGuid; overload;
    {class} function TryParse(input: string; out result: DNGuid): Boolean; overload;
    {class} function TryParse(input: DNReadOnlySpan<Char>; out result: DNGuid): Boolean; overload;
    {class} function ParseExact(input: string; format: string): DNGuid; overload;
    {class} function ParseExact(input: DNReadOnlySpan<Char>; format: DNReadOnlySpan<Char>): DNGuid; overload;
    {class} function TryParseExact(input: string; format: string; out result: DNGuid): Boolean; overload;
    {class} function TryParseExact(input: DNReadOnlySpan<Char>; format: DNReadOnlySpan<Char>; out result: DNGuid): Boolean; overload;
    {class} function NewGuid: DNGuid;

  end;

  [DNTypeName('System.Guid')]
  DNGuid = interface(DNValueType)
  ['{3C88CF27-75EF-3412-8688-7059EEB2654C}']
  { methods } 

    function ToByteArray: TArray<Byte>;
    function TryWriteBytes(destination: DNSpan<Byte>): Boolean;
    function ToString: string; overload;
    function GetHashCode: Int32;
    function Equals(o: DNObject): Boolean; overload;
    function Equals(g: DNGuid): Boolean; overload;
    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: DNGuid): Int32; overload;
    function ToString(format: string): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>): Boolean;
    function GetType: DNType;

  end;

  TDNGuid = class(TDNGenericImport<DNGuidClass, DNGuid>) end;

  //-------------namespace: System----------------
  DNHashCodeClass = interface(DNValueTypeClass)
  ['{B3F8BF4A-5354-5851-864B-9951E4B38100}']
  end;

  [DNTypeName('System.HashCode')]
  DNHashCode = interface(DNValueType)
  ['{EEF0002C-B86A-323F-ACB4-A249044675BB}']
  { methods } 

    function ToHashCode: Int32;
    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNHashCode = class(TDNGenericImport<DNHashCodeClass, DNHashCode>) end;

  //-------------namespace: System----------------
  DNInt16Class = interface(DNValueTypeClass)
  ['{7DF4521D-E73E-5154-8251-848DE4D990E5}']
  { static methods } 

    {class} function Parse(s: string): Int16; overload;
    {class} function Parse(s: string; style: DNNumberStyles): Int16; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): Int16; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): Int16; overload;
    {class} function Parse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider): Int16; overload;
    {class} function TryParse(s: string; out result: Int16): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; out result: Int16): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: Int16): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider; out result: Int16): Boolean; overload;

  end;

  [DNTypeName('System.Int16')]
  DNInt16 = interface(DNValueType)
  ['{E3E8F6E4-E677-3436-8E0E-963D3D6F810A}']
  { methods } 

    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: Int16): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: Int16): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>; provider: DNIFormatProvider): Boolean;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNInt16 = class(TDNGenericImport<DNInt16Class, DNInt16>)
  public const
   MaxValue = 32767;
   MinValue = -32768;
  end;

  //-------------namespace: System----------------
  DNInt32Class = interface(DNValueTypeClass)
  ['{F0907056-87CC-5DD9-A5F6-48DE5046BD3C}']
  { static methods } 

    {class} function Parse(s: string): Int32; overload;
    {class} function Parse(s: string; style: DNNumberStyles): Int32; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): Int32; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): Int32; overload;
    {class} function Parse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider): Int32; overload;
    {class} function TryParse(s: string; out result: Int32): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; out result: Int32): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: Int32): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider; out result: Int32): Boolean; overload;

  end;

  [DNTypeName('System.Int32')]
  DNInt32 = interface(DNValueType)
  ['{0CE68E8C-51A4-3115-BE13-DD1ACE42E61F}']
  { methods } 

    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: Int32): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: Int32): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>; provider: DNIFormatProvider): Boolean;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNInt32 = class(TDNGenericImport<DNInt32Class, DNInt32>)
  public const
   MaxValue = 2147483647;
   MinValue = -2147483648;
  end;

  //-------------namespace: System----------------
  DNInt64Class = interface(DNValueTypeClass)
  ['{679701EB-4301-5490-993B-8CCEE8EB30F9}']
  { static methods } 

    {class} function Parse(s: string): Int64; overload;
    {class} function Parse(s: string; style: DNNumberStyles): Int64; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): Int64; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): Int64; overload;
    {class} function Parse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider): Int64; overload;
    {class} function TryParse(s: string; out result: Int64): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; out result: Int64): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: Int64): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider; out result: Int64): Boolean; overload;

  end;

  [DNTypeName('System.Int64')]
  DNInt64 = interface(DNValueType)
  ['{F940AE92-B495-342E-AB07-E5FF863FB415}']
  { methods } 

    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: Int64): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: Int64): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>; provider: DNIFormatProvider): Boolean;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNInt64 = class(TDNGenericImport<DNInt64Class, DNInt64>)
  public const
   MaxValue = 9223372036854775807;
   MinValue = -9223372036854775808;
  end;

  //-------------namespace: System----------------
  DNIntPtrClass = interface(DNValueTypeClass)
  ['{52D1BD0C-89CB-5CDD-B864-5C58EB982716}']
  { static getter & setter } 

    {class} function get_Size: Int32;

  { constructors } 

    {class} function init(value: Int32): DNIntPtr; overload;
    {class} function init(value: Int64): DNIntPtr; overload;
    {class} function init(var value: DNVoid): DNIntPtr; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Zero: IntPtr;

  { static fields } 

    {class} property Zero: IntPtr read __fakeFieldGet_Zero;

  { static methods } 

    {class} function Add(pointer: IntPtr; offset: Int32): IntPtr;
    {class} function Subtract(pointer: IntPtr; offset: Int32): IntPtr;

  { static propertys } 

    {class} property Size: Int32 read get_Size;
  end;

  [DNTypeName('System.IntPtr')]
  DNIntPtr = interface(DNValueType)
  ['{F58C71B4-3E53-3E1E-9F19-15F712743D34}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToInt32: Int32;
    function ToInt64: Int64;
    function ToPointer: DNVoid;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function GetType: DNType;

  end;

  TDNIntPtr = class(TDNGenericImport<DNIntPtrClass, DNIntPtr>) end;

  //-------------namespace: System----------------
  DNMemoryClass<T> = interface(DNValueTypeClass)
  ['{CD1EC3B2-78CE-5F1C-9F68-0917B021F65C}']
  { static getter & setter } 

    {class} function get_Empty: DNMemory<T>;

  { constructors } 

    {class} function init(&array: TArray<T>): DNMemory<T>; overload;
    {class} function init(&array: TArray<T>; start: Int32; length: Int32): DNMemory<T>; overload;

  { static propertys } 

    {class} property Empty: DNMemory<T> read get_Empty;
  end;

  [DNTypeName('System.Memory`1')]
  DNMemory<T> = interface(DNValueType)
  ['{AB2B032E-104F-3189-BD4B-67B24A583993}']
  { getters & setters } 

    function get_Length: Int32;
    function get_IsEmpty: Boolean;
    function get_Span: DNSpan<T>;

  { methods } 

    function ToString: string;
    function Slice(start: Int32): DNMemory<T>; overload;
    function Slice(start: Int32; length: Int32): DNMemory<T>; overload;
    procedure CopyTo(destination: DNMemory<T>);
    function TryCopyTo(destination: DNMemory<T>): Boolean;
    function Pin: DNMemoryHandle;
    function ToArray: TArray<T>;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNMemory<T>): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Length: Int32 read get_Length;
    property IsEmpty: Boolean read get_IsEmpty;
    property Span: DNSpan<T> read get_Span;
  end;

  TDNMemory<T> = class(TDNGenericImport<DNMemoryClass<T>, DNMemory<T>>) end;

  //-------------namespace: System----------------
  DNModuleHandleClass = interface(DNValueTypeClass)
  ['{CE354140-027A-50C8-95FB-F645AF8FA038}']
  { static fields getter & setter } 

   function __fakeFieldGet_EmptyHandle: DNModuleHandle;

  { static fields } 

    {class} property EmptyHandle: DNModuleHandle read __fakeFieldGet_EmptyHandle;

  end;

  [DNTypeName('System.ModuleHandle')]
  DNModuleHandle = interface(DNValueType)
  ['{91140EE1-A599-322C-8725-A2D78B0C65BC}']
  { getters & setters } 

    function get_MDStreamVersion: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(handle: DNModuleHandle): Boolean; overload;
    function GetRuntimeTypeHandleFromMetadataToken(typeToken: Int32): DNRuntimeTypeHandle;
    function ResolveTypeHandle(typeToken: Int32): DNRuntimeTypeHandle; overload;
    function ResolveTypeHandle(typeToken: Int32; typeInstantiationContext: TArray<DNRuntimeTypeHandle>; methodInstantiationContext: TArray<DNRuntimeTypeHandle>): DNRuntimeTypeHandle; overload;
    function GetRuntimeMethodHandleFromMetadataToken(methodToken: Int32): DNRuntimeMethodHandle;
    function ResolveMethodHandle(methodToken: Int32): DNRuntimeMethodHandle; overload;
    function ResolveMethodHandle(methodToken: Int32; typeInstantiationContext: TArray<DNRuntimeTypeHandle>; methodInstantiationContext: TArray<DNRuntimeTypeHandle>): DNRuntimeMethodHandle; overload;
    function GetRuntimeFieldHandleFromMetadataToken(fieldToken: Int32): DNRuntimeFieldHandle;
    function ResolveFieldHandle(fieldToken: Int32): DNRuntimeFieldHandle; overload;
    function ResolveFieldHandle(fieldToken: Int32; typeInstantiationContext: TArray<DNRuntimeTypeHandle>; methodInstantiationContext: TArray<DNRuntimeTypeHandle>): DNRuntimeFieldHandle; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property MDStreamVersion: Int32 read get_MDStreamVersion;
  end;

  TDNModuleHandle = class(TDNGenericImport<DNModuleHandleClass, DNModuleHandle>) end;

  //-------------namespace: System----------------
  DNNullableClass<T> = interface(DNValueTypeClass)
  ['{92932502-3ACE-570D-A56C-FA0249D1E3D4}']
  { constructors } 

    {class} function init(value: T): DNNullable<T>;

  end;

  [DNTypeName('System.Nullable`1')]
  DNNullable<T> = interface(DNValueType)
  ['{1DACAF51-59B5-3188-BD41-4ABF2014296A}']
  { getters & setters } 

    function get_HasValue: Boolean;
    function get_Value: T;

  { methods } 

    function GetValueOrDefault: T; overload;
    function GetValueOrDefault(defaultValue: T): T; overload;
    function Equals(other: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property HasValue: Boolean read get_HasValue;
    property Value: T read get_Value;
  end;

  TDNNullable<T> = class(TDNGenericImport<DNNullableClass<T>, DNNullable<T>>) end;

  //-------------namespace: System.Numerics----------------
  DNVectorClass<T> = interface(DNValueTypeClass)
  ['{5141312C-4C2B-58D9-A36C-750CF8D7CB66}']
  { static getter & setter } 

    {class} function get_Count: Int32;
    {class} function get_Zero: DNVector<T>;
    {class} function get_One: DNVector<T>;

  { constructors } 

    {class} function init(value: T): DNVector<T>; overload;
    {class} function init(values: TArray<T>): DNVector<T>; overload;
    {class} function init(values: TArray<T>; index: Int32): DNVector<T>; overload;
    {class} function init(values: DNSpan<T>): DNVector<T>; overload;

  { static propertys } 

    {class} property Count: Int32 read get_Count;
    {class} property Zero: DNVector<T> read get_Zero;
    {class} property One: DNVector<T> read get_One;
  end;

  [DNTypeName('System.Numerics.Vector`1')]
  DNVector<T> = interface(DNValueType)
  ['{A2B15CD4-0817-3A4E-8789-26C165F98522}']
  { getters & setters } 

    function get_Item(index: Int32): T;

  { methods } 

    procedure CopyTo(destination: TArray<T>); overload;
    procedure CopyTo(destination: TArray<T>; startIndex: Int32); overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNVector<T>): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToString(format: string; formatProvider: DNIFormatProvider): string; overload;
    function GetType: DNType;

  { propertys } 

    property Item[index: Int32]: T read get_Item; default;
  end;

  TDNVector<T> = class(TDNGenericImport<DNVectorClass<T>, DNVector<T>>) end;

  //-------------namespace: System----------------
  DNReadOnlyMemoryClass<T> = interface(DNValueTypeClass)
  ['{5931574B-C0D2-5B7A-92BD-3FC7FDC78614}']
  { static getter & setter } 

    {class} function get_Empty: DNReadOnlyMemory<T>;

  { constructors } 

    {class} function init(&array: TArray<T>): DNReadOnlyMemory<T>; overload;
    {class} function init(&array: TArray<T>; start: Int32; length: Int32): DNReadOnlyMemory<T>; overload;

  { static propertys } 

    {class} property Empty: DNReadOnlyMemory<T> read get_Empty;
  end;

  [DNTypeName('System.ReadOnlyMemory`1')]
  DNReadOnlyMemory<T> = interface(DNValueType)
  ['{DB0E2BB6-5B6F-360D-BB55-A214568631A0}']
  { getters & setters } 

    function get_Length: Int32;
    function get_IsEmpty: Boolean;
    function get_Span: DNReadOnlySpan<T>;

  { methods } 

    function ToString: string;
    function Slice(start: Int32): DNReadOnlyMemory<T>; overload;
    function Slice(start: Int32; length: Int32): DNReadOnlyMemory<T>; overload;
    procedure CopyTo(destination: DNMemory<T>);
    function TryCopyTo(destination: DNMemory<T>): Boolean;
    function Pin: DNMemoryHandle;
    function ToArray: TArray<T>;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNReadOnlyMemory<T>): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property Length: Int32 read get_Length;
    property IsEmpty: Boolean read get_IsEmpty;
    property Span: DNReadOnlySpan<T> read get_Span;
  end;

  TDNReadOnlyMemory<T> = class(TDNGenericImport<DNReadOnlyMemoryClass<T>, DNReadOnlyMemory<T>>) end;

  //-------------namespace: System----------------
  DNReadOnlySpanClass<T> = interface(DNValueTypeClass)
  ['{9F9906CD-4F8B-5B7E-AD16-C867547957CE}']
  { static getter & setter } 

    {class} function get_Empty: DNReadOnlySpan<T>;

  { constructors } 

    {class} function init(&array: TArray<T>): DNReadOnlySpan<T>; overload;
    {class} function init(&array: TArray<T>; start: Int32; length: Int32): DNReadOnlySpan<T>; overload;
    {class} function init(var pointer: DNVoid; length: Int32): DNReadOnlySpan<T>; overload;

  { static propertys } 

    {class} property Empty: DNReadOnlySpan<T> read get_Empty;
  end;

  [DNTypeName('System.ReadOnlySpan`1')]
  DNReadOnlySpan<T> = interface(DNValueType)
  ['{259DCCCB-5662-3126-9BAF-19DEAF9DB2B3}']
  { getters & setters } 

    function get_Length: Int32;
    function get_IsEmpty: Boolean;
    function get_Item(index: Int32): T;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetEnumerator: DNReadOnlySpan_Enumerator<T>;
    function GetPinnableReference: T;
    procedure CopyTo(destination: DNSpan<T>);
    function TryCopyTo(destination: DNSpan<T>): Boolean;
    function ToString: string;
    function Slice(start: Int32): DNReadOnlySpan<T>; overload;
    function Slice(start: Int32; length: Int32): DNReadOnlySpan<T>; overload;
    function ToArray: TArray<T>;
    function GetType: DNType;

  { propertys } 

    property Length: Int32 read get_Length;
    property IsEmpty: Boolean read get_IsEmpty;
    property Item[index: Int32]: T read get_Item; default;
  end;

  TDNReadOnlySpan<T> = class(TDNGenericImport<DNReadOnlySpanClass<T>, DNReadOnlySpan<T>>) end;

  //-------------namespace: System----------------
  DNReadOnlySpan_EnumeratorClass<T> = interface(DNValueTypeClass)
  ['{8EA15682-EF4A-59BA-80AA-A1E0F3283FAA}']
  end;

  [DNTypeName('System.ReadOnlySpan`1+Enumerator')]
  DNReadOnlySpan_Enumerator<T> = interface(DNValueType)
  ['{2FF59D03-84C2-3A4F-8203-2B5948F18B73}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNReadOnlySpan_Enumerator<T> = class(TDNGenericImport<DNReadOnlySpan_EnumeratorClass<T>, DNReadOnlySpan_Enumerator<T>>) end;

  //-------------namespace: System.Reflection----------------
  DNCustomAttributeNamedArgumentClass = interface(DNValueTypeClass)
  ['{D764EAF8-0E7F-5328-B3D2-3F3D0396A8A2}']
  { constructors } 

    {class} function init(memberInfo: DNMemberInfo; value: DNObject): DNCustomAttributeNamedArgument; overload;
    {class} function init(memberInfo: DNMemberInfo; typedArgument: DNCustomAttributeTypedArgument): DNCustomAttributeNamedArgument; overload;

  end;

  [DNTypeName('System.Reflection.CustomAttributeNamedArgument')]
  DNCustomAttributeNamedArgument = interface(DNValueType)
  ['{68AAA524-3D5B-3A2F-B5EB-CB073507B206}']
  { getters & setters } 

    function get_MemberInfo: DNMemberInfo;
    function get_TypedValue: DNCustomAttributeTypedArgument;
    function get_MemberName: string;
    function get_IsField: Boolean;

  { methods } 

    function ToString: string;
    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean;
    function GetType: DNType;

  { propertys } 

    property MemberInfo: DNMemberInfo read get_MemberInfo;
    property TypedValue: DNCustomAttributeTypedArgument read get_TypedValue;
    property MemberName: string read get_MemberName;
    property IsField: Boolean read get_IsField;
  end;

  TDNCustomAttributeNamedArgument = class(TDNGenericImport<DNCustomAttributeNamedArgumentClass, DNCustomAttributeNamedArgument>) end;

  //-------------namespace: System.Reflection----------------
  DNCustomAttributeTypedArgumentClass = interface(DNValueTypeClass)
  ['{0F199F97-5656-58EC-82FC-228155B5829F}']
  { constructors } 

    {class} function init(argumentType: DNType; value: DNObject): DNCustomAttributeTypedArgument; overload;
    {class} function init(value: DNObject): DNCustomAttributeTypedArgument; overload;

  end;

  [DNTypeName('System.Reflection.CustomAttributeTypedArgument')]
  DNCustomAttributeTypedArgument = interface(DNValueType)
  ['{13560A1D-7296-3E5D-8438-2B6D82D1A545}']
  { getters & setters } 

    function get_ArgumentType: DNType;
    function get_Value: DNObject;

  { methods } 

    function ToString: string;
    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean;
    function GetType: DNType;

  { propertys } 

    property ArgumentType: DNType read get_ArgumentType;
    property Value: DNObject read get_Value;
  end;

  TDNCustomAttributeTypedArgument = class(TDNGenericImport<DNCustomAttributeTypedArgumentClass, DNCustomAttributeTypedArgument>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNEventTokenClass = interface(DNValueTypeClass)
  ['{2EA2F94D-3A34-5FEC-8BD2-C2D7667DD4E7}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNEventToken;

  { static fields } 

    {class} property Empty: DNEventToken read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Reflection.Emit.EventToken')]
  DNEventToken = interface(DNValueType)
  ['{F526CBE8-6ECD-38FF-B8E7-7822DC00F149}']
  { getters & setters } 

    function get_Token: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNEventToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Token: Int32 read get_Token;
  end;

  TDNEventToken = class(TDNGenericImport<DNEventTokenClass, DNEventToken>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNFieldTokenClass = interface(DNValueTypeClass)
  ['{B365C8AF-5F52-5FF6-8380-2F506AE0D703}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNFieldToken;

  { static fields } 

    {class} property Empty: DNFieldToken read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Reflection.Emit.FieldToken')]
  DNFieldToken = interface(DNValueType)
  ['{117193D6-9E20-3110-98D0-941AFC1A9CE6}']
  { getters & setters } 

    function get_Token: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNFieldToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Token: Int32 read get_Token;
  end;

  TDNFieldToken = class(TDNGenericImport<DNFieldTokenClass, DNFieldToken>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNLabelClass = interface(DNValueTypeClass)
  ['{025114B0-C441-583C-AE0A-FED2BA0DCF2A}']
  end;

  [DNTypeName('System.Reflection.Emit.Label')]
  DNLabel = interface(DNValueType)
  ['{A38F07D0-3C6E-3EFD-A2B6-7B3A66A88ED1}']
  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNLabel): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNLabel = class(TDNGenericImport<DNLabelClass, DNLabel>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNMethodTokenClass = interface(DNValueTypeClass)
  ['{888250EB-67B5-53D9-8811-FFFD06B91504}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNMethodToken;

  { static fields } 

    {class} property Empty: DNMethodToken read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Reflection.Emit.MethodToken')]
  DNMethodToken = interface(DNValueType)
  ['{58BADA8C-53FC-310B-887E-DA09A369DF64}']
  { getters & setters } 

    function get_Token: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNMethodToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Token: Int32 read get_Token;
  end;

  TDNMethodToken = class(TDNGenericImport<DNMethodTokenClass, DNMethodToken>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNOpCodeClass = interface(DNValueTypeClass)
  ['{40C62FC4-41EE-5C8E-B45B-DE3ED21EE62A}']
  end;

  [DNTypeName('System.Reflection.Emit.OpCode')]
  DNOpCode = interface(DNValueType)
  ['{1A762857-BBB3-3B3B-A0EF-13A70C8E2D0F}']
  { getters & setters } 

    function get_OperandType: DNOperandType;
    function get_FlowControl: DNFlowControl;
    function get_OpCodeType: DNOpCodeType;
    function get_StackBehaviourPop: DNStackBehaviour;
    function get_StackBehaviourPush: DNStackBehaviour;
    function get_Size: Int32;
    function get_Value: Int16;
    function get_Name: string;

  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNOpCode): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property OperandType: DNOperandType read get_OperandType;
    property FlowControl: DNFlowControl read get_FlowControl;
    property OpCodeType: DNOpCodeType read get_OpCodeType;
    property StackBehaviourPop: DNStackBehaviour read get_StackBehaviourPop;
    property StackBehaviourPush: DNStackBehaviour read get_StackBehaviourPush;
    property Size: Int32 read get_Size;
    property Value: Int16 read get_Value;
    property Name: string read get_Name;
  end;

  TDNOpCode = class(TDNGenericImport<DNOpCodeClass, DNOpCode>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNParameterTokenClass = interface(DNValueTypeClass)
  ['{532FEBA4-ED33-59A7-BECB-4DE9B7DE2D8D}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNParameterToken;

  { static fields } 

    {class} property Empty: DNParameterToken read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Reflection.Emit.ParameterToken')]
  DNParameterToken = interface(DNValueType)
  ['{CEFC4144-BFBB-3977-BA00-CEEA1F2EF759}']
  { getters & setters } 

    function get_Token: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNParameterToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Token: Int32 read get_Token;
  end;

  TDNParameterToken = class(TDNGenericImport<DNParameterTokenClass, DNParameterToken>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNPropertyTokenClass = interface(DNValueTypeClass)
  ['{129B9ACB-CC5B-5109-AAB9-E52712DE403E}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNPropertyToken;

  { static fields } 

    {class} property Empty: DNPropertyToken read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Reflection.Emit.PropertyToken')]
  DNPropertyToken = interface(DNValueType)
  ['{59402249-FB48-3CD7-BB5A-532EB9BD1EE1}']
  { getters & setters } 

    function get_Token: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNPropertyToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Token: Int32 read get_Token;
  end;

  TDNPropertyToken = class(TDNGenericImport<DNPropertyTokenClass, DNPropertyToken>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNSignatureTokenClass = interface(DNValueTypeClass)
  ['{0128671C-44FC-53B4-8C35-A8F1503C56AC}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNSignatureToken;

  { static fields } 

    {class} property Empty: DNSignatureToken read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Reflection.Emit.SignatureToken')]
  DNSignatureToken = interface(DNValueType)
  ['{9F42947B-9063-38D1-B4DF-41FA188A3F96}']
  { getters & setters } 

    function get_Token: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNSignatureToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Token: Int32 read get_Token;
  end;

  TDNSignatureToken = class(TDNGenericImport<DNSignatureTokenClass, DNSignatureToken>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNStringTokenClass = interface(DNValueTypeClass)
  ['{A5C40F32-6667-5F12-ABB4-8EC998901200}']
  end;

  [DNTypeName('System.Reflection.Emit.StringToken')]
  DNStringToken = interface(DNValueType)
  ['{494BE110-DB4B-3170-94CD-16D04B93D43A}']
  { getters & setters } 

    function get_Token: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNStringToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Token: Int32 read get_Token;
  end;

  TDNStringToken = class(TDNGenericImport<DNStringTokenClass, DNStringToken>) end;

  //-------------namespace: System.Reflection.Emit----------------
  DNTypeTokenClass = interface(DNValueTypeClass)
  ['{A0EB0756-06A1-546A-A431-7FF8DE2ADC21}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNTypeToken;

  { static fields } 

    {class} property Empty: DNTypeToken read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Reflection.Emit.TypeToken')]
  DNTypeToken = interface(DNValueType)
  ['{A708FAD9-EE82-3391-8619-A3F12044A6EC}']
  { getters & setters } 

    function get_Token: Int32;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNTypeToken): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Token: Int32 read get_Token;
  end;

  TDNTypeToken = class(TDNGenericImport<DNTypeTokenClass, DNTypeToken>) end;

  //-------------namespace: System.Reflection----------------
  DNInterfaceMappingClass = interface(DNValueTypeClass)
  ['{A08A5D71-A9A8-53C0-BC9B-E70B84027292}']
  end;

  [DNTypeName('System.Reflection.InterfaceMapping')]
  DNInterfaceMapping = interface(DNValueType)
  ['{319400B7-362C-3F61-9584-911C2EA08AC9}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNInterfaceMapping = class(TDNGenericImport<DNInterfaceMappingClass, DNInterfaceMapping>) end;

  //-------------namespace: System.Reflection----------------
  DNParameterModifierClass = interface(DNValueTypeClass)
  ['{793F428A-81AF-5EDC-A888-066B6BEBEA22}']
  { constructors } 

    {class} function init(parameterCount: Int32): DNParameterModifier;

  end;

  [DNTypeName('System.Reflection.ParameterModifier')]
  DNParameterModifier = interface(DNValueType)
  ['{F501A267-4617-344B-B301-CC804CA2FA51}']
  { getters & setters } 

    function get_Item(index: Int32): Boolean;
    procedure set_Item(index: Int32; value: Boolean);

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Item[index: Int32]: Boolean read get_Item write set_Item; default;
  end;

  TDNParameterModifier = class(TDNGenericImport<DNParameterModifierClass, DNParameterModifier>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNAsyncTaskMethodBuilderClass<TResult> = interface(DNValueTypeClass)
  ['{BAB9C4CA-E66E-5CDC-AB05-8D878B3C18CC}']
  { static methods } 

    {class} function Create: DNAsyncTaskMethodBuilder<TResult>;

  end;

  [DNTypeName('System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1')]
  DNAsyncTaskMethodBuilder<TResult> = interface(DNValueType)
  ['{4DE1E111-1B13-304D-9183-A738BFE2DDD4}']
  { getters & setters } 

    function get_Task: DNTask<TResult>;

  { methods } 

    procedure SetStateMachine(stateMachine: DNIAsyncStateMachine);
    procedure SetResult(result: TResult);
    procedure SetException(exception: DNException);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Task: DNTask<TResult> read get_Task;
  end;

  TDNAsyncTaskMethodBuilder<TResult> = class(TDNGenericImport<DNAsyncTaskMethodBuilderClass<TResult>, DNAsyncTaskMethodBuilder<TResult>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNAsyncTaskMethodBuilderClass = interface(DNValueTypeClass)
  ['{7419AFF2-7066-5A4B-8B97-27ADB1A9C920}']
  { static methods } 

    {class} function Create: DNAsyncTaskMethodBuilder;

  end;

  [DNTypeName('System.Runtime.CompilerServices.AsyncTaskMethodBuilder')]
  DNAsyncTaskMethodBuilder = interface(DNValueType)
  ['{938DE326-83F7-3819-816A-03B2F7B71F95}']
  { getters & setters } 

    function get_Task: DNTask;

  { methods } 

    procedure SetStateMachine(stateMachine: DNIAsyncStateMachine);
    procedure SetResult;
    procedure SetException(exception: DNException);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Task: DNTask read get_Task;
  end;

  TDNAsyncTaskMethodBuilder = class(TDNGenericImport<DNAsyncTaskMethodBuilderClass, DNAsyncTaskMethodBuilder>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNAsyncValueTaskMethodBuilderClass<TResult> = interface(DNValueTypeClass)
  ['{E58952E9-2261-504D-8A70-15A8BFC3B081}']
  { static methods } 

    {class} function Create: DNAsyncValueTaskMethodBuilder<TResult>;

  end;

  [DNTypeName('System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1')]
  DNAsyncValueTaskMethodBuilder<TResult> = interface(DNValueType)
  ['{9AD69840-DDBD-3CC8-AAF4-80EFDB5A3AC1}']
  { getters & setters } 

    function get_Task: DNValueTask<TResult>;

  { methods } 

    procedure SetStateMachine(stateMachine: DNIAsyncStateMachine);
    procedure SetResult(result: TResult);
    procedure SetException(exception: DNException);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Task: DNValueTask<TResult> read get_Task;
  end;

  TDNAsyncValueTaskMethodBuilder<TResult> = class(TDNGenericImport<DNAsyncValueTaskMethodBuilderClass<TResult>, DNAsyncValueTaskMethodBuilder<TResult>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNAsyncValueTaskMethodBuilderClass = interface(DNValueTypeClass)
  ['{C6E0D9B0-3D03-5C09-8C6A-691C581F9643}']
  { static methods } 

    {class} function Create: DNAsyncValueTaskMethodBuilder;

  end;

  [DNTypeName('System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder')]
  DNAsyncValueTaskMethodBuilder = interface(DNValueType)
  ['{4565DA1D-8CCB-3C13-B037-ADFACEEADD35}']
  { getters & setters } 

    function get_Task: DNValueTask;

  { methods } 

    procedure SetStateMachine(stateMachine: DNIAsyncStateMachine);
    procedure SetResult;
    procedure SetException(exception: DNException);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Task: DNValueTask read get_Task;
  end;

  TDNAsyncValueTaskMethodBuilder = class(TDNGenericImport<DNAsyncValueTaskMethodBuilderClass, DNAsyncValueTaskMethodBuilder>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNAsyncVoidMethodBuilderClass = interface(DNValueTypeClass)
  ['{C64F71C4-D8EB-5FE8-853D-0F18247A14C2}']
  { static methods } 

    {class} function Create: DNAsyncVoidMethodBuilder;

  end;

  [DNTypeName('System.Runtime.CompilerServices.AsyncVoidMethodBuilder')]
  DNAsyncVoidMethodBuilder = interface(DNValueType)
  ['{BB43911C-0D74-340F-A290-0F16DA0C63E9}']
  { methods } 

    procedure SetStateMachine(stateMachine: DNIAsyncStateMachine);
    procedure SetResult;
    procedure SetException(exception: DNException);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNAsyncVoidMethodBuilder = class(TDNGenericImport<DNAsyncVoidMethodBuilderClass, DNAsyncVoidMethodBuilder>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNConfiguredTaskAwaitableClass<TResult> = interface(DNValueTypeClass)
  ['{3FAD74A0-C0C3-5FA3-9866-2640AC08DA03}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1')]
  DNConfiguredTaskAwaitable<TResult> = interface(DNValueType)
  ['{AA524F2C-D8FE-374B-92B6-8CEE67BD74EF}']
  { methods } 

    function GetAwaiter: DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter<TResult>;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNConfiguredTaskAwaitable<TResult> = class(TDNGenericImport<DNConfiguredTaskAwaitableClass<TResult>, DNConfiguredTaskAwaitable<TResult>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiterClass<TResult> = interface(DNValueTypeClass)
  ['{FFB364E4-9179-547D-BB1F-6A3B57A7C212}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1+ConfiguredTaskAwaiter')]
  DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter<TResult> = interface(DNValueType)
  ['{6E50515E-9DF7-300A-9101-41EAE4769D1A}']
  { getters & setters } 

    function get_IsCompleted: Boolean;

  { methods } 

    procedure OnCompleted(continuation: DNAction);
    procedure UnsafeOnCompleted(continuation: DNAction);
    function GetResult: TResult;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter<TResult> = class(TDNGenericImport<DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiterClass<TResult>, DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter<TResult>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNConfiguredTaskAwaitableClass = interface(DNValueTypeClass)
  ['{1DA96891-2316-5F3A-9051-E12878CDB64B}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.ConfiguredTaskAwaitable')]
  DNConfiguredTaskAwaitable = interface(DNValueType)
  ['{E27AAD08-0521-3E8D-BC86-8592E4D23212}']
  { methods } 

    function GetAwaiter: DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNConfiguredTaskAwaitable = class(TDNGenericImport<DNConfiguredTaskAwaitableClass, DNConfiguredTaskAwaitable>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiterClass = interface(DNValueTypeClass)
  ['{69B11C35-6E3C-5163-B8C9-1625E788D740}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.ConfiguredTaskAwaitable+ConfiguredTaskAwaiter')]
  DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter = interface(DNValueType)
  ['{27F6069A-E9EC-3BB8-ADF7-560E4359C94E}']
  { getters & setters } 

    function get_IsCompleted: Boolean;

  { methods } 

    procedure OnCompleted(continuation: DNAction);
    procedure UnsafeOnCompleted(continuation: DNAction);
    procedure GetResult;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter = class(TDNGenericImport<DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiterClass, DNCompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNConfiguredValueTaskAwaitableClass<TResult> = interface(DNValueTypeClass)
  ['{04D73614-F0E3-5F47-940A-AA74E5C51702}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1')]
  DNConfiguredValueTaskAwaitable<TResult> = interface(DNValueType)
  ['{1FD15B1D-66F8-3C06-A9BD-797B52C47F1B}']
  { methods } 

    function GetAwaiter: DNCompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter<TResult>;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNConfiguredValueTaskAwaitable<TResult> = class(TDNGenericImport<DNConfiguredValueTaskAwaitableClass<TResult>, DNConfiguredValueTaskAwaitable<TResult>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiterClass<TResult> = interface(DNValueTypeClass)
  ['{E9140A24-2A3C-5A8D-9289-F75CBF9C9E22}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1+ConfiguredValueTaskAwaiter')]
  DNCompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter<TResult> = interface(DNValueType)
  ['{0D6503AE-ECEA-3CD2-9089-0D3F6BCEAB9F}']
  { getters & setters } 

    function get_IsCompleted: Boolean;

  { methods } 

    function GetResult: TResult;
    procedure OnCompleted(continuation: DNAction);
    procedure UnsafeOnCompleted(continuation: DNAction);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNCompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter<TResult> = class(TDNGenericImport<DNCompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiterClass<TResult>, DNCompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter<TResult>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNConfiguredValueTaskAwaitableClass = interface(DNValueTypeClass)
  ['{66B3BCB4-73F8-5224-A855-911B0D137309}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable')]
  DNConfiguredValueTaskAwaitable = interface(DNValueType)
  ['{8D5B5AC7-EF57-30DB-9601-BED82FA8C61E}']
  { methods } 

    function GetAwaiter: DNCompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNConfiguredValueTaskAwaitable = class(TDNGenericImport<DNConfiguredValueTaskAwaitableClass, DNConfiguredValueTaskAwaitable>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiterClass = interface(DNValueTypeClass)
  ['{10FA62F8-C892-517C-9857-CC12C856F966}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable+ConfiguredValueTaskAwaiter')]
  DNCompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter = interface(DNValueType)
  ['{B6CA2A1A-0475-376A-9C7B-6BDF9473310A}']
  { getters & setters } 

    function get_IsCompleted: Boolean;

  { methods } 

    procedure GetResult;
    procedure OnCompleted(continuation: DNAction);
    procedure UnsafeOnCompleted(continuation: DNAction);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNCompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter = class(TDNGenericImport<DNCompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiterClass, DNCompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNTaskAwaiterClass<TResult> = interface(DNValueTypeClass)
  ['{EBF68D17-CED1-5824-8F9B-7CDF47C759F7}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.TaskAwaiter`1')]
  DNTaskAwaiter<TResult> = interface(DNValueType)
  ['{61D4C12A-1865-3AD5-855F-1933EFF91BFF}']
  { getters & setters } 

    function get_IsCompleted: Boolean;

  { methods } 

    procedure OnCompleted(continuation: DNAction);
    procedure UnsafeOnCompleted(continuation: DNAction);
    function GetResult: TResult;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNTaskAwaiter<TResult> = class(TDNGenericImport<DNTaskAwaiterClass<TResult>, DNTaskAwaiter<TResult>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNTaskAwaiterClass = interface(DNValueTypeClass)
  ['{0F225386-DD52-5CAD-8FEE-79D46D716FB2}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.TaskAwaiter')]
  DNTaskAwaiter = interface(DNValueType)
  ['{6F752D79-8D08-37F1-9C7A-FE2A50F0C8D6}']
  { getters & setters } 

    function get_IsCompleted: Boolean;

  { methods } 

    procedure OnCompleted(continuation: DNAction);
    procedure UnsafeOnCompleted(continuation: DNAction);
    procedure GetResult;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNTaskAwaiter = class(TDNGenericImport<DNTaskAwaiterClass, DNTaskAwaiter>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNValueTaskAwaiterClass<TResult> = interface(DNValueTypeClass)
  ['{DC3774A4-D651-5976-8BA7-CD01B1587CDD}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.ValueTaskAwaiter`1')]
  DNValueTaskAwaiter<TResult> = interface(DNValueType)
  ['{89E671C0-7EFC-324C-8079-6A5D9F077B9F}']
  { getters & setters } 

    function get_IsCompleted: Boolean;

  { methods } 

    function GetResult: TResult;
    procedure OnCompleted(continuation: DNAction);
    procedure UnsafeOnCompleted(continuation: DNAction);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNValueTaskAwaiter<TResult> = class(TDNGenericImport<DNValueTaskAwaiterClass<TResult>, DNValueTaskAwaiter<TResult>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNValueTaskAwaiterClass = interface(DNValueTypeClass)
  ['{FDA6C0F1-9C0C-56A0-824B-A580A9B677C8}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.ValueTaskAwaiter')]
  DNValueTaskAwaiter = interface(DNValueType)
  ['{EAE7579B-7793-3591-B1F1-5F89370C8FCD}']
  { getters & setters } 

    function get_IsCompleted: Boolean;

  { methods } 

    procedure GetResult;
    procedure OnCompleted(continuation: DNAction);
    procedure UnsafeOnCompleted(continuation: DNAction);
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNValueTaskAwaiter = class(TDNGenericImport<DNValueTaskAwaiterClass, DNValueTaskAwaiter>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNYieldAwaitableClass = interface(DNValueTypeClass)
  ['{32C424F1-AAF0-54A6-BB67-51D4BB689A26}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.YieldAwaitable')]
  DNYieldAwaitable = interface(DNValueType)
  ['{38C7D224-8258-3D88-90F6-E1DB82D97E63}']
  { methods } 

    function GetAwaiter: DNYieldAwaitable_YieldAwaiter;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNYieldAwaitable = class(TDNGenericImport<DNYieldAwaitableClass, DNYieldAwaitable>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNYieldAwaitable_YieldAwaiterClass = interface(DNValueTypeClass)
  ['{E77AA5D2-9A52-5C00-915D-B9F2E89D93F3}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.YieldAwaitable+YieldAwaiter')]
  DNYieldAwaitable_YieldAwaiter = interface(DNValueType)
  ['{02F9E8C2-E106-307A-B837-A01AB18B615D}']
  { getters & setters } 

    function get_IsCompleted: Boolean;

  { methods } 

    procedure OnCompleted(continuation: DNAction);
    procedure UnsafeOnCompleted(continuation: DNAction);
    procedure GetResult;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNYieldAwaitable_YieldAwaiter = class(TDNGenericImport<DNYieldAwaitable_YieldAwaiterClass, DNYieldAwaitable_YieldAwaiter>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNArrayWithOffsetClass = interface(DNValueTypeClass)
  ['{768FDAE2-A7D9-5F48-8608-4E4FE4B0BE94}']
  { constructors } 

    {class} function init(&array: DNObject; offset: Int32): DNArrayWithOffset;

  end;

  [DNTypeName('System.Runtime.InteropServices.ArrayWithOffset')]
  DNArrayWithOffset = interface(DNValueType)
  ['{12AD0F78-BD4E-3B3C-8A3C-1E5127872A61}']
  { methods } 

    function GetArray: DNObject;
    function GetOffset: Int32;
    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNArrayWithOffset): Boolean; overload;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNArrayWithOffset = class(TDNGenericImport<DNArrayWithOffsetClass, DNArrayWithOffset>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNBIND_OPTSClass = interface(DNValueTypeClass)
  ['{04F7E5EA-5675-55C3-8361-F5A91F1226CF}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.BIND_OPTS')]
  DNBIND_OPTS = interface(DNValueType)
  ['{500334C3-8F66-3DDB-8719-523419B7EC74}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNBIND_OPTS = class(TDNGenericImport<DNBIND_OPTSClass, DNBIND_OPTS>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNBINDPTRClass = interface(DNValueTypeClass)
  ['{C2C82EC3-7C00-59CB-8BD6-BF5B901E4DB2}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.BINDPTR')]
  DNBINDPTR = interface(DNValueType)
  ['{3E8A399B-887A-3AE7-BA99-9DF68D62121C}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNBINDPTR = class(TDNGenericImport<DNBINDPTRClass, DNBINDPTR>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNCONNECTDATAClass = interface(DNValueTypeClass)
  ['{02CD1AFC-5464-5C19-9198-86347F06DCDF}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.CONNECTDATA')]
  DNCONNECTDATA = interface(DNValueType)
  ['{7B24E93D-6676-3D35-8E96-76B2D46F2B1C}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNCONNECTDATA = class(TDNGenericImport<DNCONNECTDATAClass, DNCONNECTDATA>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNDISPPARAMSClass = interface(DNValueTypeClass)
  ['{824CEC77-3B83-5043-9408-338E22BD2EE9}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.DISPPARAMS')]
  DNDISPPARAMS = interface(DNValueType)
  ['{0EFD8898-12E2-3BC0-B8BF-085C2827570C}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNDISPPARAMS = class(TDNGenericImport<DNDISPPARAMSClass, DNDISPPARAMS>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNELEMDESCClass = interface(DNValueTypeClass)
  ['{E8DF54C1-C34F-5184-A81E-4F4EB4C6C36E}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.ELEMDESC')]
  DNELEMDESC = interface(DNValueType)
  ['{5D05835D-DD7D-3207-ABE9-5AED406DC43C}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNELEMDESC = class(TDNGenericImport<DNELEMDESCClass, DNELEMDESC>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNELEMDESC_DESCUNIONClass = interface(DNValueTypeClass)
  ['{5DB015B4-CF59-5ECA-AF3D-44044DF7F905}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.ELEMDESC+DESCUNION')]
  DNELEMDESC_DESCUNION = interface(DNValueType)
  ['{9436EB86-1FDD-3F21-8631-B1BC4262BFBA}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNELEMDESC_DESCUNION = class(TDNGenericImport<DNELEMDESC_DESCUNIONClass, DNELEMDESC_DESCUNION>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNEXCEPINFOClass = interface(DNValueTypeClass)
  ['{55571D83-7455-52C5-AE6F-8AFB41BCBCDE}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.EXCEPINFO')]
  DNEXCEPINFO = interface(DNValueType)
  ['{7CC7786C-DBC3-3738-BB86-D12A114EC9A6}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNEXCEPINFO = class(TDNGenericImport<DNEXCEPINFOClass, DNEXCEPINFO>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNFILETIMEClass = interface(DNValueTypeClass)
  ['{1F14F59E-DCBE-5F56-923E-AD5EEF7534DD}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.FILETIME')]
  DNFILETIME = interface(DNValueType)
  ['{3E7A0D9A-A8B3-3202-BD82-A0F52856BEBC}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNFILETIME = class(TDNGenericImport<DNFILETIMEClass, DNFILETIME>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNFUNCDESCClass = interface(DNValueTypeClass)
  ['{0682084D-F34C-50D9-A640-319C127906F6}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.FUNCDESC')]
  DNFUNCDESC = interface(DNValueType)
  ['{DF5A1F97-A122-35A3-81D6-1FCF165B757E}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNFUNCDESC = class(TDNGenericImport<DNFUNCDESCClass, DNFUNCDESC>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNIDLDESCClass = interface(DNValueTypeClass)
  ['{DE61BF3A-3E86-5638-B4FE-0EB503559E34}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.IDLDESC')]
  DNIDLDESC = interface(DNValueType)
  ['{C69BADC1-9423-3FC9-80C5-5B7334F426D8}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNIDLDESC = class(TDNGenericImport<DNIDLDESCClass, DNIDLDESC>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNPARAMDESCClass = interface(DNValueTypeClass)
  ['{5126B52E-74E5-5CC6-A9B0-4F4E162EF7BD}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.PARAMDESC')]
  DNPARAMDESC = interface(DNValueType)
  ['{BBC2677F-5A2E-3900-AF54-2377DA04428B}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNPARAMDESC = class(TDNGenericImport<DNPARAMDESCClass, DNPARAMDESC>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNSTATSTGClass = interface(DNValueTypeClass)
  ['{73127044-BF89-5E1F-8DC0-66251FBE246A}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.STATSTG')]
  DNSTATSTG = interface(DNValueType)
  ['{648A07FC-98E6-385F-B2BC-66C4C33B3588}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNSTATSTG = class(TDNGenericImport<DNSTATSTGClass, DNSTATSTG>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNTYPEATTRClass = interface(DNValueTypeClass)
  ['{1F288759-72D2-513E-8D15-EF47023E20D8}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.TYPEATTR')]
  DNTYPEATTR = interface(DNValueType)
  ['{82AECCA6-1522-36B5-B71E-5E98ED7D6F67}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNTYPEATTR = class(TDNGenericImport<DNTYPEATTRClass, DNTYPEATTR>)
  public const
   MEMBER_ID_NIL = -1;
  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNTYPEDESCClass = interface(DNValueTypeClass)
  ['{746FEE5E-5300-58EF-B8E5-E41F755CB911}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.TYPEDESC')]
  DNTYPEDESC = interface(DNValueType)
  ['{EDC72230-74B9-3845-87CB-A2309CE15481}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNTYPEDESC = class(TDNGenericImport<DNTYPEDESCClass, DNTYPEDESC>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNTYPELIBATTRClass = interface(DNValueTypeClass)
  ['{0C9A512B-1E1C-508C-97F2-A82BEDAC2A41}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.TYPELIBATTR')]
  DNTYPELIBATTR = interface(DNValueType)
  ['{4F53C00D-A78A-301A-B287-1FE4306E9923}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNTYPELIBATTR = class(TDNGenericImport<DNTYPELIBATTRClass, DNTYPELIBATTR>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNVARDESCClass = interface(DNValueTypeClass)
  ['{6353AB00-9236-503A-8048-8B09008C5E09}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.VARDESC')]
  DNVARDESC = interface(DNValueType)
  ['{2F92FF13-AF83-3930-AC3F-B3F7308BC781}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNVARDESC = class(TDNGenericImport<DNVARDESCClass, DNVARDESC>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNVARDESC_DESCUNIONClass = interface(DNValueTypeClass)
  ['{C0191739-E0C9-5B4D-A33C-46A0E8A031A8}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.VARDESC+DESCUNION')]
  DNVARDESC_DESCUNION = interface(DNValueType)
  ['{258D3A0A-E7A2-35D3-B6EF-CC7D06A6940D}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNVARDESC_DESCUNION = class(TDNGenericImport<DNVARDESC_DESCUNIONClass, DNVARDESC_DESCUNION>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNGCHandleClass = interface(DNValueTypeClass)
  ['{3CAE3970-EE99-5C5D-8064-CEAD68DC4A7F}']
  { static methods } 

    {class} function Alloc(value: DNObject): DNGCHandle; overload;
    {class} function Alloc(value: DNObject; &type: DNGCHandleType): DNGCHandle; overload;
    {class} function FromIntPtr(value: IntPtr): DNGCHandle;
    {class} function ToIntPtr(value: DNGCHandle): IntPtr;

  end;

  [DNTypeName('System.Runtime.InteropServices.GCHandle')]
  DNGCHandle = interface(DNValueType)
  ['{8001AD18-9627-324F-B869-142A5626B222}']
  { getters & setters } 

    function get_Target: DNObject;
    procedure set_Target(value: DNObject);
    function get_IsAllocated: Boolean;

  { methods } 

    procedure Free;
    function AddrOfPinnedObject: IntPtr;
    function GetHashCode: Int32;
    function Equals(o: DNObject): Boolean;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Target: DNObject read get_Target write set_Target;
    property IsAllocated: Boolean read get_IsAllocated;
  end;

  TDNGCHandle = class(TDNGenericImport<DNGCHandleClass, DNGCHandle>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNHandleRefClass = interface(DNValueTypeClass)
  ['{FEBDE428-D5BB-57D8-A0DC-69DE373B5C73}']
  { constructors } 

    {class} function init(wrapper: DNObject; handle: IntPtr): DNHandleRef;

  { static methods } 

    {class} function ToIntPtr(value: DNHandleRef): IntPtr;

  end;

  [DNTypeName('System.Runtime.InteropServices.HandleRef')]
  DNHandleRef = interface(DNValueType)
  ['{0E4971A9-8B58-39FB-8B1F-BFA788E09EE6}']
  { getters & setters } 

    function get_Wrapper: DNObject;
    function get_Handle: IntPtr;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Wrapper: DNObject read get_Wrapper;
    property Handle: IntPtr read get_Handle;
  end;

  TDNHandleRef = class(TDNGenericImport<DNHandleRefClass, DNHandleRef>) end;

  //-------------namespace: System.Runtime.InteropServices.WindowsRuntime----------------
  DNEventRegistrationTokenClass = interface(DNValueTypeClass)
  ['{FB1390C4-CEBF-5CF4-87E2-F3E3C1E2C973}']
  end;

  [DNTypeName('System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken')]
  DNEventRegistrationToken = interface(DNValueType)
  ['{89583661-3B7C-373F-8D53-6575E122F240}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNEventRegistrationToken = class(TDNGenericImport<DNEventRegistrationTokenClass, DNEventRegistrationToken>) end;

  //-------------namespace: System.Runtime.Intrinsics----------------
  DNVector128Class<T> = interface(DNValueTypeClass)
  ['{E865F5F1-4B64-5BF4-A0A4-C4B502302E1A}']
  end;

  [DNTypeName('System.Runtime.Intrinsics.Vector128`1')]
  DNVector128<T> = interface(DNValueType)
  ['{FDEEBA78-DDC7-37AE-B63E-E8D405DCEBF9}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNVector128<T> = class(TDNGenericImport<DNVector128Class<T>, DNVector128<T>>) end;

  //-------------namespace: System.Runtime.Intrinsics----------------
  DNVector256Class<T> = interface(DNValueTypeClass)
  ['{2FBC2053-6EBB-5084-B8B4-67CF644C93D8}']
  end;

  [DNTypeName('System.Runtime.Intrinsics.Vector256`1')]
  DNVector256<T> = interface(DNValueType)
  ['{6FF76736-31CB-344A-A661-3097BC1E6C54}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNVector256<T> = class(TDNGenericImport<DNVector256Class<T>, DNVector256<T>>) end;

  //-------------namespace: System.Runtime.Intrinsics----------------
  DNVector64Class<T> = interface(DNValueTypeClass)
  ['{09BCB312-AAB8-5218-BBFD-F1678A458540}']
  end;

  [DNTypeName('System.Runtime.Intrinsics.Vector64`1')]
  DNVector64<T> = interface(DNValueType)
  ['{972B1A09-27EB-380A-8EA6-64EACA97C1CD}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNVector64<T> = class(TDNGenericImport<DNVector64Class<T>, DNVector64<T>>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNSerializationEntryClass = interface(DNValueTypeClass)
  ['{E269A7CB-AFC9-52A6-893B-2C6544C0D382}']
  end;

  [DNTypeName('System.Runtime.Serialization.SerializationEntry')]
  DNSerializationEntry = interface(DNValueType)
  ['{4E3475B3-8348-37F7-AC11-6C7A1600FA33}']
  { getters & setters } 

    function get_Value: DNObject;
    function get_Name: string;
    function get_ObjectType: DNType;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: DNObject read get_Value;
    property Name: string read get_Name;
    property ObjectType: DNType read get_ObjectType;
  end;

  TDNSerializationEntry = class(TDNGenericImport<DNSerializationEntryClass, DNSerializationEntry>) end;

  //-------------namespace: System.Runtime.Serialization----------------
  DNStreamingContextClass = interface(DNValueTypeClass)
  ['{0DE74C89-9742-58B8-8B03-348A2CD7FB6A}']
  { constructors } 

    {class} function init(state: DNStreamingContextStates): DNStreamingContext; overload;
    {class} function init(state: DNStreamingContextStates; additional: DNObject): DNStreamingContext; overload;

  end;

  [DNTypeName('System.Runtime.Serialization.StreamingContext')]
  DNStreamingContext = interface(DNValueType)
  ['{E8092B3E-5C0C-3DFD-822D-2C825D6A87FA}']
  { getters & setters } 

    function get_State: DNStreamingContextStates;
    function get_Context: DNObject;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property State: DNStreamingContextStates read get_State;
    property Context: DNObject read get_Context;
  end;

  TDNStreamingContext = class(TDNGenericImport<DNStreamingContextClass, DNStreamingContext>) end;

  //-------------namespace: System----------------
  DNRuntimeArgumentHandleClass = interface(DNValueTypeClass)
  ['{B431B81C-B586-5B72-8DCD-8457214D9D62}']
  end;

  [DNTypeName('System.RuntimeArgumentHandle')]
  DNRuntimeArgumentHandle = interface(DNValueType)
  ['{1A333BC4-42EA-35EF-9CA0-16BC49DB2E32}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNRuntimeArgumentHandle = class(TDNGenericImport<DNRuntimeArgumentHandleClass, DNRuntimeArgumentHandle>) end;

  //-------------namespace: System----------------
  DNRuntimeFieldHandleClass = interface(DNValueTypeClass)
  ['{C15042E0-B3DE-521C-9ABA-513D518E73F1}']
  end;

  [DNTypeName('System.RuntimeFieldHandle')]
  DNRuntimeFieldHandle = interface(DNValueType)
  ['{1910B8CB-CEDB-3E1E-BC95-85715BED8961}']
  { getters & setters } 

    function get_Value: IntPtr;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(handle: DNRuntimeFieldHandle): Boolean; overload;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: IntPtr read get_Value;
  end;

  TDNRuntimeFieldHandle = class(TDNGenericImport<DNRuntimeFieldHandleClass, DNRuntimeFieldHandle>) end;

  //-------------namespace: System----------------
  DNRuntimeMethodHandleClass = interface(DNValueTypeClass)
  ['{942A674D-C37C-5893-9C0B-BD064319A882}']
  end;

  [DNTypeName('System.RuntimeMethodHandle')]
  DNRuntimeMethodHandle = interface(DNValueType)
  ['{A71911F9-5F97-37BF-8516-1F05191EF499}']
  { getters & setters } 

    function get_Value: IntPtr;

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(handle: DNRuntimeMethodHandle): Boolean; overload;
    function GetFunctionPointer: IntPtr;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: IntPtr read get_Value;
  end;

  TDNRuntimeMethodHandle = class(TDNGenericImport<DNRuntimeMethodHandleClass, DNRuntimeMethodHandle>) end;

  //-------------namespace: System----------------
  DNRuntimeTypeHandleClass = interface(DNValueTypeClass)
  ['{18EADE34-FE97-5C4B-930A-47A307598B9B}']
  end;

  [DNTypeName('System.RuntimeTypeHandle')]
  DNRuntimeTypeHandle = interface(DNValueType)
  ['{C55FA46D-0985-3A1D-9BD0-DED851B66A02}']
  { getters & setters } 

    function get_Value: IntPtr;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(handle: DNRuntimeTypeHandle): Boolean; overload;
    function GetModuleHandle: DNModuleHandle;
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Value: IntPtr read get_Value;
  end;

  TDNRuntimeTypeHandle = class(TDNGenericImport<DNRuntimeTypeHandleClass, DNRuntimeTypeHandle>) end;

  //-------------namespace: System----------------
  DNSByteClass = interface(DNValueTypeClass)
  ['{BA2C4183-C388-5DE3-B7D0-ECDFCE9F4BDE}']
  { static methods } 

    {class} function Parse(s: string): SByte; overload;
    {class} function Parse(s: string; style: DNNumberStyles): SByte; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): SByte; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): SByte; overload;
    {class} function Parse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider): SByte; overload;
    {class} function TryParse(s: string; out result: SByte): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; out result: SByte): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: SByte): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider; out result: SByte): Boolean; overload;

  end;

  [DNTypeName('System.SByte')]
  DNSByte = interface(DNValueType)
  ['{DC3C96BC-48CE-3EF7-8C15-37BC7EC807A1}']
  { methods } 

    function CompareTo(obj: DNObject): Int32; overload;
    function CompareTo(value: SByte): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: SByte): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>; provider: DNIFormatProvider): Boolean;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNSByte = class(TDNGenericImport<DNSByteClass, DNSByte>)
  public const
   MaxValue = 127;
   MinValue = -128;
  end;

  //-------------namespace: System----------------
  DNSingleClass = interface(DNValueTypeClass)
  ['{794ACA21-7F18-5106-B87E-A64B4D1C01EE}']
  { static methods } 

    {class} function IsFinite(f: Single): Boolean;
    {class} function IsInfinity(f: Single): Boolean;
    {class} function IsNaN(f: Single): Boolean;
    {class} function IsNegative(f: Single): Boolean;
    {class} function IsNegativeInfinity(f: Single): Boolean;
    {class} function IsNormal(f: Single): Boolean;
    {class} function IsPositiveInfinity(f: Single): Boolean;
    {class} function IsSubnormal(f: Single): Boolean;
    {class} function Parse(s: string): Single; overload;
    {class} function Parse(s: string; style: DNNumberStyles): Single; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): Single; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): Single; overload;
    {class} function Parse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider): Single; overload;
    {class} function TryParse(s: string; out result: Single): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; out result: Single): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: Single): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider; out result: Single): Boolean; overload;

  end;

  [DNTypeName('System.Single')]
  DNSingle = interface(DNValueType)
  ['{A0782160-FCB5-30DC-B75C-B7C304DFC3D3}']
  { methods } 

    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: Single): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: Single): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>; provider: DNIFormatProvider): Boolean;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNSingle = class(TDNGenericImport<DNSingleClass, DNSingle>)
  public const
   MinValue = -3.402823E+38;
   Epsilon = 1.401298E-45;
   MaxValue = 3.402823E+38;
  end;

  //-------------namespace: System----------------
  DNSpanClass<T> = interface(DNValueTypeClass)
  ['{5C0EB802-E8DA-5BDD-8541-7AF2229D129C}']
  { static getter & setter } 

    {class} function get_Empty: DNSpan<T>;

  { constructors } 

    {class} function init(&array: TArray<T>): DNSpan<T>; overload;
    {class} function init(&array: TArray<T>; start: Int32; length: Int32): DNSpan<T>; overload;
    {class} function init(var pointer: DNVoid; length: Int32): DNSpan<T>; overload;

  { static propertys } 

    {class} property Empty: DNSpan<T> read get_Empty;
  end;

  [DNTypeName('System.Span`1')]
  DNSpan<T> = interface(DNValueType)
  ['{2CF8B623-4CDB-3ECC-801C-7EFD32FF8EFC}']
  { getters & setters } 

    function get_Length: Int32;
    function get_IsEmpty: Boolean;
    function get_Item(index: Int32): T;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetEnumerator: DNSpan_Enumerator<T>;
    function GetPinnableReference: T;
    procedure Clear;
    procedure Fill(value: T);
    procedure CopyTo(destination: DNSpan<T>);
    function TryCopyTo(destination: DNSpan<T>): Boolean;
    function ToString: string;
    function Slice(start: Int32): DNSpan<T>; overload;
    function Slice(start: Int32; length: Int32): DNSpan<T>; overload;
    function ToArray: TArray<T>;
    function GetType: DNType;

  { propertys } 

    property Length: Int32 read get_Length;
    property IsEmpty: Boolean read get_IsEmpty;
    property Item[index: Int32]: T read get_Item; default;
  end;

  TDNSpan<T> = class(TDNGenericImport<DNSpanClass<T>, DNSpan<T>>) end;

  //-------------namespace: System----------------
  DNSpan_EnumeratorClass<T> = interface(DNValueTypeClass)
  ['{23F01E5B-13DA-5568-A4EF-D5D68BA112F0}']
  end;

  [DNTypeName('System.Span`1+Enumerator')]
  DNSpan_Enumerator<T> = interface(DNValueType)
  ['{BAA326C0-92FC-3FD0-858D-10AB6F38DA27}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNSpan_Enumerator<T> = class(TDNGenericImport<DNSpan_EnumeratorClass<T>, DNSpan_Enumerator<T>>) end;

  //-------------namespace: System.Threading----------------
  DNAsyncFlowControlClass = interface(DNValueTypeClass)
  ['{C59F9155-A39F-5DD1-9AF4-BEFAA57B37C9}']
  end;

  [DNTypeName('System.Threading.AsyncFlowControl')]
  DNAsyncFlowControl = interface(DNValueType)
  ['{28FD6AFB-8BED-3535-9E46-9A91761F7111}']
  { methods } 

    procedure Undo;
    procedure Dispose;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNAsyncFlowControl): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNAsyncFlowControl = class(TDNGenericImport<DNAsyncFlowControlClass, DNAsyncFlowControl>) end;

  //-------------namespace: System.Threading----------------
  DNAsyncLocalValueChangedArgsClass<T> = interface(DNValueTypeClass)
  ['{2CD71E55-BBB5-53F5-B8F1-BE84E7D6C905}']
  end;

  [DNTypeName('System.Threading.AsyncLocalValueChangedArgs`1')]
  DNAsyncLocalValueChangedArgs<T> = interface(DNValueType)
  ['{DC9C43FA-93A0-32CE-B558-77D52AE16032}']
  { getters & setters } 

    function get_PreviousValue: T;
    function get_CurrentValue: T;
    function get_ThreadContextChanged: Boolean;

  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property PreviousValue: T read get_PreviousValue;
    property CurrentValue: T read get_CurrentValue;
    property ThreadContextChanged: Boolean read get_ThreadContextChanged;
  end;

  TDNAsyncLocalValueChangedArgs<T> = class(TDNGenericImport<DNAsyncLocalValueChangedArgsClass<T>, DNAsyncLocalValueChangedArgs<T>>) end;

  //-------------namespace: System.Threading----------------
  DNCancellationTokenClass = interface(DNValueTypeClass)
  ['{786B714C-C20B-52A7-94E9-8F70DCE33292}']
  { static getter & setter } 

    {class} function get_None: DNCancellationToken;

  { constructors } 

    {class} function init(canceled: Boolean): DNCancellationToken;

  { static propertys } 

    {class} property None: DNCancellationToken read get_None;
  end;

  [DNTypeName('System.Threading.CancellationToken')]
  DNCancellationToken = interface(DNValueType)
  ['{EDBC3CA1-604B-3703-B75D-5F587D71F6A1}']
  { getters & setters } 

    function get_IsCancellationRequested: Boolean;
    function get_CanBeCanceled: Boolean;
    function get_WaitHandle: DNWaitHandle;

  { methods } 

    function &Register(callback: DNAction): DNCancellationTokenRegistration; overload;
    function &Register(callback: DNAction; useSynchronizationContext: Boolean): DNCancellationTokenRegistration; overload;
    function &Register(callback: DNAction<DNObject>; state: DNObject): DNCancellationTokenRegistration; overload;
    function &Register(callback: DNAction<DNObject>; state: DNObject; useSynchronizationContext: Boolean): DNCancellationTokenRegistration; overload;
    function Equals(other: DNCancellationToken): Boolean; overload;
    function Equals(other: DNObject): Boolean; overload;
    function GetHashCode: Int32;
    procedure ThrowIfCancellationRequested;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property IsCancellationRequested: Boolean read get_IsCancellationRequested;
    property CanBeCanceled: Boolean read get_CanBeCanceled;
    property WaitHandle: DNWaitHandle read get_WaitHandle;
  end;

  TDNCancellationToken = class(TDNGenericImport<DNCancellationTokenClass, DNCancellationToken>) end;

  //-------------namespace: System.Threading----------------
  DNCancellationTokenRegistrationClass = interface(DNValueTypeClass)
  ['{3561F681-F39F-5CE4-B6A1-729A4E54FF4F}']
  end;

  [DNTypeName('System.Threading.CancellationTokenRegistration')]
  DNCancellationTokenRegistration = interface(DNValueType)
  ['{59E93620-D5E1-3DBA-99D6-1129BFD02983}']
  { getters & setters } 

    function get_Token: DNCancellationToken;

  { methods } 

    procedure Dispose;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNCancellationTokenRegistration): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Token: DNCancellationToken read get_Token;
  end;

  TDNCancellationTokenRegistration = class(TDNGenericImport<DNCancellationTokenRegistrationClass, DNCancellationTokenRegistration>) end;

  //-------------namespace: System.Threading----------------
  DNNativeOverlappedClass = interface(DNValueTypeClass)
  ['{CEA75ACB-A3FB-501C-B415-B3C331BB2662}']
  end;

  [DNTypeName('System.Threading.NativeOverlapped')]
  DNNativeOverlapped = interface(DNValueType)
  ['{3FA46E74-917B-33B2-B6EC-338AA33B336E}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNNativeOverlapped = class(TDNGenericImport<DNNativeOverlappedClass, DNNativeOverlapped>) end;

  //-------------namespace: System.Threading----------------
  DNSpinLockClass = interface(DNValueTypeClass)
  ['{FD7DE440-9F05-54B3-83F1-B1F82CEC6DB0}']
  { constructors } 

    {class} function init(enableThreadOwnerTracking: Boolean): DNSpinLock;

  end;

  [DNTypeName('System.Threading.SpinLock')]
  DNSpinLock = interface(DNValueType)
  ['{BBB037F8-D82C-394B-93C4-30F963F6A972}']
  { getters & setters } 

    function get_IsHeld: Boolean;
    function get_IsHeldByCurrentThread: Boolean;
    function get_IsThreadOwnerTrackingEnabled: Boolean;

  { methods } 

    procedure Enter(out lockTaken: Boolean);
    procedure TryEnter(out lockTaken: Boolean); overload;
    procedure TryEnter(timeout: DNTimeSpan; out lockTaken: Boolean); overload;
    procedure TryEnter(millisecondsTimeout: Int32; out lockTaken: Boolean); overload;
    procedure &Exit; overload;
    procedure &Exit(useMemoryBarrier: Boolean); overload;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property IsHeld: Boolean read get_IsHeld;
    property IsHeldByCurrentThread: Boolean read get_IsHeldByCurrentThread;
    property IsThreadOwnerTrackingEnabled: Boolean read get_IsThreadOwnerTrackingEnabled;
  end;

  TDNSpinLock = class(TDNGenericImport<DNSpinLockClass, DNSpinLock>) end;

  //-------------namespace: System.Threading----------------
  DNSpinWaitClass = interface(DNValueTypeClass)
  ['{D7E44324-D928-5C0A-B534-A314F1B7FE90}']
  { static methods } 

    {class} procedure SpinUntil(condition: DNFunc<Boolean>); overload;
    {class} function SpinUntil(condition: DNFunc<Boolean>; timeout: DNTimeSpan): Boolean; overload;
    {class} function SpinUntil(condition: DNFunc<Boolean>; millisecondsTimeout: Int32): Boolean; overload;

  end;

  [DNTypeName('System.Threading.SpinWait')]
  DNSpinWait = interface(DNValueType)
  ['{8764DB42-1112-3429-A9B2-EB6780B9C1D2}']
  { getters & setters } 

    function get_Count: Int32;
    function get_NextSpinWillYield: Boolean;

  { methods } 

    procedure SpinOnce;
    procedure Reset;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property Count: Int32 read get_Count;
    property NextSpinWillYield: Boolean read get_NextSpinWillYield;
  end;

  TDNSpinWait = class(TDNGenericImport<DNSpinWaitClass, DNSpinWait>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNValueTaskClass<TResult> = interface(DNValueTypeClass)
  ['{8D70EB38-E202-53B5-8F56-2BB29DFA6D9D}']
  { constructors } 

    {class} function init(result: TResult): DNValueTask<TResult>; overload;
    {class} function init(task: DNTask<TResult>): DNValueTask<TResult>; overload;
    {class} function init(source: DNIValueTaskSource<TResult>; token: Int16): DNValueTask<TResult>; overload;

  end;

  [DNTypeName('System.Threading.Tasks.ValueTask`1')]
  DNValueTask<TResult> = interface(DNValueType)
  ['{14A56344-CA2D-3BF5-AB73-6FE7C0CA773A}']
  { getters & setters } 

    function get_IsCompleted: Boolean;
    function get_IsCompletedSuccessfully: Boolean;
    function get_IsFaulted: Boolean;
    function get_IsCanceled: Boolean;
    function get_Result: TResult;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTask<TResult>): Boolean; overload;
    function AsTask: DNTask<TResult>;
    function Preserve: DNValueTask<TResult>;
    function GetAwaiter: DNValueTaskAwaiter<TResult>;
    function ConfigureAwait(continueOnCapturedContext: Boolean): DNConfiguredValueTaskAwaitable<TResult>;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
    property IsCompletedSuccessfully: Boolean read get_IsCompletedSuccessfully;
    property IsFaulted: Boolean read get_IsFaulted;
    property IsCanceled: Boolean read get_IsCanceled;
    property Result: TResult read get_Result;
  end;

  TDNValueTask<TResult> = class(TDNGenericImport<DNValueTaskClass<TResult>, DNValueTask<TResult>>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNValueTaskClass = interface(DNValueTypeClass)
  ['{3E96D49B-343B-5FED-9661-A9A3CAC8D5EF}']
  { constructors } 

    {class} function init(task: DNTask): DNValueTask; overload;
    {class} function init(source: DNIValueTaskSource; token: Int16): DNValueTask; overload;

  end;

  [DNTypeName('System.Threading.Tasks.ValueTask')]
  DNValueTask = interface(DNValueType)
  ['{3CCFA798-55E0-3EBD-A6C9-92FC25493AB9}']
  { getters & setters } 

    function get_IsCompleted: Boolean;
    function get_IsCompletedSuccessfully: Boolean;
    function get_IsFaulted: Boolean;
    function get_IsCanceled: Boolean;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTask): Boolean; overload;
    function AsTask: DNTask;
    function Preserve: DNValueTask;
    function GetAwaiter: DNValueTaskAwaiter;
    function ConfigureAwait(continueOnCapturedContext: Boolean): DNConfiguredValueTaskAwaitable;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property IsCompleted: Boolean read get_IsCompleted;
    property IsCompletedSuccessfully: Boolean read get_IsCompletedSuccessfully;
    property IsFaulted: Boolean read get_IsFaulted;
    property IsCanceled: Boolean read get_IsCanceled;
  end;

  TDNValueTask = class(TDNGenericImport<DNValueTaskClass, DNValueTask>) end;

  //-------------namespace: System----------------
  DNTimeSpanClass = interface(DNValueTypeClass)
  ['{7C1B7168-23ED-53E2-ABF5-BA419E19C4C3}']
  { constructors } 

    {class} function init(ticks: Int64): DNTimeSpan; overload;
    {class} function init(hours: Int32; minutes: Int32; seconds: Int32): DNTimeSpan; overload;
    {class} function init(days: Int32; hours: Int32; minutes: Int32; seconds: Int32): DNTimeSpan; overload;
    {class} function init(days: Int32; hours: Int32; minutes: Int32; seconds: Int32; milliseconds: Int32): DNTimeSpan; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Zero: DNTimeSpan;
   function __fakeFieldGet_MaxValue: DNTimeSpan;
   function __fakeFieldGet_MinValue: DNTimeSpan;

  { static fields } 

    {class} property Zero: DNTimeSpan read __fakeFieldGet_Zero;
    {class} property MaxValue: DNTimeSpan read __fakeFieldGet_MaxValue;
    {class} property MinValue: DNTimeSpan read __fakeFieldGet_MinValue;

  { static methods } 

    {class} function Compare(t1: DNTimeSpan; t2: DNTimeSpan): Int32;
    {class} function FromDays(value: Double): DNTimeSpan;
    {class} function Equals(t1: DNTimeSpan; t2: DNTimeSpan): Boolean; overload;
    {class} function FromHours(value: Double): DNTimeSpan;
    {class} function FromMilliseconds(value: Double): DNTimeSpan;
    {class} function FromMinutes(value: Double): DNTimeSpan;
    {class} function FromSeconds(value: Double): DNTimeSpan;
    {class} function FromTicks(value: Int64): DNTimeSpan;
    {class} function Parse(s: string): DNTimeSpan; overload;
    {class} function Parse(input: string; formatProvider: DNIFormatProvider): DNTimeSpan; overload;
    {class} function Parse(input: DNReadOnlySpan<Char>; formatProvider: DNIFormatProvider): DNTimeSpan; overload;
    {class} function ParseExact(input: string; format: string; formatProvider: DNIFormatProvider): DNTimeSpan; overload;
    {class} function ParseExact(input: string; formats: TArray<string>; formatProvider: DNIFormatProvider): DNTimeSpan; overload;
    {class} function ParseExact(input: string; format: string; formatProvider: DNIFormatProvider; styles: DNTimeSpanStyles): DNTimeSpan; overload;
    {class} function ParseExact(input: DNReadOnlySpan<Char>; format: DNReadOnlySpan<Char>; formatProvider: DNIFormatProvider; styles: DNTimeSpanStyles): DNTimeSpan; overload;
    {class} function ParseExact(input: string; formats: TArray<string>; formatProvider: DNIFormatProvider; styles: DNTimeSpanStyles): DNTimeSpan; overload;
    {class} function ParseExact(input: DNReadOnlySpan<Char>; formats: TArray<string>; formatProvider: DNIFormatProvider; styles: DNTimeSpanStyles): DNTimeSpan; overload;
    {class} function TryParse(s: string; out result: DNTimeSpan): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; out result: DNTimeSpan): Boolean; overload;
    {class} function TryParse(input: string; formatProvider: DNIFormatProvider; out result: DNTimeSpan): Boolean; overload;
    {class} function TryParse(input: DNReadOnlySpan<Char>; formatProvider: DNIFormatProvider; out result: DNTimeSpan): Boolean; overload;
    {class} function TryParseExact(input: string; format: string; formatProvider: DNIFormatProvider; out result: DNTimeSpan): Boolean; overload;
    {class} function TryParseExact(input: DNReadOnlySpan<Char>; format: DNReadOnlySpan<Char>; formatProvider: DNIFormatProvider; out result: DNTimeSpan): Boolean; overload;
    {class} function TryParseExact(input: string; formats: TArray<string>; formatProvider: DNIFormatProvider; out result: DNTimeSpan): Boolean; overload;
    {class} function TryParseExact(input: DNReadOnlySpan<Char>; formats: TArray<string>; formatProvider: DNIFormatProvider; out result: DNTimeSpan): Boolean; overload;
    {class} function TryParseExact(input: string; format: string; formatProvider: DNIFormatProvider; styles: DNTimeSpanStyles; out result: DNTimeSpan): Boolean; overload;
    {class} function TryParseExact(input: DNReadOnlySpan<Char>; format: DNReadOnlySpan<Char>; formatProvider: DNIFormatProvider; styles: DNTimeSpanStyles; out result: DNTimeSpan): Boolean; overload;
    {class} function TryParseExact(input: string; formats: TArray<string>; formatProvider: DNIFormatProvider; styles: DNTimeSpanStyles; out result: DNTimeSpan): Boolean; overload;
    {class} function TryParseExact(input: DNReadOnlySpan<Char>; formats: TArray<string>; formatProvider: DNIFormatProvider; styles: DNTimeSpanStyles; out result: DNTimeSpan): Boolean; overload;

  end;

  [DNTypeName('System.TimeSpan')]
  DNTimeSpan = interface(DNValueType)
  ['{24F1A6C9-F2AA-31CD-9EFC-08B62EA68E22}']
  { getters & setters } 

    function get_Ticks: Int64;
    function get_Days: Int32;
    function get_Hours: Int32;
    function get_Milliseconds: Int32;
    function get_Minutes: Int32;
    function get_Seconds: Int32;
    function get_TotalDays: Double;
    function get_TotalHours: Double;
    function get_TotalMilliseconds: Double;
    function get_TotalMinutes: Double;
    function get_TotalSeconds: Double;

  { methods } 

    function Add(ts: DNTimeSpan): DNTimeSpan;
    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: DNTimeSpan): Int32; overload;
    function Duration: DNTimeSpan;
    function Equals(value: DNObject): Boolean; overload;
    function Equals(obj: DNTimeSpan): Boolean; overload;
    function GetHashCode: Int32;
    function Negate: DNTimeSpan;
    function Subtract(ts: DNTimeSpan): DNTimeSpan;
    function Multiply(factor: Double): DNTimeSpan;
    function Divide(divisor: Double): DNTimeSpan; overload;
    function Divide(ts: DNTimeSpan): Double; overload;
    function ToString: string; overload;
    function ToString(format: string): string; overload;
    function ToString(format: string; formatProvider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>; formatProvider: DNIFormatProvider): Boolean;
    function GetType: DNType;

  { propertys } 

    property Ticks: Int64 read get_Ticks;
    property Days: Int32 read get_Days;
    property Hours: Int32 read get_Hours;
    property Milliseconds: Int32 read get_Milliseconds;
    property Minutes: Int32 read get_Minutes;
    property Seconds: Int32 read get_Seconds;
    property TotalDays: Double read get_TotalDays;
    property TotalHours: Double read get_TotalHours;
    property TotalMilliseconds: Double read get_TotalMilliseconds;
    property TotalMinutes: Double read get_TotalMinutes;
    property TotalSeconds: Double read get_TotalSeconds;
  end;

  TDNTimeSpan = class(TDNGenericImport<DNTimeSpanClass, DNTimeSpan>)
  public const
   TicksPerMillisecond = 10000;
   TicksPerSecond = 10000000;
   TicksPerMinute = 600000000;
   TicksPerHour = 36000000000;
   TicksPerDay = 864000000000;
  end;

  //-------------namespace: System----------------
  DNTimeZoneInfo_TransitionTimeClass = interface(DNValueTypeClass)
  ['{0FC9B342-D71F-54B5-A1BC-B26FFAC106A5}']
  { static methods } 

    {class} function CreateFixedDateRule(timeOfDay: DNDateTime; month: Int32; day: Int32): DNTimeZoneInfo_TransitionTime;
    {class} function CreateFloatingDateRule(timeOfDay: DNDateTime; month: Int32; week: Int32; dayOfWeek: DNDayOfWeek): DNTimeZoneInfo_TransitionTime;

  end;

  [DNTypeName('System.TimeZoneInfo+TransitionTime')]
  DNTimeZoneInfo_TransitionTime = interface(DNValueType)
  ['{842E5660-7317-3CC9-8076-EA334D3B1E45}']
  { getters & setters } 

    function get_TimeOfDay: DNDateTime;
    function get_Month: Int32;
    function get_Week: Int32;
    function get_Day: Int32;
    function get_DayOfWeek: DNDayOfWeek;
    function get_IsFixedDateRule: Boolean;

  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNTimeZoneInfo_TransitionTime): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  { propertys } 

    property TimeOfDay: DNDateTime read get_TimeOfDay;
    property Month: Int32 read get_Month;
    property Week: Int32 read get_Week;
    property Day: Int32 read get_Day;
    property DayOfWeek: DNDayOfWeek read get_DayOfWeek;
    property IsFixedDateRule: Boolean read get_IsFixedDateRule;
  end;

  TDNTimeZoneInfo_TransitionTime = class(TDNGenericImport<DNTimeZoneInfo_TransitionTimeClass, DNTimeZoneInfo_TransitionTime>) end;

  //-------------namespace: System----------------
  DNTypedReferenceClass = interface(DNValueTypeClass)
  ['{027A4E19-872F-505E-939F-BCD79C460230}']
  { static methods } 

    {class} function MakeTypedReference(target: DNObject; flds: TArray<DNFieldInfo>): DNTypedReference;
    {class} function ToObject(value: DNTypedReference): DNObject;
    {class} function GetTargetType(value: DNTypedReference): DNType;
    {class} function TargetTypeToken(value: DNTypedReference): DNRuntimeTypeHandle;
    {class} procedure SetTypedReference(target: DNTypedReference; value: DNObject);

  end;

  [DNTypeName('System.TypedReference')]
  DNTypedReference = interface(DNValueType)
  ['{2D07B132-EAE5-3633-A198-26AA320D0E4E}']
  { methods } 

    function GetHashCode: Int32;
    function Equals(o: DNObject): Boolean;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNTypedReference = class(TDNGenericImport<DNTypedReferenceClass, DNTypedReference>) end;

  //-------------namespace: System----------------
  DNUInt16Class = interface(DNValueTypeClass)
  ['{A5A41C3F-81B3-5007-8F3C-B4C19799AEA8}']
  { static methods } 

    {class} function Parse(s: string): UInt16; overload;
    {class} function Parse(s: string; style: DNNumberStyles): UInt16; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): UInt16; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): UInt16; overload;
    {class} function Parse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider): UInt16; overload;
    {class} function TryParse(s: string; out result: UInt16): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; out result: UInt16): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: UInt16): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider; out result: UInt16): Boolean; overload;

  end;

  [DNTypeName('System.UInt16')]
  DNUInt16 = interface(DNValueType)
  ['{33D9552A-DC77-3314-8EA3-80BF058EA163}']
  { methods } 

    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: UInt16): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: UInt16): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>; provider: DNIFormatProvider): Boolean;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNUInt16 = class(TDNGenericImport<DNUInt16Class, DNUInt16>)
  public const
   MaxValue = 65535;
   MinValue = 0;
  end;

  //-------------namespace: System----------------
  DNUInt32Class = interface(DNValueTypeClass)
  ['{CE7B7269-207D-5502-9889-4D9EDC78654D}']
  { static methods } 

    {class} function Parse(s: string): UInt32; overload;
    {class} function Parse(s: string; style: DNNumberStyles): UInt32; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): UInt32; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): UInt32; overload;
    {class} function Parse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider): UInt32; overload;
    {class} function TryParse(s: string; out result: UInt32): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; out result: UInt32): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: UInt32): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider; out result: UInt32): Boolean; overload;

  end;

  [DNTypeName('System.UInt32')]
  DNUInt32 = interface(DNValueType)
  ['{E38CB0A1-90AE-3C05-9B2E-062A584D6C50}']
  { methods } 

    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: UInt32): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: UInt32): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>; provider: DNIFormatProvider): Boolean;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNUInt32 = class(TDNGenericImport<DNUInt32Class, DNUInt32>)
  public const
   MaxValue = 4294967295;
   MinValue = 0;
  end;

  //-------------namespace: System----------------
  DNUInt64Class = interface(DNValueTypeClass)
  ['{DDF52001-8684-58C3-B48A-0D5CAA21E48D}']
  { static methods } 

    {class} function Parse(s: string): UInt64; overload;
    {class} function Parse(s: string; style: DNNumberStyles): UInt64; overload;
    {class} function Parse(s: string; provider: DNIFormatProvider): UInt64; overload;
    {class} function Parse(s: string; style: DNNumberStyles; provider: DNIFormatProvider): UInt64; overload;
    {class} function Parse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider): UInt64; overload;
    {class} function TryParse(s: string; out result: UInt64): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; out result: UInt64): Boolean; overload;
    {class} function TryParse(s: string; style: DNNumberStyles; provider: DNIFormatProvider; out result: UInt64): Boolean; overload;
    {class} function TryParse(s: DNReadOnlySpan<Char>; style: DNNumberStyles; provider: DNIFormatProvider; out result: UInt64): Boolean; overload;

  end;

  [DNTypeName('System.UInt64')]
  DNUInt64 = interface(DNValueType)
  ['{5F5FC118-3099-32F3-ABBA-755706F8B7F8}']
  { methods } 

    function CompareTo(value: DNObject): Int32; overload;
    function CompareTo(value: UInt64): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: UInt64): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(provider: DNIFormatProvider): string; overload;
    function ToString(format: string): string; overload;
    function ToString(format: string; provider: DNIFormatProvider): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32; format: DNReadOnlySpan<Char>; provider: DNIFormatProvider): Boolean;
    function GetTypeCode: DNTypeCode;
    function GetType: DNType;

  end;

  TDNUInt64 = class(TDNGenericImport<DNUInt64Class, DNUInt64>)
  public const
   MaxValue = 18446744073709551615;
   MinValue = 0;
  end;

  //-------------namespace: System----------------
  DNUIntPtrClass = interface(DNValueTypeClass)
  ['{E53CB8AF-86DC-5947-B30B-97C2093630D1}']
  { static getter & setter } 

    {class} function get_Size: Int32;

  { constructors } 

    {class} function init(value: UInt32): DNUIntPtr; overload;
    {class} function init(value: UInt64): DNUIntPtr; overload;
    {class} function init(var value: DNVoid): DNUIntPtr; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Zero: UIntPtr;

  { static fields } 

    {class} property Zero: UIntPtr read __fakeFieldGet_Zero;

  { static methods } 

    {class} function Add(pointer: UIntPtr; offset: Int32): UIntPtr;
    {class} function Subtract(pointer: UIntPtr; offset: Int32): UIntPtr;

  { static propertys } 

    {class} property Size: Int32 read get_Size;
  end;

  [DNTypeName('System.UIntPtr')]
  DNUIntPtr = interface(DNValueType)
  ['{C98C2344-0E1D-3D4A-AA0C-45D5E1F0CDD5}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToUInt32: UInt32;
    function ToUInt64: UInt64;
    function ToPointer: DNVoid;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNUIntPtr = class(TDNGenericImport<DNUIntPtrClass, DNUIntPtr>) end;

  //-------------namespace: System----------------
  DNValueTupleClass<T1> = interface(DNValueTypeClass)
  ['{A1AEF30C-BF3A-51F6-8751-3EEB8C0547D4}']
  { constructors } 

    {class} function init(item1: T1): DNValueTuple<T1>;

  end;

  [DNTypeName('System.ValueTuple`1')]
  DNValueTuple<T1> = interface(DNValueType)
  ['{043DDC79-8C6D-352D-95E9-13C5B4DF1222}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTuple<T1>): Boolean; overload;
    function CompareTo(other: DNValueTuple<T1>): Int32;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNValueTuple<T1> = class(TDNGenericImport<DNValueTupleClass<T1>, DNValueTuple<T1>>) end;

  //-------------namespace: System----------------
  DNValueTupleClass<T1, T2> = interface(DNValueTypeClass)
  ['{CC384BFB-AC56-5800-9374-54E152E6E789}']
  { constructors } 

    {class} function init(item1: T1; item2: T2): DNValueTuple<T1, T2>;

  end;

  [DNTypeName('System.ValueTuple`2')]
  DNValueTuple<T1, T2> = interface(DNValueType)
  ['{4A04084C-CB2B-378D-AA9C-A77ABD9BA77E}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTuple<T1, T2>): Boolean; overload;
    function CompareTo(other: DNValueTuple<T1, T2>): Int32;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNValueTuple<T1, T2> = class(TDNGenericImport<DNValueTupleClass<T1, T2>, DNValueTuple<T1, T2>>) end;

  //-------------namespace: System----------------
  DNValueTupleClass<T1, T2, T3> = interface(DNValueTypeClass)
  ['{0C805DCA-CEF7-5949-B7A4-F44CF1DD9E02}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3): DNValueTuple<T1, T2, T3>;

  end;

  [DNTypeName('System.ValueTuple`3')]
  DNValueTuple<T1, T2, T3> = interface(DNValueType)
  ['{9DDA95F0-3583-38DD-947C-94810F906AC3}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTuple<T1, T2, T3>): Boolean; overload;
    function CompareTo(other: DNValueTuple<T1, T2, T3>): Int32;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNValueTuple<T1, T2, T3> = class(TDNGenericImport<DNValueTupleClass<T1, T2, T3>, DNValueTuple<T1, T2, T3>>) end;

  //-------------namespace: System----------------
  DNValueTupleClass<T1, T2, T3, T4> = interface(DNValueTypeClass)
  ['{6150402C-51AA-5CB5-9C08-D5483DDB196E}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3; item4: T4): DNValueTuple<T1, T2, T3, T4>;

  end;

  [DNTypeName('System.ValueTuple`4')]
  DNValueTuple<T1, T2, T3, T4> = interface(DNValueType)
  ['{DEABE902-4756-3223-A60F-1112986B9FB5}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTuple<T1, T2, T3, T4>): Boolean; overload;
    function CompareTo(other: DNValueTuple<T1, T2, T3, T4>): Int32;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNValueTuple<T1, T2, T3, T4> = class(TDNGenericImport<DNValueTupleClass<T1, T2, T3, T4>, DNValueTuple<T1, T2, T3, T4>>) end;

  //-------------namespace: System----------------
  DNValueTupleClass<T1, T2, T3, T4, T5> = interface(DNValueTypeClass)
  ['{D96E04FF-C9DB-5FEF-85D7-E24716C1B2B1}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3; item4: T4; item5: T5): DNValueTuple<T1, T2, T3, T4, T5>;

  end;

  [DNTypeName('System.ValueTuple`5')]
  DNValueTuple<T1, T2, T3, T4, T5> = interface(DNValueType)
  ['{051B2E11-92FF-3AEF-9CD3-8C63C06ED3CF}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTuple<T1, T2, T3, T4, T5>): Boolean; overload;
    function CompareTo(other: DNValueTuple<T1, T2, T3, T4, T5>): Int32;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNValueTuple<T1, T2, T3, T4, T5> = class(TDNGenericImport<DNValueTupleClass<T1, T2, T3, T4, T5>, DNValueTuple<T1, T2, T3, T4, T5>>) end;

  //-------------namespace: System----------------
  DNValueTupleClass<T1, T2, T3, T4, T5, T6> = interface(DNValueTypeClass)
  ['{6B202354-F10D-56CE-A57B-5D1AA0016B66}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3; item4: T4; item5: T5; item6: T6): DNValueTuple<T1, T2, T3, T4, T5, T6>;

  end;

  [DNTypeName('System.ValueTuple`6')]
  DNValueTuple<T1, T2, T3, T4, T5, T6> = interface(DNValueType)
  ['{AFCA8EB5-03AC-385D-9B9D-F6C3AF61A5CB}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTuple<T1, T2, T3, T4, T5, T6>): Boolean; overload;
    function CompareTo(other: DNValueTuple<T1, T2, T3, T4, T5, T6>): Int32;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNValueTuple<T1, T2, T3, T4, T5, T6> = class(TDNGenericImport<DNValueTupleClass<T1, T2, T3, T4, T5, T6>, DNValueTuple<T1, T2, T3, T4, T5, T6>>) end;

  //-------------namespace: System----------------
  DNValueTupleClass<T1, T2, T3, T4, T5, T6, T7> = interface(DNValueTypeClass)
  ['{9CA8B44C-06DE-53F7-B4CC-5E2B64335DF7}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3; item4: T4; item5: T5; item6: T6; item7: T7): DNValueTuple<T1, T2, T3, T4, T5, T6, T7>;

  end;

  [DNTypeName('System.ValueTuple`7')]
  DNValueTuple<T1, T2, T3, T4, T5, T6, T7> = interface(DNValueType)
  ['{A34CCD22-2B6A-3022-A63A-A8AAEA56EBAA}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTuple<T1, T2, T3, T4, T5, T6, T7>): Boolean; overload;
    function CompareTo(other: DNValueTuple<T1, T2, T3, T4, T5, T6, T7>): Int32;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNValueTuple<T1, T2, T3, T4, T5, T6, T7> = class(TDNGenericImport<DNValueTupleClass<T1, T2, T3, T4, T5, T6, T7>, DNValueTuple<T1, T2, T3, T4, T5, T6, T7>>) end;

  //-------------namespace: System----------------
  DNValueTupleClass<T1, T2, T3, T4, T5, T6, T7, TRest> = interface(DNValueTypeClass)
  ['{DABC993C-3180-57DD-9838-E013CF46ACD2}']
  { constructors } 

    {class} function init(item1: T1; item2: T2; item3: T3; item4: T4; item5: T5; item6: T6; item7: T7; rest: TRest): DNValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>;

  end;

  [DNTypeName('System.ValueTuple`8')]
  DNValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> = interface(DNValueType)
  ['{B127089B-71A9-3853-B339-85212BA768E8}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>): Boolean; overload;
    function CompareTo(other: DNValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>): Int32;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

// Compiler bug, fixed in XE8.
// Bug description: When unit names and type names are long enough.
{$IF RTLVersion >= 29.0}
  TDNValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> = class(TDNGenericImport<DNValueTupleClass<T1, T2, T3, T4, T5, T6, T7, TRest>, DNValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>>) end;
{$ENDIF}


  //-------------namespace: System----------------
  DNValueTupleClass = interface(DNValueTypeClass)
  ['{5827BFB9-D678-5051-9766-F8AA2BC51A1D}']
  { static methods } 

    {class} function Create: DNValueTuple; overload;

  end;

  [DNTypeName('System.ValueTuple')]
  DNValueTuple = interface(DNValueType)
  ['{72AA778B-55DF-3BF3-8B08-A55AB463B051}']
  { methods } 

    function Equals(obj: DNObject): Boolean; overload;
    function Equals(other: DNValueTuple): Boolean; overload;
    function CompareTo(other: DNValueTuple): Int32;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNValueTuple = class(TDNGenericImport<DNValueTupleClass, DNValueTuple>) end;

  //-------------namespace: System----------------
  DNVoidClass = interface(DNValueTypeClass)
  ['{69519369-4088-5C1E-9905-D6FB7064BE69}']
  end;

  [DNTypeName('System.Void')]
  DNVoid = interface(DNValueType)
  ['{5E4C1311-DEF0-3CD6-9F38-868DA0E811A6}']
  { methods } 

    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DNType;

  end;

  TDNVoid = class(TDNGenericImport<DNVoidClass, DNVoid>) end;

  //-------------namespace: System----------------
  DNVersionClass = interface(DNObjectClass)
  ['{80E42932-98FE-5B45-A21C-0206FAC77595}']
  { constructors } 

    {class} function init(major: Int32; minor: Int32; build: Int32; revision: Int32): DNVersion; overload;
    {class} function init(major: Int32; minor: Int32; build: Int32): DNVersion; overload;
    {class} function init(major: Int32; minor: Int32): DNVersion; overload;
    {class} function init(version: string): DNVersion; overload;
    {class} function init: DNVersion; overload;

  { static methods } 

    {class} function Parse(input: string): DNVersion; overload;
    {class} function Parse(input: DNReadOnlySpan<Char>): DNVersion; overload;
    {class} function TryParse(input: string; out result: DNVersion): Boolean; overload;
    {class} function TryParse(input: DNReadOnlySpan<Char>; out result: DNVersion): Boolean; overload;

  end;

  [DNTypeName('System.Version')]
  DNVersion = interface(DNICloneable)
  ['{9FD1FBB5-C8A0-3AD2-9047-FBFD2221549B}']
  { getters & setters } 

    function get_Major: Int32;
    function get_Minor: Int32;
    function get_Build: Int32;
    function get_Revision: Int32;
    function get_MajorRevision: Int16;
    function get_MinorRevision: Int16;

  { methods } 

    function Clone: DNObject;
    function CompareTo(version: DNObject): Int32; overload;
    function CompareTo(value: DNVersion): Int32; overload;
    function Equals(obj: DNObject): Boolean; overload;
    function Equals(obj: DNVersion): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function ToString(fieldCount: Int32): string; overload;
    function TryFormat(destination: DNSpan<Char>; out charsWritten: Int32): Boolean; overload;
    function TryFormat(destination: DNSpan<Char>; fieldCount: Int32; out charsWritten: Int32): Boolean; overload;
    function GetType: DNType;

  { propertys } 

    property Major: Int32 read get_Major;
    property Minor: Int32 read get_Minor;
    property Build: Int32 read get_Build;
    property Revision: Int32 read get_Revision;
    property MajorRevision: Int16 read get_MajorRevision;
    property MinorRevision: Int16 read get_MinorRevision;
  end;

  TDNVersion = class(TDNGenericImport<DNVersionClass, DNVersion>) end;

  //-------------namespace: System----------------
  DNWeakReferenceClass<T> = interface(DNObjectClass)
  ['{A2279BAE-B7AC-5D0B-ADB6-41ED2441FC78}']
  { constructors } 

    {class} function init(target: T): DNWeakReference<T>; overload;
    {class} function init(target: T; trackResurrection: Boolean): DNWeakReference<T>; overload;

  end;

  [DNTypeName('System.WeakReference`1')]
  DNWeakReference<T> = interface(DNISerializable)
  ['{8CD7824B-3D49-3EBE-BA51-A68CA387BC30}']
  { methods } 

    function TryGetTarget(out target: T): Boolean;
    procedure SetTarget(target: T);
    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  end;

  TDNWeakReference<T> = class(TDNGenericImport<DNWeakReferenceClass<T>, DNWeakReference<T>>) end;

  //-------------namespace: System----------------
  DNWeakReferenceClass = interface(DNObjectClass)
  ['{F997A02F-FED2-5B37-A024-F023FCA22D06}']
  { constructors } 

    {class} function init(target: DNObject): DNWeakReference; overload;
    {class} function init(target: DNObject; trackResurrection: Boolean): DNWeakReference; overload;

  end;

  [DNTypeName('System.WeakReference')]
  DNWeakReference = interface(DNISerializable)
  ['{700B33AC-6ACD-3CB3-AC7A-2BAE4FE14DEE}']
  { getters & setters } 

    function get_IsAlive: Boolean;
    function get_TrackResurrection: Boolean;
    function get_Target: DNObject;
    procedure set_Target(value: DNObject);

  { methods } 

    procedure GetObjectData(info: DNSerializationInfo; context: DNStreamingContext);
    function ToString: string;
    function Equals(obj: DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DNType;

  { propertys } 

    property IsAlive: Boolean read get_IsAlive;
    property TrackResurrection: Boolean read get_TrackResurrection;
    property Target: DNObject read get_Target write set_Target;
  end;

  TDNWeakReference = class(TDNGenericImport<DNWeakReferenceClass, DNWeakReference>) end;


implementation

{ TDNGenericImport<C, T> }

class function TDNGenericImport<C, T>.GetTypeId: DNType;
var LObj: DNNObject;
begin
  Result := nil;
  LObj := GetClsID;
  if LObj <> nil then
     Result := TDNType.Wrap(LObj);
end;

end.
