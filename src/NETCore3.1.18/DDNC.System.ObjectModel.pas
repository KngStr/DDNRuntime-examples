//----------------------------------------------------------------------------
//  System.ObjectModel.dll: System.ObjectModel, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 3.1.18
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.ObjectModel
//  Author: ying32
//----------------------------------------------------------------------------

unit DDNC.System.ObjectModel;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.System.Private.CoreLib;

type

{ enums }

  //-------------namespace: System.Collections.Specialized----------------
  [DNTypeName('System.Collections.Specialized.NotifyCollectionChangedAction')]
  DNNotifyCollectionChangedAction = type Integer;
  DNNotifyCollectionChangedActionHelper = record helper for DNNotifyCollectionChangedAction
  public const
    Add = 0;
    Remove = 1;
    Replace = 2;
    Move = 3;
    Reset = 4;
  end;




type


{ declares }

  DNINotifyCollectionChanged = interface; // type: System.Collections.Specialized.INotifyCollectionChanged, namespace: System.Collections.Specialized
  DNINotifyDataErrorInfo = interface; // type: System.ComponentModel.INotifyDataErrorInfo, namespace: System.ComponentModel
  DNINotifyPropertyChanged = interface; // type: System.ComponentModel.INotifyPropertyChanged, namespace: System.ComponentModel
  DNINotifyPropertyChanging = interface; // type: System.ComponentModel.INotifyPropertyChanging, namespace: System.ComponentModel
  DNICustomTypeProvider = interface; // type: System.Reflection.ICustomTypeProvider, namespace: System.Reflection
  DNICommand = interface; // type: System.Windows.Input.ICommand, namespace: System.Windows.Input
  DNTypeConverterAttribute = interface; // type: System.ComponentModel.TypeConverterAttribute, namespace: System.ComponentModel
  DNTypeDescriptionProviderAttribute = interface; // type: System.ComponentModel.TypeDescriptionProviderAttribute, namespace: System.ComponentModel
  DNValueSerializerAttribute = interface; // type: System.Windows.Markup.ValueSerializerAttribute, namespace: System.Windows.Markup
  DNKeyedCollection<TKey, TItem> = interface; // type: System.Collections.ObjectModel.KeyedCollection`2, namespace: System.Collections.ObjectModel
  DNObservableCollection<T> = interface; // type: System.Collections.ObjectModel.ObservableCollection`1, namespace: System.Collections.ObjectModel
  DNReadOnlyObservableCollection<T> = interface; // type: System.Collections.ObjectModel.ReadOnlyObservableCollection`1, namespace: System.Collections.ObjectModel
  DNReadOnlyDictionary<TKey, TValue> = interface; // type: System.Collections.ObjectModel.ReadOnlyDictionary`2, namespace: System.Collections.ObjectModel
  DNReadOnlyDictionary_KeyCollection<TKey, TValue> = interface; // type: System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection, namespace: System.Collections.ObjectModel
  DNReadOnlyDictionary_ValueCollection<TKey, TValue> = interface; // type: System.Collections.ObjectModel.ReadOnlyDictionary`2+ValueCollection, namespace: System.Collections.ObjectModel
  DNNotifyCollectionChangedEventArgs = interface; // type: System.Collections.Specialized.NotifyCollectionChangedEventArgs, namespace: System.Collections.Specialized
  DNDataErrorsChangedEventArgs = interface; // type: System.ComponentModel.DataErrorsChangedEventArgs, namespace: System.ComponentModel
  DNPropertyChangedEventArgs = interface; // type: System.ComponentModel.PropertyChangedEventArgs, namespace: System.ComponentModel
  DNPropertyChangingEventArgs = interface; // type: System.ComponentModel.PropertyChangingEventArgs, namespace: System.ComponentModel

{ delegates }

  [DNTypeName('System.Collections.Specialized.NotifyCollectionChangedEventHandler')]
  DNNotifyCollectionChangedEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNNotifyCollectionChangedEventArgs) of object;

  [DNTypeName('System.ComponentModel.PropertyChangedEventHandler')]
  DNPropertyChangedEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNPropertyChangedEventArgs) of object;

  [DNTypeName('System.ComponentModel.PropertyChangingEventHandler')]
  DNPropertyChangingEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNPropertyChangingEventArgs) of object;




{ objects }

  //-------------namespace: System.Collections.Specialized----------------
  [DNTypeName('System.Collections.Specialized.INotifyCollectionChanged')]
  DNINotifyCollectionChanged = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{150173C6-D488-3654-807A-7FE534EB309C}']
  { events } 

    procedure add_CollectionChanged(value: DNNotifyCollectionChangedEventHandler);
    procedure remove_CollectionChanged(value: DNNotifyCollectionChangedEventHandler);

  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.INotifyDataErrorInfo')]
  DNINotifyDataErrorInfo = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{93FD8F7C-CC87-33E4-9C0D-6802CEA49FA1}']
  { getters & setters } 

    function get_HasErrors: Boolean;

  { events } 

    procedure add_ErrorsChanged(value: DDNC.System.Private.CoreLib.DNEventHandler<DNDataErrorsChangedEventArgs>);
    procedure remove_ErrorsChanged(value: DDNC.System.Private.CoreLib.DNEventHandler<DNDataErrorsChangedEventArgs>);

  { methods } 

    function GetErrors(propertyName: string): DDNC.System.Private.CoreLib.DNIEnumerable;

  { propertys } 

    property HasErrors: Boolean read get_HasErrors;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.INotifyPropertyChanged')]
  DNINotifyPropertyChanged = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{C1E4E159-8825-3659-BAB8-17F67BE9E7EE}']
  { events } 

    procedure add_PropertyChanged(value: DNPropertyChangedEventHandler);
    procedure remove_PropertyChanged(value: DNPropertyChangedEventHandler);

  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.INotifyPropertyChanging')]
  DNINotifyPropertyChanging = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{A5A88A27-3028-3A2A-B8FB-F5E0900FDB20}']
  { events } 

    procedure add_PropertyChanging(value: DNPropertyChangingEventHandler);
    procedure remove_PropertyChanging(value: DNPropertyChangingEventHandler);

  end;

  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.ICustomTypeProvider')]
  DNICustomTypeProvider = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{DD5FF3DC-D82F-3CD4-A9D3-C08E43FE34DC}']
  { methods } 

    function GetCustomType: DDNC.System.Private.CoreLib.DNType;

  end;

  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.ICommand')]
  DNICommand = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{87196B24-1A72-31F7-8F0B-0E068BC21B4C}']
  { events } 

    procedure add_CanExecuteChanged(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_CanExecuteChanged(value: DDNC.System.Private.CoreLib.DNEventHandler);

  { methods } 

    function CanExecute(parameter: DDNC.System.Private.CoreLib.DNObject): Boolean;
    procedure Execute(parameter: DDNC.System.Private.CoreLib.DNObject);

  end;

  //-------------namespace: System.ComponentModel----------------
  DNTypeConverterAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{7218EF63-1086-54BC-8924-512CEEA20D2C}']
  { constructors } 

    {class} function init: DNTypeConverterAttribute; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType): DNTypeConverterAttribute; overload;
    {class} function init(typeName: string): DNTypeConverterAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNTypeConverterAttribute;

  { static fields } 

    {class} property &Default: DNTypeConverterAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.TypeConverterAttribute')]
  DNTypeConverterAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{A7F04B5E-6DBA-34D9-922B-18A70594E8F4}']
  { getters & setters } 

    function get_ConverterTypeName: string;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property ConverterTypeName: string read get_ConverterTypeName;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNTypeConverterAttribute = class(TDNGenericImport<DNTypeConverterAttributeClass, DNTypeConverterAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNTypeDescriptionProviderAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{AE3298F6-9BD5-5BE1-A90C-65D35D902C5C}']
  { constructors } 

    {class} function init(typeName: string): DNTypeDescriptionProviderAttribute; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType): DNTypeDescriptionProviderAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.TypeDescriptionProviderAttribute')]
  DNTypeDescriptionProviderAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{9FBDCF75-2335-351A-B1F7-A70DF34E8594}']
  { getters & setters } 

    function get_TypeName: string;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property TypeName: string read get_TypeName;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNTypeDescriptionProviderAttribute = class(TDNGenericImport<DNTypeDescriptionProviderAttributeClass, DNTypeDescriptionProviderAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNValueSerializerAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{EE17FE77-0EDB-5816-A021-1C46BE0A7F7B}']
  { constructors } 

    {class} function init(valueSerializerType: DDNC.System.Private.CoreLib.DNType): DNValueSerializerAttribute; overload;
    {class} function init(valueSerializerTypeName: string): DNValueSerializerAttribute; overload;

  end;

  [DNTypeName('System.Windows.Markup.ValueSerializerAttribute')]
  DNValueSerializerAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{A401E2C6-9C53-3092-82DA-5CA9F4081BC5}']
  { getters & setters } 

    function get_ValueSerializerType: DDNC.System.Private.CoreLib.DNType;
    function get_ValueSerializerTypeName: string;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property ValueSerializerType: DDNC.System.Private.CoreLib.DNType read get_ValueSerializerType;
    property ValueSerializerTypeName: string read get_ValueSerializerTypeName;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNValueSerializerAttribute = class(TDNGenericImport<DNValueSerializerAttributeClass, DNValueSerializerAttribute>) end;

  //-------------namespace: System.Collections.ObjectModel----------------
  DNKeyedCollectionClass<TKey, TItem> = interface(DDNC.System.Private.CoreLib.DNCollectionClass<TItem>)
  ['{3843DFE9-463B-544B-A548-21A24638576F}']
  end;

  [DNTypeName('System.Collections.ObjectModel.KeyedCollection`2')]
  DNKeyedCollection<TKey, TItem> = interface(DDNC.System.Private.CoreLib.DNCollection<TItem>)
  ['{C7188985-0A37-322E-A7B7-3AD2358A6D56}']
  { getters & setters } 

    function get_Comparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TKey>;
    function get_Item(key: TKey): TItem;
    function get_Count: Int32;

  { methods } 

    function &Contains(key: TKey): Boolean; overload;
    function TryGetValue(key: TKey; out item: TItem): Boolean;
    function Remove(key: TKey): Boolean;
    procedure CopyTo(&array: TArray<TItem>; index: Int32);
    function &Contains(item: TItem): Boolean; overload;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<TItem>;
    function IndexOf(item: TItem): Int32;
    procedure Insert(index: Int32; item: TItem);
    procedure RemoveAt(index: Int32);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Comparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TKey> read get_Comparer;
    property Item[key: TKey]: TItem read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNKeyedCollection<TKey, TItem> = class(TDNGenericImport<DNKeyedCollectionClass<TKey, TItem>, DNKeyedCollection<TKey, TItem>>) end;

  //-------------namespace: System.Collections.ObjectModel----------------
  DNObservableCollectionClass<T> = interface(DDNC.System.Private.CoreLib.DNCollectionClass<T>)
  ['{1318C521-877E-522E-B098-5596052A5077}']
  { constructors } 

    {class} function init: DNObservableCollection<T>; overload;
    {class} function init(collection: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNObservableCollection<T>; overload;
    {class} function init(list: DDNC.System.Private.CoreLib.DNList<T>): DNObservableCollection<T>; overload;

  end;

  [DNTypeName('System.Collections.ObjectModel.ObservableCollection`1')]
  DNObservableCollection<T> = interface(DDNC.System.Private.CoreLib.DNCollection<T>)
  ['{38F37D1E-67A7-331D-B9A9-5812911B14A9}']
  { getters & setters } 

    function get_Count: Int32;

  { events } 

    procedure add_CollectionChanged(value: DNNotifyCollectionChangedEventHandler);
    procedure remove_CollectionChanged(value: DNNotifyCollectionChangedEventHandler);

  { methods } 

    procedure Move(oldIndex: Int32; newIndex: Int32);
    procedure CopyTo(&array: TArray<T>; index: Int32);
    function &Contains(item: T): Boolean;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<T>;
    function IndexOf(item: T): Int32;
    procedure Insert(index: Int32; item: T);
    procedure RemoveAt(index: Int32);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNObservableCollection<T> = class(TDNGenericImport<DNObservableCollectionClass<T>, DNObservableCollection<T>>) end;

  //-------------namespace: System.Collections.ObjectModel----------------
  DNReadOnlyObservableCollectionClass<T> = interface(DDNC.System.Private.CoreLib.DNReadOnlyCollectionClass<T>)
  ['{ABC3D18A-C735-5EDC-84D4-7AACAECBD4AF}']
  { constructors } 

    {class} function init(list: DNObservableCollection<T>): DNReadOnlyObservableCollection<T>;

  end;

  [DNTypeName('System.Collections.ObjectModel.ReadOnlyObservableCollection`1')]
  DNReadOnlyObservableCollection<T> = interface(DDNC.System.Private.CoreLib.DNReadOnlyCollection<T>)
  ['{ADFF6628-FBF8-3BC9-A698-23BE0459A53D}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function &Contains(value: T): Boolean;
    procedure CopyTo(&array: TArray<T>; index: Int32);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<T>;
    function IndexOf(value: T): Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNReadOnlyObservableCollection<T> = class(TDNGenericImport<DNReadOnlyObservableCollectionClass<T>, DNReadOnlyObservableCollection<T>>) end;

  //-------------namespace: System.Collections.ObjectModel----------------
  DNReadOnlyDictionaryClass<TKey, TValue> = interface(DNObjectClass)
  ['{3ED59000-FAD1-5838-A9D4-84F437A88494}']
  { constructors } 

    {class} function init(dictionary: DDNC.System.Private.CoreLib.DNIDictionary<TKey, TValue>): DNReadOnlyDictionary<TKey, TValue>;

  end;

  [DNTypeName('System.Collections.ObjectModel.ReadOnlyDictionary`2')]
  DNReadOnlyDictionary<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNIDictionary<TKey, TValue>)
  ['{62567A61-4F16-3B13-A4CC-989332A46142}']
  { getters & setters } 

    function get_Keys: DNReadOnlyDictionary_KeyCollection<TKey, TValue>;
    function get_Values: DNReadOnlyDictionary_ValueCollection<TKey, TValue>;
    function get_Count: Int32;

  { methods } 

    function ContainsKey(key: TKey): Boolean;
    function TryGetValue(key: TKey; out value: TValue): Boolean;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Keys: DNReadOnlyDictionary_KeyCollection<TKey, TValue> read get_Keys;
    property Values: DNReadOnlyDictionary_ValueCollection<TKey, TValue> read get_Values;
    property Count: Int32 read get_Count;
  end;

  TDNReadOnlyDictionary<TKey, TValue> = class(TDNGenericImport<DNReadOnlyDictionaryClass<TKey, TValue>, DNReadOnlyDictionary<TKey, TValue>>) end;

  //-------------namespace: System.Collections.ObjectModel----------------
  DNReadOnlyDictionary_KeyCollectionClass<TKey, TValue> = interface(DNObjectClass)
  ['{55B048CF-E29C-50A5-8835-737DF40049A4}']
  end;

  [DNTypeName('System.Collections.ObjectModel.ReadOnlyDictionary`2+KeyCollection')]
  DNReadOnlyDictionary_KeyCollection<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNICollection<TKey>)
  ['{6E720ED8-E8F5-346A-B6C3-F2D3C1B07C99}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure CopyTo(&array: TArray<TKey>; arrayIndex: Int32);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<TKey>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNReadOnlyDictionary_KeyCollection<TKey, TValue> = class(TDNGenericImport<DNReadOnlyDictionary_KeyCollectionClass<TKey, TValue>, DNReadOnlyDictionary_KeyCollection<TKey, TValue>>) end;

  //-------------namespace: System.Collections.ObjectModel----------------
  DNReadOnlyDictionary_ValueCollectionClass<TKey, TValue> = interface(DNObjectClass)
  ['{D533FE8D-2EB5-5CAC-B404-8E31C5D9EA29}']
  end;

  [DNTypeName('System.Collections.ObjectModel.ReadOnlyDictionary`2+ValueCollection')]
  DNReadOnlyDictionary_ValueCollection<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNICollection<TValue>)
  ['{98117E96-083D-3F81-AE75-520168429C73}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure CopyTo(&array: TArray<TValue>; arrayIndex: Int32);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<TValue>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNReadOnlyDictionary_ValueCollection<TKey, TValue> = class(TDNGenericImport<DNReadOnlyDictionary_ValueCollectionClass<TKey, TValue>, DNReadOnlyDictionary_ValueCollection<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Specialized----------------
  DNNotifyCollectionChangedEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{473CC87B-166B-5F86-B63E-F92A44A82971}']
  { constructors } 

    {class} function init(action: DNNotifyCollectionChangedAction): DNNotifyCollectionChangedEventArgs; overload;
    {class} function init(action: DNNotifyCollectionChangedAction; changedItem: DDNC.System.Private.CoreLib.DNObject): DNNotifyCollectionChangedEventArgs; overload;
    {class} function init(action: DNNotifyCollectionChangedAction; changedItem: DDNC.System.Private.CoreLib.DNObject; index: Int32): DNNotifyCollectionChangedEventArgs; overload;
    {class} function init(action: DNNotifyCollectionChangedAction; changedItems: DDNC.System.Private.CoreLib.DNIList): DNNotifyCollectionChangedEventArgs; overload;
    {class} function init(action: DNNotifyCollectionChangedAction; changedItems: DDNC.System.Private.CoreLib.DNIList; startingIndex: Int32): DNNotifyCollectionChangedEventArgs; overload;
    {class} function init(action: DNNotifyCollectionChangedAction; newItem: DDNC.System.Private.CoreLib.DNObject; oldItem: DDNC.System.Private.CoreLib.DNObject): DNNotifyCollectionChangedEventArgs; overload;
    {class} function init(action: DNNotifyCollectionChangedAction; newItem: DDNC.System.Private.CoreLib.DNObject; oldItem: DDNC.System.Private.CoreLib.DNObject; index: Int32): DNNotifyCollectionChangedEventArgs; overload;
    {class} function init(action: DNNotifyCollectionChangedAction; newItems: DDNC.System.Private.CoreLib.DNIList; oldItems: DDNC.System.Private.CoreLib.DNIList): DNNotifyCollectionChangedEventArgs; overload;
    {class} function init(action: DNNotifyCollectionChangedAction; newItems: DDNC.System.Private.CoreLib.DNIList; oldItems: DDNC.System.Private.CoreLib.DNIList; startingIndex: Int32): DNNotifyCollectionChangedEventArgs; overload;
    {class} function init(action: DNNotifyCollectionChangedAction; changedItem: DDNC.System.Private.CoreLib.DNObject; index: Int32; oldIndex: Int32): DNNotifyCollectionChangedEventArgs; overload;
    {class} function init(action: DNNotifyCollectionChangedAction; changedItems: DDNC.System.Private.CoreLib.DNIList; index: Int32; oldIndex: Int32): DNNotifyCollectionChangedEventArgs; overload;

  end;

  [DNTypeName('System.Collections.Specialized.NotifyCollectionChangedEventArgs')]
  DNNotifyCollectionChangedEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{B9A69584-1CBD-398C-B1DB-478B74C9A3EF}']
  { getters & setters } 

    function get_Action: DNNotifyCollectionChangedAction;
    function get_NewItems: DDNC.System.Private.CoreLib.DNIList;
    function get_OldItems: DDNC.System.Private.CoreLib.DNIList;
    function get_NewStartingIndex: Int32;
    function get_OldStartingIndex: Int32;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Action: DNNotifyCollectionChangedAction read get_Action;
    property NewItems: DDNC.System.Private.CoreLib.DNIList read get_NewItems;
    property OldItems: DDNC.System.Private.CoreLib.DNIList read get_OldItems;
    property NewStartingIndex: Int32 read get_NewStartingIndex;
    property OldStartingIndex: Int32 read get_OldStartingIndex;
  end;

  TDNNotifyCollectionChangedEventArgs = class(TDNGenericImport<DNNotifyCollectionChangedEventArgsClass, DNNotifyCollectionChangedEventArgs>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDataErrorsChangedEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{C514E3FA-49B3-5F00-AB45-A1C8F1F9DA45}']
  { constructors } 

    {class} function init(propertyName: string): DNDataErrorsChangedEventArgs;

  end;

  [DNTypeName('System.ComponentModel.DataErrorsChangedEventArgs')]
  DNDataErrorsChangedEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{1790DC84-7441-3012-BFB5-463E2E4EAE2D}']
  { getters & setters } 

    function get_PropertyName: string;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property PropertyName: string read get_PropertyName;
  end;

  TDNDataErrorsChangedEventArgs = class(TDNGenericImport<DNDataErrorsChangedEventArgsClass, DNDataErrorsChangedEventArgs>) end;

  //-------------namespace: System.ComponentModel----------------
  DNPropertyChangedEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{8106AC53-7F38-5E3E-A2B2-8161B8D9ACF6}']
  { constructors } 

    {class} function init(propertyName: string): DNPropertyChangedEventArgs;

  end;

  [DNTypeName('System.ComponentModel.PropertyChangedEventArgs')]
  DNPropertyChangedEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{23F0B714-AA63-394E-826C-5DD85E49802A}']
  { getters & setters } 

    function get_PropertyName: string;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property PropertyName: string read get_PropertyName;
  end;

  TDNPropertyChangedEventArgs = class(TDNGenericImport<DNPropertyChangedEventArgsClass, DNPropertyChangedEventArgs>) end;

  //-------------namespace: System.ComponentModel----------------
  DNPropertyChangingEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{0EF93839-561F-5011-B227-C04EE5EA9236}']
  { constructors } 

    {class} function init(propertyName: string): DNPropertyChangingEventArgs;

  end;

  [DNTypeName('System.ComponentModel.PropertyChangingEventArgs')]
  DNPropertyChangingEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{2BE21650-1409-3D66-84AF-E4503FE73059}']
  { getters & setters } 

    function get_PropertyName: string;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property PropertyName: string read get_PropertyName;
  end;

  TDNPropertyChangingEventArgs = class(TDNGenericImport<DNPropertyChangingEventArgsClass, DNPropertyChangingEventArgs>) end;


implementation


initialization
  InternalTryLoadAssemblyModule('System.ObjectModel, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a');

finalization

end.
