//----------------------------------------------------------------------------
//  System.Core.dll: System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.Core
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.Core;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System;

type

{ enums }

  //-------------namespace: System.Diagnostics.Eventing----------------
  [DNTypeName('System.Diagnostics.Eventing.EventProvider+WriteEventErrorCode')]
  DNEventProvider_WriteEventErrorCode = type Integer;
  DNEventProvider_WriteEventErrorCodeHelper = record helper for DNEventProvider_WriteEventErrorCode
  public const
    NoError = 0;
    NoFreeBuffers = 1;
    EventTooBig = 2;
  end;


  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogIsolation')]
  DNEventLogIsolation = type Integer;
  DNEventLogIsolationHelper = record helper for DNEventLogIsolation
  public const
    Application = 0;
    System = 1;
    Custom = 2;
  end;


  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogMode')]
  DNEventLogMode = type Integer;
  DNEventLogModeHelper = record helper for DNEventLogMode
  public const
    Circular = 0;
    AutoBackup = 1;
    Retain = 2;
  end;


  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogType')]
  DNEventLogType = type Integer;
  DNEventLogTypeHelper = record helper for DNEventLogType
  public const
    Administrative = 0;
    Operational = 1;
    Analytical = 2;
    Debug = 3;
  end;


  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  [DNTypeName('System.Diagnostics.Eventing.Reader.PathType')]
  DNPathType = type Integer;
  DNPathTypeHelper = record helper for DNPathType
  public const
    LogName = 1;
    FilePath = 2;
  end;


  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  [DNTypeName('System.Diagnostics.Eventing.Reader.SessionAuthentication')]
  DNSessionAuthentication = type Integer;
  DNSessionAuthenticationHelper = record helper for DNSessionAuthentication
  public const
    Default_ = 0;
    Negotiate = 1;
    Kerberos = 2;
    Ntlm = 3;
  end;


  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  [DNTypeName('System.Diagnostics.Eventing.Reader.StandardEventKeywords')]
  DNStandardEventKeywords = type Integer;
  DNStandardEventKeywordsHelper = record helper for DNStandardEventKeywords
  public const
    None = 0;
    ResponseTime = 281474976710656;
    WdiContext = 562949953421312;
    WdiDiagnostic = 1125899906842624;
    Sqm = 2251799813685248;
    CorrelationHint = 4503599627370496;
    AuditFailure = 4503599627370496;
    AuditSuccess = 9007199254740992;
    CorrelationHint2 = 18014398509481984;
    EventLogClassic = 36028797018963968;
  end;


  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  [DNTypeName('System.Diagnostics.Eventing.Reader.StandardEventLevel')]
  DNStandardEventLevel = type Integer;
  DNStandardEventLevelHelper = record helper for DNStandardEventLevel
  public const
    LogAlways = 0;
    Critical = 1;
    Error = 2;
    Warning = 3;
    Informational = 4;
    Verbose = 5;
  end;


  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  [DNTypeName('System.Diagnostics.Eventing.Reader.StandardEventOpcode')]
  DNStandardEventOpcode = type Integer;
  DNStandardEventOpcodeHelper = record helper for DNStandardEventOpcode
  public const
    Info = 0;
    Start = 1;
    Stop = 2;
    DataCollectionStart = 3;
    DataCollectionStop = 4;
    Extension = 5;
    Reply = 6;
    Resume = 7;
    Suspend = 8;
    Send = 9;
    Receive = 240;
  end;


  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  [DNTypeName('System.Diagnostics.Eventing.Reader.StandardEventTask')]
  DNStandardEventTask = type Integer;
  DNStandardEventTaskHelper = record helper for DNStandardEventTask
  public const
    None = 0;
  end;


  //-------------namespace: System.Diagnostics.PerformanceData----------------
  [DNTypeName('System.Diagnostics.PerformanceData.CounterSetInstanceType')]
  DNCounterSetInstanceType = type Integer;
  DNCounterSetInstanceTypeHelper = record helper for DNCounterSetInstanceType
  public const
    Single = 0;
    Multiple = 2;
    GlobalAggregate = 4;
    MultipleAggregate = 6;
    GlobalAggregateWithHistory = 11;
    InstanceAggregate = 22;
  end;


  //-------------namespace: System.Diagnostics.PerformanceData----------------
  [DNTypeName('System.Diagnostics.PerformanceData.CounterType')]
  DNCounterType = type Integer;
  DNCounterTypeHelper = record helper for DNCounterType
  public const
    RawDataHex32 = 0;
    RawDataHex64 = 256;
    RawData32 = 65536;
    RawData64 = 65792;
    Delta32 = 4195328;
    Delta64 = 4195584;
    SampleCounter = 4260864;
    QueueLength = 4523008;
    LargeQueueLength = 4523264;
    QueueLength100Ns = 5571840;
    QueueLengthObjectTime = 6620416;
    RateOfCountPerSecond32 = 272696320;
    RateOfCountPerSecond64 = 272696576;
    RawFraction32 = 537003008;
    RawFraction64 = 537003264;
    PercentageActive = 541132032;
    PrecisionSystemTimer = 541525248;
    PercentageActive100Ns = 542180608;
    PrecisionTimer100Ns = 542573824;
    ObjectSpecificTimer = 543229184;
    PrecisionObjectSpecificTimer = 543622400;
    SampleFraction = 549585920;
    PercentageNotActive = 557909248;
    PercentageNotActive100Ns = 558957824;
    MultiTimerPercentageActive = 574686464;
    MultiTimerPercentageActive100Ns = 575735040;
    MultiTimerPercentageNotActive = 591463680;
    MultiTimerPercentageNotActive100Ns = 592512256;
    AverageTimer32 = 805438464;
    ElapsedTime = 807666944;
    AverageCount64 = 1073874176;
    SampleBase = 1073939457;
    AverageBase = 1073939458;
    RawBase32 = 1073939459;
    RawBase64 = 1073939712;
    MultiTimerBase = 1107494144;
  end;


  //-------------namespace: System.Diagnostics----------------
  [DNTypeName('System.Diagnostics.TraceLogRetentionOption')]
  DNTraceLogRetentionOption = type Integer;
  DNTraceLogRetentionOptionHelper = record helper for DNTraceLogRetentionOption
  public const
    UnlimitedSequentialFiles = 0;
    LimitedCircularFiles = 1;
    SingleFileUnboundedSize = 2;
    LimitedSequentialFiles = 3;
    SingleFileBoundedSize = 4;
  end;


  //-------------namespace: System.IO----------------
  [DNTypeName('System.IO.HandleInheritability')]
  DNHandleInheritability = type Integer;
  DNHandleInheritabilityHelper = record helper for DNHandleInheritability
  public const
    None = 0;
    Inheritable = 1;
  end;


  //-------------namespace: System.IO.MemoryMappedFiles----------------
  [DNTypeName('System.IO.MemoryMappedFiles.MemoryMappedFileAccess')]
  DNMemoryMappedFileAccess = type Integer;
  DNMemoryMappedFileAccessHelper = record helper for DNMemoryMappedFileAccess
  public const
    ReadWrite = 0;
    Read = 1;
    Write = 2;
    CopyOnWrite = 3;
    ReadExecute = 4;
    ReadWriteExecute = 5;
  end;


  //-------------namespace: System.IO.MemoryMappedFiles----------------
  [DNTypeName('System.IO.MemoryMappedFiles.MemoryMappedFileOptions')]
  DNMemoryMappedFileOptions = type Integer;
  DNMemoryMappedFileOptionsHelper = record helper for DNMemoryMappedFileOptions
  public const
    None = 0;
    DelayAllocatePages = 67108864;
  end;


  //-------------namespace: System.IO.MemoryMappedFiles----------------
  [DNTypeName('System.IO.MemoryMappedFiles.MemoryMappedFileRights')]
  DNMemoryMappedFileRights = type Integer;
  DNMemoryMappedFileRightsHelper = record helper for DNMemoryMappedFileRights
  public const
    CopyOnWrite = 1;
    Write = 2;
    Read = 4;
    ReadWrite = 6;
    Execute = 8;
    ReadExecute = 12;
    ReadWriteExecute = 14;
    Delete = 65536;
    ReadPermissions = 131072;
    ChangePermissions = 262144;
    TakeOwnership = 524288;
    FullControl = 983055;
    AccessSystemSecurity = 16777216;
  end;


  //-------------namespace: System.IO.Pipes----------------
  [DNTypeName('System.IO.Pipes.PipeAccessRights')]
  DNPipeAccessRights = type Integer;
  DNPipeAccessRightsHelper = record helper for DNPipeAccessRights
  public const
    ReadData = 1;
    WriteData = 2;
    CreateNewInstance = 4;
    ReadExtendedAttributes = 8;
    WriteExtendedAttributes = 16;
    ReadAttributes = 128;
    WriteAttributes = 256;
    Write = 274;
    Delete = 65536;
    ReadPermissions = 131072;
    Read = 131209;
    ReadWrite = 131483;
    ChangePermissions = 262144;
    TakeOwnership = 524288;
    Synchronize = 1048576;
    FullControl = 2032031;
    AccessSystemSecurity = 16777216;
  end;


  //-------------namespace: System.IO.Pipes----------------
  [DNTypeName('System.IO.Pipes.PipeDirection')]
  DNPipeDirection = type Integer;
  DNPipeDirectionHelper = record helper for DNPipeDirection
  public const
    In_ = 1;
    Out_ = 2;
    InOut = 3;
  end;


  //-------------namespace: System.IO.Pipes----------------
  [DNTypeName('System.IO.Pipes.PipeOptions')]
  DNPipeOptions = type Integer;
  DNPipeOptionsHelper = record helper for DNPipeOptions
  public const
    None = 0;
    Asynchronous = 1073741824;
    WriteThrough = -2147483648;
  end;


  //-------------namespace: System.IO.Pipes----------------
  [DNTypeName('System.IO.Pipes.PipeTransmissionMode')]
  DNPipeTransmissionMode = type Integer;
  DNPipeTransmissionModeHelper = record helper for DNPipeTransmissionMode
  public const
    Byte = 0;
    Message = 1;
  end;


  //-------------namespace: System.Linq.Expressions----------------
  [DNTypeName('System.Linq.Expressions.ExpressionType')]
  DNExpressionType = type Integer;
  DNExpressionTypeHelper = record helper for DNExpressionType
  public const
    Add = 0;
    AddChecked = 1;
    And_ = 2;
    AndAlso = 3;
    ArrayLength = 4;
    ArrayIndex = 5;
    Call = 6;
    Coalesce = 7;
    Conditional = 8;
    Constant = 9;
    Convert = 10;
    ConvertChecked = 11;
    Divide = 12;
    Equal = 13;
    ExclusiveOr = 14;
    GreaterThan = 15;
    GreaterThanOrEqual = 16;
    Invoke = 17;
    Lambda = 18;
    LeftShift = 19;
    LessThan = 20;
    LessThanOrEqual = 21;
    ListInit = 22;
    MemberAccess = 23;
    MemberInit = 24;
    Modulo = 25;
    Multiply = 26;
    MultiplyChecked = 27;
    Negate = 28;
    UnaryPlus = 29;
    NegateChecked = 30;
    New = 31;
    NewArrayInit = 32;
    NewArrayBounds = 33;
    Not_ = 34;
    NotEqual = 35;
    Or_ = 36;
    OrElse = 37;
    Parameter = 38;
    Power = 39;
    Quote = 40;
    RightShift = 41;
    Subtract = 42;
    SubtractChecked = 43;
    TypeAs = 44;
    TypeIs = 45;
    Assign = 46;
    Block = 47;
    DebugInfo = 48;
    Decrement = 49;
    Dynamic_ = 50;
    Default_ = 51;
    Extension = 52;
    Goto_ = 53;
    Increment = 54;
    Index = 55;
    Label_ = 56;
    RuntimeVariables = 57;
    Loop = 58;
    Switch = 59;
    Throw = 60;
    Try_ = 61;
    Unbox = 62;
    AddAssign = 63;
    AndAssign = 64;
    DivideAssign = 65;
    ExclusiveOrAssign = 66;
    LeftShiftAssign = 67;
    ModuloAssign = 68;
    MultiplyAssign = 69;
    OrAssign = 70;
    PowerAssign = 71;
    RightShiftAssign = 72;
    SubtractAssign = 73;
    AddAssignChecked = 74;
    MultiplyAssignChecked = 75;
    SubtractAssignChecked = 76;
    PreIncrementAssign = 77;
    PreDecrementAssign = 78;
    PostIncrementAssign = 79;
    PostDecrementAssign = 80;
    TypeEqual = 81;
    OnesComplement = 82;
    IsTrue = 83;
    IsFalse = 84;
  end;


  //-------------namespace: System.Linq.Expressions----------------
  [DNTypeName('System.Linq.Expressions.GotoExpressionKind')]
  DNGotoExpressionKind = type Integer;
  DNGotoExpressionKindHelper = record helper for DNGotoExpressionKind
  public const
    Goto_ = 0;
    Return = 1;
    Break = 2;
    Continue_ = 3;
  end;


  //-------------namespace: System.Linq.Expressions----------------
  [DNTypeName('System.Linq.Expressions.MemberBindingType')]
  DNMemberBindingType = type Integer;
  DNMemberBindingTypeHelper = record helper for DNMemberBindingType
  public const
    Assignment = 0;
    MemberBinding = 1;
    ListBinding = 2;
  end;


  //-------------namespace: System.Linq----------------
  [DNTypeName('System.Linq.ParallelExecutionMode')]
  DNParallelExecutionMode = type Integer;
  DNParallelExecutionModeHelper = record helper for DNParallelExecutionMode
  public const
    Default_ = 0;
    ForceParallelism = 1;
  end;


  //-------------namespace: System.Linq----------------
  [DNTypeName('System.Linq.ParallelMergeOptions')]
  DNParallelMergeOptions = type Integer;
  DNParallelMergeOptionsHelper = record helper for DNParallelMergeOptions
  public const
    Default_ = 0;
    NotBuffered = 1;
    AutoBuffered = 2;
    FullyBuffered = 3;
  end;


  //-------------namespace: System.Management.Instrumentation----------------
  [DNTypeName('System.Management.Instrumentation.ManagementConfigurationType')]
  DNManagementConfigurationType = type Integer;
  DNManagementConfigurationTypeHelper = record helper for DNManagementConfigurationType
  public const
    Apply = 0;
    OnCommit = 1;
  end;


  //-------------namespace: System.Management.Instrumentation----------------
  [DNTypeName('System.Management.Instrumentation.ManagementHostingModel')]
  DNManagementHostingModel = type Integer;
  DNManagementHostingModelHelper = record helper for DNManagementHostingModel
  public const
    Decoupled = 0;
    NetworkService = 1;
    LocalService = 2;
    LocalSystem = 3;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  [DNTypeName('System.Security.Cryptography.CngExportPolicies')]
  DNCngExportPolicies = type Integer;
  DNCngExportPoliciesHelper = record helper for DNCngExportPolicies
  public const
    None = 0;
    AllowExport = 1;
    AllowPlaintextExport = 2;
    AllowArchiving = 4;
    AllowPlaintextArchiving = 8;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  [DNTypeName('System.Security.Cryptography.CngKeyCreationOptions')]
  DNCngKeyCreationOptions = type Integer;
  DNCngKeyCreationOptionsHelper = record helper for DNCngKeyCreationOptions
  public const
    None = 0;
    MachineKey = 32;
    OverwriteExistingKey = 128;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  [DNTypeName('System.Security.Cryptography.CngKeyHandleOpenOptions')]
  DNCngKeyHandleOpenOptions = type Integer;
  DNCngKeyHandleOpenOptionsHelper = record helper for DNCngKeyHandleOpenOptions
  public const
    None = 0;
    EphemeralKey = 1;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  [DNTypeName('System.Security.Cryptography.CngKeyOpenOptions')]
  DNCngKeyOpenOptions = type Integer;
  DNCngKeyOpenOptionsHelper = record helper for DNCngKeyOpenOptions
  public const
    None = 0;
    UserKey = 0;
    MachineKey = 32;
    Silent = 64;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  [DNTypeName('System.Security.Cryptography.CngKeyUsages')]
  DNCngKeyUsages = type Integer;
  DNCngKeyUsagesHelper = record helper for DNCngKeyUsages
  public const
    None = 0;
    Decryption = 1;
    Signing = 2;
    KeyAgreement = 4;
    AllUsages = 16777215;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  [DNTypeName('System.Security.Cryptography.CngPropertyOptions')]
  DNCngPropertyOptions = type Integer;
  DNCngPropertyOptionsHelper = record helper for DNCngPropertyOptions
  public const
    None = 0;
    CustomProperty = 1073741824;
    Persist = -2147483648;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  [DNTypeName('System.Security.Cryptography.CngUIProtectionLevels')]
  DNCngUIProtectionLevels = type Integer;
  DNCngUIProtectionLevelsHelper = record helper for DNCngUIProtectionLevels
  public const
    None = 0;
    ProtectKey = 1;
    ForceHighProtection = 2;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  [DNTypeName('System.Security.Cryptography.ECCurve+ECCurveType')]
  DNECCurve_ECCurveType = type Integer;
  DNECCurve_ECCurveTypeHelper = record helper for DNECCurve_ECCurveType
  public const
    Implicit = 0;
    PrimeShortWeierstrass = 1;
    PrimeTwistedEdwards = 2;
    PrimeMontgomery = 3;
    Characteristic2 = 4;
    Named = 5;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  [DNTypeName('System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction')]
  DNECDiffieHellmanKeyDerivationFunction = type Integer;
  DNECDiffieHellmanKeyDerivationFunctionHelper = record helper for DNECDiffieHellmanKeyDerivationFunction
  public const
    Hash = 0;
    Hmac = 1;
    Tls = 2;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  [DNTypeName('System.Security.Cryptography.ECKeyXmlFormat')]
  DNECKeyXmlFormat = type Integer;
  DNECKeyXmlFormatHelper = record helper for DNECKeyXmlFormat
  public const
    Rfc4050 = 0;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  [DNTypeName('System.Security.Cryptography.SignatureVerificationResult')]
  DNSignatureVerificationResult = type Integer;
  DNSignatureVerificationResultHelper = record helper for DNSignatureVerificationResult
  public const
    Valid = 0;
    AssemblyIdentityMismatch = 1;
    ContainingSignatureInvalid = 2;
    PublicKeyTokenMismatch = 3;
    PublisherMismatch = 4;
    SystemError = -2146869247;
    InvalidSignerCertificate = -2146869246;
    InvalidCountersignature = -2146869245;
    InvalidCertificateSignature = -2146869244;
    InvalidTimestamp = -2146869243;
    BadDigest = -2146869232;
    BasicConstraintsNotObserved = -2146869223;
    UnknownTrustProvider = -2146762751;
    UnknownVerificationAction = -2146762750;
    BadSignatureFormat = -2146762749;
    CertificateNotExplicitlyTrusted = -2146762748;
    MissingSignature = -2146762496;
    CertificateExpired = -2146762495;
    InvalidTimePeriodNesting = -2146762494;
    InvalidCertificateRole = -2146762493;
    PathLengthConstraintViolated = -2146762492;
    UnknownCriticalExtension = -2146762491;
    CertificateUsageNotAllowed = -2146762490;
    IssuerChainingError = -2146762489;
    CertificateMalformed = -2146762488;
    UntrustedRootCertificate = -2146762487;
    CouldNotBuildChain = -2146762486;
    GenericTrustFailure = -2146762485;
    CertificateRevoked = -2146762484;
    UntrustedTestRootCertificate = -2146762483;
    RevocationCheckFailure = -2146762482;
    InvalidCertificateUsage = -2146762480;
    CertificateExplicitlyDistrusted = -2146762479;
    UntrustedCertificationAuthority = -2146762478;
    InvalidCertificatePolicy = -2146762477;
    InvalidCertificateName = -2146762476;
  end;


  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  [DNTypeName('System.Security.Cryptography.X509Certificates.TrustStatus')]
  DNTrustStatus = type Integer;
  DNTrustStatusHelper = record helper for DNTrustStatus
  public const
    Untrusted = 0;
    UnknownIdentity = 1;
    KnownIdentity = 2;
    Trusted = 3;
  end;


  //-------------namespace: System.Security----------------
  [DNTypeName('System.Security.ManifestKinds')]
  DNManifestKinds = type Integer;
  DNManifestKindsHelper = record helper for DNManifestKinds
  public const
    None = 0;
    Deployment = 1;
    Application = 2;
    ApplicationAndDeployment = 3;
  end;


  //-------------namespace: System.Threading----------------
  [DNTypeName('System.Threading.LockRecursionPolicy')]
  DNLockRecursionPolicy = type Integer;
  DNLockRecursionPolicyHelper = record helper for DNLockRecursionPolicy
  public const
    NoRecursion = 0;
    SupportsRecursion = 1;
  end;




type


{ declares }

  DNIGrouping<TKey, TElement> = interface; // type: System.Linq.IGrouping`2, namespace: System.Linq
  DNILookup<TKey, TElement> = interface; // type: System.Linq.ILookup`2, namespace: System.Linq
  DNIOrderedEnumerable<TElement> = interface; // type: System.Linq.IOrderedEnumerable`1, namespace: System.Linq
  DNIQueryable<T> = interface; // type: System.Linq.IQueryable`1, namespace: System.Linq
  DNIOrderedQueryable<T> = interface; // type: System.Linq.IOrderedQueryable`1, namespace: System.Linq
  DNIQueryable = interface; // type: System.Linq.IQueryable, namespace: System.Linq
  DNIOrderedQueryable = interface; // type: System.Linq.IOrderedQueryable, namespace: System.Linq
  DNIDynamicMetaObjectProvider = interface; // type: System.Dynamic.IDynamicMetaObjectProvider, namespace: System.Dynamic
  DNIInvokeOnGetBinder = interface; // type: System.Dynamic.IInvokeOnGetBinder, namespace: System.Dynamic
  DNIArgumentProvider = interface; // type: System.Linq.Expressions.IArgumentProvider, namespace: System.Linq.Expressions
  DNIDynamicExpression = interface; // type: System.Linq.Expressions.IDynamicExpression, namespace: System.Linq.Expressions
  DNIQueryProvider = interface; // type: System.Linq.IQueryProvider, namespace: System.Linq
  DNIRuntimeVariables = interface; // type: System.Runtime.CompilerServices.IRuntimeVariables, namespace: System.Runtime.CompilerServices
  DNIStrongBox = interface; // type: System.Runtime.CompilerServices.IStrongBox, namespace: System.Runtime.CompilerServices
  DNManagementEntityAttribute = interface; // type: System.Management.Instrumentation.ManagementEntityAttribute, namespace: System.Management.Instrumentation
  DNManagementMemberAttribute = interface; // type: System.Management.Instrumentation.ManagementMemberAttribute, namespace: System.Management.Instrumentation
  DNManagementCommitAttribute = interface; // type: System.Management.Instrumentation.ManagementCommitAttribute, namespace: System.Management.Instrumentation
  DNManagementConfigurationAttribute = interface; // type: System.Management.Instrumentation.ManagementConfigurationAttribute, namespace: System.Management.Instrumentation
  DNManagementKeyAttribute = interface; // type: System.Management.Instrumentation.ManagementKeyAttribute, namespace: System.Management.Instrumentation
  DNManagementNewInstanceAttribute = interface; // type: System.Management.Instrumentation.ManagementNewInstanceAttribute, namespace: System.Management.Instrumentation
  DNManagementBindAttribute = interface; // type: System.Management.Instrumentation.ManagementBindAttribute, namespace: System.Management.Instrumentation
  DNManagementCreateAttribute = interface; // type: System.Management.Instrumentation.ManagementCreateAttribute, namespace: System.Management.Instrumentation
  DNManagementEnumeratorAttribute = interface; // type: System.Management.Instrumentation.ManagementEnumeratorAttribute, namespace: System.Management.Instrumentation
  DNManagementProbeAttribute = interface; // type: System.Management.Instrumentation.ManagementProbeAttribute, namespace: System.Management.Instrumentation
  DNManagementRemoveAttribute = interface; // type: System.Management.Instrumentation.ManagementRemoveAttribute, namespace: System.Management.Instrumentation
  DNManagementTaskAttribute = interface; // type: System.Management.Instrumentation.ManagementTaskAttribute, namespace: System.Management.Instrumentation
  DNManagementNameAttribute = interface; // type: System.Management.Instrumentation.ManagementNameAttribute, namespace: System.Management.Instrumentation
  DNManagementReferenceAttribute = interface; // type: System.Management.Instrumentation.ManagementReferenceAttribute, namespace: System.Management.Instrumentation
  DNWmiConfigurationAttribute = interface; // type: System.Management.Instrumentation.WmiConfigurationAttribute, namespace: System.Management.Instrumentation
  DNDynamicAttribute = interface; // type: System.Runtime.CompilerServices.DynamicAttribute, namespace: System.Runtime.CompilerServices
  DNHashSet<T> = interface; // type: System.Collections.Generic.HashSet`1, namespace: System.Collections.Generic
  DNCngPropertyCollection = interface; // type: System.Security.Cryptography.CngPropertyCollection, namespace: System.Security.Cryptography
  DNManifestSignatureInformationCollection = interface; // type: System.Security.Cryptography.ManifestSignatureInformationCollection, namespace: System.Security.Cryptography
  DNEventProvider = interface; // type: System.Diagnostics.Eventing.EventProvider, namespace: System.Diagnostics.Eventing
  DNEventBookmark = interface; // type: System.Diagnostics.Eventing.Reader.EventBookmark, namespace: System.Diagnostics.Eventing.Reader
  DNEventKeyword = interface; // type: System.Diagnostics.Eventing.Reader.EventKeyword, namespace: System.Diagnostics.Eventing.Reader
  DNEventLevel = interface; // type: System.Diagnostics.Eventing.Reader.EventLevel, namespace: System.Diagnostics.Eventing.Reader
  DNEventLogConfiguration = interface; // type: System.Diagnostics.Eventing.Reader.EventLogConfiguration, namespace: System.Diagnostics.Eventing.Reader
  DNEventLogInformation = interface; // type: System.Diagnostics.Eventing.Reader.EventLogInformation, namespace: System.Diagnostics.Eventing.Reader
  DNEventLogLink = interface; // type: System.Diagnostics.Eventing.Reader.EventLogLink, namespace: System.Diagnostics.Eventing.Reader
  DNEventLogPropertySelector = interface; // type: System.Diagnostics.Eventing.Reader.EventLogPropertySelector, namespace: System.Diagnostics.Eventing.Reader
  DNEventLogQuery = interface; // type: System.Diagnostics.Eventing.Reader.EventLogQuery, namespace: System.Diagnostics.Eventing.Reader
  DNEventLogReader = interface; // type: System.Diagnostics.Eventing.Reader.EventLogReader, namespace: System.Diagnostics.Eventing.Reader
  DNEventLogSession = interface; // type: System.Diagnostics.Eventing.Reader.EventLogSession, namespace: System.Diagnostics.Eventing.Reader
  DNEventLogStatus = interface; // type: System.Diagnostics.Eventing.Reader.EventLogStatus, namespace: System.Diagnostics.Eventing.Reader
  DNEventLogWatcher = interface; // type: System.Diagnostics.Eventing.Reader.EventLogWatcher, namespace: System.Diagnostics.Eventing.Reader
  DNEventMetadata = interface; // type: System.Diagnostics.Eventing.Reader.EventMetadata, namespace: System.Diagnostics.Eventing.Reader
  DNEventOpcode = interface; // type: System.Diagnostics.Eventing.Reader.EventOpcode, namespace: System.Diagnostics.Eventing.Reader
  DNEventProperty = interface; // type: System.Diagnostics.Eventing.Reader.EventProperty, namespace: System.Diagnostics.Eventing.Reader
  DNEventRecord = interface; // type: System.Diagnostics.Eventing.Reader.EventRecord, namespace: System.Diagnostics.Eventing.Reader
  DNEventLogRecord = interface; // type: System.Diagnostics.Eventing.Reader.EventLogRecord, namespace: System.Diagnostics.Eventing.Reader
  DNEventTask = interface; // type: System.Diagnostics.Eventing.Reader.EventTask, namespace: System.Diagnostics.Eventing.Reader
  DNProviderMetadata = interface; // type: System.Diagnostics.Eventing.Reader.ProviderMetadata, namespace: System.Diagnostics.Eventing.Reader
  DNCounterData = interface; // type: System.Diagnostics.PerformanceData.CounterData, namespace: System.Diagnostics.PerformanceData
  DNCounterSet = interface; // type: System.Diagnostics.PerformanceData.CounterSet, namespace: System.Diagnostics.PerformanceData
  DNCounterSetInstance = interface; // type: System.Diagnostics.PerformanceData.CounterSetInstance, namespace: System.Diagnostics.PerformanceData
  DNCounterSetInstanceCounterDataSet = interface; // type: System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet, namespace: System.Diagnostics.PerformanceData
  DNUnescapedXmlDiagnosticData = interface; // type: System.Diagnostics.UnescapedXmlDiagnosticData, namespace: System.Diagnostics
  DNBindingRestrictions = interface; // type: System.Dynamic.BindingRestrictions, namespace: System.Dynamic
  DNCallInfo = interface; // type: System.Dynamic.CallInfo, namespace: System.Dynamic
  DNDynamicMetaObject = interface; // type: System.Dynamic.DynamicMetaObject, namespace: System.Dynamic
  DNDynamicObject = interface; // type: System.Dynamic.DynamicObject, namespace: System.Dynamic
  DNExpandoObject = interface; // type: System.Dynamic.ExpandoObject, namespace: System.Dynamic
  DNEventRecordWrittenEventArgs = interface; // type: System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs, namespace: System.Diagnostics.Eventing.Reader
  DNEventLogException = interface; // type: System.Diagnostics.Eventing.Reader.EventLogException, namespace: System.Diagnostics.Eventing.Reader
  DNEventLogInvalidDataException = interface; // type: System.Diagnostics.Eventing.Reader.EventLogInvalidDataException, namespace: System.Diagnostics.Eventing.Reader
  DNEventLogNotFoundException = interface; // type: System.Diagnostics.Eventing.Reader.EventLogNotFoundException, namespace: System.Diagnostics.Eventing.Reader
  DNEventLogProviderDisabledException = interface; // type: System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException, namespace: System.Diagnostics.Eventing.Reader
  DNEventLogReadingException = interface; // type: System.Diagnostics.Eventing.Reader.EventLogReadingException, namespace: System.Diagnostics.Eventing.Reader
  DNInstrumentationBaseException = interface; // type: System.Management.Instrumentation.InstrumentationBaseException, namespace: System.Management.Instrumentation
  DNInstrumentationException = interface; // type: System.Management.Instrumentation.InstrumentationException, namespace: System.Management.Instrumentation
  DNInstanceNotFoundException = interface; // type: System.Management.Instrumentation.InstanceNotFoundException, namespace: System.Management.Instrumentation
  DNMemoryMappedFile = interface; // type: System.IO.MemoryMappedFiles.MemoryMappedFile, namespace: System.IO.MemoryMappedFiles
  DNMemoryMappedViewAccessor = interface; // type: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor, namespace: System.IO.MemoryMappedFiles
  DNEnumerable = interface; // type: System.Linq.Enumerable, namespace: System.Linq
  DNEnumerableExecutor = interface; // type: System.Linq.EnumerableExecutor, namespace: System.Linq
  DNEnumerableExecutor<T> = interface; // type: System.Linq.EnumerableExecutor`1, namespace: System.Linq
  DNEnumerableQuery = interface; // type: System.Linq.EnumerableQuery, namespace: System.Linq
  DNEnumerableQuery<T> = interface; // type: System.Linq.EnumerableQuery`1, namespace: System.Linq
  DNCatchBlock = interface; // type: System.Linq.Expressions.CatchBlock, namespace: System.Linq.Expressions
  DNElementInit = interface; // type: System.Linq.Expressions.ElementInit, namespace: System.Linq.Expressions
  DNExpression = interface; // type: System.Linq.Expressions.Expression, namespace: System.Linq.Expressions
  DNBinaryExpression = interface; // type: System.Linq.Expressions.BinaryExpression, namespace: System.Linq.Expressions
  DNBlockExpression = interface; // type: System.Linq.Expressions.BlockExpression, namespace: System.Linq.Expressions
  DNConditionalExpression = interface; // type: System.Linq.Expressions.ConditionalExpression, namespace: System.Linq.Expressions
  DNConstantExpression = interface; // type: System.Linq.Expressions.ConstantExpression, namespace: System.Linq.Expressions
  DNDebugInfoExpression = interface; // type: System.Linq.Expressions.DebugInfoExpression, namespace: System.Linq.Expressions
  DNDefaultExpression = interface; // type: System.Linq.Expressions.DefaultExpression, namespace: System.Linq.Expressions
  DNDynamicExpression = interface; // type: System.Linq.Expressions.DynamicExpression, namespace: System.Linq.Expressions
  DNGotoExpression = interface; // type: System.Linq.Expressions.GotoExpression, namespace: System.Linq.Expressions
  DNIndexExpression = interface; // type: System.Linq.Expressions.IndexExpression, namespace: System.Linq.Expressions
  DNInvocationExpression = interface; // type: System.Linq.Expressions.InvocationExpression, namespace: System.Linq.Expressions
  DNLabelExpression = interface; // type: System.Linq.Expressions.LabelExpression, namespace: System.Linq.Expressions
  DNLambdaExpression = interface; // type: System.Linq.Expressions.LambdaExpression, namespace: System.Linq.Expressions
  DNExpression<TDelegate> = interface; // type: System.Linq.Expressions.Expression`1, namespace: System.Linq.Expressions
  DNListInitExpression = interface; // type: System.Linq.Expressions.ListInitExpression, namespace: System.Linq.Expressions
  DNLoopExpression = interface; // type: System.Linq.Expressions.LoopExpression, namespace: System.Linq.Expressions
  DNMemberExpression = interface; // type: System.Linq.Expressions.MemberExpression, namespace: System.Linq.Expressions
  DNMemberInitExpression = interface; // type: System.Linq.Expressions.MemberInitExpression, namespace: System.Linq.Expressions
  DNMethodCallExpression = interface; // type: System.Linq.Expressions.MethodCallExpression, namespace: System.Linq.Expressions
  DNNewArrayExpression = interface; // type: System.Linq.Expressions.NewArrayExpression, namespace: System.Linq.Expressions
  DNNewExpression = interface; // type: System.Linq.Expressions.NewExpression, namespace: System.Linq.Expressions
  DNParameterExpression = interface; // type: System.Linq.Expressions.ParameterExpression, namespace: System.Linq.Expressions
  DNRuntimeVariablesExpression = interface; // type: System.Linq.Expressions.RuntimeVariablesExpression, namespace: System.Linq.Expressions
  DNSwitchExpression = interface; // type: System.Linq.Expressions.SwitchExpression, namespace: System.Linq.Expressions
  DNTryExpression = interface; // type: System.Linq.Expressions.TryExpression, namespace: System.Linq.Expressions
  DNTypeBinaryExpression = interface; // type: System.Linq.Expressions.TypeBinaryExpression, namespace: System.Linq.Expressions
  DNUnaryExpression = interface; // type: System.Linq.Expressions.UnaryExpression, namespace: System.Linq.Expressions
  DNExpressionVisitor = interface; // type: System.Linq.Expressions.ExpressionVisitor, namespace: System.Linq.Expressions
  DNDynamicExpressionVisitor = interface; // type: System.Linq.Expressions.DynamicExpressionVisitor, namespace: System.Linq.Expressions
  DNLabelTarget = interface; // type: System.Linq.Expressions.LabelTarget, namespace: System.Linq.Expressions
  DNMemberBinding = interface; // type: System.Linq.Expressions.MemberBinding, namespace: System.Linq.Expressions
  DNMemberAssignment = interface; // type: System.Linq.Expressions.MemberAssignment, namespace: System.Linq.Expressions
  DNMemberListBinding = interface; // type: System.Linq.Expressions.MemberListBinding, namespace: System.Linq.Expressions
  DNMemberMemberBinding = interface; // type: System.Linq.Expressions.MemberMemberBinding, namespace: System.Linq.Expressions
  DNSwitchCase = interface; // type: System.Linq.Expressions.SwitchCase, namespace: System.Linq.Expressions
  DNSymbolDocumentInfo = interface; // type: System.Linq.Expressions.SymbolDocumentInfo, namespace: System.Linq.Expressions
  DNLookup<TKey, TElement> = interface; // type: System.Linq.Lookup`2, namespace: System.Linq
  DNParallelEnumerable = interface; // type: System.Linq.ParallelEnumerable, namespace: System.Linq
  DNParallelQuery = interface; // type: System.Linq.ParallelQuery, namespace: System.Linq
  DNParallelQuery<TSource> = interface; // type: System.Linq.ParallelQuery`1, namespace: System.Linq
  DNOrderedParallelQuery<TSource> = interface; // type: System.Linq.OrderedParallelQuery`1, namespace: System.Linq
  DNQueryable = interface; // type: System.Linq.Queryable, namespace: System.Linq
  DNEventProviderTraceListener = interface; // type: System.Diagnostics.Eventing.EventProviderTraceListener, namespace: System.Diagnostics.Eventing
  DNEventSchemaTraceListener = interface; // type: System.Diagnostics.EventSchemaTraceListener, namespace: System.Diagnostics
  DNPipeStream = interface; // type: System.IO.Pipes.PipeStream, namespace: System.IO.Pipes
  DNAnonymousPipeClientStream = interface; // type: System.IO.Pipes.AnonymousPipeClientStream, namespace: System.IO.Pipes
  DNAnonymousPipeServerStream = interface; // type: System.IO.Pipes.AnonymousPipeServerStream, namespace: System.IO.Pipes
  DNNamedPipeClientStream = interface; // type: System.IO.Pipes.NamedPipeClientStream, namespace: System.IO.Pipes
  DNNamedPipeServerStream = interface; // type: System.IO.Pipes.NamedPipeServerStream, namespace: System.IO.Pipes
  DNMemoryMappedViewStream = interface; // type: System.IO.MemoryMappedFiles.MemoryMappedViewStream, namespace: System.IO.MemoryMappedFiles
  DNComAwareEventInfo = interface; // type: System.Runtime.InteropServices.ComAwareEventInfo, namespace: System.Runtime.InteropServices
  DNCallSite = interface; // type: System.Runtime.CompilerServices.CallSite, namespace: System.Runtime.CompilerServices
  DNCallSite<T> = interface; // type: System.Runtime.CompilerServices.CallSite`1, namespace: System.Runtime.CompilerServices
  DNCallSiteBinder = interface; // type: System.Runtime.CompilerServices.CallSiteBinder, namespace: System.Runtime.CompilerServices
  DNDynamicMetaObjectBinder = interface; // type: System.Dynamic.DynamicMetaObjectBinder, namespace: System.Dynamic
  DNBinaryOperationBinder = interface; // type: System.Dynamic.BinaryOperationBinder, namespace: System.Dynamic
  DNConvertBinder = interface; // type: System.Dynamic.ConvertBinder, namespace: System.Dynamic
  DNCreateInstanceBinder = interface; // type: System.Dynamic.CreateInstanceBinder, namespace: System.Dynamic
  DNDeleteIndexBinder = interface; // type: System.Dynamic.DeleteIndexBinder, namespace: System.Dynamic
  DNDeleteMemberBinder = interface; // type: System.Dynamic.DeleteMemberBinder, namespace: System.Dynamic
  DNGetIndexBinder = interface; // type: System.Dynamic.GetIndexBinder, namespace: System.Dynamic
  DNGetMemberBinder = interface; // type: System.Dynamic.GetMemberBinder, namespace: System.Dynamic
  DNInvokeBinder = interface; // type: System.Dynamic.InvokeBinder, namespace: System.Dynamic
  DNInvokeMemberBinder = interface; // type: System.Dynamic.InvokeMemberBinder, namespace: System.Dynamic
  DNSetIndexBinder = interface; // type: System.Dynamic.SetIndexBinder, namespace: System.Dynamic
  DNSetMemberBinder = interface; // type: System.Dynamic.SetMemberBinder, namespace: System.Dynamic
  DNUnaryOperationBinder = interface; // type: System.Dynamic.UnaryOperationBinder, namespace: System.Dynamic
  DNCallSiteHelpers = interface; // type: System.Runtime.CompilerServices.CallSiteHelpers, namespace: System.Runtime.CompilerServices
  DNCallSiteOps = interface; // type: System.Runtime.CompilerServices.CallSiteOps, namespace: System.Runtime.CompilerServices
  DNClosure = interface; // type: System.Runtime.CompilerServices.Closure, namespace: System.Runtime.CompilerServices
  DNDebugInfoGenerator = interface; // type: System.Runtime.CompilerServices.DebugInfoGenerator, namespace: System.Runtime.CompilerServices
  DNExecutionScope = interface; // type: System.Runtime.CompilerServices.ExecutionScope, namespace: System.Runtime.CompilerServices
  DNReadOnlyCollectionBuilder<T> = interface; // type: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1, namespace: System.Runtime.CompilerServices
  DNRuleCache<T> = interface; // type: System.Runtime.CompilerServices.RuleCache`1, namespace: System.Runtime.CompilerServices
  DNRuntimeOps = interface; // type: System.Runtime.CompilerServices.RuntimeOps, namespace: System.Runtime.CompilerServices
  DNStrongBox<T> = interface; // type: System.Runtime.CompilerServices.StrongBox`1, namespace: System.Runtime.CompilerServices
  DNSafeMemoryMappedFileHandle = interface; // type: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle, namespace: Microsoft.Win32.SafeHandles
  DNSafeNCryptHandle = interface; // type: Microsoft.Win32.SafeHandles.SafeNCryptHandle, namespace: Microsoft.Win32.SafeHandles
  DNSafeNCryptKeyHandle = interface; // type: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle, namespace: Microsoft.Win32.SafeHandles
  DNSafeNCryptProviderHandle = interface; // type: Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle, namespace: Microsoft.Win32.SafeHandles
  DNSafeNCryptSecretHandle = interface; // type: Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle, namespace: Microsoft.Win32.SafeHandles
  DNSafePipeHandle = interface; // type: Microsoft.Win32.SafeHandles.SafePipeHandle, namespace: Microsoft.Win32.SafeHandles
  DNSafeMemoryMappedViewHandle = interface; // type: Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle, namespace: Microsoft.Win32.SafeHandles
  DNPipeAccessRule = interface; // type: System.IO.Pipes.PipeAccessRule, namespace: System.IO.Pipes
  DNPipeAuditRule = interface; // type: System.IO.Pipes.PipeAuditRule, namespace: System.IO.Pipes
  DNPipeSecurity = interface; // type: System.IO.Pipes.PipeSecurity, namespace: System.IO.Pipes
  DNMemoryMappedFileSecurity = interface; // type: System.IO.MemoryMappedFiles.MemoryMappedFileSecurity, namespace: System.IO.MemoryMappedFiles
  DNDSACng = interface; // type: System.Security.Cryptography.DSACng, namespace: System.Security.Cryptography
  DNECDiffieHellman = interface; // type: System.Security.Cryptography.ECDiffieHellman, namespace: System.Security.Cryptography
  DNECDiffieHellmanCng = interface; // type: System.Security.Cryptography.ECDiffieHellmanCng, namespace: System.Security.Cryptography
  DNECDsa = interface; // type: System.Security.Cryptography.ECDsa, namespace: System.Security.Cryptography
  DNECDsaCng = interface; // type: System.Security.Cryptography.ECDsaCng, namespace: System.Security.Cryptography
  DNRSACng = interface; // type: System.Security.Cryptography.RSACng, namespace: System.Security.Cryptography
  DNCngAlgorithm = interface; // type: System.Security.Cryptography.CngAlgorithm, namespace: System.Security.Cryptography
  DNCngAlgorithmGroup = interface; // type: System.Security.Cryptography.CngAlgorithmGroup, namespace: System.Security.Cryptography
  DNCngKey = interface; // type: System.Security.Cryptography.CngKey, namespace: System.Security.Cryptography
  DNCngKeyBlobFormat = interface; // type: System.Security.Cryptography.CngKeyBlobFormat, namespace: System.Security.Cryptography
  DNCngKeyCreationParameters = interface; // type: System.Security.Cryptography.CngKeyCreationParameters, namespace: System.Security.Cryptography
  DNCngProvider = interface; // type: System.Security.Cryptography.CngProvider, namespace: System.Security.Cryptography
  DNCngUIPolicy = interface; // type: System.Security.Cryptography.CngUIPolicy, namespace: System.Security.Cryptography
  DNECCurve_NamedCurves = interface; // type: System.Security.Cryptography.ECCurve+NamedCurves, namespace: System.Security.Cryptography
  DNECDiffieHellmanPublicKey = interface; // type: System.Security.Cryptography.ECDiffieHellmanPublicKey, namespace: System.Security.Cryptography
  DNECDiffieHellmanCngPublicKey = interface; // type: System.Security.Cryptography.ECDiffieHellmanCngPublicKey, namespace: System.Security.Cryptography
  DNMD5Cng = interface; // type: System.Security.Cryptography.MD5Cng, namespace: System.Security.Cryptography
  DNSHA1Cng = interface; // type: System.Security.Cryptography.SHA1Cng, namespace: System.Security.Cryptography
  DNSHA256Cng = interface; // type: System.Security.Cryptography.SHA256Cng, namespace: System.Security.Cryptography
  DNSHA256CryptoServiceProvider = interface; // type: System.Security.Cryptography.SHA256CryptoServiceProvider, namespace: System.Security.Cryptography
  DNSHA384Cng = interface; // type: System.Security.Cryptography.SHA384Cng, namespace: System.Security.Cryptography
  DNSHA384CryptoServiceProvider = interface; // type: System.Security.Cryptography.SHA384CryptoServiceProvider, namespace: System.Security.Cryptography
  DNSHA512Cng = interface; // type: System.Security.Cryptography.SHA512Cng, namespace: System.Security.Cryptography
  DNSHA512CryptoServiceProvider = interface; // type: System.Security.Cryptography.SHA512CryptoServiceProvider, namespace: System.Security.Cryptography
  DNIncrementalHash = interface; // type: System.Security.Cryptography.IncrementalHash, namespace: System.Security.Cryptography
  DNManifestSignatureInformation = interface; // type: System.Security.Cryptography.ManifestSignatureInformation, namespace: System.Security.Cryptography
  DNStrongNameSignatureInformation = interface; // type: System.Security.Cryptography.StrongNameSignatureInformation, namespace: System.Security.Cryptography
  DNAesCng = interface; // type: System.Security.Cryptography.AesCng, namespace: System.Security.Cryptography
  DNAesCryptoServiceProvider = interface; // type: System.Security.Cryptography.AesCryptoServiceProvider, namespace: System.Security.Cryptography
  DNAesManaged = interface; // type: System.Security.Cryptography.AesManaged, namespace: System.Security.Cryptography
  DNTripleDESCng = interface; // type: System.Security.Cryptography.TripleDESCng, namespace: System.Security.Cryptography
  DNAuthenticodeSignatureInformation = interface; // type: System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation, namespace: System.Security.Cryptography.X509Certificates
  DNCertificateRequest = interface; // type: System.Security.Cryptography.X509Certificates.CertificateRequest, namespace: System.Security.Cryptography.X509Certificates
  DNDSACertificateExtensions = interface; // type: System.Security.Cryptography.X509Certificates.DSACertificateExtensions, namespace: System.Security.Cryptography.X509Certificates
  DNECDsaCertificateExtensions = interface; // type: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions, namespace: System.Security.Cryptography.X509Certificates
  DNRSACertificateExtensions = interface; // type: System.Security.Cryptography.X509Certificates.RSACertificateExtensions, namespace: System.Security.Cryptography.X509Certificates
  DNSubjectAlternativeNameBuilder = interface; // type: System.Security.Cryptography.X509Certificates.SubjectAlternativeNameBuilder, namespace: System.Security.Cryptography.X509Certificates
  DNTimestampInformation = interface; // type: System.Security.Cryptography.X509Certificates.TimestampInformation, namespace: System.Security.Cryptography.X509Certificates
  DNX509SignatureGenerator = interface; // type: System.Security.Cryptography.X509Certificates.X509SignatureGenerator, namespace: System.Security.Cryptography.X509Certificates
  DNReaderWriterLockSlim = interface; // type: System.Threading.ReaderWriterLockSlim, namespace: System.Threading
  DNTaskExtensions = interface; // type: System.Threading.Tasks.TaskExtensions, namespace: System.Threading.Tasks
  DNHashSet_Enumerator<T> = interface; // type: System.Collections.Generic.HashSet`1+Enumerator, namespace: System.Collections.Generic
  DNEventDescriptor = interface; // type: System.Diagnostics.Eventing.EventDescriptor, namespace: System.Diagnostics.Eventing
  DNCngProperty = interface; // type: System.Security.Cryptography.CngProperty, namespace: System.Security.Cryptography
  DNECCurve = interface; // type: System.Security.Cryptography.ECCurve, namespace: System.Security.Cryptography
  DNECParameters = interface; // type: System.Security.Cryptography.ECParameters, namespace: System.Security.Cryptography
  DNECPoint = interface; // type: System.Security.Cryptography.ECPoint, namespace: System.Security.Cryptography

{ delegates }

  [DNTypeName('System.Action`10')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10) of object;

  [DNTypeName('System.Action`11')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11) of object;

  [DNTypeName('System.Action`12')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12) of object;

  [DNTypeName('System.Action`13')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13) of object;

  [DNTypeName('System.Action`14')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13; arg14: T14) of object;

  [DNTypeName('System.Action`15')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13; arg14: T14; arg15: T15) of object;

  [DNTypeName('System.Action`16')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13; arg14: T14; arg15: T15; arg16: T16) of object;

  [DNTypeName('System.Action`9')]
  DNAction<T1, T2, T3, T4, T5, T6, T7, T8, T9> = procedure(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9) of object;

  [DNTypeName('System.Func`10')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9): TResult of object;

  [DNTypeName('System.Func`11')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10): TResult of object;

  [DNTypeName('System.Func`12')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11): TResult of object;

  [DNTypeName('System.Func`13')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12): TResult of object;

  [DNTypeName('System.Func`14')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13): TResult of object;

  [DNTypeName('System.Func`15')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13; arg14: T14): TResult of object;

  [DNTypeName('System.Func`16')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13; arg14: T14; arg15: T15): TResult of object;

  [DNTypeName('System.Func`17')]
  DNFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> = function(arg1: T1; arg2: T2; arg3: T3; arg4: T4; arg5: T5; arg6: T6; arg7: T7; arg8: T8; arg9: T9; arg10: T10; arg11: T11; arg12: T12; arg13: T13; arg14: T14; arg15: T15; arg16: T16): TResult of object;

  [DNTypeName('System.IO.Pipes.PipeStreamImpersonationWorker')]
  DNPipeStreamImpersonationWorker = procedure of object;




{ objects }

  //-------------namespace: System.Linq----------------
  [DNTypeName('System.Linq.IGrouping`2')]
  DNIGrouping<TKey, TElement> = interface(DDN.mscorlib.DNIEnumerable<TElement>)
  ['{9CCECD6C-7922-345E-A182-6626F99CC460}']
  { getters & setters } 

    function get_Key: TKey;

  { propertys } 

    property Key: TKey read get_Key;
  end;

  //-------------namespace: System.Linq----------------
  [DNTypeName('System.Linq.ILookup`2')]
  DNILookup<TKey, TElement> = interface(DDN.mscorlib.DNIEnumerable<DNIGrouping<TKey, TElement>>)
  ['{6B51090C-E837-3318-A840-0B5D95886587}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(key: TKey): DDN.mscorlib.DNIEnumerable<TElement>;

  { methods } 

    function &Contains(key: TKey): Boolean;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[key: TKey]: DDN.mscorlib.DNIEnumerable<TElement> read get_Item; default;
  end;

  //-------------namespace: System.Linq----------------
  [DNTypeName('System.Linq.IOrderedEnumerable`1')]
  DNIOrderedEnumerable<TElement> = interface(DDN.mscorlib.DNIEnumerable<TElement>)
  ['{6EEB1E7D-F438-329E-BD25-428DAB0608A7}']
  end;

  //-------------namespace: System.Linq----------------
  [DNTypeName('System.Linq.IQueryable`1')]
  DNIQueryable<T> = interface(DDN.mscorlib.DNIEnumerable<T>)
  ['{E2C91F76-C000-32D6-B5A1-1BB9AA1B5660}']
  end;

  //-------------namespace: System.Linq----------------
  [DNTypeName('System.Linq.IOrderedQueryable`1')]
  DNIOrderedQueryable<T> = interface(DNIQueryable<T>)
  ['{0FD6D6C3-C6F1-39DA-B3F5-1363BAEA7D94}']
  end;

  //-------------namespace: System.Linq----------------
  [DNTypeName('System.Linq.IQueryable')]
  DNIQueryable = interface(DDN.mscorlib.DNIEnumerable)
  ['{84F6F43C-A9A7-3658-91B4-B41B15CAEFF2}']
  { getters & setters } 

    function get_Expression: DNExpression;
    function get_ElementType: DDN.mscorlib.DNType;
    function get_Provider: DNIQueryProvider;

  { propertys } 

    property Expression: DNExpression read get_Expression;
    property ElementType: DDN.mscorlib.DNType read get_ElementType;
    property Provider: DNIQueryProvider read get_Provider;
  end;

  //-------------namespace: System.Linq----------------
  [DNTypeName('System.Linq.IOrderedQueryable')]
  DNIOrderedQueryable = interface(DNIQueryable)
  ['{E5303F81-6FE2-37CC-893F-1BF7E067D44F}']
  end;

  //-------------namespace: System.Dynamic----------------
  [DNTypeName('System.Dynamic.IDynamicMetaObjectProvider')]
  DNIDynamicMetaObjectProvider = interface(DDN.mscorlib.DNObject)
  ['{B86A98CC-DCC0-3205-8777-7911A07DAAAF}']
  { methods } 

    function GetMetaObject(parameter: DNExpression): DNDynamicMetaObject;

  end;

  //-------------namespace: System.Dynamic----------------
  [DNTypeName('System.Dynamic.IInvokeOnGetBinder')]
  DNIInvokeOnGetBinder = interface(DDN.mscorlib.DNObject)
  ['{ED40980B-63E1-325C-BC22-93E284CA8CD3}']
  { getters & setters } 

    function get_InvokeOnGet: Boolean;

  { propertys } 

    property InvokeOnGet: Boolean read get_InvokeOnGet;
  end;

  //-------------namespace: System.Linq.Expressions----------------
  [DNTypeName('System.Linq.Expressions.IArgumentProvider')]
  DNIArgumentProvider = interface(DDN.mscorlib.DNObject)
  ['{6D1D0B80-3581-33F4-9261-6A4D710EDB5F}']
  { getters & setters } 

    function get_ArgumentCount: Int32;

  { methods } 

    function GetArgument(index: Int32): DNExpression;

  { propertys } 

    property ArgumentCount: Int32 read get_ArgumentCount;
  end;

  //-------------namespace: System.Linq.Expressions----------------
  [DNTypeName('System.Linq.Expressions.IDynamicExpression')]
  DNIDynamicExpression = interface(DNIArgumentProvider)
  ['{F2DF1DD2-D434-34A4-A72E-401019651DEC}']
  { getters & setters } 

    function get_DelegateType: DDN.mscorlib.DNType;

  { methods } 

    function Rewrite(args: TArray<DNExpression>): DNExpression;
    function CreateCallSite: DDN.mscorlib.DNObject;

  { propertys } 

    property DelegateType: DDN.mscorlib.DNType read get_DelegateType;
  end;

  //-------------namespace: System.Linq----------------
  [DNTypeName('System.Linq.IQueryProvider')]
  DNIQueryProvider = interface(DDN.mscorlib.DNObject)
  ['{B9608E43-658E-3B98-9448-8F93B7D6E50C}']
  { methods } 

    function CreateQuery(expression: DNExpression): DNIQueryable;
    function Execute(expression: DNExpression): DDN.mscorlib.DNObject;

  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.IRuntimeVariables')]
  DNIRuntimeVariables = interface(DDN.mscorlib.DNObject)
  ['{D2E28B60-F4E4-3614-8D43-5DAEEDB31E8E}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DDN.mscorlib.DNObject;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject);

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.IStrongBox')]
  DNIStrongBox = interface(DDN.mscorlib.DNObject)
  ['{53080814-DA86-3D64-AA57-5B4C3EF730E5}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);

  { propertys } 

    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
  end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNManagementEntityAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{B8D086AB-9B12-523D-A352-64D38E56DAE1}']
  { constructors } 

    {class} function init: DNManagementEntityAttribute;

  end;

  [DNTypeName('System.Management.Instrumentation.ManagementEntityAttribute')]
  DNManagementEntityAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{53823D1D-B9B6-3076-94D8-8519297E9583}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_External: Boolean;
    procedure set_External(value: Boolean);
    function get_Singleton: Boolean;
    procedure set_Singleton(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property &External: Boolean read get_External write set_External;
    property Singleton: Boolean read get_Singleton write set_Singleton;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNManagementEntityAttribute = class(TDNGenericImport<DNManagementEntityAttributeClass, DNManagementEntityAttribute>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNManagementMemberAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{59755F57-A148-5977-8840-004082C3337A}']
  end;

  [DNTypeName('System.Management.Instrumentation.ManagementMemberAttribute')]
  DNManagementMemberAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{541D72AD-B73A-38E0-B512-EF13FA98B26A}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNManagementMemberAttribute = class(TDNGenericImport<DNManagementMemberAttributeClass, DNManagementMemberAttribute>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNManagementCommitAttributeClass = interface(DNManagementMemberAttributeClass)
  ['{B8D91077-046F-56D9-AAAB-F02B31E58203}']
  { constructors } 

    {class} function init: DNManagementCommitAttribute;

  end;

  [DNTypeName('System.Management.Instrumentation.ManagementCommitAttribute')]
  DNManagementCommitAttribute = interface(DNManagementMemberAttribute)
  ['{B7ABE03A-04AB-3493-9620-ADD9DABADD51}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNManagementCommitAttribute = class(TDNGenericImport<DNManagementCommitAttributeClass, DNManagementCommitAttribute>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNManagementConfigurationAttributeClass = interface(DNManagementMemberAttributeClass)
  ['{47FD3ABA-8079-5593-8727-642E27719355}']
  { constructors } 

    {class} function init: DNManagementConfigurationAttribute;

  end;

  [DNTypeName('System.Management.Instrumentation.ManagementConfigurationAttribute')]
  DNManagementConfigurationAttribute = interface(DNManagementMemberAttribute)
  ['{C9B58203-A921-36F8-A54B-3CAB0F089187}']
  { getters & setters } 

    function get_Mode: DNManagementConfigurationType;
    procedure set_Mode(value: DNManagementConfigurationType);
    function get_Schema: DDN.mscorlib.DNType;
    procedure set_Schema(value: DDN.mscorlib.DNType);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Mode: DNManagementConfigurationType read get_Mode write set_Mode;
    property Schema: DDN.mscorlib.DNType read get_Schema write set_Schema;
    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNManagementConfigurationAttribute = class(TDNGenericImport<DNManagementConfigurationAttributeClass, DNManagementConfigurationAttribute>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNManagementKeyAttributeClass = interface(DNManagementMemberAttributeClass)
  ['{2B6CC536-36E9-5F3D-AF2F-D59D1A1E0075}']
  { constructors } 

    {class} function init: DNManagementKeyAttribute;

  end;

  [DNTypeName('System.Management.Instrumentation.ManagementKeyAttribute')]
  DNManagementKeyAttribute = interface(DNManagementMemberAttribute)
  ['{5CDB732B-452E-3422-A754-D76D70448B53}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNManagementKeyAttribute = class(TDNGenericImport<DNManagementKeyAttributeClass, DNManagementKeyAttribute>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNManagementNewInstanceAttributeClass = interface(DNManagementMemberAttributeClass)
  ['{90F18510-C781-5FE3-81FD-C2A07D6ACC87}']
  end;

  [DNTypeName('System.Management.Instrumentation.ManagementNewInstanceAttribute')]
  DNManagementNewInstanceAttribute = interface(DNManagementMemberAttribute)
  ['{8076768E-AF9A-3247-9486-36583F155826}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNManagementNewInstanceAttribute = class(TDNGenericImport<DNManagementNewInstanceAttributeClass, DNManagementNewInstanceAttribute>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNManagementBindAttributeClass = interface(DNManagementNewInstanceAttributeClass)
  ['{5F162B06-5FAF-5E39-9A77-5E92663FF720}']
  { constructors } 

    {class} function init: DNManagementBindAttribute;

  end;

  [DNTypeName('System.Management.Instrumentation.ManagementBindAttribute')]
  DNManagementBindAttribute = interface(DNManagementNewInstanceAttribute)
  ['{BB2DBF33-A3FD-3167-AE87-9767ADBD1641}']
  { getters & setters } 

    function get_Schema: DDN.mscorlib.DNType;
    procedure set_Schema(value: DDN.mscorlib.DNType);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Schema: DDN.mscorlib.DNType read get_Schema write set_Schema;
    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNManagementBindAttribute = class(TDNGenericImport<DNManagementBindAttributeClass, DNManagementBindAttribute>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNManagementCreateAttributeClass = interface(DNManagementNewInstanceAttributeClass)
  ['{D48D267A-B894-5FFB-B851-D0CCD265994F}']
  { constructors } 

    {class} function init: DNManagementCreateAttribute;

  end;

  [DNTypeName('System.Management.Instrumentation.ManagementCreateAttribute')]
  DNManagementCreateAttribute = interface(DNManagementNewInstanceAttribute)
  ['{73F8A513-C17A-3F82-AD39-F54E59BDC29F}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNManagementCreateAttribute = class(TDNGenericImport<DNManagementCreateAttributeClass, DNManagementCreateAttribute>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNManagementEnumeratorAttributeClass = interface(DNManagementNewInstanceAttributeClass)
  ['{A347E947-EBA6-560D-9708-DF12AD0EAB06}']
  { constructors } 

    {class} function init: DNManagementEnumeratorAttribute;

  end;

  [DNTypeName('System.Management.Instrumentation.ManagementEnumeratorAttribute')]
  DNManagementEnumeratorAttribute = interface(DNManagementNewInstanceAttribute)
  ['{35E186C4-6DF8-3C6F-8616-CBFE37BA9FE7}']
  { getters & setters } 

    function get_Schema: DDN.mscorlib.DNType;
    procedure set_Schema(value: DDN.mscorlib.DNType);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Schema: DDN.mscorlib.DNType read get_Schema write set_Schema;
    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNManagementEnumeratorAttribute = class(TDNGenericImport<DNManagementEnumeratorAttributeClass, DNManagementEnumeratorAttribute>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNManagementProbeAttributeClass = interface(DNManagementMemberAttributeClass)
  ['{38F5AE86-B09D-5FB4-A943-5A3F3154CAC8}']
  { constructors } 

    {class} function init: DNManagementProbeAttribute;

  end;

  [DNTypeName('System.Management.Instrumentation.ManagementProbeAttribute')]
  DNManagementProbeAttribute = interface(DNManagementMemberAttribute)
  ['{E4A957F4-8DE2-3250-A26E-ECE78E4102F3}']
  { getters & setters } 

    function get_Schema: DDN.mscorlib.DNType;
    procedure set_Schema(value: DDN.mscorlib.DNType);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Schema: DDN.mscorlib.DNType read get_Schema write set_Schema;
    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNManagementProbeAttribute = class(TDNGenericImport<DNManagementProbeAttributeClass, DNManagementProbeAttribute>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNManagementRemoveAttributeClass = interface(DNManagementMemberAttributeClass)
  ['{72ADFF59-862B-556B-9C7B-E62D256BE900}']
  { constructors } 

    {class} function init: DNManagementRemoveAttribute;

  end;

  [DNTypeName('System.Management.Instrumentation.ManagementRemoveAttribute')]
  DNManagementRemoveAttribute = interface(DNManagementMemberAttribute)
  ['{844E4DBB-F830-3531-AE85-3BE9B5482F16}']
  { getters & setters } 

    function get_Schema: DDN.mscorlib.DNType;
    procedure set_Schema(value: DDN.mscorlib.DNType);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Schema: DDN.mscorlib.DNType read get_Schema write set_Schema;
    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNManagementRemoveAttribute = class(TDNGenericImport<DNManagementRemoveAttributeClass, DNManagementRemoveAttribute>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNManagementTaskAttributeClass = interface(DNManagementMemberAttributeClass)
  ['{98BB1A4E-4B7E-540D-8AAD-CFB24D799521}']
  { constructors } 

    {class} function init: DNManagementTaskAttribute;

  end;

  [DNTypeName('System.Management.Instrumentation.ManagementTaskAttribute')]
  DNManagementTaskAttribute = interface(DNManagementMemberAttribute)
  ['{0BBF46BB-50BA-362E-B2CA-07299AD6636B}']
  { getters & setters } 

    function get_Schema: DDN.mscorlib.DNType;
    procedure set_Schema(value: DDN.mscorlib.DNType);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Schema: DDN.mscorlib.DNType read get_Schema write set_Schema;
    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNManagementTaskAttribute = class(TDNGenericImport<DNManagementTaskAttributeClass, DNManagementTaskAttribute>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNManagementNameAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{4D97168D-71C7-59BB-B7C4-1F897DB29557}']
  { constructors } 

    {class} function init(name: string): DNManagementNameAttribute;

  end;

  [DNTypeName('System.Management.Instrumentation.ManagementNameAttribute')]
  DNManagementNameAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{CC5D0CBD-863A-3CFD-97BF-E647B0F8A364}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNManagementNameAttribute = class(TDNGenericImport<DNManagementNameAttributeClass, DNManagementNameAttribute>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNManagementReferenceAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{F87D6FC2-FAD2-505F-BF22-D1937C134A83}']
  { constructors } 

    {class} function init: DNManagementReferenceAttribute;

  end;

  [DNTypeName('System.Management.Instrumentation.ManagementReferenceAttribute')]
  DNManagementReferenceAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{3A6AF516-8364-331F-B48A-EBD46FC4FBFE}']
  { getters & setters } 

    function get_Type: string;
    procedure set_Type(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: string read get_Type write set_Type;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNManagementReferenceAttribute = class(TDNGenericImport<DNManagementReferenceAttributeClass, DNManagementReferenceAttribute>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNWmiConfigurationAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{68A425D3-CBA3-5AD6-9FA4-6FA9A37794A0}']
  { constructors } 

    {class} function init(scope: string): DNWmiConfigurationAttribute;

  end;

  [DNTypeName('System.Management.Instrumentation.WmiConfigurationAttribute')]
  DNWmiConfigurationAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{80563157-8A58-3AB9-9F89-83209A273D90}']
  { getters & setters } 

    function get_SecurityRestriction: string;
    procedure set_SecurityRestriction(value: string);
    function get_NamespaceSecurity: string;
    procedure set_NamespaceSecurity(value: string);
    function get_IdentifyLevel: Boolean;
    procedure set_IdentifyLevel(value: Boolean);
    function get_HostingModel: DNManagementHostingModel;
    procedure set_HostingModel(value: DNManagementHostingModel);
    function get_HostingGroup: string;
    procedure set_HostingGroup(value: string);
    function get_Scope: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SecurityRestriction: string read get_SecurityRestriction write set_SecurityRestriction;
    property NamespaceSecurity: string read get_NamespaceSecurity write set_NamespaceSecurity;
    property IdentifyLevel: Boolean read get_IdentifyLevel write set_IdentifyLevel;
    property HostingModel: DNManagementHostingModel read get_HostingModel write set_HostingModel;
    property HostingGroup: string read get_HostingGroup write set_HostingGroup;
    property Scope: string read get_Scope;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNWmiConfigurationAttribute = class(TDNGenericImport<DNWmiConfigurationAttributeClass, DNWmiConfigurationAttribute>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDynamicAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{1A8F6EA3-A351-5A4C-94BE-2633A5B44677}']
  { constructors } 

    {class} function init: DNDynamicAttribute; overload;
    {class} function init(transformFlags: TArray<Boolean>): DNDynamicAttribute; overload;

  end;

  [DNTypeName('System.Runtime.CompilerServices.DynamicAttribute')]
  DNDynamicAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{F36032CB-ED1F-3C03-9481-AD3F370F33B6}']
  { getters & setters } 

    function get_TransformFlags: DDN.mscorlib.DNIList<Boolean>;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TransformFlags: DDN.mscorlib.DNIList<Boolean> read get_TransformFlags;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDynamicAttribute = class(TDNGenericImport<DNDynamicAttributeClass, DNDynamicAttribute>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNHashSetClass<T> = interface(DNObjectClass)
  ['{8B38CB70-C951-554A-BE2D-CE908C0A65D5}']
  { constructors } 

    {class} function init: DNHashSet<T>; overload;
    {class} function init(capacity: Int32): DNHashSet<T>; overload;
    {class} function init(comparer: DDN.mscorlib.DNIEqualityComparer<T>): DNHashSet<T>; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<T>): DNHashSet<T>; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<T>; comparer: DDN.mscorlib.DNIEqualityComparer<T>): DNHashSet<T>; overload;
    {class} function init(capacity: Int32; comparer: DDN.mscorlib.DNIEqualityComparer<T>): DNHashSet<T>; overload;

  { static methods } 

    {class} function CreateSetComparer: DDN.mscorlib.DNIEqualityComparer<DNHashSet<T>>;

  end;

  [DNTypeName('System.Collections.Generic.HashSet`1')]
  DNHashSet<T> = interface(DDN.mscorlib.DNICollection<T>)
  ['{3160CAC9-56AB-3595-8B2F-EBB706278EEF}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Comparer: DDN.mscorlib.DNIEqualityComparer<T>;

  { methods } 

    function &Contains(item: T): Boolean;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32); overload;
    function GetEnumerator: DNHashSet_Enumerator<T>;
    procedure UnionWith(other: DDN.mscorlib.DNIEnumerable<T>);
    procedure CopyTo(&array: TArray<T>); overload;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32; count: Int32); overload;
    procedure TrimExcess;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    function TryGetValue(equalValue: T; out actualValue: T): Boolean;
    procedure IntersectWith(other: DDN.mscorlib.DNIEnumerable<T>);
    procedure ExceptWith(other: DDN.mscorlib.DNIEnumerable<T>);
    procedure SymmetricExceptWith(other: DDN.mscorlib.DNIEnumerable<T>);
    function IsSubsetOf(other: DDN.mscorlib.DNIEnumerable<T>): Boolean;
    function IsProperSubsetOf(other: DDN.mscorlib.DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DDN.mscorlib.DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DDN.mscorlib.DNIEnumerable<T>): Boolean;
    function Overlaps(other: DDN.mscorlib.DNIEnumerable<T>): Boolean;
    function SetEquals(other: DDN.mscorlib.DNIEnumerable<T>): Boolean;
    function RemoveWhere(match: DDN.mscorlib.DNPredicate<T>): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Comparer: DDN.mscorlib.DNIEqualityComparer<T> read get_Comparer;
  end;

  TDNHashSet<T> = class(TDNGenericImport<DNHashSetClass<T>, DNHashSet<T>>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCngPropertyCollectionClass = interface(DDN.mscorlib.DNCollectionClass<DNCngProperty>)
  ['{AF936CFE-89D2-5C69-ABD9-21FFB145A2D2}']
  { constructors } 

    {class} function init: DNCngPropertyCollection;

  end;

  [DNTypeName('System.Security.Cryptography.CngPropertyCollection')]
  DNCngPropertyCollection = interface(DDN.mscorlib.DNCollection<DNCngProperty>)
  ['{9C7A6B6C-BCCD-32D0-B423-71F1B9DFDD61}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure CopyTo(&array: TArray<DNCngProperty>; index: Int32);
    function &Contains(item: DNCngProperty): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNCngProperty>;
    function IndexOf(item: DNCngProperty): Int32;
    procedure Insert(index: Int32; item: DNCngProperty);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNCngPropertyCollection = class(TDNGenericImport<DNCngPropertyCollectionClass, DNCngPropertyCollection>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNManifestSignatureInformationCollectionClass = interface(DDN.mscorlib.DNReadOnlyCollectionClass<DNManifestSignatureInformation>)
  ['{208DB70B-AC9E-5B40-B212-B0CB1E5751E8}']
  end;

  [DNTypeName('System.Security.Cryptography.ManifestSignatureInformationCollection')]
  DNManifestSignatureInformationCollection = interface(DDN.mscorlib.DNReadOnlyCollection<DNManifestSignatureInformation>)
  ['{5A2850E9-7246-3A11-A348-8462B4BB27FB}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function &Contains(value: DNManifestSignatureInformation): Boolean;
    procedure CopyTo(&array: TArray<DNManifestSignatureInformation>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNManifestSignatureInformation>;
    function IndexOf(value: DNManifestSignatureInformation): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNManifestSignatureInformationCollection = class(TDNGenericImport<DNManifestSignatureInformationCollectionClass, DNManifestSignatureInformationCollection>) end;

  //-------------namespace: System.Diagnostics.Eventing----------------
  DNEventProviderClass = interface(DNObjectClass)
  ['{52A96496-DC6F-5787-82E7-132A601C54B6}']
  { constructors } 

    {class} function init(providerGuid: DDN.mscorlib.DNGuid): DNEventProvider;

  { static methods } 

    {class} function GetLastWriteEventError: DNEventProvider_WriteEventErrorCode;
    {class} procedure SetActivityId(out id: DDN.mscorlib.DNGuid);
    {class} function CreateActivityId: DDN.mscorlib.DNGuid;

  end;

  [DNTypeName('System.Diagnostics.Eventing.EventProvider')]
  DNEventProvider = interface(DDN.mscorlib.DNIDisposable)
  ['{9934463F-339F-3087-AD9D-198169B01C5B}']
  { methods } 

    procedure Dispose;
    procedure Close;
    function IsEnabled: Boolean; overload;
    function IsEnabled(level: Byte; keywords: Int64): Boolean; overload;
    function WriteMessageEvent(eventMessage: string; eventLevel: Byte; eventKeywords: Int64): Boolean; overload;
    function WriteMessageEvent(eventMessage: string): Boolean; overload;
    function WriteEvent(out eventDescriptor: DNEventDescriptor; eventPayload: TArray<DDN.mscorlib.DNObject>): Boolean; overload;
    function WriteEvent(out eventDescriptor: DNEventDescriptor; data: string): Boolean; overload;
    function WriteTransferEvent(out eventDescriptor: DNEventDescriptor; relatedActivityId: DDN.mscorlib.DNGuid; eventPayload: TArray<DDN.mscorlib.DNObject>): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEventProvider = class(TDNGenericImport<DNEventProviderClass, DNEventProvider>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventBookmarkClass = interface(DNObjectClass)
  ['{39002AEE-596A-5072-A5C9-C5223D4DF7F5}']
  end;

  [DNTypeName('System.Diagnostics.Eventing.Reader.EventBookmark')]
  DNEventBookmark = interface(DDN.mscorlib.DNISerializable)
  ['{3898E01B-7819-3A8A-9BCA-03F4E8CEADEB}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEventBookmark = class(TDNGenericImport<DNEventBookmarkClass, DNEventBookmark>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventKeywordClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6F266642-F04C-5C87-823F-B8FE8C2DBE7F}']
  end;

  [DNTypeName('System.Diagnostics.Eventing.Reader.EventKeyword')]
  DNEventKeyword = interface(DDN.mscorlib.DNObject)
  ['{371D98BB-FAB8-36C5-A58E-C0EFA52BA550}']
  { getters & setters } 

    function get_Name: string;
    function get_Value: Int64;
    function get_DisplayName: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Value: Int64 read get_Value;
    property DisplayName: string read get_DisplayName;
  end;

  TDNEventKeyword = class(TDNGenericImport<DNEventKeywordClass, DNEventKeyword>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLevelClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D31EE6C8-2755-501D-809E-5126F3B108AA}']
  end;

  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLevel')]
  DNEventLevel = interface(DDN.mscorlib.DNObject)
  ['{3F7F447B-B55B-305D-A1E4-EB9A9840F592}']
  { getters & setters } 

    function get_Name: string;
    function get_Value: Int32;
    function get_DisplayName: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Value: Int32 read get_Value;
    property DisplayName: string read get_DisplayName;
  end;

  TDNEventLevel = class(TDNGenericImport<DNEventLevelClass, DNEventLevel>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLogConfigurationClass = interface(DNObjectClass)
  ['{A940016F-8202-52A2-B940-B3F8C3CFB0C0}']
  { constructors } 

    {class} function init(logName: string): DNEventLogConfiguration; overload;
    {class} function init(logName: string; session: DNEventLogSession): DNEventLogConfiguration; overload;

  end;

  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogConfiguration')]
  DNEventLogConfiguration = interface(DDN.mscorlib.DNIDisposable)
  ['{757E9EE3-FA81-37D6-A4B9-92DA6996789F}']
  { getters & setters } 

    function get_LogName: string;
    function get_LogType: DNEventLogType;
    function get_LogIsolation: DNEventLogIsolation;
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_IsClassicLog: Boolean;
    function get_SecurityDescriptor: string;
    procedure set_SecurityDescriptor(value: string);
    function get_LogFilePath: string;
    procedure set_LogFilePath(value: string);
    function get_MaximumSizeInBytes: Int64;
    procedure set_MaximumSizeInBytes(value: Int64);
    function get_LogMode: DNEventLogMode;
    procedure set_LogMode(value: DNEventLogMode);
    function get_OwningProviderName: string;
    function get_ProviderNames: DDN.mscorlib.DNIEnumerable<string>;
    function get_ProviderLevel: DDN.mscorlib.DNNullable<Int32>;
    procedure set_ProviderLevel(value: DDN.mscorlib.DNNullable<Int32>);
    function get_ProviderKeywords: DDN.mscorlib.DNNullable<Int64>;
    procedure set_ProviderKeywords(value: DDN.mscorlib.DNNullable<Int64>);
    function get_ProviderBufferSize: DDN.mscorlib.DNNullable<Int32>;
    function get_ProviderMinimumNumberOfBuffers: DDN.mscorlib.DNNullable<Int32>;
    function get_ProviderMaximumNumberOfBuffers: DDN.mscorlib.DNNullable<Int32>;
    function get_ProviderLatency: DDN.mscorlib.DNNullable<Int32>;
    function get_ProviderControlGuid: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid>;

  { methods } 

    procedure SaveChanges;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LogName: string read get_LogName;
    property LogType: DNEventLogType read get_LogType;
    property LogIsolation: DNEventLogIsolation read get_LogIsolation;
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    property IsClassicLog: Boolean read get_IsClassicLog;
    property SecurityDescriptor: string read get_SecurityDescriptor write set_SecurityDescriptor;
    property LogFilePath: string read get_LogFilePath write set_LogFilePath;
    property MaximumSizeInBytes: Int64 read get_MaximumSizeInBytes write set_MaximumSizeInBytes;
    property LogMode: DNEventLogMode read get_LogMode write set_LogMode;
    property OwningProviderName: string read get_OwningProviderName;
    property ProviderNames: DDN.mscorlib.DNIEnumerable<string> read get_ProviderNames;
    property ProviderLevel: DDN.mscorlib.DNNullable<Int32> read get_ProviderLevel write set_ProviderLevel;
    property ProviderKeywords: DDN.mscorlib.DNNullable<Int64> read get_ProviderKeywords write set_ProviderKeywords;
    property ProviderBufferSize: DDN.mscorlib.DNNullable<Int32> read get_ProviderBufferSize;
    property ProviderMinimumNumberOfBuffers: DDN.mscorlib.DNNullable<Int32> read get_ProviderMinimumNumberOfBuffers;
    property ProviderMaximumNumberOfBuffers: DDN.mscorlib.DNNullable<Int32> read get_ProviderMaximumNumberOfBuffers;
    property ProviderLatency: DDN.mscorlib.DNNullable<Int32> read get_ProviderLatency;
    property ProviderControlGuid: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid> read get_ProviderControlGuid;
  end;

  TDNEventLogConfiguration = class(TDNGenericImport<DNEventLogConfigurationClass, DNEventLogConfiguration>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLogInformationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{51596AD5-E55C-50FE-B5E0-160F79AFA2EF}']
  end;

  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogInformation')]
  DNEventLogInformation = interface(DDN.mscorlib.DNObject)
  ['{C90F1181-30C8-38E5-9EC4-E3788587A4ED}']
  { getters & setters } 

    function get_CreationTime: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime>;
    function get_LastAccessTime: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime>;
    function get_LastWriteTime: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime>;
    function get_FileSize: DDN.mscorlib.DNNullable<Int64>;
    function get_Attributes: DDN.mscorlib.DNNullable<Int32>;
    function get_RecordCount: DDN.mscorlib.DNNullable<Int64>;
    function get_OldestRecordNumber: DDN.mscorlib.DNNullable<Int64>;
    function get_IsLogFull: DDN.mscorlib.DNNullable<Boolean>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CreationTime: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime> read get_CreationTime;
    property LastAccessTime: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime> read get_LastAccessTime;
    property LastWriteTime: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime> read get_LastWriteTime;
    property FileSize: DDN.mscorlib.DNNullable<Int64> read get_FileSize;
    property Attributes: DDN.mscorlib.DNNullable<Int32> read get_Attributes;
    property RecordCount: DDN.mscorlib.DNNullable<Int64> read get_RecordCount;
    property OldestRecordNumber: DDN.mscorlib.DNNullable<Int64> read get_OldestRecordNumber;
    property IsLogFull: DDN.mscorlib.DNNullable<Boolean> read get_IsLogFull;
  end;

  TDNEventLogInformation = class(TDNGenericImport<DNEventLogInformationClass, DNEventLogInformation>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLogLinkClass = interface(DDN.mscorlib.DNObjectClass)
  ['{38E4F3DA-8620-5652-9011-F1338A7C0520}']
  end;

  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogLink')]
  DNEventLogLink = interface(DDN.mscorlib.DNObject)
  ['{FD4CD649-8864-3E93-A0E6-284E537B1625}']
  { getters & setters } 

    function get_LogName: string;
    function get_IsImported: Boolean;
    function get_DisplayName: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LogName: string read get_LogName;
    property IsImported: Boolean read get_IsImported;
    property DisplayName: string read get_DisplayName;
  end;

  TDNEventLogLink = class(TDNGenericImport<DNEventLogLinkClass, DNEventLogLink>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLogPropertySelectorClass = interface(DNObjectClass)
  ['{BCCF9178-6F87-5F3A-95B1-A1E763CD03F0}']
  { constructors } 

    {class} function init(propertyQueries: DDN.mscorlib.DNIEnumerable<string>): DNEventLogPropertySelector;

  end;

  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogPropertySelector')]
  DNEventLogPropertySelector = interface(DDN.mscorlib.DNIDisposable)
  ['{2D01384E-A1DB-3E28-A8A3-8CBF27382A39}']
  { methods } 

    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEventLogPropertySelector = class(TDNGenericImport<DNEventLogPropertySelectorClass, DNEventLogPropertySelector>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLogQueryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BD8EFA8B-A362-56CB-831C-935FF649BEFD}']
  { constructors } 

    {class} function init(path: string; pathType: DNPathType): DNEventLogQuery; overload;
    {class} function init(path: string; pathType: DNPathType; query: string): DNEventLogQuery; overload;

  end;

  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogQuery')]
  DNEventLogQuery = interface(DDN.mscorlib.DNObject)
  ['{4A584020-F65A-3E95-86A7-EA767D7651EF}']
  { getters & setters } 

    function get_Session: DNEventLogSession;
    procedure set_Session(value: DNEventLogSession);
    function get_TolerateQueryErrors: Boolean;
    procedure set_TolerateQueryErrors(value: Boolean);
    function get_ReverseDirection: Boolean;
    procedure set_ReverseDirection(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Session: DNEventLogSession read get_Session write set_Session;
    property TolerateQueryErrors: Boolean read get_TolerateQueryErrors write set_TolerateQueryErrors;
    property ReverseDirection: Boolean read get_ReverseDirection write set_ReverseDirection;
  end;

  TDNEventLogQuery = class(TDNGenericImport<DNEventLogQueryClass, DNEventLogQuery>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLogReaderClass = interface(DNObjectClass)
  ['{E4F6B822-D8B5-5C77-9DD3-290B5041CB30}']
  { constructors } 

    {class} function init(path: string): DNEventLogReader; overload;
    {class} function init(path: string; pathType: DNPathType): DNEventLogReader; overload;
    {class} function init(eventQuery: DNEventLogQuery): DNEventLogReader; overload;
    {class} function init(eventQuery: DNEventLogQuery; bookmark: DNEventBookmark): DNEventLogReader; overload;

  end;

  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogReader')]
  DNEventLogReader = interface(DDN.mscorlib.DNIDisposable)
  ['{E6AD8EF9-89FE-3054-A2FC-C268C003E5AF}']
  { getters & setters } 

    function get_BatchSize: Int32;
    procedure set_BatchSize(value: Int32);
    function get_LogStatus: DDN.mscorlib.DNIList<DNEventLogStatus>;

  { methods } 

    function ReadEvent: DNEventRecord; overload;
    function ReadEvent(timeout: DDN.mscorlib.DNTimeSpan): DNEventRecord; overload;
    procedure Dispose;
    procedure Seek(bookmark: DNEventBookmark); overload;
    procedure Seek(bookmark: DNEventBookmark; offset: Int64); overload;
    procedure Seek(origin: DDN.mscorlib.DNSeekOrigin; offset: Int64); overload;
    procedure CancelReading;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BatchSize: Int32 read get_BatchSize write set_BatchSize;
    property LogStatus: DDN.mscorlib.DNIList<DNEventLogStatus> read get_LogStatus;
  end;

  TDNEventLogReader = class(TDNGenericImport<DNEventLogReaderClass, DNEventLogReader>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLogSessionClass = interface(DNObjectClass)
  ['{8F82BBE7-5026-5E3D-9AF6-FBD5EDF8772E}']
  { static getter & setter } 

    {class} function get_GlobalSession: DNEventLogSession;

  { constructors } 

    {class} function init: DNEventLogSession; overload;
    {class} function init(server: string): DNEventLogSession; overload;
    {class} function init(server: string; domain: string; user: string; password: DDN.mscorlib.DNSecureString; logOnType: DNSessionAuthentication): DNEventLogSession; overload;

  { static propertys } 

    {class} property GlobalSession: DNEventLogSession read get_GlobalSession;
  end;

  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogSession')]
  DNEventLogSession = interface(DDN.mscorlib.DNIDisposable)
  ['{3C24798A-F126-32DD-8BE7-9F13FC43C203}']
  { methods } 

    procedure Dispose;
    procedure CancelCurrentOperations;
    function GetLogInformation(logName: string; pathType: DNPathType): DNEventLogInformation;
    procedure ExportLog(path: string; pathType: DNPathType; query: string; targetFilePath: string); overload;
    procedure ExportLog(path: string; pathType: DNPathType; query: string; targetFilePath: string; tolerateQueryErrors: Boolean); overload;
    procedure ExportLogAndMessages(path: string; pathType: DNPathType; query: string; targetFilePath: string); overload;
    procedure ExportLogAndMessages(path: string; pathType: DNPathType; query: string; targetFilePath: string; tolerateQueryErrors: Boolean; targetCultureInfo: DDN.mscorlib.DNCultureInfo); overload;
    procedure ClearLog(logName: string); overload;
    procedure ClearLog(logName: string; backupPath: string); overload;
    function GetProviderNames: DDN.mscorlib.DNIEnumerable<string>;
    function GetLogNames: DDN.mscorlib.DNIEnumerable<string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEventLogSession = class(TDNGenericImport<DNEventLogSessionClass, DNEventLogSession>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLogStatusClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B4DA3F1B-6354-5E9E-8086-85752C5A9D76}']
  end;

  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogStatus')]
  DNEventLogStatus = interface(DDN.mscorlib.DNObject)
  ['{88451979-703B-3DF0-90AD-5415C3585A5D}']
  { getters & setters } 

    function get_LogName: string;
    function get_StatusCode: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LogName: string read get_LogName;
    property StatusCode: Int32 read get_StatusCode;
  end;

  TDNEventLogStatus = class(TDNGenericImport<DNEventLogStatusClass, DNEventLogStatus>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLogWatcherClass = interface(DNObjectClass)
  ['{3A05D279-C451-5811-996D-15F67A823DF8}']
  { constructors } 

    {class} function init(path: string): DNEventLogWatcher; overload;
    {class} function init(eventQuery: DNEventLogQuery): DNEventLogWatcher; overload;
    {class} function init(eventQuery: DNEventLogQuery; bookmark: DNEventBookmark): DNEventLogWatcher; overload;
    {class} function init(eventQuery: DNEventLogQuery; bookmark: DNEventBookmark; readExistingEvents: Boolean): DNEventLogWatcher; overload;

  end;

  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogWatcher')]
  DNEventLogWatcher = interface(DDN.mscorlib.DNIDisposable)
  ['{840AAF0A-18CB-3E84-BFF9-35027204183B}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);

  { events } 

    procedure add_EventRecordWritten(value: DDN.mscorlib.DNEventHandler<DNEventRecordWrittenEventArgs>);
    procedure remove_EventRecordWritten(value: DDN.mscorlib.DNEventHandler<DNEventRecordWrittenEventArgs>);

  { methods } 

    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Enabled: Boolean read get_Enabled write set_Enabled;
  end;

  TDNEventLogWatcher = class(TDNGenericImport<DNEventLogWatcherClass, DNEventLogWatcher>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventMetadataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{21C585C0-4952-5EF3-A535-C3C7BAD37275}']
  end;

  [DNTypeName('System.Diagnostics.Eventing.Reader.EventMetadata')]
  DNEventMetadata = interface(DDN.mscorlib.DNObject)
  ['{CCB3CDCA-6F23-3A21-93B3-DDF1168F0BEE}']
  { getters & setters } 

    function get_Id: Int64;
    function get_Version: Byte;
    function get_LogLink: DNEventLogLink;
    function get_Level: DNEventLevel;
    function get_Opcode: DNEventOpcode;
    function get_Task: DNEventTask;
    function get_Keywords: DDN.mscorlib.DNIEnumerable<DNEventKeyword>;
    function get_Template: string;
    function get_Description: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: Int64 read get_Id;
    property Version: Byte read get_Version;
    property LogLink: DNEventLogLink read get_LogLink;
    property Level: DNEventLevel read get_Level;
    property Opcode: DNEventOpcode read get_Opcode;
    property Task: DNEventTask read get_Task;
    property Keywords: DDN.mscorlib.DNIEnumerable<DNEventKeyword> read get_Keywords;
    property Template: string read get_Template;
    property Description: string read get_Description;
  end;

  TDNEventMetadata = class(TDNGenericImport<DNEventMetadataClass, DNEventMetadata>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventOpcodeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7C75009D-6A5E-5A1E-A6AA-7348DA829EB9}']
  end;

  [DNTypeName('System.Diagnostics.Eventing.Reader.EventOpcode')]
  DNEventOpcode = interface(DDN.mscorlib.DNObject)
  ['{2CB6009E-42C8-3ABB-BE5F-5BC2878C566F}']
  { getters & setters } 

    function get_Name: string;
    function get_Value: Int32;
    function get_DisplayName: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Value: Int32 read get_Value;
    property DisplayName: string read get_DisplayName;
  end;

  TDNEventOpcode = class(TDNGenericImport<DNEventOpcodeClass, DNEventOpcode>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5A2AAA9A-2722-5C54-B65F-1C3A60DFAE60}']
  end;

  [DNTypeName('System.Diagnostics.Eventing.Reader.EventProperty')]
  DNEventProperty = interface(DDN.mscorlib.DNObject)
  ['{4186473A-2A29-3A1C-B8D1-AC00A4785166}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: DDN.mscorlib.DNObject read get_Value;
  end;

  TDNEventProperty = class(TDNGenericImport<DNEventPropertyClass, DNEventProperty>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventRecordClass = interface(DNObjectClass)
  ['{217D5B4B-BCD4-52DB-BA8E-D334EB4D7851}']
  end;

  [DNTypeName('System.Diagnostics.Eventing.Reader.EventRecord')]
  DNEventRecord = interface(DDN.mscorlib.DNIDisposable)
  ['{E73161FA-BE10-3479-A361-836D561BCBD3}']
  { getters & setters } 

    function get_Id: Int32;
    function get_Version: DDN.mscorlib.DNNullable<Byte>;
    function get_Level: DDN.mscorlib.DNNullable<Byte>;
    function get_Task: DDN.mscorlib.DNNullable<Int32>;
    function get_Opcode: DDN.mscorlib.DNNullable<Int16>;
    function get_Keywords: DDN.mscorlib.DNNullable<Int64>;
    function get_RecordId: DDN.mscorlib.DNNullable<Int64>;
    function get_ProviderName: string;
    function get_ProviderId: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid>;
    function get_LogName: string;
    function get_ProcessId: DDN.mscorlib.DNNullable<Int32>;
    function get_ThreadId: DDN.mscorlib.DNNullable<Int32>;
    function get_MachineName: string;
    function get_UserId: DDN.mscorlib.DNSecurityIdentifier;
    function get_TimeCreated: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime>;
    function get_ActivityId: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid>;
    function get_RelatedActivityId: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid>;
    function get_Qualifiers: DDN.mscorlib.DNNullable<Int32>;
    function get_LevelDisplayName: string;
    function get_OpcodeDisplayName: string;
    function get_TaskDisplayName: string;
    function get_KeywordsDisplayNames: DDN.mscorlib.DNIEnumerable<string>;
    function get_Bookmark: DNEventBookmark;
    function get_Properties: DDN.mscorlib.DNIList<DNEventProperty>;

  { methods } 

    procedure Dispose;
    function FormatDescription: string; overload;
    function FormatDescription(values: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNObject>): string; overload;
    function ToXml: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: Int32 read get_Id;
    property Version: DDN.mscorlib.DNNullable<Byte> read get_Version;
    property Level: DDN.mscorlib.DNNullable<Byte> read get_Level;
    property Task: DDN.mscorlib.DNNullable<Int32> read get_Task;
    property Opcode: DDN.mscorlib.DNNullable<Int16> read get_Opcode;
    property Keywords: DDN.mscorlib.DNNullable<Int64> read get_Keywords;
    property RecordId: DDN.mscorlib.DNNullable<Int64> read get_RecordId;
    property ProviderName: string read get_ProviderName;
    property ProviderId: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid> read get_ProviderId;
    property LogName: string read get_LogName;
    property ProcessId: DDN.mscorlib.DNNullable<Int32> read get_ProcessId;
    property ThreadId: DDN.mscorlib.DNNullable<Int32> read get_ThreadId;
    property MachineName: string read get_MachineName;
    property UserId: DDN.mscorlib.DNSecurityIdentifier read get_UserId;
    property TimeCreated: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime> read get_TimeCreated;
    property ActivityId: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid> read get_ActivityId;
    property RelatedActivityId: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid> read get_RelatedActivityId;
    property Qualifiers: DDN.mscorlib.DNNullable<Int32> read get_Qualifiers;
    property LevelDisplayName: string read get_LevelDisplayName;
    property OpcodeDisplayName: string read get_OpcodeDisplayName;
    property TaskDisplayName: string read get_TaskDisplayName;
    property KeywordsDisplayNames: DDN.mscorlib.DNIEnumerable<string> read get_KeywordsDisplayNames;
    property Bookmark: DNEventBookmark read get_Bookmark;
    property Properties: DDN.mscorlib.DNIList<DNEventProperty> read get_Properties;
  end;

  TDNEventRecord = class(TDNGenericImport<DNEventRecordClass, DNEventRecord>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLogRecordClass = interface(DNEventRecordClass)
  ['{7262A67E-8E87-5ABB-BCF0-3146A49890DF}']
  end;

  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogRecord')]
  DNEventLogRecord = interface(DNEventRecord)
  ['{8BDD331B-2C91-34BF-9741-79F8947F4BFB}']
  { getters & setters } 

    function get_Id: Int32;
    function get_Version: DDN.mscorlib.DNNullable<Byte>;
    function get_Qualifiers: DDN.mscorlib.DNNullable<Int32>;
    function get_Level: DDN.mscorlib.DNNullable<Byte>;
    function get_Task: DDN.mscorlib.DNNullable<Int32>;
    function get_Opcode: DDN.mscorlib.DNNullable<Int16>;
    function get_Keywords: DDN.mscorlib.DNNullable<Int64>;
    function get_RecordId: DDN.mscorlib.DNNullable<Int64>;
    function get_ProviderName: string;
    function get_ProviderId: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid>;
    function get_LogName: string;
    function get_ProcessId: DDN.mscorlib.DNNullable<Int32>;
    function get_ThreadId: DDN.mscorlib.DNNullable<Int32>;
    function get_MachineName: string;
    function get_UserId: DDN.mscorlib.DNSecurityIdentifier;
    function get_TimeCreated: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime>;
    function get_ActivityId: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid>;
    function get_RelatedActivityId: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid>;
    function get_ContainerLog: string;
    function get_MatchedQueryIds: DDN.mscorlib.DNIEnumerable<Int32>;
    function get_Bookmark: DNEventBookmark;
    function get_LevelDisplayName: string;
    function get_OpcodeDisplayName: string;
    function get_TaskDisplayName: string;
    function get_KeywordsDisplayNames: DDN.mscorlib.DNIEnumerable<string>;
    function get_Properties: DDN.mscorlib.DNIList<DNEventProperty>;

  { methods } 

    function FormatDescription: string; overload;
    function GetPropertyValues(propertySelector: DNEventLogPropertySelector): DDN.mscorlib.DNIList<DDN.mscorlib.DNObject>;
    function ToXml: string;
    function FormatDescription(values: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNObject>): string; overload;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: Int32 read get_Id;
    property Version: DDN.mscorlib.DNNullable<Byte> read get_Version;
    property Qualifiers: DDN.mscorlib.DNNullable<Int32> read get_Qualifiers;
    property Level: DDN.mscorlib.DNNullable<Byte> read get_Level;
    property Task: DDN.mscorlib.DNNullable<Int32> read get_Task;
    property Opcode: DDN.mscorlib.DNNullable<Int16> read get_Opcode;
    property Keywords: DDN.mscorlib.DNNullable<Int64> read get_Keywords;
    property RecordId: DDN.mscorlib.DNNullable<Int64> read get_RecordId;
    property ProviderName: string read get_ProviderName;
    property ProviderId: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid> read get_ProviderId;
    property LogName: string read get_LogName;
    property ProcessId: DDN.mscorlib.DNNullable<Int32> read get_ProcessId;
    property ThreadId: DDN.mscorlib.DNNullable<Int32> read get_ThreadId;
    property MachineName: string read get_MachineName;
    property UserId: DDN.mscorlib.DNSecurityIdentifier read get_UserId;
    property TimeCreated: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime> read get_TimeCreated;
    property ActivityId: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid> read get_ActivityId;
    property RelatedActivityId: DDN.mscorlib.DNNullable<DDN.mscorlib.DNGuid> read get_RelatedActivityId;
    property ContainerLog: string read get_ContainerLog;
    property MatchedQueryIds: DDN.mscorlib.DNIEnumerable<Int32> read get_MatchedQueryIds;
    property Bookmark: DNEventBookmark read get_Bookmark;
    property LevelDisplayName: string read get_LevelDisplayName;
    property OpcodeDisplayName: string read get_OpcodeDisplayName;
    property TaskDisplayName: string read get_TaskDisplayName;
    property KeywordsDisplayNames: DDN.mscorlib.DNIEnumerable<string> read get_KeywordsDisplayNames;
    property Properties: DDN.mscorlib.DNIList<DNEventProperty> read get_Properties;
  end;

  TDNEventLogRecord = class(TDNGenericImport<DNEventLogRecordClass, DNEventLogRecord>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventTaskClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F21A0E3F-BE10-57E3-B092-5C4DA4A1DDE7}']
  end;

  [DNTypeName('System.Diagnostics.Eventing.Reader.EventTask')]
  DNEventTask = interface(DDN.mscorlib.DNObject)
  ['{5A496A36-9B9E-36DC-8D3E-94EA24CB7B32}']
  { getters & setters } 

    function get_Name: string;
    function get_Value: Int32;
    function get_DisplayName: string;
    function get_EventGuid: DDN.mscorlib.DNGuid;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Value: Int32 read get_Value;
    property DisplayName: string read get_DisplayName;
    property EventGuid: DDN.mscorlib.DNGuid read get_EventGuid;
  end;

  TDNEventTask = class(TDNGenericImport<DNEventTaskClass, DNEventTask>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNProviderMetadataClass = interface(DNObjectClass)
  ['{72DC5594-2E19-5649-BC22-80DB812B851C}']
  { constructors } 

    {class} function init(providerName: string): DNProviderMetadata; overload;
    {class} function init(providerName: string; session: DNEventLogSession; targetCultureInfo: DDN.mscorlib.DNCultureInfo): DNProviderMetadata; overload;

  end;

  [DNTypeName('System.Diagnostics.Eventing.Reader.ProviderMetadata')]
  DNProviderMetadata = interface(DDN.mscorlib.DNIDisposable)
  ['{16D04670-7CD4-3BDB-974A-5138AB990FDB}']
  { getters & setters } 

    function get_Name: string;
    function get_Id: DDN.mscorlib.DNGuid;
    function get_MessageFilePath: string;
    function get_ResourceFilePath: string;
    function get_ParameterFilePath: string;
    function get_HelpLink: DDN.System.DNUri;
    function get_DisplayName: string;
    function get_LogLinks: DDN.mscorlib.DNIList<DNEventLogLink>;
    function get_Levels: DDN.mscorlib.DNIList<DNEventLevel>;
    function get_Opcodes: DDN.mscorlib.DNIList<DNEventOpcode>;
    function get_Keywords: DDN.mscorlib.DNIList<DNEventKeyword>;
    function get_Tasks: DDN.mscorlib.DNIList<DNEventTask>;
    function get_Events: DDN.mscorlib.DNIEnumerable<DNEventMetadata>;

  { methods } 

    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Id: DDN.mscorlib.DNGuid read get_Id;
    property MessageFilePath: string read get_MessageFilePath;
    property ResourceFilePath: string read get_ResourceFilePath;
    property ParameterFilePath: string read get_ParameterFilePath;
    property HelpLink: DDN.System.DNUri read get_HelpLink;
    property DisplayName: string read get_DisplayName;
    property LogLinks: DDN.mscorlib.DNIList<DNEventLogLink> read get_LogLinks;
    property Levels: DDN.mscorlib.DNIList<DNEventLevel> read get_Levels;
    property Opcodes: DDN.mscorlib.DNIList<DNEventOpcode> read get_Opcodes;
    property Keywords: DDN.mscorlib.DNIList<DNEventKeyword> read get_Keywords;
    property Tasks: DDN.mscorlib.DNIList<DNEventTask> read get_Tasks;
    property Events: DDN.mscorlib.DNIEnumerable<DNEventMetadata> read get_Events;
  end;

  TDNProviderMetadata = class(TDNGenericImport<DNProviderMetadataClass, DNProviderMetadata>) end;

  //-------------namespace: System.Diagnostics.PerformanceData----------------
  DNCounterDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7C95220B-A686-51E9-9827-94199ECC98D3}']
  end;

  [DNTypeName('System.Diagnostics.PerformanceData.CounterData')]
  DNCounterData = interface(DDN.mscorlib.DNObject)
  ['{F74B9394-8089-3D3B-AB4A-AF794331F21D}']
  { getters & setters } 

    function get_Value: Int64;
    procedure set_Value(value: Int64);
    function get_RawValue: Int64;
    procedure set_RawValue(value: Int64);

  { methods } 

    procedure Increment;
    procedure Decrement;
    procedure IncrementBy(value: Int64);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: Int64 read get_Value write set_Value;
    property RawValue: Int64 read get_RawValue write set_RawValue;
  end;

  TDNCounterData = class(TDNGenericImport<DNCounterDataClass, DNCounterData>) end;

  //-------------namespace: System.Diagnostics.PerformanceData----------------
  DNCounterSetClass = interface(DNObjectClass)
  ['{273F1485-BB67-5480-AF98-7A009FE19698}']
  { constructors } 

    {class} function init(providerGuid: DDN.mscorlib.DNGuid; counterSetGuid: DDN.mscorlib.DNGuid; instanceType: DNCounterSetInstanceType): DNCounterSet;

  end;

  [DNTypeName('System.Diagnostics.PerformanceData.CounterSet')]
  DNCounterSet = interface(DDN.mscorlib.DNIDisposable)
  ['{73B42C75-1907-366C-9259-245A4BD8A56B}']
  { methods } 

    procedure Dispose;
    procedure AddCounter(counterId: Int32; counterType: DNCounterType); overload;
    procedure AddCounter(counterId: Int32; counterType: DNCounterType; counterName: string); overload;
    function CreateCounterSetInstance(instanceName: string): DNCounterSetInstance;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCounterSet = class(TDNGenericImport<DNCounterSetClass, DNCounterSet>) end;

  //-------------namespace: System.Diagnostics.PerformanceData----------------
  DNCounterSetInstanceClass = interface(DNObjectClass)
  ['{75C73B49-808F-581A-B055-54AA1798C29B}']
  end;

  [DNTypeName('System.Diagnostics.PerformanceData.CounterSetInstance')]
  DNCounterSetInstance = interface(DDN.mscorlib.DNIDisposable)
  ['{5FB5D727-F6A7-3154-89C3-39B3605A219C}']
  { getters & setters } 

    function get_Counters: DNCounterSetInstanceCounterDataSet;

  { methods } 

    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Counters: DNCounterSetInstanceCounterDataSet read get_Counters;
  end;

  TDNCounterSetInstance = class(TDNGenericImport<DNCounterSetInstanceClass, DNCounterSetInstance>) end;

  //-------------namespace: System.Diagnostics.PerformanceData----------------
  DNCounterSetInstanceCounterDataSetClass = interface(DNObjectClass)
  ['{371D2D97-58E1-5593-8678-B99AC249AC1D}']
  end;

  [DNTypeName('System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet')]
  DNCounterSetInstanceCounterDataSet = interface(DDN.mscorlib.DNIDisposable)
  ['{8CFAD6F2-7C85-36F3-9161-DD97C2AF6AAF}']
  { getters & setters } 

    function get_Item(counterId: Int32): DNCounterData; overload;
    function get_Item(counterName: string): DNCounterData; overload;

  { methods } 

    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[counterId: Int32]: DNCounterData read get_Item; default;
    property Item[counterName: string]: DNCounterData read get_Item; default;
  end;

  TDNCounterSetInstanceCounterDataSet = class(TDNGenericImport<DNCounterSetInstanceCounterDataSetClass, DNCounterSetInstanceCounterDataSet>) end;

  //-------------namespace: System.Diagnostics----------------
  DNUnescapedXmlDiagnosticDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BBFD733D-40D4-5289-A503-5B8366440C6A}']
  { constructors } 

    {class} function init(xmlPayload: string): DNUnescapedXmlDiagnosticData;

  end;

  [DNTypeName('System.Diagnostics.UnescapedXmlDiagnosticData')]
  DNUnescapedXmlDiagnosticData = interface(DDN.mscorlib.DNObject)
  ['{0FF9AB07-001B-33D8-9352-25ED7238B895}']
  { getters & setters } 

    function get_UnescapedXml: string;
    procedure set_UnescapedXml(value: string);

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property UnescapedXml: string read get_UnescapedXml write set_UnescapedXml;
  end;

  TDNUnescapedXmlDiagnosticData = class(TDNGenericImport<DNUnescapedXmlDiagnosticDataClass, DNUnescapedXmlDiagnosticData>) end;

  //-------------namespace: System.Dynamic----------------
  DNBindingRestrictionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BD600AAD-CFDF-54FF-8254-461FC32A3C5A}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNBindingRestrictions;

  { static fields } 

    {class} property Empty: DNBindingRestrictions read __fakeFieldGet_Empty;

  { static methods } 

    {class} function GetTypeRestriction(expression: DNExpression; &type: DDN.mscorlib.DNType): DNBindingRestrictions;
    {class} function GetInstanceRestriction(expression: DNExpression; instance: DDN.mscorlib.DNObject): DNBindingRestrictions;
    {class} function GetExpressionRestriction(expression: DNExpression): DNBindingRestrictions;
    {class} function Combine(contributingObjects: DDN.mscorlib.DNIList<DNDynamicMetaObject>): DNBindingRestrictions;

  end;

  [DNTypeName('System.Dynamic.BindingRestrictions')]
  DNBindingRestrictions = interface(DDN.mscorlib.DNObject)
  ['{FB6E11CE-F3B8-3BEC-AE30-9135F618C3A4}']
  { methods } 

    function Merge(restrictions: DNBindingRestrictions): DNBindingRestrictions;
    function ToExpression: DNExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBindingRestrictions = class(TDNGenericImport<DNBindingRestrictionsClass, DNBindingRestrictions>) end;

  //-------------namespace: System.Dynamic----------------
  DNCallInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{80DF0ECB-4EE5-57E9-B196-D0D3DA6EBE68}']
  { constructors } 

    {class} function init(argCount: Int32; argNames: TArray<string>): DNCallInfo; overload;
    {class} function init(argCount: Int32; argNames: DDN.mscorlib.DNIEnumerable<string>): DNCallInfo; overload;

  end;

  [DNTypeName('System.Dynamic.CallInfo')]
  DNCallInfo = interface(DDN.mscorlib.DNObject)
  ['{9FE8E955-3B50-3853-9698-AE3CA9D0B2D9}']
  { getters & setters } 

    function get_ArgumentCount: Int32;
    function get_ArgumentNames: DDN.mscorlib.DNReadOnlyCollection<string>;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ArgumentCount: Int32 read get_ArgumentCount;
    property ArgumentNames: DDN.mscorlib.DNReadOnlyCollection<string> read get_ArgumentNames;
  end;

  TDNCallInfo = class(TDNGenericImport<DNCallInfoClass, DNCallInfo>) end;

  //-------------namespace: System.Dynamic----------------
  DNDynamicMetaObjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6F4E3A75-55E7-505A-B140-2023A687853A}']
  { constructors } 

    {class} function init(expression: DNExpression; restrictions: DNBindingRestrictions): DNDynamicMetaObject; overload;
    {class} function init(expression: DNExpression; restrictions: DNBindingRestrictions; value: DDN.mscorlib.DNObject): DNDynamicMetaObject; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_EmptyMetaObjects: TArray<DNDynamicMetaObject>;

  { static fields } 

    {class} property EmptyMetaObjects: TArray<DNDynamicMetaObject> read __fakeFieldGet_EmptyMetaObjects;

  { static methods } 

    {class} function Create(value: DDN.mscorlib.DNObject; expression: DNExpression): DNDynamicMetaObject;

  end;

  [DNTypeName('System.Dynamic.DynamicMetaObject')]
  DNDynamicMetaObject = interface(DDN.mscorlib.DNObject)
  ['{7C5EC2F6-5CA9-34BC-B4E0-C857AA5BE3D7}']
  { getters & setters } 

    function get_Expression: DNExpression;
    function get_Restrictions: DNBindingRestrictions;
    function get_Value: DDN.mscorlib.DNObject;
    function get_HasValue: Boolean;
    function get_RuntimeType: DDN.mscorlib.DNType;
    function get_LimitType: DDN.mscorlib.DNType;

  { methods } 

    function BindConvert(binder: DNConvertBinder): DNDynamicMetaObject;
    function BindGetMember(binder: DNGetMemberBinder): DNDynamicMetaObject;
    function BindSetMember(binder: DNSetMemberBinder; value: DNDynamicMetaObject): DNDynamicMetaObject;
    function BindDeleteMember(binder: DNDeleteMemberBinder): DNDynamicMetaObject;
    function BindGetIndex(binder: DNGetIndexBinder; indexes: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function BindSetIndex(binder: DNSetIndexBinder; indexes: TArray<DNDynamicMetaObject>; value: DNDynamicMetaObject): DNDynamicMetaObject;
    function BindDeleteIndex(binder: DNDeleteIndexBinder; indexes: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function BindInvokeMember(binder: DNInvokeMemberBinder; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function BindInvoke(binder: DNInvokeBinder; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function BindCreateInstance(binder: DNCreateInstanceBinder; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function BindUnaryOperation(binder: DNUnaryOperationBinder): DNDynamicMetaObject;
    function BindBinaryOperation(binder: DNBinaryOperationBinder; arg: DNDynamicMetaObject): DNDynamicMetaObject;
    function GetDynamicMemberNames: DDN.mscorlib.DNIEnumerable<string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Expression: DNExpression read get_Expression;
    property Restrictions: DNBindingRestrictions read get_Restrictions;
    property Value: DDN.mscorlib.DNObject read get_Value;
    property HasValue: Boolean read get_HasValue;
    property RuntimeType: DDN.mscorlib.DNType read get_RuntimeType;
    property LimitType: DDN.mscorlib.DNType read get_LimitType;
  end;

  TDNDynamicMetaObject = class(TDNGenericImport<DNDynamicMetaObjectClass, DNDynamicMetaObject>) end;

  //-------------namespace: System.Dynamic----------------
  DNDynamicObjectClass = interface(DNObjectClass)
  ['{E1BBE545-B356-5E8C-83E9-4B2715F4F039}']
  end;

  [DNTypeName('System.Dynamic.DynamicObject')]
  DNDynamicObject = interface(DNIDynamicMetaObjectProvider)
  ['{204F3E34-E149-3EAB-8FE7-10348AA2C02E}']
  { methods } 

    function TryGetMember(binder: DNGetMemberBinder; out result: DDN.mscorlib.DNObject): Boolean;
    function TrySetMember(binder: DNSetMemberBinder; value: DDN.mscorlib.DNObject): Boolean;
    function TryDeleteMember(binder: DNDeleteMemberBinder): Boolean;
    function TryInvokeMember(binder: DNInvokeMemberBinder; args: TArray<DDN.mscorlib.DNObject>; out result: DDN.mscorlib.DNObject): Boolean;
    function TryConvert(binder: DNConvertBinder; out result: DDN.mscorlib.DNObject): Boolean;
    function TryCreateInstance(binder: DNCreateInstanceBinder; args: TArray<DDN.mscorlib.DNObject>; out result: DDN.mscorlib.DNObject): Boolean;
    function TryInvoke(binder: DNInvokeBinder; args: TArray<DDN.mscorlib.DNObject>; out result: DDN.mscorlib.DNObject): Boolean;
    function TryBinaryOperation(binder: DNBinaryOperationBinder; arg: DDN.mscorlib.DNObject; out result: DDN.mscorlib.DNObject): Boolean;
    function TryUnaryOperation(binder: DNUnaryOperationBinder; out result: DDN.mscorlib.DNObject): Boolean;
    function TryGetIndex(binder: DNGetIndexBinder; indexes: TArray<DDN.mscorlib.DNObject>; out result: DDN.mscorlib.DNObject): Boolean;
    function TrySetIndex(binder: DNSetIndexBinder; indexes: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject): Boolean;
    function TryDeleteIndex(binder: DNDeleteIndexBinder; indexes: TArray<DDN.mscorlib.DNObject>): Boolean;
    function GetMetaObject(parameter: DNExpression): DNDynamicMetaObject;
    function GetDynamicMemberNames: DDN.mscorlib.DNIEnumerable<string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDynamicObject = class(TDNGenericImport<DNDynamicObjectClass, DNDynamicObject>) end;

  //-------------namespace: System.Dynamic----------------
  DNExpandoObjectClass = interface(DNObjectClass)
  ['{060D7A36-212B-52B2-915E-05118EE1CA79}']
  { constructors } 

    {class} function init: DNExpandoObject;

  end;

  [DNTypeName('System.Dynamic.ExpandoObject')]
  DNExpandoObject = interface(DNIDynamicMetaObjectProvider)
  ['{840EBDA4-C790-33E3-9805-EA653C9DEC12}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNExpandoObject = class(TDNGenericImport<DNExpandoObjectClass, DNExpandoObject>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventRecordWrittenEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{AC5F40B0-12E8-5834-9338-D46A0FA79D5E}']
  end;

  [DNTypeName('System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs')]
  DNEventRecordWrittenEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{EC061C98-D7AF-3D6D-BDEA-F7D1B8426E56}']
  { getters & setters } 

    function get_EventRecord: DNEventRecord;
    function get_EventException: DDN.mscorlib.DNException;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EventRecord: DNEventRecord read get_EventRecord;
    property EventException: DDN.mscorlib.DNException read get_EventException;
  end;

  TDNEventRecordWrittenEventArgs = class(TDNGenericImport<DNEventRecordWrittenEventArgsClass, DNEventRecordWrittenEventArgs>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLogExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{B44D9323-8D54-517A-B776-7C173E8AD041}']
  { constructors } 

    {class} function init: DNEventLogException; overload;
    {class} function init(message: string): DNEventLogException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNEventLogException; overload;

  end;

  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogException')]
  DNEventLogException = interface(DDN.mscorlib.DNException)
  ['{AE52C84A-5E93-3AF3-90AA-82E22C8507C1}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNEventLogException = class(TDNGenericImport<DNEventLogExceptionClass, DNEventLogException>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLogInvalidDataExceptionClass = interface(DNEventLogExceptionClass)
  ['{D73102E7-8021-5A7C-8302-B94C34BC70E7}']
  { constructors } 

    {class} function init: DNEventLogInvalidDataException; overload;
    {class} function init(message: string): DNEventLogInvalidDataException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNEventLogInvalidDataException; overload;

  end;

  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogInvalidDataException')]
  DNEventLogInvalidDataException = interface(DNEventLogException)
  ['{72072B91-C071-353B-9689-14F3F90E8224}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNEventLogInvalidDataException = class(TDNGenericImport<DNEventLogInvalidDataExceptionClass, DNEventLogInvalidDataException>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLogNotFoundExceptionClass = interface(DNEventLogExceptionClass)
  ['{9BEA56B2-13FC-5FB2-89FA-595E265DF079}']
  { constructors } 

    {class} function init: DNEventLogNotFoundException; overload;
    {class} function init(message: string): DNEventLogNotFoundException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNEventLogNotFoundException; overload;

  end;

  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogNotFoundException')]
  DNEventLogNotFoundException = interface(DNEventLogException)
  ['{7467A27C-8DDC-3F25-AFA5-7F91CAB51CFF}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNEventLogNotFoundException = class(TDNGenericImport<DNEventLogNotFoundExceptionClass, DNEventLogNotFoundException>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLogProviderDisabledExceptionClass = interface(DNEventLogExceptionClass)
  ['{27E19F6B-629F-5FEE-8BCD-01E93C0357C1}']
  { constructors } 

    {class} function init: DNEventLogProviderDisabledException; overload;
    {class} function init(message: string): DNEventLogProviderDisabledException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNEventLogProviderDisabledException; overload;

  end;

  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException')]
  DNEventLogProviderDisabledException = interface(DNEventLogException)
  ['{FFE913DB-FB84-339C-8BFD-096F34AFFB0D}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNEventLogProviderDisabledException = class(TDNGenericImport<DNEventLogProviderDisabledExceptionClass, DNEventLogProviderDisabledException>) end;

  //-------------namespace: System.Diagnostics.Eventing.Reader----------------
  DNEventLogReadingExceptionClass = interface(DNEventLogExceptionClass)
  ['{86C40441-D2C1-55FC-B851-1E9F5682BF3E}']
  { constructors } 

    {class} function init: DNEventLogReadingException; overload;
    {class} function init(message: string): DNEventLogReadingException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNEventLogReadingException; overload;

  end;

  [DNTypeName('System.Diagnostics.Eventing.Reader.EventLogReadingException')]
  DNEventLogReadingException = interface(DNEventLogException)
  ['{FDCAE3B5-2174-3EA5-A6B7-4CB283AE4D6A}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNEventLogReadingException = class(TDNGenericImport<DNEventLogReadingExceptionClass, DNEventLogReadingException>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNInstrumentationBaseExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{21A5C93D-94CB-5354-BBA5-E8D722F8501F}']
  { constructors } 

    {class} function init: DNInstrumentationBaseException; overload;
    {class} function init(message: string): DNInstrumentationBaseException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNInstrumentationBaseException; overload;

  end;

  [DNTypeName('System.Management.Instrumentation.InstrumentationBaseException')]
  DNInstrumentationBaseException = interface(DDN.mscorlib.DNException)
  ['{A0C56843-F520-3B7D-81C4-AAACB5877558}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInstrumentationBaseException = class(TDNGenericImport<DNInstrumentationBaseExceptionClass, DNInstrumentationBaseException>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNInstrumentationExceptionClass = interface(DNInstrumentationBaseExceptionClass)
  ['{16A0D172-5D42-541C-AB04-7F5AD1A8FDD6}']
  { constructors } 

    {class} function init: DNInstrumentationException; overload;
    {class} function init(message: string): DNInstrumentationException; overload;
    {class} function init(innerException: DDN.mscorlib.DNException): DNInstrumentationException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNInstrumentationException; overload;

  end;

  [DNTypeName('System.Management.Instrumentation.InstrumentationException')]
  DNInstrumentationException = interface(DNInstrumentationBaseException)
  ['{DD8BCCD3-7DEF-3E01-934C-179EB6122E5D}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInstrumentationException = class(TDNGenericImport<DNInstrumentationExceptionClass, DNInstrumentationException>) end;

  //-------------namespace: System.Management.Instrumentation----------------
  DNInstanceNotFoundExceptionClass = interface(DNInstrumentationExceptionClass)
  ['{BF77AB9C-4021-5A69-B147-8F8E4DE4C1DF}']
  { constructors } 

    {class} function init: DNInstanceNotFoundException; overload;
    {class} function init(message: string): DNInstanceNotFoundException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNInstanceNotFoundException; overload;

  end;

  [DNTypeName('System.Management.Instrumentation.InstanceNotFoundException')]
  DNInstanceNotFoundException = interface(DNInstrumentationException)
  ['{6EA1817C-23A9-39C4-9DBC-8E0A2F3F8B79}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInstanceNotFoundException = class(TDNGenericImport<DNInstanceNotFoundExceptionClass, DNInstanceNotFoundException>) end;

  //-------------namespace: System.IO.MemoryMappedFiles----------------
  DNMemoryMappedFileClass = interface(DNObjectClass)
  ['{1F981C0C-2294-5D16-8F25-07285133B2EC}']
  { static methods } 

    {class} function OpenExisting(mapName: string): DNMemoryMappedFile; overload;
    {class} function OpenExisting(mapName: string; desiredAccessRights: DNMemoryMappedFileRights): DNMemoryMappedFile; overload;
    {class} function OpenExisting(mapName: string; desiredAccessRights: DNMemoryMappedFileRights; inheritability: DNHandleInheritability): DNMemoryMappedFile; overload;
    {class} function CreateFromFile(path: string): DNMemoryMappedFile; overload;
    {class} function CreateFromFile(path: string; mode: DDN.mscorlib.DNFileMode): DNMemoryMappedFile; overload;
    {class} function CreateFromFile(path: string; mode: DDN.mscorlib.DNFileMode; mapName: string): DNMemoryMappedFile; overload;
    {class} function CreateFromFile(path: string; mode: DDN.mscorlib.DNFileMode; mapName: string; capacity: Int64): DNMemoryMappedFile; overload;
    {class} function CreateFromFile(path: string; mode: DDN.mscorlib.DNFileMode; mapName: string; capacity: Int64; access: DNMemoryMappedFileAccess): DNMemoryMappedFile; overload;
    {class} function CreateFromFile(fileStream: DDN.mscorlib.DNFileStream; mapName: string; capacity: Int64; access: DNMemoryMappedFileAccess; inheritability: DNHandleInheritability; leaveOpen: Boolean): DNMemoryMappedFile; overload;
    {class} function CreateFromFile(fileStream: DDN.mscorlib.DNFileStream; mapName: string; capacity: Int64; access: DNMemoryMappedFileAccess; memoryMappedFileSecurity: DNMemoryMappedFileSecurity; inheritability: DNHandleInheritability; leaveOpen: Boolean): DNMemoryMappedFile; overload;
    {class} function CreateNew(mapName: string; capacity: Int64): DNMemoryMappedFile; overload;
    {class} function CreateNew(mapName: string; capacity: Int64; access: DNMemoryMappedFileAccess): DNMemoryMappedFile; overload;
    {class} function CreateNew(mapName: string; capacity: Int64; access: DNMemoryMappedFileAccess; options: DNMemoryMappedFileOptions; inheritability: DNHandleInheritability): DNMemoryMappedFile; overload;
    {class} function CreateNew(mapName: string; capacity: Int64; access: DNMemoryMappedFileAccess; options: DNMemoryMappedFileOptions; memoryMappedFileSecurity: DNMemoryMappedFileSecurity; inheritability: DNHandleInheritability): DNMemoryMappedFile; overload;
    {class} function CreateOrOpen(mapName: string; capacity: Int64): DNMemoryMappedFile; overload;
    {class} function CreateOrOpen(mapName: string; capacity: Int64; access: DNMemoryMappedFileAccess): DNMemoryMappedFile; overload;
    {class} function CreateOrOpen(mapName: string; capacity: Int64; access: DNMemoryMappedFileAccess; options: DNMemoryMappedFileOptions; inheritability: DNHandleInheritability): DNMemoryMappedFile; overload;
    {class} function CreateOrOpen(mapName: string; capacity: Int64; access: DNMemoryMappedFileAccess; options: DNMemoryMappedFileOptions; memoryMappedFileSecurity: DNMemoryMappedFileSecurity; inheritability: DNHandleInheritability): DNMemoryMappedFile; overload;

  end;

  [DNTypeName('System.IO.MemoryMappedFiles.MemoryMappedFile')]
  DNMemoryMappedFile = interface(DDN.mscorlib.DNIDisposable)
  ['{0942D30F-2F26-3DD6-92A2-D3EDDA4F2ED4}']
  { getters & setters } 

    function get_SafeMemoryMappedFileHandle: DNSafeMemoryMappedFileHandle;

  { methods } 

    function CreateViewStream: DNMemoryMappedViewStream; overload;
    function CreateViewStream(offset: Int64; size: Int64): DNMemoryMappedViewStream; overload;
    function CreateViewStream(offset: Int64; size: Int64; access: DNMemoryMappedFileAccess): DNMemoryMappedViewStream; overload;
    function CreateViewAccessor: DNMemoryMappedViewAccessor; overload;
    function CreateViewAccessor(offset: Int64; size: Int64): DNMemoryMappedViewAccessor; overload;
    function CreateViewAccessor(offset: Int64; size: Int64; access: DNMemoryMappedFileAccess): DNMemoryMappedViewAccessor; overload;
    procedure Dispose;
    function GetAccessControl: DNMemoryMappedFileSecurity;
    procedure SetAccessControl(memoryMappedFileSecurity: DNMemoryMappedFileSecurity);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SafeMemoryMappedFileHandle: DNSafeMemoryMappedFileHandle read get_SafeMemoryMappedFileHandle;
  end;

  TDNMemoryMappedFile = class(TDNGenericImport<DNMemoryMappedFileClass, DNMemoryMappedFile>) end;

  //-------------namespace: System.IO.MemoryMappedFiles----------------
  DNMemoryMappedViewAccessorClass = interface(DDN.mscorlib.DNUnmanagedMemoryAccessorClass)
  ['{188FE65B-F987-5B0D-873C-F4BC557B89F1}']
  end;

  [DNTypeName('System.IO.MemoryMappedFiles.MemoryMappedViewAccessor')]
  DNMemoryMappedViewAccessor = interface(DDN.mscorlib.DNUnmanagedMemoryAccessor)
  ['{FAFB1B2C-8AF6-3882-861B-A38B3302FCF1}']
  { getters & setters } 

    function get_SafeMemoryMappedViewHandle: DNSafeMemoryMappedViewHandle;
    function get_PointerOffset: Int64;
    function get_Capacity: Int64;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;

  { methods } 

    procedure Flush;
    procedure Dispose;
    function ReadBoolean(position: Int64): Boolean;
    function ReadByte(position: Int64): Byte;
    function ReadDecimal(position: Int64): DDN.mscorlib.DNDecimal;
    procedure Write(position: Int64; value: Boolean); overload;
    procedure Write(position: Int64; value: Byte); overload;
    procedure Write(position: Int64; value: DDN.mscorlib.DNDecimal); overload;
    function ReadChar(position: Int64): Char;
    function ReadInt16(position: Int64): Int16;
    function ReadInt32(position: Int64): Int32;
    function ReadInt64(position: Int64): Int64;
    function ReadSingle(position: Int64): Single;
    function ReadDouble(position: Int64): Double;
    function ReadSByte(position: Int64): SByte;
    function ReadUInt16(position: Int64): UInt16;
    function ReadUInt32(position: Int64): UInt32;
    function ReadUInt64(position: Int64): UInt64;
    procedure Write(position: Int64; value: Char); overload;
    procedure Write(position: Int64; value: Int16); overload;
    procedure Write(position: Int64; value: Int32); overload;
    procedure Write(position: Int64; value: Int64); overload;
    procedure Write(position: Int64; value: Single); overload;
    procedure Write(position: Int64; value: Double); overload;
    procedure Write(position: Int64; value: SByte); overload;
    procedure Write(position: Int64; value: UInt16); overload;
    procedure Write(position: Int64; value: UInt32); overload;
    procedure Write(position: Int64; value: UInt64); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SafeMemoryMappedViewHandle: DNSafeMemoryMappedViewHandle read get_SafeMemoryMappedViewHandle;
    property PointerOffset: Int64 read get_PointerOffset;
    property Capacity: Int64 read get_Capacity;
    property CanRead: Boolean read get_CanRead;
    property CanWrite: Boolean read get_CanWrite;
  end;

  TDNMemoryMappedViewAccessor = class(TDNGenericImport<DNMemoryMappedViewAccessorClass, DNMemoryMappedViewAccessor>) end;

  //-------------namespace: System.Linq----------------
  DNEnumerableClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F1D19C7D-BD35-5372-B8D8-EB0AFFF57645}']
  { static methods } 

    {class} function Range(start: Int32; count: Int32): DDN.mscorlib.DNIEnumerable<Int32>;
    {class} function Sum(source: DDN.mscorlib.DNIEnumerable<Int32>): Int32; overload;
    {class} function Sum(source: DDN.mscorlib.DNIEnumerable<Int64>): Int64; overload;
    {class} function Sum(source: DDN.mscorlib.DNIEnumerable<Single>): Single; overload;
    {class} function Sum(source: DDN.mscorlib.DNIEnumerable<Double>): Double; overload;
    {class} function Sum(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNDecimal>): DDN.mscorlib.DNDecimal; overload;
    {class} function Min(source: DDN.mscorlib.DNIEnumerable<Int32>): Int32; overload;
    {class} function Min(source: DDN.mscorlib.DNIEnumerable<Int64>): Int64; overload;
    {class} function Min(source: DDN.mscorlib.DNIEnumerable<Single>): Single; overload;
    {class} function Min(source: DDN.mscorlib.DNIEnumerable<Double>): Double; overload;
    {class} function Min(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNDecimal>): DDN.mscorlib.DNDecimal; overload;
    {class} function Max(source: DDN.mscorlib.DNIEnumerable<Int32>): Int32; overload;
    {class} function Max(source: DDN.mscorlib.DNIEnumerable<Int64>): Int64; overload;
    {class} function Max(source: DDN.mscorlib.DNIEnumerable<Double>): Double; overload;
    {class} function Max(source: DDN.mscorlib.DNIEnumerable<Single>): Single; overload;
    {class} function Max(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNDecimal>): DDN.mscorlib.DNDecimal; overload;
    {class} function Average(source: DDN.mscorlib.DNIEnumerable<Int32>): Double; overload;
    {class} function Average(source: DDN.mscorlib.DNIEnumerable<Int64>): Double; overload;
    {class} function Average(source: DDN.mscorlib.DNIEnumerable<Single>): Single; overload;
    {class} function Average(source: DDN.mscorlib.DNIEnumerable<Double>): Double; overload;
    {class} function Average(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNDecimal>): DDN.mscorlib.DNDecimal; overload;
    {class} function Sum(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Int32>>): DDN.mscorlib.DNNullable<Int32>; overload;
    {class} function Sum(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Int64>>): DDN.mscorlib.DNNullable<Int64>; overload;
    {class} function Sum(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Single>>): DDN.mscorlib.DNNullable<Single>; overload;
    {class} function Sum(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Double>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Sum(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>>): DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>; overload;
    {class} function Min(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Int32>>): DDN.mscorlib.DNNullable<Int32>; overload;
    {class} function Min(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Int64>>): DDN.mscorlib.DNNullable<Int64>; overload;
    {class} function Min(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Single>>): DDN.mscorlib.DNNullable<Single>; overload;
    {class} function Min(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Double>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Min(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>>): DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>; overload;
    {class} function Max(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Int32>>): DDN.mscorlib.DNNullable<Int32>; overload;
    {class} function Max(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Int64>>): DDN.mscorlib.DNNullable<Int64>; overload;
    {class} function Max(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Double>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Max(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Single>>): DDN.mscorlib.DNNullable<Single>; overload;
    {class} function Max(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>>): DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>; overload;
    {class} function Average(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Int32>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Average(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Int64>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Average(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Single>>): DDN.mscorlib.DNNullable<Single>; overload;
    {class} function Average(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<Double>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Average(source: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>>): DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>; overload;

  end;

  [DNTypeName('System.Linq.Enumerable')]
  DNEnumerable = interface(DDN.mscorlib.DNObject)
  ['{06F3D115-ED03-3D5F-B08B-8A15E18B855D}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEnumerable = class(TDNGenericImport<DNEnumerableClass, DNEnumerable>) end;

  //-------------namespace: System.Linq----------------
  DNEnumerableExecutorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{48A14358-A67F-56E5-AFE4-72F88C69B969}']
  end;

  [DNTypeName('System.Linq.EnumerableExecutor')]
  DNEnumerableExecutor = interface(DDN.mscorlib.DNObject)
  ['{8F0D57B6-ED42-3D3F-A379-C471B23C4226}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEnumerableExecutor = class(TDNGenericImport<DNEnumerableExecutorClass, DNEnumerableExecutor>) end;

  //-------------namespace: System.Linq----------------
  DNEnumerableExecutorClass<T> = interface(DNEnumerableExecutorClass)
  ['{BFA54836-7473-5188-AC34-6700181F627A}']
  { constructors } 

    {class} function init(expression: DNExpression): DNEnumerableExecutor<T>;

  end;

  [DNTypeName('System.Linq.EnumerableExecutor`1')]
  DNEnumerableExecutor<T> = interface(DNEnumerableExecutor)
  ['{686CA1B2-44E5-3C28-8377-4C28F45569BF}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEnumerableExecutor<T> = class(TDNGenericImport<DNEnumerableExecutorClass<T>, DNEnumerableExecutor<T>>) end;

  //-------------namespace: System.Linq----------------
  DNEnumerableQueryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DBA98CC1-B28B-5165-B65F-1E958C24EDB7}']
  end;

  [DNTypeName('System.Linq.EnumerableQuery')]
  DNEnumerableQuery = interface(DDN.mscorlib.DNObject)
  ['{4C4C01EF-B143-3C92-8CEB-1B0674F7D0C8}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEnumerableQuery = class(TDNGenericImport<DNEnumerableQueryClass, DNEnumerableQuery>) end;

  //-------------namespace: System.Linq----------------
  DNEnumerableQueryClass<T> = interface(DNEnumerableQueryClass)
  ['{93B11976-DB76-5A4B-AF17-75A36F686726}']
  { constructors } 

    {class} function init(enumerable: DDN.mscorlib.DNIEnumerable<T>): DNEnumerableQuery<T>; overload;
    {class} function init(expression: DNExpression): DNEnumerableQuery<T>; overload;

  end;

  [DNTypeName('System.Linq.EnumerableQuery`1')]
  DNEnumerableQuery<T> = interface(DNEnumerableQuery)
  ['{1E96291A-8D60-322C-B030-794757583063}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNEnumerableQuery<T> = class(TDNGenericImport<DNEnumerableQueryClass<T>, DNEnumerableQuery<T>>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNCatchBlockClass = interface(DDN.mscorlib.DNObjectClass)
  ['{82F694E3-D0BB-57EF-8298-83B63E214F5B}']
  end;

  [DNTypeName('System.Linq.Expressions.CatchBlock')]
  DNCatchBlock = interface(DDN.mscorlib.DNObject)
  ['{FC67E70C-F8B5-3A77-8CD8-A289136AEF93}']
  { getters & setters } 

    function get_Variable: DNParameterExpression;
    function get_Test: DDN.mscorlib.DNType;
    function get_Body: DNExpression;
    function get_Filter: DNExpression;

  { methods } 

    function ToString: string;
    function Update(variable: DNParameterExpression; filter: DNExpression; body: DNExpression): DNCatchBlock;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Variable: DNParameterExpression read get_Variable;
    property Test: DDN.mscorlib.DNType read get_Test;
    property Body: DNExpression read get_Body;
    property Filter: DNExpression read get_Filter;
  end;

  TDNCatchBlock = class(TDNGenericImport<DNCatchBlockClass, DNCatchBlock>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNElementInitClass = interface(DNObjectClass)
  ['{E9AE3CB1-9152-5890-A5A0-5BAC809079B4}']
  end;

  [DNTypeName('System.Linq.Expressions.ElementInit')]
  DNElementInit = interface(DNIArgumentProvider)
  ['{45F6112D-6439-3067-BDB9-DA62367EFBC0}']
  { getters & setters } 

    function get_AddMethod: DDN.mscorlib.DNMethodInfo;
    function get_Arguments: DDN.mscorlib.DNReadOnlyCollection<DNExpression>;

  { methods } 

    function ToString: string;
    function Update(arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNElementInit;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AddMethod: DDN.mscorlib.DNMethodInfo read get_AddMethod;
    property Arguments: DDN.mscorlib.DNReadOnlyCollection<DNExpression> read get_Arguments;
  end;

  TDNElementInit = class(TDNGenericImport<DNElementInitClass, DNElementInit>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNExpressionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AB5693C1-11DD-5538-880B-F4BDF42BA0B1}']
  { static methods } 

    {class} function MakeBinary(binaryType: DNExpressionType; left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function MakeBinary(binaryType: DNExpressionType; left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function MakeBinary(binaryType: DNExpressionType; left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function Equal(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function NotEqual(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function GreaterThan(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function LessThan(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function GreaterThanOrEqual(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function LessThanOrEqual(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function AndAlso(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function OrElse(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function Coalesce(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function Add(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function AddAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function AddAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function AddAssignChecked(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function AddAssignChecked(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function AddChecked(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function Subtract(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function SubtractAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function SubtractAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function SubtractAssignChecked(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function SubtractAssignChecked(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function SubtractChecked(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function Divide(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function DivideAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function DivideAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function Modulo(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function ModuloAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function ModuloAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function Multiply(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function MultiplyAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function MultiplyAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function MultiplyAssignChecked(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function MultiplyAssignChecked(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function MultiplyChecked(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function LeftShift(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function LeftShiftAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function LeftShiftAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function RightShift(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function RightShiftAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function RightShiftAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function &And(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function AndAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function AndAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function &Or(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function OrAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function OrAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function ExclusiveOr(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function ExclusiveOrAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function ExclusiveOrAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function Power(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function PowerAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function PowerAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function Block(expressions: DDN.mscorlib.DNIEnumerable<DNExpression>): DNBlockExpression; overload;
    {class} function Block(&type: DDN.mscorlib.DNType; expressions: TArray<DNExpression>): DNBlockExpression; overload;
    {class} function Block(&type: DDN.mscorlib.DNType; expressions: DDN.mscorlib.DNIEnumerable<DNExpression>): DNBlockExpression; overload;
    {class} function Block(variables: DDN.mscorlib.DNIEnumerable<DNParameterExpression>; expressions: TArray<DNExpression>): DNBlockExpression; overload;
    {class} function Block(&type: DDN.mscorlib.DNType; variables: DDN.mscorlib.DNIEnumerable<DNParameterExpression>; expressions: TArray<DNExpression>): DNBlockExpression; overload;
    {class} function Catch(&type: DDN.mscorlib.DNType; body: DNExpression): DNCatchBlock; overload;
    {class} function Catch(variable: DNParameterExpression; body: DNExpression): DNCatchBlock; overload;
    {class} function Catch(&type: DDN.mscorlib.DNType; body: DNExpression; filter: DNExpression): DNCatchBlock; overload;
    {class} function Catch(variable: DNParameterExpression; body: DNExpression; filter: DNExpression): DNCatchBlock; overload;
    {class} function IfThen(test: DNExpression; ifTrue: DNExpression): DNConditionalExpression;
    {class} function IfThenElse(test: DNExpression; ifTrue: DNExpression; ifFalse: DNExpression): DNConditionalExpression;
    {class} function Constant(value: DDN.mscorlib.DNObject): DNConstantExpression; overload;
    {class} function Constant(value: DDN.mscorlib.DNObject; &type: DDN.mscorlib.DNType): DNConstantExpression; overload;
    {class} function DebugInfo(document: DNSymbolDocumentInfo; startLine: Int32; startColumn: Int32; endLine: Int32; endColumn: Int32): DNDebugInfoExpression;
    {class} function ClearDebugInfo(document: DNSymbolDocumentInfo): DNDebugInfoExpression;
    {class} function Empty: DNDefaultExpression;
    {class} function &Default(&type: DDN.mscorlib.DNType): DNDefaultExpression;
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arguments: TArray<DNExpression>): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arg0: DNExpression): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arg0: DNExpression; arg1: DNExpression): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arguments: TArray<DNExpression>): DNDynamicExpression; overload;
    {class} function ElementInit(addMethod: DDN.mscorlib.DNMethodInfo; arguments: TArray<DNExpression>): DNElementInit; overload;
    {class} function Break(target: DNLabelTarget): DNGotoExpression; overload;
    {class} function Break(target: DNLabelTarget; value: DNExpression): DNGotoExpression; overload;
    {class} function Break(target: DNLabelTarget; &type: DDN.mscorlib.DNType): DNGotoExpression; overload;
    {class} function Break(target: DNLabelTarget; value: DNExpression; &type: DDN.mscorlib.DNType): DNGotoExpression; overload;
    {class} function &Continue(target: DNLabelTarget): DNGotoExpression; overload;
    {class} function &Continue(target: DNLabelTarget; &type: DDN.mscorlib.DNType): DNGotoExpression; overload;
    {class} function Return(target: DNLabelTarget): DNGotoExpression; overload;
    {class} function Return(target: DNLabelTarget; &type: DDN.mscorlib.DNType): DNGotoExpression; overload;
    {class} function Return(target: DNLabelTarget; value: DNExpression): DNGotoExpression; overload;
    {class} function Return(target: DNLabelTarget; value: DNExpression; &type: DDN.mscorlib.DNType): DNGotoExpression; overload;
    {class} function &Goto(target: DNLabelTarget): DNGotoExpression; overload;
    {class} function &Goto(target: DNLabelTarget; &type: DDN.mscorlib.DNType): DNGotoExpression; overload;
    {class} function &Goto(target: DNLabelTarget; value: DNExpression): DNGotoExpression; overload;
    {class} function &Goto(target: DNLabelTarget; value: DNExpression; &type: DDN.mscorlib.DNType): DNGotoExpression; overload;
    {class} function MakeIndex(instance: DNExpression; indexer: DDN.mscorlib.DNPropertyInfo; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNIndexExpression;
    {class} function ArrayAccess(&array: DNExpression; indexes: TArray<DNExpression>): DNIndexExpression; overload;
    {class} function &Property(instance: DNExpression; indexer: DDN.mscorlib.DNPropertyInfo; arguments: TArray<DNExpression>): DNIndexExpression; overload;
    {class} function &Property(instance: DNExpression; indexer: DDN.mscorlib.DNPropertyInfo; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNIndexExpression; overload;
    {class} function Invoke(expression: DNExpression; arguments: TArray<DNExpression>): DNInvocationExpression; overload;
    {class} function &Label(target: DNLabelTarget): DNLabelExpression; overload;
    {class} function &Label: DNLabelTarget; overload;
    {class} function &Label(name: string): DNLabelTarget; overload;
    {class} function &Label(&type: DDN.mscorlib.DNType): DNLabelTarget; overload;
    {class} function &Label(&type: DDN.mscorlib.DNType; name: string): DNLabelTarget; overload;
    {class} function Lambda(body: DNExpression; parameters: TArray<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(body: DNExpression; tailCall: Boolean; parameters: TArray<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(body: DNExpression; parameters: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(body: DNExpression; tailCall: Boolean; parameters: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(delegateType: DDN.mscorlib.DNType; body: DNExpression; parameters: TArray<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(delegateType: DDN.mscorlib.DNType; body: DNExpression; tailCall: Boolean; parameters: TArray<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(delegateType: DDN.mscorlib.DNType; body: DNExpression; parameters: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(delegateType: DDN.mscorlib.DNType; body: DNExpression; tailCall: Boolean; parameters: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(body: DNExpression; name: string; parameters: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(delegateType: DDN.mscorlib.DNType; body: DNExpression; name: string; parameters: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(delegateType: DDN.mscorlib.DNType; body: DNExpression; name: string; tailCall: Boolean; parameters: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function GetFuncType(typeArgs: TArray<DDN.mscorlib.DNType>): DDN.mscorlib.DNType;
    {class} function TryGetFuncType(typeArgs: TArray<DDN.mscorlib.DNType>; out funcType: DDN.mscorlib.DNType): Boolean;
    {class} function GetActionType(typeArgs: TArray<DDN.mscorlib.DNType>): DDN.mscorlib.DNType;
    {class} function TryGetActionType(typeArgs: TArray<DDN.mscorlib.DNType>; out actionType: DDN.mscorlib.DNType): Boolean;
    {class} function ListInit(newExpression: DNNewExpression; initializers: TArray<DNExpression>): DNListInitExpression; overload;
    {class} function ListInit(newExpression: DNNewExpression; addMethod: DDN.mscorlib.DNMethodInfo; initializers: TArray<DNExpression>): DNListInitExpression; overload;
    {class} function ListInit(newExpression: DNNewExpression; initializers: TArray<DNElementInit>): DNListInitExpression; overload;
    {class} function ListInit(newExpression: DNNewExpression; initializers: DDN.mscorlib.DNIEnumerable<DNElementInit>): DNListInitExpression; overload;
    {class} function Loop(body: DNExpression): DNLoopExpression; overload;
    {class} function Loop(body: DNExpression; break: DNLabelTarget): DNLoopExpression; overload;
    {class} function Bind(propertyAccessor: DDN.mscorlib.DNMethodInfo; expression: DNExpression): DNMemberAssignment; overload;
    {class} function Field(expression: DNExpression; &type: DDN.mscorlib.DNType; fieldName: string): DNMemberExpression; overload;
    {class} function &Property(expression: DNExpression; &type: DDN.mscorlib.DNType; propertyName: string): DNMemberExpression; overload;
    {class} function &Property(expression: DNExpression; propertyAccessor: DDN.mscorlib.DNMethodInfo): DNMemberExpression; overload;
    {class} function MakeMemberAccess(expression: DNExpression; member: DDN.mscorlib.DNMemberInfo): DNMemberExpression;
    {class} function MemberInit(newExpression: DNNewExpression; bindings: TArray<DNMemberBinding>): DNMemberInitExpression; overload;
    {class} function MemberInit(newExpression: DNNewExpression; bindings: DDN.mscorlib.DNIEnumerable<DNMemberBinding>): DNMemberInitExpression; overload;
    {class} function ListBind(member: DDN.mscorlib.DNMemberInfo; initializers: TArray<DNElementInit>): DNMemberListBinding; overload;
    {class} function ListBind(member: DDN.mscorlib.DNMemberInfo; initializers: DDN.mscorlib.DNIEnumerable<DNElementInit>): DNMemberListBinding; overload;
    {class} function ListBind(propertyAccessor: DDN.mscorlib.DNMethodInfo; initializers: TArray<DNElementInit>): DNMemberListBinding; overload;
    {class} function ListBind(propertyAccessor: DDN.mscorlib.DNMethodInfo; initializers: DDN.mscorlib.DNIEnumerable<DNElementInit>): DNMemberListBinding; overload;
    {class} function MemberBind(member: DDN.mscorlib.DNMemberInfo; bindings: TArray<DNMemberBinding>): DNMemberMemberBinding; overload;
    {class} function MemberBind(member: DDN.mscorlib.DNMemberInfo; bindings: DDN.mscorlib.DNIEnumerable<DNMemberBinding>): DNMemberMemberBinding; overload;
    {class} function MemberBind(propertyAccessor: DDN.mscorlib.DNMethodInfo; bindings: TArray<DNMemberBinding>): DNMemberMemberBinding; overload;
    {class} function MemberBind(propertyAccessor: DDN.mscorlib.DNMethodInfo; bindings: DDN.mscorlib.DNIEnumerable<DNMemberBinding>): DNMemberMemberBinding; overload;
    {class} function Call(method: DDN.mscorlib.DNMethodInfo; arg0: DNExpression): DNMethodCallExpression; overload;
    {class} function Call(method: DDN.mscorlib.DNMethodInfo; arg0: DNExpression; arg1: DNExpression): DNMethodCallExpression; overload;
    {class} function Call(method: DDN.mscorlib.DNMethodInfo; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNMethodCallExpression; overload;
    {class} function Call(method: DDN.mscorlib.DNMethodInfo; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression): DNMethodCallExpression; overload;
    {class} function Call(method: DDN.mscorlib.DNMethodInfo; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression; arg4: DNExpression): DNMethodCallExpression; overload;
    {class} function Call(method: DDN.mscorlib.DNMethodInfo; arguments: TArray<DNExpression>): DNMethodCallExpression; overload;
    {class} function Call(method: DDN.mscorlib.DNMethodInfo; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNMethodCallExpression; overload;
    {class} function Call(instance: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNMethodCallExpression; overload;
    {class} function Call(instance: DNExpression; method: DDN.mscorlib.DNMethodInfo; arguments: TArray<DNExpression>): DNMethodCallExpression; overload;
    {class} function Call(instance: DNExpression; method: DDN.mscorlib.DNMethodInfo; arg0: DNExpression; arg1: DNExpression): DNMethodCallExpression; overload;
    {class} function Call(instance: DNExpression; method: DDN.mscorlib.DNMethodInfo; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNMethodCallExpression; overload;
    {class} function Call(instance: DNExpression; method: DDN.mscorlib.DNMethodInfo; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNMethodCallExpression; overload;
    {class} function ArrayIndex(&array: DNExpression; indexes: TArray<DNExpression>): DNMethodCallExpression; overload;
    {class} function NewArrayInit(&type: DDN.mscorlib.DNType; initializers: TArray<DNExpression>): DNNewArrayExpression; overload;
    {class} function NewArrayBounds(&type: DDN.mscorlib.DNType; bounds: TArray<DNExpression>): DNNewArrayExpression; overload;
    {class} function New(&constructor: DDN.mscorlib.DNConstructorInfo): DNNewExpression; overload;
    {class} function New(&constructor: DDN.mscorlib.DNConstructorInfo; arguments: TArray<DNExpression>): DNNewExpression; overload;
    {class} function New(&constructor: DDN.mscorlib.DNConstructorInfo; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNNewExpression; overload;
    {class} function New(&constructor: DDN.mscorlib.DNConstructorInfo; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>; members: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNMemberInfo>): DNNewExpression; overload;
    {class} function New(&constructor: DDN.mscorlib.DNConstructorInfo; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>; members: TArray<DDN.mscorlib.DNMemberInfo>): DNNewExpression; overload;
    {class} function New(&type: DDN.mscorlib.DNType): DNNewExpression; overload;
    {class} function Parameter(&type: DDN.mscorlib.DNType): DNParameterExpression; overload;
    {class} function Variable(&type: DDN.mscorlib.DNType): DNParameterExpression; overload;
    {class} function Parameter(&type: DDN.mscorlib.DNType; name: string): DNParameterExpression; overload;
    {class} function Variable(&type: DDN.mscorlib.DNType; name: string): DNParameterExpression; overload;
    {class} function RuntimeVariables(variables: TArray<DNParameterExpression>): DNRuntimeVariablesExpression; overload;
    {class} function RuntimeVariables(variables: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNRuntimeVariablesExpression; overload;
    {class} function SwitchCase(body: DNExpression; testValues: TArray<DNExpression>): DNSwitchCase; overload;
    {class} function Switch(switchValue: DNExpression; cases: TArray<DNSwitchCase>): DNSwitchExpression; overload;
    {class} function Switch(switchValue: DNExpression; defaultBody: DNExpression; cases: TArray<DNSwitchCase>): DNSwitchExpression; overload;
    {class} function Switch(switchValue: DNExpression; defaultBody: DNExpression; comparison: DDN.mscorlib.DNMethodInfo; cases: TArray<DNSwitchCase>): DNSwitchExpression; overload;
    {class} function Switch(&type: DDN.mscorlib.DNType; switchValue: DNExpression; defaultBody: DNExpression; comparison: DDN.mscorlib.DNMethodInfo; cases: TArray<DNSwitchCase>): DNSwitchExpression; overload;
    {class} function Switch(switchValue: DNExpression; defaultBody: DNExpression; comparison: DDN.mscorlib.DNMethodInfo; cases: DDN.mscorlib.DNIEnumerable<DNSwitchCase>): DNSwitchExpression; overload;
    {class} function SymbolDocument(fileName: string): DNSymbolDocumentInfo; overload;
    {class} function SymbolDocument(fileName: string; language: DDN.mscorlib.DNGuid): DNSymbolDocumentInfo; overload;
    {class} function SymbolDocument(fileName: string; language: DDN.mscorlib.DNGuid; languageVendor: DDN.mscorlib.DNGuid): DNSymbolDocumentInfo; overload;
    {class} function SymbolDocument(fileName: string; language: DDN.mscorlib.DNGuid; languageVendor: DDN.mscorlib.DNGuid; documentType: DDN.mscorlib.DNGuid): DNSymbolDocumentInfo; overload;
    {class} function TryFault(body: DNExpression; fault: DNExpression): DNTryExpression;
    {class} function TryFinally(body: DNExpression; &finally: DNExpression): DNTryExpression;
    {class} function TryCatch(body: DNExpression; handlers: TArray<DNCatchBlock>): DNTryExpression;
    {class} function TryCatchFinally(body: DNExpression; &finally: DNExpression; handlers: TArray<DNCatchBlock>): DNTryExpression;
    {class} function MakeUnary(unaryType: DNExpressionType; operand: DNExpression; &type: DDN.mscorlib.DNType): DNUnaryExpression; overload;
    {class} function MakeUnary(unaryType: DNExpressionType; operand: DNExpression; &type: DDN.mscorlib.DNType; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function Negate(expression: DNExpression): DNUnaryExpression; overload;
    {class} function UnaryPlus(expression: DNExpression): DNUnaryExpression; overload;
    {class} function NegateChecked(expression: DNExpression): DNUnaryExpression; overload;
    {class} function &Not(expression: DNExpression): DNUnaryExpression; overload;
    {class} function IsFalse(expression: DNExpression): DNUnaryExpression; overload;
    {class} function IsTrue(expression: DNExpression): DNUnaryExpression; overload;
    {class} function OnesComplement(expression: DNExpression): DNUnaryExpression; overload;
    {class} function Convert(expression: DNExpression; &type: DDN.mscorlib.DNType): DNUnaryExpression; overload;
    {class} function ConvertChecked(expression: DNExpression; &type: DDN.mscorlib.DNType): DNUnaryExpression; overload;
    {class} function ArrayLength(&array: DNExpression): DNUnaryExpression;
    {class} function Rethrow: DNUnaryExpression; overload;
    {class} function Rethrow(&type: DDN.mscorlib.DNType): DNUnaryExpression; overload;
    {class} function Throw(value: DNExpression): DNUnaryExpression; overload;
    {class} function Increment(expression: DNExpression): DNUnaryExpression; overload;
    {class} function Decrement(expression: DNExpression): DNUnaryExpression; overload;
    {class} function PreIncrementAssign(expression: DNExpression): DNUnaryExpression; overload;
    {class} function PreIncrementAssign(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function PreDecrementAssign(expression: DNExpression): DNUnaryExpression; overload;
    {class} function PreDecrementAssign(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function PostIncrementAssign(expression: DNExpression): DNUnaryExpression; overload;
    {class} function PostIncrementAssign(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function PostDecrementAssign(expression: DNExpression): DNUnaryExpression; overload;
    {class} function PostDecrementAssign(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function Assign(left: DNExpression; right: DNExpression): DNBinaryExpression;
    {class} function ReferenceEqual(left: DNExpression; right: DNExpression): DNBinaryExpression;
    {class} function NotEqual(left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function ReferenceNotEqual(left: DNExpression; right: DNExpression): DNBinaryExpression;
    {class} function LessThan(left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function GreaterThanOrEqual(left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function AndAlso(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function OrElse(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function Coalesce(left: DNExpression; right: DNExpression; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function AddAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function AddAssignChecked(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function AddChecked(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function Subtract(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function SubtractAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function SubtractAssignChecked(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function SubtractChecked(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function Divide(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function DivideAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function Modulo(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function ModuloAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function Multiply(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function MultiplyAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function MultiplyAssignChecked(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function MultiplyChecked(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function LeftShift(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function LeftShiftAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function RightShift(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function RightShiftAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function &And(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function AndAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function &Or(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function OrAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function ExclusiveOr(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function ExclusiveOrAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function Power(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function PowerAssign(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function ArrayIndex(&array: DNExpression; index: DNExpression): DNBinaryExpression; overload;
    {class} function Block(arg0: DNExpression; arg1: DNExpression): DNBlockExpression; overload;
    {class} function Block(arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNBlockExpression; overload;
    {class} function Block(arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression): DNBlockExpression; overload;
    {class} function Block(arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression; arg4: DNExpression): DNBlockExpression; overload;
    {class} function Block(expressions: TArray<DNExpression>): DNBlockExpression; overload;
    {class} function Block(variables: DDN.mscorlib.DNIEnumerable<DNParameterExpression>; expressions: DDN.mscorlib.DNIEnumerable<DNExpression>): DNBlockExpression; overload;
    {class} function Block(&type: DDN.mscorlib.DNType; variables: DDN.mscorlib.DNIEnumerable<DNParameterExpression>; expressions: DDN.mscorlib.DNIEnumerable<DNExpression>): DNBlockExpression; overload;
    {class} function MakeCatchBlock(&type: DDN.mscorlib.DNType; variable: DNParameterExpression; body: DNExpression; filter: DNExpression): DNCatchBlock;
    {class} function Condition(test: DNExpression; ifTrue: DNExpression; ifFalse: DNExpression): DNConditionalExpression; overload;
    {class} function Condition(test: DNExpression; ifTrue: DNExpression; ifFalse: DNExpression; &type: DDN.mscorlib.DNType): DNConditionalExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arg0: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arg0: DNExpression; arg1: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNDynamicExpression; overload;
    {class} function ElementInit(addMethod: DDN.mscorlib.DNMethodInfo; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNElementInit; overload;
    {class} function MakeGoto(kind: DNGotoExpressionKind; target: DNLabelTarget; value: DNExpression; &type: DDN.mscorlib.DNType): DNGotoExpression;
    {class} function ArrayAccess(&array: DNExpression; indexes: DDN.mscorlib.DNIEnumerable<DNExpression>): DNIndexExpression; overload;
    {class} function &Property(instance: DNExpression; propertyName: string; arguments: TArray<DNExpression>): DNIndexExpression; overload;
    {class} function Invoke(expression: DNExpression; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNInvocationExpression; overload;
    {class} function &Label(target: DNLabelTarget; defaultValue: DNExpression): DNLabelExpression; overload;
    {class} function GetDelegateType(typeArgs: TArray<DDN.mscorlib.DNType>): DDN.mscorlib.DNType;
    {class} function ListInit(newExpression: DNNewExpression; initializers: DDN.mscorlib.DNIEnumerable<DNExpression>): DNListInitExpression; overload;
    {class} function ListInit(newExpression: DNNewExpression; addMethod: DDN.mscorlib.DNMethodInfo; initializers: DDN.mscorlib.DNIEnumerable<DNExpression>): DNListInitExpression; overload;
    {class} function Loop(body: DNExpression; break: DNLabelTarget; &continue: DNLabelTarget): DNLoopExpression; overload;
    {class} function Bind(member: DDN.mscorlib.DNMemberInfo; expression: DNExpression): DNMemberAssignment; overload;
    {class} function Field(expression: DNExpression; fieldName: string): DNMemberExpression; overload;
    {class} function &Property(expression: DNExpression; propertyName: string): DNMemberExpression; overload;
    {class} function PropertyOrField(expression: DNExpression; propertyOrFieldName: string): DNMemberExpression;
    {class} function Call(instance: DNExpression; methodName: string; typeArguments: TArray<DDN.mscorlib.DNType>; arguments: TArray<DNExpression>): DNMethodCallExpression; overload;
    {class} function Call(&type: DDN.mscorlib.DNType; methodName: string; typeArguments: TArray<DDN.mscorlib.DNType>; arguments: TArray<DNExpression>): DNMethodCallExpression; overload;
    {class} function ArrayIndex(&array: DNExpression; indexes: DDN.mscorlib.DNIEnumerable<DNExpression>): DNMethodCallExpression; overload;
    {class} function NewArrayBounds(&type: DDN.mscorlib.DNType; bounds: DDN.mscorlib.DNIEnumerable<DNExpression>): DNNewArrayExpression; overload;
    {class} function SwitchCase(body: DNExpression; testValues: DDN.mscorlib.DNIEnumerable<DNExpression>): DNSwitchCase; overload;
    {class} function Switch(&type: DDN.mscorlib.DNType; switchValue: DNExpression; defaultBody: DNExpression; comparison: DDN.mscorlib.DNMethodInfo; cases: DDN.mscorlib.DNIEnumerable<DNSwitchCase>): DNSwitchExpression; overload;
    {class} function MakeTry(&type: DDN.mscorlib.DNType; body: DNExpression; &finally: DNExpression; fault: DNExpression; handlers: DDN.mscorlib.DNIEnumerable<DNCatchBlock>): DNTryExpression;
    {class} function TypeIs(expression: DNExpression; &type: DDN.mscorlib.DNType): DNTypeBinaryExpression;
    {class} function TypeEqual(expression: DNExpression; &type: DDN.mscorlib.DNType): DNTypeBinaryExpression;
    {class} function Negate(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function UnaryPlus(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function NegateChecked(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function IsFalse(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function IsTrue(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function OnesComplement(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function TypeAs(expression: DNExpression; &type: DDN.mscorlib.DNType): DNUnaryExpression;
    {class} function Unbox(expression: DNExpression; &type: DDN.mscorlib.DNType): DNUnaryExpression;
    {class} function ConvertChecked(expression: DNExpression; &type: DDN.mscorlib.DNType; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function Quote(expression: DNExpression): DNUnaryExpression;
    {class} function Throw(value: DNExpression; &type: DDN.mscorlib.DNType): DNUnaryExpression; overload;
    {class} function Increment(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function Decrement(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function Equal(left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function GreaterThan(left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function LessThanOrEqual(left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function Add(left: DNExpression; right: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function Lambda(body: DNExpression; name: string; tailCall: Boolean; parameters: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Field(expression: DNExpression; field: DDN.mscorlib.DNFieldInfo): DNMemberExpression; overload;
    {class} function &Property(expression: DNExpression; &property: DDN.mscorlib.DNPropertyInfo): DNMemberExpression; overload;
    {class} function NewArrayInit(&type: DDN.mscorlib.DNType; initializers: DDN.mscorlib.DNIEnumerable<DNExpression>): DNNewArrayExpression; overload;
    {class} function &Not(expression: DNExpression; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function Convert(expression: DNExpression; &type: DDN.mscorlib.DNType; method: DDN.mscorlib.DNMethodInfo): DNUnaryExpression; overload;

  end;

  [DNTypeName('System.Linq.Expressions.Expression')]
  DNExpression = interface(DDN.mscorlib.DNObject)
  ['{57071121-58D1-3F8B-AC92-8E800D171A46}']
  { getters & setters } 

    function get_NodeType: DNExpressionType;
    function get_Type: DDN.mscorlib.DNType;
    function get_CanReduce: Boolean;

  { methods } 

    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDN.mscorlib.DNType read get_Type;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNExpression = class(TDNGenericImport<DNExpressionClass, DNExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNBinaryExpressionClass = interface(DNExpressionClass)
  ['{91789D04-E372-5290-8931-82B96CC59305}']
  end;

  [DNTypeName('System.Linq.Expressions.BinaryExpression')]
  DNBinaryExpression = interface(DNExpression)
  ['{EF49C1CA-EFE3-3547-B40F-BB563F5D10DB}']
  { getters & setters } 

    function get_CanReduce: Boolean;
    function get_Right: DNExpression;
    function get_Left: DNExpression;
    function get_Method: DDN.mscorlib.DNMethodInfo;
    function get_Conversion: DNLambdaExpression;
    function get_IsLifted: Boolean;
    function get_IsLiftedToNull: Boolean;
    function get_NodeType: DNExpressionType;
    function get_Type: DDN.mscorlib.DNType;

  { methods } 

    function Update(left: DNExpression; conversion: DNLambdaExpression; right: DNExpression): DNBinaryExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property CanReduce: Boolean read get_CanReduce;
    property Right: DNExpression read get_Right;
    property Left: DNExpression read get_Left;
    property Method: DDN.mscorlib.DNMethodInfo read get_Method;
    property Conversion: DNLambdaExpression read get_Conversion;
    property IsLifted: Boolean read get_IsLifted;
    property IsLiftedToNull: Boolean read get_IsLiftedToNull;
    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDN.mscorlib.DNType read get_Type;
  end;

  TDNBinaryExpression = class(TDNGenericImport<DNBinaryExpressionClass, DNBinaryExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNBlockExpressionClass = interface(DNExpressionClass)
  ['{9015D880-1C72-55B8-A5DD-152145139FA6}']
  end;

  [DNTypeName('System.Linq.Expressions.BlockExpression')]
  DNBlockExpression = interface(DNExpression)
  ['{4ADE1326-F32D-3684-A10B-F89B1981E42B}']
  { getters & setters } 

    function get_Expressions: DDN.mscorlib.DNReadOnlyCollection<DNExpression>;
    function get_Variables: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>;
    function get_Result: DNExpression;
    function get_NodeType: DNExpressionType;
    function get_Type: DDN.mscorlib.DNType;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(variables: DDN.mscorlib.DNIEnumerable<DNParameterExpression>; expressions: DDN.mscorlib.DNIEnumerable<DNExpression>): DNBlockExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Expressions: DDN.mscorlib.DNReadOnlyCollection<DNExpression> read get_Expressions;
    property Variables: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression> read get_Variables;
    property Result: DNExpression read get_Result;
    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDN.mscorlib.DNType read get_Type;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNBlockExpression = class(TDNGenericImport<DNBlockExpressionClass, DNBlockExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNConditionalExpressionClass = interface(DNExpressionClass)
  ['{ECB3F797-8D2F-51B3-B15A-B7347D37F725}']
  end;

  [DNTypeName('System.Linq.Expressions.ConditionalExpression')]
  DNConditionalExpression = interface(DNExpression)
  ['{452FF498-0D0D-3058-AA87-2ED4AC9A2ECB}']
  { getters & setters } 

    function get_NodeType: DNExpressionType;
    function get_Type: DDN.mscorlib.DNType;
    function get_Test: DNExpression;
    function get_IfTrue: DNExpression;
    function get_IfFalse: DNExpression;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(test: DNExpression; ifTrue: DNExpression; ifFalse: DNExpression): DNConditionalExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDN.mscorlib.DNType read get_Type;
    property Test: DNExpression read get_Test;
    property IfTrue: DNExpression read get_IfTrue;
    property IfFalse: DNExpression read get_IfFalse;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNConditionalExpression = class(TDNGenericImport<DNConditionalExpressionClass, DNConditionalExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNConstantExpressionClass = interface(DNExpressionClass)
  ['{EF3717B5-F977-57DF-82AD-5D8C07442C0C}']
  end;

  [DNTypeName('System.Linq.Expressions.ConstantExpression')]
  DNConstantExpression = interface(DNExpression)
  ['{C0BD600C-8151-3DE1-9A18-A2FBAFA21722}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Value: DDN.mscorlib.DNObject;
    function get_CanReduce: Boolean;

  { methods } 

    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Value: DDN.mscorlib.DNObject read get_Value;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNConstantExpression = class(TDNGenericImport<DNConstantExpressionClass, DNConstantExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNDebugInfoExpressionClass = interface(DNExpressionClass)
  ['{5712692D-C598-52D5-947B-6229D1A03888}']
  end;

  [DNTypeName('System.Linq.Expressions.DebugInfoExpression')]
  DNDebugInfoExpression = interface(DNExpression)
  ['{EEE86BA5-8E06-3FD9-A26A-5A6D437DBFF2}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_StartLine: Int32;
    function get_StartColumn: Int32;
    function get_EndLine: Int32;
    function get_EndColumn: Int32;
    function get_Document: DNSymbolDocumentInfo;
    function get_IsClear: Boolean;
    function get_CanReduce: Boolean;

  { methods } 

    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property StartLine: Int32 read get_StartLine;
    property StartColumn: Int32 read get_StartColumn;
    property EndLine: Int32 read get_EndLine;
    property EndColumn: Int32 read get_EndColumn;
    property Document: DNSymbolDocumentInfo read get_Document;
    property IsClear: Boolean read get_IsClear;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNDebugInfoExpression = class(TDNGenericImport<DNDebugInfoExpressionClass, DNDebugInfoExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNDefaultExpressionClass = interface(DNExpressionClass)
  ['{C3CC3D36-48FE-51BA-ACE7-92FC8FB171FB}']
  end;

  [DNTypeName('System.Linq.Expressions.DefaultExpression')]
  DNDefaultExpression = interface(DNExpression)
  ['{703F4557-43C0-3DCF-919E-67EBF03D4644}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_CanReduce: Boolean;

  { methods } 

    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNDefaultExpression = class(TDNGenericImport<DNDefaultExpressionClass, DNDefaultExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNDynamicExpressionClass = interface(DNExpressionClass)
  ['{2163DE95-A4EB-5C77-A332-F1BC68E8DD69}']
  { static methods } 

    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arguments: TArray<DNExpression>): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arg0: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arg0: DNExpression; arg1: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDN.mscorlib.DNType; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arguments: TArray<DNExpression>): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arg0: DNExpression): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arg0: DNExpression; arg1: DNExpression): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression): DNDynamicExpression; overload;

  end;

  [DNTypeName('System.Linq.Expressions.DynamicExpression')]
  DNDynamicExpression = interface(DNExpression)
  ['{7AD50124-4068-3266-B4E7-EED07F37B8F6}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Binder: DNCallSiteBinder;
    function get_DelegateType: DDN.mscorlib.DNType;
    function get_Arguments: DDN.mscorlib.DNReadOnlyCollection<DNExpression>;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNDynamicExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Binder: DNCallSiteBinder read get_Binder;
    property DelegateType: DDN.mscorlib.DNType read get_DelegateType;
    property Arguments: DDN.mscorlib.DNReadOnlyCollection<DNExpression> read get_Arguments;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNDynamicExpression = class(TDNGenericImport<DNDynamicExpressionClass, DNDynamicExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNGotoExpressionClass = interface(DNExpressionClass)
  ['{FB63F368-4E06-5FE6-B0E1-E909CFF59E51}']
  end;

  [DNTypeName('System.Linq.Expressions.GotoExpression')]
  DNGotoExpression = interface(DNExpression)
  ['{F0DC023B-24DC-3A7F-A928-1F1A05E03124}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Value: DNExpression;
    function get_Target: DNLabelTarget;
    function get_Kind: DNGotoExpressionKind;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(target: DNLabelTarget; value: DNExpression): DNGotoExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Value: DNExpression read get_Value;
    property Target: DNLabelTarget read get_Target;
    property Kind: DNGotoExpressionKind read get_Kind;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNGotoExpression = class(TDNGenericImport<DNGotoExpressionClass, DNGotoExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNIndexExpressionClass = interface(DNExpressionClass)
  ['{37E35E28-53CF-5BA3-81FC-0316EDAEEB11}']
  end;

  [DNTypeName('System.Linq.Expressions.IndexExpression')]
  DNIndexExpression = interface(DNExpression)
  ['{79C65FB9-134E-37BC-9028-657D7B399EA3}']
  { getters & setters } 

    function get_NodeType: DNExpressionType;
    function get_Type: DDN.mscorlib.DNType;
    function get_Object: DNExpression;
    function get_Indexer: DDN.mscorlib.DNPropertyInfo;
    function get_Arguments: DDN.mscorlib.DNReadOnlyCollection<DNExpression>;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(&object: DNExpression; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNIndexExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDN.mscorlib.DNType read get_Type;
    property &Object: DNExpression read get_Object;
    property Indexer: DDN.mscorlib.DNPropertyInfo read get_Indexer;
    property Arguments: DDN.mscorlib.DNReadOnlyCollection<DNExpression> read get_Arguments;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNIndexExpression = class(TDNGenericImport<DNIndexExpressionClass, DNIndexExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNInvocationExpressionClass = interface(DNExpressionClass)
  ['{6FE15B6C-70A0-5BE1-B599-8CF4669D5EFE}']
  end;

  [DNTypeName('System.Linq.Expressions.InvocationExpression')]
  DNInvocationExpression = interface(DNExpression)
  ['{0704CC69-1CAB-396D-B00D-6485524D2E5E}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Expression: DNExpression;
    function get_Arguments: DDN.mscorlib.DNReadOnlyCollection<DNExpression>;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(expression: DNExpression; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNInvocationExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Expression: DNExpression read get_Expression;
    property Arguments: DDN.mscorlib.DNReadOnlyCollection<DNExpression> read get_Arguments;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNInvocationExpression = class(TDNGenericImport<DNInvocationExpressionClass, DNInvocationExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNLabelExpressionClass = interface(DNExpressionClass)
  ['{2DBE2271-8658-54FC-85A1-1A78FA90064F}']
  end;

  [DNTypeName('System.Linq.Expressions.LabelExpression')]
  DNLabelExpression = interface(DNExpression)
  ['{38BFD387-4AC0-3CAA-A98A-BC27F1F06A33}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Target: DNLabelTarget;
    function get_DefaultValue: DNExpression;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(target: DNLabelTarget; defaultValue: DNExpression): DNLabelExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Target: DNLabelTarget read get_Target;
    property DefaultValue: DNExpression read get_DefaultValue;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNLabelExpression = class(TDNGenericImport<DNLabelExpressionClass, DNLabelExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNLambdaExpressionClass = interface(DNExpressionClass)
  ['{C1E95244-8A29-56DE-99C1-794A0DF61F66}']
  end;

  [DNTypeName('System.Linq.Expressions.LambdaExpression')]
  DNLambdaExpression = interface(DNExpression)
  ['{251E60FA-00EA-3F31-A271-A36E70686597}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>;
    function get_Name: string;
    function get_Body: DNExpression;
    function get_ReturnType: DDN.mscorlib.DNType;
    function get_TailCall: Boolean;
    function get_CanReduce: Boolean;

  { methods } 

    function Compile: DDN.mscorlib.DNDelegate; overload;
    function Compile(debugInfoGenerator: DNDebugInfoGenerator): DDN.mscorlib.DNDelegate; overload;
    function Compile(preferInterpretation: Boolean): DDN.mscorlib.DNDelegate; overload;
    procedure CompileToMethod(method: DDN.mscorlib.DNMethodBuilder); overload;
    procedure CompileToMethod(method: DDN.mscorlib.DNMethodBuilder; debugInfoGenerator: DNDebugInfoGenerator); overload;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression> read get_Parameters;
    property Name: string read get_Name;
    property Body: DNExpression read get_Body;
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    property TailCall: Boolean read get_TailCall;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNLambdaExpression = class(TDNGenericImport<DNLambdaExpressionClass, DNLambdaExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNExpressionClass<TDelegate> = interface(DNLambdaExpressionClass)
  ['{F9EA9BFB-39AA-577E-B556-5B4369F5105F}']
  end;

  [DNTypeName('System.Linq.Expressions.Expression`1')]
  DNExpression<TDelegate> = interface(DNLambdaExpression)
  ['{8435ACBF-36AC-3C1A-AABD-0D2E1EE84D84}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>;
    function get_Name: string;
    function get_Body: DNExpression;
    function get_ReturnType: DDN.mscorlib.DNType;
    function get_TailCall: Boolean;
    function get_CanReduce: Boolean;

  { methods } 

    function Compile: TDelegate; overload;
    function Compile(debugInfoGenerator: DNDebugInfoGenerator): TDelegate; overload;
    function Compile(preferInterpretation: Boolean): TDelegate; overload;
    function Update(body: DNExpression; parameters: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNExpression<TDelegate>;
    procedure CompileToMethod(method: DDN.mscorlib.DNMethodBuilder); overload;
    procedure CompileToMethod(method: DDN.mscorlib.DNMethodBuilder; debugInfoGenerator: DNDebugInfoGenerator); overload;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression> read get_Parameters;
    property Name: string read get_Name;
    property Body: DNExpression read get_Body;
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    property TailCall: Boolean read get_TailCall;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNExpression<TDelegate> = class(TDNGenericImport<DNExpressionClass<TDelegate>, DNExpression<TDelegate>>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNListInitExpressionClass = interface(DNExpressionClass)
  ['{BBA23C76-D195-5E65-BDF2-264DE6E09A2B}']
  end;

  [DNTypeName('System.Linq.Expressions.ListInitExpression')]
  DNListInitExpression = interface(DNExpression)
  ['{5D5CAF46-34F9-3338-97C5-3FE54AA65CD0}']
  { getters & setters } 

    function get_NodeType: DNExpressionType;
    function get_Type: DDN.mscorlib.DNType;
    function get_CanReduce: Boolean;
    function get_NewExpression: DNNewExpression;
    function get_Initializers: DDN.mscorlib.DNReadOnlyCollection<DNElementInit>;

  { methods } 

    function Reduce: DNExpression;
    function Update(newExpression: DNNewExpression; initializers: DDN.mscorlib.DNIEnumerable<DNElementInit>): DNListInitExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDN.mscorlib.DNType read get_Type;
    property CanReduce: Boolean read get_CanReduce;
    property NewExpression: DNNewExpression read get_NewExpression;
    property Initializers: DDN.mscorlib.DNReadOnlyCollection<DNElementInit> read get_Initializers;
  end;

  TDNListInitExpression = class(TDNGenericImport<DNListInitExpressionClass, DNListInitExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNLoopExpressionClass = interface(DNExpressionClass)
  ['{D480B008-237E-59A4-88F8-43FE54D6CEDE}']
  end;

  [DNTypeName('System.Linq.Expressions.LoopExpression')]
  DNLoopExpression = interface(DNExpression)
  ['{84E5D5C4-651C-32E9-B4D9-6064187F72A4}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Body: DNExpression;
    function get_BreakLabel: DNLabelTarget;
    function get_ContinueLabel: DNLabelTarget;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(breakLabel: DNLabelTarget; continueLabel: DNLabelTarget; body: DNExpression): DNLoopExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Body: DNExpression read get_Body;
    property BreakLabel: DNLabelTarget read get_BreakLabel;
    property ContinueLabel: DNLabelTarget read get_ContinueLabel;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNLoopExpression = class(TDNGenericImport<DNLoopExpressionClass, DNLoopExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMemberExpressionClass = interface(DNExpressionClass)
  ['{6DC74673-28D7-5581-8DBC-CDA822F33036}']
  end;

  [DNTypeName('System.Linq.Expressions.MemberExpression')]
  DNMemberExpression = interface(DNExpression)
  ['{BA22043F-22FF-311E-9A9A-90D9C1E1A01B}']
  { getters & setters } 

    function get_Member: DDN.mscorlib.DNMemberInfo;
    function get_Expression: DNExpression;
    function get_NodeType: DNExpressionType;
    function get_Type: DDN.mscorlib.DNType;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(expression: DNExpression): DNMemberExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Member: DDN.mscorlib.DNMemberInfo read get_Member;
    property Expression: DNExpression read get_Expression;
    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDN.mscorlib.DNType read get_Type;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNMemberExpression = class(TDNGenericImport<DNMemberExpressionClass, DNMemberExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMemberInitExpressionClass = interface(DNExpressionClass)
  ['{002E3297-D8F2-5111-ABE8-224AE6ED1A01}']
  end;

  [DNTypeName('System.Linq.Expressions.MemberInitExpression')]
  DNMemberInitExpression = interface(DNExpression)
  ['{77EA09CB-545C-334F-B423-7D3B92250C76}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_CanReduce: Boolean;
    function get_NodeType: DNExpressionType;
    function get_NewExpression: DNNewExpression;
    function get_Bindings: DDN.mscorlib.DNReadOnlyCollection<DNMemberBinding>;

  { methods } 

    function Reduce: DNExpression;
    function Update(newExpression: DNNewExpression; bindings: DDN.mscorlib.DNIEnumerable<DNMemberBinding>): DNMemberInitExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property CanReduce: Boolean read get_CanReduce;
    property NodeType: DNExpressionType read get_NodeType;
    property NewExpression: DNNewExpression read get_NewExpression;
    property Bindings: DDN.mscorlib.DNReadOnlyCollection<DNMemberBinding> read get_Bindings;
  end;

  TDNMemberInitExpression = class(TDNGenericImport<DNMemberInitExpressionClass, DNMemberInitExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMethodCallExpressionClass = interface(DNExpressionClass)
  ['{B0E34F8F-57D7-59EF-9CD6-8DEAA39D3E1A}']
  end;

  [DNTypeName('System.Linq.Expressions.MethodCallExpression')]
  DNMethodCallExpression = interface(DNExpression)
  ['{50FFD00B-1F28-3BC5-8B54-A6F8DEA75FF5}']
  { getters & setters } 

    function get_NodeType: DNExpressionType;
    function get_Type: DDN.mscorlib.DNType;
    function get_Method: DDN.mscorlib.DNMethodInfo;
    function get_Object: DNExpression;
    function get_Arguments: DDN.mscorlib.DNReadOnlyCollection<DNExpression>;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(&object: DNExpression; arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNMethodCallExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDN.mscorlib.DNType read get_Type;
    property Method: DDN.mscorlib.DNMethodInfo read get_Method;
    property &Object: DNExpression read get_Object;
    property Arguments: DDN.mscorlib.DNReadOnlyCollection<DNExpression> read get_Arguments;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNMethodCallExpression = class(TDNGenericImport<DNMethodCallExpressionClass, DNMethodCallExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNNewArrayExpressionClass = interface(DNExpressionClass)
  ['{3223B2DB-BDFD-58ED-89CF-5A72785C09DD}']
  end;

  [DNTypeName('System.Linq.Expressions.NewArrayExpression')]
  DNNewArrayExpression = interface(DNExpression)
  ['{5791C72D-EF6C-3D6F-A82E-F399353297BA}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_Expressions: DDN.mscorlib.DNReadOnlyCollection<DNExpression>;
    function get_NodeType: DNExpressionType;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(expressions: DDN.mscorlib.DNIEnumerable<DNExpression>): DNNewArrayExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property Expressions: DDN.mscorlib.DNReadOnlyCollection<DNExpression> read get_Expressions;
    property NodeType: DNExpressionType read get_NodeType;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNNewArrayExpression = class(TDNGenericImport<DNNewArrayExpressionClass, DNNewArrayExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNNewExpressionClass = interface(DNExpressionClass)
  ['{42F1B4AA-93AD-529B-9822-0A0ECF826088}']
  end;

  [DNTypeName('System.Linq.Expressions.NewExpression')]
  DNNewExpression = interface(DNExpression)
  ['{602E5164-1022-372F-86DC-A7F7252382F8}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Constructor: DDN.mscorlib.DNConstructorInfo;
    function get_Arguments: DDN.mscorlib.DNReadOnlyCollection<DNExpression>;
    function get_Members: DDN.mscorlib.DNReadOnlyCollection<DDN.mscorlib.DNMemberInfo>;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(arguments: DDN.mscorlib.DNIEnumerable<DNExpression>): DNNewExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property &Constructor: DDN.mscorlib.DNConstructorInfo read get_Constructor;
    property Arguments: DDN.mscorlib.DNReadOnlyCollection<DNExpression> read get_Arguments;
    property Members: DDN.mscorlib.DNReadOnlyCollection<DDN.mscorlib.DNMemberInfo> read get_Members;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNNewExpression = class(TDNGenericImport<DNNewExpressionClass, DNNewExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNParameterExpressionClass = interface(DNExpressionClass)
  ['{89316903-B38F-5472-8B91-B49FC3ABA168}']
  end;

  [DNTypeName('System.Linq.Expressions.ParameterExpression')]
  DNParameterExpression = interface(DNExpression)
  ['{7CA3F201-4497-3CA0-9C2A-BBA28AB7AF84}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Name: string;
    function get_IsByRef: Boolean;
    function get_CanReduce: Boolean;

  { methods } 

    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Name: string read get_Name;
    property IsByRef: Boolean read get_IsByRef;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNParameterExpression = class(TDNGenericImport<DNParameterExpressionClass, DNParameterExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNRuntimeVariablesExpressionClass = interface(DNExpressionClass)
  ['{EE17A3C5-4D8E-5744-B546-BDA8839E78B7}']
  end;

  [DNTypeName('System.Linq.Expressions.RuntimeVariablesExpression')]
  DNRuntimeVariablesExpression = interface(DNExpression)
  ['{58A293FE-6B80-3E52-955D-611234F1FF8B}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Variables: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(variables: DDN.mscorlib.DNIEnumerable<DNParameterExpression>): DNRuntimeVariablesExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Variables: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression> read get_Variables;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNRuntimeVariablesExpression = class(TDNGenericImport<DNRuntimeVariablesExpressionClass, DNRuntimeVariablesExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNSwitchExpressionClass = interface(DNExpressionClass)
  ['{73DBC495-6915-5348-B1D5-4D33F64D8396}']
  end;

  [DNTypeName('System.Linq.Expressions.SwitchExpression')]
  DNSwitchExpression = interface(DNExpression)
  ['{3D71D2B7-69F3-31EF-A771-730739C63CC3}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_SwitchValue: DNExpression;
    function get_Cases: DDN.mscorlib.DNReadOnlyCollection<DNSwitchCase>;
    function get_DefaultBody: DNExpression;
    function get_Comparison: DDN.mscorlib.DNMethodInfo;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(switchValue: DNExpression; cases: DDN.mscorlib.DNIEnumerable<DNSwitchCase>; defaultBody: DNExpression): DNSwitchExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property SwitchValue: DNExpression read get_SwitchValue;
    property Cases: DDN.mscorlib.DNReadOnlyCollection<DNSwitchCase> read get_Cases;
    property DefaultBody: DNExpression read get_DefaultBody;
    property Comparison: DDN.mscorlib.DNMethodInfo read get_Comparison;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNSwitchExpression = class(TDNGenericImport<DNSwitchExpressionClass, DNSwitchExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNTryExpressionClass = interface(DNExpressionClass)
  ['{1AA017DE-F994-5479-9662-FC4823BBF85A}']
  end;

  [DNTypeName('System.Linq.Expressions.TryExpression')]
  DNTryExpression = interface(DNExpression)
  ['{65F6F267-F64F-3B95-A17D-658ACBE7ED5B}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Body: DNExpression;
    function get_Handlers: DDN.mscorlib.DNReadOnlyCollection<DNCatchBlock>;
    function get_Finally: DNExpression;
    function get_Fault: DNExpression;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(body: DNExpression; handlers: DDN.mscorlib.DNIEnumerable<DNCatchBlock>; &finally: DNExpression; fault: DNExpression): DNTryExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Body: DNExpression read get_Body;
    property Handlers: DDN.mscorlib.DNReadOnlyCollection<DNCatchBlock> read get_Handlers;
    property &Finally: DNExpression read get_Finally;
    property Fault: DNExpression read get_Fault;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNTryExpression = class(TDNGenericImport<DNTryExpressionClass, DNTryExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNTypeBinaryExpressionClass = interface(DNExpressionClass)
  ['{8174D038-D81C-5279-B0A6-515A5D091C5A}']
  end;

  [DNTypeName('System.Linq.Expressions.TypeBinaryExpression')]
  DNTypeBinaryExpression = interface(DNExpression)
  ['{F9FAAC1B-79BA-363C-A5BF-5657C5F68601}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Expression: DNExpression;
    function get_TypeOperand: DDN.mscorlib.DNType;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(expression: DNExpression): DNTypeBinaryExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Expression: DNExpression read get_Expression;
    property TypeOperand: DDN.mscorlib.DNType read get_TypeOperand;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNTypeBinaryExpression = class(TDNGenericImport<DNTypeBinaryExpressionClass, DNTypeBinaryExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNUnaryExpressionClass = interface(DNExpressionClass)
  ['{0328AF99-A8C6-5FD9-B705-1CA8E4AD4D1E}']
  end;

  [DNTypeName('System.Linq.Expressions.UnaryExpression')]
  DNUnaryExpression = interface(DNExpression)
  ['{EDACA99F-7DF8-3000-9123-3B978FDD6840}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Operand: DNExpression;
    function get_Method: DDN.mscorlib.DNMethodInfo;
    function get_IsLifted: Boolean;
    function get_IsLiftedToNull: Boolean;
    function get_CanReduce: Boolean;

  { methods } 

    function Reduce: DNExpression;
    function Update(operand: DNExpression): DNUnaryExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Operand: DNExpression read get_Operand;
    property Method: DDN.mscorlib.DNMethodInfo read get_Method;
    property IsLifted: Boolean read get_IsLifted;
    property IsLiftedToNull: Boolean read get_IsLiftedToNull;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNUnaryExpression = class(TDNGenericImport<DNUnaryExpressionClass, DNUnaryExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNExpressionVisitorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A5A87F54-0024-5D85-8578-23FC429BEB96}']
  end;

  [DNTypeName('System.Linq.Expressions.ExpressionVisitor')]
  DNExpressionVisitor = interface(DDN.mscorlib.DNObject)
  ['{C5F1042A-D382-3360-BEC4-C723A62F606B}']
  { methods } 

    function Visit(nodes: DDN.mscorlib.DNReadOnlyCollection<DNExpression>): DDN.mscorlib.DNReadOnlyCollection<DNExpression>; overload;
    function Visit(node: DNExpression): DNExpression; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNExpressionVisitor = class(TDNGenericImport<DNExpressionVisitorClass, DNExpressionVisitor>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNDynamicExpressionVisitorClass = interface(DNExpressionVisitorClass)
  ['{20884C4D-E4DE-5D33-A3F1-343BA050C0EF}']
  end;

  [DNTypeName('System.Linq.Expressions.DynamicExpressionVisitor')]
  DNDynamicExpressionVisitor = interface(DNExpressionVisitor)
  ['{BAC48429-83CD-37B8-9921-2E962B6E6169}']
  { methods } 

    function Visit(nodes: DDN.mscorlib.DNReadOnlyCollection<DNExpression>): DDN.mscorlib.DNReadOnlyCollection<DNExpression>; overload;
    function Visit(node: DNExpression): DNExpression; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDynamicExpressionVisitor = class(TDNGenericImport<DNDynamicExpressionVisitorClass, DNDynamicExpressionVisitor>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNLabelTargetClass = interface(DDN.mscorlib.DNObjectClass)
  ['{185F6F89-FEB4-58D0-958D-1B47C80E62A3}']
  end;

  [DNTypeName('System.Linq.Expressions.LabelTarget')]
  DNLabelTarget = interface(DDN.mscorlib.DNObject)
  ['{17DB098C-D299-32FE-AF65-6AE6EB0C3510}']
  { getters & setters } 

    function get_Name: string;
    function get_Type: DDN.mscorlib.DNType;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Name: string read get_Name;
    property &Type: DDN.mscorlib.DNType read get_Type;
  end;

  TDNLabelTarget = class(TDNGenericImport<DNLabelTargetClass, DNLabelTarget>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMemberBindingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6EFAAC2D-347D-58D0-BF93-4D0644A4C4F4}']
  end;

  [DNTypeName('System.Linq.Expressions.MemberBinding')]
  DNMemberBinding = interface(DDN.mscorlib.DNObject)
  ['{5F122447-E06A-345F-BBD6-1327C454854E}']
  { getters & setters } 

    function get_BindingType: DNMemberBindingType;
    function get_Member: DDN.mscorlib.DNMemberInfo;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property BindingType: DNMemberBindingType read get_BindingType;
    property Member: DDN.mscorlib.DNMemberInfo read get_Member;
  end;

  TDNMemberBinding = class(TDNGenericImport<DNMemberBindingClass, DNMemberBinding>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMemberAssignmentClass = interface(DNMemberBindingClass)
  ['{CF93536B-5AFA-598C-87D8-8698D7DF547C}']
  end;

  [DNTypeName('System.Linq.Expressions.MemberAssignment')]
  DNMemberAssignment = interface(DNMemberBinding)
  ['{10882F5E-3D52-3B00-8E8B-31E352064C66}']
  { getters & setters } 

    function get_Expression: DNExpression;
    function get_BindingType: DNMemberBindingType;
    function get_Member: DDN.mscorlib.DNMemberInfo;

  { methods } 

    function Update(expression: DNExpression): DNMemberAssignment;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Expression: DNExpression read get_Expression;
    property BindingType: DNMemberBindingType read get_BindingType;
    property Member: DDN.mscorlib.DNMemberInfo read get_Member;
  end;

  TDNMemberAssignment = class(TDNGenericImport<DNMemberAssignmentClass, DNMemberAssignment>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMemberListBindingClass = interface(DNMemberBindingClass)
  ['{3F835938-4A72-555C-9032-2291B5EF8E60}']
  end;

  [DNTypeName('System.Linq.Expressions.MemberListBinding')]
  DNMemberListBinding = interface(DNMemberBinding)
  ['{1812EE04-B6FF-3F2B-BF0F-B2DE2CAF47A8}']
  { getters & setters } 

    function get_Initializers: DDN.mscorlib.DNReadOnlyCollection<DNElementInit>;
    function get_BindingType: DNMemberBindingType;
    function get_Member: DDN.mscorlib.DNMemberInfo;

  { methods } 

    function Update(initializers: DDN.mscorlib.DNIEnumerable<DNElementInit>): DNMemberListBinding;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Initializers: DDN.mscorlib.DNReadOnlyCollection<DNElementInit> read get_Initializers;
    property BindingType: DNMemberBindingType read get_BindingType;
    property Member: DDN.mscorlib.DNMemberInfo read get_Member;
  end;

  TDNMemberListBinding = class(TDNGenericImport<DNMemberListBindingClass, DNMemberListBinding>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMemberMemberBindingClass = interface(DNMemberBindingClass)
  ['{5BFE47A0-4ED7-50BC-9161-F7D7F3CF7B51}']
  end;

  [DNTypeName('System.Linq.Expressions.MemberMemberBinding')]
  DNMemberMemberBinding = interface(DNMemberBinding)
  ['{6792C556-7187-323F-B950-88AA750B05E9}']
  { getters & setters } 

    function get_Bindings: DDN.mscorlib.DNReadOnlyCollection<DNMemberBinding>;
    function get_BindingType: DNMemberBindingType;
    function get_Member: DDN.mscorlib.DNMemberInfo;

  { methods } 

    function Update(bindings: DDN.mscorlib.DNIEnumerable<DNMemberBinding>): DNMemberMemberBinding;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Bindings: DDN.mscorlib.DNReadOnlyCollection<DNMemberBinding> read get_Bindings;
    property BindingType: DNMemberBindingType read get_BindingType;
    property Member: DDN.mscorlib.DNMemberInfo read get_Member;
  end;

  TDNMemberMemberBinding = class(TDNGenericImport<DNMemberMemberBindingClass, DNMemberMemberBinding>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNSwitchCaseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2F6A2E78-1956-5E0F-B21D-B03B28C0872C}']
  end;

  [DNTypeName('System.Linq.Expressions.SwitchCase')]
  DNSwitchCase = interface(DDN.mscorlib.DNObject)
  ['{2FDBBFCB-753F-31B3-B6CA-30D8C8745E35}']
  { getters & setters } 

    function get_TestValues: DDN.mscorlib.DNReadOnlyCollection<DNExpression>;
    function get_Body: DNExpression;

  { methods } 

    function ToString: string;
    function Update(testValues: DDN.mscorlib.DNIEnumerable<DNExpression>; body: DNExpression): DNSwitchCase;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property TestValues: DDN.mscorlib.DNReadOnlyCollection<DNExpression> read get_TestValues;
    property Body: DNExpression read get_Body;
  end;

  TDNSwitchCase = class(TDNGenericImport<DNSwitchCaseClass, DNSwitchCase>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNSymbolDocumentInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{57BCF7D1-74BE-577F-BC23-920583FC051E}']
  end;

  [DNTypeName('System.Linq.Expressions.SymbolDocumentInfo')]
  DNSymbolDocumentInfo = interface(DDN.mscorlib.DNObject)
  ['{46D2036A-E6E7-39D0-BB7E-BBE171F9D132}']
  { getters & setters } 

    function get_FileName: string;
    function get_Language: DDN.mscorlib.DNGuid;
    function get_LanguageVendor: DDN.mscorlib.DNGuid;
    function get_DocumentType: DDN.mscorlib.DNGuid;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FileName: string read get_FileName;
    property Language: DDN.mscorlib.DNGuid read get_Language;
    property LanguageVendor: DDN.mscorlib.DNGuid read get_LanguageVendor;
    property DocumentType: DDN.mscorlib.DNGuid read get_DocumentType;
  end;

  TDNSymbolDocumentInfo = class(TDNGenericImport<DNSymbolDocumentInfoClass, DNSymbolDocumentInfo>) end;

  //-------------namespace: System.Linq----------------
  DNLookupClass<TKey, TElement> = interface(DNObjectClass)
  ['{9B3CD122-D1BD-5444-9134-E55394BF1FF0}']
  end;

  [DNTypeName('System.Linq.Lookup`2')]
  DNLookup<TKey, TElement> = interface(DDN.mscorlib.DNIEnumerable<DNIGrouping<TKey, TElement>>)
  ['{92515A0A-5D25-32D0-BDEE-1A3C54AD88C5}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function &Contains(key: TKey): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIGrouping<TKey, TElement>>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNLookup<TKey, TElement> = class(TDNGenericImport<DNLookupClass<TKey, TElement>, DNLookup<TKey, TElement>>) end;

  //-------------namespace: System.Linq----------------
  DNParallelEnumerableClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8DCBB390-57FB-56E7-92FC-B5316251650E}']
  { static methods } 

    {class} function AsOrdered(source: DNParallelQuery): DNParallelQuery; overload;
    {class} function AsParallel(source: DDN.mscorlib.DNIEnumerable): DNParallelQuery; overload;
    {class} function Range(start: Int32; count: Int32): DNParallelQuery<Int32>;
    {class} function Sum(source: DNParallelQuery<Int32>): Int32; overload;
    {class} function Sum(source: DNParallelQuery<DDN.mscorlib.DNNullable<Int32>>): DDN.mscorlib.DNNullable<Int32>; overload;
    {class} function Sum(source: DNParallelQuery<Int64>): Int64; overload;
    {class} function Sum(source: DNParallelQuery<DDN.mscorlib.DNNullable<Int64>>): DDN.mscorlib.DNNullable<Int64>; overload;
    {class} function Sum(source: DNParallelQuery<Single>): Single; overload;
    {class} function Sum(source: DNParallelQuery<DDN.mscorlib.DNNullable<Single>>): DDN.mscorlib.DNNullable<Single>; overload;
    {class} function Sum(source: DNParallelQuery<Double>): Double; overload;
    {class} function Sum(source: DNParallelQuery<DDN.mscorlib.DNNullable<Double>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Sum(source: DNParallelQuery<DDN.mscorlib.DNDecimal>): DDN.mscorlib.DNDecimal; overload;
    {class} function Sum(source: DNParallelQuery<DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>>): DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>; overload;
    {class} function Min(source: DNParallelQuery<Int32>): Int32; overload;
    {class} function Min(source: DNParallelQuery<DDN.mscorlib.DNNullable<Int32>>): DDN.mscorlib.DNNullable<Int32>; overload;
    {class} function Min(source: DNParallelQuery<Int64>): Int64; overload;
    {class} function Min(source: DNParallelQuery<DDN.mscorlib.DNNullable<Int64>>): DDN.mscorlib.DNNullable<Int64>; overload;
    {class} function Min(source: DNParallelQuery<Single>): Single; overload;
    {class} function Min(source: DNParallelQuery<DDN.mscorlib.DNNullable<Single>>): DDN.mscorlib.DNNullable<Single>; overload;
    {class} function Min(source: DNParallelQuery<Double>): Double; overload;
    {class} function Min(source: DNParallelQuery<DDN.mscorlib.DNNullable<Double>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Min(source: DNParallelQuery<DDN.mscorlib.DNDecimal>): DDN.mscorlib.DNDecimal; overload;
    {class} function Min(source: DNParallelQuery<DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>>): DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>; overload;
    {class} function Max(source: DNParallelQuery<Int32>): Int32; overload;
    {class} function Max(source: DNParallelQuery<DDN.mscorlib.DNNullable<Int32>>): DDN.mscorlib.DNNullable<Int32>; overload;
    {class} function Max(source: DNParallelQuery<Int64>): Int64; overload;
    {class} function Max(source: DNParallelQuery<DDN.mscorlib.DNNullable<Int64>>): DDN.mscorlib.DNNullable<Int64>; overload;
    {class} function Max(source: DNParallelQuery<Single>): Single; overload;
    {class} function Max(source: DNParallelQuery<DDN.mscorlib.DNNullable<Single>>): DDN.mscorlib.DNNullable<Single>; overload;
    {class} function Max(source: DNParallelQuery<Double>): Double; overload;
    {class} function Max(source: DNParallelQuery<DDN.mscorlib.DNNullable<Double>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Max(source: DNParallelQuery<DDN.mscorlib.DNDecimal>): DDN.mscorlib.DNDecimal; overload;
    {class} function Max(source: DNParallelQuery<DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>>): DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>; overload;
    {class} function Average(source: DNParallelQuery<Int32>): Double; overload;
    {class} function Average(source: DNParallelQuery<DDN.mscorlib.DNNullable<Int32>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Average(source: DNParallelQuery<Int64>): Double; overload;
    {class} function Average(source: DNParallelQuery<DDN.mscorlib.DNNullable<Int64>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Average(source: DNParallelQuery<Single>): Single; overload;
    {class} function Average(source: DNParallelQuery<DDN.mscorlib.DNNullable<Single>>): DDN.mscorlib.DNNullable<Single>; overload;
    {class} function Average(source: DNParallelQuery<Double>): Double; overload;
    {class} function Average(source: DNParallelQuery<DDN.mscorlib.DNNullable<Double>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Average(source: DNParallelQuery<DDN.mscorlib.DNDecimal>): DDN.mscorlib.DNDecimal; overload;
    {class} function Average(source: DNParallelQuery<DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>>): DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>; overload;

  end;

  [DNTypeName('System.Linq.ParallelEnumerable')]
  DNParallelEnumerable = interface(DDN.mscorlib.DNObject)
  ['{5A78107D-422E-3780-A055-CCB4E03850D0}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNParallelEnumerable = class(TDNGenericImport<DNParallelEnumerableClass, DNParallelEnumerable>) end;

  //-------------namespace: System.Linq----------------
  DNParallelQueryClass = interface(DNObjectClass)
  ['{A0828839-51DB-5957-98EC-EC9D504C66B9}']
  end;

  [DNTypeName('System.Linq.ParallelQuery')]
  DNParallelQuery = interface(DDN.mscorlib.DNIEnumerable)
  ['{745887D1-9E17-3C0D-BEA2-E2A830C099D5}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNParallelQuery = class(TDNGenericImport<DNParallelQueryClass, DNParallelQuery>) end;

  //-------------namespace: System.Linq----------------
  DNParallelQueryClass<TSource> = interface(DNParallelQueryClass)
  ['{7EB052C7-DE84-575E-8ABC-0F0B6D9640FF}']
  end;

  [DNTypeName('System.Linq.ParallelQuery`1')]
  DNParallelQuery<TSource> = interface(DNParallelQuery)
  ['{397C57EF-39C2-347E-BBFF-1614CD664EB4}']
  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<TSource>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNParallelQuery<TSource> = class(TDNGenericImport<DNParallelQueryClass<TSource>, DNParallelQuery<TSource>>) end;

  //-------------namespace: System.Linq----------------
  DNOrderedParallelQueryClass<TSource> = interface(DNParallelQueryClass<TSource>)
  ['{4FD25A8E-C552-5C6F-ADAC-2C7E50CE7205}']
  end;

  [DNTypeName('System.Linq.OrderedParallelQuery`1')]
  DNOrderedParallelQuery<TSource> = interface(DNParallelQuery<TSource>)
  ['{F20FAEEE-F8EE-33FD-912C-E445D7231FF5}']
  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator<TSource>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNOrderedParallelQuery<TSource> = class(TDNGenericImport<DNOrderedParallelQueryClass<TSource>, DNOrderedParallelQuery<TSource>>) end;

  //-------------namespace: System.Linq----------------
  DNQueryableClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FDBC2164-3C3A-590B-B283-30B4B8E5FDF0}']
  { static methods } 

    {class} function AsQueryable(source: DDN.mscorlib.DNIEnumerable): DNIQueryable; overload;
    {class} function Sum(source: DNIQueryable<Int32>): Int32; overload;
    {class} function Sum(source: DNIQueryable<DDN.mscorlib.DNNullable<Int32>>): DDN.mscorlib.DNNullable<Int32>; overload;
    {class} function Sum(source: DNIQueryable<Int64>): Int64; overload;
    {class} function Sum(source: DNIQueryable<DDN.mscorlib.DNNullable<Int64>>): DDN.mscorlib.DNNullable<Int64>; overload;
    {class} function Sum(source: DNIQueryable<Single>): Single; overload;
    {class} function Sum(source: DNIQueryable<DDN.mscorlib.DNNullable<Single>>): DDN.mscorlib.DNNullable<Single>; overload;
    {class} function Sum(source: DNIQueryable<Double>): Double; overload;
    {class} function Sum(source: DNIQueryable<DDN.mscorlib.DNNullable<Double>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Sum(source: DNIQueryable<DDN.mscorlib.DNDecimal>): DDN.mscorlib.DNDecimal; overload;
    {class} function Sum(source: DNIQueryable<DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>>): DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>; overload;
    {class} function Average(source: DNIQueryable<Int32>): Double; overload;
    {class} function Average(source: DNIQueryable<DDN.mscorlib.DNNullable<Int32>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Average(source: DNIQueryable<Int64>): Double; overload;
    {class} function Average(source: DNIQueryable<DDN.mscorlib.DNNullable<Int64>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Average(source: DNIQueryable<Single>): Single; overload;
    {class} function Average(source: DNIQueryable<DDN.mscorlib.DNNullable<Single>>): DDN.mscorlib.DNNullable<Single>; overload;
    {class} function Average(source: DNIQueryable<Double>): Double; overload;
    {class} function Average(source: DNIQueryable<DDN.mscorlib.DNNullable<Double>>): DDN.mscorlib.DNNullable<Double>; overload;
    {class} function Average(source: DNIQueryable<DDN.mscorlib.DNDecimal>): DDN.mscorlib.DNDecimal; overload;
    {class} function Average(source: DNIQueryable<DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>>): DDN.mscorlib.DNNullable<DDN.mscorlib.DNDecimal>; overload;

  end;

  [DNTypeName('System.Linq.Queryable')]
  DNQueryable = interface(DDN.mscorlib.DNObject)
  ['{B4018634-9CCE-32E1-946C-15F6FDEFAE24}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNQueryable = class(TDNGenericImport<DNQueryableClass, DNQueryable>) end;

  //-------------namespace: System.Diagnostics.Eventing----------------
  DNEventProviderTraceListenerClass = interface(DNObjectClass)
  ['{53D8952C-3120-5496-8E38-C7E6259DDE5D}']
  { constructors } 

    {class} function init(providerId: string): DNEventProviderTraceListener; overload;
    {class} function init(providerId: string; name: string): DNEventProviderTraceListener; overload;
    {class} function init(providerId: string; name: string; delimiter: string): DNEventProviderTraceListener; overload;

  end;

  [DNTypeName('System.Diagnostics.Eventing.EventProviderTraceListener')]
  DNEventProviderTraceListener = interface(DNObject)
  ['{B1474432-9DA0-314E-ACC5-41F0AC435DD1}']
  { getters & setters } 

    function get_Delimiter: string;
    procedure set_Delimiter(value: string);
    function get_IsThreadSafe: Boolean;
    function get_Attributes: DDN.System.DNStringDictionary;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IndentLevel: Int32;
    procedure set_IndentLevel(value: Int32);
    function get_IndentSize: Int32;
    procedure set_IndentSize(value: Int32);
    function get_Filter: DDN.System.DNTraceFilter;
    procedure set_Filter(value: DDN.System.DNTraceFilter);
    function get_TraceOutputOptions: DDN.System.DNTraceOptions;
    procedure set_TraceOutputOptions(value: DDN.System.DNTraceOptions);

  { methods } 

    procedure Flush;
    procedure Close;
    procedure Write(message: string); overload;
    procedure WriteLine(message: string); overload;
    procedure TraceData(eventCache: DDN.System.DNTraceEventCache; source: string; eventType: DDN.System.DNTraceEventType; id: Int32; data: DDN.mscorlib.DNObject); overload;
    procedure TraceData(eventCache: DDN.System.DNTraceEventCache; source: string; eventType: DDN.System.DNTraceEventType; id: Int32; data: TArray<DDN.mscorlib.DNObject>); overload;
    procedure TraceEvent(eventCache: DDN.System.DNTraceEventCache; source: string; eventType: DDN.System.DNTraceEventType; id: Int32); overload;
    procedure TraceEvent(eventCache: DDN.System.DNTraceEventCache; source: string; eventType: DDN.System.DNTraceEventType; id: Int32; message: string); overload;
    procedure TraceEvent(eventCache: DDN.System.DNTraceEventCache; source: string; eventType: DDN.System.DNTraceEventType; id: Int32; format: string; args: TArray<DDN.mscorlib.DNObject>); overload;
    procedure Fail(message: string; detailMessage: string); overload;
    procedure TraceTransfer(eventCache: DDN.System.DNTraceEventCache; source: string; id: Int32; message: string; relatedActivityId: DDN.mscorlib.DNGuid);
    procedure Dispose;
    procedure Fail(message: string); overload;
    procedure Write(o: DDN.mscorlib.DNObject); overload;
    procedure Write(o: DDN.mscorlib.DNObject; category: string); overload;
    procedure WriteLine(o: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(o: DDN.mscorlib.DNObject; category: string); overload;
    procedure Write(message: string; category: string); overload;
    procedure WriteLine(message: string; category: string); overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Delimiter: string read get_Delimiter write set_Delimiter;
    property IsThreadSafe: Boolean read get_IsThreadSafe;
    property Attributes: DDN.System.DNStringDictionary read get_Attributes;
    property Name: string read get_Name write set_Name;
    property IndentLevel: Int32 read get_IndentLevel write set_IndentLevel;
    property IndentSize: Int32 read get_IndentSize write set_IndentSize;
    property Filter: DDN.System.DNTraceFilter read get_Filter write set_Filter;
    property TraceOutputOptions: DDN.System.DNTraceOptions read get_TraceOutputOptions write set_TraceOutputOptions;
  end;

  TDNEventProviderTraceListener = class(TDNGenericImport<DNEventProviderTraceListenerClass, DNEventProviderTraceListener>) end;

  //-------------namespace: System.Diagnostics----------------
  DNEventSchemaTraceListenerClass = interface(DNObjectClass)
  ['{7A22D4B6-C9CE-5342-BE56-33122D55B664}']
  { constructors } 

    {class} function init(fileName: string): DNEventSchemaTraceListener; overload;
    {class} function init(fileName: string; name: string): DNEventSchemaTraceListener; overload;
    {class} function init(fileName: string; name: string; bufferSize: Int32): DNEventSchemaTraceListener; overload;
    {class} function init(fileName: string; name: string; bufferSize: Int32; logRetentionOption: DNTraceLogRetentionOption): DNEventSchemaTraceListener; overload;
    {class} function init(fileName: string; name: string; bufferSize: Int32; logRetentionOption: DNTraceLogRetentionOption; maximumFileSize: Int64): DNEventSchemaTraceListener; overload;
    {class} function init(fileName: string; name: string; bufferSize: Int32; logRetentionOption: DNTraceLogRetentionOption; maximumFileSize: Int64; maximumNumberOfFiles: Int32): DNEventSchemaTraceListener; overload;

  end;

  [DNTypeName('System.Diagnostics.EventSchemaTraceListener')]
  DNEventSchemaTraceListener = interface(DNObject)
  ['{64875632-E9C0-34F6-BAFC-DB922271A161}']
  { getters & setters } 

    function get_Writer: DDN.mscorlib.DNTextWriter;
    procedure set_Writer(value: DDN.mscorlib.DNTextWriter);
    function get_IsThreadSafe: Boolean;
    function get_BufferSize: Int32;
    function get_TraceLogRetentionOption: DNTraceLogRetentionOption;
    function get_MaximumFileSize: Int64;
    function get_MaximumNumberOfFiles: Int32;
    function get_Attributes: DDN.System.DNStringDictionary;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IndentLevel: Int32;
    procedure set_IndentLevel(value: Int32);
    function get_IndentSize: Int32;
    procedure set_IndentSize(value: Int32);
    function get_Filter: DDN.System.DNTraceFilter;
    procedure set_Filter(value: DDN.System.DNTraceFilter);
    function get_TraceOutputOptions: DDN.System.DNTraceOptions;
    procedure set_TraceOutputOptions(value: DDN.System.DNTraceOptions);

  { methods } 

    procedure Write(message: string); overload;
    procedure Close;
    procedure Flush;
    procedure WriteLine(message: string); overload;
    procedure Fail(message: string; detailMessage: string); overload;
    procedure TraceEvent(eventCache: DDN.System.DNTraceEventCache; source: string; eventType: DDN.System.DNTraceEventType; id: Int32; format: string; args: TArray<DDN.mscorlib.DNObject>); overload;
    procedure TraceEvent(eventCache: DDN.System.DNTraceEventCache; source: string; eventType: DDN.System.DNTraceEventType; id: Int32; message: string); overload;
    procedure TraceData(eventCache: DDN.System.DNTraceEventCache; source: string; eventType: DDN.System.DNTraceEventType; id: Int32; data: DDN.mscorlib.DNObject); overload;
    procedure TraceData(eventCache: DDN.System.DNTraceEventCache; source: string; eventType: DDN.System.DNTraceEventType; id: Int32; data: TArray<DDN.mscorlib.DNObject>); overload;
    procedure TraceTransfer(eventCache: DDN.System.DNTraceEventCache; source: string; id: Int32; message: string; relatedActivityId: DDN.mscorlib.DNGuid);
    procedure Dispose;
    procedure Fail(message: string); overload;
    procedure Write(o: DDN.mscorlib.DNObject); overload;
    procedure Write(o: DDN.mscorlib.DNObject; category: string); overload;
    procedure WriteLine(o: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(o: DDN.mscorlib.DNObject; category: string); overload;
    procedure TraceEvent(eventCache: DDN.System.DNTraceEventCache; source: string; eventType: DDN.System.DNTraceEventType; id: Int32); overload;
    procedure Write(message: string; category: string); overload;
    procedure WriteLine(message: string; category: string); overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Writer: DDN.mscorlib.DNTextWriter read get_Writer write set_Writer;
    property IsThreadSafe: Boolean read get_IsThreadSafe;
    property BufferSize: Int32 read get_BufferSize;
    property TraceLogRetentionOption: DNTraceLogRetentionOption read get_TraceLogRetentionOption;
    property MaximumFileSize: Int64 read get_MaximumFileSize;
    property MaximumNumberOfFiles: Int32 read get_MaximumNumberOfFiles;
    property Attributes: DDN.System.DNStringDictionary read get_Attributes;
    property Name: string read get_Name write set_Name;
    property IndentLevel: Int32 read get_IndentLevel write set_IndentLevel;
    property IndentSize: Int32 read get_IndentSize write set_IndentSize;
    property Filter: DDN.System.DNTraceFilter read get_Filter write set_Filter;
    property TraceOutputOptions: DDN.System.DNTraceOptions read get_TraceOutputOptions write set_TraceOutputOptions;
  end;

  TDNEventSchemaTraceListener = class(TDNGenericImport<DNEventSchemaTraceListenerClass, DNEventSchemaTraceListener>) end;

  //-------------namespace: System.IO.Pipes----------------
  DNPipeStreamClass = interface(DDN.mscorlib.DNStreamClass)
  ['{FDD1EC2E-F4DE-5EAE-B61A-2B977564ACB6}']
  end;

  [DNTypeName('System.IO.Pipes.PipeStream')]
  DNPipeStream = interface(DDN.mscorlib.DNStream)
  ['{C98F14E4-AA9B-334B-8E1D-54E79CC9D37A}']
  { getters & setters } 

    function get_IsConnected: Boolean;
    function get_IsAsync: Boolean;
    function get_IsMessageComplete: Boolean;
    function get_TransmissionMode: DNPipeTransmissionMode;
    function get_InBufferSize: Int32;
    function get_OutBufferSize: Int32;
    function get_ReadMode: DNPipeTransmissionMode;
    procedure set_ReadMode(value: DNPipeTransmissionMode);
    function get_SafePipeHandle: DNSafePipeHandle;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_CanSeek: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndRead(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32;
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    procedure EndWrite(asyncResult: DDN.mscorlib.DNIAsyncResult);
    procedure Flush;
    procedure SetLength(value: Int64);
    function Seek(offset: Int64; origin: DDN.mscorlib.DNSeekOrigin): Int64;
    function ReadByte: Int32;
    procedure WriteByte(value: Byte);
    procedure WaitForPipeDrain;
    function GetAccessControl: DNPipeSecurity;
    procedure SetAccessControl(pipeSecurity: DNPipeSecurity);
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Close;
    procedure Dispose;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32): DDN.mscorlib.DNTask; overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream); overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream; bufferSize: Int32); overload;
    function FlushAsync: DDN.mscorlib.DNTask; overload;
    function FlushAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsConnected: Boolean read get_IsConnected;
    property IsAsync: Boolean read get_IsAsync;
    property IsMessageComplete: Boolean read get_IsMessageComplete;
    property TransmissionMode: DNPipeTransmissionMode read get_TransmissionMode;
    property InBufferSize: Int32 read get_InBufferSize;
    property OutBufferSize: Int32 read get_OutBufferSize;
    property ReadMode: DNPipeTransmissionMode read get_ReadMode write set_ReadMode;
    property SafePipeHandle: DNSafePipeHandle read get_SafePipeHandle;
    property CanRead: Boolean read get_CanRead;
    property CanWrite: Boolean read get_CanWrite;
    property CanSeek: Boolean read get_CanSeek;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position write set_Position;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNPipeStream = class(TDNGenericImport<DNPipeStreamClass, DNPipeStream>) end;

  //-------------namespace: System.IO.Pipes----------------
  DNAnonymousPipeClientStreamClass = interface(DNPipeStreamClass)
  ['{C6922860-BA50-58D7-AA64-0C13887A6037}']
  { static getter & setter } 

    procedure set_ReadMode(value: DNPipeTransmissionMode);

  { constructors } 

    {class} function init(pipeHandleAsString: string): DNAnonymousPipeClientStream; overload;
    {class} function init(direction: DNPipeDirection; pipeHandleAsString: string): DNAnonymousPipeClientStream; overload;
    {class} function init(direction: DNPipeDirection; safePipeHandle: DNSafePipeHandle): DNAnonymousPipeClientStream; overload;

  { static propertys } 

    {class} property ReadMode: DNPipeTransmissionMode write set_ReadMode;
  end;

  [DNTypeName('System.IO.Pipes.AnonymousPipeClientStream')]
  DNAnonymousPipeClientStream = interface(DNPipeStream)
  ['{B610753A-191A-3D16-90B4-AEFCC889BB22}']
  { getters & setters } 

    function get_TransmissionMode: DNPipeTransmissionMode;
    procedure set_ReadMode(value: DNPipeTransmissionMode);
    function get_IsConnected: Boolean;
    function get_IsAsync: Boolean;
    function get_IsMessageComplete: Boolean;
    function get_InBufferSize: Int32;
    function get_OutBufferSize: Int32;
    function get_SafePipeHandle: DNSafePipeHandle;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_CanSeek: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndRead(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32;
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    procedure EndWrite(asyncResult: DDN.mscorlib.DNIAsyncResult);
    procedure Flush;
    procedure SetLength(value: Int64);
    function Seek(offset: Int64; origin: DDN.mscorlib.DNSeekOrigin): Int64;
    function ReadByte: Int32;
    procedure WriteByte(value: Byte);
    procedure WaitForPipeDrain;
    function GetAccessControl: DNPipeSecurity;
    procedure SetAccessControl(pipeSecurity: DNPipeSecurity);
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Close;
    procedure Dispose;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32): DDN.mscorlib.DNTask; overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream); overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream; bufferSize: Int32); overload;
    function FlushAsync: DDN.mscorlib.DNTask; overload;
    function FlushAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TransmissionMode: DNPipeTransmissionMode read get_TransmissionMode;
    property ReadMode: DNPipeTransmissionMode write set_ReadMode;
    property IsConnected: Boolean read get_IsConnected;
    property IsAsync: Boolean read get_IsAsync;
    property IsMessageComplete: Boolean read get_IsMessageComplete;
    property InBufferSize: Int32 read get_InBufferSize;
    property OutBufferSize: Int32 read get_OutBufferSize;
    property SafePipeHandle: DNSafePipeHandle read get_SafePipeHandle;
    property CanRead: Boolean read get_CanRead;
    property CanWrite: Boolean read get_CanWrite;
    property CanSeek: Boolean read get_CanSeek;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position write set_Position;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNAnonymousPipeClientStream = class(TDNGenericImport<DNAnonymousPipeClientStreamClass, DNAnonymousPipeClientStream>) end;

  //-------------namespace: System.IO.Pipes----------------
  DNAnonymousPipeServerStreamClass = interface(DNPipeStreamClass)
  ['{8196832D-FC69-51B4-894E-41B8F91447B1}']
  { static getter & setter } 

    procedure set_ReadMode(value: DNPipeTransmissionMode);

  { constructors } 

    {class} function init: DNAnonymousPipeServerStream; overload;
    {class} function init(direction: DNPipeDirection): DNAnonymousPipeServerStream; overload;
    {class} function init(direction: DNPipeDirection; inheritability: DNHandleInheritability): DNAnonymousPipeServerStream; overload;
    {class} function init(direction: DNPipeDirection; inheritability: DNHandleInheritability; bufferSize: Int32): DNAnonymousPipeServerStream; overload;
    {class} function init(direction: DNPipeDirection; inheritability: DNHandleInheritability; bufferSize: Int32; pipeSecurity: DNPipeSecurity): DNAnonymousPipeServerStream; overload;
    {class} function init(direction: DNPipeDirection; serverSafePipeHandle: DNSafePipeHandle; clientSafePipeHandle: DNSafePipeHandle): DNAnonymousPipeServerStream; overload;

  { static propertys } 

    {class} property ReadMode: DNPipeTransmissionMode write set_ReadMode;
  end;

  [DNTypeName('System.IO.Pipes.AnonymousPipeServerStream')]
  DNAnonymousPipeServerStream = interface(DNPipeStream)
  ['{884A81C3-57A0-33D5-A300-0AB2F1E3C609}']
  { getters & setters } 

    function get_ClientSafePipeHandle: DNSafePipeHandle;
    function get_TransmissionMode: DNPipeTransmissionMode;
    procedure set_ReadMode(value: DNPipeTransmissionMode);
    function get_IsConnected: Boolean;
    function get_IsAsync: Boolean;
    function get_IsMessageComplete: Boolean;
    function get_InBufferSize: Int32;
    function get_OutBufferSize: Int32;
    function get_SafePipeHandle: DNSafePipeHandle;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_CanSeek: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    function GetClientHandleAsString: string;
    procedure DisposeLocalCopyOfClientHandle;
    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndRead(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32;
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    procedure EndWrite(asyncResult: DDN.mscorlib.DNIAsyncResult);
    procedure Flush;
    procedure SetLength(value: Int64);
    function Seek(offset: Int64; origin: DDN.mscorlib.DNSeekOrigin): Int64;
    function ReadByte: Int32;
    procedure WriteByte(value: Byte);
    procedure WaitForPipeDrain;
    function GetAccessControl: DNPipeSecurity;
    procedure SetAccessControl(pipeSecurity: DNPipeSecurity);
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Close;
    procedure Dispose;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32): DDN.mscorlib.DNTask; overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream); overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream; bufferSize: Int32); overload;
    function FlushAsync: DDN.mscorlib.DNTask; overload;
    function FlushAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ClientSafePipeHandle: DNSafePipeHandle read get_ClientSafePipeHandle;
    property TransmissionMode: DNPipeTransmissionMode read get_TransmissionMode;
    property ReadMode: DNPipeTransmissionMode write set_ReadMode;
    property IsConnected: Boolean read get_IsConnected;
    property IsAsync: Boolean read get_IsAsync;
    property IsMessageComplete: Boolean read get_IsMessageComplete;
    property InBufferSize: Int32 read get_InBufferSize;
    property OutBufferSize: Int32 read get_OutBufferSize;
    property SafePipeHandle: DNSafePipeHandle read get_SafePipeHandle;
    property CanRead: Boolean read get_CanRead;
    property CanWrite: Boolean read get_CanWrite;
    property CanSeek: Boolean read get_CanSeek;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position write set_Position;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNAnonymousPipeServerStream = class(TDNGenericImport<DNAnonymousPipeServerStreamClass, DNAnonymousPipeServerStream>) end;

  //-------------namespace: System.IO.Pipes----------------
  DNNamedPipeClientStreamClass = interface(DNPipeStreamClass)
  ['{862A5CF9-0F09-50D7-821A-C27C071A30CB}']
  { constructors } 

    {class} function init(pipeName: string): DNNamedPipeClientStream; overload;
    {class} function init(serverName: string; pipeName: string): DNNamedPipeClientStream; overload;
    {class} function init(serverName: string; pipeName: string; direction: DNPipeDirection): DNNamedPipeClientStream; overload;
    {class} function init(serverName: string; pipeName: string; direction: DNPipeDirection; options: DNPipeOptions): DNNamedPipeClientStream; overload;
    {class} function init(serverName: string; pipeName: string; direction: DNPipeDirection; options: DNPipeOptions; impersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel): DNNamedPipeClientStream; overload;
    {class} function init(serverName: string; pipeName: string; direction: DNPipeDirection; options: DNPipeOptions; impersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel; inheritability: DNHandleInheritability): DNNamedPipeClientStream; overload;
    {class} function init(serverName: string; pipeName: string; desiredAccessRights: DNPipeAccessRights; options: DNPipeOptions; impersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel; inheritability: DNHandleInheritability): DNNamedPipeClientStream; overload;
    {class} function init(direction: DNPipeDirection; isAsync: Boolean; isConnected: Boolean; safePipeHandle: DNSafePipeHandle): DNNamedPipeClientStream; overload;

  end;

  [DNTypeName('System.IO.Pipes.NamedPipeClientStream')]
  DNNamedPipeClientStream = interface(DNPipeStream)
  ['{FD52A687-FD3A-3F99-83ED-6D2F9BF7E05E}']
  { getters & setters } 

    function get_NumberOfServerInstances: Int32;
    function get_IsConnected: Boolean;
    function get_IsAsync: Boolean;
    function get_IsMessageComplete: Boolean;
    function get_TransmissionMode: DNPipeTransmissionMode;
    function get_InBufferSize: Int32;
    function get_OutBufferSize: Int32;
    function get_ReadMode: DNPipeTransmissionMode;
    procedure set_ReadMode(value: DNPipeTransmissionMode);
    function get_SafePipeHandle: DNSafePipeHandle;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_CanSeek: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    procedure Connect; overload;
    procedure Connect(timeout: Int32); overload;
    function ConnectAsync: DDN.mscorlib.DNTask; overload;
    function ConnectAsync(timeout: Int32): DDN.mscorlib.DNTask; overload;
    function ConnectAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ConnectAsync(timeout: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndRead(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32;
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    procedure EndWrite(asyncResult: DDN.mscorlib.DNIAsyncResult);
    procedure Flush;
    procedure SetLength(value: Int64);
    function Seek(offset: Int64; origin: DDN.mscorlib.DNSeekOrigin): Int64;
    function ReadByte: Int32;
    procedure WriteByte(value: Byte);
    procedure WaitForPipeDrain;
    function GetAccessControl: DNPipeSecurity;
    procedure SetAccessControl(pipeSecurity: DNPipeSecurity);
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Close;
    procedure Dispose;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32): DDN.mscorlib.DNTask; overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream); overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream; bufferSize: Int32); overload;
    function FlushAsync: DDN.mscorlib.DNTask; overload;
    function FlushAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NumberOfServerInstances: Int32 read get_NumberOfServerInstances;
    property IsConnected: Boolean read get_IsConnected;
    property IsAsync: Boolean read get_IsAsync;
    property IsMessageComplete: Boolean read get_IsMessageComplete;
    property TransmissionMode: DNPipeTransmissionMode read get_TransmissionMode;
    property InBufferSize: Int32 read get_InBufferSize;
    property OutBufferSize: Int32 read get_OutBufferSize;
    property ReadMode: DNPipeTransmissionMode read get_ReadMode write set_ReadMode;
    property SafePipeHandle: DNSafePipeHandle read get_SafePipeHandle;
    property CanRead: Boolean read get_CanRead;
    property CanWrite: Boolean read get_CanWrite;
    property CanSeek: Boolean read get_CanSeek;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position write set_Position;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNNamedPipeClientStream = class(TDNGenericImport<DNNamedPipeClientStreamClass, DNNamedPipeClientStream>) end;

  //-------------namespace: System.IO.Pipes----------------
  DNNamedPipeServerStreamClass = interface(DNPipeStreamClass)
  ['{7E2F268F-F8F6-51A3-BA55-7DC9DBBD6A97}']
  { constructors } 

    {class} function init(pipeName: string): DNNamedPipeServerStream; overload;
    {class} function init(pipeName: string; direction: DNPipeDirection): DNNamedPipeServerStream; overload;
    {class} function init(pipeName: string; direction: DNPipeDirection; maxNumberOfServerInstances: Int32): DNNamedPipeServerStream; overload;
    {class} function init(pipeName: string; direction: DNPipeDirection; maxNumberOfServerInstances: Int32; transmissionMode: DNPipeTransmissionMode): DNNamedPipeServerStream; overload;
    {class} function init(pipeName: string; direction: DNPipeDirection; maxNumberOfServerInstances: Int32; transmissionMode: DNPipeTransmissionMode; options: DNPipeOptions): DNNamedPipeServerStream; overload;
    {class} function init(pipeName: string; direction: DNPipeDirection; maxNumberOfServerInstances: Int32; transmissionMode: DNPipeTransmissionMode; options: DNPipeOptions; inBufferSize: Int32; outBufferSize: Int32): DNNamedPipeServerStream; overload;
    {class} function init(pipeName: string; direction: DNPipeDirection; maxNumberOfServerInstances: Int32; transmissionMode: DNPipeTransmissionMode; options: DNPipeOptions; inBufferSize: Int32; outBufferSize: Int32; pipeSecurity: DNPipeSecurity): DNNamedPipeServerStream; overload;
    {class} function init(pipeName: string; direction: DNPipeDirection; maxNumberOfServerInstances: Int32; transmissionMode: DNPipeTransmissionMode; options: DNPipeOptions; inBufferSize: Int32; outBufferSize: Int32; pipeSecurity: DNPipeSecurity; inheritability: DNHandleInheritability): DNNamedPipeServerStream; overload;
    {class} function init(pipeName: string; direction: DNPipeDirection; maxNumberOfServerInstances: Int32; transmissionMode: DNPipeTransmissionMode; options: DNPipeOptions; inBufferSize: Int32; outBufferSize: Int32; pipeSecurity: DNPipeSecurity; inheritability: DNHandleInheritability; additionalAccessRights: DNPipeAccessRights): DNNamedPipeServerStream; overload;
    {class} function init(direction: DNPipeDirection; isAsync: Boolean; isConnected: Boolean; safePipeHandle: DNSafePipeHandle): DNNamedPipeServerStream; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_MaxAllowedServerInstances: Int32;

  { static fields } 

    {class} property MaxAllowedServerInstances: Int32 read __fakeFieldGet_MaxAllowedServerInstances;

  end;

  [DNTypeName('System.IO.Pipes.NamedPipeServerStream')]
  DNNamedPipeServerStream = interface(DNPipeStream)
  ['{EEE4B52F-087D-3660-8637-0CD5D6568F66}']
  { getters & setters } 

    function get_IsConnected: Boolean;
    function get_IsAsync: Boolean;
    function get_IsMessageComplete: Boolean;
    function get_TransmissionMode: DNPipeTransmissionMode;
    function get_InBufferSize: Int32;
    function get_OutBufferSize: Int32;
    function get_ReadMode: DNPipeTransmissionMode;
    procedure set_ReadMode(value: DNPipeTransmissionMode);
    function get_SafePipeHandle: DNSafePipeHandle;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_CanSeek: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    procedure WaitForConnection;
    function WaitForConnectionAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function WaitForConnectionAsync: DDN.mscorlib.DNTask; overload;
    function BeginWaitForConnection(callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    procedure EndWaitForConnection(asyncResult: DDN.mscorlib.DNIAsyncResult);
    procedure Disconnect;
    procedure RunAsClient(impersonationWorker: DNPipeStreamImpersonationWorker);
    function GetImpersonationUserName: string;
    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndRead(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32;
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    procedure EndWrite(asyncResult: DDN.mscorlib.DNIAsyncResult);
    procedure Flush;
    procedure SetLength(value: Int64);
    function Seek(offset: Int64; origin: DDN.mscorlib.DNSeekOrigin): Int64;
    function ReadByte: Int32;
    procedure WriteByte(value: Byte);
    procedure WaitForPipeDrain;
    function GetAccessControl: DNPipeSecurity;
    procedure SetAccessControl(pipeSecurity: DNPipeSecurity);
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Close;
    procedure Dispose;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32): DDN.mscorlib.DNTask; overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream); overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream; bufferSize: Int32); overload;
    function FlushAsync: DDN.mscorlib.DNTask; overload;
    function FlushAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsConnected: Boolean read get_IsConnected;
    property IsAsync: Boolean read get_IsAsync;
    property IsMessageComplete: Boolean read get_IsMessageComplete;
    property TransmissionMode: DNPipeTransmissionMode read get_TransmissionMode;
    property InBufferSize: Int32 read get_InBufferSize;
    property OutBufferSize: Int32 read get_OutBufferSize;
    property ReadMode: DNPipeTransmissionMode read get_ReadMode write set_ReadMode;
    property SafePipeHandle: DNSafePipeHandle read get_SafePipeHandle;
    property CanRead: Boolean read get_CanRead;
    property CanWrite: Boolean read get_CanWrite;
    property CanSeek: Boolean read get_CanSeek;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position write set_Position;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNNamedPipeServerStream = class(TDNGenericImport<DNNamedPipeServerStreamClass, DNNamedPipeServerStream>)
  public const
   MaxAllowedServerInstances = -1;
  end;

  //-------------namespace: System.IO.MemoryMappedFiles----------------
  DNMemoryMappedViewStreamClass = interface(DDN.mscorlib.DNUnmanagedMemoryStreamClass)
  ['{CBD98D5D-5589-5DAA-BA9B-6C12C43FA3ED}']
  end;

  [DNTypeName('System.IO.MemoryMappedFiles.MemoryMappedViewStream')]
  DNMemoryMappedViewStream = interface(DDN.mscorlib.DNUnmanagedMemoryStream)
  ['{63C140CE-8AE0-3B66-A1FF-1F58E7EC6125}']
  { getters & setters } 

    function get_SafeMemoryMappedViewHandle: DNSafeMemoryMappedViewHandle;
    function get_PointerOffset: Int64;
    function get_CanRead: Boolean;
    function get_CanSeek: Boolean;
    function get_CanWrite: Boolean;
    function get_Length: Int64;
    function get_Capacity: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_PositionPointer: PByte;
    procedure set_PositionPointer(value: PByte);
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    procedure SetLength(value: Int64);
    procedure Flush;
    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32;
    function ReadByte: Int32;
    function FlushAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    function Seek(offset: Int64; loc: DDN.mscorlib.DNSeekOrigin): Int64;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    procedure WriteByte(value: Byte);
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Close;
    procedure Dispose;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndRead(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32;
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    procedure EndWrite(asyncResult: DDN.mscorlib.DNIAsyncResult);
    function CopyToAsync(destination: DDN.mscorlib.DNStream): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32): DDN.mscorlib.DNTask; overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream); overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream; bufferSize: Int32); overload;
    function FlushAsync: DDN.mscorlib.DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SafeMemoryMappedViewHandle: DNSafeMemoryMappedViewHandle read get_SafeMemoryMappedViewHandle;
    property PointerOffset: Int64 read get_PointerOffset;
    property CanRead: Boolean read get_CanRead;
    property CanSeek: Boolean read get_CanSeek;
    property CanWrite: Boolean read get_CanWrite;
    property Length: Int64 read get_Length;
    property Capacity: Int64 read get_Capacity;
    property Position: Int64 read get_Position write set_Position;
    property PositionPointer: PByte read get_PositionPointer write set_PositionPointer;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNMemoryMappedViewStream = class(TDNGenericImport<DNMemoryMappedViewStreamClass, DNMemoryMappedViewStream>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNComAwareEventInfoClass = interface(DDN.mscorlib.DNEventInfoClass)
  ['{65F48C0B-8FB0-5AF1-9FA7-0B2BBFC8B5C7}']
  { constructors } 

    {class} function init(&type: DDN.mscorlib.DNType; eventName: string): DNComAwareEventInfo;

  end;

  [DNTypeName('System.Runtime.InteropServices.ComAwareEventInfo')]
  DNComAwareEventInfo = interface(DDN.mscorlib.DNEventInfo)
  ['{BA1F0751-BB5A-34C6-A927-CB44517C154F}']
  { getters & setters } 

    function get_Attributes: DDN.mscorlib.DNEventAttributes;
    function get_DeclaringType: DDN.mscorlib.DNType;
    function get_Name: string;
    function get_ReflectedType: DDN.mscorlib.DNType;
    function get_MemberType: DDN.mscorlib.DNMemberTypes;
    function get_AddMethod: DDN.mscorlib.DNMethodInfo;
    function get_RemoveMethod: DDN.mscorlib.DNMethodInfo;
    function get_RaiseMethod: DDN.mscorlib.DNMethodInfo;
    function get_EventHandlerType: DDN.mscorlib.DNType;
    function get_IsSpecialName: Boolean;
    function get_IsMulticast: Boolean;
    function get_CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DDN.mscorlib.DNModule;

  { methods } 

    procedure AddEventHandler(target: DDN.mscorlib.DNObject; handler: DDN.mscorlib.DNDelegate);
    procedure RemoveEventHandler(target: DDN.mscorlib.DNObject; handler: DDN.mscorlib.DNDelegate);
    function GetAddMethod(nonPublic: Boolean): DDN.mscorlib.DNMethodInfo; overload;
    function GetRaiseMethod(nonPublic: Boolean): DDN.mscorlib.DNMethodInfo; overload;
    function GetRemoveMethod(nonPublic: Boolean): DDN.mscorlib.DNMethodInfo; overload;
    function GetCustomAttributes(attributeType: DDN.mscorlib.DNType; inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function GetCustomAttributes(inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function IsDefined(attributeType: DDN.mscorlib.DNType; inherit: Boolean): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetOtherMethods(nonPublic: Boolean): TArray<DDN.mscorlib.DNMethodInfo>; overload;
    function GetOtherMethods: TArray<DDN.mscorlib.DNMethodInfo>; overload;
    function GetAddMethod: DDN.mscorlib.DNMethodInfo; overload;
    function GetRemoveMethod: DDN.mscorlib.DNMethodInfo; overload;
    function GetRaiseMethod: DDN.mscorlib.DNMethodInfo; overload;
    function GetCustomAttributesData: DDN.mscorlib.DNIList<DDN.mscorlib.DNCustomAttributeData>;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Attributes: DDN.mscorlib.DNEventAttributes read get_Attributes;
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
    property Name: string read get_Name;
    property ReflectedType: DDN.mscorlib.DNType read get_ReflectedType;
    property MemberType: DDN.mscorlib.DNMemberTypes read get_MemberType;
    property AddMethod: DDN.mscorlib.DNMethodInfo read get_AddMethod;
    property RemoveMethod: DDN.mscorlib.DNMethodInfo read get_RemoveMethod;
    property RaiseMethod: DDN.mscorlib.DNMethodInfo read get_RaiseMethod;
    property EventHandlerType: DDN.mscorlib.DNType read get_EventHandlerType;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsMulticast: Boolean read get_IsMulticast;
    property CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DDN.mscorlib.DNModule read get_Module;
  end;

  TDNComAwareEventInfo = class(TDNGenericImport<DNComAwareEventInfoClass, DNComAwareEventInfo>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallSiteClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CF5BB585-7D2C-5820-9CED-5D7625C9CE98}']
  { static methods } 

    {class} function Create(delegateType: DDN.mscorlib.DNType; binder: DNCallSiteBinder): DNCallSite;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CallSite')]
  DNCallSite = interface(DDN.mscorlib.DNObject)
  ['{4D1003B0-101E-3F22-8385-B9EC933241F4}']
  { getters & setters } 

    function get_Binder: DNCallSiteBinder;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Binder: DNCallSiteBinder read get_Binder;
  end;

  TDNCallSite = class(TDNGenericImport<DNCallSiteClass, DNCallSite>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallSiteClass<T> = interface(DNCallSiteClass)
  ['{9E2D81D5-337E-5090-BABD-C98E8AEFB481}']
  { static methods } 

    {class} function Create(binder: DNCallSiteBinder): DNCallSite<T>;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CallSite`1')]
  DNCallSite<T> = interface(DNCallSite)
  ['{075CCE7B-3A5F-3A98-9152-D4434E4DA73A}']
  { getters & setters } 

    function get_Update: T;
    function get_Binder: DNCallSiteBinder;

  { fields getter & setter } 

   function __fakeFieldGet_Target: T;
   procedure __fakeFieldSet_Target(value: T);

  { fields } 

   property Target: T read __fakeFieldGet_Target write __fakeFieldSet_Target;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Update: T read get_Update;
    property Binder: DNCallSiteBinder read get_Binder;
  end;

  TDNCallSite<T> = class(TDNGenericImport<DNCallSiteClass<T>, DNCallSite<T>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallSiteBinderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{34462BF9-1452-57B3-8E16-F9899ACF6DAB}']
  { static getter & setter } 

    {class} function get_UpdateLabel: DNLabelTarget;

  { static propertys } 

    {class} property UpdateLabel: DNLabelTarget read get_UpdateLabel;
  end;

  [DNTypeName('System.Runtime.CompilerServices.CallSiteBinder')]
  DNCallSiteBinder = interface(DDN.mscorlib.DNObject)
  ['{BCD9EDA4-1357-3A60-9EA1-6355DBD5BF0C}']
  { methods } 

    function Bind(args: TArray<DDN.mscorlib.DNObject>; parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCallSiteBinder = class(TDNGenericImport<DNCallSiteBinderClass, DNCallSiteBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNDynamicMetaObjectBinderClass = interface(DNCallSiteBinderClass)
  ['{A6A76F5F-9880-5131-B78B-B7867857703B}']
  end;

  [DNTypeName('System.Dynamic.DynamicMetaObjectBinder')]
  DNDynamicMetaObjectBinder = interface(DNCallSiteBinder)
  ['{6A983AD6-7E2D-3D4C-8EAA-FD2034A3E964}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;

  { methods } 

    function Bind(args: TArray<DDN.mscorlib.DNObject>; parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
  end;

  TDNDynamicMetaObjectBinder = class(TDNGenericImport<DNDynamicMetaObjectBinderClass, DNDynamicMetaObjectBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNBinaryOperationBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{BA8D570D-6856-58AC-A568-8DE00E735847}']
  end;

  [DNTypeName('System.Dynamic.BinaryOperationBinder')]
  DNBinaryOperationBinder = interface(DNDynamicMetaObjectBinder)
  ['{8ED92572-3BA2-3C0A-A0FA-141CB95C920D}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_Operation: DNExpressionType;

  { methods } 

    function FallbackBinaryOperation(target: DNDynamicMetaObject; arg: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackBinaryOperation(target: DNDynamicMetaObject; arg: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDN.mscorlib.DNObject>; parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    property Operation: DNExpressionType read get_Operation;
  end;

  TDNBinaryOperationBinder = class(TDNGenericImport<DNBinaryOperationBinderClass, DNBinaryOperationBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNConvertBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{68C2C489-7CC0-5997-9D4C-688617763E83}']
  end;

  [DNTypeName('System.Dynamic.ConvertBinder')]
  DNConvertBinder = interface(DNDynamicMetaObjectBinder)
  ['{973E6069-DD67-316A-B894-42302D1B1E2F}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_Explicit: Boolean;
    function get_ReturnType: DDN.mscorlib.DNType;

  { methods } 

    function FallbackConvert(target: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackConvert(target: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDN.mscorlib.DNObject>; parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property Explicit: Boolean read get_Explicit;
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
  end;

  TDNConvertBinder = class(TDNGenericImport<DNConvertBinderClass, DNConvertBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNCreateInstanceBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{5E3B6808-F825-56EE-A339-6BC569483010}']
  end;

  [DNTypeName('System.Dynamic.CreateInstanceBinder')]
  DNCreateInstanceBinder = interface(DNDynamicMetaObjectBinder)
  ['{18AFA6C3-B588-374F-9FF3-39F79F0B0A3B}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_CallInfo: DNCallInfo;

  { methods } 

    function FallbackCreateInstance(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackCreateInstance(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDN.mscorlib.DNObject>; parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    property CallInfo: DNCallInfo read get_CallInfo;
  end;

  TDNCreateInstanceBinder = class(TDNGenericImport<DNCreateInstanceBinderClass, DNCreateInstanceBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNDeleteIndexBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{8ACCC0E5-0014-58C6-A0E8-1E8BBB869D49}']
  end;

  [DNTypeName('System.Dynamic.DeleteIndexBinder')]
  DNDeleteIndexBinder = interface(DNDynamicMetaObjectBinder)
  ['{CC51734E-887B-3AF6-AB1A-3C417974430E}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_CallInfo: DNCallInfo;

  { methods } 

    function FallbackDeleteIndex(target: DNDynamicMetaObject; indexes: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackDeleteIndex(target: DNDynamicMetaObject; indexes: TArray<DNDynamicMetaObject>; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDN.mscorlib.DNObject>; parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    property CallInfo: DNCallInfo read get_CallInfo;
  end;

  TDNDeleteIndexBinder = class(TDNGenericImport<DNDeleteIndexBinderClass, DNDeleteIndexBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNDeleteMemberBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{6B9B9B85-E9D0-53F2-95DE-5D8EF23C2785}']
  end;

  [DNTypeName('System.Dynamic.DeleteMemberBinder')]
  DNDeleteMemberBinder = interface(DNDynamicMetaObjectBinder)
  ['{A079571A-181F-3F2F-A556-8CDEBC1621B2}']
  { getters & setters } 

    function get_Name: string;
    function get_IgnoreCase: Boolean;
    function get_ReturnType: DDN.mscorlib.DNType;

  { methods } 

    function FallbackDeleteMember(target: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackDeleteMember(target: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDN.mscorlib.DNObject>; parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property IgnoreCase: Boolean read get_IgnoreCase;
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
  end;

  TDNDeleteMemberBinder = class(TDNGenericImport<DNDeleteMemberBinderClass, DNDeleteMemberBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNGetIndexBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{53780E3C-7403-58B9-8634-8180CDE79977}']
  end;

  [DNTypeName('System.Dynamic.GetIndexBinder')]
  DNGetIndexBinder = interface(DNDynamicMetaObjectBinder)
  ['{5AD435E4-178B-32C4-A0AE-F4075DE49C43}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_CallInfo: DNCallInfo;

  { methods } 

    function FallbackGetIndex(target: DNDynamicMetaObject; indexes: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackGetIndex(target: DNDynamicMetaObject; indexes: TArray<DNDynamicMetaObject>; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDN.mscorlib.DNObject>; parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    property CallInfo: DNCallInfo read get_CallInfo;
  end;

  TDNGetIndexBinder = class(TDNGenericImport<DNGetIndexBinderClass, DNGetIndexBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNGetMemberBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{075F6E9F-CAA5-5CAD-BDD0-38A378E34FC2}']
  end;

  [DNTypeName('System.Dynamic.GetMemberBinder')]
  DNGetMemberBinder = interface(DNDynamicMetaObjectBinder)
  ['{76C49417-49E8-301F-BDE1-7A8BCB1C27FB}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_Name: string;
    function get_IgnoreCase: Boolean;

  { methods } 

    function FallbackGetMember(target: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackGetMember(target: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDN.mscorlib.DNObject>; parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    property Name: string read get_Name;
    property IgnoreCase: Boolean read get_IgnoreCase;
  end;

  TDNGetMemberBinder = class(TDNGenericImport<DNGetMemberBinderClass, DNGetMemberBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNInvokeBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{467A2FAE-A5A2-501A-82B4-353C9E365BDA}']
  end;

  [DNTypeName('System.Dynamic.InvokeBinder')]
  DNInvokeBinder = interface(DNDynamicMetaObjectBinder)
  ['{98DBA2B2-D1B2-3F8C-BAF5-C0DE2F86F02B}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_CallInfo: DNCallInfo;

  { methods } 

    function FallbackInvoke(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackInvoke(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDN.mscorlib.DNObject>; parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    property CallInfo: DNCallInfo read get_CallInfo;
  end;

  TDNInvokeBinder = class(TDNGenericImport<DNInvokeBinderClass, DNInvokeBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNInvokeMemberBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{EE6CFFB5-1859-56F8-9FD9-E290FD94B861}']
  end;

  [DNTypeName('System.Dynamic.InvokeMemberBinder')]
  DNInvokeMemberBinder = interface(DNDynamicMetaObjectBinder)
  ['{48CDD99E-177D-349C-A2CA-5CCD50A9D752}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_Name: string;
    function get_IgnoreCase: Boolean;
    function get_CallInfo: DNCallInfo;

  { methods } 

    function FallbackInvokeMember(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackInvokeMember(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function FallbackInvoke(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject;
    function Bind(args: TArray<DDN.mscorlib.DNObject>; parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    property Name: string read get_Name;
    property IgnoreCase: Boolean read get_IgnoreCase;
    property CallInfo: DNCallInfo read get_CallInfo;
  end;

  TDNInvokeMemberBinder = class(TDNGenericImport<DNInvokeMemberBinderClass, DNInvokeMemberBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNSetIndexBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{4B73D843-88C7-5CD2-86D8-08B551A0851B}']
  end;

  [DNTypeName('System.Dynamic.SetIndexBinder')]
  DNSetIndexBinder = interface(DNDynamicMetaObjectBinder)
  ['{B6401EEF-824B-33DA-AD20-4D7A5AD59D69}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_CallInfo: DNCallInfo;

  { methods } 

    function FallbackSetIndex(target: DNDynamicMetaObject; indexes: TArray<DNDynamicMetaObject>; value: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackSetIndex(target: DNDynamicMetaObject; indexes: TArray<DNDynamicMetaObject>; value: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDN.mscorlib.DNObject>; parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    property CallInfo: DNCallInfo read get_CallInfo;
  end;

  TDNSetIndexBinder = class(TDNGenericImport<DNSetIndexBinderClass, DNSetIndexBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNSetMemberBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{3F9001FC-B825-5B95-B7FE-88BA83C1F05A}']
  end;

  [DNTypeName('System.Dynamic.SetMemberBinder')]
  DNSetMemberBinder = interface(DNDynamicMetaObjectBinder)
  ['{E70B4C11-B8CF-3EE6-9DB5-B4ECB078E384}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_Name: string;
    function get_IgnoreCase: Boolean;

  { methods } 

    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackSetMember(target: DNDynamicMetaObject; value: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function FallbackSetMember(target: DNDynamicMetaObject; value: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDN.mscorlib.DNObject>; parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    property Name: string read get_Name;
    property IgnoreCase: Boolean read get_IgnoreCase;
  end;

  TDNSetMemberBinder = class(TDNGenericImport<DNSetMemberBinderClass, DNSetMemberBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNUnaryOperationBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{6E0C0F71-441A-57D2-AC27-02F09C1619B7}']
  end;

  [DNTypeName('System.Dynamic.UnaryOperationBinder')]
  DNUnaryOperationBinder = interface(DNDynamicMetaObjectBinder)
  ['{A3E57BC0-4680-3F4F-847B-96360A2C990F}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_Operation: DNExpressionType;

  { methods } 

    function FallbackUnaryOperation(target: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackUnaryOperation(target: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDN.mscorlib.DNObject>; parameters: DDN.mscorlib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDN.mscorlib.DNType): DNExpression;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    property Operation: DNExpressionType read get_Operation;
  end;

  TDNUnaryOperationBinder = class(TDNGenericImport<DNUnaryOperationBinderClass, DNUnaryOperationBinder>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallSiteHelpersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{809B9BDC-6F43-59E7-A870-A00CE714F956}']
  { static methods } 

    {class} function IsInternalFrame(mb: DDN.mscorlib.DNMethodBase): Boolean;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CallSiteHelpers')]
  DNCallSiteHelpers = interface(DDN.mscorlib.DNObject)
  ['{0EEE6BAC-3911-3134-9282-363968BB9E79}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCallSiteHelpers = class(TDNGenericImport<DNCallSiteHelpersClass, DNCallSiteHelpers>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallSiteOpsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EB46A7F1-5950-5403-9FA3-C65B4EB6DAFA}']
  { static methods } 

    {class} function SetNotMatched(site: DNCallSite): Boolean;
    {class} function GetMatch(site: DNCallSite): Boolean;
    {class} procedure ClearMatch(site: DNCallSite);

  end;

  [DNTypeName('System.Runtime.CompilerServices.CallSiteOps')]
  DNCallSiteOps = interface(DDN.mscorlib.DNObject)
  ['{32D98445-057B-359D-8569-68C1CF2419C3}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCallSiteOps = class(TDNGenericImport<DNCallSiteOpsClass, DNCallSiteOps>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNClosureClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2DB44898-4CA9-52E8-9576-49AEFFD7811F}']
  { constructors } 

    {class} function init(constants: TArray<DDN.mscorlib.DNObject>; locals: TArray<DDN.mscorlib.DNObject>): DNClosure;

  { static fields getter & setter } 

   function __fakeFieldGet_Constants: TArray<DDN.mscorlib.DNObject>;
   function __fakeFieldGet_Locals: TArray<DDN.mscorlib.DNObject>;

  { static fields } 

    {class} property Constants: TArray<DDN.mscorlib.DNObject> read __fakeFieldGet_Constants;
    {class} property Locals: TArray<DDN.mscorlib.DNObject> read __fakeFieldGet_Locals;

  end;

  [DNTypeName('System.Runtime.CompilerServices.Closure')]
  DNClosure = interface(DDN.mscorlib.DNObject)
  ['{EAD5CB0A-0A3A-31D6-86B6-F3FF288ABC75}']
  { fields getter & setter } 

   function __fakeFieldGet_Constants: TArray<DDN.mscorlib.DNObject>;
   function __fakeFieldGet_Locals: TArray<DDN.mscorlib.DNObject>;

  { fields } 

   property Constants: TArray<DDN.mscorlib.DNObject> read __fakeFieldGet_Constants;
   property Locals: TArray<DDN.mscorlib.DNObject> read __fakeFieldGet_Locals;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNClosure = class(TDNGenericImport<DNClosureClass, DNClosure>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDebugInfoGeneratorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A6BB4B0C-F26E-5E0F-B15B-F934EDB62583}']
  { static methods } 

    {class} function CreatePdbGenerator: DNDebugInfoGenerator;

  end;

  [DNTypeName('System.Runtime.CompilerServices.DebugInfoGenerator')]
  DNDebugInfoGenerator = interface(DDN.mscorlib.DNObject)
  ['{08BB7FFD-FA62-3E00-9CAF-2FF883CC52C9}']
  { methods } 

    procedure MarkSequencePoint(method: DNLambdaExpression; ilOffset: Int32; sequencePoint: DNDebugInfoExpression);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDebugInfoGenerator = class(TDNGenericImport<DNDebugInfoGeneratorClass, DNDebugInfoGenerator>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNExecutionScopeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{27A95380-3E27-5F99-B5D9-13FA6862172D}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.ExecutionScope')]
  DNExecutionScope = interface(DDN.mscorlib.DNObject)
  ['{AC27F267-2762-3BCD-9E36-E7542E948F3C}']
  { fields getter & setter } 

   function __fakeFieldGet_Parent: DNExecutionScope;
   procedure __fakeFieldSet_Parent(value: DNExecutionScope);
   function __fakeFieldGet_Globals: TArray<DDN.mscorlib.DNObject>;
   procedure __fakeFieldSet_Globals(value: TArray<DDN.mscorlib.DNObject>);
   function __fakeFieldGet_Locals: TArray<DDN.mscorlib.DNObject>;
   procedure __fakeFieldSet_Locals(value: TArray<DDN.mscorlib.DNObject>);

  { fields } 

   property Parent: DNExecutionScope read __fakeFieldGet_Parent write __fakeFieldSet_Parent;
   property Globals: TArray<DDN.mscorlib.DNObject> read __fakeFieldGet_Globals write __fakeFieldSet_Globals;
   property Locals: TArray<DDN.mscorlib.DNObject> read __fakeFieldGet_Locals write __fakeFieldSet_Locals;

  { methods } 

    function CreateHoistedLocals: TArray<DDN.mscorlib.DNObject>;
    function CreateDelegate(indexLambda: Int32; locals: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNDelegate;
    function IsolateExpression(expression: DNExpression; locals: TArray<DDN.mscorlib.DNObject>): DNExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNExecutionScope = class(TDNGenericImport<DNExecutionScopeClass, DNExecutionScope>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNReadOnlyCollectionBuilderClass<T> = interface(DNObjectClass)
  ['{F68329FD-7F52-5FC6-BCCA-F8E98EF3297A}']
  { constructors } 

    {class} function init: DNReadOnlyCollectionBuilder<T>; overload;
    {class} function init(capacity: Int32): DNReadOnlyCollectionBuilder<T>; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<T>): DNReadOnlyCollectionBuilder<T>; overload;

  end;

  [DNTypeName('System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1')]
  DNReadOnlyCollectionBuilder<T> = interface(DDN.mscorlib.DNIList<T>)
  ['{82C86E9E-0EE9-38CE-9081-0DA70555B3DE}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function IndexOf(item: T): Int32;
    procedure Insert(index: Int32; item: T);
    procedure RemoveAt(index: Int32);
    function &Contains(item: T): Boolean;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<T>;
    procedure Reverse; overload;
    procedure Reverse(index: Int32; count: Int32); overload;
    function ToArray: TArray<T>;
    function ToReadOnlyCollection: DDN.mscorlib.DNReadOnlyCollection<T>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNReadOnlyCollectionBuilder<T> = class(TDNGenericImport<DNReadOnlyCollectionBuilderClass<T>, DNReadOnlyCollectionBuilder<T>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNRuleCacheClass<T> = interface(DDN.mscorlib.DNObjectClass)
  ['{D3516F87-A7F0-54FB-8118-AF1CF5A77DE0}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.RuleCache`1')]
  DNRuleCache<T> = interface(DDN.mscorlib.DNObject)
  ['{843EC5E4-1C53-3234-8CF0-FF8BA9473544}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRuleCache<T> = class(TDNGenericImport<DNRuleCacheClass<T>, DNRuleCache<T>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNRuntimeOpsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8783E89C-8A85-5F6B-A816-B21DB6F58B7C}']
  { static methods } 

    {class} function ExpandoTryGetValue(expando: DNExpandoObject; indexClass: DDN.mscorlib.DNObject; index: Int32; name: string; ignoreCase: Boolean; out value: DDN.mscorlib.DNObject): Boolean;
    {class} function ExpandoTrySetValue(expando: DNExpandoObject; indexClass: DDN.mscorlib.DNObject; index: Int32; value: DDN.mscorlib.DNObject; name: string; ignoreCase: Boolean): DDN.mscorlib.DNObject;
    {class} function ExpandoCheckVersion(expando: DNExpandoObject; version: DDN.mscorlib.DNObject): Boolean;
    {class} procedure ExpandoPromoteClass(expando: DNExpandoObject; oldClass: DDN.mscorlib.DNObject; newClass: DDN.mscorlib.DNObject);
    {class} function Quote(expression: DNExpression; hoistedLocals: DDN.mscorlib.DNObject; locals: TArray<DDN.mscorlib.DNObject>): DNExpression;
    {class} function MergeRuntimeVariables(first: DNIRuntimeVariables; second: DNIRuntimeVariables; indexes: TArray<Int32>): DNIRuntimeVariables;
    {class} function CreateRuntimeVariables(data: TArray<DDN.mscorlib.DNObject>; indexes: TArray<Int64>): DNIRuntimeVariables; overload;
    {class} function CreateRuntimeVariables: DNIRuntimeVariables; overload;
    {class} function ExpandoTryDeleteValue(expando: DNExpandoObject; indexClass: DDN.mscorlib.DNObject; index: Int32; name: string; ignoreCase: Boolean): Boolean;

  end;

  [DNTypeName('System.Runtime.CompilerServices.RuntimeOps')]
  DNRuntimeOps = interface(DDN.mscorlib.DNObject)
  ['{382FF925-51E8-36DE-A45B-B3130C1B73F7}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRuntimeOps = class(TDNGenericImport<DNRuntimeOpsClass, DNRuntimeOps>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNStrongBoxClass<T> = interface(DNObjectClass)
  ['{EC821084-B4D6-5A62-8608-A362311BCCFE}']
  { constructors } 

    {class} function init: DNStrongBox<T>; overload;
    {class} function init(value: T): DNStrongBox<T>; overload;

  end;

  [DNTypeName('System.Runtime.CompilerServices.StrongBox`1')]
  DNStrongBox<T> = interface(DNIStrongBox)
  ['{C4521547-B39F-37D3-8E93-67687516BD6A}']
  { fields getter & setter } 

   function __fakeFieldGet_Value: T;
   procedure __fakeFieldSet_Value(value: T);

  { fields } 

   property Value: T read __fakeFieldGet_Value write __fakeFieldSet_Value;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNStrongBox<T> = class(TDNGenericImport<DNStrongBoxClass<T>, DNStrongBox<T>>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeMemoryMappedFileHandleClass = interface(DDN.mscorlib.DNSafeHandleZeroOrMinusOneIsInvalidClass)
  ['{5D11D27F-FF02-5CA2-B9B9-B80A3A3A366A}']
  end;

  [DNTypeName('Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle')]
  DNSafeMemoryMappedFileHandle = interface(DDN.mscorlib.DNSafeHandleZeroOrMinusOneIsInvalid)
  ['{AC0FD8B9-81F8-3BBE-9F9A-6EFF76C768C8}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeMemoryMappedFileHandle = class(TDNGenericImport<DNSafeMemoryMappedFileHandleClass, DNSafeMemoryMappedFileHandle>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeNCryptHandleClass = interface(DDN.mscorlib.DNSafeHandleZeroOrMinusOneIsInvalidClass)
  ['{B5A81318-8F8B-557D-B009-C49AC837FBA7}']
  end;

  [DNTypeName('Microsoft.Win32.SafeHandles.SafeNCryptHandle')]
  DNSafeNCryptHandle = interface(DDN.mscorlib.DNSafeHandleZeroOrMinusOneIsInvalid)
  ['{7E6E4B23-E285-3902-BE11-1FBE52E40F86}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeNCryptHandle = class(TDNGenericImport<DNSafeNCryptHandleClass, DNSafeNCryptHandle>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeNCryptKeyHandleClass = interface(DNSafeNCryptHandleClass)
  ['{D9135D1B-C023-5899-BAB4-19738FCE55AA}']
  { constructors } 

    {class} function init: DNSafeNCryptKeyHandle; overload;
    {class} function init(handle: IntPtr; parentHandle: DDN.mscorlib.DNSafeHandle): DNSafeNCryptKeyHandle; overload;

  end;

  [DNTypeName('Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle')]
  DNSafeNCryptKeyHandle = interface(DNSafeNCryptHandle)
  ['{60BE2FF8-FDDA-34FC-8B3E-636723C09825}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeNCryptKeyHandle = class(TDNGenericImport<DNSafeNCryptKeyHandleClass, DNSafeNCryptKeyHandle>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeNCryptProviderHandleClass = interface(DNSafeNCryptHandleClass)
  ['{2BAC7F90-7D64-5E9E-A9C1-D4493B1028DF}']
  { constructors } 

    {class} function init: DNSafeNCryptProviderHandle;

  end;

  [DNTypeName('Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle')]
  DNSafeNCryptProviderHandle = interface(DNSafeNCryptHandle)
  ['{A62D2278-04C5-39AA-9306-F5BF4E6090D2}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeNCryptProviderHandle = class(TDNGenericImport<DNSafeNCryptProviderHandleClass, DNSafeNCryptProviderHandle>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeNCryptSecretHandleClass = interface(DNSafeNCryptHandleClass)
  ['{1F56CE4B-5EE1-54D3-A383-E79414AF23AF}']
  { constructors } 

    {class} function init: DNSafeNCryptSecretHandle;

  end;

  [DNTypeName('Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle')]
  DNSafeNCryptSecretHandle = interface(DNSafeNCryptHandle)
  ['{3CDC8272-242A-3C71-B6CD-A3A47BD64896}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeNCryptSecretHandle = class(TDNGenericImport<DNSafeNCryptSecretHandleClass, DNSafeNCryptSecretHandle>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafePipeHandleClass = interface(DDN.mscorlib.DNSafeHandleZeroOrMinusOneIsInvalidClass)
  ['{A3DD8E7B-D61E-5A14-9B9C-116F81DC4296}']
  { constructors } 

    {class} function init(preexistingHandle: IntPtr; ownsHandle: Boolean): DNSafePipeHandle;

  end;

  [DNTypeName('Microsoft.Win32.SafeHandles.SafePipeHandle')]
  DNSafePipeHandle = interface(DDN.mscorlib.DNSafeHandleZeroOrMinusOneIsInvalid)
  ['{FB017894-B72B-34E1-B885-2FFF041C6C5C}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafePipeHandle = class(TDNGenericImport<DNSafePipeHandleClass, DNSafePipeHandle>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeMemoryMappedViewHandleClass = interface(DDN.mscorlib.DNSafeBufferClass)
  ['{B53664B2-3636-50FA-9EE7-33883F0B2EFF}']
  end;

  [DNTypeName('Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle')]
  DNSafeMemoryMappedViewHandle = interface(DDN.mscorlib.DNSafeBuffer)
  ['{C96C10C1-0F9D-3B15-80FB-836783ACE9BF}']
  { getters & setters } 

    function get_ByteLength: UInt64;
    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    procedure AcquirePointer(out pointer: PByte);
    procedure Initialize(numBytes: UInt64); overload;
    procedure Initialize(numElements: UInt32; sizeOfEachElement: UInt32); overload;
    procedure ReleasePointer;
    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ByteLength: UInt64 read get_ByteLength;
    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeMemoryMappedViewHandle = class(TDNGenericImport<DNSafeMemoryMappedViewHandleClass, DNSafeMemoryMappedViewHandle>) end;

  //-------------namespace: System.IO.Pipes----------------
  DNPipeAccessRuleClass = interface(DDN.mscorlib.DNAccessRuleClass)
  ['{87305EE8-5721-5AFC-9B43-5EC35AA2683A}']
  { constructors } 

    {class} function init(identity: string; rights: DNPipeAccessRights; &type: DDN.mscorlib.DNAccessControlType): DNPipeAccessRule; overload;
    {class} function init(identity: DDN.mscorlib.DNIdentityReference; rights: DNPipeAccessRights; &type: DDN.mscorlib.DNAccessControlType): DNPipeAccessRule; overload;

  end;

  [DNTypeName('System.IO.Pipes.PipeAccessRule')]
  DNPipeAccessRule = interface(DDN.mscorlib.DNAccessRule)
  ['{46B53ED0-F6FD-3A93-BF16-88D1DA1D528B}']
  { getters & setters } 

    function get_PipeAccessRights: DNPipeAccessRights;
    function get_AccessControlType: DDN.mscorlib.DNAccessControlType;
    function get_IdentityReference: DDN.mscorlib.DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DDN.mscorlib.DNInheritanceFlags;
    function get_PropagationFlags: DDN.mscorlib.DNPropagationFlags;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PipeAccessRights: DNPipeAccessRights read get_PipeAccessRights;
    property AccessControlType: DDN.mscorlib.DNAccessControlType read get_AccessControlType;
    property IdentityReference: DDN.mscorlib.DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DDN.mscorlib.DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DDN.mscorlib.DNPropagationFlags read get_PropagationFlags;
  end;

  TDNPipeAccessRule = class(TDNGenericImport<DNPipeAccessRuleClass, DNPipeAccessRule>) end;

  //-------------namespace: System.IO.Pipes----------------
  DNPipeAuditRuleClass = interface(DDN.mscorlib.DNAuditRuleClass)
  ['{5C1051CB-D3DF-5516-AC21-F5AA2F4A1285}']
  { constructors } 

    {class} function init(identity: DDN.mscorlib.DNIdentityReference; rights: DNPipeAccessRights; flags: DDN.mscorlib.DNAuditFlags): DNPipeAuditRule; overload;
    {class} function init(identity: string; rights: DNPipeAccessRights; flags: DDN.mscorlib.DNAuditFlags): DNPipeAuditRule; overload;

  end;

  [DNTypeName('System.IO.Pipes.PipeAuditRule')]
  DNPipeAuditRule = interface(DDN.mscorlib.DNAuditRule)
  ['{20E3BC0A-2B9C-3530-BCD7-75C9D6B4C513}']
  { getters & setters } 

    function get_PipeAccessRights: DNPipeAccessRights;
    function get_AuditFlags: DDN.mscorlib.DNAuditFlags;
    function get_IdentityReference: DDN.mscorlib.DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DDN.mscorlib.DNInheritanceFlags;
    function get_PropagationFlags: DDN.mscorlib.DNPropagationFlags;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PipeAccessRights: DNPipeAccessRights read get_PipeAccessRights;
    property AuditFlags: DDN.mscorlib.DNAuditFlags read get_AuditFlags;
    property IdentityReference: DDN.mscorlib.DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DDN.mscorlib.DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DDN.mscorlib.DNPropagationFlags read get_PropagationFlags;
  end;

  TDNPipeAuditRule = class(TDNGenericImport<DNPipeAuditRuleClass, DNPipeAuditRule>) end;

  //-------------namespace: System.IO.Pipes----------------
  DNPipeSecurityClass = interface(DDN.mscorlib.DNNativeObjectSecurityClass)
  ['{A254AFF3-00EA-5DB9-9E4C-602C08CA1BE4}']
  { constructors } 

    {class} function init: DNPipeSecurity;

  end;

  [DNTypeName('System.IO.Pipes.PipeSecurity')]
  DNPipeSecurity = interface(DDN.mscorlib.DNNativeObjectSecurity)
  ['{38F17941-745F-38A1-B714-2EBCAACA1DE5}']
  { getters & setters } 

    function get_AccessRightType: DDN.mscorlib.DNType;
    function get_AccessRuleType: DDN.mscorlib.DNType;
    function get_AuditRuleType: DDN.mscorlib.DNType;
    function get_AreAccessRulesProtected: Boolean;
    function get_AreAuditRulesProtected: Boolean;
    function get_AreAccessRulesCanonical: Boolean;
    function get_AreAuditRulesCanonical: Boolean;

  { methods } 

    procedure AddAccessRule(rule: DNPipeAccessRule);
    procedure SetAccessRule(rule: DNPipeAccessRule);
    procedure ResetAccessRule(rule: DNPipeAccessRule);
    function RemoveAccessRule(rule: DNPipeAccessRule): Boolean;
    procedure RemoveAccessRuleSpecific(rule: DNPipeAccessRule);
    procedure AddAuditRule(rule: DNPipeAuditRule);
    procedure SetAuditRule(rule: DNPipeAuditRule);
    function RemoveAuditRule(rule: DNPipeAuditRule): Boolean;
    procedure RemoveAuditRuleAll(rule: DNPipeAuditRule);
    procedure RemoveAuditRuleSpecific(rule: DNPipeAuditRule);
    function AccessRuleFactory(identityReference: DDN.mscorlib.DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DDN.mscorlib.DNInheritanceFlags; propagationFlags: DDN.mscorlib.DNPropagationFlags; &type: DDN.mscorlib.DNAccessControlType): DDN.mscorlib.DNAccessRule;
    function AuditRuleFactory(identityReference: DDN.mscorlib.DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DDN.mscorlib.DNInheritanceFlags; propagationFlags: DDN.mscorlib.DNPropagationFlags; flags: DDN.mscorlib.DNAuditFlags): DDN.mscorlib.DNAuditRule;
    function GetAccessRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DDN.mscorlib.DNType): DDN.mscorlib.DNAuthorizationRuleCollection;
    function GetAuditRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DDN.mscorlib.DNType): DDN.mscorlib.DNAuthorizationRuleCollection;
    function GetOwner(targetType: DDN.mscorlib.DNType): DDN.mscorlib.DNIdentityReference;
    procedure SetOwner(identity: DDN.mscorlib.DNIdentityReference);
    function GetGroup(targetType: DDN.mscorlib.DNType): DDN.mscorlib.DNIdentityReference;
    procedure SetGroup(identity: DDN.mscorlib.DNIdentityReference);
    procedure PurgeAccessRules(identity: DDN.mscorlib.DNIdentityReference);
    procedure PurgeAuditRules(identity: DDN.mscorlib.DNIdentityReference);
    procedure SetAccessRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    procedure SetAuditRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    function GetSecurityDescriptorSddlForm(includeSections: DDN.mscorlib.DNAccessControlSections): string;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string); overload;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string; includeSections: DDN.mscorlib.DNAccessControlSections); overload;
    function GetSecurityDescriptorBinaryForm: TArray<Byte>;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>); overload;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>; includeSections: DDN.mscorlib.DNAccessControlSections); overload;
    function ModifyAccessRule(modification: DDN.mscorlib.DNAccessControlModification; rule: DDN.mscorlib.DNAccessRule; out modified: Boolean): Boolean;
    function ModifyAuditRule(modification: DDN.mscorlib.DNAccessControlModification; rule: DDN.mscorlib.DNAuditRule; out modified: Boolean): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AccessRightType: DDN.mscorlib.DNType read get_AccessRightType;
    property AccessRuleType: DDN.mscorlib.DNType read get_AccessRuleType;
    property AuditRuleType: DDN.mscorlib.DNType read get_AuditRuleType;
    property AreAccessRulesProtected: Boolean read get_AreAccessRulesProtected;
    property AreAuditRulesProtected: Boolean read get_AreAuditRulesProtected;
    property AreAccessRulesCanonical: Boolean read get_AreAccessRulesCanonical;
    property AreAuditRulesCanonical: Boolean read get_AreAuditRulesCanonical;
  end;

  TDNPipeSecurity = class(TDNGenericImport<DNPipeSecurityClass, DNPipeSecurity>) end;

  //-------------namespace: System.IO.MemoryMappedFiles----------------
  DNMemoryMappedFileSecurityClass = interface(DDN.mscorlib.DNObjectSecurityClass<DNMemoryMappedFileRights>)
  ['{29E663D3-1D0A-5176-B328-196BF6482561}']
  { constructors } 

    {class} function init: DNMemoryMappedFileSecurity;

  end;

  [DNTypeName('System.IO.MemoryMappedFiles.MemoryMappedFileSecurity')]
  DNMemoryMappedFileSecurity = interface(DDN.mscorlib.DNObjectSecurity<DNMemoryMappedFileRights>)
  ['{5A2856BD-CC21-3A39-AF94-05B8F9C89AC5}']
  { getters & setters } 

    function get_AccessRightType: DDN.mscorlib.DNType;
    function get_AccessRuleType: DDN.mscorlib.DNType;
    function get_AuditRuleType: DDN.mscorlib.DNType;
    function get_AreAccessRulesProtected: Boolean;
    function get_AreAuditRulesProtected: Boolean;
    function get_AreAccessRulesCanonical: Boolean;
    function get_AreAuditRulesCanonical: Boolean;

  { methods } 

    function AccessRuleFactory(identityReference: DDN.mscorlib.DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DDN.mscorlib.DNInheritanceFlags; propagationFlags: DDN.mscorlib.DNPropagationFlags; &type: DDN.mscorlib.DNAccessControlType): DDN.mscorlib.DNAccessRule;
    function AuditRuleFactory(identityReference: DDN.mscorlib.DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DDN.mscorlib.DNInheritanceFlags; propagationFlags: DDN.mscorlib.DNPropagationFlags; flags: DDN.mscorlib.DNAuditFlags): DDN.mscorlib.DNAuditRule;
    procedure AddAccessRule(rule: DDN.mscorlib.DNAccessRule<DNMemoryMappedFileRights>);
    procedure SetAccessRule(rule: DDN.mscorlib.DNAccessRule<DNMemoryMappedFileRights>);
    procedure ResetAccessRule(rule: DDN.mscorlib.DNAccessRule<DNMemoryMappedFileRights>);
    function RemoveAccessRule(rule: DDN.mscorlib.DNAccessRule<DNMemoryMappedFileRights>): Boolean;
    procedure RemoveAccessRuleAll(rule: DDN.mscorlib.DNAccessRule<DNMemoryMappedFileRights>);
    procedure RemoveAccessRuleSpecific(rule: DDN.mscorlib.DNAccessRule<DNMemoryMappedFileRights>);
    procedure AddAuditRule(rule: DDN.mscorlib.DNAuditRule<DNMemoryMappedFileRights>);
    procedure SetAuditRule(rule: DDN.mscorlib.DNAuditRule<DNMemoryMappedFileRights>);
    function RemoveAuditRule(rule: DDN.mscorlib.DNAuditRule<DNMemoryMappedFileRights>): Boolean;
    procedure RemoveAuditRuleAll(rule: DDN.mscorlib.DNAuditRule<DNMemoryMappedFileRights>);
    procedure RemoveAuditRuleSpecific(rule: DDN.mscorlib.DNAuditRule<DNMemoryMappedFileRights>);
    function GetAccessRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DDN.mscorlib.DNType): DDN.mscorlib.DNAuthorizationRuleCollection;
    function GetAuditRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DDN.mscorlib.DNType): DDN.mscorlib.DNAuthorizationRuleCollection;
    function GetOwner(targetType: DDN.mscorlib.DNType): DDN.mscorlib.DNIdentityReference;
    procedure SetOwner(identity: DDN.mscorlib.DNIdentityReference);
    function GetGroup(targetType: DDN.mscorlib.DNType): DDN.mscorlib.DNIdentityReference;
    procedure SetGroup(identity: DDN.mscorlib.DNIdentityReference);
    procedure PurgeAccessRules(identity: DDN.mscorlib.DNIdentityReference);
    procedure PurgeAuditRules(identity: DDN.mscorlib.DNIdentityReference);
    procedure SetAccessRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    procedure SetAuditRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    function GetSecurityDescriptorSddlForm(includeSections: DDN.mscorlib.DNAccessControlSections): string;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string); overload;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string; includeSections: DDN.mscorlib.DNAccessControlSections); overload;
    function GetSecurityDescriptorBinaryForm: TArray<Byte>;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>); overload;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>; includeSections: DDN.mscorlib.DNAccessControlSections); overload;
    function ModifyAccessRule(modification: DDN.mscorlib.DNAccessControlModification; rule: DDN.mscorlib.DNAccessRule; out modified: Boolean): Boolean;
    function ModifyAuditRule(modification: DDN.mscorlib.DNAccessControlModification; rule: DDN.mscorlib.DNAuditRule; out modified: Boolean): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AccessRightType: DDN.mscorlib.DNType read get_AccessRightType;
    property AccessRuleType: DDN.mscorlib.DNType read get_AccessRuleType;
    property AuditRuleType: DDN.mscorlib.DNType read get_AuditRuleType;
    property AreAccessRulesProtected: Boolean read get_AreAccessRulesProtected;
    property AreAuditRulesProtected: Boolean read get_AreAuditRulesProtected;
    property AreAccessRulesCanonical: Boolean read get_AreAccessRulesCanonical;
    property AreAuditRulesCanonical: Boolean read get_AreAuditRulesCanonical;
  end;

  TDNMemoryMappedFileSecurity = class(TDNGenericImport<DNMemoryMappedFileSecurityClass, DNMemoryMappedFileSecurity>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNDSACngClass = interface(DDN.mscorlib.DNDSAClass)
  ['{C0D249F5-47DE-5C11-A8B1-AEE853A4E0CC}']
  { constructors } 

    {class} function init: DNDSACng; overload;
    {class} function init(keySize: Int32): DNDSACng; overload;
    {class} function init(key: DNCngKey): DNDSACng; overload;

  end;

  [DNTypeName('System.Security.Cryptography.DSACng')]
  DNDSACng = interface(DDN.mscorlib.DNDSA)
  ['{08B3195E-5EA7-3F6D-9BC5-E9056BF367A4}']
  { getters & setters } 

    function get_Key: DNCngKey;
    function get_LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes>;
    function get_SignatureAlgorithm: string;
    function get_KeyExchangeAlgorithm: string;
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);

  { methods } 

    function CreateSignature(rgbHash: TArray<Byte>): TArray<Byte>;
    function VerifySignature(rgbHash: TArray<Byte>; rgbSignature: TArray<Byte>): Boolean;
    function ExportParameters(includePrivateParameters: Boolean): DDN.mscorlib.DNDSAParameters;
    procedure ImportParameters(parameters: DDN.mscorlib.DNDSAParameters);
    function SignData(data: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): TArray<Byte>; overload;
    function SignData(data: TArray<Byte>; offset: Int32; count: Int32; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): TArray<Byte>; overload;
    function SignData(data: DDN.mscorlib.DNStream; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): TArray<Byte>; overload;
    function VerifyData(data: TArray<Byte>; signature: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): Boolean; overload;
    function VerifyData(data: TArray<Byte>; offset: Int32; count: Int32; signature: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): Boolean; overload;
    function VerifyData(data: DDN.mscorlib.DNStream; signature: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): Boolean; overload;
    procedure FromXmlString(xmlString: string);
    function ToXmlString(includePrivateParameters: Boolean): string;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Key: DNCngKey read get_Key;
    property LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes> read get_LegalKeySizes;
    property SignatureAlgorithm: string read get_SignatureAlgorithm;
    property KeyExchangeAlgorithm: string read get_KeyExchangeAlgorithm;
    property KeySize: Int32 read get_KeySize write set_KeySize;
  end;

  TDNDSACng = class(TDNGenericImport<DNDSACngClass, DNDSACng>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNECDiffieHellmanClass = interface(DDN.mscorlib.DNAsymmetricAlgorithmClass)
  ['{F2D343A4-DBAB-5FEF-A8FF-B9D9C0209B5F}']
  { static methods } 

    {class} function Create: DNECDiffieHellman; overload;
    {class} function Create(algorithm: string): DNECDiffieHellman; overload;
    {class} function Create(curve: DNECCurve): DNECDiffieHellman; overload;
    {class} function Create(parameters: DNECParameters): DNECDiffieHellman; overload;

  end;

  [DNTypeName('System.Security.Cryptography.ECDiffieHellman')]
  DNECDiffieHellman = interface(DDN.mscorlib.DNAsymmetricAlgorithm)
  ['{306543FF-7167-31E6-9F1B-A6DC30F5E519}']
  { getters & setters } 

    function get_KeyExchangeAlgorithm: string;
    function get_SignatureAlgorithm: string;
    function get_PublicKey: DNECDiffieHellmanPublicKey;
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes>;

  { methods } 

    function DeriveKeyMaterial(otherPartyPublicKey: DNECDiffieHellmanPublicKey): TArray<Byte>;
    function DeriveKeyFromHash(otherPartyPublicKey: DNECDiffieHellmanPublicKey; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): TArray<Byte>; overload;
    function DeriveKeyFromHash(otherPartyPublicKey: DNECDiffieHellmanPublicKey; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; secretPrepend: TArray<Byte>; secretAppend: TArray<Byte>): TArray<Byte>; overload;
    function DeriveKeyFromHmac(otherPartyPublicKey: DNECDiffieHellmanPublicKey; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; hmacKey: TArray<Byte>): TArray<Byte>; overload;
    function DeriveKeyFromHmac(otherPartyPublicKey: DNECDiffieHellmanPublicKey; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; hmacKey: TArray<Byte>; secretPrepend: TArray<Byte>; secretAppend: TArray<Byte>): TArray<Byte>; overload;
    function DeriveKeyTls(otherPartyPublicKey: DNECDiffieHellmanPublicKey; prfLabel: TArray<Byte>; prfSeed: TArray<Byte>): TArray<Byte>;
    function ExportParameters(includePrivateParameters: Boolean): DNECParameters;
    function ExportExplicitParameters(includePrivateParameters: Boolean): DNECParameters;
    procedure ImportParameters(parameters: DNECParameters);
    procedure GenerateKey(curve: DNECCurve);
    procedure Dispose;
    procedure Clear;
    procedure FromXmlString(xmlString: string);
    function ToXmlString(includePrivateParameters: Boolean): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyExchangeAlgorithm: string read get_KeyExchangeAlgorithm;
    property SignatureAlgorithm: string read get_SignatureAlgorithm;
    property PublicKey: DNECDiffieHellmanPublicKey read get_PublicKey;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes> read get_LegalKeySizes;
  end;

  TDNECDiffieHellman = class(TDNGenericImport<DNECDiffieHellmanClass, DNECDiffieHellman>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNECDiffieHellmanCngClass = interface(DNECDiffieHellmanClass)
  ['{CFA2843C-02A2-55E6-A879-04C7454B4DA8}']
  { constructors } 

    {class} function init: DNECDiffieHellmanCng; overload;
    {class} function init(keySize: Int32): DNECDiffieHellmanCng; overload;
    {class} function init(curve: DNECCurve): DNECDiffieHellmanCng; overload;
    {class} function init(key: DNCngKey): DNECDiffieHellmanCng; overload;

  end;

  [DNTypeName('System.Security.Cryptography.ECDiffieHellmanCng')]
  DNECDiffieHellmanCng = interface(DNECDiffieHellman)
  ['{D407780B-8E4C-3CAE-A77D-D1A0F8CDBEFC}']
  { getters & setters } 

    function get_HashAlgorithm: DNCngAlgorithm;
    procedure set_HashAlgorithm(value: DNCngAlgorithm);
    function get_HmacKey: TArray<Byte>;
    procedure set_HmacKey(value: TArray<Byte>);
    function get_KeyDerivationFunction: DNECDiffieHellmanKeyDerivationFunction;
    procedure set_KeyDerivationFunction(value: DNECDiffieHellmanKeyDerivationFunction);
    function get_Label: TArray<Byte>;
    procedure set_Label(value: TArray<Byte>);
    function get_SecretAppend: TArray<Byte>;
    procedure set_SecretAppend(value: TArray<Byte>);
    function get_SecretPrepend: TArray<Byte>;
    procedure set_SecretPrepend(value: TArray<Byte>);
    function get_Seed: TArray<Byte>;
    procedure set_Seed(value: TArray<Byte>);
    function get_Key: DNCngKey;
    function get_PublicKey: DNECDiffieHellmanPublicKey;
    function get_UseSecretAgreementAsHmacKey: Boolean;
    function get_KeyExchangeAlgorithm: string;
    function get_SignatureAlgorithm: string;
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes>;

  { methods } 

    function DeriveKeyMaterial(otherPartyPublicKey: DNECDiffieHellmanPublicKey): TArray<Byte>; overload;
    function DeriveKeyTls(otherPartyPublicKey: DNECDiffieHellmanPublicKey; prfLabel: TArray<Byte>; prfSeed: TArray<Byte>): TArray<Byte>;
    function DeriveSecretAgreementHandle(otherPartyPublicKey: DNECDiffieHellmanPublicKey): DNSafeNCryptSecretHandle; overload;
    function DeriveSecretAgreementHandle(otherPartyPublicKey: DNCngKey): DNSafeNCryptSecretHandle; overload;
    procedure FromXmlString(xmlString: string); overload;
    procedure FromXmlString(xml: string; format: DNECKeyXmlFormat); overload;
    function ToXmlString(includePrivateParameters: Boolean): string; overload;
    function ToXmlString(format: DNECKeyXmlFormat): string; overload;
    procedure ImportParameters(parameters: DNECParameters);
    function ExportExplicitParameters(includePrivateParameters: Boolean): DNECParameters;
    function ExportParameters(includePrivateParameters: Boolean): DNECParameters;
    function DeriveKeyMaterial(otherPartyPublicKey: DNCngKey): TArray<Byte>; overload;
    function DeriveKeyFromHash(otherPartyPublicKey: DNECDiffieHellmanPublicKey; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; secretPrepend: TArray<Byte>; secretAppend: TArray<Byte>): TArray<Byte>; overload;
    function DeriveKeyFromHmac(otherPartyPublicKey: DNECDiffieHellmanPublicKey; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; hmacKey: TArray<Byte>; secretPrepend: TArray<Byte>; secretAppend: TArray<Byte>): TArray<Byte>; overload;
    procedure GenerateKey(curve: DNECCurve);
    function DeriveKeyFromHash(otherPartyPublicKey: DNECDiffieHellmanPublicKey; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): TArray<Byte>; overload;
    function DeriveKeyFromHmac(otherPartyPublicKey: DNECDiffieHellmanPublicKey; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; hmacKey: TArray<Byte>): TArray<Byte>; overload;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HashAlgorithm: DNCngAlgorithm read get_HashAlgorithm write set_HashAlgorithm;
    property HmacKey: TArray<Byte> read get_HmacKey write set_HmacKey;
    property KeyDerivationFunction: DNECDiffieHellmanKeyDerivationFunction read get_KeyDerivationFunction write set_KeyDerivationFunction;
    property &Label: TArray<Byte> read get_Label write set_Label;
    property SecretAppend: TArray<Byte> read get_SecretAppend write set_SecretAppend;
    property SecretPrepend: TArray<Byte> read get_SecretPrepend write set_SecretPrepend;
    property Seed: TArray<Byte> read get_Seed write set_Seed;
    property Key: DNCngKey read get_Key;
    property PublicKey: DNECDiffieHellmanPublicKey read get_PublicKey;
    property UseSecretAgreementAsHmacKey: Boolean read get_UseSecretAgreementAsHmacKey;
    property KeyExchangeAlgorithm: string read get_KeyExchangeAlgorithm;
    property SignatureAlgorithm: string read get_SignatureAlgorithm;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes> read get_LegalKeySizes;
  end;

  TDNECDiffieHellmanCng = class(TDNGenericImport<DNECDiffieHellmanCngClass, DNECDiffieHellmanCng>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNECDsaClass = interface(DDN.mscorlib.DNAsymmetricAlgorithmClass)
  ['{FC8AC58B-2665-593B-8365-7D26AC438EBA}']
  { static methods } 

    {class} function Create: DNECDsa; overload;
    {class} function Create(algorithm: string): DNECDsa; overload;
    {class} function Create(curve: DNECCurve): DNECDsa; overload;
    {class} function Create(parameters: DNECParameters): DNECDsa; overload;

  end;

  [DNTypeName('System.Security.Cryptography.ECDsa')]
  DNECDsa = interface(DDN.mscorlib.DNAsymmetricAlgorithm)
  ['{CF96A7B5-296F-3481-8E08-5784E0C09927}']
  { getters & setters } 

    function get_KeyExchangeAlgorithm: string;
    function get_SignatureAlgorithm: string;
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes>;

  { methods } 

    function SignData(data: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): TArray<Byte>; overload;
    function SignData(data: TArray<Byte>; offset: Int32; count: Int32; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): TArray<Byte>; overload;
    function SignData(data: DDN.mscorlib.DNStream; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): TArray<Byte>; overload;
    function VerifyData(data: TArray<Byte>; signature: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): Boolean; overload;
    function VerifyData(data: TArray<Byte>; offset: Int32; count: Int32; signature: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): Boolean; overload;
    function VerifyData(data: DDN.mscorlib.DNStream; signature: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): Boolean; overload;
    function ExportParameters(includePrivateParameters: Boolean): DNECParameters;
    function ExportExplicitParameters(includePrivateParameters: Boolean): DNECParameters;
    procedure ImportParameters(parameters: DNECParameters);
    procedure GenerateKey(curve: DNECCurve);
    function SignHash(hash: TArray<Byte>): TArray<Byte>;
    function VerifyHash(hash: TArray<Byte>; signature: TArray<Byte>): Boolean;
    procedure Dispose;
    procedure Clear;
    procedure FromXmlString(xmlString: string);
    function ToXmlString(includePrivateParameters: Boolean): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyExchangeAlgorithm: string read get_KeyExchangeAlgorithm;
    property SignatureAlgorithm: string read get_SignatureAlgorithm;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes> read get_LegalKeySizes;
  end;

  TDNECDsa = class(TDNGenericImport<DNECDsaClass, DNECDsa>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNECDsaCngClass = interface(DNECDsaClass)
  ['{C6FCE214-49ED-5B99-B043-31C2A1121E43}']
  { constructors } 

    {class} function init: DNECDsaCng; overload;
    {class} function init(keySize: Int32): DNECDsaCng; overload;
    {class} function init(curve: DNECCurve): DNECDsaCng; overload;
    {class} function init(key: DNCngKey): DNECDsaCng; overload;

  end;

  [DNTypeName('System.Security.Cryptography.ECDsaCng')]
  DNECDsaCng = interface(DNECDsa)
  ['{3954C6A3-6A49-3BC6-81C4-392984639FA3}']
  { getters & setters } 

    function get_HashAlgorithm: DNCngAlgorithm;
    procedure set_HashAlgorithm(value: DNCngAlgorithm);
    function get_Key: DNCngKey;
    function get_KeyExchangeAlgorithm: string;
    function get_SignatureAlgorithm: string;
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes>;

  { methods } 

    procedure FromXmlString(xmlString: string); overload;
    procedure FromXmlString(xml: string; format: DNECKeyXmlFormat); overload;
    function SignData(data: TArray<Byte>): TArray<Byte>; overload;
    function SignHash(hash: TArray<Byte>): TArray<Byte>;
    function ToXmlString(includePrivateParameters: Boolean): string; overload;
    function ToXmlString(format: DNECKeyXmlFormat): string; overload;
    function VerifyData(data: TArray<Byte>; signature: TArray<Byte>): Boolean; overload;
    function VerifyHash(hash: TArray<Byte>; signature: TArray<Byte>): Boolean;
    procedure ImportParameters(parameters: DNECParameters);
    function ExportExplicitParameters(includePrivateParameters: Boolean): DNECParameters;
    function ExportParameters(includePrivateParameters: Boolean): DNECParameters;
    function SignData(data: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function SignData(data: DDN.mscorlib.DNStream): TArray<Byte>; overload;
    function VerifyData(data: TArray<Byte>; offset: Int32; count: Int32; signature: TArray<Byte>): Boolean; overload;
    function VerifyData(data: DDN.mscorlib.DNStream; signature: TArray<Byte>): Boolean; overload;
    procedure GenerateKey(curve: DNECCurve);
    function SignData(data: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): TArray<Byte>; overload;
    function SignData(data: TArray<Byte>; offset: Int32; count: Int32; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): TArray<Byte>; overload;
    function SignData(data: DDN.mscorlib.DNStream; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): TArray<Byte>; overload;
    function VerifyData(data: TArray<Byte>; signature: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): Boolean; overload;
    function VerifyData(data: TArray<Byte>; offset: Int32; count: Int32; signature: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): Boolean; overload;
    function VerifyData(data: DDN.mscorlib.DNStream; signature: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): Boolean; overload;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HashAlgorithm: DNCngAlgorithm read get_HashAlgorithm write set_HashAlgorithm;
    property Key: DNCngKey read get_Key;
    property KeyExchangeAlgorithm: string read get_KeyExchangeAlgorithm;
    property SignatureAlgorithm: string read get_SignatureAlgorithm;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes> read get_LegalKeySizes;
  end;

  TDNECDsaCng = class(TDNGenericImport<DNECDsaCngClass, DNECDsaCng>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNRSACngClass = interface(DDN.mscorlib.DNRSAClass)
  ['{AB9AFD52-E689-5F39-938E-FC9206709E4A}']
  { constructors } 

    {class} function init: DNRSACng; overload;
    {class} function init(keySize: Int32): DNRSACng; overload;
    {class} function init(key: DNCngKey): DNRSACng; overload;

  end;

  [DNTypeName('System.Security.Cryptography.RSACng')]
  DNRSACng = interface(DDN.mscorlib.DNRSA)
  ['{1DCBF670-90D3-33C2-8621-80376632951B}']
  { getters & setters } 

    function get_Key: DNCngKey;
    function get_KeyExchangeAlgorithm: string;
    function get_SignatureAlgorithm: string;
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes>;

  { methods } 

    function Decrypt(data: TArray<Byte>; padding: DDN.mscorlib.DNRSAEncryptionPadding): TArray<Byte>;
    function Encrypt(data: TArray<Byte>; padding: DDN.mscorlib.DNRSAEncryptionPadding): TArray<Byte>;
    function SignHash(hash: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; padding: DDN.mscorlib.DNRSASignaturePadding): TArray<Byte>;
    function VerifyHash(hash: TArray<Byte>; signature: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; padding: DDN.mscorlib.DNRSASignaturePadding): Boolean;
    function DecryptValue(rgb: TArray<Byte>): TArray<Byte>;
    function EncryptValue(rgb: TArray<Byte>): TArray<Byte>;
    function ExportParameters(includePrivateParameters: Boolean): DDN.mscorlib.DNRSAParameters;
    procedure ImportParameters(parameters: DDN.mscorlib.DNRSAParameters);
    function SignData(data: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; padding: DDN.mscorlib.DNRSASignaturePadding): TArray<Byte>; overload;
    function SignData(data: TArray<Byte>; offset: Int32; count: Int32; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; padding: DDN.mscorlib.DNRSASignaturePadding): TArray<Byte>; overload;
    function SignData(data: DDN.mscorlib.DNStream; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; padding: DDN.mscorlib.DNRSASignaturePadding): TArray<Byte>; overload;
    function VerifyData(data: TArray<Byte>; signature: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; padding: DDN.mscorlib.DNRSASignaturePadding): Boolean; overload;
    function VerifyData(data: TArray<Byte>; offset: Int32; count: Int32; signature: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; padding: DDN.mscorlib.DNRSASignaturePadding): Boolean; overload;
    function VerifyData(data: DDN.mscorlib.DNStream; signature: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; padding: DDN.mscorlib.DNRSASignaturePadding): Boolean; overload;
    procedure FromXmlString(xmlString: string);
    function ToXmlString(includePrivateParameters: Boolean): string;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Key: DNCngKey read get_Key;
    property KeyExchangeAlgorithm: string read get_KeyExchangeAlgorithm;
    property SignatureAlgorithm: string read get_SignatureAlgorithm;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes> read get_LegalKeySizes;
  end;

  TDNRSACng = class(TDNGenericImport<DNRSACngClass, DNRSACng>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCngAlgorithmClass = interface(DDN.mscorlib.DNObjectClass)
  ['{55A0E28E-9545-56F9-A4D4-F54817ED5016}']
  { static getter & setter } 

    {class} function get_Rsa: DNCngAlgorithm;
    {class} function get_ECDiffieHellman: DNCngAlgorithm;
    {class} function get_ECDiffieHellmanP256: DNCngAlgorithm;
    {class} function get_ECDiffieHellmanP384: DNCngAlgorithm;
    {class} function get_ECDiffieHellmanP521: DNCngAlgorithm;
    {class} function get_ECDsa: DNCngAlgorithm;
    {class} function get_ECDsaP256: DNCngAlgorithm;
    {class} function get_ECDsaP384: DNCngAlgorithm;
    {class} function get_ECDsaP521: DNCngAlgorithm;
    {class} function get_MD5: DNCngAlgorithm;
    {class} function get_Sha1: DNCngAlgorithm;
    {class} function get_Sha256: DNCngAlgorithm;
    {class} function get_Sha384: DNCngAlgorithm;
    {class} function get_Sha512: DNCngAlgorithm;

  { constructors } 

    {class} function init(algorithm: string): DNCngAlgorithm;

  { static propertys } 

    {class} property Rsa: DNCngAlgorithm read get_Rsa;
    {class} property ECDiffieHellman: DNCngAlgorithm read get_ECDiffieHellman;
    {class} property ECDiffieHellmanP256: DNCngAlgorithm read get_ECDiffieHellmanP256;
    {class} property ECDiffieHellmanP384: DNCngAlgorithm read get_ECDiffieHellmanP384;
    {class} property ECDiffieHellmanP521: DNCngAlgorithm read get_ECDiffieHellmanP521;
    {class} property ECDsa: DNCngAlgorithm read get_ECDsa;
    {class} property ECDsaP256: DNCngAlgorithm read get_ECDsaP256;
    {class} property ECDsaP384: DNCngAlgorithm read get_ECDsaP384;
    {class} property ECDsaP521: DNCngAlgorithm read get_ECDsaP521;
    {class} property MD5: DNCngAlgorithm read get_MD5;
    {class} property Sha1: DNCngAlgorithm read get_Sha1;
    {class} property Sha256: DNCngAlgorithm read get_Sha256;
    {class} property Sha384: DNCngAlgorithm read get_Sha384;
    {class} property Sha512: DNCngAlgorithm read get_Sha512;
  end;

  [DNTypeName('System.Security.Cryptography.CngAlgorithm')]
  DNCngAlgorithm = interface(DDN.mscorlib.DNObject)
  ['{DDF05353-AAD4-3541-B038-B933F04064CD}']
  { getters & setters } 

    function get_Algorithm: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(other: DNCngAlgorithm): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Algorithm: string read get_Algorithm;
  end;

  TDNCngAlgorithm = class(TDNGenericImport<DNCngAlgorithmClass, DNCngAlgorithm>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCngAlgorithmGroupClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2224D91B-7FF8-5BF5-83EB-D5276D871555}']
  { static getter & setter } 

    {class} function get_DiffieHellman: DNCngAlgorithmGroup;
    {class} function get_Dsa: DNCngAlgorithmGroup;
    {class} function get_ECDiffieHellman: DNCngAlgorithmGroup;
    {class} function get_ECDsa: DNCngAlgorithmGroup;
    {class} function get_Rsa: DNCngAlgorithmGroup;

  { constructors } 

    {class} function init(algorithmGroup: string): DNCngAlgorithmGroup;

  { static propertys } 

    {class} property DiffieHellman: DNCngAlgorithmGroup read get_DiffieHellman;
    {class} property Dsa: DNCngAlgorithmGroup read get_Dsa;
    {class} property ECDiffieHellman: DNCngAlgorithmGroup read get_ECDiffieHellman;
    {class} property ECDsa: DNCngAlgorithmGroup read get_ECDsa;
    {class} property Rsa: DNCngAlgorithmGroup read get_Rsa;
  end;

  [DNTypeName('System.Security.Cryptography.CngAlgorithmGroup')]
  DNCngAlgorithmGroup = interface(DDN.mscorlib.DNObject)
  ['{EE2C8BB4-3D3D-35C5-BB75-7E087EEF11CD}']
  { getters & setters } 

    function get_AlgorithmGroup: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(other: DNCngAlgorithmGroup): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AlgorithmGroup: string read get_AlgorithmGroup;
  end;

  TDNCngAlgorithmGroup = class(TDNGenericImport<DNCngAlgorithmGroupClass, DNCngAlgorithmGroup>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCngKeyClass = interface(DNObjectClass)
  ['{516FFB2F-3C27-5C6E-9E0D-1FC380F87167}']
  { static methods } 

    {class} function Create(algorithm: DNCngAlgorithm): DNCngKey; overload;
    {class} function Create(algorithm: DNCngAlgorithm; keyName: string): DNCngKey; overload;
    {class} function Create(algorithm: DNCngAlgorithm; keyName: string; creationParameters: DNCngKeyCreationParameters): DNCngKey; overload;
    {class} function Exists(keyName: string): Boolean; overload;
    {class} function Exists(keyName: string; provider: DNCngProvider): Boolean; overload;
    {class} function Exists(keyName: string; provider: DNCngProvider; options: DNCngKeyOpenOptions): Boolean; overload;
    {class} function Import(keyBlob: TArray<Byte>; format: DNCngKeyBlobFormat): DNCngKey; overload;
    {class} function Import(keyBlob: TArray<Byte>; format: DNCngKeyBlobFormat; provider: DNCngProvider): DNCngKey; overload;
    {class} function Open(keyName: string): DNCngKey; overload;
    {class} function Open(keyName: string; provider: DNCngProvider): DNCngKey; overload;
    {class} function Open(keyName: string; provider: DNCngProvider; openOptions: DNCngKeyOpenOptions): DNCngKey; overload;
    {class} function Open(keyHandle: DNSafeNCryptKeyHandle; keyHandleOpenOptions: DNCngKeyHandleOpenOptions): DNCngKey; overload;

  end;

  [DNTypeName('System.Security.Cryptography.CngKey')]
  DNCngKey = interface(DDN.mscorlib.DNIDisposable)
  ['{6176C309-BD82-3039-A631-F1DAFAC1CD64}']
  { getters & setters } 

    function get_AlgorithmGroup: DNCngAlgorithmGroup;
    function get_Algorithm: DNCngAlgorithm;
    function get_ExportPolicy: DNCngExportPolicies;
    function get_Handle: DNSafeNCryptKeyHandle;
    function get_IsEphemeral: Boolean;
    function get_IsMachineKey: Boolean;
    function get_KeyName: string;
    function get_KeySize: Int32;
    function get_KeyUsage: DNCngKeyUsages;
    function get_ParentWindowHandle: IntPtr;
    procedure set_ParentWindowHandle(value: IntPtr);
    function get_Provider: DNCngProvider;
    function get_ProviderHandle: DNSafeNCryptProviderHandle;
    function get_UniqueName: string;
    function get_UIPolicy: DNCngUIPolicy;

  { methods } 

    procedure Delete;
    procedure Dispose;
    function &Export(format: DNCngKeyBlobFormat): TArray<Byte>;
    function GetProperty(name: string; options: DNCngPropertyOptions): DNCngProperty;
    function HasProperty(name: string; options: DNCngPropertyOptions): Boolean;
    procedure SetProperty(&property: DNCngProperty);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AlgorithmGroup: DNCngAlgorithmGroup read get_AlgorithmGroup;
    property Algorithm: DNCngAlgorithm read get_Algorithm;
    property ExportPolicy: DNCngExportPolicies read get_ExportPolicy;
    property Handle: DNSafeNCryptKeyHandle read get_Handle;
    property IsEphemeral: Boolean read get_IsEphemeral;
    property IsMachineKey: Boolean read get_IsMachineKey;
    property KeyName: string read get_KeyName;
    property KeySize: Int32 read get_KeySize;
    property KeyUsage: DNCngKeyUsages read get_KeyUsage;
    property ParentWindowHandle: IntPtr read get_ParentWindowHandle write set_ParentWindowHandle;
    property Provider: DNCngProvider read get_Provider;
    property ProviderHandle: DNSafeNCryptProviderHandle read get_ProviderHandle;
    property UniqueName: string read get_UniqueName;
    property UIPolicy: DNCngUIPolicy read get_UIPolicy;
  end;

  TDNCngKey = class(TDNGenericImport<DNCngKeyClass, DNCngKey>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCngKeyBlobFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A2B3847C-A665-5115-9CC9-E47402D73BFD}']
  { static getter & setter } 

    {class} function get_EccPrivateBlob: DNCngKeyBlobFormat;
    {class} function get_EccPublicBlob: DNCngKeyBlobFormat;
    {class} function get_EccFullPrivateBlob: DNCngKeyBlobFormat;
    {class} function get_EccFullPublicBlob: DNCngKeyBlobFormat;
    {class} function get_GenericPrivateBlob: DNCngKeyBlobFormat;
    {class} function get_GenericPublicBlob: DNCngKeyBlobFormat;
    {class} function get_OpaqueTransportBlob: DNCngKeyBlobFormat;
    {class} function get_Pkcs8PrivateBlob: DNCngKeyBlobFormat;

  { constructors } 

    {class} function init(format: string): DNCngKeyBlobFormat;

  { static propertys } 

    {class} property EccPrivateBlob: DNCngKeyBlobFormat read get_EccPrivateBlob;
    {class} property EccPublicBlob: DNCngKeyBlobFormat read get_EccPublicBlob;
    {class} property EccFullPrivateBlob: DNCngKeyBlobFormat read get_EccFullPrivateBlob;
    {class} property EccFullPublicBlob: DNCngKeyBlobFormat read get_EccFullPublicBlob;
    {class} property GenericPrivateBlob: DNCngKeyBlobFormat read get_GenericPrivateBlob;
    {class} property GenericPublicBlob: DNCngKeyBlobFormat read get_GenericPublicBlob;
    {class} property OpaqueTransportBlob: DNCngKeyBlobFormat read get_OpaqueTransportBlob;
    {class} property Pkcs8PrivateBlob: DNCngKeyBlobFormat read get_Pkcs8PrivateBlob;
  end;

  [DNTypeName('System.Security.Cryptography.CngKeyBlobFormat')]
  DNCngKeyBlobFormat = interface(DDN.mscorlib.DNObject)
  ['{BD6B75F6-063A-3DCF-A8C7-750CEB8A92FF}']
  { getters & setters } 

    function get_Format: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(other: DNCngKeyBlobFormat): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Format: string read get_Format;
  end;

  TDNCngKeyBlobFormat = class(TDNGenericImport<DNCngKeyBlobFormatClass, DNCngKeyBlobFormat>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCngKeyCreationParametersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5A671751-1364-53DD-9250-9D5765636197}']
  { constructors } 

    {class} function init: DNCngKeyCreationParameters;

  end;

  [DNTypeName('System.Security.Cryptography.CngKeyCreationParameters')]
  DNCngKeyCreationParameters = interface(DDN.mscorlib.DNObject)
  ['{5F828D16-3D84-34F5-8EC8-B5BFD0D6804B}']
  { getters & setters } 

    function get_ExportPolicy: DDN.mscorlib.DNNullable<DNCngExportPolicies>;
    procedure set_ExportPolicy(value: DDN.mscorlib.DNNullable<DNCngExportPolicies>);
    function get_KeyCreationOptions: DNCngKeyCreationOptions;
    procedure set_KeyCreationOptions(value: DNCngKeyCreationOptions);
    function get_KeyUsage: DDN.mscorlib.DNNullable<DNCngKeyUsages>;
    procedure set_KeyUsage(value: DDN.mscorlib.DNNullable<DNCngKeyUsages>);
    function get_ParentWindowHandle: IntPtr;
    procedure set_ParentWindowHandle(value: IntPtr);
    function get_Parameters: DNCngPropertyCollection;
    function get_Provider: DNCngProvider;
    procedure set_Provider(value: DNCngProvider);
    function get_UIPolicy: DNCngUIPolicy;
    procedure set_UIPolicy(value: DNCngUIPolicy);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ExportPolicy: DDN.mscorlib.DNNullable<DNCngExportPolicies> read get_ExportPolicy write set_ExportPolicy;
    property KeyCreationOptions: DNCngKeyCreationOptions read get_KeyCreationOptions write set_KeyCreationOptions;
    property KeyUsage: DDN.mscorlib.DNNullable<DNCngKeyUsages> read get_KeyUsage write set_KeyUsage;
    property ParentWindowHandle: IntPtr read get_ParentWindowHandle write set_ParentWindowHandle;
    property Parameters: DNCngPropertyCollection read get_Parameters;
    property Provider: DNCngProvider read get_Provider write set_Provider;
    property UIPolicy: DNCngUIPolicy read get_UIPolicy write set_UIPolicy;
  end;

  TDNCngKeyCreationParameters = class(TDNGenericImport<DNCngKeyCreationParametersClass, DNCngKeyCreationParameters>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCngProviderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F74A1313-EC15-5EA5-BCF8-72DD9E9716E9}']
  { static getter & setter } 

    {class} function get_MicrosoftSmartCardKeyStorageProvider: DNCngProvider;
    {class} function get_MicrosoftSoftwareKeyStorageProvider: DNCngProvider;

  { constructors } 

    {class} function init(provider: string): DNCngProvider;

  { static propertys } 

    {class} property MicrosoftSmartCardKeyStorageProvider: DNCngProvider read get_MicrosoftSmartCardKeyStorageProvider;
    {class} property MicrosoftSoftwareKeyStorageProvider: DNCngProvider read get_MicrosoftSoftwareKeyStorageProvider;
  end;

  [DNTypeName('System.Security.Cryptography.CngProvider')]
  DNCngProvider = interface(DDN.mscorlib.DNObject)
  ['{077E73E7-8435-313B-87E6-18691E1E917E}']
  { getters & setters } 

    function get_Provider: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(other: DNCngProvider): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Provider: string read get_Provider;
  end;

  TDNCngProvider = class(TDNGenericImport<DNCngProviderClass, DNCngProvider>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCngUIPolicyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4072695A-6A9E-5F60-8FBB-54D05BCAEEF9}']
  { constructors } 

    {class} function init(protectionLevel: DNCngUIProtectionLevels): DNCngUIPolicy; overload;
    {class} function init(protectionLevel: DNCngUIProtectionLevels; friendlyName: string): DNCngUIPolicy; overload;
    {class} function init(protectionLevel: DNCngUIProtectionLevels; friendlyName: string; description: string): DNCngUIPolicy; overload;
    {class} function init(protectionLevel: DNCngUIProtectionLevels; friendlyName: string; description: string; useContext: string): DNCngUIPolicy; overload;
    {class} function init(protectionLevel: DNCngUIProtectionLevels; friendlyName: string; description: string; useContext: string; creationTitle: string): DNCngUIPolicy; overload;

  end;

  [DNTypeName('System.Security.Cryptography.CngUIPolicy')]
  DNCngUIPolicy = interface(DDN.mscorlib.DNObject)
  ['{D97C43F4-8E33-3595-B805-AEA64AF6BF42}']
  { getters & setters } 

    function get_CreationTitle: string;
    function get_Description: string;
    function get_FriendlyName: string;
    function get_ProtectionLevel: DNCngUIProtectionLevels;
    function get_UseContext: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CreationTitle: string read get_CreationTitle;
    property Description: string read get_Description;
    property FriendlyName: string read get_FriendlyName;
    property ProtectionLevel: DNCngUIProtectionLevels read get_ProtectionLevel;
    property UseContext: string read get_UseContext;
  end;

  TDNCngUIPolicy = class(TDNGenericImport<DNCngUIPolicyClass, DNCngUIPolicy>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNECCurve_NamedCurvesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0EE9F263-45C9-53FE-9ECE-59878DAE772A}']
  { static getter & setter } 

    {class} function get_brainpoolP160r1: DNECCurve;
    {class} function get_brainpoolP160t1: DNECCurve;
    {class} function get_brainpoolP192r1: DNECCurve;
    {class} function get_brainpoolP192t1: DNECCurve;
    {class} function get_brainpoolP224r1: DNECCurve;
    {class} function get_brainpoolP224t1: DNECCurve;
    {class} function get_brainpoolP256r1: DNECCurve;
    {class} function get_brainpoolP256t1: DNECCurve;
    {class} function get_brainpoolP320r1: DNECCurve;
    {class} function get_brainpoolP320t1: DNECCurve;
    {class} function get_brainpoolP384r1: DNECCurve;
    {class} function get_brainpoolP384t1: DNECCurve;
    {class} function get_brainpoolP512r1: DNECCurve;
    {class} function get_brainpoolP512t1: DNECCurve;
    {class} function get_nistP256: DNECCurve;
    {class} function get_nistP384: DNECCurve;
    {class} function get_nistP521: DNECCurve;

  { static propertys } 

    {class} property brainpoolP160r1: DNECCurve read get_brainpoolP160r1;
    {class} property brainpoolP160t1: DNECCurve read get_brainpoolP160t1;
    {class} property brainpoolP192r1: DNECCurve read get_brainpoolP192r1;
    {class} property brainpoolP192t1: DNECCurve read get_brainpoolP192t1;
    {class} property brainpoolP224r1: DNECCurve read get_brainpoolP224r1;
    {class} property brainpoolP224t1: DNECCurve read get_brainpoolP224t1;
    {class} property brainpoolP256r1: DNECCurve read get_brainpoolP256r1;
    {class} property brainpoolP256t1: DNECCurve read get_brainpoolP256t1;
    {class} property brainpoolP320r1: DNECCurve read get_brainpoolP320r1;
    {class} property brainpoolP320t1: DNECCurve read get_brainpoolP320t1;
    {class} property brainpoolP384r1: DNECCurve read get_brainpoolP384r1;
    {class} property brainpoolP384t1: DNECCurve read get_brainpoolP384t1;
    {class} property brainpoolP512r1: DNECCurve read get_brainpoolP512r1;
    {class} property brainpoolP512t1: DNECCurve read get_brainpoolP512t1;
    {class} property nistP256: DNECCurve read get_nistP256;
    {class} property nistP384: DNECCurve read get_nistP384;
    {class} property nistP521: DNECCurve read get_nistP521;
  end;

  [DNTypeName('System.Security.Cryptography.ECCurve+NamedCurves')]
  DNECCurve_NamedCurves = interface(DDN.mscorlib.DNObject)
  ['{F9245C8B-EF76-324A-84A7-AA4081C29663}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNECCurve_NamedCurves = class(TDNGenericImport<DNECCurve_NamedCurvesClass, DNECCurve_NamedCurves>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNECDiffieHellmanPublicKeyClass = interface(DNObjectClass)
  ['{10956E50-DDFD-5371-B9BF-E5BC9B993A16}']
  end;

  [DNTypeName('System.Security.Cryptography.ECDiffieHellmanPublicKey')]
  DNECDiffieHellmanPublicKey = interface(DDN.mscorlib.DNIDisposable)
  ['{D1178442-F7D0-3691-A85E-3CA5AA9B5F02}']
  { methods } 

    procedure Dispose;
    function ToXmlString: string;
    function ExportParameters: DNECParameters;
    function ExportExplicitParameters: DNECParameters;
    function ToByteArray: TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNECDiffieHellmanPublicKey = class(TDNGenericImport<DNECDiffieHellmanPublicKeyClass, DNECDiffieHellmanPublicKey>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNECDiffieHellmanCngPublicKeyClass = interface(DNECDiffieHellmanPublicKeyClass)
  ['{E56A16E0-4825-51AC-89B5-B6F953D135A4}']
  { static methods } 

    {class} function FromByteArray(publicKeyBlob: TArray<Byte>; format: DNCngKeyBlobFormat): DNECDiffieHellmanPublicKey;
    {class} function FromXmlString(xml: string): DNECDiffieHellmanCngPublicKey;

  end;

  [DNTypeName('System.Security.Cryptography.ECDiffieHellmanCngPublicKey')]
  DNECDiffieHellmanCngPublicKey = interface(DNECDiffieHellmanPublicKey)
  ['{8F8E78A2-9595-38C4-A08C-0B164CA33D44}']
  { getters & setters } 

    function get_BlobFormat: DNCngKeyBlobFormat;

  { methods } 

    function ToXmlString: string;
    function ExportExplicitParameters: DNECParameters;
    function ExportParameters: DNECParameters;
    function Import: DNCngKey;
    procedure Dispose;
    function ToByteArray: TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BlobFormat: DNCngKeyBlobFormat read get_BlobFormat;
  end;

  TDNECDiffieHellmanCngPublicKey = class(TDNGenericImport<DNECDiffieHellmanCngPublicKeyClass, DNECDiffieHellmanCngPublicKey>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNMD5CngClass = interface(DDN.mscorlib.DNMD5Class)
  ['{625F2E8A-316F-5C89-A0B2-ACE3D258D817}']
  { constructors } 

    {class} function init: DNMD5Cng;

  end;

  [DNTypeName('System.Security.Cryptography.MD5Cng')]
  DNMD5Cng = interface(DDN.mscorlib.DNMD5)
  ['{9A3FD0A2-F31A-3165-B4B7-9F0641101882}']
  { getters & setters } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Initialize;
    function ComputeHash(inputStream: DDN.mscorlib.DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNMD5Cng = class(TDNGenericImport<DNMD5CngClass, DNMD5Cng>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA1CngClass = interface(DDN.mscorlib.DNSHA1Class)
  ['{5ED325E5-ECC5-593D-A5F7-544451E43755}']
  { constructors } 

    {class} function init: DNSHA1Cng;

  end;

  [DNTypeName('System.Security.Cryptography.SHA1Cng')]
  DNSHA1Cng = interface(DDN.mscorlib.DNSHA1)
  ['{05ED922D-E6AD-31CA-9A49-F50FC6761A29}']
  { getters & setters } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Initialize;
    function ComputeHash(inputStream: DDN.mscorlib.DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA1Cng = class(TDNGenericImport<DNSHA1CngClass, DNSHA1Cng>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA256CngClass = interface(DDN.mscorlib.DNSHA256Class)
  ['{70456A1E-F18E-5099-A2FE-2290C7FD9370}']
  { constructors } 

    {class} function init: DNSHA256Cng;

  end;

  [DNTypeName('System.Security.Cryptography.SHA256Cng')]
  DNSHA256Cng = interface(DDN.mscorlib.DNSHA256)
  ['{5CCDDA25-1166-3FD3-A267-B58AAE8404D0}']
  { getters & setters } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Initialize;
    function ComputeHash(inputStream: DDN.mscorlib.DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA256Cng = class(TDNGenericImport<DNSHA256CngClass, DNSHA256Cng>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA256CryptoServiceProviderClass = interface(DDN.mscorlib.DNSHA256Class)
  ['{5BB1F8A4-A184-58A1-A52C-9FD92DE90473}']
  { constructors } 

    {class} function init: DNSHA256CryptoServiceProvider;

  end;

  [DNTypeName('System.Security.Cryptography.SHA256CryptoServiceProvider')]
  DNSHA256CryptoServiceProvider = interface(DDN.mscorlib.DNSHA256)
  ['{5F94830F-94ED-3788-ABAD-298E40367B5B}']
  { getters & setters } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Initialize;
    function ComputeHash(inputStream: DDN.mscorlib.DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA256CryptoServiceProvider = class(TDNGenericImport<DNSHA256CryptoServiceProviderClass, DNSHA256CryptoServiceProvider>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA384CngClass = interface(DDN.mscorlib.DNSHA384Class)
  ['{B54652B0-1676-59A8-A1DC-7E942EFF3E41}']
  { constructors } 

    {class} function init: DNSHA384Cng;

  end;

  [DNTypeName('System.Security.Cryptography.SHA384Cng')]
  DNSHA384Cng = interface(DDN.mscorlib.DNSHA384)
  ['{F2297229-7509-3F26-AC4A-59ADAFB5813A}']
  { getters & setters } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Initialize;
    function ComputeHash(inputStream: DDN.mscorlib.DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA384Cng = class(TDNGenericImport<DNSHA384CngClass, DNSHA384Cng>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA384CryptoServiceProviderClass = interface(DDN.mscorlib.DNSHA384Class)
  ['{0152EB3E-9B2B-5882-87B6-3BD69CFCE1B4}']
  { constructors } 

    {class} function init: DNSHA384CryptoServiceProvider;

  end;

  [DNTypeName('System.Security.Cryptography.SHA384CryptoServiceProvider')]
  DNSHA384CryptoServiceProvider = interface(DDN.mscorlib.DNSHA384)
  ['{9D51BAC9-A860-3B50-8A60-4CB3EFCD6379}']
  { getters & setters } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Initialize;
    function ComputeHash(inputStream: DDN.mscorlib.DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA384CryptoServiceProvider = class(TDNGenericImport<DNSHA384CryptoServiceProviderClass, DNSHA384CryptoServiceProvider>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA512CngClass = interface(DDN.mscorlib.DNSHA512Class)
  ['{1AB1D289-4C3F-54E6-BBCD-D0B4D96FF7B3}']
  { constructors } 

    {class} function init: DNSHA512Cng;

  end;

  [DNTypeName('System.Security.Cryptography.SHA512Cng')]
  DNSHA512Cng = interface(DDN.mscorlib.DNSHA512)
  ['{1D95B8A2-A542-3E26-A347-F9AC247F10E5}']
  { getters & setters } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Initialize;
    function ComputeHash(inputStream: DDN.mscorlib.DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA512Cng = class(TDNGenericImport<DNSHA512CngClass, DNSHA512Cng>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNSHA512CryptoServiceProviderClass = interface(DDN.mscorlib.DNSHA512Class)
  ['{63A7A744-4072-56D7-BA2F-A35C7EAA8FE6}']
  { constructors } 

    {class} function init: DNSHA512CryptoServiceProvider;

  end;

  [DNTypeName('System.Security.Cryptography.SHA512CryptoServiceProvider')]
  DNSHA512CryptoServiceProvider = interface(DDN.mscorlib.DNSHA512)
  ['{3A882AC7-BC63-3525-B777-C89C0D9C2D05}']
  { getters & setters } 

    function get_HashSize: Int32;
    function get_Hash: TArray<Byte>;
    function get_InputBlockSize: Int32;
    function get_OutputBlockSize: Int32;
    function get_CanTransformMultipleBlocks: Boolean;
    function get_CanReuseTransform: Boolean;

  { methods } 

    procedure Initialize;
    function ComputeHash(inputStream: DDN.mscorlib.DNStream): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>): TArray<Byte>; overload;
    function ComputeHash(buffer: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    function TransformBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32; outputBuffer: TArray<Byte>; outputOffset: Int32): Int32;
    function TransformFinalBlock(inputBuffer: TArray<Byte>; inputOffset: Int32; inputCount: Int32): TArray<Byte>;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HashSize: Int32 read get_HashSize;
    property Hash: TArray<Byte> read get_Hash;
    property InputBlockSize: Int32 read get_InputBlockSize;
    property OutputBlockSize: Int32 read get_OutputBlockSize;
    property CanTransformMultipleBlocks: Boolean read get_CanTransformMultipleBlocks;
    property CanReuseTransform: Boolean read get_CanReuseTransform;
  end;

  TDNSHA512CryptoServiceProvider = class(TDNGenericImport<DNSHA512CryptoServiceProviderClass, DNSHA512CryptoServiceProvider>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNIncrementalHashClass = interface(DNObjectClass)
  ['{999C85BB-6749-5DC9-800B-E8931A92AB0C}']
  { static methods } 

    {class} function CreateHash(hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): DNIncrementalHash;
    {class} function CreateHMAC(hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; key: TArray<Byte>): DNIncrementalHash;

  end;

  [DNTypeName('System.Security.Cryptography.IncrementalHash')]
  DNIncrementalHash = interface(DDN.mscorlib.DNIDisposable)
  ['{708AD401-5F47-31EE-82FE-F6AD970A408B}']
  { getters & setters } 

    function get_AlgorithmName: DDN.mscorlib.DNHashAlgorithmName;

  { methods } 

    procedure AppendData(data: TArray<Byte>); overload;
    procedure AppendData(data: TArray<Byte>; offset: Int32; count: Int32); overload;
    procedure Dispose;
    function GetHashAndReset: TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AlgorithmName: DDN.mscorlib.DNHashAlgorithmName read get_AlgorithmName;
  end;

  TDNIncrementalHash = class(TDNGenericImport<DNIncrementalHashClass, DNIncrementalHash>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNManifestSignatureInformationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C4529C08-24A7-5CCC-8766-873DD7D1A464}']
  { static methods } 

    {class} function VerifySignature(application: DDN.mscorlib.DNActivationContext): DNManifestSignatureInformationCollection; overload;
    {class} function VerifySignature(application: DDN.mscorlib.DNActivationContext; manifests: DNManifestKinds): DNManifestSignatureInformationCollection; overload;
    {class} function VerifySignature(application: DDN.mscorlib.DNActivationContext; manifests: DNManifestKinds; revocationFlag: DDN.System.DNX509RevocationFlag; revocationMode: DDN.System.DNX509RevocationMode): DNManifestSignatureInformationCollection; overload;

  end;

  [DNTypeName('System.Security.Cryptography.ManifestSignatureInformation')]
  DNManifestSignatureInformation = interface(DDN.mscorlib.DNObject)
  ['{81920FAE-D60F-34F6-979F-E5CAED18FF90}']
  { getters & setters } 

    function get_AuthenticodeSignature: DNAuthenticodeSignatureInformation;
    function get_Manifest: DNManifestKinds;
    function get_StrongNameSignature: DNStrongNameSignatureInformation;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AuthenticodeSignature: DNAuthenticodeSignatureInformation read get_AuthenticodeSignature;
    property Manifest: DNManifestKinds read get_Manifest;
    property StrongNameSignature: DNStrongNameSignatureInformation read get_StrongNameSignature;
  end;

  TDNManifestSignatureInformation = class(TDNGenericImport<DNManifestSignatureInformationClass, DNManifestSignatureInformation>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNStrongNameSignatureInformationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B2A5BBB5-8974-5B3B-B8D0-83035BC93F55}']
  end;

  [DNTypeName('System.Security.Cryptography.StrongNameSignatureInformation')]
  DNStrongNameSignatureInformation = interface(DDN.mscorlib.DNObject)
  ['{248B5F24-96E6-3728-B14B-69E19A4ACD70}']
  { getters & setters } 

    function get_HashAlgorithm: string;
    function get_HResult: Int32;
    function get_IsValid: Boolean;
    function get_PublicKey: DDN.mscorlib.DNAsymmetricAlgorithm;
    function get_VerificationResult: DNSignatureVerificationResult;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HashAlgorithm: string read get_HashAlgorithm;
    property HResult: Int32 read get_HResult;
    property IsValid: Boolean read get_IsValid;
    property PublicKey: DDN.mscorlib.DNAsymmetricAlgorithm read get_PublicKey;
    property VerificationResult: DNSignatureVerificationResult read get_VerificationResult;
  end;

  TDNStrongNameSignatureInformation = class(TDNGenericImport<DNStrongNameSignatureInformationClass, DNStrongNameSignatureInformation>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNAesCngClass = interface(DDN.mscorlib.DNAesClass)
  ['{DF5BBE4E-17B7-5B04-B6D1-F58EFADE7328}']
  { constructors } 

    {class} function init: DNAesCng; overload;
    {class} function init(keyName: string): DNAesCng; overload;
    {class} function init(keyName: string; provider: DNCngProvider): DNAesCng; overload;
    {class} function init(keyName: string; provider: DNCngProvider; openOptions: DNCngKeyOpenOptions): DNAesCng; overload;

  end;

  [DNTypeName('System.Security.Cryptography.AesCng')]
  DNAesCng = interface(DDN.mscorlib.DNAes)
  ['{D3A8D465-069E-3116-AE2B-BFEE03FDE1D8}']
  { getters & setters } 

    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_BlockSize: Int32;
    procedure set_BlockSize(value: Int32);
    function get_FeedbackSize: Int32;
    procedure set_FeedbackSize(value: Int32);
    function get_IV: TArray<Byte>;
    procedure set_IV(value: TArray<Byte>);
    function get_LegalBlockSizes: TArray<DDN.mscorlib.DNKeySizes>;
    function get_LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes>;
    function get_Mode: DDN.mscorlib.DNCipherMode;
    procedure set_Mode(value: DDN.mscorlib.DNCipherMode);
    function get_Padding: DDN.mscorlib.DNPaddingMode;
    procedure set_Padding(value: DDN.mscorlib.DNPaddingMode);

  { methods } 

    function CreateDecryptor: DDN.mscorlib.DNICryptoTransform; overload;
    function CreateDecryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DDN.mscorlib.DNICryptoTransform; overload;
    function CreateEncryptor: DDN.mscorlib.DNICryptoTransform; overload;
    function CreateEncryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DDN.mscorlib.DNICryptoTransform; overload;
    procedure GenerateKey;
    procedure GenerateIV;
    function ValidKeySize(bitLength: Int32): Boolean;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Key: TArray<Byte> read get_Key write set_Key;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property BlockSize: Int32 read get_BlockSize write set_BlockSize;
    property FeedbackSize: Int32 read get_FeedbackSize write set_FeedbackSize;
    property IV: TArray<Byte> read get_IV write set_IV;
    property LegalBlockSizes: TArray<DDN.mscorlib.DNKeySizes> read get_LegalBlockSizes;
    property LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes> read get_LegalKeySizes;
    property Mode: DDN.mscorlib.DNCipherMode read get_Mode write set_Mode;
    property Padding: DDN.mscorlib.DNPaddingMode read get_Padding write set_Padding;
  end;

  TDNAesCng = class(TDNGenericImport<DNAesCngClass, DNAesCng>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNAesCryptoServiceProviderClass = interface(DDN.mscorlib.DNAesClass)
  ['{5C8D805D-ABC5-5E06-AFA7-5F0D5DC96644}']
  { constructors } 

    {class} function init: DNAesCryptoServiceProvider;

  end;

  [DNTypeName('System.Security.Cryptography.AesCryptoServiceProvider')]
  DNAesCryptoServiceProvider = interface(DDN.mscorlib.DNAes)
  ['{D23347DE-DC31-3687-B1E3-46DD0B93ACFD}']
  { getters & setters } 

    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_BlockSize: Int32;
    procedure set_BlockSize(value: Int32);
    function get_FeedbackSize: Int32;
    procedure set_FeedbackSize(value: Int32);
    function get_IV: TArray<Byte>;
    procedure set_IV(value: TArray<Byte>);
    function get_LegalBlockSizes: TArray<DDN.mscorlib.DNKeySizes>;
    function get_LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes>;
    function get_Mode: DDN.mscorlib.DNCipherMode;
    procedure set_Mode(value: DDN.mscorlib.DNCipherMode);
    function get_Padding: DDN.mscorlib.DNPaddingMode;
    procedure set_Padding(value: DDN.mscorlib.DNPaddingMode);

  { methods } 

    procedure GenerateIV;
    function CreateDecryptor: DDN.mscorlib.DNICryptoTransform; overload;
    function CreateEncryptor: DDN.mscorlib.DNICryptoTransform; overload;
    function CreateDecryptor(key: TArray<Byte>; iv: TArray<Byte>): DDN.mscorlib.DNICryptoTransform; overload;
    function CreateEncryptor(key: TArray<Byte>; iv: TArray<Byte>): DDN.mscorlib.DNICryptoTransform; overload;
    procedure GenerateKey;
    function ValidKeySize(bitLength: Int32): Boolean;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Key: TArray<Byte> read get_Key write set_Key;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property BlockSize: Int32 read get_BlockSize write set_BlockSize;
    property FeedbackSize: Int32 read get_FeedbackSize write set_FeedbackSize;
    property IV: TArray<Byte> read get_IV write set_IV;
    property LegalBlockSizes: TArray<DDN.mscorlib.DNKeySizes> read get_LegalBlockSizes;
    property LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes> read get_LegalKeySizes;
    property Mode: DDN.mscorlib.DNCipherMode read get_Mode write set_Mode;
    property Padding: DDN.mscorlib.DNPaddingMode read get_Padding write set_Padding;
  end;

  TDNAesCryptoServiceProvider = class(TDNGenericImport<DNAesCryptoServiceProviderClass, DNAesCryptoServiceProvider>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNAesManagedClass = interface(DDN.mscorlib.DNAesClass)
  ['{162E044A-C39B-52B1-BB67-C1BE191E633E}']
  { constructors } 

    {class} function init: DNAesManaged;

  end;

  [DNTypeName('System.Security.Cryptography.AesManaged')]
  DNAesManaged = interface(DDN.mscorlib.DNAes)
  ['{ADEDF0DE-9DAE-31A4-9AC1-34D1217A19E0}']
  { getters & setters } 

    function get_FeedbackSize: Int32;
    procedure set_FeedbackSize(value: Int32);
    function get_IV: TArray<Byte>;
    procedure set_IV(value: TArray<Byte>);
    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_Mode: DDN.mscorlib.DNCipherMode;
    procedure set_Mode(value: DDN.mscorlib.DNCipherMode);
    function get_Padding: DDN.mscorlib.DNPaddingMode;
    procedure set_Padding(value: DDN.mscorlib.DNPaddingMode);
    function get_BlockSize: Int32;
    procedure set_BlockSize(value: Int32);
    function get_LegalBlockSizes: TArray<DDN.mscorlib.DNKeySizes>;
    function get_LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes>;

  { methods } 

    function CreateDecryptor: DDN.mscorlib.DNICryptoTransform; overload;
    function CreateDecryptor(key: TArray<Byte>; iv: TArray<Byte>): DDN.mscorlib.DNICryptoTransform; overload;
    function CreateEncryptor: DDN.mscorlib.DNICryptoTransform; overload;
    function CreateEncryptor(key: TArray<Byte>; iv: TArray<Byte>): DDN.mscorlib.DNICryptoTransform; overload;
    procedure GenerateIV;
    procedure GenerateKey;
    function ValidKeySize(bitLength: Int32): Boolean;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FeedbackSize: Int32 read get_FeedbackSize write set_FeedbackSize;
    property IV: TArray<Byte> read get_IV write set_IV;
    property Key: TArray<Byte> read get_Key write set_Key;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property Mode: DDN.mscorlib.DNCipherMode read get_Mode write set_Mode;
    property Padding: DDN.mscorlib.DNPaddingMode read get_Padding write set_Padding;
    property BlockSize: Int32 read get_BlockSize write set_BlockSize;
    property LegalBlockSizes: TArray<DDN.mscorlib.DNKeySizes> read get_LegalBlockSizes;
    property LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes> read get_LegalKeySizes;
  end;

  TDNAesManaged = class(TDNGenericImport<DNAesManagedClass, DNAesManaged>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNTripleDESCngClass = interface(DDN.mscorlib.DNTripleDESClass)
  ['{A1A394AB-C5DD-5FAE-8606-4483994485C1}']
  { constructors } 

    {class} function init: DNTripleDESCng; overload;
    {class} function init(keyName: string): DNTripleDESCng; overload;
    {class} function init(keyName: string; provider: DNCngProvider): DNTripleDESCng; overload;
    {class} function init(keyName: string; provider: DNCngProvider; openOptions: DNCngKeyOpenOptions): DNTripleDESCng; overload;

  end;

  [DNTypeName('System.Security.Cryptography.TripleDESCng')]
  DNTripleDESCng = interface(DDN.mscorlib.DNTripleDES)
  ['{CD61B14A-5D96-3D0B-A32F-4087690125A5}']
  { getters & setters } 

    function get_Key: TArray<Byte>;
    procedure set_Key(value: TArray<Byte>);
    function get_KeySize: Int32;
    procedure set_KeySize(value: Int32);
    function get_BlockSize: Int32;
    procedure set_BlockSize(value: Int32);
    function get_FeedbackSize: Int32;
    procedure set_FeedbackSize(value: Int32);
    function get_IV: TArray<Byte>;
    procedure set_IV(value: TArray<Byte>);
    function get_LegalBlockSizes: TArray<DDN.mscorlib.DNKeySizes>;
    function get_LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes>;
    function get_Mode: DDN.mscorlib.DNCipherMode;
    procedure set_Mode(value: DDN.mscorlib.DNCipherMode);
    function get_Padding: DDN.mscorlib.DNPaddingMode;
    procedure set_Padding(value: DDN.mscorlib.DNPaddingMode);

  { methods } 

    function CreateDecryptor: DDN.mscorlib.DNICryptoTransform; overload;
    function CreateDecryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DDN.mscorlib.DNICryptoTransform; overload;
    function CreateEncryptor: DDN.mscorlib.DNICryptoTransform; overload;
    function CreateEncryptor(rgbKey: TArray<Byte>; rgbIV: TArray<Byte>): DDN.mscorlib.DNICryptoTransform; overload;
    procedure GenerateKey;
    procedure GenerateIV;
    function ValidKeySize(bitLength: Int32): Boolean;
    procedure Dispose;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Key: TArray<Byte> read get_Key write set_Key;
    property KeySize: Int32 read get_KeySize write set_KeySize;
    property BlockSize: Int32 read get_BlockSize write set_BlockSize;
    property FeedbackSize: Int32 read get_FeedbackSize write set_FeedbackSize;
    property IV: TArray<Byte> read get_IV write set_IV;
    property LegalBlockSizes: TArray<DDN.mscorlib.DNKeySizes> read get_LegalBlockSizes;
    property LegalKeySizes: TArray<DDN.mscorlib.DNKeySizes> read get_LegalKeySizes;
    property Mode: DDN.mscorlib.DNCipherMode read get_Mode write set_Mode;
    property Padding: DDN.mscorlib.DNPaddingMode read get_Padding write set_Padding;
  end;

  TDNTripleDESCng = class(TDNGenericImport<DNTripleDESCngClass, DNTripleDESCng>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNAuthenticodeSignatureInformationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{88CFAC2E-984C-5CE8-970B-4EFA1089BF82}']
  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation')]
  DNAuthenticodeSignatureInformation = interface(DDN.mscorlib.DNObject)
  ['{5187D08D-6816-34BA-A486-6B60A83A92B5}']
  { getters & setters } 

    function get_Description: string;
    function get_DescriptionUrl: DDN.System.DNUri;
    function get_HashAlgorithm: string;
    function get_HResult: Int32;
    function get_SignatureChain: DDN.System.DNX509Chain;
    function get_SigningCertificate: DDN.System.DNX509Certificate2;
    function get_Timestamp: DNTimestampInformation;
    function get_TrustStatus: DNTrustStatus;
    function get_VerificationResult: DNSignatureVerificationResult;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Description: string read get_Description;
    property DescriptionUrl: DDN.System.DNUri read get_DescriptionUrl;
    property HashAlgorithm: string read get_HashAlgorithm;
    property HResult: Int32 read get_HResult;
    property SignatureChain: DDN.System.DNX509Chain read get_SignatureChain;
    property SigningCertificate: DDN.System.DNX509Certificate2 read get_SigningCertificate;
    property Timestamp: DNTimestampInformation read get_Timestamp;
    property TrustStatus: DNTrustStatus read get_TrustStatus;
    property VerificationResult: DNSignatureVerificationResult read get_VerificationResult;
  end;

  TDNAuthenticodeSignatureInformation = class(TDNGenericImport<DNAuthenticodeSignatureInformationClass, DNAuthenticodeSignatureInformation>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNCertificateRequestClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FE574F2A-35BC-52F9-BB09-7176A268A3A4}']
  { constructors } 

    {class} function init(subjectName: string; key: DNECDsa; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): DNCertificateRequest; overload;
    {class} function init(subjectName: DDN.System.DNX500DistinguishedName; key: DNECDsa; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): DNCertificateRequest; overload;
    {class} function init(subjectName: string; key: DDN.mscorlib.DNRSA; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; padding: DDN.mscorlib.DNRSASignaturePadding): DNCertificateRequest; overload;
    {class} function init(subjectName: DDN.System.DNX500DistinguishedName; key: DDN.mscorlib.DNRSA; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName; padding: DDN.mscorlib.DNRSASignaturePadding): DNCertificateRequest; overload;
    {class} function init(subjectName: DDN.System.DNX500DistinguishedName; publicKey: DDN.System.DNPublicKey; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): DNCertificateRequest; overload;

  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.CertificateRequest')]
  DNCertificateRequest = interface(DDN.mscorlib.DNObject)
  ['{0754A543-BA00-3A5E-957B-8E0FFCB60062}']
  { getters & setters } 

    function get_SubjectName: DDN.System.DNX500DistinguishedName;
    function get_CertificateExtensions: DDN.mscorlib.DNCollection<DDN.System.DNX509Extension>;
    function get_PublicKey: DDN.System.DNPublicKey;
    function get_HashAlgorithm: DDN.mscorlib.DNHashAlgorithmName;

  { methods } 

    function CreateSigningRequest: TArray<Byte>; overload;
    function CreateSigningRequest(signatureGenerator: DNX509SignatureGenerator): TArray<Byte>; overload;
    function CreateSelfSigned(notBefore: DDN.mscorlib.DNDateTimeOffset; notAfter: DDN.mscorlib.DNDateTimeOffset): DDN.System.DNX509Certificate2;
    function Create(issuerCertificate: DDN.System.DNX509Certificate2; notBefore: DDN.mscorlib.DNDateTimeOffset; notAfter: DDN.mscorlib.DNDateTimeOffset; serialNumber: TArray<Byte>): DDN.System.DNX509Certificate2; overload;
    function Create(issuerName: DDN.System.DNX500DistinguishedName; generator: DNX509SignatureGenerator; notBefore: DDN.mscorlib.DNDateTimeOffset; notAfter: DDN.mscorlib.DNDateTimeOffset; serialNumber: TArray<Byte>): DDN.System.DNX509Certificate2; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SubjectName: DDN.System.DNX500DistinguishedName read get_SubjectName;
    property CertificateExtensions: DDN.mscorlib.DNCollection<DDN.System.DNX509Extension> read get_CertificateExtensions;
    property PublicKey: DDN.System.DNPublicKey read get_PublicKey;
    property HashAlgorithm: DDN.mscorlib.DNHashAlgorithmName read get_HashAlgorithm;
  end;

  TDNCertificateRequest = class(TDNGenericImport<DNCertificateRequestClass, DNCertificateRequest>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNDSACertificateExtensionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1FAD86A5-969A-5AF8-AE88-2DF278C5CD6A}']
  { static methods } 

    {class} function GetDSAPublicKey(certificate: DDN.System.DNX509Certificate2): DDN.mscorlib.DNDSA;
    {class} function GetDSAPrivateKey(certificate: DDN.System.DNX509Certificate2): DDN.mscorlib.DNDSA;
    {class} function CopyWithPrivateKey(certificate: DDN.System.DNX509Certificate2; privateKey: DDN.mscorlib.DNDSA): DDN.System.DNX509Certificate2;

  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.DSACertificateExtensions')]
  DNDSACertificateExtensions = interface(DDN.mscorlib.DNObject)
  ['{E201F334-F39B-3E64-AC38-F088990231E1}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDSACertificateExtensions = class(TDNGenericImport<DNDSACertificateExtensionsClass, DNDSACertificateExtensions>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNECDsaCertificateExtensionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{62D92075-F518-5865-9DF5-B4EFE3C41B45}']
  { static methods } 

    {class} function GetECDsaPrivateKey(certificate: DDN.System.DNX509Certificate2): DNECDsa;
    {class} function CopyWithPrivateKey(certificate: DDN.System.DNX509Certificate2; privateKey: DNECDsa): DDN.System.DNX509Certificate2;
    {class} function GetECDsaPublicKey(certificate: DDN.System.DNX509Certificate2): DNECDsa;

  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions')]
  DNECDsaCertificateExtensions = interface(DDN.mscorlib.DNObject)
  ['{25620048-FE22-3108-9DC6-A6756291A037}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNECDsaCertificateExtensions = class(TDNGenericImport<DNECDsaCertificateExtensionsClass, DNECDsaCertificateExtensions>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNRSACertificateExtensionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A3328EB8-BF63-5658-8792-5E8CDF66F9E5}']
  { static methods } 

    {class} function CopyWithPrivateKey(certificate: DDN.System.DNX509Certificate2; privateKey: DDN.mscorlib.DNRSA): DDN.System.DNX509Certificate2;
    {class} function GetRSAPublicKey(certificate: DDN.System.DNX509Certificate2): DDN.mscorlib.DNRSA;
    {class} function GetRSAPrivateKey(certificate: DDN.System.DNX509Certificate2): DDN.mscorlib.DNRSA;

  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.RSACertificateExtensions')]
  DNRSACertificateExtensions = interface(DDN.mscorlib.DNObject)
  ['{5214D10D-04E7-3685-B40A-8ED8C645213F}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRSACertificateExtensions = class(TDNGenericImport<DNRSACertificateExtensionsClass, DNRSACertificateExtensions>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNSubjectAlternativeNameBuilderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{711F18AC-7E82-5D35-80EF-D2411807C577}']
  { constructors } 

    {class} function init: DNSubjectAlternativeNameBuilder;

  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.SubjectAlternativeNameBuilder')]
  DNSubjectAlternativeNameBuilder = interface(DDN.mscorlib.DNObject)
  ['{2751367F-B20B-3CD0-AEFC-636C928D1DC9}']
  { methods } 

    procedure AddEmailAddress(emailAddress: string);
    procedure AddDnsName(dnsName: string);
    procedure AddUri(uri: DDN.System.DNUri);
    procedure AddIpAddress(ipAddress: DDN.System.DNIPAddress);
    procedure AddUserPrincipalName(upn: string);
    function Build(critical: Boolean): DDN.System.DNX509Extension;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSubjectAlternativeNameBuilder = class(TDNGenericImport<DNSubjectAlternativeNameBuilderClass, DNSubjectAlternativeNameBuilder>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNTimestampInformationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CEA97551-CB5A-59DF-93CA-B5CBE6564192}']
  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.TimestampInformation')]
  DNTimestampInformation = interface(DDN.mscorlib.DNObject)
  ['{7204D74E-DDA3-35CA-A5CD-A3D14EECFAB0}']
  { getters & setters } 

    function get_HashAlgorithm: string;
    function get_HResult: Int32;
    function get_IsValid: Boolean;
    function get_SignatureChain: DDN.System.DNX509Chain;
    function get_SigningCertificate: DDN.System.DNX509Certificate2;
    function get_Timestamp: DDN.mscorlib.DNDateTime;
    function get_VerificationResult: DNSignatureVerificationResult;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HashAlgorithm: string read get_HashAlgorithm;
    property HResult: Int32 read get_HResult;
    property IsValid: Boolean read get_IsValid;
    property SignatureChain: DDN.System.DNX509Chain read get_SignatureChain;
    property SigningCertificate: DDN.System.DNX509Certificate2 read get_SigningCertificate;
    property Timestamp: DDN.mscorlib.DNDateTime read get_Timestamp;
    property VerificationResult: DNSignatureVerificationResult read get_VerificationResult;
  end;

  TDNTimestampInformation = class(TDNGenericImport<DNTimestampInformationClass, DNTimestampInformation>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX509SignatureGeneratorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{06F9FE82-5D7F-5151-99A1-CCD54ADB420E}']
  { static methods } 

    {class} function CreateForECDsa(key: DNECDsa): DNX509SignatureGenerator;
    {class} function CreateForRSA(key: DDN.mscorlib.DNRSA; signaturePadding: DDN.mscorlib.DNRSASignaturePadding): DNX509SignatureGenerator;

  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.X509SignatureGenerator')]
  DNX509SignatureGenerator = interface(DDN.mscorlib.DNObject)
  ['{34EB2F68-483D-353A-8C40-FC51D8679264}']
  { getters & setters } 

    function get_PublicKey: DDN.System.DNPublicKey;

  { methods } 

    function GetSignatureAlgorithmIdentifier(hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): TArray<Byte>;
    function SignData(data: TArray<Byte>; hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PublicKey: DDN.System.DNPublicKey read get_PublicKey;
  end;

  TDNX509SignatureGenerator = class(TDNGenericImport<DNX509SignatureGeneratorClass, DNX509SignatureGenerator>) end;

  //-------------namespace: System.Threading----------------
  DNReaderWriterLockSlimClass = interface(DNObjectClass)
  ['{FB903A20-4A81-576A-B03F-F7F488BD4321}']
  { constructors } 

    {class} function init: DNReaderWriterLockSlim; overload;
    {class} function init(recursionPolicy: DNLockRecursionPolicy): DNReaderWriterLockSlim; overload;

  end;

  [DNTypeName('System.Threading.ReaderWriterLockSlim')]
  DNReaderWriterLockSlim = interface(DDN.mscorlib.DNIDisposable)
  ['{9303E068-8DEA-3576-84AD-64120761B60F}']
  { getters & setters } 

    function get_IsReadLockHeld: Boolean;
    function get_IsUpgradeableReadLockHeld: Boolean;
    function get_IsWriteLockHeld: Boolean;
    function get_RecursionPolicy: DNLockRecursionPolicy;
    function get_CurrentReadCount: Int32;
    function get_RecursiveReadCount: Int32;
    function get_RecursiveUpgradeCount: Int32;
    function get_RecursiveWriteCount: Int32;
    function get_WaitingReadCount: Int32;
    function get_WaitingUpgradeCount: Int32;
    function get_WaitingWriteCount: Int32;

  { methods } 

    procedure EnterReadLock;
    function TryEnterReadLock(timeout: DDN.mscorlib.DNTimeSpan): Boolean; overload;
    function TryEnterReadLock(millisecondsTimeout: Int32): Boolean; overload;
    procedure EnterWriteLock;
    function TryEnterWriteLock(timeout: DDN.mscorlib.DNTimeSpan): Boolean; overload;
    function TryEnterWriteLock(millisecondsTimeout: Int32): Boolean; overload;
    procedure EnterUpgradeableReadLock;
    function TryEnterUpgradeableReadLock(timeout: DDN.mscorlib.DNTimeSpan): Boolean; overload;
    function TryEnterUpgradeableReadLock(millisecondsTimeout: Int32): Boolean; overload;
    procedure ExitReadLock;
    procedure ExitWriteLock;
    procedure ExitUpgradeableReadLock;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsReadLockHeld: Boolean read get_IsReadLockHeld;
    property IsUpgradeableReadLockHeld: Boolean read get_IsUpgradeableReadLockHeld;
    property IsWriteLockHeld: Boolean read get_IsWriteLockHeld;
    property RecursionPolicy: DNLockRecursionPolicy read get_RecursionPolicy;
    property CurrentReadCount: Int32 read get_CurrentReadCount;
    property RecursiveReadCount: Int32 read get_RecursiveReadCount;
    property RecursiveUpgradeCount: Int32 read get_RecursiveUpgradeCount;
    property RecursiveWriteCount: Int32 read get_RecursiveWriteCount;
    property WaitingReadCount: Int32 read get_WaitingReadCount;
    property WaitingUpgradeCount: Int32 read get_WaitingUpgradeCount;
    property WaitingWriteCount: Int32 read get_WaitingWriteCount;
  end;

  TDNReaderWriterLockSlim = class(TDNGenericImport<DNReaderWriterLockSlimClass, DNReaderWriterLockSlim>) end;

  //-------------namespace: System.Threading.Tasks----------------
  DNTaskExtensionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D4619DFC-B19C-5AAF-BE91-01BF3393D6CD}']
  { static methods } 

    {class} function Unwrap(task: DDN.mscorlib.DNTask<DDN.mscorlib.DNTask>): DDN.mscorlib.DNTask; overload;

  end;

  [DNTypeName('System.Threading.Tasks.TaskExtensions')]
  DNTaskExtensions = interface(DDN.mscorlib.DNObject)
  ['{2BDA3557-5B63-39A0-B915-DEF4BA0E01DF}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTaskExtensions = class(TDNGenericImport<DNTaskExtensionsClass, DNTaskExtensions>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNHashSet_EnumeratorClass<T> = interface(DDN.mscorlib.DNValueTypeClass)
  ['{81608DA9-6A0D-5C2E-A4F5-F07B517CB3D0}']
  end;

  [DNTypeName('System.Collections.Generic.HashSet`1+Enumerator')]
  DNHashSet_Enumerator<T> = interface(DDN.mscorlib.DNValueType)
  ['{384D3DA4-C78A-3C48-AAC0-F7FE6B14A095}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNHashSet_Enumerator<T> = class(TDNGenericImport<DNHashSet_EnumeratorClass<T>, DNHashSet_Enumerator<T>>) end;

  //-------------namespace: System.Diagnostics.Eventing----------------
  DNEventDescriptorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{059ED608-E84E-526C-803F-6BE8FE9AEDDF}']
  { constructors } 

    {class} function init(id: Int32; version: Byte; channel: Byte; level: Byte; opcode: Byte; task: Int32; keywords: Int64): DNEventDescriptor;

  end;

  [DNTypeName('System.Diagnostics.Eventing.EventDescriptor')]
  DNEventDescriptor = interface(DDN.mscorlib.DNValueType)
  ['{0A52E9D6-97AD-3E1D-9CF4-91AA9453A4BE}']
  { getters & setters } 

    function get_EventId: Int32;
    function get_Version: Byte;
    function get_Channel: Byte;
    function get_Level: Byte;
    function get_Opcode: Byte;
    function get_Task: Int32;
    function get_Keywords: Int64;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property EventId: Int32 read get_EventId;
    property Version: Byte read get_Version;
    property Channel: Byte read get_Channel;
    property Level: Byte read get_Level;
    property Opcode: Byte read get_Opcode;
    property Task: Int32 read get_Task;
    property Keywords: Int64 read get_Keywords;
  end;

  TDNEventDescriptor = class(TDNGenericImport<DNEventDescriptorClass, DNEventDescriptor>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNCngPropertyClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{B48A998F-CE4B-5100-AC7D-50CDF2DD8E15}']
  { constructors } 

    {class} function init(name: string; value: TArray<Byte>; options: DNCngPropertyOptions): DNCngProperty;

  end;

  [DNTypeName('System.Security.Cryptography.CngProperty')]
  DNCngProperty = interface(DDN.mscorlib.DNValueType)
  ['{88674A81-0057-33D9-93D2-DCDCEDFF8D9D}']
  { getters & setters } 

    function get_Name: string;
    function get_Options: DNCngPropertyOptions;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(other: DNCngProperty): Boolean; overload;
    function GetHashCode: Int32;
    function GetValue: TArray<Byte>;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Name: string read get_Name;
    property Options: DNCngPropertyOptions read get_Options;
  end;

  TDNCngProperty = class(TDNGenericImport<DNCngPropertyClass, DNCngProperty>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNECCurveClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{10C66F62-8FB6-5866-A536-930689F446A0}']
  { static methods } 

    {class} function CreateFromOid(curveOid: DDN.System.DNOid): DNECCurve;
    {class} function CreateFromFriendlyName(oidFriendlyName: string): DNECCurve;
    {class} function CreateFromValue(oidValue: string): DNECCurve;

  end;

  [DNTypeName('System.Security.Cryptography.ECCurve')]
  DNECCurve = interface(DDN.mscorlib.DNValueType)
  ['{3A216B9F-83C5-3DFB-A4ED-2795FD69F7B8}']
  { getters & setters } 

    function get_Oid: DDN.System.DNOid;
    function get_IsPrime: Boolean;
    function get_IsCharacteristic2: Boolean;
    function get_IsExplicit: Boolean;
    function get_IsNamed: Boolean;

  { fields getter & setter } 

   function __fakeFieldGet_A: TArray<Byte>;
   procedure __fakeFieldSet_A(value: TArray<Byte>);
   function __fakeFieldGet_B: TArray<Byte>;
   procedure __fakeFieldSet_B(value: TArray<Byte>);
   function __fakeFieldGet_G: DNECPoint;
   procedure __fakeFieldSet_G(value: DNECPoint);
   function __fakeFieldGet_Order: TArray<Byte>;
   procedure __fakeFieldSet_Order(value: TArray<Byte>);
   function __fakeFieldGet_Cofactor: TArray<Byte>;
   procedure __fakeFieldSet_Cofactor(value: TArray<Byte>);
   function __fakeFieldGet_Seed: TArray<Byte>;
   procedure __fakeFieldSet_Seed(value: TArray<Byte>);
   function __fakeFieldGet_CurveType: DNECCurve_ECCurveType;
   procedure __fakeFieldSet_CurveType(value: DNECCurve_ECCurveType);
   function __fakeFieldGet_Hash: DDN.mscorlib.DNNullable<DDN.mscorlib.DNHashAlgorithmName>;
   procedure __fakeFieldSet_Hash(value: DDN.mscorlib.DNNullable<DDN.mscorlib.DNHashAlgorithmName>);
   function __fakeFieldGet_Polynomial: TArray<Byte>;
   procedure __fakeFieldSet_Polynomial(value: TArray<Byte>);
   function __fakeFieldGet_Prime: TArray<Byte>;
   procedure __fakeFieldSet_Prime(value: TArray<Byte>);

  { fields } 

   property A: TArray<Byte> read __fakeFieldGet_A write __fakeFieldSet_A;
   property B: TArray<Byte> read __fakeFieldGet_B write __fakeFieldSet_B;
   property G: DNECPoint read __fakeFieldGet_G write __fakeFieldSet_G;
   property Order: TArray<Byte> read __fakeFieldGet_Order write __fakeFieldSet_Order;
   property Cofactor: TArray<Byte> read __fakeFieldGet_Cofactor write __fakeFieldSet_Cofactor;
   property Seed: TArray<Byte> read __fakeFieldGet_Seed write __fakeFieldSet_Seed;
   property CurveType: DNECCurve_ECCurveType read __fakeFieldGet_CurveType write __fakeFieldSet_CurveType;
   property Hash: DDN.mscorlib.DNNullable<DDN.mscorlib.DNHashAlgorithmName> read __fakeFieldGet_Hash write __fakeFieldSet_Hash;
   property Polynomial: TArray<Byte> read __fakeFieldGet_Polynomial write __fakeFieldSet_Polynomial;
   property Prime: TArray<Byte> read __fakeFieldGet_Prime write __fakeFieldSet_Prime;

  { methods } 

    procedure Validate;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Oid: DDN.System.DNOid read get_Oid;
    property IsPrime: Boolean read get_IsPrime;
    property IsCharacteristic2: Boolean read get_IsCharacteristic2;
    property IsExplicit: Boolean read get_IsExplicit;
    property IsNamed: Boolean read get_IsNamed;
  end;

  TDNECCurve = class(TDNGenericImport<DNECCurveClass, DNECCurve>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNECParametersClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{09469302-BA6B-572C-8CC7-7841B116DD65}']
  end;

  [DNTypeName('System.Security.Cryptography.ECParameters')]
  DNECParameters = interface(DDN.mscorlib.DNValueType)
  ['{ADB113F9-AA87-3F23-9E11-BE120F21CDE6}']
  { fields getter & setter } 

   function __fakeFieldGet_Q: DNECPoint;
   procedure __fakeFieldSet_Q(value: DNECPoint);
   function __fakeFieldGet_D: TArray<Byte>;
   procedure __fakeFieldSet_D(value: TArray<Byte>);
   function __fakeFieldGet_Curve: DNECCurve;
   procedure __fakeFieldSet_Curve(value: DNECCurve);

  { fields } 

   property Q: DNECPoint read __fakeFieldGet_Q write __fakeFieldSet_Q;
   property D: TArray<Byte> read __fakeFieldGet_D write __fakeFieldSet_D;
   property Curve: DNECCurve read __fakeFieldGet_Curve write __fakeFieldSet_Curve;

  { methods } 

    procedure Validate;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNECParameters = class(TDNGenericImport<DNECParametersClass, DNECParameters>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNECPointClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{CFB2BEE2-0C34-50EA-B147-CA152AC21D4E}']
  end;

  [DNTypeName('System.Security.Cryptography.ECPoint')]
  DNECPoint = interface(DDN.mscorlib.DNValueType)
  ['{4492DBA8-1144-3F3E-81E8-C202B7F91305}']
  { fields getter & setter } 

   function __fakeFieldGet_X: TArray<Byte>;
   procedure __fakeFieldSet_X(value: TArray<Byte>);
   function __fakeFieldGet_Y: TArray<Byte>;
   procedure __fakeFieldSet_Y(value: TArray<Byte>);

  { fields } 

   property X: TArray<Byte> read __fakeFieldGet_X write __fakeFieldSet_X;
   property Y: TArray<Byte> read __fakeFieldGet_Y write __fakeFieldSet_Y;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNECPoint = class(TDNGenericImport<DNECPointClass, DNECPoint>) end;


implementation


initialization
  LoadAssemblyModule('System.Core.dll', True);

finalization

end.
