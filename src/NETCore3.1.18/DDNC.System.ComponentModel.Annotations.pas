//----------------------------------------------------------------------------
//  System.ComponentModel.Annotations.dll: System.ComponentModel.Annotations, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 3.1.18
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.ComponentModel.Annotations
//  Author: ying32
//----------------------------------------------------------------------------

{$IFNDEF DDNCSYSTEMCOMPONENTMODELANNOTATIONS}
unit DDNC.System.ComponentModel.Annotations;
{$ENDIF}

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.System.Private.CoreLib,
  DDNC.System.ComponentModel,
  DDNC.System.ComponentModel.TypeConverter;

type

{ enums }

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  [DNTypeName('System.ComponentModel.DataAnnotations.DataType')]
  DNDataType = type Integer;
  DNDataTypeHelper = record helper for DNDataType
  public const
    Custom = 0;
    DateTime = 1;
    Date = 2;
    Time = 3;
    Duration = 4;
    PhoneNumber = 5;
    Currency = 6;
    Text = 7;
    Html = 8;
    MultilineText = 9;
    EmailAddress = 10;
    Password = 11;
    Url = 12;
    ImageUrl = 13;
    CreditCard = 14;
    PostalCode = 15;
    Upload = 16;
  end;


  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption')]
  DNDatabaseGeneratedOption = type Integer;
  DNDatabaseGeneratedOptionHelper = record helper for DNDatabaseGeneratedOption
  public const
    None = 0;
    Identity = 1;
    Computed = 2;
  end;




type


{ declares }

  DNIValidatableObject = interface; // type: System.ComponentModel.DataAnnotations.IValidatableObject, namespace: System.ComponentModel.DataAnnotations
  DNAssociationAttribute = interface; // type: System.ComponentModel.DataAnnotations.AssociationAttribute, namespace: System.ComponentModel.DataAnnotations
  DNConcurrencyCheckAttribute = interface; // type: System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute, namespace: System.ComponentModel.DataAnnotations
  DNDisplayAttribute = interface; // type: System.ComponentModel.DataAnnotations.DisplayAttribute, namespace: System.ComponentModel.DataAnnotations
  DNDisplayColumnAttribute = interface; // type: System.ComponentModel.DataAnnotations.DisplayColumnAttribute, namespace: System.ComponentModel.DataAnnotations
  DNDisplayFormatAttribute = interface; // type: System.ComponentModel.DataAnnotations.DisplayFormatAttribute, namespace: System.ComponentModel.DataAnnotations
  DNEditableAttribute = interface; // type: System.ComponentModel.DataAnnotations.EditableAttribute, namespace: System.ComponentModel.DataAnnotations
  DNFilterUIHintAttribute = interface; // type: System.ComponentModel.DataAnnotations.FilterUIHintAttribute, namespace: System.ComponentModel.DataAnnotations
  DNKeyAttribute = interface; // type: System.ComponentModel.DataAnnotations.KeyAttribute, namespace: System.ComponentModel.DataAnnotations
  DNMetadataTypeAttribute = interface; // type: System.ComponentModel.DataAnnotations.MetadataTypeAttribute, namespace: System.ComponentModel.DataAnnotations
  DNScaffoldColumnAttribute = interface; // type: System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute, namespace: System.ComponentModel.DataAnnotations
  DNColumnAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.ColumnAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNComplexTypeAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNDatabaseGeneratedAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNForeignKeyAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNInversePropertyAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNNotMappedAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNTableAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.TableAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNTimestampAttribute = interface; // type: System.ComponentModel.DataAnnotations.TimestampAttribute, namespace: System.ComponentModel.DataAnnotations
  DNUIHintAttribute = interface; // type: System.ComponentModel.DataAnnotations.UIHintAttribute, namespace: System.ComponentModel.DataAnnotations
  DNValidationAttribute = interface; // type: System.ComponentModel.DataAnnotations.ValidationAttribute, namespace: System.ComponentModel.DataAnnotations
  DNCompareAttribute = interface; // type: System.ComponentModel.DataAnnotations.CompareAttribute, namespace: System.ComponentModel.DataAnnotations
  DNCustomValidationAttribute = interface; // type: System.ComponentModel.DataAnnotations.CustomValidationAttribute, namespace: System.ComponentModel.DataAnnotations
  DNDataTypeAttribute = interface; // type: System.ComponentModel.DataAnnotations.DataTypeAttribute, namespace: System.ComponentModel.DataAnnotations
  DNCreditCardAttribute = interface; // type: System.ComponentModel.DataAnnotations.CreditCardAttribute, namespace: System.ComponentModel.DataAnnotations
  DNEmailAddressAttribute = interface; // type: System.ComponentModel.DataAnnotations.EmailAddressAttribute, namespace: System.ComponentModel.DataAnnotations
  DNEnumDataTypeAttribute = interface; // type: System.ComponentModel.DataAnnotations.EnumDataTypeAttribute, namespace: System.ComponentModel.DataAnnotations
  DNFileExtensionsAttribute = interface; // type: System.ComponentModel.DataAnnotations.FileExtensionsAttribute, namespace: System.ComponentModel.DataAnnotations
  DNPhoneAttribute = interface; // type: System.ComponentModel.DataAnnotations.PhoneAttribute, namespace: System.ComponentModel.DataAnnotations
  DNUrlAttribute = interface; // type: System.ComponentModel.DataAnnotations.UrlAttribute, namespace: System.ComponentModel.DataAnnotations
  DNMaxLengthAttribute = interface; // type: System.ComponentModel.DataAnnotations.MaxLengthAttribute, namespace: System.ComponentModel.DataAnnotations
  DNMinLengthAttribute = interface; // type: System.ComponentModel.DataAnnotations.MinLengthAttribute, namespace: System.ComponentModel.DataAnnotations
  DNRangeAttribute = interface; // type: System.ComponentModel.DataAnnotations.RangeAttribute, namespace: System.ComponentModel.DataAnnotations
  DNRegularExpressionAttribute = interface; // type: System.ComponentModel.DataAnnotations.RegularExpressionAttribute, namespace: System.ComponentModel.DataAnnotations
  DNRequiredAttribute = interface; // type: System.ComponentModel.DataAnnotations.RequiredAttribute, namespace: System.ComponentModel.DataAnnotations
  DNStringLengthAttribute = interface; // type: System.ComponentModel.DataAnnotations.StringLengthAttribute, namespace: System.ComponentModel.DataAnnotations
  DNValidationContext = interface; // type: System.ComponentModel.DataAnnotations.ValidationContext, namespace: System.ComponentModel.DataAnnotations
  DNValidationResult = interface; // type: System.ComponentModel.DataAnnotations.ValidationResult, namespace: System.ComponentModel.DataAnnotations
  DNValidator = interface; // type: System.ComponentModel.DataAnnotations.Validator, namespace: System.ComponentModel.DataAnnotations
  DNAssociatedMetadataTypeTypeDescriptionProvider = interface; // type: System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider, namespace: System.ComponentModel.DataAnnotations
  DNValidationException = interface; // type: System.ComponentModel.DataAnnotations.ValidationException, namespace: System.ComponentModel.DataAnnotations


{ objects }

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  [DNTypeName('System.ComponentModel.DataAnnotations.IValidatableObject')]
  DNIValidatableObject = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{FEC73482-FAD1-339F-AEAF-FB7C715B7D08}']
  { methods } 

    function Validate(validationContext: DNValidationContext): DDNC.System.Private.CoreLib.DNIEnumerable<DNValidationResult>;

  end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNAssociationAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{05E711E4-0BDA-5DEB-BF81-988F4E84C64A}']
  { constructors } 

    {class} function init(name: string; thisKey: string; otherKey: string): DNAssociationAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.AssociationAttribute')]
  DNAssociationAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{2EE588C2-3793-3713-892E-D045390F7E2B}']
  { getters & setters } 

    function get_Name: string;
    function get_ThisKey: string;
    function get_OtherKey: string;
    function get_IsForeignKey: Boolean;
    procedure set_IsForeignKey(value: Boolean);
    function get_ThisKeyMembers: DDNC.System.Private.CoreLib.DNIEnumerable<string>;
    function get_OtherKeyMembers: DDNC.System.Private.CoreLib.DNIEnumerable<string>;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property ThisKey: string read get_ThisKey;
    property OtherKey: string read get_OtherKey;
    property IsForeignKey: Boolean read get_IsForeignKey write set_IsForeignKey;
    property ThisKeyMembers: DDNC.System.Private.CoreLib.DNIEnumerable<string> read get_ThisKeyMembers;
    property OtherKeyMembers: DDNC.System.Private.CoreLib.DNIEnumerable<string> read get_OtherKeyMembers;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNAssociationAttribute = class(TDNGenericImport<DNAssociationAttributeClass, DNAssociationAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNConcurrencyCheckAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{C0F44B8D-EB64-5D11-A647-C053DCF68B8F}']
  { constructors } 

    {class} function init: DNConcurrencyCheckAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute')]
  DNConcurrencyCheckAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{56041E90-5E42-3DAB-B78A-DB3ADEDD61B6}']
  { getters & setters } 

    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNConcurrencyCheckAttribute = class(TDNGenericImport<DNConcurrencyCheckAttributeClass, DNConcurrencyCheckAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNDisplayAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{9B4D4291-87A7-5BF0-9EFD-C810F100A9D1}']
  { constructors } 

    {class} function init: DNDisplayAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.DisplayAttribute')]
  DNDisplayAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{EE5E788C-5925-31C0-9D06-8A9C5488B6CE}']
  { getters & setters } 

    function get_ShortName: string;
    procedure set_ShortName(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Description: string;
    procedure set_Description(value: string);
    function get_Prompt: string;
    procedure set_Prompt(value: string);
    function get_GroupName: string;
    procedure set_GroupName(value: string);
    function get_ResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_AutoGenerateField: Boolean;
    procedure set_AutoGenerateField(value: Boolean);
    function get_AutoGenerateFilter: Boolean;
    procedure set_AutoGenerateFilter(value: Boolean);
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function GetShortName: string;
    function GetName: string;
    function GetDescription: string;
    function GetPrompt: string;
    function GetGroupName: string;
    function GetAutoGenerateField: DDNC.System.Private.CoreLib.DNNullable<Boolean>;
    function GetAutoGenerateFilter: DDNC.System.Private.CoreLib.DNNullable<Boolean>;
    function GetOrder: DDNC.System.Private.CoreLib.DNNullable<Int32>;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property ShortName: string read get_ShortName write set_ShortName;
    property Name: string read get_Name write set_Name;
    property Description: string read get_Description write set_Description;
    property Prompt: string read get_Prompt write set_Prompt;
    property GroupName: string read get_GroupName write set_GroupName;
    property ResourceType: DDNC.System.Private.CoreLib.DNType read get_ResourceType write set_ResourceType;
    property AutoGenerateField: Boolean read get_AutoGenerateField write set_AutoGenerateField;
    property AutoGenerateFilter: Boolean read get_AutoGenerateFilter write set_AutoGenerateFilter;
    property Order: Int32 read get_Order write set_Order;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDisplayAttribute = class(TDNGenericImport<DNDisplayAttributeClass, DNDisplayAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNDisplayColumnAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{1EA7D0F2-2646-5275-81A5-2F38DE771B3F}']
  { constructors } 

    {class} function init(displayColumn: string): DNDisplayColumnAttribute; overload;
    {class} function init(displayColumn: string; sortColumn: string): DNDisplayColumnAttribute; overload;
    {class} function init(displayColumn: string; sortColumn: string; sortDescending: Boolean): DNDisplayColumnAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.DisplayColumnAttribute')]
  DNDisplayColumnAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{2FAFD98C-690F-3A62-AE26-2E42555EEC65}']
  { getters & setters } 

    function get_DisplayColumn: string;
    function get_SortColumn: string;
    function get_SortDescending: Boolean;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property DisplayColumn: string read get_DisplayColumn;
    property SortColumn: string read get_SortColumn;
    property SortDescending: Boolean read get_SortDescending;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDisplayColumnAttribute = class(TDNGenericImport<DNDisplayColumnAttributeClass, DNDisplayColumnAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNDisplayFormatAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{037FC876-740B-579C-BF73-343CA4AAAE05}']
  { constructors } 

    {class} function init: DNDisplayFormatAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.DisplayFormatAttribute')]
  DNDisplayFormatAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{004F8B49-8F7A-3321-B42C-EBD60AEFA15B}']
  { getters & setters } 

    function get_DataFormatString: string;
    procedure set_DataFormatString(value: string);
    function get_NullDisplayText: string;
    procedure set_NullDisplayText(value: string);
    function get_ConvertEmptyStringToNull: Boolean;
    procedure set_ConvertEmptyStringToNull(value: Boolean);
    function get_ApplyFormatInEditMode: Boolean;
    procedure set_ApplyFormatInEditMode(value: Boolean);
    function get_HtmlEncode: Boolean;
    procedure set_HtmlEncode(value: Boolean);
    function get_NullDisplayTextResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_NullDisplayTextResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function GetNullDisplayText: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property DataFormatString: string read get_DataFormatString write set_DataFormatString;
    property NullDisplayText: string read get_NullDisplayText write set_NullDisplayText;
    property ConvertEmptyStringToNull: Boolean read get_ConvertEmptyStringToNull write set_ConvertEmptyStringToNull;
    property ApplyFormatInEditMode: Boolean read get_ApplyFormatInEditMode write set_ApplyFormatInEditMode;
    property HtmlEncode: Boolean read get_HtmlEncode write set_HtmlEncode;
    property NullDisplayTextResourceType: DDNC.System.Private.CoreLib.DNType read get_NullDisplayTextResourceType write set_NullDisplayTextResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDisplayFormatAttribute = class(TDNGenericImport<DNDisplayFormatAttributeClass, DNDisplayFormatAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNEditableAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{86AD8CDD-B2F9-528F-B6AA-A1A4F77EEE0F}']
  { constructors } 

    {class} function init(allowEdit: Boolean): DNEditableAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.EditableAttribute')]
  DNEditableAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{6192095F-896B-35A3-966A-62DC5D41A02B}']
  { getters & setters } 

    function get_AllowEdit: Boolean;
    function get_AllowInitialValue: Boolean;
    procedure set_AllowInitialValue(value: Boolean);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property AllowEdit: Boolean read get_AllowEdit;
    property AllowInitialValue: Boolean read get_AllowInitialValue write set_AllowInitialValue;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNEditableAttribute = class(TDNGenericImport<DNEditableAttributeClass, DNEditableAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNFilterUIHintAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{A214EC32-E414-5E89-A68C-EE6C1E5FE3E5}']
  { constructors } 

    {class} function init(filterUIHint: string): DNFilterUIHintAttribute; overload;
    {class} function init(filterUIHint: string; presentationLayer: string): DNFilterUIHintAttribute; overload;
    {class} function init(filterUIHint: string; presentationLayer: string; controlParameters: TArray<DDNC.System.Private.CoreLib.DNObject>): DNFilterUIHintAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.FilterUIHintAttribute')]
  DNFilterUIHintAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{57C6C79D-B7E9-3308-999C-FD67A6C3C4CC}']
  { getters & setters } 

    function get_FilterUIHint: string;
    function get_PresentationLayer: string;
    function get_ControlParameters: DDNC.System.Private.CoreLib.DNIDictionary<string, DDNC.System.Private.CoreLib.DNObject>;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property FilterUIHint: string read get_FilterUIHint;
    property PresentationLayer: string read get_PresentationLayer;
    property ControlParameters: DDNC.System.Private.CoreLib.DNIDictionary<string, DDNC.System.Private.CoreLib.DNObject> read get_ControlParameters;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNFilterUIHintAttribute = class(TDNGenericImport<DNFilterUIHintAttributeClass, DNFilterUIHintAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNKeyAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{AEDE6010-196B-5F01-B8F4-608B55C1C527}']
  { constructors } 

    {class} function init: DNKeyAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.KeyAttribute')]
  DNKeyAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{0511C317-A649-3D3A-B48D-4B325B60C3D4}']
  { getters & setters } 

    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNKeyAttribute = class(TDNGenericImport<DNKeyAttributeClass, DNKeyAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNMetadataTypeAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{FE32AE3F-1E4C-5FE9-8578-3C19B898E119}']
  { constructors } 

    {class} function init(metadataClassType: DDNC.System.Private.CoreLib.DNType): DNMetadataTypeAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.MetadataTypeAttribute')]
  DNMetadataTypeAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{F7D1ABC8-F9DE-3800-AC4A-E8BB8B4646CF}']
  { getters & setters } 

    function get_MetadataClassType: DDNC.System.Private.CoreLib.DNType;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property MetadataClassType: DDNC.System.Private.CoreLib.DNType read get_MetadataClassType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNMetadataTypeAttribute = class(TDNGenericImport<DNMetadataTypeAttributeClass, DNMetadataTypeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNScaffoldColumnAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{B43B15E4-62B0-5A8D-BE9E-C39977856DFA}']
  { constructors } 

    {class} function init(scaffold: Boolean): DNScaffoldColumnAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute')]
  DNScaffoldColumnAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{22404C5B-A028-3B8D-8FA2-E8BFCCCA9D09}']
  { getters & setters } 

    function get_Scaffold: Boolean;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Scaffold: Boolean read get_Scaffold;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNScaffoldColumnAttribute = class(TDNGenericImport<DNScaffoldColumnAttributeClass, DNScaffoldColumnAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNColumnAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{1CB14227-B03E-5A6A-9690-EEA6DA793D1E}']
  { constructors } 

    {class} function init: DNColumnAttribute; overload;
    {class} function init(name: string): DNColumnAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.ColumnAttribute')]
  DNColumnAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{09EBA538-465E-3516-AF96-296705A60AFC}']
  { getters & setters } 

    function get_Name: string;
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Order: Int32 read get_Order write set_Order;
    property TypeName: string read get_TypeName write set_TypeName;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNColumnAttribute = class(TDNGenericImport<DNColumnAttributeClass, DNColumnAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNComplexTypeAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{AC1770AA-B0C1-5157-9C78-A642ABC8B372}']
  { constructors } 

    {class} function init: DNComplexTypeAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute')]
  DNComplexTypeAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{E6A2ECCC-311D-30A1-BC66-D5D4C38ECE28}']
  { getters & setters } 

    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNComplexTypeAttribute = class(TDNGenericImport<DNComplexTypeAttributeClass, DNComplexTypeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNDatabaseGeneratedAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{2748EE9D-EA56-53BB-8535-0F9ECC9505A7}']
  { constructors } 

    {class} function init(databaseGeneratedOption: DNDatabaseGeneratedOption): DNDatabaseGeneratedAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute')]
  DNDatabaseGeneratedAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{852F4FBA-6359-3C36-A754-27DDC691937D}']
  { getters & setters } 

    function get_DatabaseGeneratedOption: DNDatabaseGeneratedOption;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property DatabaseGeneratedOption: DNDatabaseGeneratedOption read get_DatabaseGeneratedOption;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDatabaseGeneratedAttribute = class(TDNGenericImport<DNDatabaseGeneratedAttributeClass, DNDatabaseGeneratedAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNForeignKeyAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{876CDB2A-4894-51F8-B1D2-3696EF9A0B61}']
  { constructors } 

    {class} function init(name: string): DNForeignKeyAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute')]
  DNForeignKeyAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{289A5B1F-3E3E-3137-AF9E-C139EA5BD97B}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNForeignKeyAttribute = class(TDNGenericImport<DNForeignKeyAttributeClass, DNForeignKeyAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNInversePropertyAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{F9233648-662D-57F5-8B2E-2D780BB1FAEF}']
  { constructors } 

    {class} function init(&property: string): DNInversePropertyAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute')]
  DNInversePropertyAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{9DFC516C-DD11-3804-AA11-09B8AAED7BF0}']
  { getters & setters } 

    function get_Property: string;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property &Property: string read get_Property;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNInversePropertyAttribute = class(TDNGenericImport<DNInversePropertyAttributeClass, DNInversePropertyAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNNotMappedAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{BF20CFB3-7403-51DD-9041-D94282B7A972}']
  { constructors } 

    {class} function init: DNNotMappedAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute')]
  DNNotMappedAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{D91E8D43-02A0-3E7D-AA8C-02EA98CA4EEA}']
  { getters & setters } 

    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNNotMappedAttribute = class(TDNGenericImport<DNNotMappedAttributeClass, DNNotMappedAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNTableAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{2BCC4E83-BCF0-56DF-B29C-16B27FF48216}']
  { constructors } 

    {class} function init(name: string): DNTableAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.TableAttribute')]
  DNTableAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{89626358-058E-352A-B39F-8DC1AB08F910}']
  { getters & setters } 

    function get_Name: string;
    function get_Schema: string;
    procedure set_Schema(value: string);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Schema: string read get_Schema write set_Schema;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNTableAttribute = class(TDNGenericImport<DNTableAttributeClass, DNTableAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNTimestampAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{F6FB73F5-CD87-57DE-BC8A-68556BA24510}']
  { constructors } 

    {class} function init: DNTimestampAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.TimestampAttribute')]
  DNTimestampAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{6E45E515-F441-316B-BEF4-F16D2A768B80}']
  { getters & setters } 

    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNTimestampAttribute = class(TDNGenericImport<DNTimestampAttributeClass, DNTimestampAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNUIHintAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{FFE88003-1356-57A1-8AE6-DCD337F2865E}']
  { constructors } 

    {class} function init(uiHint: string): DNUIHintAttribute; overload;
    {class} function init(uiHint: string; presentationLayer: string): DNUIHintAttribute; overload;
    {class} function init(uiHint: string; presentationLayer: string; controlParameters: TArray<DDNC.System.Private.CoreLib.DNObject>): DNUIHintAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.UIHintAttribute')]
  DNUIHintAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{84C01C2F-5E03-3BF6-A4DC-D7F0B556F228}']
  { getters & setters } 

    function get_UIHint: string;
    function get_PresentationLayer: string;
    function get_ControlParameters: DDNC.System.Private.CoreLib.DNIDictionary<string, DDNC.System.Private.CoreLib.DNObject>;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property UIHint: string read get_UIHint;
    property PresentationLayer: string read get_PresentationLayer;
    property ControlParameters: DDNC.System.Private.CoreLib.DNIDictionary<string, DDNC.System.Private.CoreLib.DNObject> read get_ControlParameters;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNUIHintAttribute = class(TDNGenericImport<DNUIHintAttributeClass, DNUIHintAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNValidationAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{919DC47B-2DFC-5CE7-A900-418A7345CD70}']
  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.ValidationAttribute')]
  DNValidationAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{1D421E65-048F-3283-B267-3B1C62E7DB99}']
  { getters & setters } 

    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function FormatErrorMessage(name: string): string;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNValidationAttribute = class(TDNGenericImport<DNValidationAttributeClass, DNValidationAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNCompareAttributeClass = interface(DNValidationAttributeClass)
  ['{DCE1C103-1A2A-5F56-B88E-461B26F2156D}']
  { constructors } 

    {class} function init(otherProperty: string): DNCompareAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.CompareAttribute')]
  DNCompareAttribute = interface(DNValidationAttribute)
  ['{0F9ADFD8-2816-3409-A864-877D2CCC25AB}']
  { getters & setters } 

    function get_OtherProperty: string;
    function get_OtherPropertyDisplayName: string;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function FormatErrorMessage(name: string): string;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property OtherProperty: string read get_OtherProperty;
    property OtherPropertyDisplayName: string read get_OtherPropertyDisplayName;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNCompareAttribute = class(TDNGenericImport<DNCompareAttributeClass, DNCompareAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNCustomValidationAttributeClass = interface(DNValidationAttributeClass)
  ['{38D6B87C-92B8-5AFF-B95B-A859774CA4EE}']
  { constructors } 

    {class} function init(validatorType: DDNC.System.Private.CoreLib.DNType; method: string): DNCustomValidationAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.CustomValidationAttribute')]
  DNCustomValidationAttribute = interface(DNValidationAttribute)
  ['{C8043A01-DA06-3CB2-845A-787432DE45F0}']
  { getters & setters } 

    function get_ValidatorType: DDNC.System.Private.CoreLib.DNType;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;
    function get_Method: string;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);

  { methods } 

    function FormatErrorMessage(name: string): string;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property ValidatorType: DDNC.System.Private.CoreLib.DNType read get_ValidatorType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
    property Method: string read get_Method;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
  end;

  TDNCustomValidationAttribute = class(TDNGenericImport<DNCustomValidationAttributeClass, DNCustomValidationAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNDataTypeAttributeClass = interface(DNValidationAttributeClass)
  ['{2F501CBE-1BC5-58F2-8B5B-5F1606ECB9CF}']
  { constructors } 

    {class} function init(dataType: DNDataType): DNDataTypeAttribute; overload;
    {class} function init(customDataType: string): DNDataTypeAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.DataTypeAttribute')]
  DNDataTypeAttribute = interface(DNValidationAttribute)
  ['{84B71944-3F02-3CF9-8C43-6FF471BAE270}']
  { getters & setters } 

    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function GetDataTypeName: string;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property DataType: DNDataType read get_DataType;
    property CustomDataType: string read get_CustomDataType;
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDataTypeAttribute = class(TDNGenericImport<DNDataTypeAttributeClass, DNDataTypeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNCreditCardAttributeClass = interface(DNDataTypeAttributeClass)
  ['{207580E9-26D4-5BFD-B1CB-8690FFD82CAB}']
  { constructors } 

    {class} function init: DNCreditCardAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.CreditCardAttribute')]
  DNCreditCardAttribute = interface(DNDataTypeAttribute)
  ['{C9E9F242-FE3C-3E66-B33C-058663817E17}']
  { getters & setters } 

    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetDataTypeName: string;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property DataType: DNDataType read get_DataType;
    property CustomDataType: string read get_CustomDataType;
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNCreditCardAttribute = class(TDNGenericImport<DNCreditCardAttributeClass, DNCreditCardAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNEmailAddressAttributeClass = interface(DNDataTypeAttributeClass)
  ['{CFC24879-DC6A-563C-ADC8-C8B21B565807}']
  { constructors } 

    {class} function init: DNEmailAddressAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.EmailAddressAttribute')]
  DNEmailAddressAttribute = interface(DNDataTypeAttribute)
  ['{46E473E6-88CE-3954-B50E-0EF870491A12}']
  { getters & setters } 

    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetDataTypeName: string;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property DataType: DNDataType read get_DataType;
    property CustomDataType: string read get_CustomDataType;
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNEmailAddressAttribute = class(TDNGenericImport<DNEmailAddressAttributeClass, DNEmailAddressAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNEnumDataTypeAttributeClass = interface(DNDataTypeAttributeClass)
  ['{98F87999-F7E0-5B8E-B164-B35DC5BCC46F}']
  { constructors } 

    {class} function init(enumType: DDNC.System.Private.CoreLib.DNType): DNEnumDataTypeAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.EnumDataTypeAttribute')]
  DNEnumDataTypeAttribute = interface(DNDataTypeAttribute)
  ['{E7DFA982-AC78-30F9-BB5C-51D7DAB1080A}']
  { getters & setters } 

    function get_EnumType: DDNC.System.Private.CoreLib.DNType;
    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetDataTypeName: string;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property EnumType: DDNC.System.Private.CoreLib.DNType read get_EnumType;
    property DataType: DNDataType read get_DataType;
    property CustomDataType: string read get_CustomDataType;
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNEnumDataTypeAttribute = class(TDNGenericImport<DNEnumDataTypeAttributeClass, DNEnumDataTypeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNFileExtensionsAttributeClass = interface(DNDataTypeAttributeClass)
  ['{D7865393-27A8-57A1-BC95-ECD3518CA409}']
  { constructors } 

    {class} function init: DNFileExtensionsAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.FileExtensionsAttribute')]
  DNFileExtensionsAttribute = interface(DNDataTypeAttribute)
  ['{415D524B-F19E-3FAC-9C45-8F0C3926344F}']
  { getters & setters } 

    function get_Extensions: string;
    procedure set_Extensions(value: string);
    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function FormatErrorMessage(name: string): string;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetDataTypeName: string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Extensions: string read get_Extensions write set_Extensions;
    property DataType: DNDataType read get_DataType;
    property CustomDataType: string read get_CustomDataType;
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNFileExtensionsAttribute = class(TDNGenericImport<DNFileExtensionsAttributeClass, DNFileExtensionsAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNPhoneAttributeClass = interface(DNDataTypeAttributeClass)
  ['{4B31C1EE-61EA-5657-B19E-514C64FB039F}']
  { constructors } 

    {class} function init: DNPhoneAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.PhoneAttribute')]
  DNPhoneAttribute = interface(DNDataTypeAttribute)
  ['{ECAD3307-6EA6-3228-BD24-28A274D61784}']
  { getters & setters } 

    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetDataTypeName: string;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property DataType: DNDataType read get_DataType;
    property CustomDataType: string read get_CustomDataType;
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNPhoneAttribute = class(TDNGenericImport<DNPhoneAttributeClass, DNPhoneAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNUrlAttributeClass = interface(DNDataTypeAttributeClass)
  ['{F5D1ADB9-2197-5164-95E6-94B690FD7058}']
  { constructors } 

    {class} function init: DNUrlAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.UrlAttribute')]
  DNUrlAttribute = interface(DNDataTypeAttribute)
  ['{062E21EC-8FDA-3540-B069-A7ACCA8A907E}']
  { getters & setters } 

    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetDataTypeName: string;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property DataType: DNDataType read get_DataType;
    property CustomDataType: string read get_CustomDataType;
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNUrlAttribute = class(TDNGenericImport<DNUrlAttributeClass, DNUrlAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNMaxLengthAttributeClass = interface(DNValidationAttributeClass)
  ['{408208AD-1011-5208-B4AE-D22B1B810E61}']
  { constructors } 

    {class} function init(length: Int32): DNMaxLengthAttribute; overload;
    {class} function init: DNMaxLengthAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.MaxLengthAttribute')]
  DNMaxLengthAttribute = interface(DNValidationAttribute)
  ['{584AB119-7CDF-3B72-AD3A-D1ABDB0D16E5}']
  { getters & setters } 

    function get_Length: Int32;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Length: Int32 read get_Length;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNMaxLengthAttribute = class(TDNGenericImport<DNMaxLengthAttributeClass, DNMaxLengthAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNMinLengthAttributeClass = interface(DNValidationAttributeClass)
  ['{69A1A728-FE6E-5AB4-82D8-ECB79DCDAD0E}']
  { constructors } 

    {class} function init(length: Int32): DNMinLengthAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.MinLengthAttribute')]
  DNMinLengthAttribute = interface(DNValidationAttribute)
  ['{1D15500B-5BF6-355F-9FA3-0FB6D976888E}']
  { getters & setters } 

    function get_Length: Int32;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Length: Int32 read get_Length;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNMinLengthAttribute = class(TDNGenericImport<DNMinLengthAttributeClass, DNMinLengthAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNRangeAttributeClass = interface(DNValidationAttributeClass)
  ['{02D2D730-B206-51AD-A417-B2226A63426D}']
  { constructors } 

    {class} function init(minimum: Int32; maximum: Int32): DNRangeAttribute; overload;
    {class} function init(minimum: Double; maximum: Double): DNRangeAttribute; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType; minimum: string; maximum: string): DNRangeAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.RangeAttribute')]
  DNRangeAttribute = interface(DNValidationAttribute)
  ['{A710FA63-A2CF-3A22-85D7-A819641BF9B9}']
  { getters & setters } 

    function get_Minimum: DDNC.System.Private.CoreLib.DNObject;
    function get_Maximum: DDNC.System.Private.CoreLib.DNObject;
    function get_OperandType: DDNC.System.Private.CoreLib.DNType;
    function get_ParseLimitsInInvariantCulture: Boolean;
    procedure set_ParseLimitsInInvariantCulture(value: Boolean);
    function get_ConvertValueInInvariantCulture: Boolean;
    procedure set_ConvertValueInInvariantCulture(value: Boolean);
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Minimum: DDNC.System.Private.CoreLib.DNObject read get_Minimum;
    property Maximum: DDNC.System.Private.CoreLib.DNObject read get_Maximum;
    property OperandType: DDNC.System.Private.CoreLib.DNType read get_OperandType;
    property ParseLimitsInInvariantCulture: Boolean read get_ParseLimitsInInvariantCulture write set_ParseLimitsInInvariantCulture;
    property ConvertValueInInvariantCulture: Boolean read get_ConvertValueInInvariantCulture write set_ConvertValueInInvariantCulture;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNRangeAttribute = class(TDNGenericImport<DNRangeAttributeClass, DNRangeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNRegularExpressionAttributeClass = interface(DNValidationAttributeClass)
  ['{6C2DB986-66AC-526A-BDDC-C75CBAD45802}']
  { constructors } 

    {class} function init(pattern: string): DNRegularExpressionAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.RegularExpressionAttribute')]
  DNRegularExpressionAttribute = interface(DNValidationAttribute)
  ['{83E65C27-BFE6-3A96-A766-B813B30B08E5}']
  { getters & setters } 

    function get_MatchTimeoutInMilliseconds: Int32;
    procedure set_MatchTimeoutInMilliseconds(value: Int32);
    function get_Pattern: string;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property MatchTimeoutInMilliseconds: Int32 read get_MatchTimeoutInMilliseconds write set_MatchTimeoutInMilliseconds;
    property Pattern: string read get_Pattern;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNRegularExpressionAttribute = class(TDNGenericImport<DNRegularExpressionAttributeClass, DNRegularExpressionAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNRequiredAttributeClass = interface(DNValidationAttributeClass)
  ['{4A2A745B-B0CE-5BA0-983A-058814975F49}']
  { constructors } 

    {class} function init: DNRequiredAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.RequiredAttribute')]
  DNRequiredAttribute = interface(DNValidationAttribute)
  ['{1072CAF9-AC4C-3B59-AB13-BBB2249951BB}']
  { getters & setters } 

    function get_AllowEmptyStrings: Boolean;
    procedure set_AllowEmptyStrings(value: Boolean);
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property AllowEmptyStrings: Boolean read get_AllowEmptyStrings write set_AllowEmptyStrings;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNRequiredAttribute = class(TDNGenericImport<DNRequiredAttributeClass, DNRequiredAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNStringLengthAttributeClass = interface(DNValidationAttributeClass)
  ['{D89B6E24-EC13-5525-BF6E-27DC22126FB7}']
  { constructors } 

    {class} function init(maximumLength: Int32): DNStringLengthAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.StringLengthAttribute')]
  DNStringLengthAttribute = interface(DNValidationAttribute)
  ['{C151114D-62E4-349B-BA1A-A2680FC4F41C}']
  { getters & setters } 

    function get_MaximumLength: Int32;
    function get_MinimumLength: Int32;
    procedure set_MinimumLength(value: Int32);
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property MaximumLength: Int32 read get_MaximumLength;
    property MinimumLength: Int32 read get_MinimumLength write set_MinimumLength;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNStringLengthAttribute = class(TDNGenericImport<DNStringLengthAttributeClass, DNStringLengthAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNValidationContextClass = interface(DNObjectClass)
  ['{1AED7543-9A0A-536B-B781-E830128D866E}']
  { constructors } 

    {class} function init(instance: DDNC.System.Private.CoreLib.DNObject): DNValidationContext; overload;
    {class} function init(instance: DDNC.System.Private.CoreLib.DNObject; items: DDNC.System.Private.CoreLib.DNIDictionary<DDNC.System.Private.CoreLib.DNObject, DDNC.System.Private.CoreLib.DNObject>): DNValidationContext; overload;
    {class} function init(instance: DDNC.System.Private.CoreLib.DNObject; serviceProvider: DDNC.System.ComponentModel.DNIServiceProvider; items: DDNC.System.Private.CoreLib.DNIDictionary<DDNC.System.Private.CoreLib.DNObject, DDNC.System.Private.CoreLib.DNObject>): DNValidationContext; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.ValidationContext')]
  DNValidationContext = interface(DDNC.System.ComponentModel.DNIServiceProvider)
  ['{DA8F6C4E-059E-3549-949A-7D483347595F}']
  { getters & setters } 

    function get_ObjectInstance: DDNC.System.Private.CoreLib.DNObject;
    function get_ObjectType: DDNC.System.Private.CoreLib.DNType;
    function get_DisplayName: string;
    procedure set_DisplayName(value: string);
    function get_MemberName: string;
    procedure set_MemberName(value: string);
    function get_Items: DDNC.System.Private.CoreLib.DNIDictionary<DDNC.System.Private.CoreLib.DNObject, DDNC.System.Private.CoreLib.DNObject>;

  { methods } 

    procedure InitializeServiceProvider(serviceProvider: DDNC.System.Private.CoreLib.DNFunc<DDNC.System.Private.CoreLib.DNType, DDNC.System.Private.CoreLib.DNObject>);
    function GetService(serviceType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ObjectInstance: DDNC.System.Private.CoreLib.DNObject read get_ObjectInstance;
    property ObjectType: DDNC.System.Private.CoreLib.DNType read get_ObjectType;
    property DisplayName: string read get_DisplayName write set_DisplayName;
    property MemberName: string read get_MemberName write set_MemberName;
    property Items: DDNC.System.Private.CoreLib.DNIDictionary<DDNC.System.Private.CoreLib.DNObject, DDNC.System.Private.CoreLib.DNObject> read get_Items;
  end;

  TDNValidationContext = class(TDNGenericImport<DNValidationContextClass, DNValidationContext>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNValidationResultClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{9DE12F4F-78A6-5086-821D-CB0953A7D388}']
  { constructors } 

    {class} function init(errorMessage: string): DNValidationResult; overload;
    {class} function init(errorMessage: string; memberNames: DDNC.System.Private.CoreLib.DNIEnumerable<string>): DNValidationResult; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Success: DNValidationResult;

  { static fields } 

    {class} property Success: DNValidationResult read __fakeFieldGet_Success;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.ValidationResult')]
  DNValidationResult = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{15786F16-1BA2-3C6F-BB44-586D8971D01F}']
  { getters & setters } 

    function get_MemberNames: DDNC.System.Private.CoreLib.DNIEnumerable<string>;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);

  { methods } 

    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property MemberNames: DDNC.System.Private.CoreLib.DNIEnumerable<string> read get_MemberNames;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
  end;

  TDNValidationResult = class(TDNGenericImport<DNValidationResultClass, DNValidationResult>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNValidatorClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{6D2C3C1B-DA32-5E64-9A07-9C0DF9DC3D1F}']
  { static methods } 

    {class} function TryValidateProperty(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext; validationResults: DDNC.System.Private.CoreLib.DNICollection<DNValidationResult>): Boolean;
    {class} function TryValidateObject(instance: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext; validationResults: DDNC.System.Private.CoreLib.DNICollection<DNValidationResult>): Boolean; overload;
    {class} function TryValidateObject(instance: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext; validationResults: DDNC.System.Private.CoreLib.DNICollection<DNValidationResult>; validateAllProperties: Boolean): Boolean; overload;
    {class} function TryValidateValue(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext; validationResults: DDNC.System.Private.CoreLib.DNICollection<DNValidationResult>; validationAttributes: DDNC.System.Private.CoreLib.DNIEnumerable<DNValidationAttribute>): Boolean;
    {class} procedure ValidateProperty(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext);
    {class} procedure ValidateObject(instance: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    {class} procedure ValidateObject(instance: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext; validateAllProperties: Boolean); overload;
    {class} procedure ValidateValue(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext; validationAttributes: DDNC.System.Private.CoreLib.DNIEnumerable<DNValidationAttribute>);

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Validator')]
  DNValidator = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{8BA89D52-F037-313A-A840-FC276848B7D7}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNValidator = class(TDNGenericImport<DNValidatorClass, DNValidator>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNAssociatedMetadataTypeTypeDescriptionProviderClass = interface(DNObjectClass)
  ['{6AD4068A-35BF-53E7-9CE2-3465A855D8B5}']
  { constructors } 

    {class} function init(&type: DDNC.System.Private.CoreLib.DNType): DNAssociatedMetadataTypeTypeDescriptionProvider; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType; associatedMetadataType: DDNC.System.Private.CoreLib.DNType): DNAssociatedMetadataTypeTypeDescriptionProvider; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider')]
  DNAssociatedMetadataTypeTypeDescriptionProvider = interface(DNObject)
  ['{2A87CD5F-E333-3675-9026-0BF42EDB27AB}']
  { methods } 

    function GetTypeDescriptor(objectType: DDNC.System.Private.CoreLib.DNType; instance: DDNC.System.Private.CoreLib.DNObject): DDNC.System.ComponentModel.TypeConverter.DNICustomTypeDescriptor; overload;
    function CreateInstance(provider: DDNC.System.ComponentModel.DNIServiceProvider; objectType: DDNC.System.Private.CoreLib.DNType; argTypes: TArray<DDNC.System.Private.CoreLib.DNType>; args: TArray<DDNC.System.Private.CoreLib.DNObject>): DDNC.System.Private.CoreLib.DNObject;
    function GetCache(instance: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNIDictionary;
    function GetExtendedTypeDescriptor(instance: DDNC.System.Private.CoreLib.DNObject): DDNC.System.ComponentModel.TypeConverter.DNICustomTypeDescriptor;
    function GetFullComponentName(component: DDNC.System.Private.CoreLib.DNObject): string;
    function GetReflectionType(objectType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNType; overload;
    function GetReflectionType(instance: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNType; overload;
    function GetReflectionType(objectType: DDNC.System.Private.CoreLib.DNType; instance: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNType; overload;
    function GetRuntimeType(reflectionType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNType;
    function GetTypeDescriptor(objectType: DDNC.System.Private.CoreLib.DNType): DDNC.System.ComponentModel.TypeConverter.DNICustomTypeDescriptor; overload;
    function GetTypeDescriptor(instance: DDNC.System.Private.CoreLib.DNObject): DDNC.System.ComponentModel.TypeConverter.DNICustomTypeDescriptor; overload;
    function IsSupportedType(&type: DDNC.System.Private.CoreLib.DNType): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNAssociatedMetadataTypeTypeDescriptionProvider = class(TDNGenericImport<DNAssociatedMetadataTypeTypeDescriptionProviderClass, DNAssociatedMetadataTypeTypeDescriptionProvider>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNValidationExceptionClass = interface(DDNC.System.Private.CoreLib.DNExceptionClass)
  ['{1AE693CD-CE7E-52C0-99A3-F60214370955}']
  { constructors } 

    {class} function init(validationResult: DNValidationResult; validatingAttribute: DNValidationAttribute; value: DDNC.System.Private.CoreLib.DNObject): DNValidationException; overload;
    {class} function init(errorMessage: string; validatingAttribute: DNValidationAttribute; value: DDNC.System.Private.CoreLib.DNObject): DNValidationException; overload;
    {class} function init: DNValidationException; overload;
    {class} function init(message: string): DNValidationException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNValidationException; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.ValidationException')]
  DNValidationException = interface(DDNC.System.Private.CoreLib.DNException)
  ['{6C276107-5724-3F83-8C1A-9402AA2BBB4C}']
  { getters & setters } 

    function get_ValidationAttribute: DNValidationAttribute;
    function get_ValidationResult: DNValidationResult;
    function get_Value: DDNC.System.Private.CoreLib.DNObject;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ValidationAttribute: DNValidationAttribute read get_ValidationAttribute;
    property ValidationResult: DNValidationResult read get_ValidationResult;
    property Value: DDNC.System.Private.CoreLib.DNObject read get_Value;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNValidationException = class(TDNGenericImport<DNValidationExceptionClass, DNValidationException>) end;


implementation


initialization
  LoadAssemblyModule('System.ComponentModel.Annotations.dll', True, 'System.ComponentModel.Annotations, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a');

finalization

end.
