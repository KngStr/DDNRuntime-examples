//----------------------------------------------------------------------------
//  System.Runtime.Extensions.dll: System.Runtime.Extensions, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 2.1.30
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.Runtime.Extensions
//  Author: ying32
//----------------------------------------------------------------------------

{$IFNDEF DDNCSYSTEMRUNTIMEEXTENSIONS}
unit DDNC.System.Runtime.Extensions;
{$ENDIF}

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.System.Private.CoreLib,
  DDNC.System.Security.Principal;

type

{ enums }

  //-------------namespace: System----------------
  [DNTypeName('System.Environment+SpecialFolder')]
  DNEnvironment_SpecialFolder = type Integer;
  DNEnvironment_SpecialFolderHelper = record helper for DNEnvironment_SpecialFolder
  public const
    Desktop = 0;
    Programs = 2;
    MyDocuments = 5;
    Personal = 5;
    Favorites = 6;
    Startup = 7;
    Recent = 8;
    SendTo = 9;
    StartMenu = 11;
    MyMusic = 13;
    MyVideos = 14;
    DesktopDirectory = 16;
    MyComputer = 17;
    NetworkShortcuts = 19;
    Fonts = 20;
    Templates = 21;
    CommonStartMenu = 22;
    CommonPrograms = 23;
    CommonStartup = 24;
    CommonDesktopDirectory = 25;
    ApplicationData = 26;
    PrinterShortcuts = 27;
    LocalApplicationData = 28;
    InternetCache = 32;
    Cookies = 33;
    History = 34;
    CommonApplicationData = 35;
    Windows = 36;
    System = 37;
    ProgramFiles = 38;
    MyPictures = 39;
    UserProfile = 40;
    SystemX86 = 41;
    ProgramFilesX86 = 42;
    CommonProgramFiles = 43;
    CommonProgramFilesX86 = 44;
    CommonTemplates = 45;
    CommonDocuments = 46;
    CommonAdminTools = 47;
    AdminTools = 48;
    CommonMusic = 53;
    CommonPictures = 54;
    CommonVideos = 55;
    Resources = 56;
    LocalizedResources = 57;
    CommonOemLinks = 58;
    CDBurning = 59;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.Environment+SpecialFolderOption')]
  DNEnvironment_SpecialFolderOption = type Integer;
  DNEnvironment_SpecialFolderOptionHelper = record helper for DNEnvironment_SpecialFolderOption
  public const
    None = 0;
    DoNotVerify = 16384;
    Create = 32768;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.LoaderOptimization')]
  DNLoaderOptimization = type Integer;
  DNLoaderOptimizationHelper = record helper for DNLoaderOptimization
  public const
    NotSpecified = 0;
    SingleDomain = 1;
    MultiDomain = 2;
    DomainMask = 3;
    MultiDomainHost = 3;
    DisallowBindings = 4;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.PlatformID')]
  DNPlatformID = type Integer;
  DNPlatformIDHelper = record helper for DNPlatformID
  public const
    Win32S = 0;
    Win32Windows = 1;
    Win32NT = 2;
    WinCE = 3;
    Unix = 4;
    Xbox = 5;
    MacOSX = 6;
  end;


  //-------------namespace: System.Runtime.Versioning----------------
  [DNTypeName('System.Runtime.Versioning.ComponentGuaranteesOptions')]
  DNComponentGuaranteesOptions = type Integer;
  DNComponentGuaranteesOptionsHelper = record helper for DNComponentGuaranteesOptions
  public const
    None = 0;
    Exchange = 1;
    Stable = 2;
    SideBySide = 4;
  end;


  //-------------namespace: System.Runtime.Versioning----------------
  [DNTypeName('System.Runtime.Versioning.ResourceScope')]
  DNResourceScope = type Integer;
  DNResourceScopeHelper = record helper for DNResourceScope
  public const
    None = 0;
    Machine = 1;
    Process = 2;
    AppDomain = 4;
    Library_ = 8;
    Private_ = 16;
    Assembly = 32;
  end;


  //-------------namespace: System.Security.Permissions----------------
  [DNTypeName('System.Security.Permissions.SecurityAction')]
  DNSecurityAction = type Integer;
  DNSecurityActionHelper = record helper for DNSecurityAction
  public const
    Demand = 2;
    Assert = 3;
    Deny = 4;
    PermitOnly = 5;
    LinkDemand = 6;
    InheritanceDemand = 7;
    RequestMinimum = 8;
    RequestOptional = 9;
    RequestRefuse = 10;
  end;


  //-------------namespace: System.Security.Permissions----------------
  [DNTypeName('System.Security.Permissions.SecurityPermissionFlag')]
  DNSecurityPermissionFlag = type Integer;
  DNSecurityPermissionFlagHelper = record helper for DNSecurityPermissionFlag
  public const
    NoFlags = 0;
    Assertion = 1;
    UnmanagedCode = 2;
    SkipVerification = 4;
    Execution = 8;
    ControlThread = 16;
    ControlEvidence = 32;
    ControlPolicy = 64;
    SerializationFormatter = 128;
    ControlDomainPolicy = 256;
    ControlPrincipal = 512;
    ControlAppDomain = 1024;
    RemotingConfiguration = 2048;
    Infrastructure = 4096;
    BindingRedirects = 8192;
    AllFlags = 16383;
  end;




type


{ declares }

  DNIHashCodeProvider = interface; // type: System.Collections.IHashCodeProvider, namespace: System.Collections
  DNISecurityEncodable = interface; // type: System.Security.ISecurityEncodable, namespace: System.Security
  DNIPermission = interface; // type: System.Security.IPermission, namespace: System.Security
  DNApplicationId = interface; // type: System.ApplicationId, namespace: System
  DNContextStaticAttribute = interface; // type: System.ContextStaticAttribute, namespace: System
  DNLoaderOptimizationAttribute = interface; // type: System.LoaderOptimizationAttribute, namespace: System
  DNComponentGuaranteesAttribute = interface; // type: System.Runtime.Versioning.ComponentGuaranteesAttribute, namespace: System.Runtime.Versioning
  DNResourceConsumptionAttribute = interface; // type: System.Runtime.Versioning.ResourceConsumptionAttribute, namespace: System.Runtime.Versioning
  DNResourceExposureAttribute = interface; // type: System.Runtime.Versioning.ResourceExposureAttribute, namespace: System.Runtime.Versioning
  DNSecurityAttribute = interface; // type: System.Security.Permissions.SecurityAttribute, namespace: System.Security.Permissions
  DNCodeAccessSecurityAttribute = interface; // type: System.Security.Permissions.CodeAccessSecurityAttribute, namespace: System.Security.Permissions
  DNSecurityPermissionAttribute = interface; // type: System.Security.Permissions.SecurityPermissionAttribute, namespace: System.Security.Permissions
  DNArrayList = interface; // type: System.Collections.ArrayList, namespace: System.Collections
  DNHashtable = interface; // type: System.Collections.Hashtable, namespace: System.Collections
  DNStopwatch = interface; // type: System.Diagnostics.Stopwatch, namespace: System.Diagnostics
  DNEnvironment = interface; // type: System.Environment, namespace: System
  DNAppDomainUnloadedException = interface; // type: System.AppDomainUnloadedException, namespace: System
  DNCannotUnloadAppDomainException = interface; // type: System.CannotUnloadAppDomainException, namespace: System
  DNContextMarshalException = interface; // type: System.ContextMarshalException, namespace: System
  DNInvalidDataException = interface; // type: System.IO.InvalidDataException, namespace: System.IO
  DNAppDomain = interface; // type: System.AppDomain, namespace: System
  DNContextBoundObject = interface; // type: System.ContextBoundObject, namespace: System
  DNBufferedStream = interface; // type: System.IO.BufferedStream, namespace: System.IO
  DNStringReader = interface; // type: System.IO.StringReader, namespace: System.IO
  DNIndentedTextWriter = interface; // type: System.CodeDom.Compiler.IndentedTextWriter, namespace: System.CodeDom.Compiler
  DNStringWriter = interface; // type: System.IO.StringWriter, namespace: System.IO
  DNAssemblyNameProxy = interface; // type: System.Reflection.AssemblyNameProxy, namespace: System.Reflection
  DNWebUtility = interface; // type: System.Net.WebUtility, namespace: System.Net
  DNOperatingSystem = interface; // type: System.OperatingSystem, namespace: System
  DNFrameworkName = interface; // type: System.Runtime.Versioning.FrameworkName, namespace: System.Runtime.Versioning
  DNVersioningHelper = interface; // type: System.Runtime.Versioning.VersioningHelper, namespace: System.Runtime.Versioning
  DNSecurityElement = interface; // type: System.Security.SecurityElement, namespace: System.Security
  DNStringNormalizationExtensions = interface; // type: System.StringNormalizationExtensions, namespace: System


{ objects }

  //-------------namespace: System.Collections----------------
  [DNTypeName('System.Collections.IHashCodeProvider')]
  DNIHashCodeProvider = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{5D573036-3435-3C5A-AEFF-2B8191082C71}']
  { methods } 

    function GetHashCode(obj: DDNC.System.Private.CoreLib.DNObject): Int32;

  end;

  //-------------namespace: System.Security----------------
  [DNTypeName('System.Security.ISecurityEncodable')]
  DNISecurityEncodable = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{36EE480D-36EA-3056-8012-0B9901EBDDEE}']
  { methods } 

    procedure FromXml(e: DNSecurityElement);
    function ToXml: DNSecurityElement;

  end;

  //-------------namespace: System.Security----------------
  [DNTypeName('System.Security.IPermission')]
  DNIPermission = interface(DNISecurityEncodable)
  ['{4A1C8224-2CEB-3BC7-A599-9012F3F01BCA}']
  { methods } 

    function Copy: DNIPermission;
    procedure Demand;
    function Intersect(target: DNIPermission): DNIPermission;
    function IsSubsetOf(target: DNIPermission): Boolean;
    function Union(target: DNIPermission): DNIPermission;

  end;

  //-------------namespace: System----------------
  DNApplicationIdClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{8CD3D532-D28A-57CD-BF47-5BDF8F03B1C4}']
  { constructors } 

    {class} function init(publicKeyToken: TArray<Byte>; name: string; version: DDNC.System.Private.CoreLib.DNVersion; processorArchitecture: string; culture: string): DNApplicationId;

  end;

  [DNTypeName('System.ApplicationId')]
  DNApplicationId = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{05BB20AE-8F50-3AF0-8FED-F85D539DE33A}']
  { getters & setters } 

    function get_Culture: string;
    function get_Name: string;
    function get_ProcessorArchitecture: string;
    function get_Version: DDNC.System.Private.CoreLib.DNVersion;
    function get_PublicKeyToken: TArray<Byte>;

  { methods } 

    function Copy: DNApplicationId;
    function ToString: string;
    function Equals(o: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Culture: string read get_Culture;
    property Name: string read get_Name;
    property ProcessorArchitecture: string read get_ProcessorArchitecture;
    property Version: DDNC.System.Private.CoreLib.DNVersion read get_Version;
    property PublicKeyToken: TArray<Byte> read get_PublicKeyToken;
  end;

  TDNApplicationId = class(TDNGenericImport<DNApplicationIdClass, DNApplicationId>) end;

  //-------------namespace: System----------------
  DNContextStaticAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{F574ADBB-C77F-5ED2-A253-F6A1AE41AE2D}']
  { constructors } 

    {class} function init: DNContextStaticAttribute;

  end;

  [DNTypeName('System.ContextStaticAttribute')]
  DNContextStaticAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{6971241F-DC09-3CF1-8E91-6AA28685A9CE}']
  { getters & setters } 

    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNContextStaticAttribute = class(TDNGenericImport<DNContextStaticAttributeClass, DNContextStaticAttribute>) end;

  //-------------namespace: System----------------
  DNLoaderOptimizationAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{61A1E57D-AD14-5FA9-857D-1073B151A3F9}']
  { constructors } 

    {class} function init(value: Byte): DNLoaderOptimizationAttribute; overload;
    {class} function init(value: DNLoaderOptimization): DNLoaderOptimizationAttribute; overload;

  end;

  [DNTypeName('System.LoaderOptimizationAttribute')]
  DNLoaderOptimizationAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{AC7333FF-341A-37BD-9C09-89096CE83D8F}']
  { getters & setters } 

    function get_Value: DNLoaderOptimization;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Value: DNLoaderOptimization read get_Value;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNLoaderOptimizationAttribute = class(TDNGenericImport<DNLoaderOptimizationAttributeClass, DNLoaderOptimizationAttribute>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNComponentGuaranteesAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{0A5B85A6-6CE8-5771-9032-258FEA1E2B5B}']
  { constructors } 

    {class} function init(guarantees: DNComponentGuaranteesOptions): DNComponentGuaranteesAttribute;

  end;

  [DNTypeName('System.Runtime.Versioning.ComponentGuaranteesAttribute')]
  DNComponentGuaranteesAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{866D46E2-FDA4-380E-B02A-9FB55EF7D97A}']
  { getters & setters } 

    function get_Guarantees: DNComponentGuaranteesOptions;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Guarantees: DNComponentGuaranteesOptions read get_Guarantees;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNComponentGuaranteesAttribute = class(TDNGenericImport<DNComponentGuaranteesAttributeClass, DNComponentGuaranteesAttribute>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNResourceConsumptionAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{D376B5D2-274B-5295-A974-2A51DA24D5BC}']
  { constructors } 

    {class} function init(resourceScope: DNResourceScope): DNResourceConsumptionAttribute; overload;
    {class} function init(resourceScope: DNResourceScope; consumptionScope: DNResourceScope): DNResourceConsumptionAttribute; overload;

  end;

  [DNTypeName('System.Runtime.Versioning.ResourceConsumptionAttribute')]
  DNResourceConsumptionAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{F1A161EE-087F-379A-91D9-831CE781FF2B}']
  { getters & setters } 

    function get_ResourceScope: DNResourceScope;
    function get_ConsumptionScope: DNResourceScope;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property ResourceScope: DNResourceScope read get_ResourceScope;
    property ConsumptionScope: DNResourceScope read get_ConsumptionScope;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNResourceConsumptionAttribute = class(TDNGenericImport<DNResourceConsumptionAttributeClass, DNResourceConsumptionAttribute>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNResourceExposureAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{552B7AF2-8CE5-5A08-81AD-11913E1A62AD}']
  { constructors } 

    {class} function init(exposureLevel: DNResourceScope): DNResourceExposureAttribute;

  end;

  [DNTypeName('System.Runtime.Versioning.ResourceExposureAttribute')]
  DNResourceExposureAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{899905BA-D4D4-35FB-8290-C69491C67AC8}']
  { getters & setters } 

    function get_ResourceExposureLevel: DNResourceScope;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property ResourceExposureLevel: DNResourceScope read get_ResourceExposureLevel;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNResourceExposureAttribute = class(TDNGenericImport<DNResourceExposureAttributeClass, DNResourceExposureAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNSecurityAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{71DD7AE9-F09E-56E3-BC60-CD833901503A}']
  end;

  [DNTypeName('System.Security.Permissions.SecurityAttribute')]
  DNSecurityAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{7D3E88E5-A8C8-39D3-9110-4C816715DA37}']
  { getters & setters } 

    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function CreatePermission: DNIPermission;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNSecurityAttribute = class(TDNGenericImport<DNSecurityAttributeClass, DNSecurityAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNCodeAccessSecurityAttributeClass = interface(DNSecurityAttributeClass)
  ['{05CEAF32-ADC0-5A25-AB7F-D35FC3D3044B}']
  end;

  [DNTypeName('System.Security.Permissions.CodeAccessSecurityAttribute')]
  DNCodeAccessSecurityAttribute = interface(DNSecurityAttribute)
  ['{B2D3E439-1E40-3EF6-90FD-6CA45567DB80}']
  { getters & setters } 

    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function CreatePermission: DNIPermission;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNCodeAccessSecurityAttribute = class(TDNGenericImport<DNCodeAccessSecurityAttributeClass, DNCodeAccessSecurityAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNSecurityPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{A96EAE07-1368-5F26-A06B-17298D88B0EA}']
  { constructors } 

    {class} function init(action: DNSecurityAction): DNSecurityPermissionAttribute;

  end;

  [DNTypeName('System.Security.Permissions.SecurityPermissionAttribute')]
  DNSecurityPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{04D7664D-F1F9-3805-9E8C-3E29B2189143}']
  { getters & setters } 

    function get_Assertion: Boolean;
    procedure set_Assertion(value: Boolean);
    function get_BindingRedirects: Boolean;
    procedure set_BindingRedirects(value: Boolean);
    function get_ControlAppDomain: Boolean;
    procedure set_ControlAppDomain(value: Boolean);
    function get_ControlDomainPolicy: Boolean;
    procedure set_ControlDomainPolicy(value: Boolean);
    function get_ControlEvidence: Boolean;
    procedure set_ControlEvidence(value: Boolean);
    function get_ControlPolicy: Boolean;
    procedure set_ControlPolicy(value: Boolean);
    function get_ControlPrincipal: Boolean;
    procedure set_ControlPrincipal(value: Boolean);
    function get_ControlThread: Boolean;
    procedure set_ControlThread(value: Boolean);
    function get_Execution: Boolean;
    procedure set_Execution(value: Boolean);
    function get_Flags: DNSecurityPermissionFlag;
    procedure set_Flags(value: DNSecurityPermissionFlag);
    function get_Infrastructure: Boolean;
    procedure set_Infrastructure(value: Boolean);
    function get_RemotingConfiguration: Boolean;
    procedure set_RemotingConfiguration(value: Boolean);
    function get_SerializationFormatter: Boolean;
    procedure set_SerializationFormatter(value: Boolean);
    function get_SkipVerification: Boolean;
    procedure set_SkipVerification(value: Boolean);
    function get_UnmanagedCode: Boolean;
    procedure set_UnmanagedCode(value: Boolean);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function CreatePermission: DNIPermission;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Assertion: Boolean read get_Assertion write set_Assertion;
    property BindingRedirects: Boolean read get_BindingRedirects write set_BindingRedirects;
    property ControlAppDomain: Boolean read get_ControlAppDomain write set_ControlAppDomain;
    property ControlDomainPolicy: Boolean read get_ControlDomainPolicy write set_ControlDomainPolicy;
    property ControlEvidence: Boolean read get_ControlEvidence write set_ControlEvidence;
    property ControlPolicy: Boolean read get_ControlPolicy write set_ControlPolicy;
    property ControlPrincipal: Boolean read get_ControlPrincipal write set_ControlPrincipal;
    property ControlThread: Boolean read get_ControlThread write set_ControlThread;
    property Execution: Boolean read get_Execution write set_Execution;
    property Flags: DNSecurityPermissionFlag read get_Flags write set_Flags;
    property Infrastructure: Boolean read get_Infrastructure write set_Infrastructure;
    property RemotingConfiguration: Boolean read get_RemotingConfiguration write set_RemotingConfiguration;
    property SerializationFormatter: Boolean read get_SerializationFormatter write set_SerializationFormatter;
    property SkipVerification: Boolean read get_SkipVerification write set_SkipVerification;
    property UnmanagedCode: Boolean read get_UnmanagedCode write set_UnmanagedCode;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNSecurityPermissionAttribute = class(TDNGenericImport<DNSecurityPermissionAttributeClass, DNSecurityPermissionAttribute>) end;

  //-------------namespace: System.Collections----------------
  DNArrayListClass = interface(DNObjectClass)
  ['{CD579441-275F-5352-A592-152B78CD1931}']
  { constructors } 

    {class} function init: DNArrayList; overload;
    {class} function init(capacity: Int32): DNArrayList; overload;
    {class} function init(c: DDNC.System.Private.CoreLib.DNICollection): DNArrayList; overload;

  { static methods } 

    {class} function Adapter(list: DDNC.System.Private.CoreLib.DNIList): DNArrayList;
    {class} function FixedSize(list: DDNC.System.Private.CoreLib.DNIList): DDNC.System.Private.CoreLib.DNIList; overload;
    {class} function FixedSize(list: DNArrayList): DNArrayList; overload;
    {class} function ReadOnly(list: DDNC.System.Private.CoreLib.DNIList): DDNC.System.Private.CoreLib.DNIList; overload;
    {class} function ReadOnly(list: DNArrayList): DNArrayList; overload;
    {class} function &Repeat(value: DDNC.System.Private.CoreLib.DNObject; count: Int32): DNArrayList;
    {class} function Synchronized(list: DDNC.System.Private.CoreLib.DNIList): DDNC.System.Private.CoreLib.DNIList; overload;
    {class} function Synchronized(list: DNArrayList): DNArrayList; overload;

  end;

  [DNTypeName('System.Collections.ArrayList')]
  DNArrayList = interface(DDNC.System.Private.CoreLib.DNIList)
  ['{A7C6AA8E-BFEB-3B41-9C0B-24826904A84B}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDNC.System.Private.CoreLib.DNObject;
    function get_Item(index: Int32): DDNC.System.Private.CoreLib.DNObject;
    procedure set_Item(index: Int32; value: DDNC.System.Private.CoreLib.DNObject);

  { methods } 

    function Add(value: DDNC.System.Private.CoreLib.DNObject): Int32;
    procedure AddRange(c: DDNC.System.Private.CoreLib.DNICollection);
    function BinarySearch(index: Int32; count: Int32; value: DDNC.System.Private.CoreLib.DNObject; comparer: DDNC.System.Private.CoreLib.DNIComparer): Int32; overload;
    function BinarySearch(value: DDNC.System.Private.CoreLib.DNObject): Int32; overload;
    function BinarySearch(value: DDNC.System.Private.CoreLib.DNObject; comparer: DDNC.System.Private.CoreLib.DNIComparer): Int32; overload;
    procedure Clear;
    function Clone: DDNC.System.Private.CoreLib.DNObject;
    function &Contains(item: DDNC.System.Private.CoreLib.DNObject): Boolean;
    procedure CopyTo(&array: DDNC.System.Private.CoreLib.DNArray); overload;
    procedure CopyTo(&array: DDNC.System.Private.CoreLib.DNArray; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: DDNC.System.Private.CoreLib.DNArray; arrayIndex: Int32; count: Int32); overload;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator; overload;
    function GetEnumerator(index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNIEnumerator; overload;
    function IndexOf(value: DDNC.System.Private.CoreLib.DNObject): Int32; overload;
    function IndexOf(value: DDNC.System.Private.CoreLib.DNObject; startIndex: Int32): Int32; overload;
    function IndexOf(value: DDNC.System.Private.CoreLib.DNObject; startIndex: Int32; count: Int32): Int32; overload;
    procedure Insert(index: Int32; value: DDNC.System.Private.CoreLib.DNObject);
    procedure InsertRange(index: Int32; c: DDNC.System.Private.CoreLib.DNICollection);
    function LastIndexOf(value: DDNC.System.Private.CoreLib.DNObject): Int32; overload;
    function LastIndexOf(value: DDNC.System.Private.CoreLib.DNObject; startIndex: Int32): Int32; overload;
    function LastIndexOf(value: DDNC.System.Private.CoreLib.DNObject; startIndex: Int32; count: Int32): Int32; overload;
    procedure Remove(obj: DDNC.System.Private.CoreLib.DNObject);
    procedure RemoveAt(index: Int32);
    procedure RemoveRange(index: Int32; count: Int32);
    procedure Reverse; overload;
    procedure Reverse(index: Int32; count: Int32); overload;
    procedure SetRange(index: Int32; c: DDNC.System.Private.CoreLib.DNICollection);
    function GetRange(index: Int32; count: Int32): DNArrayList;
    procedure Sort; overload;
    procedure Sort(comparer: DDNC.System.Private.CoreLib.DNIComparer); overload;
    procedure Sort(index: Int32; count: Int32; comparer: DDNC.System.Private.CoreLib.DNIComparer); overload;
    function ToArray: TArray<DDNC.System.Private.CoreLib.DNObject>; overload;
    function ToArray(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNArray; overload;
    procedure TrimToSize;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDNC.System.Private.CoreLib.DNObject read get_SyncRoot;
    property Item[index: Int32]: DDNC.System.Private.CoreLib.DNObject read get_Item write set_Item; default;
  end;

  TDNArrayList = class(TDNGenericImport<DNArrayListClass, DNArrayList>) end;

  //-------------namespace: System.Collections----------------
  DNHashtableClass = interface(DNObjectClass)
  ['{D626B91B-55DA-5EAA-8E66-F0C1B9381B8E}']
  { constructors } 

    {class} function init: DNHashtable; overload;
    {class} function init(capacity: Int32): DNHashtable; overload;
    {class} function init(capacity: Int32; loadFactor: Single): DNHashtable; overload;
    {class} function init(capacity: Int32; loadFactor: Single; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer): DNHashtable; overload;
    {class} function init(hcp: DNIHashCodeProvider; comparer: DDNC.System.Private.CoreLib.DNIComparer): DNHashtable; overload;
    {class} function init(equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer): DNHashtable; overload;
    {class} function init(capacity: Int32; hcp: DNIHashCodeProvider; comparer: DDNC.System.Private.CoreLib.DNIComparer): DNHashtable; overload;
    {class} function init(capacity: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer): DNHashtable; overload;
    {class} function init(d: DDNC.System.Private.CoreLib.DNIDictionary): DNHashtable; overload;
    {class} function init(d: DDNC.System.Private.CoreLib.DNIDictionary; loadFactor: Single): DNHashtable; overload;
    {class} function init(d: DDNC.System.Private.CoreLib.DNIDictionary; hcp: DNIHashCodeProvider; comparer: DDNC.System.Private.CoreLib.DNIComparer): DNHashtable; overload;
    {class} function init(d: DDNC.System.Private.CoreLib.DNIDictionary; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer): DNHashtable; overload;
    {class} function init(capacity: Int32; loadFactor: Single; hcp: DNIHashCodeProvider; comparer: DDNC.System.Private.CoreLib.DNIComparer): DNHashtable; overload;
    {class} function init(d: DDNC.System.Private.CoreLib.DNIDictionary; loadFactor: Single; hcp: DNIHashCodeProvider; comparer: DDNC.System.Private.CoreLib.DNIComparer): DNHashtable; overload;
    {class} function init(d: DDNC.System.Private.CoreLib.DNIDictionary; loadFactor: Single; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer): DNHashtable; overload;

  { static methods } 

    {class} function Synchronized(table: DNHashtable): DNHashtable;

  end;

  [DNTypeName('System.Collections.Hashtable')]
  DNHashtable = interface(DDNC.System.Private.CoreLib.DNIDictionary)
  ['{6832C470-0AFB-3321-A47C-64BB4F04C728}']
  { getters & setters } 

    function get_Item(key: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject;
    procedure set_Item(key: DDNC.System.Private.CoreLib.DNObject; value: DDNC.System.Private.CoreLib.DNObject);
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_IsSynchronized: Boolean;
    function get_Keys: DDNC.System.Private.CoreLib.DNICollection;
    function get_Values: DDNC.System.Private.CoreLib.DNICollection;
    function get_SyncRoot: DDNC.System.Private.CoreLib.DNObject;
    function get_Count: Int32;

  { methods } 

    procedure Add(key: DDNC.System.Private.CoreLib.DNObject; value: DDNC.System.Private.CoreLib.DNObject);
    procedure Clear;
    function Clone: DDNC.System.Private.CoreLib.DNObject;
    function &Contains(key: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function ContainsKey(key: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function ContainsValue(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    procedure CopyTo(&array: DDNC.System.Private.CoreLib.DNArray; arrayIndex: Int32);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIDictionaryEnumerator;
    procedure Remove(key: DDNC.System.Private.CoreLib.DNObject);
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    procedure OnDeserialization(sender: DDNC.System.Private.CoreLib.DNObject);
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Item[key: DDNC.System.Private.CoreLib.DNObject]: DDNC.System.Private.CoreLib.DNObject read get_Item write set_Item; default;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Keys: DDNC.System.Private.CoreLib.DNICollection read get_Keys;
    property Values: DDNC.System.Private.CoreLib.DNICollection read get_Values;
    property SyncRoot: DDNC.System.Private.CoreLib.DNObject read get_SyncRoot;
    property Count: Int32 read get_Count;
  end;

  TDNHashtable = class(TDNGenericImport<DNHashtableClass, DNHashtable>) end;

  //-------------namespace: System.Diagnostics----------------
  DNStopwatchClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{4D2C92CD-789C-5832-9A1F-BF671043E835}']
  { constructors } 

    {class} function init: DNStopwatch;

  { static fields getter & setter } 

   function __fakeFieldGet_Frequency: Int64;
   function __fakeFieldGet_IsHighResolution: Boolean;

  { static fields } 

    {class} property Frequency: Int64 read __fakeFieldGet_Frequency;
    {class} property IsHighResolution: Boolean read __fakeFieldGet_IsHighResolution;

  { static methods } 

    {class} function StartNew: DNStopwatch;
    {class} function GetTimestamp: Int64;

  end;

  [DNTypeName('System.Diagnostics.Stopwatch')]
  DNStopwatch = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{1FE91714-312E-3D32-98F6-87617F9CAD7F}']
  { getters & setters } 

    function get_IsRunning: Boolean;
    function get_Elapsed: DDNC.System.Private.CoreLib.DNTimeSpan;
    function get_ElapsedMilliseconds: Int64;
    function get_ElapsedTicks: Int64;

  { methods } 

    procedure Start;
    procedure Stop;
    procedure Reset;
    procedure Restart;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsRunning: Boolean read get_IsRunning;
    property Elapsed: DDNC.System.Private.CoreLib.DNTimeSpan read get_Elapsed;
    property ElapsedMilliseconds: Int64 read get_ElapsedMilliseconds;
    property ElapsedTicks: Int64 read get_ElapsedTicks;
  end;

  TDNStopwatch = class(TDNGenericImport<DNStopwatchClass, DNStopwatch>) end;

  //-------------namespace: System----------------
  DNEnvironmentClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{61EDF811-1C79-5978-B626-B816A3511D6D}']
  { static getter & setter } 

    {class} function get_CommandLine: string;
    {class} function get_CurrentDirectory: string;
    {class} procedure set_CurrentDirectory(value: string);
    {class} function get_CurrentManagedThreadId: Int32;
    {class} function get_HasShutdownStarted: Boolean;
    {class} function get_Is64BitProcess: Boolean;
    {class} function get_Is64BitOperatingSystem: Boolean;
    {class} function get_OSVersion: DNOperatingSystem;
    {class} function get_ProcessorCount: Int32;
    {class} function get_StackTrace: string;
    {class} function get_TickCount: Int32;
    {class} function get_UserInteractive: Boolean;
    {class} function get_Version: DDNC.System.Private.CoreLib.DNVersion;
    {class} function get_WorkingSet: Int64;
    {class} function get_UserName: string;
    {class} function get_UserDomainName: string;
    {class} function get_NewLine: string;
    {class} function get_SystemPageSize: Int32;
    {class} function get_ExitCode: Int32;
    {class} procedure set_ExitCode(value: Int32);
    {class} function get_MachineName: string;
    {class} function get_SystemDirectory: string;

  { static methods } 

    {class} function GetEnvironmentVariable(variable: string): string; overload;
    {class} function GetEnvironmentVariable(variable: string; target: DDNC.System.Private.CoreLib.DNEnvironmentVariableTarget): string; overload;
    {class} function GetEnvironmentVariables: DDNC.System.Private.CoreLib.DNIDictionary; overload;
    {class} function GetEnvironmentVariables(target: DDNC.System.Private.CoreLib.DNEnvironmentVariableTarget): DDNC.System.Private.CoreLib.DNIDictionary; overload;
    {class} procedure SetEnvironmentVariable(variable: string; value: string); overload;
    {class} procedure SetEnvironmentVariable(variable: string; value: string; target: DDNC.System.Private.CoreLib.DNEnvironmentVariableTarget); overload;
    {class} procedure &Exit(exitCode: Int32);
    {class} procedure FailFast(message: string); overload;
    {class} procedure FailFast(message: string; exception: DDNC.System.Private.CoreLib.DNException); overload;
    {class} function ExpandEnvironmentVariables(name: string): string;
    {class} function GetCommandLineArgs: TArray<string>;
    {class} function GetFolderPath(folder: DNEnvironment_SpecialFolder): string; overload;
    {class} function GetFolderPath(folder: DNEnvironment_SpecialFolder; option: DNEnvironment_SpecialFolderOption): string; overload;
    {class} function GetLogicalDrives: TArray<string>;

  { static propertys } 

    {class} property CommandLine: string read get_CommandLine;
    {class} property CurrentDirectory: string read get_CurrentDirectory write set_CurrentDirectory;
    {class} property CurrentManagedThreadId: Int32 read get_CurrentManagedThreadId;
    {class} property HasShutdownStarted: Boolean read get_HasShutdownStarted;
    {class} property Is64BitProcess: Boolean read get_Is64BitProcess;
    {class} property Is64BitOperatingSystem: Boolean read get_Is64BitOperatingSystem;
    {class} property OSVersion: DNOperatingSystem read get_OSVersion;
    {class} property ProcessorCount: Int32 read get_ProcessorCount;
    {class} property StackTrace: string read get_StackTrace;
    {class} property TickCount: Int32 read get_TickCount;
    {class} property UserInteractive: Boolean read get_UserInteractive;
    {class} property Version: DDNC.System.Private.CoreLib.DNVersion read get_Version;
    {class} property WorkingSet: Int64 read get_WorkingSet;
    {class} property UserName: string read get_UserName;
    {class} property UserDomainName: string read get_UserDomainName;
    {class} property NewLine: string read get_NewLine;
    {class} property SystemPageSize: Int32 read get_SystemPageSize;
    {class} property ExitCode: Int32 read get_ExitCode write set_ExitCode;
    {class} property MachineName: string read get_MachineName;
    {class} property SystemDirectory: string read get_SystemDirectory;
  end;

  [DNTypeName('System.Environment')]
  DNEnvironment = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{7ACEC876-CF67-3888-BA26-60F972CAC5A4}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNEnvironment = class(TDNGenericImport<DNEnvironmentClass, DNEnvironment>) end;

  //-------------namespace: System----------------
  DNAppDomainUnloadedExceptionClass = interface(DDNC.System.Private.CoreLib.DNSystemExceptionClass)
  ['{6799E746-461B-52FC-A102-F3284990A917}']
  { constructors } 

    {class} function init: DNAppDomainUnloadedException; overload;
    {class} function init(message: string): DNAppDomainUnloadedException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNAppDomainUnloadedException; overload;

  end;

  [DNTypeName('System.AppDomainUnloadedException')]
  DNAppDomainUnloadedException = interface(DDNC.System.Private.CoreLib.DNSystemException)
  ['{F36BFAC0-2885-3ECF-9FA5-8F3A45B91DBB}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNAppDomainUnloadedException = class(TDNGenericImport<DNAppDomainUnloadedExceptionClass, DNAppDomainUnloadedException>) end;

  //-------------namespace: System----------------
  DNCannotUnloadAppDomainExceptionClass = interface(DDNC.System.Private.CoreLib.DNSystemExceptionClass)
  ['{647472DA-A370-5E4C-93EB-E028BEB12253}']
  { constructors } 

    {class} function init: DNCannotUnloadAppDomainException; overload;
    {class} function init(message: string): DNCannotUnloadAppDomainException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNCannotUnloadAppDomainException; overload;

  end;

  [DNTypeName('System.CannotUnloadAppDomainException')]
  DNCannotUnloadAppDomainException = interface(DDNC.System.Private.CoreLib.DNSystemException)
  ['{A9C9352C-7C66-3F40-893F-73A277C807A5}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCannotUnloadAppDomainException = class(TDNGenericImport<DNCannotUnloadAppDomainExceptionClass, DNCannotUnloadAppDomainException>) end;

  //-------------namespace: System----------------
  DNContextMarshalExceptionClass = interface(DDNC.System.Private.CoreLib.DNSystemExceptionClass)
  ['{42B7957F-4142-5A74-B7FB-E21D09BF6913}']
  { constructors } 

    {class} function init: DNContextMarshalException; overload;
    {class} function init(message: string): DNContextMarshalException; overload;
    {class} function init(message: string; inner: DDNC.System.Private.CoreLib.DNException): DNContextMarshalException; overload;

  end;

  [DNTypeName('System.ContextMarshalException')]
  DNContextMarshalException = interface(DDNC.System.Private.CoreLib.DNSystemException)
  ['{0404D5D3-0929-3F3D-8D0B-5BC405B6CEAA}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNContextMarshalException = class(TDNGenericImport<DNContextMarshalExceptionClass, DNContextMarshalException>) end;

  //-------------namespace: System.IO----------------
  DNInvalidDataExceptionClass = interface(DDNC.System.Private.CoreLib.DNSystemExceptionClass)
  ['{1347028E-1C34-521A-BD3E-D8560DE61188}']
  { constructors } 

    {class} function init: DNInvalidDataException; overload;
    {class} function init(message: string): DNInvalidDataException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNInvalidDataException; overload;

  end;

  [DNTypeName('System.IO.InvalidDataException')]
  DNInvalidDataException = interface(DDNC.System.Private.CoreLib.DNSystemException)
  ['{98E4D2A3-5592-3059-97B5-18D02C301C52}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidDataException = class(TDNGenericImport<DNInvalidDataExceptionClass, DNInvalidDataException>) end;

  //-------------namespace: System----------------
  DNAppDomainClass = interface(DDNC.System.Private.CoreLib.DNMarshalByRefObjectClass)
  ['{E84D84C8-9784-518D-848A-83DA77472FCB}']
  { static getter & setter } 

    {class} function get_CurrentDomain: DNAppDomain;
    {class} function get_MonitoringIsEnabled: Boolean;
    {class} procedure set_MonitoringIsEnabled(value: Boolean);
    {class} function get_MonitoringSurvivedProcessMemorySize: Int64;

  { static methods } 

    {class} function CreateDomain(friendlyName: string): DNAppDomain;
    {class} procedure Unload(domain: DNAppDomain);
    {class} function GetCurrentThreadId: Int32;

  { static propertys } 

    {class} property CurrentDomain: DNAppDomain read get_CurrentDomain;
    {class} property MonitoringIsEnabled: Boolean read get_MonitoringIsEnabled write set_MonitoringIsEnabled;
    {class} property MonitoringSurvivedProcessMemorySize: Int64 read get_MonitoringSurvivedProcessMemorySize;
  end;

  [DNTypeName('System.AppDomain')]
  DNAppDomain = interface(DDNC.System.Private.CoreLib.DNMarshalByRefObject)
  ['{43688372-8187-388E-84F9-3343E8FEC835}']
  { getters & setters } 

    function get_BaseDirectory: string;
    function get_RelativeSearchPath: string;
    function get_DynamicDirectory: string;
    function get_FriendlyName: string;
    function get_Id: Int32;
    function get_IsFullyTrusted: Boolean;
    function get_IsHomogenous: Boolean;
    function get_MonitoringSurvivedMemorySize: Int64;
    function get_MonitoringTotalAllocatedMemorySize: Int64;
    function get_MonitoringTotalProcessorTime: DDNC.System.Private.CoreLib.DNTimeSpan;
    function get_ShadowCopyFiles: Boolean;

  { events } 

    procedure add_UnhandledException(value: DDNC.System.Private.CoreLib.DNUnhandledExceptionEventHandler);
    procedure remove_UnhandledException(value: DDNC.System.Private.CoreLib.DNUnhandledExceptionEventHandler);
    procedure add_DomainUnload(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_DomainUnload(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure add_FirstChanceException(value: DDNC.System.Private.CoreLib.DNEventHandler<DDNC.System.Private.CoreLib.DNFirstChanceExceptionEventArgs>);
    procedure remove_FirstChanceException(value: DDNC.System.Private.CoreLib.DNEventHandler<DDNC.System.Private.CoreLib.DNFirstChanceExceptionEventArgs>);
    procedure add_ProcessExit(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_ProcessExit(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure add_AssemblyLoad(value: DDNC.System.Private.CoreLib.DNAssemblyLoadEventHandler);
    procedure remove_AssemblyLoad(value: DDNC.System.Private.CoreLib.DNAssemblyLoadEventHandler);
    procedure add_AssemblyResolve(value: DDNC.System.Private.CoreLib.DNResolveEventHandler);
    procedure remove_AssemblyResolve(value: DDNC.System.Private.CoreLib.DNResolveEventHandler);
    procedure add_ReflectionOnlyAssemblyResolve(value: DDNC.System.Private.CoreLib.DNResolveEventHandler);
    procedure remove_ReflectionOnlyAssemblyResolve(value: DDNC.System.Private.CoreLib.DNResolveEventHandler);
    procedure add_TypeResolve(value: DDNC.System.Private.CoreLib.DNResolveEventHandler);
    procedure remove_TypeResolve(value: DDNC.System.Private.CoreLib.DNResolveEventHandler);
    procedure add_ResourceResolve(value: DDNC.System.Private.CoreLib.DNResolveEventHandler);
    procedure remove_ResourceResolve(value: DDNC.System.Private.CoreLib.DNResolveEventHandler);

  { methods } 

    procedure SetDynamicBase(path: string);
    function ApplyPolicy(assemblyName: string): string;
    function ExecuteAssembly(assemblyFile: string): Int32; overload;
    function ExecuteAssembly(assemblyFile: string; args: TArray<string>): Int32; overload;
    function ExecuteAssembly(assemblyFile: string; args: TArray<string>; hashValue: TArray<Byte>; hashAlgorithm: DDNC.System.Private.CoreLib.DNAssemblyHashAlgorithm): Int32; overload;
    function ExecuteAssemblyByName(assemblyName: DDNC.System.Private.CoreLib.DNAssemblyName; args: TArray<string>): Int32; overload;
    function ExecuteAssemblyByName(assemblyName: string): Int32; overload;
    function ExecuteAssemblyByName(assemblyName: string; args: TArray<string>): Int32; overload;
    function GetData(name: string): DDNC.System.Private.CoreLib.DNObject;
    procedure SetData(name: string; data: DDNC.System.Private.CoreLib.DNObject);
    function IsCompatibilitySwitchSet(value: string): DDNC.System.Private.CoreLib.DNNullable<Boolean>;
    function IsDefaultAppDomain: Boolean;
    function IsFinalizingForUnload: Boolean;
    function ToString: string;
    function Load(rawAssembly: TArray<Byte>): DDNC.System.Private.CoreLib.DNAssembly; overload;
    function Load(rawAssembly: TArray<Byte>; rawSymbolStore: TArray<Byte>): DDNC.System.Private.CoreLib.DNAssembly; overload;
    function Load(assemblyRef: DDNC.System.Private.CoreLib.DNAssemblyName): DDNC.System.Private.CoreLib.DNAssembly; overload;
    function Load(assemblyString: string): DDNC.System.Private.CoreLib.DNAssembly; overload;
    function ReflectionOnlyGetAssemblies: TArray<DDNC.System.Private.CoreLib.DNAssembly>;
    procedure AppendPrivatePath(path: string);
    procedure ClearPrivatePath;
    procedure ClearShadowCopyPath;
    procedure SetCachePath(path: string);
    procedure SetShadowCopyFiles;
    procedure SetShadowCopyPath(path: string);
    function GetAssemblies: TArray<DDNC.System.Private.CoreLib.DNAssembly>;
    procedure SetPrincipalPolicy(policy: DDNC.System.Security.Principal.DNPrincipalPolicy);
    procedure SetThreadPrincipal(principal: DDNC.System.Security.Principal.DNIPrincipal);
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property BaseDirectory: string read get_BaseDirectory;
    property RelativeSearchPath: string read get_RelativeSearchPath;
    property DynamicDirectory: string read get_DynamicDirectory;
    property FriendlyName: string read get_FriendlyName;
    property Id: Int32 read get_Id;
    property IsFullyTrusted: Boolean read get_IsFullyTrusted;
    property IsHomogenous: Boolean read get_IsHomogenous;
    property MonitoringSurvivedMemorySize: Int64 read get_MonitoringSurvivedMemorySize;
    property MonitoringTotalAllocatedMemorySize: Int64 read get_MonitoringTotalAllocatedMemorySize;
    property MonitoringTotalProcessorTime: DDNC.System.Private.CoreLib.DNTimeSpan read get_MonitoringTotalProcessorTime;
    property ShadowCopyFiles: Boolean read get_ShadowCopyFiles;
  end;

  TDNAppDomain = class(TDNGenericImport<DNAppDomainClass, DNAppDomain>) end;

  //-------------namespace: System----------------
  DNContextBoundObjectClass = interface(DDNC.System.Private.CoreLib.DNMarshalByRefObjectClass)
  ['{C3AE34F8-9219-5A07-869B-B55737A4F078}']
  end;

  [DNTypeName('System.ContextBoundObject')]
  DNContextBoundObject = interface(DDNC.System.Private.CoreLib.DNMarshalByRefObject)
  ['{E8ED7139-7FA9-3C37-83A4-4EEF31935366}']
  { methods } 

    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNContextBoundObject = class(TDNGenericImport<DNContextBoundObjectClass, DNContextBoundObject>) end;

  //-------------namespace: System.IO----------------
  DNBufferedStreamClass = interface(DDNC.System.Private.CoreLib.DNStreamClass)
  ['{8ACAF4A5-090E-5131-AE03-80A6DF94E280}']
  { constructors } 

    {class} function init(stream: DDNC.System.Private.CoreLib.DNStream): DNBufferedStream; overload;
    {class} function init(stream: DDNC.System.Private.CoreLib.DNStream; bufferSize: Int32): DNBufferedStream; overload;

  end;

  [DNTypeName('System.IO.BufferedStream')]
  DNBufferedStream = interface(DDNC.System.Private.CoreLib.DNStream)
  ['{D8E04296-3A7C-36BA-9B4D-C5303CD564E8}']
  { getters & setters } 

    function get_UnderlyingStream: DDNC.System.Private.CoreLib.DNStream;
    function get_BufferSize: Int32;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_CanSeek: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    procedure Flush;
    function FlushAsync(cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    function Read(&array: TArray<Byte>; offset: Int32; count: Int32): Int32; overload;
    function Read(destination: DDNC.System.Private.CoreLib.DNSpan<Byte>): Int32; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask<Int32>; overload;
    function ReadAsync(buffer: DDNC.System.Private.CoreLib.DNMemory<Byte>; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNValueTask<Int32>; overload;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDNC.System.Private.CoreLib.DNAsyncCallback; state: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNIAsyncResult;
    function EndRead(asyncResult: DDNC.System.Private.CoreLib.DNIAsyncResult): Int32;
    function ReadByte: Int32;
    procedure Write(&array: TArray<Byte>; offset: Int32; count: Int32); overload;
    procedure Write(buffer: DDNC.System.Private.CoreLib.DNReadOnlySpan<Byte>); overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteAsync(buffer: DDNC.System.Private.CoreLib.DNReadOnlyMemory<Byte>; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNValueTask; overload;
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDNC.System.Private.CoreLib.DNAsyncCallback; state: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNIAsyncResult;
    procedure EndWrite(asyncResult: DDNC.System.Private.CoreLib.DNIAsyncResult);
    procedure WriteByte(value: Byte);
    function Seek(offset: Int64; origin: DDNC.System.Private.CoreLib.DNSeekOrigin): Int64;
    procedure SetLength(value: Int64);
    procedure CopyTo(destination: DDNC.System.Private.CoreLib.DNStream; bufferSize: Int32); overload;
    function CopyToAsync(destination: DDNC.System.Private.CoreLib.DNStream; bufferSize: Int32; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    function CopyToAsync(destination: DDNC.System.Private.CoreLib.DNStream): DDNC.System.Private.CoreLib.DNTask; overload;
    function CopyToAsync(destination: DDNC.System.Private.CoreLib.DNStream; bufferSize: Int32): DDNC.System.Private.CoreLib.DNTask; overload;
    function CopyToAsync(destination: DDNC.System.Private.CoreLib.DNStream; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    procedure CopyTo(destination: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure Close;
    procedure Dispose;
    function FlushAsync: DDNC.System.Private.CoreLib.DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask; overload;
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property UnderlyingStream: DDNC.System.Private.CoreLib.DNStream read get_UnderlyingStream;
    property BufferSize: Int32 read get_BufferSize;
    property CanRead: Boolean read get_CanRead;
    property CanWrite: Boolean read get_CanWrite;
    property CanSeek: Boolean read get_CanSeek;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position write set_Position;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNBufferedStream = class(TDNGenericImport<DNBufferedStreamClass, DNBufferedStream>) end;

  //-------------namespace: System.IO----------------
  DNStringReaderClass = interface(DDNC.System.Private.CoreLib.DNTextReaderClass)
  ['{39DC6EF2-C555-584E-8816-B17D6AE544EC}']
  { constructors } 

    {class} function init(s: string): DNStringReader;

  end;

  [DNTypeName('System.IO.StringReader')]
  DNStringReader = interface(DDNC.System.Private.CoreLib.DNTextReader)
  ['{2F921D74-66AC-3B12-ADB5-9A6BD1393D44}']
  { methods } 

    procedure Close;
    function Peek: Int32;
    function Read: Int32; overload;
    function Read(buffer: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function Read(buffer: DDNC.System.Private.CoreLib.DNSpan<Char>): Int32; overload;
    function ReadBlock(buffer: DDNC.System.Private.CoreLib.DNSpan<Char>): Int32; overload;
    function ReadToEnd: string;
    function ReadLine: string;
    function ReadLineAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadToEndAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadBlockAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>; overload;
    function ReadBlockAsync(buffer: DDNC.System.Private.CoreLib.DNMemory<Char>; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNValueTask<Int32>; overload;
    function ReadAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>; overload;
    function ReadAsync(buffer: DDNC.System.Private.CoreLib.DNMemory<Char>; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNValueTask<Int32>; overload;
    procedure Dispose;
    function ReadBlock(buffer: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNStringReader = class(TDNGenericImport<DNStringReaderClass, DNStringReader>) end;

  //-------------namespace: System.CodeDom.Compiler----------------
  DNIndentedTextWriterClass = interface(DDNC.System.Private.CoreLib.DNTextWriterClass)
  ['{682DFF1F-3596-54B7-8E70-9D2F5C6F18DD}']
  { constructors } 

    {class} function init(writer: DDNC.System.Private.CoreLib.DNTextWriter): DNIndentedTextWriter; overload;
    {class} function init(writer: DDNC.System.Private.CoreLib.DNTextWriter; tabString: string): DNIndentedTextWriter; overload;

  end;

  [DNTypeName('System.CodeDom.Compiler.IndentedTextWriter')]
  DNIndentedTextWriter = interface(DDNC.System.Private.CoreLib.DNTextWriter)
  ['{D3636DA4-DB13-3FAF-A5EF-E582DAF649ED}']
  { getters & setters } 

    function get_Encoding: DDNC.System.Private.CoreLib.DNEncoding;
    function get_NewLine: string;
    procedure set_NewLine(value: string);
    function get_Indent: Int32;
    procedure set_Indent(value: Int32);
    function get_InnerWriter: DDNC.System.Private.CoreLib.DNTextWriter;
    function get_FormatProvider: DDNC.System.Private.CoreLib.DNIFormatProvider;

  { methods } 

    procedure Close;
    procedure Flush;
    procedure Write(s: string); overload;
    procedure Write(value: Boolean); overload;
    procedure Write(value: Char); overload;
    procedure Write(buffer: TArray<Char>); overload;
    procedure Write(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure Write(value: Double); overload;
    procedure Write(value: Single); overload;
    procedure Write(value: Int32); overload;
    procedure Write(value: Int64); overload;
    procedure Write(value: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Write(format: string; arg0: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Write(format: string; arg0: DDNC.System.Private.CoreLib.DNObject; arg1: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Write(format: string; arg: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    procedure WriteLineNoTabs(s: string);
    procedure WriteLine(s: string); overload;
    procedure WriteLine; overload;
    procedure WriteLine(value: Boolean); overload;
    procedure WriteLine(value: Char); overload;
    procedure WriteLine(buffer: TArray<Char>); overload;
    procedure WriteLine(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteLine(value: Double); overload;
    procedure WriteLine(value: Single); overload;
    procedure WriteLine(value: Int32); overload;
    procedure WriteLine(value: Int64); overload;
    procedure WriteLine(value: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure WriteLine(format: string; arg0: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure WriteLine(format: string; arg0: DDNC.System.Private.CoreLib.DNObject; arg1: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure WriteLine(format: string; arg: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    procedure WriteLine(value: UInt32); overload;
    procedure Dispose;
    procedure Write(buffer: DDNC.System.Private.CoreLib.DNReadOnlySpan<Char>); overload;
    procedure Write(value: UInt32); overload;
    procedure Write(value: UInt64); overload;
    procedure Write(value: DDNC.System.Private.CoreLib.DNDecimal); overload;
    procedure Write(format: string; arg0: DDNC.System.Private.CoreLib.DNObject; arg1: DDNC.System.Private.CoreLib.DNObject; arg2: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure WriteLine(buffer: DDNC.System.Private.CoreLib.DNReadOnlySpan<Char>); overload;
    procedure WriteLine(value: UInt64); overload;
    procedure WriteLine(value: DDNC.System.Private.CoreLib.DNDecimal); overload;
    procedure WriteLine(format: string; arg0: DDNC.System.Private.CoreLib.DNObject; arg1: DDNC.System.Private.CoreLib.DNObject; arg2: DDNC.System.Private.CoreLib.DNObject); overload;
    function WriteAsync(value: Char): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteAsync(value: string): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteAsync(buffer: TArray<Char>): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteAsync(buffer: DDNC.System.Private.CoreLib.DNReadOnlyMemory<Char>; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteLineAsync(value: Char): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteLineAsync(value: string): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteLineAsync(buffer: DDNC.System.Private.CoreLib.DNReadOnlyMemory<Char>; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteLineAsync: DDNC.System.Private.CoreLib.DNTask; overload;
    function FlushAsync: DDNC.System.Private.CoreLib.DNTask;
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Encoding: DDNC.System.Private.CoreLib.DNEncoding read get_Encoding;
    property NewLine: string read get_NewLine write set_NewLine;
    property Indent: Int32 read get_Indent write set_Indent;
    property InnerWriter: DDNC.System.Private.CoreLib.DNTextWriter read get_InnerWriter;
    property FormatProvider: DDNC.System.Private.CoreLib.DNIFormatProvider read get_FormatProvider;
  end;

  TDNIndentedTextWriter = class(TDNGenericImport<DNIndentedTextWriterClass, DNIndentedTextWriter>)
  public const
   DefaultTabString = '    ';
  end;

  //-------------namespace: System.IO----------------
  DNStringWriterClass = interface(DDNC.System.Private.CoreLib.DNTextWriterClass)
  ['{AF07A3FE-DB9D-50D6-B651-85F0135AB696}']
  { constructors } 

    {class} function init: DNStringWriter; overload;
    {class} function init(formatProvider: DDNC.System.Private.CoreLib.DNIFormatProvider): DNStringWriter; overload;
    {class} function init(sb: DDNC.System.Private.CoreLib.DNStringBuilder): DNStringWriter; overload;
    {class} function init(sb: DDNC.System.Private.CoreLib.DNStringBuilder; formatProvider: DDNC.System.Private.CoreLib.DNIFormatProvider): DNStringWriter; overload;

  end;

  [DNTypeName('System.IO.StringWriter')]
  DNStringWriter = interface(DDNC.System.Private.CoreLib.DNTextWriter)
  ['{CC34205B-A57D-30B7-B921-F894E295B2EC}']
  { getters & setters } 

    function get_Encoding: DDNC.System.Private.CoreLib.DNEncoding;
    function get_FormatProvider: DDNC.System.Private.CoreLib.DNIFormatProvider;
    function get_NewLine: string;
    procedure set_NewLine(value: string);

  { methods } 

    procedure Close;
    function GetStringBuilder: DDNC.System.Private.CoreLib.DNStringBuilder;
    procedure Write(value: Char); overload;
    procedure Write(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure Write(buffer: DDNC.System.Private.CoreLib.DNReadOnlySpan<Char>); overload;
    procedure Write(value: string); overload;
    procedure WriteLine(buffer: DDNC.System.Private.CoreLib.DNReadOnlySpan<Char>); overload;
    function WriteAsync(value: Char): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteAsync(value: string): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteAsync(buffer: DDNC.System.Private.CoreLib.DNReadOnlyMemory<Char>; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteLineAsync(value: Char): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteLineAsync(value: string): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteLineAsync(buffer: DDNC.System.Private.CoreLib.DNReadOnlyMemory<Char>; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    function FlushAsync: DDNC.System.Private.CoreLib.DNTask;
    function ToString: string;
    procedure Dispose;
    procedure Flush;
    procedure Write(buffer: TArray<Char>); overload;
    procedure Write(value: Boolean); overload;
    procedure Write(value: Int32); overload;
    procedure Write(value: UInt32); overload;
    procedure Write(value: Int64); overload;
    procedure Write(value: UInt64); overload;
    procedure Write(value: Single); overload;
    procedure Write(value: Double); overload;
    procedure Write(value: DDNC.System.Private.CoreLib.DNDecimal); overload;
    procedure Write(value: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Write(format: string; arg0: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Write(format: string; arg0: DDNC.System.Private.CoreLib.DNObject; arg1: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Write(format: string; arg0: DDNC.System.Private.CoreLib.DNObject; arg1: DDNC.System.Private.CoreLib.DNObject; arg2: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Write(format: string; arg: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    procedure WriteLine; overload;
    procedure WriteLine(value: Char); overload;
    procedure WriteLine(buffer: TArray<Char>); overload;
    procedure WriteLine(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteLine(value: Boolean); overload;
    procedure WriteLine(value: Int32); overload;
    procedure WriteLine(value: UInt32); overload;
    procedure WriteLine(value: Int64); overload;
    procedure WriteLine(value: UInt64); overload;
    procedure WriteLine(value: Single); overload;
    procedure WriteLine(value: Double); overload;
    procedure WriteLine(value: DDNC.System.Private.CoreLib.DNDecimal); overload;
    procedure WriteLine(value: string); overload;
    procedure WriteLine(value: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure WriteLine(format: string; arg0: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure WriteLine(format: string; arg0: DDNC.System.Private.CoreLib.DNObject; arg1: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure WriteLine(format: string; arg0: DDNC.System.Private.CoreLib.DNObject; arg1: DDNC.System.Private.CoreLib.DNObject; arg2: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure WriteLine(format: string; arg: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    function WriteAsync(buffer: TArray<Char>): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteLineAsync: DDNC.System.Private.CoreLib.DNTask; overload;
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Encoding: DDNC.System.Private.CoreLib.DNEncoding read get_Encoding;
    property FormatProvider: DDNC.System.Private.CoreLib.DNIFormatProvider read get_FormatProvider;
    property NewLine: string read get_NewLine write set_NewLine;
  end;

  TDNStringWriter = class(TDNGenericImport<DNStringWriterClass, DNStringWriter>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyNameProxyClass = interface(DDNC.System.Private.CoreLib.DNMarshalByRefObjectClass)
  ['{512E064D-CFC8-5100-A36F-126FE5437D03}']
  { constructors } 

    {class} function init: DNAssemblyNameProxy;

  end;

  [DNTypeName('System.Reflection.AssemblyNameProxy')]
  DNAssemblyNameProxy = interface(DDNC.System.Private.CoreLib.DNMarshalByRefObject)
  ['{86FB79F1-AFAE-3B74-85FF-9C34C94FE9C2}']
  { methods } 

    function GetAssemblyName(assemblyFile: string): DDNC.System.Private.CoreLib.DNAssemblyName;
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNAssemblyNameProxy = class(TDNGenericImport<DNAssemblyNameProxyClass, DNAssemblyNameProxy>) end;

  //-------------namespace: System.Net----------------
  DNWebUtilityClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{352F0D80-1E9F-5797-A482-FF8CD915A463}']
  { static methods } 

    {class} function HtmlEncode(value: string): string; overload;
    {class} procedure HtmlEncode(value: string; output: DDNC.System.Private.CoreLib.DNTextWriter); overload;
    {class} function HtmlDecode(value: string): string; overload;
    {class} procedure HtmlDecode(value: string; output: DDNC.System.Private.CoreLib.DNTextWriter); overload;
    {class} function UrlEncode(value: string): string;
    {class} function UrlEncodeToBytes(value: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>;
    {class} function UrlDecode(encodedValue: string): string;
    {class} function UrlDecodeToBytes(encodedValue: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>;

  end;

  [DNTypeName('System.Net.WebUtility')]
  DNWebUtility = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{3136B232-6361-342A-BE2B-E375742E6F06}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNWebUtility = class(TDNGenericImport<DNWebUtilityClass, DNWebUtility>) end;

  //-------------namespace: System----------------
  DNOperatingSystemClass = interface(DNObjectClass)
  ['{D37AA4AF-6E3F-5C85-A612-0A065647A720}']
  { constructors } 

    {class} function init(platform: DNPlatformID; version: DDNC.System.Private.CoreLib.DNVersion): DNOperatingSystem;

  end;

  [DNTypeName('System.OperatingSystem')]
  DNOperatingSystem = interface(DDNC.System.Private.CoreLib.DNISerializable)
  ['{774B595E-703E-3B33-9238-09F1DF7DF4E0}']
  { getters & setters } 

    function get_Platform: DNPlatformID;
    function get_ServicePack: string;
    function get_Version: DDNC.System.Private.CoreLib.DNVersion;
    function get_VersionString: string;

  { methods } 

    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function Clone: DDNC.System.Private.CoreLib.DNObject;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Platform: DNPlatformID read get_Platform;
    property ServicePack: string read get_ServicePack;
    property Version: DDNC.System.Private.CoreLib.DNVersion read get_Version;
    property VersionString: string read get_VersionString;
  end;

  TDNOperatingSystem = class(TDNGenericImport<DNOperatingSystemClass, DNOperatingSystem>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNFrameworkNameClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{7E178F49-E6B3-5BAE-BFCA-5124EEB03AD2}']
  { constructors } 

    {class} function init(identifier: string; version: DDNC.System.Private.CoreLib.DNVersion): DNFrameworkName; overload;
    {class} function init(identifier: string; version: DDNC.System.Private.CoreLib.DNVersion; profile: string): DNFrameworkName; overload;
    {class} function init(frameworkName: string): DNFrameworkName; overload;

  end;

  [DNTypeName('System.Runtime.Versioning.FrameworkName')]
  DNFrameworkName = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{71048FAF-F2C6-328D-BE96-023759CE612E}']
  { getters & setters } 

    function get_Identifier: string;
    function get_Version: DDNC.System.Private.CoreLib.DNVersion;
    function get_Profile: string;
    function get_FullName: string;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNFrameworkName): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Identifier: string read get_Identifier;
    property Version: DDNC.System.Private.CoreLib.DNVersion read get_Version;
    property Profile: string read get_Profile;
    property FullName: string read get_FullName;
  end;

  TDNFrameworkName = class(TDNGenericImport<DNFrameworkNameClass, DNFrameworkName>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNVersioningHelperClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{31ED0EAD-4ACB-5988-97E8-BD417D0595C6}']
  { static methods } 

    {class} function MakeVersionSafeName(name: string; from: DNResourceScope; &to: DNResourceScope): string; overload;
    {class} function MakeVersionSafeName(name: string; from: DNResourceScope; &to: DNResourceScope; &type: DDNC.System.Private.CoreLib.DNType): string; overload;

  end;

  [DNTypeName('System.Runtime.Versioning.VersioningHelper')]
  DNVersioningHelper = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{D6951269-72AD-3E49-9552-7F94EB3D74D9}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNVersioningHelper = class(TDNGenericImport<DNVersioningHelperClass, DNVersioningHelper>) end;

  //-------------namespace: System.Security----------------
  DNSecurityElementClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{56825672-13DF-5889-B96B-AB7B7A601093}']
  { constructors } 

    {class} function init(tag: string): DNSecurityElement; overload;
    {class} function init(tag: string; text: string): DNSecurityElement; overload;

  { static methods } 

    {class} function IsValidTag(tag: string): Boolean;
    {class} function IsValidText(text: string): Boolean;
    {class} function IsValidAttributeName(name: string): Boolean;
    {class} function IsValidAttributeValue(value: string): Boolean;
    {class} function Escape(str: string): string;
    {class} function FromString(xml: string): DNSecurityElement;

  end;

  [DNTypeName('System.Security.SecurityElement')]
  DNSecurityElement = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{2F2991DE-59C5-3B96-BA0F-2F353A7A8DEF}']
  { getters & setters } 

    function get_Tag: string;
    procedure set_Tag(value: string);
    function get_Attributes: DNHashtable;
    procedure set_Attributes(value: DNHashtable);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_Children: DNArrayList;
    procedure set_Children(value: DNArrayList);

  { methods } 

    procedure AddAttribute(name: string; value: string);
    procedure AddChild(child: DNSecurityElement);
    function Equal(other: DNSecurityElement): Boolean;
    function Copy: DNSecurityElement;
    function ToString: string;
    function Attribute(name: string): string;
    function SearchForChildByTag(tag: string): DNSecurityElement;
    function SearchForTextOfTag(tag: string): string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Tag: string read get_Tag write set_Tag;
    property Attributes: DNHashtable read get_Attributes write set_Attributes;
    property Text: string read get_Text write set_Text;
    property Children: DNArrayList read get_Children write set_Children;
  end;

  TDNSecurityElement = class(TDNGenericImport<DNSecurityElementClass, DNSecurityElement>) end;

  //-------------namespace: System----------------
  DNStringNormalizationExtensionsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{36C22D78-4424-5EAD-94C8-688EE4629ADA}']
  { static methods } 

    {class} function IsNormalized(strInput: string): Boolean; overload;
    {class} function IsNormalized(strInput: string; normalizationForm: DDNC.System.Private.CoreLib.DNNormalizationForm): Boolean; overload;
    {class} function Normalize(strInput: string): string; overload;
    {class} function Normalize(strInput: string; normalizationForm: DDNC.System.Private.CoreLib.DNNormalizationForm): string; overload;

  end;

  [DNTypeName('System.StringNormalizationExtensions')]
  DNStringNormalizationExtensions = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{13943D2B-90D0-3887-A9E8-44C96DF45EAB}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNStringNormalizationExtensions = class(TDNGenericImport<DNStringNormalizationExtensionsClass, DNStringNormalizationExtensions>) end;


implementation


initialization
  LoadAssemblyModule('System.Runtime.Extensions.dll', True);

finalization

end.
