//----------------------------------------------------------------------------
//  System.EnterpriseServices.dll: System.EnterpriseServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework 4.x
//----------------------------------------------------------------------------
//  UnitName: DDN.System.EnterpriseServices
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.EnterpriseServices;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System.Transactions;

type

{ enums }

  //-------------namespace: System.EnterpriseServices----------------
  [DNTypeName('System.EnterpriseServices.AccessChecksLevelOption')]
  DNAccessChecksLevelOption = type Integer;
  DNAccessChecksLevelOptionHelper = record helper for DNAccessChecksLevelOption
  public const
    Application = 0;
    ApplicationComponent = 1;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  [DNTypeName('System.EnterpriseServices.ActivationOption')]
  DNActivationOption = type Integer;
  DNActivationOptionHelper = record helper for DNActivationOption
  public const
    Library_ = 0;
    Server = 1;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  [DNTypeName('System.EnterpriseServices.AuthenticationOption')]
  DNAuthenticationOption = type Integer;
  DNAuthenticationOptionHelper = record helper for DNAuthenticationOption
  public const
    Default_ = 0;
    None = 1;
    Connect = 2;
    Call = 3;
    Packet = 4;
    Integrity = 5;
    Privacy = 6;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  [DNTypeName('System.EnterpriseServices.BindingOption')]
  DNBindingOption = type Integer;
  DNBindingOptionHelper = record helper for DNBindingOption
  public const
    NoBinding = 0;
    BindingToPoolThread = 1;
  end;


  //-------------namespace: System.EnterpriseServices.CompensatingResourceManager----------------
  [DNTypeName('System.EnterpriseServices.CompensatingResourceManager.CompensatorOptions')]
  DNCompensatorOptions = type Integer;
  DNCompensatorOptionsHelper = record helper for DNCompensatorOptions
  public const
    PreparePhase = 1;
    CommitPhase = 2;
    AbortPhase = 4;
    AllPhases = 7;
    FailIfInDoubtsRemain = 16;
  end;


  //-------------namespace: System.EnterpriseServices.CompensatingResourceManager----------------
  [DNTypeName('System.EnterpriseServices.CompensatingResourceManager.LogRecordFlags')]
  DNLogRecordFlags = type Integer;
  DNLogRecordFlagsHelper = record helper for DNLogRecordFlags
  public const
    ForgetTarget = 1;
    WrittenDuringPrepare = 2;
    WrittenDuringCommit = 4;
    WrittenDuringAbort = 8;
    WrittenDurringRecovery = 16;
    WrittenDuringReplay = 32;
    ReplayInProgress = 64;
  end;


  //-------------namespace: System.EnterpriseServices.CompensatingResourceManager----------------
  [DNTypeName('System.EnterpriseServices.CompensatingResourceManager.TransactionState')]
  DNTransactionState = type Integer;
  DNTransactionStateHelper = record helper for DNTransactionState
  public const
    Active = 0;
    Committed = 1;
    Aborted = 2;
    Indoubt = 3;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  [DNTypeName('System.EnterpriseServices.ImpersonationLevelOption')]
  DNImpersonationLevelOption = type Integer;
  DNImpersonationLevelOptionHelper = record helper for DNImpersonationLevelOption
  public const
    Default_ = 0;
    Anonymous = 1;
    Identify = 2;
    Impersonate = 3;
    Delegate = 4;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  [DNTypeName('System.EnterpriseServices.InheritanceOption')]
  DNInheritanceOption = type Integer;
  DNInheritanceOptionHelper = record helper for DNInheritanceOption
  public const
    Inherit = 0;
    Ignore = 1;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  [DNTypeName('System.EnterpriseServices.InstallationFlags')]
  DNInstallationFlags = type Integer;
  DNInstallationFlagsHelper = record helper for DNInstallationFlags
  public const
    Default_ = 0;
    ExpectExistingTypeLib = 1;
    CreateTargetApplication = 2;
    FindOrCreateTargetApplication = 4;
    ReconfigureExistingApplication = 8;
    ConfigureComponentsOnly = 16;
    ReportWarningsToConsole = 32;
    Register_ = 256;
    Install = 512;
    Configure = 1024;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  [DNTypeName('System.EnterpriseServices.PartitionOption')]
  DNPartitionOption = type Integer;
  DNPartitionOptionHelper = record helper for DNPartitionOption
  public const
    Ignore = 0;
    Inherit = 1;
    New = 2;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  [DNTypeName('System.EnterpriseServices.PropertyLockMode')]
  DNPropertyLockMode = type Integer;
  DNPropertyLockModeHelper = record helper for DNPropertyLockMode
  public const
    SetGet = 0;
    Method = 1;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  [DNTypeName('System.EnterpriseServices.PropertyReleaseMode')]
  DNPropertyReleaseMode = type Integer;
  DNPropertyReleaseModeHelper = record helper for DNPropertyReleaseMode
  public const
    Standard = 0;
    Process = 1;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  [DNTypeName('System.EnterpriseServices.SxsOption')]
  DNSxsOption = type Integer;
  DNSxsOptionHelper = record helper for DNSxsOption
  public const
    Ignore = 0;
    Inherit = 1;
    New = 2;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  [DNTypeName('System.EnterpriseServices.SynchronizationOption')]
  DNSynchronizationOption = type Integer;
  DNSynchronizationOptionHelper = record helper for DNSynchronizationOption
  public const
    Disabled = 0;
    NotSupported = 1;
    Supported = 2;
    Required = 3;
    RequiresNew = 4;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  [DNTypeName('System.EnterpriseServices.ThreadPoolOption')]
  DNThreadPoolOption = type Integer;
  DNThreadPoolOptionHelper = record helper for DNThreadPoolOption
  public const
    None = 0;
    Inherit = 1;
    STA = 2;
    MTA = 3;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  [DNTypeName('System.EnterpriseServices.TransactionIsolationLevel')]
  DNTransactionIsolationLevel = type Integer;
  DNTransactionIsolationLevelHelper = record helper for DNTransactionIsolationLevel
  public const
    Any = 0;
    ReadUncommitted = 1;
    ReadCommitted = 2;
    RepeatableRead = 3;
    Serializable = 4;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  [DNTypeName('System.EnterpriseServices.TransactionOption')]
  DNTransactionOption = type Integer;
  DNTransactionOptionHelper = record helper for DNTransactionOption
  public const
    Disabled = 0;
    NotSupported = 1;
    Supported = 2;
    Required = 3;
    RequiresNew = 4;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  [DNTypeName('System.EnterpriseServices.TransactionStatus')]
  DNTransactionStatus = type Integer;
  DNTransactionStatusHelper = record helper for DNTransactionStatus
  public const
    Commited = 0;
    LocallyOk = 1;
    NoTransaction = 2;
    Aborting = 3;
    Aborted = 4;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  [DNTypeName('System.EnterpriseServices.TransactionVote')]
  DNTransactionVote = type Integer;
  DNTransactionVoteHelper = record helper for DNTransactionVote
  public const
    Commit = 0;
    Abort_ = 1;
  end;




type


{ declares }

  DNIAsyncErrorNotify = interface; // type: System.EnterpriseServices.IAsyncErrorNotify, namespace: System.EnterpriseServices
  DNIClrObjectFactory = interface; // type: System.EnterpriseServices.Internal.IClrObjectFactory, namespace: System.EnterpriseServices.Internal
  DNIComManagedImportUtil = interface; // type: System.EnterpriseServices.Internal.IComManagedImportUtil, namespace: System.EnterpriseServices.Internal
  DNIComSoapIISVRoot = interface; // type: System.EnterpriseServices.Internal.IComSoapIISVRoot, namespace: System.EnterpriseServices.Internal
  DNIComSoapMetadata = interface; // type: System.EnterpriseServices.Internal.IComSoapMetadata, namespace: System.EnterpriseServices.Internal
  DNIComSoapPublisher = interface; // type: System.EnterpriseServices.Internal.IComSoapPublisher, namespace: System.EnterpriseServices.Internal
  DNIServerWebConfig = interface; // type: System.EnterpriseServices.Internal.IServerWebConfig, namespace: System.EnterpriseServices.Internal
  DNISoapClientImport = interface; // type: System.EnterpriseServices.Internal.ISoapClientImport, namespace: System.EnterpriseServices.Internal
  DNISoapServerTlb = interface; // type: System.EnterpriseServices.Internal.ISoapServerTlb, namespace: System.EnterpriseServices.Internal
  DNISoapServerVRoot = interface; // type: System.EnterpriseServices.Internal.ISoapServerVRoot, namespace: System.EnterpriseServices.Internal
  DNISoapUtility = interface; // type: System.EnterpriseServices.Internal.ISoapUtility, namespace: System.EnterpriseServices.Internal
  DNIPlaybackControl = interface; // type: System.EnterpriseServices.IPlaybackControl, namespace: System.EnterpriseServices
  DNIProcessInitControl = interface; // type: System.EnterpriseServices.IProcessInitControl, namespace: System.EnterpriseServices
  DNIProcessInitializer = interface; // type: System.EnterpriseServices.IProcessInitializer, namespace: System.EnterpriseServices
  DNIRegistrationHelper = interface; // type: System.EnterpriseServices.IRegistrationHelper, namespace: System.EnterpriseServices
  DNIRemoteDispatch = interface; // type: System.EnterpriseServices.IRemoteDispatch, namespace: System.EnterpriseServices
  DNIServiceCall = interface; // type: System.EnterpriseServices.IServiceCall, namespace: System.EnterpriseServices
  DNIServicedComponentInfo = interface; // type: System.EnterpriseServices.IServicedComponentInfo, namespace: System.EnterpriseServices
  DNITransaction = interface; // type: System.EnterpriseServices.ITransaction, namespace: System.EnterpriseServices
  DNApplicationAccessControlAttribute = interface; // type: System.EnterpriseServices.ApplicationAccessControlAttribute, namespace: System.EnterpriseServices
  DNApplicationActivationAttribute = interface; // type: System.EnterpriseServices.ApplicationActivationAttribute, namespace: System.EnterpriseServices
  DNApplicationIDAttribute = interface; // type: System.EnterpriseServices.ApplicationIDAttribute, namespace: System.EnterpriseServices
  DNApplicationNameAttribute = interface; // type: System.EnterpriseServices.ApplicationNameAttribute, namespace: System.EnterpriseServices
  DNApplicationQueuingAttribute = interface; // type: System.EnterpriseServices.ApplicationQueuingAttribute, namespace: System.EnterpriseServices
  DNAutoCompleteAttribute = interface; // type: System.EnterpriseServices.AutoCompleteAttribute, namespace: System.EnterpriseServices
  DNApplicationCrmEnabledAttribute = interface; // type: System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute, namespace: System.EnterpriseServices.CompensatingResourceManager
  DNComponentAccessControlAttribute = interface; // type: System.EnterpriseServices.ComponentAccessControlAttribute, namespace: System.EnterpriseServices
  DNCOMTIIntrinsicsAttribute = interface; // type: System.EnterpriseServices.COMTIIntrinsicsAttribute, namespace: System.EnterpriseServices
  DNConstructionEnabledAttribute = interface; // type: System.EnterpriseServices.ConstructionEnabledAttribute, namespace: System.EnterpriseServices
  DNDescriptionAttribute = interface; // type: System.EnterpriseServices.DescriptionAttribute, namespace: System.EnterpriseServices
  DNEventClassAttribute = interface; // type: System.EnterpriseServices.EventClassAttribute, namespace: System.EnterpriseServices
  DNEventTrackingEnabledAttribute = interface; // type: System.EnterpriseServices.EventTrackingEnabledAttribute, namespace: System.EnterpriseServices
  DNExceptionClassAttribute = interface; // type: System.EnterpriseServices.ExceptionClassAttribute, namespace: System.EnterpriseServices
  DNIISIntrinsicsAttribute = interface; // type: System.EnterpriseServices.IISIntrinsicsAttribute, namespace: System.EnterpriseServices
  DNInterfaceQueuingAttribute = interface; // type: System.EnterpriseServices.InterfaceQueuingAttribute, namespace: System.EnterpriseServices
  DNJustInTimeActivationAttribute = interface; // type: System.EnterpriseServices.JustInTimeActivationAttribute, namespace: System.EnterpriseServices
  DNLoadBalancingSupportedAttribute = interface; // type: System.EnterpriseServices.LoadBalancingSupportedAttribute, namespace: System.EnterpriseServices
  DNMustRunInClientContextAttribute = interface; // type: System.EnterpriseServices.MustRunInClientContextAttribute, namespace: System.EnterpriseServices
  DNObjectPoolingAttribute = interface; // type: System.EnterpriseServices.ObjectPoolingAttribute, namespace: System.EnterpriseServices
  DNPrivateComponentAttribute = interface; // type: System.EnterpriseServices.PrivateComponentAttribute, namespace: System.EnterpriseServices
  DNSecureMethodAttribute = interface; // type: System.EnterpriseServices.SecureMethodAttribute, namespace: System.EnterpriseServices
  DNSecurityRoleAttribute = interface; // type: System.EnterpriseServices.SecurityRoleAttribute, namespace: System.EnterpriseServices
  DNSynchronizationAttribute = interface; // type: System.EnterpriseServices.SynchronizationAttribute, namespace: System.EnterpriseServices
  DNTransactionAttribute = interface; // type: System.EnterpriseServices.TransactionAttribute, namespace: System.EnterpriseServices
  DNActivity = interface; // type: System.EnterpriseServices.Activity, namespace: System.EnterpriseServices
  DNBYOT = interface; // type: System.EnterpriseServices.BYOT, namespace: System.EnterpriseServices
  DNClerk = interface; // type: System.EnterpriseServices.CompensatingResourceManager.Clerk, namespace: System.EnterpriseServices.CompensatingResourceManager
  DNClerkInfo = interface; // type: System.EnterpriseServices.CompensatingResourceManager.ClerkInfo, namespace: System.EnterpriseServices.CompensatingResourceManager
  DNClerkMonitor = interface; // type: System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor, namespace: System.EnterpriseServices.CompensatingResourceManager
  DNLogRecord = interface; // type: System.EnterpriseServices.CompensatingResourceManager.LogRecord, namespace: System.EnterpriseServices.CompensatingResourceManager
  DNContextUtil = interface; // type: System.EnterpriseServices.ContextUtil, namespace: System.EnterpriseServices
  DNAppDomainHelper = interface; // type: System.EnterpriseServices.Internal.AppDomainHelper, namespace: System.EnterpriseServices.Internal
  DNClientRemotingConfig = interface; // type: System.EnterpriseServices.Internal.ClientRemotingConfig, namespace: System.EnterpriseServices.Internal
  DNClrObjectFactory = interface; // type: System.EnterpriseServices.Internal.ClrObjectFactory, namespace: System.EnterpriseServices.Internal
  DNComManagedImportUtil = interface; // type: System.EnterpriseServices.Internal.ComManagedImportUtil, namespace: System.EnterpriseServices.Internal
  DNComSoapPublishError = interface; // type: System.EnterpriseServices.Internal.ComSoapPublishError, namespace: System.EnterpriseServices.Internal
  DNGenerateMetadata = interface; // type: System.EnterpriseServices.Internal.GenerateMetadata, namespace: System.EnterpriseServices.Internal
  DNIISVirtualRoot = interface; // type: System.EnterpriseServices.Internal.IISVirtualRoot, namespace: System.EnterpriseServices.Internal
  DNPublish = interface; // type: System.EnterpriseServices.Internal.Publish, namespace: System.EnterpriseServices.Internal
  DNServerWebConfig = interface; // type: System.EnterpriseServices.Internal.ServerWebConfig, namespace: System.EnterpriseServices.Internal
  DNSoapClientImport = interface; // type: System.EnterpriseServices.Internal.SoapClientImport, namespace: System.EnterpriseServices.Internal
  DNSoapServerTlb = interface; // type: System.EnterpriseServices.Internal.SoapServerTlb, namespace: System.EnterpriseServices.Internal
  DNSoapServerVRoot = interface; // type: System.EnterpriseServices.Internal.SoapServerVRoot, namespace: System.EnterpriseServices.Internal
  DNSoapUtility = interface; // type: System.EnterpriseServices.Internal.SoapUtility, namespace: System.EnterpriseServices.Internal
  DNRegistrationConfig = interface; // type: System.EnterpriseServices.RegistrationConfig, namespace: System.EnterpriseServices
  DNRegistrationErrorInfo = interface; // type: System.EnterpriseServices.RegistrationErrorInfo, namespace: System.EnterpriseServices
  DNResourcePool = interface; // type: System.EnterpriseServices.ResourcePool, namespace: System.EnterpriseServices
  DNSecurityCallContext = interface; // type: System.EnterpriseServices.SecurityCallContext, namespace: System.EnterpriseServices
  DNSecurityCallers = interface; // type: System.EnterpriseServices.SecurityCallers, namespace: System.EnterpriseServices
  DNSecurityIdentity = interface; // type: System.EnterpriseServices.SecurityIdentity, namespace: System.EnterpriseServices
  DNServiceConfig = interface; // type: System.EnterpriseServices.ServiceConfig, namespace: System.EnterpriseServices
  DNServiceDomain = interface; // type: System.EnterpriseServices.ServiceDomain, namespace: System.EnterpriseServices
  DNSharedProperty = interface; // type: System.EnterpriseServices.SharedProperty, namespace: System.EnterpriseServices
  DNSharedPropertyGroup = interface; // type: System.EnterpriseServices.SharedPropertyGroup, namespace: System.EnterpriseServices
  DNSharedPropertyGroupManager = interface; // type: System.EnterpriseServices.SharedPropertyGroupManager, namespace: System.EnterpriseServices
  DNRegistrationException = interface; // type: System.EnterpriseServices.RegistrationException, namespace: System.EnterpriseServices
  DNServicedComponentException = interface; // type: System.EnterpriseServices.ServicedComponentException, namespace: System.EnterpriseServices
  DNServicedComponent = interface; // type: System.EnterpriseServices.ServicedComponent, namespace: System.EnterpriseServices
  DNCompensator = interface; // type: System.EnterpriseServices.CompensatingResourceManager.Compensator, namespace: System.EnterpriseServices.CompensatingResourceManager
  DNRegistrationHelperTx = interface; // type: System.EnterpriseServices.RegistrationHelperTx, namespace: System.EnterpriseServices
  DNAssemblyLocator = interface; // type: System.EnterpriseServices.Internal.AssemblyLocator, namespace: System.EnterpriseServices.Internal
  DNRegistrationHelper = interface; // type: System.EnterpriseServices.RegistrationHelper, namespace: System.EnterpriseServices
  DNBOID = interface; // type: System.EnterpriseServices.BOID, namespace: System.EnterpriseServices
  DNXACTTRANSINFO = interface; // type: System.EnterpriseServices.XACTTRANSINFO, namespace: System.EnterpriseServices

{ delegates }

  [DNTypeName('System.EnterpriseServices.ResourcePool+TransactionEndDelegate')]
  DNResourcePool_TransactionEndDelegate = procedure(resource: DDN.mscorlib.DNObject) of object;




{ objects }

  //-------------namespace: System.EnterpriseServices----------------
  [DNTypeName('System.EnterpriseServices.IAsyncErrorNotify')]
  DNIAsyncErrorNotify = interface(DDN.mscorlib.DNObject)
  ['{FE6777FB-A674-4177-8F32-6D707E113484}']
  { methods } 

    procedure OnError(hresult: Int32);

  end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  [DNTypeName('System.EnterpriseServices.Internal.IClrObjectFactory')]
  DNIClrObjectFactory = interface(DDN.mscorlib.DNObject)
  ['{ECABAFD2-7F19-11D2-978E-0000F8757E2A}']
  { methods } 

    function CreateFromAssembly(assembly: string; &type: string; mode: string): DDN.mscorlib.DNObject;
    function CreateFromVroot(VrootUrl: string; Mode: string): DDN.mscorlib.DNObject;
    function CreateFromWsdl(WsdlUrl: string; Mode: string): DDN.mscorlib.DNObject;
    function CreateFromMailbox(Mailbox: string; Mode: string): DDN.mscorlib.DNObject;

  end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  [DNTypeName('System.EnterpriseServices.Internal.IComManagedImportUtil')]
  DNIComManagedImportUtil = interface(DDN.mscorlib.DNObject)
  ['{C3F8F66B-91BE-4C99-A94F-CE3B0A951039}']
  { methods } 

    procedure GetComponentInfo(assemblyPath: string; out numComponents: string; out componentInfo: string);
    procedure InstallAssembly(filename: string; parname: string; appname: string);

  end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  [DNTypeName('System.EnterpriseServices.Internal.IComSoapIISVRoot')]
  DNIComSoapIISVRoot = interface(DDN.mscorlib.DNObject)
  ['{D8013EF0-730B-45E2-BA24-874B7242C425}']
  { methods } 

    procedure Create(RootWeb: string; PhysicalDirectory: string; VirtualDirectory: string; out Error: string);
    procedure Delete(RootWeb: string; PhysicalDirectory: string; VirtualDirectory: string; out Error: string);

  end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  [DNTypeName('System.EnterpriseServices.Internal.IComSoapMetadata')]
  DNIComSoapMetadata = interface(DDN.mscorlib.DNObject)
  ['{D8013FF0-730B-45E2-BA24-874B7242C425}']
  { methods } 

    function Generate(SrcTypeLibFileName: string; OutPath: string): string;
    function GenerateSigned(SrcTypeLibFileName: string; OutPath: string; InstallGac: Boolean; out Error: string): string;

  end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  [DNTypeName('System.EnterpriseServices.Internal.IComSoapPublisher')]
  DNIComSoapPublisher = interface(DDN.mscorlib.DNObject)
  ['{D8013EEE-730B-45E2-BA24-874B7242C425}']
  { methods } 

    procedure CreateVirtualRoot(Operation: string; FullUrl: string; out BaseUrl: string; out VirtualRoot: string; out PhysicalPath: string; out Error: string);
    procedure DeleteVirtualRoot(RootWebServer: string; FullUrl: string; out Error: string);
    procedure CreateMailBox(RootMailServer: string; MailBox: string; out SmtpName: string; out Domain: string; out PhysicalPath: string; out Error: string);
    procedure DeleteMailBox(RootMailServer: string; MailBox: string; out Error: string);
    procedure ProcessServerTlb(ProgId: string; SrcTlbPath: string; PhysicalPath: string; Operation: string; out AssemblyName: string; out TypeName: string; out Error: string);
    procedure ProcessClientTlb(ProgId: string; SrcTlbPath: string; PhysicalPath: string; VRoot: string; BaseUrl: string; Mode: string; Transport: string; out AssemblyName: string; out TypeName: string; out Error: string);
    function GetTypeNameFromProgId(AssemblyPath: string; ProgId: string): string;
    procedure RegisterAssembly(AssemblyPath: string);
    procedure UnRegisterAssembly(AssemblyPath: string);
    procedure GacInstall(AssemblyPath: string);
    procedure GacRemove(AssemblyPath: string);
    procedure GetAssemblyNameForCache(TypeLibPath: string; out CachePath: string);

  end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  [DNTypeName('System.EnterpriseServices.Internal.IServerWebConfig')]
  DNIServerWebConfig = interface(DDN.mscorlib.DNObject)
  ['{6261E4B5-572A-4142-A2F9-1FE1A0C97097}']
  { methods } 

    procedure AddElement(FilePath: string; AssemblyName: string; TypeName: string; ProgId: string; Mode: string; out Error: string);
    procedure Create(FilePath: string; FileRootName: string; out Error: string);

  end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  [DNTypeName('System.EnterpriseServices.Internal.ISoapClientImport')]
  DNISoapClientImport = interface(DDN.mscorlib.DNObject)
  ['{E7F0F021-9201-47E4-94DA-1D1416DEC27A}']
  { methods } 

    procedure ProcessClientTlbEx(progId: string; virtualRoot: string; baseUrl: string; authentication: string; assemblyName: string; typeName: string);

  end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  [DNTypeName('System.EnterpriseServices.Internal.ISoapServerTlb')]
  DNISoapServerTlb = interface(DDN.mscorlib.DNObject)
  ['{1E7BA9F7-21DB-4482-929E-21BDE2DFE51C}']
  { methods } 

    procedure AddServerTlb(progId: string; classId: string; interfaceId: string; srcTlbPath: string; rootWebServer: string; baseUrl: string; virtualRoot: string; clientActivated: string; wellKnown: string; discoFile: string; operation: string; out assemblyName: string; out typeName: string);
    procedure DeleteServerTlb(progId: string; classId: string; interfaceId: string; srcTlbPath: string; rootWebServer: string; baseUrl: string; virtualRoot: string; operation: string; assemblyName: string; typeName: string);

  end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  [DNTypeName('System.EnterpriseServices.Internal.ISoapServerVRoot')]
  DNISoapServerVRoot = interface(DDN.mscorlib.DNObject)
  ['{A31B6577-71D2-4344-AEDF-ADC1B0DC5347}']
  { methods } 

    procedure CreateVirtualRootEx(rootWebServer: string; inBaseUrl: string; inVirtualRoot: string; homePage: string; discoFile: string; secureSockets: string; authentication: string; operation: string; out baseUrl: string; out virtualRoot: string; out physicalPath: string);
    procedure DeleteVirtualRootEx(rootWebServer: string; baseUrl: string; virtualRoot: string);
    procedure GetVirtualRootStatus(rootWebServer: string; inBaseUrl: string; inVirtualRoot: string; out exists: string; out secureSockets: string; out windowsAuth: string; out anonymous: string; out homePage: string; out discoFile: string; out physicalPath: string; out baseUrl: string; out virtualRoot: string);

  end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  [DNTypeName('System.EnterpriseServices.Internal.ISoapUtility')]
  DNISoapUtility = interface(DDN.mscorlib.DNObject)
  ['{5AC4CB7E-F89F-429B-926B-C7F940936BF4}']
  { methods } 

    procedure GetServerPhysicalPath(rootWebServer: string; inBaseUrl: string; inVirtualRoot: string; out physicalPath: string);
    procedure GetServerBinPath(rootWebServer: string; inBaseUrl: string; inVirtualRoot: string; out binPath: string);
    procedure Present;

  end;

  //-------------namespace: System.EnterpriseServices----------------
  [DNTypeName('System.EnterpriseServices.IPlaybackControl')]
  DNIPlaybackControl = interface(DDN.mscorlib.DNObject)
  ['{51372AFD-CAE7-11CF-BE81-00AA00A2FA25}']
  { methods } 

    procedure FinalClientRetry;
    procedure FinalServerRetry;

  end;

  //-------------namespace: System.EnterpriseServices----------------
  [DNTypeName('System.EnterpriseServices.IProcessInitControl')]
  DNIProcessInitControl = interface(DDN.mscorlib.DNObject)
  ['{72380D55-8D2B-43A3-8513-2B6EF31434E9}']
  { methods } 

    procedure ResetInitializerTimeout(dwSecondsRemaining: Int32);

  end;

  //-------------namespace: System.EnterpriseServices----------------
  [DNTypeName('System.EnterpriseServices.IProcessInitializer')]
  DNIProcessInitializer = interface(DDN.mscorlib.DNObject)
  ['{1113F52D-DC7F-4943-AED6-88D04027E32A}']
  { methods } 

    procedure Startup([in]punkProcessControl: DDN.mscorlib.DNObject);
    procedure Shutdown;

  end;

  //-------------namespace: System.EnterpriseServices----------------
  [DNTypeName('System.EnterpriseServices.IRegistrationHelper')]
  DNIRegistrationHelper = interface(DDN.mscorlib.DNObject)
  ['{55E3EA25-55CB-4650-8887-18E8D30BB4BC}']
  { methods } 

    procedure InstallAssembly([in]assembly: string; out application: string; out tlb: string; [in]installFlags: DNInstallationFlags);
    procedure UninstallAssembly([in]assembly: string; [in]application: string);

  end;

  //-------------namespace: System.EnterpriseServices----------------
  [DNTypeName('System.EnterpriseServices.IRemoteDispatch')]
  DNIRemoteDispatch = interface(DDN.mscorlib.DNObject)
  ['{6619A740-8154-43BE-A186-0319578E02DB}']
  { methods } 

    function RemoteDispatchAutoDone(s: string): string;
    function RemoteDispatchNotAutoDone(s: string): string;

  end;

  //-------------namespace: System.EnterpriseServices----------------
  [DNTypeName('System.EnterpriseServices.IServiceCall')]
  DNIServiceCall = interface(DDN.mscorlib.DNObject)
  ['{BD3E2E12-42DD-40F4-A09A-95A50C58304B}']
  { methods } 

    procedure OnCall;

  end;

  //-------------namespace: System.EnterpriseServices----------------
  [DNTypeName('System.EnterpriseServices.IServicedComponentInfo')]
  DNIServicedComponentInfo = interface(DDN.mscorlib.DNObject)
  ['{8165B19E-8D3A-4D0B-80C8-97DE310DB583}']
  { methods } 

    procedure GetComponentInfo(out infoMask: Int32; out infoArray: TArray<string>);

  end;

  //-------------namespace: System.EnterpriseServices----------------
  [DNTypeName('System.EnterpriseServices.ITransaction')]
  DNITransaction = interface(DDN.mscorlib.DNObject)
  ['{0FB15084-AF41-11CE-BD2B-204C4F4F5020}']
  { methods } 

    procedure Commit(fRetaining: Int32; grfTC: Int32; grfRM: Int32);
    procedure &Abort(out pboidReason: DNBOID; fRetaining: Int32; fAsync: Int32);
    procedure GetTransactionInfo(out pinfo: DNXACTTRANSINFO);

  end;

  //-------------namespace: System.EnterpriseServices----------------
  DNApplicationAccessControlAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{ADA5F3F2-93BE-5D1E-BD55-88A6A550CE0E}']
  { constructors } 

    {class} function init: DNApplicationAccessControlAttribute; overload;
    {class} function init(val: Boolean): DNApplicationAccessControlAttribute; overload;

  end;

  [DNTypeName('System.EnterpriseServices.ApplicationAccessControlAttribute')]
  DNApplicationAccessControlAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{A97847C8-25CD-3920-A625-7CE6AAFDC1A4}']
  { getters & setters } 

    function get_Value: Boolean;
    procedure set_Value(value: Boolean);
    function get_AccessChecksLevel: DNAccessChecksLevelOption;
    procedure set_AccessChecksLevel(value: DNAccessChecksLevelOption);
    function get_Authentication: DNAuthenticationOption;
    procedure set_Authentication(value: DNAuthenticationOption);
    function get_ImpersonationLevel: DNImpersonationLevelOption;
    procedure set_ImpersonationLevel(value: DNImpersonationLevelOption);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: Boolean read get_Value write set_Value;
    property AccessChecksLevel: DNAccessChecksLevelOption read get_AccessChecksLevel write set_AccessChecksLevel;
    property Authentication: DNAuthenticationOption read get_Authentication write set_Authentication;
    property ImpersonationLevel: DNImpersonationLevelOption read get_ImpersonationLevel write set_ImpersonationLevel;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNApplicationAccessControlAttribute = class(TDNGenericImport<DNApplicationAccessControlAttributeClass, DNApplicationAccessControlAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNApplicationActivationAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{A565F613-319A-59A1-80DB-45AEFF2770F3}']
  { constructors } 

    {class} function init(opt: DNActivationOption): DNApplicationActivationAttribute;

  end;

  [DNTypeName('System.EnterpriseServices.ApplicationActivationAttribute')]
  DNApplicationActivationAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{C98E118E-F497-3BAB-95F6-179AFF0F3F3E}']
  { getters & setters } 

    function get_Value: DNActivationOption;
    function get_SoapVRoot: string;
    procedure set_SoapVRoot(value: string);
    function get_SoapMailbox: string;
    procedure set_SoapMailbox(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: DNActivationOption read get_Value;
    property SoapVRoot: string read get_SoapVRoot write set_SoapVRoot;
    property SoapMailbox: string read get_SoapMailbox write set_SoapMailbox;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNApplicationActivationAttribute = class(TDNGenericImport<DNApplicationActivationAttributeClass, DNApplicationActivationAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNApplicationIDAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{682ADE8A-7F2D-58C1-9AC8-867C18A7E4C7}']
  { constructors } 

    {class} function init(guid: string): DNApplicationIDAttribute;

  end;

  [DNTypeName('System.EnterpriseServices.ApplicationIDAttribute')]
  DNApplicationIDAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{D46C7808-27C1-310C-AF39-878F73C484DD}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNGuid;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: DDN.mscorlib.DNGuid read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNApplicationIDAttribute = class(TDNGenericImport<DNApplicationIDAttributeClass, DNApplicationIDAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNApplicationNameAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{00AF6B53-F283-5C29-89B7-0AB09E8FD8A1}']
  { constructors } 

    {class} function init(name: string): DNApplicationNameAttribute;

  end;

  [DNTypeName('System.EnterpriseServices.ApplicationNameAttribute')]
  DNApplicationNameAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{D58326F2-CF98-3EBB-A416-C9207B385E85}']
  { getters & setters } 

    function get_Value: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNApplicationNameAttribute = class(TDNGenericImport<DNApplicationNameAttributeClass, DNApplicationNameAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNApplicationQueuingAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{8FB7BC14-8B88-5C1E-B9B0-C9DCF7014BD2}']
  { constructors } 

    {class} function init: DNApplicationQueuingAttribute;

  end;

  [DNTypeName('System.EnterpriseServices.ApplicationQueuingAttribute')]
  DNApplicationQueuingAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{CFC1BBA3-9ADC-3CA7-B32A-C579FC206DCA}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_QueueListenerEnabled: Boolean;
    procedure set_QueueListenerEnabled(value: Boolean);
    function get_MaxListenerThreads: Int32;
    procedure set_MaxListenerThreads(value: Int32);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Enabled: Boolean read get_Enabled write set_Enabled;
    property QueueListenerEnabled: Boolean read get_QueueListenerEnabled write set_QueueListenerEnabled;
    property MaxListenerThreads: Int32 read get_MaxListenerThreads write set_MaxListenerThreads;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNApplicationQueuingAttribute = class(TDNGenericImport<DNApplicationQueuingAttributeClass, DNApplicationQueuingAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNAutoCompleteAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{AB560E86-7DC4-5CE3-886B-08D7A7BC6B7A}']
  { constructors } 

    {class} function init: DNAutoCompleteAttribute; overload;
    {class} function init(val: Boolean): DNAutoCompleteAttribute; overload;

  end;

  [DNTypeName('System.EnterpriseServices.AutoCompleteAttribute')]
  DNAutoCompleteAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{716FFD45-C48F-3AC1-BBCD-A98B80168C94}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: Boolean read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNAutoCompleteAttribute = class(TDNGenericImport<DNAutoCompleteAttributeClass, DNAutoCompleteAttribute>) end;

  //-------------namespace: System.EnterpriseServices.CompensatingResourceManager----------------
  DNApplicationCrmEnabledAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{C44CC22F-F869-5984-924A-7596BED1F200}']
  { constructors } 

    {class} function init: DNApplicationCrmEnabledAttribute; overload;
    {class} function init(val: Boolean): DNApplicationCrmEnabledAttribute; overload;

  end;

  [DNTypeName('System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute')]
  DNApplicationCrmEnabledAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{5660C538-2D43-3898-9B97-18D4E62301BF}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: Boolean read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNApplicationCrmEnabledAttribute = class(TDNGenericImport<DNApplicationCrmEnabledAttributeClass, DNApplicationCrmEnabledAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNComponentAccessControlAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{21EAFF0C-BB12-594A-9C3C-1D39241D71B9}']
  { constructors } 

    {class} function init: DNComponentAccessControlAttribute; overload;
    {class} function init(val: Boolean): DNComponentAccessControlAttribute; overload;

  end;

  [DNTypeName('System.EnterpriseServices.ComponentAccessControlAttribute')]
  DNComponentAccessControlAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{25D2DC1F-137C-314E-A3B5-C76FB6FA9261}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: Boolean read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNComponentAccessControlAttribute = class(TDNGenericImport<DNComponentAccessControlAttributeClass, DNComponentAccessControlAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNCOMTIIntrinsicsAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{CD96A9E0-97C0-55FB-8BB1-089A30071B2C}']
  { constructors } 

    {class} function init: DNCOMTIIntrinsicsAttribute; overload;
    {class} function init(val: Boolean): DNCOMTIIntrinsicsAttribute; overload;

  end;

  [DNTypeName('System.EnterpriseServices.COMTIIntrinsicsAttribute')]
  DNCOMTIIntrinsicsAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{11D72D39-2416-31BB-96F3-9FAFB5BE5FB7}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: Boolean read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNCOMTIIntrinsicsAttribute = class(TDNGenericImport<DNCOMTIIntrinsicsAttributeClass, DNCOMTIIntrinsicsAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNConstructionEnabledAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{A61445E0-30CE-5960-94E2-1C100627449E}']
  { constructors } 

    {class} function init: DNConstructionEnabledAttribute; overload;
    {class} function init(val: Boolean): DNConstructionEnabledAttribute; overload;

  end;

  [DNTypeName('System.EnterpriseServices.ConstructionEnabledAttribute')]
  DNConstructionEnabledAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{663EA5B9-F869-312F-9E1E-C853AFF55C7C}']
  { getters & setters } 

    function get_Default: string;
    procedure set_Default(value: string);
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Default: string read get_Default write set_Default;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNConstructionEnabledAttribute = class(TDNGenericImport<DNConstructionEnabledAttributeClass, DNConstructionEnabledAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNDescriptionAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{1ED5A3A6-44F5-5F41-8BC5-D2C010ED7268}']
  { constructors } 

    {class} function init(desc: string): DNDescriptionAttribute;

  end;

  [DNTypeName('System.EnterpriseServices.DescriptionAttribute')]
  DNDescriptionAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{AE9ADC25-FB27-3A3A-8F4C-C89BAE68D1C1}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDescriptionAttribute = class(TDNGenericImport<DNDescriptionAttributeClass, DNDescriptionAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNEventClassAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{BF18B6E9-1713-5537-8873-C23360EC87D5}']
  { constructors } 

    {class} function init: DNEventClassAttribute;

  end;

  [DNTypeName('System.EnterpriseServices.EventClassAttribute')]
  DNEventClassAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{CB4C3E3F-BEB0-360F-A0D8-E046CA327980}']
  { getters & setters } 

    function get_FireInParallel: Boolean;
    procedure set_FireInParallel(value: Boolean);
    function get_AllowInprocSubscribers: Boolean;
    procedure set_AllowInprocSubscribers(value: Boolean);
    function get_PublisherFilter: string;
    procedure set_PublisherFilter(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FireInParallel: Boolean read get_FireInParallel write set_FireInParallel;
    property AllowInprocSubscribers: Boolean read get_AllowInprocSubscribers write set_AllowInprocSubscribers;
    property PublisherFilter: string read get_PublisherFilter write set_PublisherFilter;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNEventClassAttribute = class(TDNGenericImport<DNEventClassAttributeClass, DNEventClassAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNEventTrackingEnabledAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{25539F05-7FDD-5ECD-8DD2-8352549C86EA}']
  { constructors } 

    {class} function init: DNEventTrackingEnabledAttribute; overload;
    {class} function init(val: Boolean): DNEventTrackingEnabledAttribute; overload;

  end;

  [DNTypeName('System.EnterpriseServices.EventTrackingEnabledAttribute')]
  DNEventTrackingEnabledAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{23F9D804-2D9F-3D68-A568-7729EC8841FB}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: Boolean read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNEventTrackingEnabledAttribute = class(TDNGenericImport<DNEventTrackingEnabledAttributeClass, DNEventTrackingEnabledAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNExceptionClassAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{16D8ED63-E880-5592-B361-395FB7EBF754}']
  { constructors } 

    {class} function init(name: string): DNExceptionClassAttribute;

  end;

  [DNTypeName('System.EnterpriseServices.ExceptionClassAttribute')]
  DNExceptionClassAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{D1218C2B-C79C-3955-9B6B-1D28DBB1B658}']
  { getters & setters } 

    function get_Value: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNExceptionClassAttribute = class(TDNGenericImport<DNExceptionClassAttributeClass, DNExceptionClassAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNIISIntrinsicsAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{7564B395-7085-55BD-8964-1A5738E191B3}']
  { constructors } 

    {class} function init: DNIISIntrinsicsAttribute; overload;
    {class} function init(val: Boolean): DNIISIntrinsicsAttribute; overload;

  end;

  [DNTypeName('System.EnterpriseServices.IISIntrinsicsAttribute')]
  DNIISIntrinsicsAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{CD0631E1-0884-3150-B28A-27B2E3F9E02F}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: Boolean read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNIISIntrinsicsAttribute = class(TDNGenericImport<DNIISIntrinsicsAttributeClass, DNIISIntrinsicsAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNInterfaceQueuingAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{B1190970-FA2F-5FCC-8573-F3A362DCA298}']
  { constructors } 

    {class} function init: DNInterfaceQueuingAttribute; overload;
    {class} function init(enabled: Boolean): DNInterfaceQueuingAttribute; overload;

  end;

  [DNTypeName('System.EnterpriseServices.InterfaceQueuingAttribute')]
  DNInterfaceQueuingAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{5878DCE6-A2DB-3824-B9E3-6B3104F1F604}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_Interface: string;
    procedure set_Interface(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Enabled: Boolean read get_Enabled write set_Enabled;
    property &Interface: string read get_Interface write set_Interface;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNInterfaceQueuingAttribute = class(TDNGenericImport<DNInterfaceQueuingAttributeClass, DNInterfaceQueuingAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNJustInTimeActivationAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{C76A9B8B-C52D-56C6-BDEE-CD904EC42E56}']
  { constructors } 

    {class} function init: DNJustInTimeActivationAttribute; overload;
    {class} function init(val: Boolean): DNJustInTimeActivationAttribute; overload;

  end;

  [DNTypeName('System.EnterpriseServices.JustInTimeActivationAttribute')]
  DNJustInTimeActivationAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{F474818B-17F2-3355-879F-CE76A1E423E2}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: Boolean read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNJustInTimeActivationAttribute = class(TDNGenericImport<DNJustInTimeActivationAttributeClass, DNJustInTimeActivationAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNLoadBalancingSupportedAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{4622F06B-8A0C-5FF2-83BE-6625B6BAF21B}']
  { constructors } 

    {class} function init: DNLoadBalancingSupportedAttribute; overload;
    {class} function init(val: Boolean): DNLoadBalancingSupportedAttribute; overload;

  end;

  [DNTypeName('System.EnterpriseServices.LoadBalancingSupportedAttribute')]
  DNLoadBalancingSupportedAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{3B52C20E-7B24-3318-8883-D12ED5B59D08}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: Boolean read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNLoadBalancingSupportedAttribute = class(TDNGenericImport<DNLoadBalancingSupportedAttributeClass, DNLoadBalancingSupportedAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNMustRunInClientContextAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{04E30D4F-7E68-575F-A8CA-736491220A0B}']
  { constructors } 

    {class} function init: DNMustRunInClientContextAttribute; overload;
    {class} function init(val: Boolean): DNMustRunInClientContextAttribute; overload;

  end;

  [DNTypeName('System.EnterpriseServices.MustRunInClientContextAttribute')]
  DNMustRunInClientContextAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{B76A034B-A3BF-3B69-BD16-98FB69E8DF75}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: Boolean read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNMustRunInClientContextAttribute = class(TDNGenericImport<DNMustRunInClientContextAttributeClass, DNMustRunInClientContextAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNObjectPoolingAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{5DA85AD7-B7CA-5CF8-9788-1B20D0036C55}']
  { constructors } 

    {class} function init: DNObjectPoolingAttribute; overload;
    {class} function init(minPoolSize: Int32; maxPoolSize: Int32): DNObjectPoolingAttribute; overload;
    {class} function init(enable: Boolean): DNObjectPoolingAttribute; overload;
    {class} function init(enable: Boolean; minPoolSize: Int32; maxPoolSize: Int32): DNObjectPoolingAttribute; overload;

  end;

  [DNTypeName('System.EnterpriseServices.ObjectPoolingAttribute')]
  DNObjectPoolingAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{C31DE944-F875-3456-ACE7-5E1D8C4DB52C}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_MaxPoolSize: Int32;
    procedure set_MaxPoolSize(value: Int32);
    function get_MinPoolSize: Int32;
    procedure set_MinPoolSize(value: Int32);
    function get_CreationTimeout: Int32;
    procedure set_CreationTimeout(value: Int32);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function AfterSaveChanges(info: DDN.mscorlib.DNHashtable): Boolean;
    function IsValidTarget(s: string): Boolean;
    function Apply(info: DDN.mscorlib.DNHashtable): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Enabled: Boolean read get_Enabled write set_Enabled;
    property MaxPoolSize: Int32 read get_MaxPoolSize write set_MaxPoolSize;
    property MinPoolSize: Int32 read get_MinPoolSize write set_MinPoolSize;
    property CreationTimeout: Int32 read get_CreationTimeout write set_CreationTimeout;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNObjectPoolingAttribute = class(TDNGenericImport<DNObjectPoolingAttributeClass, DNObjectPoolingAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNPrivateComponentAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{2FF08221-213D-5D73-907F-37B936E26FE4}']
  { constructors } 

    {class} function init: DNPrivateComponentAttribute;

  end;

  [DNTypeName('System.EnterpriseServices.PrivateComponentAttribute')]
  DNPrivateComponentAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{C115C7F2-B678-3EE8-8841-D4382A90EC5E}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNPrivateComponentAttribute = class(TDNGenericImport<DNPrivateComponentAttributeClass, DNPrivateComponentAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNSecureMethodAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{814D1137-E47E-5C1B-BCF2-FD3C4147FA31}']
  { constructors } 

    {class} function init: DNSecureMethodAttribute;

  end;

  [DNTypeName('System.EnterpriseServices.SecureMethodAttribute')]
  DNSecureMethodAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{05325407-D6C0-318C-9B09-87747E1EE1EF}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSecureMethodAttribute = class(TDNGenericImport<DNSecureMethodAttributeClass, DNSecureMethodAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNSecurityRoleAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{F2AE9B18-0D03-530E-9882-6773099B915D}']
  { constructors } 

    {class} function init(role: string): DNSecurityRoleAttribute; overload;
    {class} function init(role: string; everyone: Boolean): DNSecurityRoleAttribute; overload;

  end;

  [DNTypeName('System.EnterpriseServices.SecurityRoleAttribute')]
  DNSecurityRoleAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{1BA2F66F-B4E6-357D-9F73-B7A064E43A68}']
  { getters & setters } 

    function get_Role: string;
    procedure set_Role(value: string);
    function get_SetEveryoneAccess: Boolean;
    procedure set_SetEveryoneAccess(value: Boolean);
    function get_Description: string;
    procedure set_Description(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Role: string read get_Role write set_Role;
    property SetEveryoneAccess: Boolean read get_SetEveryoneAccess write set_SetEveryoneAccess;
    property Description: string read get_Description write set_Description;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSecurityRoleAttribute = class(TDNGenericImport<DNSecurityRoleAttributeClass, DNSecurityRoleAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNSynchronizationAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{0C6894F5-C9ED-5398-A0D6-3DFB3F89D0BB}']
  { constructors } 

    {class} function init: DNSynchronizationAttribute; overload;
    {class} function init(val: DNSynchronizationOption): DNSynchronizationAttribute; overload;

  end;

  [DNTypeName('System.EnterpriseServices.SynchronizationAttribute')]
  DNSynchronizationAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{EDEC979B-B058-35A1-A67A-9F7F5048CBB9}']
  { getters & setters } 

    function get_Value: DNSynchronizationOption;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: DNSynchronizationOption read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSynchronizationAttribute = class(TDNGenericImport<DNSynchronizationAttributeClass, DNSynchronizationAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNTransactionAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{0BB1AF05-7B19-51C7-8B98-5B99A7BAA643}']
  { constructors } 

    {class} function init: DNTransactionAttribute; overload;
    {class} function init(val: DNTransactionOption): DNTransactionAttribute; overload;

  end;

  [DNTypeName('System.EnterpriseServices.TransactionAttribute')]
  DNTransactionAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{1A6F8048-6543-3CF4-9841-9E49CD11C468}']
  { getters & setters } 

    function get_Value: DNTransactionOption;
    function get_Isolation: DNTransactionIsolationLevel;
    procedure set_Isolation(value: DNTransactionIsolationLevel);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: DNTransactionOption read get_Value;
    property Isolation: DNTransactionIsolationLevel read get_Isolation write set_Isolation;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNTransactionAttribute = class(TDNGenericImport<DNTransactionAttributeClass, DNTransactionAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNActivityClass = interface(DDN.mscorlib.DNObjectClass)
  ['{59A8D36A-F461-5617-ABF9-62F828EB5653}']
  { constructors } 

    {class} function init(cfg: DNServiceConfig): DNActivity;

  end;

  [DNTypeName('System.EnterpriseServices.Activity')]
  DNActivity = interface(DDN.mscorlib.DNObject)
  ['{CB79A8BC-5DCD-361F-9C7A-A97666E2331C}']
  { methods } 

    procedure SynchronousCall(serviceCall: DNIServiceCall);
    procedure AsynchronousCall(serviceCall: DNIServiceCall);
    procedure BindToCurrentThread;
    procedure UnbindFromThread;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNActivity = class(TDNGenericImport<DNActivityClass, DNActivity>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNBYOTClass = interface(DDN.mscorlib.DNObjectClass)
  ['{27F6DAEB-7313-59E0-B1FC-301F0654D891}']
  { static methods } 

    {class} function CreateWithTipTransaction(url: string; t: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    {class} function CreateWithTransaction(transaction: DDN.mscorlib.DNObject; t: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;

  end;

  [DNTypeName('System.EnterpriseServices.BYOT')]
  DNBYOT = interface(DDN.mscorlib.DNObject)
  ['{0514E7B0-1ECC-37F6-BAFE-E8EF7952568A}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBYOT = class(TDNGenericImport<DNBYOTClass, DNBYOT>) end;

  //-------------namespace: System.EnterpriseServices.CompensatingResourceManager----------------
  DNClerkClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F0D656CA-51D5-59B8-9E99-93C82C664479}']
  { constructors } 

    {class} function init(compensator: DDN.mscorlib.DNType; description: string; flags: DNCompensatorOptions): DNClerk; overload;
    {class} function init(compensator: string; description: string; flags: DNCompensatorOptions): DNClerk; overload;

  end;

  [DNTypeName('System.EnterpriseServices.CompensatingResourceManager.Clerk')]
  DNClerk = interface(DDN.mscorlib.DNObject)
  ['{B04A2AA6-EFD7-380B-8323-7FAC9B5C0330}']
  { getters & setters } 

    function get_TransactionUOW: string;
    function get_LogRecordCount: Int32;

  { methods } 

    procedure ForceLog;
    procedure ForgetLogRecord;
    procedure ForceTransactionToAbort;
    procedure WriteLogRecord(&record: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TransactionUOW: string read get_TransactionUOW;
    property LogRecordCount: Int32 read get_LogRecordCount;
  end;

  TDNClerk = class(TDNGenericImport<DNClerkClass, DNClerk>) end;

  //-------------namespace: System.EnterpriseServices.CompensatingResourceManager----------------
  DNClerkInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{920A28C5-DFC2-5EE2-AE85-866548118436}']
  end;

  [DNTypeName('System.EnterpriseServices.CompensatingResourceManager.ClerkInfo')]
  DNClerkInfo = interface(DDN.mscorlib.DNObject)
  ['{53A09FA6-9A71-332A-921D-BE130C97461A}']
  { getters & setters } 

    function get_Clerk: DNClerk;
    function get_InstanceId: string;
    function get_Compensator: string;
    function get_Description: string;
    function get_TransactionUOW: string;
    function get_ActivityId: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Clerk: DNClerk read get_Clerk;
    property InstanceId: string read get_InstanceId;
    property Compensator: string read get_Compensator;
    property Description: string read get_Description;
    property TransactionUOW: string read get_TransactionUOW;
    property ActivityId: string read get_ActivityId;
  end;

  TDNClerkInfo = class(TDNGenericImport<DNClerkInfoClass, DNClerkInfo>) end;

  //-------------namespace: System.EnterpriseServices.CompensatingResourceManager----------------
  DNClerkMonitorClass = interface(DNObjectClass)
  ['{544B8F46-2AC7-5E08-8BE0-712DB777BCC9}']
  { constructors } 

    {class} function init: DNClerkMonitor;

  end;

  [DNTypeName('System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor')]
  DNClerkMonitor = interface(DDN.mscorlib.DNIEnumerable)
  ['{6C1C243A-2146-3342-8078-AC4BFB9DB4E9}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNClerkInfo; overload;
    function get_Item(index: string): DNClerkInfo; overload;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure Populate;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNClerkInfo read get_Item; default;
    property Item[index: string]: DNClerkInfo read get_Item; default;
  end;

  TDNClerkMonitor = class(TDNGenericImport<DNClerkMonitorClass, DNClerkMonitor>) end;

  //-------------namespace: System.EnterpriseServices.CompensatingResourceManager----------------
  DNLogRecordClass = interface(DDN.mscorlib.DNObjectClass)
  ['{85C95C0C-2A4B-5D2A-A4EF-5F15424083A7}']
  end;

  [DNTypeName('System.EnterpriseServices.CompensatingResourceManager.LogRecord')]
  DNLogRecord = interface(DDN.mscorlib.DNObject)
  ['{33DF2DC3-AA47-3F6A-8D0D-8BECE780BB7D}']
  { getters & setters } 

    function get_Flags: DNLogRecordFlags;
    function get_Sequence: Int32;
    function get_Record: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Flags: DNLogRecordFlags read get_Flags;
    property Sequence: Int32 read get_Sequence;
    property &Record: DDN.mscorlib.DNObject read get_Record;
  end;

  TDNLogRecord = class(TDNGenericImport<DNLogRecordClass, DNLogRecord>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNContextUtilClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4D302562-ECBB-59BE-8D59-EA6209D42023}']
  { static getter & setter } 

    {class} function get_IsInTransaction: Boolean;
    {class} function get_IsSecurityEnabled: Boolean;
    {class} function get_Transaction: DDN.mscorlib.DNObject;
    {class} function get_SystemTransaction: DDN.System.Transactions.DNTransaction;
    {class} function get_TransactionId: DDN.mscorlib.DNGuid;
    {class} function get_ContextId: DDN.mscorlib.DNGuid;
    {class} function get_ActivityId: DDN.mscorlib.DNGuid;
    {class} function get_MyTransactionVote: DNTransactionVote;
    {class} procedure set_MyTransactionVote(value: DNTransactionVote);
    {class} function get_DeactivateOnReturn: Boolean;
    {class} procedure set_DeactivateOnReturn(value: Boolean);
    {class} function get_PartitionId: DDN.mscorlib.DNGuid;
    {class} function get_ApplicationId: DDN.mscorlib.DNGuid;
    {class} function get_ApplicationInstanceId: DDN.mscorlib.DNGuid;

  { static methods } 

    {class} function IsCallerInRole(role: string): Boolean;
    {class} function GetNamedProperty(name: string): DDN.mscorlib.DNObject;
    {class} procedure SetNamedProperty(name: string; value: DDN.mscorlib.DNObject);
    {class} procedure EnableCommit;
    {class} procedure DisableCommit;
    {class} procedure SetComplete;
    {class} procedure SetAbort;
    {class} function IsDefaultContext: Boolean;

  { static propertys } 

    {class} property IsInTransaction: Boolean read get_IsInTransaction;
    {class} property IsSecurityEnabled: Boolean read get_IsSecurityEnabled;
    {class} property Transaction: DDN.mscorlib.DNObject read get_Transaction;
    {class} property SystemTransaction: DDN.System.Transactions.DNTransaction read get_SystemTransaction;
    {class} property TransactionId: DDN.mscorlib.DNGuid read get_TransactionId;
    {class} property ContextId: DDN.mscorlib.DNGuid read get_ContextId;
    {class} property ActivityId: DDN.mscorlib.DNGuid read get_ActivityId;
    {class} property MyTransactionVote: DNTransactionVote read get_MyTransactionVote write set_MyTransactionVote;
    {class} property DeactivateOnReturn: Boolean read get_DeactivateOnReturn write set_DeactivateOnReturn;
    {class} property PartitionId: DDN.mscorlib.DNGuid read get_PartitionId;
    {class} property ApplicationId: DDN.mscorlib.DNGuid read get_ApplicationId;
    {class} property ApplicationInstanceId: DDN.mscorlib.DNGuid read get_ApplicationInstanceId;
  end;

  [DNTypeName('System.EnterpriseServices.ContextUtil')]
  DNContextUtil = interface(DDN.mscorlib.DNObject)
  ['{7DA59565-0BF0-3D4C-A92D-E9618B61EDB9}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNContextUtil = class(TDNGenericImport<DNContextUtilClass, DNContextUtil>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNAppDomainHelperClass = interface(DDN.mscorlib.DNObjectClass)
  ['{445B3EA0-D02A-5B06-9348-4213879D26DA}']
  { constructors } 

    {class} function init: DNAppDomainHelper;

  end;

  [DNTypeName('System.EnterpriseServices.Internal.AppDomainHelper')]
  DNAppDomainHelper = interface(DDN.mscorlib.DNObject)
  ['{EF24F689-14F8-4D92-B4AF-D7B1F0E70FD4}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAppDomainHelper = class(TDNGenericImport<DNAppDomainHelperClass, DNAppDomainHelper>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNClientRemotingConfigClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D848422F-FF85-51AC-8FF4-4F79A4E2CD01}']
  { constructors } 

    {class} function init: DNClientRemotingConfig;

  { static methods } 

    {class} function Write(DestinationDirectory: string; VRoot: string; BaseUrl: string; AssemblyName: string; TypeName: string; ProgId: string; Mode: string; Transport: string): Boolean;

  end;

  [DNTypeName('System.EnterpriseServices.Internal.ClientRemotingConfig')]
  DNClientRemotingConfig = interface(DDN.mscorlib.DNObject)
  ['{E7D574D5-2E51-3400-9FB6-A058F2D5B8AB}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNClientRemotingConfig = class(TDNGenericImport<DNClientRemotingConfigClass, DNClientRemotingConfig>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNClrObjectFactoryClass = interface(DNObjectClass)
  ['{009E135F-4F19-569A-9FDD-8ED14FA708A9}']
  { constructors } 

    {class} function init: DNClrObjectFactory;

  end;

  [DNTypeName('System.EnterpriseServices.Internal.ClrObjectFactory')]
  DNClrObjectFactory = interface(DNIClrObjectFactory)
  ['{ECABAFD1-7F19-11D2-978E-0000F8757E2A}']
  { methods } 

    function CreateFromMailbox(Mailbox: string; Mode: string): DDN.mscorlib.DNObject;
    function CreateFromAssembly(AssemblyName: string; TypeName: string; Mode: string): DDN.mscorlib.DNObject;
    function CreateFromVroot(VrootUrl: string; Mode: string): DDN.mscorlib.DNObject;
    function CreateFromWsdl(WsdlUrl: string; Mode: string): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNClrObjectFactory = class(TDNGenericImport<DNClrObjectFactoryClass, DNClrObjectFactory>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNComManagedImportUtilClass = interface(DNObjectClass)
  ['{65C4067C-684D-58A7-962C-C70357B6B789}']
  { constructors } 

    {class} function init: DNComManagedImportUtil;

  end;

  [DNTypeName('System.EnterpriseServices.Internal.ComManagedImportUtil')]
  DNComManagedImportUtil = interface(DNIComManagedImportUtil)
  ['{3B0398C9-7812-4007-85CB-18C771F2206F}']
  { methods } 

    procedure GetComponentInfo(assemblyPath: string; out numComponents: string; out componentInfo: string);
    procedure InstallAssembly(asmpath: string; parname: string; appname: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNComManagedImportUtil = class(TDNGenericImport<DNComManagedImportUtilClass, DNComManagedImportUtil>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNComSoapPublishErrorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{05363E04-2B28-5390-8704-D952DC4E7EBF}']
  { constructors } 

    {class} function init: DNComSoapPublishError;

  { static methods } 

    {class} procedure Report(s: string);

  end;

  [DNTypeName('System.EnterpriseServices.Internal.ComSoapPublishError')]
  DNComSoapPublishError = interface(DDN.mscorlib.DNObject)
  ['{B0F64827-79BB-3163-B1AB-A2EA0E1FDA23}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNComSoapPublishError = class(TDNGenericImport<DNComSoapPublishErrorClass, DNComSoapPublishError>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNGenerateMetadataClass = interface(DNObjectClass)
  ['{049407B5-ACED-5E4D-81A7-79121ED484DF}']
  { constructors } 

    {class} function init: DNGenerateMetadata;

  { static methods } 

    {class} function SearchPath(path: string; fileName: string; extension: string; numBufferChars: Int32; buffer: string; filePart: TArray<Int32>): Int32;

  end;

  [DNTypeName('System.EnterpriseServices.Internal.GenerateMetadata')]
  DNGenerateMetadata = interface(DNIComSoapMetadata)
  ['{D8013FF1-730B-45E2-BA24-874B7242C425}']
  { methods } 

    function Generate(strSrcTypeLib: string; outPath: string): string;
    function GenerateSigned(strSrcTypeLib: string; outPath: string; InstallGac: Boolean; out Error: string): string;
    function GenerateMetaData(strSrcTypeLib: string; outPath: string; PublicKey: TArray<Byte>; KeyPair: DDN.mscorlib.DNStrongNameKeyPair): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGenerateMetadata = class(TDNGenericImport<DNGenerateMetadataClass, DNGenerateMetadata>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNIISVirtualRootClass = interface(DNObjectClass)
  ['{E7BB99AE-BA59-55F3-A31D-B44411014EC7}']
  { constructors } 

    {class} function init: DNIISVirtualRoot;

  end;

  [DNTypeName('System.EnterpriseServices.Internal.IISVirtualRoot')]
  DNIISVirtualRoot = interface(DNIComSoapIISVRoot)
  ['{D8013EF1-730B-45E2-BA24-874B7242C425}']
  { methods } 

    procedure Create(RootWeb: string; inPhysicalDirectory: string; VirtualDirectory: string; out Error: string);
    procedure Delete(RootWeb: string; PhysicalDirectory: string; VirtualDirectory: string; out Error: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNIISVirtualRoot = class(TDNGenericImport<DNIISVirtualRootClass, DNIISVirtualRoot>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNPublishClass = interface(DNObjectClass)
  ['{F9653B41-E721-52DC-9D88-E4BA4D4E2FAB}']
  { constructors } 

    {class} function init: DNPublish;

  { static methods } 

    {class} function GetClientPhysicalPath(CreateDir: Boolean): string;
    {class} procedure ParseUrl(FullUrl: string; out BaseUrl: string; out VirtualRoot: string);

  end;

  [DNTypeName('System.EnterpriseServices.Internal.Publish')]
  DNPublish = interface(DNIComSoapPublisher)
  ['{D8013EEF-730B-45E2-BA24-874B7242C425}']
  { methods } 

    procedure UnRegisterAssembly(AssemblyPath: string);
    procedure GetAssemblyNameForCache(TypeLibPath: string; out CachePath: string);
    procedure DeleteVirtualRoot(RootWebServer: string; FullUrl: string; out Error: string);
    procedure RegisterAssembly(AssemblyPath: string);
    procedure GacInstall(AssemblyPath: string);
    procedure GacRemove(AssemblyPath: string);
    procedure CreateVirtualRoot(Operation: string; FullUrl: string; out BaseUrl: string; out VirtualRoot: string; out PhysicalPath: string; out Error: string);
    procedure CreateMailBox(RootMailServer: string; MailBox: string; out SmtpName: string; out Domain: string; out PhysicalPath: string; out Error: string);
    procedure DeleteMailBox(RootMailServer: string; MailBox: string; out Error: string);
    procedure ProcessServerTlb(ProgId: string; SrcTlbPath: string; PhysicalPath: string; Operation: string; out strAssemblyName: string; out TypeName: string; out Error: string);
    function GetTypeNameFromProgId(AssemblyPath: string; ProgId: string): string;
    procedure ProcessClientTlb(ProgId: string; SrcTlbPath: string; PhysicalPath: string; VRoot: string; BaseUrl: string; Mode: string; Transport: string; out AssemblyName: string; out TypeName: string; out Error: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPublish = class(TDNGenericImport<DNPublishClass, DNPublish>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNServerWebConfigClass = interface(DNObjectClass)
  ['{E2A307EC-5E27-5C2C-A7E6-1FBAF13291B5}']
  { constructors } 

    {class} function init: DNServerWebConfig;

  end;

  [DNTypeName('System.EnterpriseServices.Internal.ServerWebConfig')]
  DNServerWebConfig = interface(DNIServerWebConfig)
  ['{31D353B3-0A0A-3986-9B20-3EC4EE90B389}']
  { methods } 

    procedure Create(FilePath: string; FilePrefix: string; out Error: string);
    procedure AddElement(FilePath: string; AssemblyName: string; TypeName: string; ProgId: string; WkoMode: string; out Error: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNServerWebConfig = class(TDNGenericImport<DNServerWebConfigClass, DNServerWebConfig>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNSoapClientImportClass = interface(DNObjectClass)
  ['{E554D222-7F34-5B64-97F5-238981E3A15B}']
  { constructors } 

    {class} function init: DNSoapClientImport;

  end;

  [DNTypeName('System.EnterpriseServices.Internal.SoapClientImport')]
  DNSoapClientImport = interface(DNISoapClientImport)
  ['{346D5B9F-45E1-45C0-AADF-1B7D221E9063}']
  { methods } 

    procedure ProcessClientTlbEx(progId: string; virtualRoot: string; baseUrl: string; authentication: string; assemblyName: string; typeName: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoapClientImport = class(TDNGenericImport<DNSoapClientImportClass, DNSoapClientImport>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNSoapServerTlbClass = interface(DNObjectClass)
  ['{A75771B9-C99E-5402-AB7F-3337610F05F3}']
  { constructors } 

    {class} function init: DNSoapServerTlb;

  end;

  [DNTypeName('System.EnterpriseServices.Internal.SoapServerTlb')]
  DNSoapServerTlb = interface(DNISoapServerTlb)
  ['{F6B6768F-F99E-4152-8ED2-0412F78517FB}']
  { methods } 

    procedure AddServerTlb(progId: string; classId: string; interfaceId: string; srcTlbPath: string; rootWebServer: string; inBaseUrl: string; inVirtualRoot: string; clientActivated: string; wellKnown: string; discoFile: string; operation: string; out strAssemblyName: string; out typeName: string);
    procedure DeleteServerTlb(progId: string; classId: string; interfaceId: string; srcTlbPath: string; rootWebServer: string; baseUrl: string; virtualRoot: string; operation: string; assemblyName: string; typeName: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoapServerTlb = class(TDNGenericImport<DNSoapServerTlbClass, DNSoapServerTlb>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNSoapServerVRootClass = interface(DNObjectClass)
  ['{168252C3-5FE0-5779-9735-360EA93C21E9}']
  { constructors } 

    {class} function init: DNSoapServerVRoot;

  end;

  [DNTypeName('System.EnterpriseServices.Internal.SoapServerVRoot')]
  DNSoapServerVRoot = interface(DNISoapServerVRoot)
  ['{CAA817CC-0C04-4D22-A05C-2B7E162F4E8F}']
  { methods } 

    procedure DeleteVirtualRootEx(rootWebServer: string; inBaseUrl: string; inVirtualRoot: string);
    procedure CreateVirtualRootEx(rootWebServer: string; inBaseUrl: string; inVirtualRoot: string; homePage: string; discoFile: string; secureSockets: string; authentication: string; operation: string; out baseUrl: string; out virtualRoot: string; out physicalPath: string);
    procedure GetVirtualRootStatus(RootWebServer: string; inBaseUrl: string; inVirtualRoot: string; out Exists: string; out SSL: string; out WindowsAuth: string; out Anonymous: string; out HomePage: string; out DiscoFile: string; out PhysicalPath: string; out BaseUrl: string; out VirtualRoot: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoapServerVRoot = class(TDNGenericImport<DNSoapServerVRootClass, DNSoapServerVRoot>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNSoapUtilityClass = interface(DNObjectClass)
  ['{3B8306AE-156A-528F-ABCD-C9304A207401}']
  { constructors } 

    {class} function init: DNSoapUtility;

  end;

  [DNTypeName('System.EnterpriseServices.Internal.SoapUtility')]
  DNSoapUtility = interface(DNISoapUtility)
  ['{5F9A955F-AA55-4127-A32B-33496AA8A44E}']
  { methods } 

    procedure GetServerPhysicalPath(rootWebServer: string; inBaseUrl: string; inVirtualRoot: string; out physicalPath: string);
    procedure Present;
    procedure GetServerBinPath(rootWebServer: string; inBaseUrl: string; inVirtualRoot: string; out binPath: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoapUtility = class(TDNGenericImport<DNSoapUtilityClass, DNSoapUtility>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNRegistrationConfigClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0AEE6864-FC08-5F14-8019-B109ABA24DCF}']
  { constructors } 

    {class} function init: DNRegistrationConfig;

  end;

  [DNTypeName('System.EnterpriseServices.RegistrationConfig')]
  DNRegistrationConfig = interface(DDN.mscorlib.DNObject)
  ['{36DCDA30-DC3B-4D93-BE42-90B2D74C64E7}']
  { getters & setters } 

    function get_AssemblyFile: string;
    procedure set_AssemblyFile(value: string);
    function get_InstallationFlags: DNInstallationFlags;
    procedure set_InstallationFlags(value: DNInstallationFlags);
    function get_Application: string;
    procedure set_Application(value: string);
    function get_TypeLibrary: string;
    procedure set_TypeLibrary(value: string);
    function get_Partition: string;
    procedure set_Partition(value: string);
    function get_ApplicationRootDirectory: string;
    procedure set_ApplicationRootDirectory(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AssemblyFile: string read get_AssemblyFile write set_AssemblyFile;
    property InstallationFlags: DNInstallationFlags read get_InstallationFlags write set_InstallationFlags;
    property Application: string read get_Application write set_Application;
    property TypeLibrary: string read get_TypeLibrary write set_TypeLibrary;
    property Partition: string read get_Partition write set_Partition;
    property ApplicationRootDirectory: string read get_ApplicationRootDirectory write set_ApplicationRootDirectory;
  end;

  TDNRegistrationConfig = class(TDNGenericImport<DNRegistrationConfigClass, DNRegistrationConfig>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNRegistrationErrorInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4B75C714-815C-5B70-97A3-5AA35A46653D}']
  end;

  [DNTypeName('System.EnterpriseServices.RegistrationErrorInfo')]
  DNRegistrationErrorInfo = interface(DDN.mscorlib.DNObject)
  ['{1F7EBE37-827C-3AC2-BEF1-882229B9724E}']
  { getters & setters } 

    function get_MajorRef: string;
    function get_MinorRef: string;
    function get_Name: string;
    function get_ErrorCode: Int32;
    function get_ErrorString: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MajorRef: string read get_MajorRef;
    property MinorRef: string read get_MinorRef;
    property Name: string read get_Name;
    property ErrorCode: Int32 read get_ErrorCode;
    property ErrorString: string read get_ErrorString;
  end;

  TDNRegistrationErrorInfo = class(TDNGenericImport<DNRegistrationErrorInfoClass, DNRegistrationErrorInfo>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNResourcePoolClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E3829389-780C-53D0-976F-3C7982C3DD1D}']
  { constructors } 

    {class} function init(cb: DNResourcePool_TransactionEndDelegate): DNResourcePool;

  end;

  [DNTypeName('System.EnterpriseServices.ResourcePool')]
  DNResourcePool = interface(DDN.mscorlib.DNObject)
  ['{2B498504-E225-3BFA-9F6B-FDBB961FC7CC}']
  { methods } 

    function PutResource(resource: DDN.mscorlib.DNObject): Boolean;
    function GetResource: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNResourcePool = class(TDNGenericImport<DNResourcePoolClass, DNResourcePool>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNSecurityCallContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7A35124B-AEB9-5950-8043-CBA6FABFC98F}']
  { static getter & setter } 

    {class} function get_CurrentCall: DNSecurityCallContext;

  { static propertys } 

    {class} property CurrentCall: DNSecurityCallContext read get_CurrentCall;
  end;

  [DNTypeName('System.EnterpriseServices.SecurityCallContext')]
  DNSecurityCallContext = interface(DDN.mscorlib.DNObject)
  ['{CA1E2FB8-74B9-354B-B5FB-F4E771CC64F1}']
  { getters & setters } 

    function get_IsSecurityEnabled: Boolean;
    function get_DirectCaller: DNSecurityIdentity;
    function get_OriginalCaller: DNSecurityIdentity;
    function get_NumCallers: Int32;
    function get_MinAuthenticationLevel: Int32;
    function get_Callers: DNSecurityCallers;

  { methods } 

    function IsCallerInRole(role: string): Boolean;
    function IsUserInRole(user: string; role: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsSecurityEnabled: Boolean read get_IsSecurityEnabled;
    property DirectCaller: DNSecurityIdentity read get_DirectCaller;
    property OriginalCaller: DNSecurityIdentity read get_OriginalCaller;
    property NumCallers: Int32 read get_NumCallers;
    property MinAuthenticationLevel: Int32 read get_MinAuthenticationLevel;
    property Callers: DNSecurityCallers read get_Callers;
  end;

  TDNSecurityCallContext = class(TDNGenericImport<DNSecurityCallContextClass, DNSecurityCallContext>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNSecurityCallersClass = interface(DNObjectClass)
  ['{94401CE8-5E29-5B0D-B1FB-B7F93514A003}']
  end;

  [DNTypeName('System.EnterpriseServices.SecurityCallers')]
  DNSecurityCallers = interface(DDN.mscorlib.DNIEnumerable)
  ['{DDC8B304-618D-33A7-AD5E-9E4CC7F90A86}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(idx: Int32): DNSecurityIdentity;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[idx: Int32]: DNSecurityIdentity read get_Item; default;
  end;

  TDNSecurityCallers = class(TDNGenericImport<DNSecurityCallersClass, DNSecurityCallers>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNSecurityIdentityClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1595778E-14E9-55A7-91A6-A32B0CAB8426}']
  end;

  [DNTypeName('System.EnterpriseServices.SecurityIdentity')]
  DNSecurityIdentity = interface(DDN.mscorlib.DNObject)
  ['{376B8ABA-A173-346D-88EA-51F506930D68}']
  { getters & setters } 

    function get_AccountName: string;
    function get_AuthenticationService: Int32;
    function get_ImpersonationLevel: DNImpersonationLevelOption;
    function get_AuthenticationLevel: DNAuthenticationOption;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AccountName: string read get_AccountName;
    property AuthenticationService: Int32 read get_AuthenticationService;
    property ImpersonationLevel: DNImpersonationLevelOption read get_ImpersonationLevel;
    property AuthenticationLevel: DNAuthenticationOption read get_AuthenticationLevel;
  end;

  TDNSecurityIdentity = class(TDNGenericImport<DNSecurityIdentityClass, DNSecurityIdentity>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNServiceConfigClass = interface(DDN.mscorlib.DNObjectClass)
  ['{54846460-F05C-5104-96A9-2B38C9909F1C}']
  { constructors } 

    {class} function init: DNServiceConfig;

  end;

  [DNTypeName('System.EnterpriseServices.ServiceConfig')]
  DNServiceConfig = interface(DDN.mscorlib.DNObject)
  ['{29B2A650-9339-3D5A-882D-D5A744A1CA03}']
  { getters & setters } 

    function get_ThreadPool: DNThreadPoolOption;
    procedure set_ThreadPool(value: DNThreadPoolOption);
    function get_Inheritance: DNInheritanceOption;
    procedure set_Inheritance(value: DNInheritanceOption);
    function get_Binding: DNBindingOption;
    procedure set_Binding(value: DNBindingOption);
    function get_Transaction: DNTransactionOption;
    procedure set_Transaction(value: DNTransactionOption);
    function get_IsolationLevel: DNTransactionIsolationLevel;
    procedure set_IsolationLevel(value: DNTransactionIsolationLevel);
    function get_TransactionTimeout: Int32;
    procedure set_TransactionTimeout(value: Int32);
    function get_TipUrl: string;
    procedure set_TipUrl(value: string);
    function get_TransactionDescription: string;
    procedure set_TransactionDescription(value: string);
    function get_BringYourOwnTransaction: DNITransaction;
    procedure set_BringYourOwnTransaction(value: DNITransaction);
    function get_BringYourOwnSystemTransaction: DDN.System.Transactions.DNTransaction;
    procedure set_BringYourOwnSystemTransaction(value: DDN.System.Transactions.DNTransaction);
    function get_Synchronization: DNSynchronizationOption;
    procedure set_Synchronization(value: DNSynchronizationOption);
    function get_IISIntrinsicsEnabled: Boolean;
    procedure set_IISIntrinsicsEnabled(value: Boolean);
    function get_COMTIIntrinsicsEnabled: Boolean;
    procedure set_COMTIIntrinsicsEnabled(value: Boolean);
    function get_TrackingEnabled: Boolean;
    procedure set_TrackingEnabled(value: Boolean);
    function get_TrackingAppName: string;
    procedure set_TrackingAppName(value: string);
    function get_TrackingComponentName: string;
    procedure set_TrackingComponentName(value: string);
    function get_SxsOption: DNSxsOption;
    procedure set_SxsOption(value: DNSxsOption);
    function get_SxsDirectory: string;
    procedure set_SxsDirectory(value: string);
    function get_SxsName: string;
    procedure set_SxsName(value: string);
    function get_PartitionOption: DNPartitionOption;
    procedure set_PartitionOption(value: DNPartitionOption);
    function get_PartitionId: DDN.mscorlib.DNGuid;
    procedure set_PartitionId(value: DDN.mscorlib.DNGuid);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ThreadPool: DNThreadPoolOption read get_ThreadPool write set_ThreadPool;
    property Inheritance: DNInheritanceOption read get_Inheritance write set_Inheritance;
    property Binding: DNBindingOption read get_Binding write set_Binding;
    property Transaction: DNTransactionOption read get_Transaction write set_Transaction;
    property IsolationLevel: DNTransactionIsolationLevel read get_IsolationLevel write set_IsolationLevel;
    property TransactionTimeout: Int32 read get_TransactionTimeout write set_TransactionTimeout;
    property TipUrl: string read get_TipUrl write set_TipUrl;
    property TransactionDescription: string read get_TransactionDescription write set_TransactionDescription;
    property BringYourOwnTransaction: DNITransaction read get_BringYourOwnTransaction write set_BringYourOwnTransaction;
    property BringYourOwnSystemTransaction: DDN.System.Transactions.DNTransaction read get_BringYourOwnSystemTransaction write set_BringYourOwnSystemTransaction;
    property Synchronization: DNSynchronizationOption read get_Synchronization write set_Synchronization;
    property IISIntrinsicsEnabled: Boolean read get_IISIntrinsicsEnabled write set_IISIntrinsicsEnabled;
    property COMTIIntrinsicsEnabled: Boolean read get_COMTIIntrinsicsEnabled write set_COMTIIntrinsicsEnabled;
    property TrackingEnabled: Boolean read get_TrackingEnabled write set_TrackingEnabled;
    property TrackingAppName: string read get_TrackingAppName write set_TrackingAppName;
    property TrackingComponentName: string read get_TrackingComponentName write set_TrackingComponentName;
    property SxsOption: DNSxsOption read get_SxsOption write set_SxsOption;
    property SxsDirectory: string read get_SxsDirectory write set_SxsDirectory;
    property SxsName: string read get_SxsName write set_SxsName;
    property PartitionOption: DNPartitionOption read get_PartitionOption write set_PartitionOption;
    property PartitionId: DDN.mscorlib.DNGuid read get_PartitionId write set_PartitionId;
  end;

  TDNServiceConfig = class(TDNGenericImport<DNServiceConfigClass, DNServiceConfig>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNServiceDomainClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F88486FB-B370-5943-8DB7-24CD780FCBF9}']
  { static methods } 

    {class} procedure Enter(cfg: DNServiceConfig);
    {class} function Leave: DNTransactionStatus;

  end;

  [DNTypeName('System.EnterpriseServices.ServiceDomain')]
  DNServiceDomain = interface(DDN.mscorlib.DNObject)
  ['{C422A96E-89D8-3924-A0B9-5D7D09321B35}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNServiceDomain = class(TDNGenericImport<DNServiceDomainClass, DNServiceDomain>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNSharedPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1230EAEE-0333-53FD-8BDB-BDEBE0B3DADC}']
  end;

  [DNTypeName('System.EnterpriseServices.SharedProperty')]
  DNSharedProperty = interface(DDN.mscorlib.DNObject)
  ['{28FF2394-9D57-32DB-8B8F-11C5394CBDBF}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
  end;

  TDNSharedProperty = class(TDNGenericImport<DNSharedPropertyClass, DNSharedProperty>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNSharedPropertyGroupClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3ED19F68-41CC-52C7-ADD5-223728917378}']
  end;

  [DNTypeName('System.EnterpriseServices.SharedPropertyGroup')]
  DNSharedPropertyGroup = interface(DDN.mscorlib.DNObject)
  ['{ADA150DB-83FA-3667-BCF2-DC561D4A8521}']
  { methods } 

    function CreatePropertyByPosition(position: Int32; out fExists: Boolean): DNSharedProperty;
    function PropertyByPosition(position: Int32): DNSharedProperty;
    function CreateProperty(name: string; out fExists: Boolean): DNSharedProperty;
    function &Property(name: string): DNSharedProperty;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSharedPropertyGroup = class(TDNGenericImport<DNSharedPropertyGroupClass, DNSharedPropertyGroup>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNSharedPropertyGroupManagerClass = interface(DNObjectClass)
  ['{D1996E05-77EC-5093-B8A1-91C6EE61D29D}']
  { constructors } 

    {class} function init: DNSharedPropertyGroupManager;

  end;

  [DNTypeName('System.EnterpriseServices.SharedPropertyGroupManager')]
  DNSharedPropertyGroupManager = interface(DDN.mscorlib.DNIEnumerable)
  ['{A7F4D230-15E9-3C4A-AFF4-1D307B05E2E5}']
  { methods } 

    function CreatePropertyGroup(name: string; out dwIsoMode: DNPropertyLockMode; out dwRelMode: DNPropertyReleaseMode; out fExist: Boolean): DNSharedPropertyGroup;
    function Group(name: string): DNSharedPropertyGroup;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSharedPropertyGroupManager = class(TDNGenericImport<DNSharedPropertyGroupManagerClass, DNSharedPropertyGroupManager>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNRegistrationExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{9C8154A6-E058-55CC-ADC9-8360CD7271DB}']
  { constructors } 

    {class} function init: DNRegistrationException; overload;
    {class} function init(msg: string): DNRegistrationException; overload;
    {class} function init(msg: string; inner: DDN.mscorlib.DNException): DNRegistrationException; overload;

  end;

  [DNTypeName('System.EnterpriseServices.RegistrationException')]
  DNRegistrationException = interface(DDN.mscorlib.DNSystemException)
  ['{8066FB71-AFA1-343E-8070-44AB4F3F85C9}']
  { getters & setters } 

    function get_ErrorInfo: TArray<DNRegistrationErrorInfo>;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; ctx: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ErrorInfo: TArray<DNRegistrationErrorInfo> read get_ErrorInfo;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNRegistrationException = class(TDNGenericImport<DNRegistrationExceptionClass, DNRegistrationException>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNServicedComponentExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{B61E51B1-0E6D-55B3-812D-BE8FF882A3DE}']
  { constructors } 

    {class} function init: DNServicedComponentException; overload;
    {class} function init(message: string): DNServicedComponentException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNServicedComponentException; overload;

  end;

  [DNTypeName('System.EnterpriseServices.ServicedComponentException')]
  DNServicedComponentException = interface(DDN.mscorlib.DNSystemException)
  ['{41FE3F34-02A0-34B0-BB22-FC0D20A153A3}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNServicedComponentException = class(TDNGenericImport<DNServicedComponentExceptionClass, DNServicedComponentException>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNServicedComponentClass = interface(DDN.mscorlib.DNContextBoundObjectClass)
  ['{6E2464DB-DCA1-5E80-8BA7-A0CF63F77F71}']
  { constructors } 

    {class} function init: DNServicedComponent;

  { static methods } 

    {class} procedure DisposeObject(sc: DNServicedComponent);

  end;

  [DNTypeName('System.EnterpriseServices.ServicedComponent')]
  DNServicedComponent = interface(DDN.mscorlib.DNContextBoundObject)
  ['{5F2E1501-189D-3DE1-81F2-CA8EE7C414C4}']
  { methods } 

    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNServicedComponent = class(TDNGenericImport<DNServicedComponentClass, DNServicedComponent>) end;

  //-------------namespace: System.EnterpriseServices.CompensatingResourceManager----------------
  DNCompensatorClass = interface(DNServicedComponentClass)
  ['{A3EF45F7-78D0-51FC-97C3-38D8AC214D88}']
  { constructors } 

    {class} function init: DNCompensator;

  end;

  [DNTypeName('System.EnterpriseServices.CompensatingResourceManager.Compensator')]
  DNCompensator = interface(DNServicedComponent)
  ['{AB558A90-77EC-3C9A-A7E3-7B2260890A84}']
  { getters & setters } 

    function get_Clerk: DNClerk;

  { methods } 

    procedure BeginPrepare;
    function PrepareRecord(rec: DNLogRecord): Boolean;
    function EndPrepare: Boolean;
    procedure BeginCommit(fRecovery: Boolean);
    function CommitRecord(rec: DNLogRecord): Boolean;
    procedure EndCommit;
    procedure BeginAbort(fRecovery: Boolean);
    function AbortRecord(rec: DNLogRecord): Boolean;
    procedure EndAbort;
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Clerk: DNClerk read get_Clerk;
  end;

  TDNCompensator = class(TDNGenericImport<DNCompensatorClass, DNCompensator>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNRegistrationHelperTxClass = interface(DNServicedComponentClass)
  ['{9D787985-1A11-54CE-B1C2-87781CFC733E}']
  { constructors } 

    {class} function init: DNRegistrationHelperTx;

  end;

  [DNTypeName('System.EnterpriseServices.RegistrationHelperTx')]
  DNRegistrationHelperTx = interface(DNServicedComponent)
  ['{C89AC250-E18A-4FC7-ABD5-B8897B6A78A5}']
  { methods } 

    procedure InstallAssembly(assembly: string; out application: string; out tlb: string; installFlags: DNInstallationFlags; sync: DDN.mscorlib.DNObject); overload;
    procedure InstallAssembly(assembly: string; out application: string; partition: string; out tlb: string; installFlags: DNInstallationFlags; sync: DDN.mscorlib.DNObject); overload;
    procedure InstallAssemblyFromConfig(out regConfig: DNRegistrationConfig; sync: DDN.mscorlib.DNObject);
    procedure UninstallAssembly(assembly: string; application: string; sync: DDN.mscorlib.DNObject); overload;
    procedure UninstallAssembly(assembly: string; application: string; partition: string; sync: DDN.mscorlib.DNObject); overload;
    procedure UninstallAssemblyFromConfig(out regConfig: DNRegistrationConfig; sync: DDN.mscorlib.DNObject);
    function IsInTransaction: Boolean;
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRegistrationHelperTx = class(TDNGenericImport<DNRegistrationHelperTxClass, DNRegistrationHelperTx>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNAssemblyLocatorClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{53633913-CE96-5A90-B2A7-51412C5C948F}']
  { constructors } 

    {class} function init: DNAssemblyLocator;

  end;

  [DNTypeName('System.EnterpriseServices.Internal.AssemblyLocator')]
  DNAssemblyLocator = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{458AA3B5-265A-4B75-BC05-9BEA4630CF18}']
  { methods } 

    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAssemblyLocator = class(TDNGenericImport<DNAssemblyLocatorClass, DNAssemblyLocator>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNRegistrationHelperClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{BA9FA7EF-1C46-5229-AB26-A489367FC985}']
  { constructors } 

    {class} function init: DNRegistrationHelper;

  end;

  [DNTypeName('System.EnterpriseServices.RegistrationHelper')]
  DNRegistrationHelper = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{89A86E7B-C229-4008-9BAA-2F5C8411D7E0}']
  { methods } 

    procedure InstallAssembly(assembly: string; out application: string; out tlb: string; installFlags: DNInstallationFlags); overload;
    procedure InstallAssembly(assembly: string; out application: string; partition: string; out tlb: string; installFlags: DNInstallationFlags); overload;
    procedure InstallAssemblyFromConfig(out regConfig: DNRegistrationConfig);
    procedure UninstallAssembly(assembly: string; application: string); overload;
    procedure UninstallAssembly(assembly: string; application: string; partition: string); overload;
    procedure UninstallAssemblyFromConfig(out regConfig: DNRegistrationConfig);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRegistrationHelper = class(TDNGenericImport<DNRegistrationHelperClass, DNRegistrationHelper>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNBOIDClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{1E7A8E3C-A692-5898-AA2C-05E34C5BE0DE}']
  end;

  [DNTypeName('System.EnterpriseServices.BOID')]
  DNBOID = interface(DDN.mscorlib.DNValueType)
  ['{FAABC7E6-B86E-3A2C-8EE9-3A1330C9B0A7}']
  { fields getter & setter } 

   function __fakeFieldGet_rgb: TArray<Byte>;
   procedure __fakeFieldSet_rgb(value: TArray<Byte>);

  { fields } 

   property rgb: TArray<Byte> read __fakeFieldGet_rgb write __fakeFieldSet_rgb;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNBOID = class(TDNGenericImport<DNBOIDClass, DNBOID>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNXACTTRANSINFOClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{DC26BD62-E5EA-59FC-9B56-5D1F9ADC690B}']
  end;

  [DNTypeName('System.EnterpriseServices.XACTTRANSINFO')]
  DNXACTTRANSINFO = interface(DDN.mscorlib.DNValueType)
  ['{39EAA232-3312-3250-B373-E65B0A5521CF}']
  { fields getter & setter } 

   function __fakeFieldGet_uow: DNBOID;
   procedure __fakeFieldSet_uow(value: DNBOID);
   function __fakeFieldGet_isoLevel: Int32;
   procedure __fakeFieldSet_isoLevel(value: Int32);
   function __fakeFieldGet_isoFlags: Int32;
   procedure __fakeFieldSet_isoFlags(value: Int32);
   function __fakeFieldGet_grfTCSupported: Int32;
   procedure __fakeFieldSet_grfTCSupported(value: Int32);
   function __fakeFieldGet_grfRMSupported: Int32;
   procedure __fakeFieldSet_grfRMSupported(value: Int32);
   function __fakeFieldGet_grfTCSupportedRetaining: Int32;
   procedure __fakeFieldSet_grfTCSupportedRetaining(value: Int32);
   function __fakeFieldGet_grfRMSupportedRetaining: Int32;
   procedure __fakeFieldSet_grfRMSupportedRetaining(value: Int32);

  { fields } 

   property uow: DNBOID read __fakeFieldGet_uow write __fakeFieldSet_uow;
   property isoLevel: Int32 read __fakeFieldGet_isoLevel write __fakeFieldSet_isoLevel;
   property isoFlags: Int32 read __fakeFieldGet_isoFlags write __fakeFieldSet_isoFlags;
   property grfTCSupported: Int32 read __fakeFieldGet_grfTCSupported write __fakeFieldSet_grfTCSupported;
   property grfRMSupported: Int32 read __fakeFieldGet_grfRMSupported write __fakeFieldSet_grfRMSupported;
   property grfTCSupportedRetaining: Int32 read __fakeFieldGet_grfTCSupportedRetaining write __fakeFieldSet_grfTCSupportedRetaining;
   property grfRMSupportedRetaining: Int32 read __fakeFieldGet_grfRMSupportedRetaining write __fakeFieldSet_grfRMSupportedRetaining;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNXACTTRANSINFO = class(TDNGenericImport<DNXACTTRANSINFOClass, DNXACTTRANSINFO>) end;


implementation


initialization
  LoadAssemblyModule('System.EnterpriseServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a');

finalization

end.
