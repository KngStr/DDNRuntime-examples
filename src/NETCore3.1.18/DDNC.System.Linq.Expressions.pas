//----------------------------------------------------------------------------
//  System.Linq.Expressions.dll: System.Linq.Expressions, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 3.1.18
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.Linq.Expressions
//  Author: ying32
//----------------------------------------------------------------------------

unit DDNC.System.Linq.Expressions;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.System.Private.CoreLib;

type

{ enums }

  //-------------namespace: System.Linq.Expressions----------------
  [DNTypeName('System.Linq.Expressions.ExpressionType')]
  DNExpressionType = type Integer;
  DNExpressionTypeHelper = record helper for DNExpressionType
  public const
    Add = 0;
    AddChecked = 1;
    And_ = 2;
    AndAlso = 3;
    ArrayLength = 4;
    ArrayIndex = 5;
    Call = 6;
    Coalesce = 7;
    Conditional = 8;
    Constant = 9;
    Convert = 10;
    ConvertChecked = 11;
    Divide = 12;
    Equal = 13;
    ExclusiveOr = 14;
    GreaterThan = 15;
    GreaterThanOrEqual = 16;
    Invoke = 17;
    Lambda = 18;
    LeftShift = 19;
    LessThan = 20;
    LessThanOrEqual = 21;
    ListInit = 22;
    MemberAccess = 23;
    MemberInit = 24;
    Modulo = 25;
    Multiply = 26;
    MultiplyChecked = 27;
    Negate = 28;
    UnaryPlus = 29;
    NegateChecked = 30;
    New = 31;
    NewArrayInit = 32;
    NewArrayBounds = 33;
    Not_ = 34;
    NotEqual = 35;
    Or_ = 36;
    OrElse = 37;
    Parameter = 38;
    Power = 39;
    Quote = 40;
    RightShift = 41;
    Subtract = 42;
    SubtractChecked = 43;
    TypeAs = 44;
    TypeIs = 45;
    Assign = 46;
    Block = 47;
    DebugInfo = 48;
    Decrement = 49;
    Dynamic_ = 50;
    Default_ = 51;
    Extension = 52;
    Goto_ = 53;
    Increment = 54;
    Index = 55;
    Label_ = 56;
    RuntimeVariables = 57;
    Loop = 58;
    Switch = 59;
    Throw = 60;
    Try_ = 61;
    Unbox = 62;
    AddAssign = 63;
    AndAssign = 64;
    DivideAssign = 65;
    ExclusiveOrAssign = 66;
    LeftShiftAssign = 67;
    ModuloAssign = 68;
    MultiplyAssign = 69;
    OrAssign = 70;
    PowerAssign = 71;
    RightShiftAssign = 72;
    SubtractAssign = 73;
    AddAssignChecked = 74;
    MultiplyAssignChecked = 75;
    SubtractAssignChecked = 76;
    PreIncrementAssign = 77;
    PreDecrementAssign = 78;
    PostIncrementAssign = 79;
    PostDecrementAssign = 80;
    TypeEqual = 81;
    OnesComplement = 82;
    IsTrue = 83;
    IsFalse = 84;
  end;


  //-------------namespace: System.Linq.Expressions----------------
  [DNTypeName('System.Linq.Expressions.GotoExpressionKind')]
  DNGotoExpressionKind = type Integer;
  DNGotoExpressionKindHelper = record helper for DNGotoExpressionKind
  public const
    Goto_ = 0;
    Return = 1;
    Break = 2;
    Continue_ = 3;
  end;


  //-------------namespace: System.Linq.Expressions----------------
  [DNTypeName('System.Linq.Expressions.MemberBindingType')]
  DNMemberBindingType = type Integer;
  DNMemberBindingTypeHelper = record helper for DNMemberBindingType
  public const
    Assignment = 0;
    MemberBinding = 1;
    ListBinding = 2;
  end;




type


{ declares }

  DNIQueryable<T> = interface; // type: System.Linq.IQueryable`1, namespace: System.Linq
  DNIOrderedQueryable<T> = interface; // type: System.Linq.IOrderedQueryable`1, namespace: System.Linq
  DNIQueryable = interface; // type: System.Linq.IQueryable, namespace: System.Linq
  DNIOrderedQueryable = interface; // type: System.Linq.IOrderedQueryable, namespace: System.Linq
  DNIDynamicMetaObjectProvider = interface; // type: System.Dynamic.IDynamicMetaObjectProvider, namespace: System.Dynamic
  DNIInvokeOnGetBinder = interface; // type: System.Dynamic.IInvokeOnGetBinder, namespace: System.Dynamic
  DNIArgumentProvider = interface; // type: System.Linq.Expressions.IArgumentProvider, namespace: System.Linq.Expressions
  DNIDynamicExpression = interface; // type: System.Linq.Expressions.IDynamicExpression, namespace: System.Linq.Expressions
  DNIQueryProvider = interface; // type: System.Linq.IQueryProvider, namespace: System.Linq
  DNIRuntimeVariables = interface; // type: System.Runtime.CompilerServices.IRuntimeVariables, namespace: System.Runtime.CompilerServices
  DNDynamicAttribute = interface; // type: System.Runtime.CompilerServices.DynamicAttribute, namespace: System.Runtime.CompilerServices
  DNBindingRestrictions = interface; // type: System.Dynamic.BindingRestrictions, namespace: System.Dynamic
  DNCallInfo = interface; // type: System.Dynamic.CallInfo, namespace: System.Dynamic
  DNDynamicMetaObject = interface; // type: System.Dynamic.DynamicMetaObject, namespace: System.Dynamic
  DNDynamicObject = interface; // type: System.Dynamic.DynamicObject, namespace: System.Dynamic
  DNExpandoObject = interface; // type: System.Dynamic.ExpandoObject, namespace: System.Dynamic
  DNCatchBlock = interface; // type: System.Linq.Expressions.CatchBlock, namespace: System.Linq.Expressions
  DNElementInit = interface; // type: System.Linq.Expressions.ElementInit, namespace: System.Linq.Expressions
  DNExpression = interface; // type: System.Linq.Expressions.Expression, namespace: System.Linq.Expressions
  DNBinaryExpression = interface; // type: System.Linq.Expressions.BinaryExpression, namespace: System.Linq.Expressions
  DNBlockExpression = interface; // type: System.Linq.Expressions.BlockExpression, namespace: System.Linq.Expressions
  DNConditionalExpression = interface; // type: System.Linq.Expressions.ConditionalExpression, namespace: System.Linq.Expressions
  DNConstantExpression = interface; // type: System.Linq.Expressions.ConstantExpression, namespace: System.Linq.Expressions
  DNDebugInfoExpression = interface; // type: System.Linq.Expressions.DebugInfoExpression, namespace: System.Linq.Expressions
  DNDefaultExpression = interface; // type: System.Linq.Expressions.DefaultExpression, namespace: System.Linq.Expressions
  DNDynamicExpression = interface; // type: System.Linq.Expressions.DynamicExpression, namespace: System.Linq.Expressions
  DNGotoExpression = interface; // type: System.Linq.Expressions.GotoExpression, namespace: System.Linq.Expressions
  DNIndexExpression = interface; // type: System.Linq.Expressions.IndexExpression, namespace: System.Linq.Expressions
  DNInvocationExpression = interface; // type: System.Linq.Expressions.InvocationExpression, namespace: System.Linq.Expressions
  DNLabelExpression = interface; // type: System.Linq.Expressions.LabelExpression, namespace: System.Linq.Expressions
  DNLambdaExpression = interface; // type: System.Linq.Expressions.LambdaExpression, namespace: System.Linq.Expressions
  DNExpression<TDelegate> = interface; // type: System.Linq.Expressions.Expression`1, namespace: System.Linq.Expressions
  DNListInitExpression = interface; // type: System.Linq.Expressions.ListInitExpression, namespace: System.Linq.Expressions
  DNLoopExpression = interface; // type: System.Linq.Expressions.LoopExpression, namespace: System.Linq.Expressions
  DNMemberExpression = interface; // type: System.Linq.Expressions.MemberExpression, namespace: System.Linq.Expressions
  DNMemberInitExpression = interface; // type: System.Linq.Expressions.MemberInitExpression, namespace: System.Linq.Expressions
  DNMethodCallExpression = interface; // type: System.Linq.Expressions.MethodCallExpression, namespace: System.Linq.Expressions
  DNNewArrayExpression = interface; // type: System.Linq.Expressions.NewArrayExpression, namespace: System.Linq.Expressions
  DNNewExpression = interface; // type: System.Linq.Expressions.NewExpression, namespace: System.Linq.Expressions
  DNParameterExpression = interface; // type: System.Linq.Expressions.ParameterExpression, namespace: System.Linq.Expressions
  DNRuntimeVariablesExpression = interface; // type: System.Linq.Expressions.RuntimeVariablesExpression, namespace: System.Linq.Expressions
  DNSwitchExpression = interface; // type: System.Linq.Expressions.SwitchExpression, namespace: System.Linq.Expressions
  DNTryExpression = interface; // type: System.Linq.Expressions.TryExpression, namespace: System.Linq.Expressions
  DNTypeBinaryExpression = interface; // type: System.Linq.Expressions.TypeBinaryExpression, namespace: System.Linq.Expressions
  DNUnaryExpression = interface; // type: System.Linq.Expressions.UnaryExpression, namespace: System.Linq.Expressions
  DNExpressionVisitor = interface; // type: System.Linq.Expressions.ExpressionVisitor, namespace: System.Linq.Expressions
  DNDynamicExpressionVisitor = interface; // type: System.Linq.Expressions.DynamicExpressionVisitor, namespace: System.Linq.Expressions
  DNLightLambda = interface; // type: System.Linq.Expressions.Interpreter.LightLambda, namespace: System.Linq.Expressions.Interpreter
  DNLabelTarget = interface; // type: System.Linq.Expressions.LabelTarget, namespace: System.Linq.Expressions
  DNMemberBinding = interface; // type: System.Linq.Expressions.MemberBinding, namespace: System.Linq.Expressions
  DNMemberAssignment = interface; // type: System.Linq.Expressions.MemberAssignment, namespace: System.Linq.Expressions
  DNMemberListBinding = interface; // type: System.Linq.Expressions.MemberListBinding, namespace: System.Linq.Expressions
  DNMemberMemberBinding = interface; // type: System.Linq.Expressions.MemberMemberBinding, namespace: System.Linq.Expressions
  DNSwitchCase = interface; // type: System.Linq.Expressions.SwitchCase, namespace: System.Linq.Expressions
  DNSymbolDocumentInfo = interface; // type: System.Linq.Expressions.SymbolDocumentInfo, namespace: System.Linq.Expressions
  DNCallSite = interface; // type: System.Runtime.CompilerServices.CallSite, namespace: System.Runtime.CompilerServices
  DNCallSite<T> = interface; // type: System.Runtime.CompilerServices.CallSite`1, namespace: System.Runtime.CompilerServices
  DNCallSiteBinder = interface; // type: System.Runtime.CompilerServices.CallSiteBinder, namespace: System.Runtime.CompilerServices
  DNDynamicMetaObjectBinder = interface; // type: System.Dynamic.DynamicMetaObjectBinder, namespace: System.Dynamic
  DNBinaryOperationBinder = interface; // type: System.Dynamic.BinaryOperationBinder, namespace: System.Dynamic
  DNConvertBinder = interface; // type: System.Dynamic.ConvertBinder, namespace: System.Dynamic
  DNCreateInstanceBinder = interface; // type: System.Dynamic.CreateInstanceBinder, namespace: System.Dynamic
  DNDeleteIndexBinder = interface; // type: System.Dynamic.DeleteIndexBinder, namespace: System.Dynamic
  DNDeleteMemberBinder = interface; // type: System.Dynamic.DeleteMemberBinder, namespace: System.Dynamic
  DNGetIndexBinder = interface; // type: System.Dynamic.GetIndexBinder, namespace: System.Dynamic
  DNGetMemberBinder = interface; // type: System.Dynamic.GetMemberBinder, namespace: System.Dynamic
  DNInvokeBinder = interface; // type: System.Dynamic.InvokeBinder, namespace: System.Dynamic
  DNInvokeMemberBinder = interface; // type: System.Dynamic.InvokeMemberBinder, namespace: System.Dynamic
  DNSetIndexBinder = interface; // type: System.Dynamic.SetIndexBinder, namespace: System.Dynamic
  DNSetMemberBinder = interface; // type: System.Dynamic.SetMemberBinder, namespace: System.Dynamic
  DNUnaryOperationBinder = interface; // type: System.Dynamic.UnaryOperationBinder, namespace: System.Dynamic
  DNCallSiteHelpers = interface; // type: System.Runtime.CompilerServices.CallSiteHelpers, namespace: System.Runtime.CompilerServices
  DNCallSiteOps = interface; // type: System.Runtime.CompilerServices.CallSiteOps, namespace: System.Runtime.CompilerServices
  DNClosure = interface; // type: System.Runtime.CompilerServices.Closure, namespace: System.Runtime.CompilerServices
  DNDebugInfoGenerator = interface; // type: System.Runtime.CompilerServices.DebugInfoGenerator, namespace: System.Runtime.CompilerServices
  DNReadOnlyCollectionBuilder<T> = interface; // type: System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1, namespace: System.Runtime.CompilerServices
  DNRuleCache<T> = interface; // type: System.Runtime.CompilerServices.RuleCache`1, namespace: System.Runtime.CompilerServices
  DNRuntimeOps = interface; // type: System.Runtime.CompilerServices.RuntimeOps, namespace: System.Runtime.CompilerServices


{ objects }

  //-------------namespace: System.Linq----------------
  [DNTypeName('System.Linq.IQueryable`1')]
  DNIQueryable<T> = interface(DDNC.System.Private.CoreLib.DNIEnumerable<T>)
  ['{E2C91F76-C000-32D6-B5A1-1BB9AA1B5660}']
  end;

  //-------------namespace: System.Linq----------------
  [DNTypeName('System.Linq.IOrderedQueryable`1')]
  DNIOrderedQueryable<T> = interface(DNIQueryable<T>)
  ['{0FD6D6C3-C6F1-39DA-B3F5-1363BAEA7D94}']
  end;

  //-------------namespace: System.Linq----------------
  [DNTypeName('System.Linq.IQueryable')]
  DNIQueryable = interface(DDNC.System.Private.CoreLib.DNIEnumerable)
  ['{84F6F43C-A9A7-3658-91B4-B41B15CAEFF2}']
  { getters & setters } 

    function get_Expression: DNExpression;
    function get_ElementType: DDNC.System.Private.CoreLib.DNType;
    function get_Provider: DNIQueryProvider;

  { propertys } 

    property Expression: DNExpression read get_Expression;
    property ElementType: DDNC.System.Private.CoreLib.DNType read get_ElementType;
    property Provider: DNIQueryProvider read get_Provider;
  end;

  //-------------namespace: System.Linq----------------
  [DNTypeName('System.Linq.IOrderedQueryable')]
  DNIOrderedQueryable = interface(DNIQueryable)
  ['{E5303F81-6FE2-37CC-893F-1BF7E067D44F}']
  end;

  //-------------namespace: System.Dynamic----------------
  [DNTypeName('System.Dynamic.IDynamicMetaObjectProvider')]
  DNIDynamicMetaObjectProvider = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{B86A98CC-DCC0-3205-8777-7911A07DAAAF}']
  { methods } 

    function GetMetaObject(parameter: DNExpression): DNDynamicMetaObject;

  end;

  //-------------namespace: System.Dynamic----------------
  [DNTypeName('System.Dynamic.IInvokeOnGetBinder')]
  DNIInvokeOnGetBinder = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{ED40980B-63E1-325C-BC22-93E284CA8CD3}']
  { getters & setters } 

    function get_InvokeOnGet: Boolean;

  { propertys } 

    property InvokeOnGet: Boolean read get_InvokeOnGet;
  end;

  //-------------namespace: System.Linq.Expressions----------------
  [DNTypeName('System.Linq.Expressions.IArgumentProvider')]
  DNIArgumentProvider = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{6D1D0B80-3581-33F4-9261-6A4D710EDB5F}']
  { getters & setters } 

    function get_ArgumentCount: Int32;

  { methods } 

    function GetArgument(index: Int32): DNExpression;

  { propertys } 

    property ArgumentCount: Int32 read get_ArgumentCount;
  end;

  //-------------namespace: System.Linq.Expressions----------------
  [DNTypeName('System.Linq.Expressions.IDynamicExpression')]
  DNIDynamicExpression = interface(DNIArgumentProvider)
  ['{F2DF1DD2-D434-34A4-A72E-401019651DEC}']
  { getters & setters } 

    function get_DelegateType: DDNC.System.Private.CoreLib.DNType;

  { methods } 

    function Rewrite(args: TArray<DNExpression>): DNExpression;
    function CreateCallSite: DDNC.System.Private.CoreLib.DNObject;

  { propertys } 

    property DelegateType: DDNC.System.Private.CoreLib.DNType read get_DelegateType;
  end;

  //-------------namespace: System.Linq----------------
  [DNTypeName('System.Linq.IQueryProvider')]
  DNIQueryProvider = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{B9608E43-658E-3B98-9448-8F93B7D6E50C}']
  { methods } 

    function CreateQuery(expression: DNExpression): DNIQueryable;
    function Execute(expression: DNExpression): DDNC.System.Private.CoreLib.DNObject;

  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  [DNTypeName('System.Runtime.CompilerServices.IRuntimeVariables')]
  DNIRuntimeVariables = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{D2E28B60-F4E4-3614-8D43-5DAEEDB31E8E}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DDNC.System.Private.CoreLib.DNObject;
    procedure set_Item(index: Int32; value: DDNC.System.Private.CoreLib.DNObject);

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DDNC.System.Private.CoreLib.DNObject read get_Item write set_Item; default;
  end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDynamicAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{B1C89BCE-AF7D-5C22-8F9E-01EFE0987989}']
  { constructors } 

    {class} function init: DNDynamicAttribute; overload;
    {class} function init(transformFlags: TArray<Boolean>): DNDynamicAttribute; overload;

  end;

  [DNTypeName('System.Runtime.CompilerServices.DynamicAttribute')]
  DNDynamicAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{2A410608-E07A-3894-ABD3-AB1C7A349F43}']
  { getters & setters } 

    function get_TransformFlags: DDNC.System.Private.CoreLib.DNIList<Boolean>;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property TransformFlags: DDNC.System.Private.CoreLib.DNIList<Boolean> read get_TransformFlags;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDynamicAttribute = class(TDNGenericImport<DNDynamicAttributeClass, DNDynamicAttribute>) end;

  //-------------namespace: System.Dynamic----------------
  DNBindingRestrictionsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{E5A0B135-9333-5794-A59E-79D876050480}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNBindingRestrictions;

  { static fields } 

    {class} property Empty: DNBindingRestrictions read __fakeFieldGet_Empty;

  { static methods } 

    {class} function GetTypeRestriction(expression: DNExpression; &type: DDNC.System.Private.CoreLib.DNType): DNBindingRestrictions;
    {class} function GetInstanceRestriction(expression: DNExpression; instance: DDNC.System.Private.CoreLib.DNObject): DNBindingRestrictions;
    {class} function GetExpressionRestriction(expression: DNExpression): DNBindingRestrictions;
    {class} function Combine(contributingObjects: DDNC.System.Private.CoreLib.DNIList<DNDynamicMetaObject>): DNBindingRestrictions;

  end;

  [DNTypeName('System.Dynamic.BindingRestrictions')]
  DNBindingRestrictions = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{6A404DAF-226E-3079-AE81-92D02362EBB5}']
  { methods } 

    function Merge(restrictions: DNBindingRestrictions): DNBindingRestrictions;
    function ToExpression: DNExpression;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNBindingRestrictions = class(TDNGenericImport<DNBindingRestrictionsClass, DNBindingRestrictions>) end;

  //-------------namespace: System.Dynamic----------------
  DNCallInfoClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{0DE7277D-4644-5086-AC91-1094C2FAC5EB}']
  { constructors } 

    {class} function init(argCount: Int32; argNames: TArray<string>): DNCallInfo; overload;
    {class} function init(argCount: Int32; argNames: DDNC.System.Private.CoreLib.DNIEnumerable<string>): DNCallInfo; overload;

  end;

  [DNTypeName('System.Dynamic.CallInfo')]
  DNCallInfo = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{4C999574-A546-38A4-A6D2-94791FA0DBB6}']
  { getters & setters } 

    function get_ArgumentCount: Int32;
    function get_ArgumentNames: DDNC.System.Private.CoreLib.DNReadOnlyCollection<string>;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property ArgumentCount: Int32 read get_ArgumentCount;
    property ArgumentNames: DDNC.System.Private.CoreLib.DNReadOnlyCollection<string> read get_ArgumentNames;
  end;

  TDNCallInfo = class(TDNGenericImport<DNCallInfoClass, DNCallInfo>) end;

  //-------------namespace: System.Dynamic----------------
  DNDynamicMetaObjectClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{E25C4786-C552-5939-A6CC-9EC39B78F84B}']
  { constructors } 

    {class} function init(expression: DNExpression; restrictions: DNBindingRestrictions): DNDynamicMetaObject; overload;
    {class} function init(expression: DNExpression; restrictions: DNBindingRestrictions; value: DDNC.System.Private.CoreLib.DNObject): DNDynamicMetaObject; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_EmptyMetaObjects: TArray<DNDynamicMetaObject>;

  { static fields } 

    {class} property EmptyMetaObjects: TArray<DNDynamicMetaObject> read __fakeFieldGet_EmptyMetaObjects;

  { static methods } 

    {class} function Create(value: DDNC.System.Private.CoreLib.DNObject; expression: DNExpression): DNDynamicMetaObject;

  end;

  [DNTypeName('System.Dynamic.DynamicMetaObject')]
  DNDynamicMetaObject = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{2A755E70-5C63-3AF5-8691-6D2AD090A367}']
  { getters & setters } 

    function get_Expression: DNExpression;
    function get_Restrictions: DNBindingRestrictions;
    function get_Value: DDNC.System.Private.CoreLib.DNObject;
    function get_HasValue: Boolean;
    function get_RuntimeType: DDNC.System.Private.CoreLib.DNType;
    function get_LimitType: DDNC.System.Private.CoreLib.DNType;

  { methods } 

    function BindConvert(binder: DNConvertBinder): DNDynamicMetaObject;
    function BindGetMember(binder: DNGetMemberBinder): DNDynamicMetaObject;
    function BindSetMember(binder: DNSetMemberBinder; value: DNDynamicMetaObject): DNDynamicMetaObject;
    function BindDeleteMember(binder: DNDeleteMemberBinder): DNDynamicMetaObject;
    function BindGetIndex(binder: DNGetIndexBinder; indexes: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function BindSetIndex(binder: DNSetIndexBinder; indexes: TArray<DNDynamicMetaObject>; value: DNDynamicMetaObject): DNDynamicMetaObject;
    function BindDeleteIndex(binder: DNDeleteIndexBinder; indexes: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function BindInvokeMember(binder: DNInvokeMemberBinder; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function BindInvoke(binder: DNInvokeBinder; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function BindCreateInstance(binder: DNCreateInstanceBinder; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject;
    function BindUnaryOperation(binder: DNUnaryOperationBinder): DNDynamicMetaObject;
    function BindBinaryOperation(binder: DNBinaryOperationBinder; arg: DNDynamicMetaObject): DNDynamicMetaObject;
    function GetDynamicMemberNames: DDNC.System.Private.CoreLib.DNIEnumerable<string>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Expression: DNExpression read get_Expression;
    property Restrictions: DNBindingRestrictions read get_Restrictions;
    property Value: DDNC.System.Private.CoreLib.DNObject read get_Value;
    property HasValue: Boolean read get_HasValue;
    property RuntimeType: DDNC.System.Private.CoreLib.DNType read get_RuntimeType;
    property LimitType: DDNC.System.Private.CoreLib.DNType read get_LimitType;
  end;

  TDNDynamicMetaObject = class(TDNGenericImport<DNDynamicMetaObjectClass, DNDynamicMetaObject>) end;

  //-------------namespace: System.Dynamic----------------
  DNDynamicObjectClass = interface(DNObjectClass)
  ['{A5A20B39-FC36-51F5-B3B9-54FF2819308B}']
  end;

  [DNTypeName('System.Dynamic.DynamicObject')]
  DNDynamicObject = interface(DNIDynamicMetaObjectProvider)
  ['{72553FBC-45A4-32A5-AD52-30D4C38EA38F}']
  { methods } 

    function TryGetMember(binder: DNGetMemberBinder; out result: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function TrySetMember(binder: DNSetMemberBinder; value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function TryDeleteMember(binder: DNDeleteMemberBinder): Boolean;
    function TryInvokeMember(binder: DNInvokeMemberBinder; args: TArray<DDNC.System.Private.CoreLib.DNObject>; out result: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function TryConvert(binder: DNConvertBinder; out result: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function TryCreateInstance(binder: DNCreateInstanceBinder; args: TArray<DDNC.System.Private.CoreLib.DNObject>; out result: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function TryInvoke(binder: DNInvokeBinder; args: TArray<DDNC.System.Private.CoreLib.DNObject>; out result: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function TryBinaryOperation(binder: DNBinaryOperationBinder; arg: DDNC.System.Private.CoreLib.DNObject; out result: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function TryUnaryOperation(binder: DNUnaryOperationBinder; out result: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function TryGetIndex(binder: DNGetIndexBinder; indexes: TArray<DDNC.System.Private.CoreLib.DNObject>; out result: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function TrySetIndex(binder: DNSetIndexBinder; indexes: TArray<DDNC.System.Private.CoreLib.DNObject>; value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function TryDeleteIndex(binder: DNDeleteIndexBinder; indexes: TArray<DDNC.System.Private.CoreLib.DNObject>): Boolean;
    function GetDynamicMemberNames: DDNC.System.Private.CoreLib.DNIEnumerable<string>;
    function GetMetaObject(parameter: DNExpression): DNDynamicMetaObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNDynamicObject = class(TDNGenericImport<DNDynamicObjectClass, DNDynamicObject>) end;

  //-------------namespace: System.Dynamic----------------
  DNExpandoObjectClass = interface(DNObjectClass)
  ['{8C831783-D10A-536E-842B-8B38B7037ED6}']
  { constructors } 

    {class} function init: DNExpandoObject;

  end;

  [DNTypeName('System.Dynamic.ExpandoObject')]
  DNExpandoObject = interface(DNIDynamicMetaObjectProvider)
  ['{9E18C8F6-5B38-3436-8881-14D07AE0A2D5}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNExpandoObject = class(TDNGenericImport<DNExpandoObjectClass, DNExpandoObject>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNCatchBlockClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{7CC1D2BD-F5DC-55FB-A20C-1492FF4A1DAB}']
  end;

  [DNTypeName('System.Linq.Expressions.CatchBlock')]
  DNCatchBlock = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{81F276D3-1047-3299-8E3F-30BBD135B67A}']
  { getters & setters } 

    function get_Variable: DNParameterExpression;
    function get_Test: DDNC.System.Private.CoreLib.DNType;
    function get_Body: DNExpression;
    function get_Filter: DNExpression;

  { methods } 

    function ToString: string;
    function Update(variable: DNParameterExpression; filter: DNExpression; body: DNExpression): DNCatchBlock;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Variable: DNParameterExpression read get_Variable;
    property Test: DDNC.System.Private.CoreLib.DNType read get_Test;
    property Body: DNExpression read get_Body;
    property Filter: DNExpression read get_Filter;
  end;

  TDNCatchBlock = class(TDNGenericImport<DNCatchBlockClass, DNCatchBlock>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNElementInitClass = interface(DNObjectClass)
  ['{AD4D3E5E-E61F-5D80-AA50-44C7AA467A9C}']
  end;

  [DNTypeName('System.Linq.Expressions.ElementInit')]
  DNElementInit = interface(DNIArgumentProvider)
  ['{627498EB-F554-3878-BAEF-B3547B38518B}']
  { getters & setters } 

    function get_AddMethod: DDNC.System.Private.CoreLib.DNMethodInfo;
    function get_Arguments: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression>;
    function get_ArgumentCount: Int32;

  { methods } 

    function GetArgument(index: Int32): DNExpression;
    function ToString: string;
    function Update(arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNElementInit;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property AddMethod: DDNC.System.Private.CoreLib.DNMethodInfo read get_AddMethod;
    property Arguments: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression> read get_Arguments;
    property ArgumentCount: Int32 read get_ArgumentCount;
  end;

  TDNElementInit = class(TDNGenericImport<DNElementInitClass, DNElementInit>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNExpressionClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{93EFAD2E-0B6D-5BA5-B582-FE123BAE6AEC}']
  { static methods } 

    {class} function Switch(&type: DDNC.System.Private.CoreLib.DNType; switchValue: DNExpression; defaultBody: DNExpression; comparison: DDNC.System.Private.CoreLib.DNMethodInfo; cases: TArray<DNSwitchCase>): DNSwitchExpression; overload;
    {class} function Switch(switchValue: DNExpression; defaultBody: DNExpression; comparison: DDNC.System.Private.CoreLib.DNMethodInfo; cases: DDNC.System.Private.CoreLib.DNIEnumerable<DNSwitchCase>): DNSwitchExpression; overload;
    {class} function Switch(&type: DDNC.System.Private.CoreLib.DNType; switchValue: DNExpression; defaultBody: DNExpression; comparison: DDNC.System.Private.CoreLib.DNMethodInfo; cases: DDNC.System.Private.CoreLib.DNIEnumerable<DNSwitchCase>): DNSwitchExpression; overload;
    {class} function SymbolDocument(fileName: string): DNSymbolDocumentInfo; overload;
    {class} function SymbolDocument(fileName: string; language: DDNC.System.Private.CoreLib.DNGuid): DNSymbolDocumentInfo; overload;
    {class} function SymbolDocument(fileName: string; language: DDNC.System.Private.CoreLib.DNGuid; languageVendor: DDNC.System.Private.CoreLib.DNGuid): DNSymbolDocumentInfo; overload;
    {class} function SymbolDocument(fileName: string; language: DDNC.System.Private.CoreLib.DNGuid; languageVendor: DDNC.System.Private.CoreLib.DNGuid; documentType: DDNC.System.Private.CoreLib.DNGuid): DNSymbolDocumentInfo; overload;
    {class} function TryFault(body: DNExpression; fault: DNExpression): DNTryExpression;
    {class} function TryFinally(body: DNExpression; &finally: DNExpression): DNTryExpression;
    {class} function TryCatch(body: DNExpression; handlers: TArray<DNCatchBlock>): DNTryExpression;
    {class} function TryCatchFinally(body: DNExpression; &finally: DNExpression; handlers: TArray<DNCatchBlock>): DNTryExpression;
    {class} function MakeTry(&type: DDNC.System.Private.CoreLib.DNType; body: DNExpression; &finally: DNExpression; fault: DNExpression; handlers: DDNC.System.Private.CoreLib.DNIEnumerable<DNCatchBlock>): DNTryExpression;
    {class} function TypeIs(expression: DNExpression; &type: DDNC.System.Private.CoreLib.DNType): DNTypeBinaryExpression;
    {class} function TypeEqual(expression: DNExpression; &type: DDNC.System.Private.CoreLib.DNType): DNTypeBinaryExpression;
    {class} function MakeUnary(unaryType: DNExpressionType; operand: DNExpression; &type: DDNC.System.Private.CoreLib.DNType): DNUnaryExpression; overload;
    {class} function MakeUnary(unaryType: DNExpressionType; operand: DNExpression; &type: DDNC.System.Private.CoreLib.DNType; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function Negate(expression: DNExpression): DNUnaryExpression; overload;
    {class} function Negate(expression: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function UnaryPlus(expression: DNExpression): DNUnaryExpression; overload;
    {class} function UnaryPlus(expression: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function NegateChecked(expression: DNExpression): DNUnaryExpression; overload;
    {class} function NegateChecked(expression: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function &Not(expression: DNExpression): DNUnaryExpression; overload;
    {class} function &Not(expression: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function IsFalse(expression: DNExpression): DNUnaryExpression; overload;
    {class} function IsFalse(expression: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function IsTrue(expression: DNExpression): DNUnaryExpression; overload;
    {class} function IsTrue(expression: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function OnesComplement(expression: DNExpression): DNUnaryExpression; overload;
    {class} function OnesComplement(expression: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function TypeAs(expression: DNExpression; &type: DDNC.System.Private.CoreLib.DNType): DNUnaryExpression;
    {class} function Unbox(expression: DNExpression; &type: DDNC.System.Private.CoreLib.DNType): DNUnaryExpression;
    {class} function Convert(expression: DNExpression; &type: DDNC.System.Private.CoreLib.DNType): DNUnaryExpression; overload;
    {class} function Convert(expression: DNExpression; &type: DDNC.System.Private.CoreLib.DNType; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function ConvertChecked(expression: DNExpression; &type: DDNC.System.Private.CoreLib.DNType): DNUnaryExpression; overload;
    {class} function ConvertChecked(expression: DNExpression; &type: DDNC.System.Private.CoreLib.DNType; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function ArrayLength(&array: DNExpression): DNUnaryExpression;
    {class} function Quote(expression: DNExpression): DNUnaryExpression;
    {class} function Rethrow: DNUnaryExpression; overload;
    {class} function Rethrow(&type: DDNC.System.Private.CoreLib.DNType): DNUnaryExpression; overload;
    {class} function Throw(value: DNExpression): DNUnaryExpression; overload;
    {class} function Throw(value: DNExpression; &type: DDNC.System.Private.CoreLib.DNType): DNUnaryExpression; overload;
    {class} function Increment(expression: DNExpression): DNUnaryExpression; overload;
    {class} function Increment(expression: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function Decrement(expression: DNExpression): DNUnaryExpression; overload;
    {class} function Decrement(expression: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function PreIncrementAssign(expression: DNExpression): DNUnaryExpression; overload;
    {class} function PreIncrementAssign(expression: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function PreDecrementAssign(expression: DNExpression): DNUnaryExpression; overload;
    {class} function PreDecrementAssign(expression: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function PostIncrementAssign(expression: DNExpression): DNUnaryExpression; overload;
    {class} function PostIncrementAssign(expression: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function PostDecrementAssign(expression: DNExpression): DNUnaryExpression; overload;
    {class} function PostDecrementAssign(expression: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNUnaryExpression; overload;
    {class} function ListInit(newExpression: DNNewExpression; initializers: DDNC.System.Private.CoreLib.DNIEnumerable<DNElementInit>): DNListInitExpression; overload;
    {class} function Loop(body: DNExpression): DNLoopExpression; overload;
    {class} function Loop(body: DNExpression; break: DNLabelTarget): DNLoopExpression; overload;
    {class} function Loop(body: DNExpression; break: DNLabelTarget; &continue: DNLabelTarget): DNLoopExpression; overload;
    {class} function Bind(member: DDNC.System.Private.CoreLib.DNMemberInfo; expression: DNExpression): DNMemberAssignment; overload;
    {class} function Bind(propertyAccessor: DDNC.System.Private.CoreLib.DNMethodInfo; expression: DNExpression): DNMemberAssignment; overload;
    {class} function Field(expression: DNExpression; field: DDNC.System.Private.CoreLib.DNFieldInfo): DNMemberExpression; overload;
    {class} function Field(expression: DNExpression; fieldName: string): DNMemberExpression; overload;
    {class} function Field(expression: DNExpression; &type: DDNC.System.Private.CoreLib.DNType; fieldName: string): DNMemberExpression; overload;
    {class} function &Property(expression: DNExpression; propertyName: string): DNMemberExpression; overload;
    {class} function &Property(expression: DNExpression; &type: DDNC.System.Private.CoreLib.DNType; propertyName: string): DNMemberExpression; overload;
    {class} function &Property(expression: DNExpression; &property: DDNC.System.Private.CoreLib.DNPropertyInfo): DNMemberExpression; overload;
    {class} function &Property(expression: DNExpression; propertyAccessor: DDNC.System.Private.CoreLib.DNMethodInfo): DNMemberExpression; overload;
    {class} function PropertyOrField(expression: DNExpression; propertyOrFieldName: string): DNMemberExpression;
    {class} function MakeMemberAccess(expression: DNExpression; member: DDNC.System.Private.CoreLib.DNMemberInfo): DNMemberExpression;
    {class} function MemberInit(newExpression: DNNewExpression; bindings: TArray<DNMemberBinding>): DNMemberInitExpression; overload;
    {class} function MemberInit(newExpression: DNNewExpression; bindings: DDNC.System.Private.CoreLib.DNIEnumerable<DNMemberBinding>): DNMemberInitExpression; overload;
    {class} function ListBind(member: DDNC.System.Private.CoreLib.DNMemberInfo; initializers: TArray<DNElementInit>): DNMemberListBinding; overload;
    {class} function ListBind(member: DDNC.System.Private.CoreLib.DNMemberInfo; initializers: DDNC.System.Private.CoreLib.DNIEnumerable<DNElementInit>): DNMemberListBinding; overload;
    {class} function ListBind(propertyAccessor: DDNC.System.Private.CoreLib.DNMethodInfo; initializers: TArray<DNElementInit>): DNMemberListBinding; overload;
    {class} function ListBind(propertyAccessor: DDNC.System.Private.CoreLib.DNMethodInfo; initializers: DDNC.System.Private.CoreLib.DNIEnumerable<DNElementInit>): DNMemberListBinding; overload;
    {class} function MemberBind(member: DDNC.System.Private.CoreLib.DNMemberInfo; bindings: TArray<DNMemberBinding>): DNMemberMemberBinding; overload;
    {class} function MemberBind(member: DDNC.System.Private.CoreLib.DNMemberInfo; bindings: DDNC.System.Private.CoreLib.DNIEnumerable<DNMemberBinding>): DNMemberMemberBinding; overload;
    {class} function MemberBind(propertyAccessor: DDNC.System.Private.CoreLib.DNMethodInfo; bindings: TArray<DNMemberBinding>): DNMemberMemberBinding; overload;
    {class} function MemberBind(propertyAccessor: DDNC.System.Private.CoreLib.DNMethodInfo; bindings: DDNC.System.Private.CoreLib.DNIEnumerable<DNMemberBinding>): DNMemberMemberBinding; overload;
    {class} function Call(method: DDNC.System.Private.CoreLib.DNMethodInfo; arg0: DNExpression): DNMethodCallExpression; overload;
    {class} function Call(method: DDNC.System.Private.CoreLib.DNMethodInfo; arg0: DNExpression; arg1: DNExpression): DNMethodCallExpression; overload;
    {class} function Call(method: DDNC.System.Private.CoreLib.DNMethodInfo; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNMethodCallExpression; overload;
    {class} function Call(method: DDNC.System.Private.CoreLib.DNMethodInfo; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression): DNMethodCallExpression; overload;
    {class} function Call(method: DDNC.System.Private.CoreLib.DNMethodInfo; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression; arg4: DNExpression): DNMethodCallExpression; overload;
    {class} function Call(method: DDNC.System.Private.CoreLib.DNMethodInfo; arguments: TArray<DNExpression>): DNMethodCallExpression; overload;
    {class} function Call(method: DDNC.System.Private.CoreLib.DNMethodInfo; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNMethodCallExpression; overload;
    {class} function Call(instance: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNMethodCallExpression; overload;
    {class} function Call(instance: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; arguments: TArray<DNExpression>): DNMethodCallExpression; overload;
    {class} function Call(instance: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; arg0: DNExpression; arg1: DNExpression): DNMethodCallExpression; overload;
    {class} function Call(instance: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNMethodCallExpression; overload;
    {class} function Call(instance: DNExpression; methodName: string; typeArguments: TArray<DDNC.System.Private.CoreLib.DNType>; arguments: TArray<DNExpression>): DNMethodCallExpression; overload;
    {class} function Call(&type: DDNC.System.Private.CoreLib.DNType; methodName: string; typeArguments: TArray<DDNC.System.Private.CoreLib.DNType>; arguments: TArray<DNExpression>): DNMethodCallExpression; overload;
    {class} function Call(instance: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNMethodCallExpression; overload;
    {class} function ArrayIndex(&array: DNExpression; indexes: TArray<DNExpression>): DNMethodCallExpression; overload;
    {class} function ArrayIndex(&array: DNExpression; indexes: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNMethodCallExpression; overload;
    {class} function NewArrayInit(&type: DDNC.System.Private.CoreLib.DNType; initializers: TArray<DNExpression>): DNNewArrayExpression; overload;
    {class} function NewArrayInit(&type: DDNC.System.Private.CoreLib.DNType; initializers: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNNewArrayExpression; overload;
    {class} function NewArrayBounds(&type: DDNC.System.Private.CoreLib.DNType; bounds: TArray<DNExpression>): DNNewArrayExpression; overload;
    {class} function NewArrayBounds(&type: DDNC.System.Private.CoreLib.DNType; bounds: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNNewArrayExpression; overload;
    {class} function New(&constructor: DDNC.System.Private.CoreLib.DNConstructorInfo): DNNewExpression; overload;
    {class} function New(&constructor: DDNC.System.Private.CoreLib.DNConstructorInfo; arguments: TArray<DNExpression>): DNNewExpression; overload;
    {class} function New(&constructor: DDNC.System.Private.CoreLib.DNConstructorInfo; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNNewExpression; overload;
    {class} function New(&constructor: DDNC.System.Private.CoreLib.DNConstructorInfo; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>; members: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNMemberInfo>): DNNewExpression; overload;
    {class} function New(&constructor: DDNC.System.Private.CoreLib.DNConstructorInfo; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>; members: TArray<DDNC.System.Private.CoreLib.DNMemberInfo>): DNNewExpression; overload;
    {class} function New(&type: DDNC.System.Private.CoreLib.DNType): DNNewExpression; overload;
    {class} function Parameter(&type: DDNC.System.Private.CoreLib.DNType): DNParameterExpression; overload;
    {class} function Variable(&type: DDNC.System.Private.CoreLib.DNType): DNParameterExpression; overload;
    {class} function Parameter(&type: DDNC.System.Private.CoreLib.DNType; name: string): DNParameterExpression; overload;
    {class} function Variable(&type: DDNC.System.Private.CoreLib.DNType; name: string): DNParameterExpression; overload;
    {class} function RuntimeVariables(variables: TArray<DNParameterExpression>): DNRuntimeVariablesExpression; overload;
    {class} function RuntimeVariables(variables: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>): DNRuntimeVariablesExpression; overload;
    {class} function SwitchCase(body: DNExpression; testValues: TArray<DNExpression>): DNSwitchCase; overload;
    {class} function SwitchCase(body: DNExpression; testValues: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNSwitchCase; overload;
    {class} function Switch(switchValue: DNExpression; cases: TArray<DNSwitchCase>): DNSwitchExpression; overload;
    {class} function Switch(switchValue: DNExpression; defaultBody: DNExpression; cases: TArray<DNSwitchCase>): DNSwitchExpression; overload;
    {class} function Switch(switchValue: DNExpression; defaultBody: DNExpression; comparison: DDNC.System.Private.CoreLib.DNMethodInfo; cases: TArray<DNSwitchCase>): DNSwitchExpression; overload;
    {class} function MakeDynamic(delegateType: DDNC.System.Private.CoreLib.DNType; binder: DNCallSiteBinder; arg0: DNExpression; arg1: DNExpression): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDNC.System.Private.CoreLib.DNType; binder: DNCallSiteBinder; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDNC.System.Private.CoreLib.DNType; binder: DNCallSiteBinder; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDNC.System.Private.CoreLib.DNType; binder: DNCallSiteBinder; arguments: TArray<DNExpression>): DNDynamicExpression; overload;
    {class} function Break(target: DNLabelTarget): DNGotoExpression; overload;
    {class} function Break(target: DNLabelTarget; value: DNExpression): DNGotoExpression; overload;
    {class} function Break(target: DNLabelTarget; &type: DDNC.System.Private.CoreLib.DNType): DNGotoExpression; overload;
    {class} function Break(target: DNLabelTarget; value: DNExpression; &type: DDNC.System.Private.CoreLib.DNType): DNGotoExpression; overload;
    {class} function &Continue(target: DNLabelTarget): DNGotoExpression; overload;
    {class} function &Continue(target: DNLabelTarget; &type: DDNC.System.Private.CoreLib.DNType): DNGotoExpression; overload;
    {class} function Return(target: DNLabelTarget): DNGotoExpression; overload;
    {class} function Return(target: DNLabelTarget; &type: DDNC.System.Private.CoreLib.DNType): DNGotoExpression; overload;
    {class} function Return(target: DNLabelTarget; value: DNExpression): DNGotoExpression; overload;
    {class} function Return(target: DNLabelTarget; value: DNExpression; &type: DDNC.System.Private.CoreLib.DNType): DNGotoExpression; overload;
    {class} function &Goto(target: DNLabelTarget): DNGotoExpression; overload;
    {class} function &Goto(target: DNLabelTarget; &type: DDNC.System.Private.CoreLib.DNType): DNGotoExpression; overload;
    {class} function &Goto(target: DNLabelTarget; value: DNExpression): DNGotoExpression; overload;
    {class} function &Goto(target: DNLabelTarget; value: DNExpression; &type: DDNC.System.Private.CoreLib.DNType): DNGotoExpression; overload;
    {class} function MakeGoto(kind: DNGotoExpressionKind; target: DNLabelTarget; value: DNExpression; &type: DDNC.System.Private.CoreLib.DNType): DNGotoExpression;
    {class} function MakeIndex(instance: DNExpression; indexer: DDNC.System.Private.CoreLib.DNPropertyInfo; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNIndexExpression;
    {class} function ArrayAccess(&array: DNExpression; indexes: TArray<DNExpression>): DNIndexExpression; overload;
    {class} function ArrayAccess(&array: DNExpression; indexes: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNIndexExpression; overload;
    {class} function &Property(instance: DNExpression; propertyName: string; arguments: TArray<DNExpression>): DNIndexExpression; overload;
    {class} function &Property(instance: DNExpression; indexer: DDNC.System.Private.CoreLib.DNPropertyInfo; arguments: TArray<DNExpression>): DNIndexExpression; overload;
    {class} function &Property(instance: DNExpression; indexer: DDNC.System.Private.CoreLib.DNPropertyInfo; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNIndexExpression; overload;
    {class} function Invoke(expression: DNExpression; arguments: TArray<DNExpression>): DNInvocationExpression; overload;
    {class} function Invoke(expression: DNExpression; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNInvocationExpression; overload;
    {class} function &Label(target: DNLabelTarget): DNLabelExpression; overload;
    {class} function &Label(target: DNLabelTarget; defaultValue: DNExpression): DNLabelExpression; overload;
    {class} function &Label: DNLabelTarget; overload;
    {class} function &Label(name: string): DNLabelTarget; overload;
    {class} function &Label(&type: DDNC.System.Private.CoreLib.DNType): DNLabelTarget; overload;
    {class} function &Label(&type: DDNC.System.Private.CoreLib.DNType; name: string): DNLabelTarget; overload;
    {class} function Lambda(body: DNExpression; parameters: TArray<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(body: DNExpression; tailCall: Boolean; parameters: TArray<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(body: DNExpression; parameters: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(body: DNExpression; tailCall: Boolean; parameters: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(delegateType: DDNC.System.Private.CoreLib.DNType; body: DNExpression; parameters: TArray<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(delegateType: DDNC.System.Private.CoreLib.DNType; body: DNExpression; tailCall: Boolean; parameters: TArray<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(delegateType: DDNC.System.Private.CoreLib.DNType; body: DNExpression; parameters: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(delegateType: DDNC.System.Private.CoreLib.DNType; body: DNExpression; tailCall: Boolean; parameters: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(body: DNExpression; name: string; parameters: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(body: DNExpression; name: string; tailCall: Boolean; parameters: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(delegateType: DDNC.System.Private.CoreLib.DNType; body: DNExpression; name: string; parameters: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function Lambda(delegateType: DDNC.System.Private.CoreLib.DNType; body: DNExpression; name: string; tailCall: Boolean; parameters: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>): DNLambdaExpression; overload;
    {class} function GetFuncType(typeArgs: TArray<DDNC.System.Private.CoreLib.DNType>): DDNC.System.Private.CoreLib.DNType;
    {class} function TryGetFuncType(typeArgs: TArray<DDNC.System.Private.CoreLib.DNType>; out funcType: DDNC.System.Private.CoreLib.DNType): Boolean;
    {class} function GetActionType(typeArgs: TArray<DDNC.System.Private.CoreLib.DNType>): DDNC.System.Private.CoreLib.DNType;
    {class} function TryGetActionType(typeArgs: TArray<DDNC.System.Private.CoreLib.DNType>; out actionType: DDNC.System.Private.CoreLib.DNType): Boolean;
    {class} function GetDelegateType(typeArgs: TArray<DDNC.System.Private.CoreLib.DNType>): DDNC.System.Private.CoreLib.DNType;
    {class} function ListInit(newExpression: DNNewExpression; initializers: TArray<DNExpression>): DNListInitExpression; overload;
    {class} function ListInit(newExpression: DNNewExpression; initializers: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNListInitExpression; overload;
    {class} function ListInit(newExpression: DNNewExpression; addMethod: DDNC.System.Private.CoreLib.DNMethodInfo; initializers: TArray<DNExpression>): DNListInitExpression; overload;
    {class} function ListInit(newExpression: DNNewExpression; addMethod: DDNC.System.Private.CoreLib.DNMethodInfo; initializers: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNListInitExpression; overload;
    {class} function ListInit(newExpression: DNNewExpression; initializers: TArray<DNElementInit>): DNListInitExpression; overload;
    {class} function LeftShift(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function LeftShift(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function LeftShiftAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function LeftShiftAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function LeftShiftAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function RightShift(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function RightShift(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function RightShiftAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function RightShiftAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function RightShiftAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function &And(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function &And(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function AndAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function AndAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function AndAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function &Or(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function &Or(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function OrAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function OrAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function OrAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function ExclusiveOr(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function ExclusiveOr(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function ExclusiveOrAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function ExclusiveOrAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function ExclusiveOrAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function Power(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function Power(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function PowerAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function PowerAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function PowerAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function ArrayIndex(&array: DNExpression; index: DNExpression): DNBinaryExpression; overload;
    {class} function Block(arg0: DNExpression; arg1: DNExpression): DNBlockExpression; overload;
    {class} function Block(arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNBlockExpression; overload;
    {class} function Block(arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression): DNBlockExpression; overload;
    {class} function Block(arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression; arg4: DNExpression): DNBlockExpression; overload;
    {class} function Block(expressions: TArray<DNExpression>): DNBlockExpression; overload;
    {class} function Block(expressions: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNBlockExpression; overload;
    {class} function Block(&type: DDNC.System.Private.CoreLib.DNType; expressions: TArray<DNExpression>): DNBlockExpression; overload;
    {class} function Block(&type: DDNC.System.Private.CoreLib.DNType; expressions: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNBlockExpression; overload;
    {class} function Block(variables: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>; expressions: TArray<DNExpression>): DNBlockExpression; overload;
    {class} function Block(&type: DDNC.System.Private.CoreLib.DNType; variables: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>; expressions: TArray<DNExpression>): DNBlockExpression; overload;
    {class} function Block(variables: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>; expressions: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNBlockExpression; overload;
    {class} function Block(&type: DDNC.System.Private.CoreLib.DNType; variables: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>; expressions: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNBlockExpression; overload;
    {class} function Catch(&type: DDNC.System.Private.CoreLib.DNType; body: DNExpression): DNCatchBlock; overload;
    {class} function Catch(variable: DNParameterExpression; body: DNExpression): DNCatchBlock; overload;
    {class} function Catch(&type: DDNC.System.Private.CoreLib.DNType; body: DNExpression; filter: DNExpression): DNCatchBlock; overload;
    {class} function Catch(variable: DNParameterExpression; body: DNExpression; filter: DNExpression): DNCatchBlock; overload;
    {class} function MakeCatchBlock(&type: DDNC.System.Private.CoreLib.DNType; variable: DNParameterExpression; body: DNExpression; filter: DNExpression): DNCatchBlock;
    {class} function Condition(test: DNExpression; ifTrue: DNExpression; ifFalse: DNExpression): DNConditionalExpression; overload;
    {class} function Condition(test: DNExpression; ifTrue: DNExpression; ifFalse: DNExpression; &type: DDNC.System.Private.CoreLib.DNType): DNConditionalExpression; overload;
    {class} function IfThen(test: DNExpression; ifTrue: DNExpression): DNConditionalExpression;
    {class} function IfThenElse(test: DNExpression; ifTrue: DNExpression; ifFalse: DNExpression): DNConditionalExpression;
    {class} function Constant(value: DDNC.System.Private.CoreLib.DNObject): DNConstantExpression; overload;
    {class} function Constant(value: DDNC.System.Private.CoreLib.DNObject; &type: DDNC.System.Private.CoreLib.DNType): DNConstantExpression; overload;
    {class} function DebugInfo(document: DNSymbolDocumentInfo; startLine: Int32; startColumn: Int32; endLine: Int32; endColumn: Int32): DNDebugInfoExpression;
    {class} function ClearDebugInfo(document: DNSymbolDocumentInfo): DNDebugInfoExpression;
    {class} function Empty: DNDefaultExpression;
    {class} function &Default(&type: DDNC.System.Private.CoreLib.DNType): DNDefaultExpression;
    {class} function ElementInit(addMethod: DDNC.System.Private.CoreLib.DNMethodInfo; arguments: TArray<DNExpression>): DNElementInit; overload;
    {class} function ElementInit(addMethod: DDNC.System.Private.CoreLib.DNMethodInfo; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNElementInit; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDNC.System.Private.CoreLib.DNType; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDNC.System.Private.CoreLib.DNType; arg0: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDNC.System.Private.CoreLib.DNType; arg0: DNExpression; arg1: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDNC.System.Private.CoreLib.DNType; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDNC.System.Private.CoreLib.DNType; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDNC.System.Private.CoreLib.DNType; arguments: TArray<DNExpression>): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDNC.System.Private.CoreLib.DNType; binder: DNCallSiteBinder; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDNC.System.Private.CoreLib.DNType; binder: DNCallSiteBinder; arg0: DNExpression): DNDynamicExpression; overload;
    {class} function Assign(left: DNExpression; right: DNExpression): DNBinaryExpression;
    {class} function MakeBinary(binaryType: DNExpressionType; left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function MakeBinary(binaryType: DNExpressionType; left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function MakeBinary(binaryType: DNExpressionType; left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDNC.System.Private.CoreLib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function Equal(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function Equal(left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function ReferenceEqual(left: DNExpression; right: DNExpression): DNBinaryExpression;
    {class} function NotEqual(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function NotEqual(left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function ReferenceNotEqual(left: DNExpression; right: DNExpression): DNBinaryExpression;
    {class} function GreaterThan(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function GreaterThan(left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function LessThan(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function LessThan(left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function GreaterThanOrEqual(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function GreaterThanOrEqual(left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function LessThanOrEqual(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function LessThanOrEqual(left: DNExpression; right: DNExpression; liftToNull: Boolean; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function AndAlso(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function AndAlso(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function OrElse(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function OrElse(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function Coalesce(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function Coalesce(left: DNExpression; right: DNExpression; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function Add(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function Add(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function AddAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function AddAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function AddAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function AddAssignChecked(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function AddAssignChecked(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function AddAssignChecked(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function AddChecked(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function AddChecked(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function Subtract(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function Subtract(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function SubtractAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function SubtractAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function SubtractAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function SubtractAssignChecked(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function SubtractAssignChecked(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function SubtractAssignChecked(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function SubtractChecked(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function SubtractChecked(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function Divide(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function Divide(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function DivideAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function DivideAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function DivideAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function Modulo(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function Modulo(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function ModuloAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function ModuloAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function ModuloAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function Multiply(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function Multiply(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function MultiplyAssign(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function MultiplyAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function MultiplyAssign(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function MultiplyAssignChecked(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function MultiplyAssignChecked(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;
    {class} function MultiplyAssignChecked(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo; conversion: DNLambdaExpression): DNBinaryExpression; overload;
    {class} function MultiplyChecked(left: DNExpression; right: DNExpression): DNBinaryExpression; overload;
    {class} function MultiplyChecked(left: DNExpression; right: DNExpression; method: DDNC.System.Private.CoreLib.DNMethodInfo): DNBinaryExpression; overload;

  end;

  [DNTypeName('System.Linq.Expressions.Expression')]
  DNExpression = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{CEDAFBE6-E090-39F1-B892-9AAD3DDD63A8}']
  { getters & setters } 

    function get_NodeType: DNExpressionType;
    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_CanReduce: Boolean;

  { methods } 

    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNExpression = class(TDNGenericImport<DNExpressionClass, DNExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNBinaryExpressionClass = interface(DNExpressionClass)
  ['{939AEC1B-5EB9-5446-930C-8B9D32360F73}']
  end;

  [DNTypeName('System.Linq.Expressions.BinaryExpression')]
  DNBinaryExpression = interface(DNExpression)
  ['{08531EE9-AF83-3691-9BE4-2FEF008018C8}']
  { getters & setters } 

    function get_CanReduce: Boolean;
    function get_Right: DNExpression;
    function get_Left: DNExpression;
    function get_Method: DDNC.System.Private.CoreLib.DNMethodInfo;
    function get_Conversion: DNLambdaExpression;
    function get_IsLifted: Boolean;
    function get_IsLiftedToNull: Boolean;
    function get_NodeType: DNExpressionType;
    function get_Type: DDNC.System.Private.CoreLib.DNType;

  { methods } 

    function Update(left: DNExpression; conversion: DNLambdaExpression; right: DNExpression): DNBinaryExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property CanReduce: Boolean read get_CanReduce;
    property Right: DNExpression read get_Right;
    property Left: DNExpression read get_Left;
    property Method: DDNC.System.Private.CoreLib.DNMethodInfo read get_Method;
    property Conversion: DNLambdaExpression read get_Conversion;
    property IsLifted: Boolean read get_IsLifted;
    property IsLiftedToNull: Boolean read get_IsLiftedToNull;
    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
  end;

  TDNBinaryExpression = class(TDNGenericImport<DNBinaryExpressionClass, DNBinaryExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNBlockExpressionClass = interface(DNExpressionClass)
  ['{67CEA2B4-7EE4-5251-9ED6-D6D2C0582B09}']
  end;

  [DNTypeName('System.Linq.Expressions.BlockExpression')]
  DNBlockExpression = interface(DNExpression)
  ['{54F5224D-4CA9-32E8-84D8-E903D54BC2CE}']
  { getters & setters } 

    function get_Expressions: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression>;
    function get_Variables: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>;
    function get_Result: DNExpression;
    function get_NodeType: DNExpressionType;
    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(variables: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>; expressions: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNBlockExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Expressions: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression> read get_Expressions;
    property Variables: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression> read get_Variables;
    property Result: DNExpression read get_Result;
    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNBlockExpression = class(TDNGenericImport<DNBlockExpressionClass, DNBlockExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNConditionalExpressionClass = interface(DNExpressionClass)
  ['{8DB52B38-9E1F-5EB9-9AF7-85F43EA2307D}']
  end;

  [DNTypeName('System.Linq.Expressions.ConditionalExpression')]
  DNConditionalExpression = interface(DNExpression)
  ['{7BF10AD2-6380-35E0-900C-88C2FE017E92}']
  { getters & setters } 

    function get_NodeType: DNExpressionType;
    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_Test: DNExpression;
    function get_IfTrue: DNExpression;
    function get_IfFalse: DNExpression;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(test: DNExpression; ifTrue: DNExpression; ifFalse: DNExpression): DNConditionalExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property Test: DNExpression read get_Test;
    property IfTrue: DNExpression read get_IfTrue;
    property IfFalse: DNExpression read get_IfFalse;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNConditionalExpression = class(TDNGenericImport<DNConditionalExpressionClass, DNConditionalExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNConstantExpressionClass = interface(DNExpressionClass)
  ['{2537850E-FB4E-5C93-A2AA-FE15FB43A2C4}']
  end;

  [DNTypeName('System.Linq.Expressions.ConstantExpression')]
  DNConstantExpression = interface(DNExpression)
  ['{5D1785F6-DA1D-38B0-BAEE-57DA5916AF91}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Value: DDNC.System.Private.CoreLib.DNObject;
    function get_CanReduce: Boolean;

  { methods } 

    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Value: DDNC.System.Private.CoreLib.DNObject read get_Value;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNConstantExpression = class(TDNGenericImport<DNConstantExpressionClass, DNConstantExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNDebugInfoExpressionClass = interface(DNExpressionClass)
  ['{97ECC1A1-F101-5C4E-BCDC-2FC3B3FDAC7D}']
  end;

  [DNTypeName('System.Linq.Expressions.DebugInfoExpression')]
  DNDebugInfoExpression = interface(DNExpression)
  ['{FC7DFC4C-2EF1-3F30-B1D4-9FD99C22E8C4}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_StartLine: Int32;
    function get_StartColumn: Int32;
    function get_EndLine: Int32;
    function get_EndColumn: Int32;
    function get_Document: DNSymbolDocumentInfo;
    function get_IsClear: Boolean;
    function get_CanReduce: Boolean;

  { methods } 

    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property StartLine: Int32 read get_StartLine;
    property StartColumn: Int32 read get_StartColumn;
    property EndLine: Int32 read get_EndLine;
    property EndColumn: Int32 read get_EndColumn;
    property Document: DNSymbolDocumentInfo read get_Document;
    property IsClear: Boolean read get_IsClear;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNDebugInfoExpression = class(TDNGenericImport<DNDebugInfoExpressionClass, DNDebugInfoExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNDefaultExpressionClass = interface(DNExpressionClass)
  ['{B52DD5D8-7B23-5074-A4C4-C2EDE7C375B7}']
  end;

  [DNTypeName('System.Linq.Expressions.DefaultExpression')]
  DNDefaultExpression = interface(DNExpression)
  ['{A7D79693-AF77-3CE1-B75F-1F0B8919E10F}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_CanReduce: Boolean;

  { methods } 

    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNDefaultExpression = class(TDNGenericImport<DNDefaultExpressionClass, DNDefaultExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNDynamicExpressionClass = interface(DNExpressionClass)
  ['{71BD2AD2-5019-5856-818A-BD4193834C2C}']
  { static methods } 

    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDNC.System.Private.CoreLib.DNType; arguments: TArray<DNExpression>): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDNC.System.Private.CoreLib.DNType; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDNC.System.Private.CoreLib.DNType; arg0: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDNC.System.Private.CoreLib.DNType; arg0: DNExpression; arg1: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDNC.System.Private.CoreLib.DNType; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNDynamicExpression; overload;
    {class} function &Dynamic(binder: DNCallSiteBinder; returnType: DDNC.System.Private.CoreLib.DNType; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDNC.System.Private.CoreLib.DNType; binder: DNCallSiteBinder; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDNC.System.Private.CoreLib.DNType; binder: DNCallSiteBinder; arguments: TArray<DNExpression>): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDNC.System.Private.CoreLib.DNType; binder: DNCallSiteBinder; arg0: DNExpression): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDNC.System.Private.CoreLib.DNType; binder: DNCallSiteBinder; arg0: DNExpression; arg1: DNExpression): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDNC.System.Private.CoreLib.DNType; binder: DNCallSiteBinder; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression): DNDynamicExpression; overload;
    {class} function MakeDynamic(delegateType: DDNC.System.Private.CoreLib.DNType; binder: DNCallSiteBinder; arg0: DNExpression; arg1: DNExpression; arg2: DNExpression; arg3: DNExpression): DNDynamicExpression; overload;

  end;

  [DNTypeName('System.Linq.Expressions.DynamicExpression')]
  DNDynamicExpression = interface(DNExpression)
  ['{192F9BD2-04AA-3684-8AF8-691989474F3A}']
  { getters & setters } 

    function get_CanReduce: Boolean;
    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Binder: DNCallSiteBinder;
    function get_DelegateType: DDNC.System.Private.CoreLib.DNType;
    function get_Arguments: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression>;

  { methods } 

    function Reduce: DNExpression;
    function Update(arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNDynamicExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property CanReduce: Boolean read get_CanReduce;
    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Binder: DNCallSiteBinder read get_Binder;
    property DelegateType: DDNC.System.Private.CoreLib.DNType read get_DelegateType;
    property Arguments: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression> read get_Arguments;
  end;

  TDNDynamicExpression = class(TDNGenericImport<DNDynamicExpressionClass, DNDynamicExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNGotoExpressionClass = interface(DNExpressionClass)
  ['{7C625980-14B0-5142-871C-D812B0090504}']
  end;

  [DNTypeName('System.Linq.Expressions.GotoExpression')]
  DNGotoExpression = interface(DNExpression)
  ['{771D999D-955F-344B-8237-92CF63F8E291}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Value: DNExpression;
    function get_Target: DNLabelTarget;
    function get_Kind: DNGotoExpressionKind;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(target: DNLabelTarget; value: DNExpression): DNGotoExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Value: DNExpression read get_Value;
    property Target: DNLabelTarget read get_Target;
    property Kind: DNGotoExpressionKind read get_Kind;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNGotoExpression = class(TDNGenericImport<DNGotoExpressionClass, DNGotoExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNIndexExpressionClass = interface(DNExpressionClass)
  ['{686474A4-ED8F-54F4-A74A-59F0F156D8E6}']
  end;

  [DNTypeName('System.Linq.Expressions.IndexExpression')]
  DNIndexExpression = interface(DNExpression)
  ['{09C7AB46-8D81-329F-B010-DC2B8469254C}']
  { getters & setters } 

    function get_NodeType: DNExpressionType;
    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_Object: DNExpression;
    function get_Indexer: DDNC.System.Private.CoreLib.DNPropertyInfo;
    function get_Arguments: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression>;
    function get_ArgumentCount: Int32;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(&object: DNExpression; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNIndexExpression;
    function GetArgument(index: Int32): DNExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property &Object: DNExpression read get_Object;
    property Indexer: DDNC.System.Private.CoreLib.DNPropertyInfo read get_Indexer;
    property Arguments: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression> read get_Arguments;
    property ArgumentCount: Int32 read get_ArgumentCount;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNIndexExpression = class(TDNGenericImport<DNIndexExpressionClass, DNIndexExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNInvocationExpressionClass = interface(DNExpressionClass)
  ['{6CBE4C81-9850-574A-B580-59CEAD16332E}']
  end;

  [DNTypeName('System.Linq.Expressions.InvocationExpression')]
  DNInvocationExpression = interface(DNExpression)
  ['{D7006704-70AF-3777-92B5-78892E27FF43}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Expression: DNExpression;
    function get_Arguments: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression>;
    function get_ArgumentCount: Int32;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(expression: DNExpression; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNInvocationExpression;
    function GetArgument(index: Int32): DNExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Expression: DNExpression read get_Expression;
    property Arguments: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression> read get_Arguments;
    property ArgumentCount: Int32 read get_ArgumentCount;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNInvocationExpression = class(TDNGenericImport<DNInvocationExpressionClass, DNInvocationExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNLabelExpressionClass = interface(DNExpressionClass)
  ['{72FC33A4-8AC3-5B1B-89C3-8C93D0383FEF}']
  end;

  [DNTypeName('System.Linq.Expressions.LabelExpression')]
  DNLabelExpression = interface(DNExpression)
  ['{F3F5AC70-6F00-30D9-AA85-1C67A85B9A03}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Target: DNLabelTarget;
    function get_DefaultValue: DNExpression;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(target: DNLabelTarget; defaultValue: DNExpression): DNLabelExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Target: DNLabelTarget read get_Target;
    property DefaultValue: DNExpression read get_DefaultValue;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNLabelExpression = class(TDNGenericImport<DNLabelExpressionClass, DNLabelExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNLambdaExpressionClass = interface(DNExpressionClass)
  ['{CF47E2BE-B183-5B16-9BC9-D30ADB8E1F6C}']
  end;

  [DNTypeName('System.Linq.Expressions.LambdaExpression')]
  DNLambdaExpression = interface(DNExpression)
  ['{16D07195-C7E5-333B-B8BE-E151733F178A}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>;
    function get_Name: string;
    function get_Body: DNExpression;
    function get_ReturnType: DDNC.System.Private.CoreLib.DNType;
    function get_TailCall: Boolean;
    function get_CanReduce: Boolean;

  { methods } 

    function Compile: DDNC.System.Private.CoreLib.DNDelegate; overload;
    function Compile(preferInterpretation: Boolean): DDNC.System.Private.CoreLib.DNDelegate; overload;
    function Compile(debugInfoGenerator: DNDebugInfoGenerator): DDNC.System.Private.CoreLib.DNDelegate; overload;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression> read get_Parameters;
    property Name: string read get_Name;
    property Body: DNExpression read get_Body;
    property ReturnType: DDNC.System.Private.CoreLib.DNType read get_ReturnType;
    property TailCall: Boolean read get_TailCall;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNLambdaExpression = class(TDNGenericImport<DNLambdaExpressionClass, DNLambdaExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNExpressionClass<TDelegate> = interface(DNLambdaExpressionClass)
  ['{C81A997A-1B4C-5D2C-9779-E864A6DA6041}']
  end;

  [DNTypeName('System.Linq.Expressions.Expression`1')]
  DNExpression<TDelegate> = interface(DNLambdaExpression)
  ['{4B3E5763-BFC1-378D-822E-9871F0F0B108}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>;
    function get_Name: string;
    function get_Body: DNExpression;
    function get_ReturnType: DDNC.System.Private.CoreLib.DNType;
    function get_TailCall: Boolean;
    function get_CanReduce: Boolean;

  { methods } 

    function Compile: TDelegate; overload;
    function Compile(preferInterpretation: Boolean): TDelegate; overload;
    function Update(body: DNExpression; parameters: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>): DNExpression<TDelegate>;
    function Compile(debugInfoGenerator: DNDebugInfoGenerator): TDelegate; overload;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression> read get_Parameters;
    property Name: string read get_Name;
    property Body: DNExpression read get_Body;
    property ReturnType: DDNC.System.Private.CoreLib.DNType read get_ReturnType;
    property TailCall: Boolean read get_TailCall;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNExpression<TDelegate> = class(TDNGenericImport<DNExpressionClass<TDelegate>, DNExpression<TDelegate>>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNListInitExpressionClass = interface(DNExpressionClass)
  ['{3F7DA5A6-C14D-5EBB-A781-B2E9C9DAA354}']
  end;

  [DNTypeName('System.Linq.Expressions.ListInitExpression')]
  DNListInitExpression = interface(DNExpression)
  ['{F54351E0-D437-38EB-909A-F1DD97E024C8}']
  { getters & setters } 

    function get_NodeType: DNExpressionType;
    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_CanReduce: Boolean;
    function get_NewExpression: DNNewExpression;
    function get_Initializers: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNElementInit>;

  { methods } 

    function Reduce: DNExpression;
    function Update(newExpression: DNNewExpression; initializers: DDNC.System.Private.CoreLib.DNIEnumerable<DNElementInit>): DNListInitExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property CanReduce: Boolean read get_CanReduce;
    property NewExpression: DNNewExpression read get_NewExpression;
    property Initializers: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNElementInit> read get_Initializers;
  end;

  TDNListInitExpression = class(TDNGenericImport<DNListInitExpressionClass, DNListInitExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNLoopExpressionClass = interface(DNExpressionClass)
  ['{18CABCAE-B5B5-5460-9E5A-3B814FAD76F9}']
  end;

  [DNTypeName('System.Linq.Expressions.LoopExpression')]
  DNLoopExpression = interface(DNExpression)
  ['{A274A7C5-A466-374D-99AC-7B5CC5AD846B}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Body: DNExpression;
    function get_BreakLabel: DNLabelTarget;
    function get_ContinueLabel: DNLabelTarget;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(breakLabel: DNLabelTarget; continueLabel: DNLabelTarget; body: DNExpression): DNLoopExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Body: DNExpression read get_Body;
    property BreakLabel: DNLabelTarget read get_BreakLabel;
    property ContinueLabel: DNLabelTarget read get_ContinueLabel;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNLoopExpression = class(TDNGenericImport<DNLoopExpressionClass, DNLoopExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMemberExpressionClass = interface(DNExpressionClass)
  ['{9C7CDB50-B11F-56B9-A9D0-AA62F9BE5AA3}']
  end;

  [DNTypeName('System.Linq.Expressions.MemberExpression')]
  DNMemberExpression = interface(DNExpression)
  ['{49559BEB-22CE-3A8E-A35F-A6215E38BDF9}']
  { getters & setters } 

    function get_Member: DDNC.System.Private.CoreLib.DNMemberInfo;
    function get_Expression: DNExpression;
    function get_NodeType: DNExpressionType;
    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(expression: DNExpression): DNMemberExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Member: DDNC.System.Private.CoreLib.DNMemberInfo read get_Member;
    property Expression: DNExpression read get_Expression;
    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNMemberExpression = class(TDNGenericImport<DNMemberExpressionClass, DNMemberExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMemberInitExpressionClass = interface(DNExpressionClass)
  ['{FF97F0D2-96EB-5A4F-9D88-91A30C7FDE00}']
  end;

  [DNTypeName('System.Linq.Expressions.MemberInitExpression')]
  DNMemberInitExpression = interface(DNExpression)
  ['{5CE10138-2D55-3FF9-9FD7-2AFD61098919}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_CanReduce: Boolean;
    function get_NodeType: DNExpressionType;
    function get_NewExpression: DNNewExpression;
    function get_Bindings: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNMemberBinding>;

  { methods } 

    function Reduce: DNExpression;
    function Update(newExpression: DNNewExpression; bindings: DDNC.System.Private.CoreLib.DNIEnumerable<DNMemberBinding>): DNMemberInitExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property CanReduce: Boolean read get_CanReduce;
    property NodeType: DNExpressionType read get_NodeType;
    property NewExpression: DNNewExpression read get_NewExpression;
    property Bindings: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNMemberBinding> read get_Bindings;
  end;

  TDNMemberInitExpression = class(TDNGenericImport<DNMemberInitExpressionClass, DNMemberInitExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMethodCallExpressionClass = interface(DNExpressionClass)
  ['{027ADE98-C015-5488-86D0-9001F272C35D}']
  end;

  [DNTypeName('System.Linq.Expressions.MethodCallExpression')]
  DNMethodCallExpression = interface(DNExpression)
  ['{BE3439CF-DE87-31E7-A0CF-A59996935C93}']
  { getters & setters } 

    function get_NodeType: DNExpressionType;
    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_Method: DDNC.System.Private.CoreLib.DNMethodInfo;
    function get_Object: DNExpression;
    function get_Arguments: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression>;
    function get_ArgumentCount: Int32;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(&object: DNExpression; arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNMethodCallExpression;
    function GetArgument(index: Int32): DNExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property NodeType: DNExpressionType read get_NodeType;
    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property Method: DDNC.System.Private.CoreLib.DNMethodInfo read get_Method;
    property &Object: DNExpression read get_Object;
    property Arguments: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression> read get_Arguments;
    property ArgumentCount: Int32 read get_ArgumentCount;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNMethodCallExpression = class(TDNGenericImport<DNMethodCallExpressionClass, DNMethodCallExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNNewArrayExpressionClass = interface(DNExpressionClass)
  ['{C634E763-F894-52B1-869E-98F1625E7867}']
  end;

  [DNTypeName('System.Linq.Expressions.NewArrayExpression')]
  DNNewArrayExpression = interface(DNExpression)
  ['{9B0557C2-3A83-34AD-98CD-0F41300428B3}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_Expressions: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression>;
    function get_NodeType: DNExpressionType;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(expressions: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNNewArrayExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property Expressions: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression> read get_Expressions;
    property NodeType: DNExpressionType read get_NodeType;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNNewArrayExpression = class(TDNGenericImport<DNNewArrayExpressionClass, DNNewArrayExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNNewExpressionClass = interface(DNExpressionClass)
  ['{99611FEA-5EE0-547C-8E4E-B570950DFAA3}']
  end;

  [DNTypeName('System.Linq.Expressions.NewExpression')]
  DNNewExpression = interface(DNExpression)
  ['{AFC19F26-BD5A-376E-9962-32B439F6304A}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Constructor: DDNC.System.Private.CoreLib.DNConstructorInfo;
    function get_Arguments: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression>;
    function get_ArgumentCount: Int32;
    function get_Members: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DDNC.System.Private.CoreLib.DNMemberInfo>;
    function get_CanReduce: Boolean;

  { methods } 

    function GetArgument(index: Int32): DNExpression;
    function Update(arguments: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>): DNNewExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property &Constructor: DDNC.System.Private.CoreLib.DNConstructorInfo read get_Constructor;
    property Arguments: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression> read get_Arguments;
    property ArgumentCount: Int32 read get_ArgumentCount;
    property Members: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DDNC.System.Private.CoreLib.DNMemberInfo> read get_Members;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNNewExpression = class(TDNGenericImport<DNNewExpressionClass, DNNewExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNParameterExpressionClass = interface(DNExpressionClass)
  ['{19E4F8C2-C6C3-5C68-802D-EB03C5F0F504}']
  end;

  [DNTypeName('System.Linq.Expressions.ParameterExpression')]
  DNParameterExpression = interface(DNExpression)
  ['{128C856B-2085-3869-BA04-184B93B43433}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Name: string;
    function get_IsByRef: Boolean;
    function get_CanReduce: Boolean;

  { methods } 

    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Name: string read get_Name;
    property IsByRef: Boolean read get_IsByRef;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNParameterExpression = class(TDNGenericImport<DNParameterExpressionClass, DNParameterExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNRuntimeVariablesExpressionClass = interface(DNExpressionClass)
  ['{F100ECE7-D60F-58A7-935F-99F050353EE6}']
  end;

  [DNTypeName('System.Linq.Expressions.RuntimeVariablesExpression')]
  DNRuntimeVariablesExpression = interface(DNExpression)
  ['{40573A20-9F78-3FDB-AE08-5FE39A22DEBD}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Variables: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(variables: DDNC.System.Private.CoreLib.DNIEnumerable<DNParameterExpression>): DNRuntimeVariablesExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Variables: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression> read get_Variables;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNRuntimeVariablesExpression = class(TDNGenericImport<DNRuntimeVariablesExpressionClass, DNRuntimeVariablesExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNSwitchExpressionClass = interface(DNExpressionClass)
  ['{5B137A1C-227C-5114-A478-AE1DCED5F659}']
  end;

  [DNTypeName('System.Linq.Expressions.SwitchExpression')]
  DNSwitchExpression = interface(DNExpression)
  ['{25529974-3266-3D78-BB5C-FA6A41CA4F73}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_SwitchValue: DNExpression;
    function get_Cases: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNSwitchCase>;
    function get_DefaultBody: DNExpression;
    function get_Comparison: DDNC.System.Private.CoreLib.DNMethodInfo;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(switchValue: DNExpression; cases: DDNC.System.Private.CoreLib.DNIEnumerable<DNSwitchCase>; defaultBody: DNExpression): DNSwitchExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property SwitchValue: DNExpression read get_SwitchValue;
    property Cases: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNSwitchCase> read get_Cases;
    property DefaultBody: DNExpression read get_DefaultBody;
    property Comparison: DDNC.System.Private.CoreLib.DNMethodInfo read get_Comparison;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNSwitchExpression = class(TDNGenericImport<DNSwitchExpressionClass, DNSwitchExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNTryExpressionClass = interface(DNExpressionClass)
  ['{5C07721D-B95D-5796-A52D-B6E3C91D9D3F}']
  end;

  [DNTypeName('System.Linq.Expressions.TryExpression')]
  DNTryExpression = interface(DNExpression)
  ['{998AE933-1E80-35FA-8CBA-777E6CFB281C}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Body: DNExpression;
    function get_Handlers: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNCatchBlock>;
    function get_Finally: DNExpression;
    function get_Fault: DNExpression;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(body: DNExpression; handlers: DDNC.System.Private.CoreLib.DNIEnumerable<DNCatchBlock>; &finally: DNExpression; fault: DNExpression): DNTryExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Body: DNExpression read get_Body;
    property Handlers: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNCatchBlock> read get_Handlers;
    property &Finally: DNExpression read get_Finally;
    property Fault: DNExpression read get_Fault;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNTryExpression = class(TDNGenericImport<DNTryExpressionClass, DNTryExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNTypeBinaryExpressionClass = interface(DNExpressionClass)
  ['{C44D4269-448D-52F2-8BA5-976622ED5092}']
  end;

  [DNTypeName('System.Linq.Expressions.TypeBinaryExpression')]
  DNTypeBinaryExpression = interface(DNExpression)
  ['{BB9CCF01-E9FE-3413-9481-F62D20A5A692}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Expression: DNExpression;
    function get_TypeOperand: DDNC.System.Private.CoreLib.DNType;
    function get_CanReduce: Boolean;

  { methods } 

    function Update(expression: DNExpression): DNTypeBinaryExpression;
    function Reduce: DNExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Expression: DNExpression read get_Expression;
    property TypeOperand: DDNC.System.Private.CoreLib.DNType read get_TypeOperand;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNTypeBinaryExpression = class(TDNGenericImport<DNTypeBinaryExpressionClass, DNTypeBinaryExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNUnaryExpressionClass = interface(DNExpressionClass)
  ['{23B723B2-EF4A-59C4-A55F-A724B0A568F3}']
  end;

  [DNTypeName('System.Linq.Expressions.UnaryExpression')]
  DNUnaryExpression = interface(DNExpression)
  ['{A39F69AF-653C-35A2-9C18-805D14B708B4}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_NodeType: DNExpressionType;
    function get_Operand: DNExpression;
    function get_Method: DDNC.System.Private.CoreLib.DNMethodInfo;
    function get_IsLifted: Boolean;
    function get_IsLiftedToNull: Boolean;
    function get_CanReduce: Boolean;

  { methods } 

    function Reduce: DNExpression;
    function Update(operand: DNExpression): DNUnaryExpression;
    function ReduceAndCheck: DNExpression;
    function ReduceExtensions: DNExpression;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property NodeType: DNExpressionType read get_NodeType;
    property Operand: DNExpression read get_Operand;
    property Method: DDNC.System.Private.CoreLib.DNMethodInfo read get_Method;
    property IsLifted: Boolean read get_IsLifted;
    property IsLiftedToNull: Boolean read get_IsLiftedToNull;
    property CanReduce: Boolean read get_CanReduce;
  end;

  TDNUnaryExpression = class(TDNGenericImport<DNUnaryExpressionClass, DNUnaryExpression>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNExpressionVisitorClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{5E7F718D-C217-57AB-93F2-68513C8D2DBC}']
  end;

  [DNTypeName('System.Linq.Expressions.ExpressionVisitor')]
  DNExpressionVisitor = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{19507279-E435-3643-8ABF-5BC4547715A8}']
  { methods } 

    function Visit(node: DNExpression): DNExpression; overload;
    function Visit(nodes: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression>): DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression>; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNExpressionVisitor = class(TDNGenericImport<DNExpressionVisitorClass, DNExpressionVisitor>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNDynamicExpressionVisitorClass = interface(DNExpressionVisitorClass)
  ['{63D5F9DA-340B-5E00-ABBE-1D051B229CAD}']
  { constructors } 

    {class} function init: DNDynamicExpressionVisitor;

  end;

  [DNTypeName('System.Linq.Expressions.DynamicExpressionVisitor')]
  DNDynamicExpressionVisitor = interface(DNExpressionVisitor)
  ['{277DF601-ABE9-3C0F-A675-BD5EAB0E8F36}']
  { methods } 

    function Visit(node: DNExpression): DNExpression; overload;
    function Visit(nodes: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression>): DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression>; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNDynamicExpressionVisitor = class(TDNGenericImport<DNDynamicExpressionVisitorClass, DNDynamicExpressionVisitor>) end;

  //-------------namespace: System.Linq.Expressions.Interpreter----------------
  DNLightLambdaClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{9220364E-DC35-5EC9-917E-8036AD38AD37}']
  end;

  [DNTypeName('System.Linq.Expressions.Interpreter.LightLambda')]
  DNLightLambda = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{B92106EF-3806-34C5-AD6F-658866228BA9}']
  { methods } 

    function Run(arguments: TArray<DDNC.System.Private.CoreLib.DNObject>): DDNC.System.Private.CoreLib.DNObject;
    function RunVoid(arguments: TArray<DDNC.System.Private.CoreLib.DNObject>): DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNLightLambda = class(TDNGenericImport<DNLightLambdaClass, DNLightLambda>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNLabelTargetClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{94C495DC-8AF5-5400-916B-27485EF78924}']
  end;

  [DNTypeName('System.Linq.Expressions.LabelTarget')]
  DNLabelTarget = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{33B3CE81-BE02-3871-A8D5-6D6D6DDD60B9}']
  { getters & setters } 

    function get_Name: string;
    function get_Type: DDNC.System.Private.CoreLib.DNType;

  { methods } 

    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name;
    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
  end;

  TDNLabelTarget = class(TDNGenericImport<DNLabelTargetClass, DNLabelTarget>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMemberBindingClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{F1B8E2EA-8B8C-5D15-87D6-2E3DFD6DC104}']
  end;

  [DNTypeName('System.Linq.Expressions.MemberBinding')]
  DNMemberBinding = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{D279F61D-42D0-30DC-96FF-BF6D77861E02}']
  { getters & setters } 

    function get_BindingType: DNMemberBindingType;
    function get_Member: DDNC.System.Private.CoreLib.DNMemberInfo;

  { methods } 

    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property BindingType: DNMemberBindingType read get_BindingType;
    property Member: DDNC.System.Private.CoreLib.DNMemberInfo read get_Member;
  end;

  TDNMemberBinding = class(TDNGenericImport<DNMemberBindingClass, DNMemberBinding>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMemberAssignmentClass = interface(DNMemberBindingClass)
  ['{DBE0122F-2EC9-541D-B0EB-DFCC2F8A1579}']
  end;

  [DNTypeName('System.Linq.Expressions.MemberAssignment')]
  DNMemberAssignment = interface(DNMemberBinding)
  ['{A42ED55F-6646-386C-B43D-F7D67493CC72}']
  { getters & setters } 

    function get_Expression: DNExpression;
    function get_BindingType: DNMemberBindingType;
    function get_Member: DDNC.System.Private.CoreLib.DNMemberInfo;

  { methods } 

    function Update(expression: DNExpression): DNMemberAssignment;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Expression: DNExpression read get_Expression;
    property BindingType: DNMemberBindingType read get_BindingType;
    property Member: DDNC.System.Private.CoreLib.DNMemberInfo read get_Member;
  end;

  TDNMemberAssignment = class(TDNGenericImport<DNMemberAssignmentClass, DNMemberAssignment>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMemberListBindingClass = interface(DNMemberBindingClass)
  ['{30A143BF-B499-51E6-869B-F535ADCEB606}']
  end;

  [DNTypeName('System.Linq.Expressions.MemberListBinding')]
  DNMemberListBinding = interface(DNMemberBinding)
  ['{B1DB9A0D-B678-3EA6-B608-5E205DE1075C}']
  { getters & setters } 

    function get_Initializers: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNElementInit>;
    function get_BindingType: DNMemberBindingType;
    function get_Member: DDNC.System.Private.CoreLib.DNMemberInfo;

  { methods } 

    function Update(initializers: DDNC.System.Private.CoreLib.DNIEnumerable<DNElementInit>): DNMemberListBinding;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Initializers: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNElementInit> read get_Initializers;
    property BindingType: DNMemberBindingType read get_BindingType;
    property Member: DDNC.System.Private.CoreLib.DNMemberInfo read get_Member;
  end;

  TDNMemberListBinding = class(TDNGenericImport<DNMemberListBindingClass, DNMemberListBinding>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNMemberMemberBindingClass = interface(DNMemberBindingClass)
  ['{68D3F796-D0ED-509B-B19D-1B73069222D2}']
  end;

  [DNTypeName('System.Linq.Expressions.MemberMemberBinding')]
  DNMemberMemberBinding = interface(DNMemberBinding)
  ['{8694DB79-D8DB-3921-97B2-D958EE297FD8}']
  { getters & setters } 

    function get_Bindings: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNMemberBinding>;
    function get_BindingType: DNMemberBindingType;
    function get_Member: DDNC.System.Private.CoreLib.DNMemberInfo;

  { methods } 

    function Update(bindings: DDNC.System.Private.CoreLib.DNIEnumerable<DNMemberBinding>): DNMemberMemberBinding;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Bindings: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNMemberBinding> read get_Bindings;
    property BindingType: DNMemberBindingType read get_BindingType;
    property Member: DDNC.System.Private.CoreLib.DNMemberInfo read get_Member;
  end;

  TDNMemberMemberBinding = class(TDNGenericImport<DNMemberMemberBindingClass, DNMemberMemberBinding>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNSwitchCaseClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{101F5B20-201C-5D55-AE76-94199535FD64}']
  end;

  [DNTypeName('System.Linq.Expressions.SwitchCase')]
  DNSwitchCase = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{D9547779-C750-37D7-9988-9C54C5C54953}']
  { getters & setters } 

    function get_TestValues: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression>;
    function get_Body: DNExpression;

  { methods } 

    function ToString: string;
    function Update(testValues: DDNC.System.Private.CoreLib.DNIEnumerable<DNExpression>; body: DNExpression): DNSwitchCase;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TestValues: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNExpression> read get_TestValues;
    property Body: DNExpression read get_Body;
  end;

  TDNSwitchCase = class(TDNGenericImport<DNSwitchCaseClass, DNSwitchCase>) end;

  //-------------namespace: System.Linq.Expressions----------------
  DNSymbolDocumentInfoClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{70571E40-2376-5684-BF5F-4D58EE88F82A}']
  end;

  [DNTypeName('System.Linq.Expressions.SymbolDocumentInfo')]
  DNSymbolDocumentInfo = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{1FCA72A7-1F09-3F11-9183-860EC016B2FB}']
  { getters & setters } 

    function get_FileName: string;
    function get_Language: DDNC.System.Private.CoreLib.DNGuid;
    function get_LanguageVendor: DDNC.System.Private.CoreLib.DNGuid;
    function get_DocumentType: DDNC.System.Private.CoreLib.DNGuid;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property FileName: string read get_FileName;
    property Language: DDNC.System.Private.CoreLib.DNGuid read get_Language;
    property LanguageVendor: DDNC.System.Private.CoreLib.DNGuid read get_LanguageVendor;
    property DocumentType: DDNC.System.Private.CoreLib.DNGuid read get_DocumentType;
  end;

  TDNSymbolDocumentInfo = class(TDNGenericImport<DNSymbolDocumentInfoClass, DNSymbolDocumentInfo>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallSiteClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{29EA5CAD-059D-57D8-B9F9-9A7F4FAC25A8}']
  { static methods } 

    {class} function Create(delegateType: DDNC.System.Private.CoreLib.DNType; binder: DNCallSiteBinder): DNCallSite;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CallSite')]
  DNCallSite = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{C0BF1BD2-0370-3D1B-96BB-C5A3753C9BEC}']
  { getters & setters } 

    function get_Binder: DNCallSiteBinder;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Binder: DNCallSiteBinder read get_Binder;
  end;

  TDNCallSite = class(TDNGenericImport<DNCallSiteClass, DNCallSite>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallSiteClass<T> = interface(DNCallSiteClass)
  ['{D44FD40C-2237-5252-BA33-91D8D1BFF5F3}']
  { static methods } 

    {class} function Create(binder: DNCallSiteBinder): DNCallSite<T>;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CallSite`1')]
  DNCallSite<T> = interface(DNCallSite)
  ['{1B4A217D-55D8-3CD2-9973-6264CD629FCB}']
  { getters & setters } 

    function get_Update: T;
    function get_Binder: DNCallSiteBinder;

  { fields getter & setter } 

   function __fakeFieldGet_Target: T;
   procedure __fakeFieldSet_Target(value: T);

  { fields } 

   property Target: T read __fakeFieldGet_Target write __fakeFieldSet_Target;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Update: T read get_Update;
    property Binder: DNCallSiteBinder read get_Binder;
  end;

  TDNCallSite<T> = class(TDNGenericImport<DNCallSiteClass<T>, DNCallSite<T>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallSiteBinderClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{33189F18-F81D-57E2-8D5B-F2981A619B01}']
  { static getter & setter } 

    {class} function get_UpdateLabel: DNLabelTarget;

  { static propertys } 

    {class} property UpdateLabel: DNLabelTarget read get_UpdateLabel;
  end;

  [DNTypeName('System.Runtime.CompilerServices.CallSiteBinder')]
  DNCallSiteBinder = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{8D134D86-B34C-3F17-91A7-069ADA01CDA3}']
  { methods } 

    function Bind(args: TArray<DDNC.System.Private.CoreLib.DNObject>; parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNCallSiteBinder = class(TDNGenericImport<DNCallSiteBinderClass, DNCallSiteBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNDynamicMetaObjectBinderClass = interface(DNCallSiteBinderClass)
  ['{CF48CF87-AB59-5BD9-B3C6-218D5B11B4AE}']
  end;

  [DNTypeName('System.Dynamic.DynamicMetaObjectBinder')]
  DNDynamicMetaObjectBinder = interface(DNCallSiteBinder)
  ['{8E86E83C-79A2-39E7-8A66-9DD62C5708E3}']
  { getters & setters } 

    function get_ReturnType: DDNC.System.Private.CoreLib.DNType;

  { methods } 

    function Bind(args: TArray<DDNC.System.Private.CoreLib.DNObject>; parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function GetUpdateExpression(&type: DDNC.System.Private.CoreLib.DNType): DNExpression;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ReturnType: DDNC.System.Private.CoreLib.DNType read get_ReturnType;
  end;

  TDNDynamicMetaObjectBinder = class(TDNGenericImport<DNDynamicMetaObjectBinderClass, DNDynamicMetaObjectBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNBinaryOperationBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{06BD7860-5446-5C41-A0FA-5DB64838EE7F}']
  end;

  [DNTypeName('System.Dynamic.BinaryOperationBinder')]
  DNBinaryOperationBinder = interface(DNDynamicMetaObjectBinder)
  ['{A6536945-0B71-382E-9721-67FCDEF32701}']
  { getters & setters } 

    function get_ReturnType: DDNC.System.Private.CoreLib.DNType;
    function get_Operation: DNExpressionType;

  { methods } 

    function FallbackBinaryOperation(target: DNDynamicMetaObject; arg: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function FallbackBinaryOperation(target: DNDynamicMetaObject; arg: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDNC.System.Private.CoreLib.DNObject>; parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDNC.System.Private.CoreLib.DNType): DNExpression;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ReturnType: DDNC.System.Private.CoreLib.DNType read get_ReturnType;
    property Operation: DNExpressionType read get_Operation;
  end;

  TDNBinaryOperationBinder = class(TDNGenericImport<DNBinaryOperationBinderClass, DNBinaryOperationBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNConvertBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{FFD61885-BF57-5787-BCE1-BD0DC4AC115E}']
  end;

  [DNTypeName('System.Dynamic.ConvertBinder')]
  DNConvertBinder = interface(DNDynamicMetaObjectBinder)
  ['{8F23231B-5228-3D8E-BF5D-88715D9BCEF9}']
  { getters & setters } 

    function get_Type: DDNC.System.Private.CoreLib.DNType;
    function get_Explicit: Boolean;
    function get_ReturnType: DDNC.System.Private.CoreLib.DNType;

  { methods } 

    function FallbackConvert(target: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function FallbackConvert(target: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDNC.System.Private.CoreLib.DNObject>; parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDNC.System.Private.CoreLib.DNType): DNExpression;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property &Type: DDNC.System.Private.CoreLib.DNType read get_Type;
    property Explicit: Boolean read get_Explicit;
    property ReturnType: DDNC.System.Private.CoreLib.DNType read get_ReturnType;
  end;

  TDNConvertBinder = class(TDNGenericImport<DNConvertBinderClass, DNConvertBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNCreateInstanceBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{FAA0D726-F36D-58D3-921B-9360F6FBB52D}']
  end;

  [DNTypeName('System.Dynamic.CreateInstanceBinder')]
  DNCreateInstanceBinder = interface(DNDynamicMetaObjectBinder)
  ['{28539952-29D9-3393-BA53-CA1E70E9EED4}']
  { getters & setters } 

    function get_ReturnType: DDNC.System.Private.CoreLib.DNType;
    function get_CallInfo: DNCallInfo;

  { methods } 

    function FallbackCreateInstance(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackCreateInstance(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDNC.System.Private.CoreLib.DNObject>; parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDNC.System.Private.CoreLib.DNType): DNExpression;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ReturnType: DDNC.System.Private.CoreLib.DNType read get_ReturnType;
    property CallInfo: DNCallInfo read get_CallInfo;
  end;

  TDNCreateInstanceBinder = class(TDNGenericImport<DNCreateInstanceBinderClass, DNCreateInstanceBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNDeleteIndexBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{6E20435F-AEA7-5561-A50F-3D2C573B2B9B}']
  end;

  [DNTypeName('System.Dynamic.DeleteIndexBinder')]
  DNDeleteIndexBinder = interface(DNDynamicMetaObjectBinder)
  ['{D37F2B90-3AF2-3039-BA79-57B8EFBB8F8B}']
  { getters & setters } 

    function get_ReturnType: DDNC.System.Private.CoreLib.DNType;
    function get_CallInfo: DNCallInfo;

  { methods } 

    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackDeleteIndex(target: DNDynamicMetaObject; indexes: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackDeleteIndex(target: DNDynamicMetaObject; indexes: TArray<DNDynamicMetaObject>; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDNC.System.Private.CoreLib.DNObject>; parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDNC.System.Private.CoreLib.DNType): DNExpression;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ReturnType: DDNC.System.Private.CoreLib.DNType read get_ReturnType;
    property CallInfo: DNCallInfo read get_CallInfo;
  end;

  TDNDeleteIndexBinder = class(TDNGenericImport<DNDeleteIndexBinderClass, DNDeleteIndexBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNDeleteMemberBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{34A86A6D-9D8C-57F5-B1D2-A46F8BCA390D}']
  end;

  [DNTypeName('System.Dynamic.DeleteMemberBinder')]
  DNDeleteMemberBinder = interface(DNDynamicMetaObjectBinder)
  ['{D59EE7AA-51A9-33A5-8230-03550BC71D5E}']
  { getters & setters } 

    function get_Name: string;
    function get_IgnoreCase: Boolean;
    function get_ReturnType: DDNC.System.Private.CoreLib.DNType;

  { methods } 

    function FallbackDeleteMember(target: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function FallbackDeleteMember(target: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDNC.System.Private.CoreLib.DNObject>; parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDNC.System.Private.CoreLib.DNType): DNExpression;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name;
    property IgnoreCase: Boolean read get_IgnoreCase;
    property ReturnType: DDNC.System.Private.CoreLib.DNType read get_ReturnType;
  end;

  TDNDeleteMemberBinder = class(TDNGenericImport<DNDeleteMemberBinderClass, DNDeleteMemberBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNGetIndexBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{B5298E72-CB33-5369-89F6-6D1349DCD0EF}']
  end;

  [DNTypeName('System.Dynamic.GetIndexBinder')]
  DNGetIndexBinder = interface(DNDynamicMetaObjectBinder)
  ['{FEFB43AF-AD13-3FD8-AA03-007CA1CB5127}']
  { getters & setters } 

    function get_ReturnType: DDNC.System.Private.CoreLib.DNType;
    function get_CallInfo: DNCallInfo;

  { methods } 

    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackGetIndex(target: DNDynamicMetaObject; indexes: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackGetIndex(target: DNDynamicMetaObject; indexes: TArray<DNDynamicMetaObject>; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDNC.System.Private.CoreLib.DNObject>; parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDNC.System.Private.CoreLib.DNType): DNExpression;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ReturnType: DDNC.System.Private.CoreLib.DNType read get_ReturnType;
    property CallInfo: DNCallInfo read get_CallInfo;
  end;

  TDNGetIndexBinder = class(TDNGenericImport<DNGetIndexBinderClass, DNGetIndexBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNGetMemberBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{E590A636-A1F6-5694-BDC9-82ACF85A367B}']
  end;

  [DNTypeName('System.Dynamic.GetMemberBinder')]
  DNGetMemberBinder = interface(DNDynamicMetaObjectBinder)
  ['{DB95517F-7D73-324D-BAD9-1504C1D253E9}']
  { getters & setters } 

    function get_ReturnType: DDNC.System.Private.CoreLib.DNType;
    function get_Name: string;
    function get_IgnoreCase: Boolean;

  { methods } 

    function FallbackGetMember(target: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function FallbackGetMember(target: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDNC.System.Private.CoreLib.DNObject>; parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDNC.System.Private.CoreLib.DNType): DNExpression;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ReturnType: DDNC.System.Private.CoreLib.DNType read get_ReturnType;
    property Name: string read get_Name;
    property IgnoreCase: Boolean read get_IgnoreCase;
  end;

  TDNGetMemberBinder = class(TDNGenericImport<DNGetMemberBinderClass, DNGetMemberBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNInvokeBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{D1AC7BB5-6774-5DE5-8AB4-C2B255F5CD62}']
  end;

  [DNTypeName('System.Dynamic.InvokeBinder')]
  DNInvokeBinder = interface(DNDynamicMetaObjectBinder)
  ['{539EB9D0-19BE-3611-A692-139F43DDE8EB}']
  { getters & setters } 

    function get_ReturnType: DDNC.System.Private.CoreLib.DNType;
    function get_CallInfo: DNCallInfo;

  { methods } 

    function FallbackInvoke(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackInvoke(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDNC.System.Private.CoreLib.DNObject>; parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDNC.System.Private.CoreLib.DNType): DNExpression;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ReturnType: DDNC.System.Private.CoreLib.DNType read get_ReturnType;
    property CallInfo: DNCallInfo read get_CallInfo;
  end;

  TDNInvokeBinder = class(TDNGenericImport<DNInvokeBinderClass, DNInvokeBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNInvokeMemberBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{1A682676-6205-5E8A-843D-6A62639FDEDE}']
  end;

  [DNTypeName('System.Dynamic.InvokeMemberBinder')]
  DNInvokeMemberBinder = interface(DNDynamicMetaObjectBinder)
  ['{F3E3A101-AE03-398B-AAF2-ADC5092186D8}']
  { getters & setters } 

    function get_ReturnType: DDNC.System.Private.CoreLib.DNType;
    function get_Name: string;
    function get_IgnoreCase: Boolean;
    function get_CallInfo: DNCallInfo;

  { methods } 

    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackInvokeMember(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackInvokeMember(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function FallbackInvoke(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject;
    function Bind(args: TArray<DDNC.System.Private.CoreLib.DNObject>; parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDNC.System.Private.CoreLib.DNType): DNExpression;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ReturnType: DDNC.System.Private.CoreLib.DNType read get_ReturnType;
    property Name: string read get_Name;
    property IgnoreCase: Boolean read get_IgnoreCase;
    property CallInfo: DNCallInfo read get_CallInfo;
  end;

  TDNInvokeMemberBinder = class(TDNGenericImport<DNInvokeMemberBinderClass, DNInvokeMemberBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNSetIndexBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{873CD87A-47C0-57F4-8837-B414229C2D5D}']
  end;

  [DNTypeName('System.Dynamic.SetIndexBinder')]
  DNSetIndexBinder = interface(DNDynamicMetaObjectBinder)
  ['{2B78E069-246A-376E-A066-3E598700B484}']
  { getters & setters } 

    function get_ReturnType: DDNC.System.Private.CoreLib.DNType;
    function get_CallInfo: DNCallInfo;

  { methods } 

    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackSetIndex(target: DNDynamicMetaObject; indexes: TArray<DNDynamicMetaObject>; value: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function FallbackSetIndex(target: DNDynamicMetaObject; indexes: TArray<DNDynamicMetaObject>; value: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDNC.System.Private.CoreLib.DNObject>; parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDNC.System.Private.CoreLib.DNType): DNExpression;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ReturnType: DDNC.System.Private.CoreLib.DNType read get_ReturnType;
    property CallInfo: DNCallInfo read get_CallInfo;
  end;

  TDNSetIndexBinder = class(TDNGenericImport<DNSetIndexBinderClass, DNSetIndexBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNSetMemberBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{57927232-DBBC-5FD3-B039-46A938EB8F07}']
  end;

  [DNTypeName('System.Dynamic.SetMemberBinder')]
  DNSetMemberBinder = interface(DNDynamicMetaObjectBinder)
  ['{499BAD3F-1D33-3BB3-BE49-D53CD00B4527}']
  { getters & setters } 

    function get_ReturnType: DDNC.System.Private.CoreLib.DNType;
    function get_Name: string;
    function get_IgnoreCase: Boolean;

  { methods } 

    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function FallbackSetMember(target: DNDynamicMetaObject; value: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function FallbackSetMember(target: DNDynamicMetaObject; value: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDNC.System.Private.CoreLib.DNObject>; parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDNC.System.Private.CoreLib.DNType): DNExpression;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ReturnType: DDNC.System.Private.CoreLib.DNType read get_ReturnType;
    property Name: string read get_Name;
    property IgnoreCase: Boolean read get_IgnoreCase;
  end;

  TDNSetMemberBinder = class(TDNGenericImport<DNSetMemberBinderClass, DNSetMemberBinder>) end;

  //-------------namespace: System.Dynamic----------------
  DNUnaryOperationBinderClass = interface(DNDynamicMetaObjectBinderClass)
  ['{1E4A9457-ED98-5C82-AC15-49AF0F73CA68}']
  end;

  [DNTypeName('System.Dynamic.UnaryOperationBinder')]
  DNUnaryOperationBinder = interface(DNDynamicMetaObjectBinder)
  ['{94F34DB6-8476-3C35-B39A-0F2F4E92C287}']
  { getters & setters } 

    function get_ReturnType: DDNC.System.Private.CoreLib.DNType;
    function get_Operation: DNExpressionType;

  { methods } 

    function FallbackUnaryOperation(target: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function FallbackUnaryOperation(target: DNDynamicMetaObject; errorSuggestion: DNDynamicMetaObject): DNDynamicMetaObject; overload;
    function Bind(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Bind(args: TArray<DDNC.System.Private.CoreLib.DNObject>; parameters: DDNC.System.Private.CoreLib.DNReadOnlyCollection<DNParameterExpression>; returnLabel: DNLabelTarget): DNExpression; overload;
    function GetUpdateExpression(&type: DDNC.System.Private.CoreLib.DNType): DNExpression;
    function Defer(target: DNDynamicMetaObject; args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function Defer(args: TArray<DNDynamicMetaObject>): DNDynamicMetaObject; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ReturnType: DDNC.System.Private.CoreLib.DNType read get_ReturnType;
    property Operation: DNExpressionType read get_Operation;
  end;

  TDNUnaryOperationBinder = class(TDNGenericImport<DNUnaryOperationBinderClass, DNUnaryOperationBinder>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallSiteHelpersClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{6340C4C4-57F7-5C9C-A7E5-F6EB2D47C15F}']
  { static methods } 

    {class} function IsInternalFrame(mb: DDNC.System.Private.CoreLib.DNMethodBase): Boolean;

  end;

  [DNTypeName('System.Runtime.CompilerServices.CallSiteHelpers')]
  DNCallSiteHelpers = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{D07E9FC3-7769-3EDA-BC62-60AEFA9F14B0}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNCallSiteHelpers = class(TDNGenericImport<DNCallSiteHelpersClass, DNCallSiteHelpers>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNCallSiteOpsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{DBEE1469-CE64-56A4-AC16-100A34DC0D48}']
  { static methods } 

    {class} function SetNotMatched(site: DNCallSite): Boolean;
    {class} function GetMatch(site: DNCallSite): Boolean;
    {class} procedure ClearMatch(site: DNCallSite);

  end;

  [DNTypeName('System.Runtime.CompilerServices.CallSiteOps')]
  DNCallSiteOps = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{D3DE4559-E0F7-3712-B010-8F03D7E8863D}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNCallSiteOps = class(TDNGenericImport<DNCallSiteOpsClass, DNCallSiteOps>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNClosureClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{37DD1494-B62F-5D7F-832C-314FFEB64529}']
  { constructors } 

    {class} function init(constants: TArray<DDNC.System.Private.CoreLib.DNObject>; locals: TArray<DDNC.System.Private.CoreLib.DNObject>): DNClosure;

  { static fields getter & setter } 

   function __fakeFieldGet_Constants: TArray<DDNC.System.Private.CoreLib.DNObject>;
   function __fakeFieldGet_Locals: TArray<DDNC.System.Private.CoreLib.DNObject>;

  { static fields } 

    {class} property Constants: TArray<DDNC.System.Private.CoreLib.DNObject> read __fakeFieldGet_Constants;
    {class} property Locals: TArray<DDNC.System.Private.CoreLib.DNObject> read __fakeFieldGet_Locals;

  end;

  [DNTypeName('System.Runtime.CompilerServices.Closure')]
  DNClosure = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{9AA90A91-367C-33F1-A98F-8597E832C252}']
  { fields getter & setter } 

   function __fakeFieldGet_Constants: TArray<DDNC.System.Private.CoreLib.DNObject>;
   function __fakeFieldGet_Locals: TArray<DDNC.System.Private.CoreLib.DNObject>;

  { fields } 

   property Constants: TArray<DDNC.System.Private.CoreLib.DNObject> read __fakeFieldGet_Constants;
   property Locals: TArray<DDNC.System.Private.CoreLib.DNObject> read __fakeFieldGet_Locals;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNClosure = class(TDNGenericImport<DNClosureClass, DNClosure>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNDebugInfoGeneratorClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{FE31701B-51C1-5CA2-AB25-D6DCBA3AB927}']
  { static methods } 

    {class} function CreatePdbGenerator: DNDebugInfoGenerator;

  end;

  [DNTypeName('System.Runtime.CompilerServices.DebugInfoGenerator')]
  DNDebugInfoGenerator = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{8955BB20-8A0D-382A-9A4A-1282504E7B3F}']
  { methods } 

    procedure MarkSequencePoint(method: DNLambdaExpression; ilOffset: Int32; sequencePoint: DNDebugInfoExpression);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNDebugInfoGenerator = class(TDNGenericImport<DNDebugInfoGeneratorClass, DNDebugInfoGenerator>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNReadOnlyCollectionBuilderClass<T> = interface(DNObjectClass)
  ['{90EF2396-6977-55AF-AD06-0BCFCEB21902}']
  { constructors } 

    {class} function init: DNReadOnlyCollectionBuilder<T>; overload;
    {class} function init(capacity: Int32): DNReadOnlyCollectionBuilder<T>; overload;
    {class} function init(collection: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNReadOnlyCollectionBuilder<T>; overload;

  end;

  [DNTypeName('System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1')]
  DNReadOnlyCollectionBuilder<T> = interface(DDNC.System.Private.CoreLib.DNIList<T>)
  ['{9CD49BD2-C86F-3C38-A497-011037B6551E}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function IndexOf(item: T): Int32;
    procedure Insert(index: Int32; item: T);
    procedure RemoveAt(index: Int32);
    function &Contains(item: T): Boolean;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<T>;
    procedure Reverse; overload;
    procedure Reverse(index: Int32; count: Int32); overload;
    function ToArray: TArray<T>;
    function ToReadOnlyCollection: DDNC.System.Private.CoreLib.DNReadOnlyCollection<T>;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNReadOnlyCollectionBuilder<T> = class(TDNGenericImport<DNReadOnlyCollectionBuilderClass<T>, DNReadOnlyCollectionBuilder<T>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNRuleCacheClass<T> = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{52C8B5F3-4622-5D7C-87A8-9148DD110331}']
  end;

  [DNTypeName('System.Runtime.CompilerServices.RuleCache`1')]
  DNRuleCache<T> = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{70049536-DE4C-327B-81DF-8180BD6535F2}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNRuleCache<T> = class(TDNGenericImport<DNRuleCacheClass<T>, DNRuleCache<T>>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNRuntimeOpsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{7CBD5617-E0E2-5CCA-AF6E-2E5F0E1A2371}']
  { static methods } 

    {class} function ExpandoTryGetValue(expando: DNExpandoObject; indexClass: DDNC.System.Private.CoreLib.DNObject; index: Int32; name: string; ignoreCase: Boolean; out value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    {class} function ExpandoTrySetValue(expando: DNExpandoObject; indexClass: DDNC.System.Private.CoreLib.DNObject; index: Int32; value: DDNC.System.Private.CoreLib.DNObject; name: string; ignoreCase: Boolean): DDNC.System.Private.CoreLib.DNObject;
    {class} function ExpandoTryDeleteValue(expando: DNExpandoObject; indexClass: DDNC.System.Private.CoreLib.DNObject; index: Int32; name: string; ignoreCase: Boolean): Boolean;
    {class} function ExpandoCheckVersion(expando: DNExpandoObject; version: DDNC.System.Private.CoreLib.DNObject): Boolean;
    {class} procedure ExpandoPromoteClass(expando: DNExpandoObject; oldClass: DDNC.System.Private.CoreLib.DNObject; newClass: DDNC.System.Private.CoreLib.DNObject);
    {class} function Quote(expression: DNExpression; hoistedLocals: DDNC.System.Private.CoreLib.DNObject; locals: TArray<DDNC.System.Private.CoreLib.DNObject>): DNExpression;
    {class} function MergeRuntimeVariables(first: DNIRuntimeVariables; second: DNIRuntimeVariables; indexes: TArray<Int32>): DNIRuntimeVariables;
    {class} function CreateRuntimeVariables(data: TArray<DDNC.System.Private.CoreLib.DNObject>; indexes: TArray<Int64>): DNIRuntimeVariables; overload;
    {class} function CreateRuntimeVariables: DNIRuntimeVariables; overload;

  end;

  [DNTypeName('System.Runtime.CompilerServices.RuntimeOps')]
  DNRuntimeOps = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{32FE05B6-35EB-3C0A-8D5B-B8F37FD9BDEF}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNRuntimeOps = class(TDNGenericImport<DNRuntimeOpsClass, DNRuntimeOps>) end;


implementation


initialization
  InternalTryLoadAssemblyModule('System.Linq.Expressions, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a');

finalization

end.
