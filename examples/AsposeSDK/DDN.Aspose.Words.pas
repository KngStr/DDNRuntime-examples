// Aspose.Words, Version=21.6.0.0, Culture=neutral, PublicKeyToken=716fcc553a201e56
//-----------------------------------------------------------//
//                                                           //
//     DDN.Aspose.Words                             
//     Delphi .NET Import                                    //
//     Author: ying32                                        //
//     .NET Framework: .NET 4.0                              //
//                                                           //
//-----------------------------------------------------------//

unit DDN.Aspose.Words;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.Aspose.Common;

type

{ enums }

  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Specifies sides of a border.
  ///</summary>
  [DNTypeName('Aspose.Words.BorderType')]
  DNBorderType = type Integer;
  DNBorderTypeHelper = record helper for DNBorderType
  public const
    ///<summary>
    ///  Specifies the bottom border of a paragraph or a table cell.
    ///</summary>
    Bottom = 0;
    ///<summary>
    ///  Specifies the left border of a paragraph or a table cell.
    ///</summary>
    Left = 1;
    ///<summary>
    ///  Specifies the right border of a paragraph or a table cell.
    ///</summary>
    Right = 2;
    ///<summary>
    ///  Specifies the top border of a paragraph or a table cell.
    ///</summary>
    Top = 3;
    ///<summary>
    ///  Specifies the horizontal border between cells in a table or between conforming paragraphs.
    ///</summary>
    Horizontal = 4;
    ///<summary>
    ///  Specifies the vertical border between cells in a table.
    ///</summary>
    Vertical = 5;
    ///<summary>
    ///  Specifies the diagonal border in a table cell.
    ///</summary>
    DiagonalDown = 6;
    ///<summary>
    ///  Specifies the diagonal border in a table cell.
    ///</summary>
    DiagonalUp = 7;
    ///<summary>
    ///  Default value.
    ///</summary>
    None = -1;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Specifies type of a break inside a document.
  ///</summary>
  [DNTypeName('Aspose.Words.BreakType')]
  DNBreakType = type Integer;
  DNBreakTypeHelper = record helper for DNBreakType
  public const
    ///<summary>
    ///  Break between paragraphs.
    ///</summary>
    ParagraphBreak = 0;
    ///<summary>
    ///  Explicit page break.
    ///</summary>
    PageBreak = 1;
    ///<summary>
    ///  Explicit column break.
    ///</summary>
    ColumnBreak = 2;
    ///<summary>
    ///  Specifies start of new section on the same page as the previous section.
    ///</summary>
    SectionBreakContinuous = 3;
    ///<summary>
    ///  Specifies start of new section in the new column.
    ///</summary>
    SectionBreakNewColumn = 4;
    ///<summary>
    ///  Specifies start of new section on a new page.
    ///</summary>
    SectionBreakNewPage = 5;
    ///<summary>
    ///  Specifies start of new section on a new even page.
    ///</summary>
    SectionBreakEvenPage = 6;
    ///<summary>
    ///  Specifies start of new section on a odd page.
    ///</summary>
    SectionBreakOddPage = 7;
    ///<summary>
    ///  Explicit line break.
    ///</summary>
    LineBreak = 8;
  end;


  //-------------namespace: Aspose.Words.BuildingBlocks----------------
  ///<summary>
  ///  Specifies the behavior that shall be applied to the contents of the building block
  ///  when it is inserted into the main document.
  ///</summary>
  ///<remarks><para>Corresponds to the <b>ST_DocPartBehavior</b>
  ///  type in OOXML.</para><seealso cref="P:Aspose.Words.BuildingBlocks.BuildingBlock.Behavior" />
  ///</remarks>
  [DNTypeName('Aspose.Words.BuildingBlocks.BuildingBlockBehavior')]
  DNBuildingBlockBehavior = type Integer;
  DNBuildingBlockBehaviorHelper = record helper for DNBuildingBlockBehavior
  public const
    ///<summary>
    ///  Same as <see cref="F:Aspose.Words.BuildingBlocks.BuildingBlockBehavior.Content" />
    ///  .
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Specifies that the building block shall be inserted as inline content.
    ///</summary>
    Content = 0;
    ///<summary>
    ///  Specifies that the building block shall be inserted into its own paragraph.
    ///</summary>
    Paragraph = 1;
    ///<summary>
    ///  Specifies that the building block shall be added into its own page.
    ///</summary>
    Page = 2;
  end;


  //-------------namespace: Aspose.Words.BuildingBlocks----------------
  ///<summary>
  ///  Specifies the predefined gallery into which a building block is classified.
  ///</summary>
  ///<remarks><para>Corresponds to the <b>ST_DocPartGallery</b>
  ///  type in OOXML.</para><seealso cref="P:Aspose.Words.BuildingBlocks.BuildingBlock.Gallery" />
  ///</remarks>
  [DNTypeName('Aspose.Words.BuildingBlocks.BuildingBlockGallery')]
  DNBuildingBlockGallery = type Integer;
  DNBuildingBlockGalleryHelper = record helper for DNBuildingBlockGallery
  public const
    ///<summary>
    ///  Same as <see cref="F:Aspose.Words.BuildingBlocks.BuildingBlockGallery.All" />
    ///  .
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Specifies that this glossary document entry shall be associated with all possible gallery classification values.
    ///</summary>
    All = 0;
    ///<summary></summary>
    AutoText = 1;
    ///<summary></summary>
    Bibliography = 2;
    ///<summary></summary>
    CoverPage = 3;
    ///<summary></summary>
    CustomAutoText = 4;
    ///<summary></summary>
    CustomBibliography = 5;
    ///<summary></summary>
    CustomCoverPage = 6;
    ///<summary></summary>
    CustomEquations = 7;
    ///<summary></summary>
    CustomFooters = 8;
    ///<summary></summary>
    CustomHeaders = 9;
    ///<summary></summary>
    Custom1 = 10;
    ///<summary></summary>
    Custom2 = 11;
    ///<summary></summary>
    Custom3 = 12;
    ///<summary></summary>
    Custom4 = 13;
    ///<summary></summary>
    Custom5 = 14;
    ///<summary></summary>
    CustomPageNumber = 15;
    ///<summary></summary>
    CustomPageNumberAtBottom = 16;
    ///<summary></summary>
    CustomPageNumberAtMargin = 17;
    ///<summary></summary>
    CustomPageNumberAtTop = 18;
    ///<summary></summary>
    CustomQuickParts = 19;
    ///<summary></summary>
    CustomTableOfContents = 20;
    ///<summary></summary>
    CustomTables = 21;
    ///<summary></summary>
    CustomTextBox = 22;
    ///<summary></summary>
    CustomWatermarks = 23;
    ///<summary></summary>
    NoGallery = 24;
    ///<summary></summary>
    QuickParts = 25;
    ///<summary></summary>
    Equations = 26;
    ///<summary></summary>
    Footers = 27;
    ///<summary></summary>
    Headers = 28;
    ///<summary></summary>
    PageNumber = 29;
    ///<summary></summary>
    PageNumberAtBottom = 30;
    ///<summary></summary>
    PageNumberAtMargin = 31;
    ///<summary></summary>
    PageNumberAtTop = 32;
    ///<summary></summary>
    StructuredDocumentTagPlaceholderText = 33;
    ///<summary></summary>
    TableOfContents = 34;
    ///<summary></summary>
    Tables = 35;
    ///<summary></summary>
    TextBox = 36;
    ///<summary></summary>
    Watermarks = 37;
  end;


  //-------------namespace: Aspose.Words.BuildingBlocks----------------
  ///<summary>
  ///  Specifies a building block type. The type might affect the visibility and behavior of the building block
  ///  in Microsoft Word.
  ///</summary>
  ///<remarks><para>Corresponds to the <b>ST_DocPartType</b>
  ///  type in OOXML.</para><seealso cref="P:Aspose.Words.BuildingBlocks.BuildingBlock.Type" />
  ///</remarks>
  [DNTypeName('Aspose.Words.BuildingBlocks.BuildingBlockType')]
  DNBuildingBlockType = type Integer;
  DNBuildingBlockTypeHelper = record helper for DNBuildingBlockType
  public const
    ///<summary>
    ///  Save as <see cref="F:Aspose.Words.BuildingBlocks.BuildingBlockType.None" />
    ///  .
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  No type information is specified for the building block.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Allows the building block to be automatically inserted into the document whenever
    ///  its name is entered into an application.
    ///</summary>
    AutomaticallyReplaceNameWithContent = 1;
    ///<summary>
    ///  The building block is a structured document tag placeholder text.
    ///</summary>
    StructuredDocumentTagPlaceholderText = 2;
    ///<summary>
    ///  The building block is a form field help text.
    ///</summary>
    FormFieldHelpText = 3;
    ///<summary>
    ///  The building block is a normal (i.e. regular) glossary document entry.
    ///</summary>
    Normal = 4;
    ///<summary>
    ///  The building block is associated with the spelling and grammar tools.
    ///</summary>
    AutoCorrect = 5;
    ///<summary>
    ///  The building block is an AutoText entry.
    ///</summary>
    AutoText = 6;
    ///<summary>
    ///  The building block is associated with all types.
    ///</summary>
    All = 7;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Specifies the type of a calendar.
  ///</summary>
  [DNTypeName('Aspose.Words.CalendarType')]
  DNCalendarType = type Integer;
  DNCalendarTypeHelper = record helper for DNCalendarType
  public const
    ///<summary>
    ///  The Gregorian calendar.
    ///</summary>
    Gregorian = 0;
    ///<summary>
    ///  The Hijri Lunar calendar.
    ///</summary>
    Hijri = 1;
    ///<summary>
    ///  The Hebrew Lunar calendar.
    ///</summary>
    Hebrew = 2;
    ///<summary>
    ///  The Saka Era calendar.
    ///</summary>
    SakaEra = 3;
    ///<summary>
    ///  The Um-al-Qura calendar.
    ///</summary>
    UmAlQura = 4;
  end;


  //-------------namespace: Aspose.Words.Comparing----------------
  ///<summary>
  ///  Allows to specify base document which will be used during comparison.  Default value is <see cref="F:Aspose.Words.Comparing.ComparisonTargetType.Current" />
  ///  .
  ///</summary>
  ///<remarks>
  ///  Relates to Microsoft Word "Show changes in" option in "Compare Documents" dialog box.
  ///</remarks>
  [DNTypeName('Aspose.Words.Comparing.ComparisonTargetType')]
  DNComparisonTargetType = type Integer;
  DNComparisonTargetTypeHelper = record helper for DNComparisonTargetType
  public const
    ///<summary>
    ///  This document is used as a base during comparison.
    ///</summary>
    Current = 0;
    ///<summary>
    ///  Other document is used as a base during comparison.
    ///</summary>
    New = 1;
  end;


  //-------------namespace: Aspose.Words.Comparing----------------
  ///<summary>
  ///  Specifies the granularity of changes to track when comparing two documents.
  ///</summary>
  [DNTypeName('Aspose.Words.Comparing.Granularity')]
  DNGranularity = type Integer;
  DNGranularityHelper = record helper for DNGranularity
  public const
    CharLevel = 0;
    WordLevel = 1;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Represents possible table areas to which conditional formatting may be defined in a table style.
  ///</summary>
  [DNTypeName('Aspose.Words.ConditionalStyleType')]
  DNConditionalStyleType = type Integer;
  DNConditionalStyleTypeHelper = record helper for DNConditionalStyleType
  public const
    ///<summary>
    ///  Specifies formatting of the first row of a table.
    ///</summary>
    FirstRow = 0;
    ///<summary>
    ///  Specifies formatting of the first column of a table.
    ///</summary>
    FirstColumn = 1;
    ///<summary>
    ///  Specifies formatting of the last row of a table.
    ///</summary>
    LastRow = 2;
    ///<summary>
    ///  Specifies formatting of the last column of a table.
    ///</summary>
    LastColumn = 3;
    ///<summary>
    ///  Specifies formatting of odd-numbered row stripe.
    ///</summary>
    OddRowBanding = 4;
    ///<summary>
    ///  Specifies formatting of odd-numbered column stripe.
    ///</summary>
    OddColumnBanding = 5;
    ///<summary>
    ///  Specifies formatting of even-numbered row stripe.
    ///</summary>
    EvenRowBanding = 6;
    ///<summary>
    ///  Specifies formatting of even-numbered column stripe.
    ///</summary>
    EvenColumnBanding = 7;
    ///<summary>
    ///  Specifies formatting of the top left cell of a table.
    ///</summary>
    TopLeftCell = 8;
    ///<summary>
    ///  Specifies formatting of the top right cell of a table.
    ///</summary>
    TopRightCell = 9;
    ///<summary>
    ///  Specifies formatting of the bottom left cell of a table.
    ///</summary>
    BottomLeftCell = 10;
    ///<summary>
    ///  Specifies formatting of the bottom right cell of a table.
    ///</summary>
    BottomRightCell = 11;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Enumerates different ways of presenting the document at the client browser.
  ///</summary>
  ///<remarks><para>Note that the actual behavior on the client browser might be affected by security configuration of the browser.</para></remarks>
  [DNTypeName('Aspose.Words.ContentDisposition')]
  DNContentDisposition = type Integer;
  DNContentDispositionHelper = record helper for DNContentDisposition
  public const
    ///<summary>
    ///  Send the document to the browser and present an option to save the document to disk or open in the application
    ///  associated with the document's extension.
    ///</summary>
    Attachment = 0;
    ///<summary>
    ///  Send the document to the browser and presents an option to save the document to disk or open inside the browser.
    ///</summary>
    Inline_ = 1;
  end;


  //-------------namespace: Aspose.Words.DigitalSignatures----------------
  ///<summary>
  ///  Specifies the type of a digital signature.
  ///</summary>
  [DNTypeName('Aspose.Words.DigitalSignatures.DigitalSignatureType')]
  DNDigitalSignatureType = type Integer;
  DNDigitalSignatureTypeHelper = record helper for DNDigitalSignatureType
  public const
    ///<summary>
    ///  Indicates an error, unknown digital signature type.
    ///</summary>
    Unknown = 0;
    ///<summary>
    ///  The Crypto API signature method used in Microsoft Word 97-2003 .DOC binary documents.
    ///</summary>
    CryptoApi = 1;
    ///<summary>
    ///  The XmlDsig signature method used in OOXML and OpenDocument documents.
    ///</summary>
    XmlDsig = 2;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  ///<summary>
  ///  Length of the arrow at the end of a line.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Drawing.Stroke.StartArrowLength" />
  ///<seealso cref="P:Aspose.Words.Drawing.Stroke.EndArrowLength" />
  [DNTypeName('Aspose.Words.Drawing.ArrowLength')]
  DNArrowLength = type Integer;
  DNArrowLengthHelper = record helper for DNArrowLength
  public const
    ///<summary>
    ///  Same as <see cref="F:Aspose.Words.Drawing.ArrowLength.Short" />
    ///  .
    ///</summary>
    Default_ = 0;
    ///<summary></summary>
    Short = 0;
    ///<summary></summary>
    Medium = 1;
    ///<summary></summary>
    Long = 2;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  ///<summary>
  ///  Specifies the type of an arrow at a line end.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Drawing.Stroke.StartArrowType" />
  ///<seealso cref="P:Aspose.Words.Drawing.Stroke.EndArrowType" />
  [DNTypeName('Aspose.Words.Drawing.ArrowType')]
  DNArrowType = type Integer;
  DNArrowTypeHelper = record helper for DNArrowType
  public const
    ///<summary>
    ///  The line does not have an arrow at the end.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Same as <see cref="F:Aspose.Words.Drawing.ArrowType.None" />
    ///  .
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  The arrow is a solid triangle.
    ///</summary>
    Arrow = 1;
    ///<summary>
    ///  The arrow is a "stealth" arrow.
    ///</summary>
    Stealth = 2;
    ///<summary>
    ///  The line end is a solid diamond.
    ///</summary>
    Diamond = 3;
    ///<summary>
    ///  The line end is a solid oval.
    ///</summary>
    Oval = 4;
    ///<summary>
    ///  The arrow is an open arrow.
    ///</summary>
    Open = 5;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  ///<summary>
  ///  Width of the arrow at the end of a line.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Drawing.Stroke.StartArrowWidth" />
  ///<seealso cref="P:Aspose.Words.Drawing.Stroke.EndArrowWidth" />
  [DNTypeName('Aspose.Words.Drawing.ArrowWidth')]
  DNArrowWidth = type Integer;
  DNArrowWidthHelper = record helper for DNArrowWidth
  public const
    ///<summary>
    ///  Same as <see cref="F:Aspose.Words.Drawing.ArrowWidth.Narrow" />
    ///  .
    ///</summary>
    Default_ = 0;
    ///<summary></summary>
    Narrow = 0;
    ///<summary></summary>
    Medium = 1;
    ///<summary></summary>
    Wide = 2;
  end;


  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  ///<summary>
  ///  Specifies the display units for an axis.
  ///</summary>
  ///<dev>
  ///  Corresponds to the ST_BuiltInUnit simple type (5.7.3.6).
  ///</dev>
  [DNTypeName('Aspose.Words.Drawing.Charts.AxisBuiltInUnit')]
  DNAxisBuiltInUnit = type Integer;
  DNAxisBuiltInUnitHelper = record helper for DNAxisBuiltInUnit
  public const
    ///<summary>
    ///  Specifies the values on the chart shall displayed as is.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Specifies the values on the chart shall be divided by a user-defined divisor. This value is not supported
    ///  by the new chart types of MS Office 2016.
    ///</summary>
    Custom = 1;
    ///<summary>
    ///  Specifies the values on the chart shall be divided by 1,000,000,000.
    ///</summary>
    Billions = 2;
    ///<summary>
    ///  Specifies the values on the chart shall be divided by 100,000,000.
    ///</summary>
    HundredMillions = 3;
    ///<summary>
    ///  Specifies the values on the chart shall be divided by 100.
    ///</summary>
    Hundreds = 4;
    ///<summary>
    ///  Specifies the values on the chart shall be divided by 100,000.
    ///</summary>
    HundredThousands = 5;
    ///<summary>
    ///  Specifies the values on the chart shall be divided by 1,000,000.
    ///</summary>
    Millions = 6;
    ///<summary>
    ///  Specifies the values on the chart shall be divided by 10,000,000.
    ///</summary>
    TenMillions = 7;
    ///<summary>
    ///  Specifies the values on the chart shall be divided by 10,000.
    ///</summary>
    TenThousands = 8;
    ///<summary>
    ///  Specifies the values on the chart shall be divided by 1,000.
    ///</summary>
    Thousands = 9;
    ///<summary>
    ///  Specifies the values on the chart shall be divided by 1,000,000,000,0000.
    ///</summary>
    Trillions = 10;
    ///<summary>
    ///  Specifies the values on the chart shall be divided by 0.01. This value is supported only by the new chart
    ///  types of MS Office 2016.
    ///</summary>
    Percentage = 11;
  end;


  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  ///<summary>
  ///  Specifies type of a category axis.
  ///</summary>
  [DNTypeName('Aspose.Words.Drawing.Charts.AxisCategoryType')]
  DNAxisCategoryType = type Integer;
  DNAxisCategoryTypeHelper = record helper for DNAxisCategoryType
  public const
    ///<summary>
    ///  Specifies that type of a category axis is determined automatically based on data.
    ///</summary>
    Automatic = 0;
    ///<summary>
    ///  Specifies an axis of an arbitrary set of categories.
    ///</summary>
    Category = 1;
    ///<summary>
    ///  Specifies a time category axis.
    ///</summary>
    Time = 2;
  end;


  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  ///<summary>
  ///  Specifies the possible crossing points for an axis.
  ///</summary>
  [DNTypeName('Aspose.Words.Drawing.Charts.AxisCrosses')]
  DNAxisCrosses = type Integer;
  DNAxisCrossesHelper = record helper for DNAxisCrosses
  public const
    ///<summary>
    ///  The category axis crosses at the zero point of the value axis (if possible), or at the minimum value
    ///  if the minimum is greater than zero, or at the maximum if the maximum is less than zero.
    ///</summary>
    Automatic = 0;
    ///<summary>
    ///  A perpendicular axis crosses at the maximum value of the axis.
    ///</summary>
    Maximum = 1;
    ///<summary>
    ///  A perpendicular axis crosses at the minimum value of the axis.
    ///</summary>
    Minimum = 2;
    ///<summary>
    ///  A perpendicular axis crosses at the specified value of the axis.
    ///</summary>
    Custom = 3;
  end;


  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  ///<summary>
  ///  Specifies the possible scale types for an axis.
  ///</summary>
  [DNTypeName('Aspose.Words.Drawing.Charts.AxisScaleType')]
  DNAxisScaleType = type Integer;
  DNAxisScaleTypeHelper = record helper for DNAxisScaleType
  public const
    ///<summary>
    ///  Linear scaling.
    ///</summary>
    Linear = 0;
    ///<summary>
    ///  Logarithmic scaling.
    ///</summary>
    Logarithmic = 1;
  end;


  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  ///<summary>
  ///  Specifies the possible positions for tick labels.
  ///</summary>
  [DNTypeName('Aspose.Words.Drawing.Charts.AxisTickLabelPosition')]
  DNAxisTickLabelPosition = type Integer;
  DNAxisTickLabelPositionHelper = record helper for DNAxisTickLabelPosition
  public const
    ///<summary>
    ///  Specifies the axis labels shall be at the high end of the perpendicular axis.
    ///</summary>
    High = 0;
    ///<summary>
    ///  Specifies the axis labels shall be at the low end of the perpendicular axis.
    ///</summary>
    Low = 1;
    ///<summary>
    ///  Specifies the axis labels shall be next to the axis.
    ///</summary>
    NextToAxis = 2;
    ///<summary>
    ///  Specifies default value of tick labels position.
    ///</summary>
    Default_ = 2;
    ///<summary>
    ///  Specifies the axis labels are not drawn.
    ///</summary>
    None = 3;
  end;


  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  ///<summary>
  ///  Specifies the possible positions for tick marks.
  ///</summary>
  [DNTypeName('Aspose.Words.Drawing.Charts.AxisTickMark')]
  DNAxisTickMark = type Integer;
  DNAxisTickMarkHelper = record helper for DNAxisTickMark
  public const
    ///<summary>
    ///  Specifies that the tick marks shall cross the axis.
    ///</summary>
    Cross = 0;
    ///<summary>
    ///  Specifies that the tick marks shall be inside the plot area.
    ///</summary>
    Inside = 1;
    ///<summary>
    ///  Specifies that the tick marks shall be outside the plot area.
    ///</summary>
    Outside = 2;
    ///<summary>
    ///  Specifies that there shall be no tick marks.
    ///</summary>
    None = 3;
  end;


  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  ///<summary>
  ///  Specifies the unit of time for axes.
  ///</summary>
  [DNTypeName('Aspose.Words.Drawing.Charts.AxisTimeUnit')]
  DNAxisTimeUnit = type Integer;
  DNAxisTimeUnitHelper = record helper for DNAxisTimeUnit
  public const
    ///<summary>
    ///  Specifies that unit was not set explicitly and default value should be used.
    ///</summary>
    Automatic = 0;
    ///<summary>
    ///  Specifies that the chart data shall be shown in days.
    ///</summary>
    Days = 1;
    ///<summary>
    ///  Specifies that the chart data shall be shown in months.
    ///</summary>
    Months = 2;
    ///<summary>
    ///  Specifies that the chart data shall be shown in years.
    ///</summary>
    Years = 3;
  end;


  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  ///<summary>
  ///  Specifies type of chart axis.
  ///</summary>
  [DNTypeName('Aspose.Words.Drawing.Charts.ChartAxisType')]
  DNChartAxisType = type Integer;
  DNChartAxisTypeHelper = record helper for DNChartAxisType
  public const
    ///<summary>
    ///  Category axis of a chart.
    ///</summary>
    Category = 0;
    ///<summary>
    ///  Series axis of a chart.
    ///</summary>
    Series = 1;
    ///<summary>
    ///  Value axis of a chart.
    ///</summary>
    Value = 2;
  end;


  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  ///<summary>
  ///  Specifies type of a chart.
  ///</summary>
  [DNTypeName('Aspose.Words.Drawing.Charts.ChartType')]
  DNChartType = type Integer;
  DNChartTypeHelper = record helper for DNChartType
  public const
    ///<summary>
    ///  Area chart.
    ///</summary>
    Area = 0;
    ///<summary>
    ///  Stacked Area chart.
    ///</summary>
    AreaStacked = 1;
    ///<summary>
    ///  100% Stacked Area chart.
    ///</summary>
    AreaPercentStacked = 2;
    ///<summary>
    ///  3D Area chart.
    ///</summary>
    Area3D = 3;
    ///<summary>
    ///  3D Stacked Area chart.
    ///</summary>
    Area3DStacked = 4;
    ///<summary>
    ///  3D 100% Stacked Area chart.
    ///</summary>
    Area3DPercentStacked = 5;
    ///<summary>
    ///  Bar chart.
    ///</summary>
    Bar = 6;
    ///<summary>
    ///  Stacked Bar chart.
    ///</summary>
    BarStacked = 7;
    ///<summary>
    ///  100% Stacked Bar chart.
    ///</summary>
    BarPercentStacked = 8;
    ///<summary>
    ///  3D Bar chart.
    ///</summary>
    Bar3D = 9;
    ///<summary>
    ///  3D Stacked Bar chart.
    ///</summary>
    Bar3DStacked = 10;
    ///<summary>
    ///  3D 100% Stacked Bar chart.
    ///</summary>
    Bar3DPercentStacked = 11;
    ///<summary>
    ///  Bubble chart.
    ///</summary>
    Bubble = 12;
    ///<summary>
    ///  3D Bubble chart.
    ///</summary>
    Bubble3D = 13;
    ///<summary>
    ///  Column chart.
    ///</summary>
    Column = 14;
    ///<summary>
    ///  Stacked Column chart.
    ///</summary>
    ColumnStacked = 15;
    ///<summary>
    ///  100% Stacked Column chart.
    ///</summary>
    ColumnPercentStacked = 16;
    ///<summary>
    ///  3D Column chart.
    ///</summary>
    Column3D = 17;
    ///<summary>
    ///  3D Stacked Column chart.
    ///</summary>
    Column3DStacked = 18;
    ///<summary>
    ///  3D 100% Stacked Column chart.
    ///</summary>
    Column3DPercentStacked = 19;
    ///<summary>
    ///  3D Clustered Column chart.
    ///</summary>
    Column3DClustered = 20;
    ///<summary>
    ///  Doughnut chart.
    ///</summary>
    Doughnut = 21;
    ///<summary>
    ///  Line chart.
    ///</summary>
    Line = 22;
    ///<summary>
    ///  Stacked Line chart.
    ///</summary>
    LineStacked = 23;
    ///<summary>
    ///  100% Stacked Line chart.
    ///</summary>
    LinePercentStacked = 24;
    ///<summary>
    ///  3D Line chart.
    ///</summary>
    Line3D = 25;
    ///<summary>
    ///  Pie chart.
    ///</summary>
    Pie = 26;
    ///<summary>
    ///  3D Pie chart.
    ///</summary>
    Pie3D = 27;
    ///<summary>
    ///  Pie of Bar chart.
    ///</summary>
    PieOfBar = 28;
    ///<summary>
    ///  Pie of Pie chart.
    ///</summary>
    PieOfPie = 29;
    ///<summary>
    ///  Radar chart.
    ///</summary>
    Radar = 30;
    ///<summary>
    ///  Scatter chart.
    ///</summary>
    Scatter = 31;
    ///<summary>
    ///  Stock chart.
    ///</summary>
    Stock = 32;
    ///<summary>
    ///  Surface chart.
    ///</summary>
    Surface = 33;
    ///<summary>
    ///  3D Surface chart.
    ///</summary>
    Surface3D = 34;
  end;


  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  ///<summary>
  ///  Specifies the possible positions for a chart legend.
  ///</summary>
  [DNTypeName('Aspose.Words.Drawing.Charts.LegendPosition')]
  DNLegendPosition = type Integer;
  DNLegendPositionHelper = record helper for DNLegendPosition
  public const
    ///<summary>
    ///  No legend will be shown for the chart.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Specifies that the legend shall be drawn at the bottom of the chart.
    ///</summary>
    Bottom = 1;
    ///<summary>
    ///  Specifies that the legend shall be drawn at the left of the chart.
    ///</summary>
    Left = 2;
    ///<summary>
    ///  Specifies that the legend shall be drawn at the right of the chart.
    ///</summary>
    Right = 3;
    ///<summary>
    ///  Specifies that the legend shall be drawn at the top of the chart.
    ///</summary>
    Top = 4;
    ///<summary>
    ///  Specifies that the legend shall be drawn at the top right of the chart.
    ///</summary>
    TopRight = 5;
  end;


  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  ///<summary>
  ///  Specifies marker symbol style.
  ///</summary>
  [DNTypeName('Aspose.Words.Drawing.Charts.MarkerSymbol')]
  DNMarkerSymbol = type Integer;
  DNMarkerSymbolHelper = record helper for DNMarkerSymbol
  public const
    ///<summary>
    ///  Specifies a default marker symbol shall be drawn at each data point.
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Specifies a circle shall be drawn at each data point.
    ///</summary>
    Circle = 1;
    ///<summary>
    ///  Specifies a dash shall be drawn at each data point.
    ///</summary>
    Dash = 2;
    ///<summary>
    ///  Specifies a diamond shall be drawn at each data point.
    ///</summary>
    Diamond = 3;
    ///<summary>
    ///  Specifies a dot shall be drawn at each data point.
    ///</summary>
    Dot = 4;
    ///<summary>
    ///  Specifies nothing shall be drawn at each data point.
    ///</summary>
    None = 5;
    ///<summary>
    ///  Specifies a picture shall be drawn at each data point.
    ///</summary>
    Picture = 6;
    ///<summary>
    ///  Specifies a plus shall be drawn at each data point.
    ///</summary>
    Plus = 7;
    ///<summary>
    ///  Specifies a square shall be drawn at each data point.
    ///</summary>
    Square = 8;
    ///<summary>
    ///  Specifies a star shall be drawn at each data point.
    ///</summary>
    Star = 9;
    ///<summary>
    ///  Specifies a triangle shall be drawn at each data point.
    ///</summary>
    Triangle = 10;
    ///<summary>
    ///  Specifies an X shall be drawn at each data point.
    ///</summary>
    X = 11;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  ///<summary>
  ///  Dashed line style.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Drawing.Stroke.DashStyle" />
  [DNTypeName('Aspose.Words.Drawing.DashStyle')]
  DNDashStyle = type Integer;
  DNDashStyleHelper = record helper for DNDashStyle
  public const
    ///<summary>
    ///  Same as <see cref="F:Aspose.Words.Drawing.DashStyle.Solid" />
    ///  .
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Solid (continuous) pen.
    ///</summary>
    Solid = 0;
    ///<summary>
    ///  System dash style.
    ///</summary>
    ShortDash = 1;
    ///<summary>
    ///  System dash style.
    ///</summary>
    ShortDot = 2;
    ///<summary>
    ///  System dash style.
    ///</summary>
    ShortDashDot = 3;
    ///<summary>
    ///  System dash style.
    ///</summary>
    ShortDashDotDot = 4;
    ///<summary>
    ///  Square dot style.
    ///</summary>
    Dot = 5;
    ///<summary>
    ///  Dash style.
    ///</summary>
    Dash = 6;
    ///<summary>
    ///  Long dash style.
    ///</summary>
    LongDash = 7;
    ///<summary>
    ///  Dash short dash.
    ///</summary>
    DashDot = 8;
    ///<summary>
    ///  Long dash short dash.
    ///</summary>
    LongDashDot = 9;
    ///<summary>
    ///  Long dash short dash short dash.
    ///</summary>
    LongDashDotDot = 10;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  ///<summary>
  ///  Specifies line cap style.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Drawing.Stroke.EndCap" />
  [DNTypeName('Aspose.Words.Drawing.EndCap')]
  DNEndCap = type Integer;
  DNEndCapHelper = record helper for DNEndCap
  public const
    ///<summary>
    ///  Rounded ends.
    ///</summary>
    Round = 0;
    ///<summary>
    ///  Square protrudes by half line width.
    ///</summary>
    Square = 1;
    ///<summary>
    ///  Line ends at end point.
    ///</summary>
    Flat = 2;
    ///<summary>
    ///  Default value is <see cref="F:Aspose.Words.Drawing.EndCap.Flat" />
    ///  .
    ///</summary>
    Default_ = 2;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  ///<summary>
  ///  Specifies fill type for a fillable object.
  ///</summary>
  [DNTypeName('Aspose.Words.Drawing.FillType')]
  DNFillType = type Integer;
  DNFillTypeHelper = record helper for DNFillType
  public const
    ///<summary>
    ///  Solid fill.
    ///</summary>
    Solid = 1;
    ///<summary>
    ///  Patterned fill.
    ///</summary>
    Patterned = 2;
    ///<summary>
    ///  Gradient fill.
    ///</summary>
    Gradient = 3;
    ///<summary>
    ///  Textured fill.
    ///</summary>
    Textured = 4;
    ///<summary>
    ///  Fill is the same as the background.
    ///</summary>
    Background = 5;
    ///<summary>
    ///  Picture fill.
    ///</summary>
    Picture = 6;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  ///<summary>
  ///  Possible values for the orientation of a shape.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Drawing.ShapeBase.FlipOrientation" />
  [DNTypeName('Aspose.Words.Drawing.FlipOrientation')]
  DNFlipOrientation = type Integer;
  DNFlipOrientationHelper = record helper for DNFlipOrientation
  public const
    ///<summary>
    ///  Coordinates are not flipped.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Flip along the y-axis, reversing the x-coordinates.
    ///</summary>
    Horizontal = 1;
    ///<summary>
    ///  Flip along the x-axis, reversing the y-coordinates.
    ///</summary>
    Vertical = 2;
    ///<summary>
    ///  Flip along both the y- and x-axis.
    ///</summary>
    Both = 3;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  ///<summary>
  ///  Specifies horizontal alignment of a floating shape, text frame or floating table.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Drawing.ShapeBase.HorizontalAlignment" />
  ///<dev>
  ///  Do not renumber. The values are taken from the RTF specification.
  ///</dev>
  [DNTypeName('Aspose.Words.Drawing.HorizontalAlignment')]
  DNHorizontalAlignment = type Integer;
  DNHorizontalAlignmentHelper = record helper for DNHorizontalAlignment
  public const
    ///<summary>
    ///  The object is explicitly positioned, usually using its <b>Left</b>
    ///  property.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Same as <see cref="F:Aspose.Words.Drawing.HorizontalAlignment.None" />
    ///  .
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Specifies that the object shall be left aligned to the horizontal alignment base.
    ///</summary>
    Left = 1;
    ///<summary>
    ///  Specifies that the object shall be centered with respect to the horizontal alignment base.
    ///</summary>
    Center = 2;
    ///<summary>
    ///  Specifies that the object shall be right aligned to the horizontal alignment base.
    ///</summary>
    Right = 3;
    ///<summary>
    ///  Specifies that the object shall be inside of the horizontal alignment base.
    ///</summary>
    Inside = 4;
    ///<summary>
    ///  Specifies that the object shall be outside of the horizontal alignment base.
    ///</summary>
    Outside = 5;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  ///<summary>
  ///  Represents the alignment for the specified horizontal rule.
  ///</summary>
  [DNTypeName('Aspose.Words.Drawing.HorizontalRuleAlignment')]
  DNHorizontalRuleAlignment = type Integer;
  DNHorizontalRuleAlignmentHelper = record helper for DNHorizontalRuleAlignment
  public const
    ///<summary>
    ///  Aligned to the left.
    ///</summary>
    Left = 0;
    ///<summary>
    ///  Aligned to the center.
    ///</summary>
    Center = 1;
    ///<summary>
    ///  Aligned to the right.
    ///</summary>
    Right = 2;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  ///<summary>
  ///  Specifies the type (format) of an image in a Microsoft Word document.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Drawing.ImageData.ImageType" />
  ///<dev>
  ///  Do not renumber these. The values correspond to MSOBLIPTYPE in the Binary Drawing format.
  ///</dev>
  [DNTypeName('Aspose.Words.Drawing.ImageType')]
  DNImageType = type Integer;
  DNImageTypeHelper = record helper for DNImageType
  public const
    ///<summary>
    ///  The is no image data.
    ///</summary>
    ///<dev>
    ///  The spec says: "An error occurred during loading."
    ///  I've seen this in some places, more likely it means "this blip record is unused".
    ///</dev>
    NoImage = 0;
    ///<summary>
    ///  An unknown image type or image type that cannot be directly stored inside a Microsoft Word document.
    ///</summary>
    Unknown = 1;
    ///<summary>
    ///  Windows Enhanced Metafile.
    ///</summary>
    Emf = 2;
    ///<summary>
    ///  Windows Metafile.
    ///</summary>
    Wmf = 3;
    ///<summary>
    ///  Macintosh PICT. An existing image will be preserved in a document, but inserting new
    ///  PICT images into a document is not supported.
    ///</summary>
    Pict = 4;
    ///<summary>
    ///  JPEG JFIF.
    ///</summary>
    Jpeg = 5;
    ///<summary>
    ///  Portable Network Graphics.
    ///</summary>
    Png = 6;
    ///<summary>
    ///  Windows Bitmap.
    ///</summary>
    ///<dev>
    ///  Note this is BMP in my model, but in a Word document this is stored as a DIB.
    ///  DIB is basically a BMP without a header.
    ///</dev>
    Bmp = 7;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  ///<summary>
  ///  Line join style.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Drawing.Stroke.JoinStyle" />
  [DNTypeName('Aspose.Words.Drawing.JoinStyle')]
  DNJoinStyle = type Integer;
  DNJoinStyleHelper = record helper for DNJoinStyle
  public const
    ///<summary>
    ///  Join edges by a straight line.
    ///</summary>
    Bevel = 0;
    ///<summary>
    ///  Extend edges until they join.
    ///</summary>
    Miter = 1;
    ///<summary>
    ///  Draw an arc between the two edges.
    ///</summary>
    Round = 2;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  ///<summary>
  ///  Determines the flow of the text layout in a textbox.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Drawing.TextBox.LayoutFlow" />
  ///<dev>
  ///  Do not renumber. The values are from the RTF spec.
  ///</dev>
  [DNTypeName('Aspose.Words.Drawing.LayoutFlow')]
  DNLayoutFlow = type Integer;
  DNLayoutFlowHelper = record helper for DNLayoutFlow
  public const
    ///<summary>
    ///  Text is displayed horizontally.
    ///</summary>
    Horizontal = 0;
    ///<summary>
    ///  Ideographic text is displayed vertically.
    ///</summary>
    TopToBottomIdeographic = 1;
    ///<summary>
    ///  Text is displayed vertically.
    ///</summary>
    BottomToTop = 2;
    ///<summary>
    ///  Text is displayed vertically.
    ///</summary>
    TopToBottom = 3;
    ///<summary>
    ///  Ideographic text is displayed horizontally.
    ///</summary>
    HorizontalIdeographic = 4;
    ///<summary>
    ///  Text is displayed vertically.
    ///</summary>
    Vertical = 5;
  end;


  //-------------namespace: Aspose.Words.Drawing.Ole----------------
  [DNTypeName('Aspose.Words.Drawing.Ole.Forms2OleControlType')]
  DNForms2OleControlType = type Integer;
  DNForms2OleControlTypeHelper = record helper for DNForms2OleControlType
  public const
    OptionButton = 0;
    Label_ = 1;
    Textbox = 2;
    CheckBox = 3;
    ToggleButton = 4;
    SpinButton = 5;
    ComboBox = 6;
    Frame = 7;
    MultiPage = 8;
    TabStrip = 9;
    CommandButton = 10;
    Image = 11;
    ScrollBar = 12;
    Form = 13;
    ListBox = 14;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  [DNTypeName('Aspose.Words.Drawing.PresetTexture')]
  DNPresetTexture = type Integer;
  DNPresetTextureHelper = record helper for DNPresetTexture
  public const
    BlueTissuePaper = 1;
    Bouquet = 2;
    BrownMarble = 3;
    Canvas = 4;
    Cork = 5;
    Denim = 6;
    FishFossil = 7;
    Granite = 8;
    GreenMarble = 9;
    MediumWood = 10;
    Newsprint = 11;
    Oak = 12;
    PaperBag = 13;
    Papyrus = 14;
    Parchment = 15;
    PinkTissuePaper = 16;
    PurpleMesh = 17;
    RecycledPaper = 18;
    Sand = 19;
    Stationery = 20;
    Walnut = 21;
    WaterDroplets = 22;
    WhiteMarble = 23;
    WovenMat = 24;
    None = -1;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  ///<summary>
  ///  Specifies to what the horizontal position of a shape or text frame is relative.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Drawing.ShapeBase.RelativeHorizontalPosition" />
  ///<dev>
  ///  Do not renumber. The values are taken from the RTF specification.
  ///</dev>
  [DNTypeName('Aspose.Words.Drawing.RelativeHorizontalPosition')]
  DNRelativeHorizontalPosition = type Integer;
  DNRelativeHorizontalPositionHelper = record helper for DNRelativeHorizontalPosition
  public const
    ///<summary>
    ///  Specifies that the horizontal positioning shall be relative to the page margins.
    ///</summary>
    Margin = 0;
    ///<summary>
    ///  The object is positioned relative to the left edge of the page.
    ///</summary>
    Page = 1;
    ///<summary>
    ///  The object is positioned relative to the left side of the column.
    ///</summary>
    Column = 2;
    ///<summary>
    ///  Default value is <see cref="F:Aspose.Words.Drawing.RelativeHorizontalPosition.Column" />
    ///  .
    ///</summary>
    Default_ = 2;
    ///<summary>
    ///  The object is positioned relative to the left side of the paragraph.
    ///</summary>
    Character = 3;
    ///<summary>
    ///  Specifies that the horizontal positioning shall be relative to the left margin of the page.
    ///</summary>
    LeftMargin = 4;
    ///<summary>
    ///  Specifies that the horizontal positioning shall be relative to the right margin of the page.
    ///</summary>
    RightMargin = 5;
    ///<summary>
    ///  Specifies that the horizontal positioning shall be relative to the inside margin of the
    ///  current page (the left margin on odd pages, right on even pages).
    ///</summary>
    InsideMargin = 6;
    ///<summary>
    ///  Specifies that the horizontal positioning shall be relative to the outside margin of the
    ///  current page (the right margin on odd pages, left on even pages).
    ///</summary>
    OutsideMargin = 7;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  ///<summary>
  ///  Specifies to what the vertical position of a shape or text frame is relative.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Drawing.ShapeBase.RelativeVerticalPosition" />
  ///<dev>
  ///  Do not renumber. The values are taken from the RTF specification.
  ///</dev>
  [DNTypeName('Aspose.Words.Drawing.RelativeVerticalPosition')]
  DNRelativeVerticalPosition = type Integer;
  DNRelativeVerticalPositionHelper = record helper for DNRelativeVerticalPosition
  public const
    ///<summary>
    ///  Specifies that the vertical positioning shall be relative to the page margins.
    ///</summary>
    Margin = 0;
    ///<summary>
    ///  Default value is <see cref="F:Aspose.Words.Drawing.RelativeVerticalPosition.Margin" />
    ///  .
    ///</summary>
    TableDefault = 0;
    ///<summary>
    ///  The object is positioned relative to the top edge of the page.
    ///</summary>
    Page = 1;
    ///<summary>
    ///  The object is positioned relative to the top of the paragraph that contains the anchor.
    ///</summary>
    Paragraph = 2;
    ///<summary>
    ///  Default value is <see cref="F:Aspose.Words.Drawing.RelativeVerticalPosition.Paragraph" />
    ///  .
    ///</summary>
    TextFrameDefault = 2;
    ///<summary>
    ///  Undocumented.
    ///</summary>
    Line = 3;
    ///<summary>
    ///  Specifies that the vertical positioning shall be relative to the top margin of the current page.
    ///</summary>
    TopMargin = 4;
    ///<summary>
    ///  Specifies that the vertical positioning shall be relative to the bottom margin of the current page.
    ///</summary>
    BottomMargin = 5;
    ///<summary>
    ///  Specifies that the vertical positioning shall be relative to the inside margin of the current page.
    ///</summary>
    InsideMargin = 6;
    ///<summary>
    ///  Specifies that the vertical positioning shall be relative to the outside margin of the current page.
    ///</summary>
    OutsideMargin = 7;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  ///<summary>
  ///  Specifies the compound line style of a <see cref="T:Aspose.Words.Drawing.Shape" />
  ///  .
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Drawing.Stroke.LineStyle" />
  ///<dev>
  ///  This enum name violates the rule "enum name equals property name", but I have to avoid
  ///  collision between Aspose.Words.LineStyle and this line style because otherwise it will
  ///  be too hard to port to Java as all types are in the same namespace in Java.
  ///</dev>
  [DNTypeName('Aspose.Words.Drawing.ShapeLineStyle')]
  DNShapeLineStyle = type Integer;
  DNShapeLineStyleHelper = record helper for DNShapeLineStyle
  public const
    ///<summary>
    ///  Single line.
    ///</summary>
    Single = 0;
    ///<summary>
    ///  Default value is <see cref="F:Aspose.Words.Drawing.ShapeLineStyle.Single" />
    ///  .
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Double lines of equal width.
    ///</summary>
    Double = 1;
    ///<summary>
    ///  Double lines, one thick, one thin.
    ///</summary>
    ThickThin = 2;
    ///<summary>
    ///  Double lines, one thin, one thick.
    ///</summary>
    ThinThick = 3;
    ///<summary>
    ///  Three lines, thin, thick, thin.
    ///</summary>
    Triple = 4;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  ///<summary>
  ///  Specifies Markup language used for the shape.
  ///</summary>
  [DNTypeName('Aspose.Words.Drawing.ShapeMarkupLanguage')]
  DNShapeMarkupLanguage = type Integer;
  DNShapeMarkupLanguageHelper = record helper for DNShapeMarkupLanguage
  public const
    ///<summary>
    ///  Drawing Markup Language is used to define the shape.
    ///</summary>
    ///<remarks>
    ///  This is the new standard for drawing for Office Open XML which has appeared first in ECMA-376 1st edition (2006), first appeared in MS Word 2007.
    ///</remarks>
    Dml = 0;
    ///<summary>
    ///  Vector Markup Language is used to define the shape.
    ///</summary>
    ///<remarks>A deprecated format included in Office Open XML for legacy reasons only.</remarks>
    Vml = 1;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  ///<summary>
  ///  Specifies the type of shape in a Microsoft Word document.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Drawing.ShapeBase.ShapeType" />
  [DNTypeName('Aspose.Words.Drawing.ShapeType')]
  DNShapeType = type Integer;
  DNShapeTypeHelper = record helper for DNShapeType
  public const
    ///<summary>
    ///  A shape drawn by user and consisting of multiple segments and/or vertices (curve, freeform or scribble).
    ///  <p>You cannot create shapes of this type in the document.</p>
    ///</summary>
    NonPrimitive = 0;
    ///<summary></summary>
    Rectangle = 1;
    ///<summary></summary>
    RoundRectangle = 2;
    ///<summary></summary>
    Ellipse = 3;
    ///<summary></summary>
    Diamond = 4;
    ///<summary></summary>
    Triangle = 5;
    ///<summary></summary>
    RightTriangle = 6;
    ///<summary></summary>
    Parallelogram = 7;
    ///<summary></summary>
    Trapezoid = 8;
    ///<summary></summary>
    Hexagon = 9;
    ///<summary></summary>
    Octagon = 10;
    ///<summary></summary>
    Plus = 11;
    ///<summary></summary>
    Star = 12;
    ///<summary></summary>
    Arrow = 13;
    ///<summary></summary>
    ThickArrow = 14;
    ///<summary></summary>
    HomePlate = 15;
    ///<summary></summary>
    Cube = 16;
    ///<summary></summary>
    Balloon = 17;
    ///<summary></summary>
    Seal = 18;
    ///<summary></summary>
    Arc = 19;
    ///<summary></summary>
    Line = 20;
    ///<summary></summary>
    Plaque = 21;
    ///<summary></summary>
    Can = 22;
    ///<summary></summary>
    Donut = 23;
    ///<summary></summary>
    TextSimple = 24;
    ///<summary></summary>
    TextOctagon = 25;
    ///<summary></summary>
    TextHexagon = 26;
    ///<summary></summary>
    TextCurve = 27;
    ///<summary></summary>
    TextWave = 28;
    ///<summary></summary>
    TextRing = 29;
    ///<summary></summary>
    TextOnCurve = 30;
    ///<summary></summary>
    TextOnRing = 31;
    ///<summary></summary>
    StraightConnector1 = 32;
    ///<summary></summary>
    BentConnector2 = 33;
    ///<summary></summary>
    BentConnector3 = 34;
    ///<summary></summary>
    BentConnector4 = 35;
    ///<summary></summary>
    BentConnector5 = 36;
    ///<summary></summary>
    CurvedConnector2 = 37;
    ///<summary></summary>
    CurvedConnector3 = 38;
    ///<summary></summary>
    CurvedConnector4 = 39;
    ///<summary></summary>
    CurvedConnector5 = 40;
    ///<summary></summary>
    Callout1 = 41;
    ///<summary></summary>
    Callout2 = 42;
    ///<summary></summary>
    Callout3 = 43;
    ///<summary></summary>
    AccentCallout1 = 44;
    ///<summary></summary>
    AccentCallout2 = 45;
    ///<summary></summary>
    AccentCallout3 = 46;
    ///<summary></summary>
    BorderCallout1 = 47;
    ///<summary></summary>
    BorderCallout2 = 48;
    ///<summary></summary>
    BorderCallout3 = 49;
    ///<summary></summary>
    AccentBorderCallout1 = 50;
    ///<summary></summary>
    AccentBorderCallout2 = 51;
    ///<summary></summary>
    AccentBorderCallout3 = 52;
    ///<summary></summary>
    Ribbon = 53;
    ///<summary></summary>
    Ribbon2 = 54;
    ///<summary></summary>
    Chevron = 55;
    ///<summary></summary>
    Pentagon = 56;
    ///<summary></summary>
    NoSmoking = 57;
    ///<summary></summary>
    Seal8 = 58;
    ///<summary></summary>
    Seal16 = 59;
    ///<summary></summary>
    Seal32 = 60;
    ///<summary></summary>
    WedgeRectCallout = 61;
    ///<summary></summary>
    WedgeRRectCallout = 62;
    ///<summary></summary>
    WedgeEllipseCallout = 63;
    ///<summary></summary>
    Wave = 64;
    ///<summary></summary>
    FoldedCorner = 65;
    ///<summary></summary>
    LeftArrow = 66;
    ///<summary></summary>
    DownArrow = 67;
    ///<summary></summary>
    UpArrow = 68;
    ///<summary></summary>
    LeftRightArrow = 69;
    ///<summary></summary>
    UpDownArrow = 70;
    ///<summary></summary>
    IrregularSeal1 = 71;
    ///<summary></summary>
    IrregularSeal2 = 72;
    ///<summary></summary>
    LightningBolt = 73;
    ///<summary></summary>
    Heart = 74;
    ///<summary>
    ///  The shape is an image.
    ///</summary>
    Image = 75;
    ///<summary></summary>
    QuadArrow = 76;
    ///<summary></summary>
    LeftArrowCallout = 77;
    ///<summary></summary>
    RightArrowCallout = 78;
    ///<summary></summary>
    UpArrowCallout = 79;
    ///<summary></summary>
    DownArrowCallout = 80;
    ///<summary></summary>
    LeftRightArrowCallout = 81;
    ///<summary></summary>
    UpDownArrowCallout = 82;
    ///<summary></summary>
    QuadArrowCallout = 83;
    ///<summary></summary>
    Bevel = 84;
    ///<summary></summary>
    LeftBracket = 85;
    ///<summary></summary>
    RightBracket = 86;
    ///<summary></summary>
    LeftBrace = 87;
    ///<summary></summary>
    RightBrace = 88;
    ///<summary></summary>
    LeftUpArrow = 89;
    ///<summary></summary>
    BentUpArrow = 90;
    ///<summary></summary>
    BentArrow = 91;
    ///<summary></summary>
    Seal24 = 92;
    ///<summary></summary>
    StripedRightArrow = 93;
    ///<summary></summary>
    NotchedRightArrow = 94;
    ///<summary></summary>
    BlockArc = 95;
    ///<summary></summary>
    SmileyFace = 96;
    ///<summary></summary>
    VerticalScroll = 97;
    ///<summary></summary>
    HorizontalScroll = 98;
    ///<summary></summary>
    CircularArrow = 99;
    ///<summary>
    ///  This shape type seems to be set for shapes that are not part of the standard set of the
    ///  auto shapes in Microsoft Word. For example, if you insert a new auto shape from ClipArt.
    ///  <p>You cannot create shapes of this type in the document.</p>
    ///</summary>
    CustomShape = 100;
    ///<summary></summary>
    UturnArrow = 101;
    ///<summary></summary>
    CurvedRightArrow = 102;
    ///<summary></summary>
    CurvedLeftArrow = 103;
    ///<summary></summary>
    CurvedUpArrow = 104;
    ///<summary></summary>
    CurvedDownArrow = 105;
    ///<summary></summary>
    CloudCallout = 106;
    ///<summary></summary>
    EllipseRibbon = 107;
    ///<summary></summary>
    EllipseRibbon2 = 108;
    ///<summary></summary>
    FlowChartProcess = 109;
    ///<summary></summary>
    FlowChartDecision = 110;
    ///<summary></summary>
    FlowChartInputOutput = 111;
    ///<summary></summary>
    FlowChartPredefinedProcess = 112;
    ///<summary></summary>
    FlowChartInternalStorage = 113;
    ///<summary></summary>
    FlowChartDocument = 114;
    ///<summary></summary>
    FlowChartMultidocument = 115;
    ///<summary></summary>
    FlowChartTerminator = 116;
    ///<summary></summary>
    FlowChartPreparation = 117;
    ///<summary></summary>
    FlowChartManualInput = 118;
    ///<summary></summary>
    FlowChartManualOperation = 119;
    ///<summary></summary>
    FlowChartConnector = 120;
    ///<summary></summary>
    FlowChartPunchedCard = 121;
    ///<summary></summary>
    FlowChartPunchedTape = 122;
    ///<summary></summary>
    FlowChartSummingJunction = 123;
    ///<summary></summary>
    FlowChartOr = 124;
    ///<summary></summary>
    FlowChartCollate = 125;
    ///<summary></summary>
    FlowChartSort = 126;
    ///<summary></summary>
    FlowChartExtract = 127;
    ///<summary></summary>
    FlowChartMerge = 128;
    ///<summary></summary>
    FlowChartOfflineStorage = 129;
    ///<summary></summary>
    FlowChartOnlineStorage = 130;
    ///<summary></summary>
    FlowChartMagneticTape = 131;
    ///<summary></summary>
    FlowChartMagneticDisk = 132;
    ///<summary></summary>
    FlowChartMagneticDrum = 133;
    ///<summary></summary>
    FlowChartDisplay = 134;
    ///<summary></summary>
    FlowChartDelay = 135;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextPlainText = 136;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextStop = 137;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextTriangle = 138;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextTriangleInverted = 139;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextChevron = 140;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextChevronInverted = 141;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextRingInside = 142;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextRingOutside = 143;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextArchUpCurve = 144;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextArchDownCurve = 145;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextCircleCurve = 146;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextButtonCurve = 147;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextArchUpPour = 148;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextArchDownPour = 149;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextCirclePour = 150;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextButtonPour = 151;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextCurveUp = 152;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextCurveDown = 153;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextCascadeUp = 154;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextCascadeDown = 155;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextWave1 = 156;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextWave2 = 157;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextWave3 = 158;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextWave4 = 159;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextInflate = 160;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextDeflate = 161;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextInflateBottom = 162;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextDeflateBottom = 163;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextInflateTop = 164;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextDeflateTop = 165;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextDeflateInflate = 166;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextDeflateInflateDeflate = 167;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextFadeRight = 168;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextFadeLeft = 169;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextFadeUp = 170;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextFadeDown = 171;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextSlantUp = 172;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextSlantDown = 173;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextCanUp = 174;
    ///<summary>
    ///  WordArt object.
    ///</summary>
    TextCanDown = 175;
    ///<summary></summary>
    FlowChartAlternateProcess = 176;
    ///<summary></summary>
    FlowChartOffpageConnector = 177;
    ///<summary></summary>
    Callout90 = 178;
    ///<summary></summary>
    AccentCallout90 = 179;
    ///<summary></summary>
    BorderCallout90 = 180;
    ///<summary></summary>
    AccentBorderCallout90 = 181;
    ///<summary></summary>
    LeftRightUpArrow = 182;
    ///<summary></summary>
    Sun = 183;
    ///<summary></summary>
    Moon = 184;
    ///<summary></summary>
    BracketPair = 185;
    ///<summary></summary>
    BracePair = 186;
    ///<summary></summary>
    Seal4 = 187;
    ///<summary></summary>
    DoubleWave = 188;
    ///<summary></summary>
    ActionButtonBlank = 189;
    ///<summary></summary>
    ActionButtonHome = 190;
    ///<summary></summary>
    ActionButtonHelp = 191;
    ///<summary></summary>
    ActionButtonInformation = 192;
    ///<summary></summary>
    ActionButtonForwardNext = 193;
    ///<summary></summary>
    ActionButtonBackPrevious = 194;
    ///<summary></summary>
    ActionButtonEnd = 195;
    ///<summary></summary>
    ActionButtonBeginning = 196;
    ///<summary></summary>
    ActionButtonReturn = 197;
    ///<summary></summary>
    ActionButtonDocument = 198;
    ///<summary></summary>
    ActionButtonSound = 199;
    ///<summary></summary>
    ActionButtonMovie = 200;
    ///<summary>
    ///  The shape is an ActiveX control.
    ///  <p>You cannot create shapes of this type in the document.</p>
    ///</summary>
    ///<dev>
    ///  In DOC and RTF, shapes that represent ActiveX controls have shape type picture.
    ///  In WordML, ActiveX controls have their own shape type and so is in the model.
    ///</dev>
    OleControl = 201;
    ///<summary>
    ///  The shape is a textbox. Note that shapes of many other types can also have text inside them too.
    ///  A shape does not have to have this type to contain text.
    ///</summary>
    TextBox = 202;
    ///<summary>
    ///  Snip single corner rectangle object.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    SingleCornerSnipped = 203;
    ///<summary>
    ///  Snip same side corner rectangle.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    TopCornersSnipped = 204;
    ///<summary>
    ///  Snip diagonal corner rectangle.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    DiagonalCornersSnipped = 205;
    ///<summary>
    ///  Snip and round single corner rectangle.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    TopCornersOneRoundedOneSnipped = 206;
    ///<summary>
    ///  Round single corner rectangle.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    SingleCornerRounded = 207;
    ///<summary>
    ///  Round same side corner rectangle.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    TopCornersRounded = 208;
    ///<summary>
    ///  Round diagonal corner rectangle.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    DiagonalCornersRounded = 209;
    ///<summary>
    ///  Heptagon.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    Heptagon = 210;
    ///<summary>
    ///  Cloud.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    Cloud = 211;
    ///<summary>
    ///  Six-pointed star.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    Seal6 = 212;
    ///<summary>
    ///  Seven-pointed star.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    Seal7 = 213;
    ///<summary>
    ///  Ten-pointed star.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    Seal10 = 214;
    ///<summary>
    ///  Twelve-pointed star.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    Seal12 = 215;
    ///<summary>
    ///  Swoosh arrow.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    SwooshArrow = 216;
    ///<summary>
    ///  Teardrop.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    Teardrop = 217;
    ///<summary>
    ///  Square tabs.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    SquareTabs = 218;
    ///<summary>
    ///  Plaque tabs.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    PlaqueTabs = 219;
    ///<summary>
    ///  Pie.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    Pie = 220;
    ///<summary>
    ///  Wedge pie.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    WedgePie = 221;
    ///<summary>
    ///  Inverse line.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    InverseLine = 222;
    ///<summary>
    ///  Math plus.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    MathPlus = 223;
    ///<summary>
    ///  Math minus.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    MathMinus = 224;
    ///<summary>
    ///  Math multiply.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    MathMultiply = 225;
    ///<summary>
    ///  Math divide.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    MathDivide = 226;
    ///<summary>
    ///  Math equal.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    MathEqual = 227;
    ///<summary>
    ///  Math not equal.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    MathNotEqual = 228;
    ///<summary>
    ///  Non-isosceles trapezoid.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    NonIsoscelesTrapezoid = 229;
    ///<summary>
    ///  Left-right circular arrow.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    LeftRightCircularArrow = 230;
    ///<summary>
    ///  Left-right ribbon.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    LeftRightRibbon = 231;
    ///<summary>
    ///  Left circular arrow.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    LeftCircularArrow = 232;
    ///<summary>
    ///  Frame.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    Frame = 233;
    ///<summary>
    ///  Half frame.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    HalfFrame = 234;
    ///<summary>
    ///  Funnel.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    Funnel = 235;
    ///<summary>
    ///  Six-tooth gear.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    Gear6 = 236;
    ///<summary>
    ///  Nine-tooth gear.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    Gear9 = 237;
    ///<summary>
    ///  Decagon.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    Decagon = 238;
    ///<summary>
    ///  Dodecagon.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    Dodecagon = 239;
    ///<summary>
    ///  Diagonal stripe.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    DiagonalStripe = 240;
    ///<summary>
    ///  Corner.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    Corner = 241;
    ///<summary>
    ///  Corner tabs.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    CornerTabs = 242;
    ///<summary>
    ///  Chord.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    Chord = 243;
    ///<summary>
    ///  Chart plus.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    ChartPlus = 244;
    ///<summary>
    ///  Chart star.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    ChartStar = 245;
    ///<summary>
    ///  Chart X.
    ///</summary>
    ///<remarks>
    ///  Applicable only for DML shapes.
    ///</remarks>
    ChartX = 246;
    ///<summary>
    ///  The shape is an OLE object.
    ///  <p>You cannot create shapes of this type in the document.</p>
    ///</summary>
    ///<dev>
    ///  In Microsoft Word, shapes that represent OLE objects have shape type picture,
    ///  but in our model, they are distinguished into their own shape type.
    ///</dev>
    OleObject = -2;
    ///<summary>
    ///  Reserved for the system use.
    ///</summary>
    MinValue = -2;
    ///<summary><p>The shape is a group shape.</p>
    ///</summary>
    ///<dev>In DOC file, shape group has shape type NonPrimitive, we don't want this in the model,
    ///  so in the model it is our own constant.</dev>
    Group = -1;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  ///<summary>
  ///  Specifies values used for shape text vertical alignment.
  ///</summary>
  ///<dev>
  ///  Do not renumber. The values are from the RTF spec.
  ///</dev>
  [DNTypeName('Aspose.Words.Drawing.TextBoxAnchor')]
  DNTextBoxAnchor = type Integer;
  DNTextBoxAnchorHelper = record helper for DNTextBoxAnchor
  public const
    ///<summary>
    ///  Text is aligned to the top of the textbox.
    ///</summary>
    Top = 0;
    ///<summary>
    ///  Text is aligned to the middle of the textbox.
    ///</summary>
    Middle = 1;
    ///<summary>
    ///  Text is aligned to the bottom of the textbox.
    ///</summary>
    Bottom = 2;
    ///<summary>
    ///  Text is aligned to the top centered of the textbox.
    ///</summary>
    TopCentered = 3;
    ///<summary>
    ///  Text is aligned to the middle centered of the textbox.
    ///</summary>
    MiddleCentered = 4;
    ///<summary>
    ///  Text is aligned to the bottom centered of the textbox.
    ///</summary>
    BottomCentered = 5;
    ///<summary>
    ///  Text is aligned to the top baseline of the textbox.
    ///</summary>
    TopBaseline = 6;
    ///<summary>
    ///  Text is aligned to the bottom baseline of the textbox.
    ///</summary>
    BottomBaseline = 7;
    ///<summary>
    ///  Text is aligned to the top centered baseline of the textbox.
    ///</summary>
    TopCenteredBaseline = 8;
    ///<summary>
    ///  Text is aligned to the bottom centered baseline of the textbox.
    ///</summary>
    BottomCenteredBaseline = 9;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  ///<summary>
  ///  Specifies how text wraps inside a shape.
  ///</summary>
  [DNTypeName('Aspose.Words.Drawing.TextBoxWrapMode')]
  DNTextBoxWrapMode = type Integer;
  DNTextBoxWrapModeHelper = record helper for DNTextBoxWrapMode
  public const
    ///<summary>
    ///  Text wraps inside a shape.
    ///</summary>
    Square = 0;
    ///<summary>
    ///  Text does not wrap inside a shape.
    ///</summary>
    None = 2;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  ///<summary>
  ///  WordArt alignment.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Drawing.TextPath.TextPathAlignment" />
  [DNTypeName('Aspose.Words.Drawing.TextPathAlignment')]
  DNTextPathAlignment = type Integer;
  DNTextPathAlignmentHelper = record helper for DNTextPathAlignment
  public const
    ///<summary>
    ///  Stretch each line of text to fit width.
    ///</summary>
    Stretch = 0;
    ///<summary>
    ///  Center text on width.
    ///</summary>
    Center = 1;
    ///<summary>
    ///  Left justify.
    ///</summary>
    Left = 2;
    ///<summary>
    ///  Right justify.
    ///</summary>
    Right = 3;
    ///<summary>
    ///  Spread letters out to fit width.
    ///</summary>
    LetterJustify = 4;
    ///<summary>
    ///  Spread words out to fit width.
    ///</summary>
    WordJustify = 5;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  ///<summary>
  ///  Specifies vertical alignment of a floating shape, text frame or a floating table.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Drawing.ShapeBase.VerticalAlignment" />
  ///<dev>
  ///  Do not renumber. The values are taken from the RTF specification.
  ///</dev>
  [DNTypeName('Aspose.Words.Drawing.VerticalAlignment')]
  DNVerticalAlignment = type Integer;
  DNVerticalAlignmentHelper = record helper for DNVerticalAlignment
  public const
    ///<summary>
    ///  The object is explicitly positioned, usually using its <b>Top</b>
    ///  property.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Same as <see cref="F:Aspose.Words.Drawing.VerticalAlignment.None" />
    ///  .
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Specifies that the object shall be at the top of the vertical alignment base.
    ///</summary>
    Top = 1;
    ///<summary>
    ///  Specifies that the object shall be centered with respect to the vertical alignment base.
    ///</summary>
    Center = 2;
    ///<summary>
    ///  Specifies that the object shall be at the bottom of the vertical alignment base.
    ///</summary>
    Bottom = 3;
    ///<summary>
    ///  Specifies that the object shall be inside of the horizontal alignment base.
    ///</summary>
    Inside = 4;
    ///<summary>
    ///  Specifies that the object shall be outside of the vertical alignment base.
    ///</summary>
    Outside = 5;
    ///<summary>
    ///  Not documented. Seems to be a possible value for floating paragraphs and tables.
    ///</summary>
    Inline_ = -1;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  ///<summary>
  ///  Specifies what side(s) of the shape or picture the text wraps around.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Drawing.ShapeBase.WrapSide" />
  [DNTypeName('Aspose.Words.Drawing.WrapSide')]
  DNWrapSide = type Integer;
  DNWrapSideHelper = record helper for DNWrapSide
  public const
    ///<summary>
    ///  The document text wraps on both sides of the shape.
    ///</summary>
    Both = 0;
    ///<summary>
    ///  Default value is <see cref="F:Aspose.Words.Drawing.WrapSide.Both" />
    ///  .
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  The document text wraps on the left side of the shape only. There is a text free area on the right of the shape.
    ///</summary>
    Left = 1;
    ///<summary>
    ///  The document text wraps on the right side of the shape only. There is a text free area on the left side of the shape.
    ///</summary>
    Right = 2;
    ///<summary>
    ///  The document text wraps on the side of the shape that is farthest from the page margin, leaving text free area on the other side of the shape.
    ///</summary>
    Largest = 3;
  end;


  //-------------namespace: Aspose.Words.Drawing----------------
  ///<summary>
  ///  Specifies how text is wrapped around a shape or picture.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Drawing.ShapeBase.WrapType" />
  [DNTypeName('Aspose.Words.Drawing.WrapType')]
  DNWrapType = type Integer;
  DNWrapTypeHelper = record helper for DNWrapType
  public const
    ///<summary>
    ///  The shape remains on the same layer as text and treated as a character.
    ///</summary>
    Inline_ = 0;
    ///<summary>
    ///  The text stops at the top of the shape and restarts on the line below the shape.
    ///</summary>
    TopBottom = 1;
    ///<summary>
    ///  Wraps text around all sides of the square bounding box of the shape.
    ///</summary>
    Square = 2;
    ///<summary>
    ///  No text wrapping around the shape. The shape is placed behind or in front of text.
    ///</summary>
    None = 3;
    ///<summary>
    ///  Wraps tightly around the edges of the shape, instead of wrapping around the bounding box.
    ///</summary>
    Tight = 4;
    ///<summary>
    ///  Same as Tight, but wraps inside any parts of the shape that are open.
    ///</summary>
    Through = 5;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Specifies the position for a drop cap text.
  ///</summary>
  [DNTypeName('Aspose.Words.DropCapPosition')]
  DNDropCapPosition = type Integer;
  DNDropCapPositionHelper = record helper for DNDropCapPosition
  public const
    ///<summary>
    ///  The paragraph does not have a drop cap.
    ///</summary>
    None = 0;
    ///<summary>
    ///  The drop cap is positioned inside the text margin on the anchor paragraph.
    ///</summary>
    Normal = 1;
    ///<summary>
    ///  The drop cap is positioned outside the text margin on the anchor paragraph.
    ///</summary>
    Margin = 2;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Specifies the set of possible aliases (or editing groups) which can be used as aliases to
  ///  determine if the current user shall be allowed to edit a single range
  ///  defined by an editable range within a document.
  ///</summary>
  [DNTypeName('Aspose.Words.EditorType')]
  DNEditorType = type Integer;
  DNEditorTypeHelper = record helper for DNEditorType
  public const
    ///<summary>
    ///  Same as <see cref="F:Aspose.Words.EditorType.Unspecified" />
    ///  .
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Means that editor type is not specified.
    ///</summary>
    Unspecified = 0;
    ///<summary>
    ///  Specifies that users associated with the Administrators group shall be allowed to edit editable ranges using
    ///  this editing type when document protection is enabled.
    ///</summary>
    Administrators = 1;
    ///<summary>
    ///  Specifies that users associated with the Contributors group shall be allowed to edit editable ranges using
    ///  this editing type when document protection is enabled.
    ///</summary>
    Contributors = 2;
    ///<summary>
    ///  Specifies that users associated with the Current group shall be allowed to edit editable ranges using this
    ///  editing type when document protection is enabled.
    ///</summary>
    Current = 3;
    ///<summary>
    ///  Specifies that users associated with the Editors group shall be allowed to edit editable ranges using this
    ///  editing type when document protection is enabled.
    ///</summary>
    Editors = 4;
    ///<summary>
    ///  Specifies that all users that open the document shall be allowed to edit editable ranges using this editing
    ///  type when document protection is enabled.
    ///</summary>
    Everyone = 5;
    ///<summary>
    ///  Specifies that none of the users that open the document shall be allowed to edit editable ranges
    ///  using this editing type when document protection is enabled.
    ///</summary>
    None = 6;
    ///<summary>
    ///  Specifies that users associated with the Owners group shall be allowed to edit editable ranges using this
    ///  editing type when document protection is enabled.
    ///</summary>
    Owners = 7;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Specifies possible types of emphasis mark.
  ///</summary>
  ///<dev>
  ///  Names borrowed from https://docs.microsoft.com/en-us/dotnet/api/microsoft.office.interop.word.wdemphasismark?view=word-pia
  ///</dev>
  [DNTypeName('Aspose.Words.EmphasisMark')]
  DNEmphasisMark = type Integer;
  DNEmphasisMarkHelper = record helper for DNEmphasisMark
  public const
    ///<summary>
    ///  No emphasis mark.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Emphasis mark is a solid black circle displayed above text.
    ///</summary>
    OverSolidCircle = 1;
    ///<summary>
    ///  Emphasis mark is a comma character displayed above text.
    ///</summary>
    OverComma = 2;
    ///<summary>
    ///  Emphasis mark is an empty white circle displayed above text.
    ///</summary>
    OverWhiteCircle = 3;
    ///<summary>
    ///  Emphasis mark is a solid black circle displayed below text.
    ///</summary>
    UnderSolidCircle = 4;
  end;


  //-------------namespace: Aspose.Words.Fields----------------
  ///<summary>
  ///  Specifies the result of the IF field condition evaluation.
  ///</summary>
  [DNTypeName('Aspose.Words.Fields.FieldIfComparisonResult')]
  DNFieldIfComparisonResult = type Integer;
  DNFieldIfComparisonResultHelper = record helper for DNFieldIfComparisonResult
  public const
    ///<summary>
    ///  There is an error in the condition.
    ///</summary>
    Error = 0;
    ///<summary>
    ///  The condition is <c>true</c>.
    ///</summary>
    True = 1;
    ///<summary>
    ///  The condition is <c>false</c>.
    ///</summary>
    False = 2;
  end;


  //-------------namespace: Aspose.Words.Fields----------------
  ///<summary>
  ///  Specifies the formatting for the <see cref="T:Aspose.Words.Fields.FieldIndex" />
  ///  fields in a document.
  ///</summary>
  [DNTypeName('Aspose.Words.Fields.FieldIndexFormat')]
  DNFieldIndexFormat = type Integer;
  DNFieldIndexFormatHelper = record helper for DNFieldIndexFormat
  public const
    ///<summary>From template.</summary>
    Template = 0;
    ///<summary>Classic.</summary>
    Classic = 1;
    ///<summary>Fancy.</summary>
    Fancy = 2;
    ///<summary>Modern.</summary>
    Modern = 3;
    ///<summary>Bulleted.</summary>
    Bulleted = 4;
    ///<summary>Formal.</summary>
    Formal = 5;
    ///<summary>Simple.</summary>
    Simple = 6;
  end;


  //-------------namespace: Aspose.Words.Fields----------------
  ///<summary>
  ///  Specifies Microsoft Word field types.
  ///</summary>
  [DNTypeName('Aspose.Words.Fields.FieldType')]
  DNFieldType = type Integer;
  DNFieldTypeHelper = record helper for DNFieldType
  public const
    ///<summary>
    ///  Field type is not specified or unknown.
    ///</summary>
    FieldNone = 0;
    ///<summary>
    ///  Specifies that the field was unable to be parsed.
    ///</summary>
    FieldCannotParse = 1;
    ///<summary>
    ///  Specifies that the field represents a REF field where the keyword has been omitted.
    ///</summary>
    FieldRefNoKeyword = 2;
    ///<summary>
    ///  Specifies the REF field.
    ///</summary>
    FieldRef = 3;
    ///<summary>
    ///  Specifies the XE field.
    ///</summary>
    FieldIndexEntry = 4;
    ///<summary>
    ///  Specifies the FOOTNOTEREF field.
    ///</summary>
    FieldFootnoteRef = 5;
    ///<summary>
    ///  Specifies the SET field.
    ///</summary>
    FieldSet = 6;
    ///<summary>
    ///  Specifies the IF field.
    ///</summary>
    FieldIf = 7;
    ///<summary>
    ///  Specifies the INDEX field.
    ///</summary>
    FieldIndex = 8;
    ///<summary>
    ///  Specifies the TC field.
    ///</summary>
    FieldTOCEntry = 9;
    ///<summary>
    ///  Specifies the STYLEREF field.
    ///</summary>
    FieldStyleRef = 10;
    ///<summary>
    ///  Specifies the RD field.
    ///</summary>
    FieldRefDoc = 11;
    ///<summary>
    ///  Specifies the SEQ field.
    ///</summary>
    FieldSequence = 12;
    ///<summary>
    ///  Specifies the TOC field.
    ///</summary>
    FieldTOC = 13;
    ///<summary>
    ///  Specifies the INFO field.
    ///</summary>
    FieldInfo = 14;
    ///<summary>
    ///  Specifies the TITLE field.
    ///</summary>
    FieldTitle = 15;
    ///<summary>
    ///  Specifies the SUBJECT field.
    ///</summary>
    FieldSubject = 16;
    ///<summary>
    ///  Specifies the AUTHOR field.
    ///</summary>
    FieldAuthor = 17;
    ///<summary>
    ///  Specifies the KEYWORDS field.
    ///</summary>
    FieldKeyword = 18;
    ///<summary>
    ///  Specifies the COMMENTS field.
    ///</summary>
    FieldComments = 19;
    ///<summary>
    ///  Specifies the LASTSAVEDBY field.
    ///</summary>
    FieldLastSavedBy = 20;
    ///<summary>
    ///  Specifies the CREATEDATE field.
    ///</summary>
    FieldCreateDate = 21;
    ///<summary>
    ///  Specifies the SAVEDATE field.
    ///</summary>
    FieldSaveDate = 22;
    ///<summary>
    ///  Specifies the PRINTDATE field.
    ///</summary>
    FieldPrintDate = 23;
    ///<summary>
    ///  Specifies the REVNUM field.
    ///</summary>
    FieldRevisionNum = 24;
    ///<summary>
    ///  Specifies the EDITTIME field.
    ///</summary>
    FieldEditTime = 25;
    ///<summary>
    ///  Specifies the NUMPAGES field.
    ///</summary>
    FieldNumPages = 26;
    ///<summary>
    ///  Specifies the NUMWORDS field.
    ///</summary>
    FieldNumWords = 27;
    ///<summary>
    ///  Specifies the NUMCHARS field.
    ///</summary>
    FieldNumChars = 28;
    ///<summary>
    ///  Specifies the FILENAME field.
    ///</summary>
    FieldFileName = 29;
    ///<summary>
    ///  Specifies the TEMPLATE field.
    ///</summary>
    FieldTemplate = 30;
    ///<summary>
    ///  Specifies the DATE field.
    ///</summary>
    FieldDate = 31;
    ///<summary>
    ///  Specifies the TIME field.
    ///</summary>
    FieldTime = 32;
    ///<summary>
    ///  Specifies the PAGE field.
    ///</summary>
    FieldPage = 33;
    ///<summary>
    ///  Specifies the = (formula) field.
    ///</summary>
    FieldFormula = 34;
    ///<summary>
    ///  Specifies the QUOTE field.
    ///</summary>
    FieldQuote = 35;
    ///<summary>
    ///  Specifies the INCLUDE field.
    ///</summary>
    FieldInclude = 36;
    ///<summary>
    ///  Specifies the PAGEREF field.
    ///</summary>
    FieldPageRef = 37;
    ///<summary>
    ///  Specifies the ASK field.
    ///</summary>
    FieldAsk = 38;
    ///<summary>
    ///  Specifies the FILLIN field.
    ///</summary>
    FieldFillIn = 39;
    ///<summary>
    ///  Specifies the DATA field.
    ///</summary>
    FieldData = 40;
    ///<summary>
    ///  Specifies the NEXT field.
    ///</summary>
    FieldNext = 41;
    ///<summary>
    ///  Specifies the NEXTIF field.
    ///</summary>
    FieldNextIf = 42;
    ///<summary>
    ///  Specifies the SKIPIF field.
    ///</summary>
    FieldSkipIf = 43;
    ///<summary>
    ///  Specifies the MERGEREC field.
    ///</summary>
    FieldMergeRec = 44;
    ///<summary>
    ///  Specifies the DDE field.
    ///</summary>
    FieldDDE = 45;
    ///<summary>
    ///  Specifies the DDEAUTO field.
    ///</summary>
    FieldDDEAuto = 46;
    ///<summary>
    ///  Specifies the GLOSSARY field.
    ///</summary>
    FieldGlossary = 47;
    ///<summary>
    ///  Specifies the PRINT field.
    ///</summary>
    FieldPrint = 48;
    ///<summary>
    ///  Specifies the EQ field.
    ///</summary>
    FieldEquation = 49;
    ///<summary>
    ///  Specifies the GOTOBUTTON field.
    ///</summary>
    FieldGoToButton = 50;
    ///<summary>
    ///  Specifies the MACROBUTTON field.
    ///</summary>
    FieldMacroButton = 51;
    ///<summary>
    ///  Specifies the AUTONUMOUT field.
    ///</summary>
    FieldAutoNumOutline = 52;
    ///<summary>
    ///  Specifies the AUTONUMLGL field.
    ///</summary>
    FieldAutoNumLegal = 53;
    ///<summary>
    ///  Specifies the AUTONUM field.
    ///</summary>
    FieldAutoNum = 54;
    ///<summary>
    ///  Specifies the IMPORT field.
    ///</summary>
    FieldImport = 55;
    ///<summary>
    ///  Specifies the LINK field.
    ///</summary>
    FieldLink = 56;
    ///<summary>
    ///  Specifies the SYMBOL field.
    ///</summary>
    FieldSymbol = 57;
    ///<summary>
    ///  Specifies the EMBED field.
    ///</summary>
    FieldEmbed = 58;
    ///<summary>
    ///  Specifies the MERGEFIELD field.
    ///</summary>
    FieldMergeField = 59;
    ///<summary>
    ///  Specifies the USERNAME field.
    ///</summary>
    FieldUserName = 60;
    ///<summary>
    ///  Specifies the USERINITIALS field.
    ///</summary>
    FieldUserInitials = 61;
    ///<summary>
    ///  Specifies the USERADDRESS field.
    ///</summary>
    FieldUserAddress = 62;
    ///<summary>
    ///  Specifies the BARCODE field.
    ///</summary>
    FieldBarcode = 63;
    ///<summary>
    ///  Specifies the DOCVARIABLE field.
    ///</summary>
    FieldDocVariable = 64;
    ///<summary>
    ///  Specifies the SECTION field.
    ///</summary>
    FieldSection = 65;
    ///<summary>
    ///  Specifies the SECTIONPAGES field.
    ///</summary>
    FieldSectionPages = 66;
    ///<summary>
    ///  Specifies the INCLUDEPICTURE field.
    ///</summary>
    FieldIncludePicture = 67;
    ///<summary>
    ///  Specifies the INCLUDETEXT field.
    ///</summary>
    FieldIncludeText = 68;
    ///<summary>
    ///  Specifies the FILESIZE field.
    ///</summary>
    FieldFileSize = 69;
    ///<summary>
    ///  Specifies the FORMTEXT field.
    ///</summary>
    FieldFormTextInput = 70;
    ///<summary>
    ///  Specifies the FORMCHECKBOX field.
    ///</summary>
    FieldFormCheckBox = 71;
    ///<summary>
    ///  Specifies the NOTEREF field.
    ///</summary>
    FieldNoteRef = 72;
    ///<summary>
    ///  Specifies the TOA field.
    ///</summary>
    FieldTOA = 73;
    ///<summary>
    ///  Specifies the TA field.
    ///</summary>
    FieldTOAEntry = 74;
    ///<summary>
    ///  Specifies the MERGESEQ field.
    ///</summary>
    FieldMergeSeq = 75;
    ///<summary>
    ///  Specifies the PRIVATE field.
    ///</summary>
    FieldPrivate = 77;
    ///<summary>
    ///  Specifies the DATABASE field.
    ///</summary>
    FieldDatabase = 78;
    ///<summary>
    ///  Specifies the AUTOTEXT field.
    ///</summary>
    FieldAutoText = 79;
    ///<summary>
    ///  Specifies the COMPARE field.
    ///</summary>
    FieldCompare = 80;
    ///<summary>
    ///  Specifies the ADDIN field.
    ///</summary>
    FieldAddin = 81;
    ///<summary>
    ///  Specifies the FORMDROPDOWN field.
    ///</summary>
    FieldFormDropDown = 83;
    ///<summary>
    ///  Specifies the ADVANCE field.
    ///</summary>
    FieldAdvance = 84;
    ///<summary>
    ///  Specifies the DOCPROPERTY field.
    ///</summary>
    FieldDocProperty = 85;
    ///<summary><p>Specifies the OCX field.</p>
    ///  <p>Normally, Aspose.Words will represent an ActiveX control as a
    ///<see cref="T:Aspose.Words.Drawing.Shape" />
    ///  object, but for some documents, where a control does
    ///  not have data and/or seems to be invalid, it will be represented as a field.</p>
    ///</summary>
    FieldOcx = 87;
    ///<summary>
    ///  Specifies the HYPERLINK field.
    ///</summary>
    FieldHyperlink = 88;
    ///<summary>
    ///  Specifies the AUTOTEXTLIST field.
    ///</summary>
    FieldAutoTextList = 89;
    ///<summary>
    ///  Specifies the LISTNUM field.
    ///</summary>
    FieldListNum = 90;
    ///<summary>
    ///  Specifies the field that represents an HTML control.
    ///</summary>
    FieldHtmlActiveX = 91;
    ///<summary>
    ///  Specifies the BIDIOUTLINE field.
    ///</summary>
    FieldBidiOutline = 92;
    ///<summary>
    ///  Specifies the ADDRESSBLOCK field.
    ///</summary>
    FieldAddressBlock = 93;
    ///<summary>
    ///  Specifies the GREETINGLINE field.
    ///</summary>
    FieldGreetingLine = 94;
    ///<summary>
    ///  Specifies the SHAPE field.
    ///</summary>
    FieldShape = 95;
    ///<summary>
    ///  Specifies the CITATION field.
    ///</summary>
    FieldCitation = 1980;
    ///<summary>
    ///  Specifies the DISPLAYBARCODE field.
    ///</summary>
    FieldDisplayBarcode = 6301;
    ///<summary>
    ///  Specifies the MERGEBARCODE field.
    ///</summary>
    FieldMergeBarcode = 6302;
    ///<summary>
    ///  Specifies the BIBLIOGRAPHY field.
    ///</summary>
    FieldBibliography = 100500;
  end;


  //-------------namespace: Aspose.Words.Fields----------------
  ///<summary>
  ///  Indicates what culture to use during field update.
  ///</summary>
  [DNTypeName('Aspose.Words.Fields.FieldUpdateCultureSource')]
  DNFieldUpdateCultureSource = type Integer;
  DNFieldUpdateCultureSourceHelper = record helper for DNFieldUpdateCultureSource
  public const
    ///<summary>
    ///  The culture of the current execution thread is used to update fields.
    ///</summary>
    CurrentThread = 0;
    ///<summary>
    ///  The culture specified in the field formatting properties via language setting is used.
    ///</summary>
    ///<remarks>
    ///  To be exact, Aspose.Words mimics MS Word by using the language set for the first character of the field code.
    ///</remarks>
    ///<seealso cref="P:Aspose.Words.Fields.Field.LocaleId" />
    FieldCode = 1;
  end;


  //-------------namespace: Aspose.Words.Fields----------------
  ///<summary>
  ///  Specifies a general format that is applied to a numeric, text, or any field result.
  ///  A field may have a combination of general formats.
  ///</summary>
  [DNTypeName('Aspose.Words.Fields.GeneralFormat')]
  DNGeneralFormat = type Integer;
  DNGeneralFormatHelper = record helper for DNGeneralFormat
  public const
    ///<summary>
    ///  Used to specify a missing general format.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using hiragana characters in the traditional a-i-u-e-o order.
    ///</summary>
    Aiueo = 1;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result as one or more occurrences of an uppercase alphabetic Latin character.
    ///</summary>
    UppercaseAlphabetic = 2;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result as one or more occurrences of an lowercase alphabetic Latin character.
    ///</summary>
    LowercaseAlphabetic = 3;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using Arabic cardinal numerals.
    ///</summary>
    Arabic = 4;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using ascending Abjad numerals.
    ///</summary>
    ArabicAbjad = 5;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using characters in the Arabic alphabet.
    ///</summary>
    ArabicAlpha = 6;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using Arabic cardinal numerals, with a prefix of "- " and a suffix of " -".
    ///</summary>
    ArabicDash = 7;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result in the Thai counting system.
    ///</summary>
    BahtText = 8;
    ///<summary>
    ///  Numeric formatting. Cardinal text (One, Two, Three, ...).
    ///</summary>
    CardText = 9;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using ascending numbers from the appropriate counting system.
    ///</summary>
    ChineseNum1 = 10;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using sequential numbers from the appropriate legal format.
    ///</summary>
    ChineseNum2 = 11;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using sequential numbers from the appropriate counting thousand system.
    ///</summary>
    ChineseNum3 = 12;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using sequential numbers from the Korean Chosung format.
    ///</summary>
    Chosung = 13;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using decimal numbering enclosed in a circle, using the
    ///  enclosed alphanumeric glyph character for numbers in the range 1â€“20.
    ///</summary>
    CircleNum = 14;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using double-byte Arabic numbering.
    ///</summary>
    DBChar = 15;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using sequential digital ideographs, using the appropriate character.
    ///</summary>
    DBNum1 = 16;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using sequential numbers from the appropriate counting system.
    ///</summary>
    DBNum2 = 17;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using sequential numbers from the appropriate legal counting system.
    ///</summary>
    DBNum3 = 18;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using sequential numbers from the appropriate digital counting system.
    ///</summary>
    DBNum4 = 19;
    ///<summary>
    ///  Numeric formatting. Dollar text (One, Two, Three, ... + AND 55/100).
    ///</summary>
    DollarText = 20;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using sequential numbers from the Korean Ganada format.
    ///</summary>
    Ganada = 21;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using decimal numbering followed by a period, using
    ///  the enclosed alphanumeric glyph character.
    ///</summary>
    GB1 = 22;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using decimal numbering enclosed in parenthesis,
    ///  using the enclosed alphanumeric glyph character.
    ///</summary>
    GB2 = 23;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using decimal numbering enclosed in a circle, using the
    ///  enclosed alphanumeric glyph character.
    ///</summary>
    GB3 = 24;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using decimal numbering enclosed in a circle, using the
    ///  enclosed alphanumeric glyph character.
    ///</summary>
    GB4 = 25;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using Hebrew numerals.
    ///</summary>
    Hebrew1 = 26;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using the Hebrew alphabet.
    ///</summary>
    Hebrew2 = 27;
    ///<summary>
    ///  Numeric formatting. Formats the numeric result using uppercase hexadecimal digits.
    ///</summary>
    Hex = 28;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using Hindi numbers.
    ///</summary>
    HindiArabic = 29;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using sequential numbers from the Hindi counting system.
    ///</summary>
    HindiCardText = 30;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using Hindi vowels.
    ///</summary>
    HindiLetter1 = 31;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using Hindi consonants.
    ///</summary>
    HindiLetter2 = 32;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using the Japanese iroha.
    ///</summary>
    Iroha = 33;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using a Japanese style using the appropriate counting system.
    ///</summary>
    KanjiNum1 = 34;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using the appropriate counting system.
    ///</summary>
    KanjiNum2 = 35;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using the appropriate counting system.
    ///</summary>
    KanjiNum3 = 36;
    ///<summary>
    ///  Numeric formatting. Ordinal (1st, 2nd, 3rd, ...).
    ///</summary>
    Ordinal = 37;
    ///<summary>
    ///  Numeric formatting. Ordinal text (First, Second, Third, ...).
    ///</summary>
    OrdText = 38;
    ///<summary>
    ///  Numeric formatting. Uppercase Roman (I, II, III, ...).
    ///</summary>
    UppercaseRoman = 39;
    ///<summary>
    ///  Numeric formatting. Lowercase Roman (i, ii, iii, ...).
    ///</summary>
    LowercaseRoman = 40;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using single-byte Arabic numbering.
    ///</summary>
    SBChar = 41;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using Thai numbers.
    ///</summary>
    ThaiArabic = 42;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using sequential numbers from the Thai counting system.
    ///</summary>
    ThaiCardText = 43;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using Thai letters.
    ///</summary>
    ThaiLetter = 44;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using Vietnamese numerals.
    ///</summary>
    VietCardText = 45;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using sequential numerical traditional ideographs.
    ///</summary>
    Zodiac1 = 46;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using sequential zodiac ideographs.
    ///</summary>
    Zodiac2 = 47;
    ///<summary>
    ///  Numeric formatting. Formats a numeric result using sequential traditional zodiac ideographs.
    ///</summary>
    Zodiac3 = 48;
    ///<summary>
    ///  Text formatting. Capitalizes the first letter of each word.
    ///</summary>
    Caps = 49;
    ///<summary>
    ///  Text formatting. Capitalizes the first letter of the first word.
    ///</summary>
    FirstCap = 50;
    ///<summary>
    ///  Text formatting. All letters are lowercase.
    ///</summary>
    Lower = 51;
    ///<summary>
    ///  Text formatting. All letters are uppercase.
    ///</summary>
    Upper = 52;
    ///<summary>
    ///  Field result formatting. The CHARFORMAT instruction.
    ///</summary>
    CharFormat = 53;
    ///<summary>
    ///  Field result formatting. The MERGEFORMAT instruction.
    ///</summary>
    MergeFormat = 54;
    ///<summary>
    ///  Field result formatting. The MERGEFORMATINET instruction.
    ///</summary>
    MergeFormatInet = 55;
  end;


  //-------------namespace: Aspose.Words.Fields----------------
  ///<summary>
  ///  Specifies an unit of an image dimension (i.e. the width or the height) used across a mail merge process.
  ///</summary>
  [DNTypeName('Aspose.Words.Fields.MergeFieldImageDimensionUnit')]
  DNMergeFieldImageDimensionUnit = type Integer;
  DNMergeFieldImageDimensionUnitHelper = record helper for DNMergeFieldImageDimensionUnit
  public const
    ///<summary>
    ///  The point (i.e. 1/72 inch).
    ///</summary>
    Point = 0;
    ///<summary>
    ///  The percent of the original image dimension value.
    ///</summary>
    Percent = 1;
  end;


  //-------------namespace: Aspose.Words.Fields----------------
  ///<summary>
  ///  Specifies the type of a text form field.
  ///</summary>
  [DNTypeName('Aspose.Words.Fields.TextFormFieldType')]
  DNTextFormFieldType = type Integer;
  DNTextFormFieldTypeHelper = record helper for DNTextFormFieldType
  public const
    ///<summary>
    ///  The text form field can contain any text.
    ///</summary>
    Regular = 0;
    ///<summary>
    ///  The text form field can contain only numbers.
    ///</summary>
    Number = 1;
    ///<summary>
    ///  The text form field can contain only a valid date value.
    ///</summary>
    Date = 2;
    ///<summary>
    ///  The text form field value is the current date when the field is updated.
    ///</summary>
    CurrentDate = 3;
    ///<summary>
    ///  The text form field value is the current time when the field is updated.
    ///</summary>
    CurrentTime = 4;
    ///<summary>
    ///  The text form field value is calculated from the expression specified in
    ///  the <see cref="P:Aspose.Words.Fields.FormField.TextInputDefault" />
    ///  property.
    ///</summary>
    Calculated = 5;
  end;


  //-------------namespace: Aspose.Words.Fonts----------------
  ///<summary><para>Specifies format of particular embedded font inside <see cref="T:Aspose.Words.Fonts.FontInfo" />
  ///  object.</para><para>When saving a document to a file, only embedded fonts of corresponding format are written down.</para></summary>
  [DNTypeName('Aspose.Words.Fonts.EmbeddedFontFormat')]
  DNEmbeddedFontFormat = type Integer;
  DNEmbeddedFontFormatHelper = record helper for DNEmbeddedFontFormat
  public const
    ///<summary><para>Specifies Embedded OpenType (EOT) File Format.</para><para>This format of embedded fonts used in DOC files.</para></summary>
    ///<remarks><para>See http://www.w3.org/Submission/EOT for description of the format.</para></remarks>
    EmbeddedOpenType = 0;
    ///<summary><para>Specifies font, embedded as plain copy of OpenType (TrueType) font file.</para><para>This format of embedded fonts used in Open Office XML format, including DOCX files.</para></summary>
    OpenType = 1;
  end;


  //-------------namespace: Aspose.Words.Fonts----------------
  ///<summary>
  ///  Specifies the style of an embedded font inside a <see cref="T:Aspose.Words.Fonts.FontInfo" />
  ///  object.
  ///</summary>
  [DNTypeName('Aspose.Words.Fonts.EmbeddedFontStyle')]
  DNEmbeddedFontStyle = type Integer;
  DNEmbeddedFontStyleHelper = record helper for DNEmbeddedFontStyle
  public const
    ///<summary>
    ///  Specifies the Regular embedded font.
    ///</summary>
    Regular = 0;
    ///<summary>
    ///  Specifies the Bold embedded font.
    ///</summary>
    Bold = 1;
    ///<summary>
    ///  Specifies the Italic embedded font.
    ///</summary>
    Italic = 2;
    ///<summary>
    ///  Specifies the Bold-Italic embedded font.
    ///</summary>
    BoldItalic = 3;
  end;


  //-------------namespace: Aspose.Words.Fonts----------------
  ///<summary>
  ///  Represents the font family.
  ///</summary>
  ///<remarks><para>A font family is a set of fonts having common stroke width and serif characteristics.</para></remarks>
  [DNTypeName('Aspose.Words.Fonts.FontFamily')]
  DNFontFamily = type Integer;
  DNFontFamilyHelper = record helper for DNFontFamily
  public const
    ///<summary>
    ///  Specifies a generic family name. This name is used when information about a font
    ///  does not exist or does not matter. The default font is used.
    ///</summary>
    Auto = 0;
    ///<summary>
    ///  Specifies a proportional font with serifs. An example is Times New Roman.
    ///</summary>
    Roman = 1;
    ///<summary>
    ///  Specifies a proportional font without serifs. An example is Arial.
    ///</summary>
    Swiss = 2;
    ///<summary>
    ///  Specifies a monospace font with or without serifs. Monospace fonts are
    ///  usually modern; examples include Pica, Elite, and Courier New.
    ///</summary>
    Modern = 3;
    ///<summary>
    ///  Specifies a font that is designed to look like handwriting; examples include Script and Cursive.
    ///</summary>
    Script = 4;
    ///<summary>
    ///  Specifies a novelty font. An example is Old English.
    ///</summary>
    Decorative = 5;
  end;


  //-------------namespace: Aspose.Words.Fonts----------------
  ///<summary>
  ///  Represents the font pitch.
  ///</summary>
  ///<remarks>The pitch indicates if the font is fixed pitch, proportionally spaced, or relies on a default setting.</remarks>
  [DNTypeName('Aspose.Words.Fonts.FontPitch')]
  DNFontPitch = type Integer;
  DNFontPitchHelper = record helper for DNFontPitch
  public const
    ///<summary>
    ///  Specifies that no information is available about the pitch of a font.
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Specifies that this is a fixed width font.
    ///</summary>
    Fixed = 1;
    ///<summary>
    ///  Specifies that this is a proportional width font.
    ///</summary>
    Variable = 2;
  end;


  //-------------namespace: Aspose.Words.Fonts----------------
  ///<summary>
  ///  Specifies the type of a font source.
  ///</summary>
  [DNTypeName('Aspose.Words.Fonts.FontSourceType')]
  DNFontSourceType = type Integer;
  DNFontSourceTypeHelper = record helper for DNFontSourceType
  public const
    ///<summary>
    ///  A <see cref="T:Aspose.Words.Fonts.FileFontSource" />
    ///  object that represents single font file.
    ///</summary>
    FontFile = 0;
    ///<summary>
    ///  A <see cref="T:Aspose.Words.Fonts.FolderFontSource" />
    ///  object that represents folder with font files.
    ///</summary>
    FontsFolder = 1;
    ///<summary>
    ///  A <see cref="T:Aspose.Words.Fonts.MemoryFontSource" />
    ///  object that represents single font in memory.
    ///</summary>
    MemoryFont = 2;
    ///<summary>
    ///  A <see cref="T:Aspose.Words.Fonts.SystemFontSource" />
    ///  object that represents all fonts installed to the system.
    ///</summary>
    SystemFonts = 3;
    ///<summary>
    ///  A <see cref="T:Aspose.Words.Fonts.StreamFontSource" />
    ///  object that represents a stream with font data.
    ///</summary>
    FontStream = 4;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Identifies the type of header or footer found in a Word file.
  ///</summary>
  ///<rev>
  ///  This is a per section header/footer.
  ///  Do not renumber as the value of the enum used as an index into plcfhdd.
  ///</rev>
  [DNTypeName('Aspose.Words.HeaderFooterType')]
  DNHeaderFooterType = type Integer;
  DNHeaderFooterTypeHelper = record helper for DNHeaderFooterType
  public const
    ///<summary>
    ///  Header for even numbered pages.
    ///</summary>
    HeaderEven = 0;
    ///<summary>
    ///  Primary header, also used for odd numbered pages.
    ///</summary>
    HeaderPrimary = 1;
    ///<summary>
    ///  Footer for even numbered pages.
    ///</summary>
    FooterEven = 2;
    ///<summary>
    ///  Primary footer, also used for odd numbered pages.
    ///</summary>
    FooterPrimary = 3;
    ///<summary>
    ///  Header for the first page of the section.
    ///</summary>
    HeaderFirst = 4;
    ///<summary>
    ///  Footer for the first page of the section.
    ///</summary>
    FooterFirst = 5;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Specifies the rule for determining the height of an object.
  ///</summary>
  [DNTypeName('Aspose.Words.HeightRule')]
  DNHeightRule = type Integer;
  DNHeightRuleHelper = record helper for DNHeightRule
  public const
    ///<summary>
    ///  The height will be at least the specified height in points. It will grow, if needed,
    ///  to accommodate all text inside an object.
    ///</summary>
    AtLeast = 0;
    ///<summary>
    ///  The height is specified exactly in points. Please note that if the text cannot
    ///  fit inside the object of this height, it will appear truncated.
    ///</summary>
    Exactly = 1;
    ///<summary>
    ///  The height will grow automatically to accommodate all text inside an object.
    ///</summary>
    Auto = 2;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Specifies how formatting is merged when importing content from another document.
  ///</summary>
  ///<remarks><p>When you copy nodes from one document to another, this option specifies how formatting
  ///  is resolved when both documents have a style with the same name, but different formatting.</p>
  ///  <p>The formatting is resolved as follows:</p>
  ///<list type="number"><item>Built-in styles are matched using their locale independent style identifier.
  ///  User defined styles are matched using case-sensitive style name.</item>
  ///<item>If a matching style is not found in the destination document, the style
  ///  (and all styles referenced by it) are copied into the destination document
  ///  and the imported nodes are updated to reference the new style.</item>
  ///<item>If a matching style already exists in the destination document, what happens
  ///  depends on the <c>importFormatMode</c> parameter passed to
  ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)">Document.ImportNode</see>
  ///  as described below.</item>
  ///</list>
  ///  <p>When using the <b>UseDestinationStyles</b>
  ///  option, if a matching style already exists
  ///  in the destination document, the style is not copied and the imported nodes are updated
  ///  to reference the existing style.</p>
  ///  <p>The drawback of using <b>UseDestinationStyles</b>
  ///  is that the imported text might
  ///  look different in the destination document comparing to the source document.
  ///  For example, the "Heading 1" style in the source document uses Arial 16pt font and
  ///  the "Heading 1" style in the destination document uses Times New Roman 14pt font.
  ///  When importing text of "Heading 1" style with no other direct formatting, it will
  ///  appear as Times New Roman 14pt font in the destination document.</p>
  ///  <p><b>KeepSourceFormatting</b>
  ///  option allows to make sure the imported content looks the same
  ///  in the destination document like it looks in the source document.
  ///  If a matching style already exists in the destination document, the source style formatting is expanded
  ///  into direct Node attributes and the style is changed to Normal.
  ///  If the style does not exist in the destination document, then the source style is imported
  ///  into the destination document and applied to the imported node.
  ///  Note, that it is not always possible to preserve the source style even if it does not exist in the destination document.
  ///  In this case formating of such style will be expanded into direct Node attributes in favor of preserving original Node formatting.</p>
  ///  <p>The drawback of using <b>KeepSourceFormatting</b>
  ///  is that if you perform several imports,
  ///  you could end up with many styles in the destination document and that could make using
  ///  consistent style formatting in Microsoft Word difficult for this document.</p>
  ///  <p>Using <b>KeepDifferentStyles</b>
  ///  option allows to reuse destination styles
  ///  if the formatting they provide is identical to the styles in the source document.
  ///  If the style in destination document is different from the source then it is imported.</p>
  ///<seealso cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
  ///</remarks>
  [DNTypeName('Aspose.Words.ImportFormatMode')]
  DNImportFormatMode = type Integer;
  DNImportFormatModeHelper = record helper for DNImportFormatMode
  public const
    ///<summary>
    ///  Use the destination document styles and copy new styles. This is the default option.
    ///</summary>
    UseDestinationStyles = 0;
    ///<summary>
    ///  Copy all required styles to the destination document, generate unique style names if needed.
    ///</summary>
    KeepSourceFormatting = 1;
    ///<summary>
    ///  Only copy styles that are different from those in the source document.
    ///</summary>
    KeepDifferentStyles = 2;
  end;


  //-------------namespace: Aspose.Words.Layout----------------
  ///<summary>
  ///  Specifies the rendering mode for document comments.
  ///</summary>
  [DNTypeName('Aspose.Words.Layout.CommentDisplayMode')]
  DNCommentDisplayMode = type Integer;
  DNCommentDisplayModeHelper = record helper for DNCommentDisplayMode
  public const
    ///<summary>
    ///  No document comments are rendered.
    ///</summary>
    Hide = 0;
    ///<summary>
    ///  Renders document comments in balloons in the margin. This is the default value.
    ///</summary>
    ShowInBalloons = 1;
    ///<summary>
    ///  Renders document comments in annotations. This is only available for Pdf format.
    ///</summary>
    ShowInAnnotations = 2;
  end;


  //-------------namespace: Aspose.Words.Layout----------------
  [DNTypeName('Aspose.Words.Layout.ContinuosSectionRestart')]
  DNContinuosSectionRestart = type Integer;
  DNContinuosSectionRestartHelper = record helper for DNContinuosSectionRestart
  public const
    Always = 0;
    FromNewPageOnly = 1;
  end;


  //-------------namespace: Aspose.Words.Layout----------------
  ///<summary>
  ///  Types of the layout entities.
  ///</summary>
  [DNTypeName('Aspose.Words.Layout.LayoutEntityType')]
  DNLayoutEntityType = type Integer;
  DNLayoutEntityTypeHelper = record helper for DNLayoutEntityType
  public const
    ///<summary>
    ///  Default value.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Represents page of a document.
    ///  Page may have <see cref="F:Aspose.Words.Layout.LayoutEntityType.Column" />
    ///  , <see cref="F:Aspose.Words.Layout.LayoutEntityType.HeaderFooter" />
    ///  and <see cref="F:Aspose.Words.Layout.LayoutEntityType.Comment" />
    ///  child entities.
    ///</summary>
    Page = 1;
    ///<summary>
    ///  Represents a column of text on a page.
    ///  Column may have the same child entities as <see cref="F:Aspose.Words.Layout.LayoutEntityType.Cell" />
    ///  , plus <see cref="F:Aspose.Words.Layout.LayoutEntityType.Footnote" />
    ///  , <see cref="F:Aspose.Words.Layout.LayoutEntityType.Endnote" />
    ///  and <see cref="F:Aspose.Words.Layout.LayoutEntityType.NoteSeparator" />
    ///  entities.
    ///</summary>
    Column = 2;
    ///<summary>
    ///  Represents a table row.
    ///  Row may have <see cref="F:Aspose.Words.Layout.LayoutEntityType.Cell" />
    ///  as child entities.
    ///</summary>
    Row = 8;
    ///<summary>
    ///  Represents a table cell.
    ///  Cell may have <see cref="F:Aspose.Words.Layout.LayoutEntityType.Line" />
    ///  and <see cref="F:Aspose.Words.Layout.LayoutEntityType.Row" />
    ///  child entities.
    ///</summary>
    Cell = 16;
    ///<summary>
    ///  Represents line of characters of text and inline objects.
    ///  Line may have <see cref="F:Aspose.Words.Layout.LayoutEntityType.Span" />
    ///  child entities.
    ///</summary>
    Line = 32;
    ///<summary>
    ///  Represents one or more characters in a line.
    ///  This include special characters like field start/end markers, bookmarks and comments.
    ///  Span may not have child entities.
    ///</summary>
    Span = 64;
    ///<summary>
    ///  Represents placeholder for footnote content.
    ///  Footnote may have <see cref="F:Aspose.Words.Layout.LayoutEntityType.Line" />
    ///  and <see cref="F:Aspose.Words.Layout.LayoutEntityType.Row" />
    ///  child entities.
    ///</summary>
    Footnote = 256;
    ///<summary>
    ///  Represents placeholder for endnote content.
    ///  Endnote may have <see cref="F:Aspose.Words.Layout.LayoutEntityType.Line" />
    ///  and <see cref="F:Aspose.Words.Layout.LayoutEntityType.Row" />
    ///  child entities.
    ///</summary>
    Endnote = 512;
    ///<summary>
    ///  Represents placeholder for header/footer content on a page.
    ///  HeaderFooter may have <see cref="F:Aspose.Words.Layout.LayoutEntityType.Line" />
    ///  and <see cref="F:Aspose.Words.Layout.LayoutEntityType.Row" />
    ///  child entities.
    ///</summary>
    HeaderFooter = 1024;
    ///<summary>
    ///  Represents text area inside of a shape.
    ///  Textbox may have <see cref="F:Aspose.Words.Layout.LayoutEntityType.Line" />
    ///  and <see cref="F:Aspose.Words.Layout.LayoutEntityType.Row" />
    ///  child entities.
    ///</summary>
    TextBox = 2048;
    ///<summary>
    ///  Represents placeholder for comment content.
    ///  Comment may have <see cref="F:Aspose.Words.Layout.LayoutEntityType.Line" />
    ///  and <see cref="F:Aspose.Words.Layout.LayoutEntityType.Row" />
    ///  child entities.
    ///</summary>
    Comment = 4096;
    ///<summary>
    ///  Represents footnote/endnote separator.
    ///  NoteSeparator may have <see cref="F:Aspose.Words.Layout.LayoutEntityType.Line" />
    ///  and <see cref="F:Aspose.Words.Layout.LayoutEntityType.Row" />
    ///  child entities.
    ///</summary>
    NoteSeparator = 8192;
    Note = 16384;
  end;


  //-------------namespace: Aspose.Words.Layout----------------
  ///<summary>
  ///  A code of event raised during page layout model build and rendering.<para />
  ///  Page layout model is built in two steps.
  ///  First, "conversion step", this is when page layout pulls document content and creates object graph.
  ///  Second, "reflow step", this is when structures are split, merged and arranged into pages.<para />
  ///  Depending of the operation which triggered build, page layout model may or may not be further rendered into fixed page format.
  ///  For example, computing number of pages in the document or updating fields does not require rendering, whereas export to Pdf does.<para /></summary>
  [DNTypeName('Aspose.Words.Layout.PageLayoutEvent')]
  DNPageLayoutEvent = type Integer;
  DNPageLayoutEventHelper = record helper for DNPageLayoutEvent
  public const
    ///<summary>
    ///  Default value
    ///</summary>
    None = 0;
    ///<summary>
    ///  Corresponds to a checkpoint in code which is often visited and which is suitable to abort process.<para />
    ///  While inside <see cref="M:Aspose.Words.Layout.IPageLayoutCallback.Notify(Aspose.Words.Layout.PageLayoutCallbackArgs)" />
    ///  throw custom exception to abort process.<para />
    ///  You can throw when handling any callback event to abort process.<para />
    ///  Note that if process is aborted the page layout model remains in undefined state. If process is aborted upon reflow of a complete page,
    ///  however, it should be possible to use layout model up to the end of that page.<para /></summary>
    WatchDog = 1;
    ///<summary>
    ///  Build of the page layout has started. Fired once.
    ///  This is the first event which occurs when <see cref="M:Aspose.Words.Document.UpdatePageLayout" />
    ///  is called.
    ///</summary>
    BuildStarted = 2;
    ///<summary>
    ///  Build of the page layout has finished. Fired once.
    ///  This is the last event which occurs when <see cref="M:Aspose.Words.Document.UpdatePageLayout" />
    ///  is called.
    ///</summary>
    BuildFinished = 3;
    ///<summary>
    ///  Conversion of document model to page layout has started. Fired once.
    ///  This occurs when layout model starts pulling document content.
    ///</summary>
    ConversionStarted = 4;
    ///<summary>
    ///  Conversion of document model to page layout has finished. Fired once.
    ///  This occurs when layout model stops pulling document content.
    ///</summary>
    ConversionFinished = 5;
    ///<summary>
    ///  Reflow of the page layout has started. Fired once.
    ///  This occurs when layout model starts reflowing document content.
    ///</summary>
    ReflowStarted = 6;
    ///<summary>
    ///  Reflow of the page layout has finished. Fired once.
    ///  This occurs when layout model stops reflowing document content.
    ///</summary>
    ReflowFinished = 7;
    ///<summary>
    ///  Reflow of the page has started.
    ///  Note that page may reflow multiple times and that reflow may restart before it is finished.
    ///<seealso cref="P:Aspose.Words.Layout.PageLayoutCallbackArgs.PageIndex" />
    ///</summary>
    PartReflowStarted = 8;
    ///<summary>
    ///  Reflow of the page has finished.
    ///  Note that page may reflow multiple times and that reflow may restart before it is finished.
    ///<seealso cref="P:Aspose.Words.Layout.PageLayoutCallbackArgs.PageIndex" />
    ///</summary>
    PartReflowFinished = 9;
    ///<summary>
    ///  Rendering of page has started. This is fired once per page.
    ///</summary>
    PartRenderingStarted = 10;
    ///<summary>
    ///  Rendering of page has finished. This is fired once per page.
    ///</summary>
    PartRenderingFinished = 11;
  end;


  //-------------namespace: Aspose.Words.Layout----------------
  ///<summary>
  ///  Allows to specify color of document revisions.
  ///</summary>
  [DNTypeName('Aspose.Words.Layout.RevisionColor')]
  DNRevisionColor = type Integer;
  DNRevisionColorHelper = record helper for DNRevisionColor
  public const
    ///<summary>
    ///  Default.
    ///</summary>
    Auto = 0;
    ///<summary>
    ///  Represents 000000 color.
    ///</summary>
    Black = 1;
    ///<summary>
    ///  Represents 2e97d3 color.
    ///</summary>
    Blue = 2;
    ///<summary>
    ///  Represents 84a35b color.
    ///</summary>
    BrightGreen = 3;
    ///<summary>
    ///  Represents 376e96 color.
    ///</summary>
    DarkBlue = 4;
    ///<summary>
    ///  Represents 881824 color.
    ///</summary>
    DarkRed = 5;
    ///<summary>
    ///  Represents e09a2b color.
    ///</summary>
    DarkYellow = 6;
    ///<summary>
    ///  Represents a0a3a9 color.
    ///</summary>
    Gray25 = 7;
    ///<summary>
    ///  Represents 50565e color.
    ///</summary>
    Gray50 = 8;
    ///<summary>
    ///  Represents 2c6234 color.
    ///</summary>
    Green = 9;
    ///<summary>
    ///  Represents ce338f color.
    ///</summary>
    Pink = 10;
    ///<summary>
    ///  Represents b5082e color.
    ///</summary>
    Red = 11;
    ///<summary>
    ///  Represents 1b9cab color.
    ///</summary>
    Teal = 12;
    ///<summary>
    ///  Represents 3eafc2 color.
    ///</summary>
    Turquoise = 13;
    ///<summary>
    ///  Represents 633277 color.
    ///</summary>
    Violet = 14;
    ///<summary>
    ///  Represents ffffff color.
    ///</summary>
    White = 15;
    ///<summary>
    ///  Represents fad272 color.
    ///</summary>
    Yellow = 16;
    ///<summary>
    ///  No color is used to highlight revision changes.
    ///</summary>
    ///<dev>
    ///  We shall consider getting rid of this one as it duplicates <see cref="F:Aspose.Words.Layout.RevisionEffect.None" />
    ///  .
    ///  I believe it has no use if <see cref="T:Aspose.Words.Layout.RevisionEffect" />
    ///  is publicly available.
    ///  It is confusing to use <see cref="F:Aspose.Words.Layout.RevisionColor.NoHighlight" />
    ///  and <see cref="F:Aspose.Words.Layout.RevisionEffect.Color" />
    ///  together,
    ///  or <see cref="F:Aspose.Words.Layout.RevisionColor.ByAuthor" />
    ///  and <see cref="F:Aspose.Words.Layout.RevisionEffect.None" />
    ///  for example.
    ///</dev>
    NoHighlight = 17;
    ///<summary>
    ///  Revisions of each author receive their own color for highlighting from a predfined set of hi-contrast colors.
    ///</summary>
    ByAuthor = 18;
  end;


  //-------------namespace: Aspose.Words.Layout----------------
  ///<summary>
  ///  Allows to specify decoration effect for revisions of document text.
  ///</summary>
  [DNTypeName('Aspose.Words.Layout.RevisionTextEffect')]
  DNRevisionTextEffect = type Integer;
  DNRevisionTextEffectHelper = record helper for DNRevisionTextEffect
  public const
    ///<summary>
    ///  Revised content has no special effects applied.
    ///  This corresponds to <see cref="F:Aspose.Words.Layout.RevisionColor.NoHighlight" />
    ///  .
    ///</summary>
    None = 0;
    ///<summary>
    ///  Revised content is highlighted with color only.
    ///</summary>
    Color = 1;
    ///<summary>
    ///  Revised content is made bold and colored.
    ///</summary>
    Bold = 2;
    ///<summary>
    ///  Revised content is made italic and colored.
    ///</summary>
    Italic = 3;
    ///<summary>
    ///  Revised content is underlined and colored.
    ///</summary>
    Underline = 4;
    ///<summary>
    ///  Revised content is double underlined and colored.
    ///</summary>
    DoubleUnderline = 5;
    ///<summary>
    ///  Revised content is stroked through and colored.
    ///</summary>
    StrikeThrough = 6;
    ///<summary>
    ///  Revised content is double stroked through and colored.
    ///</summary>
    ///<remarks>Only works for <see cref="F:Aspose.Words.RevisionType.Deletion" />
    ///  , <see cref="F:Aspose.Words.RevisionType.FormatChange" />
    ///  and <see cref="F:Aspose.Words.RevisionType.Moving" />
    ///  ('move from' type).</remarks>
    DoubleStrikeThrough = 7;
    ///<summary>
    ///  Revised content is hidden.
    ///</summary>
    ///<remarks>Only works for <see cref="F:Aspose.Words.RevisionType.Deletion" />
    ///  and <see cref="F:Aspose.Words.RevisionType.Moving" />
    ///  ('move from' type).</remarks>
    Hidden = 8;
  end;


  //-------------namespace: Aspose.Words.Layout----------------
  ///<summary>
  ///  Specifies which revisions are rendered in balloons.
  ///</summary>
  ///<remarks>
  ///  Note that revisions are not rendered in balloons for <see cref="F:Aspose.Words.Layout.CommentDisplayMode.ShowInAnnotations" />
  ///  .
  ///</remarks>
  [DNTypeName('Aspose.Words.Layout.ShowInBalloons')]
  DNShowInBalloons = type Integer;
  DNShowInBalloonsHelper = record helper for DNShowInBalloons
  public const
    ///<summary>
    ///  Renders insert, delete and format revisions inline.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Renders insert and delete revisions inline, format revisions in balloons.
    ///</summary>
    Format = 1;
    ///<summary>
    ///  Renders insert revisions inline, delete and format revisions in balloons.
    ///</summary>
    FormatAndDelete = 2;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Determines when automatic line numbering restarts.
  ///</summary>
  ///<seealso cref="T:Aspose.Words.PageSetup" />
  ///<seealso cref="P:Aspose.Words.PageSetup.LineNumberRestartMode" />
  [DNTypeName('Aspose.Words.LineNumberRestartMode')]
  DNLineNumberRestartMode = type Integer;
  DNLineNumberRestartModeHelper = record helper for DNLineNumberRestartMode
  public const
    ///<summary>
    ///  Line numbering restarts at the start of every page.
    ///</summary>
    RestartPage = 0;
    ///<summary>
    ///  Line numbering restarts at the section start.
    ///</summary>
    RestartSection = 1;
    ///<summary>
    ///  Line numbering continuous from the previous section.
    ///</summary>
    Continuous = 2;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Specifies line spacing values for a paragraph.
  ///</summary>
  [DNTypeName('Aspose.Words.LineSpacingRule')]
  DNLineSpacingRule = type Integer;
  DNLineSpacingRuleHelper = record helper for DNLineSpacingRule
  public const
    ///<summary>
    ///  The line spacing can be greater than or equal to, but never less than,
    ///  the value specified in the <see cref="P:Aspose.Words.ParagraphFormat.LineSpacing" />
    ///  property.
    ///</summary>
    AtLeast = 0;
    ///<summary>
    ///  The line spacing never changes from the value specified in the
    ///<see cref="P:Aspose.Words.ParagraphFormat.LineSpacing" />
    ///  property,
    ///  even if a larger font is used within the paragraph.
    ///</summary>
    Exactly = 1;
    ///<summary>
    ///  The line spacing is specified in the <see cref="P:Aspose.Words.ParagraphFormat.LineSpacing" />
    ///  property as the number of lines. One line equals 12 points.
    ///</summary>
    Multiple = 2;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Specifies line style of a <see cref="T:Aspose.Words.Border" />
  ///  .
  ///</summary>
  [DNTypeName('Aspose.Words.LineStyle')]
  DNLineStyle = type Integer;
  DNLineStyleHelper = record helper for DNLineStyle
  public const
    ///<summary></summary>
    ///<dev>
    ///  In MS Word binary format LineStyle.None means no border for all objects, except table cells.
    ///  For table cells LineStyle.None means inherit from the default table border.
    ///  Apparently this looks like a very bad hack made by someone at MS and I work around it
    ///  by making LineStyle.None to mean "no border" for any object in the model including table cells.
    ///  The translation is performed in the binary cell reader/writer.
    ///  I also use a single approach to indicate that a border is inherited. At first the border attribute
    ///  is simply missing, but if a use requests it, a Border object is instantiated in "inherited" mode.
    ///  DS 12.10.2010. Right now the enum contains the continuous range of values and it is used in
    ///  Border.HasValidLineStyle to define if a line style belongs to the enum or not. If new values
    ///  are added to the enum then Border.HasValidLineStyle should be reworked correspondingly.
    ///</dev>
    None = 0;
    ///<summary></summary>
    Single = 1;
    ///<summary></summary>
    Thick = 2;
    ///<summary></summary>
    Double = 3;
    ///<summary></summary>
    Hairline = 5;
    ///<summary></summary>
    Dot = 6;
    ///<summary></summary>
    DashLargeGap = 7;
    ///<summary></summary>
    DotDash = 8;
    ///<summary></summary>
    DotDotDash = 9;
    ///<summary></summary>
    Triple = 10;
    ///<summary></summary>
    ThinThickSmallGap = 11;
    ///<summary></summary>
    ThickThinSmallGap = 12;
    ///<summary></summary>
    ThinThickThinSmallGap = 13;
    ///<summary></summary>
    ThinThickMediumGap = 14;
    ///<summary></summary>
    ThickThinMediumGap = 15;
    ///<summary></summary>
    ThinThickThinMediumGap = 16;
    ///<summary></summary>
    ThinThickLargeGap = 17;
    ///<summary></summary>
    ThickThinLargeGap = 18;
    ///<summary></summary>
    ThinThickThinLargeGap = 19;
    ///<summary></summary>
    Wave = 20;
    ///<summary></summary>
    DoubleWave = 21;
    ///<summary></summary>
    DashSmallGap = 22;
    ///<summary></summary>
    DashDotStroker = 23;
    ///<summary></summary>
    Emboss3D = 24;
    ///<summary></summary>
    Engrave3D = 25;
    ///<summary></summary>
    Outset = 26;
    ///<summary></summary>
    Inset = 27;
  end;


  //-------------namespace: Aspose.Words.Lists----------------
  ///<summary>
  ///  Specifies alignment for the list number or bullet.
  ///</summary>
  ///<remarks><p>Used as a value for the <see cref="P:Aspose.Words.Lists.ListLevel.Alignment" />
  ///  property.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.Lists.ListLevelAlignment')]
  DNListLevelAlignment = type Integer;
  DNListLevelAlignmentHelper = record helper for DNListLevelAlignment
  public const
    ///<summary>
    ///  The list label is aligned to the left of the number position.
    ///</summary>
    Left = 0;
    ///<summary>
    ///  The list label is centered at the number position.
    ///</summary>
    Center = 1;
    ///<summary>
    ///  This list label is aligned to the right of the number position.
    ///</summary>
    Right = 2;
  end;


  //-------------namespace: Aspose.Words.Lists----------------
  ///<summary>
  ///  Specifies one of the predefined list formats available in Microsoft Word.
  ///</summary>
  ///<remarks><p>A list template value is used as a parameter into the
  ///<see cref="M:Aspose.Words.Lists.ListCollection.Add(Aspose.Words.Lists.ListTemplate)" />
  ///  method.</p>
  ///  <p>Aspose.Words list templates correspond to the 21 list templates available
  ///  in the Bullets and Numbering dialog box in Microsoft Word 2003.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.Lists.ListTemplate')]
  DNListTemplate = type Integer;
  DNListTemplateHelper = record helper for DNListTemplate
  public const
    ///<summary><p>Default bulleted list with 9 levels. Bullet of the first level is a disc,
    ///  bullet of the second level is a circle, bullet of the third level is a square.
    ///  Then formatting repeats for the remaining levels.</p>
    ///  <p>Each level is indented to the right by 0.25" relative to the previous level.</p>
    ///  <p>Corresponds to the 1st bulleted list template in the Bullets and Numbering dialog box in Microsoft Word.</p>
    ///</summary>
    BulletDefault = 0;
    ///<summary><p>Same as BulletDefault.</p>
    ///  <p>Corresponds to the 1st bulleted list template in the Bullets and Numbering dialog box in Microsoft Word.</p>
    ///</summary>
    BulletDisk = 0;
    ///<summary><p>The bullet of the first level is a circle. The remaining levels are same as in BulletDefault.</p>
    ///  <p>Corresponds to the 2nd bulleted list template in the Bullets and Numbering dialog box in Microsoft Word.</p>
    ///</summary>
    BulletCircle = 1;
    ///<summary><p>The bullet of the first level is a square. The remaining levels are same as in BulletDefault.</p>
    ///  <p>Corresponds to the 3rd bulleted list template in the Bullets and Numbering dialog box in Microsoft Word.</p>
    ///</summary>
    BulletSquare = 2;
    ///<summary><p>The bullet of the first level is a 4-diamond Wingding character. The remaining levels are same as in BulletDefault.</p>
    ///  <p>Corresponds to the 5th bulleted list template in the Bullets and Numbering dialog box in Microsoft Word.</p>
    ///</summary>
    BulletDiamonds = 3;
    ///<summary><p>The bullet of the first level is an arrow head Wingding character. The remaining levels are same as in BulletDefault.</p>
    ///  <p>Corresponds to the 6th bulleted list template in the Bullets and Numbering dialog box in Microsoft Word.</p>
    ///</summary>
    BulletArrowHead = 4;
    ///<summary><p>The bullet of the first level is a tick Wingding character. The remaining levels are same as in BulletDefault.</p>
    ///  <p>Corresponds to the 7th bulleted list template in the Bullets and Numbering dialog box in Microsoft Word.</p>
    ///</summary>
    BulletTick = 5;
    ///<summary><p>Default numbered list with 9 levels. Arabic numbering (1., 2., 3., ...) for the first level,
    ///  lowecase letter numbering (a., b., c., ...) for the second level,
    ///  lowercase roman numbering (i., ii., iii., ...) for the third level.
    ///  Then formatting repeats for the remaining levels.</p>
    ///  <p>Each level is indented to the right by 0.25" relative to the previous level.</p>
    ///  <p>Corresponds to the 1st numbered list template in the Bullets and Numbering dialog box in Microsoft Word.</p>
    ///</summary>
    NumberDefault = 6;
    ///<summary><p>Same as NumberDefault.</p>
    ///  <p>Corresponds to the 1st numbered list template in the Bullets and Numbering dialog box in Microsoft Word.</p>
    ///</summary>
    NumberArabicDot = 6;
    ///<summary><p>The number of the first level is "1)". The remaining levels are same as in NumberDefault.</p>
    ///  <p>Corresponds to the 2nd numbered list template in the Bullets and Numbering dialog box in Microsoft Word.</p>
    ///</summary>
    NumberArabicParenthesis = 7;
    ///<summary><p>The number of the first level is "I.". The remaining levels are same as in NumberDefault.</p>
    ///  <p>Corresponds to the 3rd numbered list template in the Bullets and Numbering dialog box in Microsoft Word.</p>
    ///</summary>
    NumberUppercaseRomanDot = 8;
    ///<summary><p>The number of the first level is "A.". The remaining levels are same as in NumberDefault.</p>
    ///  <p>Corresponds to the 4th numbered list template in the Bullets and Numbering dialog box in Microsoft Word.</p>
    ///</summary>
    NumberUppercaseLetterDot = 9;
    ///<summary><p>The number of the first level is "a)". The remaining levels are same as in NumberDefault.</p>
    ///  <p>Corresponds to the 5th numbered list template in the Bullets and Numbering dialog box in Microsoft Word.</p>
    ///</summary>
    NumberLowercaseLetterParenthesis = 10;
    ///<summary><p>The number of the first level is "a.". The remaining levels are same as in NumberDefault.</p>
    ///  <p>Corresponds to the 6th numbered list template in the Bullets and Numbering dialog box in Microsoft Word.</p>
    ///</summary>
    NumberLowercaseLetterDot = 11;
    ///<summary><p>The number of the first level is "i.". The remaining levels are same as in NumberDefault.</p>
    ///  <p>Corresponds to the 7th numbered list template in the Bullets and Numbering dialog box in Microsoft Word.</p>
    ///</summary>
    NumberLowercaseRomanDot = 12;
    ///<summary><p>An outline list with levels numbered "1), a), i), (1), (a), (i), 1., a., i.".</p>
    ///  <p>Corresponds to the 1st outline list template in the Bullets and Numbering dialog box in Microsoft Word.</p>
    ///</summary>
    OutlineNumbers = 13;
    ///<summary><p>An outline list with levels are numbered "1., 1.1., 1.1.1, ...".</p>
    ///  <p>Corresponds to the 2nd outline list template in the Bullets and Numbering dialog box in Microsoft Word.</p>
    ///</summary>
    OutlineLegal = 14;
    ///<summary><p>An outline lists with various bullets for different levels.</p>
    ///  <p>Corresponds to the 3rd outline list template in the Bullets and Numbering dialog box in Microsoft Word.</p>
    ///</summary>
    OutlineBullets = 15;
    ///<summary><p>An outline list with levels linked to Heading styles.</p>
    ///  <p>Corresponds to the 4th outline list template in the Bullets and Numbering dialog box in Microsoft Word.</p>
    ///</summary>
    OutlineHeadingsArticleSection = 16;
    ///<summary><p>An outline list with levels linked to Heading styles.</p>
    ///  <p>Corresponds to the 5th outline list template in the Bullets and Numbering dialog box in Microsoft Word.</p>
    ///</summary>
    OutlineHeadingsLegal = 17;
    ///<summary><p>An outline list with levels linked to Heading styles.</p>
    ///  <p>Corresponds to the 6th outline list template in the Bullets and Numbering dialog box in Microsoft Word.</p>
    ///</summary>
    OutlineHeadingsNumbers = 18;
    ///<summary><p>An outline list with levels linked to Heading styles.</p>
    ///  <p>Corresponds to the 7th outline list template in the Bullets and Numbering dialog box in Microsoft Word.</p>
    ///</summary>
    OutlineHeadingsChapter = 19;
  end;


  //-------------namespace: Aspose.Words.Lists----------------
  ///<summary>
  ///  Specifies the character that separates the list label from the text of the paragraph.
  ///</summary>
  ///<remarks><p>Used as a value for the <see cref="P:Aspose.Words.Lists.ListLevel.TrailingCharacter" />
  ///  property.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.Lists.ListTrailingCharacter')]
  DNListTrailingCharacter = type Integer;
  DNListTrailingCharacterHelper = record helper for DNListTrailingCharacter
  public const
    ///<summary>
    ///  A tab character is placed between the list label and text of the paragraph.
    ///</summary>
    Tab = 0;
    ///<summary>
    ///  A space character is placed between the list label and text of the paragraph.
    ///</summary>
    Space = 1;
    ///<summary>
    ///  There is no separator character between the list label and text of the paragraph.
    ///</summary>
    Nothing = 2;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Indicates the format of the document that is to be loaded.
  ///</summary>
  ///<dev>
  ///  We should only use values 0..255 here because these values are used as bit flags in the UnifiedScenario enum.
  ///</dev>
  [DNTypeName('Aspose.Words.LoadFormat')]
  DNLoadFormat = type Integer;
  DNLoadFormatHelper = record helper for DNLoadFormat
  public const
    ///<summary>
    ///  Instructs Aspose.Words to recognize the format automatically.
    ///</summary>
    Auto = 0;
    ///<summary>
    ///  Microsoft Word 95 or Word 97 - 2003 Document.
    ///</summary>
    Doc = 10;
    ///<summary>
    ///  Microsoft Word 95 or Word 97 - 2003 Template.
    ///</summary>
    Dot = 11;
    ///<summary>
    ///  The document is in pre-Word 95 format.
    ///  Aspose.Words does not currently support loading such documents.
    ///</summary>
    DocPreWord60 = 12;
    ///<summary>
    ///  Office Open XML WordprocessingML Document (macro-free).
    ///</summary>
    Docx = 20;
    ///<summary>
    ///  Office Open XML WordprocessingML Macro-Enabled Document.
    ///</summary>
    Docm = 21;
    ///<summary>
    ///  Office Open XML WordprocessingML Template (macro-free).
    ///</summary>
    Dotx = 22;
    ///<summary>
    ///  Office Open XML WordprocessingML Macro-Enabled Template.
    ///</summary>
    Dotm = 23;
    ///<summary>
    ///  Office Open XML WordprocessingML stored in a flat XML file instead of a ZIP package.
    ///</summary>
    FlatOpc = 24;
    ///<summary>
    ///  Office Open XML WordprocessingML Macro-Enabled Document stored in a flat XML file instead of a ZIP package.
    ///</summary>
    FlatOpcMacroEnabled = 25;
    ///<summary>
    ///  Office Open XML WordprocessingML Template (macro-free) stored in a flat XML file instead of a ZIP package.
    ///</summary>
    FlatOpcTemplate = 26;
    ///<summary>
    ///  Office Open XML WordprocessingML Macro-Enabled Template stored in a flat XML file instead of a ZIP package.
    ///</summary>
    FlatOpcTemplateMacroEnabled = 27;
    ///<summary>
    ///  RTF format.
    ///</summary>
    Rtf = 30;
    ///<summary>
    ///  Microsoft Word 2003 WordprocessingML format.
    ///</summary>
    WordML = 31;
    ///<summary>
    ///  HTML format.
    ///</summary>
    Html = 50;
    ///<summary>
    ///  MHTML (Web archive) format.
    ///</summary>
    Mhtml = 51;
    ///<summary>
    ///  MOBI is an eBook format used by the MobiPocket Reader and Amazon Kindle Readers.
    ///</summary>
    Mobi = 52;
    ///<summary>
    ///  CHM (Compiled HTML Help) format.
    ///</summary>
    Chm = 53;
    ///<summary>
    ///  ODF Text Document.
    ///</summary>
    Odt = 60;
    ///<summary>
    ///  ODF Text Document Template.
    ///</summary>
    Ott = 61;
    ///<summary>
    ///  Plain Text.
    ///</summary>
    Text = 62;
    ///<summary>
    ///  Markdown text document.
    ///</summary>
    Markdown = 63;
    ///<summary>
    ///  Pdf document.
    ///</summary>
    Pdf = 64;
    ///<summary>
    ///  Unrecognized format, cannot be loaded by Aspose.Words.
    ///</summary>
    Unknown = 255;
  end;


  //-------------namespace: Aspose.Words.Loading----------------
  ///<summary>
  ///  Allows to specify the direction to flow the text in a document.
  ///</summary>
  [DNTypeName('Aspose.Words.Loading.DocumentDirection')]
  DNDocumentDirection = type Integer;
  DNDocumentDirectionHelper = record helper for DNDocumentDirection
  public const
    ///<summary>
    ///  Left to right direction.
    ///</summary>
    LeftToRight = 0;
    ///<summary>
    ///  Right to left direction.
    ///</summary>
    RightToLeft = 1;
    ///<summary>
    ///  Auto-detect direction.
    ///</summary>
    ///<remarks>
    ///  When this option is selected and text contains characters belonging to RTL scripts,
    ///  the document direction will be set automatically to RTL.
    ///</remarks>
    Auto = 2;
  end;


  //-------------namespace: Aspose.Words.Loading----------------
  ///<summary>
  ///  Specifies the editing language.
  ///</summary>
  ///<dev>
  ///  https://msdn.microsoft.com/en-us/library/windows/desktop/dd318693(v=vs.85).aspx
  ///  and also
  ///  https://ss64.com/locale.html
  ///</dev>
  [DNTypeName('Aspose.Words.Loading.EditingLanguage')]
  DNEditingLanguage = type Integer;
  DNEditingLanguageHelper = record helper for DNEditingLanguage
  public const
    ArabicSaudiArabia = 1025;
    Bulgarian = 1026;
    Catalan = 1027;
    ChineseTaiwan = 1028;
    Czech = 1029;
    Danish = 1030;
    GermanGermany = 1031;
    Greek = 1032;
    EnglishUS = 1033;
    SpanishSpainTraditionalSort = 1034;
    Finnish = 1035;
    FrenchFrance = 1036;
    Hebrew = 1037;
    Hungarian = 1038;
    Icelandic = 1039;
    ItalianItaly = 1040;
    Japanese = 1041;
    Korean = 1042;
    DutchNetherlands = 1043;
    NorwegianBokmal = 1044;
    Polish = 1045;
    PortugueseBrazil = 1046;
    Romansh = 1047;
    Romanian = 1048;
    Russian = 1049;
    Croatian = 1050;
    Slovak = 1051;
    Albanian = 1052;
    SwedishSweden = 1053;
    Thai = 1054;
    Turkish = 1055;
    Urdu = 1056;
    Indonesian = 1057;
    Ukrainian = 1058;
    Belarusian = 1059;
    Slovenian = 1060;
    Estonian = 1061;
    Latvian = 1062;
    Lithuanian = 1063;
    Tajik = 1064;
    Persian = 1065;
    Vietnamese = 1066;
    Armenian = 1067;
    AzerbaijaniLatin = 1068;
    Basque = 1069;
    Sorbian = 1070;
    Macedonian = 1071;
    Sutu = 1072;
    Tsonga = 1073;
    Tswana = 1074;
    Venda = 1075;
    IsiXhosa = 1076;
    IsiZulu = 1077;
    Afrikaans = 1078;
    Georgian = 1079;
    Faeroese = 1080;
    Hindi = 1081;
    Maltese = 1082;
    NorthernSamiNorway = 1083;
    Yiddish = 1085;
    MalayMalaysia = 1086;
    Kazakh = 1087;
    Kyrgyz = 1088;
    Kiswahili = 1089;
    Turkmen = 1090;
    UzbekLatin = 1091;
    Tatar = 1092;
    BanglaIndia = 1093;
    PunjabiIndia = 1094;
    Gujarati = 1095;
    Oriya = 1096;
    Tamil = 1097;
    Telugu = 1098;
    Kannada = 1099;
    Malayalam = 1100;
    Assamese = 1101;
    Marathi = 1102;
    Sanskrit = 1103;
    MongolianCyrillic = 1104;
    TibetanChina = 1105;
    Welsh = 1106;
    Khmer = 1107;
    Lao = 1108;
    Burmese = 1109;
    Galician = 1110;
    Konkani = 1111;
    Manipuri = 1112;
    SindhiDevanagaric = 1113;
    Syriac = 1114;
    Sinhalese = 1115;
    Cherokee = 1116;
    Amharic = 1118;
    Tamazight = 1119;
    KashmiriArabic = 1120;
    Nepali = 1121;
    Frisian = 1122;
    Pashto = 1123;
    Filipino = 1124;
    Divehi = 1125;
    Edo = 1126;
    FulahNigeria = 1127;
    Hausa = 1128;
    Yoruba = 1130;
    QuechuaBolivia = 1131;
    Bashkir = 1133;
    Luxembougish = 1134;
    Greenlandic = 1135;
    Igbo = 1136;
    Kanuri = 1137;
    Oromo = 1138;
    TigrignaEthiopia = 1139;
    Guarani = 1140;
    Hawaiian = 1141;
    Latin = 1142;
    Somali = 1143;
    Yi = 1144;
    Papiamentu = 1145;
    MapudungunChile = 1146;
    Mohawk = 1148;
    Breton = 1150;
    Maori = 1153;
    Corsican = 1155;
    Alsatian = 1156;
    Sakha = 1157;
    Kinyarwanda = 1159;
    ScottishGaelic = 1169;
    CentralKurdishIraq = 1170;
    ArabicIraq = 2049;
    ChinesePRC = 2052;
    GermanSwitzerland = 2055;
    EnglishUK = 2057;
    SpanishMexico = 2058;
    FrenchBelgium = 2060;
    ItalianSwitzerland = 2064;
    DutchBelgium = 2067;
    NorwegianNynorsk = 2068;
    PortuguesePortugal = 2070;
    SerbianLatinSerbiaAndMontenegro = 2074;
    SwedishFinland = 2077;
    AzerbaijaniCyrillic = 2092;
    NorthernSamiSweden = 2107;
    Irish = 2108;
    MalayBruneiDarussalam = 2110;
    UzbekCyrillic = 2115;
    BanglaBangladesh = 2117;
    PunjabiPakistan = 2118;
    MongolianMongolian = 2128;
    TibetanButan = 2129;
    Sindhi = 2137;
    TamazightLatin = 2143;
    Kashmiri = 2144;
    FulahLatinSenegal = 2151;
    QuechuaEcuador = 2155;
    TigrignaEritrea = 2163;
    ArabicEgypt = 3073;
    ChineseHongKong = 3076;
    GermanAustria = 3079;
    EnglishAustralia = 3081;
    SpanishSpainModernSort = 3082;
    FrenchCanada = 3084;
    SerbianCyrillicSerbiaAndMontenegro = 3098;
    NorthernSamiFinland = 3131;
    QuechuaPeru = 3179;
    ArabicLibya = 4097;
    ChineseSingapore = 4100;
    GermanLuxembourg = 4103;
    EnglishCanada = 4105;
    SpanishGuatemala = 4106;
    FrenchSwitzerland = 4108;
    CroatianBozniaAndHerzegovina = 4122;
    LuleSamiNorway = 4155;
    ArabicAlgeria = 5121;
    ChineseMacao = 5124;
    GermanLiechtenstein = 5127;
    EnglishNewZealand = 5129;
    SpanishCostaRica = 5130;
    FrenchLuxembourg = 5132;
    BosnianLatin = 5146;
    LuleSamiSweden = 5179;
    ArabicMorocco = 6145;
    EnglishIreland = 6153;
    SpanishPanama = 6154;
    FrenchMonaco = 6156;
    SerbianLatinBosniaAndHerzegovina = 6170;
    ArabicTunisia = 7169;
    EnglishSouthAfrica = 7177;
    SpanishDominicanRepublic = 7178;
    SerbianCyrillicBosniaAndHerzegovina = 7194;
    ArabicOman = 8193;
    EnglishJamaica = 8201;
    SpanishVenezuela = 8202;
    BosnianCyrillic = 8218;
    ArabicYemen = 9217;
    EnglishCaribbean = 9225;
    SpanishColombia = 9226;
    InariSamiFinland = 9275;
    ArabicSyria = 10241;
    EnglishBelize = 10249;
    SpanishPeru = 10250;
    ArabicJordan = 11265;
    EnglishTrinidadAndTobago = 11273;
    SpanishArgentina = 11274;
    ArabicLebanon = 12289;
    EnglishZimbabwe = 12297;
    SpanishEcuador = 12298;
    ArabicKuwait = 13313;
    EnglishPhilippines = 13321;
    SpanishChile = 13322;
    ArabicUAE = 14337;
    EnglishIndonesia = 14345;
    SpanishUruguay = 14346;
    ArabicBahrain = 15361;
    EnglishHongKong = 15369;
    SpanishParaguay = 15370;
    ArabicQatar = 16385;
    EnglishIndia = 16393;
    SpanishBolivia = 16394;
    EnglishMalaysia = 17417;
    SpanishElSalvador = 17418;
    EnglishSingapore = 18441;
    SpanishHonduras = 18442;
    SpanishNicaragua = 19466;
    SpanishPuertoRico = 20490;
    InuktitutSyllabics = 30813;
    LowerSorbian = 31790;
    InuktitutLatin = 31837;
    Kiche = 31878;
  end;


  //-------------namespace: Aspose.Words.Loading----------------
  ///<summary>
  ///  Type of document nodes that represent &lt;input&gt; and &lt;select&gt; elements imported from HTML.
  ///</summary>
  [DNTypeName('Aspose.Words.Loading.HtmlControlType')]
  DNHtmlControlType = type Integer;
  DNHtmlControlTypeHelper = record helper for DNHtmlControlType
  public const
    FormField = 0;
    StructuredDocumentTag = 1;
  end;


  //-------------namespace: Aspose.Words.Loading----------------
  ///<summary>
  ///  Specifies the mode of resource loading.
  ///</summary>
  [DNTypeName('Aspose.Words.Loading.ResourceLoadingAction')]
  DNResourceLoadingAction = type Integer;
  DNResourceLoadingActionHelper = record helper for DNResourceLoadingAction
  public const
    ///<summary>
    ///  Aspose.Words will load this resource as usual.
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Aspose.Words will skip loading of this resource.
    ///  Only link without data will be stored for an image, CSS style sheet will be ignored for HTML format.
    ///</summary>
    Skip = 1;
    ///<summary>
    ///  Aspose.Words will use byte array provided by user in <see cref="M:Aspose.Words.Loading.ResourceLoadingArgs.SetData(System.Byte[])" />
    ///  as resource data.
    ///</summary>
    UserProvided = 2;
  end;


  //-------------namespace: Aspose.Words.Loading----------------
  ///<summary>
  ///  Type of loaded resource.
  ///</summary>
  [DNTypeName('Aspose.Words.Loading.ResourceType')]
  DNResourceType = type Integer;
  DNResourceTypeHelper = record helper for DNResourceType
  public const
    ///<summary>
    ///  Image.
    ///</summary>
    Image = 0;
    ///<summary>
    ///  Css style sheet.
    ///</summary>
    CssStyleSheet = 1;
    ///<summary>
    ///  Document.
    ///</summary>
    Document = 2;
  end;


  //-------------namespace: Aspose.Words.Loading----------------
  ///<summary>
  ///  Specifies available options for leading space handling during import from <see cref="F:Aspose.Words.LoadFormat.Text" />
  ///  file.
  ///</summary>
  [DNTypeName('Aspose.Words.Loading.TxtLeadingSpacesOptions')]
  DNTxtLeadingSpacesOptions = type Integer;
  DNTxtLeadingSpacesOptionsHelper = record helper for DNTxtLeadingSpacesOptions
  public const
    ConvertToIndent = 0;
    Trim = 1;
    Preserve = 2;
  end;


  //-------------namespace: Aspose.Words.Loading----------------
  ///<summary>
  ///  Specifies available options for trailing spaces handling during import from <see cref="F:Aspose.Words.LoadFormat.Text" />
  ///  file.
  ///</summary>
  [DNTypeName('Aspose.Words.Loading.TxtTrailingSpacesOptions')]
  DNTxtTrailingSpacesOptions = type Integer;
  DNTxtTrailingSpacesOptionsHelper = record helper for DNTxtTrailingSpacesOptions
  public const
    Trim = 0;
    Preserve = 1;
  end;


  //-------------namespace: Aspose.Words.MailMerging----------------
  ///<summary>
  ///  Specifies options that determine what items are removed during mail merge.
  ///</summary>
  [DNTypeName('Aspose.Words.MailMerging.MailMergeCleanupOptions')]
  DNMailMergeCleanupOptions = type Integer;
  DNMailMergeCleanupOptionsHelper = record helper for DNMailMergeCleanupOptions
  public const
    ///<summary>
    ///  Specifies a default value.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Specifies whether paragraphs that contained mail merge fields with no data should be removed from the document.
    ///  When this option is set, paragraphs which contain region start and end merge fields which are otherwise empty
    ///  are also removed.
    ///</summary>
    RemoveEmptyParagraphs = 1;
    ///<summary>
    ///  Specifies whether unused mail merge regions should be removed from the document.
    ///</summary>
    ///<remarks>
    ///  This option applies only to mail merge with regions.
    ///</remarks>
    RemoveUnusedRegions = 2;
    ///<summary>
    ///  Specifies whether unused merge fields should be removed from the document.
    ///</summary>
    RemoveUnusedFields = 4;
    ///<summary>
    ///  Specifies whether fields that contain merge fields (for example, IFs) should be removed from the document
    ///  if the nested merge fields are removed.
    ///</summary>
    RemoveContainingFields = 8;
    ///<summary>
    ///  Specifies whether static fields should be removed from the document. Static fields are fields, which
    ///  results remain the same upon any document change. Fields, which do not store their results in a document
    ///  and are calculated on the fly (like <see cref="F:Aspose.Words.Fields.FieldType.FieldListNum" />
    ///  ,
    ///<see cref="F:Aspose.Words.Fields.FieldType.FieldSymbol" />
    ///  , etc.) are not considered to be static.
    ///</summary>
    ///<remarks>
    ///  Here is the full list of field types, which are not considered to be static:
    ///<list type="bullet"><item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldAdvance" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldAutoNum" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldAutoNumLegal" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldAutoNumOutline" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldBarcode" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldBidiOutline" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldDate" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldDisplayBarcode" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldMergeBarcode" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldFormCheckBox" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldFormDropDown" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldFormula" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldGoToButton" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldHyperlink" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldIncludeText" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldIndexEntry" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldLink" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldListNum" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldMacroButton" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldNoteRef" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldNumPages" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldPage" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldPageRef" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldPrint" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldPrintDate" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldPrivate" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldRefDoc" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldSection" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldSectionPages" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldSymbol" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldTime" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldTOAEntry" />
    ///</description>
    ///</item>
    ///<item><description><see cref="F:Aspose.Words.Fields.FieldType.FieldTOCEntry" />
    ///</description>
    ///</item>
    ///</list>
    ///</remarks>
    RemoveStaticFields = 16;
    ///<summary>
    ///  Specifies whether empty rows that contain mail merge regions should be removed from the document.
    ///</summary>
    ///<remarks>
    ///  This option applies only to mail merge with regions.
    ///</remarks>
    RemoveEmptyTableRows = 32;
  end;


  //-------------namespace: Aspose.Words.Markup----------------
  ///<summary>
  ///  Specifies the level in the document tree where a particular <see cref="T:Aspose.Words.Markup.StructuredDocumentTag" />
  ///  can occur.
  ///</summary>
  [DNTypeName('Aspose.Words.Markup.MarkupLevel')]
  DNMarkupLevel = type Integer;
  DNMarkupLevelHelper = record helper for DNMarkupLevel
  public const
    ///<summary>
    ///  Specifies the unknown or invalid value.
    ///</summary>
    Unknown = 0;
    ///<summary>
    ///  The element occurs at the inline level (e.g. among as runs of text).
    ///</summary>
    Inline_ = 1;
    ///<summary>
    ///  The element occurs at the block level (e.g. among tables and paragraphs).
    ///</summary>
    Block = 2;
    ///<summary>
    ///  The element occurs among rows in a table.
    ///</summary>
    Row = 3;
    ///<summary>
    ///  The element occurs among cells in a row.
    ///</summary>
    Cell = 4;
  end;


  //-------------namespace: Aspose.Words.Markup----------------
  ///<summary>
  ///  Specifies the possible types of calendars which can be used to specify <see cref="P:Aspose.Words.Markup.StructuredDocumentTag.CalendarType" />
  ///  in an Office Open XML document.
  ///</summary>
  [DNTypeName('Aspose.Words.Markup.SdtCalendarType')]
  DNSdtCalendarType = type Integer;
  DNSdtCalendarTypeHelper = record helper for DNSdtCalendarType
  public const
    ///<summary>
    ///  Used as default value in OOXML. Equals <see cref="F:Aspose.Words.Markup.SdtCalendarType.Gregorian" />
    ///  .
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Specifies that the Gregorian calendar, as defined in ISO  8601, shall be used.
    ///  This calendar should be localized into the appropriate language.
    ///</summary>
    Gregorian = 0;
    ///<summary>
    ///  Specifies that the Gregorian calendar, as defined in ISO 8601, shall be used.
    ///  The values for this calendar should be presented in Arabic.
    ///</summary>
    GregorianArabic = 1;
    ///<summary>
    ///  Specifies that the Gregorian calendar, as defined in ISO 8601, shall be used.
    ///  The values for this calendar should be presented in Middle East French.
    ///</summary>
    GregorianMeFrench = 2;
    ///<summary>
    ///  Specifies that the Gregorian calendar, as defined in ISO 8601, shall be used.
    ///  The values for this calendar should be presented in English.
    ///</summary>
    GregorianUs = 3;
    ///<summary>
    ///  Specifies that the Gregorian calendar, as defined in ISO 8601, shall be used.
    ///  The values for this calendar should be the representation of the English strings in the corresponding Arabic characters
    ///  (the Arabic transliteration of the English for the Gregorian calendar).
    ///</summary>
    GregorianXlitEnglish = 4;
    ///<summary>
    ///  Specifies that the Gregorian calendar, as defined in ISO 8601, shall be used.
    ///  The values for this calendar should be the representation of the French strings in the corresponding Arabic characters
    ///  (the Arabic transliteration of the French for the Gregorian calendar).
    ///</summary>
    GregorianXlitFrench = 5;
    ///<summary>
    ///  Specifies that the Hebrew lunar calendar, as described by the Gauss formula for Passover [CITATION]
    ///  and The Complete Restatement of Oral Law (Mishneh Torah),shall be used.
    ///</summary>
    Hebrew = 6;
    ///<summary>
    ///  Specifies that the Hijri lunar calendar, as described by the Kingdom of Saudi Arabia,
    ///  Ministry of Islamic Affairs, Endowments, Daâ€˜wah and Guidance, shall be used.
    ///</summary>
    Hijri = 7;
    ///<summary>
    ///  Specifies that the Japanese Emperor Era calendar, as described by
    ///  Japanese Industrial Standard JIS X 0301, shall be used.
    ///</summary>
    Japan = 8;
    ///<summary>
    ///  Specifies that the Korean Tangun Era calendar,
    ///  as described by Korean Law Enactment No. 4, shall be used.
    ///</summary>
    Korea = 9;
    ///<summary>
    ///  Specifies that no calendar should be used.
    ///</summary>
    ///<remarks>
    ///  Usually in AW, None is the first and default value for enums, but not in this case.
    ///  None is not default for OOXML, instead <see cref="F:Aspose.Words.Markup.SdtCalendarType.Gregorian" />
    ///  is default and is first member of this enum.
    ///</remarks>
    None = 10;
    ///<summary>
    ///  Specifies that the Saka Era calendar, as described by the Calendar Reform Committee of India,
    ///  as part of the Indian Ephemeris and Nautical Almanac, shall be used.
    ///</summary>
    Saka = 11;
    ///<summary>
    ///  Specifies that the Taiwanese calendar, as defined by the Chinese National Standard CNS 7648, shall be used.
    ///</summary>
    Taiwan = 12;
    ///<summary>
    ///  Specifies that the Thai calendar, as defined by the Royal Decree of H.M. King Vajiravudh (Rama VI) in
    ///  Royal Gazette B. E. 2456 (1913 A.D.) and by the decree of Prime Minister Phibunsongkhram (1941 A.D.) to
    ///  start the year on the Gregorian January 1 and to map year zero to Gregorian year 543 B.C., shall be used.
    ///</summary>
    Thai = 13;
  end;


  //-------------namespace: Aspose.Words.Markup----------------
  ///<summary>
  ///  Specifies how the date for a date SDT is stored/retrieved when the SDT is bound to an XML node in the document's data store.
  ///</summary>
  [DNTypeName('Aspose.Words.Markup.SdtDateStorageFormat')]
  DNSdtDateStorageFormat = type Integer;
  DNSdtDateStorageFormatHelper = record helper for DNSdtDateStorageFormat
  public const
    ///<summary>
    ///  The date value for a date SDT is stored as a date in the standard XML Schema Date format.
    ///</summary>
    Date = 0;
    ///<summary>
    ///  The date value for a date SDT is stored as a date in the standard XML Schema DateTime format.
    ///</summary>
    DateTime = 1;
    ///<summary>
    ///  Defaults to <see cref="F:Aspose.Words.Markup.SdtDateStorageFormat.DateTime" />
    ///</summary>
    Default_ = 1;
    ///<summary>
    ///  The date value for a date SDT is stored as text.
    ///</summary>
    Text = 2;
  end;


  //-------------namespace: Aspose.Words.Markup----------------
  ///<summary>
  ///  Specifies the type of a structured document tag (SDT) node.
  ///</summary>
  [DNTypeName('Aspose.Words.Markup.SdtType')]
  DNSdtType = type Integer;
  DNSdtTypeHelper = record helper for DNSdtType
  public const
    ///<summary>
    ///  No type is assigned to the SDT.
    ///</summary>
    None = 0;
    ///<summary>
    ///  The SDT represents a bibliography entry.
    ///</summary>
    Bibliography = 1;
    ///<summary>
    ///  The SDT represents a citation.
    ///</summary>
    Citation = 2;
    ///<summary>
    ///  The SDT represents an equation.
    ///</summary>
    Equation = 3;
    ///<summary>
    ///  The SDT represents a drop down list when displayed in the document.
    ///</summary>
    DropDownList = 4;
    ///<summary>
    ///  The SDT represents a combo box when displayed in the document.
    ///</summary>
    ComboBox = 5;
    ///<summary>
    ///  The SDT represents a date picker when displayed in the document.
    ///</summary>
    Date = 6;
    ///<summary>
    ///  The SDT represents a building block gallery type.
    ///</summary>
    BuildingBlockGallery = 7;
    ///<summary>
    ///  The SDT represents a document part type.
    ///</summary>
    DocPartObj = 8;
    ///<summary>
    ///  The SDT represents a restricted grouping when displayed in the document.
    ///</summary>
    Group = 9;
    ///<summary>
    ///  The SDT represents a picture when displayed in the document.
    ///</summary>
    Picture = 10;
    ///<summary>
    ///  The SDT represents a rich text box when displayed in the document.
    ///</summary>
    RichText = 11;
    ///<summary>
    ///  The SDT represents a plain text box when displayed in the document.
    ///</summary>
    PlainText = 12;
    ///<summary>
    ///  The SDT represents a checkbox when displayed in the document.
    ///</summary>
    ///<remarks>
    ///  This is MS-specific feature available since Office 2010 and not supported by the ISO/IEC 29500 OOXML standard.
    ///</remarks>
    Checkbox = 13;
    ///<summary>
    ///  The SDT represents repeating section type when displayed in the document.
    ///</summary>
    ///<remarks>
    ///  This is MS-specific feature available since Office 2013 and not supported by the ISO/IEC 29500 OOXML standard.
    ///</remarks>
    RepeatingSection = 14;
    ///<summary>
    ///  The SDT represents repeating section item.
    ///</summary>
    ///<remarks>
    ///  This is MS-specific feature available since Office 2013 and not supported by the ISO/IEC 29500 OOXML standard.
    ///</remarks>
    RepeatingSectionItem = 15;
    ///<summary>
    ///  The SDT represents an entity picker that allows the user to select an instance of an external content type.
    ///</summary>
    ///<remarks>
    ///  This is MS-specific feature available since Office 2010 and not supported by the ISO/IEC 29500 OOXML standard.
    ///</remarks>
    ///<dev>
    ///  Â§2.6.1.15 entityPicker [MS-DOCX].
    ///  Some additional information about entity pickers can be taken from the chapter USING EXTERNAL DATA IN WORD
    ///  of Scot Hillier, Brad Stevenson. Professional Business Connectivity Services in SharePoint 2010.
    ///</dev>
    EntityPicker = 16;
  end;


  //-------------namespace: Aspose.Words.Math----------------
  ///<summary>
  ///  Specifies type of an Office Math object.
  ///</summary>
  [DNTypeName('Aspose.Words.Math.MathObjectType')]
  DNMathObjectType = type Integer;
  DNMathObjectTypeHelper = record helper for DNMathObjectType
  public const
    ///<summary>
    ///  Instance of mathematical text.
    ///</summary>
    OMath = 0;
    ///<summary>
    ///  Math paragraph, or display math zone, that contains one or more <see cref="F:Aspose.Words.Math.MathObjectType.OMath" />
    ///  elements that are in display mode.
    ///</summary>
    OMathPara = 1;
    ///<summary>
    ///  Accent function, consisting of a base and a combining diacritical mark.
    ///</summary>
    Accent = 2;
    ///<summary>
    ///  Bar function, consisting of a base argument and an overbar or underbar.
    ///</summary>
    Bar = 3;
    ///<summary>
    ///  Border Box object, consisting of a border drawn around an instance of mathematical text (such as a formula or equation)
    ///</summary>
    BorderBox = 4;
    ///<summary>
    ///  Box object, which is used to group components of an equation or other instance of mathematical text.
    ///</summary>
    Box = 5;
    ///<summary>
    ///  Delimiter object, consisting of opening and closing delimiters (such as parentheses,
    ///  braces, brackets, and vertical bars), and an element contained inside.
    ///</summary>
    Delimiter = 6;
    ///<summary>
    ///  Degree in the mathematical radical.
    ///</summary>
    Degree = 7;
    ///<summary>
    ///  Argument object. Encloses Office Math entities when they are used as arguments to other Office Math entities.
    ///</summary>
    Argument = 8;
    ///<summary>
    ///  Array object, consisting of one or more equations, expressions, or other mathematical text runs
    ///  that can be vertically justified as a unit with respect to surrounding text on the line.
    ///</summary>
    Array_ = 9;
    ///<summary>
    ///  Fraction object, consisting of a numerator and denominator separated by a fraction bar.
    ///</summary>
    Fraction = 10;
    ///<summary>
    ///  Denominator of a fraction object.
    ///</summary>
    Denominator = 11;
    ///<summary>
    ///  Numerator of the Fraction object.
    ///</summary>
    Numerator = 12;
    ///<summary>
    ///  Function-Apply object, which consists of a function name and an argument element acted upon.
    ///</summary>
    Function_ = 13;
    ///<summary>
    ///  Name of the function. For example, function names are sin and cos.
    ///</summary>
    FunctionName = 14;
    ///<summary>
    ///  Group-Character object, consisting of a character drawn above or below text, often
    ///  with the purpose of visually grouping items
    ///</summary>
    GroupCharacter = 15;
    ///<summary>
    ///  Lower limit of the <see cref="F:Aspose.Words.Math.MathObjectType.LowerLimit" />
    ///  object and
    ///  the upper limit of the <see cref="F:Aspose.Words.Math.MathObjectType.UpperLimit" />
    ///  function.
    ///</summary>
    Limit = 16;
    ///<summary>
    ///  Lower-Limit object, consisting of text on the baseline and reduced-size text immediately below it.
    ///</summary>
    LowerLimit = 17;
    ///<summary>
    ///  Upper-Limit object, consisting of text on the baseline and reduced-size text immediately above it.
    ///</summary>
    UpperLimit = 18;
    ///<summary>
    ///  Matrix object, consisting of one or more elements laid out in one or more rows and one or more columns.
    ///</summary>
    Matrix = 19;
    ///<summary>
    ///  Single row of the matrix.
    ///</summary>
    MatrixRow = 20;
    ///<summary>
    ///  N-ary object, consisting of an n-ary object, a base (or operand), and optional upper and lower limits.
    ///</summary>
    NAry = 21;
    ///<summary>
    ///  Phantom object.
    ///</summary>
    Phantom = 22;
    ///<summary>
    ///  Radical object, consisting of a radical, a base element, and an optional degree .
    ///</summary>
    Radical = 23;
    ///<summary>
    ///  Subscript of the object that can have subscript part.
    ///</summary>
    SubscriptPart = 24;
    ///<summary>
    ///  Superscript of the superscript object.
    ///</summary>
    SuperscriptPart = 25;
    ///<summary>
    ///  Pre-Sub-Superscript object, which consists of a base element and a subscript and superscript placed to the left of the base.
    ///</summary>
    PreSubSuperscript = 26;
    ///<summary>
    ///  Subscript object, which consists of a base element and a reduced-size script placed below and to the right.
    ///</summary>
    Subscript = 27;
    ///<summary>
    ///  Sub-superscript object, which consists of a base element, a reduced-size script placed below and to the right, and a reduced-size script placed above and to the right.
    ///</summary>
    SubSuperscript = 28;
    ///<summary>
    ///  Superscript object, which consists of a base element and a reduced-size script placed above and to the right.
    ///</summary>
    Supercript = 29;
  end;


  //-------------namespace: Aspose.Words.Math----------------
  ///<summary>
  ///  Specifies the display format type of the equation.
  ///</summary>
  [DNTypeName('Aspose.Words.Math.OfficeMathDisplayType')]
  DNOfficeMathDisplayType = type Integer;
  DNOfficeMathDisplayTypeHelper = record helper for DNOfficeMathDisplayType
  public const
    ///<summary>
    ///  The Office Math is displayed on its own line.
    ///</summary>
    Display = 0;
    ///<summary>
    ///  The Office Math is displayed inline with the text.
    ///</summary>
    Inline_ = 1;
  end;


  //-------------namespace: Aspose.Words.Math----------------
  ///<summary>
  ///  Specifies the justification of the equation.
  ///</summary>
  [DNTypeName('Aspose.Words.Math.OfficeMathJustification')]
  DNOfficeMathJustification = type Integer;
  DNOfficeMathJustificationHelper = record helper for DNOfficeMathJustification
  public const
    ///<summary>
    ///  Justifies instances of mathematical text to the left with respect to each other, and centers the group of mathematical
    ///  text (the Math Paragraph) with respect to the page.
    ///</summary>
    CenterGroup = 1;
    ///<summary>
    ///  Default value <see cref="F:Aspose.Words.Math.OfficeMathJustification.CenterGroup" />
    ///  .
    ///</summary>
    Default_ = 1;
    ///<summary>
    ///  Centers each instance of mathematical text individually with respect to margins.
    ///</summary>
    Center = 2;
    ///<summary>
    ///  Left justification of Math Paragraph.
    ///</summary>
    Left = 3;
    ///<summary>
    ///  Right Justification of Math Paragraph.
    ///</summary>
    Right = 4;
    ///<summary>
    ///  Inline position of Math.
    ///</summary>
    Inline_ = 7;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Specifies the unit of measurement.
  ///</summary>
  [DNTypeName('Aspose.Words.MeasurementUnits')]
  DNMeasurementUnits = type Integer;
  DNMeasurementUnitsHelper = record helper for DNMeasurementUnits
  public const
    ///<summary>
    ///  Inches.
    ///</summary>
    Inches = 0;
    ///<summary>
    ///  Centimeters.
    ///</summary>
    Centimeters = 1;
    ///<summary>
    ///  Millimeters.
    ///</summary>
    Millimeters = 2;
    ///<summary>
    ///  Points.
    ///</summary>
    Points = 3;
    ///<summary>
    ///  Picas (commonly used in traditional typewriter font spacing).
    ///</summary>
    Picas = 4;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Specifies the type of node change.
  ///</summary>
  ///<seealso cref="T:Aspose.Words.NodeChangingArgs" />
  ///<seealso cref="P:Aspose.Words.NodeChangingArgs.Action" />
  [DNTypeName('Aspose.Words.NodeChangingAction')]
  DNNodeChangingAction = type Integer;
  DNNodeChangingActionHelper = record helper for DNNodeChangingAction
  public const
    ///<summary>
    ///  A node is being inserted in the tree.
    ///</summary>
    Insert = 0;
    ///<summary>
    ///  A node is being removed from the tree.
    ///</summary>
    Remove = 1;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Specifies the type of a Word document node.
  ///</summary>
  ///<dev><p>Enumerated node types are provided as a common denominator to ensure all functionality
  ///  is accessible to all clients (including COM applications that might not have full access
  ///  to the runtime type information).</p>
  ///</dev>
  [DNTypeName('Aspose.Words.NodeType')]
  DNNodeType = type Integer;
  DNNodeTypeHelper = record helper for DNNodeType
  public const
    ///<summary>
    ///  Indicates all node types. Allows to select all children.
    ///</summary>
    Any = 0;
    ///<summary><p>A <see cref="T:Aspose.Words.Document" />
    ///  object that, as the root of the document tree,
    ///  provides access to the entire Word document.</p>
    ///  <p>A <see cref="T:Aspose.Words.Document" />
    ///  node can have <see cref="T:Aspose.Words.Section" />
    ///  nodes.</p>
    ///</summary>
    Document = 1;
    ///<summary><p>A <see cref="T:Aspose.Words.Section" />
    ///  object that corresponds to one section in a Word document.</p>
    ///  <p>A <see cref="T:Aspose.Words.Section" />
    ///  node can have <b>Body</b>
    ///  and <b>HeaderFooter</b>
    ///  nodes.</p>
    ///</summary>
    Section = 2;
    ///<summary><p>A <see cref="T:Aspose.Words.Body" />
    ///  object that contains the main text of a section (main text story).</p>
    ///  <p>A <see cref="T:Aspose.Words.Body" />
    ///  node can have <see cref="T:Aspose.Words.Paragraph" />
    ///  and <see cref="T:Aspose.Words.Tables.Table" />
    ///  nodes.</p>
    ///</summary>
    Body = 3;
    ///<summary><p>A <see cref="T:Aspose.Words.HeaderFooter" />
    ///  object that contains text of a particular header or footer inside a section.</p>
    ///  <p>A <see cref="T:Aspose.Words.HeaderFooter" />
    ///  node can have <see cref="T:Aspose.Words.Paragraph" />
    ///  and <see cref="T:Aspose.Words.Tables.Table" />
    ///  nodes.</p>
    ///</summary>
    HeaderFooter = 4;
    ///<summary><p>A <see cref="T:Aspose.Words.Tables.Table" />
    ///  object that represents a table in a Word document.</p>
    ///  <p>A <see cref="T:Aspose.Words.Tables.Table" />
    ///  node can have <see cref="T:Aspose.Words.Tables.Row" />
    ///  nodes.</p>
    ///</summary>
    Table = 5;
    ///<summary><p>A row of a table.</p>
    ///  <p>A <see cref="T:Aspose.Words.Tables.Row" />
    ///  node can have <see cref="T:Aspose.Words.Tables.Cell" />
    ///  nodes.</p>
    ///</summary>
    Row = 6;
    ///<summary><p>A cell of a table row.</p>
    ///  <p>A <see cref="T:Aspose.Words.Tables.Cell" />
    ///  node can have <see cref="T:Aspose.Words.Paragraph" />
    ///  and <see cref="T:Aspose.Words.Tables.Table" />
    ///  nodes.</p>
    ///</summary>
    Cell = 7;
    ///<summary><p>A paragraph of text.</p>
    ///  <p>A <see cref="T:Aspose.Words.Paragraph" />
    ///  node is a container for inline level elements
    ///<see cref="T:Aspose.Words.Run" />
    ///  ,
    ///<see cref="T:Aspose.Words.Fields.FieldStart" />
    ///  ,
    ///<see cref="T:Aspose.Words.Fields.FieldSeparator" />
    ///  ,
    ///<see cref="T:Aspose.Words.Fields.FieldEnd" />
    ///  ,
    ///<see cref="T:Aspose.Words.Fields.FormField" />
    ///  ,
    ///<see cref="T:Aspose.Words.Drawing.Shape" />
    ///  ,
    ///<see cref="T:Aspose.Words.Drawing.GroupShape" />
    ///  ,
    ///<see cref="T:Aspose.Words.Notes.Footnote" />
    ///  ,
    ///<see cref="T:Aspose.Words.Comment" />
    ///  ,
    ///<see cref="T:Aspose.Words.SpecialChar" />
    ///  ,
    ///  as well as <see cref="T:Aspose.Words.BookmarkStart" />
    ///  and <see cref="T:Aspose.Words.BookmarkEnd" />
    ///  .</p>
    ///</summary>
    Paragraph = 8;
    ///<summary><p>A beginning of a bookmark marker.</p>
    ///</summary>
    BookmarkStart = 9;
    ///<summary><p>An end of a bookmark marker.</p>
    ///</summary>
    BookmarkEnd = 10;
    ///<summary><p>A beginning of an editable range.</p>
    ///</summary>
    EditableRangeStart = 11;
    ///<summary><p>An end of an editable range.</p>
    ///</summary>
    EditableRangeEnd = 12;
    ///<summary><p>A beginning of an MoveFrom range.</p>
    ///</summary>
    MoveFromRangeStart = 13;
    ///<summary><p>An end of an MoveFrom range.</p>
    ///</summary>
    MoveFromRangeEnd = 14;
    ///<summary><p>A beginning of an MoveTo range.</p>
    ///</summary>
    MoveToRangeStart = 15;
    ///<summary><p>An end of an MoveTo range.</p>
    ///</summary>
    MoveToRangeEnd = 16;
    ///<summary><p>A group of shapes, images, OLE objects or other group shapes.</p>
    ///  <p>A <see cref="T:Aspose.Words.Drawing.GroupShape" />
    ///  node can contain other
    ///<see cref="T:Aspose.Words.Drawing.Shape" />
    ///  and <see cref="T:Aspose.Words.Drawing.GroupShape" />
    ///  nodes.</p>
    ///</summary>
    GroupShape = 17;
    ///<summary><p>A drawing object, such as an OfficeArt shape, image or an OLE object.</p>
    ///  <p>A <see cref="T:Aspose.Words.Drawing.Shape" />
    ///  node can contain <see cref="T:Aspose.Words.Paragraph" />
    ///  and <see cref="T:Aspose.Words.Tables.Table" />
    ///  nodes.</p>
    ///</summary>
    Shape = 18;
    ///<summary><p>A comment in a Word document.</p>
    ///  <p>A <see cref="T:Aspose.Words.Comment" />
    ///  node can have <see cref="T:Aspose.Words.Paragraph" />
    ///  and <see cref="T:Aspose.Words.Tables.Table" />
    ///  nodes.</p>
    ///</summary>
    Comment = 19;
    ///<summary><p>A footnote or endnote in a Word document.</p>
    ///  <p>A <see cref="T:Aspose.Words.Notes.Footnote" />
    ///  node can have <see cref="T:Aspose.Words.Paragraph" />
    ///  and <see cref="T:Aspose.Words.Tables.Table" />
    ///  nodes.</p>
    ///</summary>
    Footnote = 20;
    ///<summary><p>A run of text.</p>
    ///</summary>
    Run = 21;
    ///<summary><p>A special character that designates the start of a Word field.</p>
    ///</summary>
    FieldStart = 22;
    ///<summary><p>A special character that separates the field code from the field result.</p>
    ///</summary>
    FieldSeparator = 23;
    ///<summary><p>A special character that designates the end of a Word field.</p>
    ///</summary>
    FieldEnd = 24;
    ///<summary><p>A form field.</p>
    ///</summary>
    FormField = 25;
    ///<summary><p>A special character that is not one of the more specific special character types.</p>
    ///</summary>
    SpecialChar = 26;
    ///<summary><para>A smart tag around one or more inline structures (runs, images, fields,etc.) within a paragraph</para></summary>
    SmartTag = 27;
    ///<summary><para>Allows to define customer-specific information and its means of presentation.</para></summary>
    StructuredDocumentTag = 28;
    ///<summary><para>A start of <b>ranged</b>
    ///  structured document tag which accepts multi-sections content.</para></summary>
    StructuredDocumentTagRangeStart = 29;
    ///<summary><para>A end of <b>ranged</b>
    ///  structured document tag which accepts multi-sections content.</para></summary>
    StructuredDocumentTagRangeEnd = 30;
    ///<summary><para>A glossary document within the main document.</para></summary>
    GlossaryDocument = 31;
    ///<summary><para>A building block within a glossary document (e.g. glossary document entry).</para></summary>
    BuildingBlock = 32;
    ///<summary>
    ///  A marker node that represents the start of a commented range.
    ///</summary>
    CommentRangeStart = 33;
    ///<summary>
    ///  A marker node that represents the end of a commented range.
    ///</summary>
    CommentRangeEnd = 34;
    ///<summary><para> An Office Math object. Can be equation, function, matrix or one of other mathematical objects.
    ///  Can be a collection of mathematical object and also can contain some non-mathematical objects such as runs of text.</para></summary>
    OfficeMath = 35;
    ///<summary>
    ///  A subdocument node which is a link to another document.
    ///</summary>
    SubDocument = 36;
    ///<summary>
    ///  Reserved for internal use by Aspose.Words.
    ///</summary>
    System = 37;
    ///<summary>
    ///  Reserved for internal use by Aspose.Words.
    ///</summary>
    Null = 38;
  end;


  //-------------namespace: Aspose.Words.Notes----------------
  ///<summary>
  ///  Defines the endnote position.
  ///</summary>
  ///<seealso cref="T:Aspose.Words.Notes.EndnoteOptions" />
  [DNTypeName('Aspose.Words.Notes.EndnotePosition')]
  DNEndnotePosition = type Integer;
  DNEndnotePositionHelper = record helper for DNEndnotePosition
  public const
    ///<summary>
    ///  Endnotes are output at the end of the section.
    ///</summary>
    EndOfSection = 0;
    ///<summary>
    ///  Endnotes are output at the end of the document.
    ///</summary>
    EndOfDocument = 3;
  end;


  //-------------namespace: Aspose.Words.Notes----------------
  ///<summary>
  ///  Determines when automatic footnote or endnote numbering restarts.
  ///</summary>
  ///<seealso cref="T:Aspose.Words.Notes.FootnoteOptions" />
  ///<seealso cref="T:Aspose.Words.Notes.EndnoteOptions" />
  [DNTypeName('Aspose.Words.Notes.FootnoteNumberingRule')]
  DNFootnoteNumberingRule = type Integer;
  DNFootnoteNumberingRuleHelper = record helper for DNFootnoteNumberingRule
  public const
    ///<summary>
    ///  Equals <see cref="F:Aspose.Words.Notes.FootnoteNumberingRule.Continuous" />
    ///  .
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Numbering continuous throughout the document.
    ///</summary>
    Continuous = 0;
    ///<summary>
    ///  Numbering restarts at each section.
    ///</summary>
    RestartSection = 1;
    ///<summary>
    ///  Numbering restarts at each page. Valid for footnotes only.
    ///</summary>
    RestartPage = 2;
  end;


  //-------------namespace: Aspose.Words.Notes----------------
  ///<summary>
  ///  Defines the footnote position.
  ///</summary>
  ///<seealso cref="T:Aspose.Words.Notes.FootnoteOptions" />
  [DNTypeName('Aspose.Words.Notes.FootnotePosition')]
  DNFootnotePosition = type Integer;
  DNFootnotePositionHelper = record helper for DNFootnotePosition
  public const
    ///<summary>
    ///  Footnotes are output at the bottom of each page.
    ///</summary>
    BottomOfPage = 1;
    ///<summary>
    ///  Footnotes are output beneath text on each page.
    ///</summary>
    BeneathText = 2;
  end;


  //-------------namespace: Aspose.Words.Notes----------------
  ///<summary>
  ///  Specifies whether this is a footnote or an endnote.
  ///</summary>
  ///<remarks><para>Both footnotes and endnotes are represented by objects by the <see cref="F:Aspose.Words.Notes.FootnoteType.Footnote" />
  ///  class. Use <see cref="P:Aspose.Words.Notes.Footnote.FootnoteType" />
  ///  to distinguish between footnotes
  ///  and endnotes.</para><seealso cref="F:Aspose.Words.Notes.FootnoteType.Footnote" />
  ///</remarks>
  [DNTypeName('Aspose.Words.Notes.FootnoteType')]
  DNFootnoteType = type Integer;
  DNFootnoteTypeHelper = record helper for DNFootnoteType
  public const
    ///<summary>
    ///  The object is a footnote.
    ///</summary>
    Footnote = 0;
    ///<summary>
    ///  The object is an endnote.
    ///</summary>
    Endnote = 1;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Specifies the number style for a list, footnotes and endnotes, page numbers.
  ///</summary>
  ///<dev>
  ///  Should keep members of this enum in sync with <see cref="T:Aspose.Numbering.NumberStyleCore" />
  ///  .
  ///</dev>
  [DNTypeName('Aspose.Words.NumberStyle')]
  DNNumberStyle = type Integer;
  DNNumberStyleHelper = record helper for DNNumberStyle
  public const
    ///<summary>
    ///  Arabic numbering (1, 2, 3, ...)
    ///</summary>
    Arabic = 0;
    ///<summary>
    ///  Upper case Roman (I, II, III, ...)
    ///</summary>
    UppercaseRoman = 1;
    ///<summary>
    ///  Lower case Roman (i, ii, iii, ...)
    ///</summary>
    LowercaseRoman = 2;
    ///<summary>
    ///  Upper case Letter (A, B, C, ...)
    ///</summary>
    UppercaseLetter = 3;
    ///<summary>
    ///  Lower case letter (a, b, c, ...)
    ///</summary>
    LowercaseLetter = 4;
    ///<summary>
    ///  Ordinal (1st, 2nd, 3rd, ...)
    ///</summary>
    Ordinal = 5;
    ///<summary>
    ///  Numbered (One, Two, Three, ...)
    ///</summary>
    Number = 6;
    ///<summary>
    ///  Ordinal (text) (First, Second, Third, ...)
    ///</summary>
    OrdinalText = 7;
    ///<summary>
    ///  Hexadecimal: 8, 9, A, B, C, D, E, F, 10, 11, 12
    ///</summary>
    Hex = 8;
    ///<summary>
    ///  Chicago Manual of Style: *, â€ , â€ 
    ///</summary>
    ChicagoManual = 9;
    ///<summary>
    ///  Ideograph-digital
    ///</summary>
    Kanji = 10;
    ///<summary>
    ///  Japanese counting
    ///</summary>
    KanjiDigit = 11;
    ///<summary>
    ///  Aiueo
    ///</summary>
    AiueoHalfWidth = 12;
    ///<summary>
    ///  Iroha
    ///</summary>
    IrohaHalfWidth = 13;
    ///<summary>
    ///  Full-width Arabic: 1, 2, 3, 4
    ///</summary>
    ArabicFullWidth = 14;
    ///<summary>
    ///  Half-width Arabic: 1, 2, 3, 4
    ///</summary>
    ArabicHalfWidth = 15;
    ///<summary>
    ///  Japanese legal
    ///</summary>
    KanjiTraditional = 16;
    ///<summary>
    ///  Japanese digital ten thousand
    ///</summary>
    KanjiTraditional2 = 17;
    ///<summary>
    ///  Enclosed circles
    ///</summary>
    NumberInCircle = 18;
    ///<summary>
    ///  Decimal full width: 1, 2, 3, 4
    ///</summary>
    DecimalFullWidth = 19;
    ///<summary>
    ///  Aiueo full width
    ///</summary>
    Aiueo = 20;
    ///<summary>
    ///  Iroha full width
    ///</summary>
    Iroha = 21;
    ///<summary>
    ///  Leading Zero (01, 02,..., 09, 10, 11,..., 99, 100, 101,...)
    ///</summary>
    LeadingZero = 22;
    ///<summary>
    ///  Bullet (check the character code in the text)
    ///</summary>
    Bullet = 23;
    ///<summary>
    ///  Korean Ganada
    ///</summary>
    Ganada = 24;
    ///<summary>
    ///  Korea Chosung
    ///</summary>
    Chosung = 25;
    ///<summary>
    ///  Enclosed full stop
    ///</summary>
    GB1 = 26;
    ///<summary>
    ///  Enclosed parenthesis
    ///</summary>
    GB2 = 27;
    ///<summary>
    ///  Enclosed circle Chinese
    ///</summary>
    GB3 = 28;
    ///<summary>
    ///  Ideograph enclosed circle
    ///</summary>
    GB4 = 29;
    ///<summary>
    ///  Ideograph traditional
    ///</summary>
    Zodiac1 = 30;
    ///<summary>
    ///  Ideograph Zodiac
    ///</summary>
    Zodiac2 = 31;
    ///<summary>
    ///  Ideograph Zodiac traditional
    ///</summary>
    Zodiac3 = 32;
    ///<summary>
    ///  Taiwanese counting
    ///</summary>
    TradChinNum1 = 33;
    ///<summary>
    ///  Ideograph legal traditional
    ///</summary>
    TradChinNum2 = 34;
    ///<summary>
    ///  Taiwanese counting thousand
    ///</summary>
    TradChinNum3 = 35;
    ///<summary>
    ///  Taiwanese digital
    ///</summary>
    TradChinNum4 = 36;
    ///<summary>
    ///  Chinese counting
    ///</summary>
    SimpChinNum1 = 37;
    ///<summary>
    ///  Chinese legal simplified
    ///</summary>
    SimpChinNum2 = 38;
    ///<summary>
    ///  Chinese counting thousand
    ///</summary>
    SimpChinNum3 = 39;
    ///<summary>
    ///  Chinese (not implemented)
    ///</summary>
    SimpChinNum4 = 40;
    ///<summary>
    ///  Korean digital
    ///</summary>
    HanjaRead = 41;
    ///<summary>
    ///  Korean counting
    ///</summary>
    HanjaReadDigit = 42;
    ///<summary>
    ///  Korea legal
    ///</summary>
    Hangul = 43;
    ///<summary>
    ///  Korea digital2
    ///</summary>
    Hanja = 44;
    ///<summary>
    ///  Hebrew-1
    ///</summary>
    Hebrew1 = 45;
    ///<summary>
    ///  Arabic alpha
    ///</summary>
    Arabic1 = 46;
    ///<summary>
    ///  Hebrew-2
    ///</summary>
    Hebrew2 = 47;
    ///<summary>
    ///  Arabic abjad
    ///</summary>
    Arabic2 = 48;
    ///<summary>
    ///  Hindi vowels
    ///</summary>
    HindiLetter1 = 49;
    ///<summary>
    ///  Hindi consonants
    ///</summary>
    HindiLetter2 = 50;
    ///<summary>
    ///  Hindi numbers
    ///</summary>
    HindiArabic = 51;
    ///<summary>
    ///  Hindi descriptive (cardinals)
    ///</summary>
    HindiCardinalText = 52;
    ///<summary>
    ///  Thai letters
    ///</summary>
    ThaiLetter = 53;
    ///<summary>
    ///  Thai numbers
    ///</summary>
    ThaiArabic = 54;
    ///<summary>
    ///  Thai descriptive (cardinals)
    ///</summary>
    ThaiCardinalText = 55;
    ///<summary>
    ///  Vietnamese descriptive (cardinals)
    ///</summary>
    VietCardinalText = 56;
    ///<summary>
    ///  Page number format: - 1 -, - 2 -, - 3 -, - 4 -
    ///</summary>
    NumberInDash = 57;
    ///<summary>
    ///  Lowercase Russian alphabet
    ///</summary>
    LowercaseRussian = 58;
    ///<summary>
    ///  Uppercase Russian alphabet
    ///</summary>
    UppercaseRussian = 59;
    ///<summary>
    ///  No bullet or number.
    ///</summary>
    None = 255;
    ///<summary>
    ///  Custom number format. It is supported by DOCX format only.
    ///</summary>
    Custom = 65280;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Specifies page orientation.
  ///</summary>
  [DNTypeName('Aspose.Words.Orientation')]
  DNOrientation = type Integer;
  DNOrientationHelper = record helper for DNOrientation
  public const
    ///<summary>
    ///  Portrait page orientation (narrow and tall).
    ///</summary>
    Portrait = 1;
    ///<summary>
    ///  Landscape page orientation (wide and short).
    ///</summary>
    Landscape = 2;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Specifies the outline level of a paragraph in the document.
  ///</summary>
  [DNTypeName('Aspose.Words.OutlineLevel')]
  DNOutlineLevel = type Integer;
  DNOutlineLevelHelper = record helper for DNOutlineLevel
  public const
    ///<summary>
    ///  The paragraph is at the outline level 1 (topmost level).
    ///</summary>
    Level1 = 0;
    ///<summary>
    ///  The paragraph is at the outline level 2.
    ///</summary>
    Level2 = 1;
    ///<summary>
    ///  The paragraph is at the outline level 3.
    ///</summary>
    Level3 = 2;
    ///<summary>
    ///  The paragraph is at the outline level 4.
    ///</summary>
    Level4 = 3;
    ///<summary>
    ///  The paragraph is at the outline level 5.
    ///</summary>
    Level5 = 4;
    ///<summary>
    ///  The paragraph is at the outline level 6.
    ///</summary>
    Level6 = 5;
    ///<summary>
    ///  The paragraph is at the outline level 7.
    ///</summary>
    Level7 = 6;
    ///<summary>
    ///  The paragraph is at the outline level 8.
    ///</summary>
    Level8 = 7;
    ///<summary>
    ///  The paragraph is at the outline level 9.
    ///</summary>
    Level9 = 8;
    ///<summary>
    ///  The paragraph is at the level of the main text.
    ///</summary>
    BodyText = 9;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Specifies which pages the page border is printed on.
  ///</summary>
  ///<seealso cref="T:Aspose.Words.PageSetup" />
  ///<seealso cref="P:Aspose.Words.PageSetup.BorderAppliesTo" />
  [DNTypeName('Aspose.Words.PageBorderAppliesTo')]
  DNPageBorderAppliesTo = type Integer;
  DNPageBorderAppliesToHelper = record helper for DNPageBorderAppliesTo
  public const
    ///<summary>
    ///  Page border is shown on all pages of the section.
    ///</summary>
    AllPages = 0;
    ///<summary>
    ///  Page border is shown on the first page of the section only.
    ///</summary>
    FirstPage = 1;
    ///<summary>
    ///  Page border is shown on all pages except the first page of the section.
    ///</summary>
    OtherPages = 2;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Specifies the positioning of the page border relative to the page margin.
  ///</summary>
  ///<seealso cref="T:Aspose.Words.PageSetup" />
  ///<seealso cref="P:Aspose.Words.PageSetup.BorderDistanceFrom" />
  [DNTypeName('Aspose.Words.PageBorderDistanceFrom')]
  DNPageBorderDistanceFrom = type Integer;
  DNPageBorderDistanceFromHelper = record helper for DNPageBorderDistanceFrom
  public const
    ///<summary>
    ///  Border position is measured from the page margin.
    ///</summary>
    Text = 0;
    ///<summary>
    ///  Border position is measured from the page edge.
    ///</summary>
    PageEdge = 1;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Specifies vertical justification of text on each page.
  ///</summary>
  ///<seealso cref="T:Aspose.Words.PageSetup" />
  ///<seealso cref="P:Aspose.Words.PageSetup.VerticalAlignment" />
  [DNTypeName('Aspose.Words.PageVerticalAlignment')]
  DNPageVerticalAlignment = type Integer;
  DNPageVerticalAlignmentHelper = record helper for DNPageVerticalAlignment
  public const
    ///<summary>
    ///  Text is aligned at the top of the page.
    ///</summary>
    Top = 0;
    ///<summary>
    ///  Text is aligned in the middle of the page.
    ///</summary>
    Center = 1;
    ///<summary>
    ///  Text is spread to fill the page.
    ///</summary>
    Justify = 2;
    ///<summary>
    ///  Text is aligned at the bottom of the page.
    ///</summary>
    Bottom = 3;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Specifies paper size.
  ///</summary>
  [DNTypeName('Aspose.Words.PaperSize')]
  DNPaperSize = type Integer;
  DNPaperSizeHelper = record helper for DNPaperSize
  public const
    ///<summary>
    ///  297 x 420 mm.
    ///</summary>
    A3 = 0;
    ///<summary>
    ///  210 x 297 mm.
    ///</summary>
    A4 = 1;
    ///<summary>
    ///  148 x 210 mm.
    ///</summary>
    A5 = 2;
    ///<summary>
    ///  250 x 353 mm.
    ///</summary>
    B4 = 3;
    ///<summary>
    ///  176 x 250 mm.
    ///</summary>
    B5 = 4;
    ///<summary>
    ///  7.25 x 10.5 inches.
    ///</summary>
    Executive = 5;
    ///<summary>
    ///  8.5 x 13 inches.
    ///</summary>
    Folio = 6;
    ///<summary>
    ///  17 x 11 inches.
    ///</summary>
    Ledger = 7;
    ///<summary>
    ///  8.5 x 14 inches.
    ///</summary>
    Legal = 8;
    ///<summary>
    ///  8.5 x 11 inches.
    ///</summary>
    Letter = 9;
    ///<summary>
    ///  110 x 220 mm.
    ///</summary>
    EnvelopeDL = 10;
    ///<summary>
    ///  8.47 x 10.83 inches.
    ///</summary>
    Quarto = 11;
    ///<summary>
    ///  8.5 x 5.5 inches.
    ///</summary>
    Statement = 12;
    ///<summary>
    ///  11 x 17 inches.
    ///</summary>
    Tabloid = 13;
    ///<summary>
    ///  10 x 14 inches.
    ///</summary>
    Paper10x14 = 14;
    ///<summary>
    ///  11 x 17 inches.
    ///</summary>
    Paper11x17 = 15;
    ///<summary>
    ///  Custom paper size.
    ///</summary>
    Custom = 16;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Specifies text alignment in a paragraph.
  ///</summary>
  [DNTypeName('Aspose.Words.ParagraphAlignment')]
  DNParagraphAlignment = type Integer;
  DNParagraphAlignmentHelper = record helper for DNParagraphAlignment
  public const
    ///<summary>
    ///  Text is aligned to the left.
    ///</summary>
    Left = 0;
    ///<summary>
    ///  Text is centered horizontally.
    ///</summary>
    Center = 1;
    ///<summary>
    ///  Text is aligned to the right.
    ///</summary>
    Right = 2;
    ///<summary>
    ///  Text is aligned to both left and right.
    ///</summary>
    Justify = 3;
    ///<summary>
    ///  Text is evenly distributed.
    ///</summary>
    Distributed = 4;
    ///<summary>
    ///  Arabic only. Kashida length for text is extended to a medium length determined by the consumer.
    ///</summary>
    ArabicMediumKashida = 5;
    ///<summary>
    ///  Arabic only. Kashida length for text is extended to its widest possible length.
    ///</summary>
    ArabicHighKashida = 7;
    ///<summary>
    ///  Arabic only. Kashida length for text is extended to a slightly longer length.
    ///</summary>
    ArabicLowKashida = 8;
    ///<summary>
    ///  Thai only. Text is justified with an optimization for Thai.
    ///</summary>
    ThaiDistributed = 9;
  end;


  //-------------namespace: Aspose.Words.Properties----------------
  ///<summary>
  ///  Used as a value for the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.Security" />
  ///  property.
  ///  Specifies the security level of a document as a numeric value.
  ///</summary>
  [DNTypeName('Aspose.Words.Properties.DocumentSecurity')]
  DNDocumentSecurity = type Integer;
  DNDocumentSecurityHelper = record helper for DNDocumentSecurity
  public const
    ///<summary>
    ///  There are no security states specified by the property.
    ///</summary>
    None = 0;
    ///<summary>
    ///  The document is password protected. (Note has never been seen in a document so far).
    ///</summary>
    PasswordProtected = 1;
    ///<summary>
    ///  The document to be opened read-only if possible, but the setting can be overridden.
    ///</summary>
    ReadOnlyRecommended = 2;
    ///<summary>
    ///  The document to always be opened read-only.
    ///</summary>
    ReadOnlyEnforced = 4;
    ///<summary>
    ///  The document to always be opened read-only except for annotations.
    ///</summary>
    ReadOnlyExceptAnnotations = 8;
  end;


  //-------------namespace: Aspose.Words.Properties----------------
  ///<summary>
  ///  Specifies data type of a document property.
  ///</summary>
  ///<seealso cref="T:Aspose.Words.Properties.DocumentProperty" />
  ///<seealso cref="P:Aspose.Words.Properties.DocumentProperty.Type" />
  [DNTypeName('Aspose.Words.Properties.PropertyType')]
  DNPropertyType = type Integer;
  DNPropertyTypeHelper = record helper for DNPropertyType
  public const
    ///<summary>
    ///  The property is a boolean value.
    ///</summary>
    Boolean = 0;
    ///<summary>
    ///  The property is a date time value.
    ///</summary>
    DateTime = 1;
    ///<summary>
    ///  The property is a floating number.
    ///</summary>
    Double = 2;
    ///<summary>
    ///  The property is an integer number.
    ///</summary>
    Number = 3;
    ///<summary>
    ///  The property is a string value.
    ///</summary>
    String_ = 4;
    ///<summary>
    ///  The property is an array of strings.
    ///</summary>
    StringArray = 5;
    ///<summary>
    ///  The property is an array of objects.
    ///</summary>
    ObjectArray = 6;
    ///<summary>
    ///  The property is an array of bytes.
    ///</summary>
    ByteArray = 7;
    ///<summary>
    ///  The property is some other type.
    ///</summary>
    Other = 8;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Protection type for a document.
  ///</summary>
  ///<dev>Keep in the Aspose.Words namespace (not in Aspose.Words.Settings) because many clients are using
  ///  this enum and it will be a big and unnecessary breaking change.</dev>
  [DNTypeName('Aspose.Words.ProtectionType')]
  DNProtectionType = type Integer;
  DNProtectionTypeHelper = record helper for DNProtectionType
  public const
    ///<summary>
    ///  User can only add revision marks to the document.
    ///</summary>
    AllowOnlyRevisions = 0;
    ///<summary>
    ///  User can only modify comments in the document.
    ///</summary>
    AllowOnlyComments = 1;
    ///<summary>
    ///  User can only enter data in the form fields in the document.
    ///</summary>
    AllowOnlyFormFields = 2;
    ///<summary>
    ///  No changes are allowed to the document. Available since Microsoft Word 2003.
    ///</summary>
    ReadOnly = 3;
    ///<summary>
    ///  The document is not protected.
    ///</summary>
    NoProtection = -1;
  end;


  //-------------namespace: Aspose.Words.Replacing----------------
  ///<summary>
  ///  Specifies direction for replace operations.
  ///</summary>
  [DNTypeName('Aspose.Words.Replacing.FindReplaceDirection')]
  DNFindReplaceDirection = type Integer;
  DNFindReplaceDirectionHelper = record helper for DNFindReplaceDirection
  public const
    ///<summary>
    ///  Matched items are replaced from first to last.
    ///</summary>
    Forward_ = 0;
    ///<summary>
    ///  Matched items are replaced from last back to first.
    ///</summary>
    Backward = 1;
  end;


  //-------------namespace: Aspose.Words.Replacing----------------
  ///<summary>
  ///  Allows the user to specify what happens to the current match during a replace operation.
  ///</summary>
  ///<seealso cref="T:Aspose.Words.Replacing.IReplacingCallback" />
  ///<seealso cref="T:Aspose.Words.Range" />
  ///<seealso cref="M:Aspose.Words.Range.Replace(System.String,System.String,Aspose.Words.Replacing.FindReplaceOptions)" />
  [DNTypeName('Aspose.Words.Replacing.ReplaceAction')]
  DNReplaceAction = type Integer;
  DNReplaceActionHelper = record helper for DNReplaceAction
  public const
    ///<summary>
    ///  Replace the current match.
    ///</summary>
    Replace = 0;
    ///<summary>
    ///  Skip the current match.
    ///</summary>
    Skip = 1;
    ///<summary>
    ///  Terminate the replace operation.
    ///</summary>
    Stop = 2;
  end;


  //-------------namespace: Aspose.Words.Reporting----------------
  ///<summary>
  ///  Specifies a mode for parsing JSON simple values (null, boolean, number, integer, and string) while loading JSON.
  ///  Such a mode does not affect parsing of date-time values.
  ///</summary>
  [DNTypeName('Aspose.Words.Reporting.JsonSimpleValueParseMode')]
  DNJsonSimpleValueParseMode = type Integer;
  DNJsonSimpleValueParseModeHelper = record helper for DNJsonSimpleValueParseMode
  public const
    ///<summary>
    ///  Specifies the mode where types of JSON simple values are determined upon parsing of their string representations.
    ///  For example, the type of 'prop' from the JSON snippet '{ prop: "123" }' is determined as integer in this mode.
    ///</summary>
    Loose = 0;
    ///<summary>
    ///  Specifies the mode where types of JSON simple values are determined from JSON notation itself.
    ///  For example, the type of 'prop' from the JSON snippet '{ prop: "123" }' is determined as string in this mode.
    ///</summary>
    Strict_ = 1;
  end;


  //-------------namespace: Aspose.Words.Reporting----------------
  ///<summary>
  ///  Specifies options controlling behavior of <see cref="T:Aspose.Words.Reporting.ReportingEngine" />
  ///  while building a report.
  ///</summary>
  [DNTypeName('Aspose.Words.Reporting.ReportBuildOptions')]
  DNReportBuildOptions = type Integer;
  DNReportBuildOptionsHelper = record helper for DNReportBuildOptions
  public const
    ///<summary>
    ///  Specifies default options.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Specifies that missing object members should be treated as null literals by the engine. This option
    ///  affects only access to instance (that is, non-static) object members and extension methods. If this
    ///  option is not set, the engine throws an exception when encounters a missing object member.
    ///</summary>
    AllowMissingMembers = 1;
    ///<summary>
    ///  Specifies that the engine should remove paragraphs becoming empty after template syntax tags are
    ///  removed or replaced with empty values.
    ///</summary>
    RemoveEmptyParagraphs = 2;
    ///<summary>
    ///  Specifies that the engine should inline template syntax error messages into output documents.
    ///  If this option is not set, the engine throws an exception when encounters a syntax error.
    ///</summary>
    InlineErrorMessages = 4;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Allows to specify whether to work with the original or revised version of a document.
  ///</summary>
  [DNTypeName('Aspose.Words.RevisionsView')]
  DNRevisionsView = type Integer;
  DNRevisionsViewHelper = record helper for DNRevisionsView
  public const
    ///<summary>
    ///  Specifies original version of a document.
    ///</summary>
    Original = 0;
    ///<summary>
    ///  Specifies revised version of a document.
    ///</summary>
    Final_ = 1;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Specifies the type of change being tracked in <see cref="T:Aspose.Words.Revision" />
  ///  .
  ///</summary>
  [DNTypeName('Aspose.Words.RevisionType')]
  DNRevisionType = type Integer;
  DNRevisionTypeHelper = record helper for DNRevisionType
  public const
    ///<summary>
    ///  New content was inserted in the document.
    ///</summary>
    Insertion = 0;
    ///<summary>
    ///  Content was removed from the document.
    ///</summary>
    Deletion = 1;
    ///<summary>
    ///  Change of formatting was applied to the parent node.
    ///</summary>
    FormatChange = 2;
    ///<summary>
    ///  Change of formatting was applied to the parent style.
    ///</summary>
    StyleDefinitionChange = 3;
    ///<summary>
    ///  Content was moved in the document.
    ///</summary>
    Moving = 4;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Indicates the format in which the document is saved.
  ///</summary>
  ///<seealso cref="M:Aspose.Words.Document.Save(System.IO.Stream,Aspose.Words.SaveFormat)" />
  ///<seealso cref="T:Aspose.Words.Saving.SaveOptions" />
  ///<dev>
  ///  We should only use values 0..255 here because these values are used as bit flags in the UnifiedScenario enum.
  ///</dev>
  [DNTypeName('Aspose.Words.SaveFormat')]
  DNSaveFormat = type Integer;
  DNSaveFormatHelper = record helper for DNSaveFormat
  public const
    ///<summary>
    ///  Default, invalid value for file format.
    ///</summary>
    Unknown = 0;
    ///<summary>
    ///  Saves the document in the Microsoft Word 97 - 2007 Document format.
    ///</summary>
    Doc = 10;
    ///<summary>
    ///  Saves the document in the Microsoft Word 97 - 2007 Template format.
    ///</summary>
    Dot = 11;
    ///<summary>
    ///  Saves the document as an Office Open XML WordprocessingML Document (macro-free).
    ///</summary>
    Docx = 20;
    ///<summary>
    ///  Saves the document as an Office Open XML WordprocessingML Macro-Enabled Document.
    ///</summary>
    Docm = 21;
    ///<summary>
    ///  Saves the document as an Office Open XML WordprocessingML Template (macro-free).
    ///</summary>
    Dotx = 22;
    ///<summary>
    ///  Saves the document as an Office Open XML WordprocessingML Macro-Enabled Template.
    ///</summary>
    Dotm = 23;
    ///<summary>
    ///  Saves the document as an Office Open XML WordprocessingML stored in a flat XML file instead of a ZIP package.
    ///</summary>
    FlatOpc = 24;
    ///<summary>
    ///  Saves the document as an Office Open XML WordprocessingML Macro-Enabled Document stored in a flat XML file instead of a ZIP package.
    ///</summary>
    FlatOpcMacroEnabled = 25;
    ///<summary>
    ///  Saves the document as an Office Open XML WordprocessingML Template (macro-free) stored in a flat XML file instead of a ZIP package.
    ///</summary>
    FlatOpcTemplate = 26;
    ///<summary>
    ///  Saves the document as an Office Open XML WordprocessingML Macro-Enabled Template stored in a flat XML file instead of a ZIP package.
    ///</summary>
    FlatOpcTemplateMacroEnabled = 27;
    ///<summary>
    ///  Saves the document in the RTF format.
    ///  All characters above 7-bits are escaped as hexadecimal or Unicode characters.
    ///</summary>
    Rtf = 30;
    ///<summary>
    ///  Saves the document in the Microsoft Word 2003 WordprocessingML format.
    ///</summary>
    WordML = 31;
    ///<summary>
    ///  Saves the document as PDF (Adobe Portable Document) format.
    ///</summary>
    Pdf = 40;
    ///<summary>
    ///  Saves the document in the XPS (XML Paper Specification) format.
    ///</summary>
    Xps = 41;
    ///<summary>
    ///  Saves the document in the Extensible Application Markup Language (XAML) format as a fixed document.
    ///</summary>
    XamlFixed = 42;
    ///<summary>
    ///  Saves the document in the Svg (Scalable Vector Graphics) format.
    ///</summary>
    Svg = 44;
    ///<summary>
    ///  Saves the document in the HTML format using absolutely positioned elements
    ///</summary>
    HtmlFixed = 45;
    ///<summary>
    ///  Saves the document in the OpenXPS (Ecma-388) format.
    ///</summary>
    OpenXps = 46;
    ///<summary>
    ///  Saves the document in the PS (PostScript) format.
    ///</summary>
    Ps = 47;
    ///<summary>
    ///  Saves the document in the PCL (Printer Control Language) format.
    ///</summary>
    Pcl = 48;
    ///<summary>
    ///  Saves the document in the HTML format.
    ///</summary>
    Html = 50;
    ///<summary>
    ///  Saves the document in the MHTML (Web archive) format.
    ///</summary>
    Mhtml = 51;
    ///<summary>
    ///  Saves the document in the IDPF EPUB format.
    ///</summary>
    Epub = 52;
    ///<summary>
    ///  Saves the document as an ODF Text Document.
    ///</summary>
    Odt = 60;
    ///<summary>
    ///  Saves the document as an ODF Text Document Template.
    ///</summary>
    Ott = 61;
    ///<summary>
    ///  Saves the document in the plain text format.
    ///</summary>
    Text = 70;
    ///<summary><b>Beta.</b>
    ///  Saves the document in the Extensible Application Markup Language (XAML) format as a flow document.
    ///</summary>
    XamlFlow = 71;
    ///<summary><b>Beta.</b>
    ///  Saves the document in the Extensible Application Markup Language (XAML) package format as a flow document.
    ///</summary>
    XamlFlowPack = 72;
    ///<summary>
    ///  Saves the document in the Markdown format.
    ///</summary>
    Markdown = 73;
    ///<summary>
    ///  Renders a page or pages of the document and saves them into a single or multipage TIFF file.
    ///</summary>
    Tiff = 100;
    ///<summary>
    ///  Renders a page of the document and saves it as a PNG file.
    ///</summary>
    Png = 101;
    ///<summary>
    ///  Renders a page of the document and saves it as a BMP file.
    ///</summary>
    Bmp = 102;
    ///<summary>
    ///  Renders a page of the document and saves it as a vector EMF (Enhanced Meta File) file.
    ///</summary>
    Emf = 103;
    ///<summary>
    ///  Renders a page of the document and saves it as a JPEG file.
    ///</summary>
    Jpeg = 104;
    ///<summary>
    ///  Renders a page of the document and saves it as a GIF file.
    ///</summary>
    Gif = 105;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specifies how colors are rendered.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.ColorMode')]
  DNColorMode = type Integer;
  DNColorModeHelper = record helper for DNColorMode
  public const
    ///<summary>
    ///  Rendering with unmodified colors.
    ///</summary>
    Normal = 0;
    ///<summary>
    ///  Rendering with colors in a range of gray shades from white to black.
    ///</summary>
    Grayscale = 1;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Compression level for OOXML files.
  ///  <para>
  ///  (DOCX and DOTX files are internally a ZIP-archive, this property controls the compression level of the archive.
  ///</para><para>
  ///  Note, that FlatOpc file is not a ZIP-archive, therefore, this property does not affect the FlatOpc files.)
  ///</para></summary>
  [DNTypeName('Aspose.Words.Saving.CompressionLevel')]
  DNCompressionLevel = type Integer;
  DNCompressionLevelHelper = record helper for DNCompressionLevel
  public const
    ///<summary>
    ///  Normal compression level. Default compression level used by Aspose.Words.
    ///</summary>
    Normal = 0;
    ///<summary>
    ///  Maximum compression level.
    ///</summary>
    Maximum = 1;
    ///<summary>
    ///  Fast compression level.
    ///</summary>
    Fast = 2;
    ///<summary>
    ///  Super Fast compression level. Microsoft Word uses this compression level.
    ///</summary>
    SuperFast = 3;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specifies how CSS (Cascading Style Sheet) styles are exported to HTML.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.CssStyleSheetType" />
  [DNTypeName('Aspose.Words.Saving.CssStyleSheetType')]
  DNCssStyleSheetType = type Integer;
  DNCssStyleSheetTypeHelper = record helper for DNCssStyleSheetType
  public const
    ///<summary>
    ///  CSS styles are written inline (as a value of the <b>style</b>
    ///  attribute on every element).
    ///</summary>
    Inline_ = 0;
    ///<summary>
    ///  CSS styles are written separately from the content in a style sheet embedded in the HTML file.
    ///</summary>
    Embedded = 1;
    ///<summary>
    ///  CSS styles are written separately from the content in a style sheet in an external file.
    ///  The HTML file links the style sheet.
    ///</summary>
    External_ = 2;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specifies how 3D shape effects are rendered.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.Dml3DEffectsRenderingMode')]
  DNDml3DEffectsRenderingMode = type Integer;
  DNDml3DEffectsRenderingModeHelper = record helper for DNDml3DEffectsRenderingMode
  public const
    ///<summary>
    ///  A lightweight and stable rendering, based on the internal engine,
    ///  but advanced effects such as lighting, materials and other additional effects
    ///  are not displayed when using this mode.
    ///  Please see documentation for details.
    ///</summary>
    Basic = 0;
    ///<summary>
    ///  Rendering of an extended list of special effects including advanced 3D effects
    ///  such as bevels, lighting and materials.
    ///</summary>
    ///<remarks>
    ///  The current implementation uses OpenGL.
    ///  Please make sure that OpenGL library version 1.1 or higher is installed on your system before use.
    ///  This mode is still under development, and some things may not be supported, so it's recommended to use
    ///  the <see cref="F:Aspose.Words.Saving.Dml3DEffectsRenderingMode.Basic" />
    ///  mode if the rendering result is not acceptable.
    ///  Please see documentation for details.
    ///</remarks>
    Advanced = 1;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specifies how DrawingML effects are rendered to fixed page formats.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.DmlEffectsRenderingMode')]
  DNDmlEffectsRenderingMode = type Integer;
  DNDmlEffectsRenderingModeHelper = record helper for DNDmlEffectsRenderingMode
  public const
    ///<summary>
    ///  Rendering of DrawingML effects are simplified.
    ///</summary>
    Simplified = 0;
    ///<summary>
    ///  No DrawingML effects are rendered.
    ///</summary>
    None = 1;
    ///<summary>
    ///  DrawingML effects are rendered in fine mode which involves advanced processing.
    ///  In this mode rendering of effects gives better results but at a higher performance cost than <see cref="F:Aspose.Words.Saving.DmlEffectsRenderingMode.Simplified" />
    ///  mode.
    ///</summary>
    Fine = 2;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specifies how DrawingML shapes are rendered to fixed page formats.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.DmlRenderingMode')]
  DNDmlRenderingMode = type Integer;
  DNDmlRenderingModeHelper = record helper for DNDmlRenderingMode
  public const
    ///<summary>
    ///  If fall-back shape is available for DrawingML, Aspose.Words renders fall-back shape instead of the DrawingML.
    ///</summary>
    ///<remarks>
    ///  Please note that after saving a document to a fixed page format with fall-back DML rendering mode,
    ///  DML shapes in the AW document model are permanently replaced with their fall-back counterparts.
    ///  As a result, saving the same document again will always use fall-back shapes, even if DmlRenderingMode is set to DrawingML.
    ///</remarks>
    Fallback = 0;
    ///<summary>
    ///  Aspose.Words ignores fall-back shape of DrawingML and renders DrawingML itself.
    ///  This is the default mode.
    ///</summary>
    DrawingML = 1;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specifies how the document is split into parts when saving to <see cref="F:Aspose.Words.SaveFormat.Html" />
  ///  or <see cref="F:Aspose.Words.SaveFormat.Epub" />
  ///  format.
  ///</summary>
  ///<remarks><p><see cref="T:Aspose.Words.Saving.DocumentSplitCriteria" />
  ///  is a set of flags which can be combined. For instance you can split the document
  ///  at page breaks and heading paragraphs in the same export operation.</p>
  ///  <p>Different criteria can partially overlap. For instance, <b>Heading 1</b>
  ///  style is frequently given
  ///<see cref="P:Aspose.Words.ParagraphFormat.PageBreakBefore" />
  ///  property so it falls under two criteria: <see cref="F:Aspose.Words.Saving.DocumentSplitCriteria.PageBreak" />
  ///  and
  ///<see cref="F:Aspose.Words.Saving.DocumentSplitCriteria.HeadingParagraph" />
  ///  . Some section breaks can cause page breaks and so on.
  ///  In typical cases specifying only one flag is the most practical option.</p>
  ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.DocumentSplitCriteria" />
  ///</remarks>
  [DNTypeName('Aspose.Words.Saving.DocumentSplitCriteria')]
  DNDocumentSplitCriteria = type Integer;
  DNDocumentSplitCriteriaHelper = record helper for DNDocumentSplitCriteria
  public const
    ///<summary>
    ///  The document is not split.
    ///</summary>
    None = 0;
    ///<summary>
    ///  The document is split into parts at explicit page breaks.
    ///  A page break can be specified by a <see cref="F:Aspose.Words.ControlChar.PageBreak" />
    ///  character,
    ///  a section break specifying start of new section on a new page,
    ///  or a paragraph that has its <see cref="P:Aspose.Words.ParagraphFormat.PageBreakBefore" />
    ///  property set to <c>true</c>.
    ///</summary>
    PageBreak = 1;
    ///<summary>
    ///  The document is split into parts at column breaks.
    ///  A column break can be specified by a <see cref="F:Aspose.Words.ControlChar.ColumnBreak" />
    ///  character or
    ///  a section break specifying start of new section in a new column.
    ///</summary>
    ColumnBreak = 2;
    ///<summary>
    ///  The document is split into parts at a section break of any type.
    ///</summary>
    SectionBreak = 4;
    ///<summary>
    ///  The document is split into parts at a paragraph formatted using a heading style <b>Heading 1</b>
    ///  , <b>Heading 2</b>
    ///  etc.
    ///  Use together with <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.DocumentSplitHeadingLevel" />
    ///  to specify the heading levels
    ///  (from 1 to the specified level) at which to split.
    ///</summary>
    HeadingParagraph = 8;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specifies how Aspose.Words should render EMF+ Dual metafiles.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.EmfPlusDualRenderingMode')]
  DNEmfPlusDualRenderingMode = type Integer;
  DNEmfPlusDualRenderingModeHelper = record helper for DNEmfPlusDualRenderingMode
  public const
    ///<summary>
    ///  Aspose.Words tries to render EMF+ part of EMF+ Dual metafile. If some of the EMF+ records are not supported
    ///  then Aspose.Words renders EMF part of EMF+ Dual metafile.
    ///</summary>
    EmfPlusWithFallback = 0;
    ///<summary>
    ///  Aspose.Words renders EMF+ part of EMF+ Dual metafile.
    ///</summary>
    EmfPlus = 1;
    ///<summary>
    ///  Aspose.Words renders EMF part of EMF+ Dual metafile.
    ///</summary>
    Emf = 2;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Indicates the format that is used to export fonts while rendering to HTML fixed format.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Saving.HtmlFixedSaveOptions.FontFormat" />
  [DNTypeName('Aspose.Words.Saving.ExportFontFormat')]
  DNExportFontFormat = type Integer;
  DNExportFontFormatHelper = record helper for DNExportFontFormat
  public const
    ///<summary>
    ///  WOFF (Web Open Font Format).
    ///</summary>
    Woff = 0;
    ///<summary>
    ///  TTF (TrueType Font format).
    ///</summary>
    Ttf = 1;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specifies how headers and footers are exported to HTML, MHTML or EPUB.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.ExportHeadersFootersMode" />
  [DNTypeName('Aspose.Words.Saving.ExportHeadersFootersMode')]
  DNExportHeadersFootersMode = type Integer;
  DNExportHeadersFootersModeHelper = record helper for DNExportHeadersFootersMode
  public const
    ///<summary>
    ///  Headers and footers are not exported.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Primary headers and footers are exported at the beginning and the end of each section.
    ///</summary>
    PerSection = 1;
    ///<summary>
    ///  Primary header of the first section is exported at the beginning of the document and primary footer is at the end.
    ///</summary>
    FirstSectionHeaderLastSectionFooter = 2;
    ///<summary>
    ///  First page header and footer are exported at the beginning and the end of each section.
    ///</summary>
    FirstPageHeaderFooterPerSection = 3;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specifies how list labels are exported to HTML, MHTML and EPUB.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.ExportListLabels" />
  [DNTypeName('Aspose.Words.Saving.ExportListLabels')]
  DNExportListLabels = type Integer;
  DNExportListLabelsHelper = record helper for DNExportListLabels
  public const
    ///<summary>
    ///  Outputs list labels in auto mode. Uses HTML native elements when possible.
    ///</summary>
    ///<remarks>
    ///  HTML &lt;ul&gt; and &lt;ol&gt; tags are used for list label representation if it doesn't cause formatting loss, otherwise the HTML &lt;p&gt; tag is used.
    ///</remarks>
    Auto = 0;
    ///<summary>
    ///  Outputs all list labels as inline text.
    ///</summary>
    ///<remarks>
    ///  HTML &lt;p&gt; tag is used for any list label representation.
    ///</remarks>
    AsInlineText = 1;
    ///<summary>
    ///  Outputs all list labels as HTML native elements.
    ///</summary>
    ///<remarks>
    ///  HTML &lt;ul&gt; and &lt;ol&gt; tags are used for list label representation. Some formatting loss is possible.
    ///</remarks>
    ByHtmlTags = 2;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specifies how bookmarks in headers/footers are exported.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.HeaderFooterBookmarksExportMode')]
  DNHeaderFooterBookmarksExportMode = type Integer;
  DNHeaderFooterBookmarksExportModeHelper = record helper for DNHeaderFooterBookmarksExportMode
  public const
    ///<summary>
    ///  Bookmarks in headers/footers are not exported.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Only bookmark in first header/footer of the section is exported.
    ///</summary>
    First = 1;
    ///<summary>
    ///  Bookmarks in all headers/footers are exported.
    ///</summary>
    All = 2;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specifies how Aspose.Words exports element widths and heights to HTML, MHTML and EPUB.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.TableWidthOutputMode" />
  [DNTypeName('Aspose.Words.Saving.HtmlElementSizeOutputMode')]
  DNHtmlElementSizeOutputMode = type Integer;
  DNHtmlElementSizeOutputModeHelper = record helper for DNHtmlElementSizeOutputMode
  public const
    ///<summary>
    ///  All element sizes, both in absolute and relative units, specified in the document are exported.
    ///</summary>
    All = 0;
    ///<summary>
    ///  Element sizes are exported only if they are specified in relative units in the document.
    ///  Fixed sizes are not exported in this mode. Visual agents will calculate missing sizes to make
    ///  document layout more natural.
    ///</summary>
    RelativeOnly = 1;
    ///<summary>
    ///  Element sizes are not exported. Visual agents will build layout automatically according to relationship between elements.
    ///</summary>
    None = 2;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specifies the horizontal alignment for pages in output HTML document.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.HtmlFixedPageHorizontalAlignment')]
  DNHtmlFixedPageHorizontalAlignment = type Integer;
  DNHtmlFixedPageHorizontalAlignmentHelper = record helper for DNHtmlFixedPageHorizontalAlignment
  public const
    ///<summary>
    ///  Align pages to the left.
    ///</summary>
    Left = 0;
    ///<summary>
    ///  Center pages. This is the default value.
    ///</summary>
    Center = 1;
    ///<summary>
    ///  Align pages to the right.
    ///</summary>
    Right = 2;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Indicates the format in which metafiles are saved to HTML documents.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.HtmlMetafileFormat')]
  DNHtmlMetafileFormat = type Integer;
  DNHtmlMetafileFormatHelper = record helper for DNHtmlMetafileFormat
  public const
    ///<summary>
    ///  Metafiles are rendered to raster PNG images.
    ///</summary>
    Png = 0;
    ///<summary>
    ///  Metafiles are converted to vector SVG images.
    ///</summary>
    Svg = 1;
    ///<summary>
    ///  Metafiles are saved as is, without conversion.
    ///</summary>
    EmfOrWmf = 2;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specifies how Aspose.Words exports OfficeMath to HTML, MHTML and EPUB.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.HtmlOfficeMathOutputMode')]
  DNHtmlOfficeMathOutputMode = type Integer;
  DNHtmlOfficeMathOutputModeHelper = record helper for DNHtmlOfficeMathOutputMode
  public const
    ///<summary>
    ///  OfficeMath is converted to HTML as image specified by &lt;img&gt; tag.
    ///</summary>
    Image = 0;
    ///<summary>
    ///  OfficeMath is converted to HTML using MathML.
    ///</summary>
    MathML = 1;
    ///<summary>
    ///  OfficeMath is converted to HTML as sequence of runs specified by &lt;span&gt; tags.
    ///</summary>
    Text = 2;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Indicates the version of HTML is used when saving the document to <see cref="F:Aspose.Words.SaveFormat.Html" />
  ///  and
  ///<see cref="F:Aspose.Words.SaveFormat.Mhtml" />
  ///  formats.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.HtmlVersion')]
  DNHtmlVersion = type Integer;
  DNHtmlVersionHelper = record helper for DNHtmlVersion
  public const
    ///<summary>
    ///  Saves the document in compliance with the XHTML 1.0 Transitional standard.
    ///</summary>
    ///<remarks><p>Aspose.Words aims to output XHTML according to the XHTML 1.0 Transitional standard,
    ///  but the output will not always validate against the DTD. Some structures inside a Microsoft Word
    ///  document are hard or impossible to map to a document that will validate against the XHTML schema.
    ///  For example, XHTML does not allow nested lists (UL cannot be nested inside another UL element),
    ///  but in Microsoft Word document multilevel lists occur quite often.</p>
    ///</remarks>
    Xhtml = 0;
    ///<summary>
    ///  Saves the document in compliance with the HTML 5 standard.
    ///</summary>
    Html5 = 1;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specifies the method used to binarize image.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.ImageBinarizationMethod')]
  DNImageBinarizationMethod = type Integer;
  DNImageBinarizationMethodHelper = record helper for DNImageBinarizationMethod
  public const
    ///<summary>
    ///  Specifies threshold method.
    ///</summary>
    Threshold = 0;
    ///<summary>
    ///  Specifies dithering using Floyd-Steinberg error diffusion method.
    ///</summary>
    FloydSteinbergDithering = 1;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specifies the color mode for the generated images of document pages.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.ImageColorMode')]
  DNImageColorMode = type Integer;
  DNImageColorModeHelper = record helper for DNImageColorMode
  public const
    ///<summary>
    ///  The pages of the document will be rendered as color images.
    ///</summary>
    None = 0;
    ///<summary>
    ///  The pages of the document will be rendered as grayscale images.
    ///</summary>
    Grayscale = 1;
    ///<summary>
    ///  The pages of the document will be rendered as black and white images.
    ///</summary>
    BlackAndWhite = 2;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specifies the pixel format for the generated images of document pages.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.ImagePixelFormat')]
  DNImagePixelFormat = type Integer;
  DNImagePixelFormatHelper = record helper for DNImagePixelFormat
  public const
    ///<summary>
    ///  16 bits per pixel, RGB.
    ///</summary>
    Format16BppRgb555 = 0;
    ///<summary>
    ///  16 bits per pixel, RGB.
    ///</summary>
    Format16BppRgb565 = 1;
    ///<summary>
    ///  16 bits per pixel, ARGB.
    ///</summary>
    Format16BppArgb1555 = 2;
    ///<summary>
    ///  24 bits per pixel, RGB.
    ///</summary>
    Format24BppRgb = 3;
    ///<summary>
    ///  32 bits per pixel, RGB.
    ///</summary>
    Format32BppRgb = 4;
    ///<summary>
    ///  32 bits per pixel, ARGB.
    ///</summary>
    Format32BppArgb = 5;
    ///<summary>
    ///  32 bits per pixel, ARGB, premultiplied alpha.
    ///</summary>
    Format32BppPArgb = 6;
    ///<summary>
    ///  48 bits per pixel, RGB.
    ///</summary>
    Format48BppRgb = 7;
    ///<summary>
    ///  64 bits per pixel, ARGB.
    ///</summary>
    Format64BppArgb = 8;
    ///<summary>
    ///  64 bits per pixel, ARGB, premultiplied alpha.
    ///</summary>
    Format64BppPArgb = 9;
    ///<summary>
    ///  1 bit per pixel, Indexed.
    ///</summary>
    Format1bppIndexed = 10;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  [DNTypeName('Aspose.Words.Saving.ImlRenderingMode')]
  DNImlRenderingMode = type Integer;
  DNImlRenderingModeHelper = record helper for DNImlRenderingMode
  public const
    Fallback = 0;
    InkML = 1;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specifies how Aspose.Words should render WMF and EMF metafiles.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.MetafileRenderingMode')]
  DNMetafileRenderingMode = type Integer;
  DNMetafileRenderingModeHelper = record helper for DNMetafileRenderingMode
  public const
    ///<summary>
    ///  Aspose.Words tries to render a metafile as vector graphics. If Aspose.Words cannot correctly render some of
    ///  the metafile records to vector graphics then Aspose.Words renders this metafile to a bitmap.
    ///</summary>
    VectorWithFallback = 0;
    ///<summary>
    ///  Aspose.Words renders a metafile as vector graphics.
    ///</summary>
    Vector = 1;
    ///<summary>
    ///  Aspose.Words invokes GDI+ to render a metafile to a bitmap and then saves the bitmap to the output document.
    ///</summary>
    Bitmap = 2;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Indicates the symbol set that is used to represent numbers
  ///  while rendering to fixed page formats.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.NumeralFormat')]
  DNNumeralFormat = type Integer;
  DNNumeralFormatHelper = record helper for DNNumeralFormat
  public const
    ///<summary>
    ///  European numerals: 0123456789.
    ///</summary>
    European = 0;
    ///<summary>
    ///  Numerals used in Arabic: Ù Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©.
    ///  Unicode range U+0660 - u+0669.
    ///</summary>
    ArabicIndic = 1;
    ///<summary>
    ///  Numerals used in Persian and Urdu: Û°Û±Û²Û³Û´ÛµÛ¶Û·Û¸Û¹.
    ///  Unicode range U+06F0 - u+06F9.
    ///</summary>
    EasternArabicIndic = 2;
    ///<summary>
    ///  Symbol set is decided from context(locale and RTL property).
    ///</summary>
    Context = 3;
    ///<summary>
    ///  THIS OPTION IS NOT SUPPORTED.
    ///  Symbol set is decided from regional settings.
    ///</summary>
    System = 4;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specified units of measure to apply to measurable document content such as shape, widths and other during saving.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.OdtSaveMeasureUnit')]
  DNOdtSaveMeasureUnit = type Integer;
  DNOdtSaveMeasureUnitHelper = record helper for DNOdtSaveMeasureUnit
  public const
    ///<summary>
    ///  Specifies that the document content is saved using centimeters.
    ///</summary>
    Centimeters = 0;
    ///<summary>
    ///  Specifies that the document content is saved using inches.
    ///</summary>
    Inches = 1;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Allows to specify which OOXML specification will be used when saving in the DOCX format.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.OoxmlCompliance')]
  DNOoxmlCompliance = type Integer;
  DNOoxmlComplianceHelper = record helper for DNOoxmlCompliance
  public const
    ///<summary>
    ///  ECMA-376 1st Edition, 2006.
    ///</summary>
    Ecma376_2006 = 0;
    ///<summary>
    ///  ISO/IEC 29500:2008 Transitional compliance level.
    ///</summary>
    Iso29500_2008_Transitional = 1;
    ///<summary>
    ///  ISO/IEC 29500:2008 Strict compliance level.
    ///</summary>
    Iso29500_2008_Strict = 2;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specifies the PDF standards compliance level.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.PdfCompliance')]
  DNPdfCompliance = type Integer;
  DNPdfComplianceHelper = record helper for DNPdfCompliance
  public const
    ///<summary>
    ///  The output file will comply with the PDF 1.7 standard.
    ///</summary>
    Pdf17 = 0;
    ///<summary>
    ///  The output file will comply with the PDF 1.5 standard.
    ///</summary>
    Pdf15 = 1;
    ///<summary>
    ///  The output file will comply with the PDF/A-1a standard.
    ///  This level includes all the requirements of PDF/A-1b and additionally requires
    ///  that document structure be included (also known as being "tagged"),
    ///  with the objective of ensuring that document content can be searched and repurposed.
    ///</summary>
    ///<remarks>
    ///  Note that exporting the document structure significantly increases the memory consumption, especially
    ///  for the large documents.
    ///</remarks>
    PdfA1a = 2;
    ///<summary>
    ///  The output file will comply with the PDF/A-1b standard.
    ///  PDF/A-1b has the objective of ensuring reliable reproduction of the
    ///  visual appearance of the document.
    ///</summary>
    PdfA1b = 3;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specifies the way <see cref="P:Aspose.Words.Document.CustomDocumentProperties" />
  ///  are exported to PDF file.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.PdfCustomPropertiesExport')]
  DNPdfCustomPropertiesExport = type Integer;
  DNPdfCustomPropertiesExportHelper = record helper for DNPdfCustomPropertiesExport
  public const
    ///<summary>
    ///  No custom properties are exported.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Custom properties are exported as entries in /Info dictionary.
    ///<remarks></remarks>
    ///  <para>Custom properties with the following names are not exported:
    ///  "Title", "Author", "Subject", "Keywords", "Creator", "Producer", "CreationDate", "ModDate", "Trapped".
    ///</para></summary>
    Standard = 1;
    ///<summary>
    ///  Custom properties are Metadata.
    ///</summary>
    ///<remarks><para>The namespace of exported properties in XMP packet is "custprops".
    ///  Every property has an associated xml-element "custprops:Property1", "custprops:Property2" and so on.
    ///  There is "rdf:Description" element inside property element.
    ///  The description element has two elements "custprops:Name", containing custom property's name
    ///  as a value of this xml-element, and "custprops:Value", containing custom property's value as value of this xml-element.
    ///</para></remarks>
    Metadata = 2;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specifies a digital hash algorithm used by a digital signature.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.PdfDigitalSignatureHashAlgorithm')]
  DNPdfDigitalSignatureHashAlgorithm = type Integer;
  DNPdfDigitalSignatureHashAlgorithmHelper = record helper for DNPdfDigitalSignatureHashAlgorithm
  public const
    ///<summary>
    ///  SHA-1 hash algorithm.
    ///</summary>
    Sha1 = 0;
    ///<summary>
    ///  SHA-256 hash algorithm.
    ///</summary>
    Sha256 = 1;
    ///<summary>
    ///  SHA-384 hash algorithm.
    ///</summary>
    Sha384 = 2;
    ///<summary>
    ///  SHA-512 hash algorithm.
    ///</summary>
    Sha512 = 3;
    ///<summary>
    ///  SHA-1 hash algorithm.
    ///</summary>
    Md5 = 4;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specifies the encryption algorithm to use for encrypting a PDF document.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.PdfEncryptionAlgorithm')]
  DNPdfEncryptionAlgorithm = type Integer;
  DNPdfEncryptionAlgorithmHelper = record helper for DNPdfEncryptionAlgorithm
  public const
    ///<summary>
    ///  RC4 encryption, key length of 40 bits.
    ///</summary>
    RC4_40 = 0;
    ///<summary>
    ///  RC4 encryption, key length of 128 bits.
    ///</summary>
    RC4_128 = 1;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specifies how Aspose.Words should embed fonts.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.PdfFontEmbeddingMode')]
  DNPdfFontEmbeddingMode = type Integer;
  DNPdfFontEmbeddingModeHelper = record helper for DNPdfFontEmbeddingMode
  public const
    ///<summary>
    ///  Aspose.Words embeds all fonts.
    ///</summary>
    EmbedAll = 0;
    ///<summary>
    ///  Aspose.Words embeds all fonts excepting standard Windows fonts Arial and Times New Roman.
    ///  Only Arial and Times New Roman fonts are affected in this mode because MS Word doesn't embed
    ///  only these fonts when saving document to PDF.
    ///</summary>
    EmbedNonstandard = 1;
    ///<summary>
    ///  Aspose.Words do not embed any fonts.
    ///</summary>
    EmbedNone = 2;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specifies how the color space will be selected for the images in PDF document.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.PdfImageColorSpaceExportMode')]
  DNPdfImageColorSpaceExportMode = type Integer;
  DNPdfImageColorSpaceExportModeHelper = record helper for DNPdfImageColorSpaceExportMode
  public const
    ///<summary>
    ///  Aspose.Words automatically selects the most appropriate color space for each image.
    ///</summary>
    ///<remarks><para>Most of the images are saved in RGB color space. Also Indexed and Grayscale color spaces may be used. CMYK color space is never used.</para><para>For some images the color space may be different on different platforms.</para></remarks>
    Auto = 0;
    ///<summary>
    ///  Aspose.Words coverts RGB images to CMYK color space using simple formula.
    ///</summary>
    ///<remarks><para>
    ///  Images in RGB color space are converted to CMYK using formula:
    ///  Black   = minimum(1-Red,1-Green,1-Blue).
    ///  Cyan    = (1-Red-Black)/(1-Black).
    ///  Magenta = (1-Green-Black)/(1-Black).
    ///  Yellow  = (1-Blue-Black)/(1-Black).
    ///  RGB values are normalized - they are between 0 and 1.0.
    ///</para></remarks>
    SimpleCmyk = 1;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specifies the type of compression applied to images in the PDF file.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.PdfImageCompression')]
  DNPdfImageCompression = type Integer;
  DNPdfImageCompressionHelper = record helper for DNPdfImageCompression
  public const
    ///<summary>
    ///  Automatically selects the most appropriate compression for each image.
    ///</summary>
    Auto = 0;
    ///<summary>
    ///  Jpeg compression.
    ///  Does not support transparency.
    ///</summary>
    Jpeg = 1;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specifies how the PDF document should be displayed when opened in the PDF reader.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.PdfPageMode')]
  DNPdfPageMode = type Integer;
  DNPdfPageModeHelper = record helper for DNPdfPageMode
  public const
    ///<summary>
    ///  Neither document outline nor thumbnail images are visible.
    ///</summary>
    UseNone = 0;
    ///<summary>
    ///  Document outline is visible.
    ///  Note that if there're no outlines in the PDF document then outline navigation pane will not be visible anyway.
    ///</summary>
    UseOutlines = 1;
    ///<summary>
    ///  Thumbnail images are visible.
    ///</summary>
    UseThumbs = 2;
    ///<summary>
    ///  Full-screen mode, with no menu bar, window controls, or any other window visible.
    ///</summary>
    FullScreen = 3;
    ///<summary>
    ///  Optional content group panel is visible.
    ///</summary>
    UseOC = 4;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specifies the operations that are allowed to a user on an encrypted PDF document.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.PdfPermissions')]
  DNPdfPermissions = type Integer;
  DNPdfPermissionsHelper = record helper for DNPdfPermissions
  public const
    ///<summary>
    ///  Disallows all operations on the PDF document.
    ///  This is the default value.
    ///</summary>
    DisallowAll = 0;
    ///<summary>
    ///  Allows printing the document.
    ///</summary>
    Printing = 4;
    ///<summary>
    ///  Allows modifying the documentâ€™s contents.
    ///</summary>
    ModifyContents = 8;
    ///<summary>
    ///  Allows copying or otherwise extracting text and graphics from the document, including extraction for accessibility purposes.
    ///</summary>
    ContentCopy = 16;
    ///<summary>
    ///  Allows adding or modifying text annotations.
    ///  When using RC4 40-bit encryption, this option also allows filling in form fields.
    ///</summary>
    ModifyAnnotations = 32;
    ///<summary>
    ///  Allows filling in forms and signing the document.
    ///  When using RC4 40-bit encryption, this option is ignored and filling in form is allowed whenever <see cref="F:Aspose.Words.Saving.PdfPermissions.ModifyAnnotations" />
    ///  is set.
    ///</summary>
    FillIn = 256;
    ///<summary>
    ///  Allows extract text and graphics in support of accessibility to disabled users or for other purposes.
    ///  When using RC4 40-bit encryption, this option is ignored and accessibility is allowed whenever <see cref="F:Aspose.Words.Saving.PdfPermissions.ContentCopy" />
    ///  is set.
    ///</summary>
    ContentCopyForAccessibility = 512;
    ///<summary>
    ///  Allows assembling the document: inserting, rotating, or deleting pages and creating
    ///  navigation elements such as bookmarks or thumbnail images.
    ///  When using RC4 40-bit encryption, this option is ignored and document assembly is allowed when <see cref="F:Aspose.Words.Saving.PdfPermissions.ModifyContents" />
    ///  is set.
    ///</summary>
    DocumentAssembly = 1024;
    ///<summary>
    ///  Allows printing the document to the highest resolution possible.
    ///  When using RC4 40-bit encryption, this option is ignored and high resolution printing is allowed when <see cref="F:Aspose.Words.Saving.PdfPermissions.Printing" />
    ///  is set.
    ///</summary>
    HighResolutionPrinting = 2052;
    ///<summary>
    ///  Allows all operations on the PDF document.
    ///</summary>
    AllowAll = 65535;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specifies a type of compression applied to all content in the PDF file except images.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.PdfTextCompression')]
  DNPdfTextCompression = type Integer;
  DNPdfTextCompressionHelper = record helper for DNPdfTextCompression
  public const
    ///<summary>
    ///  No compression.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Flate (ZIP) compression.
    ///</summary>
    Flate = 1;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specifies the type of zoom applied to a PDF document when it is opened in a PDF viewer.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.PdfZoomBehavior')]
  DNPdfZoomBehavior = type Integer;
  DNPdfZoomBehaviorHelper = record helper for DNPdfZoomBehavior
  public const
    ///<summary>
    ///  How the document is displayed is left to the PDF viewer. Usually the viewer displays the document to fit page width.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Displays the page using the specified zoom factor.
    ///</summary>
    ZoomFactor = 1;
    ///<summary>
    ///  Displays the page so it visible entirely.
    ///</summary>
    FitPage = 2;
    ///<summary>
    ///  Fits the width of the page.
    ///</summary>
    FitWidth = 3;
    ///<summary>
    ///  Fits the height of the page.
    ///</summary>
    FitHeight = 4;
    ///<summary>
    ///  Fits the bounding box (rectangle containing all visible elements on the page).
    ///</summary>
    FitBox = 5;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary></summary>
  [DNTypeName('Aspose.Words.Saving.SvgTextOutputMode')]
  DNSvgTextOutputMode = type Integer;
  DNSvgTextOutputModeHelper = record helper for DNSvgTextOutputMode
  public const
    ///<summary>
    ///  SVG fonts are used to render text. Note, not all browsers support SVG fonts.
    ///</summary>
    UseSvgFonts = 0;
    ///<summary>
    ///  Fonts installed on the target machine are used to render text.
    ///  Note, if some of fonts used in the document are not available on the target machine, document can look differently.
    ///</summary>
    UseTargetMachineFonts = 1;
    ///<summary>
    ///  Text is rendered using curves. Note, text selection will not work if you use this option.
    ///</summary>
    UsePlacedGlyphs = 2;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Allows to specify the alignment of the content of the table to be used when exporting into Markdown format.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.TableContentAlignment')]
  DNTableContentAlignment = type Integer;
  DNTableContentAlignmentHelper = record helper for DNTableContentAlignment
  public const
    ///<summary>
    ///  The alignment will be taken from the first paragraph in corresponding table column.
    ///</summary>
    Auto = 0;
    ///<summary>
    ///  The content of tables will be aligned to the Left.
    ///</summary>
    Left = 1;
    ///<summary>
    ///  The content of tables will be aligned to the Center.
    ///</summary>
    Center = 2;
    ///<summary>
    ///  The content of tables will be aligned to the Right.
    ///</summary>
    Right = 3;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specifies what type of compression to apply when saving page images into a TIFF file.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.TiffCompression')]
  DNTiffCompression = type Integer;
  DNTiffCompressionHelper = record helper for DNTiffCompression
  public const
    ///<summary>
    ///  Specifies no compression.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Specifies the RLE compression scheme.
    ///</summary>
    Rle = 1;
    ///<summary>
    ///  Specifies the LZW compression scheme.
    ///  In Java emulated by Deflate (Zip) compression.
    ///</summary>
    Lzw = 2;
    ///<summary>
    ///  Specifies the CCITT3 compression scheme.
    ///</summary>
    Ccitt3 = 3;
    ///<summary>
    ///  Specifies the CCITT4 compression scheme.
    ///</summary>
    Ccitt4 = 4;
  end;


  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Specifies the way headers and footers are exported to plain text format.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.TxtExportHeadersFootersMode')]
  DNTxtExportHeadersFootersMode = type Integer;
  DNTxtExportHeadersFootersModeHelper = record helper for DNTxtExportHeadersFootersMode
  public const
    ///<summary>
    ///  No headers and footers are exported.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Only primary headers and footers are exported at the beginning and end of each section.
    ///</summary>
    ///<remarks><para>It is hard to meaningfully output headers and footers to plain text because it is not paginated.</para><para>When this mode is used, only primary headers and footers are exported at the beginning and end of each section.</para></remarks>
    PrimaryOnly = 1;
    ///<summary>
    ///  All headers and footers are placed after all section bodies at the very end of a document.
    ///</summary>
    ///<remarks>
    ///  This mode is similar to Word.
    ///</remarks>
    AllAtEnd = 2;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Specifies the layout mode for a section allowing to define the document grid behavior.
  ///</summary>
  [DNTypeName('Aspose.Words.SectionLayoutMode')]
  DNSectionLayoutMode = type Integer;
  DNSectionLayoutModeHelper = record helper for DNSectionLayoutMode
  public const
    ///<summary>
    ///  Specifies that no document grid shall be applied to the contents of the corresponding section in the document.
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Specifies that the corresponding section shall have both the additional line pitch and character pitch
    ///  added to each line and character within it in order to maintain a specific number
    ///  of lines per page and characters per line.
    ///  Characters will not be automatically aligned with gridlines on typing.
    ///</summary>
    Grid = 1;
    ///<summary>
    ///  Specifies that the corresponding section shall have additional line pitch added to each line within it
    ///  in order to maintain the specified number of lines per page.
    ///</summary>
    LineGrid = 2;
    ///<summary>
    ///  Specifies that the corresponding section shall have both the additional line pitch and character pitch
    ///  added to each line and character within it in order to maintain a specific number
    ///  of lines per page and characters per line.
    ///  Characters will be automatically aligned with gridlines on typing.
    ///</summary>
    SnapToChars = 3;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  The type of break at the beginning of the section.
  ///</summary>
  [DNTypeName('Aspose.Words.SectionStart')]
  DNSectionStart = type Integer;
  DNSectionStartHelper = record helper for DNSectionStart
  public const
    ///<summary>
    ///  The new section starts on the same page as the previous section.
    ///</summary>
    Continuous = 0;
    ///<summary>
    ///  The section starts from a new column.
    ///</summary>
    NewColumn = 1;
    ///<summary>
    ///  The section starts from a new page.
    ///</summary>
    NewPage = 2;
    ///<summary>
    ///  The section starts on a new even page.
    ///</summary>
    EvenPage = 3;
    ///<summary>
    ///  The section starts on a new odd page.
    ///</summary>
    OddPage = 4;
  end;


  //-------------namespace: Aspose.Words.Settings----------------
  ///<summary>
  ///  Specifies names of compatibility options.
  ///</summary>
  [DNTypeName('Aspose.Words.Settings.Compatibility')]
  DNCompatibility = type Integer;
  DNCompatibilityHelper = record helper for DNCompatibility
  public const
    NoTabHangInd = 0;
    NoSpaceRaiseLower = 1;
    SuppressSpBfAfterPgBrk = 2;
    WrapTrailSpaces = 3;
    PrintColBlack = 4;
    NoColumnBalance = 5;
    ConvMailMergeEsc = 6;
    SuppressTopSpacing = 7;
    UseSingleBorderforContiguousCells = 8;
    TransparentMetafiles = 9;
    ShowBreaksInFrames = 10;
    SwapBordersOddFacingPgs = 11;
    DoNotLeaveBackslashAlone = 12;
    DoNotExpandOnShiftReturn = 13;
    UlTrailSpace = 14;
    BalanceSingleByteDoubleByteWidth = 15;
    SuppressTopSpacingAtTopOfPage = 16;
    SpacingInWholePoints = 17;
    PrintBodyTextBeforeHeader = 18;
    NoLeading = 19;
    SpaceForUL = 20;
    MWSmallCaps = 21;
    SuppressTopLineSpacingWP = 22;
    TruncateFontHeightLikeWP6 = 23;
    SubFontBySize = 24;
    LineWrapLikeWord6 = 25;
    DoNotSuppressParagraphBorder = 26;
    NoExtraLineSpacing = 27;
    SuppressBottomSpacing = 28;
    WPSpaceWidth = 29;
    WPJustification = 30;
    UsePrinterMetrics = 31;
    ShapeLayoutLikeWW8 = 32;
    FootnoteLayoutLikeWW8 = 33;
    DoNotUseHtmlParagraphAutoSpacing = 34;
    AdjustLineHeightInTable = 35;
    ForgetLastTabAlignment = 36;
    AutoSpaceLikeWord95 = 37;
    AlignTableRowByRow = 38;
    LayoutRawTableWidth = 39;
    LayoutTableRowsApart = 40;
    UseWord97LineBreakRules = 41;
    DoNotBreakWrappedTables = 42;
    doNotSnapToGridInCell = 43;
    SelectFldWithFirstOrLastChar = 44;
    ApplyBreakingRules = 45;
    DoNotWrapTextWithPunct = 46;
    DoNotUseEastAsianBreakRules = 47;
    UseWord2002TableStyleRules = 48;
    GrowAutofit = 49;
    UseNormalStyleForList = 50;
    DoNotUseIndentAsNumberingTabStop = 51;
    UseAltKinsokuLineBreakRules = 52;
    AllowSpaceOfSameStyleInTable = 53;
    DoNotSuppressIndentation = 54;
    DoNotAutofitConstrainedTables = 55;
    AutofitToFirstFixedWidthCell = 56;
    UnderlineTabInNumList = 57;
    DisplayHangulFixedWidth = 58;
    SplitPgBreakAndParaMark = 59;
    DoNotVertAlignCellWithSp = 60;
    DoNotBreakConstrainedForcedTable = 61;
    DoNotVertAlignInTxbx = 62;
    UseAnsiKerningPairs = 63;
    CachedColBalance = 64;
    UseFELayout = 65;
    UICompat97To2003 = 66;
    OverrideTableStyleFontSizeAndJustification = 67;
    DisableOpenTypeFontFormattingFeatures = 68;
    SwapInsideAndOutsideForMirrorIndentsAndRelativePositioning = 69;
    UseWord2010TableStyleRules = 70;
  end;


  //-------------namespace: Aspose.Words.Settings----------------
  ///<summary>
  ///  Specifies how Microsoft Word will report errors detected during mail merge.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Settings.MailMergeSettings.CheckErrors" />
  [DNTypeName('Aspose.Words.Settings.MailMergeCheckErrors')]
  DNMailMergeCheckErrors = type Integer;
  DNMailMergeCheckErrorsHelper = record helper for DNMailMergeCheckErrors
  public const
    ///<summary>
    ///  Simulate the merge and report errors in a new document.
    ///</summary>
    Simulate = 1;
    ///<summary>
    ///  Complete the merge and pause to report errors.
    ///</summary>
    PauseOnError = 2;
    ///<summary>
    ///  Equals to the <see cref="F:Aspose.Words.Settings.MailMergeCheckErrors.PauseOnError" />
    ///  value.
    ///</summary>
    Default_ = 2;
    ///<summary>
    ///  Complete the merge and report errors in a new document.
    ///</summary>
    CollectErrors = 3;
  end;


  //-------------namespace: Aspose.Words.Settings----------------
  ///<summary>
  ///  Specifies the type of an external mail merge data source.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Settings.MailMergeSettings.DataType" />
  ///<dev>Do not renumber these values as they are used in the DOC codec.</dev>
  [DNTypeName('Aspose.Words.Settings.MailMergeDataType')]
  DNMailMergeDataType = type Integer;
  DNMailMergeDataTypeHelper = record helper for DNMailMergeDataType
  public const
    ///<summary>
    ///  Specifies that a given document has been connected to a text file via the Dynamic Data Exchange (DDE) system.
    ///</summary>
    TextFile = 0;
    ///<summary>
    ///  Specifies that a given document has been connected to an Access database via the Dynamic Data Exchange (DDE) system.
    ///</summary>
    Database = 1;
    ///<summary>
    ///  Specifies that a given document has been connected to an Excel spreadsheet via the Dynamic Data Exchange (DDE) system.
    ///</summary>
    Spreadsheet = 2;
    ///<summary>
    ///  Specifies that a given document has been connected to an external data source using an external query tool.
    ///</summary>
    Query = 3;
    ///<summary>
    ///  Specifies that a given document has been connected to an external data source via the Open Database Connectivity interface.
    ///</summary>
    Odbc = 4;
    ///<summary>
    ///  Specifies that a given document has been connected to an external data source via the Office Data Source Object (ODSO) interface.
    ///</summary>
    Native = 5;
    ///<summary>
    ///  No mail merge data source is specified.
    ///</summary>
    None = -1;
    ///<summary>
    ///  Equals to <see cref="F:Aspose.Words.Settings.MailMergeDataType.None" />
    ///  .
    ///</summary>
    Default_ = -1;
  end;


  //-------------namespace: Aspose.Words.Settings----------------
  ///<summary>
  ///  Specifies the possible results which may be generated when a mail merge is carried out on a document.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Settings.MailMergeSettings.Destination" />
  ///<dev>Do not renumber these as they values are used in the DOC codec.</dev>
  [DNTypeName('Aspose.Words.Settings.MailMergeDestination')]
  DNMailMergeDestination = type Integer;
  DNMailMergeDestinationHelper = record helper for DNMailMergeDestination
  public const
    ///<summary>
    ///  Specifies that conforming hosting applications shall generate new documents by populating the fields
    ///  within a given document with data from the specified external data source.
    ///</summary>
    NewDocument = 0;
    ///<summary>
    ///  Equals to the <see cref="F:Aspose.Words.Settings.MailMergeDestination.NewDocument" />
    ///  value.
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Specifies that conforming hosting applications shall print the documents that result from populating the
    ///  fields within a given document with external data from the specified external data source.
    ///</summary>
    Printer = 1;
    ///<summary>
    ///  Specifies that conforming hosting applications shall generate emails using the documents that result from
    ///  populating the fields within a given document with data from the specified external data source.
    ///</summary>
    Email = 2;
    ///<summary>
    ///  Specifies that conforming hosting applications shall generate faxes using the documents that result from
    ///  populating the fields within a given document with data from the specified external data source.
    ///</summary>
    Fax = 4;
  end;


  //-------------namespace: Aspose.Words.Settings----------------
  ///<summary>
  ///  Specifies the possible types for a mail merge source document.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Settings.MailMergeSettings.MainDocumentType" />
  ///<dev>Do not renumber these because the values are used in the DOC codec.</dev>
  [DNTypeName('Aspose.Words.Settings.MailMergeMainDocumentType')]
  DNMailMergeMainDocumentType = type Integer;
  DNMailMergeMainDocumentTypeHelper = record helper for DNMailMergeMainDocumentType
  public const
    ///<summary>
    ///  This document is not a mail merge document.
    ///</summary>
    NotAMergeDocument = 0;
    ///<summary>
    ///  Equals to <see cref="F:Aspose.Words.Settings.MailMergeMainDocumentType.NotAMergeDocument" />
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Specifies that the mail merge source document is of the form letter type.
    ///</summary>
    FormLetters = 1;
    ///<summary>
    ///  Specifies that the mail merge source document is of the mailing label type.
    ///</summary>
    MailingLabels = 2;
    ///<summary>
    ///  Specifies that the mail merge source document is of the envelope type.
    ///</summary>
    Envelopes = 4;
    ///<summary>
    ///  Specifies that the mail merge source document is of the catalog type.
    ///</summary>
    Catalog = 8;
    ///<summary>
    ///  Specifies that the mail merge source document is of the e-mail message type.
    ///</summary>
    Email = 16;
    ///<summary>
    ///  Specifies that the mail merge source document is of the fax type.
    ///</summary>
    Fax = 32;
  end;


  //-------------namespace: Aspose.Words.Settings----------------
  ///<summary>
  ///  Allows Aspose.Wods to mimic MS Word version-specific application behavior.
  ///</summary>
  [DNTypeName('Aspose.Words.Settings.MsWordVersion')]
  DNMsWordVersion = type Integer;
  DNMsWordVersionHelper = record helper for DNMsWordVersion
  public const
    ///<summary>
    ///  Optimize Aspose.Words behavior to match MS Word 2000 version.
    ///</summary>
    Word2000 = 0;
    ///<summary>
    ///  Optimize Aspose.Words behavior to match MS Word 2002 version.
    ///</summary>
    Word2002 = 1;
    ///<summary>
    ///  Optimize Aspose.Words behavior to match MS Word 2003 version.
    ///</summary>
    Word2003 = 2;
    ///<summary>
    ///  Optimize Aspose.Words behavior to match MS Word 2007 version.
    ///</summary>
    Word2007 = 3;
    ///<summary>
    ///  Optimize Aspose.Words behavior to match MS Word 2010 version.
    ///</summary>
    Word2010 = 4;
    ///<summary>
    ///  Optimize Aspose.Words behavior to match MS Word 2013 version.
    ///</summary>
    Word2013 = 5;
    ///<summary>
    ///  Optimize Aspose.Words behavior to match MS Word 2016 version.
    ///</summary>
    Word2016 = 6;
    ///<summary>
    ///  Optimize Aspose.Words behavior to match MS Word 2019 version.
    ///</summary>
    Word2019 = 7;
  end;


  //-------------namespace: Aspose.Words.Settings----------------
  ///<summary>
  ///  Specifies how document is printed out.
  ///</summary>
  [DNTypeName('Aspose.Words.Settings.MultiplePagesType')]
  DNMultiplePagesType = type Integer;
  DNMultiplePagesTypeHelper = record helper for DNMultiplePagesType
  public const
    ///<summary>
    ///  Normal printing, no multiple pages specified.
    ///</summary>
    Normal = 0;
    ///<summary>
    ///  Default value is <see cref="F:Aspose.Words.Settings.MultiplePagesType.Normal" />
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Swaps left and right margins on facing pages.
    ///</summary>
    MirrorMargins = 1;
    ///<summary>
    ///  Prints two pages per sheet.
    ///</summary>
    TwoPagesPerSheet = 2;
    ///<summary>
    ///  Specifies whether to print the document as a book fold.
    ///</summary>
    BookFoldPrinting = 3;
    ///<summary>
    ///  Specifies whether to print the document as a reverse book fold.
    ///</summary>
    BookFoldPrintingReverse = 4;
  end;


  //-------------namespace: Aspose.Words.Settings----------------
  ///<summary>
  ///  Specifies the type of the external data source to be connected to as part of the ODSO connection information.
  ///</summary>
  ///<remarks><para>The OOXML specification is very vague for this enum. I guess it might correspond to the WdMergeSubType
  ///  enumeration http://msdn.microsoft.com/en-us/library/bb237801.aspx.</para><seealso cref="P:Aspose.Words.Settings.Odso.DataSourceType" />
  ///</remarks>
  ///<dev>Do not renumber these.</dev>
  [DNTypeName('Aspose.Words.Settings.OdsoDataSourceType')]
  DNOdsoDataSourceType = type Integer;
  DNOdsoDataSourceTypeHelper = record helper for DNOdsoDataSourceType
  public const
    ///<summary>
    ///  Specifies that a given document has been connected to a text file.
    ///  Possibly wdMergeSubTypeOther.
    ///</summary>
    Text = 0;
    ///<summary>
    ///  Specifies that a given document has been connected to a database.
    ///  Possibly wdMergeSubTypeAccess.
    ///</summary>
    Database = 1;
    ///<summary>
    ///  Specifies that a given document has been connected to an address book of contacts.
    ///  Possibly wdMergeSubTypeOAL.
    ///</summary>
    AddressBook = 2;
    ///<summary>
    ///  Specifies that a given document has been connected to another document format supported by the producing application.
    ///  Possibly wdMergeSubTypeOLEDBWord.
    ///</summary>
    Document1 = 3;
    ///<summary>
    ///  Specifies that a given document has been connected to another document format supported by the producing application.
    ///  Possibly wdMergeSubTypeWorks.
    ///</summary>
    Document2 = 4;
    ///<summary>
    ///  Specifies that a given document has been connected to another document format native to the producing application.
    ///  Possibly wdMergeSubTypeOLEDBText
    ///</summary>
    Native = 5;
    ///<summary>
    ///  Specifies that a given document has been connected to an e-mail application.
    ///  Possibly wdMergeSubTypeOutlook.
    ///</summary>
    Email = 6;
    ///<summary>
    ///  The type of the external data source is not specified.
    ///  Possibly wdMergeSubTypeWord.
    ///</summary>
    None = 7;
    ///<summary>
    ///  Equals to <see cref="F:Aspose.Words.Settings.OdsoDataSourceType.None" />
    ///  .
    ///</summary>
    Default_ = 7;
    ///<summary>
    ///  Specifies that a given document has been connected to a legacy document format supported by the producing application
    ///  Possibly wdMergeSubTypeWord2000.
    ///</summary>
    Legacy = 8;
    ///<summary>
    ///  Specifies that a given document has been connected to a data source which aggregates other data sources.
    ///</summary>
    Master = 9;
  end;


  //-------------namespace: Aspose.Words.Settings----------------
  ///<summary>
  ///  Specifies the possible types used to indicate if a given mail merge field has been mapped to a column in the given external data source.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Settings.OdsoFieldMapData.Type" />
  [DNTypeName('Aspose.Words.Settings.OdsoFieldMappingType')]
  DNOdsoFieldMappingType = type Integer;
  DNOdsoFieldMappingTypeHelper = record helper for DNOdsoFieldMappingType
  public const
    ///<summary>
    ///  Specifies that the mail merge field has been mapped to a column in the given external data source.
    ///</summary>
    Column = 0;
    ///<summary>
    ///  Specifies that the mail merge field has not been mapped to a column in the given external data source.
    ///</summary>
    Null = 1;
    ///<summary>
    ///  Equals to <see cref="F:Aspose.Words.Settings.OdsoFieldMappingType.Null" />
    ///  .
    ///</summary>
    Default_ = 1;
  end;


  //-------------namespace: Aspose.Words.Settings----------------
  ///<summary>
  ///  Possible values for the view mode in Microsoft Word.
  ///</summary>
  ///<seealso cref="T:Aspose.Words.Settings.ViewOptions" />
  ///<seealso cref="P:Aspose.Words.Settings.ViewOptions.ViewType" />
  [DNTypeName('Aspose.Words.Settings.ViewType')]
  DNViewType = type Integer;
  DNViewTypeHelper = record helper for DNViewType
  public const
    ///<summary>
    ///  The document shall be rendered in the default view of the application.
    ///</summary>
    None = 0;
    ///<summary>
    ///  The document shall be rendered in the default view of the application.
    ///</summary>
    Reading = 0;
    ///<summary>
    ///  The document shall be opened in a view that displays the document as it will print.
    ///</summary>
    PageLayout = 1;
    ///<summary>
    ///  The document shall be rendered in a view optimized for outlining or creating long documents.
    ///</summary>
    Outline = 3;
    ///<summary>
    ///  The document shall be rendered in a view optimized for outlining or creating long documents.
    ///</summary>
    Normal = 4;
    ///<summary>
    ///  The document shall be rendered in a view mimicking the way this document would be displayed
    ///  in a web page.
    ///</summary>
    Web = 5;
  end;


  //-------------namespace: Aspose.Words.Settings----------------
  ///<summary>
  ///  Possible values for how large or small the document appears on the screen in Microsoft Word.
  ///</summary>
  ///<seealso cref="T:Aspose.Words.Settings.ViewOptions" />
  ///<seealso cref="P:Aspose.Words.Settings.ViewOptions.ZoomType" />
  [DNTypeName('Aspose.Words.Settings.ZoomType')]
  DNZoomType = type Integer;
  DNZoomTypeHelper = record helper for DNZoomType
  public const
    ///<summary>
    ///  Zoom percentage is set explicitly. It is not recalculated automatically when control size changes.
    ///</summary>
    Custom = 0;
    ///<summary>
    ///  Indicates to use the explicit zoom percentage. Same as <see cref="F:Aspose.Words.Settings.ZoomType.Custom" />
    ///  .
    ///</summary>
    None = 0;
    ///<summary>
    ///  Zoom percentage is automatically recalculated to fit one full page.
    ///</summary>
    FullPage = 1;
    ///<summary>
    ///  Zoom percentage is automatically recalculated to fit page width.
    ///</summary>
    PageWidth = 2;
    ///<summary>
    ///  Zoom percentage is automatically recalculated to fit text.
    ///</summary>
    TextFit = 3;
  end;


  //-------------namespace: Aspose.Words.Shaping----------------
  [DNTypeName('Aspose.Words.Shaping.Direction')]
  DNDirection = type Integer;
  DNDirectionHelper = record helper for DNDirection
  public const
    Default_ = 0;
    LTR = 0;
    RTL = 1;
    TTB = 2;
    BTT = 3;
  end;


  //-------------namespace: Aspose.Words.Shaping----------------
  [DNTypeName('Aspose.Words.Shaping.FontFeature')]
  DNFontFeature = type Integer;
  DNFontFeatureHelper = record helper for DNFontFeature
  public const
    GlyphCompositionDecomposition = 1667460464;
    ContextualLigatures = 1668049255;
    DiscretionaryLigatures = 1684826471;
    HistoricalLigatures = 1751935335;
    Kerning = 1801810542;
    StandardLigatures = 1818847073;
    LiningFigures = 1819178349;
    OldstyleFigures = 1869509997;
    ProportionalFigures = 1886287213;
    RequiredLigatures = 1919707495;
    StylisticSet01 = 1936928817;
    StylisticSet02 = 1936928818;
    StylisticSet03 = 1936928819;
    StylisticSet04 = 1936928820;
    StylisticSet05 = 1936928821;
    StylisticSet06 = 1936928822;
    StylisticSet07 = 1936928823;
    StylisticSet08 = 1936928824;
    StylisticSet09 = 1936928825;
    StylisticSet10 = 1936929072;
    StylisticSet11 = 1936929073;
    StylisticSet12 = 1936929074;
    StylisticSet13 = 1936929075;
    StylisticSet14 = 1936929076;
    StylisticSet15 = 1936929077;
    StylisticSet16 = 1936929078;
    StylisticSet17 = 1936929079;
    StylisticSet18 = 1936929080;
    StylisticSet19 = 1936929081;
    StylisticSet20 = 1936929328;
    TabularFigures = 1953396077;
    VerticalAlternates = 1986359924;
    VerticalAlternatesAndRotation = 1987212338;
  end;


  //-------------namespace: Aspose.Words.Shaping----------------
  [DNTypeName('Aspose.Words.Shaping.UnicodeScript')]
  DNUnicodeScript = type Integer;
  DNUnicodeScriptHelper = record helper for DNUnicodeScript
  public const
    Adlam = 1097100397;
    Caucasian_Albanian = 1097295970;
    Ahom = 1097363309;
    Arabic = 1098015074;
    Imperial_Aramaic = 1098018153;
    Armenian = 1098018158;
    Avestan = 1098281844;
    Balinese = 1113681001;
    Bamum = 1113681269;
    Bassa_Vah = 1113682803;
    Batak = 1113683051;
    Bengali = 1113943655;
    Bhaiksuki = 1114139507;
    Bopomofo = 1114599535;
    Brahmi = 1114792296;
    Braille = 1114792297;
    Buginese = 1114990441;
    Buhid = 1114990692;
    Chakma = 1130457965;
    Canadian_Aboriginal = 1130458739;
    Carian = 1130459753;
    Cham = 1130914157;
    Cherokee = 1130915186;
    Chorasmian = 1130918515;
    Coptic = 1131376756;
    Cypriot = 1131442804;
    Cyrillic = 1132032620;
    Devanagari = 1147500129;
    Dives_Akuru = 1147756907;
    Dogra = 1148151666;
    Deseret = 1148416628;
    Duployan = 1148547180;
    Egyptian_Hieroglyphs = 1164409200;
    Elbasan = 1164730977;
    Elymaic = 1164736877;
    Ethiopic = 1165256809;
    Georgian = 1197830002;
    Glagolitic = 1198285159;
    Gunjala_Gondi = 1198485095;
    Masaram_Gondi = 1198485101;
    Gothic = 1198486632;
    Grantha = 1198678382;
    Greek = 1198679403;
    Gujarati = 1198877298;
    Gurmukhi = 1198879349;
    Hangul = 1214344807;
    Han = 1214344809;
    Hanunoo = 1214344815;
    Hatran = 1214346354;
    Hebrew = 1214603890;
    Hiragana = 1214870113;
    Anatolian_Hieroglyphs = 1215067511;
    Pahawh_Hmong = 1215131239;
    Nyiakeng_Puachue_Hmong = 1215131248;
    Katakana_Or_Hiragana = 1215458164;
    Old_Hungarian = 1215655527;
    Old_Italic = 1232363884;
    Javanese = 1247901281;
    Kayah_Li = 1264675945;
    Katakana = 1264676449;
    Kharoshthi = 1265131890;
    Khmer = 1265134962;
    Khojki = 1265135466;
    Khitan_Small_Script = 1265202291;
    Kannada = 1265525857;
    Kaithi = 1265920105;
    Tai_Tham = 1281453665;
    Lao = 1281453935;
    Latin = 1281455214;
    Lepcha = 1281716323;
    Limbu = 1281977698;
    Linear_A = 1281977953;
    Linear_B = 1281977954;
    Lisu = 1281979253;
    Lycian = 1283023721;
    Lydian = 1283023977;
    Mahajani = 1298229354;
    Makasar = 1298230113;
    Mandaic = 1298230884;
    Manichaean = 1298230889;
    Marchen = 1298231907;
    Medefaidrin = 1298490470;
    Mende_Kikakui = 1298493028;
    Meroitic_Cursive = 1298494051;
    Meroitic_Hieroglyphs = 1298494063;
    Malayalam = 1298954605;
    Modi = 1299145833;
    Mongolian = 1299148391;
    Mro = 1299345263;
    Meetei_Mayek = 1299473769;
    Multani = 1299541108;
    Myanmar = 1299803506;
    Nandinagari = 1315008100;
    Old_North_Arabian = 1315009122;
    Nabataean = 1315070324;
    Newa = 1315272545;
    Nko = 1315663727;
    Nushu = 1316186229;
    Ogham = 1332175213;
    Ol_Chiki = 1332503403;
    Old_Turkic = 1332898664;
    Oriya = 1332902241;
    Osage = 1332963173;
    Osmanya = 1332964705;
    Palmyrene = 1348562029;
    Pau_Cin_Hau = 1348564323;
    Old_Permic = 1348825709;
    Phags_Pa = 1349017959;
    Inscriptional_Pahlavi = 1349020777;
    Psalter_Pahlavi = 1349020784;
    Phoenician = 1349021304;
    Miao = 1349284452;
    Inscriptional_Parthian = 1349678185;
    Rejang = 1382706791;
    Hanifi_Rohingya = 1383032935;
    Runic = 1383427698;
    Samaritan = 1398893938;
    Old_South_Arabian = 1398895202;
    Saurashtra = 1398895986;
    SignWriting = 1399287415;
    Shavian = 1399349623;
    Sharada = 1399353956;
    Siddham = 1399415908;
    Khudawadi = 1399418468;
    Sinhala = 1399418472;
    Sogdian = 1399809892;
    Old_Sogdian = 1399809903;
    Sora_Sompeng = 1399812705;
    Soyombo = 1399814511;
    Sundanese = 1400204900;
    Syloti_Nagri = 1400466543;
    Syriac = 1400468067;
    Tagbanwa = 1415669602;
    Takri = 1415670642;
    Tai_Le = 1415670885;
    New_Tai_Lue = 1415670901;
    Tamil = 1415671148;
    Tangut = 1415671399;
    Tai_Viet = 1415673460;
    Telugu = 1415933045;
    Tifinagh = 1415999079;
    Tagalog = 1416064103;
    Thaana = 1416126817;
    Thai = 1416126825;
    Tibetan = 1416192628;
    Tirhuta = 1416196712;
    Ugaritic = 1432838514;
    Vai = 1449224553;
    Warang_Citi = 1466004065;
    Wancho = 1466132591;
    Old_Persian = 1483761007;
    Cuneiform = 1483961720;
    Yezidi = 1499822697;
    Yi = 1500080489;
    Zanabazar_Square = 1516334690;
    Inherited_ = 1516858984;
    Common = 1517910393;
    Unknown = 1517976186;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Text of a Word document is stored in stories. <b>StoryType</b>
  ///  identifies a story.
  ///</summary>
  [DNTypeName('Aspose.Words.StoryType')]
  DNStoryType = type Integer;
  DNStoryTypeHelper = record helper for DNStoryType
  public const
    ///<summary>
    ///  Default value. There is no such story in the document.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Contains the main text of the document, represented by <see cref="T:Aspose.Words.Body" />
    ///  .
    ///</summary>
    MainText = 1;
    ///<summary>
    ///  Contains footnote text, represented by <see cref="T:Aspose.Words.Notes.Footnote" />
    ///  .
    ///</summary>
    Footnotes = 2;
    ///<summary>
    ///  Contains endnotes text, represented by <see cref="T:Aspose.Words.Notes.Footnote" />
    ///  .
    ///</summary>
    Endnotes = 3;
    ///<summary>
    ///  Contains document comments (annotations), represented by <see cref="T:Aspose.Words.Comment" />
    ///  .
    ///</summary>
    Comments = 4;
    ///<summary>
    ///  Contains shape or textbox text, represented by <see cref="T:Aspose.Words.Drawing.Shape" />
    ///  .
    ///</summary>
    Textbox = 5;
    ///<summary>
    ///  Contains text of the even pages header, represented by <see cref="T:Aspose.Words.HeaderFooter" />
    ///  .
    ///</summary>
    EvenPagesHeader = 6;
    ///<summary>
    ///  Contains text of the primary header. When header is different for odd and even pages,
    ///  contains text of the odd pages header. Represented by <see cref="T:Aspose.Words.HeaderFooter" />
    ///  .
    ///</summary>
    PrimaryHeader = 7;
    ///<summary>
    ///  Contains text of the even pages footer, represented by <see cref="T:Aspose.Words.HeaderFooter" />
    ///  .
    ///</summary>
    EvenPagesFooter = 8;
    ///<summary>
    ///  Contains text of the primary footer. When footer is different for odd and even pages,
    ///  contains text of the odd pages footer. Represented by <see cref="T:Aspose.Words.HeaderFooter" />
    ///  .
    ///</summary>
    PrimaryFooter = 9;
    ///<summary>
    ///  Contains text of the first page header, represented by <see cref="T:Aspose.Words.HeaderFooter" />
    ///  .
    ///</summary>
    FirstPageHeader = 10;
    ///<summary>
    ///  Contains text of the first page footer, represented by <see cref="T:Aspose.Words.HeaderFooter" />
    ///  .
    ///</summary>
    FirstPageFooter = 11;
    ///<summary>
    ///  Contains the text of the footnote separator, represented by <see cref="T:Aspose.Words.Notes.FootnoteSeparator" />
    ///  .
    ///</summary>
    FootnoteSeparator = 12;
    ///<summary>
    ///  Contains the text of the footnote continuation separator, represented by <see cref="T:Aspose.Words.Notes.FootnoteSeparator" />
    ///  .
    ///</summary>
    FootnoteContinuationSeparator = 13;
    ///<summary>
    ///  Contains the text of the footnote continuation notice separator, represented by <see cref="T:Aspose.Words.Notes.FootnoteSeparator" />
    ///  .
    ///</summary>
    FootnoteContinuationNotice = 14;
    ///<summary>
    ///  Contains the text of the endnote separator, represented by <see cref="T:Aspose.Words.Notes.FootnoteSeparator" />
    ///  .
    ///</summary>
    EndnoteSeparator = 15;
    ///<summary>
    ///  Contains the text of the endnote continuation separator, represented by <see cref="T:Aspose.Words.Notes.FootnoteSeparator" />
    ///  .
    ///</summary>
    EndnoteContinuationSeparator = 16;
    ///<summary>
    ///  Contains the text of the endnote continuation notice separator, represented by <see cref="T:Aspose.Words.Notes.FootnoteSeparator" />
    ///  .
    ///</summary>
    EndnoteContinuationNotice = 17;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Locale independent style identifier.
  ///</summary>
  ///<remarks><p>The names of built-in styles in MS Word are localized for different languages.
  ///  Using a style identifier you can find the correct style regardless of the document language.</p>
  ///  <p>All user defined styles are assigned the StyleIdentifier.User value.</p>
  ///</remarks>
  ///<dev>DO NOT RENUMBER! These values are important for DOC import/export.</dev><dev>Please note that the CURRENT USED MAXIMUM COUNT is SmartLink (371).</dev>
  [DNTypeName('Aspose.Words.StyleIdentifier')]
  DNStyleIdentifier = type Integer;
  DNStyleIdentifierHelper = record helper for DNStyleIdentifier
  public const
    ///<summary>
    ///  The Normal style.
    ///</summary>
    Normal = 0;
    ///<summary>
    ///  The Heading 1 style.
    ///</summary>
    Heading1 = 1;
    ///<summary>
    ///  The Heading 2 style.
    ///</summary>
    Heading2 = 2;
    ///<summary>
    ///  The Heading 3 style.
    ///</summary>
    Heading3 = 3;
    ///<summary>
    ///  The Heading 4 style.
    ///</summary>
    Heading4 = 4;
    ///<summary>
    ///  The Heading 5 style.
    ///</summary>
    Heading5 = 5;
    ///<summary>
    ///  The Heading 6 style.
    ///</summary>
    Heading6 = 6;
    ///<summary>
    ///  The Heading 7 style.
    ///</summary>
    Heading7 = 7;
    ///<summary>
    ///  The Heading 8 style.
    ///</summary>
    Heading8 = 8;
    ///<summary>
    ///  The Heading 9 style.
    ///</summary>
    Heading9 = 9;
    ///<summary></summary>
    Index1 = 10;
    ///<summary></summary>
    Index2 = 11;
    ///<summary></summary>
    Index3 = 12;
    ///<summary></summary>
    Index4 = 13;
    ///<summary></summary>
    Index5 = 14;
    ///<summary></summary>
    Index6 = 15;
    ///<summary></summary>
    Index7 = 16;
    ///<summary></summary>
    Index8 = 17;
    ///<summary></summary>
    Index9 = 18;
    ///<summary></summary>
    Toc1 = 19;
    ///<summary></summary>
    Toc2 = 20;
    ///<summary></summary>
    Toc3 = 21;
    ///<summary></summary>
    Toc4 = 22;
    ///<summary></summary>
    Toc5 = 23;
    ///<summary></summary>
    Toc6 = 24;
    ///<summary></summary>
    Toc7 = 25;
    ///<summary></summary>
    Toc8 = 26;
    ///<summary></summary>
    Toc9 = 27;
    ///<summary>
    ///  The Normal Indent style.
    ///</summary>
    NormalIndent = 28;
    ///<summary>
    ///  The Footnote Text style.
    ///</summary>
    FootnoteText = 29;
    ///<summary>
    ///  The Annotation (Comment) Text style.
    ///</summary>
    CommentText = 30;
    ///<summary>
    ///  The Header style.
    ///</summary>
    Header = 31;
    ///<summary>
    ///  The Footer style.
    ///</summary>
    Footer = 32;
    ///<summary>
    ///  The Index Heading style.
    ///</summary>
    IndexHeading = 33;
    ///<summary></summary>
    Caption = 34;
    ///<summary>
    ///  The Table of Figures style.
    ///</summary>
    TableOfFigures = 35;
    ///<summary>
    ///  The Envelope Address style.
    ///</summary>
    EnvelopeAddress = 36;
    ///<summary>
    ///  The Envelope Return style.
    ///</summary>
    EnvelopeReturn = 37;
    ///<summary>
    ///  The Footnote Reference style.
    ///</summary>
    FootnoteReference = 38;
    ///<summary>
    ///  The Annotation (Comment) Reference style.
    ///</summary>
    CommentReference = 39;
    ///<summary>
    ///  The Line Number style.
    ///</summary>
    LineNumber = 40;
    ///<summary>
    ///  The Page Number style.
    ///</summary>
    PageNumber = 41;
    ///<summary>
    ///  The Endnote Reference style.
    ///</summary>
    EndnoteReference = 42;
    ///<summary>
    ///  The Endnote Text style.
    ///</summary>
    EndnoteText = 43;
    ///<summary></summary>
    TableOfAuthorities = 44;
    ///<summary></summary>
    Macro = 45;
    ///<summary></summary>
    ToaHeading = 46;
    ///<summary>
    ///  The List style.
    ///</summary>
    List = 47;
    ///<summary>
    ///  The List Bullet style.
    ///</summary>
    ListBullet = 48;
    ///<summary>
    ///  The List Number style.
    ///</summary>
    ListNumber = 49;
    ///<summary></summary>
    List2 = 50;
    ///<summary></summary>
    List3 = 51;
    ///<summary></summary>
    List4 = 52;
    ///<summary></summary>
    List5 = 53;
    ///<summary></summary>
    ListBullet2 = 54;
    ///<summary></summary>
    ListBullet3 = 55;
    ///<summary></summary>
    ListBullet4 = 56;
    ///<summary></summary>
    ListBullet5 = 57;
    ///<summary></summary>
    ListNumber2 = 58;
    ///<summary></summary>
    ListNumber3 = 59;
    ///<summary></summary>
    ListNumber4 = 60;
    ///<summary></summary>
    ListNumber5 = 61;
    ///<summary>
    ///  The Title style.
    ///</summary>
    Title = 62;
    ///<summary></summary>
    Closing = 63;
    ///<summary></summary>
    Signature = 64;
    ///<summary>
    ///  The Default Paragraph Font style.
    ///</summary>
    DefaultParagraphFont = 65;
    ///<summary>
    ///  The Body Text style.
    ///</summary>
    BodyText = 66;
    ///<summary></summary>
    BodyTextInd = 67;
    ///<summary></summary>
    ListContinue = 68;
    ///<summary></summary>
    ListContinue2 = 69;
    ///<summary></summary>
    ListContinue3 = 70;
    ///<summary></summary>
    ListContinue4 = 71;
    ///<summary></summary>
    ListContinue5 = 72;
    ///<summary></summary>
    MessageHeader = 73;
    ///<summary></summary>
    Subtitle = 74;
    ///<summary></summary>
    Salutation = 75;
    ///<summary></summary>
    Date = 76;
    ///<summary></summary>
    BodyText1I = 77;
    ///<summary></summary>
    BodyText1I2 = 78;
    ///<summary></summary>
    NoteHeading = 79;
    ///<summary></summary>
    BodyText2 = 80;
    ///<summary></summary>
    BodyText3 = 81;
    ///<summary></summary>
    BodyTextInd2 = 82;
    ///<summary></summary>
    BodyTextInd3 = 83;
    ///<summary></summary>
    BlockText = 84;
    ///<summary>
    ///  The Hyperlink style.
    ///</summary>
    Hyperlink = 85;
    ///<summary></summary>
    FollowedHyperlink = 86;
    ///<summary></summary>
    Strong = 87;
    ///<summary></summary>
    Emphasis = 88;
    ///<summary></summary>
    DocumentMap = 89;
    ///<summary></summary>
    PlainText = 90;
    ///<summary></summary>
    EmailSignature = 91;
    ///<summary></summary>
    HtmlTopOfForm = 92;
    ///<summary></summary>
    HtmlBottomOfForm = 93;
    ///<summary></summary>
    NormalWeb = 94;
    ///<summary></summary>
    HtmlAcronym = 95;
    ///<summary></summary>
    HtmlAddress = 96;
    ///<summary></summary>
    HtmlCite = 97;
    ///<summary></summary>
    HtmlCode = 98;
    ///<summary></summary>
    HtmlDefinition = 99;
    ///<summary></summary>
    HtmlKeyboard = 100;
    ///<summary></summary>
    HtmlPreformatted = 101;
    ///<summary></summary>
    HtmlSample = 102;
    ///<summary></summary>
    HtmlTypewriter = 103;
    ///<summary></summary>
    HtmlVariable = 104;
    ///<summary></summary>
    TableNormal = 105;
    ///<summary></summary>
    CommentSubject = 106;
    ///<summary></summary>
    NoList = 107;
    ///<summary>
    ///  The 1 / a / i style.
    ///</summary>
    OutlineList1 = 108;
    ///<summary>
    ///  The 1 / 1.1 / 1.1.1 style.
    ///</summary>
    OutlineList2 = 109;
    ///<summary>
    ///  The Article / Section style.
    ///</summary>
    OutlineList3 = 110;
    ///<summary></summary>
    TableSimple1 = 111;
    ///<summary></summary>
    TableSimple2 = 112;
    ///<summary></summary>
    TableSimple3 = 113;
    ///<summary></summary>
    TableClassic1 = 114;
    ///<summary></summary>
    TableClassic2 = 115;
    ///<summary></summary>
    TableClassic3 = 116;
    ///<summary></summary>
    TableClassic4 = 117;
    ///<summary></summary>
    TableColorful1 = 118;
    ///<summary></summary>
    TableColorful2 = 119;
    ///<summary></summary>
    TableColorful3 = 120;
    ///<summary></summary>
    TableColumns1 = 121;
    ///<summary></summary>
    TableColumns2 = 122;
    ///<summary></summary>
    TableColumns3 = 123;
    ///<summary></summary>
    TableColumns4 = 124;
    ///<summary></summary>
    TableColumns5 = 125;
    ///<summary></summary>
    TableGrid1 = 126;
    ///<summary></summary>
    TableGrid2 = 127;
    ///<summary></summary>
    TableGrid3 = 128;
    ///<summary></summary>
    TableGrid4 = 129;
    ///<summary></summary>
    TableGrid5 = 130;
    ///<summary></summary>
    TableGrid6 = 131;
    ///<summary></summary>
    TableGrid7 = 132;
    ///<summary></summary>
    TableGrid8 = 133;
    ///<summary></summary>
    TableList1 = 134;
    ///<summary></summary>
    TableList2 = 135;
    ///<summary></summary>
    TableList3 = 136;
    ///<summary></summary>
    TableList4 = 137;
    ///<summary></summary>
    TableList5 = 138;
    ///<summary></summary>
    TableList6 = 139;
    ///<summary></summary>
    TableList7 = 140;
    ///<summary></summary>
    TableList8 = 141;
    ///<summary></summary>
    Table3DEffects1 = 142;
    ///<summary></summary>
    Table3DEffects2 = 143;
    ///<summary></summary>
    Table3DEffects3 = 144;
    ///<summary></summary>
    TableContemporary = 145;
    ///<summary></summary>
    TableElegant = 146;
    ///<summary></summary>
    TableProfessional = 147;
    ///<summary></summary>
    TableSubtle1 = 148;
    ///<summary></summary>
    TableSubtle2 = 149;
    ///<summary></summary>
    TableWeb1 = 150;
    ///<summary></summary>
    TableWeb2 = 151;
    ///<summary></summary>
    TableWeb3 = 152;
    ///<summary></summary>
    BalloonText = 153;
    ///<summary></summary>
    TableGrid = 154;
    ///<summary></summary>
    TableTheme = 155;
    ///<summary></summary>
    PlaceholderText = 156;
    ///<summary></summary>
    NoSpacing = 157;
    ///<summary></summary>
    LightShading = 158;
    ///<summary></summary>
    LightList = 159;
    ///<summary></summary>
    LightGrid = 160;
    ///<summary></summary>
    MediumShading1 = 161;
    ///<summary></summary>
    MediumShading2 = 162;
    ///<summary></summary>
    MediumList1 = 163;
    ///<summary></summary>
    MediumList2 = 164;
    ///<summary></summary>
    MediumGrid1 = 165;
    ///<summary></summary>
    MediumGrid2 = 166;
    ///<summary></summary>
    MediumGrid3 = 167;
    ///<summary></summary>
    DarkList = 168;
    ///<summary></summary>
    ColorfulShading = 169;
    ///<summary></summary>
    ColorfulList = 170;
    ///<summary></summary>
    ColorfulGrid = 171;
    ///<summary></summary>
    LightShadingAccent1 = 172;
    ///<summary></summary>
    LightListAccent1 = 173;
    ///<summary></summary>
    LightGridAccent1 = 174;
    ///<summary></summary>
    MediumShading1Accent1 = 175;
    ///<summary></summary>
    MediumShading2Accent1 = 176;
    ///<summary></summary>
    MediumList1Accent1 = 177;
    ///<summary></summary>
    Revision = 178;
    ///<summary></summary>
    ListParagraph = 179;
    ///<summary></summary>
    Quote = 180;
    ///<summary></summary>
    IntenseQuote = 181;
    ///<summary></summary>
    MediumList2Accent1 = 182;
    ///<summary></summary>
    MediumGrid1Accent1 = 183;
    ///<summary></summary>
    MediumGrid2Accent1 = 184;
    ///<summary></summary>
    MediumGrid3Accent1 = 185;
    ///<summary></summary>
    DarkListAccent1 = 186;
    ///<summary></summary>
    ColorfulShadingAccent1 = 187;
    ///<summary></summary>
    ColorfulListAccent1 = 188;
    ///<summary></summary>
    ColorfulGridAccent1 = 189;
    ///<summary></summary>
    LightShadingAccent2 = 190;
    ///<summary></summary>
    LightListAccent2 = 191;
    ///<summary></summary>
    LightGridAccent2 = 192;
    ///<summary></summary>
    MediumShading1Accent2 = 193;
    ///<summary></summary>
    MediumShading2Accent2 = 194;
    ///<summary></summary>
    MediumList1Accent2 = 195;
    ///<summary></summary>
    MediumList2Accent2 = 196;
    ///<summary></summary>
    MediumGrid1Accent2 = 197;
    ///<summary></summary>
    MediumGrid2Accent2 = 198;
    ///<summary></summary>
    MediumGrid3Accent2 = 199;
    ///<summary></summary>
    DarkListAccent2 = 200;
    ///<summary></summary>
    ColorfulShadingAccent2 = 201;
    ///<summary></summary>
    ColorfulListAccent2 = 202;
    ///<summary></summary>
    ColorfulGridAccent2 = 203;
    ///<summary></summary>
    LightShadingAccent3 = 204;
    ///<summary></summary>
    LightListAccent3 = 205;
    ///<summary></summary>
    LightGridAccent3 = 206;
    ///<summary></summary>
    MediumShading1Accent3 = 207;
    ///<summary></summary>
    MediumShading2Accent3 = 208;
    ///<summary></summary>
    MediumList1Accent3 = 209;
    ///<summary></summary>
    MediumList2Accent3 = 210;
    ///<summary></summary>
    MediumGrid1Accent3 = 211;
    ///<summary></summary>
    MediumGrid2Accent3 = 212;
    ///<summary></summary>
    MediumGrid3Accent3 = 213;
    ///<summary></summary>
    DarkListAccent3 = 214;
    ///<summary></summary>
    ColorfulShadingAccent3 = 215;
    ///<summary></summary>
    ColorfulListAccent3 = 216;
    ///<summary></summary>
    ColorfulGridAccent3 = 217;
    ///<summary></summary>
    LightShadingAccent4 = 218;
    ///<summary></summary>
    LightListAccent4 = 219;
    ///<summary></summary>
    LightGridAccent4 = 220;
    ///<summary></summary>
    MediumShading1Accent4 = 221;
    ///<summary></summary>
    MediumShading2Accent4 = 222;
    ///<summary></summary>
    MediumList1Accent4 = 223;
    ///<summary></summary>
    MediumList2Accent4 = 224;
    ///<summary></summary>
    MediumGrid1Accent4 = 225;
    ///<summary></summary>
    MediumGrid2Accent4 = 226;
    ///<summary></summary>
    MediumGrid3Accent4 = 227;
    ///<summary></summary>
    DarkListAccent4 = 228;
    ///<summary></summary>
    ColorfulShadingAccent4 = 229;
    ///<summary></summary>
    ColorfulListAccent4 = 230;
    ///<summary></summary>
    ColorfulGridAccent4 = 231;
    ///<summary></summary>
    LightShadingAccent5 = 232;
    ///<summary></summary>
    LightListAccent5 = 233;
    ///<summary></summary>
    LightGridAccent5 = 234;
    ///<summary></summary>
    MediumShading1Accent5 = 235;
    ///<summary></summary>
    MediumShading2Accent5 = 236;
    ///<summary></summary>
    MediumList1Accent5 = 237;
    ///<summary></summary>
    MediumList2Accent5 = 238;
    ///<summary></summary>
    MediumGrid1Accent5 = 239;
    ///<summary></summary>
    MediumGrid2Accent5 = 240;
    ///<summary></summary>
    MediumGrid3Accent5 = 241;
    ///<summary></summary>
    DarkListAccent5 = 242;
    ///<summary></summary>
    ColorfulShadingAccent5 = 243;
    ///<summary></summary>
    ColorfulListAccent5 = 244;
    ///<summary></summary>
    ColorfulGridAccent5 = 245;
    ///<summary></summary>
    LightShadingAccent6 = 246;
    ///<summary></summary>
    LightListAccent6 = 247;
    ///<summary></summary>
    LightGridAccent6 = 248;
    ///<summary></summary>
    MediumShading1Accent6 = 249;
    ///<summary></summary>
    MediumShading2Accent6 = 250;
    ///<summary></summary>
    MediumList1Accent6 = 251;
    ///<summary></summary>
    MediumList2Accent6 = 252;
    ///<summary></summary>
    MediumGrid1Accent6 = 253;
    ///<summary></summary>
    MediumGrid2Accent6 = 254;
    ///<summary></summary>
    MediumGrid3Accent6 = 255;
    ///<summary></summary>
    DarkListAccent6 = 256;
    ///<summary></summary>
    ColorfulShadingAccent6 = 257;
    ///<summary></summary>
    ColorfulListAccent6 = 258;
    ///<summary></summary>
    ColorfulGridAccent6 = 259;
    ///<summary></summary>
    SubtleEmphasis = 260;
    ///<summary></summary>
    IntenseEmphasis = 261;
    ///<summary></summary>
    SubtleReference = 262;
    ///<summary></summary>
    IntenseReference = 263;
    ///<summary></summary>
    BookTitle = 264;
    ///<summary></summary>
    Bibliography = 265;
    ///<summary></summary>
    TocHeading = 266;
    ///<summary>
    ///  Plain Table 1
    ///</summary>
    PlainTable1 = 267;
    ///<summary>
    ///  Plain Table 2
    ///</summary>
    PlainTable2 = 268;
    ///<summary>
    ///  Plain Table 3
    ///</summary>
    PlainTable3 = 269;
    ///<summary>
    ///  Plain Table 4
    ///</summary>
    PlainTable4 = 270;
    ///<summary>
    ///  Plain Table 5
    ///</summary>
    PlainTable5 = 271;
    ///<summary>
    ///  Table Grid Light
    ///</summary>
    TableGridLight = 272;
    ///<summary>
    ///  Grid Table 1 Light
    ///</summary>
    GridTable1Light = 273;
    ///<summary>
    ///  Grid Table 2
    ///</summary>
    GridTable2 = 274;
    ///<summary>
    ///  Grid Table 3
    ///</summary>
    GridTable3 = 275;
    ///<summary>
    ///  Grid Table 4
    ///</summary>
    GridTable4 = 276;
    ///<summary>
    ///  Grid Table 5 Dark
    ///</summary>
    GridTable5Dark = 277;
    ///<summary>
    ///  Grid Table 6 Colorful
    ///</summary>
    GridTable6Colorful = 278;
    ///<summary>
    ///  Grid Table 7 Colorful
    ///</summary>
    GridTable7Colorful = 279;
    ///<summary>
    ///  Grid Table 1 Light - Accent 1
    ///</summary>
    GridTable1LightAccent1 = 280;
    ///<summary>
    ///  Grid Table 2 - Accent 1
    ///</summary>
    GridTable2Accent1 = 281;
    ///<summary>
    ///  Grid Table 3 - Accent 1
    ///</summary>
    GridTable3Accent1 = 282;
    ///<summary>
    ///  Grid Table 4 - Accent 1
    ///</summary>
    GridTable4Accent1 = 283;
    ///<summary>
    ///  Grid Table 5 Dark - Accent 1
    ///</summary>
    GridTable5DarkAccent1 = 284;
    ///<summary>
    ///  Grid Table 6 Colorful - Accent 1
    ///</summary>
    GridTable6ColorfulAccent1 = 285;
    ///<summary>
    ///  Grid Table 7 Colorful - Accent 1
    ///</summary>
    GridTable7ColorfulAccent1 = 286;
    ///<summary>
    ///  Grid Table 1 Light - Accent 2
    ///</summary>
    GridTable1LightAccent2 = 287;
    ///<summary>
    ///  Grid Table 2 - Accent 2
    ///</summary>
    GridTable2Accent2 = 288;
    ///<summary>
    ///  Grid Table 3 - Accent 2
    ///</summary>
    GridTable3Accent2 = 289;
    ///<summary>
    ///  Grid Table 4 - Accent 2
    ///</summary>
    GridTable4Accent2 = 290;
    ///<summary>
    ///  Grid Table 5 Dark - Accent 2
    ///</summary>
    GridTable5DarkAccent2 = 291;
    ///<summary>
    ///  Grid Table 6 Colorful - Accent 2
    ///</summary>
    GridTable6ColorfulAccent2 = 292;
    ///<summary>
    ///  Grid Table 7 Colorful - Accent 2
    ///</summary>
    GridTable7ColorfulAccent2 = 293;
    ///<summary>
    ///  Grid Table 1 Light - Accent 3
    ///</summary>
    GridTable1LightAccent3 = 294;
    ///<summary>
    ///  Grid Table 2 - Accent 3
    ///</summary>
    GridTable2Accent3 = 295;
    ///<summary>
    ///  Grid Table 3 - Accent 3
    ///</summary>
    GridTable3Accent3 = 296;
    ///<summary>
    ///  Grid Table 4 - Accent 3
    ///</summary>
    GridTable4Accent3 = 297;
    ///<summary>
    ///  Grid Table 5 Dark - Accent 3
    ///</summary>
    GridTable5DarkAccent3 = 298;
    ///<summary>
    ///  Grid Table 6 Colorful - Accent 3
    ///</summary>
    GridTable6ColorfulAccent3 = 299;
    ///<summary>
    ///  Grid Table 7 Colorful - Accent 3
    ///</summary>
    GridTable7ColorfulAccent3 = 300;
    ///<summary>
    ///  Grid Table 1 Light - Accent 4
    ///</summary>
    GridTable1LightAccent4 = 301;
    ///<summary>
    ///  Grid Table 2 - Accent 4
    ///</summary>
    GridTable2Accent4 = 302;
    ///<summary>
    ///  Grid Table 3 - Accent 4
    ///</summary>
    GridTable3Accent4 = 303;
    ///<summary>
    ///  Grid Table 4 - Accent 4
    ///</summary>
    GridTable4Accent4 = 304;
    ///<summary>
    ///  Grid Table 5 Dark - Accent 4
    ///</summary>
    GridTable5DarkAccent4 = 305;
    ///<summary>
    ///  Grid Table 6 Colorful - Accent 4
    ///</summary>
    GridTable6ColorfulAccent4 = 306;
    ///<summary>
    ///  Grid Table 7 Colorful - Accent 4
    ///</summary>
    GridTable7ColorfulAccent4 = 307;
    ///<summary>
    ///  Grid Table 1 Light - Accent 5
    ///</summary>
    GridTable1LightAccent5 = 308;
    ///<summary>
    ///  Grid Table 2 - Accent 5
    ///</summary>
    GridTable2Accent5 = 309;
    ///<summary>
    ///  Grid Table 3 - Accent 5
    ///</summary>
    GridTable3Accent5 = 310;
    ///<summary>
    ///  Grid Table 4 - Accent 5
    ///</summary>
    GridTable4Accent5 = 311;
    ///<summary>
    ///  Grid Table 5 Dark - Accent 5
    ///</summary>
    GridTable5DarkAccent5 = 312;
    ///<summary>
    ///  Grid Table 6 Colorful - Accent 5
    ///</summary>
    GridTable6ColorfulAccent5 = 313;
    ///<summary>
    ///  Grid Table 7 Colorful - Accent 5
    ///</summary>
    GridTable7ColorfulAccent5 = 314;
    ///<summary>
    ///  Grid Table 1 Light - Accent 6
    ///</summary>
    GridTable1LightAccent6 = 315;
    ///<summary>
    ///  Grid Table 2 - Accent 6
    ///</summary>
    GridTable2Accent6 = 316;
    ///<summary>
    ///  Grid Table 3 - Accent 6
    ///</summary>
    GridTable3Accent6 = 317;
    ///<summary>
    ///  Grid Table 4 - Accent 6
    ///</summary>
    GridTable4Accent6 = 318;
    ///<summary>
    ///  Grid Table 5 Dark - Accent 6
    ///</summary>
    GridTable5DarkAccent6 = 319;
    ///<summary>
    ///  Grid Table 6 Colorful - Accent 6
    ///</summary>
    GridTable6ColorfulAccent6 = 320;
    ///<summary>
    ///  Grid Table 7 Colorful - Accent 6
    ///</summary>
    GridTable7ColorfulAccent6 = 321;
    ///<summary>
    ///  List Table 1 Light
    ///</summary>
    ListTable1Light = 322;
    ///<summary>
    ///  List Table 2
    ///</summary>
    ListTable2 = 323;
    ///<summary>
    ///  List Table 3
    ///</summary>
    ListTable3 = 324;
    ///<summary>
    ///  List Table 4
    ///</summary>
    ListTable4 = 325;
    ///<summary>
    ///  List Table 5 Dark
    ///</summary>
    ListTable5Dark = 326;
    ///<summary>
    ///  List Table 6 Colorful
    ///</summary>
    ListTable6Colorful = 327;
    ///<summary>
    ///  List Table 7 Colorful
    ///</summary>
    ListTable7Colorful = 328;
    ///<summary>
    ///  List Table 1 Light - Accent 1
    ///</summary>
    ListTable1LightAccent1 = 329;
    ///<summary>
    ///  List Table 2 - Accent 1
    ///</summary>
    ListTable2Accent1 = 330;
    ///<summary>
    ///  List Table 3 - Accent 1
    ///</summary>
    ListTable3Accent1 = 331;
    ///<summary>
    ///  List Table 4 - Accent 1
    ///</summary>
    ListTable4Accent1 = 332;
    ///<summary>
    ///  List Table 5 Dark - Accent 1
    ///</summary>
    ListTable5DarkAccent1 = 333;
    ///<summary>
    ///  List Table 6 Colorful - Accent 1
    ///</summary>
    ListTable6ColorfulAccent1 = 334;
    ///<summary>
    ///  List Table 7 Colorful - Accent 1
    ///</summary>
    ListTable7ColorfulAccent1 = 335;
    ///<summary>
    ///  List Table 1 Light - Accent 2
    ///</summary>
    ListTable1LightAccent2 = 336;
    ///<summary>
    ///  List Table 2 - Accent 2
    ///</summary>
    ListTable2Accent2 = 337;
    ///<summary>
    ///  List Table 3 - Accent 2
    ///</summary>
    ListTable3Accent2 = 338;
    ///<summary>
    ///  List Table 4 - Accent 2
    ///</summary>
    ListTable4Accent2 = 339;
    ///<summary>
    ///  List Table 5 Dark - Accent 2
    ///</summary>
    ListTable5DarkAccent2 = 340;
    ///<summary>
    ///  List Table 6 Colorful - Accent 2
    ///</summary>
    ListTable6ColorfulAccent2 = 341;
    ///<summary>
    ///  List Table 7 Colorful - Accent 2
    ///</summary>
    ListTable7ColorfulAccent2 = 342;
    ///<summary>
    ///  List Table 1 Light - Accent 3
    ///</summary>
    ListTable1LightAccent3 = 343;
    ///<summary>
    ///  List Table 2 - Accent 3
    ///</summary>
    ListTable2Accent3 = 344;
    ///<summary>
    ///  List Table 3 - Accent 3
    ///</summary>
    ListTable3Accent3 = 345;
    ///<summary>
    ///  List Table 4 - Accent 3
    ///</summary>
    ListTable4Accent3 = 346;
    ///<summary>
    ///  List Table 5 Dark - Accent 3
    ///</summary>
    ListTable5DarkAccent3 = 347;
    ///<summary>
    ///  List Table 6 Colorful - Accent 3
    ///</summary>
    ListTable6ColorfulAccent3 = 348;
    ///<summary>
    ///  List Table 7 Colorful - Accent 3
    ///</summary>
    ListTable7ColorfulAccent3 = 349;
    ///<summary>
    ///  List Table 1 Light - Accent 4
    ///</summary>
    ListTable1LightAccent4 = 350;
    ///<summary>
    ///  List Table 2 - Accent 4
    ///</summary>
    ListTable2Accent4 = 351;
    ///<summary>
    ///  List Table 3 - Accent 4
    ///</summary>
    ListTable3Accent4 = 352;
    ///<summary>
    ///  List Table 4 - Accent 4
    ///</summary>
    ListTable4Accent4 = 353;
    ///<summary>
    ///  List Table 5 Dark - Accent 4
    ///</summary>
    ListTable5DarkAccent4 = 354;
    ///<summary>
    ///  List Table 6 Colorful - Accent 4
    ///</summary>
    ListTable6ColorfulAccent4 = 355;
    ///<summary>
    ///  List Table 7 Colorful - Accent 4
    ///</summary>
    ListTable7ColorfulAccent4 = 356;
    ///<summary>
    ///  List Table 1 Light - Accent 5
    ///</summary>
    ListTable1LightAccent5 = 357;
    ///<summary>
    ///  List Table 2 - Accent 5
    ///</summary>
    ListTable2Accent5 = 358;
    ///<summary>
    ///  List Table 3 - Accent 5
    ///</summary>
    ListTable3Accent5 = 359;
    ///<summary>
    ///  List Table 4 - Accent 5
    ///</summary>
    ListTable4Accent5 = 360;
    ///<summary>
    ///  List Table 5 Dark - Accent 5
    ///</summary>
    ListTable5DarkAccent5 = 361;
    ///<summary>
    ///  List Table 6 Colorful - Accent 5
    ///</summary>
    ListTable6ColorfulAccent5 = 362;
    ///<summary>
    ///  List Table 7 Colorful - Accent 5
    ///</summary>
    ListTable7ColorfulAccent5 = 363;
    ///<summary>
    ///  List Table 1 Light - Accent 6
    ///</summary>
    ListTable1LightAccent6 = 364;
    ///<summary>
    ///  List Table 2 - Accent 6
    ///</summary>
    ListTable2Accent6 = 365;
    ///<summary>
    ///  List Table 3 - Accent 6
    ///</summary>
    ListTable3Accent6 = 366;
    ///<summary>
    ///  List Table 4 - Accent 6
    ///</summary>
    ListTable4Accent6 = 367;
    ///<summary>
    ///  List Table 5 Dark - Accent 6
    ///</summary>
    ListTable5DarkAccent6 = 368;
    ///<summary>
    ///  List Table 6 Colorful - Accent 6
    ///</summary>
    ListTable6ColorfulAccent6 = 369;
    ///<summary>
    ///  List Table 7 Colorful - Accent 6
    ///</summary>
    ListTable7ColorfulAccent6 = 370;
    ///<summary>
    ///  The Smart Link style.
    ///</summary>
    SmartLink = 371;
    ///<summary>
    ///  A user defined style.
    ///</summary>
    User = 4094;
    ///<summary>
    ///  Reserved for internal use.
    ///</summary>
    Nil_ = 12287;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Represents type of the style.
  ///</summary>
  [DNTypeName('Aspose.Words.StyleType')]
  DNStyleType = type Integer;
  DNStyleTypeHelper = record helper for DNStyleType
  public const
    ///<summary>
    ///  The style is a paragraph style.
    ///</summary>
    Paragraph = 1;
    ///<summary>
    ///  The style is a character style.
    ///</summary>
    Character = 2;
    ///<summary>
    ///  The style is a table style.
    ///</summary>
    Table = 3;
    ///<summary>
    ///  The style is a list style.
    ///</summary>
    List = 4;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Specifies the alignment/type of a tab stop.
  ///</summary>
  [DNTypeName('Aspose.Words.TabAlignment')]
  DNTabAlignment = type Integer;
  DNTabAlignmentHelper = record helper for DNTabAlignment
  public const
    ///<summary>
    ///  Left-aligns the text after the tab stop.
    ///</summary>
    Left = 0;
    ///<summary>
    ///  Centers the text around the tab stop.
    ///</summary>
    Center = 1;
    ///<summary>
    ///  Right-aligns the text at the tab stop.
    ///</summary>
    Right = 2;
    ///<summary>
    ///  Aligns the text at the decimal dot.
    ///</summary>
    Decimal = 3;
    ///<summary>
    ///  Draws a vertical bar at the tab stop position.
    ///</summary>
    Bar = 4;
    ///<summary>
    ///  The tab is a delimiter between the number/bullet and text in a list item.
    ///</summary>
    List = 6;
    ///<summary>
    ///  Clears any tab stop in this position.
    ///</summary>
    Clear = 7;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Specifies the type of the leader line displayed under the tab character.
  ///</summary>
  [DNTypeName('Aspose.Words.TabLeader')]
  DNTabLeader = type Integer;
  DNTabLeaderHelper = record helper for DNTabLeader
  public const
    ///<summary>
    ///  No leader line is displayed.
    ///</summary>
    None = 0;
    ///<summary>
    ///  The leader line is made up from dots.
    ///</summary>
    Dots = 1;
    ///<summary>
    ///  The leader line is made up from dashes.
    ///</summary>
    Dashes = 2;
    ///<summary>
    ///  The leader line is a single line.
    ///</summary>
    Line = 3;
    ///<summary>
    ///  The leader line is a single thick line.
    ///</summary>
    Heavy = 4;
    ///<summary>
    ///  The leader line is made up from middle-dots.
    ///</summary>
    MiddleDot = 5;
  end;


  //-------------namespace: Aspose.Words.Tables----------------
  ///<summary>
  ///  Determines how Aspose.Words resizes the table when you invoke the <see cref="M:Aspose.Words.Tables.Table.AutoFit(Aspose.Words.Tables.AutoFitBehavior)" />
  ///  method.
  ///</summary>
  [DNTypeName('Aspose.Words.Tables.AutoFitBehavior')]
  DNAutoFitBehavior = type Integer;
  DNAutoFitBehaviorHelper = record helper for DNAutoFitBehavior
  public const
    ///<summary><para>Aspose.Words enables the AutoFit option, removes the preferred width from the table and all cells and then updates the table layout.</para><para>In the resulting table, cell widths are updated to fit the table contents. Most likely, the table will shrink.</para></summary>
    AutoFitToContents = 0;
    ///<summary><para>When you use this value, Aspose.Words enables the AutoFit option, sets the preferred width for the table to 100%,
    ///  removes preferred widths from all cells and then updates the table layout.</para><para>As a result, the table occupies all available width and the cell widths are updated to fit table contents.</para></summary>
    AutoFitToWindow = 1;
    ///<summary><para>Aspose.Words disables the AutoFit option and removes the preferred with from the table.</para><para>The widths of the cells remain as they are specified by their <see cref="P:Aspose.Words.Tables.CellFormat.Width" />
    ///  properties.</para></summary>
    FixedColumnWidths = 2;
  end;


  //-------------namespace: Aspose.Words.Tables----------------
  ///<summary>
  ///  Specifies how a cell in a table is merged with other cells.
  ///</summary>
  [DNTypeName('Aspose.Words.Tables.CellMerge')]
  DNCellMerge = type Integer;
  DNCellMergeHelper = record helper for DNCellMerge
  public const
    ///<summary>
    ///  The cell is not merged.
    ///</summary>
    None = 0;
    ///<summary>
    ///  The cell is the first cell in a range of merged cells.
    ///</summary>
    First = 1;
    ///<summary>
    ///  The cell is merged to the previous cell horizontally or vertically.
    ///</summary>
    Previous = 2;
  end;


  //-------------namespace: Aspose.Words.Tables----------------
  ///<summary>
  ///  Specifies vertical justification of text inside a table cell.
  ///</summary>
  [DNTypeName('Aspose.Words.Tables.CellVerticalAlignment')]
  DNCellVerticalAlignment = type Integer;
  DNCellVerticalAlignmentHelper = record helper for DNCellVerticalAlignment
  public const
    ///<summary>
    ///  Text is aligned at the top of a cell.
    ///</summary>
    Top = 0;
    ///<summary>
    ///  Text is aligned in the middle of a cell.
    ///</summary>
    Center = 1;
    ///<summary>
    ///  Text is aligned at the bottom of the cell.
    ///</summary>
    Bottom = 2;
  end;


  //-------------namespace: Aspose.Words.Tables----------------
  ///<summary>
  ///  Specifies the unit of measurement for the preferred width of a table or cell.
  ///</summary>
  ///<seealso cref="T:Aspose.Words.Tables.PreferredWidth" />
  [DNTypeName('Aspose.Words.Tables.PreferredWidthType')]
  DNPreferredWidthType = type Integer;
  DNPreferredWidthTypeHelper = record helper for DNPreferredWidthType
  public const
    ///<summary>
    ///  The preferred width is not specified. The actual width of the table or cell is either specified using the explicit width or
    ///  will be determined automatically by the table layout algorithm when the table is displayed, depending on the table auto fit setting.
    ///</summary>
    Auto = 1;
    ///<summary>
    ///  Measure the current item width using a specified percentage.
    ///</summary>
    Percent = 2;
    ///<summary>
    ///  Measure the current item width using a specified number of points (1/72 inch).
    ///</summary>
    Points = 3;
  end;


  //-------------namespace: Aspose.Words.Tables----------------
  ///<summary>
  ///  Specifies alignment for an inline table.
  ///</summary>
  [DNTypeName('Aspose.Words.Tables.TableAlignment')]
  DNTableAlignment = type Integer;
  DNTableAlignmentHelper = record helper for DNTableAlignment
  public const
    ///<summary>
    ///  The table is aligned to the left.
    ///</summary>
    Left = 0;
    ///<summary>
    ///  The table is centered.
    ///</summary>
    Center = 1;
    ///<summary>
    ///  The table is aligned to the right.
    ///</summary>
    Right = 2;
  end;


  //-------------namespace: Aspose.Words.Tables----------------
  ///<summary>
  ///  Specifies how table style is applied to a table.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Tables.Table.StyleOptions" />
  ///<dev>
  ///  2.4.51 tblLook (Table Style Conditional Formatting Settings)
  ///  The DOC spec defines more values here, but it says they are ignored by Word 2007 so we ignore them too.
  ///</dev>
  [DNTypeName('Aspose.Words.Tables.TableStyleOptions')]
  DNTableStyleOptions = type Integer;
  DNTableStyleOptionsHelper = record helper for DNTableStyleOptions
  public const
    ///<summary>
    ///  No table style formatting is applied.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Apply first row conditional formatting.
    ///</summary>
    FirstRow = 32;
    ///<summary>
    ///  Apply last row conditional formatting.
    ///</summary>
    LastRow = 64;
    ///<summary>
    ///  Apply 1 first column conditional formatting.
    ///</summary>
    FirstColumn = 128;
    ///<summary>
    ///  Apply last column conditional formatting.
    ///</summary>
    LastColumn = 256;
    ///<summary>
    ///  Apply row banding conditional formatting.
    ///</summary>
    RowBands = 512;
    ///<summary>
    ///  This is Microsoft Word defaults.
    ///</summary>
    Default_ = 672;
    ///<summary>
    ///  Apply column banding conditional formatting.
    ///</summary>
    ColumnBands = 1024;
    ///<summary>
    ///  Row and column banding is applied. This is Microsoft Word default for old formats such as DOC, WML and RTF.
    ///</summary>
    Default2003 = 1536;
  end;


  //-------------namespace: Aspose.Words.Tables----------------
  ///<summary>
  ///  Specifies how text is wrapped around the table.
  ///</summary>
  [DNTypeName('Aspose.Words.Tables.TextWrapping')]
  DNTextWrapping = type Integer;
  DNTextWrappingHelper = record helper for DNTextWrapping
  public const
    ///<summary>
    ///  Default value.
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Text and table is displayed in the order of their appearance in the document.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Text is wrapped around the table occupying available side space.
    ///</summary>
    Around = 1;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Dml text effect for text runs.
  ///</summary>
  [DNTypeName('Aspose.Words.TextDmlEffect')]
  DNTextDmlEffect = type Integer;
  DNTextDmlEffectHelper = record helper for DNTextDmlEffect
  public const
    ///<summary>
    ///  Glow effect, in which a color blurred outline is added outside the edges of the object.
    ///</summary>
    Glow = 0;
    ///<summary>
    ///  Fill overlay effect.
    ///</summary>
    Fill = 1;
    ///<summary>
    ///  Shadow effect.
    ///</summary>
    Shadow = 2;
    ///<summary>
    ///  Outline effect.
    ///</summary>
    Outline = 3;
    ///<summary>
    ///  3D effect.
    ///</summary>
    Effect3D = 4;
    ///<summary>
    ///  Reflection effect.
    ///</summary>
    Reflection = 5;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Animation effect for text runs.
  ///</summary>
  [DNTypeName('Aspose.Words.TextEffect')]
  DNTextEffect = type Integer;
  DNTextEffectHelper = record helper for DNTextEffect
  public const
    ///<summary></summary>
    None = 0;
    ///<summary></summary>
    LasVegasLights = 1;
    ///<summary></summary>
    BlinkingBackground = 2;
    ///<summary></summary>
    SparkleText = 3;
    ///<summary></summary>
    MarchingBlackAnts = 4;
    ///<summary></summary>
    MarchingRedAnts = 5;
    ///<summary></summary>
    Shimmer = 6;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Specifies orientation of text on a page, in a table cell or a text frame.
  ///</summary>
  [DNTypeName('Aspose.Words.TextOrientation')]
  DNTextOrientation = type Integer;
  DNTextOrientationHelper = record helper for DNTextOrientation
  public const
    ///<summary>
    ///  Text is arranged horizontally (lr-tb).
    ///</summary>
    Horizontal = 0;
    ///<summary>
    ///  Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).
    ///</summary>
    Downward = 1;
    ///<summary>
    ///  Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).
    ///</summary>
    Upward = 3;
    ///<summary>
    ///  Text is arranged horizontally, but Far East characters are rotated 90 degrees to the left (lr-tb-v).
    ///</summary>
    HorizontalRotatedFarEast = 4;
    ///<summary>
    ///  Far East characters appear vertical, other text is rotated 90 degrees
    ///  to the right to appear from top to bottom (tb-rl-v).
    ///</summary>
    VerticalFarEast = 5;
    ///<summary>
    ///  Far East characters appear vertical, other text is rotated 90 degrees
    ///  to the right to appear from top to bottom vertically, then left to right horizontally  (tb-lr-v).
    ///</summary>
    ///<dev> IN: Set this value to 7 because MS Word uses this value in DOC format. </dev>
    VerticalRotatedFarEast = 7;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Specifies shading texture.
  ///</summary>
  [DNTypeName('Aspose.Words.TextureIndex')]
  DNTextureIndex = type Integer;
  DNTextureIndexHelper = record helper for DNTextureIndex
  public const
    ///<summary></summary>
    TextureNone = 0;
    ///<summary></summary>
    TextureSolid = 1;
    ///<summary></summary>
    Texture5Percent = 2;
    ///<summary></summary>
    Texture10Percent = 3;
    ///<summary></summary>
    Texture20Percent = 4;
    ///<summary></summary>
    Texture25Percent = 5;
    ///<summary></summary>
    Texture30Percent = 6;
    ///<summary></summary>
    Texture40Percent = 7;
    ///<summary></summary>
    Texture50Percent = 8;
    ///<summary></summary>
    Texture60Percent = 9;
    ///<summary></summary>
    Texture70Percent = 10;
    ///<summary></summary>
    Texture75Percent = 11;
    ///<summary></summary>
    Texture80Percent = 12;
    ///<summary></summary>
    Texture90Percent = 13;
    ///<summary></summary>
    TextureDarkHorizontal = 14;
    ///<summary></summary>
    TextureDarkVertical = 15;
    ///<summary></summary>
    TextureDarkDiagonalDown = 16;
    ///<summary></summary>
    TextureDarkDiagonalUp = 17;
    ///<summary></summary>
    TextureDarkCross = 18;
    ///<summary></summary>
    TextureDarkDiagonalCross = 19;
    ///<summary></summary>
    TextureHorizontal = 20;
    ///<summary></summary>
    TextureVertical = 21;
    ///<summary></summary>
    TextureDiagonalDown = 22;
    ///<summary></summary>
    TextureDiagonalUp = 23;
    ///<summary></summary>
    TextureCross = 24;
    ///<summary></summary>
    TextureDiagonalCross = 25;
    ///<summary></summary>
    Texture2Pt5Percent = 35;
    ///<summary></summary>
    Texture7Pt5Percent = 36;
    ///<summary></summary>
    Texture12Pt5Percent = 37;
    ///<summary></summary>
    Texture15Percent = 38;
    ///<summary></summary>
    Texture17Pt5Percent = 39;
    ///<summary></summary>
    Texture22Pt5Percent = 40;
    ///<summary></summary>
    Texture27Pt5Percent = 41;
    ///<summary></summary>
    Texture32Pt5Percent = 42;
    ///<summary></summary>
    Texture35Percent = 43;
    ///<summary></summary>
    Texture37Pt5Percent = 44;
    ///<summary></summary>
    Texture42Pt5Percent = 45;
    ///<summary></summary>
    Texture45Percent = 46;
    ///<summary></summary>
    Texture47Pt5Percent = 47;
    ///<summary></summary>
    Texture52Pt5Percent = 48;
    ///<summary></summary>
    Texture55Percent = 49;
    ///<summary></summary>
    Texture57Pt5Percent = 50;
    ///<summary></summary>
    Texture62Pt5Percent = 51;
    ///<summary></summary>
    Texture65Percent = 52;
    ///<summary></summary>
    Texture67Pt5Percent = 53;
    ///<summary></summary>
    Texture72Pt5Percent = 54;
    ///<summary></summary>
    Texture77Pt5Percent = 55;
    ///<summary></summary>
    Texture82Pt5Percent = 56;
    ///<summary></summary>
    Texture85Percent = 57;
    ///<summary></summary>
    Texture87Pt5Percent = 58;
    ///<summary></summary>
    Texture92Pt5Percent = 59;
    ///<summary></summary>
    Texture95Percent = 60;
    ///<summary></summary>
    Texture97Pt5Percent = 61;
    ///<summary>
    ///  Specifies that there shall be no pattern used on the current shaded region
    ///  (i.e. the pattern shall be a complete fill with the background color).
    ///</summary>
    ///<dev>
    ///  Actually the Word does not renders shading with such pattern type i.e. shading is invisible (WORDSNET-17402).
    ///</dev>
    TextureNil = 65535;
  end;


  //-------------namespace: Aspose.Words.Themes----------------
  ///<summary>
  ///  Specifies the theme colors for document themes.
  ///</summary>
  ///<remarks>
  ///  The specified theme color is a reference to one of the predefined theme colors, located in the
  ///  document's Theme part, which allows color information to be set centrally in the document.
  ///</remarks>
  ///<dev>
  ///  The Color Scheme Color elements appear in a sequence.
  ///  See also https://docs.microsoft.com/en-us/office/vba/api/word.wdthemecolorindex
  ///</dev>
  [DNTypeName('Aspose.Words.Themes.ThemeColor')]
  DNThemeColor = type Integer;
  DNThemeColorHelper = record helper for DNThemeColor
  public const
    ///<summary>
    ///  Dark main color 1.
    ///</summary>
    Dark1 = 0;
    ///<summary>
    ///  Light main color 1.
    ///</summary>
    Light1 = 1;
    ///<summary>
    ///  Dark main color 2.
    ///</summary>
    Dark2 = 2;
    ///<summary>
    ///  Light main color 2.
    ///</summary>
    Light2 = 3;
    ///<summary>
    ///  Accent color 1.
    ///</summary>
    Accent1 = 4;
    ///<summary>
    ///  Accent color 2.
    ///</summary>
    Accent2 = 5;
    ///<summary>
    ///  Accent color 3.
    ///</summary>
    Accent3 = 6;
    ///<summary>
    ///  Accent color 4.
    ///</summary>
    Accent4 = 7;
    ///<summary>
    ///  Accent color 5.
    ///</summary>
    Accent5 = 8;
    ///<summary>
    ///  Accent color 6.
    ///</summary>
    Accent6 = 9;
    ///<summary>
    ///  Hyperlink color.
    ///</summary>
    Hyperlink = 10;
    ///<summary>
    ///  Followed hyperlink color.
    ///</summary>
    FollowedHyperlink = 11;
    ///<summary>
    ///  Text color 1.
    ///</summary>
    Text1 = 12;
    ///<summary>
    ///  Text color 2.
    ///</summary>
    Text2 = 13;
    ///<summary>
    ///  Background color 1.
    ///</summary>
    Background1 = 14;
    ///<summary>
    ///  Background color 2.
    ///</summary>
    Background2 = 15;
    ///<summary>
    ///  No color.
    ///</summary>
    None = -1;
  end;


  //-------------namespace: Aspose.Words.Themes----------------
  ///<summary>
  ///  Specifies the types of theme font names for document themes.
  ///</summary>
  ///<remarks>
  ///  Specifies a theme font type which can be referenced as a theme font within the parent object properties.
  ///  This theme font is a reference to one of the predefined theme fonts, located in the document's
  ///  Theme part, which allows for font information to be set centrally in the document.
  ///</remarks>
  ///<dev>
  ///  See https://docs.microsoft.com/en-us/office/vba/api/excel.font.themefont
  ///  and ISO29500 17.18.96 ST_Theme (Theme Font).
  ///</dev>
  [DNTypeName('Aspose.Words.Themes.ThemeFont')]
  DNThemeFont = type Integer;
  DNThemeFontHelper = record helper for DNThemeFont
  public const
    ///<summary>
    ///  No theme font.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Major theme font.
    ///</summary>
    Major = 1;
    ///<summary>
    ///  Minor theme font.
    ///</summary>
    Minor = 2;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Indicates type of the underline applied to a font.
  ///</summary>
  [DNTypeName('Aspose.Words.Underline')]
  DNUnderline = type Integer;
  DNUnderlineHelper = record helper for DNUnderline
  public const
    ///<summary></summary>
    None = 0;
    ///<summary></summary>
    Single = 1;
    ///<summary></summary>
    Words = 2;
    ///<summary></summary>
    Double = 3;
    ///<summary></summary>
    Dotted = 4;
    ///<summary></summary>
    Thick = 6;
    ///<summary></summary>
    Dash = 7;
    ///<summary></summary>
    DotDash = 9;
    ///<summary></summary>
    DotDotDash = 10;
    ///<summary></summary>
    Wavy = 11;
    ///<summary></summary>
    DottedHeavy = 20;
    ///<summary></summary>
    DashHeavy = 23;
    ///<summary></summary>
    DotDashHeavy = 25;
    ///<summary></summary>
    DotDotDashHeavy = 26;
    ///<summary></summary>
    WavyHeavy = 27;
    ///<summary></summary>
    DashLong = 39;
    ///<summary></summary>
    WavyDouble = 43;
    ///<summary></summary>
    DashLongHeavy = 55;
  end;


  //-------------namespace: Aspose.Words.Vba----------------
  ///<summary>
  ///  Specifies the type of a model in a VBA project.
  ///</summary>
  [DNTypeName('Aspose.Words.Vba.VbaModuleType')]
  DNVbaModuleType = type Integer;
  DNVbaModuleTypeHelper = record helper for DNVbaModuleType
  public const
    ///<summary>
    ///  A type of VBA project item that specifies a module for embedded macros and programmatic access operations
    ///  that are associated with a document.
    ///</summary>
    DocumentModule = 0;
    ///<summary>
    ///  A collection of subroutines and functions.
    ///</summary>
    ProceduralModule = 1;
    ///<summary>
    ///  A module that contains the definition for a new object. Each instance of a class creates a new object,
    ///  and procedures that are defined in the module become properties and methods of the object.
    ///</summary>
    ClassModule = 2;
    ///<summary>
    ///  A VBA module that extends the methods and properties of an ActiveX control that has been registered with the project.
    ///</summary>
    DesignerModule = 3;
  end;


  //-------------namespace: Aspose.Words.Vba----------------
  ///<summary>
  ///  Allows to specify the type of a <see cref="T:Aspose.Words.Vba.VbaReference" />
  ///  object.
  ///</summary>
  [DNTypeName('Aspose.Words.Vba.VbaReferenceType')]
  DNVbaReferenceType = type Integer;
  DNVbaReferenceTypeHelper = record helper for DNVbaReferenceType
  public const
    ///<summary>
    ///  Specifies an Automation type library reference type.
    ///</summary>
    ///<remarks>
    ///  This type corresponds to 2.3.4.2.2.5 REFERENCEREGISTERED Record of [MS-OVBA]:
    ///  https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-ovba/6c39388e-96f5-4b93-b90a-ae625a063fcf
    ///</remarks>
    Registered = 13;
    ///<summary>
    ///  Specified an external VBA project reference type.
    ///</summary>
    ///<remarks>
    ///  This type corresponds to 2.3.4.2.2.6 REFERENCEPROJECT Record of [MS-OVBA]:
    ///  https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-ovba/08280eb0-d628-495c-867f-5985ed020142
    ///</remarks>
    Project = 14;
    ///<summary>
    ///  Specifies a twiddled type library reference type.
    ///</summary>
    ///<remarks>
    ///  This type corresponds to 2.3.4.2.2.3 REFERENCECONTROL Record of [MS-OVBA]:
    ///  https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-ovba/d64485fa-8562-4726-9c5e-11e8f01a81c0
    ///</remarks>
    Control = 47;
    ///<summary>
    ///  Specifies an original Automation type library reference type.
    ///</summary>
    ///<remarks>
    ///  This type corresponds to 2.3.4.2.2.4 REFERENCEORIGINAL Record of [MS-OVBA]:
    ///  https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-ovba/3ba66994-8c7a-4634-b2da-f9331ace6686
    ///</remarks>
    Original = 51;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Allows the visitor to control the enumeration of nodes.
  ///</summary>
  [DNTypeName('Aspose.Words.VisitorAction')]
  DNVisitorAction = type Integer;
  DNVisitorActionHelper = record helper for DNVisitorAction
  public const
    ///<summary>
    ///  The visitor requests the enumeration to continue.
    ///</summary>
    Continue_ = 0;
    ///<summary>
    ///  The visitor requests to skip the current node and continue enumeration.
    ///</summary>
    SkipThisNode = 1;
    ///<summary>
    ///  The visitor requests the enumeration of nodes to stop.
    ///</summary>
    Stop = 2;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Specifies the module that produces a warning during document loading or saving.
  ///</summary>
  [DNTypeName('Aspose.Words.WarningSource')]
  DNWarningSource = type Integer;
  DNWarningSourceHelper = record helper for DNWarningSource
  public const
    ///<summary>
    ///  The warning source is not specified.
    ///</summary>
    Unknown = 0;
    ///<summary>
    ///  Module that builds a document layout.
    ///</summary>
    Layout = 1;
    ///<summary>
    ///  Module that renders DrawingML shapes.
    ///</summary>
    DrawingML = 2;
    ///<summary>
    ///  Module that renders OfficeMath.
    ///</summary>
    OfficeMath = 3;
    ///<summary>
    ///  Module that renders ordinary shapes.
    ///</summary>
    Shapes = 4;
    ///<summary>
    ///  Module that renders metafiles.
    ///</summary>
    Metafile = 5;
    ///<summary>
    ///  Module that renders XPS.
    ///</summary>
    Xps = 6;
    ///<summary>
    ///  Module that renders PDF.
    ///</summary>
    Pdf = 7;
    ///<summary>
    ///  Module that renders images.
    ///</summary>
    Image = 8;
    ///<summary>
    ///  Module that reads/writes DOCX files.
    ///</summary>
    Docx = 9;
    ///<summary>
    ///  Module that reads/writes binary DOC files.
    ///</summary>
    Doc = 10;
    ///<summary>
    ///  Module that reads/writes plaintext files.
    ///</summary>
    Text = 11;
    ///<summary>
    ///  Module that reads/writes RTF files.
    ///</summary>
    Rtf = 12;
    ///<summary>
    ///  Module that reads/writes WML files.
    ///</summary>
    WordML = 13;
    ///<summary>
    ///  Common modules that are shared between DOCX/WML reader/writer modules.
    ///</summary>
    Nrx = 14;
    ///<summary>
    ///  Module that reads/writes ODT files.
    ///</summary>
    Odt = 15;
    ///<summary>
    ///  Module that reads/writes HTML/MHTML files.
    ///</summary>
    Html = 16;
    ///<summary>
    ///  Module that verifies model consistency and validity.
    ///</summary>
    Validator = 17;
    ///<summary>
    ///  Module that reads/writes Xaml files.
    ///</summary>
    Xaml = 18;
    ///<summary>
    ///  Module that reads Svm files.
    ///</summary>
    Svm = 19;
    ///<summary>
    ///  Module that reads W3C MathML files.
    ///</summary>
    MathML = 20;
    ///<summary>
    ///  Module that reads font files.
    ///</summary>
    Font = 21;
    ///<summary>
    ///  Module that reads SVG files.
    ///</summary>
    Svg = 22;
    ///<summary>
    ///  Module that reads/writes Markdown files.
    ///</summary>
    Markdown = 23;
    ///<summary>
    ///  Module that reads CHM files.
    ///</summary>
    Chm = 24;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Specifies the type of a warning that is issued by Aspose.Words during document loading or saving.
  ///</summary>
  [DNTypeName('Aspose.Words.WarningType')]
  DNWarningType = type Integer;
  DNWarningTypeHelper = record helper for DNWarningType
  public const
    ///<summary>
    ///  Generic data loss, no specific code.
    ///</summary>
    DataLoss = 1;
    ///<summary>
    ///  Some text/char/image or other data will be missing from either the document tree following load,
    ///  or from the created document following save.
    ///</summary>
    DataLossCategory = 255;
    ///<summary>
    ///  Generic major formatting loss, no specific code.
    ///</summary>
    MajorFormattingLoss = 256;
    ///<summary>
    ///  The resulting document or a particular location in it might look substantially different
    ///  compared to the original document.
    ///</summary>
    MajorFormattingLossCategory = 65280;
    ///<summary>
    ///  Generic minor formatting loss, no specific code.
    ///</summary>
    MinorFormattingLoss = 65536;
    ///<summary>
    ///  Font has been substituted.
    ///</summary>
    FontSubstitution = 131072;
    ///<summary>
    ///  Loss of embedded font information during document saving.
    ///</summary>
    FontEmbedding = 262144;
    ///<summary>
    ///  The resulting document or a particular location in it might look somewhat different compared
    ///  to the original document.
    ///</summary>
    MinorFormattingLossCategory = 16711680;
    ///<summary>
    ///  Generic unexpected content, no specific code.
    ///</summary>
    UnexpectedContent = 16777216;
    ///<summary>
    ///  Some content in the source document could not be recognized (i.e. is unsupported), this may or may not
    ///  cause issues or result in data/formatting loss.
    ///</summary>
    UnexpectedContentCategory = 251658240;
    ///<summary>
    ///  Advises of a potential problem or suggests an improvement.
    ///</summary>
    Hint = 268435456;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Defines layout of the watermark relative to the watermark center.
  ///</summary>
  [DNTypeName('Aspose.Words.WatermarkLayout')]
  DNWatermarkLayout = type Integer;
  DNWatermarkLayoutHelper = record helper for DNWatermarkLayout
  public const
    ///<summary>
    ///  Horizontal watermark layout. Corresponds to 0 degrees of rotation.
    ///</summary>
    Horizontal = 0;
    ///<summary>
    ///  Diagonal watermark layout. Corresponds to 315 degrees of rotation.
    ///</summary>
    Diagonal = 315;
  end;


  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Specifies the watermark type.
  ///</summary>
  [DNTypeName('Aspose.Words.WatermarkType')]
  DNWatermarkType = type Integer;
  DNWatermarkTypeHelper = record helper for DNWatermarkType
  public const
    ///<summary>
    ///  Indicates that the text will be used as a watermark.
    ///  <p>Such a watermark corresponds to a WordArt object.</p>
    ///</summary>
    Text = 0;
    ///<summary>
    ///  Indicates that the image will be used as a watermark.
    ///  <p>Such a watermark corresponds to a shape with image.</p>
    ///</summary>
    Image = 1;
    ///<summary>
    ///  Indicates watermark is no set.
    ///</summary>
    None = 2;
  end;


  //-------------namespace: Aspose.Words.WebExtensions----------------
  ///<summary>
  ///  Enumerates available locations of task pane object.
  ///</summary>
  ///<dev>"top", "bottom", "fill" do not work. Add more available values upon request.</dev>
  [DNTypeName('Aspose.Words.WebExtensions.TaskPaneDockState')]
  DNTaskPaneDockState = type Integer;
  DNTaskPaneDockStateHelper = record helper for DNTaskPaneDockState
  public const
    ///<summary>
    ///  Dock the task pane on the right side of the document window.
    ///</summary>
    Right = 0;
    ///<summary>
    ///  Dock the task pane on the left side of the document window.
    ///</summary>
    Left = 1;
  end;


  //-------------namespace: Aspose.Words.WebExtensions----------------
  ///<summary>
  ///  Enumerates available types of binding between a web extension and the data in the document.
  ///</summary>
  ///<dev>https://docs.microsoft.com/en-us/javascript/api/office/office.bindingtype?view=office-js</dev>
  [DNTypeName('Aspose.Words.WebExtensions.WebExtensionBindingType')]
  DNWebExtensionBindingType = type Integer;
  DNWebExtensionBindingTypeHelper = record helper for DNWebExtensionBindingType
  public const
    Default_ = 0;
    ///<summary>
    ///  Tabular data without a header row.
    ///</summary>
    Matrix = 0;
    ///<summary>
    ///  Tabular data with a header row.
    ///</summary>
    Table = 1;
    ///<summary>
    ///  Plain text.
    ///</summary>
    Text = 2;
  end;


  //-------------namespace: Aspose.Words.WebExtensions----------------
  ///<summary>
  ///  Enumerates available types of a web extension store.
  ///</summary>
  [DNTypeName('Aspose.Words.WebExtensions.WebExtensionStoreType')]
  DNWebExtensionStoreType = type Integer;
  DNWebExtensionStoreTypeHelper = record helper for DNWebExtensionStoreType
  public const
    ///<summary>
    ///  Specifies that the store type is SharePoint corporate catalog.
    ///</summary>
    SPCatalog = 0;
    ///<summary>
    ///  Default value.
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Specifies that the store type is Office.com.
    ///</summary>
    OMEX = 1;
    ///<summary>
    ///  Specifies that the store type is a SharePoint web application.
    ///</summary>
    SPApp = 2;
    ///<summary>
    ///  Specifies that the store type is an Exchange server.
    ///</summary>
    Exchange = 3;
    ///<summary>
    ///  Specifies that the store type is a file system share.
    ///</summary>
    FileSystem = 4;
    ///<summary>
    ///  Specifies that the store type is the system registry.
    ///</summary>
    Registry = 5;
    ///<summary>
    ///  Specifies that the store type is Centralized Deployment via Exchange.
    ///</summary>
    ExCatalog = 6;
  end;




type


{ declares }

  DNBookmark = interface; // type: Aspose.Words.Bookmark, namespace: Aspose.Words
  DNBookmarkCollection = interface; // type: Aspose.Words.BookmarkCollection, namespace: Aspose.Words
  DNBorderCollection = interface; // type: Aspose.Words.BorderCollection, namespace: Aspose.Words
  DNBuildVersionInfo = interface; // type: Aspose.Words.BuildVersionInfo, namespace: Aspose.Words
  DNCleanupOptions = interface; // type: Aspose.Words.CleanupOptions, namespace: Aspose.Words
  DNComHelper = interface; // type: Aspose.Words.ComHelper, namespace: Aspose.Words
  DNCompareOptions = interface; // type: Aspose.Words.Comparing.CompareOptions, namespace: Aspose.Words.Comparing
  DNConditionalStyle = interface; // type: Aspose.Words.ConditionalStyle, namespace: Aspose.Words
  DNConditionalStyleCollection = interface; // type: Aspose.Words.ConditionalStyleCollection, namespace: Aspose.Words
  DNControlChar = interface; // type: Aspose.Words.ControlChar, namespace: Aspose.Words
  DNConvertUtil = interface; // type: Aspose.Words.ConvertUtil, namespace: Aspose.Words
  DNCertificateHolder = interface; // type: Aspose.Words.DigitalSignatures.CertificateHolder, namespace: Aspose.Words.DigitalSignatures
  DNDigitalSignature = interface; // type: Aspose.Words.DigitalSignatures.DigitalSignature, namespace: Aspose.Words.DigitalSignatures
  DNDigitalSignatureCollection = interface; // type: Aspose.Words.DigitalSignatures.DigitalSignatureCollection, namespace: Aspose.Words.DigitalSignatures
  DNDigitalSignatureUtil = interface; // type: Aspose.Words.DigitalSignatures.DigitalSignatureUtil, namespace: Aspose.Words.DigitalSignatures
  DNSignOptions = interface; // type: Aspose.Words.DigitalSignatures.SignOptions, namespace: Aspose.Words.DigitalSignatures
  DNDocumentBuilder = interface; // type: Aspose.Words.DocumentBuilder, namespace: Aspose.Words
  DNDocumentVisitor = interface; // type: Aspose.Words.DocumentVisitor, namespace: Aspose.Words
  DNAxisBound = interface; // type: Aspose.Words.Drawing.Charts.AxisBound, namespace: Aspose.Words.Drawing.Charts
  DNAxisDisplayUnit = interface; // type: Aspose.Words.Drawing.Charts.AxisDisplayUnit, namespace: Aspose.Words.Drawing.Charts
  DNAxisScaling = interface; // type: Aspose.Words.Drawing.Charts.AxisScaling, namespace: Aspose.Words.Drawing.Charts
  DNChart = interface; // type: Aspose.Words.Drawing.Charts.Chart, namespace: Aspose.Words.Drawing.Charts
  DNChartAxis = interface; // type: Aspose.Words.Drawing.Charts.ChartAxis, namespace: Aspose.Words.Drawing.Charts
  DNChartDataLabel = interface; // type: Aspose.Words.Drawing.Charts.ChartDataLabel, namespace: Aspose.Words.Drawing.Charts
  DNChartDataLabelCollection = interface; // type: Aspose.Words.Drawing.Charts.ChartDataLabelCollection, namespace: Aspose.Words.Drawing.Charts
  DNChartDataPoint = interface; // type: Aspose.Words.Drawing.Charts.ChartDataPoint, namespace: Aspose.Words.Drawing.Charts
  DNChartDataPointCollection = interface; // type: Aspose.Words.Drawing.Charts.ChartDataPointCollection, namespace: Aspose.Words.Drawing.Charts
  DNChartFormat = interface; // type: Aspose.Words.Drawing.Charts.ChartFormat, namespace: Aspose.Words.Drawing.Charts
  DNChartLegend = interface; // type: Aspose.Words.Drawing.Charts.ChartLegend, namespace: Aspose.Words.Drawing.Charts
  DNChartMarker = interface; // type: Aspose.Words.Drawing.Charts.ChartMarker, namespace: Aspose.Words.Drawing.Charts
  DNChartNumberFormat = interface; // type: Aspose.Words.Drawing.Charts.ChartNumberFormat, namespace: Aspose.Words.Drawing.Charts
  DNChartSeries = interface; // type: Aspose.Words.Drawing.Charts.ChartSeries, namespace: Aspose.Words.Drawing.Charts
  DNChartSeriesCollection = interface; // type: Aspose.Words.Drawing.Charts.ChartSeriesCollection, namespace: Aspose.Words.Drawing.Charts
  DNChartTitle = interface; // type: Aspose.Words.Drawing.Charts.ChartTitle, namespace: Aspose.Words.Drawing.Charts
  DNIChartDataPoint = interface; // type: Aspose.Words.Drawing.Charts.IChartDataPoint, namespace: Aspose.Words.Drawing.Charts
  DNFill = interface; // type: Aspose.Words.Drawing.Fill, namespace: Aspose.Words.Drawing
  DNHorizontalRuleFormat = interface; // type: Aspose.Words.Drawing.HorizontalRuleFormat, namespace: Aspose.Words.Drawing
  DNImageData = interface; // type: Aspose.Words.Drawing.ImageData, namespace: Aspose.Words.Drawing
  DNImageSize = interface; // type: Aspose.Words.Drawing.ImageSize, namespace: Aspose.Words.Drawing
  DNForms2OleControlCollection = interface; // type: Aspose.Words.Drawing.Ole.Forms2OleControlCollection, namespace: Aspose.Words.Drawing.Ole
  DNOleControl = interface; // type: Aspose.Words.Drawing.Ole.OleControl, namespace: Aspose.Words.Drawing.Ole
  DNForms2OleControl = interface; // type: Aspose.Words.Drawing.Ole.Forms2OleControl, namespace: Aspose.Words.Drawing.Ole
  DNOleFormat = interface; // type: Aspose.Words.Drawing.OleFormat, namespace: Aspose.Words.Drawing
  DNOlePackage = interface; // type: Aspose.Words.Drawing.OlePackage, namespace: Aspose.Words.Drawing
  DNSignatureLine = interface; // type: Aspose.Words.Drawing.SignatureLine, namespace: Aspose.Words.Drawing
  DNStroke = interface; // type: Aspose.Words.Drawing.Stroke, namespace: Aspose.Words.Drawing
  DNTextBox = interface; // type: Aspose.Words.Drawing.TextBox, namespace: Aspose.Words.Drawing
  DNTextPath = interface; // type: Aspose.Words.Drawing.TextPath, namespace: Aspose.Words.Drawing
  DNEditableRange = interface; // type: Aspose.Words.EditableRange, namespace: Aspose.Words
  DNBarcodeParameters = interface; // type: Aspose.Words.Fields.BarcodeParameters, namespace: Aspose.Words.Fields
  DNComparisonEvaluationResult = interface; // type: Aspose.Words.Fields.ComparisonEvaluationResult, namespace: Aspose.Words.Fields
  DNComparisonExpression = interface; // type: Aspose.Words.Fields.ComparisonExpression, namespace: Aspose.Words.Fields
  DNDropDownItemCollection = interface; // type: Aspose.Words.Fields.DropDownItemCollection, namespace: Aspose.Words.Fields
  DNField = interface; // type: Aspose.Words.Fields.Field, namespace: Aspose.Words.Fields
  DNFieldAddIn = interface; // type: Aspose.Words.Fields.FieldAddIn, namespace: Aspose.Words.Fields
  DNFieldAddressBlock = interface; // type: Aspose.Words.Fields.FieldAddressBlock, namespace: Aspose.Words.Fields
  DNFieldAdvance = interface; // type: Aspose.Words.Fields.FieldAdvance, namespace: Aspose.Words.Fields
  DNFieldAsk = interface; // type: Aspose.Words.Fields.FieldAsk, namespace: Aspose.Words.Fields
  DNFieldAuthor = interface; // type: Aspose.Words.Fields.FieldAuthor, namespace: Aspose.Words.Fields
  DNFieldAutoNum = interface; // type: Aspose.Words.Fields.FieldAutoNum, namespace: Aspose.Words.Fields
  DNFieldAutoNumLgl = interface; // type: Aspose.Words.Fields.FieldAutoNumLgl, namespace: Aspose.Words.Fields
  DNFieldAutoNumOut = interface; // type: Aspose.Words.Fields.FieldAutoNumOut, namespace: Aspose.Words.Fields
  DNFieldAutoText = interface; // type: Aspose.Words.Fields.FieldAutoText, namespace: Aspose.Words.Fields
  DNFieldAutoTextList = interface; // type: Aspose.Words.Fields.FieldAutoTextList, namespace: Aspose.Words.Fields
  DNFieldBarcode = interface; // type: Aspose.Words.Fields.FieldBarcode, namespace: Aspose.Words.Fields
  DNFieldBibliography = interface; // type: Aspose.Words.Fields.FieldBibliography, namespace: Aspose.Words.Fields
  DNFieldBidiOutline = interface; // type: Aspose.Words.Fields.FieldBidiOutline, namespace: Aspose.Words.Fields
  DNFieldCitation = interface; // type: Aspose.Words.Fields.FieldCitation, namespace: Aspose.Words.Fields
  DNFieldComments = interface; // type: Aspose.Words.Fields.FieldComments, namespace: Aspose.Words.Fields
  DNFieldCompare = interface; // type: Aspose.Words.Fields.FieldCompare, namespace: Aspose.Words.Fields
  DNFieldCreateDate = interface; // type: Aspose.Words.Fields.FieldCreateDate, namespace: Aspose.Words.Fields
  DNFieldData = interface; // type: Aspose.Words.Fields.FieldData, namespace: Aspose.Words.Fields
  DNFieldDatabase = interface; // type: Aspose.Words.Fields.FieldDatabase, namespace: Aspose.Words.Fields
  DNFieldDate = interface; // type: Aspose.Words.Fields.FieldDate, namespace: Aspose.Words.Fields
  DNFieldDde = interface; // type: Aspose.Words.Fields.FieldDde, namespace: Aspose.Words.Fields
  DNFieldDdeAuto = interface; // type: Aspose.Words.Fields.FieldDdeAuto, namespace: Aspose.Words.Fields
  DNFieldDisplayBarcode = interface; // type: Aspose.Words.Fields.FieldDisplayBarcode, namespace: Aspose.Words.Fields
  DNFieldDocProperty = interface; // type: Aspose.Words.Fields.FieldDocProperty, namespace: Aspose.Words.Fields
  DNFieldDocVariable = interface; // type: Aspose.Words.Fields.FieldDocVariable, namespace: Aspose.Words.Fields
  DNFieldEditTime = interface; // type: Aspose.Words.Fields.FieldEditTime, namespace: Aspose.Words.Fields
  DNFieldEmbed = interface; // type: Aspose.Words.Fields.FieldEmbed, namespace: Aspose.Words.Fields
  DNFieldEQ = interface; // type: Aspose.Words.Fields.FieldEQ, namespace: Aspose.Words.Fields
  DNFieldFileName = interface; // type: Aspose.Words.Fields.FieldFileName, namespace: Aspose.Words.Fields
  DNFieldFileSize = interface; // type: Aspose.Words.Fields.FieldFileSize, namespace: Aspose.Words.Fields
  DNFieldFillIn = interface; // type: Aspose.Words.Fields.FieldFillIn, namespace: Aspose.Words.Fields
  DNFieldFootnoteRef = interface; // type: Aspose.Words.Fields.FieldFootnoteRef, namespace: Aspose.Words.Fields
  DNFieldFormCheckBox = interface; // type: Aspose.Words.Fields.FieldFormCheckBox, namespace: Aspose.Words.Fields
  DNFieldFormDropDown = interface; // type: Aspose.Words.Fields.FieldFormDropDown, namespace: Aspose.Words.Fields
  DNFieldFormText = interface; // type: Aspose.Words.Fields.FieldFormText, namespace: Aspose.Words.Fields
  DNFieldFormula = interface; // type: Aspose.Words.Fields.FieldFormula, namespace: Aspose.Words.Fields
  DNFieldGlossary = interface; // type: Aspose.Words.Fields.FieldGlossary, namespace: Aspose.Words.Fields
  DNFieldGoToButton = interface; // type: Aspose.Words.Fields.FieldGoToButton, namespace: Aspose.Words.Fields
  DNFieldGreetingLine = interface; // type: Aspose.Words.Fields.FieldGreetingLine, namespace: Aspose.Words.Fields
  DNFieldHyperlink = interface; // type: Aspose.Words.Fields.FieldHyperlink, namespace: Aspose.Words.Fields
  DNFieldIf = interface; // type: Aspose.Words.Fields.FieldIf, namespace: Aspose.Words.Fields
  DNFieldImport = interface; // type: Aspose.Words.Fields.FieldImport, namespace: Aspose.Words.Fields
  DNFieldInclude = interface; // type: Aspose.Words.Fields.FieldInclude, namespace: Aspose.Words.Fields
  DNFieldIncludePicture = interface; // type: Aspose.Words.Fields.FieldIncludePicture, namespace: Aspose.Words.Fields
  DNFieldIncludeText = interface; // type: Aspose.Words.Fields.FieldIncludeText, namespace: Aspose.Words.Fields
  DNFieldIndex = interface; // type: Aspose.Words.Fields.FieldIndex, namespace: Aspose.Words.Fields
  DNFieldInfo = interface; // type: Aspose.Words.Fields.FieldInfo, namespace: Aspose.Words.Fields
  DNFieldKeywords = interface; // type: Aspose.Words.Fields.FieldKeywords, namespace: Aspose.Words.Fields
  DNFieldLastSavedBy = interface; // type: Aspose.Words.Fields.FieldLastSavedBy, namespace: Aspose.Words.Fields
  DNFieldLink = interface; // type: Aspose.Words.Fields.FieldLink, namespace: Aspose.Words.Fields
  DNFieldListNum = interface; // type: Aspose.Words.Fields.FieldListNum, namespace: Aspose.Words.Fields
  DNFieldMacroButton = interface; // type: Aspose.Words.Fields.FieldMacroButton, namespace: Aspose.Words.Fields
  DNFieldMergeBarcode = interface; // type: Aspose.Words.Fields.FieldMergeBarcode, namespace: Aspose.Words.Fields
  DNFieldMergeField = interface; // type: Aspose.Words.Fields.FieldMergeField, namespace: Aspose.Words.Fields
  DNFieldMergeRec = interface; // type: Aspose.Words.Fields.FieldMergeRec, namespace: Aspose.Words.Fields
  DNFieldMergeSeq = interface; // type: Aspose.Words.Fields.FieldMergeSeq, namespace: Aspose.Words.Fields
  DNFieldNext = interface; // type: Aspose.Words.Fields.FieldNext, namespace: Aspose.Words.Fields
  DNFieldNextIf = interface; // type: Aspose.Words.Fields.FieldNextIf, namespace: Aspose.Words.Fields
  DNFieldNoteRef = interface; // type: Aspose.Words.Fields.FieldNoteRef, namespace: Aspose.Words.Fields
  DNFieldNumChars = interface; // type: Aspose.Words.Fields.FieldNumChars, namespace: Aspose.Words.Fields
  DNFieldNumPages = interface; // type: Aspose.Words.Fields.FieldNumPages, namespace: Aspose.Words.Fields
  DNFieldNumWords = interface; // type: Aspose.Words.Fields.FieldNumWords, namespace: Aspose.Words.Fields
  DNFieldOcx = interface; // type: Aspose.Words.Fields.FieldOcx, namespace: Aspose.Words.Fields
  DNFieldPage = interface; // type: Aspose.Words.Fields.FieldPage, namespace: Aspose.Words.Fields
  DNFieldPageRef = interface; // type: Aspose.Words.Fields.FieldPageRef, namespace: Aspose.Words.Fields
  DNFieldPrint = interface; // type: Aspose.Words.Fields.FieldPrint, namespace: Aspose.Words.Fields
  DNFieldPrintDate = interface; // type: Aspose.Words.Fields.FieldPrintDate, namespace: Aspose.Words.Fields
  DNFieldPrivate = interface; // type: Aspose.Words.Fields.FieldPrivate, namespace: Aspose.Words.Fields
  DNFieldQuote = interface; // type: Aspose.Words.Fields.FieldQuote, namespace: Aspose.Words.Fields
  DNFieldRD = interface; // type: Aspose.Words.Fields.FieldRD, namespace: Aspose.Words.Fields
  DNFieldRef = interface; // type: Aspose.Words.Fields.FieldRef, namespace: Aspose.Words.Fields
  DNFieldRevNum = interface; // type: Aspose.Words.Fields.FieldRevNum, namespace: Aspose.Words.Fields
  DNFieldSaveDate = interface; // type: Aspose.Words.Fields.FieldSaveDate, namespace: Aspose.Words.Fields
  DNFieldSection = interface; // type: Aspose.Words.Fields.FieldSection, namespace: Aspose.Words.Fields
  DNFieldSectionPages = interface; // type: Aspose.Words.Fields.FieldSectionPages, namespace: Aspose.Words.Fields
  DNFieldSeq = interface; // type: Aspose.Words.Fields.FieldSeq, namespace: Aspose.Words.Fields
  DNFieldSet = interface; // type: Aspose.Words.Fields.FieldSet, namespace: Aspose.Words.Fields
  DNFieldShape = interface; // type: Aspose.Words.Fields.FieldShape, namespace: Aspose.Words.Fields
  DNFieldSkipIf = interface; // type: Aspose.Words.Fields.FieldSkipIf, namespace: Aspose.Words.Fields
  DNFieldStyleRef = interface; // type: Aspose.Words.Fields.FieldStyleRef, namespace: Aspose.Words.Fields
  DNFieldSubject = interface; // type: Aspose.Words.Fields.FieldSubject, namespace: Aspose.Words.Fields
  DNFieldSymbol = interface; // type: Aspose.Words.Fields.FieldSymbol, namespace: Aspose.Words.Fields
  DNFieldTA = interface; // type: Aspose.Words.Fields.FieldTA, namespace: Aspose.Words.Fields
  DNFieldTC = interface; // type: Aspose.Words.Fields.FieldTC, namespace: Aspose.Words.Fields
  DNFieldTemplate = interface; // type: Aspose.Words.Fields.FieldTemplate, namespace: Aspose.Words.Fields
  DNFieldTime = interface; // type: Aspose.Words.Fields.FieldTime, namespace: Aspose.Words.Fields
  DNFieldTitle = interface; // type: Aspose.Words.Fields.FieldTitle, namespace: Aspose.Words.Fields
  DNFieldToa = interface; // type: Aspose.Words.Fields.FieldToa, namespace: Aspose.Words.Fields
  DNFieldToc = interface; // type: Aspose.Words.Fields.FieldToc, namespace: Aspose.Words.Fields
  DNFieldUnknown = interface; // type: Aspose.Words.Fields.FieldUnknown, namespace: Aspose.Words.Fields
  DNFieldUserAddress = interface; // type: Aspose.Words.Fields.FieldUserAddress, namespace: Aspose.Words.Fields
  DNFieldUserInitials = interface; // type: Aspose.Words.Fields.FieldUserInitials, namespace: Aspose.Words.Fields
  DNFieldUserName = interface; // type: Aspose.Words.Fields.FieldUserName, namespace: Aspose.Words.Fields
  DNFieldXE = interface; // type: Aspose.Words.Fields.FieldXE, namespace: Aspose.Words.Fields
  DNFieldArgumentBuilder = interface; // type: Aspose.Words.Fields.FieldArgumentBuilder, namespace: Aspose.Words.Fields
  DNFieldBuilder = interface; // type: Aspose.Words.Fields.FieldBuilder, namespace: Aspose.Words.Fields
  DNFieldCollection = interface; // type: Aspose.Words.Fields.FieldCollection, namespace: Aspose.Words.Fields
  DNFieldFormat = interface; // type: Aspose.Words.Fields.FieldFormat, namespace: Aspose.Words.Fields
  DNFieldOptions = interface; // type: Aspose.Words.Fields.FieldOptions, namespace: Aspose.Words.Fields
  DNFormFieldCollection = interface; // type: Aspose.Words.Fields.FormFieldCollection, namespace: Aspose.Words.Fields
  DNGeneralFormatCollection = interface; // type: Aspose.Words.Fields.GeneralFormatCollection, namespace: Aspose.Words.Fields
  DNIBarcodeGenerator = interface; // type: Aspose.Words.Fields.IBarcodeGenerator, namespace: Aspose.Words.Fields
  DNIComparisonExpressionEvaluator = interface; // type: Aspose.Words.Fields.IComparisonExpressionEvaluator, namespace: Aspose.Words.Fields
  DNIFieldResultFormatter = interface; // type: Aspose.Words.Fields.IFieldResultFormatter, namespace: Aspose.Words.Fields
  DNIFieldUpdateCultureProvider = interface; // type: Aspose.Words.Fields.IFieldUpdateCultureProvider, namespace: Aspose.Words.Fields
  DNIFieldUserPromptRespondent = interface; // type: Aspose.Words.Fields.IFieldUserPromptRespondent, namespace: Aspose.Words.Fields
  DNMergeFieldImageDimension = interface; // type: Aspose.Words.Fields.MergeFieldImageDimension, namespace: Aspose.Words.Fields
  DNToaCategories = interface; // type: Aspose.Words.Fields.ToaCategories, namespace: Aspose.Words.Fields
  DNUserInformation = interface; // type: Aspose.Words.Fields.UserInformation, namespace: Aspose.Words.Fields
  DNFileFormatInfo = interface; // type: Aspose.Words.FileFormatInfo, namespace: Aspose.Words
  DNFileFormatUtil = interface; // type: Aspose.Words.FileFormatUtil, namespace: Aspose.Words
  DNFont = interface; // type: Aspose.Words.Font, namespace: Aspose.Words
  DNFontFallbackSettings = interface; // type: Aspose.Words.Fonts.FontFallbackSettings, namespace: Aspose.Words.Fonts
  DNFontInfo = interface; // type: Aspose.Words.Fonts.FontInfo, namespace: Aspose.Words.Fonts
  DNFontInfoCollection = interface; // type: Aspose.Words.Fonts.FontInfoCollection, namespace: Aspose.Words.Fonts
  DNFontSettings = interface; // type: Aspose.Words.Fonts.FontSettings, namespace: Aspose.Words.Fonts
  DNFontSourceBase = interface; // type: Aspose.Words.Fonts.FontSourceBase, namespace: Aspose.Words.Fonts
  DNFileFontSource = interface; // type: Aspose.Words.Fonts.FileFontSource, namespace: Aspose.Words.Fonts
  DNFolderFontSource = interface; // type: Aspose.Words.Fonts.FolderFontSource, namespace: Aspose.Words.Fonts
  DNMemoryFontSource = interface; // type: Aspose.Words.Fonts.MemoryFontSource, namespace: Aspose.Words.Fonts
  DNStreamFontSource = interface; // type: Aspose.Words.Fonts.StreamFontSource, namespace: Aspose.Words.Fonts
  DNSystemFontSource = interface; // type: Aspose.Words.Fonts.SystemFontSource, namespace: Aspose.Words.Fonts
  DNFontSubstitutionRule = interface; // type: Aspose.Words.Fonts.FontSubstitutionRule, namespace: Aspose.Words.Fonts
  DNDefaultFontSubstitutionRule = interface; // type: Aspose.Words.Fonts.DefaultFontSubstitutionRule, namespace: Aspose.Words.Fonts
  DNFontConfigSubstitutionRule = interface; // type: Aspose.Words.Fonts.FontConfigSubstitutionRule, namespace: Aspose.Words.Fonts
  DNFontInfoSubstitutionRule = interface; // type: Aspose.Words.Fonts.FontInfoSubstitutionRule, namespace: Aspose.Words.Fonts
  DNFontNameSubstitutionRule = interface; // type: Aspose.Words.Fonts.FontNameSubstitutionRule, namespace: Aspose.Words.Fonts
  DNTableSubstitutionRule = interface; // type: Aspose.Words.Fonts.TableSubstitutionRule, namespace: Aspose.Words.Fonts
  DNFontSubstitutionSettings = interface; // type: Aspose.Words.Fonts.FontSubstitutionSettings, namespace: Aspose.Words.Fonts
  DNPhysicalFontInfo = interface; // type: Aspose.Words.Fonts.PhysicalFontInfo, namespace: Aspose.Words.Fonts
  DNFrameFormat = interface; // type: Aspose.Words.FrameFormat, namespace: Aspose.Words
  DNHyphenation = interface; // type: Aspose.Words.Hyphenation, namespace: Aspose.Words
  DNIDocumentReaderPlugin = interface; // type: Aspose.Words.IDocumentReaderPlugin, namespace: Aspose.Words
  DNIHyphenationCallback = interface; // type: Aspose.Words.IHyphenationCallback, namespace: Aspose.Words
  DNImageWatermarkOptions = interface; // type: Aspose.Words.ImageWatermarkOptions, namespace: Aspose.Words
  DNImportFormatOptions = interface; // type: Aspose.Words.ImportFormatOptions, namespace: Aspose.Words
  DNINodeChangingCallback = interface; // type: Aspose.Words.INodeChangingCallback, namespace: Aspose.Words
  DNInternableComplexAttr = interface; // type: Aspose.Words.InternableComplexAttr, namespace: Aspose.Words
  DNBorder = interface; // type: Aspose.Words.Border, namespace: Aspose.Words
  DNShading = interface; // type: Aspose.Words.Shading, namespace: Aspose.Words
  DNTabStopCollection = interface; // type: Aspose.Words.TabStopCollection, namespace: Aspose.Words
  DNInterruptionToken = interface; // type: Aspose.Words.InterruptionToken, namespace: Aspose.Words
  DNIWarningCallback = interface; // type: Aspose.Words.IWarningCallback, namespace: Aspose.Words
  DNIPageLayoutCallback = interface; // type: Aspose.Words.Layout.IPageLayoutCallback, namespace: Aspose.Words.Layout
  DNLayoutCollector = interface; // type: Aspose.Words.Layout.LayoutCollector, namespace: Aspose.Words.Layout
  DNLayoutEnumerator = interface; // type: Aspose.Words.Layout.LayoutEnumerator, namespace: Aspose.Words.Layout
  DNLayoutOptions = interface; // type: Aspose.Words.Layout.LayoutOptions, namespace: Aspose.Words.Layout
  DNPageLayoutCallbackArgs = interface; // type: Aspose.Words.Layout.PageLayoutCallbackArgs, namespace: Aspose.Words.Layout
  DNRevisionOptions = interface; // type: Aspose.Words.Layout.RevisionOptions, namespace: Aspose.Words.Layout
  DNLicense = interface; // type: Aspose.Words.License, namespace: Aspose.Words
  DNList = interface; // type: Aspose.Words.Lists.List, namespace: Aspose.Words.Lists
  DNListCollection = interface; // type: Aspose.Words.Lists.ListCollection, namespace: Aspose.Words.Lists
  DNListFormat = interface; // type: Aspose.Words.Lists.ListFormat, namespace: Aspose.Words.Lists
  DNListLabel = interface; // type: Aspose.Words.Lists.ListLabel, namespace: Aspose.Words.Lists
  DNListLevel = interface; // type: Aspose.Words.Lists.ListLevel, namespace: Aspose.Words.Lists
  DNListLevelCollection = interface; // type: Aspose.Words.Lists.ListLevelCollection, namespace: Aspose.Words.Lists
  DNIResourceLoadingCallback = interface; // type: Aspose.Words.Loading.IResourceLoadingCallback, namespace: Aspose.Words.Loading
  DNLanguagePreferences = interface; // type: Aspose.Words.Loading.LanguagePreferences, namespace: Aspose.Words.Loading
  DNLoadOptions = interface; // type: Aspose.Words.Loading.LoadOptions, namespace: Aspose.Words.Loading
  DNHtmlLoadOptions = interface; // type: Aspose.Words.Loading.HtmlLoadOptions, namespace: Aspose.Words.Loading
  DNPdfLoadOptions = interface; // type: Aspose.Words.Loading.PdfLoadOptions, namespace: Aspose.Words.Loading
  DNRtfLoadOptions = interface; // type: Aspose.Words.Loading.RtfLoadOptions, namespace: Aspose.Words.Loading
  DNTxtLoadOptions = interface; // type: Aspose.Words.Loading.TxtLoadOptions, namespace: Aspose.Words.Loading
  DNResourceLoadingArgs = interface; // type: Aspose.Words.Loading.ResourceLoadingArgs, namespace: Aspose.Words.Loading
  DNFieldMergingArgsBase = interface; // type: Aspose.Words.MailMerging.FieldMergingArgsBase, namespace: Aspose.Words.MailMerging
  DNFieldMergingArgs = interface; // type: Aspose.Words.MailMerging.FieldMergingArgs, namespace: Aspose.Words.MailMerging
  DNImageFieldMergingArgs = interface; // type: Aspose.Words.MailMerging.ImageFieldMergingArgs, namespace: Aspose.Words.MailMerging
  DNIFieldMergingCallback = interface; // type: Aspose.Words.MailMerging.IFieldMergingCallback, namespace: Aspose.Words.MailMerging
  DNIMailMergeCallback = interface; // type: Aspose.Words.MailMerging.IMailMergeCallback, namespace: Aspose.Words.MailMerging
  DNIMailMergeDataSource = interface; // type: Aspose.Words.MailMerging.IMailMergeDataSource, namespace: Aspose.Words.MailMerging
  DNIMailMergeDataSourceRoot = interface; // type: Aspose.Words.MailMerging.IMailMergeDataSourceRoot, namespace: Aspose.Words.MailMerging
  DNMailMerge = interface; // type: Aspose.Words.MailMerging.MailMerge, namespace: Aspose.Words.MailMerging
  DNMailMergeRegionInfo = interface; // type: Aspose.Words.MailMerging.MailMergeRegionInfo, namespace: Aspose.Words.MailMerging
  DNMappedDataFieldCollection = interface; // type: Aspose.Words.MailMerging.MappedDataFieldCollection, namespace: Aspose.Words.MailMerging
  DNCustomPart = interface; // type: Aspose.Words.Markup.CustomPart, namespace: Aspose.Words.Markup
  DNCustomPartCollection = interface; // type: Aspose.Words.Markup.CustomPartCollection, namespace: Aspose.Words.Markup
  DNCustomXmlPart = interface; // type: Aspose.Words.Markup.CustomXmlPart, namespace: Aspose.Words.Markup
  DNCustomXmlPartCollection = interface; // type: Aspose.Words.Markup.CustomXmlPartCollection, namespace: Aspose.Words.Markup
  DNCustomXmlProperty = interface; // type: Aspose.Words.Markup.CustomXmlProperty, namespace: Aspose.Words.Markup
  DNCustomXmlPropertyCollection = interface; // type: Aspose.Words.Markup.CustomXmlPropertyCollection, namespace: Aspose.Words.Markup
  DNCustomXmlSchemaCollection = interface; // type: Aspose.Words.Markup.CustomXmlSchemaCollection, namespace: Aspose.Words.Markup
  DNSdtListItem = interface; // type: Aspose.Words.Markup.SdtListItem, namespace: Aspose.Words.Markup
  DNSdtListItemCollection = interface; // type: Aspose.Words.Markup.SdtListItemCollection, namespace: Aspose.Words.Markup
  DNXmlMapping = interface; // type: Aspose.Words.Markup.XmlMapping, namespace: Aspose.Words.Markup
  DNMetered = interface; // type: Aspose.Words.Metered, namespace: Aspose.Words
  DNNode = interface; // type: Aspose.Words.Node, namespace: Aspose.Words
  DNBookmarkEnd = interface; // type: Aspose.Words.BookmarkEnd, namespace: Aspose.Words
  DNBookmarkStart = interface; // type: Aspose.Words.BookmarkStart, namespace: Aspose.Words
  DNCommentRangeEnd = interface; // type: Aspose.Words.CommentRangeEnd, namespace: Aspose.Words
  DNCommentRangeStart = interface; // type: Aspose.Words.CommentRangeStart, namespace: Aspose.Words
  DNCompositeNode = interface; // type: Aspose.Words.CompositeNode, namespace: Aspose.Words
  DNBuildingBlock = interface; // type: Aspose.Words.BuildingBlocks.BuildingBlock, namespace: Aspose.Words.BuildingBlocks
  DNDocumentBase = interface; // type: Aspose.Words.DocumentBase, namespace: Aspose.Words
  DNGlossaryDocument = interface; // type: Aspose.Words.BuildingBlocks.GlossaryDocument, namespace: Aspose.Words.BuildingBlocks
  DNDocument = interface; // type: Aspose.Words.Document, namespace: Aspose.Words
  DNShapeBase = interface; // type: Aspose.Words.Drawing.ShapeBase, namespace: Aspose.Words.Drawing
  DNGroupShape = interface; // type: Aspose.Words.Drawing.GroupShape, namespace: Aspose.Words.Drawing
  DNShape = interface; // type: Aspose.Words.Drawing.Shape, namespace: Aspose.Words.Drawing
  DNInlineStory = interface; // type: Aspose.Words.InlineStory, namespace: Aspose.Words
  DNComment = interface; // type: Aspose.Words.Comment, namespace: Aspose.Words
  DNFootnote = interface; // type: Aspose.Words.Notes.Footnote, namespace: Aspose.Words.Notes
  DNSmartTag = interface; // type: Aspose.Words.Markup.SmartTag, namespace: Aspose.Words.Markup
  DNStructuredDocumentTag = interface; // type: Aspose.Words.Markup.StructuredDocumentTag, namespace: Aspose.Words.Markup
  DNOfficeMath = interface; // type: Aspose.Words.Math.OfficeMath, namespace: Aspose.Words.Math
  DNParagraph = interface; // type: Aspose.Words.Paragraph, namespace: Aspose.Words
  DNSection = interface; // type: Aspose.Words.Section, namespace: Aspose.Words
  DNStory = interface; // type: Aspose.Words.Story, namespace: Aspose.Words
  DNBody = interface; // type: Aspose.Words.Body, namespace: Aspose.Words
  DNHeaderFooter = interface; // type: Aspose.Words.HeaderFooter, namespace: Aspose.Words
  DNCell = interface; // type: Aspose.Words.Tables.Cell, namespace: Aspose.Words.Tables
  DNRow = interface; // type: Aspose.Words.Tables.Row, namespace: Aspose.Words.Tables
  DNTable = interface; // type: Aspose.Words.Tables.Table, namespace: Aspose.Words.Tables
  DNEditableRangeEnd = interface; // type: Aspose.Words.EditableRangeEnd, namespace: Aspose.Words
  DNEditableRangeStart = interface; // type: Aspose.Words.EditableRangeStart, namespace: Aspose.Words
  DNInline = interface; // type: Aspose.Words.Inline, namespace: Aspose.Words
  DNRun = interface; // type: Aspose.Words.Run, namespace: Aspose.Words
  DNSpecialChar = interface; // type: Aspose.Words.SpecialChar, namespace: Aspose.Words
  DNAbsolutePositionTab = interface; // type: Aspose.Words.AbsolutePositionTab, namespace: Aspose.Words
  DNFieldChar = interface; // type: Aspose.Words.Fields.FieldChar, namespace: Aspose.Words.Fields
  DNFieldEnd = interface; // type: Aspose.Words.Fields.FieldEnd, namespace: Aspose.Words.Fields
  DNFieldSeparator = interface; // type: Aspose.Words.Fields.FieldSeparator, namespace: Aspose.Words.Fields
  DNFieldStart = interface; // type: Aspose.Words.Fields.FieldStart, namespace: Aspose.Words.Fields
  DNFormField = interface; // type: Aspose.Words.Fields.FormField, namespace: Aspose.Words.Fields
  DNStructuredDocumentTagRangeEnd = interface; // type: Aspose.Words.Markup.StructuredDocumentTagRangeEnd, namespace: Aspose.Words.Markup
  DNStructuredDocumentTagRangeStart = interface; // type: Aspose.Words.Markup.StructuredDocumentTagRangeStart, namespace: Aspose.Words.Markup
  DNSubDocument = interface; // type: Aspose.Words.SubDocument, namespace: Aspose.Words
  DNNodeChangingArgs = interface; // type: Aspose.Words.NodeChangingArgs, namespace: Aspose.Words
  DNNodeCollection = interface; // type: Aspose.Words.NodeCollection, namespace: Aspose.Words
  DNBuildingBlockCollection = interface; // type: Aspose.Words.BuildingBlocks.BuildingBlockCollection, namespace: Aspose.Words.BuildingBlocks
  DNCommentCollection = interface; // type: Aspose.Words.CommentCollection, namespace: Aspose.Words
  DNHeaderFooterCollection = interface; // type: Aspose.Words.HeaderFooterCollection, namespace: Aspose.Words
  DNParagraphCollection = interface; // type: Aspose.Words.ParagraphCollection, namespace: Aspose.Words
  DNRunCollection = interface; // type: Aspose.Words.RunCollection, namespace: Aspose.Words
  DNSectionCollection = interface; // type: Aspose.Words.SectionCollection, namespace: Aspose.Words
  DNCellCollection = interface; // type: Aspose.Words.Tables.CellCollection, namespace: Aspose.Words.Tables
  DNRowCollection = interface; // type: Aspose.Words.Tables.RowCollection, namespace: Aspose.Words.Tables
  DNTableCollection = interface; // type: Aspose.Words.Tables.TableCollection, namespace: Aspose.Words.Tables
  DNNodeImporter = interface; // type: Aspose.Words.NodeImporter, namespace: Aspose.Words
  DNNodeList = interface; // type: Aspose.Words.NodeList, namespace: Aspose.Words
  DNEndnoteOptions = interface; // type: Aspose.Words.Notes.EndnoteOptions, namespace: Aspose.Words.Notes
  DNFootnoteOptions = interface; // type: Aspose.Words.Notes.FootnoteOptions, namespace: Aspose.Words.Notes
  DNPageSetup = interface; // type: Aspose.Words.PageSetup, namespace: Aspose.Words
  DNParagraphFormat = interface; // type: Aspose.Words.ParagraphFormat, namespace: Aspose.Words
  DNPlainTextDocument = interface; // type: Aspose.Words.PlainTextDocument, namespace: Aspose.Words
  DNDocumentProperty = interface; // type: Aspose.Words.Properties.DocumentProperty, namespace: Aspose.Words.Properties
  DNDocumentPropertyCollection = interface; // type: Aspose.Words.Properties.DocumentPropertyCollection, namespace: Aspose.Words.Properties
  DNBuiltInDocumentProperties = interface; // type: Aspose.Words.Properties.BuiltInDocumentProperties, namespace: Aspose.Words.Properties
  DNCustomDocumentProperties = interface; // type: Aspose.Words.Properties.CustomDocumentProperties, namespace: Aspose.Words.Properties
  DNRange = interface; // type: Aspose.Words.Range, namespace: Aspose.Words
  DNNodeRendererBase = interface; // type: Aspose.Words.Rendering.NodeRendererBase, namespace: Aspose.Words.Rendering
  DNOfficeMathRenderer = interface; // type: Aspose.Words.Rendering.OfficeMathRenderer, namespace: Aspose.Words.Rendering
  DNShapeRenderer = interface; // type: Aspose.Words.Rendering.ShapeRenderer, namespace: Aspose.Words.Rendering
  DNPageInfo = interface; // type: Aspose.Words.Rendering.PageInfo, namespace: Aspose.Words.Rendering
  DNPrinterSettingsContainer = interface; // type: Aspose.Words.Rendering.PrinterSettingsContainer, namespace: Aspose.Words.Rendering
  DNThumbnailGeneratingOptions = interface; // type: Aspose.Words.Rendering.ThumbnailGeneratingOptions, namespace: Aspose.Words.Rendering
  DNFindReplaceOptions = interface; // type: Aspose.Words.Replacing.FindReplaceOptions, namespace: Aspose.Words.Replacing
  DNIReplacingCallback = interface; // type: Aspose.Words.Replacing.IReplacingCallback, namespace: Aspose.Words.Replacing
  DNReplacingArgs = interface; // type: Aspose.Words.Replacing.ReplacingArgs, namespace: Aspose.Words.Replacing
  DNCsvDataLoadOptions = interface; // type: Aspose.Words.Reporting.CsvDataLoadOptions, namespace: Aspose.Words.Reporting
  DNCsvDataSource = interface; // type: Aspose.Words.Reporting.CsvDataSource, namespace: Aspose.Words.Reporting
  DNJsonDataLoadOptions = interface; // type: Aspose.Words.Reporting.JsonDataLoadOptions, namespace: Aspose.Words.Reporting
  DNJsonDataSource = interface; // type: Aspose.Words.Reporting.JsonDataSource, namespace: Aspose.Words.Reporting
  DNKnownTypeSet = interface; // type: Aspose.Words.Reporting.KnownTypeSet, namespace: Aspose.Words.Reporting
  DNReportingEngine = interface; // type: Aspose.Words.Reporting.ReportingEngine, namespace: Aspose.Words.Reporting
  DNXmlDataLoadOptions = interface; // type: Aspose.Words.Reporting.XmlDataLoadOptions, namespace: Aspose.Words.Reporting
  DNXmlDataSource = interface; // type: Aspose.Words.Reporting.XmlDataSource, namespace: Aspose.Words.Reporting
  DNRevision = interface; // type: Aspose.Words.Revision, namespace: Aspose.Words
  DNRevisionCollection = interface; // type: Aspose.Words.RevisionCollection, namespace: Aspose.Words
  DNRevisionGroup = interface; // type: Aspose.Words.RevisionGroup, namespace: Aspose.Words
  DNRevisionGroupCollection = interface; // type: Aspose.Words.RevisionGroupCollection, namespace: Aspose.Words
  DNBookmarksOutlineLevelCollection = interface; // type: Aspose.Words.Saving.BookmarksOutlineLevelCollection, namespace: Aspose.Words.Saving
  DNCssSavingArgs = interface; // type: Aspose.Words.Saving.CssSavingArgs, namespace: Aspose.Words.Saving
  DNDocumentPartSavingArgs = interface; // type: Aspose.Words.Saving.DocumentPartSavingArgs, namespace: Aspose.Words.Saving
  DNDownsampleOptions = interface; // type: Aspose.Words.Saving.DownsampleOptions, namespace: Aspose.Words.Saving
  DNFontSavingArgs = interface; // type: Aspose.Words.Saving.FontSavingArgs, namespace: Aspose.Words.Saving
  DNGraphicsQualityOptions = interface; // type: Aspose.Words.Saving.GraphicsQualityOptions, namespace: Aspose.Words.Saving
  DNICssSavingCallback = interface; // type: Aspose.Words.Saving.ICssSavingCallback, namespace: Aspose.Words.Saving
  DNIDocumentPartSavingCallback = interface; // type: Aspose.Words.Saving.IDocumentPartSavingCallback, namespace: Aspose.Words.Saving
  DNIFontSavingCallback = interface; // type: Aspose.Words.Saving.IFontSavingCallback, namespace: Aspose.Words.Saving
  DNIImageSavingCallback = interface; // type: Aspose.Words.Saving.IImageSavingCallback, namespace: Aspose.Words.Saving
  DNImageSavingArgs = interface; // type: Aspose.Words.Saving.ImageSavingArgs, namespace: Aspose.Words.Saving
  DNIPageSavingCallback = interface; // type: Aspose.Words.Saving.IPageSavingCallback, namespace: Aspose.Words.Saving
  DNIResourceSavingCallback = interface; // type: Aspose.Words.Saving.IResourceSavingCallback, namespace: Aspose.Words.Saving
  DNMetafileRenderingOptions = interface; // type: Aspose.Words.Saving.MetafileRenderingOptions, namespace: Aspose.Words.Saving
  DNOutlineOptions = interface; // type: Aspose.Words.Saving.OutlineOptions, namespace: Aspose.Words.Saving
  DNPageRange = interface; // type: Aspose.Words.Saving.PageRange, namespace: Aspose.Words.Saving
  DNPageSavingArgs = interface; // type: Aspose.Words.Saving.PageSavingArgs, namespace: Aspose.Words.Saving
  DNPageSet = interface; // type: Aspose.Words.Saving.PageSet, namespace: Aspose.Words.Saving
  DNPdfDigitalSignatureDetails = interface; // type: Aspose.Words.Saving.PdfDigitalSignatureDetails, namespace: Aspose.Words.Saving
  DNPdfDigitalSignatureTimestampSettings = interface; // type: Aspose.Words.Saving.PdfDigitalSignatureTimestampSettings, namespace: Aspose.Words.Saving
  DNPdfEncryptionDetails = interface; // type: Aspose.Words.Saving.PdfEncryptionDetails, namespace: Aspose.Words.Saving
  DNResourceSavingArgs = interface; // type: Aspose.Words.Saving.ResourceSavingArgs, namespace: Aspose.Words.Saving
  DNSaveOptions = interface; // type: Aspose.Words.Saving.SaveOptions, namespace: Aspose.Words.Saving
  DNDocSaveOptions = interface; // type: Aspose.Words.Saving.DocSaveOptions, namespace: Aspose.Words.Saving
  DNFixedPageSaveOptions = interface; // type: Aspose.Words.Saving.FixedPageSaveOptions, namespace: Aspose.Words.Saving
  DNHtmlFixedSaveOptions = interface; // type: Aspose.Words.Saving.HtmlFixedSaveOptions, namespace: Aspose.Words.Saving
  DNImageSaveOptions = interface; // type: Aspose.Words.Saving.ImageSaveOptions, namespace: Aspose.Words.Saving
  DNPclSaveOptions = interface; // type: Aspose.Words.Saving.PclSaveOptions, namespace: Aspose.Words.Saving
  DNPdfSaveOptions = interface; // type: Aspose.Words.Saving.PdfSaveOptions, namespace: Aspose.Words.Saving
  DNPsSaveOptions = interface; // type: Aspose.Words.Saving.PsSaveOptions, namespace: Aspose.Words.Saving
  DNSvgSaveOptions = interface; // type: Aspose.Words.Saving.SvgSaveOptions, namespace: Aspose.Words.Saving
  DNXamlFixedSaveOptions = interface; // type: Aspose.Words.Saving.XamlFixedSaveOptions, namespace: Aspose.Words.Saving
  DNXpsSaveOptions = interface; // type: Aspose.Words.Saving.XpsSaveOptions, namespace: Aspose.Words.Saving
  DNHtmlSaveOptions = interface; // type: Aspose.Words.Saving.HtmlSaveOptions, namespace: Aspose.Words.Saving
  DNOdtSaveOptions = interface; // type: Aspose.Words.Saving.OdtSaveOptions, namespace: Aspose.Words.Saving
  DNOoxmlSaveOptions = interface; // type: Aspose.Words.Saving.OoxmlSaveOptions, namespace: Aspose.Words.Saving
  DNRtfSaveOptions = interface; // type: Aspose.Words.Saving.RtfSaveOptions, namespace: Aspose.Words.Saving
  DNTxtSaveOptionsBase = interface; // type: Aspose.Words.Saving.TxtSaveOptionsBase, namespace: Aspose.Words.Saving
  DNMarkdownSaveOptions = interface; // type: Aspose.Words.Saving.MarkdownSaveOptions, namespace: Aspose.Words.Saving
  DNTxtSaveOptions = interface; // type: Aspose.Words.Saving.TxtSaveOptions, namespace: Aspose.Words.Saving
  DNWordML2003SaveOptions = interface; // type: Aspose.Words.Saving.WordML2003SaveOptions, namespace: Aspose.Words.Saving
  DNXamlFlowSaveOptions = interface; // type: Aspose.Words.Saving.XamlFlowSaveOptions, namespace: Aspose.Words.Saving
  DNSaveOutputParameters = interface; // type: Aspose.Words.Saving.SaveOutputParameters, namespace: Aspose.Words.Saving
  DNTxtListIndentation = interface; // type: Aspose.Words.Saving.TxtListIndentation, namespace: Aspose.Words.Saving
  DNCompatibilityOptions = interface; // type: Aspose.Words.Settings.CompatibilityOptions, namespace: Aspose.Words.Settings
  DNHyphenationOptions = interface; // type: Aspose.Words.Settings.HyphenationOptions, namespace: Aspose.Words.Settings
  DNMailMergeSettings = interface; // type: Aspose.Words.Settings.MailMergeSettings, namespace: Aspose.Words.Settings
  DNOdso = interface; // type: Aspose.Words.Settings.Odso, namespace: Aspose.Words.Settings
  DNOdsoFieldMapData = interface; // type: Aspose.Words.Settings.OdsoFieldMapData, namespace: Aspose.Words.Settings
  DNOdsoFieldMapDataCollection = interface; // type: Aspose.Words.Settings.OdsoFieldMapDataCollection, namespace: Aspose.Words.Settings
  DNOdsoRecipientData = interface; // type: Aspose.Words.Settings.OdsoRecipientData, namespace: Aspose.Words.Settings
  DNOdsoRecipientDataCollection = interface; // type: Aspose.Words.Settings.OdsoRecipientDataCollection, namespace: Aspose.Words.Settings
  DNViewOptions = interface; // type: Aspose.Words.Settings.ViewOptions, namespace: Aspose.Words.Settings
  DNWriteProtection = interface; // type: Aspose.Words.Settings.WriteProtection, namespace: Aspose.Words.Settings
  DNBasicTextShaperCache = interface; // type: Aspose.Words.Shaping.BasicTextShaperCache, namespace: Aspose.Words.Shaping
  DNCluster = interface; // type: Aspose.Words.Shaping.Cluster, namespace: Aspose.Words.Shaping
  DNGlyph = interface; // type: Aspose.Words.Shaping.Glyph, namespace: Aspose.Words.Shaping
  DNITextShaperFactory = interface; // type: Aspose.Words.Shaping.ITextShaperFactory, namespace: Aspose.Words.Shaping
  DNSignatureLineOptions = interface; // type: Aspose.Words.SignatureLineOptions, namespace: Aspose.Words
  DNStyle = interface; // type: Aspose.Words.Style, namespace: Aspose.Words
  DNTableStyle = interface; // type: Aspose.Words.TableStyle, namespace: Aspose.Words
  DNStyleCollection = interface; // type: Aspose.Words.StyleCollection, namespace: Aspose.Words
  DNCellFormat = interface; // type: Aspose.Words.Tables.CellFormat, namespace: Aspose.Words.Tables
  DNPreferredWidth = interface; // type: Aspose.Words.Tables.PreferredWidth, namespace: Aspose.Words.Tables
  DNRowFormat = interface; // type: Aspose.Words.Tables.RowFormat, namespace: Aspose.Words.Tables
  DNTabStop = interface; // type: Aspose.Words.TabStop, namespace: Aspose.Words
  DNTextColumn = interface; // type: Aspose.Words.TextColumn, namespace: Aspose.Words
  DNTextColumnCollection = interface; // type: Aspose.Words.TextColumnCollection, namespace: Aspose.Words
  DNTextWatermarkOptions = interface; // type: Aspose.Words.TextWatermarkOptions, namespace: Aspose.Words
  DNTheme = interface; // type: Aspose.Words.Themes.Theme, namespace: Aspose.Words.Themes
  DNThemeColors = interface; // type: Aspose.Words.Themes.ThemeColors, namespace: Aspose.Words.Themes
  DNThemeFonts = interface; // type: Aspose.Words.Themes.ThemeFonts, namespace: Aspose.Words.Themes
  DNVariableCollection = interface; // type: Aspose.Words.VariableCollection, namespace: Aspose.Words
  DNVbaModule = interface; // type: Aspose.Words.Vba.VbaModule, namespace: Aspose.Words.Vba
  DNVbaModuleCollection = interface; // type: Aspose.Words.Vba.VbaModuleCollection, namespace: Aspose.Words.Vba
  DNVbaProject = interface; // type: Aspose.Words.Vba.VbaProject, namespace: Aspose.Words.Vba
  DNVbaReference = interface; // type: Aspose.Words.Vba.VbaReference, namespace: Aspose.Words.Vba
  DNVbaReferenceCollection = interface; // type: Aspose.Words.Vba.VbaReferenceCollection, namespace: Aspose.Words.Vba
  DNWarningInfo = interface; // type: Aspose.Words.WarningInfo, namespace: Aspose.Words
  DNWarningInfoCollection = interface; // type: Aspose.Words.WarningInfoCollection, namespace: Aspose.Words
  DNWatermark = interface; // type: Aspose.Words.Watermark, namespace: Aspose.Words
  DNTaskPaneCollection = interface; // type: Aspose.Words.WebExtensions.TaskPaneCollection, namespace: Aspose.Words.WebExtensions
  DNWebExtensionBindingCollection = interface; // type: Aspose.Words.WebExtensions.WebExtensionBindingCollection, namespace: Aspose.Words.WebExtensions
  DNWebExtensionPropertyCollection = interface; // type: Aspose.Words.WebExtensions.WebExtensionPropertyCollection, namespace: Aspose.Words.WebExtensions
  DNWebExtensionReferenceCollection = interface; // type: Aspose.Words.WebExtensions.WebExtensionReferenceCollection, namespace: Aspose.Words.WebExtensions
  DNTaskPane = interface; // type: Aspose.Words.WebExtensions.TaskPane, namespace: Aspose.Words.WebExtensions
  DNWebExtension = interface; // type: Aspose.Words.WebExtensions.WebExtension, namespace: Aspose.Words.WebExtensions
  DNWebExtensionBinding = interface; // type: Aspose.Words.WebExtensions.WebExtensionBinding, namespace: Aspose.Words.WebExtensions
  DNWebExtensionProperty = interface; // type: Aspose.Words.WebExtensions.WebExtensionProperty, namespace: Aspose.Words.WebExtensions
  DNWebExtensionReference = interface; // type: Aspose.Words.WebExtensions.WebExtensionReference, namespace: Aspose.Words.WebExtensions
  DNDocumentReaderPluginLoadException = interface; // type: Aspose.Words.DocumentReaderPluginLoadException, namespace: Aspose.Words
  DNFileCorruptedException = interface; // type: Aspose.Words.FileCorruptedException, namespace: Aspose.Words
  DNIncorrectPasswordException = interface; // type: Aspose.Words.IncorrectPasswordException, namespace: Aspose.Words
  DNUnsupportedFileFormatException = interface; // type: Aspose.Words.UnsupportedFileFormatException, namespace: Aspose.Words
  DNITextShaper = interface; // type: Aspose.Words.Shaping.ITextShaper, namespace: Aspose.Words.Shaping
  DNAsposeWordsPrintDocument = interface; // type: Aspose.Words.Rendering.AsposeWordsPrintDocument, namespace: Aspose.Words.Rendering


{ objects }

  //-------------namespace: Aspose.Words----------------
  DNBookmarkClass = interface(DDN.mscorlib.DNObjectClass)
  ['{43AEC448-050E-59CB-9120-69177BD4F172}']
  end;

  ///<summary>
  ///  Represents a single bookmark.
  ///</summary>
  ///<remarks><p><see cref="T:Aspose.Words.Bookmark" />
  ///  is a "facade" object that encapsulates two nodes <see cref="P:Aspose.Words.Bookmark.BookmarkStart" />
  ///  and <see cref="P:Aspose.Words.Bookmark.BookmarkEnd" />
  ///  in a document tree and allows to work with a bookmark as a single object.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.Bookmark')]
  DNBookmark = interface(DDN.mscorlib.DNObject)
  ['{CFD911E7-64F8-36B0-B4D4-E8EBD37442F9}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_BookmarkStart: DNBookmarkStart;
    function get_BookmarkEnd: DNBookmarkEnd;
    function get_IsColumn: Boolean;
    function get_FirstColumn: Int32;
    function get_LastColumn: Int32;

  { methods } 

    ///<summary>
    ///  Removes the bookmark from the document. Does not remove text inside the bookmark.
    ///</summary>
    procedure Remove;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the name of the bookmark.
    ///</summary>
    ///<remarks>
    ///  Note that if you change the name of a bookmark to a name that already exists in the document,
    ///  no error will be given and only the first bookmark will be stored when you save the document.
    ///</remarks>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets or sets the text enclosed in the bookmark.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Gets the node that represents the start of the bookmark.
    ///</summary>
    property BookmarkStart: DNBookmarkStart read get_BookmarkStart;
    ///<summary>
    ///  Gets the node that represents the end of the bookmark.
    ///</summary>
    property BookmarkEnd: DNBookmarkEnd read get_BookmarkEnd;
    ///<summary>
    ///  Returns <b>true</b>
    ///  if this bookmark is a table column bookmark.
    ///</summary>
    property IsColumn: Boolean read get_IsColumn;
    ///<summary>
    ///  Gets the zero-based index of the first column of the table column range associated with the bookmark.
    ///</summary>
    ///<remarks>
    ///  Returns <b>-1</b>
    ///  if this bookmark is not a table column bookmark.
    ///</remarks>
    property FirstColumn: Int32 read get_FirstColumn;
    ///<summary>
    ///  Gets the zero-based index of the last column of the table column range associated with the bookmark.
    ///</summary>
    ///<remarks>
    ///  Returns <b>-1</b>
    ///  if this bookmark is not a table column bookmark.
    ///</remarks>
    property LastColumn: Int32 read get_LastColumn;
  end;

  TDNBookmark = class(TDNGenericImport<DNBookmarkClass, DNBookmark>) end;

  //-------------namespace: Aspose.Words----------------
  DNBookmarkCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2FFA0F26-E1F2-5B05-9F70-23EFEB5914BF}']
  end;

  ///<summary>
  ///  A collection of <see cref="T:Aspose.Words.Bookmark" />
  ///  objects that represent the bookmarks in the specified range.
  ///</summary>
  [DNTypeName('Aspose.Words.BookmarkCollection')]
  DNBookmarkCollection = interface(DDN.mscorlib.DNObject)
  ['{FA9215EE-0796-354E-B443-C79FBF4B479E}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNBookmark; overload;
    function get_Item(bookmarkName: string): DNBookmark; overload;

  { methods } 

    ///<summary>
    ///  Removes the specified bookmark from the document.
    ///</summary>
    ///  <param name="bookmark">The bookmark to remove.</param>
    procedure Remove(bookmark: DNBookmark); overload;
    ///<summary>
    ///  Removes a bookmark with the specified name.
    ///</summary>
    ///  <param name="bookmarkName">The case-insensitive name of the bookmark to remove.</param>
    procedure Remove(bookmarkName: string); overload;
    ///<summary>
    ///  Removes a bookmark at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index of the bookmark to remove.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all bookmarks from this collection and from the document.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Returns an enumerator object.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNBookmark>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the number of bookmarks in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNBookmark read get_Item; default;
    property Item[bookmarkName: string]: DNBookmark read get_Item; default;
  end;

  TDNBookmarkCollection = class(TDNGenericImport<DNBookmarkCollectionClass, DNBookmarkCollection>) end;

  //-------------namespace: Aspose.Words----------------
  DNBorderCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{03A74EFA-6854-5DE1-B0BF-AC310B88982E}']
  end;

  ///<summary>
  ///  A collection of Border objects.
  ///</summary>
  ///<remarks>
  ///  Different document elements have different borders.
  ///  For example, ParagraphFormat has Bottom, Left, Right and Top borders.
  ///  You can specify different formatting for each border independently or
  ///  enumerate through all borders and apply same formatting.
  ///</remarks>
  ///<dev>
  ///  This is a presentation object only, does not store any model data.
  ///</dev>
  [DNTypeName('Aspose.Words.BorderCollection')]
  DNBorderCollection = interface(DDN.mscorlib.DNObject)
  ['{0962E84A-ED6F-3E5D-BE9B-4BBC1DA3DE43}']
  { getters & setters } 

    function get_Item(borderType: DNBorderType): DNBorder; overload;
    function get_Item(index: Int32): DNBorder; overload;
    function get_Left: DNBorder;
    function get_Right: DNBorder;
    function get_Top: DNBorder;
    function get_Bottom: DNBorder;
    function get_Horizontal: DNBorder;
    function get_Vertical: DNBorder;
    function get_Count: Int32;
    function get_LineWidth: Double;
    procedure set_LineWidth(value: Double);
    function get_LineStyle: DNLineStyle;
    procedure set_LineStyle(value: DNLineStyle);
    function get_Color: DDN.Aspose.Common.DNColor;
    procedure set_Color(value: DDN.Aspose.Common.DNColor);
    function get_DistanceFromText: Double;
    procedure set_DistanceFromText(value: Double);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);

  { methods } 

    ///<summary>
    ///  Compares collections of borders.
    ///</summary>
    function Equals(brColl: DNBorderCollection): Boolean; overload;
    ///<summary>
    ///  Removes all borders of an object.
    ///</summary>
    procedure ClearFormatting;
    ///<summary>
    ///  Returns an enumerator object that can be used to iterate over all borders in the collection.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNBorder>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[borderType: DNBorderType]: DNBorder read get_Item; default;
    property Item[index: Int32]: DNBorder read get_Item; default;
    ///<summary>
    ///  Gets the left border.
    ///</summary>
    property Left: DNBorder read get_Left;
    ///<summary>
    ///  Gets the right border.
    ///</summary>
    property Right: DNBorder read get_Right;
    ///<summary>
    ///  Gets the top border.
    ///</summary>
    property Top: DNBorder read get_Top;
    ///<summary>
    ///  Gets the bottom border.
    ///</summary>
    property Bottom: DNBorder read get_Bottom;
    ///<summary>
    ///  Gets the horizontal border that is used between cells or conforming paragraphs.
    ///</summary>
    property Horizontal: DNBorder read get_Horizontal;
    ///<summary>
    ///  Gets the vertical border that is used between cells.
    ///</summary>
    property Vertical: DNBorder read get_Vertical;
    ///<summary>
    ///  Gets the number of borders in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Gets or sets the border width in points.
    ///</summary>
    ///<remarks><p>Returns the width of the first border in the collection.</p>
    ///  <p>Sets the width of all borders in the collection excluding diagonal borders.</p>
    ///</remarks>
    property LineWidth: Double read get_LineWidth write set_LineWidth;
    ///<summary>
    ///  Gets or sets the border style.
    ///</summary>
    ///<remarks><p>Returns the style of the first border in the collection.</p>
    ///  <p>Sets the style of all borders in the collection excluding diagonal borders.</p>
    ///</remarks>
    property LineStyle: DNLineStyle read get_LineStyle write set_LineStyle;
    ///<summary>
    ///  Gets or sets the border color.
    ///</summary>
    ///<remarks><p>Returns the color of the first border in the collection.</p>
    ///  <p>Sets the color of all borders in the collection excluding diagonal borders.</p>
    ///</remarks>
    property Color: DDN.Aspose.Common.DNColor read get_Color write set_Color;
    ///<summary>
    ///  Gets or sets distance of the border from text in points.
    ///</summary>
    ///<remarks><p>Gets the distance from text for the first border.</p>
    ///  <p>Sets the distance from text for all borders in the collection excluding diagonal borders.</p>
    ///  <p>Has no effect and will be automatically reset to zero for borders of table cells.</p>
    ///</remarks>
    property DistanceFromText: Double read get_DistanceFromText write set_DistanceFromText;
    ///<summary>
    ///  Gets or sets a value indicating whether the border has a shadow.
    ///</summary>
    ///<remarks><p>Gets the value from the first border in the collection.</p>
    ///  <p>Sets the value for all borders in the collection excluding diagonal borders.</p>
    ///</remarks>
    property Shadow: Boolean read get_Shadow write set_Shadow;
  end;

  TDNBorderCollection = class(TDNGenericImport<DNBorderCollectionClass, DNBorderCollection>) end;

  //-------------namespace: Aspose.Words----------------
  DNBuildVersionInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{71F3FA54-873E-5806-91E9-8ABDD4097372}']
  { static getter & setter } 

    {class} function get_Product: string;
    {class} function get_Version: string;

  { static propertys } 

    ///<summary>
    ///  Gets the full name of the product.
    ///</summary>
    {class} property Product: string read get_Product;
    ///<summary>
    ///  Gets the product version.
    ///</summary>
    ///<remarks><para>The product version is in the "Major.Minor.Hotfix.0" format.</para></remarks>
    {class} property Version: string read get_Version;
  end;

  ///<summary>
  ///  Provides information about the current product name and version.
  ///</summary>
  [DNTypeName('Aspose.Words.BuildVersionInfo')]
  DNBuildVersionInfo = interface(DDN.mscorlib.DNObject)
  ['{4B06F422-6C19-30EF-A905-A8B44C118369}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBuildVersionInfo = class(TDNGenericImport<DNBuildVersionInfoClass, DNBuildVersionInfo>) end;

  //-------------namespace: Aspose.Words----------------
  DNCleanupOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{02D58285-2A26-5A97-85AF-8818BEB9EE4E}']
  { constructors } 

    {class} function init: DNCleanupOptions;

  end;

  ///<summary>
  ///  Allows to specify options for document cleaning.
  ///</summary>
  [DNTypeName('Aspose.Words.CleanupOptions')]
  DNCleanupOptions = interface(DDN.mscorlib.DNObject)
  ['{249523B2-5932-307E-B734-31769661E7D9}']
  { getters & setters } 

    function get_UnusedStyles: Boolean;
    procedure set_UnusedStyles(value: Boolean);
    function get_UnusedLists: Boolean;
    procedure set_UnusedLists(value: Boolean);
    function get_DuplicateStyle: Boolean;
    procedure set_DuplicateStyle(value: Boolean);
    function get_UnusedBuiltinStyles: Boolean;
    procedure set_UnusedBuiltinStyles(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies whether unused styles should be removed from document.
    ///  Default value is <b>true</b>
    ///  .
    ///</summary>
    property UnusedStyles: Boolean read get_UnusedStyles write set_UnusedStyles;
    ///<summary>
    ///  Specifies whether unused list and list definitions should be removed from document.
    ///  Default value is <b>true</b>
    ///  .
    ///</summary>
    property UnusedLists: Boolean read get_UnusedLists write set_UnusedLists;
    ///<summary>
    ///  Gets/sets a flag indicating whether duplicate styles should be removed from document.
    ///  Default value is <b>false</b>
    ///  .
    ///</summary>
    property DuplicateStyle: Boolean read get_DuplicateStyle write set_DuplicateStyle;
    ///<summary>
    ///  Specifies that unused <see cref="P:Aspose.Words.Style.BuiltIn" />
    ///  styles should be removed from document.
    ///</summary>
    property UnusedBuiltinStyles: Boolean read get_UnusedBuiltinStyles write set_UnusedBuiltinStyles;
  end;

  TDNCleanupOptions = class(TDNGenericImport<DNCleanupOptionsClass, DNCleanupOptions>) end;

  //-------------namespace: Aspose.Words----------------
  DNComHelperClass = interface(DDN.mscorlib.DNObjectClass)
  ['{87041206-2EDF-5C05-9E17-133EF2116868}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class.
    ///</summary>
    {class} function init: DNComHelper;

  end;

  ///<summary>
  ///  Provides methods for COM clients to load a document into Aspose.Words.
  ///</summary>
  ///<remarks><p>Use the <see cref="T:Aspose.Words.ComHelper" />
  ///  class to load a document from a file or stream into a
  ///<see cref="T:Aspose.Words.Document" />
  ///  object in a COM application.</p>
  ///  <p>The <see cref="T:Aspose.Words.Document" />
  ///  class provides a default constructor to create a new document
  ///  and also provides overloaded constructors to load a document from a file or stream.
  ///  If you are using Aspose.Words from a .NET application, you can use all of the <see cref="T:Aspose.Words.Document" />
  ///  constructors directly, but if you are using Aspose.Words from a COM application,
  ///  only the default <see cref="T:Aspose.Words.Document" />
  ///  constructor is available.</p>
  ///</remarks>
  ///<example><code>
  ///  [VBScript]
  ///  Dim helper
  ///  Set helper = CreateObject("Aspose.Words.ComHelper")
  ///  Dim doc
  ///  Set doc = helper.Open(fileName)
  ///</code></example>
  [DNTypeName('Aspose.Words.ComHelper')]
  DNComHelper = interface(DDN.mscorlib.DNObject)
  ['{EE4C722F-91C2-3CDC-B5BA-C6D600A9E961}']
  { methods } 

    ///<overloads>Allows a COM application to load a document.</overloads><summary>
    ///  Allows a COM application to load a <see cref="T:Aspose.Words.Document" />
    ///  from a file.
    ///</summary>
    ///<remarks><p>This method is same as calling the <see cref="T:Aspose.Words.Document" />
    ///  constructor with a file name parameter.</p>
    ///</remarks>
    ///<example><code>
    ///  [VBScript]
    ///  Dim helper
    ///  Set helper = CreateObject("Aspose.Words.ComHelper")
    ///  Dim doc
    ///  Set doc = helper.Open(fileName)
    ///</code></example><param name="fileName">Filename of the document to load.</param>
    ///<returns>A <see cref="T:Aspose.Words.Document" />
    ///  object that represents a Word document.</returns>
    function Open(fileName: string): DNDocument; overload;
    ///<summary>
    ///  Allows a COM application to load <see cref="T:Aspose.Words.Document" />
    ///  from a stream.
    ///</summary>
    ///<remarks><p>This method is same as calling the <see cref="T:Aspose.Words.Document" />
    ///  constructor with a stream parameter.</p>
    ///</remarks>
    ///  <param name="stream">A .NET stream object that contains the document to load.</param>
    ///<returns>A <see cref="T:Aspose.Words.Document" />
    ///  object that represents a Word document.</returns>
    function Open(stream: DDN.mscorlib.DNStream): DNDocument; overload;
    ///<summary>
    ///  Allows a COM application to load a <see cref="T:Aspose.Words.Document" />
    ///  from an IStream object.
    ///</summary>
    ///  <param name="stream">A .NET IStream object that contains the document to load.</param>
    ///<returns>A <see cref="T:Aspose.Words.Document" />
    ///  object that represents a Word document.</returns>
    function OpenIStream(stream: DDN.mscorlib.DNIStream): DNDocument;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNComHelper = class(TDNGenericImport<DNComHelperClass, DNComHelper>) end;

  //-------------namespace: Aspose.Words.Comparing----------------
  DNCompareOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DBC4FB73-B420-5613-A13E-FA9E0522318E}']
  { constructors } 

    {class} function init: DNCompareOptions;

  end;

  ///<summary>
  ///  Allows to choose advanced options for document comparison operation.
  ///</summary>
  [DNTypeName('Aspose.Words.Comparing.CompareOptions')]
  DNCompareOptions = interface(DDN.mscorlib.DNObject)
  ['{F3CA892E-8D71-3A0F-BA3C-A8D699D5AAC8}']
  { getters & setters } 

    function get_IgnoreCaseChanges: Boolean;
    procedure set_IgnoreCaseChanges(value: Boolean);
    function get_IgnoreTables: Boolean;
    procedure set_IgnoreTables(value: Boolean);
    function get_IgnoreFields: Boolean;
    procedure set_IgnoreFields(value: Boolean);
    function get_IgnoreFootnotes: Boolean;
    procedure set_IgnoreFootnotes(value: Boolean);
    function get_IgnoreComments: Boolean;
    procedure set_IgnoreComments(value: Boolean);
    function get_IgnoreTextboxes: Boolean;
    procedure set_IgnoreTextboxes(value: Boolean);
    function get_IgnoreFormatting: Boolean;
    procedure set_IgnoreFormatting(value: Boolean);
    function get_IgnoreHeadersAndFooters: Boolean;
    procedure set_IgnoreHeadersAndFooters(value: Boolean);
    function get_Target: DNComparisonTargetType;
    procedure set_Target(value: DNComparisonTargetType);
    function get_Granularity: DNGranularity;
    procedure set_Granularity(value: DNGranularity);
    function get_IgnoreDmlUniqueId: Boolean;
    procedure set_IgnoreDmlUniqueId(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  True indicates that documents comparison is case insensitive.
    ///  By default comparison is case sensitive.
    ///</summary>
    property IgnoreCaseChanges: Boolean read get_IgnoreCaseChanges write set_IgnoreCaseChanges;
    ///<summary>
    ///  Specifies whether to compare the differences in data contained in tables.
    ///  By default tables are not ignored.
    ///</summary>
    property IgnoreTables: Boolean read get_IgnoreTables write set_IgnoreTables;
    ///<summary>
    ///  Specifies whether to compare differences in fields.
    ///  By default fields are not ignored.
    ///</summary>
    property IgnoreFields: Boolean read get_IgnoreFields write set_IgnoreFields;
    ///<summary>
    ///  Specifies whether to compare differences in footnotes and endnotes.
    ///  By default footnotes are not ignored.
    ///</summary>
    property IgnoreFootnotes: Boolean read get_IgnoreFootnotes write set_IgnoreFootnotes;
    ///<summary>
    ///  Specifies whether to compare differences in comments.
    ///  By default comments are not ignored.
    ///</summary>
    property IgnoreComments: Boolean read get_IgnoreComments write set_IgnoreComments;
    ///<summary>
    ///  Specifies whether to compare differences in the data contained within text boxes.
    ///  By default textboxes are not ignored.
    ///</summary>
    property IgnoreTextboxes: Boolean read get_IgnoreTextboxes write set_IgnoreTextboxes;
    ///<summary>
    ///  True indicates that formatting is ignored.
    ///  By default document formatting is not ignored.
    ///</summary>
    property IgnoreFormatting: Boolean read get_IgnoreFormatting write set_IgnoreFormatting;
    ///<summary>
    ///  True indicates that headers and footers content is ignored.
    ///  By default headers and footers are not ignored.
    ///</summary>
    property IgnoreHeadersAndFooters: Boolean read get_IgnoreHeadersAndFooters write set_IgnoreHeadersAndFooters;
    ///<summary>
    ///  Specifies which document shall be used as a target during comparison.
    ///</summary>
    property Target: DNComparisonTargetType read get_Target write set_Target;
    ///<summary>
    ///  Specifies whether changes are tracked by character or by word.
    ///  Default value is <see cref="F:Aspose.Words.Comparing.Granularity.WordLevel" />
    ///  .
    ///</summary>
    property Granularity: DNGranularity read get_Granularity write set_Granularity;
    ///<summary>
    ///  Specifies whether to ignore difference in DrawingML unique Id.
    ///  Default value is <b>false</b>
    ///  .
    ///</summary>
    property IgnoreDmlUniqueId: Boolean read get_IgnoreDmlUniqueId write set_IgnoreDmlUniqueId;
  end;

  TDNCompareOptions = class(TDNGenericImport<DNCompareOptionsClass, DNCompareOptions>) end;

  //-------------namespace: Aspose.Words----------------
  DNConditionalStyleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C8CD1329-F7AD-56A0-80AF-C20220C06048}']
  end;

  ///<summary>
  ///  Represents special formatting applied to some area of a table with assigned table style.
  ///</summary>
  [DNTypeName('Aspose.Words.ConditionalStyle')]
  DNConditionalStyle = interface(DDN.mscorlib.DNObject)
  ['{F4DE8FB8-1690-3A1F-8B7A-4DAB17519A7C}']
  { getters & setters } 

    function get_ParagraphFormat: DNParagraphFormat;
    function get_Font: DNFont;
    function get_Shading: DNShading;
    function get_Borders: DNBorderCollection;
    function get_LeftPadding: Double;
    procedure set_LeftPadding(value: Double);
    function get_RightPadding: Double;
    procedure set_RightPadding(value: Double);
    function get_TopPadding: Double;
    procedure set_TopPadding(value: Double);
    function get_BottomPadding: Double;
    procedure set_BottomPadding(value: Double);
    function get_Type: DNConditionalStyleType;

  { methods } 

    ///<summary>
    ///  Clears formatting of this conditional style.
    ///</summary>
    procedure ClearFormatting;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Calculates hash code for this object.
    ///</summary>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the paragraph formatting of the conditional style.
    ///</summary>
    property ParagraphFormat: DNParagraphFormat read get_ParagraphFormat;
    ///<summary>
    ///  Gets the character formatting of the conditional style.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Shading" />
    ///  object that refers to the shading formatting for this conditional style.
    ///</summary>
    property Shading: DNShading read get_Shading;
    ///<summary>
    ///  Gets the collection of default cell borders for the conditional style.
    ///</summary>
    property Borders: DNBorderCollection read get_Borders;
    ///<summary>
    ///  Gets or sets the amount of space (in points) to add to the left of the contents of table cells.
    ///</summary>
    property LeftPadding: Double read get_LeftPadding write set_LeftPadding;
    ///<summary>
    ///  Gets or sets the amount of space (in points) to add to the right of the contents of table cells.
    ///</summary>
    property RightPadding: Double read get_RightPadding write set_RightPadding;
    ///<summary>
    ///  Gets or sets the amount of space (in points) to add above the contents of table cells.
    ///</summary>
    property TopPadding: Double read get_TopPadding write set_TopPadding;
    ///<summary>
    ///  Gets or sets the amount of space (in points) to add below the contents of table cells.
    ///</summary>
    property BottomPadding: Double read get_BottomPadding write set_BottomPadding;
    ///<summary>
    ///  Gets table area to which this conditional style relates.
    ///</summary>
    property &Type: DNConditionalStyleType read get_Type;
  end;

  TDNConditionalStyle = class(TDNGenericImport<DNConditionalStyleClass, DNConditionalStyle>) end;

  //-------------namespace: Aspose.Words----------------
  DNConditionalStyleCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7DBB4BDD-E1BD-5F9C-8EC0-CE65D2193603}']
  end;

  ///<summary>
  ///  Represents a collection of <see cref="T:Aspose.Words.ConditionalStyle" />
  ///  objects.
  ///</summary>
  ///<remarks>
  ///  It is not possible to add or remove items from this collection. It contains permanent set of items: one item for
  ///  each value of the <see cref="T:Aspose.Words.ConditionalStyleType" />
  ///  enumeration type.
  ///</remarks>
  ///<dev>
  ///  With using public properties of the class, it is possible to get only conditional styles that correspond to items
  ///  of the <see cref="T:Aspose.Words.ConditionalStyleType" />
  ///  enumeration type. But a collection may contain also styles related
  ///  to <see cref="F:Aspose.Words.TableStyleOverrideType.None" />
  ///  and <see cref="F:Aspose.Words.TableStyleOverrideType.WholeTable" />
  ///  values, use the
  ///  this[TableStyleOverrideType] or <see cref="P:Aspose.Words.ConditionalStyleCollection.DefinedStyles" />
  ///  properties to get them.
  ///</dev>
  [DNTypeName('Aspose.Words.ConditionalStyleCollection')]
  DNConditionalStyleCollection = interface(DDN.mscorlib.DNObject)
  ['{BFECBE31-AD54-3C87-8717-F2DA7E478E10}']
  { getters & setters } 

    function get_Item(conditionalStyleType: DNConditionalStyleType): DNConditionalStyle; overload;
    function get_Item(index: Int32): DNConditionalStyle; overload;
    function get_Count: Int32;
    function get_FirstRow: DNConditionalStyle;
    function get_FirstColumn: DNConditionalStyle;
    function get_LastRow: DNConditionalStyle;
    function get_LastColumn: DNConditionalStyle;
    function get_OddRowBanding: DNConditionalStyle;
    function get_OddColumnBanding: DNConditionalStyle;
    function get_EvenRowBanding: DNConditionalStyle;
    function get_EvenColumnBanding: DNConditionalStyle;
    function get_TopLeftCell: DNConditionalStyle;
    function get_TopRightCell: DNConditionalStyle;
    function get_BottomLeftCell: DNConditionalStyle;
    function get_BottomRightCell: DNConditionalStyle;

  { methods } 

    ///<summary>
    ///  Clears all conditional styles of the table style.
    ///</summary>
    procedure ClearFormatting;
    ///<summary>
    ///  Returns an enumerator object that can be used to iterate over all conditional styles in the collection.
    ///</summary>
    ///<dev>
    ///  Conditional styles related to <see cref="F:Aspose.Words.TableStyleOverrideType.None" />
    ///  and
    ///<see cref="F:Aspose.Words.TableStyleOverrideType.WholeTable" />
    ///  values are not included into the enumeration.
    ///</dev>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNConditionalStyle>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[conditionalStyleType: DNConditionalStyleType]: DNConditionalStyle read get_Item; default;
    property Item[index: Int32]: DNConditionalStyle read get_Item; default;
    ///<summary>
    ///  Gets the number of conditional styles in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Gets the first row style.
    ///</summary>
    property FirstRow: DNConditionalStyle read get_FirstRow;
    ///<summary>
    ///  Gets the first column style.
    ///</summary>
    property FirstColumn: DNConditionalStyle read get_FirstColumn;
    ///<summary>
    ///  Gets the last row style.
    ///</summary>
    property LastRow: DNConditionalStyle read get_LastRow;
    ///<summary>
    ///  Gets the last column style.
    ///</summary>
    property LastColumn: DNConditionalStyle read get_LastColumn;
    ///<summary>
    ///  Gets the odd row banding style.
    ///</summary>
    property OddRowBanding: DNConditionalStyle read get_OddRowBanding;
    ///<summary>
    ///  Gets the odd column banding style.
    ///</summary>
    property OddColumnBanding: DNConditionalStyle read get_OddColumnBanding;
    ///<summary>
    ///  Gets the even row banding style.
    ///</summary>
    property EvenRowBanding: DNConditionalStyle read get_EvenRowBanding;
    ///<summary>
    ///  Gets the even column banding style.
    ///</summary>
    property EvenColumnBanding: DNConditionalStyle read get_EvenColumnBanding;
    ///<summary>
    ///  Gets the top left cell style.
    ///</summary>
    property TopLeftCell: DNConditionalStyle read get_TopLeftCell;
    ///<summary>
    ///  Gets the top right cell style.
    ///</summary>
    property TopRightCell: DNConditionalStyle read get_TopRightCell;
    ///<summary>
    ///  Gets the bottom left cell style.
    ///</summary>
    property BottomLeftCell: DNConditionalStyle read get_BottomLeftCell;
    ///<summary>
    ///  Gets the bottom right cell style.
    ///</summary>
    property BottomRightCell: DNConditionalStyle read get_BottomRightCell;
  end;

  TDNConditionalStyleCollection = class(TDNGenericImport<DNConditionalStyleCollectionClass, DNConditionalStyleCollection>) end;

  //-------------namespace: Aspose.Words----------------
  DNControlCharClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3BBA41D5-FD36-5EAA-9EA9-684BD011DF07}']
  { static fields getter & setter } 

   function __fakeFieldGet_Cell: string;
   function __fakeFieldGet_Tab: string;
   function __fakeFieldGet_Lf: string;
   function __fakeFieldGet_LineFeed: string;
   function __fakeFieldGet_LineBreak: string;
   function __fakeFieldGet_PageBreak: string;
   function __fakeFieldGet_SectionBreak: string;
   function __fakeFieldGet_Cr: string;
   function __fakeFieldGet_ParagraphBreak: string;
   function __fakeFieldGet_ColumnBreak: string;
   function __fakeFieldGet_CrLf: string;
   function __fakeFieldGet_NonBreakingSpace: string;
   function __fakeFieldGet_CellChar: Char;
   function __fakeFieldGet_TabChar: Char;
   function __fakeFieldGet_LineFeedChar: Char;
   function __fakeFieldGet_LineBreakChar: Char;
   function __fakeFieldGet_PageBreakChar: Char;
   function __fakeFieldGet_SectionBreakChar: Char;
   function __fakeFieldGet_ParagraphBreakChar: Char;
   function __fakeFieldGet_ColumnBreakChar: Char;
   function __fakeFieldGet_FieldStartChar: Char;
   function __fakeFieldGet_FieldSeparatorChar: Char;
   function __fakeFieldGet_FieldEndChar: Char;
   function __fakeFieldGet_NonBreakingHyphenChar: Char;
   function __fakeFieldGet_OptionalHyphenChar: Char;
   function __fakeFieldGet_SpaceChar: Char;
   function __fakeFieldGet_NonBreakingSpaceChar: Char;
   function __fakeFieldGet_DefaultTextInputChar: Char;

  { static fields } 

    ///<summary>
    ///  End of a table cell or end of a table row character: "\x0007" or "\a".
    ///</summary>
    {class} property Cell: string read __fakeFieldGet_Cell;
    ///<summary>
    ///  Tab character: "\x0009" or "\t".
    ///</summary>
    {class} property Tab: string read __fakeFieldGet_Tab;
    ///<summary>
    ///  Line feed character: "\x000a" or "\n". Same as <see cref="F:Aspose.Words.ControlChar.LineFeed" />
    ///  .
    ///</summary>
    {class} property Lf: string read __fakeFieldGet_Lf;
    ///<summary>
    ///  Line feed character: "\x000a" or "\n". Same as <see cref="F:Aspose.Words.ControlChar.Lf" />
    ///  .
    ///</summary>
    {class} property LineFeed: string read __fakeFieldGet_LineFeed;
    ///<summary>
    ///  Line break character: "\x000b" or "\v".
    ///</summary>
    {class} property LineBreak: string read __fakeFieldGet_LineBreak;
    ///<summary>
    ///  Page break character: "\x000c" or "\f". Note it has the same value as <see cref="F:Aspose.Words.ControlChar.SectionBreak" />
    ///  .
    ///</summary>
    {class} property PageBreak: string read __fakeFieldGet_PageBreak;
    ///<summary>
    ///  End of section character: "\x000c" or "\f". Note it has the same value as <see cref="F:Aspose.Words.ControlChar.PageBreak" />
    ///  .
    ///</summary>
    {class} property SectionBreak: string read __fakeFieldGet_SectionBreak;
    ///<summary>
    ///  Carriage return character: "\x000d" or "\r". Same as <see cref="F:Aspose.Words.ControlChar.ParagraphBreak" />
    ///  .
    ///</summary>
    {class} property Cr: string read __fakeFieldGet_Cr;
    ///<summary>
    ///  End of paragraph character: "\x000d" or "\r". Same as <see cref="F:Aspose.Words.ControlChar.Cr" />
    ///</summary>
    {class} property ParagraphBreak: string read __fakeFieldGet_ParagraphBreak;
    ///<summary>
    ///  End of column character: "\x000e".
    ///</summary>
    {class} property ColumnBreak: string read __fakeFieldGet_ColumnBreak;
    ///<summary>
    ///  Carriage return followed by line feed character: "\x000d\x000a" or "\r\n".
    ///  Not used as such in Microsoft Word documents, but commonly used in text files for paragraph breaks.
    ///</summary>
    {class} property CrLf: string read __fakeFieldGet_CrLf;
    ///<summary>
    ///  Non-breaking space character: "\x00a0".
    ///</summary>
    {class} property NonBreakingSpace: string read __fakeFieldGet_NonBreakingSpace;
    ///<summary>
    ///  End of a table cell or end of a table row character: (char)7 or "\a".
    ///</summary>
    {class} property CellChar: Char read __fakeFieldGet_CellChar;
    ///<summary>
    ///  Tab character: (char)9 or "\t".
    ///</summary>
    {class} property TabChar: Char read __fakeFieldGet_TabChar;
    ///<summary>
    ///  Line feed character: (char)10 or "\n".
    ///</summary>
    {class} property LineFeedChar: Char read __fakeFieldGet_LineFeedChar;
    ///<summary>
    ///  Line break character: (char)11 or "\v".
    ///</summary>
    {class} property LineBreakChar: Char read __fakeFieldGet_LineBreakChar;
    ///<summary>
    ///  Page break character: (char)12 or "\f".
    ///</summary>
    {class} property PageBreakChar: Char read __fakeFieldGet_PageBreakChar;
    ///<summary>
    ///  End of section character: (char)12 or "\f".
    ///</summary>
    {class} property SectionBreakChar: Char read __fakeFieldGet_SectionBreakChar;
    ///<summary>
    ///  End of paragraph character: (char)13 or "\r".
    ///</summary>
    {class} property ParagraphBreakChar: Char read __fakeFieldGet_ParagraphBreakChar;
    ///<summary>
    ///  End of column character: (char)14.
    ///</summary>
    {class} property ColumnBreakChar: Char read __fakeFieldGet_ColumnBreakChar;
    ///<summary>
    ///  Start of MS Word field character: (char)19.
    ///</summary>
    {class} property FieldStartChar: Char read __fakeFieldGet_FieldStartChar;
    ///<summary>
    ///  Field separator character separates field code from field value. Optional in some fields. Value: (char)20.
    ///</summary>
    {class} property FieldSeparatorChar: Char read __fakeFieldGet_FieldSeparatorChar;
    ///<summary>
    ///  End of MS Word field character: (char)21.
    ///</summary>
    {class} property FieldEndChar: Char read __fakeFieldGet_FieldEndChar;
    ///<summary>
    ///  Nonbreaking Hyphen in Microsoft Word is (char)30.
    ///</summary>
    ///<remarks><p>Nonbreaking Hyphen in Microsoft Word does not correspond to the
    ///  Unicode character U+2011 non-breaking hyphen but instead represents
    ///  internal information that tells Microsoft Word to display a hyphen and not to break a line.</p>
    ///  <p>Useful info: http://www.cs.tut.fi/~jkorpela/dashes.html#linebreaks.</p>
    ///</remarks>
    {class} property NonBreakingHyphenChar: Char read __fakeFieldGet_NonBreakingHyphenChar;
    ///<summary>
    ///  Optional Hyphen in Microsoft Word is (char)31.
    ///</summary>
    ///<remarks><p>Optional Hyphen in Microsoft Word does not correspond to the Unicode character U+00AD soft hyphen.
    ///  Instead, it inserts internal information that tells Word about a possible hyphenation point.</p>
    ///</remarks>
    {class} property OptionalHyphenChar: Char read __fakeFieldGet_OptionalHyphenChar;
    ///<summary>
    ///  Space character: (char)32.
    ///</summary>
    {class} property SpaceChar: Char read __fakeFieldGet_SpaceChar;
    ///<summary>
    ///  Non-breaking space character: (char)160.
    ///</summary>
    {class} property NonBreakingSpaceChar: Char read __fakeFieldGet_NonBreakingSpaceChar;
    ///<summary>
    ///  This is the "o" character used as a default value in text input form fields.
    ///</summary>
    {class} property DefaultTextInputChar: Char read __fakeFieldGet_DefaultTextInputChar;

  end;

  ///<summary>
  ///  Control characters often encountered in documents.
  ///</summary>
  ///<remarks>
  ///  Provides both char and string versions of the same constants. For example:
  ///  string ControlChar.LineBreak and char ControlChar.LineBreakChar have the same value.
  ///</remarks>
  [DNTypeName('Aspose.Words.ControlChar')]
  DNControlChar = interface(DDN.mscorlib.DNObject)
  ['{A3A4C162-93EE-3557-8FF3-B24C00E3E5D2}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNControlChar = class(TDNGenericImport<DNControlCharClass, DNControlChar>)
  public const
    ///<summary>
    ///  End of a table cell or end of a table row character: (char)7 or "\a".
    ///</summary>
   CellChar = #7;
    ///<summary>
    ///  Tab character: (char)9 or "\t".
    ///</summary>
   TabChar = #9;
    ///<summary>
    ///  Line feed character: (char)10 or "\n".
    ///</summary>
   LineFeedChar = #10;
    ///<summary>
    ///  Line break character: (char)11 or "\v".
    ///</summary>
   LineBreakChar = #11;
    ///<summary>
    ///  Page break character: (char)12 or "\f".
    ///</summary>
   PageBreakChar = #12;
    ///<summary>
    ///  End of section character: (char)12 or "\f".
    ///</summary>
   SectionBreakChar = #12;
    ///<summary>
    ///  End of paragraph character: (char)13 or "\r".
    ///</summary>
   ParagraphBreakChar = #13;
    ///<summary>
    ///  End of column character: (char)14.
    ///</summary>
   ColumnBreakChar = #14;
    ///<summary>
    ///  Start of MS Word field character: (char)19.
    ///</summary>
   FieldStartChar = #19;
    ///<summary>
    ///  Field separator character separates field code from field value. Optional in some fields. Value: (char)20.
    ///</summary>
   FieldSeparatorChar = #20;
    ///<summary>
    ///  End of MS Word field character: (char)21.
    ///</summary>
   FieldEndChar = #21;
    ///<summary>
    ///  Nonbreaking Hyphen in Microsoft Word is (char)30.
    ///</summary>
    ///<remarks><p>Nonbreaking Hyphen in Microsoft Word does not correspond to the
    ///  Unicode character U+2011 non-breaking hyphen but instead represents
    ///  internal information that tells Microsoft Word to display a hyphen and not to break a line.</p>
    ///  <p>Useful info: http://www.cs.tut.fi/~jkorpela/dashes.html#linebreaks.</p>
    ///</remarks>
   NonBreakingHyphenChar = #30;
    ///<summary>
    ///  Optional Hyphen in Microsoft Word is (char)31.
    ///</summary>
    ///<remarks><p>Optional Hyphen in Microsoft Word does not correspond to the Unicode character U+00AD soft hyphen.
    ///  Instead, it inserts internal information that tells Word about a possible hyphenation point.</p>
    ///</remarks>
   OptionalHyphenChar = #31;
    ///<summary>
    ///  Space character: (char)32.
    ///</summary>
   SpaceChar = #32;
    ///<summary>
    ///  Non-breaking space character: (char)160.
    ///</summary>
   NonBreakingSpaceChar = #160;
    ///<summary>
    ///  This is the "o" character used as a default value in text input form fields.
    ///</summary>
   DefaultTextInputChar = #8194;
  end;

  //-------------namespace: Aspose.Words----------------
  DNConvertUtilClass = interface(DDN.mscorlib.DNObjectClass)
  ['{281DA24C-F1B2-5C43-BDE6-3C94C94D4A75}']
  { static methods } 

    ///<overloads>Converts points to pixels.</overloads><summary>
    ///  Converts points to pixels at 96 dpi.
    ///</summary>
    ///  <param name="points">The value to convert.</param>
    ///<remarks>
    ///  1 inch equals 72 points.
    ///</remarks>
    {class} function PointToPixel(points: Double): Double; overload;
    ///<summary>
    ///  Converts points to pixels at the specified pixel resolution.
    ///</summary>
    ///  <param name="points">The value to convert.</param>
    ///  <param name="resolution">The dpi (dots per inch) resolution.</param>
    ///<remarks>
    ///  1 inch equals 72 points.
    ///</remarks>
    {class} function PointToPixel(points: Double; resolution: Double): Double; overload;
    ///<overloads>Converts pixels to points.</overloads><summary>
    ///  Converts pixels to points at 96 dpi.
    ///</summary>
    ///  <param name="pixels">The value to convert.</param>
    ///<remarks>
    ///  1 inch equals 72 points.
    ///</remarks>
    {class} function PixelToPoint(pixels: Double): Double; overload;
    ///<summary>
    ///  Converts pixels to points at the specified pixel resolution.
    ///</summary>
    ///  <param name="pixels">The value to convert.</param>
    ///  <param name="resolution">The dpi (dots per inch) resolution.</param>
    ///<remarks>
    ///  1 inch equals 72 points.
    ///</remarks>
    {class} function PixelToPoint(pixels: Double; resolution: Double): Double; overload;
    ///<summary>
    ///  Converts pixels from one resolution to another.
    ///</summary>
    ///  <param name="pixels">The value to convert.</param>
    ///  <param name="oldDpi">The current dpi (dots per inch) resolution.</param>
    ///  <param name="newDpi">The new dpi (dots per inch) resolution.</param>
    {class} function PixelToNewDpi(pixels: Double; oldDpi: Double; newDpi: Double): Int32;
    ///<summary>
    ///  Converts inches to points.
    ///</summary>
    ///  <param name="inches">The value to convert.</param>
    ///<remarks>
    ///  1 inch equals 72 points.
    ///</remarks>
    {class} function InchToPoint(inches: Double): Double;
    ///<summary>
    ///  Converts points to inches.
    ///</summary>
    ///  <param name="points">The value to convert.</param>
    ///<remarks>
    ///  1 inch equals 72 points.
    ///</remarks>
    {class} function PointToInch(points: Double): Double;
    ///<summary>
    ///  Converts millimeters to points.
    ///</summary>
    ///  <param name="millimeters">The value to convert.</param>
    ///<remarks>
    ///  1 inch equals 25.4 millimeters. 1 inch equals 72 points.
    ///</remarks>
    {class} function MillimeterToPoint(millimeters: Double): Double;

  end;

  ///<summary>
  ///  Provides helper functions to convert between various measurement units.
  ///</summary>
  ///<dev>
  ///  This is only a public wrapper that makes functions available in the public Aspose.Words namespace.
  ///  The actual implementation is in <see cref="T:Aspose.ConvertUtilCore" />
  ///  .
  ///</dev>
  [DNTypeName('Aspose.Words.ConvertUtil')]
  DNConvertUtil = interface(DDN.mscorlib.DNObject)
  ['{6BBCC53D-4605-3326-A641-EFC1F8243239}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNConvertUtil = class(TDNGenericImport<DNConvertUtilClass, DNConvertUtil>) end;

  //-------------namespace: Aspose.Words.DigitalSignatures----------------
  DNCertificateHolderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0F7FF78E-89BD-5AE5-B79C-84D9ABB4CE77}']
  { static methods } 

    ///<summary>
    ///  Creates CertificateHolder object using byte array of PKCS12 store and its password.
    ///</summary>
    ///  <param name="certBytes">A byte array that contains data from an X.509 certificate.</param>
    ///  <param name="password">The password required to access the X.509 certificate data.</param>
    ///<returns>An instance of CertificateHolder</returns>
    ///<exception cref="T:Org.BouncyCastle.Security.InvalidParameterException">Thrown if <b>certBytes</b>
    ///  is null</exception><exception cref="T:Org.BouncyCastle.Security.InvalidParameterException">Thrown if <b>password</b>
    ///  is null</exception><exception cref="T:System.Security.SecurityException">Thrown if PKCS12 store contains no aliases</exception><exception cref="T:System.IO.IOException">Thrown if there is wrong password or corrupted file.</exception>
    {class} function Create(certBytes: TArray<Byte>; password: DDN.mscorlib.DNSecureString): DNCertificateHolder; overload;
    ///<summary>
    ///  Creates CertificateHolder object using byte array of PKCS12 store and its password.
    ///</summary>
    ///  <param name="certBytes">A byte array that contains data from an X.509 certificate.</param>
    ///  <param name="password">The password required to access the X.509 certificate data.</param>
    ///<returns>An instance of CertificateHolder</returns>
    ///<exception cref="T:Org.BouncyCastle.Security.InvalidParameterException">Thrown if <b>certBytes</b>
    ///  is null</exception><exception cref="T:Org.BouncyCastle.Security.InvalidParameterException">Thrown if <b>password</b>
    ///  is null</exception><exception cref="T:System.Security.SecurityException">Thrown if PKCS12 store contains no aliases</exception><exception cref="T:System.IO.IOException">Thrown if there is wrong password or corrupted file.</exception>
    {class} function Create(certBytes: TArray<Byte>; password: string): DNCertificateHolder; overload;
    ///<summary>
    ///  Creates CertificateHolder object using path to PKCS12 store and its password.
    ///</summary>
    ///  <param name="fileName">The name of a certificate file.</param>
    ///  <param name="password">The password required to access the X.509 certificate data.</param>
    ///<returns>An instance of CertificateHolder</returns>
    ///<exception cref="T:Org.BouncyCastle.Security.InvalidParameterException">Thrown if <b>fileName</b>
    ///  is null</exception><exception cref="T:Org.BouncyCastle.Security.InvalidParameterException">Thrown if <b>password</b>
    ///  is null</exception><exception cref="T:System.Security.SecurityException">Thrown if PKCS12 store contains no aliases</exception><exception cref="T:System.IO.IOException">Thrown if there is wrong password or corrupted file.</exception>
    {class} function Create(fileName: string; password: string): DNCertificateHolder; overload;
    ///<summary>
    ///  Creates CertificateHolder object using path to PKCS12 store, its password and the alias by using which private key and certificate will be found.
    ///</summary>
    ///  <param name="fileName">The name of a certificate file.</param>
    ///  <param name="password">The password required to access the X.509 certificate data.</param>
    ///  <param name="alias">The associated alias for a certificate and its private key</param>
    ///<returns>An instance of CertificateHolder</returns>
    ///<exception cref="T:Org.BouncyCastle.Security.InvalidParameterException">Thrown if <b>fileName</b>
    ///  is null</exception><exception cref="T:Org.BouncyCastle.Security.InvalidParameterException">Thrown if <b>password</b>
    ///  is null</exception><exception cref="T:System.Security.SecurityException">Thrown if PKCS12 store contains no aliases</exception><exception cref="T:System.IO.IOException">Thrown if there is wrong password or corrupted file.</exception><exception cref="T:System.Security.SecurityException">Thrown if there is no private key with the given alias</exception>
    {class} function Create(fileName: string; password: string; alias: string): DNCertificateHolder; overload;

  end;

  ///<summary>
  ///  Represents a holder of <b>X509Certificate2</b>
  ///  instance.
  ///</summary>
  ///<remarks><p><b>CertificateHolder</b>
  ///  can be created by static factory methods only.
  ///  It contains an instance of <b>X509Certificate2</b>
  ///  which is used to introduce private, public keys and certificate chains into the system.
  ///  This class is applied in <see cref="T:Aspose.Words.DigitalSignatures.DigitalSignatureUtil" />
  ///  and <see cref="T:Aspose.Words.Saving.PdfDigitalSignatureDetails" />
  ///  instead of obsolete methods with
  ///<see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
  ///  as parameters.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.DigitalSignatures.CertificateHolder')]
  DNCertificateHolder = interface(DDN.mscorlib.DNObject)
  ['{D8247497-DB88-3EE7-9B46-79E1F9570335}']
  { getters & setters } 

    function get_Certificate: DDN.Aspose.Common.DNX509Certificate2;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the instance of <b>X509Certificate2</b>
    ///  which holds private, public keys and certificate chain.
    ///</summary>
    ///<returns><see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
    ///  instance</returns>
    property Certificate: DDN.Aspose.Common.DNX509Certificate2 read get_Certificate;
  end;

  TDNCertificateHolder = class(TDNGenericImport<DNCertificateHolderClass, DNCertificateHolder>) end;

  //-------------namespace: Aspose.Words.DigitalSignatures----------------
  DNDigitalSignatureClass = interface(DDN.mscorlib.DNObjectClass)
  ['{71A100C2-B423-545D-9080-1B04885C8474}']
  end;

  ///<summary>
  ///  Represents a digital signature on a document and the result of its verification.
  ///</summary>
  [DNTypeName('Aspose.Words.DigitalSignatures.DigitalSignature')]
  DNDigitalSignature = interface(DDN.mscorlib.DNObject)
  ['{BC6E8F6B-92DC-3CC1-BDD6-D898F72C81AA}']
  { getters & setters } 

    function get_SignatureType: DNDigitalSignatureType;
    function get_SignTime: DDN.mscorlib.DNDateTime;
    function get_Comments: string;
    function get_SubjectName: string;
    function get_IssuerName: string;
    function get_IsValid: Boolean;
    function get_CertificateHolder: DNCertificateHolder;

  { methods } 

    ///<summary>
    ///  Returns a user-friendly string that displays the value of this object.
    ///</summary>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets the type of the digital signature.
    ///</summary>
    property SignatureType: DNDigitalSignatureType read get_SignatureType;
    ///<summary>
    ///  Gets the time the document was signed.
    ///</summary>
    property SignTime: DDN.mscorlib.DNDateTime read get_SignTime;
    ///<summary>
    ///  Gets the signing purpose comment.
    ///</summary>
    property Comments: string read get_Comments;
    ///<summary>
    ///  Returns the subject distinguished name of the certificate that was used to sign the document.
    ///</summary>
    property SubjectName: string read get_SubjectName;
    ///<summary>
    ///  Returns the subject distinguished name of the certificate isuuer.
    ///</summary>
    property IssuerName: string read get_IssuerName;
    ///<summary>
    ///  Returns true if this digital signature is valid and the document has not been tampered with.
    ///</summary>
    property IsValid: Boolean read get_IsValid;
    ///<summary>
    ///  Returns the certificate holder object that contains the certificate was used to sign the document.
    ///</summary>
    property CertificateHolder: DNCertificateHolder read get_CertificateHolder;
  end;

  TDNDigitalSignature = class(TDNGenericImport<DNDigitalSignatureClass, DNDigitalSignature>) end;

  //-------------namespace: Aspose.Words.DigitalSignatures----------------
  DNDigitalSignatureCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2EB7ED37-40D8-5025-929A-60CEBE106FEC}']
  { constructors } 

    {class} function init: DNDigitalSignatureCollection;

  end;

  ///<summary>
  ///  Provides a read-only collection of digital signatures attached to a document.
  ///</summary>
  ///<remarks><see cref="P:Aspose.Words.Document.DigitalSignatures" />
  ///</remarks>
  [DNTypeName('Aspose.Words.DigitalSignatures.DigitalSignatureCollection')]
  DNDigitalSignatureCollection = interface(DDN.mscorlib.DNObject)
  ['{DA3CCA37-3AE8-3B09-9527-FA34D7FA7E85}']
  { getters & setters } 

    function get_IsValid: Boolean;
    function get_Count: Int32;
    function get_Item(index: Int32): DNDigitalSignature;

  { methods } 

    ///<summary>
    ///  Returns a dictionary enumerator object that can be used to iterate over all items in the collection.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNDigitalSignature>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns <c>true</c> if all digital signatures in this collection are valid and the document has not been tampered with
    ///  Also returns <c>true</c> if there are no digital signatures.
    ///  Returns <c>false</c> if at least one digital signature is invalid.
    ///</summary>
    property IsValid: Boolean read get_IsValid;
    ///<summary>
    ///  Gets the number of elements contained in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNDigitalSignature read get_Item; default;
  end;

  TDNDigitalSignatureCollection = class(TDNGenericImport<DNDigitalSignatureCollectionClass, DNDigitalSignatureCollection>) end;

  //-------------namespace: Aspose.Words.DigitalSignatures----------------
  DNDigitalSignatureUtilClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F07A1E73-E2BC-5292-B508-AAAE96DD6D9D}']
  { static methods } 

    ///<summary>
    ///  Signs source document using given <see cref="T:Aspose.Words.DigitalSignatures.CertificateHolder" />
    ///  and <see cref="T:Aspose.Words.DigitalSignatures.SignOptions" />
    ///  with digital signature and writes signed document to destination stream.
    ///  <p>Document should be either <see cref="F:Aspose.Words.LoadFormat.Doc" />
    ///  or <see cref="F:Aspose.Words.LoadFormat.Docx" />
    ///  .</p>
    ///  <p><b>Output will be written to the start of stream and stream size will be updated with content length.</b>
    ///</p>
    ///</summary>
    ///  <param name="srcStream">The stream which contains the document to sign.</param>
    ///  <param name="dstStream">The stream that signed document will be written to.</param>
    ///  <param name="certHolder"><see cref="T:Aspose.Words.DigitalSignatures.CertificateHolder" />
    ///  object with certificate that used to sign file.
    ///  The certificate in holder MUST contain private keys and have the X509KeyStorageFlags.Exportable flag set.</param>
    ///  <param name="signOptions"><see cref="T:Aspose.Words.DigitalSignatures.SignOptions" />
    ///  object with various signing options.</param>
    {class} procedure Sign(srcStream: DDN.mscorlib.DNStream; dstStream: DDN.mscorlib.DNStream; certHolder: DNCertificateHolder; signOptions: DNSignOptions); overload;
    ///<summary>
    ///  Signs source document using given <see cref="T:Aspose.Words.DigitalSignatures.CertificateHolder" />
    ///  and <see cref="T:Aspose.Words.DigitalSignatures.SignOptions" />
    ///  with digital signature and writes signed document to destination file.
    ///  <p>Document should be either <see cref="F:Aspose.Words.LoadFormat.Doc" />
    ///  or <see cref="F:Aspose.Words.LoadFormat.Docx" />
    ///  .</p>
    ///</summary>
    ///  <param name="srcFileName">The file name of the document to sign.</param>
    ///  <param name="dstFileName">The file name of the signed document output.</param>
    ///  <param name="certHolder"><see cref="T:Aspose.Words.DigitalSignatures.CertificateHolder" />
    ///  object with certificate that used to sign file.
    ///  The certificate in holder MUST contain private keys and have the X509KeyStorageFlags.Exportable flag set.</param>
    ///  <param name="signOptions"><see cref="T:Aspose.Words.DigitalSignatures.SignOptions" />
    ///  object with various signing options.</param>
    {class} procedure Sign(srcFileName: string; dstFileName: string; certHolder: DNCertificateHolder; signOptions: DNSignOptions); overload;
    ///<summary>
    ///  Signs source document using given <see cref="T:Aspose.Words.DigitalSignatures.CertificateHolder" />
    ///  with digital signature
    ///  and writes signed document to destination stream.
    ///  <p>Document should be either <see cref="F:Aspose.Words.LoadFormat.Doc" />
    ///  or <see cref="F:Aspose.Words.LoadFormat.Docx" />
    ///  .</p>
    ///  <p><b>Output will be written to the start of stream and stream size will be updated with content length.</b>
    ///</p>
    ///</summary>
    ///  <param name="srcStream">The stream which contains the document to sign.</param>
    ///  <param name="dstStream">The stream that signed document will be written to.</param>
    ///  <param name="certHolder"><see cref="T:Aspose.Words.DigitalSignatures.CertificateHolder" />
    ///  object with certificate that used to sign file.
    ///  The certificate in holder MUST contain private keys and have the X509KeyStorageFlags.Exportable flag set.</param>
    {class} procedure Sign(srcStream: DDN.mscorlib.DNStream; dstStream: DDN.mscorlib.DNStream; certHolder: DNCertificateHolder); overload;
    ///<summary>
    ///  Signs source document using given <see cref="T:Aspose.Words.DigitalSignatures.CertificateHolder" />
    ///  with digital signature
    ///  and writes signed document to destination file.
    ///  <p>Document should be either <see cref="F:Aspose.Words.LoadFormat.Doc" />
    ///  or <see cref="F:Aspose.Words.LoadFormat.Docx" />
    ///  .</p>
    ///</summary>
    ///  <param name="srcFileName">The file name of the document to sign.</param>
    ///  <param name="dstFileName">The file name of the signed document output.</param>
    ///  <param name="certHolder"><see cref="T:Aspose.Words.DigitalSignatures.CertificateHolder" />
    ///  object with certificate that used to sign file.
    ///  The certificate in holder MUST contain private keys and have the X509KeyStorageFlags.Exportable flag set.</param>
    {class} procedure Sign(srcFileName: string; dstFileName: string; certHolder: DNCertificateHolder); overload;
    ///<summary>
    ///  Removes all digital signatures from source file and writes unsigned file to destination file.
    ///</summary>
    {class} procedure RemoveAllSignatures(srcFileName: string; dstFileName: string); overload;
    ///<summary>
    ///  Removes all digital signatures from document in source stream and writes unsigned document to destination stream.
    ///  <p><b>Output will be written to the start of stream and stream size will be updated with content length.</b>
    ///</p>
    ///</summary>
    {class} procedure RemoveAllSignatures(srcStream: DDN.mscorlib.DNStream; dstStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Loads digital signatures from document.
    ///</summary>
    ///  <param name="fileName">Path to the document.</param>
    ///<returns>Collection of digital signatures. Returns empty collection if file is not signed.</returns>
    {class} function LoadSignatures(fileName: string): DNDigitalSignatureCollection; overload;
    ///<summary>
    ///  Loads digital signatures from document using stream.
    ///</summary>
    ///  <param name="stream">Stream with the document.</param>
    ///<returns>Collection of digital signatures. Returns empty collection if file is not signed.</returns>
    {class} function LoadSignatures(stream: DDN.mscorlib.DNStream): DNDigitalSignatureCollection; overload;

  end;

  ///<summary>
  ///  Provides methods for signing document.
  ///</summary>
  ///<remarks><para>Since digital signature works with file content rather than Document Object Model these methods are put into a separate class.</para><para>Supported formats are <see cref="F:Aspose.Words.LoadFormat.Doc" />
  ///  and <see cref="F:Aspose.Words.LoadFormat.Docx" />
  ///  .</para></remarks>
  [DNTypeName('Aspose.Words.DigitalSignatures.DigitalSignatureUtil')]
  DNDigitalSignatureUtil = interface(DDN.mscorlib.DNObject)
  ['{01413692-5DB2-343B-9F33-D523120B3D4F}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDigitalSignatureUtil = class(TDNGenericImport<DNDigitalSignatureUtilClass, DNDigitalSignatureUtil>) end;

  //-------------namespace: Aspose.Words.DigitalSignatures----------------
  DNSignOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3D5604AE-10A1-509A-B15E-5DAE0BB02FF6}']
  { constructors } 

    {class} function init: DNSignOptions;

  end;

  ///<summary>
  ///  Allows to specify options for document signing.
  ///</summary>
  [DNTypeName('Aspose.Words.DigitalSignatures.SignOptions')]
  DNSignOptions = interface(DDN.mscorlib.DNObject)
  ['{BA08ED92-4B65-3997-8C2A-35D5BFF261F8}']
  { getters & setters } 

    function get_Comments: string;
    procedure set_Comments(value: string);
    function get_SignTime: DDN.mscorlib.DNDateTime;
    procedure set_SignTime(value: DDN.mscorlib.DNDateTime);
    function get_SignatureLineId: DDN.mscorlib.DNGuid;
    procedure set_SignatureLineId(value: DDN.mscorlib.DNGuid);
    function get_SignatureLineImage: TArray<Byte>;
    procedure set_SignatureLineImage(value: TArray<Byte>);
    function get_DecryptionPassword: string;
    procedure set_DecryptionPassword(value: string);
    function get_ProviderId: DDN.mscorlib.DNGuid;
    procedure set_ProviderId(value: DDN.mscorlib.DNGuid);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies comments on the digital signature.
    ///  Default value is <b>empty string</b>
    ///  (<see cref="F:System.String.Empty" />
    ///  ).
    ///</summary>
    property Comments: string read get_Comments write set_Comments;
    ///<summary>
    ///  The date of signing.
    ///  Default value is <b>current time</b>
    ///  (<see cref="P:System.DateTime.Now" />
    ///  ).
    ///</summary>
    property SignTime: DDN.mscorlib.DNDateTime read get_SignTime write set_SignTime;
    ///<summary>
    ///  Signature line identifier.
    ///  Default value is <b>Empty (all zeroes) Guid</b>
    ///  .
    ///</summary>
    ///<remarks>
    ///  When set, it associates <see cref="T:Aspose.Words.Drawing.SignatureLine" />
    ///  with corresponding <see cref="T:Aspose.Words.DigitalSignatures.DigitalSignature" />
    ///  .
    ///</remarks>
    property SignatureLineId: DDN.mscorlib.DNGuid read get_SignatureLineId write set_SignatureLineId;
    ///<summary>
    ///  The image that will be shown in associated <see cref="T:Aspose.Words.Drawing.SignatureLine" />
    ///  .
    ///  Default value is <c>null</c>.
    ///</summary>
    property SignatureLineImage: TArray<Byte> read get_SignatureLineImage write set_SignatureLineImage;
    ///<summary>
    ///  The password to decrypt source document.
    ///  Default value is <b>empty string</b>
    ///  (<see cref="F:System.String.Empty" />
    ///  ).
    ///</summary>
    ///<remarks>
    ///  If OOXML document is encrypted, you should provide decryption password
    ///  to decrypt source document before it will be signed.
    ///  This is not required for documents in binary DOC format.
    ///</remarks>
    property DecryptionPassword: string read get_DecryptionPassword write set_DecryptionPassword;
    ///<summary>
    ///  Specifies the class ID of the signature provider.
    ///  Default value is <b>Empty (all zeroes) Guid</b>
    ///  .
    ///</summary>
    ///<remarks><para>The cryptographic service provider (CSP) is an independent software module that actually performs
    ///  cryptography algorithms for authentication, encoding, and encryption. MS Office reserves the value
    ///  of {00000000-0000-0000-0000-000000000000} for its default signature provider.</para><para>The GUID of the additionally installed provider should be obtained from the documentation shipped with the provider.</para><para>In addition, all the installed cryptographic providers are enumerated in windows registry.
    ///  It can be found in the following path: HKLM\SOFTWARE\Microsoft\Cryptography\Defaults\Provider.
    ///  There is a key name "CP Service UUID" which corresponds to a GUID of signature provider.</para></remarks>
    property ProviderId: DDN.mscorlib.DNGuid read get_ProviderId write set_ProviderId;
  end;

  TDNSignOptions = class(TDNGenericImport<DNSignOptionsClass, DNSignOptions>) end;

  //-------------namespace: Aspose.Words----------------
  DNDocumentBuilderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B4E7D328-171B-573A-AE62-F34665482B6E}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class.
    ///</summary>
    ///<remarks>
    ///  Creates a new <b>DocumentBuilder</b>
    ///  object and attaches it to a new <see cref="P:Aspose.Words.DocumentBuilder.Document" />
    ///  object.
    ///</remarks>
    {class} function init: DNDocumentBuilder; overload;
    ///<summary>
    ///  Initializes a new instance of this class.
    ///</summary>
    ///<remarks>
    ///  Creates a new <b>DocumentBuilder</b>
    ///  object, attaches to the specified <see cref="P:Aspose.Words.DocumentBuilder.Document" />
    ///  object.
    ///  The cursor is positioned at the beginning of the document.
    ///</remarks>
    ///  <param name="doc">The Document object to attach to.</param>
    {class} function init(doc: DNDocument): DNDocumentBuilder; overload;

  end;

  ///<summary>
  ///  Provides methods to insert text, images and other content, specify font, paragraph and section formatting.
  ///</summary>
  ///<remarks><p><b>DocumentBuilder</b>
  ///  makes the process of building a <b>Document</b>
  ///  easier.
  ///<b>Document</b>
  ///  is a composite object consisting of a tree of nodes and while inserting content
  ///  nodes directly into the tree is possible, it requires good understanding of the tree structure.
  ///<b>DocumentBuilder</b>
  ///  is a "facade" for the complex structure of <b>Document</b>
  ///  and allows
  ///  to insert content and formatting quickly and easily.</p>
  ///  <p>Create a <b>DocumentBuilder</b>
  ///  and associate it with a <see cref="P:Aspose.Words.DocumentBuilder.Document" />
  ///  .</p>
  ///  <p>The <b>DocumentBuilder</b>
  ///  has an internal cursor where the text will be inserted
  ///  when you call <see cref="M:Aspose.Words.DocumentBuilder.Write(System.String)" />
  ///  , <see cref="M:Aspose.Words.DocumentBuilder.Writeln(System.String)" />
  ///  , <see cref="M:Aspose.Words.DocumentBuilder.InsertBreak(Aspose.Words.BreakType)" />
  ///  and other methods. You can navigate the <b>DocumentBuilder</b>
  ///  cursor to a different location
  ///  in a document using various MoveToXXX methods.</p>
  ///  <p>Use the <see cref="P:Aspose.Words.DocumentBuilder.Font" />
  ///  property to specify character formatting that will apply to
  ///  all text inserted from the current position in the document onwards.</p>
  ///  <p>Use the <see cref="P:Aspose.Words.DocumentBuilder.ParagraphFormat" />
  ///  property to specify paragraph formatting for the current
  ///  and all paragraphs that will be inserted.</p>
  ///  <p>Use the <see cref="P:Aspose.Words.DocumentBuilder.PageSetup" />
  ///  property to specify page and section properties for the current
  ///  section and all section that will be inserted.</p>
  ///  <p>Use the <see cref="P:Aspose.Words.DocumentBuilder.CellFormat" />
  ///  and <see cref="P:Aspose.Words.DocumentBuilder.RowFormat" />
  ///  properties to specify
  ///  formatting properties for table cells and rows. User the <see cref="M:Aspose.Words.DocumentBuilder.InsertCell" />
  ///  and
  ///<see cref="M:Aspose.Words.DocumentBuilder.EndRow" />
  ///  methods to build a table.</p>
  ///  <p>Note that <b>Font</b>
  ///  , <b>ParagraphFormat</b>
  ///  and <b>PageSetup</b>
  ///  properties are updated whenever
  ///  you navigate to a different place in the document to reflect formatting properties available at the new location.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.DocumentBuilder')]
  DNDocumentBuilder = interface(DDN.mscorlib.DNObject)
  ['{CBA946FB-3CDD-383E-9ECF-243BDF0BD1F8}']
  { getters & setters } 

    function get_Document: DNDocument;
    procedure set_Document(value: DNDocument);
    function get_Font: DNFont;
    function get_Bold: Boolean;
    procedure set_Bold(value: Boolean);
    function get_Italic: Boolean;
    procedure set_Italic(value: Boolean);
    function get_Underline: DNUnderline;
    procedure set_Underline(value: DNUnderline);
    function get_ParagraphFormat: DNParagraphFormat;
    function get_ListFormat: DNListFormat;
    function get_PageSetup: DNPageSetup;
    function get_RowFormat: DNRowFormat;
    function get_CellFormat: DNCellFormat;
    function get_IsAtStartOfParagraph: Boolean;
    function get_IsAtEndOfParagraph: Boolean;
    function get_CurrentNode: DNNode;
    function get_CurrentParagraph: DNParagraph;
    function get_CurrentStory: DNStory;
    function get_CurrentSection: DNSection;

  { methods } 

    ///<summary>
    ///  Marks the current position in the document as an editable range start.
    ///</summary>
    ///<remarks><p>Editable range in a document can overlap and span any range. To create a valid editable range you need to
    ///  call both <see cref="M:Aspose.Words.DocumentBuilder.StartEditableRange" />
    ///  and <see cref="M:Aspose.Words.DocumentBuilder.EndEditableRange" />
    ///  or <see cref="M:Aspose.Words.DocumentBuilder.EndEditableRange(Aspose.Words.EditableRangeStart)" />
    ///  methods.</p>
    ///  <p>Badly formed editable range will be ignored when the document is saved.</p>
    ///</remarks>
    ///<returns>The editable range start node that was just created.</returns>
    function StartEditableRange: DNEditableRangeStart;
    ///<summary>
    ///  Marks the current position in the document as an editable range end.
    ///</summary>
    ///<remarks><p>Editable range in a document can overlap and span any range. To create a valid editable range you need to
    ///  call both <see cref="M:Aspose.Words.DocumentBuilder.StartEditableRange" />
    ///  and <see cref="M:Aspose.Words.DocumentBuilder.EndEditableRange" />
    ///  or <see cref="M:Aspose.Words.DocumentBuilder.EndEditableRange(Aspose.Words.EditableRangeStart)" />
    ///  methods.</p>
    ///  <p>Badly formed editable range will be ignored when the document is saved.</p>
    ///</remarks>
    ///<returns>The editable range end node that was just created.</returns>
    function EndEditableRange: DNEditableRangeEnd; overload;
    ///<summary>
    ///  Marks the current position in the document as an editable range end.
    ///</summary>
    ///<remarks><p>Use this overload during creating nested editable ranges.</p>
    ///  <p>Editable range in a document can overlap and span any range. To create a valid editable range you need to
    ///  call both <see cref="M:Aspose.Words.DocumentBuilder.StartEditableRange" />
    ///  and <see cref="M:Aspose.Words.DocumentBuilder.EndEditableRange" />
    ///  or <see cref="M:Aspose.Words.DocumentBuilder.EndEditableRange(Aspose.Words.EditableRangeStart)" />
    ///  methods.</p>
    ///  <p>Badly formed editable range will be ignored when the document is saved.</p>
    ///</remarks>
    ///  <param name="start">This editable range start.</param>
    ///<returns>The editable range end node that was just created.</returns>
    function EndEditableRange(start: DNEditableRangeStart): DNEditableRangeEnd; overload;
    ///<summary>
    ///  Inserts a document at the cursor position.
    ///</summary>
    ///<remarks>
    ///  This method mimics the MS Word behavior, as if CTRL+'A' (select all content) was pressed,
    ///  then CTRL+'C' (copy selected into the buffer) inside one document
    ///  and then CTRL+'V' (insert content from the buffer) inside another document.
    ///</remarks>
    ///  <param name="srcDoc">Source document for inserting.</param>
    ///  <param name="importFormatMode">Specifies how to merge style formatting that clashes.</param>
    ///<returns>First node of the inserted content.</returns>
    function InsertDocument(srcDoc: DNDocument; importFormatMode: DNImportFormatMode): DNNode; overload;
    ///<summary>
    ///  Inserts a document at the cursor position.
    ///</summary>
    ///<remarks>
    ///  This method mimics the MS Word behavior, as if CTRL+'A' (select all content) was pressed,
    ///  then CTRL+'C' (copy selected into the buffer) inside one document
    ///  and then CTRL+'V' (insert content from the buffer) inside another document.
    ///</remarks>
    ///  <param name="srcDoc">Source document for inserting.</param>
    ///  <param name="importFormatMode">Specifies how to merge style formatting that clashes.</param>
    ///  <param name="importFormatOptions">Allows to specify options that affect formatting of a result document.</param>
    ///<returns>First node of the inserted content.</returns>
    function InsertDocument(srcDoc: DNDocument; importFormatMode: DNImportFormatMode; importFormatOptions: DNImportFormatOptions): DNNode; overload;
    ///<summary>
    ///  Saves current character formatting onto the stack.
    ///</summary>
    ///<seealso cref="P:Aspose.Words.DocumentBuilder.Font" />
    ///<seealso cref="M:Aspose.Words.DocumentBuilder.PopFont" />
    procedure PushFont;
    ///<summary>
    ///  Retrieves character formatting previously saved on the stack.
    ///</summary>
    ///<seealso cref="P:Aspose.Words.DocumentBuilder.Font" />
    ///<seealso cref="M:Aspose.Words.DocumentBuilder.PushFont" />
    procedure PopFont;
    ///<summary>
    ///  Inserts a text level node inside the current paragraph before the cursor.
    ///</summary>
    procedure InsertNode(node: DNNode);
    ///<summary>
    ///  Moves the cursor to the beginning of the document.
    ///</summary>
    procedure MoveToDocumentStart;
    ///<summary>
    ///  Moves the cursor to the end of the document.
    ///</summary>
    procedure MoveToDocumentEnd;
    ///<summary>
    ///  Moves the cursor to the beginning of the body in a specified section.
    ///</summary>
    ///<remarks><p>When sectionIndex is greater than or equal to 0, it specifies an index from
    ///  the beginning of the document with 0 being the first section. When sectionIndex is less than 0,
    ///  it specified an index from the end of the document with -1 being the last section.</p>
    ///  <p>The cursor is moved to the first paragraph in the <b>Body</b>
    ///  of the specified section.</p>
    ///</remarks>
    ///  <param name="sectionIndex">The index of the section to move to.</param>
    procedure MoveToSection(sectionIndex: Int32);
    ///<summary>
    ///  Moves the cursor to the beginning of a header or footer in the current section.
    ///</summary>
    ///<remarks><p>After you moved the cursor into a header or footer, you can use the rest of DocumentBuilder
    ///  methods to modify the contents of the header or footer.</p>
    ///  <p>If you want to create headers and footers different for the first page, you need
    ///  to set <see cref="P:Aspose.Words.PageSetup.DifferentFirstPageHeaderFooter" />
    ///  .</p>
    ///  <p>If you want to create headers and footers different for even and odd pages, you need
    ///  to set <see cref="P:Aspose.Words.PageSetup.OddAndEvenPagesHeaderFooter" />
    ///  .</p>
    ///  <p>Use <see cref="M:Aspose.Words.DocumentBuilder.MoveToSection(System.Int32)" />
    ///  to move out of the header into the main text.</p>
    ///</remarks>
    ///  <param name="headerFooterType">Specifies the header or footer to move to.</param>
    procedure MoveToHeaderFooter(headerFooterType: DNHeaderFooterType);
    ///<overloads>Moves the cursor to the specified merge field.</overloads><summary>
    ///  Moves the cursor to a position just beyond the specified merge field and removes the merge field.
    ///</summary>
    ///<remarks><p>Note that this method deletes the merge field from the document after moving the cursor.</p>
    ///</remarks>
    ///  <param name="fieldName">The case-insensitive name of the mail merge field.</param>
    ///<returns>True if the merge field was found and the cursor was moved; false otherwise.</returns>
    function MoveToMergeField(fieldName: string): Boolean; overload;
    ///<summary>
    ///  Moves the merge field to the specified merge field.
    ///</summary>
    ///  <param name="fieldName">The case-insensitive name of the mail merge field.</param>
    ///  <param name="isAfter">When true, moves the cursor to be after the field end.
    ///  When false, moves the cursor to be before the field start. </param>
    ///  <param name="isDeleteField">When true, deletes the merge field.</param>
    ///<returns>True if the merge field was found and the cursor was moved; false otherwise.</returns>
    function MoveToMergeField(fieldName: string; isAfter: Boolean; isDeleteField: Boolean): Boolean; overload;
    ///<summary>
    ///  Moves the cursor to a field in the document.
    ///</summary>
    ///  <param name="field">The field to move the cursor to.</param>
    ///  <param name="isAfter">When true, moves the cursor to be after the field end.
    ///  When false, moves the cursor to be before the field start. </param>
    procedure MoveToField(field: DNField; isAfter: Boolean);
    ///<summary>
    ///  Moves the cursor to a bookmark.
    ///</summary>
    ///<remarks><p>Moves the cursor to a position just after the start of the bookmark with the
    ///  specified name.</p>
    ///  <p>The comparison is not case-sensitive. If the bookmark was not found, false is
    ///  returned and the cursor is not moved.</p>
    ///  <p>Inserting new text does not replace existing text of the bookmark.</p>
    ///  <p>Note that some bookmarks in the document are assigned to form fields.
    ///  Moving to such a bookmark and inserting text there inserts the text into the
    ///  form field code. Although this will not invalidate the form field, the inserted
    ///  text will not be visible because it becomes part of the field code.</p>
    ///</remarks>
    ///  <param name="bookmarkName">The name of the bookmark to move the cursor to.</param>
    ///<returns>True if the bookmark was found; false otherwise.</returns>
    function MoveToBookmark(bookmarkName: string): Boolean; overload;
    ///<summary>
    ///  Moves the cursor to a bookmark with greater precision.
    ///</summary>
    ///<remarks><p>Moves the cursor to a position before or after the bookmark start or end.</p>
    ///  <p>If desired position is not at inline level, moves to the next paragraph.</p>
    ///  <p>The comparison is not case-sensitive. If the bookmark was not found, false is
    ///  returned and the cursor is not moved.</p>
    ///</remarks>
    ///  <param name="bookmarkName">The name of the bookmark to move the cursor to.</param>
    ///  <param name="isStart">When true, moves the cursor to the beginning of the bookmark.
    ///  When false, moves the cursor to the end of the bookmark.</param>
    ///  <param name="isAfter">When true, moves the cursor to be after the bookmark
    ///  start or end position. When false, moves the cursor to be before the bookmark
    ///  start or end position.</param>
    ///<returns>True if the bookmark was found; false otherwise.</returns>
    function MoveToBookmark(bookmarkName: string; isStart: Boolean; isAfter: Boolean): Boolean; overload;
    ///<summary>
    ///  Moves the cursor to a paragraph in the current section.
    ///</summary>
    ///<remarks><p>The navigation is performed inside the current story of the current section.
    ///  That is, if you moved the cursor to the primary header of the first section,
    ///  then paragraphIndex specified the index of the paragraph inside that header
    ///  of that section.</p>
    ///  <p>When paragraphIndex is greater than or equal to 0, it specifies an index from
    ///  the beginning of the section with 0 being the first paragraph. When paragraphIndex is less than 0,
    ///  it specified an index from the end of the section with -1 being the last paragraph.</p>
    ///</remarks>
    ///  <param name="paragraphIndex">The index of the paragraph to move to.</param>
    ///  <param name="characterIndex">The index of the character inside the paragraph.
    ///  A negative value allows you to specify a position from the end of the paragraph. Use -1 to move to the end of
    ///  the paragraph.</param>
    procedure MoveToParagraph(paragraphIndex: Int32; characterIndex: Int32);
    ///<summary>
    ///  Moves the cursor to a table cell in the current section.
    ///</summary>
    ///<remarks><p>The navigation is performed inside the current story of the current section.</p>
    ///  <p>For the index parameters, when index is greater than or equal to 0, it specifies an index from
    ///  the beginning with 0 being the first element. When index is less than 0, it specified an index from
    ///  the end with -1 being the last element.</p>
    ///</remarks>
    ///  <param name="tableIndex">The index of the table to move to.</param>
    ///  <param name="rowIndex">The index of the row in the table.</param>
    ///  <param name="columnIndex">The index of the column in the table.</param>
    ///  <param name="characterIndex">The index of the character inside the cell.
    ///  A negative value allows you to specify a position from the end of the cell. Use -1 to move to the end of
    ///  the cell.</param>
    procedure MoveToCell(tableIndex: Int32; rowIndex: Int32; columnIndex: Int32; characterIndex: Int32);
    ///<summary>
    ///  Moves the cursor to an inline node or to the end of a paragraph.
    ///</summary>
    ///<remarks><p>When <i>node</i> is an inline-level node, the cursor is moved to this node
    ///  and further content will be inserted before that node.</p>
    ///  <p>When <i>node</i> is a <b>Paragraph</b>
    ///  , the cursor is moved to the end of the paragraph
    ///  and further content will be inserted just before the paragraph break.</p>
    ///  <p>When <i>node</i> is a block-level node but not a Paragraph, the cursor is moved to the end of the first paragraph into block-level node
    ///  and further content will be inserted just before the paragraph break.</p>
    ///</remarks>
    ///  <param name="node">The node must be a paragraph or a direct child of a paragraph.</param>
    procedure MoveTo(node: DNNode);
    ///<summary>
    ///  Deletes a row from a table.
    ///</summary>
    ///<remarks><p>If the cursor is inside the row that is being deleted, the cursor is moved
    ///  out to the next row or to the next paragraph after the table.</p>
    ///  <p>If you delete a row from a table that contains only one row, the whole
    ///  table is deleted.</p>
    ///  <p>For the index parameters, when index is greater than or equal to 0, it specifies an index from
    ///  the beginning with 0 being the first element. When index is less than 0, it specified an index from
    ///  the end with -1 being the last element.</p>
    ///</remarks>
    ///  <param name="tableIndex">The index of the table.</param>
    ///  <param name="rowIndex">The index of the row in the table.</param>
    ///<returns>The row node that was just removed.</returns>
    function DeleteRow(tableIndex: Int32; rowIndex: Int32): DNRow;
    ///<summary>
    ///  Inserts a string into the document at the current insert position.
    ///</summary>
    ///<remarks>
    ///  Current font formatting specified by the <see cref="P:Aspose.Words.DocumentBuilder.Font" />
    ///  property is used.
    ///</remarks>
    ///  <param name="text">The string to insert into the document.</param>
    procedure Write(text: string);
    ///<summary>
    ///  Inserts a string and a paragraph break into the document.
    ///</summary>
    ///<remarks>
    ///  Current font and paragraph formatting specified by the <see cref="P:Aspose.Words.DocumentBuilder.Font" />
    ///  and <see cref="P:Aspose.Words.DocumentBuilder.ParagraphFormat" />
    ///  properties are used.
    ///</remarks>
    ///  <param name="text">The string to insert into the document.</param>
    procedure Writeln(text: string); overload;
    ///<summary>
    ///  Inserts a paragraph break into the document.
    ///</summary>
    ///<remarks><p>Calls <see cref="M:Aspose.Words.DocumentBuilder.InsertParagraph" />
    ///  .</p>
    ///</remarks>
    procedure Writeln; overload;
    ///<summary>
    ///  Inserts a paragraph break into the document.
    ///</summary>
    ///<remarks><p>Current paragraph formatting specified by the <see cref="P:Aspose.Words.DocumentBuilder.ParagraphFormat" />
    ///  property is used.</p>
    ///  <p>Breaks the current paragraph in two. After inserting the paragraph, the cursor is placed at the beginning of the new paragraph.</p>
    ///</remarks>
    ///<returns>The paragraph node that was just inserted. It is the same node as <see cref="P:Aspose.Words.DocumentBuilder.CurrentParagraph" />
    ///  .</returns>
    function InsertParagraph: DNParagraph;
    ///<summary>
    ///  Inserts style separator into the document.
    ///</summary>
    ///<remarks>
    ///  This method allows to apply different paragraph styles to two different parts of a text line.
    ///</remarks>
    procedure InsertStyleSeparator;
    ///<summary>
    ///  Inserts a break of the specified type into the document.
    ///</summary>
    ///<remarks>
    ///  Use this method to insert paragraph, page, column, section or line break into the document.
    ///</remarks>
    ///  <param name="breakType">Specifies the type of the break to insert.</param>
    procedure InsertBreak(breakType: DNBreakType);
    ///<summary>
    ///  Inserts a TOC (table of contents) field into the document.
    ///</summary>
    ///<remarks><p>This method inserts a TOC (table of contents) field into the document at
    ///  the current position.</p>
    ///  <p>A table of contents in a Word document can be built in a number of ways
    ///  and formatted using a variety of options. The way the table is built and
    ///  displayed by Microsoft Word is controlled by the field switches.</p>
    ///  <p>The easiest way to specify the switches is to insert and configure a table of
    ///  contents into a Word document using the Insert-&gt;Reference-&gt;Index and Tables menu,
    ///  then switch display of field codes on to see the switches. You can press Alt+F9 in
    ///  Microsoft Word to toggle display of field codes on or off.</p>
    ///  <p>For example, after creating a table of contents, the following field is inserted
    ///  into the document: <b>{ TOC \o "1-3" \h \z \u }</b>
    ///  .
    ///  You can copy <b>\o "1-3" \h \z \u</b>
    ///  and use it as the switches parameter.</p>
    ///  <p>Note that <b>InsertTableOfContents</b>
    ///  will only insert a TOC field, but
    ///  will not actually build the table of contents. The table of contents is built by
    ///  Microsoft Word when the field is updated.</p>
    ///  <p>If you insert a table of contents using this method and then open the file
    ///  in Microsoft Word, you will not see the table of contents because the TOC field
    ///  has not yet been updated.</p>
    ///  <p>In Microsoft Word, fields are not automatically updated when a document is opened,
    ///  but you can update fields in a document at any time by pressing F9.</p>
    ///</remarks>
    ///  <param name="switches">The TOC field switches.</param>
    function InsertTableOfContents(switches: string): DNField;
    ///<overloads>Inserts a Word field into a document.</overloads><summary>
    ///  Inserts a Word field into a document and optionally updates the field result.
    ///</summary>
    ///<remarks><para>This method inserts a field into a document.
    ///  Aspose.Words can update fields of most types, but not all. For more details see the
    ///<see cref="M:Aspose.Words.DocumentBuilder.InsertField(System.String,System.String)" />
    ///  overload.</para><seealso cref="T:Aspose.Words.Fields.Field" />
    ///</remarks>
    ///  <param name="fieldType">The type of the field to append.</param>
    ///  <param name="updateField">Specifies whether to update the field immediately.</param>
    ///<returns>A <see cref="T:Aspose.Words.Fields.Field" />
    ///  object that represents the inserted field.</returns>
    function InsertField(fieldType: DNFieldType; updateField: Boolean): DNField; overload;
    ///<overloads>Inserts a Word field into a document.</overloads><summary>
    ///  Inserts a Word field into a document and updates the field result.
    ///</summary>
    ///<remarks><para>This method inserts a field into a document and updates the field result immediately.
    ///  Aspose.Words can update fields of most types, but not all. For more details see the
    ///<see cref="M:Aspose.Words.DocumentBuilder.InsertField(System.String,System.String)" />
    ///  overload.</para><seealso cref="T:Aspose.Words.Fields.Field" />
    ///</remarks>
    ///  <param name="fieldCode">The field code to insert (without curly braces).</param>
    ///<returns>A <see cref="T:Aspose.Words.Fields.Field" />
    ///  object that represents the inserted field.</returns>
    function InsertField(fieldCode: string): DNField; overload;
    ///<summary>
    ///  Inserts a Word field into a document without updating the field result.
    ///</summary>
    ///<remarks><p>Fields in Microsoft Word documents consist of a field code and a field result.
    ///  The field code is like a formula and the field result is like the value that
    ///  the formula produces. The field code may also contain field switches
    ///  that are like additional instructions to perform a specific action.</p>
    ///  <p>You can switch between displaying field codes and results in your document in
    ///  Microsoft Word using the keyboard shortcut Alt+F9. Field codes appear between curly braces ( { } ).</p>
    ///  <p>To create a field, you need to specify a field type, field code and a "placeholder" field value.
    ///  If you are not sure about a particular field code syntax, create the field in Microsoft Word first
    ///  and switch to see its field code.</p>
    ///  <para>Aspose.Words can calculate field results for most of the field types, but this method
    ///  does not update the field result automatically. Because the field result is not calculated automatically,
    ///  you are expected to pass some string value (or even an empty string) that will be inserted into the field result.
    ///  This value will remain in the field result as a placeholder until the field is updated.
    ///  To update the field result you can call <see cref="M:Aspose.Words.Fields.Field.Update" />
    ///  on the field object returned
    ///  to you or <see cref="M:Aspose.Words.Document.UpdateFields" />
    ///  to update fields in the whole document.</para><seealso cref="T:Aspose.Words.Fields.Field" />
    ///</remarks>
    ///  <param name="fieldCode">The field code to insert (without curly braces).</param>
    ///  <param name="fieldValue">The field value to insert. Pass null for fields that do not have a value.</param>
    ///<returns>A <see cref="T:Aspose.Words.Fields.Field" />
    ///  object that represents the inserted field.</returns>
    function InsertField(fieldCode: string; fieldValue: string): DNField; overload;
    ///<summary>
    ///  Inserts a hyperlink into the document.
    ///</summary>
    ///<remarks><p>Note that you need to specify font formatting for the hyperlink display text explicitly
    ///  using the <see cref="P:Aspose.Words.DocumentBuilder.Font" />
    ///  property.</p>
    ///  <p>This methods internally calls <see cref="M:Aspose.Words.DocumentBuilder.InsertField(System.String)" />
    ///  to insert an MS Word HYPERLINK field
    ///  into the document.</p>
    ///</remarks>
    ///  <param name="displayText">Text of the link to be displayed in the document.</param>
    ///  <param name="urlOrBookmark">Link destination. Can be a url or a name of a bookmark inside the document.
    ///  This method always adds apostrophes at the beginning and end of the url.</param>
    ///  <param name="isBookmark">True if the previous parameter is a name of a bookmark inside the document;
    ///  false is the previous parameter is a URL.</param>
    ///<returns>A <see cref="T:Aspose.Words.Fields.Field" />
    ///  object that represents the inserted field.</returns>
    function InsertHyperlink(displayText: string; urlOrBookmark: string; isBookmark: Boolean): DNField;
    ///<summary>
    ///  Inserts a text form field at the current position.
    ///</summary>
    ///<remarks><p>If you specify a name for the form field, then a bookmark is automatically created with the same name.</p>
    ///</remarks>
    ///  <param name="name">The name of the form field. Can be an empty string.</param>
    ///  <param name="type">Specifies the type of the text form field.</param>
    ///  <param name="format">Format string used to format the value of the form field.</param>
    ///  <param name="fieldValue">Text that will be shown in the field.</param>
    ///  <param name="maxLength">Maximum length the user can enter into the form field. Set to zero for unlimited length.</param>
    ///<returns>The form field node that was just inserted.</returns>
    function InsertTextInput(name: string; &type: DNTextFormFieldType; format: string; fieldValue: string; maxLength: Int32): DNFormField;
    ///<summary>
    ///  Inserts a checkbox form field at the current position.
    ///</summary>
    ///<remarks><p>If you specify a name for the form field, then a bookmark is automatically created with the same name.</p>
    ///</remarks>
    ///  <param name="name">The name of the form field. Can be an empty string. The value longer than 20 characters will be truncated.</param>
    ///  <param name="checkedValue">Checked status of the checkbox form field.</param>
    ///  <param name="size">Specifies the size of the checkbox in points. Specify 0 for MS Word
    ///  to calculate the size of the checkbox automatically.</param>
    ///<returns>The form field node that was just inserted.</returns>
    function InsertCheckBox(name: string; checkedValue: Boolean; size: Int32): DNFormField; overload;
    ///<summary>
    ///  Inserts a checkbox form field at the current position.
    ///</summary>
    ///<remarks><p>If you specify a name for the form field, then a bookmark is automatically created with the same name.</p>
    ///</remarks>
    ///  <param name="name">The name of the form field. Can be an empty string. The value longer than 20 characters will be truncated.</param>
    ///  <param name="defaultValue">Default value of the checkbox form field.</param>
    ///  <param name="checkedValue">Current checked status of the checkbox form field.</param>
    ///  <param name="size">Specifies the size of the checkbox in points. Specify 0 for MS Word
    ///  to calculate the size of the checkbox automatically.</param>
    ///<returns>The form field node that was just inserted.</returns>
    function InsertCheckBox(name: string; defaultValue: Boolean; checkedValue: Boolean; size: Int32): DNFormField; overload;
    ///<summary>
    ///  Inserts a combobox form field at the current position.
    ///</summary>
    ///<remarks><p>If you specify a name for the form field, then a bookmark is automatically created with the same name.</p>
    ///</remarks>
    ///  <param name="name">The name of the form field. Can be an empty string. The value longer than 20 characters will be truncated.</param>
    ///  <param name="items">The items of the ComboBox. Maximum is 25 items.</param>
    ///  <param name="selectedIndex">The index of the selected item in the ComboBox.</param>
    ///<returns>The form field node that was just inserted.</returns>
    function InsertComboBox(name: string; items: TArray<string>; selectedIndex: Int32): DNFormField;
    ///<summary>
    ///  Inserts a footnote or endnote into the document.
    ///</summary>
    ///  <param name="footnoteType">Specifies whether to insert a footnote or an endnote.</param>
    ///  <param name="footnoteText">Specifies the text of the footnote.</param>
    ///<returns>Returns a footnote object that was just created.</returns>
    function InsertFootnote(footnoteType: DNFootnoteType; footnoteText: string): DNFootnote; overload;
    ///<summary>
    ///  Inserts a footnote or endnote into the document.
    ///</summary>
    ///  <param name="footnoteType">Specifies whether to insert a footnote or an endnote.</param>
    ///  <param name="footnoteText">Specifies the text of the footnote.</param>
    ///  <param name="referenceMark">Specifies the custom reference mark of the footnote.</param>
    ///<returns>Returns a footnote object that was just created.</returns>
    function InsertFootnote(footnoteType: DNFootnoteType; footnoteText: string; referenceMark: string): DNFootnote; overload;
    ///<overloads>Inserts an image into the document.</overloads><summary>
    ///  Inserts an image from a .NET <see cref="T:System.Drawing.Image" />
    ///  object into the document. The image is inserted inline and at 100% scale.
    ///</summary>
    ///  <param name="image">The image to insert into the document.</param>
    ///<returns>The image node that was just inserted.</returns>
    ///<remarks><p>You can change the image size, location, positioning method and other settings using the
    ///<see cref="T:Aspose.Words.Drawing.Shape" />
    ///  object returned by this method.</p>
    ///</remarks>
    function InsertImage(image: DDN.Aspose.Common.DNImage): DNShape; overload;
    ///<summary>
    ///  Inserts an image from a file or URL into the document. The image is inserted inline and at 100% scale.
    ///</summary>
    ///  <param name="fileName">The file with the image. Can be any valid local or remote URI.</param>
    ///<returns>The image node that was just inserted.</returns>
    ///<remarks><p>This overload will automatically download the image before inserting into the document
    ///  if you specify a remote URI.</p>
    ///  <p>You can change the image size, location, positioning method and other settings using the
    ///<see cref="T:Aspose.Words.Drawing.Shape" />
    ///  object returned by this method.</p>
    ///</remarks>
    function InsertImage(fileName: string): DNShape; overload;
    ///<summary>
    ///  Inserts an image from a stream into the document. The image is inserted inline and at 100% scale.
    ///</summary>
    ///  <param name="stream">The stream that contains the image.
    ///</param>
    ///<returns>The image node that was just inserted.</returns>
    ///<remarks><p>You can change the image size, location, positioning method and other settings using the
    ///<see cref="T:Aspose.Words.Drawing.Shape" />
    ///  object returned by this method.</p>
    ///</remarks>
    function InsertImage(stream: DDN.mscorlib.DNStream): DNShape; overload;
    ///<summary>
    ///  Inserts an image from a byte array into the document. The image is inserted inline and at 100% scale.
    ///</summary>
    ///  <param name="imageBytes">The byte array that contains the image.</param>
    ///<returns>The image node that was just inserted.</returns>
    ///<remarks><p>You can change the image size, location, positioning method and other settings using the
    ///<see cref="T:Aspose.Words.Drawing.Shape" />
    ///  object returned by this method.</p>
    ///</remarks>
    function InsertImage(imageBytes: TArray<Byte>): DNShape; overload;
    ///<summary>
    ///  Inserts an inline image from a .NET <see cref="T:System.Drawing.Image" />
    ///  object into the document and scales it to the specified size.
    ///</summary>
    ///  <param name="image">The image to insert into the document.</param>
    ///  <param name="width">The width of the image in points. Can be a negative or zero value to request 100% scale.</param>
    ///  <param name="height">The height of the image in points. Can be a negative or zero value to request 100% scale.</param>
    ///<returns>The image node that was just inserted.</returns>
    ///<remarks><p>You can change the image size, location, positioning method and other settings using the
    ///<see cref="T:Aspose.Words.Drawing.Shape" />
    ///  object returned by this method.</p>
    ///</remarks>
    function InsertImage(image: DDN.Aspose.Common.DNImage; width: Double; height: Double): DNShape; overload;
    ///<summary>
    ///  Inserts an inline image from a file or URL into the document and scales it to the specified size.
    ///</summary>
    ///  <param name="fileName">The file that contains the image.</param>
    ///  <param name="width">The width of the image in points. Can be a negative or zero value to request 100% scale.</param>
    ///  <param name="height">The height of the image in points. Can be a negative or zero value to request 100% scale.</param>
    ///<returns>The image node that was just inserted.</returns>
    ///<remarks><p>You can change the image size, location, positioning method and other settings using the
    ///<see cref="T:Aspose.Words.Drawing.Shape" />
    ///  object returned by this method.</p>
    ///</remarks>
    function InsertImage(fileName: string; width: Double; height: Double): DNShape; overload;
    ///<summary>
    ///  Inserts an inline image from a stream into the document and scales it to the specified size.
    ///</summary>
    ///  <param name="stream">The stream that contains the image.</param>
    ///  <param name="width">The width of the image in points. Can be a negative or zero value to request 100% scale.</param>
    ///  <param name="height">The height of the image in points. Can be a negative or zero value to request 100% scale.</param>
    ///<returns>The image node that was just inserted.</returns>
    ///<remarks><p>You can change the image size, location, positioning method and other settings using the
    ///<see cref="T:Aspose.Words.Drawing.Shape" />
    ///  object returned by this method.</p>
    ///</remarks>
    function InsertImage(stream: DDN.mscorlib.DNStream; width: Double; height: Double): DNShape; overload;
    ///<summary>
    ///  Inserts an inline image from a byte array into the document and scales it to the specified size.
    ///</summary>
    ///  <param name="imageBytes">The byte array that contains the image.</param>
    ///  <param name="width">The width of the image in points. Can be a negative or zero value to request 100% scale.</param>
    ///  <param name="height">The height of the image in points. Can be a negative or zero value to request 100% scale.</param>
    ///<returns>The image node that was just inserted.</returns>
    ///<remarks><p>You can change the image size, location, positioning method and other settings using the
    ///<see cref="T:Aspose.Words.Drawing.Shape" />
    ///  object returned by this method.</p>
    ///</remarks>
    function InsertImage(imageBytes: TArray<Byte>; width: Double; height: Double): DNShape; overload;
    ///<summary>
    ///  Inserts an image from a .NET <see cref="T:System.Drawing.Image" />
    ///  object at the specified position and size.
    ///</summary>
    ///  <param name="image">The image to insert into the document.</param>
    ///  <param name="horzPos">Specifies where the distance to the image is measured from.</param>
    ///  <param name="left">Distance in points from the origin to the left side of the image.</param>
    ///  <param name="vertPos">Specifies where the distance to the image measured from.</param>
    ///  <param name="top">Distance in points from the origin to the top side of the image.</param>
    ///  <param name="width">The width of the image in points. Can be a negative or zero value to request 100% scale.</param>
    ///  <param name="height">The height of the image in points. Can be a negative or zero value to request 100% scale.</param>
    ///  <param name="wrapType">Specifies how to wrap text around the image.</param>
    ///<returns>The image node that was just inserted.</returns>
    ///<remarks><p>You can change the image size, location, positioning method and other settings using the
    ///<see cref="T:Aspose.Words.Drawing.Shape" />
    ///  object returned by this method.</p>
    ///</remarks>
    function InsertImage(image: DDN.Aspose.Common.DNImage; horzPos: DNRelativeHorizontalPosition; left: Double; vertPos: DNRelativeVerticalPosition; top: Double; width: Double; height: Double; wrapType: DNWrapType): DNShape; overload;
    ///<summary>
    ///  Inserts an image from a file or URL at the specified position and size.
    ///</summary>
    ///  <param name="fileName">The file that contains the image.</param>
    ///  <param name="horzPos">Specifies where the distance to the image is measured from.</param>
    ///  <param name="left">Distance in points from the origin to the left side of the image.</param>
    ///  <param name="vertPos">Specifies where the distance to the image measured from.</param>
    ///  <param name="top">Distance in points from the origin to the top side of the image.</param>
    ///  <param name="width">The width of the image in points. Can be a negative or zero value to request 100% scale.</param>
    ///  <param name="height">The height of the image in points. Can be a negative or zero value to request 100% scale.</param>
    ///  <param name="wrapType">Specifies how to wrap text around the image.</param>
    ///<returns>The image node that was just inserted.</returns>
    ///<remarks><p>You can change the image size, location, positioning method and other settings using the
    ///<see cref="T:Aspose.Words.Drawing.Shape" />
    ///  object returned by this method.</p>
    ///</remarks>
    function InsertImage(fileName: string; horzPos: DNRelativeHorizontalPosition; left: Double; vertPos: DNRelativeVerticalPosition; top: Double; width: Double; height: Double; wrapType: DNWrapType): DNShape; overload;
    ///<summary>
    ///  Inserts an image from a stream at the specified position and size.
    ///</summary>
    ///  <param name="stream">The stream that contains the image.</param>
    ///  <param name="horzPos">Specifies where the distance to the image is measured from.</param>
    ///  <param name="left">Distance in points from the origin to the left side of the image.</param>
    ///  <param name="vertPos">Specifies where the distance to the image measured from.</param>
    ///  <param name="top">Distance in points from the origin to the top side of the image.</param>
    ///  <param name="width">The width of the image in points. Can be a negative or zero value to request 100% scale.</param>
    ///  <param name="height">The height of the image in points. Can be a negative or zero value to request 100% scale.</param>
    ///  <param name="wrapType">Specifies how to wrap text around the image.</param>
    ///<returns>The image node that was just inserted.</returns>
    ///<remarks><p>You can change the image size, location, positioning method and other settings using the
    ///<see cref="T:Aspose.Words.Drawing.Shape" />
    ///  object returned by this method.</p>
    ///</remarks>
    function InsertImage(stream: DDN.mscorlib.DNStream; horzPos: DNRelativeHorizontalPosition; left: Double; vertPos: DNRelativeVerticalPosition; top: Double; width: Double; height: Double; wrapType: DNWrapType): DNShape; overload;
    ///<summary>
    ///  Inserts an image from a byte array at the specified position and size.
    ///</summary>
    ///  <param name="imageBytes">The byte array that contains the image.</param>
    ///  <param name="horzPos">Specifies where the distance to the image is measured from.</param>
    ///  <param name="left">Distance in points from the origin to the left side of the image.</param>
    ///  <param name="vertPos">Specifies where the distance to the image measured from.</param>
    ///  <param name="top">Distance in points from the origin to the top side of the image.</param>
    ///  <param name="width">The width of the image in points. Can be a negative or zero value to request 100% scale.</param>
    ///  <param name="height">The height of the image in points. Can be a negative or zero value to request 100% scale.</param>
    ///  <param name="wrapType">Specifies how to wrap text around the image.</param>
    ///<returns>The image node that was just inserted.</returns>
    ///<remarks><p>You can change the image size, location, positioning method and other settings using the
    ///<see cref="T:Aspose.Words.Drawing.Shape" />
    ///  object returned by this method.</p>
    ///</remarks>
    function InsertImage(imageBytes: TArray<Byte>; horzPos: DNRelativeHorizontalPosition; left: Double; vertPos: DNRelativeVerticalPosition; top: Double; width: Double; height: Double; wrapType: DNWrapType): DNShape; overload;
    ///<summary>
    ///  Inserts an embedded OLE object from a stream into the document.
    ///</summary>
    ///  <param name="stream">Stream containing application data.</param>
    ///  <param name="progId">Programmatic Identifier of OLE object.</param>
    ///  <param name="asIcon">Specifies either Iconic or Normal mode of OLE object being inserted.</param>
    ///  <param name="presentation">Image presentation of OLE object. If value is null Aspose.Words will use one of the predefined images.</param>
    ///<returns>Shape node containing Ole object and inserted at the current Builder position.</returns>
    function InsertOleObject(stream: DDN.mscorlib.DNStream; progId: string; asIcon: Boolean; presentation: DDN.mscorlib.DNStream): DNShape; overload;
    ///<summary>
    ///  Inserts an embedded or linked OLE object from a file into the document. Detects OLE object type using file extension.
    ///</summary>
    ///  <param name="fileName">Full path to the file.</param>
    ///  <param name="isLinked">If true then linked OLE object is inserted otherwise embedded OLE object is inserted.</param>
    ///  <param name="asIcon">Specifies either Iconic or Normal mode of OLE object being inserted.</param>
    ///  <param name="presentation">Image presentation of OLE object. If value is null Aspose.Words will use one of the predefined images.</param>
    ///<returns>Shape node containing Ole object and inserted at the current Builder position.</returns>
    function InsertOleObject(fileName: string; isLinked: Boolean; asIcon: Boolean; presentation: DDN.mscorlib.DNStream): DNShape; overload;
    ///<summary>
    ///  Inserts an embedded or linked OLE object from a file into the document. Detects OLE object type using given progID parameter.
    ///</summary>
    ///  <param name="fileName">Full path to the file.</param>
    ///  <param name="progId">ProgId of OLE object.</param>
    ///  <param name="isLinked">If true then linked OLE object is inserted otherwise embedded OLE object is inserted.</param>
    ///  <param name="asIcon">Specifies either Iconic or Normal mode of OLE object being inserted.</param>
    ///  <param name="presentation">Image presentation of OLE object. If value is null Aspose.Words will use one of the predefined images.</param>
    ///<returns>Shape node containing Ole object and inserted at the current Builder position.</returns>
    function InsertOleObject(fileName: string; progId: string; isLinked: Boolean; asIcon: Boolean; presentation: DDN.mscorlib.DNStream): DNShape; overload;
    ///<summary>
    ///  Inserts an embedded or linked OLE object as icon into the document.
    ///  Allows to specify icon file and caption. Detects OLE object type using file extension.
    ///</summary>
    ///  <param name="fileName">Full path to the file.</param>
    ///  <param name="isLinked">
    ///  If true then linked OLE object is inserted otherwise embedded OLE object is inserted.
    ///</param>
    ///  <param name="iconFile">
    ///  Full path to the ICO file. If the value is null, Aspose.Words will use a predefined image.
    ///</param>
    ///  <param name="iconCaption">
    ///  Icon caption. If the value is null, Aspose.Words will use the file name.
    ///</param>
    ///<returns>Shape node containing Ole object and inserted at the current Builder position.</returns>
    function InsertOleObjectAsIcon(fileName: string; isLinked: Boolean; iconFile: string; iconCaption: string): DNShape; overload;
    ///<summary>
    ///  Inserts an embedded or linked OLE object as icon into the document.
    ///  Allows to specify icon file and caption. Detects OLE object type using given progID parameter.
    ///</summary>
    ///  <param name="fileName">Full path to the file.</param>
    ///  <param name="progId">ProgId of OLE object.</param>
    ///  <param name="isLinked">
    ///  If true then linked OLE object is inserted otherwise embedded OLE object is inserted.
    ///</param>
    ///  <param name="iconFile">
    ///  Full path to the ICO file. If the value is null, Aspose.Words will use a predefined image.
    ///</param>
    ///  <param name="iconCaption">
    ///  Icon caption. If the value is null, Aspose.Words will use the file name.
    ///</param>
    ///<returns>Shape node containing Ole object and inserted at the current Builder position.</returns>
    function InsertOleObjectAsIcon(fileName: string; progId: string; isLinked: Boolean; iconFile: string; iconCaption: string): DNShape; overload;
    ///<summary>
    ///  Inserts an embedded OLE object as icon from a stream into the document.
    ///  Allows to specify icon file and caption. Detects OLE object type using given progID parameter.
    ///</summary>
    ///  <param name="stream">Stream containing application data.</param>
    ///  <param name="progId">ProgId of OLE object.</param>
    ///  <param name="iconFile">
    ///  Full path to the ICO file. If the value is null, Aspose.Words will use a predefined image.
    ///</param>
    ///  <param name="iconCaption">
    ///  Icon caption. If the value is null, Aspose.Words will use the a predefined icon caption.
    ///</param>
    ///<returns>Shape node containing Ole object and inserted at the current Builder position.</returns>
    function InsertOleObjectAsIcon(stream: DDN.mscorlib.DNStream; progId: string; iconFile: string; iconCaption: string): DNShape; overload;
    ///<summary>
    ///  Inserts an HTML string into the document.
    ///</summary>
    ///<remarks><p>You can use InsertHtml to insert an HTML fragment or whole HTML document.</p>
    ///</remarks>
    ///  <param name="html">An HTML string to insert into the document.</param>
    procedure InsertHtml(html: string); overload;
    ///<summary>
    ///  Inserts an HTML string into the document.
    ///</summary>
    ///<remarks><p>You can use InsertHtml to insert an HTML fragment or whole HTML document.</p>
    ///</remarks>
    ///  <param name="html">An HTML string to insert into the document.</param>
    ///  <param name="useBuilderFormatting">
    ///  A value indicating whether formatting specified in <see cref="T:Aspose.Words.DocumentBuilder" />
    ///  is used as base formatting for text imported from HTML.
    ///</param>
    ///<remarks><para>
    ///  When <paramref name="useBuilderFormatting" />
    ///  is <c>false</c>,
    ///<see cref="T:Aspose.Words.DocumentBuilder" />
    ///  formating is ignored and formatting of inserted text
    ///  is based on default HTML formatting. As a result, the text looks as it is rendered in browsers.
    ///</para><para>
    ///  When <paramref name="useBuilderFormatting" />
    ///  is <c>true</c>,
    ///  formatting of inserted text is based on <see cref="T:Aspose.Words.DocumentBuilder" />
    ///  formatting,
    ///  and the text looks as if it were inserted with <see cref="M:Aspose.Words.DocumentBuilder.Write(System.String)" />
    ///  .
    ///</para></remarks>
    procedure InsertHtml(html: string; useBuilderFormatting: Boolean); overload;
    ///<summary>
    ///  Inserts inline shape with specified type and size.
    ///</summary>
    ///  <param name="shapeType">The shape type to insert into the document.</param>
    ///  <param name="width">The width of the shape in points.</param>
    ///  <param name="height">The height of the shape in points.</param>
    ///<returns>The shape node that was inserted.</returns>
    function InsertShape(shapeType: DNShapeType; width: Double; height: Double): DNShape; overload;
    ///<summary>
    ///  Inserts free-floating shape with specified position, size and text wrap type.
    ///</summary>
    ///  <param name="shapeType">The shape type to insert into the document</param>
    ///  <param name="horzPos">Specifies where the horizontal distance to the shape is measured from.</param>
    ///  <param name="left">Distance in points from the origin to the left side of the shape.</param>
    ///  <param name="vertPos">Specifies where the vertical distance to the shape is measured from.</param>
    ///  <param name="top">Distance in points from the origin to the top side of the shape.</param>
    ///  <param name="width">The width of the shape in points.</param>
    ///  <param name="height">The width of the shape in points.</param>
    ///  <param name="wrapType">Specifies how to wrap text around the shape.</param>
    ///<returns>The shape node that was inserted.</returns>
    function InsertShape(shapeType: DNShapeType; horzPos: DNRelativeHorizontalPosition; left: Double; vertPos: DNRelativeVerticalPosition; top: Double; width: Double; height: Double; wrapType: DNWrapType): DNShape; overload;
    ///<summary>
    ///  Inserts an chart object into the document and scales it to the specified size.
    ///</summary>
    ///  <param name="chartType">The chart type to insert into the document.</param>
    ///  <param name="width">The width of the image in points. Can be a negative or zero value to request 100% scale.</param>
    ///  <param name="height">The height of the image in points. Can be a negative or zero value to request 100% scale.</param>
    ///<returns>The image node that was just inserted.</returns>
    ///<remarks><p>You can change the image size, location, positioning method and other settings using the
    ///<see cref="T:Aspose.Words.Drawing.Shape" />
    ///  object returned by this method.</p>
    ///</remarks>
    function InsertChart(chartType: DNChartType; width: Double; height: Double): DNShape; overload;
    ///<summary>
    ///  Inserts an chart object into the document and scales it to the specified size.
    ///</summary>
    ///  <param name="chartType">The chart type to insert into the document.</param>
    ///  <param name="horzPos">Specifies where the distance to the image is measured from.</param>
    ///  <param name="left">Distance in points from the origin to the left side of the image.</param>
    ///  <param name="vertPos">Specifies where the distance to the image measured from.</param>
    ///  <param name="top">Distance in points from the origin to the top side of the image.</param>
    ///  <param name="width">The width of the image in points. Can be a negative or zero value to request 100% scale.</param>
    ///  <param name="height">The height of the image in points. Can be a negative or zero value to request 100% scale.</param>
    ///  <param name="wrapType">Specifies how to wrap text around the image.</param>
    ///<returns>The image node that was just inserted.</returns>
    ///<remarks><p>You can change the image size, location, positioning method and other settings using the
    ///<see cref="T:Aspose.Words.Drawing.Shape" />
    ///  object returned by this method.</p>
    ///</remarks>
    function InsertChart(chartType: DNChartType; horzPos: DNRelativeHorizontalPosition; left: Double; vertPos: DNRelativeVerticalPosition; top: Double; width: Double; height: Double; wrapType: DNWrapType): DNShape; overload;
    ///<summary>
    ///  Inserts an online video object into the document and scales it to the specified size.
    ///</summary>
    ///  <param name="videoUrl">The URL to the video.</param>
    ///  <param name="width">The width of the image in points. Can be a negative or zero value to request 100% scale.</param>
    ///  <param name="height">The height of the image in points. Can be a negative or zero value to request 100% scale.</param>
    ///<returns>The image node that was just inserted.</returns>
    ///<remarks><p>You can change the image size, location, positioning method and other settings using the
    ///<see cref="T:Aspose.Words.Drawing.Shape" />
    ///  object returned by this method.</p>
    ///  <para>Insertion of online video from the following resources is supported:</para><list type="bullet"><item><description>https://www.youtube.com/</description>
    ///</item>
    ///<item><description>https://vimeo.com/</description>
    ///</item>
    ///</list>
    ///  <para>If your online video is not displaying correctly, use <see cref="M:Aspose.Words.DocumentBuilder.InsertOnlineVideo(System.String,System.String,System.Byte[],System.Double,System.Double)" />
    ///  , which accepts custom embedded html code.</para><para>The code for embedding video can vary between providers, consult your corresponding provider of choice for details.</para></remarks>
    function InsertOnlineVideo(videoUrl: string; width: Double; height: Double): DNShape; overload;
    ///<summary>
    ///  Inserts an online video object into the document and scales it to the specified size.
    ///</summary>
    ///  <param name="videoUrl">The URL to the video.</param>
    ///  <param name="horzPos">Specifies where the distance to the image is measured from.</param>
    ///  <param name="left">Distance in points from the origin to the left side of the image.</param>
    ///  <param name="vertPos">Specifies where the distance to the image measured from.</param>
    ///  <param name="top">Distance in points from the origin to the top side of the image.</param>
    ///  <param name="width">The width of the image in points. Can be a negative or zero value to request 100% scale.</param>
    ///  <param name="height">The height of the image in points. Can be a negative or zero value to request 100% scale.</param>
    ///  <param name="wrapType">Specifies how to wrap text around the image.</param>
    ///<returns>The image node that was just inserted.</returns>
    ///<remarks><p>You can change the image size, location, positioning method and other settings using the
    ///<see cref="T:Aspose.Words.Drawing.Shape" />
    ///  object returned by this method.</p>
    ///  <para>Insertion of online video from the following resources is supported:</para><list type="bullet"><item><description>https://www.youtube.com/</description>
    ///</item>
    ///<item><description>https://vimeo.com/</description>
    ///</item>
    ///</list>
    ///  <para>If your online video is not displaying correctly, use <see cref="M:Aspose.Words.DocumentBuilder.InsertOnlineVideo(System.String,System.String,System.Byte[],System.Double,System.Double)" />
    ///  , which accepts custom embedded html code.</para><para>The code for embedding video can vary between providers, consult your corresponding provider of choice for details.</para></remarks>
    function InsertOnlineVideo(videoUrl: string; horzPos: DNRelativeHorizontalPosition; left: Double; vertPos: DNRelativeVerticalPosition; top: Double; width: Double; height: Double; wrapType: DNWrapType): DNShape; overload;
    ///<summary>
    ///  Inserts an online video object into the document and scales it to the specified size.
    ///</summary>
    ///  <param name="videoUrl">The URL to the video.</param>
    ///  <param name="videoEmbedCode">The embed code for the video.</param>
    ///  <param name="thumbnailImageBytes">The thumbnail image bytes.</param>
    ///  <param name="width">The width of the image in points. Can be a negative or zero value to request 100% scale.</param>
    ///  <param name="height">The height of the image in points. Can be a negative or zero value to request 100% scale.</param>
    ///<returns>The image node that was just inserted.</returns>
    ///<remarks><p>You can change the image size, location, positioning method and other settings using the
    ///<see cref="T:Aspose.Words.Drawing.Shape" />
    ///  object returned by this method.</p>
    ///</remarks>
    function InsertOnlineVideo(videoUrl: string; videoEmbedCode: string; thumbnailImageBytes: TArray<Byte>; width: Double; height: Double): DNShape; overload;
    ///<summary>
    ///  Inserts an online video object into the document and scales it to the specified size.
    ///</summary>
    ///  <param name="videoUrl">The URL to the video.</param>
    ///  <param name="videoEmbedCode">The embed code for the video.</param>
    ///  <param name="thumbnailImageBytes">The thumbnail image bytes.</param>
    ///  <param name="horzPos">Specifies where the distance to the image is measured from.</param>
    ///  <param name="left">Distance in points from the origin to the left side of the image.</param>
    ///  <param name="vertPos">Specifies where the distance to the image measured from.</param>
    ///  <param name="top">Distance in points from the origin to the top side of the image.</param>
    ///  <param name="width">The width of the image in points. Can be a negative or zero value to request 100% scale.</param>
    ///  <param name="height">The height of the image in points. Can be a negative or zero value to request 100% scale.</param>
    ///  <param name="wrapType">Specifies how to wrap text around the image.</param>
    ///<returns>The image node that was just inserted.</returns>
    ///<remarks><p>You can change the image size, location, positioning method and other settings using the
    ///<see cref="T:Aspose.Words.Drawing.Shape" />
    ///  object returned by this method.</p>
    ///</remarks>
    function InsertOnlineVideo(videoUrl: string; videoEmbedCode: string; thumbnailImageBytes: TArray<Byte>; horzPos: DNRelativeHorizontalPosition; left: Double; vertPos: DNRelativeVerticalPosition; top: Double; width: Double; height: Double; wrapType: DNWrapType): DNShape; overload;
    ///<summary>
    ///  Inserts a signature line at the current position.
    ///</summary>
    ///  <param name="signatureLineOptions">The object that stores parameters of creating signature line.</param>
    ///<returns>The signature line node that was just inserted.</returns>
    function InsertSignatureLine(signatureLineOptions: DNSignatureLineOptions): DNShape; overload;
    ///<summary>
    ///  Inserts a signature line at the specified position.
    ///</summary>
    ///  <param name="signatureLineOptions">The object that stores parameters of creating signature line.</param>
    ///  <param name="horzPos">Specifies where the distance to the signature line is measured from.</param>
    ///  <param name="left">Distance in points from the origin to the left side of the signature line.</param>
    ///  <param name="vertPos">Specifies where the distance to the signature line measured from.</param>
    ///  <param name="top">Distance in points from the origin to the top side of the signature line.</param>
    ///  <param name="wrapType">Specifies how to wrap text around the signature line.</param>
    ///<returns>The signature line node that was just inserted.</returns>
    ///<remarks><p>You can change the image size, location, positioning method and other settings using the
    ///<see cref="T:Aspose.Words.Drawing.Shape" />
    ///  object returned by this method.</p>
    ///</remarks>
    function InsertSignatureLine(signatureLineOptions: DNSignatureLineOptions; horzPos: DNRelativeHorizontalPosition; left: Double; vertPos: DNRelativeVerticalPosition; top: Double; wrapType: DNWrapType): DNShape; overload;
    ///<summary>
    ///  Inserts a horizontal rule shape into the document.
    ///</summary>
    ///<returns>The shape that is a horizontal rule.</returns>
    function InsertHorizontalRule: DNShape;
    ///<summary>
    ///  Inserts a table cell into the document.
    ///</summary>
    ///<remarks><p>To start a table, just call <b>InsertCell</b>
    ///  . After this, any content you add using
    ///  other methods of the <see cref="T:Aspose.Words.DocumentBuilder" />
    ///  class will be added to the current cell.</p>
    ///  <p>To start a new cell in the same row, call <b>InsertCell</b>
    ///  again.</p>
    ///  <p>To end a table row call <see cref="M:Aspose.Words.DocumentBuilder.EndRow" />
    ///  .</p>
    ///  <p>Use the <see cref="P:Aspose.Words.DocumentBuilder.CellFormat" />
    ///  property to specify cell formatting.</p>
    ///</remarks>
    ///<returns>The cell node that was just inserted.</returns>
    function InsertCell: DNCell;
    ///<summary>
    ///  Starts a table in the document.
    ///</summary>
    ///<remarks><p>The next method to call is <see cref="M:Aspose.Words.DocumentBuilder.InsertCell" />
    ///  .</p>
    ///  <p>This method starts a nested table when called inside a cell.</p>
    ///</remarks>
    ///<returns>The table node that was just created.</returns>
    function StartTable: DNTable;
    ///<summary>
    ///  Ends a table in the document.
    ///</summary>
    ///<remarks><p>This method should be called only once after <see cref="M:Aspose.Words.DocumentBuilder.EndRow" />
    ///  was called. When called,
    ///<b>EndTable</b>
    ///  moves the cursor out of the current cell to point just after the table.</p>
    ///</remarks>
    ///<returns>The table node that was just finished.</returns>
    function EndTable: DNTable;
    ///<summary>
    ///  Ends a table row in the document.
    ///</summary>
    ///<remarks><p>Call <b>EndRow</b>
    ///  to end a table row. If you call <see cref="M:Aspose.Words.DocumentBuilder.InsertCell" />
    ///  immediately
    ///  after that, then the table continues on a new row.</p>
    ///  <p>Use the <see cref="P:Aspose.Words.DocumentBuilder.RowFormat" />
    ///  property to specify row formatting.</p>
    ///</remarks>
    ///<returns>The row node that was just finished.</returns>
    function EndRow: DNRow;
    ///<summary>
    ///  Marks the current position in the document as a bookmark start.
    ///</summary>
    ///<remarks><p>Bookmarks in a document can overlap and span any range. To create a valid bookmark you need to
    ///  call both <see cref="M:Aspose.Words.DocumentBuilder.StartBookmark(System.String)" />
    ///  and <see cref="M:Aspose.Words.DocumentBuilder.EndBookmark(System.String)" />
    ///  with the same <b>bookmarkName</b>
    ///  parameter.</p>
    ///  <p>Badly formed bookmarks or bookmarks with duplicate names will be ignored when the document is saved.</p>
    ///</remarks>
    ///  <param name="bookmarkName">Name of the bookmark.</param>
    ///<returns>The bookmark start node that was just created.</returns>
    function StartBookmark(bookmarkName: string): DNBookmarkStart;
    ///<summary>
    ///  Marks the current position in the document as a bookmark end.
    ///</summary>
    ///<remarks><p>Bookmarks in a document can overlap and span any range. To create a valid bookmark you need to
    ///  call both <see cref="M:Aspose.Words.DocumentBuilder.StartBookmark(System.String)" />
    ///  and <see cref="M:Aspose.Words.DocumentBuilder.EndBookmark(System.String)" />
    ///  with the same <b>bookmarkName</b>
    ///  parameter.</p>
    ///  <p>Badly formed bookmarks or bookmarks with duplicate names will be ignored when the document is saved.</p>
    ///</remarks>
    ///  <param name="bookmarkName">Name of the bookmark.</param>
    ///<returns>The bookmark end node that was just created.</returns>
    function EndBookmark(bookmarkName: string): DNBookmarkEnd;
    ///<summary>
    ///  Marks the current position in the document as a column bookmark start. The position must be in a table cell.
    ///</summary>
    ///<remarks><p>A column bookmark covers one or more columns in a range of rows. To create a valid bookmark you
    ///  need to call both <see cref="M:Aspose.Words.DocumentBuilder.StartColumnBookmark(System.String)" />
    ///  and <see cref="M:Aspose.Words.DocumentBuilder.EndColumnBookmark(System.String)" />
    ///  with the same
    ///<b>bookmarkName</b>
    ///  parameter.</p>
    ///  <p>Badly formed bookmarks or bookmarks with duplicate names will be ignored when the document is saved.</p>
    ///  <p>The actual position of the inserted <see cref="T:Aspose.Words.BookmarkStart" />
    ///  node may differ from the current document
    ///  builder position.</p>
    ///</remarks>
    ///  <param name="bookmarkName">Name of the bookmark.</param>
    ///<returns>The bookmark start node that was just created.</returns>
    function StartColumnBookmark(bookmarkName: string): DNBookmarkStart;
    ///<summary>
    ///  Marks the current position in the document as a column bookmark end. The position must be in a table cell.
    ///</summary>
    ///<remarks><p>A column bookmark covers one or more columns in a range of rows. To create a valid bookmark you
    ///  need to call both <see cref="M:Aspose.Words.DocumentBuilder.StartColumnBookmark(System.String)" />
    ///  and <see cref="M:Aspose.Words.DocumentBuilder.EndColumnBookmark(System.String)" />
    ///  with the same
    ///<b>bookmarkName</b>
    ///  parameter.</p>
    ///  <p>Badly formed bookmarks or bookmarks with duplicate names will be ignored when the document is saved.</p>
    ///  <p>The actual position of the inserted <see cref="T:Aspose.Words.BookmarkEnd" />
    ///  node may differ from the current document
    ///  builder position.</p>
    ///</remarks>
    ///  <param name="bookmarkName">Name of the bookmark.</param>
    ///<returns>The bookmark end node that was just created.</returns>
    function EndColumnBookmark(bookmarkName: string): DNBookmarkEnd;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the <see cref="P:Aspose.Words.DocumentBuilder.Document" />
    ///  object that this object is attached to.
    ///</summary>
    property Document: DNDocument read get_Document write set_Document;
    ///<summary>
    ///  Returns an object that represents current font formatting properties.
    ///</summary>
    ///<remarks><p>Use <b>Font</b>
    ///  to access and modify font formatting properties.</p>
    ///  <p>Specify font formatting before inserting text.</p>
    ///</remarks>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  True if the font is formatted as bold.
    ///</summary>
    property Bold: Boolean read get_Bold write set_Bold;
    ///<summary>
    ///  True if the font is formatted as italic.
    ///</summary>
    property Italic: Boolean read get_Italic write set_Italic;
    ///<summary>
    ///  Gets/sets underline type for the current font.
    ///</summary>
    property Underline: DNUnderline read get_Underline write set_Underline;
    ///<summary>
    ///  Returns an object that represents current paragraph formatting properties.
    ///</summary>
    property ParagraphFormat: DNParagraphFormat read get_ParagraphFormat;
    ///<summary>
    ///  Returns an object that represents current list formatting properties.
    ///</summary>
    property ListFormat: DNListFormat read get_ListFormat;
    ///<summary>
    ///  Returns an object that represents current page setup and section properties.
    ///</summary>
    property PageSetup: DNPageSetup read get_PageSetup;
    ///<summary>
    ///  Returns an object that represents current table row formatting properties.
    ///</summary>
    property RowFormat: DNRowFormat read get_RowFormat;
    ///<summary>
    ///  Returns an object that represents current table cell formatting properties.
    ///</summary>
    property CellFormat: DNCellFormat read get_CellFormat;
    ///<summary>
    ///  Returns true if the cursor is at the beginning of the current paragraph (no text before the cursor).
    ///</summary>
    property IsAtStartOfParagraph: Boolean read get_IsAtStartOfParagraph;
    ///<summary>
    ///  Returns true if the cursor is at the end of the current paragraph.
    ///</summary>
    property IsAtEndOfParagraph: Boolean read get_IsAtEndOfParagraph;
    ///<summary>
    ///  Gets the node that is currently selected in this DocumentBuilder.
    ///</summary>
    ///<remarks><p><b>CurrentNode</b>
    ///  is a cursor of <b>DocumentBuilder</b>
    ///  and points to a <b>Node</b>
    ///  that is a direct child of a <b>Paragraph</b>
    ///  . Any insert operations you perform using
    ///<b>DocumentBuilder</b>
    ///  will insert before the <b>CurrentNode</b>
    ///  .</p>
    ///  <p>When the current paragraph is empty or the cursor is positioned just
    ///  before the end of the paragraph, <b>CurrentNode</b>
    ///  returns null.</p>
    ///<seealso cref="P:Aspose.Words.DocumentBuilder.CurrentParagraph" />
    ///</remarks>
    property CurrentNode: DNNode read get_CurrentNode;
    ///<summary>
    ///  Gets the paragraph that is currently selected in this DocumentBuilder.
    ///</summary>
    ///<remarks><see cref="P:Aspose.Words.DocumentBuilder.CurrentNode" />
    ///</remarks>
    property CurrentParagraph: DNParagraph read get_CurrentParagraph;
    ///<summary>
    ///  Gets the story that is currently selected in this DocumentBuilder.
    ///</summary>
    property CurrentStory: DNStory read get_CurrentStory;
    ///<summary>
    ///  Gets the section that is currently selected in this DocumentBuilder.
    ///</summary>
    property CurrentSection: DNSection read get_CurrentSection;
  end;

  TDNDocumentBuilder = class(TDNGenericImport<DNDocumentBuilderClass, DNDocumentBuilder>) end;

  //-------------namespace: Aspose.Words----------------
  DNDocumentVisitorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{323F9143-0670-516D-9CDD-F8139610CBDF}']
  end;

  ///<summary>
  ///  Base class for custom document visitors.
  ///</summary>
  ///<remarks><p>With <b>DocumentVisitor</b>
  ///  you can define and execute custom operations
  ///  that require enumeration over the document tree.</p>
  ///  <p>For example, Aspose.Words uses <b>DocumentVisitor</b>
  ///  internally for saving <b>Document</b>
  ///  in various formats and for other operations like finding fields or bookmarks over
  ///  a fragment of a document.</p>
  ///  <p>To use <b>DocumentVisitor</b>
  ///  :</p>
  ///<list type="number"><item>Create a class derived from <b>DocumentVisitor</b>
  ///  .</item>
  ///<item>Override and provide implementations for some or all of the VisitXXX methods
  ///  to perform some custom operations.</item>
  ///<item>Call <see cref="M:Aspose.Words.Node.Accept(Aspose.Words.DocumentVisitor)">Node.Accept</see> on the <b>Node</b>
  ///  that
  ///  you want to start the enumeration from.</item>
  ///</list>
  ///  <p><b>DocumentVisitor</b>
  ///  provides default implementations for all of the VisitXXX methods
  ///  to make it easier to create new document visitors as only the methods required for the particular
  ///  visitor need to be overridden. It is not necessary to override all of the visitor methods.</p>
  ///  <p>For more information see the Visitor design pattern.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.DocumentVisitor')]
  DNDocumentVisitor = interface(DDN.mscorlib.DNObject)
  ['{D85A796E-40BB-3E35-8470-5E1813082A83}']
  { methods } 

    ///<summary>
    ///  Called when enumeration of the document has started.
    ///</summary>
    ///  <param name="doc">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitDocumentStart(doc: DNDocument): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of the document has finished.
    ///</summary>
    ///  <param name="doc">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitDocumentEnd(doc: DNDocument): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of a section has started.
    ///</summary>
    ///  <param name="section">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitSectionStart(section: DNSection): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of a section has ended.
    ///</summary>
    ///  <param name="section">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitSectionEnd(section: DNSection): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of the main text story in a section has started.
    ///</summary>
    ///  <param name="body">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitBodyStart(body: DNBody): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of the main text story in a section has ended.
    ///</summary>
    ///  <param name="body">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitBodyEnd(body: DNBody): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of a header or footer in a section has started.
    ///</summary>
    ///  <param name="headerFooter">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitHeaderFooterStart(headerFooter: DNHeaderFooter): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of a header or footer in a section has ended.
    ///</summary>
    ///  <param name="headerFooter">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitHeaderFooterEnd(headerFooter: DNHeaderFooter): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of a paragraph has started.
    ///</summary>
    ///  <param name="paragraph">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitParagraphStart(paragraph: DNParagraph): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of a paragraph has ended.
    ///</summary>
    ///  <param name="paragraph">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitParagraphEnd(paragraph: DNParagraph): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of a table has started.
    ///</summary>
    ///  <param name="table">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitTableStart(table: DNTable): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of a table has ended.
    ///</summary>
    ///  <param name="table">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitTableEnd(table: DNTable): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of a table row has started.
    ///</summary>
    ///  <param name="row">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitRowStart(row: DNRow): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of a table row has ended.
    ///</summary>
    ///  <param name="row">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitRowEnd(row: DNRow): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of a table cell has started.
    ///</summary>
    ///  <param name="cell">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitCellStart(cell: DNCell): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of a table cell has ended.
    ///</summary>
    ///  <param name="cell">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitCellEnd(cell: DNCell): DNVisitorAction;
    ///<summary>
    ///  Called when a run of text in the is encountered.
    ///</summary>
    ///  <param name="run">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitRun(run: DNRun): DNVisitorAction;
    ///<summary>
    ///  Called when a field starts in the document.
    ///</summary>
    ///<remarks><p>A field in a Word Word document consists of a field code and field value.</p>
    ///  <p>For example, a field that displays a page number can be represented as follows:</p>
    ///  <p>[FieldStart]PAGE[FieldSeparator]98[FieldEnd]</p>
    ///  <p>The field separator separates field code from field value in the document. Note that some
    ///  fields have only field code and do not have field separator and field value.</p>
    ///  <p>Fields can be nested.</p>
    ///</remarks>
    ///  <param name="fieldStart">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitFieldStart(fieldStart: DNFieldStart): DNVisitorAction;
    ///<summary>
    ///  Called when a field separator is encountered in the document.
    ///</summary>
    ///<remarks><p>The field separator separates field code from field value in the document. Note that some
    ///  fields have only field code and do not have field separator and field value.</p>
    ///  <p>For more info see <see cref="M:Aspose.Words.DocumentVisitor.VisitFieldStart(Aspose.Words.Fields.FieldStart)" />
    ///</p>
    ///</remarks>
    ///  <param name="fieldSeparator">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitFieldSeparator(fieldSeparator: DNFieldSeparator): DNVisitorAction;
    ///<summary>
    ///  Called when a field ends in the document.
    ///</summary>
    ///<remarks><p>For more info see <see cref="M:Aspose.Words.DocumentVisitor.VisitFieldStart(Aspose.Words.Fields.FieldStart)" />
    ///</p>
    ///</remarks>
    ///  <param name="fieldEnd">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitFieldEnd(fieldEnd: DNFieldEnd): DNVisitorAction;
    ///<summary>
    ///  Called when a form field is encountered in the document.
    ///</summary>
    ///  <param name="formField">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitFormField(formField: DNFormField): DNVisitorAction;
    ///<summary>
    ///  Called when a start of a bookmark is encountered in the document.
    ///</summary>
    ///  <param name="bookmarkStart">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitBookmarkStart(bookmarkStart: DNBookmarkStart): DNVisitorAction;
    ///<summary>
    ///  Called when an end of a bookmark is encountered in the document.
    ///</summary>
    ///  <param name="bookmarkEnd">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitBookmarkEnd(bookmarkEnd: DNBookmarkEnd): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of a footnote or endnote text has started.
    ///</summary>
    ///  <param name="footnote">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitFootnoteStart(footnote: DNFootnote): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of a footnote or endnote text has ended.
    ///</summary>
    ///  <param name="footnote">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitFootnoteEnd(footnote: DNFootnote): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of a comment text has started.
    ///</summary>
    ///  <param name="comment">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitCommentStart(comment: DNComment): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of a comment text has ended.
    ///</summary>
    ///  <param name="comment">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitCommentEnd(comment: DNComment): DNVisitorAction;
    ///<summary>
    ///  Called when a start of an editable range is encountered in the document.
    ///</summary>
    ///  <param name="editableRangeStart">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitEditableRangeStart(editableRangeStart: DNEditableRangeStart): DNVisitorAction;
    ///<summary>
    ///  Called when an end of an editable range is encountered in the document.
    ///</summary>
    ///  <param name="editableRangeEnd">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitEditableRangeEnd(editableRangeEnd: DNEditableRangeEnd): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of a shape has started.
    ///</summary>
    ///  <param name="shape">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitShapeStart(shape: DNShape): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of a shape has ended.
    ///</summary>
    ///  <param name="shape">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitShapeEnd(shape: DNShape): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of a group shape has started.
    ///</summary>
    ///  <param name="groupShape">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitGroupShapeStart(groupShape: DNGroupShape): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of a group shape has ended.
    ///</summary>
    ///  <param name="groupShape">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitGroupShapeEnd(groupShape: DNGroupShape): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of a Office Math object has started.
    ///</summary>
    ///  <param name="officeMath">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitOfficeMathStart(officeMath: DNOfficeMath): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of a Office Math object has ended.
    ///</summary>
    ///  <param name="officeMath">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitOfficeMathEnd(officeMath: DNOfficeMath): DNVisitorAction;
    ///<summary>
    ///  Called when a <see cref="T:Aspose.Words.SpecialChar" />
    ///  node is encountered in the document.
    ///</summary>
    ///  <param name="specialChar">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    ///<remarks>
    ///  This method is not be called for generic control characters (see <see cref="T:Aspose.Words.ControlChar" />
    ///  ) that can be present in the document.
    ///</remarks>
    function VisitSpecialChar(specialChar: DNSpecialChar): DNVisitorAction;
    ///<summary>
    ///  Called when a <see cref="T:Aspose.Words.AbsolutePositionTab" />
    ///  node is encountered in the document.
    ///</summary>
    ///  <param name="tab">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitAbsolutePositionTab(tab: DNAbsolutePositionTab): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of a smart tag has started.
    ///</summary>
    ///  <param name="smartTag">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitSmartTagStart(smartTag: DNSmartTag): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of a smart tag has ended.
    ///</summary>
    ///  <param name="smartTag">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitSmartTagEnd(smartTag: DNSmartTag): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of a structured document tag has started.
    ///</summary>
    ///  <param name="sdt">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitStructuredDocumentTagStart(sdt: DNStructuredDocumentTag): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of a structured document tag has ended.
    ///</summary>
    ///  <param name="sdt">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitStructuredDocumentTagEnd(sdt: DNStructuredDocumentTag): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of a glossary document has started.
    ///</summary>
    ///<remarks><para>
    ///  Note: A glossary document node and its children are not visited when you execute a
    ///  Visitor over a <see cref="T:Aspose.Words.Document" />
    ///  . If you want to execute a Visitor over a
    ///  glossary document, you need to call <see cref="M:Aspose.Words.BuildingBlocks.GlossaryDocument.Accept(Aspose.Words.DocumentVisitor)" />
    ///  .
    ///</para></remarks>
    ///  <param name="glossary">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitGlossaryDocumentStart(glossary: DNGlossaryDocument): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of a glossary document has ended.
    ///</summary>
    ///<remarks><para>
    ///  Note: A glossary document node and its children are not visited when you execute a
    ///  Visitor over a <see cref="T:Aspose.Words.Document" />
    ///  . If you want to execute a Visitor over a
    ///  glossary document, you need to call <see cref="M:Aspose.Words.BuildingBlocks.GlossaryDocument.Accept(Aspose.Words.DocumentVisitor)" />
    ///  .
    ///</para></remarks>
    ///  <param name="glossary">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitGlossaryDocumentEnd(glossary: DNGlossaryDocument): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of a building block has started.
    ///</summary>
    ///<remarks><para>
    ///  Note: A building block node and its children are not visited when you execute a
    ///  Visitor over a <see cref="T:Aspose.Words.Document" />
    ///  . If you want to execute a Visitor over a
    ///  building block, you need to execute the visitor over <see cref="T:Aspose.Words.BuildingBlocks.GlossaryDocument" />
    ///  or
    ///  call <see cref="M:Aspose.Words.BuildingBlocks.BuildingBlock.Accept(Aspose.Words.DocumentVisitor)" />
    ///  .
    ///</para></remarks>
    ///  <param name="block">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitBuildingBlockStart(block: DNBuildingBlock): DNVisitorAction;
    ///<summary>
    ///  Called when enumeration of a building block has ended.
    ///</summary>
    ///<remarks><para>
    ///  Note: A building block node and its children are not visited when you execute a
    ///  Visitor over a <see cref="T:Aspose.Words.Document" />
    ///  . If you want to execute a Visitor over a
    ///  building block, you need to execute the visitor over <see cref="T:Aspose.Words.BuildingBlocks.GlossaryDocument" />
    ///  or
    ///  call <see cref="M:Aspose.Words.BuildingBlocks.BuildingBlock.Accept(Aspose.Words.DocumentVisitor)" />
    ///  .
    ///</para></remarks>
    ///  <param name="block">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitBuildingBlockEnd(block: DNBuildingBlock): DNVisitorAction;
    ///<summary>
    ///  Called when the start of a commented range of text is encountered.
    ///</summary>
    ///  <param name="commentRangeStart">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitCommentRangeStart(commentRangeStart: DNCommentRangeStart): DNVisitorAction;
    ///<summary>
    ///  Called when the end of a commented range of text is encountered.
    ///</summary>
    ///  <param name="commentRangeEnd">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitCommentRangeEnd(commentRangeEnd: DNCommentRangeEnd): DNVisitorAction;
    ///<summary>
    ///  Called when a subDocument is encountered.
    ///</summary>
    ///  <param name="subDocument">The object that is being visited.</param>
    ///<returns>A <see cref="T:Aspose.Words.VisitorAction" />
    ///  value that specifies how to continue the enumeration.</returns>
    function VisitSubDocument(subDocument: DNSubDocument): DNVisitorAction;
    function VisitStructuredDocumentTagRangeStart(sdtRangeStart: DNStructuredDocumentTagRangeStart): DNVisitorAction;
    function VisitStructuredDocumentTagRangeEnd(sdtRangeEnd: DNStructuredDocumentTagRangeEnd): DNVisitorAction;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDocumentVisitor = class(TDNGenericImport<DNDocumentVisitorClass, DNDocumentVisitor>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNAxisBoundClass = interface(DDN.mscorlib.DNObjectClass)
  ['{28738D18-BB5E-5EEE-91FE-8B04B7FF9062}']
  { constructors } 

    ///<summary>
    ///  Creates a new instance indicating that axis bound should be determined automatically by a word-processing
    ///  application.
    ///</summary>
    {class} function init: DNAxisBound; overload;
    ///<summary>
    ///  Creates an axis bound represented as a number.
    ///</summary>
    {class} function init(value: Double): DNAxisBound; overload;
    ///<summary>
    ///  Creates an axis bound represented as datetime value.
    ///</summary>
    {class} function init(datetime: DDN.mscorlib.DNDateTime): DNAxisBound; overload;

  end;

  ///<summary>
  ///  Represents minimum or maximum bound of axis values.
  ///</summary>
  ///<remarks><para>Bound can be specified as a numeric, datetime or a special "auto" value.</para><para>The instances of this class are immutable.</para><seealso cref="P:Aspose.Words.Drawing.Charts.AxisScaling.Minimum" />
  ///<seealso cref="P:Aspose.Words.Drawing.Charts.AxisScaling.Maximum" />
  ///</remarks>
  [DNTypeName('Aspose.Words.Drawing.Charts.AxisBound')]
  DNAxisBound = interface(DDN.mscorlib.DNObject)
  ['{EAB4C2EF-3411-3272-8A99-4813A13B76E6}']
  { getters & setters } 

    function get_IsAuto: Boolean;
    function get_Value: Double;
    function get_ValueAsDate: DDN.mscorlib.DNDateTime;

  { methods } 

    ///<summary>
    ///  Determines whether the specified object is equal in value to the current object.
    ///</summary>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Serves as a hash function for this type.
    ///</summary>
    function GetHashCode: Int32;
    ///<summary>
    ///  Returns a user-friendly string that displays the value of this object.
    ///</summary>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Returns a flag indicating that axis bound should be determined automatically.
    ///</summary>
    property IsAuto: Boolean read get_IsAuto;
    ///<summary>
    ///  Returns numeric value of axis bound.
    ///</summary>
    property Value: Double read get_Value;
    ///<summary>
    ///  Returns value of axis bound represented as datetime.
    ///</summary>
    property ValueAsDate: DDN.mscorlib.DNDateTime read get_ValueAsDate;
  end;

  TDNAxisBound = class(TDNGenericImport<DNAxisBoundClass, DNAxisBound>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNAxisDisplayUnitClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F194AF7F-CF69-5F09-B736-1C6BEB4E80DE}']
  { constructors } 

    {class} function init: DNAxisDisplayUnit;

  end;

  ///<summary>
  ///  Provides access to the scaling options of the display units for the value axis.
  ///</summary>
  ///<dev>
  ///  Corresponds to the dispUnits element (5.7.2.45, 21.2.2.45).
  ///</dev>
  [DNTypeName('Aspose.Words.Drawing.Charts.AxisDisplayUnit')]
  DNAxisDisplayUnit = interface(DDN.mscorlib.DNObject)
  ['{EA7634FD-7808-3D58-831F-54635B759846}']
  { getters & setters } 

    function get_Unit: DNAxisBuiltInUnit;
    procedure set_Unit(value: DNAxisBuiltInUnit);
    function get_CustomUnit: Double;
    procedure set_CustomUnit(value: Double);
    function get_Document: DNDocumentBase;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the scaling value of the display units as one of the predefined values.
    ///</summary>
    ///<remarks>
    ///  Default value is <see cref="F:Aspose.Words.Drawing.Charts.AxisBuiltInUnit.None" />
    ///  . The <see cref="F:Aspose.Words.Drawing.Charts.AxisBuiltInUnit.Custom" />
    ///  and
    ///<see cref="F:Aspose.Words.Drawing.Charts.AxisBuiltInUnit.Percentage" />
    ///  values are not available in some chart types; see
    ///<see cref="T:Aspose.Words.Drawing.Charts.AxisBuiltInUnit" />
    ///  for more information.
    ///</remarks>
    property &Unit: DNAxisBuiltInUnit read get_Unit write set_Unit;
    ///<summary>
    ///  Gets or sets a user-defined divisor to scale display units on the value axis.
    ///</summary>
    ///<remarks><para>The property is not supported by MS Office 2016 new charts. Default value is 1.</para><para>Setting this property sets the <see cref="P:Aspose.Words.Drawing.Charts.AxisDisplayUnit.Unit" />
    ///  property to
    ///<see cref="F:Aspose.Words.Drawing.Charts.AxisBuiltInUnit.Custom" />
    ///  .</para></remarks>
    property CustomUnit: Double read get_CustomUnit write set_CustomUnit;
    ///<summary>
    ///  Returns the Document the title holder belongs.
    ///</summary>
    property Document: DNDocumentBase read get_Document;
  end;

  TDNAxisDisplayUnit = class(TDNGenericImport<DNAxisDisplayUnitClass, DNAxisDisplayUnit>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNAxisScalingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5FC90868-C377-52A2-B458-F6BF5DCCDFF9}']
  { constructors } 

    {class} function init: DNAxisScaling;

  end;

  ///<summary>
  ///  Represents the scaling options of the axis.
  ///</summary>
  [DNTypeName('Aspose.Words.Drawing.Charts.AxisScaling')]
  DNAxisScaling = interface(DDN.mscorlib.DNObject)
  ['{836D6C82-28F2-3743-9A14-5E623546A222}']
  { getters & setters } 

    function get_Type: DNAxisScaleType;
    procedure set_Type(value: DNAxisScaleType);
    function get_LogBase: Double;
    procedure set_LogBase(value: Double);
    function get_Minimum: DNAxisBound;
    procedure set_Minimum(value: DNAxisBound);
    function get_Maximum: DNAxisBound;
    procedure set_Maximum(value: DNAxisBound);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets scaling type of the axis.
    ///</summary>
    ///<remarks>
    ///  The <see cref="F:Aspose.Words.Drawing.Charts.AxisScaleType.Linear" />
    ///  value is the only that is allowed in MS Office 2016 new charts.
    ///</remarks>
    property &Type: DNAxisScaleType read get_Type write set_Type;
    ///<summary>
    ///  Gets or sets the logarithmic base for a logarithmic axis.
    ///</summary>
    ///<remarks><para>The property is not supported by MS Office 2016 new charts.</para><para>Valid range of a floating point value is greater than or equal to 2 and less than or
    ///  equal to 1000. The property has effect only if <see cref="P:Aspose.Words.Drawing.Charts.AxisScaling.Type" />
    ///  is set to
    ///<see cref="F:Aspose.Words.Drawing.Charts.AxisScaleType.Logarithmic" />
    ///  .</para><para>Setting this property sets the <see cref="P:Aspose.Words.Drawing.Charts.AxisScaling.Type" />
    ///  property to <see cref="F:Aspose.Words.Drawing.Charts.AxisScaleType.Logarithmic" />
    ///  .
    ///</para></remarks>
    property LogBase: Double read get_LogBase write set_LogBase;
    ///<summary>
    ///  Gets or sets minimum value of the axis.
    ///</summary>
    ///<remarks>
    ///  The default value is "auto".
    ///</remarks>
    property Minimum: DNAxisBound read get_Minimum write set_Minimum;
    ///<summary>
    ///  Gets or sets the maximum value of the axis.
    ///</summary>
    ///<remarks>
    ///  The default value is "auto".
    ///</remarks>
    property Maximum: DNAxisBound read get_Maximum write set_Maximum;
  end;

  TDNAxisScaling = class(TDNGenericImport<DNAxisScalingClass, DNAxisScaling>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNChartClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8C5ED8B4-A909-52CB-AAB1-DE13A16CB6A2}']
  end;

  ///<summary>
  ///  Provides access to the chart shape properties.
  ///</summary>
  [DNTypeName('Aspose.Words.Drawing.Charts.Chart')]
  DNChart = interface(DDN.mscorlib.DNObject)
  ['{6DC43F75-51E2-37E8-B539-5ACB15C8C080}']
  { getters & setters } 

    function get_Series: DNChartSeriesCollection;
    function get_Title: DNChartTitle;
    function get_Legend: DNChartLegend;
    function get_AxisX: DNChartAxis;
    function get_AxisY: DNChartAxis;
    function get_AxisZ: DNChartAxis;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Provides access to series collection.
    ///</summary>
    property Series: DNChartSeriesCollection read get_Series;
    ///<summary>
    ///  Provides access to the chart title properties.
    ///</summary>
    property Title: DNChartTitle read get_Title;
    ///<summary>
    ///  Provides access to the chart legend properties.
    ///</summary>
    property Legend: DNChartLegend read get_Legend;
    ///<summary>
    ///  Provides access to properties of the X axis of the chart.
    ///</summary>
    property AxisX: DNChartAxis read get_AxisX;
    ///<summary>
    ///  Provides access to properties of the Y axis of the chart.
    ///</summary>
    property AxisY: DNChartAxis read get_AxisY;
    ///<summary>
    ///  Provides access to properties of the Z axis of the chart.
    ///</summary>
    property AxisZ: DNChartAxis read get_AxisZ;
  end;

  TDNChart = class(TDNGenericImport<DNChartClass, DNChart>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNChartAxisClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1685D859-DA02-53E3-BB04-B256B973F0D8}']
  end;

  ///<summary>
  ///  Represents the axis options of the chart.
  ///</summary>
  [DNTypeName('Aspose.Words.Drawing.Charts.ChartAxis')]
  DNChartAxis = interface(DDN.mscorlib.DNObject)
  ['{2445888D-0C29-3754-9E90-2F4E3EA9EC51}']
  { getters & setters } 

    function get_Type: DNChartAxisType;
    function get_CategoryType: DNAxisCategoryType;
    procedure set_CategoryType(value: DNAxisCategoryType);
    function get_Crosses: DNAxisCrosses;
    procedure set_Crosses(value: DNAxisCrosses);
    function get_CrossesAt: Double;
    procedure set_CrossesAt(value: Double);
    function get_ReverseOrder: Boolean;
    procedure set_ReverseOrder(value: Boolean);
    function get_MajorTickMark: DNAxisTickMark;
    procedure set_MajorTickMark(value: DNAxisTickMark);
    function get_MinorTickMark: DNAxisTickMark;
    procedure set_MinorTickMark(value: DNAxisTickMark);
    function get_TickLabelPosition: DNAxisTickLabelPosition;
    procedure set_TickLabelPosition(value: DNAxisTickLabelPosition);
    function get_MajorUnit: Double;
    procedure set_MajorUnit(value: Double);
    function get_MajorUnitIsAuto: Boolean;
    procedure set_MajorUnitIsAuto(value: Boolean);
    function get_MajorUnitScale: DNAxisTimeUnit;
    procedure set_MajorUnitScale(value: DNAxisTimeUnit);
    function get_MinorUnit: Double;
    procedure set_MinorUnit(value: Double);
    function get_MinorUnitIsAuto: Boolean;
    procedure set_MinorUnitIsAuto(value: Boolean);
    function get_MinorUnitScale: DNAxisTimeUnit;
    procedure set_MinorUnitScale(value: DNAxisTimeUnit);
    function get_BaseTimeUnit: DNAxisTimeUnit;
    procedure set_BaseTimeUnit(value: DNAxisTimeUnit);
    function get_NumberFormat: DNChartNumberFormat;
    function get_TickLabelOffset: Int32;
    procedure set_TickLabelOffset(value: Int32);
    function get_DisplayUnit: DNAxisDisplayUnit;
    function get_AxisBetweenCategories: Boolean;
    procedure set_AxisBetweenCategories(value: Boolean);
    function get_Scaling: DNAxisScaling;
    function get_TickLabelSpacing: Int32;
    procedure set_TickLabelSpacing(value: Int32);
    function get_TickLabelSpacingIsAuto: Boolean;
    procedure set_TickLabelSpacingIsAuto(value: Boolean);
    function get_TickLabelAlignment: DNParagraphAlignment;
    procedure set_TickLabelAlignment(value: DNParagraphAlignment);
    function get_TickMarkSpacing: Int32;
    procedure set_TickMarkSpacing(value: Int32);
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_Document: DNDocumentBase;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns type of the axis.
    ///</summary>
    property &Type: DNChartAxisType read get_Type;
    ///<summary>
    ///  Gets or sets type of the category axis.
    ///</summary>
    ///<remarks>
    ///  Only text categories (<see cref="F:Aspose.Words.Drawing.Charts.AxisCategoryType.Category" />
    ///  ) are allowed in MS Office 2016 new charts.
    ///</remarks>
    ///<dev>
    ///  The property is internally represented as two bool attributes since the <see cref="T:Aspose.Words.Drawing.Charts.AxisCategoryType" />
    ///  type
    ///  provides no enough information that is needed to store the property in document file.
    ///</dev>
    property CategoryType: DNAxisCategoryType read get_CategoryType write set_CategoryType;
    ///<summary>
    ///  Specifies how this axis crosses the perpendicular axis.
    ///</summary>
    ///<remarks><para>Default value is <see cref="F:Aspose.Words.Drawing.Charts.AxisCrosses.Automatic" />
    ///  .</para><para>The property is not supported by MS Office 2016 new charts.</para></remarks>
    property Crosses: DNAxisCrosses read get_Crosses write set_Crosses;
    ///<summary>
    ///  Specifies where on the perpendicular axis the axis crosses.
    ///</summary>
    ///<remarks><para>The property has effect only if <see cref="P:Aspose.Words.Drawing.Charts.ChartAxis.Crosses" />
    ///  are set to <see cref="F:Aspose.Words.Drawing.Charts.AxisCrosses.Custom" />
    ///  .
    ///  It is not supported by MS Office 2016 new charts.</para><para>The units are determined by the type of axis. When the axis is a value axis, the value of the property
    ///  is a decimal number on the value axis. When the axis is a time category axis, the value is defined as
    ///  an integer number of days relative to the base date (30/12/1899). For a text category axis, the value is
    ///  an integer category number, starting with 1 as the first category.</para></remarks>
    property CrossesAt: Double read get_CrossesAt write set_CrossesAt;
    ///<summary>
    ///  Returns or sets a flag indicating whether values of axis should be displayed in reverse order, i.e.
    ///  from max to min.
    ///</summary>
    ///<remarks>
    ///  The property is not supported by MS Office 2016 new charts. Default value is <b>false</b>
    ///  .
    ///</remarks>
    property ReverseOrder: Boolean read get_ReverseOrder write set_ReverseOrder;
    ///<summary>
    ///  Returns or sets the major tick marks.
    ///</summary>
    property MajorTickMark: DNAxisTickMark read get_MajorTickMark write set_MajorTickMark;
    ///<summary>
    ///  Returns or sets the minor tick marks for the axis.
    ///</summary>
    property MinorTickMark: DNAxisTickMark read get_MinorTickMark write set_MinorTickMark;
    ///<summary>
    ///  Returns or sets the position of the tick labels on the axis.
    ///</summary>
    ///<remarks>
    ///  The property is not supported by MS Office 2016 new charts.
    ///</remarks>
    property TickLabelPosition: DNAxisTickLabelPosition read get_TickLabelPosition write set_TickLabelPosition;
    ///<summary>
    ///  Returns or sets the distance between major tick marks.
    ///</summary>
    ///<remarks><para>Valid range of a value is greater than zero. The property has effect for time category and
    ///  value axes.</para><para>Setting this property sets the <see cref="P:Aspose.Words.Drawing.Charts.ChartAxis.MajorUnitIsAuto" />
    ///  property to <b>false</b>
    ///  .</para></remarks>
    property MajorUnit: Double read get_MajorUnit write set_MajorUnit;
    ///<summary>
    ///  Gets or sets a flag indicating whether default distance between major tick marks shall be used.
    ///</summary>
    ///<remarks>
    ///  The property has effect for time category and value axes.
    ///</remarks>
    property MajorUnitIsAuto: Boolean read get_MajorUnitIsAuto write set_MajorUnitIsAuto;
    ///<summary>
    ///  Returns or sets the scale value for major tick marks on the time category axis.
    ///</summary>
    ///<remarks>
    ///  The property has effect only for time category axes.
    ///</remarks>
    property MajorUnitScale: DNAxisTimeUnit read get_MajorUnitScale write set_MajorUnitScale;
    ///<summary>
    ///  Returns or sets the distance between minor tick marks.
    ///</summary>
    ///<remarks><para>Valid range of a value is greater than zero. The property has effect for time category and
    ///  value axes.</para><para>Setting this property sets the <see cref="P:Aspose.Words.Drawing.Charts.ChartAxis.MinorUnitIsAuto" />
    ///  property to <b>false</b>
    ///  .</para></remarks>
    property MinorUnit: Double read get_MinorUnit write set_MinorUnit;
    ///<summary>
    ///  Gets or sets a flag indicating whether default distance between minor tick marks shall be used.
    ///</summary>
    ///<remarks>
    ///  The property has effect for time category and value axes.
    ///</remarks>
    property MinorUnitIsAuto: Boolean read get_MinorUnitIsAuto write set_MinorUnitIsAuto;
    ///<summary>
    ///  Returns or sets the scale value for minor tick marks on the time category axis.
    ///</summary>
    ///<remarks>
    ///  The property has effect only for time category axes.
    ///</remarks>
    property MinorUnitScale: DNAxisTimeUnit read get_MinorUnitScale write set_MinorUnitScale;
    ///<summary>
    ///  Returns or sets the smallest time unit that is represented on the time category axis.
    ///</summary>
    ///<remarks>
    ///  The property has effect only for time category axes.
    ///</remarks>
    property BaseTimeUnit: DNAxisTimeUnit read get_BaseTimeUnit write set_BaseTimeUnit;
    ///<summary>
    ///  Returns a <see cref="T:Aspose.Words.Drawing.Charts.ChartNumberFormat" />
    ///  object that allows defining number formats for the axis.
    ///</summary>
    property NumberFormat: DNChartNumberFormat read get_NumberFormat;
    ///<summary>
    ///  Gets or sets the distance of labels from the axis.
    ///</summary>
    ///<remarks><para>The property represents a percentage of the default label offset.</para><para>Valid range is from 0 to 1000 percent inclusive. Default value is 100%.</para><para>The property has effect only for category axes. It is not supported by MS Office 2016 new charts.</para></remarks>
    property TickLabelOffset: Int32 read get_TickLabelOffset write set_TickLabelOffset;
    ///<summary>
    ///  Specifies the scaling value of the display units for the value axis.
    ///</summary>
    ///<remarks>
    ///  The property has effect only for value axes.
    ///</remarks>
    property DisplayUnit: DNAxisDisplayUnit read get_DisplayUnit;
    ///<summary>
    ///  Gets or sets a flag indicating whether the value axis crosses the category axis between categories.
    ///</summary>
    ///<remarks>
    ///  The property has effect only for value axes. It is not supported by MS Office 2016 new charts.
    ///</remarks>
    property AxisBetweenCategories: Boolean read get_AxisBetweenCategories write set_AxisBetweenCategories;
    ///<summary>
    ///  Provides access to the scaling options of the axis.
    ///</summary>
    property Scaling: DNAxisScaling read get_Scaling;
    ///<summary>
    ///  Gets or sets the interval, at which tick labels are drawn.
    ///</summary>
    ///<remarks><para>The property has effect for text category and series axes. It is not supported by MS Office 2016
    ///  new charts. Valid range of a value is greater than or equal to 1.</para><para>Setting this property sets the <see cref="P:Aspose.Words.Drawing.Charts.ChartAxis.TickLabelSpacingIsAuto" />
    ///  property to <b>false</b>
    ///  .</para></remarks>
    ///<dev>
    ///  The ISO standard states that this element specifies how many tick labels to skip between label that is drawn.
    ///  In MS Office, this element specifies the interval at which tick labels are drawn.
    ///</dev>
    property TickLabelSpacing: Int32 read get_TickLabelSpacing write set_TickLabelSpacing;
    ///<summary>
    ///  Gets or sets a flag indicating whether automatic interval of drawing tick labels shall be used.
    ///</summary>
    ///<remarks><para>Default value is <b>true</b>
    ///  .</para><para>The property has effect for text category and series axes. It is not supported by MS Office 2016
    ///  new charts.</para></remarks>
    property TickLabelSpacingIsAuto: Boolean read get_TickLabelSpacingIsAuto write set_TickLabelSpacingIsAuto;
    ///<summary>
    ///  Gets or sets text alignment of axis tick labels.
    ///</summary>
    ///<remarks><para>This property has effect only for multi-line labels.</para><para>Default value is <see cref="F:Aspose.Words.ParagraphAlignment.Center" />
    ///  .</para>.
    ///</remarks>
    property TickLabelAlignment: DNParagraphAlignment read get_TickLabelAlignment write set_TickLabelAlignment;
    ///<summary>
    ///  Gets or sets the interval, at which tick marks are drawn.
    ///</summary>
    ///<remarks><para>The property has effect for text category and series axes. It is not supported by MS Office 2016
    ///  new charts.</para><para>Valid range of a value is greater than or equal to 1.</para></remarks>
    ///<dev>
    ///  The ISO standard states that this element specifies how many tick marks shall be skipped before the next
    ///  one shall be drawn.
    ///  In MS Office, this element specifies the interval at which tick marks are drawn.
    ///</dev>
    property TickMarkSpacing: Int32 read get_TickMarkSpacing write set_TickMarkSpacing;
    ///<summary>
    ///  Gets or sets a flag indicating whether this axis is hidden or not.
    ///</summary>
    ///<remarks>
    ///  Default value is <b>false</b>
    ///  .
    ///</remarks>
    ///<dev>
    ///  Corresponds to the 21.2.2.40 delete element [ISO/IEC 29500] and to the hidden attribute of the 2.24.3.3
    ///  CT_Axis complex type [MS-ODRAWXML].
    ///</dev>
    property Hidden: Boolean read get_Hidden write set_Hidden;
    ///<summary>
    ///  Returns the Document the title holder belongs.
    ///</summary>
    property Document: DNDocumentBase read get_Document;
  end;

  TDNChartAxis = class(TDNGenericImport<DNChartAxisClass, DNChartAxis>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNChartDataLabelClass = interface(DDN.mscorlib.DNObjectClass)
  ['{030A9074-15A0-5B06-BB6A-6CF3772B1C08}']
  end;

  ///<summary>
  ///  Represents data label on a chart point or trendline.
  ///</summary>
  ///<remarks>
  ///  On a series, the <see cref="T:Aspose.Words.Drawing.Charts.ChartDataLabel" />
  ///  object is a member of the <see cref="T:Aspose.Words.Drawing.Charts.ChartDataLabelCollection" />
  ///  .
  ///  The <see cref="T:Aspose.Words.Drawing.Charts.ChartDataLabelCollection" />
  ///  contains a <see cref="T:Aspose.Words.Drawing.Charts.ChartDataLabel" />
  ///  object for each point.
  ///</remarks>
  [DNTypeName('Aspose.Words.Drawing.Charts.ChartDataLabel')]
  DNChartDataLabel = interface(DDN.mscorlib.DNObject)
  ['{F0D579EC-6759-3439-BEB6-D262B8BBE192}']
  { getters & setters } 

    function get_Index: Int32;
    function get_ShowCategoryName: Boolean;
    procedure set_ShowCategoryName(value: Boolean);
    function get_ShowBubbleSize: Boolean;
    procedure set_ShowBubbleSize(value: Boolean);
    function get_ShowLegendKey: Boolean;
    procedure set_ShowLegendKey(value: Boolean);
    function get_ShowPercentage: Boolean;
    procedure set_ShowPercentage(value: Boolean);
    function get_ShowSeriesName: Boolean;
    procedure set_ShowSeriesName(value: Boolean);
    function get_ShowValue: Boolean;
    procedure set_ShowValue(value: Boolean);
    function get_ShowLeaderLines: Boolean;
    procedure set_ShowLeaderLines(value: Boolean);
    function get_ShowDataLabelsRange: Boolean;
    procedure set_ShowDataLabelsRange(value: Boolean);
    function get_Separator: string;
    procedure set_Separator(value: string);
    function get_IsVisible: Boolean;
    function get_NumberFormat: DNChartNumberFormat;
    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);

  { methods } 

    ///<summary>
    ///  Clears format of this data label. The properties are set to the default values defined in the parent data
    ///  label collection.
    ///</summary>
    procedure ClearFormat;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the index of the containing element.
    ///  This index shall determine which of the parent's children collection this element applies to.
    ///  Default value is 0.
    ///</summary>
    property Index: Int32 read get_Index;
    ///<summary>
    ///  Allows to specify if category name is to be displayed for the data labels on a chart.
    ///  Default value is false.
    ///</summary>
    property ShowCategoryName: Boolean read get_ShowCategoryName write set_ShowCategoryName;
    ///<summary>
    ///  Allows to specify if bubble size is to be displayed for the data labels on a chart.
    ///  Applies only to Bubble charts.
    ///  Default value is false.
    ///</summary>
    property ShowBubbleSize: Boolean read get_ShowBubbleSize write set_ShowBubbleSize;
    ///<summary>
    ///  Allows to specify if legend key is to be displayed for the data labels on a chart.
    ///  Default value is false.
    ///</summary>
    property ShowLegendKey: Boolean read get_ShowLegendKey write set_ShowLegendKey;
    ///<summary>
    ///  Allows to specify if percentage value is to be displayed for the data labels on a chart.
    ///  Default value is false.
    ///</summary>
    property ShowPercentage: Boolean read get_ShowPercentage write set_ShowPercentage;
    ///<summary>
    ///  Returns or sets a Boolean to indicate the series name display behavior for the data labels on a chart.
    ///  True to show the series name. False to hide. By default false.
    ///</summary>
    property ShowSeriesName: Boolean read get_ShowSeriesName write set_ShowSeriesName;
    ///<summary>
    ///  Allows to specify if values are to be displayed in the data labels.
    ///  Default value is false.
    ///</summary>
    property ShowValue: Boolean read get_ShowValue write set_ShowValue;
    ///<summary>
    ///  Allows to specify if data label leader lines need be shown.
    ///  Default value is false.
    ///</summary>
    ///<remarks>
    ///  Applies to Pie charts only.
    ///  Leader lines create a visual connection between a data label and its corresponding data point.
    ///</remarks>
    property ShowLeaderLines: Boolean read get_ShowLeaderLines write set_ShowLeaderLines;
    ///<summary>
    ///  Allows to specify if values from data labels range to be displayed in the data labels.
    ///  Default value is false.
    ///</summary>
    property ShowDataLabelsRange: Boolean read get_ShowDataLabelsRange write set_ShowDataLabelsRange;
    ///<summary>
    ///  Gets or sets string separator used for the data labels on a chart.
    ///  The default is a comma, except for pie charts showing only category name and percentage, when a line break
    ///  shall be used instead.
    ///</summary>
    property Separator: string read get_Separator write set_Separator;
    ///<summary>
    ///  Returns true if this data label has something to display.
    ///</summary>
    property IsVisible: Boolean read get_IsVisible;
    ///<summary>
    ///  Returns number format of the parent element.
    ///</summary>
    property NumberFormat: DNChartNumberFormat read get_NumberFormat;
    ///<summary>
    ///  Gets/sets a flag indicating whether this label is hidden.
    ///  The default value is <b>false</b>
    ///  .
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
  end;

  TDNChartDataLabel = class(TDNGenericImport<DNChartDataLabelClass, DNChartDataLabel>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNChartDataLabelCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B63A467D-6D95-5DEF-A0F0-ED21EAA80CED}']
  end;

  ///<summary>
  ///  Represents a collection of <see cref="T:Aspose.Words.Drawing.Charts.ChartDataLabel" />
  ///  .
  ///</summary>
  [DNTypeName('Aspose.Words.Drawing.Charts.ChartDataLabelCollection')]
  DNChartDataLabelCollection = interface(DDN.mscorlib.DNObject)
  ['{A0F8F56B-A030-35A5-9D4A-F8DFE536C605}']
  { getters & setters } 

    function get_Item(index: Int32): DNChartDataLabel;
    function get_Count: Int32;
    function get_ShowCategoryName: Boolean;
    procedure set_ShowCategoryName(value: Boolean);
    function get_ShowBubbleSize: Boolean;
    procedure set_ShowBubbleSize(value: Boolean);
    function get_ShowLegendKey: Boolean;
    procedure set_ShowLegendKey(value: Boolean);
    function get_ShowPercentage: Boolean;
    procedure set_ShowPercentage(value: Boolean);
    function get_ShowSeriesName: Boolean;
    procedure set_ShowSeriesName(value: Boolean);
    function get_ShowValue: Boolean;
    procedure set_ShowValue(value: Boolean);
    function get_ShowLeaderLines: Boolean;
    procedure set_ShowLeaderLines(value: Boolean);
    function get_ShowDataLabelsRange: Boolean;
    procedure set_ShowDataLabelsRange(value: Boolean);
    function get_Separator: string;
    procedure set_Separator(value: string);
    function get_NumberFormat: DNChartNumberFormat;

  { methods } 

    ///<summary>
    ///  Returns an enumerator object.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNChartDataLabel>;
    ///<summary>
    ///  Adds new <see cref="T:Aspose.Words.Drawing.Charts.ChartDataLabel" />
    ///  at the specified index.
    ///</summary>
    ///  <param name="index">Target data label index.</param>
    function Add(index: Int32): DNChartDataLabel;
    ///<summary>
    ///  Clears format of a <see cref="T:Aspose.Words.Drawing.Charts.ChartDataLabel" />
    ///  at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index of the chart data label to clear format.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Clears format of all <see cref="T:Aspose.Words.Drawing.Charts.ChartDataLabel" />
    ///  in this collection.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Clears format of all <see cref="T:Aspose.Words.Drawing.Charts.ChartDataLabel" />
    ///  in this collection.
    ///</summary>
    procedure ClearFormat;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNChartDataLabel read get_Item; default;
    ///<summary>
    ///  Returns the number of <see cref="T:Aspose.Words.Drawing.Charts.ChartDataLabel" />
    ///  in this collection.
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Allows to specify whether category name is to be displayed for the data labels of the entire series.
    ///  Default value is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks>
    ///  Value defined for this property can be overridden for an individual data label with using the
    ///<see cref="P:Aspose.Words.Drawing.Charts.ChartDataLabel.ShowCategoryName" />
    ///  property.
    ///</remarks>
    property ShowCategoryName: Boolean read get_ShowCategoryName write set_ShowCategoryName;
    ///<summary>
    ///  Allows to specify whether bubble size is to be displayed for the data labels of the entire series.
    ///  Applies only to Bubble charts.
    ///  Default value is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks>
    ///  Value defined for this property can be overridden for an individual data label with using the
    ///<see cref="P:Aspose.Words.Drawing.Charts.ChartDataLabel.ShowBubbleSize" />
    ///  property.
    ///</remarks>
    property ShowBubbleSize: Boolean read get_ShowBubbleSize write set_ShowBubbleSize;
    ///<summary>
    ///  Allows to specify whether legend key is to be displayed for the data labels of the entire series.
    ///  Default value is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks>
    ///  Value defined for this property can be overridden for an individual data label with using the
    ///<see cref="P:Aspose.Words.Drawing.Charts.ChartDataLabel.ShowLegendKey" />
    ///  property.
    ///</remarks>
    property ShowLegendKey: Boolean read get_ShowLegendKey write set_ShowLegendKey;
    ///<summary>
    ///  Allows to specify whether percentage value is to be displayed for the data labels of the entire series.
    ///  Default value is <b>false</b>
    ///  . Applies only to Pie charts.
    ///</summary>
    ///<remarks>
    ///  Value defined for this property can be overridden for an individual data label with using the
    ///<see cref="P:Aspose.Words.Drawing.Charts.ChartDataLabel.ShowPercentage" />
    ///  property.
    ///</remarks>
    property ShowPercentage: Boolean read get_ShowPercentage write set_ShowPercentage;
    ///<summary>
    ///  Returns or sets a Boolean to indicate the series name display behavior for the data labels of the entire series.
    ///<b>True</b>
    ///  to show the series name. <b>False</b>
    ///  to hide. By default <b>false</b>
    ///  .
    ///</summary>
    ///<remarks>
    ///  Value defined for this property can be overridden for an individual data label with using the
    ///<see cref="P:Aspose.Words.Drawing.Charts.ChartDataLabel.ShowSeriesName" />
    ///  property.
    ///</remarks>
    property ShowSeriesName: Boolean read get_ShowSeriesName write set_ShowSeriesName;
    ///<summary>
    ///  Allows to specify whether values are to be displayed in the data labels of the entire series.
    ///  Default value is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks>
    ///  Value defined for this property can be overridden for an individual data label with using the
    ///<see cref="P:Aspose.Words.Drawing.Charts.ChartDataLabel.ShowValue" />
    ///  property.
    ///</remarks>
    property ShowValue: Boolean read get_ShowValue write set_ShowValue;
    ///<summary>
    ///  Allows to specify whether data label leader lines need be shown for the data labels of the entire series.
    ///  Default value is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks><para>Applies to Pie charts only.
    ///  Leader lines create a visual connection between a data label and its corresponding data point.</para><para>Value defined for this property can be overridden for an individual data label with using the
    ///<see cref="P:Aspose.Words.Drawing.Charts.ChartDataLabel.ShowLeaderLines" />
    ///  property.</para></remarks>
    property ShowLeaderLines: Boolean read get_ShowLeaderLines write set_ShowLeaderLines;
    ///<summary>
    ///  Allows to specify whether values from data labels range to be displayed in the data labels of the entire series.
    ///  Default value is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks>
    ///  Value defined for this property can be overridden for an individual data label with using the
    ///<see cref="P:Aspose.Words.Drawing.Charts.ChartDataLabel.ShowDataLabelsRange" />
    ///  property.
    ///</remarks>
    property ShowDataLabelsRange: Boolean read get_ShowDataLabelsRange write set_ShowDataLabelsRange;
    ///<summary>
    ///  Gets or sets string separator used for the data labels of the entire series.
    ///  The default is a comma, except for pie charts showing only category name and percentage, when a line break
    ///  shall be used instead.
    ///</summary>
    ///<remarks>
    ///  Value defined for this property can be overridden for an individual data label with using the
    ///<see cref="P:Aspose.Words.Drawing.Charts.ChartDataLabel.Separator" />
    ///  property.
    ///</remarks>
    property Separator: string read get_Separator write set_Separator;
    ///<summary>
    ///  Gets an <see cref="T:Aspose.Words.Drawing.Charts.ChartNumberFormat" />
    ///  instance allowing to set number format for the data labels of the
    ///  entire series.
    ///</summary>
    property NumberFormat: DNChartNumberFormat read get_NumberFormat;
  end;

  TDNChartDataLabelCollection = class(TDNGenericImport<DNChartDataLabelCollectionClass, DNChartDataLabelCollection>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNChartDataPointClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D708AAA2-3CF7-5689-AD47-1529E243DA04}']
  end;

  ///<summary>
  ///  Allows to specify formatting of a single data point on the chart.
  ///</summary>
  ///<remarks>
  ///  On a series, the <see cref="T:Aspose.Words.Drawing.Charts.ChartDataPoint" />
  ///  object is a member of the <see cref="T:Aspose.Words.Drawing.Charts.ChartDataPointCollection" />
  ///  .
  ///  The <see cref="T:Aspose.Words.Drawing.Charts.ChartDataPointCollection" />
  ///  contains a <see cref="T:Aspose.Words.Drawing.Charts.ChartDataPoint" />
  ///  object for each point.
  ///</remarks>
  [DNTypeName('Aspose.Words.Drawing.Charts.ChartDataPoint')]
  DNChartDataPoint = interface(DDN.mscorlib.DNObject)
  ['{B41598BA-48AE-37BD-8C97-CEB472287DF9}']
  { getters & setters } 

    function get_Index: Int32;
    function get_Explosion: Int32;
    procedure set_Explosion(value: Int32);
    function get_InvertIfNegative: Boolean;
    procedure set_InvertIfNegative(value: Boolean);
    function get_Bubble3D: Boolean;
    procedure set_Bubble3D(value: Boolean);
    function get_Format: DNChartFormat;
    function get_Marker: DNChartMarker;

  { methods } 

    ///<summary>
    ///  Clears format of this data point. The properties are set to the default values defined in the parent series.
    ///</summary>
    procedure ClearFormat;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Index of the data point this object applies formatting to.
    ///</summary>
    property Index: Int32 read get_Index;
    property Explosion: Int32 read get_Explosion write set_Explosion;
    property InvertIfNegative: Boolean read get_InvertIfNegative write set_InvertIfNegative;
    property Bubble3D: Boolean read get_Bubble3D write set_Bubble3D;
    property Format: DNChartFormat read get_Format;
    property Marker: DNChartMarker read get_Marker;
  end;

  TDNChartDataPoint = class(TDNGenericImport<DNChartDataPointClass, DNChartDataPoint>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNChartDataPointCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D8F1D34D-2B2C-5575-BE47-C2CECAEEEA07}']
  end;

  ///<summary>
  ///  Represents collection of a <see cref="T:Aspose.Words.Drawing.Charts.ChartDataPoint" />
  ///  .
  ///</summary>
  [DNTypeName('Aspose.Words.Drawing.Charts.ChartDataPointCollection')]
  DNChartDataPointCollection = interface(DDN.mscorlib.DNObject)
  ['{A5B362F9-A55E-38FD-8E09-4CE80F454D31}']
  { getters & setters } 

    function get_Item(index: Int32): DNChartDataPoint;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Returns an enumerator object.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNChartDataPoint>;
    ///<summary>
    ///  Adds new <see cref="T:Aspose.Words.Drawing.Charts.ChartDataPoint" />
    ///  at the specified index.
    ///</summary>
    ///  <param name="index">Target data point index.</param>
    function Add(index: Int32): DNChartDataPoint;
    ///<summary>
    ///  Clears format of a <see cref="T:Aspose.Words.Drawing.Charts.ChartDataPoint" />
    ///  at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index of the data point to clear format.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Clears format of all <see cref="T:Aspose.Words.Drawing.Charts.ChartDataPoint" />
    ///  in this collection.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Clears format of all <see cref="T:Aspose.Words.Drawing.Charts.ChartDataPoint" />
    ///  in this collection.
    ///</summary>
    procedure ClearFormat;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNChartDataPoint read get_Item; default;
    ///<summary>
    ///  Returns the number of <see cref="T:Aspose.Words.Drawing.Charts.ChartDataPoint" />
    ///  in this collection.
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNChartDataPointCollection = class(TDNGenericImport<DNChartDataPointCollectionClass, DNChartDataPointCollection>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNChartFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F946CF13-E990-50A1-BE4C-4EBEC33CE28A}']
  end;

  [DNTypeName('Aspose.Words.Drawing.Charts.ChartFormat')]
  DNChartFormat = interface(DDN.mscorlib.DNObject)
  ['{C2CADA09-3BE0-388F-BE1A-6E867F29145D}']
  { getters & setters } 

    function get_Fill: DNFill;
    function get_Stroke: DNStroke;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Fill: DNFill read get_Fill;
    property Stroke: DNStroke read get_Stroke;
  end;

  TDNChartFormat = class(TDNGenericImport<DNChartFormatClass, DNChartFormat>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNChartLegendClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9FEE91D1-E1A9-57DA-9099-5FC00270C417}']
  { constructors } 

    {class} function init: DNChartLegend;

  end;

  ///<summary>
  ///  Represents chart legend properties.
  ///</summary>
  [DNTypeName('Aspose.Words.Drawing.Charts.ChartLegend')]
  DNChartLegend = interface(DDN.mscorlib.DNObject)
  ['{5B9B754D-1787-3187-8B1B-6B3936CF7FBB}']
  { getters & setters } 

    function get_Position: DNLegendPosition;
    procedure set_Position(value: DNLegendPosition);
    function get_Overlay: Boolean;
    procedure set_Overlay(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the position of the legend on a chart.
    ///  Default value is <see cref="F:Aspose.Words.Drawing.Charts.LegendPosition.Right" />
    ///  .
    ///</summary>
    property Position: DNLegendPosition read get_Position write set_Position;
    ///<summary>
    ///  Determines whether other chart elements shall be allowed to overlap legend.
    ///  Default value is false.
    ///</summary>
    property Overlay: Boolean read get_Overlay write set_Overlay;
  end;

  TDNChartLegend = class(TDNGenericImport<DNChartLegendClass, DNChartLegend>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNChartMarkerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3B39C649-7F51-545F-9C0C-590872392090}']
  end;

  ///<summary>
  ///  Represents a chart data marker.
  ///</summary>
  [DNTypeName('Aspose.Words.Drawing.Charts.ChartMarker')]
  DNChartMarker = interface(DDN.mscorlib.DNObject)
  ['{22124290-4D1C-3570-AE27-35DF360D9DFF}']
  { getters & setters } 

    function get_Symbol: DNMarkerSymbol;
    procedure set_Symbol(value: DNMarkerSymbol);
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_Format: DNChartFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets chart marker symbol.
    ///</summary>
    property Symbol: DNMarkerSymbol read get_Symbol write set_Symbol;
    ///<summary>
    ///  Gets or sets chart marker size.
    ///  Default value is 7.
    ///</summary>
    property Size: Int32 read get_Size write set_Size;
    property Format: DNChartFormat read get_Format;
  end;

  TDNChartMarker = class(TDNGenericImport<DNChartMarkerClass, DNChartMarker>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNChartNumberFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C4985BA5-F289-5A55-9610-95233025FAD1}']
  end;

  ///<summary>
  ///  Represents number formatting of the parent element.
  ///</summary>
  [DNTypeName('Aspose.Words.Drawing.Charts.ChartNumberFormat')]
  DNChartNumberFormat = interface(DDN.mscorlib.DNObject)
  ['{DEF7B41B-D44A-3595-9C0D-4C132742F28D}']
  { getters & setters } 

    function get_FormatCode: string;
    procedure set_FormatCode(value: string);
    function get_IsLinkedToSource: Boolean;
    procedure set_IsLinkedToSource(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the format code applied to a data label.
    ///</summary>
    ///<remarks>
    ///  Number formatting is used to change the way a value appears in data label and can be used in some very creative ways.
    ///  The examples of number formats:
    ///  <para>Number - "#,##0.00"</para><para>Currency - "\"$\"#,##0.00"</para><para>Time - "[$-x-systime]h:mm:ss AM/PM"</para><para>Date - "d/mm/yyyy"</para><para>Percentage - "0.00%"</para><para>Fraction - "# ?/?"</para><para>Scientific - "0.00E+00"</para><para>Text - "@"</para><para>Accounting - "_-\"$\"* #,##0.00_-;-\"$\"* #,##0.00_-;_-\"$\"* \"-\"??_-;_-@_-"</para><para>Custom with color - "[Red]-#,##0.0"</para></remarks>
    property FormatCode: string read get_FormatCode write set_FormatCode;
    ///<summary>
    ///  Specifies whether the format code is linked to a source cell.
    ///  Default is true.
    ///</summary>
    ///<remarks>The NumberFormat will be reset to general if format code is linked to source.</remarks>
    property IsLinkedToSource: Boolean read get_IsLinkedToSource write set_IsLinkedToSource;
  end;

  TDNChartNumberFormat = class(TDNGenericImport<DNChartNumberFormatClass, DNChartNumberFormat>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNChartSeriesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8AFF7391-8CF5-5192-A451-B0CEBFB67215}']
  end;

  ///<summary>
  ///  Represents chart series properties.
  ///</summary>
  [DNTypeName('Aspose.Words.Drawing.Charts.ChartSeries')]
  DNChartSeries = interface(DDN.mscorlib.DNObject)
  ['{4F65AF6A-F592-3E27-B314-586F5267AD74}']
  { getters & setters } 

    function get_Explosion: Int32;
    procedure set_Explosion(value: Int32);
    function get_InvertIfNegative: Boolean;
    procedure set_InvertIfNegative(value: Boolean);
    function get_Marker: DNChartMarker;
    function get_Bubble3D: Boolean;
    procedure set_Bubble3D(value: Boolean);
    function get_DataPoints: DNChartDataPointCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Smooth: Boolean;
    procedure set_Smooth(value: Boolean);
    function get_HasDataLabels: Boolean;
    procedure set_HasDataLabels(value: Boolean);
    function get_DataLabels: DNChartDataLabelCollection;
    function get_Format: DNChartFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Explosion: Int32 read get_Explosion write set_Explosion;
    property InvertIfNegative: Boolean read get_InvertIfNegative write set_InvertIfNegative;
    property Marker: DNChartMarker read get_Marker;
    property Bubble3D: Boolean read get_Bubble3D write set_Bubble3D;
    ///<summary>
    ///  Returns a collection of formatting objects for all data points in this series.
    ///</summary>
    property DataPoints: DNChartDataPointCollection read get_DataPoints;
    ///<summary>
    ///  Gets or sets the name of the series, if name is not set explicitly it is generated using index.
    ///  By default returns Series plus one based index.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Allows to specify whether the line connecting the points on the chart shall be smoothed using Catmull-Rom splines.
    ///</summary>
    property Smooth: Boolean read get_Smooth write set_Smooth;
    ///<summary>
    ///  Gets or sets a flag indicating whether data labels are displayed for the series.
    ///</summary>
    property HasDataLabels: Boolean read get_HasDataLabels write set_HasDataLabels;
    ///<summary>
    ///  Specifies the settings for the data labels for the entire series.
    ///</summary>
    property DataLabels: DNChartDataLabelCollection read get_DataLabels;
    property Format: DNChartFormat read get_Format;
  end;

  TDNChartSeries = class(TDNGenericImport<DNChartSeriesClass, DNChartSeries>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNChartSeriesCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E031968D-43E8-5DEF-B50A-F859F0ED8567}']
  end;

  ///<summary>
  ///  Represents collection of a <see cref="T:Aspose.Words.Drawing.Charts.ChartSeries" />
  ///  .
  ///</summary>
  [DNTypeName('Aspose.Words.Drawing.Charts.ChartSeriesCollection')]
  DNChartSeriesCollection = interface(DDN.mscorlib.DNObject)
  ['{279E477B-5722-3475-9EBE-DDBD67BEE1BC}']
  { getters & setters } 

    function get_Item(index: Int32): DNChartSeries;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Returns an enumerator object.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNChartSeries>;
    ///<summary>
    ///  Removes a <see cref="T:Aspose.Words.Drawing.Charts.ChartSeries" />
    ///  at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index of the ChartSeries to remove.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all <see cref="T:Aspose.Words.Drawing.Charts.ChartSeries" />
    ///  from this collection.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Adds new <see cref="T:Aspose.Words.Drawing.Charts.ChartSeries" />
    ///  to this collection.
    ///  Use this method to add series to any type of Bar, Column, Line and Surface charts.
    ///</summary>
    ///<returns>Recently added <see cref="T:Aspose.Words.Drawing.Charts.ChartSeries" />
    ///  object.</returns>
    function Add(seriesName: string; categories: TArray<string>; values: TArray<Double>): DNChartSeries; overload;
    ///<summary>
    ///  Adds new <see cref="T:Aspose.Words.Drawing.Charts.ChartSeries" />
    ///  to this collection.
    ///  Use this method to add series to any type of Scatter charts.
    ///</summary>
    ///<returns>Recently added <see cref="T:Aspose.Words.Drawing.Charts.ChartSeries" />
    ///  object.</returns>
    function Add(seriesName: string; xValues: TArray<Double>; yValues: TArray<Double>): DNChartSeries; overload;
    ///<summary>
    ///  Adds new <see cref="T:Aspose.Words.Drawing.Charts.ChartSeries" />
    ///  to this collection.
    ///  Use this method to add series to any type of Area, Radar and Stock charts.
    ///</summary>
    function Add(seriesName: string; dates: TArray<DDN.mscorlib.DNDateTime>; values: TArray<Double>): DNChartSeries; overload;
    ///<summary>
    ///  Adds new <see cref="T:Aspose.Words.Drawing.Charts.ChartSeries" />
    ///  to this collection.
    ///  Use this method to add series to any type of Bubble charts.
    ///</summary>
    ///<returns>Recently added <see cref="T:Aspose.Words.Drawing.Charts.ChartSeries" />
    ///  object.</returns>
    function Add(seriesName: string; xValues: TArray<Double>; yValues: TArray<Double>; bubbleSizes: TArray<Double>): DNChartSeries; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNChartSeries read get_Item; default;
    ///<summary>
    ///  Returns the number of <see cref="T:Aspose.Words.Drawing.Charts.ChartSeries" />
    ///  in this collection.
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNChartSeriesCollection = class(TDNGenericImport<DNChartSeriesCollectionClass, DNChartSeriesCollection>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  DNChartTitleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E62E697F-00C5-5E35-8DE9-F2810E02CC3E}']
  end;

  ///<summary>
  ///  Provides access to the chart title properties.
  ///</summary>
  [DNTypeName('Aspose.Words.Drawing.Charts.ChartTitle')]
  DNChartTitle = interface(DDN.mscorlib.DNObject)
  ['{23D14192-1CEB-341B-A30D-C9F6CA8D3E78}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_Overlay: Boolean;
    procedure set_Overlay(value: Boolean);
    function get_Show: Boolean;
    procedure set_Show(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the text of the chart title.
    ///  If null or empty value is specified, auto generated title will be shown.
    ///</summary>
    ///<remarks>Use <see cref="P:Aspose.Words.Drawing.Charts.ChartTitle.Show" />
    ///  option if you need to hide the Title.</remarks>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Determines whether other chart elements shall be allowed to overlap title.
    ///  By default overlay is false.
    ///</summary>
    property Overlay: Boolean read get_Overlay write set_Overlay;
    ///<summary>
    ///  Determines whether the title shall be shown for this chart.
    ///  Default value is true.
    ///</summary>
    property Show: Boolean read get_Show write set_Show;
  end;

  TDNChartTitle = class(TDNGenericImport<DNChartTitleClass, DNChartTitle>) end;

  //-------------namespace: Aspose.Words.Drawing.Charts----------------
  ///<summary>
  ///  Contains properties of a single data point on the chart.
  ///</summary>
  [DNTypeName('Aspose.Words.Drawing.Charts.IChartDataPoint')]
  DNIChartDataPoint = interface(DDN.mscorlib.DNObject)
  ['{5887582F-F858-3A19-AF56-6C33936182A3}']
  { getters & setters } 

    function get_Explosion: Int32;
    procedure set_Explosion(value: Int32);
    function get_InvertIfNegative: Boolean;
    procedure set_InvertIfNegative(value: Boolean);
    function get_Marker: DNChartMarker;
    function get_Bubble3D: Boolean;
    procedure set_Bubble3D(value: Boolean);

  { propertys } 

    ///<summary>
    ///  Specifies the amount the data point shall be moved from the center of the pie.
    ///  Can be negative, negative means that property is not set and no explosion should be applied.
    ///  Applies only to Pie charts.
    ///</summary>
    property Explosion: Int32 read get_Explosion write set_Explosion;
    ///<summary>
    ///  Specifies whether the parent element shall inverts its colors if the value is negative.
    ///</summary>
    property InvertIfNegative: Boolean read get_InvertIfNegative write set_InvertIfNegative;
    ///<summary>
    ///  Specifies a data marker. Marker is automatically created when requested.
    ///</summary>
    property Marker: DNChartMarker read get_Marker;
    ///<summary>
    ///  Specifies whether the bubbles in Bubble chart should have a 3-D effect applied to them.
    ///</summary>
    property Bubble3D: Boolean read get_Bubble3D write set_Bubble3D;
  end;

  //-------------namespace: Aspose.Words.Drawing----------------
  DNFillClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8AFAB7F8-5408-5D14-A7B9-65B1EA89B7D5}']
  end;

  ///<summary>
  ///  Represents fill formatting for an object.
  ///</summary>
  ///<remarks><p>Use the <see cref="P:Aspose.Words.Drawing.ShapeBase.Fill" />
  ///  or <see cref="P:Aspose.Words.Font.Fill" />
  ///  property
  ///  to access fill properties of an object.
  ///  You do not create instances of the <see cref="T:Aspose.Words.Drawing.Fill" />
  ///  class directly.</p>
  ///  <p>Although the <see cref="T:Aspose.Words.Drawing.Fill" />
  ///  class provides properties to specify solid color fill only,
  ///  all of the more complex fill types, including as gradient, pattern and texture are fully preserved
  ///  during document open-save cycles.</p>
  ///</remarks>
  ///<dev>
  ///  This class is proposed public facade for <see cref="T:Aspose.Words.Drawing.Core.IFillable" />
  ///  .
  ///  https://docs.microsoft.com/en-us/office/vba/api/word.fillformat
  ///</dev>
  [DNTypeName('Aspose.Words.Drawing.Fill')]
  DNFill = interface(DDN.mscorlib.DNObject)
  ['{E95D70CF-0288-3E76-B0EF-F0ECECB7B704}']
  { getters & setters } 

    function get_PresetTexture: DNPresetTexture;
    function get_Color: DDN.Aspose.Common.DNColor;
    procedure set_Color(value: DDN.Aspose.Common.DNColor);
    function get_On: Boolean;
    procedure set_On(value: Boolean);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_ImageBytes: TArray<Byte>;
    function get_ForeColor: DDN.Aspose.Common.DNColor;
    procedure set_ForeColor(value: DDN.Aspose.Common.DNColor);
    function get_BackColor: DDN.Aspose.Common.DNColor;
    procedure set_BackColor(value: DDN.Aspose.Common.DNColor);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);
    function get_RotateWithObject: Boolean;
    procedure set_RotateWithObject(value: Boolean);
    function get_FillType: DNFillType;

  { methods } 

    ///<summary>
    ///  Sets the fill to a uniform color.
    ///</summary>
    ///<remarks>
    ///  Use this method to convert any of the fills back to solid fill.
    ///</remarks>
    procedure Solid; overload;
    ///<summary>
    ///  Sets the fill to a specified uniform color.
    ///</summary>
    ///<remarks>
    ///  Use this method to convert any of the fills back to solid fill.
    ///</remarks>
    procedure Solid(color: DDN.Aspose.Common.DNColor); overload;
    procedure PresetTextured(presetTexture: DNPresetTexture);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PresetTexture: DNPresetTexture read get_PresetTexture;
    ///<summary>
    ///  Gets or sets a Color object that represents the foreground color for the fill.
    ///</summary>
    ///<dev> Word VBA gets and sets RGB color. </dev>
    property Color: DDN.Aspose.Common.DNColor read get_Color write set_Color;
    ///<summary>
    ///  Gets or sets value that is <c>true</c> if the formatting applied to this instance, is visible.
    ///</summary>
    property &On: Boolean read get_On write set_On;
    ///<summary>
    ///  Gets or sets the degree of opacity of the specified fill as a value between 0.0 (clear) and 1.0 (opaque).
    ///</summary>
    ///<remarks>This property is the opposite of property <see cref="P:Aspose.Words.Drawing.Fill.Transparency" />
    ///  .</remarks>
    property Opacity: Double read get_Opacity write set_Opacity;
    ///<summary>
    ///  Gets the raw bytes of the fill texture or pattern.
    ///</summary>
    ///<remarks><p>The default value is null.</p>
    ///</remarks>
    property ImageBytes: TArray<Byte> read get_ImageBytes;
    ///<summary>
    ///  Gets or sets a Color object that represents the foreground color for the fill.
    ///</summary>
    ///<dev> Word VBA gets and sets RGB color. </dev>
    property ForeColor: DDN.Aspose.Common.DNColor read get_ForeColor write set_ForeColor;
    ///<summary>
    ///  Gets or sets a Color object that represents the background color for the fill.
    ///</summary>
    ///<dev> Word VBA gets and sets RGB color. </dev>
    property BackColor: DDN.Aspose.Common.DNColor read get_BackColor write set_BackColor;
    ///<summary>
    ///  Gets or sets value that is <c>true</c> if the formatting applied to this instance, is visible.
    ///</summary>
    property Visible: Boolean read get_Visible write set_Visible;
    ///<summary>
    ///  Gets or sets the degree of transparency of the specified fill as a value between 0.0 (opaque) and 1.0 (clear).
    ///</summary>
    ///<remarks>This property is the opposite of property <see cref="P:Aspose.Words.Drawing.Fill.Opacity" />
    ///  .</remarks>
    ///<dev>See https://docs.microsoft.com/en-us/office/vba/api/word.fillformat for details.</dev>
    property Transparency: Double read get_Transparency write set_Transparency;
    ///<summary>
    ///  Gets or sets whether the fill rotates with the specified object.
    ///</summary>
    ///<dev>
    ///  This property is applicable to shape objects only.
    ///  When accessing this property in VBA for text an exception is thrown.
    ///</dev>
    property RotateWithObject: Boolean read get_RotateWithObject write set_RotateWithObject;
    ///<summary>
    ///  Gets a fill type.
    ///</summary>
    property FillType: DNFillType read get_FillType;
  end;

  TDNFill = class(TDNGenericImport<DNFillClass, DNFill>) end;

  //-------------namespace: Aspose.Words.Drawing----------------
  DNHorizontalRuleFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B6958BA7-4CE5-5A26-83A0-1CF08345BB20}']
  end;

  ///<summary>
  ///  Represents horizontal rule formatting.
  ///</summary>
  ///<dev>
  ///  FIX 18182. This class has been added to provide public horizontal rule properties.
  ///</dev>
  [DNTypeName('Aspose.Words.Drawing.HorizontalRuleFormat')]
  DNHorizontalRuleFormat = interface(DDN.mscorlib.DNObject)
  ['{78571D1B-420B-33C8-8974-E742A3DE94FF}']
  { getters & setters } 

    function get_WidthPercent: Double;
    procedure set_WidthPercent(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_NoShade: Boolean;
    procedure set_NoShade(value: Boolean);
    function get_Color: DDN.Aspose.Common.DNColor;
    procedure set_Color(value: DDN.Aspose.Common.DNColor);
    function get_Alignment: DNHorizontalRuleAlignment;
    procedure set_Alignment(value: DNHorizontalRuleAlignment);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the length of the specified horizontal rule expressed as a percentage of the window width.
    ///</summary>
    ///<remarks><p>Valid values â€‹â€‹range from 1 to 100 inclusive.</p>
    ///  <p>The default value is 100.</p>
    ///</remarks>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  Throws when argument was out of the range of valid values.
    ///</exception>
    property WidthPercent: Double read get_WidthPercent write set_WidthPercent;
    ///<summary>
    ///  Gets or sets the height of the horizontal rule.
    ///</summary>
    ///<remarks><p>This is a shortcut to the <see cref="P:Aspose.Words.Drawing.ShapeBase.Height" />
    ///  property.</p>
    ///  <p>Valid values â€‹â€‹range from 0 to 1584 inclusive.</p>
    ///  <p>The default value is 1.5.</p>
    ///</remarks>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  Throws when argument was out of the range of valid values.
    ///</exception>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Indicates the presence of 3D shading for the horizontal rule.
    ///  If true, then the horizontal rule is without 3D shading and solid color is used.
    ///</summary>
    ///<remarks><p>The default value is false.</p>
    ///</remarks>
    property NoShade: Boolean read get_NoShade write set_NoShade;
    ///<summary>
    ///  Gets or sets the brush color that fills the horizontal rule.
    ///</summary>
    ///<remarks><p>This is a shortcut to the <see cref="P:Aspose.Words.Drawing.Fill.Color" />
    ///  property.</p>
    ///  <p>The default value is
    ///<see cref="P:System.Drawing.Color.Gray" />
    ///  .</p>
    ///</remarks>
    property Color: DDN.Aspose.Common.DNColor read get_Color write set_Color;
    ///<summary>
    ///  Gets or sets the alignment of the horizontal rule.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.HorizontalRuleAlignment.Left" />
    ///  .</p>
    ///</remarks>
    property Alignment: DNHorizontalRuleAlignment read get_Alignment write set_Alignment;
  end;

  TDNHorizontalRuleFormat = class(TDNGenericImport<DNHorizontalRuleFormatClass, DNHorizontalRuleFormat>) end;

  //-------------namespace: Aspose.Words.Drawing----------------
  DNImageDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4F80C508-BE35-562F-9847-C3FD3F5C024F}']
  end;

  ///<summary>
  ///  Defines an image for a shape.
  ///</summary>
  ///<remarks><p>Use the <see cref="P:Aspose.Words.Drawing.Shape.ImageData" />
  ///  property to access and modify the image inside a shape.
  ///  You do not create instances of the <see cref="T:Aspose.Words.Drawing.ImageData" />
  ///  class directly.</p>
  ///  <p>An image can be stored inside a shape, linked to external file or both (linked and stored in the document).</p>
  ///  <p>Regardless of whether the image is stored inside the shape or linked, you can always access the actual
  ///  image using the <see cref="M:Aspose.Words.Drawing.ImageData.ToByteArray" />
  ///  , <see cref="M:Aspose.Words.Drawing.ImageData.ToStream" />
  ///  , <see cref="M:Aspose.Words.Drawing.ImageData.ToImage" />
  ///  or <see cref="M:Aspose.Words.Drawing.ImageData.Save(System.String)" />
  ///  methods.
  ///  If the image is stored inside the shape, you can also directly access it using the <see cref="P:Aspose.Words.Drawing.ImageData.ImageBytes" />
  ///  property.</p>
  ///  <p>To store an image inside a shape use the <see cref="M:Aspose.Words.Drawing.ImageData.SetImage(System.String)" />
  ///  method. To link an image to a shape, set the <see cref="P:Aspose.Words.Drawing.ImageData.SourceFullName" />
  ///  property.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.Drawing.ImageData')]
  DNImageData = interface(DDN.mscorlib.DNObject)
  ['{E02B2693-C39C-3D68-8272-04007241AC86}']
  { getters & setters } 

    function get_ImageBytes: TArray<Byte>;
    procedure set_ImageBytes(value: TArray<Byte>);
    function get_HasImage: Boolean;
    function get_ImageSize: DNImageSize;
    function get_ImageType: DNImageType;
    function get_IsLink: Boolean;
    function get_IsLinkOnly: Boolean;
    function get_SourceFullName: string;
    procedure set_SourceFullName(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_CropTop: Double;
    procedure set_CropTop(value: Double);
    function get_CropBottom: Double;
    procedure set_CropBottom(value: Double);
    function get_CropLeft: Double;
    procedure set_CropLeft(value: Double);
    function get_CropRight: Double;
    procedure set_CropRight(value: Double);
    function get_Borders: DNBorderCollection;
    function get_ChromaKey: DDN.Aspose.Common.DNColor;
    procedure set_ChromaKey(value: DDN.Aspose.Common.DNColor);
    function get_Brightness: Double;
    procedure set_Brightness(value: Double);
    function get_Contrast: Double;
    procedure set_Contrast(value: Double);
    function get_BiLevel: Boolean;
    procedure set_BiLevel(value: Boolean);
    function get_GrayScale: Boolean;
    procedure set_GrayScale(value: Boolean);

  { methods } 

    ///<summary>
    ///  Sets the image that the shape displays.
    ///</summary>
    ///  <param name="image">The image object.</param>
    procedure SetImage(image: DDN.Aspose.Common.DNImage); overload;
    ///<summary>
    ///  Sets the image that the shape displays.
    ///</summary>
    ///  <param name="stream">The stream that contains the image.
    ///</param>
    procedure SetImage(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Sets the image that the shape displays.
    ///</summary>
    ///  <param name="fileName">The image file. Can be a file name or a URL.</param>
    procedure SetImage(fileName: string); overload;
    ///<summary>
    ///  Gets the image stored in the shape as a <see cref="T:System.Drawing.Image" />
    ///  object.
    ///</summary>
    ///<returns></returns>
    ///<remarks><p>A new <see cref="T:System.Drawing.Image" />
    ///  object is created every time this method is called.</p>
    ///  <p>It is the responsibility of the caller to dispose the image object.</p>
    ///</remarks>
    function ToImage: DDN.Aspose.Common.DNImage;
    ///<summary>
    ///  Creates and returns a stream that contains the image bytes.
    ///</summary>
    ///<remarks><p>If the image bytes are stored in the shape, creates and returns a <see cref="T:System.IO.MemoryStream" />
    ///  object.</p>
    ///  <p>If the image is linked and stored in a file, opens the file and returns a <see cref="T:System.IO.FileStream" />
    ///  object.</p>
    ///  <p>If the image is linked and stored in an external URL, downloads the file and returns a <see cref="T:System.IO.MemoryStream" />
    ///  object.</p>
    ///  <p>Is it the responsibility of the caller to dispose the stream object.</p>
    ///</remarks>
    function ToStream: DDN.mscorlib.DNStream;
    ///<summary>
    ///  Returns image bytes for any image regardless whether the image is stored or linked.
    ///</summary>
    ///<returns></returns>
    ///<remarks><para>If the image is linked, downloads the image every time it is called.</para><seealso cref="P:Aspose.Words.Drawing.ImageData.ImageBytes" />
    ///</remarks>
    function ToByteArray: TArray<Byte>;
    ///<summary>
    ///  Saves the image into the specified stream.
    ///</summary>
    ///  <param name="stream">The stream where to save the image to.</param>
    ///<overloads>Saves the image of the shape.</overloads><remarks><p>Is it the responsibility of the caller to dispose the stream object.</p>
    ///</remarks>
    procedure Save(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Saves the image into a file.
    ///</summary>
    ///  <param name="fileName">The file name where to save the image.</param>
    procedure Save(fileName: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the raw bytes of the image stored in the shape.
    ///</summary>
    ///<remarks><para>Setting the value to <c>null</c> or an empty array will remove the image from the shape.</para><p>Returns <c>null</c> if the image is not stored in the document (e.g the image is probably linked in this case).</p>
    ///<seealso cref="M:Aspose.Words.Drawing.ImageData.SetImage(System.String)" />
    ///<seealso cref="M:Aspose.Words.Drawing.ImageData.ToByteArray" />
    ///<seealso cref="M:Aspose.Words.Drawing.ImageData.ToImage" />
    ///<seealso cref="M:Aspose.Words.Drawing.ImageData.ToStream" />
    ///<seealso cref="M:Aspose.Words.Drawing.ImageData.Save(System.String)" />
    ///</remarks>
    property ImageBytes: TArray<Byte> read get_ImageBytes write set_ImageBytes;
    ///<summary>
    ///  Returns true if the shape has image bytes or links an image.
    ///</summary>
    ///<value></value>
    property HasImage: Boolean read get_HasImage;
    ///<summary>
    ///  Gets the information about image size and resolution.
    ///</summary>
    ///<value></value><remarks><p>If the image is linked only and not stored in the document, returns zero size.</p>
    ///</remarks>
    property ImageSize: DNImageSize read get_ImageSize;
    ///<summary>
    ///  Gets the type of the image.
    ///</summary>
    ///<value></value>
    property ImageType: DNImageType read get_ImageType;
    ///<summary>
    ///  Returns true if the image is linked to the shape (when <see cref="P:Aspose.Words.Drawing.ImageData.SourceFullName" />
    ///  is specified).
    ///</summary>
    ///<value></value>
    property IsLink: Boolean read get_IsLink;
    ///<summary>
    ///  Returns true if the image is linked and not stored in the document.
    ///</summary>
    ///<value></value>
    property IsLinkOnly: Boolean read get_IsLinkOnly;
    ///<summary>
    ///  Gets or sets the path and name of the source file for the linked image.
    ///</summary>
    ///  <p>The default value is an empty string.</p>
    ///  <p>If <see cref="P:Aspose.Words.Drawing.ImageData.SourceFullName" />
    ///  is not an empty string, the image is linked.</p>
    property SourceFullName: string read get_SourceFullName write set_SourceFullName;
    ///<summary>
    ///  Defines the title of an image.
    ///</summary>
    ///<remarks><p>The default value is an empty string.</p>
    ///</remarks>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Defines the fraction of picture removal from the top side.
    ///</summary>
    ///<remarks><p>The amount of cropping can range from -1.0 to 1.0. The default value is 0. Note
    ///  that a value of 1 will display no picture at all. Negative values will result in
    ///  the picture being squeezed inward from the edge being cropped (the empty space
    ///  between the picture and the cropped edge will be filled by the fill color of the
    ///  shape). Positive values less than 1 will result in the remaining picture being
    ///  stretched to fit the shape.</p>
    ///  <p>The default value is 0.</p>
    ///</remarks>
    property CropTop: Double read get_CropTop write set_CropTop;
    ///<summary>
    ///  Defines the fraction of picture removal from the bottom side.
    ///</summary>
    ///<remarks><p>The amount of cropping can range from -1.0 to 1.0. The default value is 0. Note
    ///  that a value of 1 will display no picture at all. Negative values will result in
    ///  the picture being squeezed inward from the edge being cropped (the empty space
    ///  between the picture and the cropped edge will be filled by the fill color of the
    ///  shape). Positive values less than 1 will result in the remaining picture being
    ///  stretched to fit the shape.</p>
    ///  <p>The default value is 0.</p>
    ///</remarks>
    property CropBottom: Double read get_CropBottom write set_CropBottom;
    ///<summary>
    ///  Defines the fraction of picture removal from the left side.
    ///</summary>
    ///<remarks><p>The amount of cropping can range from -1.0 to 1.0. The default value is 0. Note
    ///  that a value of 1 will display no picture at all. Negative values will result in
    ///  the picture being squeezed inward from the edge being cropped (the empty space
    ///  between the picture and the cropped edge will be filled by the fill color of the
    ///  shape). Positive values less than 1 will result in the remaining picture being
    ///  stretched to fit the shape.</p>
    ///  <p>The default value is 0.</p>
    ///</remarks>
    property CropLeft: Double read get_CropLeft write set_CropLeft;
    ///<summary>
    ///  Defines the fraction of picture removal from the right side.
    ///</summary>
    ///<remarks><p>The amount of cropping can range from -1.0 to 1.0. The default value is 0. Note
    ///  that a value of 1 will display no picture at all. Negative values will result in
    ///  the picture being squeezed inward from the edge being cropped (the empty space
    ///  between the picture and the cropped edge will be filled by the fill color of the
    ///  shape). Positive values less than 1 will result in the remaining picture being
    ///  stretched to fit the shape.</p>
    ///  <p>The default value is 0.</p>
    ///</remarks>
    property CropRight: Double read get_CropRight write set_CropRight;
    ///<summary>
    ///  Gets the collection of borders of the image. Borders only have effect for inline images.
    ///</summary>
    property Borders: DNBorderCollection read get_Borders;
    ///<summary>
    ///  Defines the color value of the image that will be treated as transparent.
    ///</summary>
    ///<remarks><p>The default value is 0.</p>
    ///</remarks>
    property ChromaKey: DDN.Aspose.Common.DNColor read get_ChromaKey write set_ChromaKey;
    ///<summary>
    ///  Gets or sets the brightness of the picture.
    ///  The value for this property must be a number from 0.0 (dimmest) to 1.0 (brightest).
    ///</summary>
    ///<remarks><p>The default value is 0.5.</p>
    ///</remarks>
    property Brightness: Double read get_Brightness write set_Brightness;
    ///<summary>
    ///  Gets or sets the contrast for the specified picture. The value
    ///  for this property must be a number from 0.0 (the least contrast) to 1.0 (the greatest contrast).
    ///</summary>
    ///<remarks><p>The default value is 0.5.</p>
    ///</remarks>
    property Contrast: Double read get_Contrast write set_Contrast;
    ///<summary>
    ///  Determines whether an image will be displayed in black and white.
    ///</summary>
    ///<remarks><p>The default value is <b>false</b>
    ///  .</p>
    ///</remarks>
    property BiLevel: Boolean read get_BiLevel write set_BiLevel;
    ///<summary>
    ///  Determines whether a picture will display in grayscale mode.
    ///</summary>
    ///<remarks><p>The default value is <b>false</b>
    ///  .</p>
    ///</remarks>
    property GrayScale: Boolean read get_GrayScale write set_GrayScale;
  end;

  TDNImageData = class(TDNGenericImport<DNImageDataClass, DNImageData>) end;

  //-------------namespace: Aspose.Words.Drawing----------------
  DNImageSizeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1475A378-FDA9-5C6A-B2D9-2E8EA1B578C6}']
  { constructors } 

    ///<summary>
    ///  Initializes width and height to the given values in pixels. Initializes resolution to 96 dpi.
    ///</summary>
    ///  <param name="widthPixels">Width in pixels.</param>
    ///  <param name="heightPixels">Height in pixels.</param>
    {class} function init(widthPixels: Int32; heightPixels: Int32): DNImageSize; overload;
    ///<summary>
    ///  Initializes width, height and resolution to the given values.
    ///</summary>
    ///  <param name="widthPixels">Width in pixels.</param>
    ///  <param name="heightPixels">Height in pixels.</param>
    ///  <param name="horizontalResolution">Horizontal resolution in DPI.</param>
    ///  <param name="verticalResolution">Vertical resolution in DPI.</param>
    {class} function init(widthPixels: Int32; heightPixels: Int32; horizontalResolution: Double; verticalResolution: Double): DNImageSize; overload;

  end;

  ///<summary>
  ///  Contains information about image size and resolution.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Drawing.ImageData.ImageSize" />
  [DNTypeName('Aspose.Words.Drawing.ImageSize')]
  DNImageSize = interface(DDN.mscorlib.DNObject)
  ['{2FBE507C-6A95-33B4-9EF9-AA50F271B03E}']
  { getters & setters } 

    function get_WidthPixels: Int32;
    function get_HeightPixels: Int32;
    function get_HorizontalResolution: Double;
    function get_VerticalResolution: Double;
    function get_WidthPoints: Double;
    function get_HeightPoints: Double;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the width of the image in pixels.
    ///</summary>
    property WidthPixels: Int32 read get_WidthPixels;
    ///<summary>
    ///  Gets the height of the image in pixels.
    ///</summary>
    property HeightPixels: Int32 read get_HeightPixels;
    ///<summary>
    ///  Gets the horizontal resolution in DPI.
    ///</summary>
    property HorizontalResolution: Double read get_HorizontalResolution;
    ///<summary>
    ///  Gets the vertical resolution in DPI.
    ///</summary>
    property VerticalResolution: Double read get_VerticalResolution;
    ///<summary>
    ///  Gets the width of the image in points. 1 point is 1/72 inch.
    ///</summary>
    property WidthPoints: Double read get_WidthPoints;
    ///<summary>
    ///  Gets the height of the image in points. 1 point is 1/72 inch.
    ///</summary>
    property HeightPoints: Double read get_HeightPoints;
  end;

  TDNImageSize = class(TDNGenericImport<DNImageSizeClass, DNImageSize>) end;

  //-------------namespace: Aspose.Words.Drawing.Ole----------------
  DNForms2OleControlCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{31257109-EED0-516A-BF0A-F3B2AE9CD58A}']
  { constructors } 

    {class} function init: DNForms2OleControlCollection;

  end;

  ///<summary>
  ///  Represents collection of <see cref="T:Aspose.Words.Drawing.Ole.Forms2OleControl" />
  ///  objects.
  ///</summary>
  [DNTypeName('Aspose.Words.Drawing.Ole.Forms2OleControlCollection')]
  DNForms2OleControlCollection = interface(DDN.mscorlib.DNObject)
  ['{22519FE1-7AC5-3CBE-997F-A7B6DDE25746}']
  { getters & setters } 

    function get_Item(index: Int32): DNForms2OleControl;
    function get_Count: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNForms2OleControl read get_Item; default;
    ///<summary>
    ///  Gets count of objects in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNForms2OleControlCollection = class(TDNGenericImport<DNForms2OleControlCollectionClass, DNForms2OleControlCollection>) end;

  //-------------namespace: Aspose.Words.Drawing.Ole----------------
  DNOleControlClass = interface(DDN.mscorlib.DNObjectClass)
  ['{61939D73-2CF5-5EFC-9954-99449A677C5D}']
  end;

  ///<summary>
  ///  Represents OLE ActiveX control.
  ///</summary>
  [DNTypeName('Aspose.Words.Drawing.Ole.OleControl')]
  DNOleControl = interface(DDN.mscorlib.DNObject)
  ['{DA80F002-2A15-3015-A576-A07A82864EEE}']
  { getters & setters } 

    function get_IsForms2OleControl: Boolean;
    function get_Name: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns true if the control is a <see cref="T:Aspose.Words.Drawing.Ole.Forms2OleControl" />
    ///  .
    ///</summary>
    property IsForms2OleControl: Boolean read get_IsForms2OleControl;
    ///<summary>
    ///  Gets name of the ActiveX control.
    ///</summary>
    property Name: string read get_Name;
  end;

  TDNOleControl = class(TDNGenericImport<DNOleControlClass, DNOleControl>) end;

  //-------------namespace: Aspose.Words.Drawing.Ole----------------
  DNForms2OleControlClass = interface(DNOleControlClass)
  ['{FD17A981-5C95-5D20-8D38-78F4A397BF85}']
  end;

  ///<summary>
  ///  Represents Microsoft Forms 2.0 OLE control.
  ///</summary>
  [DNTypeName('Aspose.Words.Drawing.Ole.Forms2OleControl')]
  DNForms2OleControl = interface(DNOleControl)
  ['{8B67A68A-48E2-3DC9-9155-2410E7268362}']
  { getters & setters } 

    function get_Caption: string;
    function get_Value: string;
    function get_Enabled: Boolean;
    function get_ChildNodes: DNForms2OleControlCollection;
    function get_Type: DNForms2OleControlType;
    function get_IsForms2OleControl: Boolean;
    function get_Name: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets Caption property of control. Default value is an empty string.
    ///</summary>
    property Caption: string read get_Caption;
    ///<summary>
    ///  Gets underlying Value property which often represents control state.
    ///  For example checked option button has '1' value while unchecked has '0'.
    ///  Default value is an empty string.
    ///</summary>
    property Value: string read get_Value;
    ///<summary>
    ///  Returns true if control is in enabled state.
    ///</summary>
    property Enabled: Boolean read get_Enabled;
    ///<summary>
    ///  Gets collection of immediate child controls.
    ///</summary>
    ///<remarks>Returns <b>null</b>
    ///  if this control can not have children.</remarks>
    property ChildNodes: DNForms2OleControlCollection read get_ChildNodes;
    ///<summary>
    ///  Gets type of Forms 2.0 control.
    ///</summary>
    property &Type: DNForms2OleControlType read get_Type;
    ///<summary>
    ///  Returns true if the control is a <see cref="T:Aspose.Words.Drawing.Ole.Forms2OleControl" />
    ///  .
    ///</summary>
    property IsForms2OleControl: Boolean read get_IsForms2OleControl;
    ///<summary>
    ///  Gets name of the ActiveX control.
    ///</summary>
    property Name: string read get_Name;
  end;

  TDNForms2OleControl = class(TDNGenericImport<DNForms2OleControlClass, DNForms2OleControl>) end;

  //-------------namespace: Aspose.Words.Drawing----------------
  DNOleFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BD0373E3-352F-559C-A31F-FEFBBEBD07AA}']
  end;

  ///<summary>
  ///  Provides access to the data of an OLE object or ActiveX control.
  ///</summary>
  ///<remarks><p>Use the <see cref="P:Aspose.Words.Drawing.Shape.OleFormat" />
  ///  property to access the data of an OLE object.
  ///  You do not create instances of the <see cref="T:Aspose.Words.Drawing.OleFormat" />
  ///  class directly.</p>
  ///<seealso cref="P:Aspose.Words.Drawing.Shape.OleFormat" />
  ///</remarks>
  [DNTypeName('Aspose.Words.Drawing.OleFormat')]
  DNOleFormat = interface(DDN.mscorlib.DNObject)
  ['{5132EC2C-54C5-31EF-86A0-97880FDE1EF5}']
  { getters & setters } 

    function get_IconCaption: string;
    function get_SuggestedExtension: string;
    function get_SuggestedFileName: string;
    function get_ProgId: string;
    procedure set_ProgId(value: string);
    function get_IsLink: Boolean;
    function get_SourceFullName: string;
    procedure set_SourceFullName(value: string);
    function get_SourceItem: string;
    procedure set_SourceItem(value: string);
    function get_AutoUpdate: Boolean;
    procedure set_AutoUpdate(value: Boolean);
    function get_OleIcon: Boolean;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_Clsid: DDN.mscorlib.DNGuid;
    function get_OlePackage: DNOlePackage;
    function get_OleControl: DNOleControl;

  { methods } 

    ///<summary>
    ///  Saves the data of the embedded object into the specified stream.
    ///</summary>
    ///<remarks><p>It is the responsibility of the caller to dispose the stream.</p>
    ///</remarks>
    ///<exception cref="T:System.InvalidOperationException">Throws if you attempt to save a linked object.</exception><param name="stream">Where to save the object data.</param>
    procedure Save(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Saves the data of the embedded object into a file with the specified name.
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">Throws if you attempt to save a linked object.</exception><param name="fileName">Name of the file to save the OLE object data.</param>
    procedure Save(fileName: string); overload;
    ///<summary>
    ///  Gets OLE object data entry.
    ///</summary>
    ///  <param name="oleEntryName">Case-sensitive name of the OLE data stream.</param>
    ///<returns>An OLE data stream or null.</returns>
    function GetOleEntry(oleEntryName: string): DDN.mscorlib.DNMemoryStream;
    ///<summary>
    ///  Gets OLE object raw data.
    ///</summary>
    function GetRawData: TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets icon caption of OLE object.
    ///  <para>In case of OLE object is not embedded as icon or caption couldn't be retrieved returns empty string.</para></summary>
    property IconCaption: string read get_IconCaption;
    ///<summary>
    ///  Gets the file extension suggested for the current embedded object if you want to save it into a file.
    ///</summary>
    property SuggestedExtension: string read get_SuggestedExtension;
    ///<summary>
    ///  Gets the file name suggested for the current embedded object if you want to save it into a file.
    ///</summary>
    property SuggestedFileName: string read get_SuggestedFileName;
    ///<summary>
    ///  Gets or sets the ProgID of the OLE object.
    ///</summary>
    ///<remarks><para>The ProgID property is not always present in Microsoft Word documents and cannot be relied upon.</para><para>Cannot be null.</para><p>The default value is an empty string.</p>
    ///</remarks>
    property ProgId: string read get_ProgId write set_ProgId;
    ///<summary>
    ///  Returns true if the OLE object is linked (when <see cref="P:Aspose.Words.Drawing.OleFormat.SourceFullName" />
    ///  is specified).
    ///</summary>
    property IsLink: Boolean read get_IsLink;
    ///<summary>
    ///  Gets or sets the path and name of the source file for the linked OLE object.
    ///</summary>
    ///<remarks><p>The default value is an empty string.</p>
    ///  <p>If <see cref="P:Aspose.Words.Drawing.OleFormat.SourceFullName" />
    ///  is not an empty string, the OLE object is linked.</p>
    ///</remarks>
    property SourceFullName: string read get_SourceFullName write set_SourceFullName;
    ///<summary>
    ///  Gets or sets a string that is used to identify the portion of the source file that is being linked.
    ///</summary>
    ///<remarks><p>The default value is an empty string.</p>
    ///  <p>For example, if the source file is a Microsoft Excel workbook, the <see cref="P:Aspose.Words.Drawing.OleFormat.SourceItem" />
    ///  property might return "Workbook1!R3C1:R4C2" if the OLE object contains only a few cells from
    ///  the worksheet.</p>
    ///</remarks>
    property SourceItem: string read get_SourceItem write set_SourceItem;
    ///<summary>
    ///  Specifies whether the link to the OLE object is automatically updated or not in Microsoft Word.
    ///</summary>
    ///<remarks><p>The default value is <b>false</b>
    ///  .</p>
    ///</remarks>
    property AutoUpdate: Boolean read get_AutoUpdate write set_AutoUpdate;
    ///<summary>
    ///  Gets the draw aspect of the OLE object. When <b>true</b>
    ///  , the OLE object is displayed as an icon.
    ///  When <b>false</b>
    ///  , the OLE object is displayed as content.
    ///</summary>
    ///<remarks><para>Aspose.Words does not allow to set this property to avoid confusion. If you were able to change
    ///  the draw aspect in Aspose.Words, Microsoft Word would still display the OLE object in its original
    ///  draw aspect until you edit or update the OLE object in Microsoft Word.</para></remarks>
    property OleIcon: Boolean read get_OleIcon;
    ///<summary>
    ///  Specifies whether the link to the OLE object is locked from updates.
    ///</summary>
    ///<remarks><p>The default value is <b>false</b>
    ///  .</p>
    ///</remarks>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets the CLSID of the OLE object.
    ///</summary>
    property Clsid: DDN.mscorlib.DNGuid read get_Clsid;
    ///<summary>
    ///  Provide access to <see cref="T:Aspose.Words.Drawing.OlePackage" />
    ///  if OLE object is an OLE Package.
    ///  Returns null otherwise.
    ///</summary>
    ///<remarks>
    ///  OLE Package is a legacy technology that allows to wrap any file format not present in the OLE registry of
    ///  a Windows system into a generic package allowing to embed almost anything into a document.
    ///  See <see cref="T:Aspose.Words.Drawing.OlePackage" />
    ///  type for more info.
    ///</remarks>
    ///<dev>
    ///  Has meaning only if ProgId equal to "Package" otherwise is null.
    ///</dev>
    property OlePackage: DNOlePackage read get_OlePackage;
    ///<summary>
    ///  Gets <see cref="P:Aspose.Words.Drawing.OleFormat.OleControl" />
    ///  objects if this OLE object is an ActiveX control. Otherwise this property is null.
    ///</summary>
    property OleControl: DNOleControl read get_OleControl;
  end;

  TDNOleFormat = class(TDNGenericImport<DNOleFormatClass, DNOleFormat>) end;

  //-------------namespace: Aspose.Words.Drawing----------------
  DNOlePackageClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4CC9FFED-CD41-5750-8C5A-5266343D7AE4}']
  end;

  ///<summary>
  ///  Allows to access OLE Package properties.
  ///</summary>
  ///<remarks>
  ///  OLE package is a legacy and "undocumented" way to store embedded object if OLE handler is unknown.
  ///  Early Windows versions such as Windows 3.1, 95 and 98 had Packager.exe application which could be used to embed any type of data into document.
  ///  Now this application is excluded from Windows but MS Word and other applications still use it to embed data if OLE handler is missing or unknown.
  ///</remarks>
  [DNTypeName('Aspose.Words.Drawing.OlePackage')]
  DNOlePackage = interface(DDN.mscorlib.DNObject)
  ['{4A683E76-5237-3C85-A9CA-BF4AFFAD14EF}']
  { getters & setters } 

    function get_FileName: string;
    procedure set_FileName(value: string);
    function get_DisplayName: string;
    procedure set_DisplayName(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets OLE Package file name.
    ///</summary>
    property FileName: string read get_FileName write set_FileName;
    ///<summary>
    ///  Gets or sets OLE Package display name.
    ///</summary>
    property DisplayName: string read get_DisplayName write set_DisplayName;
  end;

  TDNOlePackage = class(TDNGenericImport<DNOlePackageClass, DNOlePackage>) end;

  //-------------namespace: Aspose.Words.Drawing----------------
  DNSignatureLineClass = interface(DDN.mscorlib.DNObjectClass)
  ['{83E7C892-5566-534A-8821-263220D5D8DB}']
  end;

  ///<summary>
  ///  Provides access to signature line properties.
  ///</summary>
  [DNTypeName('Aspose.Words.Drawing.SignatureLine')]
  DNSignatureLine = interface(DDN.mscorlib.DNObject)
  ['{EA4C5776-91C6-3929-83A7-4BD059C2733E}']
  { getters & setters } 

    function get_Signer: string;
    procedure set_Signer(value: string);
    function get_SignerTitle: string;
    procedure set_SignerTitle(value: string);
    function get_Email: string;
    procedure set_Email(value: string);
    function get_DefaultInstructions: Boolean;
    procedure set_DefaultInstructions(value: Boolean);
    function get_Instructions: string;
    procedure set_Instructions(value: string);
    function get_AllowComments: Boolean;
    procedure set_AllowComments(value: Boolean);
    function get_ShowDate: Boolean;
    procedure set_ShowDate(value: Boolean);
    function get_Id: DDN.mscorlib.DNGuid;
    procedure set_Id(value: DDN.mscorlib.DNGuid);
    function get_ProviderId: DDN.mscorlib.DNGuid;
    procedure set_ProviderId(value: DDN.mscorlib.DNGuid);
    function get_IsSigned: Boolean;
    function get_IsValid: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets suggested signer of the signature line.
    ///  Default value for this property is <b>empty string</b>
    ///  (<see cref="F:System.String.Empty" />
    ///  ).
    ///</summary>
    property Signer: string read get_Signer write set_Signer;
    ///<summary>
    ///  Gets or sets suggested signer's title (for example, Manager).
    ///  Default value for this property is <b>empty string</b>
    ///  (<see cref="F:System.String.Empty" />
    ///  ).
    ///</summary>
    property SignerTitle: string read get_SignerTitle write set_SignerTitle;
    ///<summary>
    ///  Gets or sets suggested signer's e-mail address.
    ///  Default value for this property is <b>empty string</b>
    ///  (<see cref="F:System.String.Empty" />
    ///  ).
    ///</summary>
    property Email: string read get_Email write set_Email;
    ///<summary>
    ///  Gets or sets a value indicating that default instructions is shown in the Sign dialog.
    ///  Default value for this property is <b>true</b>
    ///  .
    ///</summary>
    property DefaultInstructions: Boolean read get_DefaultInstructions write set_DefaultInstructions;
    ///<summary>
    ///  Gets or sets instructions to the signer that are displayed on signing the signature line.
    ///  This property is ignored if <see cref="P:Aspose.Words.Drawing.SignatureLine.DefaultInstructions" />
    ///  is set.
    ///  Default value for this property is <b>empty string</b>
    ///  (<see cref="F:System.String.Empty" />
    ///  ).
    ///</summary>
    property Instructions: string read get_Instructions write set_Instructions;
    ///<summary>
    ///  Gets or sets a value indicating that the signer can add comments in the Sign dialog.
    ///  Default value for this property is <b>false</b>
    ///  .
    ///</summary>
    property AllowComments: Boolean read get_AllowComments write set_AllowComments;
    ///<summary>
    ///  Gets or sets a value indicating that sign date is shown in the signature line.
    ///  Default value for this property is <b>true</b>
    ///  .
    ///</summary>
    property ShowDate: Boolean read get_ShowDate write set_ShowDate;
    ///<summary>
    ///  Gets or sets identifier for this signature line.
    ///  <p>This identifier can be associated with a digital signature, when signing document using <see cref="T:Aspose.Words.DigitalSignatures.DigitalSignatureUtil" />
    ///  .
    ///  This value must be unique and by default it is randomly generated new Guid (<see cref="M:System.Guid.NewGuid" />
    ///  ).</p>
    ///</summary>
    property Id: DDN.mscorlib.DNGuid read get_Id write set_Id;
    ///<summary>
    ///  Gets or sets signature provider identifier for this signature line.
    ///  Default value is "{00000000-0000-0000-0000-000000000000}".
    ///</summary>
    ///<remarks><para>The cryptographic service provider (CSP) is an independent software module that actually performs
    ///  cryptography algorithms for authentication, encoding, and encryption. MS Office reserves the value
    ///  of {00000000-0000-0000-0000-000000000000} for its default signature provider.</para><para>The GUID of the additionally installed provider should be obtained from the documentation shipped with the provider.</para><para>In addition, all the installed cryptographic providers are enumerated in windows registry.
    ///  It can be found in the following path: HKLM\SOFTWARE\Microsoft\Cryptography\Defaults\Provider.
    ///  There is a key name "CP Service UUID" which corresponds to a GUID of signature provider.</para></remarks>
    property ProviderId: DDN.mscorlib.DNGuid read get_ProviderId write set_ProviderId;
    ///<summary>
    ///  Indicates that signature line is signed by digital signature.
    ///</summary>
    property IsSigned: Boolean read get_IsSigned;
    ///<summary>
    ///  Indicates that signature line is signed by digital signature and this digital signature is valid.
    ///</summary>
    property IsValid: Boolean read get_IsValid;
  end;

  TDNSignatureLine = class(TDNGenericImport<DNSignatureLineClass, DNSignatureLine>) end;

  //-------------namespace: Aspose.Words.Drawing----------------
  DNStrokeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EE288245-8CC4-51FA-9386-DBC465620650}']
  end;

  ///<summary>
  ///  Defines a stroke for a shape.
  ///</summary>
  ///<remarks><p>Use the <see cref="P:Aspose.Words.Drawing.Shape.Stroke" />
  ///  property to access stroke properties of a shape.
  ///  You do not create instances of the <see cref="T:Aspose.Words.Drawing.Stroke" />
  ///  class directly.</p>
  ///<seealso cref="P:Aspose.Words.Drawing.Shape.Stroke" />
  ///</remarks>
  [DNTypeName('Aspose.Words.Drawing.Stroke')]
  DNStroke = interface(DDN.mscorlib.DNObject)
  ['{995D0F50-1E5E-37EB-86D9-487D33DB2EE6}']
  { getters & setters } 

    function get_On: Boolean;
    procedure set_On(value: Boolean);
    function get_Color: DDN.Aspose.Common.DNColor;
    procedure set_Color(value: DDN.Aspose.Common.DNColor);
    function get_Color2: DDN.Aspose.Common.DNColor;
    procedure set_Color2(value: DDN.Aspose.Common.DNColor);
    function get_ForeColor: DDN.Aspose.Common.DNColor;
    procedure set_ForeColor(value: DDN.Aspose.Common.DNColor);
    function get_BackColor: DDN.Aspose.Common.DNColor;
    procedure set_BackColor(value: DDN.Aspose.Common.DNColor);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_Transparency: Double;
    procedure set_Transparency(value: Double);
    function get_Weight: Double;
    procedure set_Weight(value: Double);
    function get_DashStyle: DNDashStyle;
    procedure set_DashStyle(value: DNDashStyle);
    function get_JoinStyle: DNJoinStyle;
    procedure set_JoinStyle(value: DNJoinStyle);
    function get_EndCap: DNEndCap;
    procedure set_EndCap(value: DNEndCap);
    function get_LineStyle: DNShapeLineStyle;
    procedure set_LineStyle(value: DNShapeLineStyle);
    function get_StartArrowType: DNArrowType;
    procedure set_StartArrowType(value: DNArrowType);
    function get_EndArrowType: DNArrowType;
    procedure set_EndArrowType(value: DNArrowType);
    function get_StartArrowWidth: DNArrowWidth;
    procedure set_StartArrowWidth(value: DNArrowWidth);
    function get_StartArrowLength: DNArrowLength;
    procedure set_StartArrowLength(value: DNArrowLength);
    function get_EndArrowWidth: DNArrowWidth;
    procedure set_EndArrowWidth(value: DNArrowWidth);
    function get_EndArrowLength: DNArrowLength;
    procedure set_EndArrowLength(value: DNArrowLength);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_ImageBytes: TArray<Byte>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Defines whether the path will be stroked.
    ///</summary>
    ///<remarks><p>The default value is <b>true</b>
    ///  .</p>
    ///</remarks>
    property &On: Boolean read get_On write set_On;
    ///<summary>
    ///  Defines the color of a stroke.
    ///</summary>
    ///<remarks><p>The default value is
    ///<see cref="P:System.Drawing.Color.Black" />
    ///  .</p>
    ///</remarks>
    property Color: DDN.Aspose.Common.DNColor read get_Color write set_Color;
    ///<summary>
    ///  Defines a second color for a stroke.
    ///</summary>
    ///<remarks><p>The default value is
    ///<see cref="P:System.Drawing.Color.White" />
    ///  .</p>
    ///</remarks>
    property Color2: DDN.Aspose.Common.DNColor read get_Color2 write set_Color2;
    property ForeColor: DDN.Aspose.Common.DNColor read get_ForeColor write set_ForeColor;
    property BackColor: DDN.Aspose.Common.DNColor read get_BackColor write set_BackColor;
    property Visible: Boolean read get_Visible write set_Visible;
    property Transparency: Double read get_Transparency write set_Transparency;
    ///<summary>
    ///  Defines the brush thickness that strokes the path of a shape in points.
    ///</summary>
    ///<remarks><p>The default value is 0.75.</p>
    ///</remarks>
    property Weight: Double read get_Weight write set_Weight;
    ///<summary>
    ///  Specifies the dot and dash pattern for a stroke.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.DashStyle.Solid" />
    ///  .</p>
    ///</remarks>
    property DashStyle: DNDashStyle read get_DashStyle write set_DashStyle;
    ///<summary>
    ///  Defines the join style of a polyline.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.JoinStyle.Round" />
    ///  .</p>
    ///</remarks>
    property JoinStyle: DNJoinStyle read get_JoinStyle write set_JoinStyle;
    ///<summary>
    ///  Defines the cap style for the end of a stroke.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.EndCap.Flat" />
    ///  .</p>
    ///</remarks>
    property EndCap: DNEndCap read get_EndCap write set_EndCap;
    ///<summary>
    ///  Defines the line style of the stroke.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.ShapeLineStyle.Single" />
    ///  .</p>
    ///</remarks>
    property LineStyle: DNShapeLineStyle read get_LineStyle write set_LineStyle;
    ///<summary>
    ///  Defines the arrowhead for the start of a stroke.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.ArrowType.None" />
    ///  .</p>
    ///</remarks>
    property StartArrowType: DNArrowType read get_StartArrowType write set_StartArrowType;
    ///<summary>
    ///  Defines the arrowhead for the end of a stroke.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.ArrowType.None" />
    ///  .</p>
    ///</remarks>
    property EndArrowType: DNArrowType read get_EndArrowType write set_EndArrowType;
    ///<summary>
    ///  Defines the arrowhead width for the start of a stroke.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.ArrowWidth.Medium" />
    ///  .</p>
    ///</remarks>
    property StartArrowWidth: DNArrowWidth read get_StartArrowWidth write set_StartArrowWidth;
    ///<summary>
    ///  Defines the arrowhead length for the start of a stroke.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.ArrowLength.Medium" />
    ///  .</p>
    ///</remarks>
    property StartArrowLength: DNArrowLength read get_StartArrowLength write set_StartArrowLength;
    ///<summary>
    ///  Defines the arrowhead width for the end of a stroke.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.ArrowWidth.Medium" />
    ///  .</p>
    ///</remarks>
    property EndArrowWidth: DNArrowWidth read get_EndArrowWidth write set_EndArrowWidth;
    ///<summary>
    ///  Defines the arrowhead length for the end of a stroke.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.ArrowLength.Medium" />
    ///  .</p>
    ///</remarks>
    property EndArrowLength: DNArrowLength read get_EndArrowLength write set_EndArrowLength;
    ///<summary>
    ///  Defines the amount of transparency of a stroke. Valid range is from 0 to 1.
    ///</summary>
    ///<remarks><p>The default value is 1.</p>
    ///</remarks>
    property Opacity: Double read get_Opacity write set_Opacity;
    ///<summary>
    ///  Defines the image for a stroke image or pattern fill.
    ///</summary>
    property ImageBytes: TArray<Byte> read get_ImageBytes;
  end;

  TDNStroke = class(TDNGenericImport<DNStrokeClass, DNStroke>) end;

  //-------------namespace: Aspose.Words.Drawing----------------
  DNTextBoxClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0B0AC423-6F02-537B-BCC5-6B3FB45378A6}']
  end;

  ///<summary>
  ///  Defines attributes that specify how a text is displayed inside a shape.
  ///</summary>
  ///<remarks><p>Use the <see cref="P:Aspose.Words.Drawing.Shape.TextBox" />
  ///  property to access text properties of a shape.
  ///  You do not create instances of the <see cref="T:Aspose.Words.Drawing.TextBox" />
  ///  class directly.</p>
  ///<seealso cref="P:Aspose.Words.Drawing.Shape.TextBox" />
  ///</remarks>
  [DNTypeName('Aspose.Words.Drawing.TextBox')]
  DNTextBox = interface(DDN.mscorlib.DNObject)
  ['{D407E923-03CA-3B22-9AF6-60C22A62E3A3}']
  { getters & setters } 

    function get_InternalMarginLeft: Double;
    procedure set_InternalMarginLeft(value: Double);
    function get_InternalMarginRight: Double;
    procedure set_InternalMarginRight(value: Double);
    function get_InternalMarginTop: Double;
    procedure set_InternalMarginTop(value: Double);
    function get_InternalMarginBottom: Double;
    procedure set_InternalMarginBottom(value: Double);
    function get_FitShapeToText: Boolean;
    procedure set_FitShapeToText(value: Boolean);
    function get_LayoutFlow: DNLayoutFlow;
    procedure set_LayoutFlow(value: DNLayoutFlow);
    function get_TextBoxWrapMode: DNTextBoxWrapMode;
    procedure set_TextBoxWrapMode(value: DNTextBoxWrapMode);
    function get_VerticalAnchor: DNTextBoxAnchor;
    procedure set_VerticalAnchor(value: DNTextBoxAnchor);
    function get_Next: DNTextBox;
    procedure set_Next(value: DNTextBox);
    function get_Previous: DNTextBox;
    function get_Parent: DNShape;

  { methods } 

    ///<summary>
    ///  Determines whether this TextBox can be linked to the target Textbox.
    ///</summary>
    function IsValidLinkTarget(target: DNTextBox): Boolean;
    ///<summary>
    ///  Breaks the link to the next TextBox.
    ///</summary>
    ///<remarks>
    ///  BreakForwardLink() doesn't break all other links in the current sequence of shapes.
    ///  For example: 1-2-3-4 sequence and BreakForwardLink at the 2-nd textbox will create
    ///  two sequences 1-2, 3-4.
    ///</remarks>
    procedure BreakForwardLink;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the inner left margin in points for a shape.
    ///</summary>
    ///<remarks><p>The default value is 1/10 inch.</p>
    ///</remarks>
    property InternalMarginLeft: Double read get_InternalMarginLeft write set_InternalMarginLeft;
    ///<summary>
    ///  Specifies the inner right margin in points for a shape.
    ///</summary>
    ///<remarks><p>The default value is 1/10 inch.</p>
    ///</remarks>
    property InternalMarginRight: Double read get_InternalMarginRight write set_InternalMarginRight;
    ///<summary>
    ///  Specifies the inner top margin in points for a shape.
    ///</summary>
    ///<remarks><p>The default value is 1/20 inch.</p>
    ///</remarks>
    property InternalMarginTop: Double read get_InternalMarginTop write set_InternalMarginTop;
    ///<summary>
    ///  Specifies the inner bottom margin in points for a shape.
    ///</summary>
    ///<remarks><p>The default value is 1/20 inch.</p>
    ///</remarks>
    property InternalMarginBottom: Double read get_InternalMarginBottom write set_InternalMarginBottom;
    ///<summary>
    ///  Determines whether Microsoft Word will grow the shape to fit text.
    ///</summary>
    ///<remarks><p>The default value is <b>false</b>
    ///  .</p>
    ///</remarks>
    property FitShapeToText: Boolean read get_FitShapeToText write set_FitShapeToText;
    ///<summary>
    ///  Determines the flow of the text layout in a shape.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.LayoutFlow.Horizontal" />
    ///  .</p>
    ///</remarks>
    property LayoutFlow: DNLayoutFlow read get_LayoutFlow write set_LayoutFlow;
    ///<summary>
    ///  Determines how text wraps inside a shape.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.TextBoxWrapMode.Square" />
    ///  .</p>
    ///</remarks>
    property TextBoxWrapMode: DNTextBoxWrapMode read get_TextBoxWrapMode write set_TextBoxWrapMode;
    ///<summary>
    ///  Specifies the vertical alignment of the text within a shape.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.TextBoxAnchor.Top" />
    ///  .</p>
    ///</remarks>
    property VerticalAnchor: DNTextBoxAnchor read get_VerticalAnchor write set_VerticalAnchor;
    ///<summary>
    ///  Returns or sets a TextBox that represents the next TextBox in a sequence of shapes.
    ///</summary>
    property Next: DNTextBox read get_Next write set_Next;
    ///<summary>
    ///  Returns a TextBox that represents the previous TextBox in a sequence of shapes.
    ///</summary>
    property Previous: DNTextBox read get_Previous;
    ///<summary>
    ///  Gets a parent shape for the TextBox.
    ///</summary>
    property Parent: DNShape read get_Parent;
  end;

  TDNTextBox = class(TDNGenericImport<DNTextBoxClass, DNTextBox>) end;

  //-------------namespace: Aspose.Words.Drawing----------------
  DNTextPathClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A9F88CD4-3A4B-5FB7-A81E-048D0E1C0D17}']
  end;

  ///<summary>
  ///  Defines the text and formatting of the text path (of a WordArt object).
  ///</summary>
  ///<remarks><p>Use the <see cref="P:Aspose.Words.Drawing.Shape.TextPath" />
  ///  property to access WordArt properties of a shape.
  ///  You do not create instances of the <see cref="T:Aspose.Words.Drawing.TextPath" />
  ///  class directly.</p>
  ///<seealso cref="P:Aspose.Words.Drawing.Shape.TextPath" />
  ///</remarks>
  [DNTypeName('Aspose.Words.Drawing.TextPath')]
  DNTextPath = interface(DDN.mscorlib.DNObject)
  ['{22CD7862-78E8-3B48-B72D-2FD06A1FA04F}']
  { getters & setters } 

    function get_On: Boolean;
    procedure set_On(value: Boolean);
    function get_FitPath: Boolean;
    procedure set_FitPath(value: Boolean);
    function get_FitShape: Boolean;
    procedure set_FitShape(value: Boolean);
    function get_FontFamily: string;
    procedure set_FontFamily(value: string);
    function get_Size: Double;
    procedure set_Size(value: Double);
    function get_Bold: Boolean;
    procedure set_Bold(value: Boolean);
    function get_Italic: Boolean;
    procedure set_Italic(value: Boolean);
    function get_SmallCaps: Boolean;
    procedure set_SmallCaps(value: Boolean);
    function get_RotateLetters: Boolean;
    procedure set_RotateLetters(value: Boolean);
    function get_Trim: Boolean;
    procedure set_Trim(value: Boolean);
    function get_Kerning: Boolean;
    procedure set_Kerning(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_Underline: Boolean;
    procedure set_Underline(value: Boolean);
    function get_StrikeThrough: Boolean;
    procedure set_StrikeThrough(value: Boolean);
    function get_SameLetterHeights: Boolean;
    procedure set_SameLetterHeights(value: Boolean);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_TextPathAlignment: DNTextPathAlignment;
    procedure set_TextPathAlignment(value: DNTextPathAlignment);
    function get_ReverseRows: Boolean;
    procedure set_ReverseRows(value: Boolean);
    function get_Spacing: Double;
    procedure set_Spacing(value: Double);
    function get_XScale: Boolean;
    procedure set_XScale(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Defines whether the text is displayed.
    ///</summary>
    ///<remarks><p>The default value is <b>false</b>
    ///  .</p>
    ///</remarks>
    property &On: Boolean read get_On write set_On;
    ///<summary>
    ///  Defines whether the text fits the path of a shape.
    ///</summary>
    ///<remarks><p>The default value is <b>false</b>
    ///  .</p>
    ///</remarks>
    property FitPath: Boolean read get_FitPath write set_FitPath;
    ///<summary>
    ///  Defines whether the text fits bounding box of a shape.
    ///</summary>
    ///<remarks><p>The default value is <b>false</b>
    ///  .</p>
    ///</remarks>
    property FitShape: Boolean read get_FitShape write set_FitShape;
    ///<summary>
    ///  Defines the family of the textpath font.
    ///</summary>
    ///<remarks><p>The default value is Arial.</p>
    ///</remarks>
    property FontFamily: string read get_FontFamily write set_FontFamily;
    ///<summary>
    ///  Defines the size of the font in points.
    ///</summary>
    ///<remarks><p>The default value is 36.</p>
    ///</remarks>
    property Size: Double read get_Size write set_Size;
    ///<summary>
    ///  True if the font is formatted as bold.
    ///</summary>
    ///<remarks><p>The default value is <b>false</b>
    ///  .</p>
    ///</remarks>
    property Bold: Boolean read get_Bold write set_Bold;
    ///<summary>
    ///  True if the font is formatted as italic.
    ///</summary>
    ///<remarks><p>The default value is <b>false</b>
    ///  .</p>
    ///</remarks>
    property Italic: Boolean read get_Italic write set_Italic;
    ///<summary>
    ///  True if the font is formatted as small capital letters.
    ///</summary>
    ///<remarks><p>The default value is <b>false</b>
    ///  .</p>
    ///</remarks>
    property SmallCaps: Boolean read get_SmallCaps write set_SmallCaps;
    ///<summary>
    ///  Determines whether the letters of the text are rotated.
    ///</summary>
    ///<remarks><p>The default value is <b>false</b>
    ///  .</p>
    ///</remarks>
    property RotateLetters: Boolean read get_RotateLetters write set_RotateLetters;
    ///<summary>
    ///  Determines whether extra space is removed above and below the text.
    ///</summary>
    ///<remarks><p>The default value is <b>false</b>
    ///  .</p>
    ///</remarks>
    property Trim: Boolean read get_Trim write set_Trim;
    ///<summary>
    ///  Determines whether kerning is turned on.
    ///</summary>
    ///<remarks><p>The default value is <b>false</b>
    ///  .</p>
    ///</remarks>
    property Kerning: Boolean read get_Kerning write set_Kerning;
    ///<summary>
    ///  Defines whether a shadow is applied to the text on a text path.
    ///</summary>
    ///<remarks><p>The default value is <b>false</b>
    ///  .</p>
    ///</remarks>
    property Shadow: Boolean read get_Shadow write set_Shadow;
    ///<summary>
    ///  True if the font is underlined.
    ///</summary>
    ///<remarks><p>The default value is <b>false</b>
    ///  .</p>
    ///</remarks>
    property Underline: Boolean read get_Underline write set_Underline;
    ///<summary>
    ///  True if the font is formatted as strikethrough text.
    ///</summary>
    ///<remarks><p>The default value is <b>false</b>
    ///  .</p>
    ///</remarks>
    property StrikeThrough: Boolean read get_StrikeThrough write set_StrikeThrough;
    ///<summary>
    ///  Determines whether all letters will be the same height regardless of initial case.
    ///</summary>
    ///<remarks><p>The default value is <b>false</b>
    ///  .</p>
    ///</remarks>
    property SameLetterHeights: Boolean read get_SameLetterHeights write set_SameLetterHeights;
    ///<summary>
    ///  Defines the text of the text path.
    ///</summary>
    ///<remarks><p>The default value is an empty string.</p>
    ///</remarks>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Defines the alignment of text.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.TextPathAlignment.Center" />
    ///  .</p>
    ///</remarks>
    property TextPathAlignment: DNTextPathAlignment read get_TextPathAlignment write set_TextPathAlignment;
    ///<summary>
    ///  Determines whether the layout order of rows is reversed.
    ///</summary>
    ///<remarks><p>The default value is <b>false</b>
    ///  .</p>
    ///  <p>If <b>true</b>
    ///  , the layout order of rows is reversed. This attribute is used for vertical text layout.</p>
    ///</remarks>
    property ReverseRows: Boolean read get_ReverseRows write set_ReverseRows;
    ///<summary>
    ///  Defines the amount of spacing for text. 1 means 100%.
    ///</summary>
    ///<remarks><p>The default value is 1.</p>
    ///</remarks>
    property Spacing: Double read get_Spacing write set_Spacing;
    ///<summary>
    ///  Determines whether a straight textpath will be used instead of the shape path.
    ///</summary>
    ///<remarks><p>The default value is <b>false</b>
    ///  .</p>
    ///  <p>If <b>true</b>
    ///  , the text runs along a path from left to right along the x value of
    ///  the lower boundary of the shape.</p>
    ///</remarks>
    property XScale: Boolean read get_XScale write set_XScale;
  end;

  TDNTextPath = class(TDNGenericImport<DNTextPathClass, DNTextPath>) end;

  //-------------namespace: Aspose.Words----------------
  DNEditableRangeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{441166C4-AFDC-529E-AB0D-455ADF6931FB}']
  end;

  ///<summary>
  ///  Represents a single editable range.
  ///</summary>
  ///<remarks><p><see cref="T:Aspose.Words.EditableRange" />
  ///  is a "facade" object that encapsulates two nodes <see cref="P:Aspose.Words.EditableRange.EditableRangeStart" />
  ///  and <see cref="P:Aspose.Words.EditableRange.EditableRangeEnd" />
  ///  in a document tree and allows to work with an editable range as a single object.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.EditableRange')]
  DNEditableRange = interface(DDN.mscorlib.DNObject)
  ['{3102D626-FA5C-30D1-BEFA-29A6AC4DFCFE}']
  { getters & setters } 

    function get_Id: Int32;
    function get_SingleUser: string;
    procedure set_SingleUser(value: string);
    function get_EditorGroup: DNEditorType;
    procedure set_EditorGroup(value: DNEditorType);
    function get_EditableRangeStart: DNEditableRangeStart;
    function get_EditableRangeEnd: DNEditableRangeEnd;

  { methods } 

    ///<summary>
    ///  Removes the editable range from the document. Does not remove content inside the editable range.
    ///</summary>
    procedure Remove;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the editable range identifier.
    ///</summary>
    ///<remarks><para>The region must be demarcated using the <see cref="P:Aspose.Words.EditableRange.EditableRangeStart" />
    ///  and <see cref="P:Aspose.Words.EditableRange.EditableRangeEnd" />
    ///</para><para>Editable range identifiers are supposed to be unique across a document and Aspose.Words automatically
    ///  maintains editable range identifiers when loading, saving and combining documents.</para></remarks>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Returns or sets the single user for editable range.
    ///</summary>
    ///<remarks><p>This editor can be stored in one of the following forms:</p>
    ///  <p>DOMAIN\Username - for users whose access shall be authenticated using the current user's domain credentials.</p>
    ///  <p>user@domain.com - for users whose access shall be authenticated using the user's e-mail address as credentials.</p>
    ///  <p>user - for users whose access shall be authenticated using the current user's machine credentials.</p>
    ///  <p>Single user and editor group cannot be set simultaneously for the specific editable range,
    ///  if the one is set, the other will be clear.</p>
    ///</remarks>
    property SingleUser: string read get_SingleUser write set_SingleUser;
    ///<summary>
    ///  Returns or sets an alias (or editing group) which shall be used to determine if the current user
    ///  shall be allowed to edit this editable range.
    ///</summary>
    ///<remarks><p>Single user and editor group cannot be set simultaneously for the specific editable range,
    ///  if the one is set, the other will be clear.</p>
    ///</remarks>
    property EditorGroup: DNEditorType read get_EditorGroup write set_EditorGroup;
    ///<summary>
    ///  Gets the node that represents the start of the editable range.
    ///</summary>
    property EditableRangeStart: DNEditableRangeStart read get_EditableRangeStart;
    ///<summary>
    ///  Gets the node that represents the end of the editable range.
    ///</summary>
    property EditableRangeEnd: DNEditableRangeEnd read get_EditableRangeEnd;
  end;

  TDNEditableRange = class(TDNGenericImport<DNEditableRangeClass, DNEditableRange>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNBarcodeParametersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{441B032A-ACEC-5EE0-8932-03089518DAFA}']
  { constructors } 

    {class} function init: DNBarcodeParameters;

  end;

  ///<summary>
  ///  Container class for barcode parameters to pass-through to BarcodeGenerator.
  ///</summary>
  ///<remarks>
  ///  The set of parameters are according to DISPLAYBARCODE field options.
  ///  See the exact list at <a href="https://msdn.microsoft.com/en-us/library/hh745901(v=office.12).aspx" />
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.BarcodeParameters')]
  DNBarcodeParameters = interface(DDN.mscorlib.DNObject)
  ['{A3A6CEF2-1DD4-380B-9AFF-A4D3A1024811}']
  { getters & setters } 

    function get_BarcodeType: string;
    procedure set_BarcodeType(value: string);
    function get_BarcodeValue: string;
    procedure set_BarcodeValue(value: string);
    function get_SymbolHeight: string;
    procedure set_SymbolHeight(value: string);
    function get_ForegroundColor: string;
    procedure set_ForegroundColor(value: string);
    function get_BackgroundColor: string;
    procedure set_BackgroundColor(value: string);
    function get_SymbolRotation: string;
    procedure set_SymbolRotation(value: string);
    function get_ScalingFactor: string;
    procedure set_ScalingFactor(value: string);
    function get_PosCodeStyle: string;
    procedure set_PosCodeStyle(value: string);
    function get_CaseCodeStyle: string;
    procedure set_CaseCodeStyle(value: string);
    function get_ErrorCorrectionLevel: string;
    procedure set_ErrorCorrectionLevel(value: string);
    function get_DisplayText: Boolean;
    procedure set_DisplayText(value: Boolean);
    function get_AddStartStopChar: Boolean;
    procedure set_AddStartStopChar(value: Boolean);
    function get_FixCheckDigit: Boolean;
    procedure set_FixCheckDigit(value: Boolean);
    function get_PostalAddress: string;
    procedure set_PostalAddress(value: string);
    function get_IsBookmark: Boolean;
    procedure set_IsBookmark(value: Boolean);
    function get_FacingIdentificationMark: string;
    procedure set_FacingIdentificationMark(value: string);
    function get_IsUSPostalAddress: Boolean;
    procedure set_IsUSPostalAddress(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Bar code type.
    ///</summary>
    property BarcodeType: string read get_BarcodeType write set_BarcodeType;
    ///<summary>
    ///  Data to be encoded.
    ///</summary>
    property BarcodeValue: string read get_BarcodeValue write set_BarcodeValue;
    ///<summary>
    ///  Bar code image height (in twips - 1/1440 inches)
    ///</summary>
    property SymbolHeight: string read get_SymbolHeight write set_SymbolHeight;
    ///<summary>
    ///  Bar code foreground color (0x000000 - 0xFFFFFF)
    ///</summary>
    property ForegroundColor: string read get_ForegroundColor write set_ForegroundColor;
    ///<summary>
    ///  Bar code background color (0x000000 - 0xFFFFFF)
    ///</summary>
    property BackgroundColor: string read get_BackgroundColor write set_BackgroundColor;
    ///<summary>
    ///  Rotation of the barcode symbol. Valid values are [0, 3].
    ///</summary>
    property SymbolRotation: string read get_SymbolRotation write set_SymbolRotation;
    ///<summary>
    ///  Scaling factor for the symbol. The value is in whole percentage points and the valid values are [10, 1000].
    ///</summary>
    property ScalingFactor: string read get_ScalingFactor write set_ScalingFactor;
    ///<summary>
    ///  Style of a Point of Sale barcode (barcode types UPCA|UPCE|EAN13|EAN8). The valid values (case insensitive) are [STD|SUP2|SUP5|CASE].
    ///</summary>
    property PosCodeStyle: string read get_PosCodeStyle write set_PosCodeStyle;
    ///<summary>
    ///  Style of a Case Code for barcode type ITF14. The valid values are [STD|EXT|ADD]
    ///</summary>
    property CaseCodeStyle: string read get_CaseCodeStyle write set_CaseCodeStyle;
    ///<summary>
    ///  Error correction level of QR Code. Valid values are [0, 3].
    ///</summary>
    property ErrorCorrectionLevel: string read get_ErrorCorrectionLevel write set_ErrorCorrectionLevel;
    ///<summary>
    ///  Whether to display barcode data (text) along with image.
    ///</summary>
    property DisplayText: Boolean read get_DisplayText write set_DisplayText;
    ///<summary>
    ///  Whether to add Start/Stop characters for barcode types NW7 and CODE39.
    ///</summary>
    property AddStartStopChar: Boolean read get_AddStartStopChar write set_AddStartStopChar;
    ///<summary>
    ///  Whether to fix the check digit if itâ€™s invalid.
    ///</summary>
    property FixCheckDigit: Boolean read get_FixCheckDigit write set_FixCheckDigit;
    ///<summary>
    ///  Barcode postal address.
    ///</summary>
    property PostalAddress: string read get_PostalAddress write set_PostalAddress;
    ///<summary>
    ///  Whether <see cref="P:Aspose.Words.Fields.BarcodeParameters.PostalAddress" />
    ///  is the name of a bookmark.
    ///</summary>
    property IsBookmark: Boolean read get_IsBookmark write set_IsBookmark;
    ///<summary>
    ///  Type of a Facing Identification Mark (FIM).
    ///</summary>
    property FacingIdentificationMark: string read get_FacingIdentificationMark write set_FacingIdentificationMark;
    ///<summary>
    ///  Whether <see cref="P:Aspose.Words.Fields.BarcodeParameters.PostalAddress" />
    ///  is a U.S. postal address.
    ///</summary>
    property IsUSPostalAddress: Boolean read get_IsUSPostalAddress write set_IsUSPostalAddress;
  end;

  TDNBarcodeParameters = class(TDNGenericImport<DNBarcodeParametersClass, DNBarcodeParameters>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNComparisonEvaluationResultClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F7D0837A-3C62-561C-AE22-7FB7987A8708}']
  { constructors } 

    ///<summary>
    ///  Creates a comparison evaluation result.
    ///</summary>
    {class} function init(result: Boolean): DNComparisonEvaluationResult; overload;
    ///<summary>
    ///  Creates a failed comparison evaluation result with the corresponding error message.
    ///</summary>
    {class} function init(errorMessage: string): DNComparisonEvaluationResult; overload;

  end;

  ///<summary>
  ///  The comparison evaluation result.
  ///</summary>
  [DNTypeName('Aspose.Words.Fields.ComparisonEvaluationResult')]
  DNComparisonEvaluationResult = interface(DDN.mscorlib.DNObject)
  ['{BDF2155A-DC8D-304E-9277-3BE126EB4B1A}']
  { getters & setters } 

    function get_Result: Boolean;
    function get_ErrorMessage: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the comparison evaluation result.
    ///</summary>
    property Result: Boolean read get_Result;
    ///<summary>
    ///  Gets the failed comparison evaluation result's error message.
    ///</summary>
    property ErrorMessage: string read get_ErrorMessage;
  end;

  TDNComparisonEvaluationResult = class(TDNGenericImport<DNComparisonEvaluationResultClass, DNComparisonEvaluationResult>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNComparisonExpressionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{58C556D2-2F28-55DB-9263-C7730C26AA64}']
  end;

  ///<summary>
  ///  The comparison expression.
  ///</summary>
  [DNTypeName('Aspose.Words.Fields.ComparisonExpression')]
  DNComparisonExpression = interface(DDN.mscorlib.DNObject)
  ['{949B5B26-039E-35D8-BA56-C2C316786D68}']
  { getters & setters } 

    function get_LeftExpression: string;
    function get_ComparisonOperator: string;
    function get_RightExpression: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the left expression.
    ///</summary>
    property LeftExpression: string read get_LeftExpression;
    ///<summary>
    ///  Gets the comparison operator.
    ///</summary>
    property ComparisonOperator: string read get_ComparisonOperator;
    ///<summary>
    ///  Gets the right expression.
    ///</summary>
    property RightExpression: string read get_RightExpression;
  end;

  TDNComparisonExpression = class(TDNGenericImport<DNComparisonExpressionClass, DNComparisonExpression>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNDropDownItemCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{60EF6076-95FC-5E8C-B871-D89A52E8FAB2}']
  end;

  ///<summary>
  ///  A collection of strings that represent all the items in a drop-down form field.
  ///</summary>
  ///<seealso cref="T:Aspose.Words.Fields.FormField" />
  ///<seealso cref="P:Aspose.Words.Fields.FormField.DropDownItems" />
  [DNTypeName('Aspose.Words.Fields.DropDownItemCollection')]
  DNDropDownItemCollection = interface(DDN.mscorlib.DNObject)
  ['{89282693-6CDE-3429-91C5-765570873605}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): string;
    procedure set_Item(index: Int32; value: string);

  { methods } 

    ///<summary>
    ///  Returns an enumerator object that can be used to iterate over all items in the collection.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<string>;
    ///<summary>
    ///  Adds a string to the end of the collection.
    ///</summary>
    ///  <param name="value">The string to add to the end of the collection.</param>
    ///<returns>The zero-based index at which the new element is inserted.</returns>
    function Add(value: string): Int32;
    ///<summary>
    ///  Determines whether the collection contains the specified value.
    ///</summary>
    ///  <param name="value">Case-sensitive value to locate.</param>
    ///<returns>True if the item is found in the collection; otherwise, false.</returns>
    function &Contains(value: string): Boolean;
    ///<summary>
    ///  Returns the zero-based index of the specified value in the collection.
    ///</summary>
    ///  <param name="value">The case-sensitive value to locate.</param>
    ///<returns>The zero based index. Negative value if not found.</returns>
    function IndexOf(value: string): Int32;
    ///<summary>
    ///  Inserts a string into the collection at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index at which value is inserted.</param>
    ///  <param name="value">The string to insert.</param>
    procedure Insert(index: Int32; value: string);
    ///<summary>
    ///  Removes the specified value from the collection.
    ///</summary>
    ///  <param name="name">The case-sensitive value to remove.</param>
    procedure Remove(name: string);
    ///<summary>
    ///  Removes a value at the specified index.
    ///</summary>
    ///  <param name="index">The zero based index.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all elements from the collection.
    ///</summary>
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements contained in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: string read get_Item write set_Item; default;
  end;

  TDNDropDownItemCollection = class(TDNGenericImport<DNDropDownItemCollectionClass, DNDropDownItemCollection>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7F9FF57F-0CAC-5BBA-BDF7-35DC98A46158}']
  end;

  ///<summary>
  ///  Represents a Microsoft Word document field.
  ///</summary>
  ///<remarks><para>A field in a Word document is a complex structure consisting of multiple nodes that include field start,
  ///  field code, field separator, field result and field end. Fields can be nested, contain rich content and span
  ///  multiple paragraphs or sections in a document. The <see cref="T:Aspose.Words.Fields.Field" />
  ///  class is a "facade" object that provides
  ///  properties and methods that allow to work with a field as a single object. </para><para>The <see cref="P:Aspose.Words.Fields.Field.Start" />
  ///  , <see cref="P:Aspose.Words.Fields.Field.Separator" />
  ///  and <see cref="P:Aspose.Words.Fields.Field.End" />
  ///  properties point to the
  ///  field start, separator and end nodes of the field respectively.</para><para>The content between the field start and separator is the field code. The content between the
  ///  field separator and field end is the field result. The field code typically consists of one or more
  ///<see cref="T:Aspose.Words.Run" />
  ///  objects that specify instructions. The processing application is expected to execute
  ///  the field code to calculate the field result.</para><para>The process of calculating field results is called the field update. Aspose.Words can update field
  ///  results of most of the field types in exactly the same way as Microsoft Word does it. Most notably,
  ///  Aspose.Words can calculate results of even the most complex formula fields. To calculate the field
  ///  result of a single field use the <see cref="M:Aspose.Words.Fields.Field.Update" />
  ///  method. To update fields in the whole document
  ///  use <see cref="M:Aspose.Words.Document.UpdateFields" />
  ///  .</para><para>You can get the plain text version of the field code using the <see cref="M:Aspose.Words.Fields.Field.GetFieldCode(System.Boolean)" />
  ///  method.
  ///  You can get and set the plain text version of the field result using the <see cref="P:Aspose.Words.Fields.Field.Result" />
  ///  property.
  ///  Both the field code and field result can contain complex content, such as nested fields, paragraphs, shapes,
  ///  tables and in this case you might want to work with the field nodes directly if you need more control.</para><para>You do not create instances of the <see cref="T:Aspose.Words.Fields.Field" />
  ///  class directly.
  ///  To create a new field use the <see cref="M:Aspose.Words.DocumentBuilder.InsertField(System.String)" />
  ///  method.</para></remarks>
  [DNTypeName('Aspose.Words.Fields.Field')]
  DNField = interface(DDN.mscorlib.DNObject)
  ['{229A53BC-A029-39E4-A768-37A0F2672484}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNField = class(TDNGenericImport<DNFieldClass, DNField>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldAddInClass = interface(DNFieldClass)
  ['{5DC105C2-C2B9-543D-BD64-832DABF32F6D}']
  { constructors } 

    {class} function init: DNFieldAddIn;

  end;

  ///<summary>
  ///  Implements the ADDIN field.
  ///</summary>
  ///<remarks>
  ///  Contains data created by an add-in.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldAddIn')]
  DNFieldAddIn = interface(DNField)
  ['{E61CA7B1-B894-3B3E-A763-E8FCF439162A}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldAddIn = class(TDNGenericImport<DNFieldAddInClass, DNFieldAddIn>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldAddressBlockClass = interface(DNFieldClass)
  ['{157EA77C-1990-5456-A4D8-93A1995A89B2}']
  { constructors } 

    {class} function init: DNFieldAddressBlock;

  end;

  ///<summary>
  ///  Implements the ADDRESSBLOCK field.
  ///</summary>
  ///<remarks>
  ///  Represents an address block. An <i>address block</i> is a block of text specifying information
  ///  appropriate for a postal mailing address, in the order required by the destination country.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldAddressBlock')]
  DNFieldAddressBlock = interface(DNField)
  ['{73FF1AFC-7C08-31C9-B8A0-41AC2CD288A2}']
  { getters & setters } 

    function get_FormatAddressOnCountryOrRegion: Boolean;
    procedure set_FormatAddressOnCountryOrRegion(value: Boolean);
    function get_IncludeCountryOrRegionName: string;
    procedure set_IncludeCountryOrRegionName(value: string);
    function get_ExcludedCountryOrRegionName: string;
    procedure set_ExcludedCountryOrRegionName(value: string);
    function get_NameAndAddressFormat: string;
    procedure set_NameAndAddressFormat(value: string);
    function get_LanguageId: string;
    procedure set_LanguageId(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns a collection of mail merge field names used by the field.
    ///</summary>
    function GetFieldNames: TArray<string>;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets whether to format the address according to the country/region of the recipient
    ///  as defined by POST*CODE (Universal Postal Union 2006).
    ///</summary>
    property FormatAddressOnCountryOrRegion: Boolean read get_FormatAddressOnCountryOrRegion write set_FormatAddressOnCountryOrRegion;
    ///<summary>
    ///  Gets or sets whether to include the name of the country/region.
    ///</summary>
    property IncludeCountryOrRegionName: string read get_IncludeCountryOrRegionName write set_IncludeCountryOrRegionName;
    ///<summary>
    ///  Gets or sets the excluded country/region name.
    ///</summary>
    ///<dev>TODO DV May be more than one.</dev>
    property ExcludedCountryOrRegionName: string read get_ExcludedCountryOrRegionName write set_ExcludedCountryOrRegionName;
    ///<summary>
    ///  Gets or sets the name and address format.
    ///</summary>
    property NameAndAddressFormat: string read get_NameAndAddressFormat write set_NameAndAddressFormat;
    ///<summary>
    ///  Gets or sets the language ID used to format the address.
    ///</summary>
    property LanguageId: string read get_LanguageId write set_LanguageId;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldAddressBlock = class(TDNGenericImport<DNFieldAddressBlockClass, DNFieldAddressBlock>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldAdvanceClass = interface(DNFieldClass)
  ['{6B6F79B2-C6B8-5032-B35F-512C78159E34}']
  { constructors } 

    {class} function init: DNFieldAdvance;

  end;

  ///<summary>
  ///  Implements the ADVANCE field.
  ///</summary>
  ///<remarks>
  ///  Moves the starting point at which the text that lexically follows the field is displayed to the right or left,
  ///  up or down, or to a specific horizontal or vertical position.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldAdvance')]
  DNFieldAdvance = interface(DNField)
  ['{2894E0BC-2D99-3E28-9440-534CFBAF7B9F}']
  { getters & setters } 

    function get_DownOffset: string;
    procedure set_DownOffset(value: string);
    function get_LeftOffset: string;
    procedure set_LeftOffset(value: string);
    function get_RightOffset: string;
    procedure set_RightOffset(value: string);
    function get_UpOffset: string;
    procedure set_UpOffset(value: string);
    function get_HorizontalPosition: string;
    procedure set_HorizontalPosition(value: string);
    function get_VerticalPosition: string;
    procedure set_VerticalPosition(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the number of points by which the text that follows the field should be moved down.
    ///</summary>
    property DownOffset: string read get_DownOffset write set_DownOffset;
    ///<summary>
    ///  Gets or sets the number of points by which the text that follows the field should be moved left.
    ///</summary>
    property LeftOffset: string read get_LeftOffset write set_LeftOffset;
    ///<summary>
    ///  Gets or sets the number of points by which the text that follows the field should be moved right.
    ///</summary>
    property RightOffset: string read get_RightOffset write set_RightOffset;
    ///<summary>
    ///  Gets or sets the number of points by which the text that follows the field should be moved up.
    ///</summary>
    property UpOffset: string read get_UpOffset write set_UpOffset;
    ///<summary>
    ///  Gets or sets the number of points by which the text that follows the field should be moved horizontally
    ///  from the left edge of the column, frame, or text box.
    ///</summary>
    property HorizontalPosition: string read get_HorizontalPosition write set_HorizontalPosition;
    ///<summary>
    ///  Gets or sets the number of points by which the text that follows the field should be moved vertically
    ///  from the top edge of the page.
    ///</summary>
    property VerticalPosition: string read get_VerticalPosition write set_VerticalPosition;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldAdvance = class(TDNGenericImport<DNFieldAdvanceClass, DNFieldAdvance>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldAskClass = interface(DNFieldClass)
  ['{9D08BEFB-E239-51F2-B0F7-E9282257B2E1}']
  { constructors } 

    {class} function init: DNFieldAsk;

  end;

  ///<summary>
  ///  Implements the ASK field.
  ///</summary>
  ///<remarks>
  ///  Prompts the user to enter information and assigns a bookmark to represent the user's response.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldAsk')]
  DNFieldAsk = interface(DNField)
  ['{A85B5276-4983-3A4C-9469-63B0D4D7300B}']
  { getters & setters } 

    function get_BookmarkName: string;
    procedure set_BookmarkName(value: string);
    function get_PromptText: string;
    procedure set_PromptText(value: string);
    function get_DefaultResponse: string;
    procedure set_DefaultResponse(value: string);
    function get_PromptOnceOnMailMerge: Boolean;
    procedure set_PromptOnceOnMailMerge(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the name of the bookmark.
    ///</summary>
    property BookmarkName: string read get_BookmarkName write set_BookmarkName;
    ///<summary>
    ///  Gets or sets the prompt text (the title of the prompt window).
    ///</summary>
    property PromptText: string read get_PromptText write set_PromptText;
    ///<summary>
    ///  Gets or sets default user response (initial value contained in the prompt window).
    ///</summary>
    property DefaultResponse: string read get_DefaultResponse write set_DefaultResponse;
    ///<summary>
    ///  Gets or sets whether the user response should be recieved once per a mail merge operation.
    ///</summary>
    property PromptOnceOnMailMerge: Boolean read get_PromptOnceOnMailMerge write set_PromptOnceOnMailMerge;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldAsk = class(TDNGenericImport<DNFieldAskClass, DNFieldAsk>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldAuthorClass = interface(DNFieldClass)
  ['{FF48DD4C-990F-574A-8C94-53E2BD53D20B}']
  { constructors } 

    {class} function init: DNFieldAuthor;

  end;

  ///<summary>
  ///  Implements the AUTHOR field.
  ///</summary>
  ///<remarks>
  ///  Retrieves, and optionally sets, the document author's name, as recorded in the <b>Author</b>
  ///  property of the
  ///  built-in document properties.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldAuthor')]
  DNFieldAuthor = interface(DNField)
  ['{1DEAEA38-C2A2-3405-8977-FFD22230DEA8}']
  { getters & setters } 

    function get_AuthorName: string;
    procedure set_AuthorName(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the document author's name.
    ///</summary>
    property AuthorName: string read get_AuthorName write set_AuthorName;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldAuthor = class(TDNGenericImport<DNFieldAuthorClass, DNFieldAuthor>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldAutoNumClass = interface(DNFieldClass)
  ['{759BDAB4-448F-5A2A-94E4-EC275ADE20E0}']
  { constructors } 

    {class} function init: DNFieldAutoNum;

  end;

  ///<summary>
  ///  Implements the AUTONUM field.
  ///</summary>
  ///<remarks>
  ///  Inserts an automatic number.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldAutoNum')]
  DNFieldAutoNum = interface(DNField)
  ['{71A59ADA-5A60-3806-9B8E-8F40F775BAF8}']
  { getters & setters } 

    function get_SeparatorCharacter: string;
    procedure set_SeparatorCharacter(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the separator character to be used.
    ///</summary>
    property SeparatorCharacter: string read get_SeparatorCharacter write set_SeparatorCharacter;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldAutoNum = class(TDNGenericImport<DNFieldAutoNumClass, DNFieldAutoNum>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldAutoNumLglClass = interface(DNFieldClass)
  ['{E48AFDE4-46F5-5BA1-85F2-169900CEE000}']
  { constructors } 

    {class} function init: DNFieldAutoNumLgl;

  end;

  ///<summary>
  ///  Implements the AUTONUMLGL field.
  ///</summary>
  ///<remarks>
  ///  Inserts an automatic number in legal format.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldAutoNumLgl')]
  DNFieldAutoNumLgl = interface(DNField)
  ['{C8D67FAD-ECF3-3719-875C-175858A0F493}']
  { getters & setters } 

    function get_RemoveTrailingPeriod: Boolean;
    procedure set_RemoveTrailingPeriod(value: Boolean);
    function get_SeparatorCharacter: string;
    procedure set_SeparatorCharacter(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets whether to display the number without a trailing period.
    ///</summary>
    property RemoveTrailingPeriod: Boolean read get_RemoveTrailingPeriod write set_RemoveTrailingPeriod;
    ///<summary>
    ///  Gets or sets the separator character to be used.
    ///</summary>
    property SeparatorCharacter: string read get_SeparatorCharacter write set_SeparatorCharacter;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldAutoNumLgl = class(TDNGenericImport<DNFieldAutoNumLglClass, DNFieldAutoNumLgl>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldAutoNumOutClass = interface(DNFieldClass)
  ['{D97314B1-F319-5411-ABA6-F9596190C157}']
  { constructors } 

    {class} function init: DNFieldAutoNumOut;

  end;

  ///<summary>
  ///  Implements the AUTONUMOUT field.
  ///</summary>
  ///<remarks>
  ///  Inserts an automatic number in outline format.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldAutoNumOut')]
  DNFieldAutoNumOut = interface(DNField)
  ['{E12540DA-3962-3C1B-A861-5593B1B3BA5D}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldAutoNumOut = class(TDNGenericImport<DNFieldAutoNumOutClass, DNFieldAutoNumOut>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldAutoTextClass = interface(DNFieldClass)
  ['{CB955D7C-919A-517E-8DE5-7C7079E1DD93}']
  { constructors } 

    {class} function init: DNFieldAutoText;

  end;

  ///<summary>
  ///  Implements the AUTOTEXT field.
  ///</summary>
  ///<remarks>
  ///  Inserts an AutoText entry.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldAutoText')]
  DNFieldAutoText = interface(DNField)
  ['{DFF9D88C-8259-357D-A80C-B83F47433086}']
  { getters & setters } 

    function get_EntryName: string;
    procedure set_EntryName(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the name of the AutoText entry.
    ///</summary>
    property EntryName: string read get_EntryName write set_EntryName;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldAutoText = class(TDNGenericImport<DNFieldAutoTextClass, DNFieldAutoText>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldAutoTextListClass = interface(DNFieldClass)
  ['{B3D5C7CC-DD0E-537B-B272-2EF542E8E16A}']
  { constructors } 

    {class} function init: DNFieldAutoTextList;

  end;

  ///<summary>
  ///  Implements the AUTOTEXTLIST field.
  ///</summary>
  ///<remarks>
  ///  Creates a shortcut menu based on AutoText entries in the active template.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldAutoTextList')]
  DNFieldAutoTextList = interface(DNField)
  ['{4E87F851-01C5-36B0-B33F-75E2C85DDFD4}']
  { getters & setters } 

    function get_EntryName: string;
    procedure set_EntryName(value: string);
    function get_ListStyle: string;
    procedure set_ListStyle(value: string);
    function get_ScreenTip: string;
    procedure set_ScreenTip(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the name of the AutoText entry.
    ///</summary>
    property EntryName: string read get_EntryName write set_EntryName;
    ///<summary>
    ///  Gets or sets the name of the style on which the list to contain entries is based.
    ///</summary>
    property ListStyle: string read get_ListStyle write set_ListStyle;
    ///<summary>
    ///  Gets or sets the text of the ScreenTip to show.
    ///</summary>
    property ScreenTip: string read get_ScreenTip write set_ScreenTip;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldAutoTextList = class(TDNGenericImport<DNFieldAutoTextListClass, DNFieldAutoTextList>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldBarcodeClass = interface(DNFieldClass)
  ['{7CDABC97-745E-5079-909C-078A82F2B4B8}']
  { constructors } 

    {class} function init: DNFieldBarcode;

  end;

  ///<summary>
  ///  Implements the BARCODE field.
  ///</summary>
  ///<remarks>
  ///  Inserts a postal barcode in a machine-readable form of address used by the U.S. Postal Service.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldBarcode')]
  DNFieldBarcode = interface(DNField)
  ['{C48961D5-5D42-3500-A8B6-3259D7572745}']
  { getters & setters } 

    function get_PostalAddress: string;
    procedure set_PostalAddress(value: string);
    function get_IsBookmark: Boolean;
    procedure set_IsBookmark(value: Boolean);
    function get_FacingIdentificationMark: string;
    procedure set_FacingIdentificationMark(value: string);
    function get_IsUSPostalAddress: Boolean;
    procedure set_IsUSPostalAddress(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the postal address used for generating a barcode or the name of the bookmark that refers to it.
    ///</summary>
    property PostalAddress: string read get_PostalAddress write set_PostalAddress;
    ///<summary>
    ///  Gets or sets whether <see cref="P:Aspose.Words.Fields.FieldBarcode.PostalAddress" />
    ///  is the name of a bookmark.
    ///</summary>
    property IsBookmark: Boolean read get_IsBookmark write set_IsBookmark;
    ///<summary>
    ///  Gets or sets the type of a Facing Identification Mark (FIM) to insert.
    ///</summary>
    property FacingIdentificationMark: string read get_FacingIdentificationMark write set_FacingIdentificationMark;
    ///<summary>
    ///  Gets or sets whether <see cref="P:Aspose.Words.Fields.FieldBarcode.PostalAddress" />
    ///  is a U.S. postal address.
    ///</summary>
    property IsUSPostalAddress: Boolean read get_IsUSPostalAddress write set_IsUSPostalAddress;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldBarcode = class(TDNGenericImport<DNFieldBarcodeClass, DNFieldBarcode>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldBibliographyClass = interface(DNFieldClass)
  ['{8E1E9A17-0D3A-563C-8A98-85BFD8F53D76}']
  { constructors } 

    {class} function init: DNFieldBibliography;

  end;

  ///<summary>
  ///  Implements the BIBLIOGRAPHY field.
  ///</summary>
  ///<remarks>Inserts the contents of the document's Bibliography part in a bibliographic style.</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldBibliography')]
  DNFieldBibliography = interface(DNField)
  ['{A844C3A9-967F-315A-A84E-58BC59524C1A}']
  { getters & setters } 

    function get_FormatLanguageId: string;
    procedure set_FormatLanguageId(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the language ID that is used to format the bibliographic sources in the document.
    ///</summary>
    property FormatLanguageId: string read get_FormatLanguageId write set_FormatLanguageId;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldBibliography = class(TDNGenericImport<DNFieldBibliographyClass, DNFieldBibliography>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldBidiOutlineClass = interface(DNFieldClass)
  ['{055C022F-1356-5153-AC64-8177D680E1CD}']
  { constructors } 

    {class} function init: DNFieldBidiOutline;

  end;

  ///<summary>
  ///  Implements the BIDIOUTLINE field.
  ///</summary>
  ///<remarks>
  ///  This field is identical to the AUTONUMLGL field, except for the separator that delimits each level
  ///  of the paragraph numbering.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldBidiOutline')]
  DNFieldBidiOutline = interface(DNField)
  ['{B78597AE-44B1-3897-A7F8-FA1A04F7175A}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldBidiOutline = class(TDNGenericImport<DNFieldBidiOutlineClass, DNFieldBidiOutline>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldCitationClass = interface(DNFieldClass)
  ['{D0F73E71-C31A-5E6E-A68C-0F7F14F1B09C}']
  { constructors } 

    {class} function init: DNFieldCitation;

  end;

  ///<summary>
  ///  Implements the CITATION field.
  ///</summary>
  ///<remarks>
  ///  Inserts the contents of the <b>Source</b>
  ///  element with a specified <b>Tag</b>
  ///  element using a bibliographic style.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldCitation')]
  DNFieldCitation = interface(DNField)
  ['{5F73992B-A27E-3E8B-B511-CD3C9020E96B}']
  { getters & setters } 

    function get_SourceTag: string;
    procedure set_SourceTag(value: string);
    function get_FormatLanguageId: string;
    procedure set_FormatLanguageId(value: string);
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_Suffix: string;
    procedure set_Suffix(value: string);
    function get_SuppressAuthor: Boolean;
    procedure set_SuppressAuthor(value: Boolean);
    function get_SuppressTitle: Boolean;
    procedure set_SuppressTitle(value: Boolean);
    function get_SuppressYear: Boolean;
    procedure set_SuppressYear(value: Boolean);
    function get_PageNumber: string;
    procedure set_PageNumber(value: string);
    function get_VolumeNumber: string;
    procedure set_VolumeNumber(value: string);
    function get_AnotherSourceTag: string;
    procedure set_AnotherSourceTag(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a value that mathes the <b>Tag</b>
    ///  element's value of the source to insert.
    ///</summary>
    property SourceTag: string read get_SourceTag write set_SourceTag;
    ///<summary>
    ///  Gets or sets the language ID that is used in conjunction with the specified bibliographic style to format the citation
    ///  in the document.
    ///</summary>
    property FormatLanguageId: string read get_FormatLanguageId write set_FormatLanguageId;
    ///<summary>
    ///  Gets or sets a prefix that is prepended to the citation.
    ///</summary>
    property Prefix: string read get_Prefix write set_Prefix;
    ///<summary>
    ///  Gets or sets a suffix that is appended to the citation.
    ///</summary>
    property Suffix: string read get_Suffix write set_Suffix;
    ///<summary>
    ///  Gets or sets whether the author information is suppressed from the citation.
    ///</summary>
    property SuppressAuthor: Boolean read get_SuppressAuthor write set_SuppressAuthor;
    ///<summary>
    ///  Gets or sets whether the title information is suppressed from the citation.
    ///</summary>
    property SuppressTitle: Boolean read get_SuppressTitle write set_SuppressTitle;
    ///<summary>
    ///  Gets or sets whether the year information is suppressed from the citation.
    ///</summary>
    property SuppressYear: Boolean read get_SuppressYear write set_SuppressYear;
    ///<summary>
    ///  Gets or sets a page number associated with the citation.
    ///</summary>
    property PageNumber: string read get_PageNumber write set_PageNumber;
    ///<summary>
    ///  Gets or sets a volume number associated with the citation.
    ///</summary>
    property VolumeNumber: string read get_VolumeNumber write set_VolumeNumber;
    ///<summary>
    ///  Gets or sets a value that mathes the <b>Tag</b>
    ///  element's value of another source to be included in the citation.
    ///</summary>
    property AnotherSourceTag: string read get_AnotherSourceTag write set_AnotherSourceTag;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldCitation = class(TDNGenericImport<DNFieldCitationClass, DNFieldCitation>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldCommentsClass = interface(DNFieldClass)
  ['{7F747C94-1C21-5544-AACB-D69C0378DC63}']
  { constructors } 

    {class} function init: DNFieldComments;

  end;

  ///<summary>
  ///  Implements the COMMENTS field.
  ///</summary>
  ///<remarks>
  ///  Retrieves, and optionally sets, the comments relating to the current document, as recorded in the <b>Comments</b>
  ///  property
  ///  of the built-in document properties.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldComments')]
  DNFieldComments = interface(DNField)
  ['{F7575D18-0228-386F-B123-16E9DDDA313F}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the text of the comments.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldComments = class(TDNGenericImport<DNFieldCommentsClass, DNFieldComments>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldCompareClass = interface(DNFieldClass)
  ['{78767D18-3147-596B-8053-944FCE5EDE2F}']
  { constructors } 

    {class} function init: DNFieldCompare;

  end;

  ///<summary>
  ///  Implements the COMPARE field.
  ///</summary>
  ///<remarks>
  ///  Compares the values designated by the expressions <see cref="P:Aspose.Words.Fields.FieldCompare.LeftExpression" />
  ///  and <see cref="P:Aspose.Words.Fields.FieldCompare.RightExpression" />
  ///  in comparison using the operator designated by <see cref="P:Aspose.Words.Fields.FieldCompare.ComparisonOperator" />
  ///  .
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldCompare')]
  DNFieldCompare = interface(DNField)
  ['{E6B34847-1A7B-3C66-AF21-926AC4827652}']
  { getters & setters } 

    function get_LeftExpression: string;
    procedure set_LeftExpression(value: string);
    function get_ComparisonOperator: string;
    procedure set_ComparisonOperator(value: string);
    function get_RightExpression: string;
    procedure set_RightExpression(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the left part of the comparison expression.
    ///</summary>
    property LeftExpression: string read get_LeftExpression write set_LeftExpression;
    ///<summary>
    ///  Gets or sets the comparison operator.
    ///</summary>
    property ComparisonOperator: string read get_ComparisonOperator write set_ComparisonOperator;
    ///<summary>
    ///  Gets or sets the right part of the comparison expression.
    ///</summary>
    property RightExpression: string read get_RightExpression write set_RightExpression;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldCompare = class(TDNGenericImport<DNFieldCompareClass, DNFieldCompare>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldCreateDateClass = interface(DNFieldClass)
  ['{6A77BA44-3892-5C64-9139-C4D5F05DEC0C}']
  { constructors } 

    {class} function init: DNFieldCreateDate;

  end;

  ///<summary>
  ///  Implements the CREATEDATE field.
  ///</summary>
  ///<remarks>
  ///  Retrieves the date and time at which the document was created. By default, the Gregorian calendar is used.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldCreateDate')]
  DNFieldCreateDate = interface(DNField)
  ['{D509863E-6031-33E8-8B8A-E85317D4D11A}']
  { getters & setters } 

    function get_UseLunarCalendar: Boolean;
    procedure set_UseLunarCalendar(value: Boolean);
    function get_UseSakaEraCalendar: Boolean;
    procedure set_UseSakaEraCalendar(value: Boolean);
    function get_UseUmAlQuraCalendar: Boolean;
    procedure set_UseUmAlQuraCalendar(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets whether to use the Hijri Lunar or Hebrew Lunar calendar.
    ///</summary>
    property UseLunarCalendar: Boolean read get_UseLunarCalendar write set_UseLunarCalendar;
    ///<summary>
    ///  Gets or sets whether to use the Saka Era calendar.
    ///</summary>
    property UseSakaEraCalendar: Boolean read get_UseSakaEraCalendar write set_UseSakaEraCalendar;
    ///<summary>
    ///  Gets or sets whether to use the Um-al-Qura calendar.
    ///</summary>
    property UseUmAlQuraCalendar: Boolean read get_UseUmAlQuraCalendar write set_UseUmAlQuraCalendar;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldCreateDate = class(TDNGenericImport<DNFieldCreateDateClass, DNFieldCreateDate>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldDataClass = interface(DNFieldClass)
  ['{2EF6A561-4727-5C1D-841E-06507014829E}']
  { constructors } 

    {class} function init: DNFieldData;

  end;

  ///<summary>
  ///  Implements the DATA field.
  ///</summary>
  [DNTypeName('Aspose.Words.Fields.FieldData')]
  DNFieldData = interface(DNField)
  ['{2510FC93-D8FD-3F5A-B9B9-B786DF37EAF0}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldData = class(TDNGenericImport<DNFieldDataClass, DNFieldData>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldDatabaseClass = interface(DNFieldClass)
  ['{533C701D-1B92-5581-A947-3CC6349FB451}']
  { constructors } 

    {class} function init: DNFieldDatabase;

  end;

  ///<summary>
  ///  Implements the DATABASE field.
  ///</summary>
  ///<remarks>
  ///  Inserts the results of a database query into a WordprocessingML table.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldDatabase')]
  DNFieldDatabase = interface(DNField)
  ['{E9B70AF2-77CE-3095-835B-1D92F55E616E}']
  { getters & setters } 

    function get_FormatAttributes: string;
    procedure set_FormatAttributes(value: string);
    function get_Connection: string;
    procedure set_Connection(value: string);
    function get_FileName: string;
    procedure set_FileName(value: string);
    function get_FirstRecord: string;
    procedure set_FirstRecord(value: string);
    function get_InsertHeadings: Boolean;
    procedure set_InsertHeadings(value: Boolean);
    function get_TableFormat: string;
    procedure set_TableFormat(value: string);
    function get_InsertOnceOnMailMerge: Boolean;
    procedure set_InsertOnceOnMailMerge(value: Boolean);
    function get_Query: string;
    procedure set_Query(value: string);
    function get_LastRecord: string;
    procedure set_LastRecord(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets which attributes of the format are to be applied to the table.
    ///</summary>
    property FormatAttributes: string read get_FormatAttributes write set_FormatAttributes;
    ///<summary>
    ///  Gets or sets a connection to the data.
    ///</summary>
    property Connection: string read get_Connection write set_Connection;
    ///<summary>
    ///  Gets or sets the complete path and file name of the database
    ///</summary>
    property FileName: string read get_FileName write set_FileName;
    ///<summary>
    ///  Gets or sets the integral record number of the first data record to insert.
    ///</summary>
    property FirstRecord: string read get_FirstRecord write set_FirstRecord;
    ///<summary>
    ///  Gets or sets whether to insert the field names from the database as column headings in
    ///  the resulting table.
    ///</summary>
    property InsertHeadings: Boolean read get_InsertHeadings write set_InsertHeadings;
    ///<summary>
    ///  Gets or sets the format that is to be applied to the result of the database query.
    ///</summary>
    property TableFormat: string read get_TableFormat write set_TableFormat;
    ///<summary>
    ///  Gets or sets whether to insert data at the beginning of a merge.
    ///</summary>
    property InsertOnceOnMailMerge: Boolean read get_InsertOnceOnMailMerge write set_InsertOnceOnMailMerge;
    ///<summary>
    ///  Gets or sets a set of SQL instructions that query the database.
    ///</summary>
    property Query: string read get_Query write set_Query;
    ///<summary>
    ///  Gets or sets the integral record number of the last data record to insert.
    ///</summary>
    property LastRecord: string read get_LastRecord write set_LastRecord;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldDatabase = class(TDNGenericImport<DNFieldDatabaseClass, DNFieldDatabase>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldDateClass = interface(DNFieldClass)
  ['{3C76FB40-2C7E-5021-85CF-7BB91DAC3642}']
  { constructors } 

    {class} function init: DNFieldDate;

  end;

  ///<summary>
  ///  Implements the DATE field.
  ///</summary>
  ///<remarks>
  ///  Inserts the current date and time. By default, the Gregorian calendar is used.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldDate')]
  DNFieldDate = interface(DNField)
  ['{73F914F8-E864-328F-BCA4-D07EFA609B05}']
  { getters & setters } 

    function get_UseLunarCalendar: Boolean;
    procedure set_UseLunarCalendar(value: Boolean);
    function get_UseLastFormat: Boolean;
    procedure set_UseLastFormat(value: Boolean);
    function get_UseSakaEraCalendar: Boolean;
    procedure set_UseSakaEraCalendar(value: Boolean);
    function get_UseUmAlQuraCalendar: Boolean;
    procedure set_UseUmAlQuraCalendar(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets whether to use the Hijri Lunar or Hebrew Lunar calendar.
    ///</summary>
    property UseLunarCalendar: Boolean read get_UseLunarCalendar write set_UseLunarCalendar;
    ///<summary>
    ///  Gets or sets whether to use a format last used by the hosting application when inserting a new DATE field.
    ///</summary>
    property UseLastFormat: Boolean read get_UseLastFormat write set_UseLastFormat;
    ///<summary>
    ///  Gets or sets whether to use the Saka Era calendar.
    ///</summary>
    property UseSakaEraCalendar: Boolean read get_UseSakaEraCalendar write set_UseSakaEraCalendar;
    ///<summary>
    ///  Gets or sets whether to use the Um-al-Qura calendar.
    ///</summary>
    property UseUmAlQuraCalendar: Boolean read get_UseUmAlQuraCalendar write set_UseUmAlQuraCalendar;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldDate = class(TDNGenericImport<DNFieldDateClass, DNFieldDate>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldDdeClass = interface(DNFieldClass)
  ['{137D4F39-9D53-5BDE-B8A7-3163B93B2E38}']
  { constructors } 

    {class} function init: DNFieldDde;

  end;

  ///<summary>
  ///  Implements the DDE field.
  ///</summary>
  ///<remarks>
  ///  For information copied from another application, this field links that information to its original source file using DDE.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldDde')]
  DNFieldDde = interface(DNField)
  ['{B4827D67-492B-344A-A72C-22728E96623D}']
  { getters & setters } 

    function get_ProgId: string;
    procedure set_ProgId(value: string);
    function get_SourceFullName: string;
    procedure set_SourceFullName(value: string);
    function get_SourceItem: string;
    procedure set_SourceItem(value: string);
    function get_AutoUpdate: Boolean;
    procedure set_AutoUpdate(value: Boolean);
    function get_InsertAsBitmap: Boolean;
    procedure set_InsertAsBitmap(value: Boolean);
    function get_IsLinked: Boolean;
    procedure set_IsLinked(value: Boolean);
    function get_InsertAsHtml: Boolean;
    procedure set_InsertAsHtml(value: Boolean);
    function get_InsertAsPicture: Boolean;
    procedure set_InsertAsPicture(value: Boolean);
    function get_InsertAsRtf: Boolean;
    procedure set_InsertAsRtf(value: Boolean);
    function get_InsertAsText: Boolean;
    procedure set_InsertAsText(value: Boolean);
    function get_InsertAsUnicode: Boolean;
    procedure set_InsertAsUnicode(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the application type of the link information.
    ///</summary>
    property ProgId: string read get_ProgId write set_ProgId;
    ///<summary>
    ///  Gets or sets the name and location of the source file.
    ///</summary>
    property SourceFullName: string read get_SourceFullName write set_SourceFullName;
    ///<summary>
    ///  Gets or sets the portion of the source file that's being linked.
    ///</summary>
    property SourceItem: string read get_SourceItem write set_SourceItem;
    ///<summary>
    ///  Gets or sets whether to update this field automatically.
    ///</summary>
    property AutoUpdate: Boolean read get_AutoUpdate write set_AutoUpdate;
    ///<summary>
    ///  Gets or sets whether to insert the linked object as a bitmap.
    ///</summary>
    property InsertAsBitmap: Boolean read get_InsertAsBitmap write set_InsertAsBitmap;
    ///<summary>
    ///  Gets or sets whether to reduce the file size by not storing graphics data with the document.
    ///</summary>
    property IsLinked: Boolean read get_IsLinked write set_IsLinked;
    ///<summary>
    ///  Gets or sets whether to insert the linked object as HTML format text.
    ///</summary>
    property InsertAsHtml: Boolean read get_InsertAsHtml write set_InsertAsHtml;
    ///<summary>
    ///  Gets or sets whether to insert the linked object as a picture.
    ///</summary>
    property InsertAsPicture: Boolean read get_InsertAsPicture write set_InsertAsPicture;
    ///<summary>
    ///  Gets or sets whether to insert the linked object in rich-text format (RTF).
    ///</summary>
    property InsertAsRtf: Boolean read get_InsertAsRtf write set_InsertAsRtf;
    ///<summary>
    ///  Gets or sets whether to insert the linked object in text-only format.
    ///</summary>
    property InsertAsText: Boolean read get_InsertAsText write set_InsertAsText;
    ///<summary>
    ///  Gets or sets whether to insert the linked object as Unicode text.
    ///</summary>
    property InsertAsUnicode: Boolean read get_InsertAsUnicode write set_InsertAsUnicode;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldDde = class(TDNGenericImport<DNFieldDdeClass, DNFieldDde>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldDdeAutoClass = interface(DNFieldClass)
  ['{D7E71541-0A87-5238-A6B0-D7E659CB971C}']
  { constructors } 

    {class} function init: DNFieldDdeAuto;

  end;

  ///<summary>
  ///  Implements the DDEAUTO field.
  ///</summary>
  ///<remarks>
  ///  For information copied from another application, this field links that information to its original source file using DDE
  ///  and is updated automatically.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldDdeAuto')]
  DNFieldDdeAuto = interface(DNField)
  ['{97160B19-DFCC-3F46-A713-F84B5C1BFCCE}']
  { getters & setters } 

    function get_ProgId: string;
    procedure set_ProgId(value: string);
    function get_SourceFullName: string;
    procedure set_SourceFullName(value: string);
    function get_SourceItem: string;
    procedure set_SourceItem(value: string);
    function get_InsertAsBitmap: Boolean;
    procedure set_InsertAsBitmap(value: Boolean);
    function get_IsLinked: Boolean;
    procedure set_IsLinked(value: Boolean);
    function get_InsertAsHtml: Boolean;
    procedure set_InsertAsHtml(value: Boolean);
    function get_InsertAsPicture: Boolean;
    procedure set_InsertAsPicture(value: Boolean);
    function get_InsertAsRtf: Boolean;
    procedure set_InsertAsRtf(value: Boolean);
    function get_InsertAsText: Boolean;
    procedure set_InsertAsText(value: Boolean);
    function get_InsertAsUnicode: Boolean;
    procedure set_InsertAsUnicode(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the application type of the link information.
    ///</summary>
    property ProgId: string read get_ProgId write set_ProgId;
    ///<summary>
    ///  Gets or sets the name and location of the source file.
    ///</summary>
    property SourceFullName: string read get_SourceFullName write set_SourceFullName;
    ///<summary>
    ///  Gets or sets the portion of the source file that's being linked.
    ///</summary>
    property SourceItem: string read get_SourceItem write set_SourceItem;
    ///<summary>
    ///  Gets or sets whether to insert the linked object as a bitmap.
    ///</summary>
    property InsertAsBitmap: Boolean read get_InsertAsBitmap write set_InsertAsBitmap;
    ///<summary>
    ///  Gets or sets whether to reduce the file size by not storing graphics data with the document.
    ///</summary>
    property IsLinked: Boolean read get_IsLinked write set_IsLinked;
    ///<summary>
    ///  Gets or sets whether to insert the linked object as HTML format text.
    ///</summary>
    property InsertAsHtml: Boolean read get_InsertAsHtml write set_InsertAsHtml;
    ///<summary>
    ///  Gets or sets whether to insert the linked object as a picture.
    ///</summary>
    property InsertAsPicture: Boolean read get_InsertAsPicture write set_InsertAsPicture;
    ///<summary>
    ///  Gets or sets whether to insert the linked object in rich-text format (RTF).
    ///</summary>
    property InsertAsRtf: Boolean read get_InsertAsRtf write set_InsertAsRtf;
    ///<summary>
    ///  Gets or sets whether to insert the linked object in text-only format.
    ///</summary>
    property InsertAsText: Boolean read get_InsertAsText write set_InsertAsText;
    ///<summary>
    ///  Gets or sets whether to insert the linked object as Unicode text.
    ///</summary>
    property InsertAsUnicode: Boolean read get_InsertAsUnicode write set_InsertAsUnicode;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldDdeAuto = class(TDNGenericImport<DNFieldDdeAutoClass, DNFieldDdeAuto>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldDisplayBarcodeClass = interface(DNFieldClass)
  ['{87079811-4396-5B48-9079-B7DAA3FF7D00}']
  { constructors } 

    {class} function init: DNFieldDisplayBarcode;

  end;

  ///<summary>
  ///  Implements the DISPLAYBARCODE field.
  ///</summary>
  ///<remarks>
  ///  Inserts a barcode.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldDisplayBarcode')]
  DNFieldDisplayBarcode = interface(DNField)
  ['{3E90513A-929C-351F-A9DE-73727AFC71A6}']
  { getters & setters } 

    function get_BarcodeValue: string;
    procedure set_BarcodeValue(value: string);
    function get_BarcodeType: string;
    procedure set_BarcodeType(value: string);
    function get_SymbolHeight: string;
    procedure set_SymbolHeight(value: string);
    function get_SymbolRotation: string;
    procedure set_SymbolRotation(value: string);
    function get_ScalingFactor: string;
    procedure set_ScalingFactor(value: string);
    function get_ForegroundColor: string;
    procedure set_ForegroundColor(value: string);
    function get_BackgroundColor: string;
    procedure set_BackgroundColor(value: string);
    function get_PosCodeStyle: string;
    procedure set_PosCodeStyle(value: string);
    function get_CaseCodeStyle: string;
    procedure set_CaseCodeStyle(value: string);
    function get_ErrorCorrectionLevel: string;
    procedure set_ErrorCorrectionLevel(value: string);
    function get_DisplayText: Boolean;
    procedure set_DisplayText(value: Boolean);
    function get_AddStartStopChar: Boolean;
    procedure set_AddStartStopChar(value: Boolean);
    function get_FixCheckDigit: Boolean;
    procedure set_FixCheckDigit(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the barcode value.
    ///</summary>
    property BarcodeValue: string read get_BarcodeValue write set_BarcodeValue;
    ///<summary>
    ///  Gets or sets the barcode type (QR, etc.)
    ///</summary>
    property BarcodeType: string read get_BarcodeType write set_BarcodeType;
    ///<summary>
    ///  Gets or sets the height of the symbol. The units are in TWIPS (1/1440 inch).
    ///</summary>
    property SymbolHeight: string read get_SymbolHeight write set_SymbolHeight;
    ///<summary>
    ///  Gets or sets the rotation of the barcode symbol. Valid values are [0, 3]
    ///</summary>
    property SymbolRotation: string read get_SymbolRotation write set_SymbolRotation;
    ///<summary>
    ///  Gets or sets a scaling factor for the symbol. The value is in whole percentage points and the valid values are [10, 1000]
    ///</summary>
    property ScalingFactor: string read get_ScalingFactor write set_ScalingFactor;
    ///<summary>
    ///  Gets or sets the foreground color of the barcode symbol. Valid values are in the range [0, 0xFFFFFF]
    ///</summary>
    property ForegroundColor: string read get_ForegroundColor write set_ForegroundColor;
    ///<summary>
    ///  Gets or sets the background color of the barcode symbol. Valid values are in the range [0, 0xFFFFFF]
    ///</summary>
    property BackgroundColor: string read get_BackgroundColor write set_BackgroundColor;
    ///<summary>
    ///  Gets or sets the style of a Point of Sale barcode (barcode types UPCA|UPCE|EAN13|EAN8). The valid values (case insensitive) are [STD|SUP2|SUP5|CASE].
    ///</summary>
    property PosCodeStyle: string read get_PosCodeStyle write set_PosCodeStyle;
    ///<summary>
    ///  Gets or sets the style of a Case Code for barcode type ITF14. The valid values are [STD|EXT|ADD]
    ///</summary>
    property CaseCodeStyle: string read get_CaseCodeStyle write set_CaseCodeStyle;
    ///<summary>
    ///  Gets or sets an error correction level of QR Code. Valid values are [0, 3].
    ///</summary>
    property ErrorCorrectionLevel: string read get_ErrorCorrectionLevel write set_ErrorCorrectionLevel;
    ///<summary>
    ///  Gets or sets whether to display barcode data (text) along with image.
    ///</summary>
    property DisplayText: Boolean read get_DisplayText write set_DisplayText;
    ///<summary>
    ///  Gets or sets whether to add Start/Stop characters for barcode types NW7 and CODE39.
    ///</summary>
    property AddStartStopChar: Boolean read get_AddStartStopChar write set_AddStartStopChar;
    ///<summary>
    ///  Gets or sets whether to fix the check digit if itâ€™s invalid.
    ///</summary>
    property FixCheckDigit: Boolean read get_FixCheckDigit write set_FixCheckDigit;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldDisplayBarcode = class(TDNGenericImport<DNFieldDisplayBarcodeClass, DNFieldDisplayBarcode>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldDocPropertyClass = interface(DNFieldClass)
  ['{17FCA47C-77C2-5937-B982-01D575CE0CF0}']
  { constructors } 

    {class} function init: DNFieldDocProperty;

  end;

  ///<summary>
  ///  Implements the DOCPROPERTY field.
  ///</summary>
  ///<remarks>
  ///  Retrieves the indicated document information.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldDocProperty')]
  DNFieldDocProperty = interface(DNField)
  ['{2309AFF9-0C32-3D0C-BBE5-51F8D7FCC61C}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldDocProperty = class(TDNGenericImport<DNFieldDocPropertyClass, DNFieldDocProperty>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldDocVariableClass = interface(DNFieldClass)
  ['{EC9C05C3-94D7-5FFE-B9C6-D3D4961394AE}']
  { constructors } 

    {class} function init: DNFieldDocVariable;

  end;

  ///<summary>
  ///  Implements DOCVARIABLE field.
  ///</summary>
  [DNTypeName('Aspose.Words.Fields.FieldDocVariable')]
  DNFieldDocVariable = interface(DNField)
  ['{A8B71DB2-D6C2-3759-A12F-23778C2AF6FE}']
  { getters & setters } 

    function get_VariableName: string;
    procedure set_VariableName(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the name of the document variable to retrieve.
    ///</summary>
    property VariableName: string read get_VariableName write set_VariableName;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldDocVariable = class(TDNGenericImport<DNFieldDocVariableClass, DNFieldDocVariable>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldEditTimeClass = interface(DNFieldClass)
  ['{857935F8-7FAC-55C7-90FD-B77E862AC22A}']
  { constructors } 

    {class} function init: DNFieldEditTime;

  end;

  ///<summary>
  ///  Implements the EDITTIME field.
  ///</summary>
  ///<remarks>
  ///  Retrieves the total editing time, in minutes, since the document was created.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldEditTime')]
  DNFieldEditTime = interface(DNField)
  ['{4CC3C820-98E9-3BB0-831B-4FBA5AA21558}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldEditTime = class(TDNGenericImport<DNFieldEditTimeClass, DNFieldEditTime>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldEmbedClass = interface(DNFieldClass)
  ['{A257C457-C0FD-5281-9317-3B982834E05A}']
  { constructors } 

    {class} function init: DNFieldEmbed;

  end;

  ///<summary>
  ///  Implements the EMBED field.
  ///</summary>
  [DNTypeName('Aspose.Words.Fields.FieldEmbed')]
  DNFieldEmbed = interface(DNField)
  ['{55CE8CF1-E044-3E06-98DC-15CF5CFE89EA}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldEmbed = class(TDNGenericImport<DNFieldEmbedClass, DNFieldEmbed>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldEQClass = interface(DNFieldClass)
  ['{C81CF2F3-2F6C-50D6-92E2-524BB30EE0CE}']
  { constructors } 

    {class} function init: DNFieldEQ;

  end;

  ///<summary>
  ///  Implements the EQ field.
  ///</summary>
  [DNTypeName('Aspose.Words.Fields.FieldEQ')]
  DNFieldEQ = interface(DNField)
  ['{FCB5C35A-8ABF-35AF-ACBA-5585FCE6B996}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldEQ = class(TDNGenericImport<DNFieldEQClass, DNFieldEQ>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldFileNameClass = interface(DNFieldClass)
  ['{276BD5E3-1727-5C53-B6A6-931CE98F957D}']
  { constructors } 

    {class} function init: DNFieldFileName;

  end;

  ///<summary>
  ///  Implements the FILENAME field.
  ///</summary>
  ///<remarks><p>Retrieves the name of the current document from its storage location.</p>
  ///  <p>In the current implementation, uses the <see cref="P:Aspose.Words.Document.OriginalFileName" />
  ///  property to retrieve
  ///  the file name. If the document was loaded from a stream or created blank, uses the name of the file that is being saved to (if known).</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldFileName')]
  DNFieldFileName = interface(DNField)
  ['{AD6C7B50-4A8A-3B21-9AA5-71A0D1FCA4A4}']
  { getters & setters } 

    function get_IncludeFullPath: Boolean;
    procedure set_IncludeFullPath(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets whether to include the full file path name.
    ///</summary>
    property IncludeFullPath: Boolean read get_IncludeFullPath write set_IncludeFullPath;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldFileName = class(TDNGenericImport<DNFieldFileNameClass, DNFieldFileName>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldFileSizeClass = interface(DNFieldClass)
  ['{5AA4B9A4-FA41-55C0-A153-D0E529780E38}']
  { constructors } 

    {class} function init: DNFieldFileSize;

  end;

  ///<summary>
  ///  Implements the FILESIZE field.
  ///</summary>
  ///<remarks><p>Retrieves the size of the current document's file or 0 if the size cannot be determined.</p>
  ///  <p>In the current implementation, uses the <see cref="P:Aspose.Words.Document.OriginalFileName" />
  ///  property to retrieve
  ///  the file name used to determine the file size.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldFileSize')]
  DNFieldFileSize = interface(DNField)
  ['{8601243E-B485-37BB-858D-81501B34FFD6}']
  { getters & setters } 

    function get_IsInKilobytes: Boolean;
    procedure set_IsInKilobytes(value: Boolean);
    function get_IsInMegabytes: Boolean;
    procedure set_IsInMegabytes(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets whether to display the file size in kilobytes.
    ///</summary>
    property IsInKilobytes: Boolean read get_IsInKilobytes write set_IsInKilobytes;
    ///<summary>
    ///  Gets or sets whether to display the file size in megabytes.
    ///</summary>
    property IsInMegabytes: Boolean read get_IsInMegabytes write set_IsInMegabytes;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldFileSize = class(TDNGenericImport<DNFieldFileSizeClass, DNFieldFileSize>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldFillInClass = interface(DNFieldClass)
  ['{0536757F-B7C4-5D6A-9CEC-96EB70FB2DE3}']
  { constructors } 

    {class} function init: DNFieldFillIn;

  end;

  ///<summary>
  ///  Implements the FILLIN field.
  ///</summary>
  ///<remarks>
  ///  Prompts the user to enter text.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldFillIn')]
  DNFieldFillIn = interface(DNField)
  ['{4B0A92F1-CF17-365A-AFDC-637531A0C8C7}']
  { getters & setters } 

    function get_PromptText: string;
    procedure set_PromptText(value: string);
    function get_PromptOnceOnMailMerge: Boolean;
    procedure set_PromptOnceOnMailMerge(value: Boolean);
    function get_DefaultResponse: string;
    procedure set_DefaultResponse(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the prompt text (the title of the prompt window).
    ///</summary>
    property PromptText: string read get_PromptText write set_PromptText;
    ///<summary>
    ///  Gets or sets whether the user response should be recieved once per a mail merge operation.
    ///</summary>
    property PromptOnceOnMailMerge: Boolean read get_PromptOnceOnMailMerge write set_PromptOnceOnMailMerge;
    ///<summary>
    ///  Gets or sets default user response (initial value contained in the prompt window).
    ///</summary>
    property DefaultResponse: string read get_DefaultResponse write set_DefaultResponse;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldFillIn = class(TDNGenericImport<DNFieldFillInClass, DNFieldFillIn>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldFootnoteRefClass = interface(DNFieldClass)
  ['{AD29AD3C-4005-55F7-B16C-8A7FAE8359FF}']
  { constructors } 

    {class} function init: DNFieldFootnoteRef;

  end;

  ///<summary>
  ///  Implements the FOOTNOTEREF field.
  ///</summary>
  [DNTypeName('Aspose.Words.Fields.FieldFootnoteRef')]
  DNFieldFootnoteRef = interface(DNField)
  ['{B1D56C69-C509-3CD9-A0A6-4722F21E52A3}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldFootnoteRef = class(TDNGenericImport<DNFieldFootnoteRefClass, DNFieldFootnoteRef>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldFormCheckBoxClass = interface(DNFieldClass)
  ['{8EF4F193-86ED-5F89-A0CA-A0BA4B8799B7}']
  { constructors } 

    {class} function init: DNFieldFormCheckBox;

  end;

  ///<summary>
  ///  Implements the FORMCHECKBOX field.
  ///</summary>
  ///<remarks>
  ///  Inserts a check box style form field.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldFormCheckBox')]
  DNFieldFormCheckBox = interface(DNField)
  ['{70FE43B2-D519-3B2D-87E5-A53639315DF5}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldFormCheckBox = class(TDNGenericImport<DNFieldFormCheckBoxClass, DNFieldFormCheckBox>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldFormDropDownClass = interface(DNFieldClass)
  ['{4C5E1629-E4E1-54E3-8D28-326F75ABDF10}']
  { constructors } 

    {class} function init: DNFieldFormDropDown;

  end;

  ///<summary>
  ///  Implements the FORMDROPDOWN field.
  ///</summary>
  ///<remarks>
  ///  Inserts a drop-down list style form field.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldFormDropDown')]
  DNFieldFormDropDown = interface(DNField)
  ['{F1BA1D99-A5F1-3DA9-89BF-65806ED45BD9}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldFormDropDown = class(TDNGenericImport<DNFieldFormDropDownClass, DNFieldFormDropDown>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldFormTextClass = interface(DNFieldClass)
  ['{18647DDA-0091-58FA-8CE6-231DFAD7A37F}']
  { constructors } 

    {class} function init: DNFieldFormText;

  end;

  ///<summary>
  ///  Implements the FORMTEXT field.
  ///</summary>
  ///<remarks>
  ///  Inserts a text box style form field.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldFormText')]
  DNFieldFormText = interface(DNField)
  ['{E4C9933B-8AE7-3749-AF7B-7C88F916D2C6}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldFormText = class(TDNGenericImport<DNFieldFormTextClass, DNFieldFormText>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldFormulaClass = interface(DNFieldClass)
  ['{8E1C9123-18B5-5961-ABD1-E33C1EC10DA7}']
  { constructors } 

    {class} function init: DNFieldFormula;

  end;

  ///<summary>
  ///  Implements the = (formula) field.
  ///</summary>
  ///<remarks>
  ///  Calcualtes the result of an expression.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldFormula')]
  DNFieldFormula = interface(DNField)
  ['{3DE0C309-DF7E-3AA9-A217-4F42ADC3903E}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldFormula = class(TDNGenericImport<DNFieldFormulaClass, DNFieldFormula>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldGlossaryClass = interface(DNFieldClass)
  ['{6666D891-7902-582D-AB5A-BEA85743CE22}']
  { constructors } 

    {class} function init: DNFieldGlossary;

  end;

  ///<summary>
  ///  Implements the GLOSSARY field.
  ///</summary>
  ///<remarks>
  ///  Inserts a glossary entry.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldGlossary')]
  DNFieldGlossary = interface(DNField)
  ['{045D9B22-6F00-3FD9-A4E3-4A3D811844EC}']
  { getters & setters } 

    function get_EntryName: string;
    procedure set_EntryName(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the name of the glossary entry to insert.
    ///</summary>
    property EntryName: string read get_EntryName write set_EntryName;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldGlossary = class(TDNGenericImport<DNFieldGlossaryClass, DNFieldGlossary>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldGoToButtonClass = interface(DNFieldClass)
  ['{42656015-B99C-5E44-A7CD-669485B8CB49}']
  { constructors } 

    {class} function init: DNFieldGoToButton;

  end;

  ///<summary>
  ///  Implements the GOTOBUTTON field.
  ///</summary>
  ///<remarks>
  ///  Inserts a jump command, such that when it is activated, the insertion point of the document is
  ///  moved to the specified location.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldGoToButton')]
  DNFieldGoToButton = interface(DNField)
  ['{07DB9A87-4280-3065-BB4B-132A71F04694}']
  { getters & setters } 

    function get_Location: string;
    procedure set_Location(value: string);
    function get_DisplayText: string;
    procedure set_DisplayText(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the name of a bookmark, a page number, or some other item to jump to.
    ///</summary>
    property Location: string read get_Location write set_Location;
    ///<summary>
    ///  Gets or sets the text of the "button" that appears in the document, such that it can be selected to activate the jump.
    ///</summary>
    property DisplayText: string read get_DisplayText write set_DisplayText;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldGoToButton = class(TDNGenericImport<DNFieldGoToButtonClass, DNFieldGoToButton>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldGreetingLineClass = interface(DNFieldClass)
  ['{CBD37E55-F16C-5777-80C9-48D0CE8A1F81}']
  { constructors } 

    {class} function init: DNFieldGreetingLine;

  end;

  ///<summary>
  ///  Implements the GREETINGLINE field.
  ///</summary>
  ///<remarks>
  ///  Inserts a mail merge greeting line.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldGreetingLine')]
  DNFieldGreetingLine = interface(DNField)
  ['{6B49C1FF-3007-3C0D-8F61-AEE58C6E3898}']
  { getters & setters } 

    function get_AlternateText: string;
    procedure set_AlternateText(value: string);
    function get_NameFormat: string;
    procedure set_NameFormat(value: string);
    function get_LanguageId: string;
    procedure set_LanguageId(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns a collection of mail merge field names used by the field.
    ///</summary>
    function GetFieldNames: TArray<string>;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the text to include in the field if the name is blank.
    ///</summary>
    property AlternateText: string read get_AlternateText write set_AlternateText;
    ///<summary>
    ///  Gets or sets the format of the name included in the field.
    ///</summary>
    property NameFormat: string read get_NameFormat write set_NameFormat;
    ///<summary>
    ///  Gets or sets the language id used to format the name.
    ///</summary>
    property LanguageId: string read get_LanguageId write set_LanguageId;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldGreetingLine = class(TDNGenericImport<DNFieldGreetingLineClass, DNFieldGreetingLine>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldHyperlinkClass = interface(DNFieldClass)
  ['{43BD32D2-0317-574B-9873-6538641914D4}']
  { constructors } 

    {class} function init: DNFieldHyperlink;

  end;

  ///<summary>
  ///  Implements the HYPERLINK field
  ///</summary>
  ///<remarks>
  ///  When selected, causes control to jump to the location such as a bookmark or a URL.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldHyperlink')]
  DNFieldHyperlink = interface(DNField)
  ['{285CAFF2-E895-3919-B714-87B429715F2C}']
  { getters & setters } 

    function get_Target: string;
    procedure set_Target(value: string);
    function get_Address: string;
    procedure set_Address(value: string);
    function get_SubAddress: string;
    procedure set_SubAddress(value: string);
    function get_IsImageMap: Boolean;
    procedure set_IsImageMap(value: Boolean);
    function get_OpenInNewWindow: Boolean;
    procedure set_OpenInNewWindow(value: Boolean);
    function get_ScreenTip: string;
    procedure set_ScreenTip(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the target to which the link should be redirected.
    ///</summary>
    property Target: string read get_Target write set_Target;
    ///<summary>
    ///  Gets or sets a location where this hyperlink jumps.
    ///</summary>
    property Address: string read get_Address write set_Address;
    ///<summary>
    ///  Gets or sets a location in the file, such as a bookmark, where this hyperlink jumps.
    ///</summary>
    property SubAddress: string read get_SubAddress write set_SubAddress;
    ///<summary>
    ///  Gets or sets whether to append coordinates to the hyperlink for a server-side image map.
    ///</summary>
    property IsImageMap: Boolean read get_IsImageMap write set_IsImageMap;
    ///<summary>
    ///  Gets or sets whether to open the destination site in a new web browser window.
    ///</summary>
    property OpenInNewWindow: Boolean read get_OpenInNewWindow write set_OpenInNewWindow;
    ///<summary>
    ///  Gets or sets the ScreenTip text for the hyperlink.
    ///</summary>
    property ScreenTip: string read get_ScreenTip write set_ScreenTip;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldHyperlink = class(TDNGenericImport<DNFieldHyperlinkClass, DNFieldHyperlink>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldIfClass = interface(DNFieldClass)
  ['{98E4B5E9-39A7-5215-B87A-656517AB4FA2}']
  { constructors } 

    {class} function init: DNFieldIf;

  end;

  ///<summary>
  ///  Implements the IF field.
  ///</summary>
  ///<remarks><p>Compares the values designated by the expressions <see cref="P:Aspose.Words.Fields.FieldIf.LeftExpression" />
  ///  and <see cref="P:Aspose.Words.Fields.FieldIf.RightExpression" />
  ///  in comparison using the operator designated by <see cref="P:Aspose.Words.Fields.FieldIf.ComparisonOperator" />
  ///  .</p>
  ///  <p>A field in the following format will be used as a mail merge source: { IF 0 = 0 "{PatientsNameFML}" "" \* MERGEFORMAT }</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldIf')]
  DNFieldIf = interface(DNField)
  ['{B08D7E25-304B-378F-8F1C-2A5A51705C85}']
  { getters & setters } 

    function get_LeftExpression: string;
    procedure set_LeftExpression(value: string);
    function get_ComparisonOperator: string;
    procedure set_ComparisonOperator(value: string);
    function get_RightExpression: string;
    procedure set_RightExpression(value: string);
    function get_TrueText: string;
    procedure set_TrueText(value: string);
    function get_FalseText: string;
    procedure set_FalseText(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Evaluates the condition.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:Aspose.Words.Fields.FieldIfComparisonResult" />
    ///  value that represents the result of the condition evaluation.
    ///</returns>
    function EvaluateCondition: DNFieldIfComparisonResult;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the left part of the comparison expression.
    ///</summary>
    property LeftExpression: string read get_LeftExpression write set_LeftExpression;
    ///<summary>
    ///  Gets or sets the comparison operator.
    ///</summary>
    property ComparisonOperator: string read get_ComparisonOperator write set_ComparisonOperator;
    ///<summary>
    ///  Gets or sets the right part of the comparison expression.
    ///</summary>
    property RightExpression: string read get_RightExpression write set_RightExpression;
    ///<summary>
    ///  Gets or sets the text displayed if the comparison expression is true.
    ///</summary>
    property TrueText: string read get_TrueText write set_TrueText;
    ///<summary>
    ///  Gets or sets the text displayed if the comparison expression is false.
    ///</summary>
    property FalseText: string read get_FalseText write set_FalseText;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldIf = class(TDNGenericImport<DNFieldIfClass, DNFieldIf>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldImportClass = interface(DNFieldClass)
  ['{0DD62AD8-40D1-551F-B609-993DFA5B1B00}']
  { constructors } 

    {class} function init: DNFieldImport;

  end;

  ///<summary>
  ///  Implements the IMPORT field.
  ///</summary>
  ///<remarks>
  ///  Retrieves the picture contained in the document.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldImport')]
  DNFieldImport = interface(DNField)
  ['{FBFD459C-F403-3F3B-A46F-005350421789}']
  { getters & setters } 

    function get_SourceFullName: string;
    procedure set_SourceFullName(value: string);
    function get_GraphicFilter: string;
    procedure set_GraphicFilter(value: string);
    function get_IsLinked: Boolean;
    procedure set_IsLinked(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the location of the picture.
    ///</summary>
    property SourceFullName: string read get_SourceFullName write set_SourceFullName;
    ///<summary>
    ///  Gets or sets the name of the filter for the format of the graphic that is to be inserted.
    ///</summary>
    property GraphicFilter: string read get_GraphicFilter write set_GraphicFilter;
    ///<summary>
    ///  Gets or sets whether to reduce the file size by not storing graphics data with the document.
    ///</summary>
    property IsLinked: Boolean read get_IsLinked write set_IsLinked;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldImport = class(TDNGenericImport<DNFieldImportClass, DNFieldImport>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldIncludeClass = interface(DNFieldClass)
  ['{6C7C2EF7-0E99-54C0-A40D-25CF797EC77B}']
  { constructors } 

    {class} function init: DNFieldInclude;

  end;

  ///<summary>
  ///  Implements the INCLUDE field.
  ///</summary>
  ///<remarks>
  ///  Inserts all or part of the text and graphics contained in another document.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldInclude')]
  DNFieldInclude = interface(DNField)
  ['{A939BA4F-7647-3EF7-BCBA-53B529D707A4}']
  { getters & setters } 

    function get_SourceFullName: string;
    procedure set_SourceFullName(value: string);
    function get_BookmarkName: string;
    procedure set_BookmarkName(value: string);
    function get_LockFields: Boolean;
    procedure set_LockFields(value: Boolean);
    function get_TextConverter: string;
    procedure set_TextConverter(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the location of the document.
    ///</summary>
    property SourceFullName: string read get_SourceFullName write set_SourceFullName;
    ///<summary>
    ///  Gets or sets the name of the bookmark in the document to include.
    ///</summary>
    property BookmarkName: string read get_BookmarkName write set_BookmarkName;
    ///<summary>
    ///  Gets or sets whether to prevent fields in the included document from being updated.
    ///</summary>
    property LockFields: Boolean read get_LockFields write set_LockFields;
    ///<summary>
    ///  Gets or sets the name of the text converter for the format of the included file.
    ///</summary>
    property TextConverter: string read get_TextConverter write set_TextConverter;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldInclude = class(TDNGenericImport<DNFieldIncludeClass, DNFieldInclude>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldIncludePictureClass = interface(DNFieldClass)
  ['{C8971D1D-6886-51CE-B14B-D2CBD3D536B1}']
  { constructors } 

    {class} function init: DNFieldIncludePicture;

  end;

  ///<summary>
  ///  Implements the INCLUDEPICTURE field.
  ///</summary>
  ///<remarks>
  ///  Retrieves a picture and displays it as the field result.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldIncludePicture')]
  DNFieldIncludePicture = interface(DNField)
  ['{760A6711-DA64-3951-AB4C-B909361D1E41}']
  { getters & setters } 

    function get_SourceFullName: string;
    procedure set_SourceFullName(value: string);
    function get_GraphicFilter: string;
    procedure set_GraphicFilter(value: string);
    function get_IsLinked: Boolean;
    procedure set_IsLinked(value: Boolean);
    function get_ResizeHorizontally: Boolean;
    procedure set_ResizeHorizontally(value: Boolean);
    function get_ResizeVertically: Boolean;
    procedure set_ResizeVertically(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the location of the picture using an IRI.
    ///</summary>
    property SourceFullName: string read get_SourceFullName write set_SourceFullName;
    ///<summary>
    ///  Gets or sets the name of the filter for the format of the graphic that is to be inserted.
    ///</summary>
    property GraphicFilter: string read get_GraphicFilter write set_GraphicFilter;
    ///<summary>
    ///  Gets or sets whether to reduce the file size by not storing graphics data with the document.
    ///</summary>
    property IsLinked: Boolean read get_IsLinked write set_IsLinked;
    ///<summary>
    ///  Gets or sets whether to resize the picture horizontally from the source.
    ///</summary>
    property ResizeHorizontally: Boolean read get_ResizeHorizontally write set_ResizeHorizontally;
    ///<summary>
    ///  Gets or sets whether to resize the picture vertically from the source.
    ///</summary>
    property ResizeVertically: Boolean read get_ResizeVertically write set_ResizeVertically;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldIncludePicture = class(TDNGenericImport<DNFieldIncludePictureClass, DNFieldIncludePicture>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldIncludeTextClass = interface(DNFieldClass)
  ['{963C4873-8D80-57AF-B4E4-CCFBFE45D8EA}']
  { constructors } 

    {class} function init: DNFieldIncludeText;

  end;

  ///<summary>
  ///  Implements the INCLUDETEXT field.
  ///</summary>
  ///<remarks>
  ///  Inserts all or part of the text and graphics contained in another document.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldIncludeText')]
  DNFieldIncludeText = interface(DNField)
  ['{59E93B74-21FE-3F26-9279-5429CE060723}']
  { getters & setters } 

    function get_SourceFullName: string;
    procedure set_SourceFullName(value: string);
    function get_BookmarkName: string;
    procedure set_BookmarkName(value: string);
    function get_LockFields: Boolean;
    procedure set_LockFields(value: Boolean);
    function get_TextConverter: string;
    procedure set_TextConverter(value: string);
    function get_NamespaceMappings: string;
    procedure set_NamespaceMappings(value: string);
    function get_XslTransformation: string;
    procedure set_XslTransformation(value: string);
    function get_XPath: string;
    procedure set_XPath(value: string);
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_MimeType: string;
    procedure set_MimeType(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the location of the document using an IRI.
    ///</summary>
    property SourceFullName: string read get_SourceFullName write set_SourceFullName;
    ///<summary>
    ///  Gets or sets the name of the bookmark in the document to include.
    ///</summary>
    property BookmarkName: string read get_BookmarkName write set_BookmarkName;
    ///<summary>
    ///  Gets or sets whether to prevent fields in the included document from being updated.
    ///</summary>
    property LockFields: Boolean read get_LockFields write set_LockFields;
    ///<summary>
    ///  Gets or sets the name of the text converter for the format of the included file.
    ///</summary>
    property TextConverter: string read get_TextConverter write set_TextConverter;
    ///<summary>
    ///  Gets or sets the namespace mappings for XPath queries.
    ///</summary>
    property NamespaceMappings: string read get_NamespaceMappings write set_NamespaceMappings;
    ///<summary>
    ///  Gets or sets the location of XSL Transformation to format XML data.
    ///</summary>
    property XslTransformation: string read get_XslTransformation write set_XslTransformation;
    ///<summary>
    ///  Gets or sets XPath for the desired portion of the XML file.
    ///</summary>
    property XPath: string read get_XPath write set_XPath;
    ///<summary>
    ///  Gets or sets the encoding applied to the data within the referenced file.
    ///</summary>
    property Encoding: string read get_Encoding write set_Encoding;
    ///<summary>
    ///  Gets or sets the MIME type of the referenced file.
    ///</summary>
    property MimeType: string read get_MimeType write set_MimeType;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldIncludeText = class(TDNGenericImport<DNFieldIncludeTextClass, DNFieldIncludeText>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldIndexClass = interface(DNFieldClass)
  ['{C715F949-EC34-54A3-B489-8AA08A882A16}']
  { constructors } 

    {class} function init: DNFieldIndex;

  end;

  ///<summary>
  ///  Implements the INDEX field.
  ///</summary>
  ///<remarks>
  ///  Builds an index using the index entries specified by XE fields, and inserts that index at this place in the document.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldIndex')]
  DNFieldIndex = interface(DNField)
  ['{098830D9-803F-3CB0-9AA5-D1198B0B7B61}']
  { getters & setters } 

    function get_BookmarkName: string;
    procedure set_BookmarkName(value: string);
    function get_NumberOfColumns: string;
    procedure set_NumberOfColumns(value: string);
    function get_SequenceSeparator: string;
    procedure set_SequenceSeparator(value: string);
    function get_PageNumberSeparator: string;
    procedure set_PageNumberSeparator(value: string);
    function get_HasPageNumberSeparator: Boolean;
    function get_EntryType: string;
    procedure set_EntryType(value: string);
    function get_PageRangeSeparator: string;
    procedure set_PageRangeSeparator(value: string);
    function get_Heading: string;
    procedure set_Heading(value: string);
    function get_CrossReferenceSeparator: string;
    procedure set_CrossReferenceSeparator(value: string);
    function get_PageNumberListSeparator: string;
    procedure set_PageNumberListSeparator(value: string);
    function get_LetterRange: string;
    procedure set_LetterRange(value: string);
    function get_RunSubentriesOnSameLine: Boolean;
    procedure set_RunSubentriesOnSameLine(value: Boolean);
    function get_SequenceName: string;
    procedure set_SequenceName(value: string);
    function get_HasSequenceName: Boolean;
    function get_UseYomi: Boolean;
    procedure set_UseYomi(value: Boolean);
    function get_LanguageId: string;
    procedure set_LanguageId(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the name of the bookmark that marks the portion of the document used to build the index.
    ///</summary>
    property BookmarkName: string read get_BookmarkName write set_BookmarkName;
    ///<summary>
    ///  Gets or sets the number of columns per page used when building the index.
    ///</summary>
    property NumberOfColumns: string read get_NumberOfColumns write set_NumberOfColumns;
    ///<summary>
    ///  Gets or sets the character sequence that is used to separate sequence numbers and page numbers.
    ///</summary>
    property SequenceSeparator: string read get_SequenceSeparator write set_SequenceSeparator;
    ///<summary>
    ///  Gets or sets the character sequence that is used to separate an index entry and its page number.
    ///</summary>
    property PageNumberSeparator: string read get_PageNumberSeparator write set_PageNumberSeparator;
    ///<summary>
    ///  Gets a value indicating whether a page number separator is overridden through the field's code.
    ///</summary>
    property HasPageNumberSeparator: Boolean read get_HasPageNumberSeparator;
    ///<summary>
    ///  Gets or sets an index entry type used to build the index.
    ///</summary>
    property EntryType: string read get_EntryType write set_EntryType;
    ///<summary>
    ///  Gets or sets the character sequence that is used to separate the start and end of a page range.
    ///</summary>
    property PageRangeSeparator: string read get_PageRangeSeparator write set_PageRangeSeparator;
    ///<summary>
    ///  Gets or sets a heading that appears at the start of each set of entries for any given letter.
    ///</summary>
    property Heading: string read get_Heading write set_Heading;
    ///<summary>
    ///  Gets or sets the character sequence that is used to separate cross references and other entries.
    ///</summary>
    property CrossReferenceSeparator: string read get_CrossReferenceSeparator write set_CrossReferenceSeparator;
    ///<summary>
    ///  Gets or sets the character sequence that is used to separate two page numbers in a page number list.
    ///</summary>
    property PageNumberListSeparator: string read get_PageNumberListSeparator write set_PageNumberListSeparator;
    ///<summary>
    ///  Gets or sets a range of letters to which limit the index.
    ///</summary>
    property LetterRange: string read get_LetterRange write set_LetterRange;
    ///<summary>
    ///  Gets or sets whether run subentries into the same line as the main entry.
    ///</summary>
    property RunSubentriesOnSameLine: Boolean read get_RunSubentriesOnSameLine write set_RunSubentriesOnSameLine;
    ///<summary>
    ///  Gets or sets the name of a sequence whose number is included with the page number.
    ///</summary>
    property SequenceName: string read get_SequenceName write set_SequenceName;
    ///<summary>
    ///  Gets a value indicating whether a sequence should be used while the field's result building.
    ///</summary>
    property HasSequenceName: Boolean read get_HasSequenceName;
    ///<summary>
    ///  Gets or sets whether to enable the use of yomi text for index entries.
    ///</summary>
    property UseYomi: Boolean read get_UseYomi write set_UseYomi;
    ///<summary>
    ///  Gets or sets the language ID used to generate the index.
    ///</summary>
    property LanguageId: string read get_LanguageId write set_LanguageId;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldIndex = class(TDNGenericImport<DNFieldIndexClass, DNFieldIndex>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldInfoClass = interface(DNFieldClass)
  ['{99A2C72A-2620-5D51-B357-5EA3CD1C14FF}']
  { constructors } 

    {class} function init: DNFieldInfo;

  end;

  ///<summary>
  ///  Implements the INFO field.
  ///</summary>
  ///<remarks>
  ///  Inserts information about a document property.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldInfo')]
  DNFieldInfo = interface(DNField)
  ['{AD952E3C-E766-307E-B691-B61F87E5CD84}']
  { getters & setters } 

    function get_InfoType: string;
    procedure set_InfoType(value: string);
    function get_NewValue: string;
    procedure set_NewValue(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the type of the document property to insert.
    ///</summary>
    property InfoType: string read get_InfoType write set_InfoType;
    ///<summary>
    ///  Gets or sets an optional value that updates the property.
    ///</summary>
    property NewValue: string read get_NewValue write set_NewValue;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldInfo = class(TDNGenericImport<DNFieldInfoClass, DNFieldInfo>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldKeywordsClass = interface(DNFieldClass)
  ['{CFBB7096-72D6-51FD-8EC0-712A790638AD}']
  { constructors } 

    {class} function init: DNFieldKeywords;

  end;

  ///<summary>
  ///  Implements the KEYWORDS field.
  ///</summary>
  ///<remarks>
  ///  Retrieves, and optionally sets, the document's keywords, as recorded in the <b>Keywords</b>
  ///  property of the
  ///  built-in document properties.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldKeywords')]
  DNFieldKeywords = interface(DNField)
  ['{E84F8F26-D87D-37D1-AC10-BBA41B3CCCCA}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the text of the keywords.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldKeywords = class(TDNGenericImport<DNFieldKeywordsClass, DNFieldKeywords>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldLastSavedByClass = interface(DNFieldClass)
  ['{756E050F-3B8C-581C-ADF3-6741D92B8C26}']
  { constructors } 

    {class} function init: DNFieldLastSavedBy;

  end;

  ///<summary>
  ///  Implements the LASTSAVEDBY field.
  ///</summary>
  ///<remarks>
  ///  Retrieves the name of the user who last modified and saved the current document, as recorded in the <b>LastModifiedBy</b>
  ///  property of the built-in document properties.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldLastSavedBy')]
  DNFieldLastSavedBy = interface(DNField)
  ['{B64CD935-4E34-3D17-AB18-E01A1185E7E7}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldLastSavedBy = class(TDNGenericImport<DNFieldLastSavedByClass, DNFieldLastSavedBy>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldLinkClass = interface(DNFieldClass)
  ['{0743A928-4536-5997-AF41-3FE516708ACE}']
  { constructors } 

    {class} function init: DNFieldLink;

  end;

  ///<summary>
  ///  Implements the LINK field.
  ///</summary>
  ///<remarks>
  ///  For information copied from another application, this field links that information to its original
  ///  source file.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldLink')]
  DNFieldLink = interface(DNField)
  ['{31381381-022C-3037-AFF1-D74761F0122B}']
  { getters & setters } 

    function get_ProgId: string;
    procedure set_ProgId(value: string);
    function get_SourceFullName: string;
    procedure set_SourceFullName(value: string);
    function get_SourceItem: string;
    procedure set_SourceItem(value: string);
    function get_AutoUpdate: Boolean;
    procedure set_AutoUpdate(value: Boolean);
    function get_InsertAsBitmap: Boolean;
    procedure set_InsertAsBitmap(value: Boolean);
    function get_IsLinked: Boolean;
    procedure set_IsLinked(value: Boolean);
    function get_FormatUpdateType: string;
    procedure set_FormatUpdateType(value: string);
    function get_InsertAsHtml: Boolean;
    procedure set_InsertAsHtml(value: Boolean);
    function get_InsertAsPicture: Boolean;
    procedure set_InsertAsPicture(value: Boolean);
    function get_InsertAsRtf: Boolean;
    procedure set_InsertAsRtf(value: Boolean);
    function get_InsertAsText: Boolean;
    procedure set_InsertAsText(value: Boolean);
    function get_InsertAsUnicode: Boolean;
    procedure set_InsertAsUnicode(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the application type of the link information.
    ///</summary>
    property ProgId: string read get_ProgId write set_ProgId;
    ///<summary>
    ///  Gets or sets the name and location of the source file.
    ///</summary>
    property SourceFullName: string read get_SourceFullName write set_SourceFullName;
    ///<summary>
    ///  Gets or sets the portion of the source file that's being linked.
    ///</summary>
    property SourceItem: string read get_SourceItem write set_SourceItem;
    ///<summary>
    ///  Gets or sets whether to update this field automatically.
    ///</summary>
    property AutoUpdate: Boolean read get_AutoUpdate write set_AutoUpdate;
    ///<summary>
    ///  Gets or sets whether to insert the linked object as a bitmap.
    ///</summary>
    property InsertAsBitmap: Boolean read get_InsertAsBitmap write set_InsertAsBitmap;
    ///<summary>
    ///  Gets or sets whether to reduce the file size by not storing graphics data with the document.
    ///</summary>
    property IsLinked: Boolean read get_IsLinked write set_IsLinked;
    ///<summary>
    ///  Gets or sets a way the linked object updates its formatting.
    ///</summary>
    property FormatUpdateType: string read get_FormatUpdateType write set_FormatUpdateType;
    ///<summary>
    ///  Gets or sets whether to insert the linked object as HTML format text.
    ///</summary>
    property InsertAsHtml: Boolean read get_InsertAsHtml write set_InsertAsHtml;
    ///<summary>
    ///  Gets or sets whether to insert the linked object as a picture.
    ///</summary>
    property InsertAsPicture: Boolean read get_InsertAsPicture write set_InsertAsPicture;
    ///<summary>
    ///  Gets or sets whether to insert the linked object in rich-text format (RTF).
    ///</summary>
    property InsertAsRtf: Boolean read get_InsertAsRtf write set_InsertAsRtf;
    ///<summary>
    ///  Gets or sets whether to insert the linked object in text-only format.
    ///</summary>
    property InsertAsText: Boolean read get_InsertAsText write set_InsertAsText;
    ///<summary>
    ///  Gets or sets whether to insert the linked object as Unicode text.
    ///</summary>
    property InsertAsUnicode: Boolean read get_InsertAsUnicode write set_InsertAsUnicode;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldLink = class(TDNGenericImport<DNFieldLinkClass, DNFieldLink>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldListNumClass = interface(DNFieldClass)
  ['{06592E2A-E7E5-5A20-98EC-0B24BA4BAFF9}']
  { constructors } 

    {class} function init: DNFieldListNum;

  end;

  ///<summary>
  ///  Implements the LISTNUM field.
  ///</summary>
  [DNTypeName('Aspose.Words.Fields.FieldListNum')]
  DNFieldListNum = interface(DNField)
  ['{BF696C0D-043C-3DBD-B05F-BDC8A6026A4F}']
  { getters & setters } 

    function get_ListName: string;
    procedure set_ListName(value: string);
    function get_HasListName: Boolean;
    function get_ListLevel: string;
    procedure set_ListLevel(value: string);
    function get_StartingNumber: string;
    procedure set_StartingNumber(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the name of the abstract numbering definition used for the numbering.
    ///</summary>
    property ListName: string read get_ListName write set_ListName;
    ///<summary>
    ///  Returns a value indicating whether the name of an abstract numbering definition
    ///  is provided by the field's code.
    ///</summary>
    property HasListName: Boolean read get_HasListName;
    ///<summary>
    ///  Gets or sets the level in the list, overriding the default behavior of the field.
    ///</summary>
    property ListLevel: string read get_ListLevel write set_ListLevel;
    ///<summary>
    ///  Gets or sets the starting value for this field.
    ///</summary>
    property StartingNumber: string read get_StartingNumber write set_StartingNumber;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldListNum = class(TDNGenericImport<DNFieldListNumClass, DNFieldListNum>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldMacroButtonClass = interface(DNFieldClass)
  ['{F091C6C8-5251-54CD-A516-D5BD8C69578F}']
  { constructors } 

    {class} function init: DNFieldMacroButton;

  end;

  ///<summary>
  ///  Implements the MACROBUTTON field.
  ///</summary>
  ///<remarks><p>Allows a macro or command to be run.</p>
  ///  <p>In Aspose.Words this field can also act as a merge field.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldMacroButton')]
  DNFieldMacroButton = interface(DNField)
  ['{45F48DEC-9B4F-3119-A2B1-4D504D36FC07}']
  { getters & setters } 

    function get_MacroName: string;
    procedure set_MacroName(value: string);
    function get_DisplayText: string;
    procedure set_DisplayText(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the name of the macro or command to run.
    ///</summary>
    property MacroName: string read get_MacroName write set_MacroName;
    ///<summary>
    ///  Gets or sets the text to appear as the "button" that is selected to run the macro or command.
    ///</summary>
    property DisplayText: string read get_DisplayText write set_DisplayText;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldMacroButton = class(TDNGenericImport<DNFieldMacroButtonClass, DNFieldMacroButton>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldMergeBarcodeClass = interface(DNFieldClass)
  ['{32932566-5BEB-5711-9F49-0ECA6219D711}']
  { constructors } 

    {class} function init: DNFieldMergeBarcode;

  end;

  ///<summary>
  ///  Implements the MERGEBARCODE field.
  ///</summary>
  ///<remarks>
  ///  Mail merge a barcode.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldMergeBarcode')]
  DNFieldMergeBarcode = interface(DNField)
  ['{71F5BB6C-4C50-30BA-AAE8-0BDE464B984D}']
  { getters & setters } 

    function get_BarcodeValue: string;
    procedure set_BarcodeValue(value: string);
    function get_BarcodeType: string;
    procedure set_BarcodeType(value: string);
    function get_SymbolHeight: string;
    procedure set_SymbolHeight(value: string);
    function get_SymbolRotation: string;
    procedure set_SymbolRotation(value: string);
    function get_ScalingFactor: string;
    procedure set_ScalingFactor(value: string);
    function get_ForegroundColor: string;
    procedure set_ForegroundColor(value: string);
    function get_BackgroundColor: string;
    procedure set_BackgroundColor(value: string);
    function get_PosCodeStyle: string;
    procedure set_PosCodeStyle(value: string);
    function get_CaseCodeStyle: string;
    procedure set_CaseCodeStyle(value: string);
    function get_ErrorCorrectionLevel: string;
    procedure set_ErrorCorrectionLevel(value: string);
    function get_DisplayText: Boolean;
    procedure set_DisplayText(value: Boolean);
    function get_AddStartStopChar: Boolean;
    procedure set_AddStartStopChar(value: Boolean);
    function get_FixCheckDigit: Boolean;
    procedure set_FixCheckDigit(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the barcode value.
    ///</summary>
    property BarcodeValue: string read get_BarcodeValue write set_BarcodeValue;
    ///<summary>
    ///  Gets or sets the barcode type (QR, etc.)
    ///</summary>
    property BarcodeType: string read get_BarcodeType write set_BarcodeType;
    ///<summary>
    ///  Gets or sets the height of the symbol. The units are in TWIPS (1/1440 inch).
    ///</summary>
    property SymbolHeight: string read get_SymbolHeight write set_SymbolHeight;
    ///<summary>
    ///  Gets or sets the rotation of the barcode symbol. Valid values are [0, 3]
    ///</summary>
    property SymbolRotation: string read get_SymbolRotation write set_SymbolRotation;
    ///<summary>
    ///  Gets or sets a scaling factor for the symbol. The value is in whole percentage points and the valid values are [10, 1000]
    ///</summary>
    property ScalingFactor: string read get_ScalingFactor write set_ScalingFactor;
    ///<summary>
    ///  Gets or sets the foreground color of the barcode symbol. Valid values are in the range [0, 0xFFFFFF]
    ///</summary>
    property ForegroundColor: string read get_ForegroundColor write set_ForegroundColor;
    ///<summary>
    ///  Gets or sets the background color of the barcode symbol. Valid values are in the range [0, 0xFFFFFF]
    ///</summary>
    property BackgroundColor: string read get_BackgroundColor write set_BackgroundColor;
    ///<summary>
    ///  Gets or sets the style of a Point of Sale barcode (barcode types UPCA|UPCE|EAN13|EAN8). The valid values (case insensitive) are [STD|SUP2|SUP5|CASE].
    ///</summary>
    property PosCodeStyle: string read get_PosCodeStyle write set_PosCodeStyle;
    ///<summary>
    ///  Gets or sets the style of a Case Code for barcode type ITF14. The valid values are [STD|EXT|ADD]
    ///</summary>
    property CaseCodeStyle: string read get_CaseCodeStyle write set_CaseCodeStyle;
    ///<summary>
    ///  Gets or sets an error correction level of QR Code. Valid values are [0, 3].
    ///</summary>
    property ErrorCorrectionLevel: string read get_ErrorCorrectionLevel write set_ErrorCorrectionLevel;
    ///<summary>
    ///  Gets or sets whether to display barcode data (text) along with image.
    ///</summary>
    property DisplayText: Boolean read get_DisplayText write set_DisplayText;
    ///<summary>
    ///  Gets or sets whether to add Start/Stop characters for barcode types NW7 and CODE39.
    ///</summary>
    property AddStartStopChar: Boolean read get_AddStartStopChar write set_AddStartStopChar;
    ///<summary>
    ///  Gets or sets whether to fix the check digit if itâ€™s invalid.
    ///</summary>
    property FixCheckDigit: Boolean read get_FixCheckDigit write set_FixCheckDigit;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldMergeBarcode = class(TDNGenericImport<DNFieldMergeBarcodeClass, DNFieldMergeBarcode>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldMergeFieldClass = interface(DNFieldClass)
  ['{40F43819-1C35-57A6-BFC4-8D4B86F16437}']
  end;

  ///<summary>
  ///  Implements the MERGEFIELD field.
  ///</summary>
  ///<remarks>
  ///  Retrieves the name of a data field within the merge characters in a mail merge main document.
  ///  When the main document is merged with the selected data source, information from the specified
  ///  data field is inserted in place of the merge field.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldMergeField')]
  DNFieldMergeField = interface(DNField)
  ['{3D250C68-2D3C-3E33-B4C0-9F6F2C7D1B9A}']
  { getters & setters } 

    function get_Type: DNFieldType;
    function get_FieldNameNoPrefix: string;
    function get_FieldName: string;
    procedure set_FieldName(value: string);
    function get_TextBefore: string;
    procedure set_TextBefore(value: string);
    function get_TextAfter: string;
    procedure set_TextAfter(value: string);
    function get_IsMapped: Boolean;
    procedure set_IsMapped(value: Boolean);
    function get_IsVerticalFormatting: Boolean;
    procedure set_IsVerticalFormatting(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Returns just the name of the data field. Any prefix is stripped to the prefix property.
    ///</summary>
    property FieldNameNoPrefix: string read get_FieldNameNoPrefix;
    ///<summary>
    ///  Gets or sets the name of a data field.
    ///</summary>
    property FieldName: string read get_FieldName write set_FieldName;
    ///<summary>
    ///  Gets or sets the text to be inserted before the field if the field is not blank.
    ///</summary>
    property TextBefore: string read get_TextBefore write set_TextBefore;
    ///<summary>
    ///  Gets or sets the text to be inserted after the field if the field is not blank.
    ///</summary>
    property TextAfter: string read get_TextAfter write set_TextAfter;
    ///<summary>
    ///  Gets or sets whether this field is a mapped field.
    ///</summary>
    property IsMapped: Boolean read get_IsMapped write set_IsMapped;
    ///<summary>
    ///  Gets or sets whether to enable character conversion for vertical formatting.
    ///</summary>
    property IsVerticalFormatting: Boolean read get_IsVerticalFormatting write set_IsVerticalFormatting;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldMergeField = class(TDNGenericImport<DNFieldMergeFieldClass, DNFieldMergeField>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldMergeRecClass = interface(DNFieldClass)
  ['{53AA7A54-B268-5FC3-9823-9455522242AD}']
  { constructors } 

    {class} function init: DNFieldMergeRec;

  end;

  ///<summary>
  ///  Implements the MERGEREC field.
  ///</summary>
  ///<remarks>
  ///  At the moment the MERGEREC and MERGESEQ fields implement the same functionality because we don't know for sure
  ///  how to skip records in Aspose.Words mail merge.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldMergeRec')]
  DNFieldMergeRec = interface(DNField)
  ['{4F36298E-1B5D-3AB5-A007-712152208B79}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldMergeRec = class(TDNGenericImport<DNFieldMergeRecClass, DNFieldMergeRec>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldMergeSeqClass = interface(DNFieldClass)
  ['{F47B2FF7-271C-511D-A2EE-3CD43370A832}']
  { constructors } 

    {class} function init: DNFieldMergeSeq;

  end;

  ///<summary>
  ///  Implements the MERGESEQ field.
  ///</summary>
  ///<remarks>
  ///  At the moment the MERGEREC and MERGESEQ fields implement the same functionality because we don't know for sure
  ///  how to skip records in Aspose.Words mail merge.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldMergeSeq')]
  DNFieldMergeSeq = interface(DNField)
  ['{1076C2CF-39B8-39E9-87B3-1ECB9C808D5F}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldMergeSeq = class(TDNGenericImport<DNFieldMergeSeqClass, DNFieldMergeSeq>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldNextClass = interface(DNFieldClass)
  ['{927EC9F3-37C4-5FB3-BF98-EC0786030B15}']
  { constructors } 

    {class} function init: DNFieldNext;

  end;

  ///<summary>
  ///  Implements the NEXT field.
  ///</summary>
  ///<remarks>
  ///  Merges the next data record into the current resulting merged document, rather than starting a
  ///  new merged document.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldNext')]
  DNFieldNext = interface(DNField)
  ['{9D6BF2B5-4AF9-3C4C-8093-F66AFD4518DB}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldNext = class(TDNGenericImport<DNFieldNextClass, DNFieldNext>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldNextIfClass = interface(DNFieldClass)
  ['{498CF9E3-3D26-583C-AFC9-E91393F51345}']
  { constructors } 

    {class} function init: DNFieldNextIf;

  end;

  ///<summary>
  ///  Implements the NEXTIF field.
  ///</summary>
  ///<remarks>
  ///  Compares the values designated by the expressions <see cref="P:Aspose.Words.Fields.FieldNextIf.LeftExpression" />
  ///  and <see cref="P:Aspose.Words.Fields.FieldNextIf.RightExpression" />
  ///  in comparison using the operator designated by <see cref="P:Aspose.Words.Fields.FieldNextIf.ComparisonOperator" />
  ///  . If the comparison is true,
  ///  the next data record is merged into the current merge document. (Merge fields that follow the NEXTIF in the main
  ///  document are replaced by values from the next data record rather than the current data record.)
  ///  If the comparison is false, the next data record is merged into a new merge document.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldNextIf')]
  DNFieldNextIf = interface(DNField)
  ['{7E62BF3F-C96D-3C57-AC4E-BEC8046E5D0A}']
  { getters & setters } 

    function get_LeftExpression: string;
    procedure set_LeftExpression(value: string);
    function get_ComparisonOperator: string;
    procedure set_ComparisonOperator(value: string);
    function get_RightExpression: string;
    procedure set_RightExpression(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the left part of the comparison expression.
    ///</summary>
    property LeftExpression: string read get_LeftExpression write set_LeftExpression;
    ///<summary>
    ///  Gets or sets the comparison operator.
    ///</summary>
    property ComparisonOperator: string read get_ComparisonOperator write set_ComparisonOperator;
    ///<summary>
    ///  Gets or sets the right part of the comparison expression.
    ///</summary>
    property RightExpression: string read get_RightExpression write set_RightExpression;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldNextIf = class(TDNGenericImport<DNFieldNextIfClass, DNFieldNextIf>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldNoteRefClass = interface(DNFieldClass)
  ['{DE2BA9E2-956F-5C0F-AA8D-8D5470C87A92}']
  { constructors } 

    {class} function init: DNFieldNoteRef;

  end;

  ///<summary>
  ///  Implements the NOTEREF field.
  ///</summary>
  ///<remarks>
  ///  Inserts the mark of the footnote or endnote that is marked by the specified bookmark.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldNoteRef')]
  DNFieldNoteRef = interface(DNField)
  ['{88253182-7532-3A03-8C4B-A2C50CB585BA}']
  { getters & setters } 

    function get_BookmarkName: string;
    procedure set_BookmarkName(value: string);
    function get_InsertReferenceMark: Boolean;
    procedure set_InsertReferenceMark(value: Boolean);
    function get_InsertHyperlink: Boolean;
    procedure set_InsertHyperlink(value: Boolean);
    function get_InsertRelativePosition: Boolean;
    procedure set_InsertRelativePosition(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the name of the bookmark.
    ///</summary>
    property BookmarkName: string read get_BookmarkName write set_BookmarkName;
    ///<summary>
    ///  Inserts the reference mark with the same character formatting as the Footnote Reference
    ///  or Endnote Reference style.
    ///</summary>
    property InsertReferenceMark: Boolean read get_InsertReferenceMark write set_InsertReferenceMark;
    ///<summary>
    ///  Gets or sets whether to insert a hyperlink to the bookmarked paragraph.
    ///</summary>
    property InsertHyperlink: Boolean read get_InsertHyperlink write set_InsertHyperlink;
    ///<summary>
    ///  Gets or sets whether to insert a relative position of the bookmarked paragraph.
    ///</summary>
    property InsertRelativePosition: Boolean read get_InsertRelativePosition write set_InsertRelativePosition;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldNoteRef = class(TDNGenericImport<DNFieldNoteRefClass, DNFieldNoteRef>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldNumCharsClass = interface(DNFieldClass)
  ['{A8A646AD-25FC-5819-A0E5-6F4B5C9CF716}']
  { constructors } 

    {class} function init: DNFieldNumChars;

  end;

  ///<summary>
  ///  Implements the NUMCHARS field.
  ///</summary>
  ///<remarks>
  ///  Retrieves the number of characters in the current document, as recorded in the <b>Characters</b>
  ///  property of the
  ///  built-in document properties.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldNumChars')]
  DNFieldNumChars = interface(DNField)
  ['{E59E80BC-C59B-3A5F-A005-CCF431D3688A}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldNumChars = class(TDNGenericImport<DNFieldNumCharsClass, DNFieldNumChars>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldNumPagesClass = interface(DNFieldClass)
  ['{18644BEA-DCDE-5057-A52F-A4C3167667F6}']
  { constructors } 

    {class} function init: DNFieldNumPages;

  end;

  ///<summary>
  ///  Implements the NUMPAGES field.
  ///</summary>
  ///<remarks>
  ///  Retrieves the number of pages in the current document, as recorded in the <b>Pages</b>
  ///  property of the
  ///  built-in document properties.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldNumPages')]
  DNFieldNumPages = interface(DNField)
  ['{649532C6-758C-389D-82F7-6BE25E89F081}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldNumPages = class(TDNGenericImport<DNFieldNumPagesClass, DNFieldNumPages>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldNumWordsClass = interface(DNFieldClass)
  ['{141701C4-3224-5905-9177-3FB97C5A5F1D}']
  { constructors } 

    {class} function init: DNFieldNumWords;

  end;

  ///<summary>
  ///  Implements the NUMWORDS field.
  ///</summary>
  ///<remarks>
  ///  Retrieves the number of words in the current document, as recorded in the <b>Words</b>
  ///  property of the
  ///  built-in document properties.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldNumWords')]
  DNFieldNumWords = interface(DNField)
  ['{DEF9F6B8-F9B8-380F-B94D-18FA7B6787AD}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldNumWords = class(TDNGenericImport<DNFieldNumWordsClass, DNFieldNumWords>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldOcxClass = interface(DNFieldClass)
  ['{D4176962-23B6-5F3A-AEB1-45329B616505}']
  { constructors } 

    {class} function init: DNFieldOcx;

  end;

  ///<summary>
  ///  Implements the OCX field.
  ///</summary>
  [DNTypeName('Aspose.Words.Fields.FieldOcx')]
  DNFieldOcx = interface(DNField)
  ['{22A8493F-BFE0-3271-9EE2-7C64FECC4B60}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldOcx = class(TDNGenericImport<DNFieldOcxClass, DNFieldOcx>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldPageClass = interface(DNFieldClass)
  ['{C81F55A6-3D6E-55FD-BA3A-42F4173D4741}']
  { constructors } 

    {class} function init: DNFieldPage;

  end;

  ///<summary>
  ///  Implements the PAGE field.
  ///</summary>
  ///<remarks>
  ///  Retrieves the number of the current page.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldPage')]
  DNFieldPage = interface(DNField)
  ['{35961244-EC15-3C42-841B-F2DD45E90BED}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldPage = class(TDNGenericImport<DNFieldPageClass, DNFieldPage>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldPageRefClass = interface(DNFieldClass)
  ['{F6F5296C-5DD4-57D6-BA0E-EB9A1A2FB5DD}']
  { constructors } 

    {class} function init: DNFieldPageRef;

  end;

  ///<summary>
  ///  Implements the PAGEREF field.
  ///</summary>
  ///<remarks>
  ///  Inserts the number of the page containing the specified bookmark for a cross-reference.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldPageRef')]
  DNFieldPageRef = interface(DNField)
  ['{9C11A508-6111-3063-A46D-C24A010D2B4B}']
  { getters & setters } 

    function get_BookmarkName: string;
    procedure set_BookmarkName(value: string);
    function get_InsertHyperlink: Boolean;
    procedure set_InsertHyperlink(value: Boolean);
    function get_InsertRelativePosition: Boolean;
    procedure set_InsertRelativePosition(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the name of the bookmark.
    ///</summary>
    property BookmarkName: string read get_BookmarkName write set_BookmarkName;
    ///<summary>
    ///  Gets or sets whether to insert a hyperlink to the bookmarked paragraph.
    ///</summary>
    property InsertHyperlink: Boolean read get_InsertHyperlink write set_InsertHyperlink;
    ///<summary>
    ///  Gets or sets whether to insert a relative position of the bookmarked paragraph.
    ///</summary>
    property InsertRelativePosition: Boolean read get_InsertRelativePosition write set_InsertRelativePosition;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldPageRef = class(TDNGenericImport<DNFieldPageRefClass, DNFieldPageRef>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldPrintClass = interface(DNFieldClass)
  ['{20DD8852-AAFE-5EE8-9DB1-E0615ADB3A53}']
  { constructors } 

    {class} function init: DNFieldPrint;

  end;

  ///<summary>
  ///  Implements the PRINT field.
  ///</summary>
  ///<remarks>
  ///  An instruction to send the printer-specific control code characters to the selected printer
  ///  when the document is printed.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldPrint')]
  DNFieldPrint = interface(DNField)
  ['{84BED927-49C4-3900-AA36-E77917239DD6}']
  { getters & setters } 

    function get_PrinterInstructions: string;
    procedure set_PrinterInstructions(value: string);
    function get_PostScriptGroup: string;
    procedure set_PostScriptGroup(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the printer-specific control code characters or PostScript instructions.
    ///</summary>
    property PrinterInstructions: string read get_PrinterInstructions write set_PrinterInstructions;
    ///<summary>
    ///  Gets or sets the drawing rectangle that the PostScript instructions operate on.
    ///</summary>
    property PostScriptGroup: string read get_PostScriptGroup write set_PostScriptGroup;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldPrint = class(TDNGenericImport<DNFieldPrintClass, DNFieldPrint>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldPrintDateClass = interface(DNFieldClass)
  ['{DAE0CE07-CADB-5ACE-9873-00AD2DB80B4E}']
  { constructors } 

    {class} function init: DNFieldPrintDate;

  end;

  ///<summary>
  ///  Implements the PRINTDATE field.
  ///</summary>
  ///<remarks>
  ///  Retrieves the date and time on which the document was last printed. By default, the Gregorian calendar is used.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldPrintDate')]
  DNFieldPrintDate = interface(DNField)
  ['{113949E0-A610-3214-936C-42FF37C5DD3C}']
  { getters & setters } 

    function get_UseLunarCalendar: Boolean;
    procedure set_UseLunarCalendar(value: Boolean);
    function get_UseSakaEraCalendar: Boolean;
    procedure set_UseSakaEraCalendar(value: Boolean);
    function get_UseUmAlQuraCalendar: Boolean;
    procedure set_UseUmAlQuraCalendar(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets whether to use the Hijri Lunar or Hebrew Lunar calendar.
    ///</summary>
    property UseLunarCalendar: Boolean read get_UseLunarCalendar write set_UseLunarCalendar;
    ///<summary>
    ///  Gets or sets whether to use the Saka Era calendar.
    ///</summary>
    property UseSakaEraCalendar: Boolean read get_UseSakaEraCalendar write set_UseSakaEraCalendar;
    ///<summary>
    ///  Gets or sets whether to use the Um-al-Qura calendar.
    ///</summary>
    property UseUmAlQuraCalendar: Boolean read get_UseUmAlQuraCalendar write set_UseUmAlQuraCalendar;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldPrintDate = class(TDNGenericImport<DNFieldPrintDateClass, DNFieldPrintDate>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldPrivateClass = interface(DNFieldClass)
  ['{67CB702F-AAFF-565F-B8DC-0F03A7344497}']
  { constructors } 

    {class} function init: DNFieldPrivate;

  end;

  ///<summary>
  ///  Implements the PRIVATE field.
  ///</summary>
  ///<remarks>
  ///  Provides a private storage area. This field is used to store data for documents converted from other
  ///  file formats.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldPrivate')]
  DNFieldPrivate = interface(DNField)
  ['{C240F50A-820B-3993-BC5C-A936C570752B}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldPrivate = class(TDNGenericImport<DNFieldPrivateClass, DNFieldPrivate>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldQuoteClass = interface(DNFieldClass)
  ['{2974B0D1-FCDE-55DC-A599-EC7E21F21E2C}']
  { constructors } 

    {class} function init: DNFieldQuote;

  end;

  ///<summary>
  ///  Implements the QUOTE field.
  ///</summary>
  ///<remarks>
  ///  Retrieves the specified text.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldQuote')]
  DNFieldQuote = interface(DNField)
  ['{97F64C88-2F44-3555-99F1-BEA583040016}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the text to retrieve.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldQuote = class(TDNGenericImport<DNFieldQuoteClass, DNFieldQuote>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldRDClass = interface(DNFieldClass)
  ['{92028E29-B83C-5FE3-BA9E-819E36D85461}']
  { constructors } 

    {class} function init: DNFieldRD;

  end;

  ///<summary>
  ///  Implements the RD field.
  ///</summary>
  ///<remarks>
  ///  Identifies a file to include when you create a table of contents, a table of authorities, or an index
  ///  with the TOC, TOA, or INDEX field
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldRD')]
  DNFieldRD = interface(DNField)
  ['{2103C488-5D05-347D-B6E5-31B556E4C359}']
  { getters & setters } 

    function get_FileName: string;
    procedure set_FileName(value: string);
    function get_IsPathRelative: Boolean;
    procedure set_IsPathRelative(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the name of the file to include when generating a table of contents, table of authorities, or index.
    ///</summary>
    property FileName: string read get_FileName write set_FileName;
    ///<summary>
    ///  Gets or sets whether the path is relative to the current document.
    ///</summary>
    property IsPathRelative: Boolean read get_IsPathRelative write set_IsPathRelative;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldRD = class(TDNGenericImport<DNFieldRDClass, DNFieldRD>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldRefClass = interface(DNFieldClass)
  ['{A9519067-0F7A-5364-A9C1-8B81EDC17561}']
  { constructors } 

    {class} function init: DNFieldRef;

  end;

  ///<summary>
  ///  Implements the REF field.
  ///</summary>
  ///<remarks>
  ///  Inserts the text or graphics represented by the specified bookmark.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldRef')]
  DNFieldRef = interface(DNField)
  ['{C3C94339-9BF0-30DE-8A43-595102E9AA9C}']
  { getters & setters } 

    function get_BookmarkName: string;
    procedure set_BookmarkName(value: string);
    function get_NumberSeparator: string;
    procedure set_NumberSeparator(value: string);
    function get_IncludeNoteOrComment: Boolean;
    procedure set_IncludeNoteOrComment(value: Boolean);
    function get_InsertHyperlink: Boolean;
    procedure set_InsertHyperlink(value: Boolean);
    function get_InsertParagraphNumber: Boolean;
    procedure set_InsertParagraphNumber(value: Boolean);
    function get_InsertRelativePosition: Boolean;
    procedure set_InsertRelativePosition(value: Boolean);
    function get_InsertParagraphNumberInRelativeContext: Boolean;
    procedure set_InsertParagraphNumberInRelativeContext(value: Boolean);
    function get_SuppressNonDelimiters: Boolean;
    procedure set_SuppressNonDelimiters(value: Boolean);
    function get_InsertParagraphNumberInFullContext: Boolean;
    procedure set_InsertParagraphNumberInFullContext(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the referenced bookmark's name.
    ///</summary>
    property BookmarkName: string read get_BookmarkName write set_BookmarkName;
    ///<summary>
    ///  Gets or sets the character sequence that is used to separate sequence numbers and page numbers.
    ///</summary>
    property NumberSeparator: string read get_NumberSeparator write set_NumberSeparator;
    ///<summary>
    ///  Gets or sets whether to increment footnote, endnote, and annotation numbers that are
    ///  marked by the bookmark, and insert the corresponding footnote, endnote, and comment text.
    ///</summary>
    property IncludeNoteOrComment: Boolean read get_IncludeNoteOrComment write set_IncludeNoteOrComment;
    ///<summary>
    ///  Gets or sets whether to create a hyperlink to the bookmarked paragraph.
    ///</summary>
    property InsertHyperlink: Boolean read get_InsertHyperlink write set_InsertHyperlink;
    ///<summary>
    ///  Gets or sets whether to insert the paragraph number of the referenced paragraph exactly as it appears in the document.
    ///</summary>
    property InsertParagraphNumber: Boolean read get_InsertParagraphNumber write set_InsertParagraphNumber;
    ///<summary>
    ///  Gets or sets whether to insert the relative position of the referenced paragraph.
    ///</summary>
    property InsertRelativePosition: Boolean read get_InsertRelativePosition write set_InsertRelativePosition;
    ///<summary>
    ///  Gets or sets whether to insert the paragraph number of the referenced paragraph in relative context.
    ///</summary>
    property InsertParagraphNumberInRelativeContext: Boolean read get_InsertParagraphNumberInRelativeContext write set_InsertParagraphNumberInRelativeContext;
    ///<summary>
    ///  Gets or sets whether to suppress non-delimiter characters.
    ///</summary>
    property SuppressNonDelimiters: Boolean read get_SuppressNonDelimiters write set_SuppressNonDelimiters;
    ///<summary>
    ///  Gets or sets whether to insert the paragraph number of the referenced paragraph in full context.
    ///</summary>
    property InsertParagraphNumberInFullContext: Boolean read get_InsertParagraphNumberInFullContext write set_InsertParagraphNumberInFullContext;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldRef = class(TDNGenericImport<DNFieldRefClass, DNFieldRef>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldRevNumClass = interface(DNFieldClass)
  ['{D61E1193-06D9-5BF3-8F43-27E418721991}']
  { constructors } 

    {class} function init: DNFieldRevNum;

  end;

  ///<summary>
  ///  Implements the REVNUM field.
  ///</summary>
  ///<remarks>
  ///  Retrieves the document's revision number, as recorded in the <b>Revision</b>
  ///  property of the
  ///  built-in document properties.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldRevNum')]
  DNFieldRevNum = interface(DNField)
  ['{F1C17B68-9B96-3556-AC2A-462DC1F2179F}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldRevNum = class(TDNGenericImport<DNFieldRevNumClass, DNFieldRevNum>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldSaveDateClass = interface(DNFieldClass)
  ['{32E8A2CB-D0CA-5FA6-92D4-82D898753AD5}']
  { constructors } 

    {class} function init: DNFieldSaveDate;

  end;

  ///<summary>
  ///  Implements the SAVEDATE field.
  ///</summary>
  ///<remarks>
  ///  Retrieves the date and time on which the document was last saved. By default, the Gregorian calendar is used.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldSaveDate')]
  DNFieldSaveDate = interface(DNField)
  ['{41103CE9-5BF9-3ABE-A191-334A05AB96AA}']
  { getters & setters } 

    function get_UseLunarCalendar: Boolean;
    procedure set_UseLunarCalendar(value: Boolean);
    function get_UseSakaEraCalendar: Boolean;
    procedure set_UseSakaEraCalendar(value: Boolean);
    function get_UseUmAlQuraCalendar: Boolean;
    procedure set_UseUmAlQuraCalendar(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets whether to use the Hijri Lunar or Hebrew Lunar calendar.
    ///</summary>
    property UseLunarCalendar: Boolean read get_UseLunarCalendar write set_UseLunarCalendar;
    ///<summary>
    ///  Gets or sets whether to use the Saka Era calendar.
    ///</summary>
    property UseSakaEraCalendar: Boolean read get_UseSakaEraCalendar write set_UseSakaEraCalendar;
    ///<summary>
    ///  Gets or sets whether to use the Um-al-Qura calendar.
    ///</summary>
    property UseUmAlQuraCalendar: Boolean read get_UseUmAlQuraCalendar write set_UseUmAlQuraCalendar;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldSaveDate = class(TDNGenericImport<DNFieldSaveDateClass, DNFieldSaveDate>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldSectionClass = interface(DNFieldClass)
  ['{403CC26D-B027-5EF5-AE20-A1D140C36BD4}']
  { constructors } 

    {class} function init: DNFieldSection;

  end;

  ///<summary>
  ///  Implements the SECTION field.
  ///</summary>
  ///<remarks>
  ///  Retrieves the number of the current section.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldSection')]
  DNFieldSection = interface(DNField)
  ['{1482150A-F9F1-3510-825C-B1B539A9DBED}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldSection = class(TDNGenericImport<DNFieldSectionClass, DNFieldSection>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldSectionPagesClass = interface(DNFieldClass)
  ['{06DC23A3-945C-568D-A4B6-A8BF83191723}']
  { constructors } 

    {class} function init: DNFieldSectionPages;

  end;

  ///<summary>
  ///  Implements the SECTIONPAGES field.
  ///</summary>
  ///<remarks>
  ///  Retrieves the number of the current page within the current section.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldSectionPages')]
  DNFieldSectionPages = interface(DNField)
  ['{53D54231-A5DD-3BB8-947B-7A3BB6BE1877}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldSectionPages = class(TDNGenericImport<DNFieldSectionPagesClass, DNFieldSectionPages>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldSeqClass = interface(DNFieldClass)
  ['{559B357C-8E0F-53CE-A880-279762F9AE6C}']
  { constructors } 

    {class} function init: DNFieldSeq;

  end;

  ///<summary>
  ///  Implements the SEQ field.
  ///</summary>
  ///<remarks>
  ///  Sequentially numbers chapters, tables, figures, and other user-defined lists of items in a document.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldSeq')]
  DNFieldSeq = interface(DNField)
  ['{1A65B34B-C5F4-3D18-AB89-817F1B20D1A7}']
  { getters & setters } 

    function get_SequenceIdentifier: string;
    procedure set_SequenceIdentifier(value: string);
    function get_BookmarkName: string;
    procedure set_BookmarkName(value: string);
    function get_InsertNextNumber: Boolean;
    procedure set_InsertNextNumber(value: Boolean);
    function get_ResetNumber: string;
    procedure set_ResetNumber(value: string);
    function get_ResetHeadingLevel: string;
    procedure set_ResetHeadingLevel(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the name assigned to the series of items that are to be numbered.
    ///</summary>
    property SequenceIdentifier: string read get_SequenceIdentifier write set_SequenceIdentifier;
    ///<summary>
    ///  Gets or sets a bookmark name that refers to an item elsewhere in the document rather than in the current location.
    ///</summary>
    property BookmarkName: string read get_BookmarkName write set_BookmarkName;
    ///<summary>
    ///  Gets or sets whether to insert the next sequence number for the specified item.
    ///</summary>
    property InsertNextNumber: Boolean read get_InsertNextNumber write set_InsertNextNumber;
    ///<summary>
    ///  Gets or sets an integer number to reset the sequence number to. Returns -1 if the number is absent.
    ///</summary>
    property ResetNumber: string read get_ResetNumber write set_ResetNumber;
    ///<summary>
    ///  Gets or sets an integer number representing a heading level to reset the sequence number to.
    ///  Returns -1 if the number is absent.
    ///</summary>
    property ResetHeadingLevel: string read get_ResetHeadingLevel write set_ResetHeadingLevel;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldSeq = class(TDNGenericImport<DNFieldSeqClass, DNFieldSeq>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldSetClass = interface(DNFieldClass)
  ['{D0E661E0-8E2E-5ACA-879D-1F106C1C13B8}']
  { constructors } 

    {class} function init: DNFieldSet;

  end;

  ///<summary>
  ///  Implements the SET field.
  ///</summary>
  ///<remarks>
  ///  Assigns new text to a bookmark.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldSet')]
  DNFieldSet = interface(DNField)
  ['{4EF0214C-33CB-3931-BA34-3ACF9C820AE3}']
  { getters & setters } 

    function get_BookmarkName: string;
    procedure set_BookmarkName(value: string);
    function get_BookmarkText: string;
    procedure set_BookmarkText(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the name of the bookmark.
    ///</summary>
    property BookmarkName: string read get_BookmarkName write set_BookmarkName;
    ///<summary>
    ///  Gets or sets the new text of the bookmark.
    ///</summary>
    property BookmarkText: string read get_BookmarkText write set_BookmarkText;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldSet = class(TDNGenericImport<DNFieldSetClass, DNFieldSet>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldShapeClass = interface(DNFieldClass)
  ['{B249D230-50D3-5C64-A667-CCD81165A2A8}']
  { constructors } 

    {class} function init: DNFieldShape;

  end;

  ///<summary>
  ///  Implements the SHAPE field.
  ///</summary>
  ///<remarks>
  ///  Retrieves the specified text.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldShape')]
  DNFieldShape = interface(DNField)
  ['{BBB5F8DB-1845-37C5-AD52-89784173BA21}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the text to retrieve.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldShape = class(TDNGenericImport<DNFieldShapeClass, DNFieldShape>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldSkipIfClass = interface(DNFieldClass)
  ['{BE34E73C-A3A2-5065-A2AD-1AFFFA5EE879}']
  { constructors } 

    {class} function init: DNFieldSkipIf;

  end;

  ///<summary>
  ///  Implements the SKIPIF field.
  ///</summary>
  ///<remarks>
  ///  Compares the values designated by the expressions <see cref="P:Aspose.Words.Fields.FieldSkipIf.LeftExpression" />
  ///  and <see cref="P:Aspose.Words.Fields.FieldSkipIf.RightExpression" />
  ///  in comparison using the operator designated by <see cref="P:Aspose.Words.Fields.FieldSkipIf.ComparisonOperator" />
  ///  . If the comparison is true, SKIPIF
  ///  cancels the current merge document, moves to the next data record in the data source, and starts a new merge document.
  ///  If the comparison is false, the current merge document is continued.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldSkipIf')]
  DNFieldSkipIf = interface(DNField)
  ['{820FDF2B-463D-3ABE-9E59-EF38D121594F}']
  { getters & setters } 

    function get_LeftExpression: string;
    procedure set_LeftExpression(value: string);
    function get_ComparisonOperator: string;
    procedure set_ComparisonOperator(value: string);
    function get_RightExpression: string;
    procedure set_RightExpression(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the left part of the comparison expression.
    ///</summary>
    property LeftExpression: string read get_LeftExpression write set_LeftExpression;
    ///<summary>
    ///  Gets or sets the comparison operator.
    ///</summary>
    property ComparisonOperator: string read get_ComparisonOperator write set_ComparisonOperator;
    ///<summary>
    ///  Gets or sets the right part of the comparison expression.
    ///</summary>
    property RightExpression: string read get_RightExpression write set_RightExpression;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldSkipIf = class(TDNGenericImport<DNFieldSkipIfClass, DNFieldSkipIf>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldStyleRefClass = interface(DNFieldClass)
  ['{08DAC79A-3467-5510-A44B-C662E8020BC9}']
  { constructors } 

    {class} function init: DNFieldStyleRef;

  end;

  ///<summary>
  ///  Implements the STYLEREF field.
  ///</summary>
  ///<remarks>
  ///  The STYLEREF is used to reference a fragment of text within the document that is formatted with
  ///  the specified style.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldStyleRef')]
  DNFieldStyleRef = interface(DNField)
  ['{EBD37490-C97C-32A4-8B40-539967000E1A}']
  { getters & setters } 

    function get_StyleName: string;
    procedure set_StyleName(value: string);
    function get_SearchFromBottom: Boolean;
    procedure set_SearchFromBottom(value: Boolean);
    function get_InsertParagraphNumber: Boolean;
    procedure set_InsertParagraphNumber(value: Boolean);
    function get_InsertRelativePosition: Boolean;
    procedure set_InsertRelativePosition(value: Boolean);
    function get_InsertParagraphNumberInRelativeContext: Boolean;
    procedure set_InsertParagraphNumberInRelativeContext(value: Boolean);
    function get_SuppressNonDelimiters: Boolean;
    procedure set_SuppressNonDelimiters(value: Boolean);
    function get_InsertParagraphNumberInFullContext: Boolean;
    procedure set_InsertParagraphNumberInFullContext(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the name of the style by which the text to search for is formatted.
    ///</summary>
    property StyleName: string read get_StyleName write set_StyleName;
    ///<summary>
    ///  Gets or sets whether to search from the bottom of the current page, rather from the top.
    ///</summary>
    property SearchFromBottom: Boolean read get_SearchFromBottom write set_SearchFromBottom;
    ///<summary>
    ///  Gets or sets whether to insert the paragraph number of the referenced paragraph exactly as it appears in the document.
    ///</summary>
    property InsertParagraphNumber: Boolean read get_InsertParagraphNumber write set_InsertParagraphNumber;
    ///<summary>
    ///  Gets or sets whether to insert the relative position of the referenced paragraph.
    ///</summary>
    property InsertRelativePosition: Boolean read get_InsertRelativePosition write set_InsertRelativePosition;
    ///<summary>
    ///  Gets or sets whether to insert the paragraph number of the referenced paragraph in relative context.
    ///</summary>
    property InsertParagraphNumberInRelativeContext: Boolean read get_InsertParagraphNumberInRelativeContext write set_InsertParagraphNumberInRelativeContext;
    ///<summary>
    ///  Gets or sets whether to suppress non-delimiter characters.
    ///</summary>
    property SuppressNonDelimiters: Boolean read get_SuppressNonDelimiters write set_SuppressNonDelimiters;
    ///<summary>
    ///  Gets or sets whether to insert the paragraph number of the referenced paragraph in full context.
    ///</summary>
    property InsertParagraphNumberInFullContext: Boolean read get_InsertParagraphNumberInFullContext write set_InsertParagraphNumberInFullContext;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldStyleRef = class(TDNGenericImport<DNFieldStyleRefClass, DNFieldStyleRef>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldSubjectClass = interface(DNFieldClass)
  ['{1B9E110F-6B5E-507D-929F-04090ABCCCEC}']
  { constructors } 

    {class} function init: DNFieldSubject;

  end;

  ///<summary>
  ///  Implements the SUBJECT field.
  ///</summary>
  ///<remarks>
  ///  Retrieves, and optionally sets, the document's subject, as recorded in the <b>Subject</b>
  ///  property of the
  ///  built-in document properties.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldSubject')]
  DNFieldSubject = interface(DNField)
  ['{124654C4-4947-383C-B108-7E238C2CE54C}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the text of the subject.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldSubject = class(TDNGenericImport<DNFieldSubjectClass, DNFieldSubject>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldSymbolClass = interface(DNFieldClass)
  ['{955A94DD-6C3D-5C52-BFAE-E6970AA71FA8}']
  { constructors } 

    {class} function init: DNFieldSymbol;

  end;

  ///<summary>
  ///  Implements a SYMBOL field.
  ///</summary>
  ///<remarks>
  ///  Retrieves the character whose code point value is specified in decimal or hexadecimal.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldSymbol')]
  DNFieldSymbol = interface(DNField)
  ['{915EB00D-1855-3DCF-B2BE-EA3B8FE1FDCE}']
  { getters & setters } 

    function get_CharacterCode: string;
    procedure set_CharacterCode(value: string);
    function get_FontName: string;
    procedure set_FontName(value: string);
    function get_FontSize: string;
    procedure set_FontSize(value: string);
    function get_IsAnsi: Boolean;
    procedure set_IsAnsi(value: Boolean);
    function get_IsUnicode: Boolean;
    procedure set_IsUnicode(value: Boolean);
    function get_IsShiftJis: Boolean;
    procedure set_IsShiftJis(value: Boolean);
    function get_DontAffectsLineSpacing: Boolean;
    procedure set_DontAffectsLineSpacing(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the character's code point value in decimal or hexadecimal.
    ///</summary>
    property CharacterCode: string read get_CharacterCode write set_CharacterCode;
    ///<summary>
    ///  Gets or sets the name of the font of the character retrieved by the field.
    ///</summary>
    property FontName: string read get_FontName write set_FontName;
    ///<summary>
    ///  Gets or sets the size in points of the font of the character retrieved by the field.
    ///</summary>
    property FontSize: string read get_FontSize write set_FontSize;
    ///<summary>
    ///  Gets or sets whether the character code is interpreted as the value of an ANSI character.
    ///</summary>
    property IsAnsi: Boolean read get_IsAnsi write set_IsAnsi;
    ///<summary>
    ///  Gets or sets whether the character code is interpreted as the value of a Unicode character.
    ///</summary>
    property IsUnicode: Boolean read get_IsUnicode write set_IsUnicode;
    ///<summary>
    ///  Gets or sets whether the character code is interpreted as the value of a SHIFT-JIS character.
    ///</summary>
    property IsShiftJis: Boolean read get_IsShiftJis write set_IsShiftJis;
    ///<summary>
    ///  Gets or sets whether the character retrieved by the field affects the line spacing of the paragraph.
    ///</summary>
    property DontAffectsLineSpacing: Boolean read get_DontAffectsLineSpacing write set_DontAffectsLineSpacing;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldSymbol = class(TDNGenericImport<DNFieldSymbolClass, DNFieldSymbol>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldTAClass = interface(DNFieldClass)
  ['{62AC5758-1000-5C6F-847F-E1FFF193AB73}']
  { constructors } 

    {class} function init: DNFieldTA;

  end;

  ///<summary>
  ///  Implements the TA field.
  ///</summary>
  ///<remarks>
  ///  Defines the text and page number for a table of authorities entry, which is used by a TOA field.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldTA')]
  DNFieldTA = interface(DNField)
  ['{5AB0E289-CFB6-37B1-A353-BE4EC18B9D7C}']
  { getters & setters } 

    function get_IsBold: Boolean;
    procedure set_IsBold(value: Boolean);
    function get_EntryCategory: string;
    procedure set_EntryCategory(value: string);
    function get_IsItalic: Boolean;
    procedure set_IsItalic(value: Boolean);
    function get_LongCitation: string;
    procedure set_LongCitation(value: string);
    function get_PageRangeBookmarkName: string;
    procedure set_PageRangeBookmarkName(value: string);
    function get_ShortCitation: string;
    procedure set_ShortCitation(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets whether to apply bold formatting to the page number for the entry.
    ///</summary>
    property IsBold: Boolean read get_IsBold write set_IsBold;
    ///<summary>
    ///  Gets or sets the integral entry category, which is a number that corresponds to the order of
    ///  categories.
    ///</summary>
    property EntryCategory: string read get_EntryCategory write set_EntryCategory;
    ///<summary>
    ///  Gets or sets whether to apply italic formatting to the page number for the entry.
    ///</summary>
    property IsItalic: Boolean read get_IsItalic write set_IsItalic;
    ///<summary>
    ///  Gets or sets the long citation for the entry.
    ///</summary>
    property LongCitation: string read get_LongCitation write set_LongCitation;
    ///<summary>
    ///  Gets or sets the name of the bookmark that marks a range of pages that is inserted as the entry's page number.
    ///</summary>
    property PageRangeBookmarkName: string read get_PageRangeBookmarkName write set_PageRangeBookmarkName;
    ///<summary>
    ///  Gets or sets the short citation for the entry.
    ///</summary>
    property ShortCitation: string read get_ShortCitation write set_ShortCitation;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldTA = class(TDNGenericImport<DNFieldTAClass, DNFieldTA>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldTCClass = interface(DNFieldClass)
  ['{F776998A-FBFD-56EF-A9E0-0057204C0C44}']
  { constructors } 

    {class} function init: DNFieldTC;

  end;

  ///<summary>
  ///  Implements the TC field.
  ///</summary>
  ///<remarks>
  ///  Defines the text and page number for a table of contents (including a table of figures) entry, which
  ///  is used by a TOC field.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldTC')]
  DNFieldTC = interface(DNField)
  ['{84CF866A-2357-386B-9355-D5AD99143128}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_TypeIdentifier: string;
    procedure set_TypeIdentifier(value: string);
    function get_EntryLevel: string;
    procedure set_EntryLevel(value: string);
    function get_OmitPageNumber: Boolean;
    procedure set_OmitPageNumber(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the text of the entry.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Gets or sets a type identifier for this field (which is typically a letter).
    ///</summary>
    property TypeIdentifier: string read get_TypeIdentifier write set_TypeIdentifier;
    ///<summary>
    ///  Gets or sets the level of the entry.
    ///</summary>
    property EntryLevel: string read get_EntryLevel write set_EntryLevel;
    ///<summary>
    ///  Gets or sets whether page number in TOC should be omitted for this field.
    ///</summary>
    property OmitPageNumber: Boolean read get_OmitPageNumber write set_OmitPageNumber;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldTC = class(TDNGenericImport<DNFieldTCClass, DNFieldTC>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldTemplateClass = interface(DNFieldClass)
  ['{8F72B61C-F4D1-51CF-8900-DFFF1EA0E6A7}']
  { constructors } 

    {class} function init: DNFieldTemplate;

  end;

  ///<summary>
  ///  Implements the TEMPLATE field.
  ///</summary>
  ///<remarks>
  ///  Retrieves the file name of the template used by the current document.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldTemplate')]
  DNFieldTemplate = interface(DNField)
  ['{673CA90A-E23A-3ED3-A6DE-29783ECE16FD}']
  { getters & setters } 

    function get_IncludeFullPath: Boolean;
    procedure set_IncludeFullPath(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets whether to include the full file path name.
    ///</summary>
    property IncludeFullPath: Boolean read get_IncludeFullPath write set_IncludeFullPath;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldTemplate = class(TDNGenericImport<DNFieldTemplateClass, DNFieldTemplate>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldTimeClass = interface(DNFieldClass)
  ['{4AB512A7-F442-5208-851B-49C14F0FEC85}']
  { constructors } 

    {class} function init: DNFieldTime;

  end;

  ///<summary>
  ///  Implements the TIME field.
  ///</summary>
  ///<remarks>
  ///  Inserts the current date and time.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldTime')]
  DNFieldTime = interface(DNField)
  ['{0C071C20-F292-3F86-8D2F-95494213A8A6}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldTime = class(TDNGenericImport<DNFieldTimeClass, DNFieldTime>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldTitleClass = interface(DNFieldClass)
  ['{955E1D5C-F010-5CD6-AFF4-2CA06FC9AAD6}']
  { constructors } 

    {class} function init: DNFieldTitle;

  end;

  ///<summary>
  ///  Implements the TITLE field.
  ///</summary>
  ///<remarks>
  ///  Retrieves, and optionally sets, the document's title, as recorded in the <b>Title</b>
  ///  property of the
  ///  built-in document properties.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldTitle')]
  DNFieldTitle = interface(DNField)
  ['{4332E7B6-8546-3C37-AE4E-AEE4E696660F}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the text of the title.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldTitle = class(TDNGenericImport<DNFieldTitleClass, DNFieldTitle>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldToaClass = interface(DNFieldClass)
  ['{784804B3-44ED-5FD6-A51B-1066099FD8F9}']
  { constructors } 

    {class} function init: DNFieldToa;

  end;

  ///<summary>
  ///  Implements the TOA field.
  ///</summary>
  ///<remarks>
  ///  Builds a table of authorities (that is, a list of the references in a legal document, such as references
  ///  to cases, statutes, and rules, along with the numbers of the pages on which the references appear) using the
  ///  entries specified by TA fields.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldToa')]
  DNFieldToa = interface(DNField)
  ['{B364E83C-A4D9-392C-8C71-2D769A0F2355}']
  { getters & setters } 

    function get_BookmarkName: string;
    procedure set_BookmarkName(value: string);
    function get_EntryCategory: string;
    procedure set_EntryCategory(value: string);
    function get_SequenceSeparator: string;
    procedure set_SequenceSeparator(value: string);
    function get_EntrySeparator: string;
    procedure set_EntrySeparator(value: string);
    function get_RemoveEntryFormatting: Boolean;
    procedure set_RemoveEntryFormatting(value: Boolean);
    function get_PageRangeSeparator: string;
    procedure set_PageRangeSeparator(value: string);
    function get_UseHeading: Boolean;
    procedure set_UseHeading(value: Boolean);
    function get_PageNumberListSeparator: string;
    procedure set_PageNumberListSeparator(value: string);
    function get_UsePassim: Boolean;
    procedure set_UsePassim(value: Boolean);
    function get_SequenceName: string;
    procedure set_SequenceName(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the name of the bookmark that marks the portion of the document used to build the table.
    ///</summary>
    property BookmarkName: string read get_BookmarkName write set_BookmarkName;
    ///<summary>
    ///  Gets or sets the integral category for entries included in the table.
    ///</summary>
    property EntryCategory: string read get_EntryCategory write set_EntryCategory;
    ///<summary>
    ///  Gets or sets the character sequence that is used to separate sequence numbers and page numbers.
    ///</summary>
    property SequenceSeparator: string read get_SequenceSeparator write set_SequenceSeparator;
    ///<summary>
    ///  Gets or sets the character sequence that is used to separate a table of authorities entry and its page number.
    ///</summary>
    property EntrySeparator: string read get_EntrySeparator write set_EntrySeparator;
    ///<summary>
    ///  Gets or sets whether to remove the formatting of the entry text in the document from the
    ///  entry in the table of authorities.
    ///</summary>
    property RemoveEntryFormatting: Boolean read get_RemoveEntryFormatting write set_RemoveEntryFormatting;
    ///<summary>
    ///  Gets or sets the character sequence that is used to separate the start and end of a page range.
    ///</summary>
    property PageRangeSeparator: string read get_PageRangeSeparator write set_PageRangeSeparator;
    ///<summary>
    ///  Gets or sets whether to include the category heading for the entries in a table of authorities.
    ///</summary>
    property UseHeading: Boolean read get_UseHeading write set_UseHeading;
    ///<summary>
    ///  Gets or sets the character sequence that is used to separate two page numbers in a page number list.
    ///</summary>
    property PageNumberListSeparator: string read get_PageNumberListSeparator write set_PageNumberListSeparator;
    ///<summary>
    ///  Gets or sets whether to replace five or more different page references to the same
    ///  authority with "passim", which is used to indicate that a word or passage occurs frequently
    ///  in the work cited.
    ///</summary>
    property UsePassim: Boolean read get_UsePassim write set_UsePassim;
    ///<summary>
    ///  Gets or sets the name of a sequence whose number is included with the page number.
    ///</summary>
    property SequenceName: string read get_SequenceName write set_SequenceName;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldToa = class(TDNGenericImport<DNFieldToaClass, DNFieldToa>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldTocClass = interface(DNFieldClass)
  ['{B6273E42-B63B-55FB-ADAF-115250E3790C}']
  { constructors } 

    {class} function init: DNFieldToc;

  end;

  ///<summary>
  ///  Implements the TOC field.
  ///</summary>
  ///<remarks>
  ///  Builds a table of contents (which can also be a table of figures) using the entries specified by TC fields,
  ///  their heading levels, and specified styles, and inserts that table at this place in the document.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldToc')]
  DNFieldToc = interface(DNField)
  ['{034763C6-7CED-3EA3-AB9E-49BF1D9FA44A}']
  { getters & setters } 

    function get_BookmarkName: string;
    procedure set_BookmarkName(value: string);
    function get_TableOfFiguresLabel: string;
    procedure set_TableOfFiguresLabel(value: string);
    function get_CaptionlessTableOfFiguresLabel: string;
    procedure set_CaptionlessTableOfFiguresLabel(value: string);
    function get_SequenceSeparator: string;
    procedure set_SequenceSeparator(value: string);
    function get_EntryIdentifier: string;
    procedure set_EntryIdentifier(value: string);
    function get_InsertHyperlinks: Boolean;
    procedure set_InsertHyperlinks(value: Boolean);
    function get_EntryLevelRange: string;
    procedure set_EntryLevelRange(value: string);
    function get_PageNumberOmittingLevelRange: string;
    procedure set_PageNumberOmittingLevelRange(value: string);
    function get_HeadingLevelRange: string;
    procedure set_HeadingLevelRange(value: string);
    function get_EntrySeparator: string;
    procedure set_EntrySeparator(value: string);
    function get_PrefixedSequenceIdentifier: string;
    procedure set_PrefixedSequenceIdentifier(value: string);
    function get_CustomStyles: string;
    procedure set_CustomStyles(value: string);
    function get_UseParagraphOutlineLevel: Boolean;
    procedure set_UseParagraphOutlineLevel(value: Boolean);
    function get_PreserveTabs: Boolean;
    procedure set_PreserveTabs(value: Boolean);
    function get_PreserveLineBreaks: Boolean;
    procedure set_PreserveLineBreaks(value: Boolean);
    function get_HideInWebLayout: Boolean;
    procedure set_HideInWebLayout(value: Boolean);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Updates the page numbers for items in this table of contents.
    ///</summary>
    ///<returns>
    ///  True if the operation is successful. If any of the related TOC bookmarks was removed, false will be returned.
    ///</returns>
    function UpdatePageNumbers: Boolean;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the name of the bookmark that marks the portion of the document used to build the table.
    ///</summary>
    property BookmarkName: string read get_BookmarkName write set_BookmarkName;
    ///<summary>
    ///  Gets or sets the name of the sequence identifier used when building a table of figures.
    ///</summary>
    property TableOfFiguresLabel: string read get_TableOfFiguresLabel write set_TableOfFiguresLabel;
    ///<summary>
    ///  Gets or sets the name of the sequence identifier used when building a table of figures that does not include caption's
    ///  label and number.
    ///</summary>
    property CaptionlessTableOfFiguresLabel: string read get_CaptionlessTableOfFiguresLabel write set_CaptionlessTableOfFiguresLabel;
    ///<summary>
    ///  Gets or sets the character sequence that is used to separate sequence numbers and page numbers.
    ///</summary>
    property SequenceSeparator: string read get_SequenceSeparator write set_SequenceSeparator;
    ///<summary>
    ///  Gets or sets a string that should match type identifiers of TC fields being included.
    ///</summary>
    property EntryIdentifier: string read get_EntryIdentifier write set_EntryIdentifier;
    ///<summary>
    ///  Gets or sets whether to make the table of contents entries hyperlinks.
    ///</summary>
    property InsertHyperlinks: Boolean read get_InsertHyperlinks write set_InsertHyperlinks;
    ///<summary>
    ///  Gets or sets a range of levels of the table of contents entries to be included.
    ///</summary>
    property EntryLevelRange: string read get_EntryLevelRange write set_EntryLevelRange;
    ///<summary>
    ///  Gets or sets a range of levels of the table of contents entries from which to omits page numbers.
    ///</summary>
    property PageNumberOmittingLevelRange: string read get_PageNumberOmittingLevelRange write set_PageNumberOmittingLevelRange;
    ///<summary>
    ///  Gets or sets a range of heading levels to include.
    ///</summary>
    property HeadingLevelRange: string read get_HeadingLevelRange write set_HeadingLevelRange;
    ///<summary>
    ///  Gets or sets a sequence of characters that separate an entry and its page number.
    ///</summary>
    property EntrySeparator: string read get_EntrySeparator write set_EntrySeparator;
    ///<summary>
    ///  Gets or sets the identifier of a sequence for which a prefix should be added to the entry's page number.
    ///</summary>
    property PrefixedSequenceIdentifier: string read get_PrefixedSequenceIdentifier write set_PrefixedSequenceIdentifier;
    ///<summary>
    ///  Gets or sets a list of styles other than the built-in heading styles to include in the table of contents.
    ///</summary>
    property CustomStyles: string read get_CustomStyles write set_CustomStyles;
    ///<summary>
    ///  Gets or sets whether to use the applied paragraph outline level.
    ///</summary>
    property UseParagraphOutlineLevel: Boolean read get_UseParagraphOutlineLevel write set_UseParagraphOutlineLevel;
    ///<summary>
    ///  Gets or sets whether to preserve tab entries within table entries.
    ///</summary>
    property PreserveTabs: Boolean read get_PreserveTabs write set_PreserveTabs;
    ///<summary>
    ///  Gets or sets whether to preserve newline characters within table entries.
    ///</summary>
    property PreserveLineBreaks: Boolean read get_PreserveLineBreaks write set_PreserveLineBreaks;
    ///<summary>
    ///  Gets or sets whether to hide tab leader and page numbers in Web layout view.
    ///</summary>
    property HideInWebLayout: Boolean read get_HideInWebLayout write set_HideInWebLayout;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldToc = class(TDNGenericImport<DNFieldTocClass, DNFieldToc>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldUnknownClass = interface(DNFieldClass)
  ['{9E98DFA9-7F2A-5EFF-BC84-A6BC82C03A92}']
  { constructors } 

    {class} function init: DNFieldUnknown;

  end;

  ///<summary>
  ///  Implements an unknown or unrecognized field.
  ///</summary>
  ///<dev>
  ///  Such fields are normally treated as references to bookmarks.
  ///</dev>
  [DNTypeName('Aspose.Words.Fields.FieldUnknown')]
  DNFieldUnknown = interface(DNField)
  ['{1EC67080-FEC4-3C3E-9BFE-8AAA11C44191}']
  { getters & setters } 

    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldUnknown = class(TDNGenericImport<DNFieldUnknownClass, DNFieldUnknown>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldUserAddressClass = interface(DNFieldClass)
  ['{71397CEC-F20C-5689-B76B-FB5F790DABFA}']
  { constructors } 

    {class} function init: DNFieldUserAddress;

  end;

  ///<summary>
  ///  Implements the USERADDRESS field.
  ///</summary>
  ///<remarks>
  ///  Retrieves the current user's postal address.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldUserAddress')]
  DNFieldUserAddress = interface(DNField)
  ['{566692E5-D868-38FB-8B74-B43B2A6FCD39}']
  { getters & setters } 

    function get_UserAddress: string;
    procedure set_UserAddress(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the current user's postal address.
    ///</summary>
    property UserAddress: string read get_UserAddress write set_UserAddress;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldUserAddress = class(TDNGenericImport<DNFieldUserAddressClass, DNFieldUserAddress>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldUserInitialsClass = interface(DNFieldClass)
  ['{64363826-421D-565F-96DD-9D2114E8614F}']
  { constructors } 

    {class} function init: DNFieldUserInitials;

  end;

  ///<summary>
  ///  Implements the USERINITIALS field.
  ///</summary>
  ///<remarks>
  ///  Retrieves the current user's initials.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldUserInitials')]
  DNFieldUserInitials = interface(DNField)
  ['{3A1255E2-FCAC-3908-8E01-1A4A5C59F42B}']
  { getters & setters } 

    function get_UserInitials: string;
    procedure set_UserInitials(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the current user's initials.
    ///</summary>
    property UserInitials: string read get_UserInitials write set_UserInitials;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldUserInitials = class(TDNGenericImport<DNFieldUserInitialsClass, DNFieldUserInitials>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldUserNameClass = interface(DNFieldClass)
  ['{14372049-A714-571B-B054-7C2D08F19BBE}']
  { constructors } 

    {class} function init: DNFieldUserName;

  end;

  ///<summary>
  ///  Implements the USERNAME field.
  ///</summary>
  ///<remarks>
  ///  Retrieves the current user's name.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldUserName')]
  DNFieldUserName = interface(DNField)
  ['{E9B5D4D7-770F-3203-A056-481B97380407}']
  { getters & setters } 

    function get_UserName: string;
    procedure set_UserName(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gest or sets the current user's name.
    ///</summary>
    property UserName: string read get_UserName write set_UserName;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldUserName = class(TDNGenericImport<DNFieldUserNameClass, DNFieldUserName>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldXEClass = interface(DNFieldClass)
  ['{FBF9DC22-A0DA-50A6-B892-BAC8CD7FE78C}']
  { constructors } 

    {class} function init: DNFieldXE;

  end;

  ///<summary>
  ///  Implements the XE field.
  ///</summary>
  ///<remarks>
  ///  Defines the text and page number for an index entry, which is used by an INDEX field.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldXE')]
  DNFieldXE = interface(DNField)
  ['{68D7D654-D8B9-31C0-9E8F-36229D959A70}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_IsBold: Boolean;
    procedure set_IsBold(value: Boolean);
    function get_EntryType: string;
    procedure set_EntryType(value: string);
    function get_IsItalic: Boolean;
    procedure set_IsItalic(value: Boolean);
    function get_PageRangeBookmarkName: string;
    procedure set_PageRangeBookmarkName(value: string);
    function get_HasPageRangeBookmarkName: Boolean;
    function get_PageNumberReplacement: string;
    procedure set_PageNumberReplacement(value: string);
    function get_Yomi: string;
    procedure set_Yomi(value: string);
    function get_Start: DNFieldStart;
    function get_Separator: DNFieldSeparator;
    function get_End: DNFieldEnd;
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_DisplayResult: string;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Format: DNFieldFormat;
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///  Both field code and field result of child fields are included.
    ///</summary>
    function GetFieldCode: string; overload;
    ///<summary>
    ///  Returns text between field start and field separator (or field end if there is no separator).
    ///</summary>
    ///  <param name="includeChildFieldCodes"><c>True</c> if child field codes should be included.
    ///</param>
    function GetFieldCode(includeChildFieldCodes: Boolean): string; overload;
    ///<summary>
    ///  Removes the field from the document. Returns a node right after the field. If the field's end is the last child
    ///  of its parent node, returns its parent paragraph. If the field is already removed, returns <b>null</b>
    ///  .
    ///</summary>
    function Remove: DNNode;
    ///<summary>
    ///  Performs the field update. Throws if the field is being updated already.
    ///</summary>
    procedure Update; overload;
    ///<summary>
    ///  Performs a field update. Throws if the field is being updated already.
    ///</summary>
    ///  <param name="ignoreMergeFormat">
    ///  If <c>true</c> then direct field result formatting is abandoned, regardless of the MERGEFORMAT switch, otherwise normal update is performed.
    ///</param>
    procedure Update(ignoreMergeFormat: Boolean); overload;
    ///<summary>
    ///  Performs the field unlink.
    ///</summary>
    ///<remarks><para>Replaces the field with its most recent result.</para><para>Some fields, such as XE (Index Entry) fields and SEQ (Sequence) fields, cannot be unlinked.</para></remarks>
    ///<returns><c>True</c> if the field has been unlinked, otherwise <c>false</c>.
    ///</returns>
    function Unlink: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the text of the entry.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Gets or sets whether to apply bold formatting to the entry's page number.
    ///</summary>
    property IsBold: Boolean read get_IsBold write set_IsBold;
    ///<summary>
    ///  Gets or sets an index entry type.
    ///</summary>
    property EntryType: string read get_EntryType write set_EntryType;
    ///<summary>
    ///  Gets or sets whether to apply italic formatting to the entry's page number.
    ///</summary>
    property IsItalic: Boolean read get_IsItalic write set_IsItalic;
    ///<summary>
    ///  Gets or sets the name of the bookmark that marks a range of pages that is inserted as the entry's page number.
    ///</summary>
    property PageRangeBookmarkName: string read get_PageRangeBookmarkName write set_PageRangeBookmarkName;
    ///<summary>
    ///  Gets a value indicating whether a page range bookmark name is provided through the field's code.
    ///</summary>
    property HasPageRangeBookmarkName: Boolean read get_HasPageRangeBookmarkName;
    ///<summary>
    ///  Gets or sets text used in place of a page number.
    ///</summary>
    property PageNumberReplacement: string read get_PageNumberReplacement write set_PageNumberReplacement;
    ///<summary>
    ///  Gets or sets the yomi (first phonetic character for sorting indexes) for the index entry
    ///</summary>
    property Yomi: string read get_Yomi write set_Yomi;
    ///<summary>
    ///  Gets the node that represents the start of the field.
    ///</summary>
    property Start: DNFieldStart read get_Start;
    ///<summary>
    ///  Gets the node that represents the field separator. Can be null.
    ///</summary>
    property Separator: DNFieldSeparator read get_Separator;
    ///<summary>
    ///  Gets the node that represents the field end.
    ///</summary>
    property &End: DNFieldEnd read get_End;
    ///<summary>
    ///  Gets the Microsoft Word field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets text that is between the field separator and field end.
    ///</summary>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Gets the text that represents the displayed field result.
    ///</summary>
    ///<remarks>
    ///  The <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method must be called to obtain correct value for the
    ///<see cref="T:Aspose.Words.Fields.FieldListNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNum" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldAutoNumOut" />
    ///  and <see cref="T:Aspose.Words.Fields.FieldAutoNumLgl" />
    ///  fields.
    ///</remarks>
    property DisplayResult: string read get_DisplayResult;
    ///<summary>
    ///  Gets or sets whether the field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Fields.FieldFormat" />
    ///  object that provides typed access to field's formatting.
    ///</summary>
    property Format: DNFieldFormat read get_Format;
    ///<summary>
    ///  Gets or sets the LCID of the field.
    ///</summary>
    ///<seealso cref="F:Aspose.Words.Fields.FieldUpdateCultureSource.FieldCode" />
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
  end;

  TDNFieldXE = class(TDNGenericImport<DNFieldXEClass, DNFieldXE>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldArgumentBuilderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1A8CFB73-62BF-528A-A9D5-D370BA38F2E7}']
  { constructors } 

    ///<summary>
    ///  Initializes an instance of the <see cref="T:Aspose.Words.Fields.FieldArgumentBuilder" />
    ///  class.
    ///</summary>
    {class} function init: DNFieldArgumentBuilder;

  end;

  ///<summary>
  ///  Builds a complex field argument consisting of fields, nodes, and plain text.
  ///</summary>
  [DNTypeName('Aspose.Words.Fields.FieldArgumentBuilder')]
  DNFieldArgumentBuilder = interface(DDN.mscorlib.DNObject)
  ['{19C4380F-F7E9-3A34-908D-872E7BDAED2C}']
  { methods } 

    ///<summary>
    ///  Adds a plain text to the argument.
    ///</summary>
    function AddText(text: string): DNFieldArgumentBuilder;
    ///<summary>
    ///  Adds a node to the argument.
    ///</summary>
    ///<remarks>
    ///  Only text level nodes are supported at the moment.
    ///</remarks>
    function AddNode(node: DNInline): DNFieldArgumentBuilder;
    ///<summary>
    ///  Adds a field represented by a <see cref="T:Aspose.Words.Fields.FieldBuilder" />
    ///  to the argument.
    ///</summary>
    function AddField(fieldBuilder: DNFieldBuilder): DNFieldArgumentBuilder;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFieldArgumentBuilder = class(TDNGenericImport<DNFieldArgumentBuilderClass, DNFieldArgumentBuilder>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldBuilderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{17AF38BD-7AEC-5A69-9395-998FE1E35888}']
  { constructors } 

    ///<summary>
    ///  Initializes an instance of the <see cref="T:Aspose.Words.Fields.FieldBuilder" />
    ///  class.
    ///</summary>
    ///  <param name="fieldType">The type of the field to build.</param>
    {class} function init(fieldType: DNFieldType): DNFieldBuilder;

  end;

  ///<summary>
  ///  Builds a field from field code tokens (arguments and switches).
  ///</summary>
  [DNTypeName('Aspose.Words.Fields.FieldBuilder')]
  DNFieldBuilder = interface(DDN.mscorlib.DNObject)
  ['{F9DE7A12-1AA8-3169-82AD-8E63B3A12350}']
  { methods } 

    ///<summary>
    ///  Adds a field's argument.
    ///</summary>
    ///  <param name="argument">The argument value.</param>
    function AddArgument(argument: string): DNFieldBuilder; overload;
    ///<summary>
    ///  Adds a field's argument.
    ///</summary>
    ///  <param name="argument">The argument value.</param>
    function AddArgument(argument: Int32): DNFieldBuilder; overload;
    ///<summary>
    ///  Adds a field's argument.
    ///</summary>
    ///  <param name="argument">The argument value.</param>
    function AddArgument(argument: Double): DNFieldBuilder; overload;
    ///<summary>
    ///  Adds a child field represented by another <see cref="T:Aspose.Words.Fields.FieldBuilder" />
    ///  to the field's code.
    ///</summary>
    ///<remarks>
    ///  This overload is used when the argument consists of a single child field.
    ///</remarks>
    function AddArgument(argument: DNFieldBuilder): DNFieldBuilder; overload;
    ///<summary>
    ///  Adds a field's argument represented by <see cref="T:Aspose.Words.Fields.FieldArgumentBuilder" />
    ///  to the field's code.
    ///</summary>
    ///<remarks>
    ///  This overload is used when the argument consists of a mixture of different parts such as child fields, nodes, and plain text.
    ///</remarks>
    function AddArgument(argument: DNFieldArgumentBuilder): DNFieldBuilder; overload;
    ///<summary>
    ///  Adds a field's switch.
    ///</summary>
    ///<remarks>
    ///  This overload adds a flag (switch without argument).
    ///</remarks>
    ///  <param name="switchName">The switch name.</param>
    function AddSwitch(switchName: string): DNFieldBuilder; overload;
    ///<summary>
    ///  Adds a field's switch.
    ///</summary>
    ///  <param name="switchName">The switch name.</param>
    ///  <param name="switchArgument">The switch value.</param>
    function AddSwitch(switchName: string; switchArgument: string): DNFieldBuilder; overload;
    ///<summary>
    ///  Adds a field's switch.
    ///</summary>
    ///  <param name="switchName">The switch name.</param>
    ///  <param name="switchArgument">The switch value.</param>
    function AddSwitch(switchName: string; switchArgument: Int32): DNFieldBuilder; overload;
    ///<summary>
    ///  Adds a field's switch.
    ///</summary>
    ///  <param name="switchName">The switch name.</param>
    ///  <param name="switchArgument">The switch value.</param>
    function AddSwitch(switchName: string; switchArgument: Double): DNFieldBuilder; overload;
    ///<summary>
    ///  Builds and inserts a field into the document before the specified inline node.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Words.Fields.Field" />
    ///  object that represents the inserted field.</returns>
    function BuildAndInsert(refNode: DNInline): DNField; overload;
    ///<summary>
    ///  Builds and inserts a field into the document to the end of the specified paragraph.
    ///</summary>
    ///<returns>A <see cref="T:Aspose.Words.Fields.Field" />
    ///  object that represents the inserted field.</returns>
    function BuildAndInsert(refNode: DNParagraph): DNField; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFieldBuilder = class(TDNGenericImport<DNFieldBuilderClass, DNFieldBuilder>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CFF3D34E-436D-5848-B6EE-1BE51E3D52A4}']
  end;

  ///<summary>
  ///  A collection of <see cref="T:Aspose.Words.Fields.Field" />
  ///  objects that represents the fields in the specified range.
  ///</summary>
  ///<remarks><p>An instance of this collection iterates fields which start fall within the specified range.</p>
  ///  <p>The <see cref="T:Aspose.Words.Fields.FieldCollection" />
  ///  collection does not own the fields it contains, rather, is just a selection of fields.</p>
  ///  <p>The <see cref="T:Aspose.Words.Fields.FieldCollection" />
  ///  collection is "live", i.e. changes to the children of the node object
  ///  that it was created from are immediately reflected in the fields returned by the <see cref="T:Aspose.Words.Fields.FieldCollection" />
  ///  properties and methods.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldCollection')]
  DNFieldCollection = interface(DDN.mscorlib.DNObject)
  ['{E37D092F-F88D-32D7-AC71-4A8FEFC97A17}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNField;

  { methods } 

    ///<summary>
    ///  Removes the specified field from this collection and from the document.
    ///</summary>
    ///  <param name="field">A field to remove.</param>
    procedure Remove(field: DNField);
    ///<summary>
    ///  Removes a field at the specified index from this collection and from the document.
    ///</summary>
    ///  <param name="index">An index into the collection.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all fields of this collection from the document and from this collection itself.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Returns an enumerator object.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNField>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the number of the fields in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNField read get_Item; default;
  end;

  TDNFieldCollection = class(TDNGenericImport<DNFieldCollectionClass, DNFieldCollection>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9F9D2A74-724D-53AB-8C49-789E0171B193}']
  end;

  ///<summary>
  ///  Provides typed access to field's numeric, date and time, and general formatting.
  ///</summary>
  [DNTypeName('Aspose.Words.Fields.FieldFormat')]
  DNFieldFormat = interface(DDN.mscorlib.DNObject)
  ['{CC69843C-B7A3-38A7-B1FF-D30996524C64}']
  { getters & setters } 

    function get_NumericFormat: string;
    procedure set_NumericFormat(value: string);
    function get_DateTimeFormat: string;
    procedure set_DateTimeFormat(value: string);
    function get_GeneralFormats: DNGeneralFormatCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a formatting that is applied to a numeric field result. Corresponds to the \# switch.
    ///</summary>
    property NumericFormat: string read get_NumericFormat write set_NumericFormat;
    ///<summary>
    ///  Gets or sets a formatting that is applied to a date and time field result. Corresponds to the \@ switch.
    ///</summary>
    property DateTimeFormat: string read get_DateTimeFormat write set_DateTimeFormat;
    ///<summary>
    ///  Gets a collection of general formats that are applied to a numeric, text or any field result.
    ///  Corresponds to the \* switches.
    ///</summary>
    property GeneralFormats: DNGeneralFormatCollection read get_GeneralFormats;
  end;

  TDNFieldFormat = class(TDNGenericImport<DNFieldFormatClass, DNFieldFormat>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{243D5D84-F488-5E02-A55E-04935AB420C2}']
  end;

  ///<summary>
  ///  Represents options to control field handling in a document.
  ///</summary>
  [DNTypeName('Aspose.Words.Fields.FieldOptions')]
  DNFieldOptions = interface(DDN.mscorlib.DNObject)
  ['{21220D56-1015-3528-88F9-5DAA741837AA}']
  { getters & setters } 

    function get_FieldUpdateCultureSource: DNFieldUpdateCultureSource;
    procedure set_FieldUpdateCultureSource(value: DNFieldUpdateCultureSource);
    function get_FieldUpdateCultureProvider: DNIFieldUpdateCultureProvider;
    procedure set_FieldUpdateCultureProvider(value: DNIFieldUpdateCultureProvider);
    function get_IsBidiTextSupportedOnUpdate: Boolean;
    procedure set_IsBidiTextSupportedOnUpdate(value: Boolean);
    function get_UserPromptRespondent: DNIFieldUserPromptRespondent;
    procedure set_UserPromptRespondent(value: DNIFieldUserPromptRespondent);
    function get_ComparisonExpressionEvaluator: DNIComparisonExpressionEvaluator;
    procedure set_ComparisonExpressionEvaluator(value: DNIComparisonExpressionEvaluator);
    function get_DefaultDocumentAuthor: string;
    procedure set_DefaultDocumentAuthor(value: string);
    function get_CustomTocStyleSeparator: string;
    procedure set_CustomTocStyleSeparator(value: string);
    function get_LegacyNumberFormat: Boolean;
    procedure set_LegacyNumberFormat(value: Boolean);
    function get_UseInvariantCultureNumberFormat: Boolean;
    procedure set_UseInvariantCultureNumberFormat(value: Boolean);
    function get_BarcodeGenerator: DNIBarcodeGenerator;
    procedure set_BarcodeGenerator(value: DNIBarcodeGenerator);
    function get_PreProcessCulture: DDN.mscorlib.DNCultureInfo;
    procedure set_PreProcessCulture(value: DDN.mscorlib.DNCultureInfo);
    function get_CurrentUser: DNUserInformation;
    procedure set_CurrentUser(value: DNUserInformation);
    function get_ToaCategories: DNToaCategories;
    procedure set_ToaCategories(value: DNToaCategories);
    function get_FieldIndexFormat: DNFieldIndexFormat;
    procedure set_FieldIndexFormat(value: DNFieldIndexFormat);
    function get_FileName: string;
    procedure set_FileName(value: string);
    function get_ResultFormatter: DNIFieldResultFormatter;
    procedure set_ResultFormatter(value: DNIFieldResultFormatter);
    function get_BuiltInTemplatesPaths: TArray<string>;
    procedure set_BuiltInTemplatesPaths(value: TArray<string>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies what culture to use to format the field result.
    ///</summary>
    ///<remarks><para>By default, the culture of the current thread is used.</para><para>The setting affects only date/time fields with \\@ format switch.</para></remarks>
    property FieldUpdateCultureSource: DNFieldUpdateCultureSource read get_FieldUpdateCultureSource write set_FieldUpdateCultureSource;
    ///<summary>
    ///  Gets or sets a provider that returns a culture object specific for each particular field.
    ///</summary>
    ///<remarks><para>The provider is requested when the value of <see cref="P:Aspose.Words.Fields.FieldOptions.FieldUpdateCultureSource" />
    ///  is <b>FieldUpdateCultureSource.FieldCode</b>
    ///  .</para><para>If the provider is present, then the culture object it returns is used for the field update. Otherwise, a system culture is used.</para></remarks>
    property FieldUpdateCultureProvider: DNIFieldUpdateCultureProvider read get_FieldUpdateCultureProvider write set_FieldUpdateCultureProvider;
    ///<summary>
    ///  Gets or sets the value indicating whether bidirectional text is fully supported during field update or not.
    ///</summary>
    ///<remarks><para>When this property is set to <b>true</b>
    ///  , additional steps are performed to produce Right-To-Left language
    ///  (i.e. Arabic or Hebrew) compatible field result during its update.</para><para>When this property is set to <b>false</b>
    ///  and Right-To-Left language is used, correctness of field result
    ///  after its update is not guaranteed.</para><para>The default value is <b>false</b>
    ///  .</para></remarks>
    property IsBidiTextSupportedOnUpdate: Boolean read get_IsBidiTextSupportedOnUpdate write set_IsBidiTextSupportedOnUpdate;
    ///<summary>
    ///  Gets or sets the respondent to user prompts during field update.
    ///</summary>
    ///<remarks><para>If the value of this property is set to <b>null</b>
    ///  , the fields that require user response on prompting
    ///  (such as ASK or FILLIN) are not updated.</para><para>The default value is <b>null</b>
    ///  .</para></remarks>
    property UserPromptRespondent: DNIFieldUserPromptRespondent read get_UserPromptRespondent write set_UserPromptRespondent;
    ///<summary>
    ///  Gets or sets the field comparison expressions evaluator.
    ///</summary>
    ///<seealso cref="T:Aspose.Words.Fields.IComparisonExpressionEvaluator" />
    property ComparisonExpressionEvaluator: DNIComparisonExpressionEvaluator read get_ComparisonExpressionEvaluator write set_ComparisonExpressionEvaluator;
    ///<summary>
    ///  Gets or sets default document author's name. If author's name is already specified in built-in document properties,
    ///  this option is not considered.
    ///</summary>
    property DefaultDocumentAuthor: string read get_DefaultDocumentAuthor write set_DefaultDocumentAuthor;
    ///<summary>
    ///  Gets or sets custom style separator for the \t switch in TOC field.
    ///</summary>
    ///<remarks>
    ///  By default, custom styles defined by the \t switch in the TOC field are separated by a delimiter taken from the current culture.
    ///  This property overrides that behaviour by specifying a user defined delimiter.
    ///</remarks>
    property CustomTocStyleSeparator: string read get_CustomTocStyleSeparator write set_CustomTocStyleSeparator;
    ///<summary>
    ///  Gets or sets the value indicating whether legacy (early than AW 13.10) number format for fields is enabled or not.
    ///</summary>
    ///<remarks><para>When this property is set to <b>true</b>
    ///  , template symbol "#" worked as in .net:
    ///  Replaces the pound sign with the corresponding digit if one is present; otherwise, no symbols appears in the result string.</para><para>When this property is set to <b>false</b>
    ///  , template symbol "#" works as MS Word:
    ///  This format item specifies the requisite numeric places to display in the result.
    ///  If the result does not include a digit in that place, MS Word displays a space. For example, { = 9 + 6 \# $### } displays $ 15.</para><para>The default value is <b>false</b>
    ///  .</para></remarks>
    property LegacyNumberFormat: Boolean read get_LegacyNumberFormat write set_LegacyNumberFormat;
    ///<summary>
    ///  Gets or sets the value indicating that number format is parsed using invariant culture or not
    ///</summary>
    ///  <para>
    ///  When this property is set to <b>true</b>
    ///  , number format is taken from an invariant culture.
    ///</para><para>
    ///  When this property is set to <b>false</b>
    ///  , number format is taken from the current thread's culture.
    ///</para><para>The default value is <b>false</b>
    ///  .</para>
    property UseInvariantCultureNumberFormat: Boolean read get_UseInvariantCultureNumberFormat write set_UseInvariantCultureNumberFormat;
    ///<summary>
    ///  Gets or set custom barcode generator.
    ///</summary>
    ///<remarks>
    ///  Custom barcode generator should implement public interface <see cref="T:Aspose.Words.Fields.IBarcodeGenerator" />
    ///  .
    ///</remarks>
    property BarcodeGenerator: DNIBarcodeGenerator read get_BarcodeGenerator write set_BarcodeGenerator;
    ///<summary>
    ///  Gets or sets the culture to preprocess field values.
    ///</summary>
    ///<remarks><p>Currently this property only affects value of the DOCPROPERTY field.</p>
    ///  <p>The default value is <b>null</b>
    ///  . When this property is set to <b>null</b>
    ///  , the DOCPROPERTY field's value is preprocessed
    ///  with the culture controlled by the <see cref="P:Aspose.Words.Fields.FieldOptions.FieldUpdateCultureSource" />
    ///  property.</p>
    ///</remarks>
    property PreProcessCulture: DDN.mscorlib.DNCultureInfo read get_PreProcessCulture write set_PreProcessCulture;
    ///<summary>
    ///  Gets or sets the current user information.
    ///</summary>
    property CurrentUser: DNUserInformation read get_CurrentUser write set_CurrentUser;
    ///<summary>
    ///  Gets or sets the table of authorities categories.
    ///</summary>
    property ToaCategories: DNToaCategories read get_ToaCategories write set_ToaCategories;
    ///<summary>
    ///  Gets or sets a <see cref="P:Aspose.Words.Fields.FieldOptions.FieldIndexFormat" />
    ///  that represents
    ///  the formatting for the <see cref="T:Aspose.Words.Fields.FieldIndex" />
    ///  fields in the document.
    ///</summary>
    property FieldIndexFormat: DNFieldIndexFormat read get_FieldIndexFormat write set_FieldIndexFormat;
    ///<summary>
    ///  Gets or sets the file name of the document.
    ///</summary>
    ///<remarks><p>This property is used by the FILENAME field with higher priority than the <see cref="P:Aspose.Words.Document.OriginalFileName" />
    ///  property.</p>
    ///</remarks>
    property FileName: string read get_FileName write set_FileName;
    ///<summary>
    ///  Allows to control how the field result is formatted.
    ///</summary>
    property ResultFormatter: DNIFieldResultFormatter read get_ResultFormatter write set_ResultFormatter;
    ///<summary>
    ///  Gets or sets paths of MS Word built-in templates.
    ///</summary>
    ///<remarks><p>This property is used by the AUTOTEXT and GLOSSARY fields, if referenced auto text entry is not found in the <see cref="P:Aspose.Words.Document.AttachedTemplate" />
    ///  template.</p>
    ///  <p>By defalut MS Word stores built-in templates in c:\Users\&lt;username&gt;\AppData\Roaming\Microsoft\Document Building Blocks\1033\16\Built-In Building Blocks.dotx and
    ///  C:\Users\&lt;username&gt;\AppData\Roaming\Microsoft\Templates\Normal.dotm files.</p>
    ///</remarks>
    property BuiltInTemplatesPaths: TArray<string> read get_BuiltInTemplatesPaths write set_BuiltInTemplatesPaths;
  end;

  TDNFieldOptions = class(TDNGenericImport<DNFieldOptionsClass, DNFieldOptions>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFormFieldCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{445394B3-8184-5161-AF4D-FC3F13F1DB4E}']
  end;

  ///<summary>
  ///  A collection of <b>FormField</b>
  ///  objects that represent all the form fields in a range.
  ///</summary>
  ///<dev>Facade wrapper for a collection of form field objects.</dev>
  [DNTypeName('Aspose.Words.Fields.FormFieldCollection')]
  DNFormFieldCollection = interface(DDN.mscorlib.DNObject)
  ['{CD66D8CB-78E8-31A8-96FA-AF9796D9E7FB}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNFormField; overload;
    function get_Item(bookmarkName: string): DNFormField; overload;

  { methods } 

    ///<summary>
    ///  Removes a form field with the specified name.
    ///</summary>
    ///<remarks>
    ///  If there is a bookmark associated with the form field, the bookmark is not removed.
    ///</remarks>
    ///  <param name="formField">The case-insensitive name of the form field to remove.</param>
    procedure Remove(formField: string);
    ///<summary>
    ///  Removes a form field at the specified index.
    ///</summary>
    ///<remarks>
    ///  If there is a bookmark associated with the form field, the bookmark is not removed.
    ///</remarks>
    ///  <param name="index">The zero-based index of the form field to remove.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all form fields from this collection and from the document.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Returns an enumerator object.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNFormField>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the number of form fields in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNFormField read get_Item; default;
    property Item[bookmarkName: string]: DNFormField read get_Item; default;
  end;

  TDNFormFieldCollection = class(TDNGenericImport<DNFormFieldCollectionClass, DNFormFieldCollection>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNGeneralFormatCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{18F51988-E54E-5B53-B8C5-92795EF4CAAB}']
  end;

  ///<summary>
  ///  Represents a typed collection of general formats.
  ///</summary>
  [DNTypeName('Aspose.Words.Fields.GeneralFormatCollection')]
  DNGeneralFormatCollection = interface(DDN.mscorlib.DNObject)
  ['{E281C391-3062-3114-9849-07D5BA4AD4DA}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNGeneralFormat;

  { methods } 

    ///<summary>
    ///  Adds a general format to the collection.
    ///</summary>
    ///  <param name="item">A general format.</param>
    procedure Add(item: DNGeneralFormat);
    ///<summary>
    ///  Removes all occurrences of the specified general format from the collection.
    ///</summary>
    ///  <param name="item">A general format.</param>
    procedure Remove(item: DNGeneralFormat);
    ///<summary>
    ///  Removes a general format occurrence at the specified index.
    ///</summary>
    ///  <param name="index"></param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Returns an enumerator object.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNGeneralFormat>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the total number of the items in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNGeneralFormat read get_Item; default;
  end;

  TDNGeneralFormatCollection = class(TDNGenericImport<DNGeneralFormatCollectionClass, DNGeneralFormatCollection>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  ///<summary>
  ///  Public interface for barcode custom generator. Implementation should be provided by user.
  ///</summary>
  ///<remarks>
  ///  Generator instance should be passed through the <see cref="P:Aspose.Words.Fields.FieldOptions.BarcodeGenerator" />
  ///  property.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.IBarcodeGenerator')]
  DNIBarcodeGenerator = interface(DDN.mscorlib.DNObject)
  ['{D6B151F7-0BF2-3973-8176-C0C4E178C4ED}']
  { methods } 

    ///<summary>
    ///  Generate barcode image using the set of parameters (for DisplayBarcode field).
    ///</summary>
    ///  <param name="parameters">The set of parameters</param>
    ///<returns>Image representing generated barcode.</returns>
    function GetBarcodeImage(parameters: DNBarcodeParameters): DDN.Aspose.Common.DNImage;
    ///<summary>
    ///  Generate barcode image using the set of parameters (for old-fashioned Barcode field).
    ///</summary>
    ///  <param name="parameters">The set of parameters</param>
    ///<returns>Image representing generated barcode.</returns>
    function GetOldBarcodeImage(parameters: DNBarcodeParameters): DDN.Aspose.Common.DNImage;

  end;

  //-------------namespace: Aspose.Words.Fields----------------
  ///<summary>
  ///  When implemented, allows to override default comparison expressions evaluation for the <see cref="T:Aspose.Words.Fields.FieldIf" />
  ///  and <see cref="T:Aspose.Words.Fields.FieldCompare" />
  ///  fields.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Fields.FieldOptions.ComparisonExpressionEvaluator" />
  [DNTypeName('Aspose.Words.Fields.IComparisonExpressionEvaluator')]
  DNIComparisonExpressionEvaluator = interface(DDN.mscorlib.DNObject)
  ['{BDB4A8BE-6A68-3742-ADA1-5329DA8A168E}']
  { methods } 

    ///<summary>
    ///  Evaluates comparison expression.
    ///</summary>
    ///<remarks>
    ///  The implementation should return <b>null</b>
    ///  to indicate that the default evaluation should be performed.
    ///</remarks>
    function Evaluate(field: DNField; expression: DNComparisonExpression): DNComparisonEvaluationResult;

  end;

  //-------------namespace: Aspose.Words.Fields----------------
  ///<summary>
  ///  Implement this interface if you want to control how the field result is formatted.
  ///</summary>
  [DNTypeName('Aspose.Words.Fields.IFieldResultFormatter')]
  DNIFieldResultFormatter = interface(DDN.mscorlib.DNObject)
  ['{97E06029-227C-364E-B0E1-9BE0B49103DC}']
  { methods } 

    ///<summary>
    ///  Called when Aspose.Words applies a numeric format switch, i.e. \# "#.##".
    ///</summary>
    ///<remarks>
    ///  The implementation should return <b>null</b>
    ///  to indicate that the default formatting should be applied.
    ///</remarks>
    function FormatNumeric(value: Double; format: string): string;
    ///<summary>
    ///  Called when Aspose.Words applies a date/time format switch, i.e. \@ "dd.MM.yyyy".
    ///</summary>
    ///<remarks>
    ///  The implementation should return <b>null</b>
    ///  to indicate that the default formatting should be applied.
    ///</remarks>
    function FormatDateTime(value: DDN.mscorlib.DNDateTime; format: string; calendarType: DNCalendarType): string;
    ///<summary>
    ///  Called when Aspose.Words applies a capitalization format switch, i.e. \* Upper.
    ///</summary>
    ///<remarks>
    ///  The implementation should return <b>null</b>
    ///  to indicate that the default formatting should be applied.
    ///</remarks>
    function Format(value: string; format: DNGeneralFormat): string; overload;
    ///<summary>
    ///  Called when Aspose.Words applies a number format switch, i.e. \* Ordinal.
    ///</summary>
    ///<remarks>
    ///  The implementation should return <b>null</b>
    ///  to indicate that the default formatting should be applied.
    ///</remarks>
    function Format(value: Double; format: DNGeneralFormat): string; overload;

  end;

  //-------------namespace: Aspose.Words.Fields----------------
  ///<summary>
  ///  When implemented, provides a <see cref="T:System.Globalization.CultureInfo" />
  ///  object that should be used during the update of a particular field.
  ///</summary>
  [DNTypeName('Aspose.Words.Fields.IFieldUpdateCultureProvider')]
  DNIFieldUpdateCultureProvider = interface(DDN.mscorlib.DNObject)
  ['{835EBA32-A873-3A3E-A484-52A967203D77}']
  { methods } 

    ///<summary>
    ///  Returns a <see cref="T:System.Globalization.CultureInfo" />
    ///  object to be used during the field's update.
    ///</summary>
    ///  <param name="culture">The name of the culture requested for the field being updated.</param>
    ///  <param name="field">The field being updated.</param>
    ///<returns>The culture object that should be used for the field's update.</returns>
    function GetCulture(culture: string; field: DNField): DDN.mscorlib.DNCultureInfo;

  end;

  //-------------namespace: Aspose.Words.Fields----------------
  ///<summary>
  ///  Represents the respondent to user prompts during field update.
  ///</summary>
  ///<remarks>
  ///  The ASK and FILLIN fields are the examples of fields that prompt the user for some response. Implement this interface
  ///  and assign it to the <see cref="P:Aspose.Words.Fields.FieldOptions.UserPromptRespondent" />
  ///  property to establish interaction between field update
  ///  and the user.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.IFieldUserPromptRespondent')]
  DNIFieldUserPromptRespondent = interface(DDN.mscorlib.DNObject)
  ['{F36797B9-8E3C-3C7B-AEC4-F7433F1B74F8}']
  { methods } 

    ///<summary>
    ///  When implemented, returns a response from the user on prompting.
    ///  Your implementation should return <b>null</b>
    ///  to indicate that the user has not responded to the prompt
    ///  (i.e. the user has pressed the Cancel button in the prompt window).
    ///</summary>
    ///  <param name="promptText">Prompt text (i.e. title of the prompt window).</param>
    ///  <param name="defaultResponse">Default user response (i.e. initial value contained in the prompt window).</param>
    ///<returns>User response (i.e. confirmed value contained in the prompt window).</returns>
    function Respond(promptText: string; defaultResponse: string): string;

  end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNMergeFieldImageDimensionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{70210FEB-A8B0-5AA6-9D35-C967E7C7E98A}']
  { constructors } 

    ///<summary>
    ///  Creates an image dimension instance with the given value in points.
    ///</summary>
    ///<remarks>
    ///  You should use a negative value to indicate that the original value of the corresponding image dimension
    ///  should be applied.
    ///</remarks>
    ///  <param name="value">The value.</param>
    {class} function init(value: Double): DNMergeFieldImageDimension; overload;
    ///<summary>
    ///  Creates an image dimension instance with the given value and the given unit.
    ///</summary>
    ///<remarks>
    ///  You should use a negative value to indicate that the original value of the corresponding image dimension
    ///  should be applied.
    ///</remarks>
    ///  <param name="value">The value.</param>
    ///  <param name="unit">The unit.</param>
    {class} function init(value: Double; &unit: DNMergeFieldImageDimensionUnit): DNMergeFieldImageDimension; overload;

  end;

  ///<summary>
  ///  Represents an image dimension (i.e. the width or the height) used across a mail merge process.
  ///</summary>
  ///<remarks>
  ///  To indicate that the image should be inserted with its original dimension during a mail merge,
  ///  you should assign a negative value to the <see cref="P:Aspose.Words.Fields.MergeFieldImageDimension.Value" />
  ///  property.
  ///<seealso cref="T:Aspose.Words.Fields.MergeFieldImageDimensionUnit" />
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.MergeFieldImageDimension')]
  DNMergeFieldImageDimension = interface(DDN.mscorlib.DNObject)
  ['{524C8B31-2ED0-34F1-B563-0F0D7208F424}']
  { getters & setters } 

    function get_Value: Double;
    procedure set_Value(value: Double);
    function get_Unit: DNMergeFieldImageDimensionUnit;
    procedure set_Unit(value: DNMergeFieldImageDimensionUnit);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  The value.
    ///</summary>
    ///<remarks>
    ///  You should use a negative value to indicate that the original value of the corresponding image dimension
    ///  should be applied.
    ///</remarks>
    property Value: Double read get_Value write set_Value;
    ///<summary>
    ///  The unit.
    ///</summary>
    property &Unit: DNMergeFieldImageDimensionUnit read get_Unit write set_Unit;
  end;

  TDNMergeFieldImageDimension = class(TDNGenericImport<DNMergeFieldImageDimensionClass, DNMergeFieldImageDimension>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNToaCategoriesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E18C36F8-4F87-54CF-8523-874FB0FE4857}']
  { static getter & setter } 

    {class} function get_DefaultCategories: DNToaCategories;

  { constructors } 

    {class} function init: DNToaCategories;

  { static propertys } 

    ///<summary>
    ///  Gets the default table of authorities categories.
    ///</summary>
    ///<remarks>
    ///  Use the <see cref="P:Aspose.Words.Fields.FieldOptions.ToaCategories" />
    ///  property to specify table of authorities categories for a single document.
    ///</remarks>
    {class} property DefaultCategories: DNToaCategories read get_DefaultCategories;
  end;

  ///<summary>
  ///  Represents a table of authorities categories.
  ///</summary>
  [DNTypeName('Aspose.Words.Fields.ToaCategories')]
  DNToaCategories = interface(DDN.mscorlib.DNObject)
  ['{85596E88-BD10-3658-B1E6-46FA2E5BC8EB}']
  { getters & setters } 

    function get_Item(number: Int32): string;
    procedure set_Item(number: Int32; value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[number: Int32]: string read get_Item write set_Item; default;
  end;

  TDNToaCategories = class(TDNGenericImport<DNToaCategoriesClass, DNToaCategories>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNUserInformationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7041EB5F-3E19-533A-91D5-A1F5F178C6E8}']
  { static getter & setter } 

    {class} function get_DefaultUser: DNUserInformation;

  { constructors } 

    {class} function init: DNUserInformation;

  { static propertys } 

    ///<summary>
    ///  Default user information.
    ///</summary>
    ///<remarks>
    ///  Use the <see cref="P:Aspose.Words.Fields.FieldOptions.CurrentUser" />
    ///  property to specify user information for single document.
    ///</remarks>
    {class} property DefaultUser: DNUserInformation read get_DefaultUser;
  end;

  ///<summary>
  ///  Specifies information about the user.
  ///</summary>
  [DNTypeName('Aspose.Words.Fields.UserInformation')]
  DNUserInformation = interface(DDN.mscorlib.DNObject)
  ['{7B860C04-F96D-3CE1-9419-957FB300E3C6}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Initials: string;
    procedure set_Initials(value: string);
    function get_Address: string;
    procedure set_Address(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the user's name.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets or sets the user's initials.
    ///</summary>
    property Initials: string read get_Initials write set_Initials;
    ///<summary>
    ///  Gets or sets the user's postal address.
    ///</summary>
    property Address: string read get_Address write set_Address;
  end;

  TDNUserInformation = class(TDNGenericImport<DNUserInformationClass, DNUserInformation>) end;

  //-------------namespace: Aspose.Words----------------
  DNFileFormatInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A35051DB-ED4C-5025-A3B5-06FB48E9E456}']
  end;

  ///<summary>
  ///  Contains data returned by <see cref="T:Aspose.Words.FileFormatUtil" />
  ///  document format detection methods.
  ///</summary>
  ///<remarks><para>You do not create instances of this class directly. Objects of this class are returned by
  ///<see cref="M:Aspose.Words.FileFormatUtil.DetectFileFormat(System.IO.Stream)" />
  ///  methods.</para></remarks>
  [DNTypeName('Aspose.Words.FileFormatInfo')]
  DNFileFormatInfo = interface(DDN.mscorlib.DNObject)
  ['{96B1AF04-94FF-3138-8C7C-5FFA8EC1C8B6}']
  { getters & setters } 

    function get_LoadFormat: DNLoadFormat;
    function get_IsEncrypted: Boolean;
    function get_HasDigitalSignature: Boolean;
    function get_Encoding: DDN.mscorlib.DNEncoding;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the detected document format.
    ///</summary>
    ///<remarks><para>When an OOXML document is encrypted, it is not possible to ascertained whether it is
    ///  an Excel, Word or PowerPoint document without decrypting it first so for an encrypted OOXML
    ///  document this property will always return <see cref="F:Aspose.Words.LoadFormat.Docx" />
    ///  .</para><seealso cref="P:Aspose.Words.FileFormatInfo.IsEncrypted" />
    ///</remarks>
    property LoadFormat: DNLoadFormat read get_LoadFormat;
    ///<summary>
    ///  Returns true if the document is encrypted and requires a password to open.
    ///</summary>
    ///<remarks><para>This property exists to help you sort documents that are encrypted from those that are not.
    ///  If you attempt to load an encrypted document using Aspose.Words without supplying a password an
    ///  exception will be thrown. You can use this property to detect whether a document requires a password
    ///  and take some action before loading a document, for example, prompt the user for a password. </para><seealso cref="P:Aspose.Words.FileFormatInfo.LoadFormat" />
    ///</remarks>
    property IsEncrypted: Boolean read get_IsEncrypted;
    ///<summary>
    ///  Returns true if this document contains a digital signature.
    ///  This property merely informs that a digital signature is present on a document,
    ///  but it does not  specify whether the signature is valid or not.
    ///</summary>
    ///<remarks><para>This property exists to help you sort documents that are digitally signed from those that are not.
    ///  If you use Aspose.Words to modify and save a document that is digitally signed, then the digital signature will
    ///  be lost. This is by design because a digital signature exists to guard the authenticity of a document.
    ///  Using this property you can detect digitally signed documents before processing them in the same way as normal
    ///  documents and take some action to avoid losing the digital signature, for example notify the user.
    ///</para></remarks>
    property HasDigitalSignature: Boolean read get_HasDigitalSignature;
    ///<summary>
    ///  Gets the detected encoding if applicable to the current document format.
    ///  At the moment detects encoding only for HTML documents.
    ///</summary>
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding;
  end;

  TDNFileFormatInfo = class(TDNGenericImport<DNFileFormatInfoClass, DNFileFormatInfo>) end;

  //-------------namespace: Aspose.Words----------------
  DNFileFormatUtilClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C964A4F4-3422-5979-8958-AD4C40FDB4D5}']
  { static methods } 

    ///<overloads>Detects and returns the information about a format of a document.</overloads><summary>
    ///  Detects and returns the information about a format of a document stored in a disk file.
    ///</summary>
    ///<remarks><para>Even if this method detects the document format, it does not guarantee
    ///  that the specified document is valid. This method only detects the document format by
    ///  reading data that is sufficient for detection. To fully verify that a document is valid
    ///  you need to load the document into a <see cref="T:Aspose.Words.Document" />
    ///  object.</para><para>This method throws <see cref="T:Aspose.Words.FileCorruptedException" />
    ///  when the format is
    ///  recognized, but the detection cannot complete because of corruption.</para></remarks>
    ///  <param name="fileName">The file name.</param>
    ///<returns>A <see cref="T:Aspose.Words.FileFormatInfo" />
    ///  object that contains the detected information.</returns>
    {class} function DetectFileFormat(fileName: string): DNFileFormatInfo; overload;
    ///<summary>
    ///  Detects and returns the information about a format of a document stored in a stream.
    ///</summary>
    ///<remarks><para>The stream must be positioned at the beginning of the document.</para><para>When this method returns, the position in the stream is restored to the original position.</para><para>Even if this method detects the document format, it does not guarantee
    ///  that the specified document is valid. This method only detects the document format by
    ///  reading data that is sufficient for detection. To fully verify that a document is valid
    ///  you need to load the document into a <see cref="T:Aspose.Words.Document" />
    ///  object.</para><para>This method throws <see cref="T:Aspose.Words.FileCorruptedException" />
    ///  when the format is
    ///  recognized, but the detection cannot complete because of corruption.</para></remarks>
    ///  <param name="stream">The stream.</param>
    ///<returns>A <see cref="T:Aspose.Words.FileFormatInfo" />
    ///  object that contains the detected information.</returns>
    {class} function DetectFileFormat(stream: DDN.mscorlib.DNStream): DNFileFormatInfo; overload;
    ///<summary>
    ///  Converts IANA content type into a load format enumerated value.
    ///</summary>
    ///<exception cref="T:System.ArgumentException">Throws when cannot convert.</exception>
    {class} function ContentTypeToLoadFormat(contentType: string): DNLoadFormat;
    ///<summary>
    ///  Converts IANA content type into a save format enumerated value.
    ///</summary>
    ///<exception cref="T:System.ArgumentException">Throws when cannot convert.</exception>
    {class} function ContentTypeToSaveFormat(contentType: string): DNSaveFormat;
    ///<summary>
    ///  Converts a load format enumerated value into a file extension. The returned extension is a lower-case string with a leading dot.
    ///</summary>
    ///<remarks><para>The <see cref="F:Aspose.Words.SaveFormat.WordML" />
    ///  value is converted to ".wml".</para></remarks>
    ///<exception cref="T:System.ArgumentException">Throws when cannot convert.</exception>
    {class} function LoadFormatToExtension(loadFormat: DNLoadFormat): string;
    ///<summary>
    ///  Converts a <see cref="T:Aspose.Words.SaveFormat" />
    ///  value to a <see cref="T:Aspose.Words.LoadFormat" />
    ///  value if possible.
    ///</summary>
    ///<exception cref="T:System.ArgumentException">Throws when cannot convert.</exception>
    {class} function SaveFormatToLoadFormat(saveFormat: DNSaveFormat): DNLoadFormat;
    ///<summary>
    ///  Converts a <see cref="T:Aspose.Words.LoadFormat" />
    ///  value to a <see cref="T:Aspose.Words.SaveFormat" />
    ///  value if possible.
    ///</summary>
    ///<exception cref="T:System.ArgumentException">Throws when cannot convert.</exception>
    {class} function LoadFormatToSaveFormat(loadFormat: DNLoadFormat): DNSaveFormat;
    ///<summary>
    ///  Converts a save format enumerated value into a file extension. The returned extension is a lower-case string with a leading dot.
    ///</summary>
    ///<remarks><para>The <see cref="F:Aspose.Words.SaveFormat.WordML" />
    ///  value is converted to ".wml".</para><para>The <see cref="F:Aspose.Words.SaveFormat.FlatOpc" />
    ///  value is converted to ".fopc".</para></remarks>
    ///<exception cref="T:System.ArgumentException">Throws when cannot convert.</exception>
    {class} function SaveFormatToExtension(saveFormat: DNSaveFormat): string;
    ///<summary>
    ///  Converts a file name extension into a <see cref="T:Aspose.Words.SaveFormat" />
    ///  value.
    ///</summary>
    ///  <param name="extension">The file extension. Can be with or without a leading dot. Case-insensitive.</param>
    ///<remarks><p>If the extension cannot be recognized, returns <see cref="F:Aspose.Words.SaveFormat.Unknown" />
    ///  .</p>
    ///</remarks>
    ///<exception cref="T:System.ArgumentNullException">Throws if the parameter is null.</exception>
    {class} function ExtensionToSaveFormat(extension: string): DNSaveFormat;
    ///<summary>
    ///  Converts an Aspose.Words image type enumerated value into a file extension. The returned extension is a lower-case string with a leading dot.
    ///</summary>
    ///<exception cref="T:System.ArgumentException">Throws when cannot convert.</exception>
    {class} function ImageTypeToExtension(imageType: DNImageType): string;

  end;

  ///<summary>
  ///  Provides utility methods for working with file formats, such as detecting file format
  ///  or converting file extensions to/from file format enums.
  ///</summary>
  [DNTypeName('Aspose.Words.FileFormatUtil')]
  DNFileFormatUtil = interface(DDN.mscorlib.DNObject)
  ['{014DE47F-CBB7-3A05-AE06-CDECDC26225F}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFileFormatUtil = class(TDNGenericImport<DNFileFormatUtilClass, DNFileFormatUtil>) end;

  //-------------namespace: Aspose.Words----------------
  DNFontClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D2994000-8776-5395-B0FE-B6B5FF03D95A}']
  end;

  ///<summary>
  ///  Contains font attributes (font name, font size, color, and so on) for an object.
  ///</summary>
  ///<remarks><p>You do not create instances of the <see cref="T:Aspose.Words.Font" />
  ///  class directly. You just use
  ///<see cref="T:Aspose.Words.Font" />
  ///  to access the font properties of the various objects such as <see cref="T:Aspose.Words.Run" />
  ///  ,
  ///<see cref="T:Aspose.Words.Paragraph" />
  ///  , <see cref="T:Aspose.Words.Style" />
  ///  , <see cref="T:Aspose.Words.DocumentBuilder" />
  ///  .</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.Font')]
  DNFont = interface(DDN.mscorlib.DNObject)
  ['{FC330B45-38AE-3C81-BDEF-F9F93B2C9115}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_NameAscii: string;
    procedure set_NameAscii(value: string);
    function get_NameBi: string;
    procedure set_NameBi(value: string);
    function get_NameFarEast: string;
    procedure set_NameFarEast(value: string);
    function get_NameOther: string;
    procedure set_NameOther(value: string);
    function get_ThemeFont: DNThemeFont;
    procedure set_ThemeFont(value: DNThemeFont);
    function get_ThemeFontAscii: DNThemeFont;
    procedure set_ThemeFontAscii(value: DNThemeFont);
    function get_ThemeFontFarEast: DNThemeFont;
    procedure set_ThemeFontFarEast(value: DNThemeFont);
    function get_ThemeFontOther: DNThemeFont;
    procedure set_ThemeFontOther(value: DNThemeFont);
    function get_ThemeFontBi: DNThemeFont;
    procedure set_ThemeFontBi(value: DNThemeFont);
    function get_Size: Double;
    procedure set_Size(value: Double);
    function get_SizeBi: Double;
    procedure set_SizeBi(value: Double);
    function get_Bold: Boolean;
    procedure set_Bold(value: Boolean);
    function get_BoldBi: Boolean;
    procedure set_BoldBi(value: Boolean);
    function get_Italic: Boolean;
    procedure set_Italic(value: Boolean);
    function get_ItalicBi: Boolean;
    procedure set_ItalicBi(value: Boolean);
    function get_Color: DDN.Aspose.Common.DNColor;
    procedure set_Color(value: DDN.Aspose.Common.DNColor);
    function get_ThemeColor: DNThemeColor;
    procedure set_ThemeColor(value: DNThemeColor);
    function get_TintAndShade: Double;
    procedure set_TintAndShade(value: Double);
    function get_AutoColor: DDN.Aspose.Common.DNColor;
    function get_StrikeThrough: Boolean;
    procedure set_StrikeThrough(value: Boolean);
    function get_DoubleStrikeThrough: Boolean;
    procedure set_DoubleStrikeThrough(value: Boolean);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);
    function get_Outline: Boolean;
    procedure set_Outline(value: Boolean);
    function get_Emboss: Boolean;
    procedure set_Emboss(value: Boolean);
    function get_Engrave: Boolean;
    procedure set_Engrave(value: Boolean);
    function get_Superscript: Boolean;
    procedure set_Superscript(value: Boolean);
    function get_Subscript: Boolean;
    procedure set_Subscript(value: Boolean);
    function get_SmallCaps: Boolean;
    procedure set_SmallCaps(value: Boolean);
    function get_AllCaps: Boolean;
    procedure set_AllCaps(value: Boolean);
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_Underline: DNUnderline;
    procedure set_Underline(value: DNUnderline);
    function get_UnderlineColor: DDN.Aspose.Common.DNColor;
    procedure set_UnderlineColor(value: DDN.Aspose.Common.DNColor);
    function get_Scaling: Int32;
    procedure set_Scaling(value: Int32);
    function get_Spacing: Double;
    procedure set_Spacing(value: Double);
    function get_LineSpacing: Double;
    function get_Position: Double;
    procedure set_Position(value: Double);
    function get_Kerning: Double;
    procedure set_Kerning(value: Double);
    function get_HighlightColor: DDN.Aspose.Common.DNColor;
    procedure set_HighlightColor(value: DDN.Aspose.Common.DNColor);
    function get_TextEffect: DNTextEffect;
    procedure set_TextEffect(value: DNTextEffect);
    function get_Fill: DNFill;
    function get_Bidi: Boolean;
    procedure set_Bidi(value: Boolean);
    function get_ComplexScript: Boolean;
    procedure set_ComplexScript(value: Boolean);
    function get_NoProofing: Boolean;
    procedure set_NoProofing(value: Boolean);
    function get_LocaleId: Int32;
    procedure set_LocaleId(value: Int32);
    function get_LocaleIdBi: Int32;
    procedure set_LocaleIdBi(value: Int32);
    function get_LocaleIdFarEast: Int32;
    procedure set_LocaleIdFarEast(value: Int32);
    function get_Border: DNBorder;
    function get_Shading: DNShading;
    function get_Style: DNStyle;
    procedure set_Style(value: DNStyle);
    function get_StyleName: string;
    procedure set_StyleName(value: string);
    function get_StyleIdentifier: DNStyleIdentifier;
    procedure set_StyleIdentifier(value: DNStyleIdentifier);
    function get_SnapToGrid: Boolean;
    procedure set_SnapToGrid(value: Boolean);
    function get_EmphasisMark: DNEmphasisMark;
    procedure set_EmphasisMark(value: DNEmphasisMark);

  { methods } 

    ///<summary>
    ///  Checks if particular DrawingML text effect is applied.
    ///</summary>
    ///  <param name="dmlEffectType">DrawingML text effect type.</param>
    ///<returns>True if particular DrawingML text effect is applied.</returns>
    function HasDmlEffect(dmlEffectType: DNTextDmlEffect): Boolean;
    ///<summary>
    ///  Resets to default font formatting.
    ///</summary>
    ///<remarks><p>Removes all font formatting specified explicitly on the object from which
    ///<b>Font</b>
    ///  was obtained so the font formatting will be inherited from
    ///  the appropriate parent.</p>
    ///</remarks>
    procedure ClearFormatting;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the name of the font.
    ///</summary>
    ///<remarks><p>When getting, returns <see cref="P:Aspose.Words.Font.NameAscii" />
    ///  .</p>
    ///  <p>When setting, sets <see cref="P:Aspose.Words.Font.NameAscii" />
    ///  , <see cref="P:Aspose.Words.Font.NameBi" />
    ///  , <see cref="P:Aspose.Words.Font.NameFarEast" />
    ///  and <see cref="P:Aspose.Words.Font.NameOther" />
    ///  to the specified value.</p>
    ///</remarks>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns or sets the font used for Latin text (characters with character codes from 0 (zero) through 127).
    ///</summary>
    ///<seealso cref="P:Aspose.Words.Font.Name" />
    property NameAscii: string read get_NameAscii write set_NameAscii;
    ///<summary>
    ///  Returns or sets the name of the font in a right-to-left language document.
    ///</summary>
    ///<seealso cref="P:Aspose.Words.Font.Name" />
    property NameBi: string read get_NameBi write set_NameBi;
    ///<summary>
    ///  Returns or sets an East Asian font name.
    ///</summary>
    ///<seealso cref="P:Aspose.Words.Font.Name" />
    property NameFarEast: string read get_NameFarEast write set_NameFarEast;
    ///<summary>
    ///  Returns or sets the font used for characters with character codes from 128 through 255.
    ///</summary>
    ///<seealso cref="P:Aspose.Words.Font.Name" />
    property NameOther: string read get_NameOther write set_NameOther;
    ///<summary>
    ///  Gets or sets the theme font in the applied font scheme that is associated with this Font object.
    ///</summary>
    ///<dev><p>When getting, returns <see cref="P:Aspose.Words.Font.ThemeFont" />
    ///  depending on character category of the text.</p>
    ///  <p>When setting, sets <see cref="P:Aspose.Words.Font.ThemeFontAscii" />
    ///  , <see cref="P:Aspose.Words.Font.ThemeFontBi" />
    ///  ,
    ///<see cref="P:Aspose.Words.Font.ThemeFontFarEast" />
    ///  and <see cref="P:Aspose.Words.Font.ThemeFontOther" />
    ///  to the specified value.</p>
    ///</dev>
    property ThemeFont: DNThemeFont read get_ThemeFont write set_ThemeFont;
    ///<summary>
    ///  Gets or sets the theme font used for Latin text (characters with character codes from 0 (zero) through 127)
    ///  in the applied font scheme that is associated with this Font object.
    ///</summary>
    property ThemeFontAscii: DNThemeFont read get_ThemeFontAscii write set_ThemeFontAscii;
    ///<summary>
    ///  Gets or sets the East Asian theme font in the applied font scheme that is associated with this Font object.
    ///</summary>
    property ThemeFontFarEast: DNThemeFont read get_ThemeFontFarEast write set_ThemeFontFarEast;
    ///<summary>
    ///  Gets or sets the theme font used for characters with character codes from 128 through 255
    ///  in the applied font scheme that is associated with this Font object.
    ///</summary>
    property ThemeFontOther: DNThemeFont read get_ThemeFontOther write set_ThemeFontOther;
    ///<summary>
    ///  Gets or sets the theme font in the applied font scheme that is associated with this Font object
    ///  in a right-to-left language document.
    ///</summary>
    property ThemeFontBi: DNThemeFont read get_ThemeFontBi write set_ThemeFontBi;
    ///<summary>
    ///  Gets or sets the font size in points.
    ///</summary>
    property Size: Double read get_Size write set_Size;
    ///<summary>
    ///  Gets or sets the font size in points used in a right-to-left document.
    ///</summary>
    property SizeBi: Double read get_SizeBi write set_SizeBi;
    ///<summary>
    ///  True if the font is formatted as bold.
    ///</summary>
    property Bold: Boolean read get_Bold write set_Bold;
    ///<summary>
    ///  True if the right-to-left text is formatted as bold.
    ///</summary>
    property BoldBi: Boolean read get_BoldBi write set_BoldBi;
    ///<summary>
    ///  True if the font is formatted as italic.
    ///</summary>
    property Italic: Boolean read get_Italic write set_Italic;
    ///<summary>
    ///  True if the right-to-left text is formatted as italic.
    ///</summary>
    property ItalicBi: Boolean read get_ItalicBi write set_ItalicBi;
    ///<summary>
    ///  Gets or sets the color of the font.
    ///</summary>
    property Color: DDN.Aspose.Common.DNColor read get_Color write set_Color;
    ///<summary>
    ///  Gets or sets the theme color in the applied color scheme that is associated with this Font object.
    ///</summary>
    property ThemeColor: DNThemeColor read get_ThemeColor write set_ThemeColor;
    ///<summary>
    ///  Gets or sets a double value that lightens or darkens a color.
    ///</summary>
    ///<remarks><para> The allowed values are in range from -1 (darkest) to 1 (lightest) for this property.
    ///  Zero (0) is neutral. Attempting to set this property to a value less than -1 or more than 1
    ///  results in a <see cref="T:System.ArgumentOutOfRangeException" />
    ///  .</para><para> Setting this property for Font object with non-theme colors
    ///  results in a <see cref="T:System.InvalidOperationException" />
    ///  .</para></remarks>
    property TintAndShade: Double read get_TintAndShade write set_TintAndShade;
    ///<summary>
    ///  Returns the present calculated color of the text (black or white) to be used for 'auto color'.
    ///  If the color is not 'auto' then returns <see cref="P:Aspose.Words.Font.Color" />
    ///  .
    ///</summary>
    ///<remarks><p>
    ///  When text has 'automatic color', the actual color of text is calculated automatically
    ///  so that it is readable against the background color. As you change the background color,
    ///  the text color will automatically switch to black or white in MS Word to maximize legibility.</p>
    ///</remarks>
    property AutoColor: DDN.Aspose.Common.DNColor read get_AutoColor;
    ///<summary>
    ///  True if the font is formatted as strikethrough text.
    ///</summary>
    property StrikeThrough: Boolean read get_StrikeThrough write set_StrikeThrough;
    ///<summary>
    ///  True if the font is formatted as double strikethrough text.
    ///</summary>
    property DoubleStrikeThrough: Boolean read get_DoubleStrikeThrough write set_DoubleStrikeThrough;
    ///<summary>
    ///  True if the font is formatted as shadowed.
    ///</summary>
    property Shadow: Boolean read get_Shadow write set_Shadow;
    ///<summary>
    ///  True if the font is formatted as outline.
    ///</summary>
    property Outline: Boolean read get_Outline write set_Outline;
    ///<summary>
    ///  True if the font is formatted as embossed.
    ///</summary>
    property Emboss: Boolean read get_Emboss write set_Emboss;
    ///<summary>
    ///  True if the font is formatted as engraved.
    ///</summary>
    property Engrave: Boolean read get_Engrave write set_Engrave;
    ///<summary>
    ///  True if the font is formatted as superscript.
    ///</summary>
    property Superscript: Boolean read get_Superscript write set_Superscript;
    ///<summary>
    ///  True if the font is formatted as subscript.
    ///</summary>
    property Subscript: Boolean read get_Subscript write set_Subscript;
    ///<summary>
    ///  True if the font is formatted as small capital letters.
    ///</summary>
    property SmallCaps: Boolean read get_SmallCaps write set_SmallCaps;
    ///<summary>
    ///  True if the font is formatted as all capital letters.
    ///</summary>
    property AllCaps: Boolean read get_AllCaps write set_AllCaps;
    ///<summary>
    ///  True if the font is formatted as hidden text.
    ///</summary>
    property Hidden: Boolean read get_Hidden write set_Hidden;
    ///<summary>
    ///  Gets or sets the type of underline applied to the font.
    ///</summary>
    property Underline: DNUnderline read get_Underline write set_Underline;
    ///<summary>
    ///  Gets or sets the color of the underline applied to the font.
    ///</summary>
    property UnderlineColor: DDN.Aspose.Common.DNColor read get_UnderlineColor write set_UnderlineColor;
    ///<summary>
    ///  Gets or sets character width scaling in percent.
    ///</summary>
    property Scaling: Int32 read get_Scaling write set_Scaling;
    ///<summary>
    ///  Returns or sets the spacing (in points) between characters .
    ///</summary>
    property Spacing: Double read get_Spacing write set_Spacing;
    ///<summary>
    ///  Returns line spacing of this font (in points).
    ///</summary>
    property LineSpacing: Double read get_LineSpacing;
    ///<summary>
    ///  Gets or sets the position of text (in points) relative to the base line.
    ///  A positive number raises the text, and a negative number lowers it.
    ///</summary>
    property Position: Double read get_Position write set_Position;
    ///<summary>
    ///  Gets or sets the font size at which kerning starts.
    ///</summary>
    property Kerning: Double read get_Kerning write set_Kerning;
    ///<summary>
    ///  Gets or sets the highlight (marker) color.
    ///</summary>
    property HighlightColor: DDN.Aspose.Common.DNColor read get_HighlightColor write set_HighlightColor;
    ///<summary>
    ///  Gets or sets the font animation effect.
    ///</summary>
    property TextEffect: DNTextEffect read get_TextEffect write set_TextEffect;
    ///<summary>
    ///  Gets fill formatting for the Font.
    ///</summary>
    property Fill: DNFill read get_Fill;
    ///<summary>
    ///  Specifies whether the contents of this run shall have right-to-left characteristics.
    ///</summary>
    ///<remarks><para>This property, when on, shall not be used with strongly left-to-right text. Any behavior under that condition is unspecified.
    ///  This property, when off, shall not be used with strong right-to-left text. Any behavior under that condition is unspecified.</para><para>When the contents of this run are displayed, all characters shall be treated as complex script characters for formatting
    ///  purposes. This means that <see cref="P:Aspose.Words.Font.BoldBi" />
    ///  , <see cref="P:Aspose.Words.Font.ItalicBi" />
    ///  , <see cref="P:Aspose.Words.Font.SizeBi" />
    ///  and a corresponding font name
    ///  will be used when rendering this run.</para><para>Also, when the contents of this run are displayed, this property acts as a right-to-left override for characters
    ///  which are classified as "weak types" and "neutral types".</para></remarks>
    property Bidi: Boolean read get_Bidi write set_Bidi;
    ///<summary>
    ///  Specifies whether the contents of this run shall be treated as complex script text regardless
    ///  of their Unicode character values when determining the formatting for this run.
    ///</summary>
    property ComplexScript: Boolean read get_ComplexScript write set_ComplexScript;
    ///<summary>
    ///  True when the formatted characters are not to be spell checked.
    ///</summary>
    property NoProofing: Boolean read get_NoProofing write set_NoProofing;
    ///<summary>
    ///  Gets or sets the locale identifier (language) of the formatted characters.
    ///</summary>
    ///<remarks>
    ///  For the list of locale identifiers see https://msdn.microsoft.com/en-us/library/cc233965.aspx
    ///</remarks>
    property LocaleId: Int32 read get_LocaleId write set_LocaleId;
    ///<summary>
    ///  Gets or sets the locale identifier (language) of the formatted right-to-left characters.
    ///</summary>
    ///<remarks>
    ///  For the list of locale identifiers see https://msdn.microsoft.com/en-us/library/cc233965.aspx
    ///</remarks>
    property LocaleIdBi: Int32 read get_LocaleIdBi write set_LocaleIdBi;
    ///<summary>
    ///  Gets or sets the locale identifier (language) of the formatted Asian characters.
    ///</summary>
    ///<remarks>
    ///  For the list of locale identifiers see https://msdn.microsoft.com/en-us/library/cc233965.aspx
    ///</remarks>
    property LocaleIdFarEast: Int32 read get_LocaleIdFarEast write set_LocaleIdFarEast;
    ///<summary>
    ///  Returns a Border object that specifies border for the font.
    ///</summary>
    property Border: DNBorder read get_Border;
    ///<summary>
    ///  Returns a Shading object that refers to the shading formatting for the font.
    ///</summary>
    property Shading: DNShading read get_Shading;
    ///<summary>
    ///  Gets or sets the character style applied to this formatting.
    ///</summary>
    property Style: DNStyle read get_Style write set_Style;
    ///<summary>
    ///  Gets or sets the name of the character style applied to this formatting.
    ///</summary>
    property StyleName: string read get_StyleName write set_StyleName;
    ///<summary>
    ///  Gets or sets the locale independent style identifier of the character style applied to this formatting.
    ///</summary>
    property StyleIdentifier: DNStyleIdentifier read get_StyleIdentifier write set_StyleIdentifier;
    ///<summary>
    ///  Specifies whether the current font should use the document grid characters per line settings
    ///  when laying out.
    ///</summary>
    property SnapToGrid: Boolean read get_SnapToGrid write set_SnapToGrid;
    ///<summary>
    ///  Gets or sets the emphasis mark applied to this formatting.
    ///</summary>
    property EmphasisMark: DNEmphasisMark read get_EmphasisMark write set_EmphasisMark;
  end;

  TDNFont = class(TDNGenericImport<DNFontClass, DNFont>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNFontFallbackSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CC39475E-6CE5-5425-953E-6B911CC6E79F}']
  end;

  ///<summary>
  ///  Specifies font fallback mechanism settings.
  ///</summary>
  ///<remarks>
  ///  By default fallback settings are initialized with predefined settings which mimics the Microsoft Word fallback.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fonts.FontFallbackSettings')]
  DNFontFallbackSettings = interface(DDN.mscorlib.DNObject)
  ['{95064B87-8961-3BC8-B43E-5E0F2F25C74A}']
  { methods } 

    ///<summary>
    ///  Loads font fallback settings from XML file.
    ///</summary>
    ///  <param name="fileName">Input file name.</param>
    procedure Load(fileName: string); overload;
    ///<summary>
    ///  Loads fallback settings from XML stream.
    ///</summary>
    ///  <param name="stream">Input stream.</param>
    procedure Load(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Loads predefined fallback settings which mimics the Microsoft Word fallback and uses Microsoft office fonts.
    ///</summary>
    procedure LoadMsOfficeFallbackSettings;
    ///<summary>
    ///  Loads predefined fallback settings which uses Google Noto fonts.
    ///</summary>
    procedure LoadNotoFallbackSettings;
    ///<summary>
    ///  Saves the current fallback settings to stream.
    ///</summary>
    ///  <param name="outputStream">Output stream.</param>
    procedure Save(outputStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Saves the current fallback settings to file.
    ///</summary>
    ///  <param name="fileName">Output file name.</param>
    procedure Save(fileName: string); overload;
    ///<summary>
    ///  Automatically builds the fallback settings by scanning available fonts.
    ///</summary>
    ///<remarks>
    ///  This method may produce non-optimal fallback settings. Fonts are checked by <a href="https://docs.microsoft.com/en-us/typography/opentype/spec/os2#ur">
    ///  Unicode Character Range</a> fields and not by the actual glyphs presence. Also Unicode ranges are checked individually
    ///  and several ranges related to single language/script may use different fallback fonts.
    ///</remarks>
    procedure BuildAutomatic;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontFallbackSettings = class(TDNGenericImport<DNFontFallbackSettingsClass, DNFontFallbackSettings>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNFontInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CCFD4662-A096-5349-86FB-FE01671B3809}']
  end;

  ///<summary>
  ///  Specifies information about a font used in the document.
  ///</summary>
  ///<remarks><para>You do not create instances of this class directly.
  ///  Use the <see cref="P:Aspose.Words.DocumentBase.FontInfos" />
  ///  property to access the collection of fonts
  ///  defined in a document.</para><seealso cref="T:Aspose.Words.Fonts.FontInfoCollection" />
  ///<seealso cref="P:Aspose.Words.DocumentBase.FontInfos" />
  ///</remarks>
  [DNTypeName('Aspose.Words.Fonts.FontInfo')]
  DNFontInfo = interface(DDN.mscorlib.DNObject)
  ['{8C8A18E3-A0C0-3CCC-9C97-FFB0829EC48E}']
  { getters & setters } 

    function get_Pitch: DNFontPitch;
    procedure set_Pitch(value: DNFontPitch);
    function get_IsTrueType: Boolean;
    procedure set_IsTrueType(value: Boolean);
    function get_Family: DNFontFamily;
    procedure set_Family(value: DNFontFamily);
    function get_Charset: Int32;
    procedure set_Charset(value: Int32);
    function get_Panose: TArray<Byte>;
    procedure set_Panose(value: TArray<Byte>);
    function get_Name: string;
    function get_AltName: string;
    procedure set_AltName(value: string);

  { methods } 

    ///<summary>
    ///  Gets a specific embedded font file.
    ///</summary>
    ///  <param name="format">Specifies the font format to retrieve.</param>
    ///  <param name="style">Specifies the font style to retrieve.</param>
    ///<returns>Returns <c>null</c> if the specified font is not embedded.</returns>
    function GetEmbeddedFont(format: DNEmbeddedFontFormat; style: DNEmbeddedFontStyle): TArray<Byte>;
    ///<summary>
    ///  Gets an embedded font file in OpenType format. Fonts in Embedded OpenType format are converted to OpenType.
    ///</summary>
    ///  <param name="style">Specifies the font style to retrieve.</param>
    ///<returns>Returns <c>null</c> if the specified font is not embedded.</returns>
    function GetEmbeddedFontAsOpenType(style: DNEmbeddedFontStyle): TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  The pitch indicates if the font is fixed pitch, proportionally spaced, or relies on a default setting.
    ///</summary>
    property Pitch: DNFontPitch read get_Pitch write set_Pitch;
    ///<summary>
    ///  Indicates that this font is a TrueType or OpenType font as opposed to a raster or vector font.
    ///  Default is true.
    ///</summary>
    property IsTrueType: Boolean read get_IsTrueType write set_IsTrueType;
    ///<summary>
    ///  Gets or sets the font family this font belongs to.
    ///</summary>
    property Family: DNFontFamily read get_Family write set_Family;
    ///<summary>
    ///  Gets or sets the character set for the font.
    ///</summary>
    ///<dev>
    ///  Such charset code is replaced by IANA name of character set in ISO/IEC 29500.
    ///  We may not know charset codes for some IANA charset names. Also there may be unknown charset codes.
    ///  For example AW test documents contain the undocumented 0x4E and 0x50 codes.
    ///  So, now we store the both: charset codes and charset IANA names to be able to write charset as it was read.
    ///</dev>
    property Charset: Int32 read get_Charset write set_Charset;
    ///<summary>
    ///  Gets or sets the PANOSE typeface classification number.
    ///</summary>
    ///<remarks><para>PANOSE is a compact 10-byte description of a fonts critical visual characteristics,
    ///  such as contrast, weight, and serif style. The digits represent Family Kind, Serif Style,
    ///  Weight, Proportion, Contrast, Stroke Variation, Arm Style, Letterform, Midline, and X-Height.</para><para>Can be <c>null</c>.</para></remarks>
    property Panose: TArray<Byte> read get_Panose write set_Panose;
    ///<summary>
    ///  Gets the name of the font.
    ///</summary>
    ///<remarks><para>Cannot be <c>null</c>. Can be an empty string.</para></remarks>
    property Name: string read get_Name;
    ///<summary>
    ///  Gets or sets the alternate name for the font.
    ///</summary>
    ///<remarks><para>Cannot be <c>null</c>. Can be an empty string.</para></remarks>
    property AltName: string read get_AltName write set_AltName;
  end;

  TDNFontInfo = class(TDNGenericImport<DNFontInfoClass, DNFontInfo>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNFontInfoCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2C514BCD-1BA2-529E-8AD7-794712A638CB}']
  end;

  ///<summary>
  ///  Represents a collection of fonts used in a document.
  ///</summary>
  ///<remarks><para>Items are <see cref="T:Aspose.Words.Fonts.FontInfo" />
  ///  objects.</para><para>You do not create instances of this class directly.
  ///  Use the <see cref="P:Aspose.Words.DocumentBase.FontInfos" />
  ///  property to access the collection of fonts
  ///  defined in the document.</para><seealso cref="T:Aspose.Words.Fonts.FontInfo" />
  ///<seealso cref="P:Aspose.Words.DocumentBase.FontInfos" />
  ///</remarks>
  [DNTypeName('Aspose.Words.Fonts.FontInfoCollection')]
  DNFontInfoCollection = interface(DDN.mscorlib.DNObject)
  ['{786FE7EC-7D93-32CE-A06A-1DB4E8154FBE}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(name: string): DNFontInfo; overload;
    function get_Item(index: Int32): DNFontInfo; overload;
    function get_EmbedTrueTypeFonts: Boolean;
    procedure set_EmbedTrueTypeFonts(value: Boolean);
    function get_EmbedSystemFonts: Boolean;
    procedure set_EmbedSystemFonts(value: Boolean);
    function get_SaveSubsetFonts: Boolean;
    procedure set_SaveSubsetFonts(value: Boolean);

  { methods } 

    ///<summary>
    ///  Returns an enumerator object that can be used to iterate over all items in the collection.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNFontInfo>;
    ///<summary>
    ///  Determines whether the collection contains a font with the given name.
    ///</summary>
    ///  <param name="name">Case-insensitive name of the font to locate.</param>
    ///<returns>True if the item is found in the collection; otherwise, false.</returns>
    function &Contains(name: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements contained in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[name: string]: DNFontInfo read get_Item; default;
    property Item[index: Int32]: DNFontInfo read get_Item; default;
    ///<summary>
    ///  Specifies whether or not to embed TrueType fonts in a document when it is saved.
    ///  Default value for this property is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks><para>Embedding TrueType fonts allows others to view the document with the same fonts that were used to create it,
    ///  but may substantially increase the document size.</para><para>This option works for DOC, DOCX and RTF formats only.</para></remarks>
    property EmbedTrueTypeFonts: Boolean read get_EmbedTrueTypeFonts write set_EmbedTrueTypeFonts;
    ///<summary><para>Specifies whether or not to embed System fonts into the document.
    ///  Default value for this property is <b>false</b>
    ///  .</para><para>This option works only when <see cref="P:Aspose.Words.Fonts.FontInfoCollection.EmbedTrueTypeFonts" />
    ///  option is set to <b>true</b>
    ///  .</para></summary>
    ///<remarks><para>
    ///  Setting this property to <c>True</c> is useful if the user is on an East Asian system
    ///  and wants to create a document that is readable by others who do not have fonts for that
    ///  language on their system. For example, a user on a Japanese system could choose to embed the
    ///  fonts in a document so that the Japanese document would be readable on all systems.
    ///</para><para>This option works for DOC, DOCX and RTF formats only.</para></remarks>
    property EmbedSystemFonts: Boolean read get_EmbedSystemFonts write set_EmbedSystemFonts;
    ///<summary><para>Specifies whether or not to save a subset of the embedded TrueType fonts with the document.
    ///  Default value for this property is <b>false</b>
    ///  .</para><para>This option works only when <see cref="P:Aspose.Words.Fonts.FontInfoCollection.EmbedTrueTypeFonts" />
    ///  property is set to <b>true</b>
    ///  .</para></summary>
    ///<remarks>
    ///  This option works for DOC, DOCX and RTF formats only.
    ///</remarks>
    property SaveSubsetFonts: Boolean read get_SaveSubsetFonts write set_SaveSubsetFonts;
  end;

  TDNFontInfoCollection = class(TDNGenericImport<DNFontInfoCollectionClass, DNFontInfoCollection>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNFontSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4AEA4131-B8B5-5579-B47E-4390D26105D9}']
  { static getter & setter } 

    {class} function get_DefaultInstance: DNFontSettings;

  { constructors } 

    {class} function init: DNFontSettings;

  { static propertys } 

    ///<summary>
    ///  Static default font settings.
    ///</summary>
    ///<remarks>
    ///  This instance is used by default in a document unless <see cref="P:Aspose.Words.Document.FontSettings" />
    ///  is specified.
    ///</remarks>
    {class} property DefaultInstance: DNFontSettings read get_DefaultInstance;
  end;

  ///<summary>
  ///  Specifies font settings for a document.
  ///</summary>
  ///<remarks><para>Aspose.Words uses font settings to resolve the fonts in the document. Fonts are resolved mostly when building document layout
  ///  or rendering to fixed page formats. But when loading some formats, Aspose.Words also may require to resolve the fonts. For example, when
  ///  loading HTML documents Aspose.Words may resolve the fonts to perform font fallback. So it is recommended that you set the font settings in
  ///<see cref="T:Aspose.Words.Loading.LoadOptions" />
  ///  when loading the document. Or at least before building the layout or rendering the document to the fixed-page format.</para><para>By default all documents uses single static font settings instance. It could be accessed by
  ///<see cref="P:Aspose.Words.Fonts.FontSettings.DefaultInstance" />
  ///  property.</para><para>Changing font settings is safe at any time from any thread. But it is recommended that you do not change the font settings while
  ///  processing some documents which uses this settings. This can lead to the fact that the same font will be resolved differently
  ///  in different parts of the document.</para></remarks>
  [DNTypeName('Aspose.Words.Fonts.FontSettings')]
  DNFontSettings = interface(DDN.mscorlib.DNObject)
  ['{93F8CEA0-168C-3CD4-9CAF-D029BE062025}']
  { getters & setters } 

    function get_FallbackSettings: DNFontFallbackSettings;
    function get_SubstitutionSettings: DNFontSubstitutionSettings;

  { methods } 

    ///<summary>
    ///  Sets the folder where Aspose.Words looks for TrueType fonts when rendering documents or embedding fonts.
    ///  This is a shortcut to <see cref="M:Aspose.Words.Fonts.FontSettings.SetFontsFolders(System.String[],System.Boolean)" />
    ///  for setting only one font directory.
    ///</summary>
    ///  <param name="fontFolder">The folder that contains TrueType fonts.</param>
    ///  <param name="recursive">True to scan the specified folders for fonts recursively.</param>
    procedure SetFontsFolder(fontFolder: string; recursive: Boolean);
    ///<summary>
    ///  Sets the folders where Aspose.Words looks for TrueType fonts when rendering documents or embedding fonts.
    ///</summary>
    ///<remarks><para>By default, Aspose.Words looks for fonts installed to the system.</para><para>Setting this property resets the cache of all previously loaded fonts.</para></remarks>
    ///  <param name="fontsFolders">An array of folders that contain TrueType fonts.</param>
    ///  <param name="recursive">True to scan the specified folders for fonts recursively.</param>
    procedure SetFontsFolders(fontsFolders: TArray<string>; recursive: Boolean);
    ///<summary>
    ///  Sets the sources where Aspose.Words looks for TrueType fonts when rendering documents or embedding fonts.
    ///</summary>
    ///<remarks><para>By default, Aspose.Words looks for fonts installed to the system.</para><para>Setting this property resets the cache of all previously loaded fonts.</para></remarks>
    ///  <param name="sources">An array of sources that contain TrueType fonts.</param>
    procedure SetFontsSources(sources: TArray<DNFontSourceBase>);
    ///<summary>
    ///  Gets a copy of the array that contains the list of sources where Aspose.Words looks for TrueType fonts.
    ///</summary>
    ///<remarks><para>The returned value is a copy of the data that Aspose.Words uses. If you change the entries
    ///  in the returned array, it will have no effect on document rendering. To specify new font sources
    ///  use the <see cref="M:Aspose.Words.Fonts.FontSettings.SetFontsSources(Aspose.Words.Fonts.FontSourceBase[])" />
    ///  method.</para></remarks>
    ///<returns>A copy of the current font sources.</returns>
    function GetFontsSources: TArray<DNFontSourceBase>;
    ///<summary>
    ///  Resets the fonts sources to the system default.
    ///</summary>
    procedure ResetFontSources;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Settings related to font fallback mechanism.
    ///</summary>
    property FallbackSettings: DNFontFallbackSettings read get_FallbackSettings;
    ///<summary>
    ///  Settings related to font substitution mechanism.
    ///</summary>
    property SubstitutionSettings: DNFontSubstitutionSettings read get_SubstitutionSettings;
  end;

  TDNFontSettings = class(TDNGenericImport<DNFontSettingsClass, DNFontSettings>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNFontSourceBaseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F0F0FF83-CEBA-5976-83AA-FDDA0219C61C}']
  end;

  ///<summary>
  ///  This is an abstract base class for the classes that allow the user to specify various font sources.
  ///</summary>
  [DNTypeName('Aspose.Words.Fonts.FontSourceBase')]
  DNFontSourceBase = interface(DDN.mscorlib.DNObject)
  ['{F91DC164-8E8C-348C-986F-0687AF071B3D}']
  { getters & setters } 

    function get_Type: DNFontSourceType;
    function get_Priority: Int32;
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);

  { methods } 

    ///<summary>
    ///  Returns list of fonts available via this source.
    ///</summary>
    function GetAvailableFonts: DDN.mscorlib.DNIList<DNPhysicalFontInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the type of the font source.
    ///</summary>
    property &Type: DNFontSourceType read get_Type;
    ///<summary>
    ///  Returns the font source priority.
    ///</summary>
    ///<remarks><para>This value is used when there are fonts with the same family name and style in different font sources.
    ///  In this case Aspose.Words selects the font from the source with the higher priority value.</para><para>The default value is 0.</para></remarks>
    property Priority: Int32 read get_Priority;
    ///<summary>
    ///  Called during processing of font source when an issue is detected that might result in formatting fidelity loss.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
  end;

  TDNFontSourceBase = class(TDNGenericImport<DNFontSourceBaseClass, DNFontSourceBase>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNFileFontSourceClass = interface(DNFontSourceBaseClass)
  ['{574A98D3-4F7D-5C0D-B32D-7F938F8F4CD8}']
  { constructors } 

    ///<summary>
    ///  Ctor.
    ///</summary>
    ///  <param name="filePath">Path to font file.</param>
    {class} function init(filePath: string): DNFileFontSource; overload;
    ///<summary>
    ///  Ctor.
    ///</summary>
    ///  <param name="filePath">Path to font file.</param>
    ///  <param name="priority">Font source priority. See the <see cref="P:Aspose.Words.Fonts.FontSourceBase.Priority" />
    ///  property description for more information.</param>
    {class} function init(filePath: string; priority: Int32): DNFileFontSource; overload;

  end;

  ///<summary>
  ///  Represents the single TrueType font file stored in the file system.
  ///</summary>
  [DNTypeName('Aspose.Words.Fonts.FileFontSource')]
  DNFileFontSource = interface(DNFontSourceBase)
  ['{3AB7DDB5-BD83-390E-8A79-D52466E64181}']
  { getters & setters } 

    function get_FilePath: string;
    function get_Type: DNFontSourceType;
    function get_Priority: Int32;
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);

  { methods } 

    ///<summary>
    ///  Returns list of fonts available via this source.
    ///</summary>
    function GetAvailableFonts: DDN.mscorlib.DNIList<DNPhysicalFontInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Path to the font file.
    ///</summary>
    property FilePath: string read get_FilePath;
    ///<summary>
    ///  Returns the type of the font source.
    ///</summary>
    property &Type: DNFontSourceType read get_Type;
    ///<summary>
    ///  Returns the font source priority.
    ///</summary>
    ///<remarks><para>This value is used when there are fonts with the same family name and style in different font sources.
    ///  In this case Aspose.Words selects the font from the source with the higher priority value.</para><para>The default value is 0.</para></remarks>
    property Priority: Int32 read get_Priority;
    ///<summary>
    ///  Called during processing of font source when an issue is detected that might result in formatting fidelity loss.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
  end;

  TDNFileFontSource = class(TDNGenericImport<DNFileFontSourceClass, DNFileFontSource>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNFolderFontSourceClass = interface(DNFontSourceBaseClass)
  ['{0F6D24B6-301A-58B1-851D-1FE8CDA248B8}']
  { constructors } 

    ///<summary>
    ///  Ctor.
    ///</summary>
    ///  <param name="folderPath">Path to folder.</param>
    ///  <param name="scanSubfolders">Determines whether or not to scan subfolders.</param>
    {class} function init(folderPath: string; scanSubfolders: Boolean): DNFolderFontSource; overload;
    ///<summary>
    ///  Ctor.
    ///</summary>
    ///  <param name="folderPath">Path to folder.</param>
    ///  <param name="scanSubfolders">Determines whether or not to scan subfolders.</param>
    ///  <param name="priority">Font source priority. See the <see cref="P:Aspose.Words.Fonts.FontSourceBase.Priority" />
    ///  property description for more information.</param>
    {class} function init(folderPath: string; scanSubfolders: Boolean; priority: Int32): DNFolderFontSource; overload;

  end;

  ///<summary>
  ///  Represents the folder that contains TrueType font files.
  ///</summary>
  [DNTypeName('Aspose.Words.Fonts.FolderFontSource')]
  DNFolderFontSource = interface(DNFontSourceBase)
  ['{BA4651A3-4ED5-3497-90EF-4656AD8E4724}']
  { getters & setters } 

    function get_FolderPath: string;
    function get_ScanSubfolders: Boolean;
    function get_Type: DNFontSourceType;
    function get_Priority: Int32;
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);

  { methods } 

    ///<summary>
    ///  Returns list of fonts available via this source.
    ///</summary>
    function GetAvailableFonts: DDN.mscorlib.DNIList<DNPhysicalFontInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Path to the folder.
    ///</summary>
    property FolderPath: string read get_FolderPath;
    ///<summary>
    ///  Determines whether or not to scan the subfolders.
    ///</summary>
    property ScanSubfolders: Boolean read get_ScanSubfolders;
    ///<summary>
    ///  Returns the type of the font source.
    ///</summary>
    property &Type: DNFontSourceType read get_Type;
    ///<summary>
    ///  Returns the font source priority.
    ///</summary>
    ///<remarks><para>This value is used when there are fonts with the same family name and style in different font sources.
    ///  In this case Aspose.Words selects the font from the source with the higher priority value.</para><para>The default value is 0.</para></remarks>
    property Priority: Int32 read get_Priority;
    ///<summary>
    ///  Called during processing of font source when an issue is detected that might result in formatting fidelity loss.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
  end;

  TDNFolderFontSource = class(TDNGenericImport<DNFolderFontSourceClass, DNFolderFontSource>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNMemoryFontSourceClass = interface(DNFontSourceBaseClass)
  ['{6B763232-7313-5001-AFAA-462BC94DBA76}']
  { constructors } 

    ///<summary>
    ///  Ctor.
    ///</summary>
    ///  <param name="fontData">Binary font data.</param>
    {class} function init(fontData: TArray<Byte>): DNMemoryFontSource; overload;
    ///<summary>
    ///  Ctor.
    ///</summary>
    ///  <param name="fontData">Binary font data.</param>
    ///  <param name="priority">Font source priority. See the <see cref="P:Aspose.Words.Fonts.FontSourceBase.Priority" />
    ///  property description for more information.</param>
    {class} function init(fontData: TArray<Byte>; priority: Int32): DNMemoryFontSource; overload;

  end;

  ///<summary>
  ///  Represents the single TrueType font file stored in memory.
  ///</summary>
  [DNTypeName('Aspose.Words.Fonts.MemoryFontSource')]
  DNMemoryFontSource = interface(DNFontSourceBase)
  ['{D7F6A138-08A7-3D23-98BF-55ECF6474D75}']
  { getters & setters } 

    function get_FontData: TArray<Byte>;
    function get_Type: DNFontSourceType;
    function get_Priority: Int32;
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);

  { methods } 

    ///<summary>
    ///  Returns list of fonts available via this source.
    ///</summary>
    function GetAvailableFonts: DDN.mscorlib.DNIList<DNPhysicalFontInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Binary font data.
    ///</summary>
    property FontData: TArray<Byte> read get_FontData;
    ///<summary>
    ///  Returns the type of the font source.
    ///</summary>
    property &Type: DNFontSourceType read get_Type;
    ///<summary>
    ///  Returns the font source priority.
    ///</summary>
    ///<remarks><para>This value is used when there are fonts with the same family name and style in different font sources.
    ///  In this case Aspose.Words selects the font from the source with the higher priority value.</para><para>The default value is 0.</para></remarks>
    property Priority: Int32 read get_Priority;
    ///<summary>
    ///  Called during processing of font source when an issue is detected that might result in formatting fidelity loss.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
  end;

  TDNMemoryFontSource = class(TDNGenericImport<DNMemoryFontSourceClass, DNMemoryFontSource>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNStreamFontSourceClass = interface(DNFontSourceBaseClass)
  ['{502A4D4F-5BF3-5413-8132-3E71320E8D43}']
  end;

  ///<summary>
  ///  Base class for user-defined stream font source.
  ///</summary>
  ///<remarks><para>In order to use the stream font source you should create a derived class from the <see cref="T:Aspose.Words.Fonts.StreamFontSource" />
  ///  and provide implementation of the <see cref="M:Aspose.Words.Fonts.StreamFontSource.OpenFontDataStream" />
  ///  method.</para><para><see cref="M:Aspose.Words.Fonts.StreamFontSource.OpenFontDataStream" />
  ///  method could be called several times. For the first time it will be called
  ///  when Aspose.Words scans the provided font sources to get the list of available fonts. Later it may be called if the
  ///  font is used in the document to parse the font data and to embed the font data to some output formats.</para><para><see cref="T:Aspose.Words.Fonts.StreamFontSource" />
  ///  may be useful because it allows to load the font data only when it is required
  ///  and not to store it in the memory for the <see cref="T:Aspose.Words.Fonts.FontSettings" />
  ///  lifetime.</para></remarks>
  [DNTypeName('Aspose.Words.Fonts.StreamFontSource')]
  DNStreamFontSource = interface(DNFontSourceBase)
  ['{6AD381E4-8D65-34A1-8285-A3D3547EC1DC}']
  { getters & setters } 

    function get_Type: DNFontSourceType;
    function get_Priority: Int32;
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);

  { methods } 

    ///<summary>
    ///  This method should open the stream with font data on demand.
    ///</summary>
    ///<returns>Font data stream.</returns>
    ///<remarks>
    ///  The stream will be closed after reading. There is no need to close it explicitly.
    ///</remarks>
    function OpenFontDataStream: DDN.mscorlib.DNStream;
    ///<summary>
    ///  Returns list of fonts available via this source.
    ///</summary>
    function GetAvailableFonts: DDN.mscorlib.DNIList<DNPhysicalFontInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the type of the font source.
    ///</summary>
    property &Type: DNFontSourceType read get_Type;
    ///<summary>
    ///  Returns the font source priority.
    ///</summary>
    ///<remarks><para>This value is used when there are fonts with the same family name and style in different font sources.
    ///  In this case Aspose.Words selects the font from the source with the higher priority value.</para><para>The default value is 0.</para></remarks>
    property Priority: Int32 read get_Priority;
    ///<summary>
    ///  Called during processing of font source when an issue is detected that might result in formatting fidelity loss.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
  end;

  TDNStreamFontSource = class(TDNGenericImport<DNStreamFontSourceClass, DNStreamFontSource>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNSystemFontSourceClass = interface(DNFontSourceBaseClass)
  ['{DE81F0AD-DD90-5A6A-9A67-5DBAF0DFCE90}']
  { constructors } 

    ///<summary>
    ///  Ctor.
    ///</summary>
    {class} function init: DNSystemFontSource; overload;
    ///<summary>
    ///  Ctor.
    ///</summary>
    ///  <param name="priority">Font source priority. See the <see cref="P:Aspose.Words.Fonts.FontSourceBase.Priority" />
    ///  property description for more information.</param>
    {class} function init(priority: Int32): DNSystemFontSource; overload;

  { static methods } 

    ///<summary>
    ///  Returns system font folders or empty array if folders are not accessible.
    ///</summary>
    ///<remarks>
    ///  On some platforms Aspose.Words could search system fonts not only through folders but in other sources too. For example, on Windows platform
    ///  Aspose.Words search fonts also in the registry.
    ///</remarks>
    {class} function GetSystemFontFolders: TArray<string>;

  end;

  ///<summary>
  ///  Represents all TrueType fonts installed to the system.
  ///</summary>
  [DNTypeName('Aspose.Words.Fonts.SystemFontSource')]
  DNSystemFontSource = interface(DNFontSourceBase)
  ['{63F33722-E4AD-318E-BC55-90E13F225A8E}']
  { getters & setters } 

    function get_Type: DNFontSourceType;
    function get_Priority: Int32;
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);

  { methods } 

    ///<summary>
    ///  Returns list of fonts available via this source.
    ///</summary>
    function GetAvailableFonts: DDN.mscorlib.DNIList<DNPhysicalFontInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the type of the font source.
    ///</summary>
    property &Type: DNFontSourceType read get_Type;
    ///<summary>
    ///  Returns the font source priority.
    ///</summary>
    ///<remarks><para>This value is used when there are fonts with the same family name and style in different font sources.
    ///  In this case Aspose.Words selects the font from the source with the higher priority value.</para><para>The default value is 0.</para></remarks>
    property Priority: Int32 read get_Priority;
    ///<summary>
    ///  Called during processing of font source when an issue is detected that might result in formatting fidelity loss.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
  end;

  TDNSystemFontSource = class(TDNGenericImport<DNSystemFontSourceClass, DNSystemFontSource>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNFontSubstitutionRuleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{14C36172-AE74-5AC4-891C-C310497B8447}']
  end;

  ///<summary>
  ///  This is an abstract base class for the font substitution rule.
  ///</summary>
  [DNTypeName('Aspose.Words.Fonts.FontSubstitutionRule')]
  DNFontSubstitutionRule = interface(DDN.mscorlib.DNObject)
  ['{009E5993-2D22-3C85-BC17-166A3E923B5C}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies whether the rule is enabled or not.
    ///</summary>
    property Enabled: Boolean read get_Enabled write set_Enabled;
  end;

  TDNFontSubstitutionRule = class(TDNGenericImport<DNFontSubstitutionRuleClass, DNFontSubstitutionRule>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNDefaultFontSubstitutionRuleClass = interface(DNFontSubstitutionRuleClass)
  ['{9AE70874-FA2F-5B6A-8683-0B4B6FB53CEF}']
  end;

  ///<summary>
  ///  Default font substitution rule.
  ///</summary>
  ///<remarks>
  ///  This rule defines single default font name to be used for substitution if the original font is not available.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fonts.DefaultFontSubstitutionRule')]
  DNDefaultFontSubstitutionRule = interface(DNFontSubstitutionRule)
  ['{0EB395AC-53F7-3D87-905B-60C10C1D0761}']
  { getters & setters } 

    function get_DefaultFontName: string;
    procedure set_DefaultFontName(value: string);
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the default font name.
    ///</summary>
    ///<remarks><para>The default value is 'Times New Roman'.</para></remarks>
    property DefaultFontName: string read get_DefaultFontName write set_DefaultFontName;
    ///<summary>
    ///  Specifies whether the rule is enabled or not.
    ///</summary>
    property Enabled: Boolean read get_Enabled write set_Enabled;
  end;

  TDNDefaultFontSubstitutionRule = class(TDNGenericImport<DNDefaultFontSubstitutionRuleClass, DNDefaultFontSubstitutionRule>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNFontConfigSubstitutionRuleClass = interface(DNFontSubstitutionRuleClass)
  ['{A216D63E-7BC8-5439-8428-72C81E57595D}']
  { static getter & setter } 

    procedure set_Enabled(value: Boolean);

  { static propertys } 

    ///<summary>
    ///  Specifies whether the rule is enabled or not.
    ///</summary>
    {class} property Enabled: Boolean write set_Enabled;
  end;

  ///<summary>
  ///  Font config substitution rule.
  ///</summary>
  ///<remarks><para>
  ///  This rule uses fontconfig utility on Linux (and other Unix-like) platforms to get the substitution
  ///  if the original font is not available.
  ///</para><para>
  ///  If fontconfig utility is not available then this rule will be ignored.
  ///</para></remarks>
  [DNTypeName('Aspose.Words.Fonts.FontConfigSubstitutionRule')]
  DNFontConfigSubstitutionRule = interface(DNFontSubstitutionRule)
  ['{5452B9D5-8B09-3D7C-BFEB-36105A5D49BE}']
  { getters & setters } 

    procedure set_Enabled(value: Boolean);

  { methods } 

    ///<summary>
    ///  Check if fontconfig utility is available or not.
    ///</summary>
    function IsFontConfigAvailable: Boolean;
    ///<summary>
    ///  Resets the cache of fontconfig calling results.
    ///</summary>
    procedure ResetCache;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies whether the rule is enabled or not.
    ///</summary>
    property Enabled: Boolean write set_Enabled;
  end;

  TDNFontConfigSubstitutionRule = class(TDNGenericImport<DNFontConfigSubstitutionRuleClass, DNFontConfigSubstitutionRule>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNFontInfoSubstitutionRuleClass = interface(DNFontSubstitutionRuleClass)
  ['{E1061DBF-E12D-5568-BF77-834ECE43ED17}']
  end;

  ///<summary>
  ///  Font info substitution rule.
  ///</summary>
  ///<remarks>
  ///  According to this rule Aspose.Words evaluates all the related fields in <see cref="T:Aspose.Words.Fonts.FontInfo" />
  ///  (Panose, Sig etc) for
  ///  the missing font and finds the closest match among the available font sources. If <see cref="T:Aspose.Words.Fonts.FontInfo" />
  ///  is not
  ///  available for the missing font then nothing will be done.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fonts.FontInfoSubstitutionRule')]
  DNFontInfoSubstitutionRule = interface(DNFontSubstitutionRule)
  ['{EAF8F7A3-3794-3F7B-B35D-9CB999B4443A}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies whether the rule is enabled or not.
    ///</summary>
    property Enabled: Boolean read get_Enabled write set_Enabled;
  end;

  TDNFontInfoSubstitutionRule = class(TDNGenericImport<DNFontInfoSubstitutionRuleClass, DNFontInfoSubstitutionRule>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNFontNameSubstitutionRuleClass = interface(DNFontSubstitutionRuleClass)
  ['{A9F5CB47-B483-572C-8CD6-458E04C5A270}']
  end;

  ///<summary>
  ///  Font substitution rule for processing font name.
  ///</summary>
  ///<remarks>
  ///  According to this rule Aspose.Words tries to process the font name to get the substitution. Particularly
  ///  Aspose.Words tries to removes suffixes with '-' and ',' separators like it does the MS Word.
  ///</remarks>
  [DNTypeName('Aspose.Words.Fonts.FontNameSubstitutionRule')]
  DNFontNameSubstitutionRule = interface(DNFontSubstitutionRule)
  ['{3E76EDB0-B902-3CDB-804C-63F327732A1B}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies whether the rule is enabled or not.
    ///</summary>
    property Enabled: Boolean read get_Enabled write set_Enabled;
  end;

  TDNFontNameSubstitutionRule = class(TDNGenericImport<DNFontNameSubstitutionRuleClass, DNFontNameSubstitutionRule>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNTableSubstitutionRuleClass = interface(DNFontSubstitutionRuleClass)
  ['{3EC050A5-0F77-5D32-BC2A-0859B7A557FD}']
  end;

  ///<summary>
  ///  Table font substitution rule.
  ///</summary>
  ///<remarks>
  ///  This rule defines the list of substitute font names to be used if the original font is not available.
  ///  Substitutes will be checked for the font name and the <see cref="P:Aspose.Words.Fonts.FontInfo.AltName" />
  ///  (if any).
  ///</remarks>
  [DNTypeName('Aspose.Words.Fonts.TableSubstitutionRule')]
  DNTableSubstitutionRule = interface(DNFontSubstitutionRule)
  ['{C9DA4AF0-30C7-3B5F-B3D2-18A6CA187438}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);

  { methods } 

    ///<summary>
    ///  Loads table substitution settings from XML file.
    ///</summary>
    ///  <param name="fileName">Input file name.</param>
    procedure Load(fileName: string); overload;
    ///<summary>
    ///  Loads table substitution settings from XML stream.
    ///</summary>
    ///  <param name="stream">Input stream.</param>
    procedure Load(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Loads predefined table substitution settings for Windows platform.
    ///</summary>
    procedure LoadWindowsSettings;
    ///<summary>
    ///  Loads predefined table substitution settings for Linux platform.
    ///</summary>
    procedure LoadLinuxSettings;
    ///<summary>
    ///  Loads predefined table substitution settings for Linux platform.
    ///</summary>
    procedure LoadAndroidSettings;
    ///<summary>
    ///  Saves the current table substitution settings to file.
    ///</summary>
    ///  <param name="fileName">Output file name.</param>
    procedure Save(fileName: string); overload;
    ///<summary>
    ///  Saves the current table substitution settings to stream.
    ///</summary>
    ///  <param name="outputStream">Output stream.</param>
    procedure Save(outputStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Returns array containing substitute font names for the specified original font name.
    ///</summary>
    ///  <param name="originalFontName">Original font name.</param>
    ///<returns>List of alternative font names.</returns>
    function GetSubstitutes(originalFontName: string): DDN.mscorlib.DNIEnumerable<string>;
    ///<summary>
    ///  Override substitute font names for given original font name.
    ///</summary>
    ///  <param name="originalFontName">Original font name.</param>
    ///  <param name="substituteFontNames">List of alternative font names.</param>
    procedure SetSubstitutes(originalFontName: string; substituteFontNames: TArray<string>);
    ///<summary>
    ///  Adds substitute font names for given original font name.
    ///</summary>
    ///  <param name="originalFontName">Original font name.</param>
    ///  <param name="substituteFontNames">List of alternative font names.</param>
    procedure AddSubstitutes(originalFontName: string; substituteFontNames: TArray<string>);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies whether the rule is enabled or not.
    ///</summary>
    property Enabled: Boolean read get_Enabled write set_Enabled;
  end;

  TDNTableSubstitutionRule = class(TDNGenericImport<DNTableSubstitutionRuleClass, DNTableSubstitutionRule>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNFontSubstitutionSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{11EA9E57-09B3-54DF-810C-981475525FF0}']
  end;

  ///<summary>
  ///  Specifies font substitution mechanism settings.
  ///</summary>
  ///<remarks><para>
  ///  Font substitution process consists of several rules which are checked one by one in specific order.
  ///  If the first rule can't resolve the font then second rule is checked and so on.</para><para>The order of the rules is following:
  ///  1. Font name substitution rule (enabled by default)
  ///  2. Font config substitution rule (disabled by default)
  ///  3. Table substitution rule (enabled by default)
  ///  4. Font info substitution rule (enabled by default)
  ///  5. Default font rule (enabled by default)
  ///</para><para>
  ///  Note that font info substitution rule will always resolve the font if <see cref="T:Aspose.Words.Fonts.FontInfo" />
  ///  is available
  ///  and will override the default font rule. If you want to use the default font rule then you should disable the
  ///  font info substitution rule.
  ///</para><para>
  ///  Note that font config substitution rule will resolve the font in most cases and thus overrides all other rules.
  ///</para></remarks>
  [DNTypeName('Aspose.Words.Fonts.FontSubstitutionSettings')]
  DNFontSubstitutionSettings = interface(DDN.mscorlib.DNObject)
  ['{C11F738D-3E60-38BF-9B44-06432C2A860B}']
  { getters & setters } 

    function get_TableSubstitution: DNTableSubstitutionRule;
    function get_FontInfoSubstitution: DNFontInfoSubstitutionRule;
    function get_DefaultFontSubstitution: DNDefaultFontSubstitutionRule;
    function get_FontConfigSubstitution: DNFontConfigSubstitutionRule;
    function get_FontNameSubstitution: DNFontNameSubstitutionRule;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Settings related to table substitution rule.
    ///</summary>
    property TableSubstitution: DNTableSubstitutionRule read get_TableSubstitution;
    ///<summary>
    ///  Settings related to font info substitution rule.
    ///</summary>
    property FontInfoSubstitution: DNFontInfoSubstitutionRule read get_FontInfoSubstitution;
    ///<summary>
    ///  Settings related to default font substitution rule.
    ///</summary>
    property DefaultFontSubstitution: DNDefaultFontSubstitutionRule read get_DefaultFontSubstitution;
    ///<summary>
    ///  Settings related to font config substitution rule.
    ///</summary>
    property FontConfigSubstitution: DNFontConfigSubstitutionRule read get_FontConfigSubstitution;
    ///<summary>
    ///  Settings related to font name substitution rule.
    ///</summary>
    property FontNameSubstitution: DNFontNameSubstitutionRule read get_FontNameSubstitution;
  end;

  TDNFontSubstitutionSettings = class(TDNGenericImport<DNFontSubstitutionSettingsClass, DNFontSubstitutionSettings>) end;

  //-------------namespace: Aspose.Words.Fonts----------------
  DNPhysicalFontInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BD22C2B3-257B-56AB-96A3-97801E793DB2}']
  end;

  ///<summary>
  ///  Specifies information about physical font available to Aspose.Words font engine.
  ///</summary>
  [DNTypeName('Aspose.Words.Fonts.PhysicalFontInfo')]
  DNPhysicalFontInfo = interface(DDN.mscorlib.DNObject)
  ['{2786A2A2-1931-3205-8FF4-8DD01A658625}']
  { getters & setters } 

    function get_FontFamilyName: string;
    function get_FullFontName: string;
    function get_Version: string;
    function get_FilePath: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Family name of the font.
    ///</summary>
    property FontFamilyName: string read get_FontFamilyName;
    ///<summary>
    ///  Full name of the font.
    ///</summary>
    property FullFontName: string read get_FullFontName;
    ///<summary>
    ///  Version string of the font.
    ///</summary>
    property Version: string read get_Version;
    ///<summary>
    ///  Path to the font file if any.
    ///</summary>
    property FilePath: string read get_FilePath;
  end;

  TDNPhysicalFontInfo = class(TDNGenericImport<DNPhysicalFontInfoClass, DNPhysicalFontInfo>) end;

  //-------------namespace: Aspose.Words----------------
  DNFrameFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9272EBDB-C50B-5D2D-B3A8-4F0AB42FFD63}']
  end;

  ///<summary>
  ///  Represents frame related formatting for a paragraph.
  ///</summary>
  ///<remarks><p>This object is always created. If a paragraph is a frame, then all properties will contain respective values, otherwise
  ///  all properties are set to their defaults.</p>
  ///  <p>Use <see cref="P:Aspose.Words.FrameFormat.IsFrame" />
  ///  to check whether paragraph is a frame.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.FrameFormat')]
  DNFrameFormat = interface(DDN.mscorlib.DNObject)
  ['{7FADCE06-0767-3F5D-8C07-75C40EA74B86}']
  { getters & setters } 

    function get_HeightRule: DNHeightRule;
    function get_Height: Double;
    function get_HorizontalDistanceFromText: Double;
    function get_HorizontalPosition: Double;
    function get_RelativeHorizontalPosition: DNRelativeHorizontalPosition;
    function get_RelativeVerticalPosition: DNRelativeVerticalPosition;
    function get_VerticalDistanceFromText: Double;
    function get_VerticalPosition: Double;
    function get_Width: Double;
    function get_VerticalAlignment: DNVerticalAlignment;
    function get_HorizontalAlignment: DNHorizontalAlignment;
    function get_IsFrame: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the rule for determining the height of the specified frame.
    ///</summary>
    property HeightRule: DNHeightRule read get_HeightRule;
    ///<summary>
    ///  Gets the height of the specified frame.
    ///</summary>
    property Height: Double read get_Height;
    ///<summary>
    ///  Gets horizontal distance between a frame and the surrounding text, in points.
    ///</summary>
    property HorizontalDistanceFromText: Double read get_HorizontalDistanceFromText;
    ///<summary>
    ///  Gets horizontal distance between the edge of the frame and the item specified by the <see cref="P:Aspose.Words.FrameFormat.RelativeHorizontalPosition" />
    ///  property.
    ///</summary>
    property HorizontalPosition: Double read get_HorizontalPosition;
    ///<summary>
    ///  Gets the relative horizontal position of a frame.
    ///</summary>
    property RelativeHorizontalPosition: DNRelativeHorizontalPosition read get_RelativeHorizontalPosition;
    ///<summary>
    ///  Gets the relative vertical position of a frame.
    ///</summary>
    property RelativeVerticalPosition: DNRelativeVerticalPosition read get_RelativeVerticalPosition;
    ///<summary>
    ///  Specifies vertical distance (in points) between a frame and the surrounding text.
    ///</summary>
    property VerticalDistanceFromText: Double read get_VerticalDistanceFromText;
    ///<summary>
    ///  Gets vertical distance between the edge of the frame and the item specified by the <see cref="P:Aspose.Words.FrameFormat.RelativeVerticalPosition" />
    ///  property.
    ///</summary>
    property VerticalPosition: Double read get_VerticalPosition;
    ///<summary>
    ///  Gets the width of the specified frame, in points.
    ///</summary>
    property Width: Double read get_Width;
    ///<summary>
    ///  Gets vertical alignment of the specified frame.
    ///</summary>
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment;
    ///<summary>
    ///  Gets horizontal alignment of the specified frame.
    ///</summary>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment;
    ///<summary>
    ///  Returns true if the paragraph is a frame.
    ///</summary>
    property IsFrame: Boolean read get_IsFrame;
  end;

  TDNFrameFormat = class(TDNGenericImport<DNFrameFormatClass, DNFrameFormat>) end;

  //-------------namespace: Aspose.Words----------------
  DNHyphenationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{88C27D92-809C-5EBD-B9E8-B651BE86EE63}']
  { static getter & setter } 

    {class} function get_Callback: DNIHyphenationCallback;
    {class} procedure set_Callback(value: DNIHyphenationCallback);
    {class} function get_WarningCallback: DNIWarningCallback;
    {class} procedure set_WarningCallback(value: DNIWarningCallback);

  { static methods } 

    ///<summary>
    ///  Registers and loads a hyphenation dictionary for the specified language from a stream. Throws if dictionary cannot be read or has invalid format.
    ///</summary>
    ///  <param name="language">A language name, e.g. "en-US". See .NET documentation for "culture name" and RFC 4646 for details.</param>
    ///  <param name="stream">A stream for the dictionary file in OpenOffice format.</param>
    {class} procedure RegisterDictionary(language: string; stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Registers and loads a hyphenation dictionary for the specified language from file. Throws if dictionary cannot be read or has invalid format.<para />
    ///  This method can also be used to register Null dictionary to prevent <see cref="P:Aspose.Words.Hyphenation.Callback" />
    ///  from being called repeatedly for the same language.
    ///</summary>
    ///  <param name="language">A language name, e.g. "en-US". See .NET documentation for "culture name" and RFC 4646 for details.</param>
    ///  <param name="fileName">A path to the dictionary file in Open Office format.<para />
    ///  If this parameter is null or empty string then registered is Null dictionary and callback is not called anymore for this language.<para />
    ///  To enable callback again use <see cref="M:Aspose.Words.Hyphenation.UnregisterDictionary(System.String)" />
    ///  method.</param>
    {class} procedure RegisterDictionary(language: string; fileName: string); overload;
    ///<summary>
    ///  Unregisters a hyphenation dictionary for the specified language.<para />
    ///  This is different from registering Null dictionary. Unregistering a dictionary enables callback for the specified language.
    ///</summary>
    ///  <param name="language">A language name, e.g. "en-US". See .NET documentation for "culture name" and RFC 4646 for details.<para />
    ///  If null or empty string then all dictionaries are unregistered.</param>
    {class} procedure UnregisterDictionary(language: string);
    ///<summary>
    ///  Returns False if for the specified language there is no dictionary registered or if registered is Null dictionary, True otherwise.
    ///</summary>
    {class} function IsDictionaryRegistered(language: string): Boolean;

  { static propertys } 

    ///<summary>
    ///  Gets or sets callback interface used to request dictionaries when page layout of the document is built.
    ///  This allows delay loading of dictionaries which may be useful when processing documents in many languages.
    ///</summary>
    {class} property Callback: DNIHyphenationCallback read get_Callback write set_Callback;
    ///<summary>
    ///  Called during a load hyphenation patterns, when an issue is detected that might result in formatting fidelity loss.
    ///</summary>
    {class} property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
  end;

  ///<summary>
  ///  Provides methods for working with hyphenation dictionaries. These dictionaries prescribe where words of a specific language can be hyphenated.
  ///</summary>
  [DNTypeName('Aspose.Words.Hyphenation')]
  DNHyphenation = interface(DDN.mscorlib.DNObject)
  ['{F1EFBF73-FA4E-34B3-AF62-E0AA38D59055}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHyphenation = class(TDNGenericImport<DNHyphenationClass, DNHyphenation>) end;

  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Defines an interface for external reader plugins that can read a file into a document.
  ///</summary>
  [DNTypeName('Aspose.Words.IDocumentReaderPlugin')]
  DNIDocumentReaderPlugin = interface(DDN.mscorlib.DNObject)
  ['{9F4B5B97-7223-349C-A401-1A48BBA07C03}']
  { methods } 

    ///<summary>
    ///  Reads the data from the specified stream into the <see cref="T:Aspose.Words.Document" />
    ///  instance.
    ///</summary>
    ///  <param name="src">The source stream to read the document from.</param>
    ///  <param name="loadOptions">An additional load options to load the document.</param>
    ///  <param name="document">The instance of the <see cref="T:Aspose.Words.Document" />
    ///  class to read the data to.
    ///  If the instance contains some content, it will be overriden by the data from the source stream</param>
    procedure Read(src: DDN.mscorlib.DNStream; loadOptions: DNLoadOptions; document: DNDocument);

  end;

  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Implemented by classes which can register hyphenation dictionaries.
  ///</summary>
  [DNTypeName('Aspose.Words.IHyphenationCallback')]
  DNIHyphenationCallback = interface(DDN.mscorlib.DNObject)
  ['{8FE5A898-05D7-3A31-BFEB-4590D9F4D257}']
  { methods } 

    ///<summary>
    ///  Notifies application that hyphenation dictionary for the specified language wasn't found and may need to be registered.<para />
    ///  Implementation should find a dictionary and register it using <see cref="M:Aspose.Words.Hyphenation.RegisterDictionary(System.String,System.IO.Stream)" />
    ///  methods.<para />
    ///  If dictionary is unavailable for the specified language implementation can opt out of further calls for the same language
    ///  using <see cref="M:Aspose.Words.Hyphenation.RegisterDictionary(System.String,System.String)" />
    ///  with null value.
    ///</summary>
    ///  <param name="language">A language name, e.g. "en-US". See .NET documentation for "culture name" and RFC 4646 for details.</param>
    ///<remarks>Exceptions thrown by this method will abort execution of page layout process.</remarks>
    procedure RequestDictionary(language: string);

  end;

  //-------------namespace: Aspose.Words----------------
  DNImageWatermarkOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{630E8552-E962-5BAE-8286-6B55F73779EA}']
  { constructors } 

    {class} function init: DNImageWatermarkOptions;

  end;

  ///<summary>
  ///  Contains options that can be specified when adding a watermark with image.
  ///</summary>
  [DNTypeName('Aspose.Words.ImageWatermarkOptions')]
  DNImageWatermarkOptions = interface(DDN.mscorlib.DNObject)
  ['{40A2D941-16A6-3F20-B653-E979DF76E62F}']
  { getters & setters } 

    function get_Scale: Double;
    procedure set_Scale(value: Double);
    function get_IsWashout: Boolean;
    procedure set_IsWashout(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the scale factor expressed as a fraction of the image. The default value is 0 - auto.
    ///</summary>
    ///<remarks><p>Valid values range from 0 to 65.5 inclusive.</p>
    ///  <p>Auto scale means that the watermark will be scaled to its max width and max height relative to
    ///  the page margins.</p>
    ///</remarks>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  Throws when argument was out of the range of valid values.
    ///</exception>
    property Scale: Double read get_Scale write set_Scale;
    ///<summary>
    ///  Gets or sets a boolean value which is responsible for washout effect of the watermark.
    ///  The default value is True.
    ///</summary>
    property IsWashout: Boolean read get_IsWashout write set_IsWashout;
  end;

  TDNImageWatermarkOptions = class(TDNGenericImport<DNImageWatermarkOptionsClass, DNImageWatermarkOptions>) end;

  //-------------namespace: Aspose.Words----------------
  DNImportFormatOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4F591F8F-D02D-5B7C-9DEE-76E505FA9CCE}']
  { constructors } 

    {class} function init: DNImportFormatOptions;

  end;

  ///<summary>
  ///  Allows to specify various import options to format output.
  ///</summary>
  ///<dev>
  ///  The most of these options can be found under the advanced options menu in Word, 'cut, copy and paste' section.
  ///  But some of them, such as <see cref="P:Aspose.Words.ImportFormatOptions.KeepSourceNumbering" />
  ///  have no analogue in Word.
  ///</dev>
  [DNTypeName('Aspose.Words.ImportFormatOptions')]
  DNImportFormatOptions = interface(DDN.mscorlib.DNObject)
  ['{88C412C2-920E-3A30-B3E1-738499C3869B}']
  { getters & setters } 

    function get_SmartStyleBehavior: Boolean;
    procedure set_SmartStyleBehavior(value: Boolean);
    function get_KeepSourceNumbering: Boolean;
    procedure set_KeepSourceNumbering(value: Boolean);
    function get_IgnoreTextBoxes: Boolean;
    procedure set_IgnoreTextBoxes(value: Boolean);
    function get_IgnoreHeaderFooter: Boolean;
    procedure set_IgnoreHeaderFooter(value: Boolean);
    function get_MergePastedLists: Boolean;
    procedure set_MergePastedLists(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a boolean value that specifies how styles will be imported
    ///  when they have equal names in source and destination documents.
    ///  The default value is <c>false</c>.
    ///</summary>
    ///<remarks><para>When this option is <b>enabled</b>
    ///  , the source style will be expanded into a direct attributes inside a
    ///  destination document, if <see cref="F:Aspose.Words.ImportFormatMode.KeepSourceFormatting" />
    ///  importing mode is used.</para><para>When this option is <b>disabled</b>
    ///  , the source style will be expanded only if it is numbered. Existing
    ///  destination attributes will not be overridden, including lists.</para></remarks>
    property SmartStyleBehavior: Boolean read get_SmartStyleBehavior write set_SmartStyleBehavior;
    ///<summary>
    ///  Gets or sets a boolean value that specifies how the numbering will be imported when it clashes in source and
    ///  destination documents.
    ///  The default value is <c>false</c>.
    ///</summary>
    property KeepSourceNumbering: Boolean read get_KeepSourceNumbering write set_KeepSourceNumbering;
    ///<summary>
    ///  Gets or sets a boolean value that specifies that source formatting of textboxes content ignored
    ///  if <see cref="F:Aspose.Words.ImportFormatMode.KeepSourceFormatting" />
    ///  mode is used.
    ///  The default value is <c>true</c>.
    ///</summary>
    property IgnoreTextBoxes: Boolean read get_IgnoreTextBoxes write set_IgnoreTextBoxes;
    ///<summary>
    ///  Gets or sets a boolean value that specifies that source formatting of headers/footers content ignored
    ///  if <see cref="F:Aspose.Words.ImportFormatMode.KeepSourceFormatting" />
    ///  mode is used.
    ///  The default value is <c>true</c>.
    ///</summary>
    property IgnoreHeaderFooter: Boolean read get_IgnoreHeaderFooter write set_IgnoreHeaderFooter;
    property MergePastedLists: Boolean read get_MergePastedLists write set_MergePastedLists;
  end;

  TDNImportFormatOptions = class(TDNGenericImport<DNImportFormatOptionsClass, DNImportFormatOptions>) end;

  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Implement this interface if you want to receive notifications when nodes are inserted or removed in the document.
  ///</summary>
  [DNTypeName('Aspose.Words.INodeChangingCallback')]
  DNINodeChangingCallback = interface(DDN.mscorlib.DNObject)
  ['{5F271C32-AF80-3ADF-BBFA-4AAB6F5DBF13}']
  { methods } 

    ///<summary>
    ///  Called just before a node belonging to this document is about to be inserted into another node.
    ///</summary>
    procedure NodeInserting(args: DNNodeChangingArgs);
    ///<summary>
    ///  Called when a node belonging to this document has been inserted into another node.
    ///</summary>
    procedure NodeInserted(args: DNNodeChangingArgs);
    ///<summary>
    ///  Called just before a node belonging to this document is about to be removed from the document.
    ///</summary>
    procedure NodeRemoving(args: DNNodeChangingArgs);
    ///<summary>
    ///  Called when a node belonging to this document has been removed from its parent.
    ///</summary>
    procedure NodeRemoved(args: DNNodeChangingArgs);

  end;

  //-------------namespace: Aspose.Words----------------
  DNInternableComplexAttrClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3FA5EE3F-D6BE-547E-96D9-8A3209FFF6F4}']
  end;

  ///<summary>
  ///  Base class for internable complex attribute.
  ///  Internable complex attribute should notify parent collection when going to be changed.
  ///</summary>
  [DNTypeName('Aspose.Words.InternableComplexAttr')]
  DNInternableComplexAttr = interface(DDN.mscorlib.DNObject)
  ['{B1237D3E-5DC7-348A-B022-466502C75446}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNInternableComplexAttr = class(TDNGenericImport<DNInternableComplexAttrClass, DNInternableComplexAttr>) end;

  //-------------namespace: Aspose.Words----------------
  DNBorderClass = interface(DNInternableComplexAttrClass)
  ['{C40B6109-98E3-5DAC-B628-788FB43331AE}']
  end;

  ///<summary>
  ///  Represents a border of an object.
  ///</summary>
  ///<remarks><p>Borders can be applied to various document elements including paragraph,
  ///  run of text inside a paragraph or a table cell.</p>
  ///</remarks>
  ///<dev>
  ///  This is a model and also presentation class that allows to see and modify border attributes.
  ///</dev>
  [DNTypeName('Aspose.Words.Border')]
  DNBorder = interface(DNInternableComplexAttr)
  ['{C07E34CC-AAA3-36A4-87C6-95A89ECB773F}']
  { getters & setters } 

    function get_LineStyle: DNLineStyle;
    procedure set_LineStyle(value: DNLineStyle);
    function get_LineWidth: Double;
    procedure set_LineWidth(value: Double);
    function get_IsVisible: Boolean;
    function get_Color: DDN.Aspose.Common.DNColor;
    procedure set_Color(value: DDN.Aspose.Common.DNColor);
    function get_DistanceFromText: Double;
    procedure set_DistanceFromText(value: Double);
    function get_Shadow: Boolean;
    procedure set_Shadow(value: Boolean);

  { methods } 

    ///<summary>
    ///  Resets border properties to default values.
    ///</summary>
    ///<remarks>
    ///  When border properties are reset to default values, the border is invisible.
    ///</remarks>
    procedure ClearFormatting;
    ///<summary>
    ///  Determines whether the specified border is equal in value to the current border.
    ///</summary>
    function Equals(rhs: DNBorder): Boolean; overload;
    ///<summary>
    ///  Determines whether the specified object is equal in value to the current object.
    ///</summary>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  Serves as a hash function for this type.
    ///</summary>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the border style.
    ///</summary>
    ///<remarks><para>If you set line style to none, then line width is automatically changed to zero.</para></remarks>
    ///<dev>
    ///  Currently AW distinguish Nil and None borders.
    ///  This public setter is used by customer and always creates Nil border for LineStyle.None
    ///  Readers and internal code should use <see cref="P:Aspose.Words.Border.LineStyleInternal" />
    ///  setter with LineStyle.None to create None.Border and
    ///<see cref="M:Aspose.Words.Border.CreateNilBorder" />
    ///  method to create Nil border.
    ///</dev>
    property LineStyle: DNLineStyle read get_LineStyle write set_LineStyle;
    ///<summary>
    ///  Gets or sets the border width in points.
    ///</summary>
    ///<remarks><p>If you set line width greater than zero when line style is none, the line style is
    ///  automatically changed to single line.</p>
    ///</remarks>
    property LineWidth: Double read get_LineWidth write set_LineWidth;
    ///<summary>
    ///  Returns true if the LineStyle is not LineStyle.None.
    ///</summary>
    property IsVisible: Boolean read get_IsVisible;
    ///<summary>
    ///  Gets or sets the border color.
    ///</summary>
    property Color: DDN.Aspose.Common.DNColor read get_Color write set_Color;
    ///<summary>
    ///  Gets or sets distance of the border from text or from the page edge in points.
    ///</summary>
    ///<remarks>
    ///  Has no effect and will be automatically reset to zero for borders of table cells.
    ///<seealso cref="P:Aspose.Words.PageSetup.BorderDistanceFrom" />
    ///</remarks>
    property DistanceFromText: Double read get_DistanceFromText write set_DistanceFromText;
    ///<summary>
    ///  Gets or sets a value indicating whether the border has a shadow.
    ///</summary>
    ///<remarks><p>In Microsoft Word, for a border to have a shadow, the borders on all four sides
    ///  (left, top, right and bottom) should be of the same type, width, color and all should have
    ///  the Shadow property set to true.</p>
    ///</remarks>
    property Shadow: Boolean read get_Shadow write set_Shadow;
  end;

  TDNBorder = class(TDNGenericImport<DNBorderClass, DNBorder>) end;

  //-------------namespace: Aspose.Words----------------
  DNShadingClass = interface(DNInternableComplexAttrClass)
  ['{A186CFA7-EACA-5B32-AAB8-97FA643975A3}']
  end;

  ///<summary>
  ///  Contains shading attributes for an object.
  ///</summary>
  ///<dev>
  ///  This is a model and also presentation class that allows to see and modify shading attributes.
  ///</dev>
  [DNTypeName('Aspose.Words.Shading')]
  DNShading = interface(DNInternableComplexAttr)
  ['{09D62332-2807-3026-AA89-49E036EEEAF5}']
  { getters & setters } 

    function get_BackgroundPatternColor: DDN.Aspose.Common.DNColor;
    procedure set_BackgroundPatternColor(value: DDN.Aspose.Common.DNColor);
    function get_ForegroundPatternColor: DDN.Aspose.Common.DNColor;
    procedure set_ForegroundPatternColor(value: DDN.Aspose.Common.DNColor);
    function get_Texture: DNTextureIndex;
    procedure set_Texture(value: DNTextureIndex);

  { methods } 

    ///<summary>
    ///  Removes shading from the object.
    ///</summary>
    procedure ClearFormatting;
    ///<summary>
    ///  Determines whether the specified Shading is equal in value to the current Shading.
    ///</summary>
    function Equals(rhs: DNShading): Boolean; overload;
    ///<summary>
    ///  Determines whether the specified object is equal in value to the current object.
    ///</summary>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  Serves as a hash function for this type.
    ///</summary>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the color that's applied to the background of the Shading object.
    ///</summary>
    property BackgroundPatternColor: DDN.Aspose.Common.DNColor read get_BackgroundPatternColor write set_BackgroundPatternColor;
    ///<summary>
    ///  Gets or sets the color that's applied to the foreground of the Shading object.
    ///</summary>
    property ForegroundPatternColor: DDN.Aspose.Common.DNColor read get_ForegroundPatternColor write set_ForegroundPatternColor;
    ///<summary>
    ///  Gets or sets the shading texture.
    ///</summary>
    property Texture: DNTextureIndex read get_Texture write set_Texture;
  end;

  TDNShading = class(TDNGenericImport<DNShadingClass, DNShading>) end;

  //-------------namespace: Aspose.Words----------------
  DNTabStopCollectionClass = interface(DNInternableComplexAttrClass)
  ['{7DD7971F-3AB0-5576-ABFD-B7F0667E5A95}']
  end;

  ///<summary>
  ///  A collection of <see cref="T:Aspose.Words.TabStop" />
  ///  objects that represent custom tabs for a paragraph or a style.
  ///</summary>
  ///<remarks><p>In Microsoft Word documents, a tab stop can be defined in the properties of a paragraph
  ///  style or directly in the properties of a paragraph. A style can be based on another style.
  ///  Therefore, the complete set of tab stops for a given object is a combination of tab stops
  ///  defined directly on this object and tab stops inherited from the parent styles.</p>
  ///  <p>In Aspose.Words, when you obtain a <b>TabStops</b>
  ///  collection for a paragraph or a style,
  ///  it contains only the custom tab stops defined directly for this paragraph or style.
  ///  The collection does not include tab stops defined in the parent styles or default tab stops.</p>
  ///<seealso cref="T:Aspose.Words.ParagraphFormat" />
  ///<seealso cref="T:Aspose.Words.TabStop" />
  ///<seealso cref="P:Aspose.Words.Document.DefaultTabStop" />
  ///</remarks>
  ///<dev>
  ///  This whole collection is stored in the paragraph attributes as a single attribute.
  ///</dev>
  [DNTypeName('Aspose.Words.TabStopCollection')]
  DNTabStopCollection = interface(DNInternableComplexAttr)
  ['{5B61DC7D-E15A-309A-8444-CA4259144EAA}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNTabStop; overload;
    function get_Item(position: Double): DNTabStop; overload;

  { methods } 

    ///<summary>
    ///  Determines whether the specified TabStopCollection is equal in value to the current TabStopCollection.
    ///</summary>
    function Equals(rhs: DNTabStopCollection): Boolean; overload;
    ///<summary>
    ///  Determines whether the specified object is equal in value to the current object.
    ///</summary>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  Serves as a hash function for this type.
    ///</summary>
    function GetHashCode: Int32;
    ///<summary>
    ///  Deletes all tab stop positions.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Gets the position (in points) of the tab stop at the specified index.
    ///</summary>
    ///  <param name="index">An index into the collection of tab stops.</param>
    ///<returns>The position of the tab stop.</returns>
    function GetPositionByIndex(index: Int32): Double;
    ///<summary>
    ///  Gets the index of a tab stop with the specified position in points.
    ///</summary>
    function GetIndexByPosition(position: Double): Int32;
    ///<summary>
    ///  Adds or replaces a tab stop in the collection.
    ///</summary>
    ///<remarks><p>If a tab stop already exists at the specified position, it is replaced.</p>
    ///</remarks>
    ///  <param name="tabStop">A tab stop object to add.</param>
    procedure Add(tabStop: DNTabStop); overload;
    ///<summary>
    ///  Adds or replaces a tab stop in the collection.
    ///</summary>
    ///<remarks><p>If a tab stop already exists at the specified position, it is replaced.</p>
    ///</remarks>
    ///  <param name="position">A position (in points) where to add the tab stop.</param>
    ///  <param name="alignment">A <see cref="T:Aspose.Words.TabAlignment" />
    ///  value that
    ///  specifies the alignment of text at the tab stop.</param>
    ///  <param name="leader">A <see cref="T:Aspose.Words.TabLeader" />
    ///  value that
    ///  specifies the type of the leader line displayed under the tab character.</param>
    procedure Add(position: Double; alignment: DNTabAlignment; leader: DNTabLeader); overload;
    ///<summary>
    ///  Removes a tab stop at the specified position from the collection.
    ///</summary>
    ///  <param name="position">The position (in points) of the tab stop to remove.</param>
    procedure RemoveByPosition(position: Double);
    ///<summary>
    ///  Removes a tab stop at the specified index from the collection.
    ///</summary>
    ///  <param name="index">An index into the collection of tab stops.</param>
    procedure RemoveByIndex(index: Int32);
    ///<summary>
    ///  Gets a first tab stop to the right of the specified position.
    ///</summary>
    ///<remarks><p>Skips tab stops with <b>Alignment</b>
    ///  set to <c>TabAlignment.Bar</c>.</p>
    ///</remarks>
    ///  <param name="position">The reference position (in points).</param>
    ///<returns>A tab stop object or null if a suitable tab stop was not found.</returns>
    function After(position: Double): DNTabStop;
    ///<summary>
    ///  Gets a first tab stop to the left of the specified position.
    ///</summary>
    ///<remarks><p>Skips tab stops with <b>Alignment</b>
    ///  set to <c>TabAlignment.Bar</c>.</p>
    ///</remarks>
    ///  <param name="position">The reference position (in points).</param>
    ///<returns>A tab stop object or null if a suitable tab stop was not found.</returns>
    function Before(position: Double): DNTabStop;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of tab stops in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNTabStop read get_Item; default;
    property Item[position: Double]: DNTabStop read get_Item; default;
  end;

  TDNTabStopCollection = class(TDNGenericImport<DNTabStopCollectionClass, DNTabStopCollection>) end;

  //-------------namespace: Aspose.Words----------------
  DNInterruptionTokenClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F92C1AAB-F777-51A7-983E-505DE0F061AE}']
  { constructors } 

    {class} function init: DNInterruptionToken;

  end;

  ///<summary>
  ///  This class is obsolete. Use <see cref="T:Aspose.Words.Layout.IPageLayoutCallback" />
  ///  instead.
  ///  Provides method to manually interrupt Aspose.Words while page layout model is built.
  ///</summary>
  [DNTypeName('Aspose.Words.InterruptionToken')]
  DNInterruptionToken = interface(DDN.mscorlib.DNObject)
  ['{8EE95A75-2BC8-315A-AFF5-3B649ACE4376}']
  { methods } 

    ///<summary>
    ///  Requests Aspose.Words to abandon the current task.
    ///</summary>
    ///<remarks>
    ///  Throws a <see cref="T:System.Threading.ThreadInterruptedException" />
    ///  on processing the interrupt request.
    ///</remarks>
    procedure Interrupt;
    ///<summary>
    ///  Associates the current thread with this <see cref="T:Aspose.Words.InterruptionToken" />
    ///  instance.
    ///</summary>
    ///<remarks>
    ///  Use this method before calling <see cref="M:Aspose.Words.InterruptionToken.Interrupt" />
    ///</remarks>
    procedure BindToCurrentThread;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNInterruptionToken = class(TDNGenericImport<DNInterruptionTokenClass, DNInterruptionToken>) end;

  //-------------namespace: Aspose.Words----------------
  ///<summary>
  ///  Implement this interface if you want to have your own custom method called to
  ///  capture loss of fidelity warnings that can occur during document loading or saving.
  ///</summary>
  [DNTypeName('Aspose.Words.IWarningCallback')]
  DNIWarningCallback = interface(DDN.mscorlib.DNObject)
  ['{29662C09-EE27-3859-B5CD-1C2181644240}']
  { methods } 

    ///<summary>
    ///  Aspose.Words invokes this method when it encounters some issue during document loading
    ///  or saving that might result in loss of formatting or data fidelity.
    ///</summary>
    procedure Warning(info: DNWarningInfo);

  end;

  //-------------namespace: Aspose.Words.Layout----------------
  ///<summary>
  ///  Implement this interface if you want to have your own custom method called during build and rendering of page layout model.
  ///</summary>
  ///<remarks>
  ///  The primary use for this interface is to allow application code to abort build process.<para />
  ///  It is possible to build page layout model for only a few pages at start of the document then abort process and render only what has been built already.<para />
  ///  Note, however, that rendering results may not match what would be rendered for each page if process would have finished.<para />
  ///  This technique may not work for every document or may fail completely.<para /></remarks>
  ///<seealso cref="P:Aspose.Words.Layout.LayoutOptions.Callback" />
  [DNTypeName('Aspose.Words.Layout.IPageLayoutCallback')]
  DNIPageLayoutCallback = interface(DDN.mscorlib.DNObject)
  ['{891E18AC-FBC5-3304-8653-8B4C6D28FF6A}']
  { methods } 

    ///<summary>
    ///  This is called to notify of layout build and rendering progress.
    ///</summary>
    ///  <param name="args">An argument of the event.</param>
    ///<remarks>
    ///  Exception when thrown by implementation aborts layout build process.<para /></remarks>
    procedure Notify(args: DNPageLayoutCallbackArgs);

  end;

  //-------------namespace: Aspose.Words.Layout----------------
  DNLayoutCollectorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{25427A9A-E133-500A-8CF7-63622287ADFC}']
  { constructors } 

    ///<summary>
    ///  Initializes an instance of this class.
    ///</summary>
    ///  <param name="doc">The document to which this collector instance will be attached to.</param>
    {class} function init(doc: DNDocument): DNLayoutCollector;

  end;

  ///<summary><para>This class allows to compute page numbers of document nodes.</para></summary>
  ///<remarks><para>When you create a <see cref="T:Aspose.Words.Layout.LayoutCollector" />
  ///  and specify a <see cref="T:Aspose.Words.Document" />
  ///  document object to attach to,
  ///  the collector will record mapping of document nodes to layout objects when the document is formatted into pages.</para><para>You will be able to find out on which page a particular document node (e.g. run, paragraph or table cell) is located
  ///  by using the <see cref="M:Aspose.Words.Layout.LayoutCollector.GetStartPageIndex(Aspose.Words.Node)" />
  ///  , <see cref="M:Aspose.Words.Layout.LayoutCollector.GetEndPageIndex(Aspose.Words.Node)" />
  ///  and <see cref="M:Aspose.Words.Layout.LayoutCollector.GetNumPagesSpanned(Aspose.Words.Node)" />
  ///  methods.
  ///  These methods automatically build page layout model of the document and update fields if required.</para><para>When you no longer need to collect layout information, it is best to set the <see cref="P:Aspose.Words.Layout.LayoutCollector.Document" />
  ///  property to null
  ///  to avoid unnecessary collection of more layout mappings.</para></remarks>
  ///<dev>
  ///  !!! DO NOT USE THIS CLASS INTERNALLY IN AW. CONTACT LAYOUT TEAM FOR YOUR CUSTOM SOLUTION FIRST !!!
  ///</dev>
  [DNTypeName('Aspose.Words.Layout.LayoutCollector')]
  DNLayoutCollector = interface(DDN.mscorlib.DNObject)
  ['{5597DB5B-D931-3620-AFDC-B5333C81A8FC}']
  { getters & setters } 

    function get_Document: DNDocument;
    procedure set_Document(value: DNDocument);

  { methods } 

    ///<summary>
    ///  Gets 1-based index of the page where node begins. Returns 0 if node cannot be mapped to a page.
    ///</summary>
    function GetStartPageIndex(node: DNNode): Int32;
    ///<summary>
    ///  Gets 1-based index of the page where node ends. Returns 0 if node cannot be mapped to a page.
    ///</summary>
    function GetEndPageIndex(node: DNNode): Int32;
    ///<summary>
    ///  Gets number of pages the specified node spans. 0 if node is within a single page.
    ///  This is the same as <see cref="M:Aspose.Words.Layout.LayoutCollector.GetEndPageIndex(Aspose.Words.Node)" />
    ///  - <see cref="M:Aspose.Words.Layout.LayoutCollector.GetStartPageIndex(Aspose.Words.Node)" />
    ///  .
    ///</summary>
    function GetNumPagesSpanned(node: DNNode): Int32;
    ///<summary>
    ///  Clears all collected layout data. Call this method after document was manually updated, or layout was rebuilt.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Returns an opaque position of the <see cref="T:Aspose.Words.Layout.LayoutEnumerator" />
    ///  which corresponds to the specified node.
    ///  You can use returned value as an argument to <see cref="P:Aspose.Words.Layout.LayoutEnumerator.Current" />
    ///  given the document being
    ///  enumerated and the document of the node are the same.
    ///</summary>
    ///<remarks><para>This method works for only <see cref="T:Aspose.Words.Paragraph" />
    ///  nodes, as well as indivisible inline nodes,
    ///  e.g. <see cref="T:Aspose.Words.BookmarkStart" />
    ///  or <see cref="T:Aspose.Words.Drawing.Shape" />
    ///  . It doesn't work for <see cref="T:Aspose.Words.Run" />
    ///  , <see cref="T:Aspose.Words.Tables.Cell" />
    ///<see cref="T:Aspose.Words.Tables.Row" />
    ///  or <see cref="T:Aspose.Words.Tables.Table" />
    ///  nodes, and nodes within header/footer.</para><para>Note that the entity returned for a <see cref="T:Aspose.Words.Paragraph" />
    ///  node is a paragraph break span. Use the appropriate method to ascend to the parent line</para><para>If you need to navigate to a <see cref="T:Aspose.Words.Run" />
    ///  of text then you can insert bookmark right before it
    ///  and then navigate to the bookmark instead.</para><para>If you need to navigate to a <see cref="T:Aspose.Words.Tables.Cell" />
    ///  node then you can move to a <see cref="T:Aspose.Words.Paragraph" />
    ///  node in this cell and then ascend to a parent entity. The same approach can be used for <see cref="T:Aspose.Words.Tables.Row" />
    ///  and <see cref="T:Aspose.Words.Tables.Table" />
    ///  nodes.</para></remarks>
    function GetEntity(node: DNNode): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the document this collector instance is attached to.
    ///</summary>
    ///<remarks>
    ///  If you need to access page indexes of the document nodes you need to set this property to point to a document instance,
    ///  before page layout of the document is built. It is best to set this property to <c>null</c> afterwards,
    ///  otherwise the collector continues to accumulate information from subsequent rebuilds of the document's page layout.
    ///</remarks>
    property Document: DNDocument read get_Document write set_Document;
  end;

  TDNLayoutCollector = class(TDNGenericImport<DNLayoutCollectorClass, DNLayoutCollector>) end;

  //-------------namespace: Aspose.Words.Layout----------------
  DNLayoutEnumeratorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7E620816-ABCF-59A8-973A-18CF6481529D}']
  { constructors } 

    ///<summary>
    ///  Initializes new instance of this class.
    ///</summary>
    ///  <param name="document">A document whose page layout model to enumerate.</param>
    ///<remarks><para>If page layout model of the document hasn't been built the enumerator calls <see cref="M:Aspose.Words.Document.UpdatePageLayout" />
    ///  to build it.</para><para>Whenever document is updated and new page layout model is created, a new enumerator must be used to access it.</para></remarks>
    {class} function init(document: DNDocument): DNLayoutEnumerator;

  end;

  ///<summary>
  ///  Enumerates page layout entities of a document.
  ///  You can use this class to walk over the page layout model. Available properties are type, geometry, text and page index where entity is rendered,
  ///  as well as overall structure and relationships.
  ///  Use combination of <see cref="M:Aspose.Words.Layout.LayoutCollector.GetEntity(Aspose.Words.Node)" />
  ///  and <see cref="P:Aspose.Words.Layout.LayoutEnumerator.Current" />
  ///  move to the entity which corresponds to a document node.
  ///</summary>
  ///<dev>
  ///  !!! DO NOT USE THIS CLASS INTERNALLY IN AW. CONTACT LAYOUT TEAM FOR YOUR CUSTOM SOLUTION FIRST !!!
  ///</dev>
  [DNTypeName('Aspose.Words.Layout.LayoutEnumerator')]
  DNLayoutEnumerator = interface(DDN.mscorlib.DNObject)
  ['{7CDF92B8-874A-3B76-AFE2-924A59FD08F2}']
  { getters & setters } 

    function get_Type: DNLayoutEntityType;
    function get_Rectangle: DDN.Aspose.Common.DNRectangleF;
    function get_Kind: string;
    function get_Text: string;
    function get_PageIndex: Int32;
    function get_Current: DDN.mscorlib.DNObject;
    procedure set_Current(value: DDN.mscorlib.DNObject);
    function get_Document: DNDocument;

  { methods } 

    ///<summary>
    ///  Moves the enumerator to the first page of the document.
    ///</summary>
    procedure Reset;
    ///<summary>
    ///  Moves to the next sibling entity in visual order.
    ///  When iterating lines of a paragraph broken across pages this method
    ///  will not move to the next page but rather move to the next entity on the same page.
    ///</summary>
    function MoveNext: Boolean;
    ///<summary>
    ///  Moves to the next sibling entity in a logical order.
    ///  When iterating lines of a paragraph broken across pages this method
    ///  will move to the next line even if it resides on another page.
    ///</summary>
    ///<remarks>
    ///  Note that all <see cref="F:Aspose.Words.Layout.LayoutEntityType.Span" />
    ///  entities are linked together thus if <see cref="P:Aspose.Words.Layout.LayoutEnumerator.Current" />
    ///  entity is span repeated calling of this method will iterates complete story of the document.
    ///</remarks>
    function MoveNextLogical: Boolean;
    ///<summary>
    ///  Moves to the previous sibling entity.
    ///</summary>
    function MovePrevious: Boolean;
    ///<summary>
    ///  Moves to the previous sibling entity in a logical order.
    ///  When iterating lines of a paragraph broken across pages this method
    ///  will move to the previous line even if it resides on another page.
    ///</summary>
    ///<remarks>
    ///  Note that all <see cref="F:Aspose.Words.Layout.LayoutEntityType.Span" />
    ///  entities are linked together thus if <see cref="P:Aspose.Words.Layout.LayoutEnumerator.Current" />
    ///  entity is span repeated calling of this method will iterates complete story of the document.
    ///</remarks>
    function MovePreviousLogical: Boolean;
    ///<summary>
    ///  Moves to the first child entity.
    ///</summary>
    function MoveFirstChild: Boolean;
    ///<summary>
    ///  Moves to the last child entity.
    ///</summary>
    function MoveLastChild: Boolean;
    ///<summary>
    ///  Moves to the parent entity.
    ///</summary>
    function MoveParent: Boolean; overload;
    ///<summary>
    ///  Moves to the parent entity of the specified type.
    ///</summary>
    ///  <param name="types">The parent entity type to move to. Use bitwise-OR to specify multiple parent types.</param>
    ///<remarks>This method is useful if you need to find the cell, column or header/footer parent of the entity.</remarks>
    function MoveParent(types: DNLayoutEntityType): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the type of the current entity.
    ///</summary>
    property &Type: DNLayoutEntityType read get_Type;
    ///<summary>
    ///  Returns the bounding rectangle of the current entity relative to the page top left corner (in points).
    ///</summary>
    property Rectangle: DDN.Aspose.Common.DNRectangleF read get_Rectangle;
    ///<summary>
    ///  Gets the kind of the current entity. This can be an empty string but never null.
    ///</summary>
    ///<remarks>This is a more specific type of the current entity, e.g. bookmark span has <see cref="F:Aspose.Words.Layout.LayoutEntityType.Span" />
    ///  type and
    ///  may have either a BOOKMARKSTART or BOOKMARKEND kind.</remarks>
    property Kind: string read get_Kind;
    ///<summary>
    ///  Gets text of the current span entity. Throws for other entity types.
    ///</summary>
    property Text: string read get_Text;
    ///<summary>
    ///  Gets the 1-based index of a page which contains the current entity.
    ///</summary>
    property PageIndex: Int32 read get_PageIndex;
    ///<summary>
    ///  Gets or sets current position in the page layout model.
    ///  This property returns an opaque object which corresponds to the current layout entity.
    ///</summary>
    property Current: DDN.mscorlib.DNObject read get_Current write set_Current;
    ///<summary>
    ///  Gets document this instance enumerates.
    ///</summary>
    property Document: DNDocument read get_Document;
  end;

  TDNLayoutEnumerator = class(TDNGenericImport<DNLayoutEnumeratorClass, DNLayoutEnumerator>) end;

  //-------------namespace: Aspose.Words.Layout----------------
  DNLayoutOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{20A0E29F-EC4B-5B2B-83C8-7EBAAA8352AC}']
  { constructors } 

    {class} function init: DNLayoutOptions;

  end;

  ///<summary>
  ///  Holds the options that allow controlling the document layout process.
  ///</summary>
  ///<remarks><para>
  ///  You do not create instances of this class directly. Use the <see cref="P:Aspose.Words.Document.LayoutOptions" />
  ///  property to access layout options for this document.
  ///</para><para>Note that after changing any of the options present in this class, <see cref="M:Aspose.Words.Document.UpdatePageLayout" />
  ///  method
  ///  should be called in order for the changed options to be applied to the layout.</para></remarks>
  [DNTypeName('Aspose.Words.Layout.LayoutOptions')]
  DNLayoutOptions = interface(DDN.mscorlib.DNObject)
  ['{392BE305-6066-3CDA-B58D-9F6058347003}']
  { getters & setters } 

    function get_RevisionOptions: DNRevisionOptions;
    function get_ShowHiddenText: Boolean;
    procedure set_ShowHiddenText(value: Boolean);
    function get_ShowParagraphMarks: Boolean;
    procedure set_ShowParagraphMarks(value: Boolean);
    function get_ShowComments: Boolean;
    procedure set_ShowComments(value: Boolean);
    function get_CommentDisplayMode: DNCommentDisplayMode;
    procedure set_CommentDisplayMode(value: DNCommentDisplayMode);
    function get_TextShaperFactory: DNITextShaperFactory;
    procedure set_TextShaperFactory(value: DNITextShaperFactory);
    function get_Callback: DNIPageLayoutCallback;
    procedure set_Callback(value: DNIPageLayoutCallback);
    function get_IgnorePrinterMetrics: Boolean;
    procedure set_IgnorePrinterMetrics(value: Boolean);
    function get_ContinuousSectionPageNumberingRestart: DNContinuosSectionRestart;
    procedure set_ContinuousSectionPageNumberingRestart(value: DNContinuosSectionRestart);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets revision options.
    ///</summary>
    property RevisionOptions: DNRevisionOptions read get_RevisionOptions;
    ///<summary>
    ///  Gets or sets indication of whether hidden text in the document is rendered.
    ///  Default is False.
    ///</summary>
    ///<remarks>This property affects all hidden content, not just text.</remarks>
    property ShowHiddenText: Boolean read get_ShowHiddenText write set_ShowHiddenText;
    ///<summary>
    ///  Gets or sets indication of whether paragraph marks are rendered.
    ///  Default is False.
    ///</summary>
    property ShowParagraphMarks: Boolean read get_ShowParagraphMarks write set_ShowParagraphMarks;
    ///<summary>
    ///  Gets or sets indication of whether comments are rendered.
    ///  Default is True.
    ///  This property is obsolete. Use <see cref="P:Aspose.Words.Layout.LayoutOptions.CommentDisplayMode" />
    ///  property instead.
    ///</summary>
    property ShowComments: Boolean read get_ShowComments write set_ShowComments;
    ///<summary>
    ///  Gets or sets the way comments are rendered.
    ///  Default value is <see cref="F:Aspose.Words.Layout.CommentDisplayMode.ShowInBalloons" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Note that revisions are not rendered in balloons for <see cref="F:Aspose.Words.Layout.CommentDisplayMode.ShowInAnnotations" />
    ///  .
    ///</remarks>
    property CommentDisplayMode: DNCommentDisplayMode read get_CommentDisplayMode write set_CommentDisplayMode;
    ///<summary>
    ///  Gets or sets <see cref="T:Aspose.Words.Shaping.ITextShaperFactory" />
    ///  implementation used for Advanced Typography rendering features.
    ///</summary>
    property TextShaperFactory: DNITextShaperFactory read get_TextShaperFactory write set_TextShaperFactory;
    ///<summary>
    ///  Gets or sets <see cref="T:Aspose.Words.Layout.IPageLayoutCallback" />
    ///  implementation used by page layout model.
    ///</summary>
    property Callback: DNIPageLayoutCallback read get_Callback write set_Callback;
    ///<summary>
    ///  Gets or sets indication of whether the "Use printer metrics to lay out document" compatibility option is ignored.
    ///  Default is True.
    ///</summary>
    property IgnorePrinterMetrics: Boolean read get_IgnorePrinterMetrics write set_IgnorePrinterMetrics;
    property ContinuousSectionPageNumberingRestart: DNContinuosSectionRestart read get_ContinuousSectionPageNumberingRestart write set_ContinuousSectionPageNumberingRestart;
  end;

  TDNLayoutOptions = class(TDNGenericImport<DNLayoutOptionsClass, DNLayoutOptions>) end;

  //-------------namespace: Aspose.Words.Layout----------------
  DNPageLayoutCallbackArgsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{73F1BCF1-ADD7-5A26-8D4D-659F014D994D}']
  end;

  ///<summary>
  ///  An argument passed into <see cref="M:Aspose.Words.Layout.IPageLayoutCallback.Notify(Aspose.Words.Layout.PageLayoutCallbackArgs)" />
  ///</summary>
  [DNTypeName('Aspose.Words.Layout.PageLayoutCallbackArgs')]
  DNPageLayoutCallbackArgs = interface(DDN.mscorlib.DNObject)
  ['{C2B42F85-C703-3343-9374-80855250EEB3}']
  { getters & setters } 

    function get_Event: DNPageLayoutEvent;
    function get_Document: DNDocument;
    function get_PageIndex: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets event.
    ///</summary>
    property Event: DNPageLayoutEvent read get_Event;
    ///<summary>
    ///  Gets document.
    ///</summary>
    property Document: DNDocument read get_Document;
    ///<summary>
    ///  Gets 0-based index of the page in the document this event relates to.
    ///  Returns negative value if there is no associated page, or if page was removed during reflow.
    ///</summary>
    property PageIndex: Int32 read get_PageIndex;
  end;

  TDNPageLayoutCallbackArgs = class(TDNGenericImport<DNPageLayoutCallbackArgsClass, DNPageLayoutCallbackArgs>) end;

  //-------------namespace: Aspose.Words.Layout----------------
  DNRevisionOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FC76A5B9-886D-56D8-AB78-411946499BB3}']
  end;

  ///<summary>
  ///  Allows to control how document revisions are handled during layout process.
  ///</summary>
  [DNTypeName('Aspose.Words.Layout.RevisionOptions')]
  DNRevisionOptions = interface(DDN.mscorlib.DNObject)
  ['{DA2F81AA-3C24-36A0-8E81-7198B0859D5F}']
  { getters & setters } 

    function get_ShowRevisionMarks: Boolean;
    procedure set_ShowRevisionMarks(value: Boolean);
    function get_ShowRevisionBars: Boolean;
    procedure set_ShowRevisionBars(value: Boolean);
    function get_ShowOriginalRevision: Boolean;
    procedure set_ShowOriginalRevision(value: Boolean);
    function get_InsertedTextColor: DNRevisionColor;
    procedure set_InsertedTextColor(value: DNRevisionColor);
    function get_InsertedTextEffect: DNRevisionTextEffect;
    procedure set_InsertedTextEffect(value: DNRevisionTextEffect);
    function get_DeletedTextColor: DNRevisionColor;
    procedure set_DeletedTextColor(value: DNRevisionColor);
    function get_DeletedTextEffect: DNRevisionTextEffect;
    procedure set_DeletedTextEffect(value: DNRevisionTextEffect);
    function get_MovedFromTextColor: DNRevisionColor;
    procedure set_MovedFromTextColor(value: DNRevisionColor);
    function get_MovedFromTextEffect: DNRevisionTextEffect;
    procedure set_MovedFromTextEffect(value: DNRevisionTextEffect);
    function get_MovedToTextColor: DNRevisionColor;
    procedure set_MovedToTextColor(value: DNRevisionColor);
    function get_MovedToTextEffect: DNRevisionTextEffect;
    procedure set_MovedToTextEffect(value: DNRevisionTextEffect);
    function get_RevisedPropertiesColor: DNRevisionColor;
    procedure set_RevisedPropertiesColor(value: DNRevisionColor);
    function get_RevisedPropertiesEffect: DNRevisionTextEffect;
    procedure set_RevisedPropertiesEffect(value: DNRevisionTextEffect);
    function get_RevisionBarsColor: DNRevisionColor;
    procedure set_RevisionBarsColor(value: DNRevisionColor);
    function get_RevisionBarsWidth: Single;
    procedure set_RevisionBarsWidth(value: Single);
    function get_RevisionBarsPosition: DNHorizontalAlignment;
    procedure set_RevisionBarsPosition(value: DNHorizontalAlignment);
    function get_CommentColor: DNRevisionColor;
    procedure set_CommentColor(value: DNRevisionColor);
    function get_ShowInBalloons: DNShowInBalloons;
    procedure set_ShowInBalloons(value: DNShowInBalloons);
    function get_MeasurementUnit: DNMeasurementUnits;
    procedure set_MeasurementUnit(value: DNMeasurementUnits);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Allow to specify whether revision text should be marked with special formatting markup.
    ///  Default value is True.
    ///</summary>
    property ShowRevisionMarks: Boolean read get_ShowRevisionMarks write set_ShowRevisionMarks;
    ///<summary>
    ///  Allows to specify whether revision bars should be rendered near lines containing revised content.
    ///  Default value is True.
    ///</summary>
    property ShowRevisionBars: Boolean read get_ShowRevisionBars write set_ShowRevisionBars;
    ///<summary>
    ///  Allows to specify whether the original text should be shown instead of revised one.
    ///  Default value is False.
    ///</summary>
    property ShowOriginalRevision: Boolean read get_ShowOriginalRevision write set_ShowOriginalRevision;
    ///<summary>
    ///  Allows to specify the color to be used for inserted content <see cref="F:Aspose.Words.RevisionType.Insertion" />
    ///  .
    ///  Default value is <see cref="F:Aspose.Words.Layout.RevisionColor.ByAuthor" />
    ///  .
    ///</summary>
    property InsertedTextColor: DNRevisionColor read get_InsertedTextColor write set_InsertedTextColor;
    ///<summary>
    ///  Allows to specify the effect to be applied to the inserted content <see cref="F:Aspose.Words.RevisionType.Insertion" />
    ///  .
    ///  Default value is <see cref="F:Aspose.Words.Layout.RevisionTextEffect.Underline" />
    ///  .
    ///</summary>
    ///<remarks>Values of <see cref="F:Aspose.Words.Layout.RevisionTextEffect.Hidden" />
    ///  and <see cref="F:Aspose.Words.Layout.RevisionTextEffect.DoubleStrikeThrough" />
    ///  are not allowed and will cause <see cref="T:System.ArgumentOutOfRangeException" />
    ///  .</remarks>
    property InsertedTextEffect: DNRevisionTextEffect read get_InsertedTextEffect write set_InsertedTextEffect;
    ///<summary>
    ///  Allows to specify the color to be used for deleted content <see cref="F:Aspose.Words.RevisionType.Deletion" />
    ///  .
    ///  Default value is <see cref="F:Aspose.Words.Layout.RevisionColor.ByAuthor" />
    ///  .
    ///</summary>
    property DeletedTextColor: DNRevisionColor read get_DeletedTextColor write set_DeletedTextColor;
    ///<summary>
    ///  Allows to specify the effect to be applied to the deleted content <see cref="F:Aspose.Words.RevisionType.Deletion" />
    ///  .
    ///  Default value is <see cref="F:Aspose.Words.Layout.RevisionTextEffect.StrikeThrough" />
    ///</summary>
    property DeletedTextEffect: DNRevisionTextEffect read get_DeletedTextEffect write set_DeletedTextEffect;
    ///<summary>
    ///  Allows to specify the color to be used for areas where content was moved from <see cref="F:Aspose.Words.RevisionType.Moving" />
    ///  .
    ///  Default value is <see cref="F:Aspose.Words.Layout.RevisionColor.ByAuthor" />
    ///  .
    ///</summary>
    property MovedFromTextColor: DNRevisionColor read get_MovedFromTextColor write set_MovedFromTextColor;
    ///<summary>
    ///  Allows to specify the effect to be applied to the areas where content was moved from <see cref="F:Aspose.Words.RevisionType.Moving" />
    ///  .
    ///  Default value is <see cref="F:Aspose.Words.Layout.RevisionTextEffect.DoubleStrikeThrough" />
    ///</summary>
    property MovedFromTextEffect: DNRevisionTextEffect read get_MovedFromTextEffect write set_MovedFromTextEffect;
    ///<summary>
    ///  Allows to specify the color to be used for areas where content was moved to <see cref="F:Aspose.Words.RevisionType.Moving" />
    ///  .
    ///  Default value is <see cref="F:Aspose.Words.Layout.RevisionColor.ByAuthor" />
    ///  .
    ///</summary>
    property MovedToTextColor: DNRevisionColor read get_MovedToTextColor write set_MovedToTextColor;
    ///<summary>
    ///  Allows to specify the effect to be applied to the areas where content was moved to <see cref="F:Aspose.Words.RevisionType.Moving" />
    ///  .
    ///  Default value is <see cref="F:Aspose.Words.Layout.RevisionTextEffect.DoubleUnderline" />
    ///</summary>
    ///<remarks>Values of <see cref="F:Aspose.Words.Layout.RevisionTextEffect.Hidden" />
    ///  and <see cref="F:Aspose.Words.Layout.RevisionTextEffect.DoubleStrikeThrough" />
    ///  are not allowed and will cause <see cref="T:System.ArgumentOutOfRangeException" />
    ///  .</remarks>
    property MovedToTextEffect: DNRevisionTextEffect read get_MovedToTextEffect write set_MovedToTextEffect;
    ///<summary>
    ///  Allows to specify the color to be used for content with changes of formatting properties <see cref="F:Aspose.Words.RevisionType.FormatChange" />
    ///  Default value is <see cref="F:Aspose.Words.Layout.RevisionColor.NoHighlight" />
    ///  .
    ///</summary>
    property RevisedPropertiesColor: DNRevisionColor read get_RevisedPropertiesColor write set_RevisedPropertiesColor;
    ///<summary>
    ///  Allows to specify the effect for content areas with changes of formatting properties <see cref="F:Aspose.Words.RevisionType.FormatChange" />
    ///  Default value is <see cref="F:Aspose.Words.Layout.RevisionTextEffect.None" />
    ///</summary>
    ///<remarks><see cref="F:Aspose.Words.Layout.RevisionTextEffect.Hidden" />
    ///  is not allowed and will cause <see cref="T:System.ArgumentOutOfRangeException" />
    ///  .</remarks>
    property RevisedPropertiesEffect: DNRevisionTextEffect read get_RevisedPropertiesEffect write set_RevisedPropertiesEffect;
    ///<summary>
    ///  Allows to specify the color to be used for side bars that identify document lines containing revised information.
    ///  Default value is <see cref="F:Aspose.Words.Layout.RevisionColor.Red" />
    ///  .
    ///</summary>
    ///<remarks> Setting this property  to <see cref="F:Aspose.Words.Layout.RevisionColor.ByAuthor" />
    ///  or <see cref="F:Aspose.Words.Layout.RevisionColor.NoHighlight" />
    ///  values
    ///  will result in hiding revision bars from the layout.</remarks>
    property RevisionBarsColor: DNRevisionColor read get_RevisionBarsColor write set_RevisionBarsColor;
    ///<summary>
    ///  Gets or sets width of revision bars, points.
    ///</summary>
    property RevisionBarsWidth: Single read get_RevisionBarsWidth write set_RevisionBarsWidth;
    ///<summary>
    ///  Gets or sets rendering position of revision bars.
    ///  Default value is <see cref="F:Aspose.Words.Drawing.HorizontalAlignment.Outside" />
    ///  .
    ///</summary>
    ///<remarks>Values of <see cref="F:Aspose.Words.Drawing.HorizontalAlignment.Center" />
    ///  and <see cref="F:Aspose.Words.Drawing.HorizontalAlignment.Inside" />
    ///  are not allowed and will cause <see cref="T:System.ArgumentOutOfRangeException" />
    ///  .</remarks>
    property RevisionBarsPosition: DNHorizontalAlignment read get_RevisionBarsPosition write set_RevisionBarsPosition;
    ///<summary>
    ///  Allows to specify the color to be used for comments.
    ///  Default value is <see cref="F:Aspose.Words.Layout.RevisionColor.Red" />
    ///  .
    ///</summary>
    ///<remarks> If set this property  to <see cref="F:Aspose.Words.Layout.RevisionColor.ByAuthor" />
    ///  or <see cref="F:Aspose.Words.Layout.RevisionColor.NoHighlight" />
    ///  values,
    ///  as the result this property will be set to default color.</remarks>
    property CommentColor: DNRevisionColor read get_CommentColor write set_CommentColor;
    ///<summary>
    ///  Allows to specify whether the revisions are rendered in the balloons.
    ///  Default value is <see cref="F:Aspose.Words.Layout.ShowInBalloons.None" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Note that revisions are not rendered in balloons for <see cref="F:Aspose.Words.Layout.CommentDisplayMode.ShowInAnnotations" />
    ///  .
    ///</remarks>
    property ShowInBalloons: DNShowInBalloons read get_ShowInBalloons write set_ShowInBalloons;
    ///<summary>
    ///  Allows to specify the measurement units for revision comments.
    ///  Default value is <see cref="F:Aspose.Words.MeasurementUnits.Centimeters" />
    ///</summary>
    property MeasurementUnit: DNMeasurementUnits read get_MeasurementUnit write set_MeasurementUnit;
  end;

  TDNRevisionOptions = class(TDNGenericImport<DNRevisionOptionsClass, DNRevisionOptions>) end;

  //-------------namespace: Aspose.Words----------------
  DNLicenseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3DFC5A0F-95CC-5BD8-8D00-EAB36F46400C}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class.
    ///</summary>
    {class} function init: DNLicense;

  end;

  ///<summary>
  ///  Provides methods to license the component.
  ///</summary>
  [DNTypeName('Aspose.Words.License')]
  DNLicense = interface(DDN.mscorlib.DNObject)
  ['{ABE5A2FD-6AF6-38DD-8A68-8569B9A802FF}']
  { methods } 

    ///<summary>
    ///  Licenses the component.
    ///</summary>
    ///<remarks><p>Tries to find the license in the following locations:</p>
    ///  <p>1. Explicit path.</p>
    ///  <p>2. The folder that contains the Aspose component assembly.</p>
    ///  <p>3. The folder that contains the client's calling assembly.</p>
    ///  <p>4. The folder that contains the entry (startup) assembly.</p>
    ///  <p>5. An embedded resource in the client's calling assembly.</p>
    ///  <p><b>Note:</b>
    ///  On the .NET Compact Framework, tries to find the license only in these locations:</p>
    ///  <p>1. Explicit path.</p>
    ///  <p>2. An embedded resource in the client's calling assembly.</p>
    ///</remarks>
    ///  <param name="licenseName">Can be a full or short file name or name of an embedded resource.
    ///  Use an empty string to switch to evaluation mode.</param>
    procedure SetLicense(licenseName: string); overload;
    ///<summary>
    ///  Licenses the component.
    ///</summary>
    ///  <param name="stream">A stream that contains the license.</param>
    ///<remarks><p>Use this method to load a license from a stream.</p>
    ///</remarks>
    procedure SetLicense(stream: DDN.mscorlib.DNStream); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNLicense = class(TDNGenericImport<DNLicenseClass, DNLicense>) end;

  //-------------namespace: Aspose.Words.Lists----------------
  DNListClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7AC2294B-77BF-56D9-ABD8-283A748F9827}']
  end;

  ///<summary>
  ///  Represents formatting of a list.
  ///</summary>
  ///<remarks><p>A list in a Microsoft Word document is a set of list formatting properties.
  ///  Each list can have up to 9 levels and formatting properties, such as number style, start value,
  ///  indent, tab position etc are defined separately for each level.</p>
  ///  <p>A <see cref="T:Aspose.Words.Lists.List" />
  ///  object always belongs to the <see cref="T:Aspose.Words.Lists.ListCollection" />
  ///  collection.</p>
  ///  <p>To create a new list, use the Add methods of the <see cref="T:Aspose.Words.Lists.ListCollection" />
  ///  collection.</p>
  ///  <p>To modify formatting of a list, use <see cref="T:Aspose.Words.Lists.ListLevel" />
  ///  objects found in
  ///  the <see cref="P:Aspose.Words.Lists.List.ListLevels" />
  ///  collection.</p>
  ///  <p>To apply or remove list formatting from a paragraph, use <see cref="T:Aspose.Words.Lists.ListFormat" />
  ///  .</p>
  ///<seealso cref="T:Aspose.Words.Lists.ListCollection" />
  ///<seealso cref="T:Aspose.Words.Lists.ListLevel" />
  ///<seealso cref="T:Aspose.Words.Lists.ListFormat" />
  ///</remarks>
  [DNTypeName('Aspose.Words.Lists.List')]
  DNList = interface(DDN.mscorlib.DNObject)
  ['{0A4EA0A6-4084-3244-908E-DDAF311DA593}']
  { getters & setters } 

    function get_ListId: Int32;
    function get_Document: DNDocumentBase;
    function get_IsMultiLevel: Boolean;
    function get_ListLevels: DNListLevelCollection;
    function get_IsRestartAtEachSection: Boolean;
    procedure set_IsRestartAtEachSection(value: Boolean);
    function get_IsListStyleDefinition: Boolean;
    function get_IsListStyleReference: Boolean;
    function get_Style: DNStyle;

  { methods } 

    ///<summary>
    ///  Compares with the specified list.
    ///</summary>
    function Equals(list: DNList): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  Calculates hash code for this list object.
    ///</summary>
    ///<dev>
    ///  To be compatible with the <see cref="M:Aspose.Words.Lists.List.Equals(System.Object)" />
    ///  method, only properties that affect visual
    ///  representation of the list should be included into the calculation. List ID and similar properties
    ///  are ignored.
    ///</dev>
    function GetHashCode: Int32;
    ///<summary>
    ///  Compares the specified object to the current object.
    ///</summary>
    function CompareTo(obj: DDN.mscorlib.DNObject): Int32; overload;
    ///<summary>
    ///  Compares the specified list to the current list.
    ///</summary>
    function CompareTo(other: DNList): Int32; overload;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the unique identifier of the list.
    ///</summary>
    ///<remarks><p>You do not normally need to use this property. But if you use it, you normally do so
    ///  in conjunction with the <see cref="M:Aspose.Words.Lists.ListCollection.GetListByListId(System.Int32)" />
    ///  method to find a
    ///  list by its identifier.</p>
    ///</remarks>
    property ListId: Int32 read get_ListId;
    ///<summary>
    ///  Gets the owner document.
    ///</summary>
    ///<remarks><p>A list always has a parent document and is valid only in the context of that document.</p>
    ///</remarks>
    property Document: DNDocumentBase read get_Document;
    ///<summary>
    ///  Returns true when the list contains 9 levels; false when 1 level.
    ///</summary>
    ///<remarks><p>The lists that you create with Aspose.Words are always multi-level lists and contain 9 levels.</p>
    ///  <p>Microsoft Word 2003 and later always create multi-level lists with 9 levels.
    ///  But in some documents, created with earlier versions of Microsoft Word you might encounter
    ///  lists that have 1 level only.</p>
    ///</remarks>
    property IsMultiLevel: Boolean read get_IsMultiLevel;
    ///<summary>
    ///  Gets the collection of list levels for this list.
    ///</summary>
    ///<remarks><p>Use this property to access and modify formatting individual to each level of the list.</p>
    ///</remarks>
    ///<dev>
    ///  RK This might be a bit nasty because it provides access to the terminal list level definitions,
    ///  e.g. it could return the list level definitions from the list style that is referenced by this list.
    ///  So if the user modifies the formatting of a list level he could actually be modifying the list style.
    ///  But let's leave this for now because this property is mostly accessed to actually get the terminal
    ///  formatting of list levels.
    ///</dev>
    property ListLevels: DNListLevelCollection read get_ListLevels;
    ///<summary>
    ///  Specifies whether list should be restarted at each section.
    ///  Default value is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks><p>This option is supported only in RTF, DOC and DOCX document formats.</p>
    ///  <p>This option will be written to DOCX only if <see cref="T:Aspose.Words.Saving.OoxmlCompliance" />
    ///  is higher then <see cref="F:Aspose.Words.Saving.OoxmlCompliance.Ecma376_2006" />
    ///  .</p>
    ///</remarks>
    property IsRestartAtEachSection: Boolean read get_IsRestartAtEachSection write set_IsRestartAtEachSection;
    ///<summary>
    ///  Returns true if this list is a definition of a list style.
    ///</summary>
    ///<remarks><p>When this property is true, the <see cref="P:Aspose.Words.Lists.List.Style" />
    ///  property returns the list style that
    ///  this list defines.</p>
    ///  <p>By modifying properties of a list that defines a list style, you modify the properties
    ///  of the list style.</p>
    ///  <p>A list that is a definition of a list style cannot be applied directly to paragraphs
    ///  to make them numbered.</p>
    ///<seealso cref="P:Aspose.Words.Lists.List.Style" />
    ///<seealso cref="P:Aspose.Words.Lists.List.IsListStyleReference" />
    ///</remarks>
    property IsListStyleDefinition: Boolean read get_IsListStyleDefinition;
    ///<summary>
    ///  Returns true if this list is a reference to a list style.
    ///</summary>
    ///<remarks><p>Note, modifying properties of a list that is a reference to list style has no effect.
    ///  The list formatting specified in the list style itself always takes precedence.</p>
    ///<seealso cref="P:Aspose.Words.Lists.List.Style" />
    ///<seealso cref="P:Aspose.Words.Lists.List.IsListStyleDefinition" />
    ///</remarks>
    property IsListStyleReference: Boolean read get_IsListStyleReference;
    ///<summary>
    ///  Gets the list style that this list references or defines.
    ///</summary>
    ///<remarks><p>If this list is not associated with a list style, the property will return null.</p>
    ///  <p>A list could be a reference to a list style, in this case <see cref="P:Aspose.Words.Lists.List.IsListStyleReference" />
    ///  will be true.</p>
    ///  <p>A list could be a definition of a list style, in this case <see cref="P:Aspose.Words.Lists.List.IsListStyleDefinition" />
    ///  will be true. Such a list cannot be applied to paragraphs in the document directly.</p>
    ///</remarks>
    property Style: DNStyle read get_Style;
  end;

  TDNList = class(TDNGenericImport<DNListClass, DNList>) end;

  //-------------namespace: Aspose.Words.Lists----------------
  DNListCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F4E6E1E2-3F08-55E0-962C-8BA2A72D26A7}']
  end;

  ///<summary>
  ///  Stores and manages formatting of bulleted and numbered lists used in a document.
  ///</summary>
  ///<remarks><p>A list in a Microsoft Word document is a set of list formatting properties.
  ///  The formatting of the lists is stored in the <see cref="T:Aspose.Words.Lists.ListCollection" />
  ///  collection separately
  ///  from the paragraphs of text.</p>
  ///  <p>You do not create objects of this class. There is always only one <see cref="T:Aspose.Words.Lists.ListCollection" />
  ///  object per document and it is accessible via the <see cref="P:Aspose.Words.DocumentBase.Lists" />
  ///  property.</p>
  ///  <p>To create a new list based on a predefined list template or based on a list style,
  ///  use the <see cref="M:Aspose.Words.Lists.ListCollection.Add(Aspose.Words.Style)" />
  ///  method.</p>
  ///  <p>To create a new list with formatting identical to an existing list,
  ///  use the <see cref="M:Aspose.Words.Lists.ListCollection.AddCopy(Aspose.Words.Lists.List)" />
  ///  method.</p>
  ///  <p>To make a paragraph bulleted or numbered, you need to apply list formatting
  ///  to a paragraph by assigning a <see cref="T:Aspose.Words.Lists.List" />
  ///  object to the
  ///<see cref="P:Aspose.Words.Lists.ListFormat.List" />
  ///  property of <see cref="T:Aspose.Words.Lists.ListFormat" />
  ///  .</p>
  ///  <p>To remove list formatting from a paragraph, use the <see cref="M:Aspose.Words.Lists.ListFormat.RemoveNumbers" />
  ///  method.</p>
  ///  <p>If you know a bit about WordprocessingML, then you might know it defines separate concepts
  ///  for "list" and "list definition". This exactly corresponds to how list formatting is stored
  ///  in a Microsoft Word document at the low level. List definition is like a "schema" and
  ///  list is like an instance of a list definition.</p>
  ///  <p>To simplify programming model, Aspose.Words hides the distinction between list and list
  ///  definition in much the same way like Microsoft Word hides this in its user interface.
  ///  This allows you to concentrate more on how you want your document to look like, rather than
  ///  building low-level objects to satisfy requirements of the Microsoft Word file format.</p>
  ///  <p>It is not possible to delete lists once they are created in the current version of Aspose.Words.
  ///  This is similar to Microsoft Word where user does not have explicit control over list definitions.</p>
  ///<seealso cref="T:Aspose.Words.Lists.List" />
  ///<seealso cref="T:Aspose.Words.Lists.ListLevel" />
  ///<seealso cref="T:Aspose.Words.Lists.ListFormat" />
  ///</remarks>
  [DNTypeName('Aspose.Words.Lists.ListCollection')]
  DNListCollection = interface(DDN.mscorlib.DNObject)
  ['{FB03DB48-800F-3337-B98B-03353232E375}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNList;
    function get_Document: DNDocumentBase;

  { methods } 

    ///<summary>
    ///  Gets the enumerator object that will enumerate lists in the document.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNList>;
    ///<overloads>Creates a new list and adds it to the collection of lists in the document.</overloads><summary>
    ///  Creates a new list based on a predefined template and adds it to the collection of lists in the document.
    ///</summary>
    ///  <param name="listTemplate">The template of the list.</param>
    ///<returns>The newly created list.</returns>
    ///<remarks><p>Aspose.Words list templates correspond to the 21 list templates available
    ///  in the Bullets and Numbering dialog box in Microsoft Word 2003.</p>
    ///  <p>All lists created using this method have 9 list levels.</p>
    ///</remarks>
    function Add(listTemplate: DNListTemplate): DNList; overload;
    ///<summary>
    ///  Creates a new list that references a list style and adds it to the collection of lists in the document.
    ///</summary>
    ///  <param name="listStyle">The list style.</param>
    ///<returns>The newly created list.</returns>
    ///<remarks><p>The newly created list references the list style. If you change the properties of the list
    ///  style, it is reflected in the properties of the list. Vice versa, if you change the properties
    ///  of the list, it is reflected in the properties of the list style.</p>
    ///</remarks>
    function Add(listStyle: DNStyle): DNList; overload;
    ///<summary>
    ///  Creates a new list by copying the specified list and adding it to the collection of lists in the document.
    ///</summary>
    ///  <param name="srcList">The source list to copy from.</param>
    ///<returns>The newly created list.</returns>
    ///<remarks><p>The source list can be from any document. If the source list belongs to a different document,
    ///  a copy of the list is created and added to the current document.</p>
    ///  <p>If the source list is a reference to or a definition of a list style,
    ///  the newly created list is not related to the original list style.</p>
    ///</remarks>
    function AddCopy(srcList: DNList): DNList;
    ///<summary>
    ///  Gets a list by a list identifier.
    ///</summary>
    ///  <param name="listId">The list identifier.</param>
    ///<returns>Returns the list object. Returns null if a list with the specified identifier was not found.</returns>
    ///<remarks><p>You don't normally need to use this method. Most of the time you apply list formatting
    ///  to paragraphs just by settings the <see cref="P:Aspose.Words.Lists.ListFormat.List" />
    ///  property
    ///  of the <see cref="T:Aspose.Words.Lists.ListFormat" />
    ///  object.</p>
    ///</remarks>
    function GetListByListId(listId: Int32): DNList;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the count of numbered and bulleted lists in the document.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNList read get_Item; default;
    ///<summary>
    ///  Gets the owner document.
    ///</summary>
    property Document: DNDocumentBase read get_Document;
  end;

  TDNListCollection = class(TDNGenericImport<DNListCollectionClass, DNListCollection>) end;

  //-------------namespace: Aspose.Words.Lists----------------
  DNListFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7EA03F05-90D4-56E7-B23C-4F39C6DFFF02}']
  end;

  ///<summary>
  ///  Allows to control what list formatting is applied to a paragraph.
  ///</summary>
  ///<remarks><p>A paragraph in a Microsoft Word document can be bulleted or numbered.
  ///  When a paragraph is bulleted or numbered, it is said that list formatting
  ///  is applied to the paragraph.</p>
  ///  <p>You do not create objects of the <see cref="T:Aspose.Words.Lists.ListFormat" />
  ///  class directly.
  ///  You access <see cref="T:Aspose.Words.Lists.ListFormat" />
  ///  as a property of another object that can
  ///  have list formatting associated with it. At the moment the objects that can
  ///  have list formatting are: <see cref="T:Aspose.Words.Paragraph" />
  ///  ,
  ///<see cref="T:Aspose.Words.Style" />
  ///  and <see cref="T:Aspose.Words.DocumentBuilder" />
  ///  .</p>
  ///  <p><see cref="T:Aspose.Words.Lists.ListFormat" />
  ///  of a <see cref="T:Aspose.Words.Paragraph" />
  ///  specifies
  ///  what list formatting and list level is applied to that particular paragraph.</p>
  ///  <p><see cref="T:Aspose.Words.Lists.ListFormat" />
  ///  of a <see cref="T:Aspose.Words.Style" />
  ///  (applicable
  ///  to paragraph styles only) allows to specify what list formatting and list level
  ///  is applied to all paragraphs of that particular style.</p>
  ///  <p><see cref="T:Aspose.Words.Lists.ListFormat" />
  ///  of a <see cref="T:Aspose.Words.DocumentBuilder" />
  ///  provides access to the list formatting at the current cursor position
  ///  inside the <see cref="T:Aspose.Words.DocumentBuilder" />
  ///  .</p>
  ///  <p>The list formatting itself is stored inside a <see cref="T:Aspose.Words.Lists.List" />
  ///  object that is stored separately from the paragraphs. The list objects
  ///  are stored inside a <see cref="T:Aspose.Words.Lists.ListCollection" />
  ///  collection. There is a single
  ///<see cref="T:Aspose.Words.Lists.ListCollection" />
  ///  collection per <see cref="T:Aspose.Words.Document" />
  ///  .</p>
  ///  <p>The paragraphs do not physically belong to a list. The paragraphs just
  ///  reference a particular list object via the <see cref="P:Aspose.Words.Lists.ListFormat.List" />
  ///  property
  ///  and a particular level in the list via the <see cref="P:Aspose.Words.Lists.ListFormat.ListLevelNumber" />
  ///  property.
  ///  By setting these two properties you control what bullets and numbering is
  ///  applied to a paragraph.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.Lists.ListFormat')]
  DNListFormat = interface(DDN.mscorlib.DNObject)
  ['{9ECD5C6A-9A39-3A90-8F35-16A40216DAEF}']
  { getters & setters } 

    function get_ListLevelNumber: Int32;
    procedure set_ListLevelNumber(value: Int32);
    function get_IsListItem: Boolean;
    function get_List: DNList;
    procedure set_List(value: DNList);
    function get_ListLevel: DNListLevel;

  { methods } 

    ///<summary>
    ///  Starts a new default bulleted list and applies it to the paragraph.
    ///</summary>
    ///<remarks><p>This is a shortcut method that creates a new list using the default bulleted
    ///  template, applies it to the paragraph and selects the 1st list level.</p>
    ///<seealso cref="P:Aspose.Words.Lists.ListFormat.List" />
    ///<seealso cref="M:Aspose.Words.Lists.ListFormat.RemoveNumbers" />
    ///<seealso cref="P:Aspose.Words.Lists.ListFormat.ListLevelNumber" />
    ///</remarks>
    procedure ApplyBulletDefault;
    ///<summary>
    ///  Starts a new default numbered list and applies it to the paragraph.
    ///</summary>
    ///<remarks><p>This is a shortcut method that creates a new list using the default numbered
    ///  template, applies it to the paragraph and selects the 1st list level.</p>
    ///<seealso cref="P:Aspose.Words.Lists.ListFormat.List" />
    ///<seealso cref="M:Aspose.Words.Lists.ListFormat.RemoveNumbers" />
    ///<seealso cref="P:Aspose.Words.Lists.ListFormat.ListLevelNumber" />
    ///</remarks>
    procedure ApplyNumberDefault;
    ///<summary>
    ///  Removes numbers or bullets from the current paragraph and sets list level to zero.
    ///</summary>
    ///<remarks><p>Calling this method is equivalent to setting the <see cref="P:Aspose.Words.Lists.ListFormat.List" />
    ///  property to null.</p>
    ///</remarks>
    procedure RemoveNumbers;
    ///<summary>
    ///  Increases the list level of the current paragraph by one level.
    ///</summary>
    ///<remarks><p>This method changes the list level and applies formatting properties of the new level.</p>
    ///  <p>In Word documents, lists may consist of up to nine levels. List formatting
    ///  for each level specifies what bullet or number is used, left indent, space between
    ///  the bullet and text etc.</p>
    ///</remarks>
    procedure ListIndent;
    ///<summary>
    ///  Decreases the list level of the current paragraph by one level.
    ///</summary>
    ///<remarks><p>This method changes the list level and applies formatting properties of the new level.</p>
    ///  <p>In Word documents, lists may consist of up to nine levels. List formatting
    ///  for each level specifies what bullet or number is used, left indent, space between
    ///  the bullet and text etc.</p>
    ///</remarks>
    procedure ListOutdent;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the list level number (0 to 8) for the paragraph.
    ///</summary>
    ///<remarks><p>In Word documents, lists may consist of 1 or 9 levels, numbered 0 to 8.</p>
    ///  <p>Has effect only when the <see cref="P:Aspose.Words.Lists.ListFormat.List" />
    ///  property is set to reference a valid list.</p>
    ///<seealso cref="P:Aspose.Words.Lists.ListFormat.List" />
    ///</remarks>
    property ListLevelNumber: Int32 read get_ListLevelNumber write set_ListLevelNumber;
    ///<summary>
    ///  True when the paragraph has bulleted or numbered formatting applied to it.
    ///</summary>
    property IsListItem: Boolean read get_IsListItem;
    ///<summary>
    ///  Gets or sets the list this paragraph is a member of.
    ///</summary>
    ///<remarks><p>The list that is being assigned to this property must belong to the current document.</p>
    ///  <p>The list that is being assigned to this property must not be a list style definition.</p>
    ///  <p>Setting this property to null removes bullets and numbering from the paragraph
    ///  and sets the list level number to zero. Setting this property to null is equivalent
    ///  to calling <see cref="M:Aspose.Words.Lists.ListFormat.RemoveNumbers" />
    ///  .</p>
    ///<seealso cref="P:Aspose.Words.Lists.ListFormat.ListLevelNumber" />
    ///<seealso cref="M:Aspose.Words.Lists.ListFormat.RemoveNumbers" />
    ///</remarks>
    property List: DNList read get_List write set_List;
    ///<summary>
    ///  Returns the list level formatting plus any formatting overrides applied to the current paragraph.
    ///</summary>
    property ListLevel: DNListLevel read get_ListLevel;
  end;

  TDNListFormat = class(TDNGenericImport<DNListFormatClass, DNListFormat>) end;

  //-------------namespace: Aspose.Words.Lists----------------
  DNListLabelClass = interface(DDN.mscorlib.DNObjectClass)
  ['{ADA2A7EF-AFBE-51B2-B499-9A45A98ABBE1}']
  end;

  ///<summary>
  ///  Defines properties specific to a list label.
  ///</summary>
  ///<dev><para>Implements <see cref="T:Aspose.Words.IRunAttrSource" />
  ///  interface treating list level direct formatting
  ///  as direct run attributes since they take priority over the other sources.</para><para><see cref="T:Aspose.Words.Lists.ListLabel" />
  ///  contains the most common textual representation of the list label
  ///  in its <see cref="P:Aspose.Words.Lists.ListLabel.LabelString" />
  ///  property.</para><para>There are some classes which need different textual representation of list labels. Use
  ///<see cref="T:Aspose.Words.Lists.ListLabel" />
  ///  's property <see cref="P:Aspose.Words.Lists.ListLabel.NumberState" />
  ///  which introduced to provide enough information
  ///  to build custom labels from the inside of such classes.</para><para>Both <see cref="P:Aspose.Words.Lists.ListLabel.LabelString" />
  ///  and <see cref="P:Aspose.Words.Lists.ListLabel.NumberState" />
  ///  are updated
  ///  by <see cref="M:Aspose.Words.Document.UpdateListLabels" />
  ///  .</para></dev>
  [DNTypeName('Aspose.Words.Lists.ListLabel')]
  DNListLabel = interface(DDN.mscorlib.DNObject)
  ['{140FC719-802A-396F-B8E4-AA7490BA7FF8}']
  { getters & setters } 

    function get_Font: DNFont;
    function get_LabelString: string;
    function get_LabelValue: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the list label font.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Gets a string representation of list label.
    ///</summary>
    property LabelString: string read get_LabelString;
    ///<summary>
    ///  Gets a numeric value for this label.
    ///</summary>
    ///<remarks>
    ///  Use the <see cref="M:Aspose.Words.Document.UpdateListLabels" />
    ///  method to update the value of this property.
    ///</remarks>
    property LabelValue: Int32 read get_LabelValue;
  end;

  TDNListLabel = class(TDNGenericImport<DNListLabelClass, DNListLabel>) end;

  //-------------namespace: Aspose.Words.Lists----------------
  DNListLevelClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AC80F624-AE5C-524D-B925-7ADCA323FEA0}']
  end;

  ///<summary>
  ///  Defines formatting for a list level.
  ///</summary>
  ///<remarks><p>You do not create objects of this class. List level objects are created automatically
  ///  when a list is created. You access <see cref="T:Aspose.Words.Lists.ListLevel" />
  ///  objects via the
  ///<see cref="T:Aspose.Words.Lists.ListLevelCollection" />
  ///  collection.</p>
  ///  <p>Use the properties of <see cref="T:Aspose.Words.Lists.ListLevel" />
  ///  to specify list formatting
  ///  for individual list levels.</p>
  ///</remarks>
  ///<dev>
  ///  Not sure where lvlElt.tplc is stored in the DOC file.
  ///  Sounds like it is a template code for individual list levels.
  ///  VA: All tplc are stored in a separate table in a document.
  ///  They can be seen in binary going one after another.
  ///  Not sure how to locate them in the document structure though.
  ///</dev>
  [DNTypeName('Aspose.Words.Lists.ListLevel')]
  DNListLevel = interface(DDN.mscorlib.DNObject)
  ['{826BCEFA-0A0B-3160-965C-C2553AEDCAD2}']
  { getters & setters } 

    function get_StartAt: Int32;
    procedure set_StartAt(value: Int32);
    function get_NumberStyle: DNNumberStyle;
    procedure set_NumberStyle(value: DNNumberStyle);
    function get_NumberFormat: string;
    procedure set_NumberFormat(value: string);
    function get_Alignment: DNListLevelAlignment;
    procedure set_Alignment(value: DNListLevelAlignment);
    function get_IsLegal: Boolean;
    procedure set_IsLegal(value: Boolean);
    function get_RestartAfterLevel: Int32;
    procedure set_RestartAfterLevel(value: Int32);
    function get_TrailingCharacter: DNListTrailingCharacter;
    procedure set_TrailingCharacter(value: DNListTrailingCharacter);
    function get_Font: DNFont;
    function get_TabPosition: Double;
    procedure set_TabPosition(value: Double);
    function get_NumberPosition: Double;
    procedure set_NumberPosition(value: Double);
    function get_TextPosition: Double;
    procedure set_TextPosition(value: Double);
    function get_LinkedStyle: DNStyle;
    procedure set_LinkedStyle(value: DNStyle);
    function get_ImageData: DNImageData;

  { methods } 

    ///<summary>
    ///  Creates picture bullet shape for the current list level.
    ///</summary>
    ///<remarks>Please note, NumberStyle will be set to Bullet and
    ///  NumberFormat to "\xF0B7" to properly display picture bullet.
    ///  Red cross image will be set as picture bullet image upon creating.
    ///  To change it please use <see cref="P:Aspose.Words.Lists.ListLevel.ImageData" />
    ///  .</remarks>
    procedure CreatePictureBullet;
    ///<summary>
    ///  Deletes picture bullet for the current list level.
    ///</summary>
    ///<remarks>Default bullet will be shown after deleting.</remarks>
    procedure DeletePictureBullet;
    ///<summary>
    ///  Compares with the specified ListLevel.
    ///</summary>
    function Equals(level: DNListLevel): Boolean; overload;
    ///<summary>
    ///  Calculates hash code for this object.
    ///</summary>
    ///<dev>
    ///  To be compatible with the <see cref="M:Aspose.Words.Lists.ListLevel.Equals(Aspose.Words.Lists.ListLevel)" />
    ///  method, only properties that affect visual
    ///  representation of the list are included into the calculation. Object ID and similar properties should
    ///  be ignored.
    ///</dev>
    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the starting number for this list level.
    ///</summary>
    ///<remarks><p>Default value is 1.</p>
    ///</remarks>
    property StartAt: Int32 read get_StartAt write set_StartAt;
    ///<summary>
    ///  Returns or sets the number style for this list level.
    ///</summary>
    property NumberStyle: DNNumberStyle read get_NumberStyle write set_NumberStyle;
    ///<summary>
    ///  Returns or sets the number format for the list level.
    ///</summary>
    ///<remarks><p>Among normal text characters, the string can contain placeholder characters \x0000 to \x0008
    ///  representing the numbers from the corresponding list levels.</p>
    ///  <p>For example, the string "\x0000.\x0001)" will generate a list label
    ///  that looks something like "1.5)". The number "1" is the current number from
    ///  the 1st list level, the number "5" is the current number from the 2nd list level.</p>
    ///  <p>Null is not allowed, but an empty string meaning no number is valid.</p>
    ///</remarks>
    property NumberFormat: string read get_NumberFormat write set_NumberFormat;
    ///<summary>
    ///  Gets or sets the justification of the actual number of the list item.
    ///</summary>
    ///<remarks><p>The list label is justified relative to the <see cref="P:Aspose.Words.Lists.ListLevel.NumberPosition" />
    ///  property.</p>
    ///</remarks>
    property Alignment: DNListLevelAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  True if the level turns all inherited numbers to Arabic, false if it preserves their number style.
    ///</summary>
    property IsLegal: Boolean read get_IsLegal write set_IsLegal;
    ///<summary>
    ///  Sets or returns the list level that must appear before the specified list level restarts numbering.
    ///</summary>
    ///<remarks><para>The value of -1 means the numbering will continue.</para></remarks>
    property RestartAfterLevel: Int32 read get_RestartAfterLevel write set_RestartAfterLevel;
    ///<summary>
    ///  Returns or sets the character inserted after the number for the list level.
    ///</summary>
    property TrailingCharacter: DNListTrailingCharacter read get_TrailingCharacter write set_TrailingCharacter;
    ///<summary>
    ///  Specifies character formatting used for the list label.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Returns or sets the tab position (in points) for the list level.
    ///</summary>
    ///<remarks><p>Has effect only when <see cref="P:Aspose.Words.Lists.ListLevel.TrailingCharacter" />
    ///  is a tab.</p>
    ///<seealso cref="P:Aspose.Words.Lists.ListLevel.NumberPosition" />
    ///<seealso cref="P:Aspose.Words.Lists.ListLevel.TextPosition" />
    ///</remarks>
    property TabPosition: Double read get_TabPosition write set_TabPosition;
    ///<summary>
    ///  Returns or sets the position (in points) of the number or bullet for the list level.
    ///</summary>
    ///<remarks><p><see cref="P:Aspose.Words.Lists.ListLevel.NumberPosition" />
    ///  corresponds to LeftIndent plus FirstLineIndent of the paragraph.</p>
    ///<seealso cref="P:Aspose.Words.Lists.ListLevel.TextPosition" />
    ///<seealso cref="P:Aspose.Words.Lists.ListLevel.TabPosition" />
    ///</remarks>
    property NumberPosition: Double read get_NumberPosition write set_NumberPosition;
    ///<summary>
    ///  Returns or sets the position (in points) for the second line of wrapping text for the list level.
    ///</summary>
    ///<remarks><p><see cref="P:Aspose.Words.Lists.ListLevel.TextPosition" />
    ///  corresponds to LeftIndent of the paragraph.</p>
    ///<seealso cref="P:Aspose.Words.Lists.ListLevel.NumberPosition" />
    ///<seealso cref="P:Aspose.Words.Lists.ListLevel.TabPosition" />
    ///</remarks>
    property TextPosition: Double read get_TextPosition write set_TextPosition;
    ///<summary>
    ///  Gets or sets the paragraph style that is linked to this list level.
    ///</summary>
    ///<remarks><p>This property is null when the list level is not linked to a paragraph style.
    ///  This property can be set to null.</p>
    ///</remarks>
    property LinkedStyle: DNStyle read get_LinkedStyle write set_LinkedStyle;
    ///<summary>
    ///  Returns image data of the picture bullet shape for the current list level.
    ///</summary>
    ///<remarks>
    ///  If this level doesn't define picture bullet returns null.
    ///  Before setting new image for non picture bullet shape, please use <see cref="M:Aspose.Words.Lists.ListLevel.CreatePictureBullet" />
    ///  method first.
    ///</remarks>
    property ImageData: DNImageData read get_ImageData;
  end;

  TDNListLevel = class(TDNGenericImport<DNListLevelClass, DNListLevel>) end;

  //-------------namespace: Aspose.Words.Lists----------------
  DNListLevelCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E7BE9CC2-111A-5465-BFAB-ABBDF27C71C3}']
  end;

  ///<summary>
  ///  A collection of list formatting for each level in a list.
  ///</summary>
  [DNTypeName('Aspose.Words.Lists.ListLevelCollection')]
  DNListLevelCollection = interface(DDN.mscorlib.DNObject)
  ['{F7755F05-808E-31CC-B0FF-42D824BBD59C}']
  { getters & setters } 

    function get_Item(index: Int32): DNListLevel;
    procedure set_Item(index: Int32; value: DNListLevel);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Gets the enumerator object that will enumerate levels in this list.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNListLevel>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNListLevel read get_Item write set_Item; default;
    ///<summary>
    ///  Gets the number of levels in this list.
    ///</summary>
    ///<remarks><p>There could be 1 or 9 levels in a list.</p>
    ///</remarks>
    property Count: Int32 read get_Count;
  end;

  TDNListLevelCollection = class(TDNGenericImport<DNListLevelCollectionClass, DNListLevelCollection>) end;

  //-------------namespace: Aspose.Words.Loading----------------
  ///<summary>
  ///  Implement this interface if you want to control how Aspose.Words loads external resource when
  ///  importing a document and inserting images using <see cref="T:Aspose.Words.DocumentBuilder" />
  ///  .
  ///</summary>
  [DNTypeName('Aspose.Words.Loading.IResourceLoadingCallback')]
  DNIResourceLoadingCallback = interface(DDN.mscorlib.DNObject)
  ['{A2546162-6B9C-3605-9724-A653468CF0EC}']
  { methods } 

    ///<summary>
    ///  Called when Aspose.Words loads any external resource.
    ///</summary>
    function ResourceLoading(args: DNResourceLoadingArgs): DNResourceLoadingAction;

  end;

  //-------------namespace: Aspose.Words.Loading----------------
  DNLanguagePreferencesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A2A2779F-16C0-52FD-970A-338C497433BB}']
  { constructors } 

    {class} function init: DNLanguagePreferences;

  end;

  ///<summary>
  ///  Allows to set up language preferences.
  ///</summary>
  ///<remarks>
  ///  Implements 'Set the Office Language Preferences' dialog in Word.
  ///</remarks>
  [DNTypeName('Aspose.Words.Loading.LanguagePreferences')]
  DNLanguagePreferences = interface(DDN.mscorlib.DNObject)
  ['{75F43710-65F6-30C8-BEB6-4A2ABBA9D482}']
  { getters & setters } 

    function get_DefaultEditingLanguage: DNEditingLanguage;
    procedure set_DefaultEditingLanguage(value: DNEditingLanguage);

  { methods } 

    ///<summary>
    ///  Adds additional editing language.
    ///</summary>
    procedure AddEditingLanguage(language: DNEditingLanguage);
    ///<summary>
    ///  Adds additional editing languages.
    ///</summary>
    procedure AddEditingLanguages(languages: TArray<DNEditingLanguage>);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary><para>Gets or sets default editing language.</para><para>The default value is <see cref="F:Aspose.Words.Loading.EditingLanguage.EnglishUS" />
    ///  .</para></summary>
    property DefaultEditingLanguage: DNEditingLanguage read get_DefaultEditingLanguage write set_DefaultEditingLanguage;
  end;

  TDNLanguagePreferences = class(TDNGenericImport<DNLanguagePreferencesClass, DNLanguagePreferences>) end;

  //-------------namespace: Aspose.Words.Loading----------------
  DNLoadOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FB880FDD-1499-59CC-AD38-6C4B7A1F87A0}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class with default values.
    ///</summary>
    {class} function init: DNLoadOptions; overload;
    ///<summary>
    ///  A shortcut to initialize a new instance of this class with the specified password to load an encrypted document.
    ///</summary>
    ///  <param name="password">The password to open an encrypted document. Can be null or empty string.</param>
    {class} function init(password: string): DNLoadOptions; overload;
    ///<summary>
    ///  A shortcut to initialize a new instance of this class with properties set to the specified values.
    ///</summary>
    ///  <param name="loadFormat">The format of the document to be loaded.</param>
    ///  <param name="password">The password to open an encrypted document. Can be null or empty string.</param>
    ///  <param name="baseUri">The string that will be used to resolve relative URIs to absolute. Can be null or empty string.</param>
    {class} function init(loadFormat: DNLoadFormat; password: string; baseUri: string): DNLoadOptions; overload;

  end;

  ///<summary>
  ///  Allows to specify additional options (such as password or base URI) when
  ///  loading a document into a <see cref="T:Aspose.Words.Document" />
  ///  object.
  ///</summary>
  [DNTypeName('Aspose.Words.Loading.LoadOptions')]
  DNLoadOptions = interface(DDN.mscorlib.DNObject)
  ['{DF12D757-F0AE-35F5-B5B2-4AC956069410}']
  { getters & setters } 

    function get_LoadFormat: DNLoadFormat;
    procedure set_LoadFormat(value: DNLoadFormat);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_BaseUri: string;
    procedure set_BaseUri(value: string);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_ResourceLoadingCallback: DNIResourceLoadingCallback;
    procedure set_ResourceLoadingCallback(value: DNIResourceLoadingCallback);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_PreserveIncludePictureField: Boolean;
    procedure set_PreserveIncludePictureField(value: Boolean);
    function get_ConvertShapeToOfficeMath: Boolean;
    procedure set_ConvertShapeToOfficeMath(value: Boolean);
    function get_FontSettings: DNFontSettings;
    procedure set_FontSettings(value: DNFontSettings);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_ConvertMetafilesToPng: Boolean;
    procedure set_ConvertMetafilesToPng(value: Boolean);
    function get_MswVersion: DNMsWordVersion;
    procedure set_MswVersion(value: DNMsWordVersion);
    function get_UpdateDirtyFields: Boolean;
    procedure set_UpdateDirtyFields(value: Boolean);
    function get_LanguagePreferences: DNLanguagePreferences;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the format of the document to be loaded.
    ///  Default is <see cref="F:Aspose.Words.LoadFormat.Auto" />
    ///  .
    ///</summary>
    ///<remarks><para>It is recommended that you specify the <see cref="F:Aspose.Words.LoadFormat.Auto" />
    ///  value and let Aspose.Words detect
    ///  the file format automatically. If you know the format of the document you are about to load, you can specify the format
    ///  explicitly and this will slightly reduce the loading time by the overhead associated with auto detecting the format.
    ///  If you specify an explicit load format and it will turn out to be wrong, the auto detection will be invoked and a second
    ///  attempt to load the file will be made.</para></remarks>
    property LoadFormat: DNLoadFormat read get_LoadFormat write set_LoadFormat;
    ///<summary>
    ///  Gets or sets the password for opening an encrypted document.
    ///  Can be null or empty string. Default is null.
    ///</summary>
    ///<remarks><para>You need to know the password to open an encrypted document. If the document is not encrypted, set this to null or empty string.</para></remarks>
    property Password: string read get_Password write set_Password;
    ///<summary>
    ///  Gets or sets the string that will be used to resolve relative URIs found in the document into absolute URIs when required.
    ///  Can be null or empty string. Default is null.
    ///</summary>
    ///<remarks><p>This property is used to resolve relative URIs into absolute in the following cases:</p>
    ///<list type="number"><item>When loading an HTML document from a stream and the document contains images with
    ///  relative URIs and does not have a base URI specified in the BASE HTML element.</item>
    ///<item>When saving a document to PDF and other formats, to retrieve images linked using relative URIs
    ///  so the images can be saved into the output document.</item>
    ///</list>
    ///</remarks>
    property BaseUri: string read get_BaseUri write set_BaseUri;
    ///<summary>
    ///  Gets or sets the encoding that will be used to load an HTML, TXT, or CHM document if the encoding is not specified
    ///  inside the document.
    ///  Can be null. Default is null.
    ///</summary>
    ///<remarks><para>This property is used only when loading HTML, TXT, or CHM documents.</para><para>If encoding is not specified inside the document and this property is <c>null</c>, then the system will try to
    ///  automatically detect the encoding.</para></remarks>
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    ///<summary>
    ///  Allows to control how external resources (images, style sheets) are loaded when a document is imported from HTML, MHTML.
    ///</summary>
    property ResourceLoadingCallback: DNIResourceLoadingCallback read get_ResourceLoadingCallback write set_ResourceLoadingCallback;
    ///<summary>
    ///  Called during a load operation, when an issue is detected that might result in data or formatting fidelity loss.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Gets or sets whether to preserve the INCLUDEPICTURE field when reading Microsoft Word formats.
    ///  The default value is false.
    ///</summary>
    ///<remarks><p>By default, the INCLUDEPICTURE field is converted into a shape object. You can override that if you need
    ///  the field to be preserved, for example, if you wish to update it programmatically. Note however that this
    ///  approach is not common for Aspose.Words. Use it on your own risk.</p>
    ///  <p>One of the possible use cases may be using a MERGEFIELD as a child field to dynamically change the source path
    ///  of the picture. In this case you need the INCLUDEPICTURE to be preserved in the model.</p>
    ///</remarks>
    property PreserveIncludePictureField: Boolean read get_PreserveIncludePictureField write set_PreserveIncludePictureField;
    ///<summary>
    ///  Gets or sets whether to convert shapes with EquationXML to Office Math objects.
    ///</summary>
    property ConvertShapeToOfficeMath: Boolean read get_ConvertShapeToOfficeMath write set_ConvertShapeToOfficeMath;
    ///<summary>
    ///  Allows to specify document font settings.
    ///</summary>
    ///<remarks><para>When loading some formats, Aspose.Words may require to resolve the fonts. For example, when loading HTML documents Aspose.Words
    ///  may resolve the fonts to perform font fallback.</para><para>If set to null, default static font settings <see cref="P:Aspose.Words.Fonts.FontSettings.DefaultInstance" />
    ///  will be used.</para><para>The default value is null.</para></remarks>
    property FontSettings: DNFontSettings read get_FontSettings write set_FontSettings;
    ///<summary>
    ///  Allows to use temporary files when reading document.
    ///  By default this property is <c>null</c> and no temporary files are used.
    ///</summary>
    ///<remarks><para>The folder must exist and be writable, otherwise an exception will be thrown.</para><para>Aspose.Words automatically deletes all temporary files when reading is complete.</para></remarks>
    property TempFolder: string read get_TempFolder write set_TempFolder;
    ///<summary>
    ///  Gets or sets whether to convert metafile (<see cref="F:Aspose.FileFormat.Wmf" />
    ///  or <see cref="F:Aspose.FileFormat.Emf" />
    ///  ) images to <see cref="F:Aspose.FileFormat.Png" />
    ///  image format.
    ///</summary>
    ///<remarks>
    ///  Metafiles (<see cref="F:Aspose.FileFormat.Wmf" />
    ///  or <see cref="F:Aspose.FileFormat.Emf" />
    ///  ) is an uncompressed image format and sometimes requires to much RAM to hold and process document.
    ///  This option allows to convert all metafile images to <see cref="F:Aspose.FileFormat.Png" />
    ///  on document loading.
    ///  Please note - conversion vector graphics to raster decreases quality of the images.
    ///</remarks>
    property ConvertMetafilesToPng: Boolean read get_ConvertMetafilesToPng write set_ConvertMetafilesToPng;
    ///<summary>
    ///  Allows to specify that the document loading process should match a specific MS Word version.
    ///  Default value is <see cref="F:Aspose.Words.Settings.MsWordVersion.Word2007" />
    ///</summary>
    ///<remarks>
    ///  Different Word versions may handle certain aspects of document content and formatting slightly differently
    ///  during the loading process, which may result in minor differences in Document Object Model.
    ///</remarks>
    property MswVersion: DNMsWordVersion read get_MswVersion write set_MswVersion;
    ///<summary>
    ///  Specifies whether to update the fields with the <c>dirty</c> attribute.
    ///</summary>
    property UpdateDirtyFields: Boolean read get_UpdateDirtyFields write set_UpdateDirtyFields;
    ///<summary>
    ///  Gets language preferences that will be used when document is loading.
    ///</summary>
    property LanguagePreferences: DNLanguagePreferences read get_LanguagePreferences;
  end;

  TDNLoadOptions = class(TDNGenericImport<DNLoadOptionsClass, DNLoadOptions>) end;

  //-------------namespace: Aspose.Words.Loading----------------
  DNHtmlLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{FCAC1B2A-8E60-5E54-B72A-9AE77D228252}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class with default values.
    ///</summary>
    {class} function init: DNHtmlLoadOptions; overload;
    ///<summary>
    ///  A shortcut to initialize a new instance of this class with the specified password to load an encrypted document.
    ///</summary>
    ///  <param name="password">The password to open an encrypted document. Can be null or empty string.</param>
    {class} function init(password: string): DNHtmlLoadOptions; overload;
    ///<summary>
    ///  A shortcut to initialize a new instance of this class with properties set to the specified values.
    ///</summary>
    ///  <param name="loadFormat">The format of the document to be loaded.</param>
    ///  <param name="password">The password to open an encrypted document. Can be null or empty string.</param>
    ///  <param name="baseUri">The string that will be used to resolve relative URIs to absolute. Can be null or empty string.</param>
    {class} function init(loadFormat: DNLoadFormat; password: string; baseUri: string): DNHtmlLoadOptions; overload;

  end;

  ///<summary>
  ///  Allows to specify additional options when loading HTML document into a <see cref="T:Aspose.Words.Document" />
  ///  object.
  ///</summary>
  [DNTypeName('Aspose.Words.Loading.HtmlLoadOptions')]
  DNHtmlLoadOptions = interface(DNLoadOptions)
  ['{5888FA3B-CDF6-3C22-9FA1-F30639F64A93}']
  { getters & setters } 

    function get_SupportVml: Boolean;
    procedure set_SupportVml(value: Boolean);
    function get_WebRequestTimeout: Int32;
    procedure set_WebRequestTimeout(value: Int32);
    function get_PreferredControlType: DNHtmlControlType;
    procedure set_PreferredControlType(value: DNHtmlControlType);
    function get_IgnoreNoscriptElements: Boolean;
    procedure set_IgnoreNoscriptElements(value: Boolean);
    function get_LoadFormat: DNLoadFormat;
    procedure set_LoadFormat(value: DNLoadFormat);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_BaseUri: string;
    procedure set_BaseUri(value: string);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_ResourceLoadingCallback: DNIResourceLoadingCallback;
    procedure set_ResourceLoadingCallback(value: DNIResourceLoadingCallback);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_PreserveIncludePictureField: Boolean;
    procedure set_PreserveIncludePictureField(value: Boolean);
    function get_ConvertShapeToOfficeMath: Boolean;
    procedure set_ConvertShapeToOfficeMath(value: Boolean);
    function get_FontSettings: DNFontSettings;
    procedure set_FontSettings(value: DNFontSettings);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_ConvertMetafilesToPng: Boolean;
    procedure set_ConvertMetafilesToPng(value: Boolean);
    function get_MswVersion: DNMsWordVersion;
    procedure set_MswVersion(value: DNMsWordVersion);
    function get_UpdateDirtyFields: Boolean;
    procedure set_UpdateDirtyFields(value: Boolean);
    function get_LanguagePreferences: DNLanguagePreferences;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a value indicating whether to support VML images.
    ///</summary>
    property SupportVml: Boolean read get_SupportVml write set_SupportVml;
    ///<summary>
    ///  The number of milliseconds to wait before the web request times out. The default value is 100000 milliseconds
    ///  (100 seconds).
    ///</summary>
    ///<remarks>
    ///  The number of milliseconds that Aspose.Words waits for a response, when loading external resources (images, style
    ///  sheets) linked in HTML and MHTML documents.
    ///</remarks>
    property WebRequestTimeout: Int32 read get_WebRequestTimeout write set_WebRequestTimeout;
    ///<summary>
    ///  Gets or sets preferred type of document nodes that will represent imported &lt;input&gt; and &lt;select&gt; elements.
    ///  Default value is <see cref="F:Aspose.Words.Loading.HtmlControlType.FormField" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Please note that setting this property does not guarantee that all imported controls will be of the specified type.
    ///  If an HTML control is not representable with document nodes of the preferred type, Aspose.Words will use
    ///  a compatible <see cref="T:Aspose.Words.Loading.HtmlControlType" />
    ///  for that control.
    ///</remarks>
    property PreferredControlType: DNHtmlControlType read get_PreferredControlType write set_PreferredControlType;
    ///<summary>
    ///  Gets or sets a value indicating whether to ignore &lt;noscript&gt; HTML elements.
    ///  Default value is <c>false</c>.
    ///</summary>
    ///<remarks>
    ///  Like MS Word, Aspose.Words does not support scripts and by default loads content of &lt;noscript&gt; elements
    ///  into the resulting document. In most browsers, however, scripts are supported and content from &lt;noscript&gt;
    ///  is not visible. Setting this property to <c>true</c> forces Aspose.Words to ignore all &lt;noscript&gt; elements
    ///  and helps to produce documents that look closer to what is seen in browsers.
    ///</remarks>
    property IgnoreNoscriptElements: Boolean read get_IgnoreNoscriptElements write set_IgnoreNoscriptElements;
    ///<summary>
    ///  Specifies the format of the document to be loaded.
    ///  Default is <see cref="F:Aspose.Words.LoadFormat.Auto" />
    ///  .
    ///</summary>
    ///<remarks><para>It is recommended that you specify the <see cref="F:Aspose.Words.LoadFormat.Auto" />
    ///  value and let Aspose.Words detect
    ///  the file format automatically. If you know the format of the document you are about to load, you can specify the format
    ///  explicitly and this will slightly reduce the loading time by the overhead associated with auto detecting the format.
    ///  If you specify an explicit load format and it will turn out to be wrong, the auto detection will be invoked and a second
    ///  attempt to load the file will be made.</para></remarks>
    property LoadFormat: DNLoadFormat read get_LoadFormat write set_LoadFormat;
    ///<summary>
    ///  Gets or sets the password for opening an encrypted document.
    ///  Can be null or empty string. Default is null.
    ///</summary>
    ///<remarks><para>You need to know the password to open an encrypted document. If the document is not encrypted, set this to null or empty string.</para></remarks>
    property Password: string read get_Password write set_Password;
    ///<summary>
    ///  Gets or sets the string that will be used to resolve relative URIs found in the document into absolute URIs when required.
    ///  Can be null or empty string. Default is null.
    ///</summary>
    ///<remarks><p>This property is used to resolve relative URIs into absolute in the following cases:</p>
    ///<list type="number"><item>When loading an HTML document from a stream and the document contains images with
    ///  relative URIs and does not have a base URI specified in the BASE HTML element.</item>
    ///<item>When saving a document to PDF and other formats, to retrieve images linked using relative URIs
    ///  so the images can be saved into the output document.</item>
    ///</list>
    ///</remarks>
    property BaseUri: string read get_BaseUri write set_BaseUri;
    ///<summary>
    ///  Gets or sets the encoding that will be used to load an HTML, TXT, or CHM document if the encoding is not specified
    ///  inside the document.
    ///  Can be null. Default is null.
    ///</summary>
    ///<remarks><para>This property is used only when loading HTML, TXT, or CHM documents.</para><para>If encoding is not specified inside the document and this property is <c>null</c>, then the system will try to
    ///  automatically detect the encoding.</para></remarks>
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    ///<summary>
    ///  Allows to control how external resources (images, style sheets) are loaded when a document is imported from HTML, MHTML.
    ///</summary>
    property ResourceLoadingCallback: DNIResourceLoadingCallback read get_ResourceLoadingCallback write set_ResourceLoadingCallback;
    ///<summary>
    ///  Called during a load operation, when an issue is detected that might result in data or formatting fidelity loss.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Gets or sets whether to preserve the INCLUDEPICTURE field when reading Microsoft Word formats.
    ///  The default value is false.
    ///</summary>
    ///<remarks><p>By default, the INCLUDEPICTURE field is converted into a shape object. You can override that if you need
    ///  the field to be preserved, for example, if you wish to update it programmatically. Note however that this
    ///  approach is not common for Aspose.Words. Use it on your own risk.</p>
    ///  <p>One of the possible use cases may be using a MERGEFIELD as a child field to dynamically change the source path
    ///  of the picture. In this case you need the INCLUDEPICTURE to be preserved in the model.</p>
    ///</remarks>
    property PreserveIncludePictureField: Boolean read get_PreserveIncludePictureField write set_PreserveIncludePictureField;
    ///<summary>
    ///  Gets or sets whether to convert shapes with EquationXML to Office Math objects.
    ///</summary>
    property ConvertShapeToOfficeMath: Boolean read get_ConvertShapeToOfficeMath write set_ConvertShapeToOfficeMath;
    ///<summary>
    ///  Allows to specify document font settings.
    ///</summary>
    ///<remarks><para>When loading some formats, Aspose.Words may require to resolve the fonts. For example, when loading HTML documents Aspose.Words
    ///  may resolve the fonts to perform font fallback.</para><para>If set to null, default static font settings <see cref="P:Aspose.Words.Fonts.FontSettings.DefaultInstance" />
    ///  will be used.</para><para>The default value is null.</para></remarks>
    property FontSettings: DNFontSettings read get_FontSettings write set_FontSettings;
    ///<summary>
    ///  Allows to use temporary files when reading document.
    ///  By default this property is <c>null</c> and no temporary files are used.
    ///</summary>
    ///<remarks><para>The folder must exist and be writable, otherwise an exception will be thrown.</para><para>Aspose.Words automatically deletes all temporary files when reading is complete.</para></remarks>
    property TempFolder: string read get_TempFolder write set_TempFolder;
    ///<summary>
    ///  Gets or sets whether to convert metafile (<see cref="F:Aspose.FileFormat.Wmf" />
    ///  or <see cref="F:Aspose.FileFormat.Emf" />
    ///  ) images to <see cref="F:Aspose.FileFormat.Png" />
    ///  image format.
    ///</summary>
    ///<remarks>
    ///  Metafiles (<see cref="F:Aspose.FileFormat.Wmf" />
    ///  or <see cref="F:Aspose.FileFormat.Emf" />
    ///  ) is an uncompressed image format and sometimes requires to much RAM to hold and process document.
    ///  This option allows to convert all metafile images to <see cref="F:Aspose.FileFormat.Png" />
    ///  on document loading.
    ///  Please note - conversion vector graphics to raster decreases quality of the images.
    ///</remarks>
    property ConvertMetafilesToPng: Boolean read get_ConvertMetafilesToPng write set_ConvertMetafilesToPng;
    ///<summary>
    ///  Allows to specify that the document loading process should match a specific MS Word version.
    ///  Default value is <see cref="F:Aspose.Words.Settings.MsWordVersion.Word2007" />
    ///</summary>
    ///<remarks>
    ///  Different Word versions may handle certain aspects of document content and formatting slightly differently
    ///  during the loading process, which may result in minor differences in Document Object Model.
    ///</remarks>
    property MswVersion: DNMsWordVersion read get_MswVersion write set_MswVersion;
    ///<summary>
    ///  Specifies whether to update the fields with the <c>dirty</c> attribute.
    ///</summary>
    property UpdateDirtyFields: Boolean read get_UpdateDirtyFields write set_UpdateDirtyFields;
    ///<summary>
    ///  Gets language preferences that will be used when document is loading.
    ///</summary>
    property LanguagePreferences: DNLanguagePreferences read get_LanguagePreferences;
  end;

  TDNHtmlLoadOptions = class(TDNGenericImport<DNHtmlLoadOptionsClass, DNHtmlLoadOptions>) end;

  //-------------namespace: Aspose.Words.Loading----------------
  DNPdfLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{ADEE365C-8324-5A7B-B788-0519CD75A52D}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class with default values.
    ///</summary>
    {class} function init: DNPdfLoadOptions;

  end;

  ///<summary>
  ///  Allows to specify additional options when loading Pdf document into a <see cref="T:Aspose.Words.Document" />
  ///  object.
  ///</summary>
  [DNTypeName('Aspose.Words.Loading.PdfLoadOptions')]
  DNPdfLoadOptions = interface(DNLoadOptions)
  ['{BD6BD15B-B34C-3962-A6FD-AE981DE837DF}']
  { getters & setters } 

    function get_PageIndex: Int32;
    procedure set_PageIndex(value: Int32);
    function get_PageCount: Int32;
    procedure set_PageCount(value: Int32);
    function get_SkipPdfImages: Boolean;
    procedure set_SkipPdfImages(value: Boolean);
    function get_LoadFormat: DNLoadFormat;
    procedure set_LoadFormat(value: DNLoadFormat);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_BaseUri: string;
    procedure set_BaseUri(value: string);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_ResourceLoadingCallback: DNIResourceLoadingCallback;
    procedure set_ResourceLoadingCallback(value: DNIResourceLoadingCallback);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_PreserveIncludePictureField: Boolean;
    procedure set_PreserveIncludePictureField(value: Boolean);
    function get_ConvertShapeToOfficeMath: Boolean;
    procedure set_ConvertShapeToOfficeMath(value: Boolean);
    function get_FontSettings: DNFontSettings;
    procedure set_FontSettings(value: DNFontSettings);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_ConvertMetafilesToPng: Boolean;
    procedure set_ConvertMetafilesToPng(value: Boolean);
    function get_MswVersion: DNMsWordVersion;
    procedure set_MswVersion(value: DNMsWordVersion);
    function get_UpdateDirtyFields: Boolean;
    procedure set_UpdateDirtyFields(value: Boolean);
    function get_LanguagePreferences: DNLanguagePreferences;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the 0-based index of the first page to read. Default is 0.
    ///</summary>
    property PageIndex: Int32 read get_PageIndex write set_PageIndex;
    ///<summary>
    ///  Gets or sets the number of pages to read. Default is MaxValue which means all pages of the document will be read.
    ///</summary>
    property PageCount: Int32 read get_PageCount write set_PageCount;
    ///<summary>
    ///  Gets or sets the flag indicating whether images must be skipped while loading PDF document. Default is False.
    ///</summary>
    property SkipPdfImages: Boolean read get_SkipPdfImages write set_SkipPdfImages;
    ///<summary>
    ///  Specifies the format of the document to be loaded.
    ///  Default is <see cref="F:Aspose.Words.LoadFormat.Auto" />
    ///  .
    ///</summary>
    ///<remarks><para>It is recommended that you specify the <see cref="F:Aspose.Words.LoadFormat.Auto" />
    ///  value and let Aspose.Words detect
    ///  the file format automatically. If you know the format of the document you are about to load, you can specify the format
    ///  explicitly and this will slightly reduce the loading time by the overhead associated with auto detecting the format.
    ///  If you specify an explicit load format and it will turn out to be wrong, the auto detection will be invoked and a second
    ///  attempt to load the file will be made.</para></remarks>
    property LoadFormat: DNLoadFormat read get_LoadFormat write set_LoadFormat;
    ///<summary>
    ///  Gets or sets the password for opening an encrypted document.
    ///  Can be null or empty string. Default is null.
    ///</summary>
    ///<remarks><para>You need to know the password to open an encrypted document. If the document is not encrypted, set this to null or empty string.</para></remarks>
    property Password: string read get_Password write set_Password;
    ///<summary>
    ///  Gets or sets the string that will be used to resolve relative URIs found in the document into absolute URIs when required.
    ///  Can be null or empty string. Default is null.
    ///</summary>
    ///<remarks><p>This property is used to resolve relative URIs into absolute in the following cases:</p>
    ///<list type="number"><item>When loading an HTML document from a stream and the document contains images with
    ///  relative URIs and does not have a base URI specified in the BASE HTML element.</item>
    ///<item>When saving a document to PDF and other formats, to retrieve images linked using relative URIs
    ///  so the images can be saved into the output document.</item>
    ///</list>
    ///</remarks>
    property BaseUri: string read get_BaseUri write set_BaseUri;
    ///<summary>
    ///  Gets or sets the encoding that will be used to load an HTML, TXT, or CHM document if the encoding is not specified
    ///  inside the document.
    ///  Can be null. Default is null.
    ///</summary>
    ///<remarks><para>This property is used only when loading HTML, TXT, or CHM documents.</para><para>If encoding is not specified inside the document and this property is <c>null</c>, then the system will try to
    ///  automatically detect the encoding.</para></remarks>
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    ///<summary>
    ///  Allows to control how external resources (images, style sheets) are loaded when a document is imported from HTML, MHTML.
    ///</summary>
    property ResourceLoadingCallback: DNIResourceLoadingCallback read get_ResourceLoadingCallback write set_ResourceLoadingCallback;
    ///<summary>
    ///  Called during a load operation, when an issue is detected that might result in data or formatting fidelity loss.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Gets or sets whether to preserve the INCLUDEPICTURE field when reading Microsoft Word formats.
    ///  The default value is false.
    ///</summary>
    ///<remarks><p>By default, the INCLUDEPICTURE field is converted into a shape object. You can override that if you need
    ///  the field to be preserved, for example, if you wish to update it programmatically. Note however that this
    ///  approach is not common for Aspose.Words. Use it on your own risk.</p>
    ///  <p>One of the possible use cases may be using a MERGEFIELD as a child field to dynamically change the source path
    ///  of the picture. In this case you need the INCLUDEPICTURE to be preserved in the model.</p>
    ///</remarks>
    property PreserveIncludePictureField: Boolean read get_PreserveIncludePictureField write set_PreserveIncludePictureField;
    ///<summary>
    ///  Gets or sets whether to convert shapes with EquationXML to Office Math objects.
    ///</summary>
    property ConvertShapeToOfficeMath: Boolean read get_ConvertShapeToOfficeMath write set_ConvertShapeToOfficeMath;
    ///<summary>
    ///  Allows to specify document font settings.
    ///</summary>
    ///<remarks><para>When loading some formats, Aspose.Words may require to resolve the fonts. For example, when loading HTML documents Aspose.Words
    ///  may resolve the fonts to perform font fallback.</para><para>If set to null, default static font settings <see cref="P:Aspose.Words.Fonts.FontSettings.DefaultInstance" />
    ///  will be used.</para><para>The default value is null.</para></remarks>
    property FontSettings: DNFontSettings read get_FontSettings write set_FontSettings;
    ///<summary>
    ///  Allows to use temporary files when reading document.
    ///  By default this property is <c>null</c> and no temporary files are used.
    ///</summary>
    ///<remarks><para>The folder must exist and be writable, otherwise an exception will be thrown.</para><para>Aspose.Words automatically deletes all temporary files when reading is complete.</para></remarks>
    property TempFolder: string read get_TempFolder write set_TempFolder;
    ///<summary>
    ///  Gets or sets whether to convert metafile (<see cref="F:Aspose.FileFormat.Wmf" />
    ///  or <see cref="F:Aspose.FileFormat.Emf" />
    ///  ) images to <see cref="F:Aspose.FileFormat.Png" />
    ///  image format.
    ///</summary>
    ///<remarks>
    ///  Metafiles (<see cref="F:Aspose.FileFormat.Wmf" />
    ///  or <see cref="F:Aspose.FileFormat.Emf" />
    ///  ) is an uncompressed image format and sometimes requires to much RAM to hold and process document.
    ///  This option allows to convert all metafile images to <see cref="F:Aspose.FileFormat.Png" />
    ///  on document loading.
    ///  Please note - conversion vector graphics to raster decreases quality of the images.
    ///</remarks>
    property ConvertMetafilesToPng: Boolean read get_ConvertMetafilesToPng write set_ConvertMetafilesToPng;
    ///<summary>
    ///  Allows to specify that the document loading process should match a specific MS Word version.
    ///  Default value is <see cref="F:Aspose.Words.Settings.MsWordVersion.Word2007" />
    ///</summary>
    ///<remarks>
    ///  Different Word versions may handle certain aspects of document content and formatting slightly differently
    ///  during the loading process, which may result in minor differences in Document Object Model.
    ///</remarks>
    property MswVersion: DNMsWordVersion read get_MswVersion write set_MswVersion;
    ///<summary>
    ///  Specifies whether to update the fields with the <c>dirty</c> attribute.
    ///</summary>
    property UpdateDirtyFields: Boolean read get_UpdateDirtyFields write set_UpdateDirtyFields;
    ///<summary>
    ///  Gets language preferences that will be used when document is loading.
    ///</summary>
    property LanguagePreferences: DNLanguagePreferences read get_LanguagePreferences;
  end;

  TDNPdfLoadOptions = class(TDNGenericImport<DNPdfLoadOptionsClass, DNPdfLoadOptions>) end;

  //-------------namespace: Aspose.Words.Loading----------------
  DNRtfLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{ED61D824-CC7B-5791-B624-E4C54759BCD2}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class with default values.
    ///</summary>
    {class} function init: DNRtfLoadOptions;

  end;

  ///<summary>
  ///  Allows to specify additional options when loading <see cref="F:Aspose.Words.LoadFormat.Rtf" />
  ///  document into a <see cref="T:Aspose.Words.Document" />
  ///  object.
  ///</summary>
  [DNTypeName('Aspose.Words.Loading.RtfLoadOptions')]
  DNRtfLoadOptions = interface(DNLoadOptions)
  ['{3CF2DAD6-6A3A-3410-A296-F7FC3ED62F92}']
  { getters & setters } 

    function get_RecognizeUtf8Text: Boolean;
    procedure set_RecognizeUtf8Text(value: Boolean);
    function get_LoadFormat: DNLoadFormat;
    procedure set_LoadFormat(value: DNLoadFormat);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_BaseUri: string;
    procedure set_BaseUri(value: string);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_ResourceLoadingCallback: DNIResourceLoadingCallback;
    procedure set_ResourceLoadingCallback(value: DNIResourceLoadingCallback);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_PreserveIncludePictureField: Boolean;
    procedure set_PreserveIncludePictureField(value: Boolean);
    function get_ConvertShapeToOfficeMath: Boolean;
    procedure set_ConvertShapeToOfficeMath(value: Boolean);
    function get_FontSettings: DNFontSettings;
    procedure set_FontSettings(value: DNFontSettings);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_ConvertMetafilesToPng: Boolean;
    procedure set_ConvertMetafilesToPng(value: Boolean);
    function get_MswVersion: DNMsWordVersion;
    procedure set_MswVersion(value: DNMsWordVersion);
    function get_UpdateDirtyFields: Boolean;
    procedure set_UpdateDirtyFields(value: Boolean);
    function get_LanguagePreferences: DNLanguagePreferences;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary><para> When set to true, <see cref="T:Aspose.Charset.CharsetDetector" />
    ///  will try to detect UTF8 characters,
    ///  they will be preserved during import.
    ///</para>
    ///  Default value is false.
    ///</summary>
    property RecognizeUtf8Text: Boolean read get_RecognizeUtf8Text write set_RecognizeUtf8Text;
    ///<summary>
    ///  Specifies the format of the document to be loaded.
    ///  Default is <see cref="F:Aspose.Words.LoadFormat.Auto" />
    ///  .
    ///</summary>
    ///<remarks><para>It is recommended that you specify the <see cref="F:Aspose.Words.LoadFormat.Auto" />
    ///  value and let Aspose.Words detect
    ///  the file format automatically. If you know the format of the document you are about to load, you can specify the format
    ///  explicitly and this will slightly reduce the loading time by the overhead associated with auto detecting the format.
    ///  If you specify an explicit load format and it will turn out to be wrong, the auto detection will be invoked and a second
    ///  attempt to load the file will be made.</para></remarks>
    property LoadFormat: DNLoadFormat read get_LoadFormat write set_LoadFormat;
    ///<summary>
    ///  Gets or sets the password for opening an encrypted document.
    ///  Can be null or empty string. Default is null.
    ///</summary>
    ///<remarks><para>You need to know the password to open an encrypted document. If the document is not encrypted, set this to null or empty string.</para></remarks>
    property Password: string read get_Password write set_Password;
    ///<summary>
    ///  Gets or sets the string that will be used to resolve relative URIs found in the document into absolute URIs when required.
    ///  Can be null or empty string. Default is null.
    ///</summary>
    ///<remarks><p>This property is used to resolve relative URIs into absolute in the following cases:</p>
    ///<list type="number"><item>When loading an HTML document from a stream and the document contains images with
    ///  relative URIs and does not have a base URI specified in the BASE HTML element.</item>
    ///<item>When saving a document to PDF and other formats, to retrieve images linked using relative URIs
    ///  so the images can be saved into the output document.</item>
    ///</list>
    ///</remarks>
    property BaseUri: string read get_BaseUri write set_BaseUri;
    ///<summary>
    ///  Gets or sets the encoding that will be used to load an HTML, TXT, or CHM document if the encoding is not specified
    ///  inside the document.
    ///  Can be null. Default is null.
    ///</summary>
    ///<remarks><para>This property is used only when loading HTML, TXT, or CHM documents.</para><para>If encoding is not specified inside the document and this property is <c>null</c>, then the system will try to
    ///  automatically detect the encoding.</para></remarks>
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    ///<summary>
    ///  Allows to control how external resources (images, style sheets) are loaded when a document is imported from HTML, MHTML.
    ///</summary>
    property ResourceLoadingCallback: DNIResourceLoadingCallback read get_ResourceLoadingCallback write set_ResourceLoadingCallback;
    ///<summary>
    ///  Called during a load operation, when an issue is detected that might result in data or formatting fidelity loss.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Gets or sets whether to preserve the INCLUDEPICTURE field when reading Microsoft Word formats.
    ///  The default value is false.
    ///</summary>
    ///<remarks><p>By default, the INCLUDEPICTURE field is converted into a shape object. You can override that if you need
    ///  the field to be preserved, for example, if you wish to update it programmatically. Note however that this
    ///  approach is not common for Aspose.Words. Use it on your own risk.</p>
    ///  <p>One of the possible use cases may be using a MERGEFIELD as a child field to dynamically change the source path
    ///  of the picture. In this case you need the INCLUDEPICTURE to be preserved in the model.</p>
    ///</remarks>
    property PreserveIncludePictureField: Boolean read get_PreserveIncludePictureField write set_PreserveIncludePictureField;
    ///<summary>
    ///  Gets or sets whether to convert shapes with EquationXML to Office Math objects.
    ///</summary>
    property ConvertShapeToOfficeMath: Boolean read get_ConvertShapeToOfficeMath write set_ConvertShapeToOfficeMath;
    ///<summary>
    ///  Allows to specify document font settings.
    ///</summary>
    ///<remarks><para>When loading some formats, Aspose.Words may require to resolve the fonts. For example, when loading HTML documents Aspose.Words
    ///  may resolve the fonts to perform font fallback.</para><para>If set to null, default static font settings <see cref="P:Aspose.Words.Fonts.FontSettings.DefaultInstance" />
    ///  will be used.</para><para>The default value is null.</para></remarks>
    property FontSettings: DNFontSettings read get_FontSettings write set_FontSettings;
    ///<summary>
    ///  Allows to use temporary files when reading document.
    ///  By default this property is <c>null</c> and no temporary files are used.
    ///</summary>
    ///<remarks><para>The folder must exist and be writable, otherwise an exception will be thrown.</para><para>Aspose.Words automatically deletes all temporary files when reading is complete.</para></remarks>
    property TempFolder: string read get_TempFolder write set_TempFolder;
    ///<summary>
    ///  Gets or sets whether to convert metafile (<see cref="F:Aspose.FileFormat.Wmf" />
    ///  or <see cref="F:Aspose.FileFormat.Emf" />
    ///  ) images to <see cref="F:Aspose.FileFormat.Png" />
    ///  image format.
    ///</summary>
    ///<remarks>
    ///  Metafiles (<see cref="F:Aspose.FileFormat.Wmf" />
    ///  or <see cref="F:Aspose.FileFormat.Emf" />
    ///  ) is an uncompressed image format and sometimes requires to much RAM to hold and process document.
    ///  This option allows to convert all metafile images to <see cref="F:Aspose.FileFormat.Png" />
    ///  on document loading.
    ///  Please note - conversion vector graphics to raster decreases quality of the images.
    ///</remarks>
    property ConvertMetafilesToPng: Boolean read get_ConvertMetafilesToPng write set_ConvertMetafilesToPng;
    ///<summary>
    ///  Allows to specify that the document loading process should match a specific MS Word version.
    ///  Default value is <see cref="F:Aspose.Words.Settings.MsWordVersion.Word2007" />
    ///</summary>
    ///<remarks>
    ///  Different Word versions may handle certain aspects of document content and formatting slightly differently
    ///  during the loading process, which may result in minor differences in Document Object Model.
    ///</remarks>
    property MswVersion: DNMsWordVersion read get_MswVersion write set_MswVersion;
    ///<summary>
    ///  Specifies whether to update the fields with the <c>dirty</c> attribute.
    ///</summary>
    property UpdateDirtyFields: Boolean read get_UpdateDirtyFields write set_UpdateDirtyFields;
    ///<summary>
    ///  Gets language preferences that will be used when document is loading.
    ///</summary>
    property LanguagePreferences: DNLanguagePreferences read get_LanguagePreferences;
  end;

  TDNRtfLoadOptions = class(TDNGenericImport<DNRtfLoadOptionsClass, DNRtfLoadOptions>) end;

  //-------------namespace: Aspose.Words.Loading----------------
  DNTxtLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{2A436BD2-2EBC-5948-BE38-2C31AD230C80}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class with default values.
    ///</summary>
    {class} function init: DNTxtLoadOptions;

  end;

  ///<summary>
  ///  Allows to specify additional options when loading <see cref="F:Aspose.Words.LoadFormat.Text" />
  ///  document into a <see cref="T:Aspose.Words.Document" />
  ///  object.
  ///</summary>
  [DNTypeName('Aspose.Words.Loading.TxtLoadOptions')]
  DNTxtLoadOptions = interface(DNLoadOptions)
  ['{6DFA75C5-6FE6-34F4-B90D-1DF62CCE0F41}']
  { getters & setters } 

    function get_DetectNumberingWithWhitespaces: Boolean;
    procedure set_DetectNumberingWithWhitespaces(value: Boolean);
    function get_TrailingSpacesOptions: DNTxtTrailingSpacesOptions;
    procedure set_TrailingSpacesOptions(value: DNTxtTrailingSpacesOptions);
    function get_LeadingSpacesOptions: DNTxtLeadingSpacesOptions;
    procedure set_LeadingSpacesOptions(value: DNTxtLeadingSpacesOptions);
    function get_DocumentDirection: DNDocumentDirection;
    procedure set_DocumentDirection(value: DNDocumentDirection);
    function get_LoadFormat: DNLoadFormat;
    procedure set_LoadFormat(value: DNLoadFormat);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_BaseUri: string;
    procedure set_BaseUri(value: string);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_ResourceLoadingCallback: DNIResourceLoadingCallback;
    procedure set_ResourceLoadingCallback(value: DNIResourceLoadingCallback);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_PreserveIncludePictureField: Boolean;
    procedure set_PreserveIncludePictureField(value: Boolean);
    function get_ConvertShapeToOfficeMath: Boolean;
    procedure set_ConvertShapeToOfficeMath(value: Boolean);
    function get_FontSettings: DNFontSettings;
    procedure set_FontSettings(value: DNFontSettings);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_ConvertMetafilesToPng: Boolean;
    procedure set_ConvertMetafilesToPng(value: Boolean);
    function get_MswVersion: DNMsWordVersion;
    procedure set_MswVersion(value: DNMsWordVersion);
    function get_UpdateDirtyFields: Boolean;
    procedure set_UpdateDirtyFields(value: Boolean);
    function get_LanguagePreferences: DNLanguagePreferences;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Allows to specify how numbered list items are recognized when document is imported from plain text format.
    ///  The default value is true.</summary>
    ///<remarks><para> If this option is set to false, lists recognition algorithm detects list paragraphs, when list numbers ends with
    ///  either dot, right bracket or bullet symbols (such as "â€¢", "*", "-" or "o").</para><para> If this option is set to true, whitespaces are also used as list number delimeters:
    ///  list recognition algorithm for Arabic style numbering (1., 1.1.2.) uses both whitespaces and dot (".") symbols.</para></remarks>
    property DetectNumberingWithWhitespaces: Boolean read get_DetectNumberingWithWhitespaces write set_DetectNumberingWithWhitespaces;
    ///<summary>
    ///  Gets or sets preferred option of a trailing space handling.
    ///  Default value is <see cref="F:Aspose.Words.Loading.TxtTrailingSpacesOptions.Trim" />
    ///  .
    ///</summary>
    property TrailingSpacesOptions: DNTxtTrailingSpacesOptions read get_TrailingSpacesOptions write set_TrailingSpacesOptions;
    ///<summary>
    ///  Gets or sets preferred option of a leading space handling.
    ///  Default value is <see cref="F:Aspose.Words.Loading.TxtLeadingSpacesOptions.ConvertToIndent" />
    ///  .
    ///</summary>
    property LeadingSpacesOptions: DNTxtLeadingSpacesOptions read get_LeadingSpacesOptions write set_LeadingSpacesOptions;
    ///<summary>
    ///  Gets or sets a document direction.
    ///  The default value is <see cref="F:Aspose.Words.Loading.DocumentDirection.LeftToRight" />
    ///  .
    ///</summary>
    property DocumentDirection: DNDocumentDirection read get_DocumentDirection write set_DocumentDirection;
    ///<summary>
    ///  Specifies the format of the document to be loaded.
    ///  Default is <see cref="F:Aspose.Words.LoadFormat.Auto" />
    ///  .
    ///</summary>
    ///<remarks><para>It is recommended that you specify the <see cref="F:Aspose.Words.LoadFormat.Auto" />
    ///  value and let Aspose.Words detect
    ///  the file format automatically. If you know the format of the document you are about to load, you can specify the format
    ///  explicitly and this will slightly reduce the loading time by the overhead associated with auto detecting the format.
    ///  If you specify an explicit load format and it will turn out to be wrong, the auto detection will be invoked and a second
    ///  attempt to load the file will be made.</para></remarks>
    property LoadFormat: DNLoadFormat read get_LoadFormat write set_LoadFormat;
    ///<summary>
    ///  Gets or sets the password for opening an encrypted document.
    ///  Can be null or empty string. Default is null.
    ///</summary>
    ///<remarks><para>You need to know the password to open an encrypted document. If the document is not encrypted, set this to null or empty string.</para></remarks>
    property Password: string read get_Password write set_Password;
    ///<summary>
    ///  Gets or sets the string that will be used to resolve relative URIs found in the document into absolute URIs when required.
    ///  Can be null or empty string. Default is null.
    ///</summary>
    ///<remarks><p>This property is used to resolve relative URIs into absolute in the following cases:</p>
    ///<list type="number"><item>When loading an HTML document from a stream and the document contains images with
    ///  relative URIs and does not have a base URI specified in the BASE HTML element.</item>
    ///<item>When saving a document to PDF and other formats, to retrieve images linked using relative URIs
    ///  so the images can be saved into the output document.</item>
    ///</list>
    ///</remarks>
    property BaseUri: string read get_BaseUri write set_BaseUri;
    ///<summary>
    ///  Gets or sets the encoding that will be used to load an HTML, TXT, or CHM document if the encoding is not specified
    ///  inside the document.
    ///  Can be null. Default is null.
    ///</summary>
    ///<remarks><para>This property is used only when loading HTML, TXT, or CHM documents.</para><para>If encoding is not specified inside the document and this property is <c>null</c>, then the system will try to
    ///  automatically detect the encoding.</para></remarks>
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    ///<summary>
    ///  Allows to control how external resources (images, style sheets) are loaded when a document is imported from HTML, MHTML.
    ///</summary>
    property ResourceLoadingCallback: DNIResourceLoadingCallback read get_ResourceLoadingCallback write set_ResourceLoadingCallback;
    ///<summary>
    ///  Called during a load operation, when an issue is detected that might result in data or formatting fidelity loss.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Gets or sets whether to preserve the INCLUDEPICTURE field when reading Microsoft Word formats.
    ///  The default value is false.
    ///</summary>
    ///<remarks><p>By default, the INCLUDEPICTURE field is converted into a shape object. You can override that if you need
    ///  the field to be preserved, for example, if you wish to update it programmatically. Note however that this
    ///  approach is not common for Aspose.Words. Use it on your own risk.</p>
    ///  <p>One of the possible use cases may be using a MERGEFIELD as a child field to dynamically change the source path
    ///  of the picture. In this case you need the INCLUDEPICTURE to be preserved in the model.</p>
    ///</remarks>
    property PreserveIncludePictureField: Boolean read get_PreserveIncludePictureField write set_PreserveIncludePictureField;
    ///<summary>
    ///  Gets or sets whether to convert shapes with EquationXML to Office Math objects.
    ///</summary>
    property ConvertShapeToOfficeMath: Boolean read get_ConvertShapeToOfficeMath write set_ConvertShapeToOfficeMath;
    ///<summary>
    ///  Allows to specify document font settings.
    ///</summary>
    ///<remarks><para>When loading some formats, Aspose.Words may require to resolve the fonts. For example, when loading HTML documents Aspose.Words
    ///  may resolve the fonts to perform font fallback.</para><para>If set to null, default static font settings <see cref="P:Aspose.Words.Fonts.FontSettings.DefaultInstance" />
    ///  will be used.</para><para>The default value is null.</para></remarks>
    property FontSettings: DNFontSettings read get_FontSettings write set_FontSettings;
    ///<summary>
    ///  Allows to use temporary files when reading document.
    ///  By default this property is <c>null</c> and no temporary files are used.
    ///</summary>
    ///<remarks><para>The folder must exist and be writable, otherwise an exception will be thrown.</para><para>Aspose.Words automatically deletes all temporary files when reading is complete.</para></remarks>
    property TempFolder: string read get_TempFolder write set_TempFolder;
    ///<summary>
    ///  Gets or sets whether to convert metafile (<see cref="F:Aspose.FileFormat.Wmf" />
    ///  or <see cref="F:Aspose.FileFormat.Emf" />
    ///  ) images to <see cref="F:Aspose.FileFormat.Png" />
    ///  image format.
    ///</summary>
    ///<remarks>
    ///  Metafiles (<see cref="F:Aspose.FileFormat.Wmf" />
    ///  or <see cref="F:Aspose.FileFormat.Emf" />
    ///  ) is an uncompressed image format and sometimes requires to much RAM to hold and process document.
    ///  This option allows to convert all metafile images to <see cref="F:Aspose.FileFormat.Png" />
    ///  on document loading.
    ///  Please note - conversion vector graphics to raster decreases quality of the images.
    ///</remarks>
    property ConvertMetafilesToPng: Boolean read get_ConvertMetafilesToPng write set_ConvertMetafilesToPng;
    ///<summary>
    ///  Allows to specify that the document loading process should match a specific MS Word version.
    ///  Default value is <see cref="F:Aspose.Words.Settings.MsWordVersion.Word2007" />
    ///</summary>
    ///<remarks>
    ///  Different Word versions may handle certain aspects of document content and formatting slightly differently
    ///  during the loading process, which may result in minor differences in Document Object Model.
    ///</remarks>
    property MswVersion: DNMsWordVersion read get_MswVersion write set_MswVersion;
    ///<summary>
    ///  Specifies whether to update the fields with the <c>dirty</c> attribute.
    ///</summary>
    property UpdateDirtyFields: Boolean read get_UpdateDirtyFields write set_UpdateDirtyFields;
    ///<summary>
    ///  Gets language preferences that will be used when document is loading.
    ///</summary>
    property LanguagePreferences: DNLanguagePreferences read get_LanguagePreferences;
  end;

  TDNTxtLoadOptions = class(TDNGenericImport<DNTxtLoadOptionsClass, DNTxtLoadOptions>) end;

  //-------------namespace: Aspose.Words.Loading----------------
  DNResourceLoadingArgsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7F2D7C1E-59DB-5CAF-968E-B7877950A13D}']
  end;

  ///<summary>
  ///  Provides data for the <see cref="M:Aspose.Words.Loading.IResourceLoadingCallback.ResourceLoading(Aspose.Words.Loading.ResourceLoadingArgs)" />
  ///  method.
  ///</summary>
  [DNTypeName('Aspose.Words.Loading.ResourceLoadingArgs')]
  DNResourceLoadingArgs = interface(DDN.mscorlib.DNObject)
  ['{32B87CC2-B78D-320B-9920-9710FE40E464}']
  { getters & setters } 

    function get_ResourceType: DNResourceType;
    function get_Uri: string;
    procedure set_Uri(value: string);
    function get_OriginalUri: string;

  { methods } 

    ///<summary>
    ///  Sets user provided data of the resource which is used
    ///  if <see cref="M:Aspose.Words.Loading.IResourceLoadingCallback.ResourceLoading(Aspose.Words.Loading.ResourceLoadingArgs)" />
    ///  returns <see cref="F:Aspose.Words.Loading.ResourceLoadingAction.UserProvided" />
    ///  .
    ///</summary>
    procedure SetData(data: TArray<Byte>);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Type of resource.
    ///</summary>
    property ResourceType: DNResourceType read get_ResourceType;
    ///<summary><para>URI of the resource which is used for downloading
    ///  if <see cref="M:Aspose.Words.Loading.IResourceLoadingCallback.ResourceLoading(Aspose.Words.Loading.ResourceLoadingArgs)" />
    ///  returns <see cref="F:Aspose.Words.Loading.ResourceLoadingAction.Default" />
    ///  .</para><para>Initially it's set to absolute URI of the resource,
    ///  but user can redefine it to any value.</para></summary>
    property Uri: string read get_Uri write set_Uri;
    ///<summary>
    ///  Original URI of the resource as specified in imported document.
    ///</summary>
    property OriginalUri: string read get_OriginalUri;
  end;

  TDNResourceLoadingArgs = class(TDNGenericImport<DNResourceLoadingArgsClass, DNResourceLoadingArgs>) end;

  //-------------namespace: Aspose.Words.MailMerging----------------
  DNFieldMergingArgsBaseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DDC72044-8D44-5CAC-A126-7A0C94394FD5}']
  end;

  ///<summary>
  ///  Base class for <see cref="T:Aspose.Words.MailMerging.FieldMergingArgs" />
  ///  and <see cref="T:Aspose.Words.MailMerging.ImageFieldMergingArgs" />
  ///  .
  ///</summary>
  ///<remarks><seealso cref="T:Aspose.Words.MailMerging.FieldMergingArgs" />
  ///<seealso cref="T:Aspose.Words.MailMerging.ImageFieldMergingArgs" />
  ///</remarks>
  [DNTypeName('Aspose.Words.MailMerging.FieldMergingArgsBase')]
  DNFieldMergingArgsBase = interface(DDN.mscorlib.DNObject)
  ['{0E233C19-1C18-3F54-872A-0686EE588726}']
  { getters & setters } 

    function get_Document: DNDocument;
    function get_TableName: string;
    function get_RecordIndex: Int32;
    function get_FieldName: string;
    function get_DocumentFieldName: string;
    function get_FieldValue: DDN.mscorlib.DNObject;
    procedure set_FieldValue(value: DDN.mscorlib.DNObject);
    function get_Field: DNFieldMergeField;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the <see cref="P:Aspose.Words.MailMerging.FieldMergingArgsBase.Document" />
    ///  object for which the mail merge is performed.
    ///</summary>
    property Document: DNDocument read get_Document;
    ///<summary>
    ///  Gets the name of the data table for the current merge operation or empty string if the name is not available.
    ///</summary>
    property TableName: string read get_TableName;
    ///<summary>
    ///  Gets the zero based index of the record that is being merged.
    ///</summary>
    property RecordIndex: Int32 read get_RecordIndex;
    ///<summary>
    ///  Gets the name of the merge field in the data source.
    ///</summary>
    ///<remarks><p>If you have a mapping from a document field name to a different data source field name,
    ///  then this is the mapped field name.</p>
    ///  <p>If you specified a field name prefix, for example "Image:MyFieldName" in the document,
    ///  then <b>FieldName</b>
    ///  returns field name without the prefix, that is "MyFieldName".</p>
    ///</remarks>
    property FieldName: string read get_FieldName;
    ///<summary>
    ///  Gets the name of the merge field as specified in the document.
    ///</summary>
    ///<remarks><p>If you have a mapping from a document field name to a different data source field name,
    ///  then this is the original field name as specified in the document.</p>
    ///  <p>If you specified a field name prefix, for example "Image:MyFieldName" in the document,
    ///  then <b>DocumentFieldName</b>
    ///  returns field name without the prefix, that is "MyFieldName".</p>
    ///</remarks>
    property DocumentFieldName: string read get_DocumentFieldName;
    ///<summary>
    ///  Gets or sets the value of the field from the data source.
    ///</summary>
    ///<remarks>
    ///  This property contains a value that has just been selected from your data source
    ///  for this field by the mail merge engine. You can also replace the value by setting the property.
    ///</remarks>
    property FieldValue: DDN.mscorlib.DNObject read get_FieldValue write set_FieldValue;
    ///<summary>
    ///  Gets the object that represents the current merge field.
    ///</summary>
    property Field: DNFieldMergeField read get_Field;
  end;

  TDNFieldMergingArgsBase = class(TDNGenericImport<DNFieldMergingArgsBaseClass, DNFieldMergingArgsBase>) end;

  //-------------namespace: Aspose.Words.MailMerging----------------
  DNFieldMergingArgsClass = interface(DNFieldMergingArgsBaseClass)
  ['{769E1743-3713-5C4D-B54D-1821E0D08D8A}']
  end;

  ///<summary>
  ///  Provides data for the <b>MergeField</b>
  ///  event.
  ///</summary>
  ///<remarks><p>The <b>MergeField</b>
  ///  event occurs during mail merge when a simple mail merge
  ///  field is encountered in the document. You can respond to this event to return
  ///  text for the mail merge engine to insert into the document.</p>
  ///<seealso cref="T:Aspose.Words.MailMerging.IFieldMergingCallback" />
  ///</remarks>
  [DNTypeName('Aspose.Words.MailMerging.FieldMergingArgs')]
  DNFieldMergingArgs = interface(DNFieldMergingArgsBase)
  ['{C5D5FFD0-9019-3CA8-B08F-A29000375B3B}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_Document: DNDocument;
    function get_TableName: string;
    function get_RecordIndex: Int32;
    function get_FieldName: string;
    function get_DocumentFieldName: string;
    function get_FieldValue: DDN.mscorlib.DNObject;
    procedure set_FieldValue(value: DDN.mscorlib.DNObject);
    function get_Field: DNFieldMergeField;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the text that will be inserted into the document for the current merge field.
    ///</summary>
    ///<remarks><p>When your event handler is called, this property is set to null.</p>
    ///  <p>If you leave Text as null, the mail merge engine will insert <see cref="P:Aspose.Words.MailMerging.FieldMergingArgsBase.FieldValue" />
    ///  in place of the merge field.</p>
    ///  <p>If you set Text to any string (including empty), the string will be inserted into the document in place of the merge field.</p>
    ///</remarks>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Returns the <see cref="P:Aspose.Words.MailMerging.FieldMergingArgsBase.Document" />
    ///  object for which the mail merge is performed.
    ///</summary>
    property Document: DNDocument read get_Document;
    ///<summary>
    ///  Gets the name of the data table for the current merge operation or empty string if the name is not available.
    ///</summary>
    property TableName: string read get_TableName;
    ///<summary>
    ///  Gets the zero based index of the record that is being merged.
    ///</summary>
    property RecordIndex: Int32 read get_RecordIndex;
    ///<summary>
    ///  Gets the name of the merge field in the data source.
    ///</summary>
    ///<remarks><p>If you have a mapping from a document field name to a different data source field name,
    ///  then this is the mapped field name.</p>
    ///  <p>If you specified a field name prefix, for example "Image:MyFieldName" in the document,
    ///  then <b>FieldName</b>
    ///  returns field name without the prefix, that is "MyFieldName".</p>
    ///</remarks>
    property FieldName: string read get_FieldName;
    ///<summary>
    ///  Gets the name of the merge field as specified in the document.
    ///</summary>
    ///<remarks><p>If you have a mapping from a document field name to a different data source field name,
    ///  then this is the original field name as specified in the document.</p>
    ///  <p>If you specified a field name prefix, for example "Image:MyFieldName" in the document,
    ///  then <b>DocumentFieldName</b>
    ///  returns field name without the prefix, that is "MyFieldName".</p>
    ///</remarks>
    property DocumentFieldName: string read get_DocumentFieldName;
    ///<summary>
    ///  Gets or sets the value of the field from the data source.
    ///</summary>
    ///<remarks>
    ///  This property contains a value that has just been selected from your data source
    ///  for this field by the mail merge engine. You can also replace the value by setting the property.
    ///</remarks>
    property FieldValue: DDN.mscorlib.DNObject read get_FieldValue write set_FieldValue;
    ///<summary>
    ///  Gets the object that represents the current merge field.
    ///</summary>
    property Field: DNFieldMergeField read get_Field;
  end;

  TDNFieldMergingArgs = class(TDNGenericImport<DNFieldMergingArgsClass, DNFieldMergingArgs>) end;

  //-------------namespace: Aspose.Words.MailMerging----------------
  DNImageFieldMergingArgsClass = interface(DNFieldMergingArgsBaseClass)
  ['{7E59101D-464B-5A59-8254-C8A1016038FE}']
  end;

  ///<summary>
  ///  Provides data for the <see cref="M:Aspose.Words.MailMerging.IFieldMergingCallback.ImageFieldMerging(Aspose.Words.MailMerging.ImageFieldMergingArgs)" />
  ///  event.
  ///</summary>
  ///<remarks><p>This event occurs during mail merge when an image mail merge
  ///  field is encountered in the document. You can respond to this event to return a
  ///  file name, stream, or an <see cref="T:System.Drawing.Image" />
  ///  object to the mail merge
  ///  engine so it is inserted into the document.</p>
  ///  <p>There are three properties available <see cref="P:Aspose.Words.MailMerging.ImageFieldMergingArgs.ImageFileName" />
  ///  ,
  ///<see cref="P:Aspose.Words.MailMerging.ImageFieldMergingArgs.ImageStream" />
  ///  and <see cref="P:Aspose.Words.MailMerging.ImageFieldMergingArgs.Image" />
  ///  to specify where the image must be taken from.
  ///  Set only one of these properties.</p>
  ///  <p>To insert an image mail merge field into a document in Word, select Insert/Field command,
  ///  then select MergeField and type Image:MyFieldName.</p>
  ///<seealso cref="T:Aspose.Words.MailMerging.IFieldMergingCallback" />
  ///</remarks>
  [DNTypeName('Aspose.Words.MailMerging.ImageFieldMergingArgs')]
  DNImageFieldMergingArgs = interface(DNFieldMergingArgsBase)
  ['{ABE3856B-8FFD-3EA8-A8FA-75F3567DC683}']
  { getters & setters } 

    function get_ImageFileName: string;
    procedure set_ImageFileName(value: string);
    function get_ImageStream: DDN.mscorlib.DNStream;
    procedure set_ImageStream(value: DDN.mscorlib.DNStream);
    function get_Image: DDN.Aspose.Common.DNImage;
    procedure set_Image(value: DDN.Aspose.Common.DNImage);
    function get_Shape: DNShape;
    procedure set_Shape(value: DNShape);
    function get_ImageWidth: DNMergeFieldImageDimension;
    procedure set_ImageWidth(value: DNMergeFieldImageDimension);
    function get_ImageHeight: DNMergeFieldImageDimension;
    procedure set_ImageHeight(value: DNMergeFieldImageDimension);
    function get_Document: DNDocument;
    function get_TableName: string;
    function get_RecordIndex: Int32;
    function get_FieldName: string;
    function get_DocumentFieldName: string;
    function get_FieldValue: DDN.mscorlib.DNObject;
    procedure set_FieldValue(value: DDN.mscorlib.DNObject);
    function get_Field: DNFieldMergeField;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Sets the file name of the image that the mail merge engine must insert into the document.
    ///</summary>
    property ImageFileName: string read get_ImageFileName write set_ImageFileName;
    ///<summary>
    ///  Specifies the stream for the mail merge engine to read an image from.
    ///</summary>
    ///<remarks><p>Aspose.Words closes this stream after it merges the image into the document.</p>
    ///</remarks>
    property ImageStream: DDN.mscorlib.DNStream read get_ImageStream write set_ImageStream;
    ///<summary>
    ///  Specifies the image that the mail merge engine must insert into the document.
    ///</summary>
    property Image: DDN.Aspose.Common.DNImage read get_Image write set_Image;
    ///<summary>
    ///  Specifies the shape that the mail merge engine must insert into the document.
    ///</summary>
    ///<remarks><p>When this property is specified, the mail merge engine ignores all other properties like <see cref="P:Aspose.Words.MailMerging.ImageFieldMergingArgs.ImageFileName" />
    ///  or <see cref="P:Aspose.Words.MailMerging.ImageFieldMergingArgs.ImageStream" />
    ///  and simply inserts the shape into the document.</p>
    ///  <p>Use this property to fully control the process of merging an image merge field.
    ///  For example, you can specify <see cref="P:Aspose.Words.Drawing.ShapeBase.WrapType" />
    ///  or any other shape property to fine tune the resulting node. However, please note that
    ///  you are responsible for providing the content of the shape.</p>
    ///</remarks>
    property Shape: DNShape read get_Shape write set_Shape;
    ///<summary>
    ///  Specifies the image width for the image to insert into the document.
    ///</summary>
    ///<remarks><para>
    ///  The value of this property initially comes from the corresponding MERGEFIELD's code, contained in the
    ///  template document. To override the initial value, you should assign an instance of
    ///<see cref="T:Aspose.Words.Fields.MergeFieldImageDimension" />
    ///  class to this property or set the properties for the instance
    ///  of <see cref="T:Aspose.Words.Fields.MergeFieldImageDimension" />
    ///  class, returned by this property.
    ///</para><para>
    ///  To indicate that the original value of the image width should be applied, you should assign the <b>null</b>
    ///  value to this property or set the <see cref="P:Aspose.Words.Fields.MergeFieldImageDimension.Value" />
    ///  property for the instance
    ///  of <see cref="T:Aspose.Words.Fields.MergeFieldImageDimension" />
    ///  class, returned by this property, to a negative value.
    ///</para><seealso cref="T:Aspose.Words.Fields.MergeFieldImageDimension" />
    ///<seealso cref="T:Aspose.Words.Fields.MergeFieldImageDimensionUnit" />
    ///</remarks>
    property ImageWidth: DNMergeFieldImageDimension read get_ImageWidth write set_ImageWidth;
    ///<summary>
    ///  Specifies the image height for the image to insert into the document.
    ///</summary>
    ///<remarks><para>
    ///  The value of this property initially comes from the corresponding MERGEFIELD's code, contained in the
    ///  template document. To override the initial value, you should assign an instance of
    ///<see cref="T:Aspose.Words.Fields.MergeFieldImageDimension" />
    ///  class to this property or set the properties for the instance
    ///  of <see cref="T:Aspose.Words.Fields.MergeFieldImageDimension" />
    ///  class, returned by this property.
    ///</para><para>
    ///  To indicate that the original value of the image height should be applied, you should assign the <b>null</b>
    ///  value to this property or set the <see cref="P:Aspose.Words.Fields.MergeFieldImageDimension.Value" />
    ///  property for the instance
    ///  of <see cref="T:Aspose.Words.Fields.MergeFieldImageDimension" />
    ///  class, returned by this property, to a negative value.
    ///</para><seealso cref="T:Aspose.Words.Fields.MergeFieldImageDimension" />
    ///<seealso cref="T:Aspose.Words.Fields.MergeFieldImageDimensionUnit" />
    ///</remarks>
    property ImageHeight: DNMergeFieldImageDimension read get_ImageHeight write set_ImageHeight;
    ///<summary>
    ///  Returns the <see cref="P:Aspose.Words.MailMerging.FieldMergingArgsBase.Document" />
    ///  object for which the mail merge is performed.
    ///</summary>
    property Document: DNDocument read get_Document;
    ///<summary>
    ///  Gets the name of the data table for the current merge operation or empty string if the name is not available.
    ///</summary>
    property TableName: string read get_TableName;
    ///<summary>
    ///  Gets the zero based index of the record that is being merged.
    ///</summary>
    property RecordIndex: Int32 read get_RecordIndex;
    ///<summary>
    ///  Gets the name of the merge field in the data source.
    ///</summary>
    ///<remarks><p>If you have a mapping from a document field name to a different data source field name,
    ///  then this is the mapped field name.</p>
    ///  <p>If you specified a field name prefix, for example "Image:MyFieldName" in the document,
    ///  then <b>FieldName</b>
    ///  returns field name without the prefix, that is "MyFieldName".</p>
    ///</remarks>
    property FieldName: string read get_FieldName;
    ///<summary>
    ///  Gets the name of the merge field as specified in the document.
    ///</summary>
    ///<remarks><p>If you have a mapping from a document field name to a different data source field name,
    ///  then this is the original field name as specified in the document.</p>
    ///  <p>If you specified a field name prefix, for example "Image:MyFieldName" in the document,
    ///  then <b>DocumentFieldName</b>
    ///  returns field name without the prefix, that is "MyFieldName".</p>
    ///</remarks>
    property DocumentFieldName: string read get_DocumentFieldName;
    ///<summary>
    ///  Gets or sets the value of the field from the data source.
    ///</summary>
    ///<remarks>
    ///  This property contains a value that has just been selected from your data source
    ///  for this field by the mail merge engine. You can also replace the value by setting the property.
    ///</remarks>
    property FieldValue: DDN.mscorlib.DNObject read get_FieldValue write set_FieldValue;
    ///<summary>
    ///  Gets the object that represents the current merge field.
    ///</summary>
    property Field: DNFieldMergeField read get_Field;
  end;

  TDNImageFieldMergingArgs = class(TDNGenericImport<DNImageFieldMergingArgsClass, DNImageFieldMergingArgs>) end;

  //-------------namespace: Aspose.Words.MailMerging----------------
  ///<summary>
  ///  Implement this interface if you want to control how data is inserted into merge fields during a mail merge operation.
  ///</summary>
  [DNTypeName('Aspose.Words.MailMerging.IFieldMergingCallback')]
  DNIFieldMergingCallback = interface(DDN.mscorlib.DNObject)
  ['{EA71F2E8-71B5-3141-9ABB-6AAED29E71CC}']
  { methods } 

    ///<summary>
    ///  Called when the Aspose.Words mail merge engine is about to insert data into a merge field in the document.
    ///</summary>
    procedure FieldMerging(args: DNFieldMergingArgs);
    ///<summary>
    ///  Called when the Aspose.Words mail merge engine is about to insert an image into a merge field.
    ///</summary>
    procedure ImageFieldMerging(args: DNImageFieldMergingArgs);

  end;

  //-------------namespace: Aspose.Words.MailMerging----------------
  ///<summary>
  ///  Implement this interface if you want to receive notifications while mail merge is performed.
  ///</summary>
  [DNTypeName('Aspose.Words.MailMerging.IMailMergeCallback')]
  DNIMailMergeCallback = interface(DDN.mscorlib.DNObject)
  ['{4854824C-F854-3B7C-AB21-DBBDD751A4E4}']
  { methods } 

    ///<summary>
    ///  Called when "mustache" text tags are replaced with MERGEFIELD fields.
    ///</summary>
    ///<seealso cref="P:Aspose.Words.MailMerging.MailMerge.UseNonMergeFields" />
    procedure TagsReplaced;

  end;

  //-------------namespace: Aspose.Words.MailMerging----------------
  ///<summary>
  ///  Implement this interface to allow mail merge from a custom data source, such as a list of objects. Master-detail data is also supported.
  ///</summary>
  ///<remarks><para>When a data source is created, it should be initialized to point to BOF (before the first record).
  ///  The Aspose.Words mail merge engine will invoke <see cref="M:Aspose.Words.MailMerging.IMailMergeDataSource.MoveNext" />
  ///  to advance to next record and
  ///  then invoke <see cref="M:Aspose.Words.MailMerging.IMailMergeDataSource.GetValue(System.String,System.Object@)" />
  ///  for every merge field it encounters in the document or the current mail merge region.</para><seealso cref="T:Aspose.Words.MailMerging.MailMerge" />
  ///</remarks>
  [DNTypeName('Aspose.Words.MailMerging.IMailMergeDataSource')]
  DNIMailMergeDataSource = interface(DDN.mscorlib.DNObject)
  ['{0E06BFCC-D9C8-3C46-9492-D81B5491332B}']
  { getters & setters } 

    function get_TableName: string;

  { methods } 

    ///<summary>
    ///  Advances to the next record in the data source.
    ///</summary>
    ///<returns>True if moved to next record successfully. False if reached end of the data source.</returns>
    function MoveNext: Boolean;
    function GetValue(fieldName: string; out fieldValue: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  The Aspose.Words mail merge engine invokes this method when it encounters a beginning of a nested mail merge region.
    ///</summary>
    ///<remarks><para>
    ///  When the Aspose.Words mail merge engines populates a mail merge region with data and encounters the beginning of a nested
    ///  mail merge region in the form of MERGEFIELD TableStart:TableName, it invokes <see cref="M:Aspose.Words.MailMerging.IMailMergeDataSource.GetChildDataSource(System.String)" />
    ///  on the current
    ///  data source object. Your implementation needs to return a new data source object that will provide access to the child
    ///  records of the current parent record. Aspose.Words will use the returned data source to populate the nested mail merge region.
    ///</para><para>
    ///  Below are the rules that the implementation of <see cref="M:Aspose.Words.MailMerging.IMailMergeDataSource.GetChildDataSource(System.String)" />
    ///  must follow.
    ///</para><para>
    ///  If the table that is represented by this data source object has a related child (detail) table with the specified name,
    ///  then your implementation needs to return a new <see cref="T:Aspose.Words.MailMerging.IMailMergeDataSource" />
    ///  object that will provide access
    ///  to the child records of the current record.
    ///  An example of this is Orders / OrderDetails relationship. Let's assume that the current <see cref="T:Aspose.Words.MailMerging.IMailMergeDataSource" />
    ///  object
    ///  represents the Orders table and it has a current order record. Next, Aspose.Words encounters "MERGEFIELD TableStart:OrderDetails"
    ///  in the document and invokes <see cref="M:Aspose.Words.MailMerging.IMailMergeDataSource.GetChildDataSource(System.String)" />
    ///  . You need to create and return a <see cref="T:Aspose.Words.MailMerging.IMailMergeDataSource" />
    ///  object that will allow Aspose.Words to access the OrderDetails record for the current order.
    ///</para><para>
    ///  If this data source object does not have a relation to the table with the specified name, then you need to return
    ///  a <see cref="T:Aspose.Words.MailMerging.IMailMergeDataSource" />
    ///  object that will provide access to all records of the specified table.
    ///</para><para>
    ///  If a table with the specified name does not exist, your implementation should return <c>null</c>.
    ///</para></remarks>
    ///  <param name="tableName">The name of the mail merge region as specified in the template document. Case-insensitive.</param>
    ///<returns>A data source object that will provide access to the data records of the specified table.</returns>
    function GetChildDataSource(tableName: string): DNIMailMergeDataSource;

  { propertys } 

    ///<summary>
    ///  Returns the name of the data source.
    ///</summary>
    ///<remarks><p>If you are implementing <see cref="T:Aspose.Words.MailMerging.IMailMergeDataSource" />
    ///  , return the name of the data
    ///  source from this property.</p>
    ///  <p>Aspose.Words uses this name to match against the mail merge region name specified
    ///  in the template document. The comparison between the data source name and
    ///  the mail merge region name is not case sensitive.</p>
    ///</remarks>
    ///<returns>The name of the data source. Empty string if the data source has no name.</returns>
    property TableName: string read get_TableName;
  end;

  //-------------namespace: Aspose.Words.MailMerging----------------
  ///<summary>
  ///  Implement this interface to allow mail merge from a custom data source with master-detail data.
  ///</summary>
  [DNTypeName('Aspose.Words.MailMerging.IMailMergeDataSourceRoot')]
  DNIMailMergeDataSourceRoot = interface(DDN.mscorlib.DNObject)
  ['{A23255FE-0464-36A4-BCFE-38E4C4073CEA}']
  { methods } 

    ///<summary>
    ///  The Aspose.Words mail merge engine invokes this method when it encounters a beginning of a top-level mail merge region.
    ///</summary>
    ///<remarks><para>
    ///  When the Aspose.Words mail merge engines populates a document with data and encounters MERGEFIELD TableStart:TableName,
    ///  it invokes <see cref="M:Aspose.Words.MailMerging.IMailMergeDataSourceRoot.GetDataSource(System.String)" />
    ///  on this object. Your implementation needs to return a new data source object.
    ///  Aspose.Words will use the returned data source to populate the mail merge region.
    ///</para><para>
    ///  If a data source (table) with the specified name does not exist, your implementation should return <c>null</c>.
    ///</para></remarks>
    ///  <param name="tableName">The name of the mail merge region as specified in the template document. Case-insensitive.</param>
    ///<returns>A data source object that will provide access to the data records of the specified table.</returns>
    function GetDataSource(tableName: string): DNIMailMergeDataSource;

  end;

  //-------------namespace: Aspose.Words.MailMerging----------------
  DNMailMergeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F6E4DE33-5B68-5514-A568-15D1D2A85713}']
  end;

  ///<summary>
  ///  Represents the mail merge functionality.
  ///</summary>
  ///<remarks><p>For mail merge operation to work, the document should contain Word MERGEFIELD and
  ///  optionally NEXT fields. During mail merge operation, merge fields in the document are
  ///  replaced with values from your data source.</p>
  ///  <p>There are two distinct ways to use mail merge: with mail merge regions and without.</p>
  ///  <p>The simplest mail merge is without regions and it is very similar to how mail merge
  ///  works in Word. Use <tt>Execute</tt> methods to merge information from some
  ///  data source such as <b>DataTable</b>
  ///  , <b>DataSet</b>
  ///  , <b>DataView</b>
  ///  , <b>IDataReader</b>
  ///  or an array of objects into your document. The
  ///<b>MailMerge</b>
  ///  object processes all records of the data source and copies and appends
  ///  content of the whole document for each record.</p>
  ///  <p>Note that when <b>MailMerge</b>
  ///  object encounters a NEXT field, it selects next record
  ///  in the data source and continues merging without copying any content.</p>
  ///  <p>Use <tt>ExecuteWithRegions</tt> methods to merge information into a
  ///  document with mail merge regions defined. You can use
  ///<b>DataSet</b>
  ///  , <b>DataTable</b>
  ///  , <b>DataView</b>
  ///  or <b>IDataReader</b>
  ///  as data sources for this operation.</p>
  ///  <p>You need to use mail merge regions if you want to dynamically grow portions inside the
  ///  document. Without mail merge regions whole document will be repeated for every record of
  ///  the data source.</p>
  ///<seealso cref="T:Aspose.Words.Document" />
  ///<seealso cref="P:Aspose.Words.Document.MailMerge" />
  ///</remarks>
  [DNTypeName('Aspose.Words.MailMerging.MailMerge')]
  DNMailMerge = interface(DDN.mscorlib.DNObject)
  ['{B1227389-77D8-338C-A446-DE9889EFBF02}']
  { getters & setters } 

    function get_RegionStartTag: string;
    procedure set_RegionStartTag(value: string);
    function get_RegionEndTag: string;
    procedure set_RegionEndTag(value: string);
    function get_CleanupOptions: DNMailMergeCleanupOptions;
    procedure set_CleanupOptions(value: DNMailMergeCleanupOptions);
    function get_CleanupParagraphsWithPunctuationMarks: Boolean;
    procedure set_CleanupParagraphsWithPunctuationMarks(value: Boolean);
    function get_UseNonMergeFields: Boolean;
    procedure set_UseNonMergeFields(value: Boolean);
    function get_PreserveUnusedTags: Boolean;
    procedure set_PreserveUnusedTags(value: Boolean);
    function get_MergeDuplicateRegions: Boolean;
    procedure set_MergeDuplicateRegions(value: Boolean);
    function get_MergeWholeDocument: Boolean;
    procedure set_MergeWholeDocument(value: Boolean);
    function get_UseWholeParagraphAsRegion: Boolean;
    procedure set_UseWholeParagraphAsRegion(value: Boolean);
    function get_RestartListsAtEachSection: Boolean;
    procedure set_RestartListsAtEachSection(value: Boolean);
    function get_MappedDataFields: DNMappedDataFieldCollection;
    function get_FieldMergingCallback: DNIFieldMergingCallback;
    procedure set_FieldMergingCallback(value: DNIFieldMergingCallback);
    function get_MailMergeCallback: DNIMailMergeCallback;
    procedure set_MailMergeCallback(value: DNIMailMergeCallback);
    function get_TrimWhitespaces: Boolean;
    procedure set_TrimWhitespaces(value: Boolean);
    function get_UnconditionalMergeFieldsAndRegions: Boolean;
    procedure set_UnconditionalMergeFieldsAndRegions(value: Boolean);
    function get_RetainFirstSectionStart: Boolean;
    procedure set_RetainFirstSectionStart(value: Boolean);

  { methods } 

    ///<summary>
    ///  Performs a mail merge from a custom data source.
    ///</summary>
    ///<remarks><p>Use this method to fill mail merge fields in the document with values from
    ///  any data source such as a list or hashtable or objects. You need to write your
    ///  own class that implements the <see cref="T:Aspose.Words.MailMerging.IMailMergeDataSource" />
    ///  interface.</p>
    ///  <p>You can use this method only when <see cref="P:Aspose.Words.Fields.FieldOptions.IsBidiTextSupportedOnUpdate" />
    ///  is false,
    ///  that is you do not need Right-To-Left language (such as Arabic or Hebrew) compatibility.</p>
    ///  <p>This method ignores the <see cref="F:Aspose.Words.MailMerging.MailMergeCleanupOptions.RemoveUnusedRegions" />
    ///  option.</p>
    ///</remarks>
    ///  <param name="dataSource">An object that implements the custom mail merge data source interface.</param>
    procedure Execute(dataSource: DNIMailMergeDataSource); overload;
    ///<overloads>Performs a mail merge operation.</overloads><summary>
    ///  Performs a mail merge operation for a single record.
    ///</summary>
    ///<remarks><p>Use this method to fill mail merge fields in the document with values from
    ///  an array of objects.</p>
    ///  <p>This method merges data for one record only. The array of field names
    ///  and the array of values represent the data of a single record.</p>
    ///  <p>This method does not use mail merge regions.</p>
    ///  <p>This method ignores the <see cref="F:Aspose.Words.MailMerging.MailMergeCleanupOptions.RemoveUnusedRegions" />
    ///  option.</p>
    ///</remarks>
    ///  <param name="fieldNames">Array of merge field names. Field names are not case sensitive.
    ///  If a field name that is not found in the document is encountered, it is ignored.</param>
    ///  <param name="values">Array of values to be inserted into the merge fields.
    ///  Number of elements in this array must be the same as the number of elements in fieldNames.</param>
    procedure Execute(fieldNames: TArray<string>; values: TArray<DDN.mscorlib.DNObject>); overload;
    ///<summary>
    ///  Performs mail merge from a DataTable into the document.
    ///</summary>
    ///<remarks><p>Use this method to fill mail merge fields in the document with values from a
    ///<b>DataTable</b>
    ///  .</p>
    ///  <p>All records from the table are merged into the document.</p>
    ///  <p>You can use NEXT field in the Word document to cause <b>MailMerge</b>
    ///  object to select
    ///  next record from the <b>DataTable</b>
    ///  and continue merging.
    ///  This can be used when creating  documents such as mailing labels.</p>
    ///  <p>When <b>MailMerge</b>
    ///  object reaches end of the main document and there are still more
    ///  rows in the <b>DataTable</b>
    ///  , it copies entire content of
    ///  the main document and appends it to the end of the destination document using a section
    ///  break as a separator.</p>
    ///  <p>This method ignores the <see cref="F:Aspose.Words.MailMerging.MailMergeCleanupOptions.RemoveUnusedRegions" />
    ///  option.</p>
    ///</remarks>
    ///  <param name="table">Table that contains data to be inserted into mail merge fields.
    ///  Field names are not case sensitive.
    ///  If a field name that is not found in the document is encountered, it is ignored.</param>
    procedure Execute(table: DDN.Aspose.Common.DNDataTable); overload;
    ///<summary>
    ///  Performs mail merge from an ADO Recordset object into the document.
    ///</summary>
    ///<remarks><p>This method is useful when you intend to use Aspose.Words classes as
    ///  COM objects from unmanaged code such as an application built using
    ///  ASP or Visual Basic 6.0.</p>
    ///  <p>This method ignores the <see cref="F:Aspose.Words.MailMerging.MailMergeCleanupOptions.RemoveUnusedRegions" />
    ///  option.</p>
    ///  <p>For more information see description of MailMerge.Execute(DataTable).</p>
    ///</remarks>
    ///<example><code>
    ///  [VBScript]
    ///  Dim RS
    ///  Set RS = CreateObject("ADODB.Recordset")
    ///  RS.Open _
    ///  "SELECT TOP 50 * FROM Customers ORDER BY Country, CompanyName", _
    ///  "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=Northwind.mdb"
    ///  Dim License
    ///  Set License = CreateObject("Aspose.Words.License")
    ///  License.SetLicense "C:\MyPath\MyLicense.lic"
    ///  Dim Helper
    ///  Set Helper = CreateObject("Aspose.Words.ComHelper")
    ///  Dim Doc
    ///  Set Doc = Helper.Open("CustomerLabels.doc")
    ///  Doc.MailMerge.ExecuteADO RS
    ///  Doc.Save "C:\MyPath\CustomerLabels Out VBScript.doc"
    ///</code></example><param name="recordset">ADO Recordset or Record object.</param>
    procedure ExecuteADO(recordset: DDN.mscorlib.DNObject);
    ///<summary>
    ///  Performs mail merge from IDataReader into the document.
    ///</summary>
    ///<remarks><p>You can pass <b>SqlDataReader</b>
    ///  or <b>OleDbDataReader</b>
    ///  object into this
    ///  method as a parameter because they both implemented <b>IDataReader</b>
    ///  interface.</p>
    ///  <p>Note this method does not use mail merge regions and for multiple records the
    ///  document will grow by repeating the whole document.</p>
    ///  <p>This method ignores the <see cref="F:Aspose.Words.MailMerging.MailMergeCleanupOptions.RemoveUnusedRegions" />
    ///  option.</p>
    ///</remarks>
    ///  <param name="dataReader">Data source for the mail merge operation.</param>
    procedure Execute(dataReader: DDN.Aspose.Common.DNIDataReader); overload;
    ///<summary>
    ///  Performs mail merge from a DataView into the document.
    ///</summary>
    ///<remarks><p>This method is useful if you retrieve data into a <b>DataTable</b>
    ///  but then
    ///  need to apply a filter or sort before the mail merge.</p>
    ///  <p>Note this method does not use mail merge regions and for multiple records the
    ///  document will grow by repeating the whole document.</p>
    ///  <p>This method ignores the <see cref="F:Aspose.Words.MailMerging.MailMergeCleanupOptions.RemoveUnusedRegions" />
    ///  option.</p>
    ///</remarks>
    ///  <param name="dataView">Data source for the mail merge operation.</param>
    procedure Execute(dataView: DDN.Aspose.Common.DNDataView); overload;
    ///<summary>
    ///  Performs mail merge from a DataRow into the document.
    ///</summary>
    ///<remarks><p>Use this method to fill mail merge fields in the document with values from a <b>DataRow</b>
    ///  .</p>
    ///  <p>This method ignores the <see cref="F:Aspose.Words.MailMerging.MailMergeCleanupOptions.RemoveUnusedRegions" />
    ///  option.</p>
    ///</remarks>
    ///  <param name="row">Row that contains data to be inserted into mail merge fields.
    ///  Field names are not case sensitive.
    ///  If a field name that is not found in the document is encountered, it is ignored.</param>
    procedure Execute(row: DDN.Aspose.Common.DNDataRow); overload;
    ///<summary>
    ///  Performs a mail merge from a custom data source with mail merge regions.
    ///</summary>
    ///<remarks><p>Use this method to fill mail merge fields in the document with values from
    ///  any custom data source such as an XML file or collections of business objects. You need to write your
    ///  own class that implements the <see cref="T:Aspose.Words.MailMerging.IMailMergeDataSource" />
    ///  interface.</p>
    ///  <p>You can use this method only when <see cref="P:Aspose.Words.Fields.FieldOptions.IsBidiTextSupportedOnUpdate" />
    ///  is false,
    ///  that is you do not need Right-To-Left language (such as Arabic or Hebrew) compatibility.</p>
    ///</remarks>
    ///  <param name="dataSource">An object that implements the custom mail merge data source interface.</param>
    procedure ExecuteWithRegions(dataSource: DNIMailMergeDataSource); overload;
    ///<summary>
    ///  Performs a mail merge from a custom data source with mail merge regions.
    ///</summary>
    ///<remarks><p>Use this method to fill mail merge fields in the document with values from
    ///  any custom data source such as an XML file or collections of business objects. You need to write your own classes
    ///  that implement the <see cref="T:Aspose.Words.MailMerging.IMailMergeDataSourceRoot" />
    ///  and <see cref="T:Aspose.Words.MailMerging.IMailMergeDataSource" />
    ///  interfaces.</p>
    ///  <p>You can use this method only when <see cref="P:Aspose.Words.Fields.FieldOptions.IsBidiTextSupportedOnUpdate" />
    ///  is false,
    ///  that is you do not need Right-To-Left language (such as Arabic or Hebrew) compatibility.</p>
    ///</remarks>
    ///  <param name="dataSourceRoot">An object that implements the custom mail merge data source root interface.</param>
    procedure ExecuteWithRegions(dataSourceRoot: DNIMailMergeDataSourceRoot); overload;
    ///<overloads>Performs a mail merge operation into a document with mail merge regions. Supports parent-child (master-detail) data sources and nested mail merge regions.</overloads><summary>
    ///  Performs mail merge from a DataSet into a document with mail merge regions.
    ///</summary>
    ///<remarks><p>Use this method to perform mail merge from one or more tables into repeatable mail
    ///  merge regions in the document. The mail merge regions inside the document will dynamically
    ///  grow to accommodate records in the corresponding tables.</p>
    ///  <p>Every table in the DataSet must have a name.</p>
    ///  <p>The document must have mail merge regions defined with names that refer to the tables
    ///  in the DataSet.</p>
    ///  <p>To specify a mail merge region in the document you need to insert two mail merge fields
    ///  to mark beginning and end of the mail merge region.</p>
    ///  <p>All document content that is included inside a mail merge region will be automatically
    ///  repeated for every record in the DataTable.</p>
    ///  <p>To mark beginning of a mail merge region insert a MERGEFIELD with name TableStart:MyTable,
    ///  where MyTable corresponds to one of the table names in your DataSet.</p>
    ///  <p>To mark the end of the mail merge region insert another MERGEFIELD with name TableEnd:MyTable.</p>
    ///  <p>To insert a MERGEFIELD in Word use Insert/Field command and select MergeField then type the
    ///  name of the field.</p>
    ///  <p>The TableStart and TableEnd fields must be inside the same section in your document.</p>
    ///  <p>If used inside a table, TableStart and TableEnd must be inside the same row in the table.</p>
    ///  <p>Mail merge regions in a document should be well formed (there always needs to be a pair of matching
    ///  TableStart and TableEnd merge fields with the same table name).</p>
    ///</remarks>
    ///  <param name="dataSet">DataSet that contains data to be inserted into mail merge fields.</param>
    procedure ExecuteWithRegions(dataSet: DDN.Aspose.Common.DNDataSet); overload;
    ///<summary>
    ///  Performs mail merge from a DataTable into the document with mail merge regions.
    ///</summary>
    ///<remarks><p>The document must have a mail merge region defined with name that matches
    ///<b>DataTable.TableName</b>
    ///  .</p>
    ///  <p>If there are other mail merge regions defined in the document they are left intact.
    ///  This allows to perform several mail merge operations.</p>
    ///</remarks>
    ///  <param name="dataTable">Data source for the mail merge operation. The table must
    ///  have its <b>TableName</b>
    ///  property set.</param>
    procedure ExecuteWithRegions(dataTable: DDN.Aspose.Common.DNDataTable); overload;
    ///<summary>
    ///  Performs mail merge from an ADO Recordset object into the document with mail merge regions.
    ///</summary>
    ///<remarks><p>This method is useful when you intend to use Aspose.Words classes as
    ///  COM objects from unmanaged code such as an application built using
    ///  ASP or Visual Basic 6.0.</p>
    ///  <p>For more information see description of MailMerge.ExecuteWithRegions(DataTable).</p>
    ///</remarks>
    ///<example><code>
    ///  [VBScript]
    ///  Dim RS
    ///  Set RS = CreateObject("ADODB.Recordset")
    ///  RS.Open _
    ///  "SELECT * FROM AsposeWordOrderDetails WHERE OrderId = 10444 ORDER BY ProductID", _
    ///  "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=Northwind.mdb"
    ///  Dim Helper
    ///  Set Helper = CreateObject("Aspose.Words.ComHelper")
    ///  Dim Doc
    ///  Set Doc = Helper.Open("Invoice.doc")
    ///  Doc.MailMerge.ExecuteWithRegionsADO RS, "OrderDetails"
    ///  Doc.Save "Invoice Out VBScript.doc"
    ///</code></example><param name="recordset">ADO Recordset or Record object.</param>
    ///  <param name="tableName">Name of the mail merge region in the document to populate.</param>
    procedure ExecuteWithRegionsADO(recordset: DDN.mscorlib.DNObject; tableName: string);
    ///<summary>
    ///  Performs mail merge from a DataView into the document with mail merge regions.
    ///</summary>
    ///<remarks><p>This method is useful if you retrieve data into a <b>DataTable</b>
    ///  but then
    ///  need to apply a filter or sort before the mail merge.</p>
    ///  <p>The document must have a mail merge region defined with name that matches
    ///<b>DataView.Table.TableName</b>
    ///  .</p>
    ///  <p>If there are other mail merge regions defined in the document they are left intact.
    ///  This allows to perform several mail merge operations.</p>
    ///</remarks>
    ///  <param name="dataView">Data source for the mail merge operation. The source table
    ///  of the <b>DataView</b>
    ///  must have its <b>TableName</b>
    ///  property set.</param>
    procedure ExecuteWithRegions(dataView: DDN.Aspose.Common.DNDataView); overload;
    ///<summary>
    ///  Performs mail merge from IDataReader into the document with mail merge regions.
    ///</summary>
    ///<remarks><p>You can pass <b>SqlDataReader</b>
    ///  or <b>OleDbDataReader</b>
    ///  object into this
    ///  method as a parameter because they both implemented <b>IDataReader</b>
    ///  interface.</p>
    ///</remarks>
    ///  <param name="dataReader">Source of the data records for mail merge such as OleDbDataReader or SqlDataReader.</param>
    ///  <param name="tableName">Name of the mail merge region in the document to populate.</param>
    procedure ExecuteWithRegions(dataReader: DDN.Aspose.Common.DNIDataReader; tableName: string); overload;
    ///<summary>
    ///  Returns a collection of mail merge field names available in the document.
    ///</summary>
    ///<remarks><p>Returns full merge field names including optional prefix. Does not eliminate duplicate field names.</p>
    ///  <p>A new string[] array is created on every call.</p>
    ///  <p>Includes "mustache" field names if <see cref="P:Aspose.Words.MailMerging.MailMerge.UseNonMergeFields" />
    ///  is <b>true</b>
    ///  .</p>
    ///</remarks>
    function GetFieldNames: TArray<string>;
    ///<overloads>Get mail merge field names from the region.</overloads><summary>
    ///  Returns a collection of mail merge field names available in the region.
    ///</summary>
    ///<remarks><p>Returns full merge field names including optional prefix. Does not eliminate duplicate field names.</p>
    ///  <p>If document contains multiple regions with the same name the very first region is processed.</p>
    ///  <p>A new string array is created on every call.</p>
    ///</remarks>
    ///  <param name="regionName">Region name (case-insensitive).</param>
    function GetFieldNamesForRegion(regionName: string): TArray<string>; overload;
    ///<summary>
    ///  Returns a collection of mail merge field names available in the region.
    ///</summary>
    ///<remarks><p>Returns full merge field names including optional prefix. Does not eliminate duplicate field names.</p>
    ///  <p>If document contains multiple regions with the same name the Nth region (zero-based) is processed.</p>
    ///  <p>A new string array is created on every call.</p>
    ///</remarks>
    ///  <param name="regionName">Region name (case-insensitive).</param>
    ///  <param name="regionIndex">Region index (zero-based).</param>
    function GetFieldNamesForRegion(regionName: string; regionIndex: Int32): TArray<string>; overload;
    ///<summary>
    ///  Returns a collection of mail merge regions with the specified name.
    ///</summary>
    ///  <param name="regionName">Region name (case-insensitive).</param>
    ///<returns>The list of regions.</returns>
    function GetRegionsByName(regionName: string): DDN.mscorlib.DNIList<DNMailMergeRegionInfo>;
    ///<summary>
    ///  Returns a full hierarchy of regions (with fields) available in the document.
    ///</summary>
    ///<remarks><p>Hierarchy is returned in the form of the <see cref="T:Aspose.Words.MailMerging.MailMergeRegionInfo" />
    ///  class.</p>
    ///</remarks>
    ///<returns>Regions' hierarchy.</returns>
    function GetRegionsHierarchy: DNMailMergeRegionInfo;
    ///<summary>
    ///  Removes mail merge related fields from the document.
    ///</summary>
    ///<remarks><p>This method removes MERGEFIELD and NEXT fields from the document.</p>
    ///  <p>This method could be useful if your mail merge operation does not always need
    ///  to populate all fields in the document. Use this method to remove all remaining
    ///  mail merge fields.</p>
    ///</remarks>
    procedure DeleteFields;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a mail merge region start tag.
    ///</summary>
    property RegionStartTag: string read get_RegionStartTag write set_RegionStartTag;
    ///<summary>
    ///  Gets or sets a mail merge region end tag.
    ///</summary>
    property RegionEndTag: string read get_RegionEndTag write set_RegionEndTag;
    ///<summary>
    ///  Gets or sets a set of flags that specify what items should be removed during mail merge.
    ///</summary>
    property CleanupOptions: DNMailMergeCleanupOptions read get_CleanupOptions write set_CleanupOptions;
    ///<summary>
    ///  Gets or sets a value indicating whether paragraphs with punctuation marks are considered as empty
    ///  and should be removed if the <see cref="F:Aspose.Words.MailMerging.MailMergeCleanupOptions.RemoveEmptyParagraphs" />
    ///  option is specified.
    ///</summary>
    ///<remarks>
    ///  The default value is <c>true</c>.
    ///</remarks>
    ///<remarks>
    ///  Here is the complete list of cleanable punctuation marks:
    ///<list type="bullet"><item><description>!</description>
    ///</item>
    ///<item><description>,</description>
    ///</item>
    ///<item><description>.</description>
    ///</item>
    ///<item><description>:</description>
    ///</item>
    ///<item><description>;</description>
    ///</item>
    ///<item><description>?</description>
    ///</item>
    ///<item><description>Â¡</description>
    ///</item>
    ///<item><description>Â¿</description>
    ///</item>
    ///</list>
    ///</remarks>
    property CleanupParagraphsWithPunctuationMarks: Boolean read get_CleanupParagraphsWithPunctuationMarks write set_CleanupParagraphsWithPunctuationMarks;
    ///<summary>
    ///  When true, specifies that in addition to MERGEFIELD fields, mail merge is performed into some other types of fields and
    ///  also into "{{fieldName}}" tags.
    ///</summary>
    ///<remarks><p>Normally, mail merge is only performed into MERGEFIELD fields, but several customers had their reporting
    ///  built using other fields and had many documents created this way. To simplify migration (and because this
    ///  approach was independently used by several customers) the ability to mail merge into other fields was introduced.</p>
    ///  <p>When <b>UseNonMergeFields</b>
    ///  is set to true, Aspose.Words will perform mail merge into the following fields:</p>
    ///  <p>MERGEFIELD FieldName</p>
    ///  <p>MACROBUTTON NOMACRO FieldName</p>
    ///  <p>IF 0 = 0 "{FieldName}" ""</p>
    ///  <p>Also, when <b>UserNonMergeFields</b>
    ///  is set to true, Aspose.Words will perform mail merge into text tags
    ///  "{{fieldName}}". These are not fields, but just text tags.</p>
    ///</remarks>
    property UseNonMergeFields: Boolean read get_UseNonMergeFields write set_UseNonMergeFields;
    ///<summary>
    ///  Gets or sets a value indicating whether the unused "mustache" tags should be preserved.
    ///</summary>
    ///<remarks>
    ///  The default value is <b>false</b>
    ///  .
    ///</remarks>
    ///<seealso cref="P:Aspose.Words.MailMerging.MailMerge.UseNonMergeFields" />
    property PreserveUnusedTags: Boolean read get_PreserveUnusedTags write set_PreserveUnusedTags;
    ///<summary>
    ///  Gets or sets a value indicating whether all of the document mail merge regions with the name of a data source
    ///  should be merged while executing of a mail merge with regions against the data source or just the first one.
    ///</summary>
    ///<remarks>
    ///  The default value is <b>false</b>
    ///  .
    ///</remarks>
    property MergeDuplicateRegions: Boolean read get_MergeDuplicateRegions write set_MergeDuplicateRegions;
    ///<summary>
    ///  Gets or sets a value indicating whether fields in whole document are updated while executing of a mail merge with regions.
    ///</summary>
    ///<remarks>
    ///  The default value is <b>false</b>
    ///  .
    ///</remarks>
    property MergeWholeDocument: Boolean read get_MergeWholeDocument write set_MergeWholeDocument;
    ///<summary>
    ///  Gets or sets a value indicating whether whole paragraph with TableStart or TableEnd field
    ///  or particular range between TableStart and TableEnd fields should be included into mail merge region.
    ///</summary>
    ///<remarks>
    ///  The default value is <b>true</b>
    ///  .
    ///</remarks>
    property UseWholeParagraphAsRegion: Boolean read get_UseWholeParagraphAsRegion write set_UseWholeParagraphAsRegion;
    ///<summary>
    ///  Gets or sets a value indicating whether lists are restarted at each section after executing of a mail merge.
    ///</summary>
    ///<remarks>
    ///  The default value is <b>true</b>
    ///  .
    ///</remarks>
    property RestartListsAtEachSection: Boolean read get_RestartListsAtEachSection write set_RestartListsAtEachSection;
    ///<summary>
    ///  Returns a collection that represents mapped data fields for the mail merge operation.
    ///</summary>
    ///<remarks><p>
    ///  Mapped data fields allow to automatically map between names of fields in your data source
    ///  and names of mail merge fields in the document.
    ///</p>
    ///</remarks>
    property MappedDataFields: DNMappedDataFieldCollection read get_MappedDataFields;
    ///<summary>
    ///  Occurs during mail merge when a mail merge field is encountered in the document.
    ///</summary>
    property FieldMergingCallback: DNIFieldMergingCallback read get_FieldMergingCallback write set_FieldMergingCallback;
    ///<summary>
    ///  Allows to handle particular events during mail merge.
    ///</summary>
    property MailMergeCallback: DNIMailMergeCallback read get_MailMergeCallback write set_MailMergeCallback;
    ///<summary>
    ///  Gets or sets a value indicating whether trailing and leading whitespaces are trimmed from mail merge values.
    ///</summary>
    ///<remarks>
    ///  The default value is <b>true</b>
    ///  .
    ///</remarks>
    property TrimWhitespaces: Boolean read get_TrimWhitespaces write set_TrimWhitespaces;
    ///<summary>
    ///  Gets or sets a value indicating whether merge fields and merge regions are merged regardless of the parent IF field's condition.
    ///</summary>
    ///<remarks>
    ///  The default value is <b>false</b>
    ///  .
    ///</remarks>
    property UnconditionalMergeFieldsAndRegions: Boolean read get_UnconditionalMergeFieldsAndRegions write set_UnconditionalMergeFieldsAndRegions;
    ///<summary>
    ///  Gets or sets a value indicating whether the <see cref="P:Aspose.Words.PageSetup.SectionStart" />
    ///  of the first document section and its copies for subsequent data source rows
    ///  are retained during mail merge or updated according to MS Word behaviour.
    ///</summary>
    ///<remarks>
    ///  The default value is <b>true</b>
    ///  .
    ///</remarks>
    property RetainFirstSectionStart: Boolean read get_RetainFirstSectionStart write set_RetainFirstSectionStart;
  end;

  TDNMailMerge = class(TDNGenericImport<DNMailMergeClass, DNMailMerge>) end;

  //-------------namespace: Aspose.Words.MailMerging----------------
  DNMailMergeRegionInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B70F5A91-9B16-5F5A-B81E-4AC8780EE6C6}']
  end;

  ///<summary>
  ///  Contains information about a mail merge region.
  ///</summary>
  [DNTypeName('Aspose.Words.MailMerging.MailMergeRegionInfo')]
  DNMailMergeRegionInfo = interface(DDN.mscorlib.DNObject)
  ['{F3B33259-4459-38A9-8863-2F009D80C30F}']
  { getters & setters } 

    function get_Regions: DDN.mscorlib.DNIList<DNMailMergeRegionInfo>;
    function get_Fields: DDN.mscorlib.DNIList<DNField>;
    function get_Name: string;
    function get_StartField: DNFieldMergeField;
    function get_EndField: DNFieldMergeField;
    function get_Level: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns a list of child regions.
    ///</summary>
    property Regions: DDN.mscorlib.DNIList<DNMailMergeRegionInfo> read get_Regions;
    ///<summary>
    ///  Returns a list of child fields.
    ///</summary>
    property Fields: DDN.mscorlib.DNIList<DNField> read get_Fields;
    ///<summary>
    ///  Returns the name of region.
    ///</summary>
    property Name: string read get_Name;
    ///<summary>
    ///  Returns a start field for the region.
    ///</summary>
    property StartField: DNFieldMergeField read get_StartField;
    ///<summary>
    ///  Returns an end field for the region.
    ///</summary>
    property EndField: DNFieldMergeField read get_EndField;
    ///<summary>
    ///  Returns the nesting level for the region.
    ///</summary>
    property Level: Int32 read get_Level;
  end;

  TDNMailMergeRegionInfo = class(TDNGenericImport<DNMailMergeRegionInfoClass, DNMailMergeRegionInfo>) end;

  //-------------namespace: Aspose.Words.MailMerging----------------
  DNMappedDataFieldCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6BC4DA64-CE78-53D3-B431-B80C08AB9424}']
  end;

  ///<summary>
  ///  Allows to automatically map between names of fields in your data source
  ///  and names of mail merge fields in the document.
  ///</summary>
  ///<remarks><p>This is implemented as a collection of string keys into string values.
  ///  The keys are the names of mail merge fields in the document and the values
  ///  are the names of fields in your data source.</p>
  ///<seealso cref="T:Aspose.Words.MailMerging.MailMerge" />
  ///<seealso cref="P:Aspose.Words.MailMerging.MailMerge.MappedDataFields" />
  ///</remarks>
  [DNTypeName('Aspose.Words.MailMerging.MappedDataFieldCollection')]
  DNMappedDataFieldCollection = interface(DDN.mscorlib.DNObject)
  ['{DC088113-D127-341F-9E9A-E1A0CFFD5928}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(documentFieldName: string): string;
    procedure set_Item(documentFieldName: string; value: string);

  { methods } 

    ///<summary>
    ///  Adds a new field mapping.
    ///</summary>
    ///  <param name="documentFieldName">Case-sensitive name of the mail merge field in the document.</param>
    ///  <param name="dataSourceFieldName">Case-sensitive name of the field in the data source.</param>
    procedure Add(documentFieldName: string; dataSourceFieldName: string);
    ///<summary>
    ///  Determines whether a mapping from the specified field in the document exists in the collection.
    ///</summary>
    ///  <param name="documentFieldName">Case-sensitive name of the mail merge field in the document.</param>
    ///<returns>True if item is found in the collection; otherwise, false.</returns>
    function ContainsKey(documentFieldName: string): Boolean;
    ///<summary>
    ///  Determines whether a mapping from the specified field in the data source exists in the collection.
    ///</summary>
    ///  <param name="dataSourceFieldName">Case-sensitive name of the field in the data source.</param>
    ///<returns>True if item is found in the collection; otherwise, false.</returns>
    function ContainsValue(dataSourceFieldName: string): Boolean;
    ///<summary>
    ///  Removes a field mapping.
    ///</summary>
    ///  <param name="documentFieldName">Case-sensitive name of the mail merge field in the document.</param>
    procedure Remove(documentFieldName: string);
    ///<summary>
    ///  Removes all elements from the collection.
    ///</summary>
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements contained in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[documentFieldName: string]: string read get_Item write set_Item; default;
  end;

  TDNMappedDataFieldCollection = class(TDNGenericImport<DNMappedDataFieldCollectionClass, DNMappedDataFieldCollection>) end;

  //-------------namespace: Aspose.Words.Markup----------------
  DNCustomPartClass = interface(DDN.mscorlib.DNObjectClass)
  ['{87E8E09A-4EE1-5525-BE02-C859779413F7}']
  { constructors } 

    {class} function init: DNCustomPart;

  end;

  ///<summary>
  ///  Represents a custom (arbitrary content) part, that is not defined by the ISO/IEC 29500 standard.
  ///</summary>
  ///<remarks><para>This class represents an OOXML part that is a target of an "unknown relationship".
  ///  All relationships not defined within ISO/IEC 29500 are considered "unknown relationships".
  ///  Unknown relationships are permitted within an Office Open XML document provided that they
  ///  conform to relationship markup guidelines.</para><para>Microsoft Word preserves custom parts during open/save cycles. Some additional info can be found
  ///  here http://blogs.msdn.com/dmahugh/archive/2006/11/25/arbitrary-content-in-an-opc-package.aspx </para><para>Aspose.Words also roundtrips custom parts and in addition, allows to programmatically access
  ///  such parts via the <see cref="T:Aspose.Words.Markup.CustomPart" />
  ///  and <see cref="T:Aspose.Words.Markup.CustomPartCollection" />
  ///  objects.</para><para>Do not confuse custom parts with Custom XML Data. Use <see cref="T:Aspose.Words.Markup.CustomXmlPart" />
  ///  if you need
  ///  to access Custom XML Data.</para><seealso cref="T:Aspose.Words.Markup.CustomPartCollection" />
  ///<seealso cref="P:Aspose.Words.Document.PackageCustomParts" />
  ///</remarks>
  [DNTypeName('Aspose.Words.Markup.CustomPart')]
  DNCustomPart = interface(DDN.mscorlib.DNObject)
  ['{08A02C95-383F-340B-AD58-CDE47ED57C63}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_RelationshipType: string;
    procedure set_RelationshipType(value: string);
    function get_IsExternal: Boolean;
    procedure set_IsExternal(value: Boolean);
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_Data: TArray<Byte>;
    procedure set_Data(value: TArray<Byte>);

  { methods } 

    ///<summary>
    ///  Makes a "deep enough" copy of the object.
    ///  Does not duplicate the bytes of the <see cref="P:Aspose.Words.Markup.CustomPart.Data" />
    ///  value.
    ///</summary>
    function Clone: DNCustomPart;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets this part's absolute name within the OOXML package or the target URL.
    ///</summary>
    ///<remarks><para>If the relationship target is internal, then this property is the absolute part name within the package.
    ///  If the relationship target is external, then this property is the target URL.</para><para>The default value is an empty string. A valid value must be a non-empty string.</para><seealso cref="P:Aspose.Words.Markup.CustomPart.IsExternal" />
    ///</remarks>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets or sets the relationship type from the parent part to this custom part.
    ///</summary>
    ///<remarks><para>The relationship type for a custom part must be "unknown" e.g. a custom relationship type,
    ///  not one of the relationship types defined within ISO/IEC 29500.</para><para>The default value is an empty string. A valid value must be a non-empty string.</para></remarks>
    property RelationshipType: string read get_RelationshipType write set_RelationshipType;
    ///<summary><c>False</c> if this custom part is stored inside the OOXML package. <c>True</c> if this custom part is an external target.
    ///</summary>
    ///<remarks><para>The default value is <c>false</c>.</para><seealso cref="P:Aspose.Words.Markup.CustomPart.Name" />
    ///</remarks>
    property IsExternal: Boolean read get_IsExternal write set_IsExternal;
    ///<summary>
    ///  Specifies the content type of this custom part.
    ///</summary>
    ///<remarks><para>This property is applicable only when <see cref="P:Aspose.Words.Markup.CustomPart.IsExternal" />
    ///  is <c>false</c>.</para><para>The default value is an empty string. A valid value must be a non-empty string.</para></remarks>
    property ContentType: string read get_ContentType write set_ContentType;
    ///<summary>
    ///  Contains the data of this custom part.
    ///</summary>
    ///<remarks><para>This property is applicable only when <see cref="P:Aspose.Words.Markup.CustomPart.IsExternal" />
    ///  is <c>false</c>.</para><para>The default value is an empty byte array. The value cannot be <c>null</c>.</para></remarks>
    property Data: TArray<Byte> read get_Data write set_Data;
  end;

  TDNCustomPart = class(TDNGenericImport<DNCustomPartClass, DNCustomPart>) end;

  //-------------namespace: Aspose.Words.Markup----------------
  DNCustomPartCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4EA16210-BB84-5061-9F01-687D17017252}']
  { constructors } 

    {class} function init: DNCustomPartCollection;

  end;

  ///<summary>
  ///  Represents a collection of <see cref="T:Aspose.Words.Markup.CustomPart" />
  ///  objects.
  ///</summary>
  ///<remarks><para>You do not normally need to create instances of this class. You access custom parts
  ///  related to the OOXML package via the <see cref="P:Aspose.Words.Document.PackageCustomParts" />
  ///  property.</para><seealso cref="T:Aspose.Words.Markup.CustomPart" />
  ///<seealso cref="P:Aspose.Words.Document.PackageCustomParts" />
  ///</remarks>
  [DNTypeName('Aspose.Words.Markup.CustomPartCollection')]
  DNCustomPartCollection = interface(DDN.mscorlib.DNObject)
  ['{9E601C52-4878-3B04-80AD-C26FEE55B3D6}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNCustomPart;
    procedure set_Item(index: Int32; value: DNCustomPart);

  { methods } 

    ///<summary>
    ///  Returns an enumerator object that can be used to iterate over all items in the collection.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNCustomPart>;
    ///<summary>
    ///  Adds an item to the collection.
    ///</summary>
    ///  <param name="part">The item to add.</param>
    procedure Add(part: DNCustomPart);
    ///<summary>
    ///  Removes an item at the specified index.
    ///</summary>
    ///  <param name="index">The zero based index.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all elements from the collection.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Makes a deep copy of this collection and its items.
    ///</summary>
    function Clone: DNCustomPartCollection;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements contained in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNCustomPart read get_Item write set_Item; default;
  end;

  TDNCustomPartCollection = class(TDNGenericImport<DNCustomPartCollectionClass, DNCustomPartCollection>) end;

  //-------------namespace: Aspose.Words.Markup----------------
  DNCustomXmlPartClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D94DF793-5F50-5484-8F46-0498513F697B}']
  { constructors } 

    {class} function init: DNCustomXmlPart;

  end;

  ///<summary>
  ///  Represents a Custom XML Data Storage Part (custom XML data within a package).
  ///</summary>
  ///<remarks><para>A DOCX or DOC document can contain one or more Custom XML Data Storage parts. Aspose.Words preserves and
  ///  allows to create and extract Custom XML Data via the <see cref="P:Aspose.Words.Document.CustomXmlParts" />
  ///  collection.</para><seealso cref="P:Aspose.Words.Document.CustomXmlParts" />
  ///<seealso cref="T:Aspose.Words.Markup.CustomXmlPartCollection" />
  ///</remarks>
  [DNTypeName('Aspose.Words.Markup.CustomXmlPart')]
  DNCustomXmlPart = interface(DDN.mscorlib.DNObject)
  ['{14AFE0EE-0567-3BB0-9939-E76DEB4A72CA}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Schemas: DNCustomXmlSchemaCollection;
    function get_Data: TArray<Byte>;
    procedure set_Data(value: TArray<Byte>);
    function get_DataChecksum: Int64;

  { methods } 

    ///<summary>
    ///  Makes a "deep enough" copy of the object.
    ///  Does not duplicate the bytes of the <see cref="P:Aspose.Words.Markup.CustomXmlPart.Data" />
    ///  value.
    ///</summary>
    function Clone: DNCustomXmlPart;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the string that identifies this custom XML part within an OOXML document.
    ///</summary>
    ///<remarks><para>ISO/IEC 29500 specifies that this value is a GUID, but old versions of Microsoft Word allowed any
    ///  string here. Aspose.Words does the same for ECMA-376 format. But note, that Microsoft Word Online fails
    ///  to open a document created with a non-GUID value. So, a GUID is preferred value for this property.</para><para>A valid value must be an identifier that is unique among all custom XML data parts in this document.
    ///</para><para>The default value is an empty string. The value cannot be <c>null</c>.</para></remarks>
    property Id: string read get_Id write set_Id;
    ///<summary>
    ///  Specifies the set of XML schemas that are associated with this custom XML part.
    ///</summary>
    property Schemas: DNCustomXmlSchemaCollection read get_Schemas;
    ///<summary>
    ///  Gets or sets the XML content of this Custom XML Data Storage Part.
    ///</summary>
    ///<remarks><para>The default value is an empty byte array. The value cannot be <c>null</c>.</para></remarks>
    property Data: TArray<Byte> read get_Data write set_Data;
    property DataChecksum: Int64 read get_DataChecksum;
  end;

  TDNCustomXmlPart = class(TDNGenericImport<DNCustomXmlPartClass, DNCustomXmlPart>) end;

  //-------------namespace: Aspose.Words.Markup----------------
  DNCustomXmlPartCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0E444485-AF1F-58C1-B6A2-A4E25BE8A4AE}']
  { constructors } 

    {class} function init: DNCustomXmlPartCollection;

  end;

  ///<summary>
  ///  Represents a collection of Custom XML Parts. The items are <see cref="T:Aspose.Words.Markup.CustomXmlPart" />
  ///  objects.
  ///</summary>
  ///<remarks><para>You do not normally need to create instances of this class. You can access custom XML data
  ///  stored in a document via the <see cref="P:Aspose.Words.Document.CustomXmlParts" />
  ///  property.</para><seealso cref="T:Aspose.Words.Markup.CustomXmlPart" />
  ///<seealso cref="P:Aspose.Words.Document.CustomXmlParts" />
  ///</remarks>
  [DNTypeName('Aspose.Words.Markup.CustomXmlPartCollection')]
  DNCustomXmlPartCollection = interface(DDN.mscorlib.DNObject)
  ['{E70D3EC1-D1B5-3315-931D-FAA559C70596}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNCustomXmlPart;
    procedure set_Item(index: Int32; value: DNCustomXmlPart);

  { methods } 

    ///<summary>
    ///  Returns an enumerator object that can be used to iterate over all items in the collection.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNCustomXmlPart>;
    ///<summary>
    ///  Adds an item to the collection.
    ///</summary>
    ///  <param name="part">The custom XML part to add.</param>
    procedure Add(part: DNCustomXmlPart); overload;
    ///<summary>
    ///  Creates a new XML part with the specified XML and adds it to the collection.
    ///</summary>
    ///  <param name="id">Identifier of a new custom XML part.</param>
    ///  <param name="xml">XML data of the part.</param>
    ///<returns>Created custom XML part.</returns>
    function Add(id: string; xml: string): DNCustomXmlPart; overload;
    ///<summary>
    ///  Removes an item at the specified index.
    ///</summary>
    ///  <param name="index">The zero based index.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all elements from the collection.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Finds and returns a custom XML part by its identifier.
    ///</summary>
    ///  <param name="id">Case-sensitive string that identifies the custom XML part.</param>
    ///<returns>Returns <c>null</c> if a custom XML part with the specified identifier is not found.</returns>
    function GetById(id: string): DNCustomXmlPart;
    ///<summary>
    ///  Makes a deep copy of this collection and its items.
    ///</summary>
    function Clone: DNCustomXmlPartCollection;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements contained in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNCustomXmlPart read get_Item write set_Item; default;
  end;

  TDNCustomXmlPartCollection = class(TDNGenericImport<DNCustomXmlPartCollectionClass, DNCustomXmlPartCollection>) end;

  //-------------namespace: Aspose.Words.Markup----------------
  DNCustomXmlPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{133ACAE9-835A-51A0-831E-7C97C74016C1}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class.
    ///</summary>
    ///  <param name="name">The name of the property. Cannot be null.</param>
    ///  <param name="uri">The namespace URI of the property. Cannot be null.</param>
    ///  <param name="value">The value of the property. Cannot be null.</param>
    {class} function init(name: string; uri: string; value: string): DNCustomXmlProperty;

  end;

  ///<summary>
  ///  Represents a single custom XML attribute or a smart tag property.
  ///</summary>
  ///<remarks><para>Used as an item of a <see cref="T:Aspose.Words.Markup.CustomXmlPropertyCollection" />
  ///  collection.</para></remarks>
  [DNTypeName('Aspose.Words.Markup.CustomXmlProperty')]
  DNCustomXmlProperty = interface(DDN.mscorlib.DNObject)
  ['{8B82CAC3-860A-3D49-BF97-EE2CB171FA52}']
  { getters & setters } 

    function get_Name: string;
    function get_Uri: string;
    procedure set_Uri(value: string);
    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the name of the custom XML attribute or smart tag property.
    ///</summary>
    ///<remarks><para>Cannot be null.</para><para>Default is empty string.</para></remarks>
    property Name: string read get_Name;
    ///<summary>
    ///  Gets or sets the namespace URI of the custom XML attribute or smart tag property.
    ///</summary>
    ///<remarks><para>Cannot be null.</para><para>Default is empty string.</para></remarks>
    property Uri: string read get_Uri write set_Uri;
    ///<summary>
    ///  Gets or sets the value of the custom XML attribute or smart tag property.
    ///</summary>
    ///<remarks><para>Cannot be null.</para><para>Default is empty string.</para></remarks>
    property Value: string read get_Value write set_Value;
  end;

  TDNCustomXmlProperty = class(TDNGenericImport<DNCustomXmlPropertyClass, DNCustomXmlProperty>) end;

  //-------------namespace: Aspose.Words.Markup----------------
  DNCustomXmlPropertyCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C977FFCF-EF49-58CE-8B89-EA33AACB7A1B}']
  end;

  ///<summary>
  ///  Represents a collection of custom XML attributes or smart tag properties.
  ///</summary>
  ///<remarks><para>Items are <see cref="T:Aspose.Words.Markup.CustomXmlProperty" />
  ///  objects.</para></remarks>
  [DNTypeName('Aspose.Words.Markup.CustomXmlPropertyCollection')]
  DNCustomXmlPropertyCollection = interface(DDN.mscorlib.DNObject)
  ['{1AFB79C6-C954-30CB-AB64-210F0FF2C3D2}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(name: string): DNCustomXmlProperty; overload;
    function get_Item(index: Int32): DNCustomXmlProperty; overload;

  { methods } 

    ///<summary>
    ///  Returns an enumerator object that can be used to iterate over all items in the collection.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNCustomXmlProperty>;
    ///<summary>
    ///  Adds a property to the collection.
    ///</summary>
    ///  <param name="property">The property to add.</param>
    procedure Add(&property: DNCustomXmlProperty);
    ///<summary>
    ///  Determines whether the collection contains a property with the given name.
    ///</summary>
    ///  <param name="name">Case-sensitive name of the property to locate.</param>
    ///<returns>True if the item is found in the collection; otherwise, false.</returns>
    function &Contains(name: string): Boolean;
    ///<summary>
    ///  Returns the zero-based index of the specified property in the collection.
    ///</summary>
    ///  <param name="name">The case-sensitive name of the property.</param>
    ///<returns>The zero based index. Negative value if not found.</returns>
    function IndexOfKey(name: string): Int32;
    ///<summary>
    ///  Removes a property with the specified name from the collection.
    ///</summary>
    ///  <param name="name">The case-sensitive name of the property.</param>
    procedure Remove(name: string);
    ///<summary>
    ///  Removes a property at the specified index.
    ///</summary>
    ///  <param name="index">The zero based index.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all elements from the collection.
    ///</summary>
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements contained in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[name: string]: DNCustomXmlProperty read get_Item; default;
    property Item[index: Int32]: DNCustomXmlProperty read get_Item; default;
  end;

  TDNCustomXmlPropertyCollection = class(TDNGenericImport<DNCustomXmlPropertyCollectionClass, DNCustomXmlPropertyCollection>) end;

  //-------------namespace: Aspose.Words.Markup----------------
  DNCustomXmlSchemaCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{283DB25B-A3BC-52C9-B90A-DFF4ABD21761}']
  end;

  ///<summary>
  ///  A collection of strings that represent XML schemas that are associated with a custom XML part.
  ///</summary>
  ///<remarks><para>You do not create instances of this class. You access the collection of XML schemas of a custom XML part
  ///  via the <see cref="P:Aspose.Words.Markup.CustomXmlPart.Schemas" />
  ///  property.</para><seealso cref="T:Aspose.Words.Markup.CustomXmlPart" />
  ///<seealso cref="P:Aspose.Words.Markup.CustomXmlPart.Schemas" />
  ///</remarks>
  [DNTypeName('Aspose.Words.Markup.CustomXmlSchemaCollection')]
  DNCustomXmlSchemaCollection = interface(DDN.mscorlib.DNObject)
  ['{5BD9D4EB-77CD-3EEE-AEA5-B6AC0EF495B0}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): string;
    procedure set_Item(index: Int32; value: string);

  { methods } 

    ///<summary>
    ///  Returns an enumerator object that can be used to iterate over all items in the collection.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<string>;
    ///<summary>
    ///  Adds an item to the collection.
    ///</summary>
    ///  <param name="value">The item to add.</param>
    procedure Add(value: string);
    ///<summary>
    ///  Returns the zero-based index of the specified value in the collection.
    ///</summary>
    ///  <param name="value">The case-sensitive value to locate.</param>
    ///<returns>The zero based index. Negative value if not found.</returns>
    function IndexOf(value: string): Int32;
    ///<summary>
    ///  Removes the specified value from the collection.
    ///</summary>
    ///  <param name="name">The case-sensitive value to remove.</param>
    procedure Remove(name: string);
    ///<summary>
    ///  Removes a value at the specified index.
    ///</summary>
    ///  <param name="index">The zero based index.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all elements from the collection.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Makes a deep clone of this object.
    ///</summary>
    function Clone: DNCustomXmlSchemaCollection;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements contained in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: string read get_Item write set_Item; default;
  end;

  TDNCustomXmlSchemaCollection = class(TDNGenericImport<DNCustomXmlSchemaCollectionClass, DNCustomXmlSchemaCollection>) end;

  //-------------namespace: Aspose.Words.Markup----------------
  DNSdtListItemClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D7BB0759-2D94-5985-A118-5C7658978A39}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class.
    ///</summary>
    {class} function init(displayText: string; value: string): DNSdtListItem; overload;
    ///<summary>
    ///  Initializes a new instance of this class.
    ///</summary>
    {class} function init(value: string): DNSdtListItem; overload;

  end;

  ///<summary>
  ///  This element specifies a single list item within a parent <see cref="F:Aspose.Words.Markup.SdtType.ComboBox" />
  ///  or <see cref="F:Aspose.Words.Markup.SdtType.DropDownList" />
  ///  structured document tag.
  ///</summary>
  [DNTypeName('Aspose.Words.Markup.SdtListItem')]
  DNSdtListItem = interface(DDN.mscorlib.DNObject)
  ['{1A3357CD-DC48-3483-902A-99E46B735644}']
  { getters & setters } 

    function get_DisplayText: string;
    function get_Value: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the text to display in the run content in place of the <see cref="P:Aspose.Words.Markup.SdtListItem.Value" />
    ///  attribute contents for this list item.
    ///</summary>
    ///<remarks><para>Cannot be null and cannot be an empty string.</para></remarks>
    property DisplayText: string read get_DisplayText;
    ///<summary>
    ///  Gets the value of this list item.
    ///</summary>
    ///<remarks><para>Cannot be null and cannot be an empty string.</para></remarks>
    property Value: string read get_Value;
  end;

  TDNSdtListItem = class(TDNGenericImport<DNSdtListItemClass, DNSdtListItem>) end;

  //-------------namespace: Aspose.Words.Markup----------------
  DNSdtListItemCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AB41A8FA-2453-56FF-B0A6-3176B98E84BE}']
  end;

  ///<summary>
  ///  Provides access to <see cref="T:Aspose.Words.Markup.SdtListItem" />
  ///  elements of a structured document tag.
  ///</summary>
  [DNTypeName('Aspose.Words.Markup.SdtListItemCollection')]
  DNSdtListItemCollection = interface(DDN.mscorlib.DNObject)
  ['{5F1C7879-05AC-3C1A-B8E3-0100F304F587}']
  { getters & setters } 

    function get_SelectedValue: DNSdtListItem;
    procedure set_SelectedValue(value: DNSdtListItem);
    function get_Item(index: Int32): DNSdtListItem;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Returns an enumerator object that can be used to iterate over all items in the collection.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNSdtListItem>;
    ///<summary>
    ///  Adds an item to this collection.
    ///</summary>
    procedure Add(item: DNSdtListItem);
    ///<summary>
    ///  Removes a list item at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index of the item to remove.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Clears all items from this collection.
    ///</summary>
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies currently selected value in this list.
    ///  Null value allowed, meaning that no currently selected entry is associated with this list item collection.
    ///</summary>
    property SelectedValue: DNSdtListItem read get_SelectedValue write set_SelectedValue;
    property Item[index: Int32]: DNSdtListItem read get_Item; default;
    ///<summary>
    ///  Gets number of items in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNSdtListItemCollection = class(TDNGenericImport<DNSdtListItemCollectionClass, DNSdtListItemCollection>) end;

  //-------------namespace: Aspose.Words.Markup----------------
  DNXmlMappingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C606C29E-5D16-52BE-B11D-AC588E7722DC}']
  end;

  ///<summary>
  ///  Specifies the information that is used to establish a mapping between the parent
  ///  structured document tag and an XML element stored within a custom XML data part in the document.
  ///</summary>
  [DNTypeName('Aspose.Words.Markup.XmlMapping')]
  DNXmlMapping = interface(DDN.mscorlib.DNObject)
  ['{35E2EF04-B042-337D-BEFD-F724D74C8CF9}']
  { getters & setters } 

    function get_PrefixMappings: string;
    function get_XPath: string;
    function get_CustomXmlPart: DNCustomXmlPart;
    function get_IsMapped: Boolean;
    function get_StoreItemId: string;

  { methods } 

    ///<summary>
    ///  Sets a mapping between the parent structured document tag and an XML node of a custom XML data part.
    ///</summary>
    ///  <param name="customXmlPart">A custom XML data part to map to.</param>
    ///  <param name="xPath">An XPath expression to find the XML node.</param>
    ///  <param name="prefixMapping">XML namespace prefix mappings to evaluate the XPath.</param>
    ///<returns>A flag indicating whether the parent structured document tag is successfully mapped to
    ///  the XML node.</returns>
    function SetMapping(customXmlPart: DNCustomXmlPart; xPath: string; prefixMapping: string): Boolean;
    ///<summary>
    ///  Deletes mapping of the parent structured document to XML data.
    ///</summary>
    procedure Delete;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns XML namespace prefix mappings to evaluate the <see cref="P:Aspose.Words.Markup.XmlMapping.XPath" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Specifies the set of prefix mappings, which shall be used to interpret the XPath expression
    ///  when the XPath expression is evaluated against the custom XML data parts in the document.
    ///</remarks>
    property PrefixMappings: string read get_PrefixMappings;
    ///<summary>
    ///  Returns the XPath expression, which is evaluated to find the custom XML node
    ///  that is mapped to the parent structured document tag.
    ///</summary>
    property XPath: string read get_XPath;
    ///<summary>
    ///  Returns the custom XML data part to which the parent structured document tag is mapped.
    ///</summary>
    property CustomXmlPart: DNCustomXmlPart read get_CustomXmlPart;
    ///<summary>
    ///  Returns <b>true</b>
    ///  if the parent structured document tag is successfully mapped to XML data.
    ///</summary>
    property IsMapped: Boolean read get_IsMapped;
    ///<summary>
    ///  Specifies the custom XML data identifier for the custom XML data part which
    ///  shall be used to evaluate the <see cref="P:Aspose.Words.Markup.XmlMapping.XPath" />
    ///  expression.
    ///</summary>
    property StoreItemId: string read get_StoreItemId;
  end;

  TDNXmlMapping = class(TDNGenericImport<DNXmlMappingClass, DNXmlMapping>) end;

  //-------------namespace: Aspose.Words----------------
  DNMeteredClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EEB973C2-BC04-5CE6-96F4-9A7C1D760E2D}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class.
    ///</summary>
    {class} function init: DNMetered;

  { static methods } 

    ///<summary>
    ///  Gets consumption file size
    ///</summary>
    ///<returns>consumption quantity</returns>
    {class} function GetConsumptionQuantity: DDN.mscorlib.DNDecimal;
    ///<summary>
    ///  Gets consumption credit
    ///</summary>
    ///<returns>consumption quantity</returns>
    {class} function GetConsumptionCredit: DDN.mscorlib.DNDecimal;

  end;

  ///<summary>
  ///  Provides methods to set metered key.
  ///</summary>
  ///<example>
  ///  In this example, an attempt will be made to set metered public and private key
  ///<code>
  ///  [C#]
  ///  Metered matered = new Metered();
  ///  matered.SetMeteredKey("PublicKey", "PrivateKey");
  ///  [Visual Basic]
  ///  Dim matered As Metered = New Metered
  ///  matered.SetMeteredKey("PublicKey", "PrivateKey")
  ///</code></example>
  [DNTypeName('Aspose.Words.Metered')]
  DNMetered = interface(DDN.mscorlib.DNObject)
  ['{2BFC2C85-8174-3E26-9E59-FF7624CBF96B}']
  { methods } 

    ///<summary>
    ///  Sets metered public and private key.
    ///  If you purchase metered license, when start application, this API should be called, normally, this is enough.
    ///  However, if always fail to upload consumption data and exceed 24 hours, the license will be set to evaluation status,
    ///  to avoid such case, you should regularly check the license status, if it is evaluation status, call this API again.
    ///</summary>
    ///  <param name="publicKey">public key</param>
    ///  <param name="privateKey">private key</param>
    procedure SetMeteredKey(publicKey: string; privateKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMetered = class(TDNGenericImport<DNMeteredClass, DNMetered>) end;

  //-------------namespace: Aspose.Words----------------
  DNNodeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C477094C-A317-59E9-9218-DF9A214224E3}']
  { static methods } 

    ///<summary>
    ///  A utility method that converts a node type enum value into a user friendly string.
    ///</summary>
    {class} function NodeTypeToString(nodeType: DNNodeType): string;

  end;

  ///<summary>
  ///  Base class for all nodes of a Word document.
  ///</summary>
  ///<remarks><p>A document is represented as a tree of nodes, similar to DOM or XmlDocument.</p>
  ///  <p>For more info see the Composite design pattern.</p>
  ///  <p>The <see cref="T:Aspose.Words.Node" />
  ///  class:</p>
  ///<list type="bullet"><item>Defines the child node interface.</item>
  ///<item>Defines the interface for visiting nodes.</item>
  ///<item>Provides default cloning capability.</item>
  ///<item>Implements parent node and owner document mechanisms.</item>
  ///<item>Implements access to sibling nodes.</item>
  ///</list>
  ///</remarks>
  [DNTypeName('Aspose.Words.Node')]
  DNNode = interface(DDN.mscorlib.DNObject)
  ['{A14CC93F-167B-361D-9F27-268FE8F75577}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Creates a duplicate of the node.
    ///</summary>
    ///<remarks><p>This method serves as a copy constructor for nodes.
    ///  The cloned node has no parent, but belongs to the same document as the original node.</p>
    ///  <p>This method always performs a deep copy of the node. The <i>isCloneChildren</i> parameter
    ///  specifies whether to perform copy all child nodes as well.</p>
    ///</remarks>
    ///  <param name="isCloneChildren">True to recursively clone the subtree under the specified node;
    ///  false to clone only the node itself.</param>
    ///<returns>The cloned node.</returns>
    ///<dev>
    ///  You should use the <see cref="M:Aspose.Words.Node.Clone(System.Boolean,Aspose.Words.INodeCloningListener)" />
    ///  overload when
    ///  the node cloning is a part of another (usually composite) node cloning process.
    ///  And you should pass down the <see cref="T:Aspose.Words.INodeCloningListener" />
    ///  parameter in this case.
    ///</dev>
    function Clone(isCloneChildren: Boolean): DNNode;
    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the nodes.</param>
    ///<returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Gets the text of this node and of all its children.
    ///</summary>
    ///<remarks><p>The returned string includes all control and special characters as described in <see cref="T:Aspose.Words.ControlChar" />
    ///  .</p>
    ///</remarks>
    function GetText: string;
    ///<summary>
    ///  Gets the first ancestor of the specified object type.
    ///</summary>
    ///  <param name="ancestorType">The object type of the ancestor to retrieve.</param>
    ///<returns>The ancestor of the specified type or null if no ancestor of this type was found.</returns>
    ///<remarks><p>The ancestor type matches if it is equal to ancestorType or derived from ancestorType.</p>
    ///</remarks>
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    ///<summary>
    ///  Gets the first ancestor of the specified <see cref="T:Aspose.Words.NodeType" />
    ///  .
    ///</summary>
    ///  <param name="ancestorType">The node type of the ancestor to retrieve.</param>
    ///<returns>The ancestor of the specified type or null if no ancestor of this type was found.</returns>
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    ///<summary>
    ///  Removes itself from the parent.
    ///</summary>
    procedure Remove;
    ///<summary>
    ///  Gets next node according to the pre-order tree traversal algorithm.
    ///</summary>
    ///  <param name="rootNode">The top node (limit) of traversal.</param>
    ///<returns>Next node in pre-order order. Null if reached the rootNode.</returns>
    function NextPreOrder(rootNode: DNNode): DNNode;
    ///<summary>
    ///  Gets the previous node according to the pre-order tree traversal algorithm.
    ///</summary>
    ///  <param name="rootNode">The top node (limit) of traversal.</param>
    ///<returns>Previous node in pre-order order. Null if reached the rootNode.</returns>
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    ///<summary>
    ///  Exports the content of the node into a string in the specified format.
    ///</summary>
    ///<returns>The content of the node in the specified format.</returns>
    function ToString(saveFormat: DNSaveFormat): string; overload;
    ///<summary>
    ///  Exports the content of the node into a string using the specified save options.
    ///</summary>
    ///  <param name="saveOptions">Specifies the options that control how the node is saved.</param>
    ///<returns>The content of the node in the specified format.</returns>
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Gets the type of this node.
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Gets the immediate parent of this node.
    ///</summary>
    ///<remarks><p>If a node has just been created and not yet added to the tree,
    ///  or if it has been removed from the tree, the parent is null.</p>
    ///</remarks>
    property ParentNode: DNCompositeNode read get_ParentNode;
    ///<summary>
    ///  Gets the document to which this node belongs.
    ///</summary>
    ///<remarks><p>The node always belongs to a document even if it has just been created
    ///  and not yet added to the tree, or if it has been removed from the tree.</p>
    ///</remarks>
    property Document: DNDocumentBase read get_Document;
    ///<summary>
    ///  Gets the node immediately preceding this node.
    ///</summary>
    ///<remarks>
    ///  If there is no preceding node, a null is returned.
    ///</remarks>
    property PreviousSibling: DNNode read get_PreviousSibling;
    ///<summary>
    ///  Gets the node immediately following this node.
    ///</summary>
    ///<remarks>
    ///  If there is no next node, a null is returned.
    ///</remarks>
    property NextSibling: DNNode read get_NextSibling;
    ///<summary>
    ///  Returns true if this node can contain other nodes.
    ///</summary>
    ///<value>This method returns false as Node cannot have child nodes.</value>
    property IsComposite: Boolean read get_IsComposite;
    ///<summary>
    ///  Returns a <b>Range</b>
    ///  object that represents the portion of a document that is contained in this node.
    ///</summary>
    property Range: DNRange read get_Range;
    ///<summary>
    ///  Specifies custom node identifier.
    ///</summary>
    ///<remarks><p>Default is zero.</p>
    ///  <p>This identifier can be set and used arbitrarily. For example, as a key to get external data.</p>
    ///  <p>Important note, specified value is not saved to an output file and exists only during the node lifetime.</p>
    ///</remarks>
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNNode = class(TDNGenericImport<DNNodeClass, DNNode>) end;

  //-------------namespace: Aspose.Words----------------
  DNBookmarkEndClass = interface(DNNodeClass)
  ['{58720A46-8F3E-5C1D-A5B5-CE50515848A5}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Words.BookmarkEnd" />
    ///  class.
    ///</summary>
    ///  <param name="doc">The owner document.</param>
    ///  <param name="name">The name of the bookmark. Cannot be null.</param>
    {class} function init(doc: DNDocumentBase; name: string): DNBookmarkEnd;

  end;

  ///<summary>
  ///  Represents an end of a bookmark in a Word document.
  ///</summary>
  ///<remarks><p>A complete bookmark in a Word document consists of a <see cref="T:Aspose.Words.BookmarkStart" />
  ///  and a matching <see cref="T:Aspose.Words.BookmarkEnd" />
  ///  with the same bookmark name.</p>
  ///  <p><see cref="T:Aspose.Words.BookmarkStart" />
  ///  and <see cref="T:Aspose.Words.BookmarkEnd" />
  ///  are just markers inside a document
  ///  that specify where the bookmark starts and ends.</p>
  ///  <p>Use the <see cref="T:Aspose.Words.Bookmark" />
  ///  class as a "facade" to work with a bookmark
  ///  as a single object.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.BookmarkEnd')]
  DNBookmarkEnd = interface(DNNode)
  ['{B83EFD09-0CF3-361E-B837-CE2812593C0B}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Calls <see cref="M:Aspose.Words.DocumentVisitor.VisitBookmarkEnd(Aspose.Words.BookmarkEnd)" />
    ///  .</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the node.</param>
    ///<returns>False if the visitor requested the enumeration to stop.</returns>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Creates a duplicate of the node.
    ///</summary>
    ///<remarks><p>This method serves as a copy constructor for nodes.
    ///  The cloned node has no parent, but belongs to the same document as the original node.</p>
    ///  <p>This method always performs a deep copy of the node. The <i>isCloneChildren</i> parameter
    ///  specifies whether to perform copy all child nodes as well.</p>
    ///</remarks>
    ///  <param name="isCloneChildren">True to recursively clone the subtree under the specified node;
    ///  false to clone only the node itself.</param>
    ///<returns>The cloned node.</returns>
    ///<dev>
    ///  You should use the <see cref="M:Aspose.Words.Node.Clone(System.Boolean,Aspose.Words.INodeCloningListener)" />
    ///  overload when
    ///  the node cloning is a part of another (usually composite) node cloning process.
    ///  And you should pass down the <see cref="T:Aspose.Words.INodeCloningListener" />
    ///  parameter in this case.
    ///</dev>
    function Clone(isCloneChildren: Boolean): DNNode;
    ///<summary>
    ///  Gets the text of this node and of all its children.
    ///</summary>
    ///<remarks><p>The returned string includes all control and special characters as described in <see cref="T:Aspose.Words.ControlChar" />
    ///  .</p>
    ///</remarks>
    function GetText: string;
    ///<summary>
    ///  Gets the first ancestor of the specified object type.
    ///</summary>
    ///  <param name="ancestorType">The object type of the ancestor to retrieve.</param>
    ///<returns>The ancestor of the specified type or null if no ancestor of this type was found.</returns>
    ///<remarks><p>The ancestor type matches if it is equal to ancestorType or derived from ancestorType.</p>
    ///</remarks>
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    ///<summary>
    ///  Gets the first ancestor of the specified <see cref="T:Aspose.Words.NodeType" />
    ///  .
    ///</summary>
    ///  <param name="ancestorType">The node type of the ancestor to retrieve.</param>
    ///<returns>The ancestor of the specified type or null if no ancestor of this type was found.</returns>
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    ///<summary>
    ///  Removes itself from the parent.
    ///</summary>
    procedure Remove;
    ///<summary>
    ///  Gets next node according to the pre-order tree traversal algorithm.
    ///</summary>
    ///  <param name="rootNode">The top node (limit) of traversal.</param>
    ///<returns>Next node in pre-order order. Null if reached the rootNode.</returns>
    function NextPreOrder(rootNode: DNNode): DNNode;
    ///<summary>
    ///  Gets the previous node according to the pre-order tree traversal algorithm.
    ///</summary>
    ///  <param name="rootNode">The top node (limit) of traversal.</param>
    ///<returns>Previous node in pre-order order. Null if reached the rootNode.</returns>
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    ///<summary>
    ///  Exports the content of the node into a string in the specified format.
    ///</summary>
    ///<returns>The content of the node in the specified format.</returns>
    function ToString(saveFormat: DNSaveFormat): string; overload;
    ///<summary>
    ///  Exports the content of the node into a string using the specified save options.
    ///</summary>
    ///  <param name="saveOptions">Specifies the options that control how the node is saved.</param>
    ///<returns>The content of the node in the specified format.</returns>
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Returns <see cref="F:Aspose.Words.NodeType.BookmarkEnd" />
    ///  .
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Gets or sets the bookmark name.
    ///</summary>
    ///<remarks><para>Cannot be null.</para></remarks>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets the immediate parent of this node.
    ///</summary>
    ///<remarks><p>If a node has just been created and not yet added to the tree,
    ///  or if it has been removed from the tree, the parent is null.</p>
    ///</remarks>
    property ParentNode: DNCompositeNode read get_ParentNode;
    ///<summary>
    ///  Gets the document to which this node belongs.
    ///</summary>
    ///<remarks><p>The node always belongs to a document even if it has just been created
    ///  and not yet added to the tree, or if it has been removed from the tree.</p>
    ///</remarks>
    property Document: DNDocumentBase read get_Document;
    ///<summary>
    ///  Gets the node immediately preceding this node.
    ///</summary>
    ///<remarks>
    ///  If there is no preceding node, a null is returned.
    ///</remarks>
    property PreviousSibling: DNNode read get_PreviousSibling;
    ///<summary>
    ///  Gets the node immediately following this node.
    ///</summary>
    ///<remarks>
    ///  If there is no next node, a null is returned.
    ///</remarks>
    property NextSibling: DNNode read get_NextSibling;
    ///<summary>
    ///  Returns true if this node can contain other nodes.
    ///</summary>
    ///<value>This method returns false as Node cannot have child nodes.</value>
    property IsComposite: Boolean read get_IsComposite;
    ///<summary>
    ///  Returns a <b>Range</b>
    ///  object that represents the portion of a document that is contained in this node.
    ///</summary>
    property Range: DNRange read get_Range;
    ///<summary>
    ///  Specifies custom node identifier.
    ///</summary>
    ///<remarks><p>Default is zero.</p>
    ///  <p>This identifier can be set and used arbitrarily. For example, as a key to get external data.</p>
    ///  <p>Important note, specified value is not saved to an output file and exists only during the node lifetime.</p>
    ///</remarks>
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNBookmarkEnd = class(TDNGenericImport<DNBookmarkEndClass, DNBookmarkEnd>) end;

  //-------------namespace: Aspose.Words----------------
  DNBookmarkStartClass = interface(DNNodeClass)
  ['{7430C894-3609-5D33-BA21-71E71F601872}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Words.BookmarkStart" />
    ///  class.
    ///</summary>
    ///  <param name="doc">The owner document.</param>
    ///  <param name="name">The name of the bookmark. Cannot be null.</param>
    {class} function init(doc: DNDocumentBase; name: string): DNBookmarkStart;

  end;

  ///<summary>
  ///  Represents a start of a bookmark in a Word document.
  ///</summary>
  ///<remarks><p>A complete bookmark in a Word document consists of a <see cref="T:Aspose.Words.BookmarkStart" />
  ///  and a matching <see cref="T:Aspose.Words.BookmarkEnd" />
  ///  with the same bookmark name.</p>
  ///  <p><see cref="T:Aspose.Words.BookmarkStart" />
  ///  and <see cref="T:Aspose.Words.BookmarkEnd" />
  ///  are just markers inside a document
  ///  that specify where the bookmark starts and ends.</p>
  ///  <p>Use the <see cref="P:Aspose.Words.BookmarkStart.Bookmark" />
  ///  class as a "facade" to work with a bookmark
  ///  as a single object.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.BookmarkStart')]
  DNBookmarkStart = interface(DNNode)
  ['{E7E2D9BE-5B02-3C88-AC5F-008BBB3F9F4D}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_Bookmark: DNBookmark;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Calls <see cref="M:Aspose.Words.DocumentVisitor.VisitBookmarkStart(Aspose.Words.BookmarkStart)" />
    ///  .</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the node.</param>
    ///<returns>False if the visitor requested the enumeration to stop.</returns>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Returns an empty string.
    ///</summary>
    ///<returns>An empty string.</returns>
    function GetText: string;
    ///<summary>
    ///  Creates a duplicate of the node.
    ///</summary>
    ///<remarks><p>This method serves as a copy constructor for nodes.
    ///  The cloned node has no parent, but belongs to the same document as the original node.</p>
    ///  <p>This method always performs a deep copy of the node. The <i>isCloneChildren</i> parameter
    ///  specifies whether to perform copy all child nodes as well.</p>
    ///</remarks>
    ///  <param name="isCloneChildren">True to recursively clone the subtree under the specified node;
    ///  false to clone only the node itself.</param>
    ///<returns>The cloned node.</returns>
    ///<dev>
    ///  You should use the <see cref="M:Aspose.Words.Node.Clone(System.Boolean,Aspose.Words.INodeCloningListener)" />
    ///  overload when
    ///  the node cloning is a part of another (usually composite) node cloning process.
    ///  And you should pass down the <see cref="T:Aspose.Words.INodeCloningListener" />
    ///  parameter in this case.
    ///</dev>
    function Clone(isCloneChildren: Boolean): DNNode;
    ///<summary>
    ///  Gets the first ancestor of the specified object type.
    ///</summary>
    ///  <param name="ancestorType">The object type of the ancestor to retrieve.</param>
    ///<returns>The ancestor of the specified type or null if no ancestor of this type was found.</returns>
    ///<remarks><p>The ancestor type matches if it is equal to ancestorType or derived from ancestorType.</p>
    ///</remarks>
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    ///<summary>
    ///  Gets the first ancestor of the specified <see cref="T:Aspose.Words.NodeType" />
    ///  .
    ///</summary>
    ///  <param name="ancestorType">The node type of the ancestor to retrieve.</param>
    ///<returns>The ancestor of the specified type or null if no ancestor of this type was found.</returns>
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    ///<summary>
    ///  Removes itself from the parent.
    ///</summary>
    procedure Remove;
    ///<summary>
    ///  Gets next node according to the pre-order tree traversal algorithm.
    ///</summary>
    ///  <param name="rootNode">The top node (limit) of traversal.</param>
    ///<returns>Next node in pre-order order. Null if reached the rootNode.</returns>
    function NextPreOrder(rootNode: DNNode): DNNode;
    ///<summary>
    ///  Gets the previous node according to the pre-order tree traversal algorithm.
    ///</summary>
    ///  <param name="rootNode">The top node (limit) of traversal.</param>
    ///<returns>Previous node in pre-order order. Null if reached the rootNode.</returns>
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    ///<summary>
    ///  Exports the content of the node into a string in the specified format.
    ///</summary>
    ///<returns>The content of the node in the specified format.</returns>
    function ToString(saveFormat: DNSaveFormat): string; overload;
    ///<summary>
    ///  Exports the content of the node into a string using the specified save options.
    ///</summary>
    ///  <param name="saveOptions">Specifies the options that control how the node is saved.</param>
    ///<returns>The content of the node in the specified format.</returns>
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Returns <see cref="F:Aspose.Words.NodeType.BookmarkStart" />
    ///  .
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Gets the facade object that encapsulates this bookmark start and end.
    ///</summary>
    property Bookmark: DNBookmark read get_Bookmark;
    ///<summary>
    ///  Gets or sets the bookmark name.
    ///</summary>
    ///<remarks><para>Cannot be null.</para></remarks>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets the immediate parent of this node.
    ///</summary>
    ///<remarks><p>If a node has just been created and not yet added to the tree,
    ///  or if it has been removed from the tree, the parent is null.</p>
    ///</remarks>
    property ParentNode: DNCompositeNode read get_ParentNode;
    ///<summary>
    ///  Gets the document to which this node belongs.
    ///</summary>
    ///<remarks><p>The node always belongs to a document even if it has just been created
    ///  and not yet added to the tree, or if it has been removed from the tree.</p>
    ///</remarks>
    property Document: DNDocumentBase read get_Document;
    ///<summary>
    ///  Gets the node immediately preceding this node.
    ///</summary>
    ///<remarks>
    ///  If there is no preceding node, a null is returned.
    ///</remarks>
    property PreviousSibling: DNNode read get_PreviousSibling;
    ///<summary>
    ///  Gets the node immediately following this node.
    ///</summary>
    ///<remarks>
    ///  If there is no next node, a null is returned.
    ///</remarks>
    property NextSibling: DNNode read get_NextSibling;
    ///<summary>
    ///  Returns true if this node can contain other nodes.
    ///</summary>
    ///<value>This method returns false as Node cannot have child nodes.</value>
    property IsComposite: Boolean read get_IsComposite;
    ///<summary>
    ///  Returns a <b>Range</b>
    ///  object that represents the portion of a document that is contained in this node.
    ///</summary>
    property Range: DNRange read get_Range;
    ///<summary>
    ///  Specifies custom node identifier.
    ///</summary>
    ///<remarks><p>Default is zero.</p>
    ///  <p>This identifier can be set and used arbitrarily. For example, as a key to get external data.</p>
    ///  <p>Important note, specified value is not saved to an output file and exists only during the node lifetime.</p>
    ///</remarks>
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNBookmarkStart = class(TDNGenericImport<DNBookmarkStartClass, DNBookmarkStart>) end;

  //-------------namespace: Aspose.Words----------------
  DNCommentRangeEndClass = interface(DNNodeClass)
  ['{FC3FDA86-BAB0-51E3-BB1D-1DDDAE5CC2EF}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class.
    ///</summary>
    ///<remarks><p>When <see cref="T:Aspose.Words.CommentRangeEnd" />
    ///  is created, it belongs to the specified document, but is not
    ///  yet part of the document and <see cref="P:Aspose.Words.Node.ParentNode" />
    ///  is null.</p>
    ///  <p>To append a <see cref="T:Aspose.Words.CommentRangeEnd" />
    ///  to the document use InsertAfter or InsertBefore
    ///  on the paragraph where you want the comment inserted.</p>
    ///</remarks>
    ///  <param name="doc">The owner document.</param>
    ///  <param name="id">The comment identifier to which this object is linked.</param>
    {class} function init(doc: DNDocumentBase; id: Int32): DNCommentRangeEnd;

  end;

  ///<summary>
  ///  Denotes the end of a region of text that has a comment associated with it.
  ///</summary>
  ///<remarks><para>To create a comment anchored to a region of text, you need to create a <see cref="T:Aspose.Words.Comment" />
  ///  and
  ///  then create <see cref="T:Aspose.Words.CommentRangeStart" />
  ///  and <see cref="T:Aspose.Words.CommentRangeEnd" />
  ///  and set their identifiers
  ///  to the same <see cref="P:Aspose.Words.Comment.Id" />
  ///  value.</para><p><see cref="T:Aspose.Words.CommentRangeEnd" />
  ///  is an inline-level node and can only be a child of <see cref="T:Aspose.Words.Paragraph" />
  ///  .</p>
  ///<seealso cref="T:Aspose.Words.Comment" />
  ///<seealso cref="T:Aspose.Words.CommentRangeStart" />
  ///</remarks>
  [DNTypeName('Aspose.Words.CommentRangeEnd')]
  DNCommentRangeEnd = interface(DNNode)
  ['{EEBF26B1-962E-371F-A537-0560A2DB3A90}']
  { getters & setters } 

    function get_Id: Int32;
    procedure set_Id(value: Int32);
    function get_NodeType: DNNodeType;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Calls <see cref="M:Aspose.Words.DocumentVisitor.VisitCommentRangeEnd(Aspose.Words.CommentRangeEnd)" />
    ///  .</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the node.</param>
    ///<returns>False if the visitor requested the enumeration to stop.</returns>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Creates a duplicate of the node.
    ///</summary>
    ///<remarks><p>This method serves as a copy constructor for nodes.
    ///  The cloned node has no parent, but belongs to the same document as the original node.</p>
    ///  <p>This method always performs a deep copy of the node. The <i>isCloneChildren</i> parameter
    ///  specifies whether to perform copy all child nodes as well.</p>
    ///</remarks>
    ///  <param name="isCloneChildren">True to recursively clone the subtree under the specified node;
    ///  false to clone only the node itself.</param>
    ///<returns>The cloned node.</returns>
    ///<dev>
    ///  You should use the <see cref="M:Aspose.Words.Node.Clone(System.Boolean,Aspose.Words.INodeCloningListener)" />
    ///  overload when
    ///  the node cloning is a part of another (usually composite) node cloning process.
    ///  And you should pass down the <see cref="T:Aspose.Words.INodeCloningListener" />
    ///  parameter in this case.
    ///</dev>
    function Clone(isCloneChildren: Boolean): DNNode;
    ///<summary>
    ///  Gets the text of this node and of all its children.
    ///</summary>
    ///<remarks><p>The returned string includes all control and special characters as described in <see cref="T:Aspose.Words.ControlChar" />
    ///  .</p>
    ///</remarks>
    function GetText: string;
    ///<summary>
    ///  Gets the first ancestor of the specified object type.
    ///</summary>
    ///  <param name="ancestorType">The object type of the ancestor to retrieve.</param>
    ///<returns>The ancestor of the specified type or null if no ancestor of this type was found.</returns>
    ///<remarks><p>The ancestor type matches if it is equal to ancestorType or derived from ancestorType.</p>
    ///</remarks>
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    ///<summary>
    ///  Gets the first ancestor of the specified <see cref="T:Aspose.Words.NodeType" />
    ///  .
    ///</summary>
    ///  <param name="ancestorType">The node type of the ancestor to retrieve.</param>
    ///<returns>The ancestor of the specified type or null if no ancestor of this type was found.</returns>
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    ///<summary>
    ///  Removes itself from the parent.
    ///</summary>
    procedure Remove;
    ///<summary>
    ///  Gets next node according to the pre-order tree traversal algorithm.
    ///</summary>
    ///  <param name="rootNode">The top node (limit) of traversal.</param>
    ///<returns>Next node in pre-order order. Null if reached the rootNode.</returns>
    function NextPreOrder(rootNode: DNNode): DNNode;
    ///<summary>
    ///  Gets the previous node according to the pre-order tree traversal algorithm.
    ///</summary>
    ///  <param name="rootNode">The top node (limit) of traversal.</param>
    ///<returns>Previous node in pre-order order. Null if reached the rootNode.</returns>
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    ///<summary>
    ///  Exports the content of the node into a string in the specified format.
    ///</summary>
    ///<returns>The content of the node in the specified format.</returns>
    function ToString(saveFormat: DNSaveFormat): string; overload;
    ///<summary>
    ///  Exports the content of the node into a string using the specified save options.
    ///</summary>
    ///  <param name="saveOptions">Specifies the options that control how the node is saved.</param>
    ///<returns>The content of the node in the specified format.</returns>
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Specifies the identifier of the comment to which this region is linked to.
    ///</summary>
    property Id: Int32 read get_Id write set_Id;
    ///<summary>
    ///  Returns <see cref="F:Aspose.Words.NodeType.CommentRangeEnd" />
    ///  .
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Gets the immediate parent of this node.
    ///</summary>
    ///<remarks><p>If a node has just been created and not yet added to the tree,
    ///  or if it has been removed from the tree, the parent is null.</p>
    ///</remarks>
    property ParentNode: DNCompositeNode read get_ParentNode;
    ///<summary>
    ///  Gets the document to which this node belongs.
    ///</summary>
    ///<remarks><p>The node always belongs to a document even if it has just been created
    ///  and not yet added to the tree, or if it has been removed from the tree.</p>
    ///</remarks>
    property Document: DNDocumentBase read get_Document;
    ///<summary>
    ///  Gets the node immediately preceding this node.
    ///</summary>
    ///<remarks>
    ///  If there is no preceding node, a null is returned.
    ///</remarks>
    property PreviousSibling: DNNode read get_PreviousSibling;
    ///<summary>
    ///  Gets the node immediately following this node.
    ///</summary>
    ///<remarks>
    ///  If there is no next node, a null is returned.
    ///</remarks>
    property NextSibling: DNNode read get_NextSibling;
    ///<summary>
    ///  Returns true if this node can contain other nodes.
    ///</summary>
    ///<value>This method returns false as Node cannot have child nodes.</value>
    property IsComposite: Boolean read get_IsComposite;
    ///<summary>
    ///  Returns a <b>Range</b>
    ///  object that represents the portion of a document that is contained in this node.
    ///</summary>
    property Range: DNRange read get_Range;
    ///<summary>
    ///  Specifies custom node identifier.
    ///</summary>
    ///<remarks><p>Default is zero.</p>
    ///  <p>This identifier can be set and used arbitrarily. For example, as a key to get external data.</p>
    ///  <p>Important note, specified value is not saved to an output file and exists only during the node lifetime.</p>
    ///</remarks>
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNCommentRangeEnd = class(TDNGenericImport<DNCommentRangeEndClass, DNCommentRangeEnd>) end;

  //-------------namespace: Aspose.Words----------------
  DNCommentRangeStartClass = interface(DNNodeClass)
  ['{97002D44-D496-5587-807B-C5C24C89FA9D}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class.
    ///</summary>
    ///<remarks><p>When <see cref="T:Aspose.Words.CommentRangeStart" />
    ///  is created, it belongs to the specified document, but is not
    ///  yet part of the document and <see cref="P:Aspose.Words.Node.ParentNode" />
    ///  is null.</p>
    ///  <p>To append a <see cref="T:Aspose.Words.CommentRangeStart" />
    ///  to the document use InsertAfter or InsertBefore
    ///  on the paragraph where you want the comment inserted.</p>
    ///</remarks>
    ///  <param name="doc">The owner document.</param>
    ///  <param name="id">The comment identifier to which this object is linked.</param>
    {class} function init(doc: DNDocumentBase; id: Int32): DNCommentRangeStart;

  end;

  ///<summary>
  ///  Denotes the start of a region of text that has a comment associated with it.
  ///</summary>
  ///<remarks><para>To create a comment anchored to a region of text, you need to create a <see cref="T:Aspose.Words.Comment" />
  ///  and
  ///  then create <see cref="T:Aspose.Words.CommentRangeStart" />
  ///  and <see cref="T:Aspose.Words.CommentRangeEnd" />
  ///  and set their identifiers
  ///  to the same <see cref="P:Aspose.Words.Comment.Id" />
  ///  value.</para><p><see cref="T:Aspose.Words.CommentRangeStart" />
  ///  is an inline-level node and can only be a child of <see cref="T:Aspose.Words.Paragraph" />
  ///  .</p>
  ///<seealso cref="T:Aspose.Words.Comment" />
  ///<seealso cref="T:Aspose.Words.CommentRangeEnd" />
  ///</remarks>
  [DNTypeName('Aspose.Words.CommentRangeStart')]
  DNCommentRangeStart = interface(DNNode)
  ['{94C19A42-FD39-3069-A6EA-0E5C5819DB91}']
  { getters & setters } 

    function get_Id: Int32;
    procedure set_Id(value: Int32);
    function get_NodeType: DNNodeType;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Calls <see cref="M:Aspose.Words.DocumentVisitor.VisitCommentRangeStart(Aspose.Words.CommentRangeStart)" />
    ///  .</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the node.</param>
    ///<returns>False if the visitor requested the enumeration to stop.</returns>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Creates a duplicate of the node.
    ///</summary>
    ///<remarks><p>This method serves as a copy constructor for nodes.
    ///  The cloned node has no parent, but belongs to the same document as the original node.</p>
    ///  <p>This method always performs a deep copy of the node. The <i>isCloneChildren</i> parameter
    ///  specifies whether to perform copy all child nodes as well.</p>
    ///</remarks>
    ///  <param name="isCloneChildren">True to recursively clone the subtree under the specified node;
    ///  false to clone only the node itself.</param>
    ///<returns>The cloned node.</returns>
    ///<dev>
    ///  You should use the <see cref="M:Aspose.Words.Node.Clone(System.Boolean,Aspose.Words.INodeCloningListener)" />
    ///  overload when
    ///  the node cloning is a part of another (usually composite) node cloning process.
    ///  And you should pass down the <see cref="T:Aspose.Words.INodeCloningListener" />
    ///  parameter in this case.
    ///</dev>
    function Clone(isCloneChildren: Boolean): DNNode;
    ///<summary>
    ///  Gets the text of this node and of all its children.
    ///</summary>
    ///<remarks><p>The returned string includes all control and special characters as described in <see cref="T:Aspose.Words.ControlChar" />
    ///  .</p>
    ///</remarks>
    function GetText: string;
    ///<summary>
    ///  Gets the first ancestor of the specified object type.
    ///</summary>
    ///  <param name="ancestorType">The object type of the ancestor to retrieve.</param>
    ///<returns>The ancestor of the specified type or null if no ancestor of this type was found.</returns>
    ///<remarks><p>The ancestor type matches if it is equal to ancestorType or derived from ancestorType.</p>
    ///</remarks>
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    ///<summary>
    ///  Gets the first ancestor of the specified <see cref="T:Aspose.Words.NodeType" />
    ///  .
    ///</summary>
    ///  <param name="ancestorType">The node type of the ancestor to retrieve.</param>
    ///<returns>The ancestor of the specified type or null if no ancestor of this type was found.</returns>
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    ///<summary>
    ///  Removes itself from the parent.
    ///</summary>
    procedure Remove;
    ///<summary>
    ///  Gets next node according to the pre-order tree traversal algorithm.
    ///</summary>
    ///  <param name="rootNode">The top node (limit) of traversal.</param>
    ///<returns>Next node in pre-order order. Null if reached the rootNode.</returns>
    function NextPreOrder(rootNode: DNNode): DNNode;
    ///<summary>
    ///  Gets the previous node according to the pre-order tree traversal algorithm.
    ///</summary>
    ///  <param name="rootNode">The top node (limit) of traversal.</param>
    ///<returns>Previous node in pre-order order. Null if reached the rootNode.</returns>
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    ///<summary>
    ///  Exports the content of the node into a string in the specified format.
    ///</summary>
    ///<returns>The content of the node in the specified format.</returns>
    function ToString(saveFormat: DNSaveFormat): string; overload;
    ///<summary>
    ///  Exports the content of the node into a string using the specified save options.
    ///</summary>
    ///  <param name="saveOptions">Specifies the options that control how the node is saved.</param>
    ///<returns>The content of the node in the specified format.</returns>
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Specifies the identifier of the comment to which this region is linked.
    ///</summary>
    property Id: Int32 read get_Id write set_Id;
    ///<summary>
    ///  Returns <see cref="F:Aspose.Words.NodeType.CommentRangeStart" />
    ///  .
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Gets the immediate parent of this node.
    ///</summary>
    ///<remarks><p>If a node has just been created and not yet added to the tree,
    ///  or if it has been removed from the tree, the parent is null.</p>
    ///</remarks>
    property ParentNode: DNCompositeNode read get_ParentNode;
    ///<summary>
    ///  Gets the document to which this node belongs.
    ///</summary>
    ///<remarks><p>The node always belongs to a document even if it has just been created
    ///  and not yet added to the tree, or if it has been removed from the tree.</p>
    ///</remarks>
    property Document: DNDocumentBase read get_Document;
    ///<summary>
    ///  Gets the node immediately preceding this node.
    ///</summary>
    ///<remarks>
    ///  If there is no preceding node, a null is returned.
    ///</remarks>
    property PreviousSibling: DNNode read get_PreviousSibling;
    ///<summary>
    ///  Gets the node immediately following this node.
    ///</summary>
    ///<remarks>
    ///  If there is no next node, a null is returned.
    ///</remarks>
    property NextSibling: DNNode read get_NextSibling;
    ///<summary>
    ///  Returns true if this node can contain other nodes.
    ///</summary>
    ///<value>This method returns false as Node cannot have child nodes.</value>
    property IsComposite: Boolean read get_IsComposite;
    ///<summary>
    ///  Returns a <b>Range</b>
    ///  object that represents the portion of a document that is contained in this node.
    ///</summary>
    property Range: DNRange read get_Range;
    ///<summary>
    ///  Specifies custom node identifier.
    ///</summary>
    ///<remarks><p>Default is zero.</p>
    ///  <p>This identifier can be set and used arbitrarily. For example, as a key to get external data.</p>
    ///  <p>Important note, specified value is not saved to an output file and exists only during the node lifetime.</p>
    ///</remarks>
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNCommentRangeStart = class(TDNGenericImport<DNCommentRangeStartClass, DNCommentRangeStart>) end;

  //-------------namespace: Aspose.Words----------------
  DNCompositeNodeClass = interface(DNNodeClass)
  ['{8818376B-D2B7-5586-9B58-EBB6D1872177}']
  end;

  ///<summary>
  ///  Base class for nodes that can contain other nodes.
  ///</summary>
  ///<remarks><p>A document is represented as a tree of nodes, similar to DOM or XmlDocument.</p>
  ///  <p>For more info see the Composite design pattern.</p>
  ///  <p>The <see cref="T:Aspose.Words.CompositeNode" />
  ///  class:</p>
  ///<list type="bullet"><item>Provides access to the child nodes.</item>
  ///<item>Implements Composite operations such as insert and remove children.</item>
  ///<item>Provides methods for XPath navigation.</item>
  ///</list>
  ///</remarks>
  ///<dev>
  ///  Maintains a pointer to the list of children.
  ///  Provides helper methods to insert or remove a whole range of nodes.
  ///  Inserting and removing children are the most important features here.
  ///  Public API methods for insert and remove verify the arguments well and raise the insert/delete
  ///  node events to the owner document.
  ///  The child nodes are stored in a doubly linked list and the composite node knows its first and last children.
  ///  This approach was taken from XmlElement (with addition of doubly linking). Inserting or removing a node just
  ///  means updating the PrevSibling, NextSibling and ParentNode of the appropriate nodes.
  ///</dev>
  [DNTypeName('Aspose.Words.CompositeNode')]
  DNCompositeNode = interface(DNNode)
  ['{91ED26EF-F4AF-3C93-BD5B-0B6CE222B99C}']
  { getters & setters } 

    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_NodeType: DNNodeType;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Gets the text of this node and of all its children.
    ///</summary>
    ///<remarks><p>The returned string includes all control and special characters as described in <see cref="T:Aspose.Words.ControlChar" />
    ///  .</p>
    ///</remarks>
    function GetText: string;
    ///<overloads>Returns a collection of child nodes that match the specified type.</overloads><summary>
    ///  Returns a live collection of child nodes that match the specified type.
    ///</summary>
    ///<remarks><p>The collection of nodes returned by this method is always live.</p>
    ///<remarks><p>A live collection is always in sync with the document. For example, if you
    ///  selected all sections in a document and enumerate through the collection
    ///  deleting the sections, the section is removed from the collection immediately
    ///  when it is removed from the document.</p>
    ///</remarks>
    ///</remarks>
    ///  <param name="nodeType">Specifies the type of nodes to select.</param>
    ///  <param name="isDeep">True to select from all child nodes recursively.
    ///  False to select only among immediate children. </param>
    ///<returns>A live collection of child nodes of the specified type.</returns>
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    ///<summary>
    ///  Returns an Nth child node that matches the specified type.
    ///</summary>
    ///<remarks><p>If index is out of range, a null is returned.</p>
    ///</remarks>
    ///  <param name="nodeType">Specifies the type of the child node.</param>
    ///  <param name="index">Zero based index of the child node to select.
    ///  Negative indexes are also allowed and indicate access from the end,
    ///  that is -1 means the last node.</param>
    ///  <param name="isDeep">True to select from all child nodes recursively.
    ///  False to select only among immediate children. See remarks for more info.</param>
    ///<returns>The child node that matches the criteria or null if no matching node is found.</returns>
    ///<remarks>Note that markup nodes (<see cref="F:Aspose.Words.NodeType.StructuredDocumentTag" />
    ///  and <see cref="F:Aspose.Words.NodeType.SmartTag" />
    ///  )
    ///  are traversed even when isDeep = false and GetChild is invoked for non-markup node type. For example if the first run in a para
    ///  is wrapped in a StructuredDocumentTag, it will still be returned by GetChild(NodeType.Run, 0, false).</remarks>
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    ///<summary>
    ///  Selects a list of nodes matching the XPath expression.
    ///</summary>
    ///<remarks><p>Only expressions with element names are supported at the moment. Expressions
    ///  that use attribute names are not supported.</p>
    ///</remarks>
    ///  <param name="xpath">The XPath expression.</param>
    ///<returns>A list of nodes matching the XPath query.</returns>
    function SelectNodes(xpath: string): DNNodeList;
    ///<summary>
    ///  Selects the first Node that matches the XPath expression.
    ///</summary>
    ///<remarks><p>Only expressions with element names are supported at the moment. Expressions
    ///  that use attribute names are not supported.</p>
    ///</remarks>
    ///  <param name="xpath">The XPath expression.</param>
    ///<returns>The first Node that matches the XPath query or null if no matching node is found.</returns>
    function SelectSingleNode(xpath: string): DNNode;
    ///<summary>
    ///  Provides support for the for each style iteration over the child nodes of this node.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    ///<summary>
    ///  Adds the specified node to the end of the list of child nodes for this node.
    ///</summary>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The node to add.</param>
    ///<returns>The node added.</returns>
    function AppendChild(newChild: DNNode): DNNode;
    ///<summary>
    ///  Adds the specified node to the beginning of the list of child nodes for this node.
    ///</summary>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The node to add.</param>
    ///<returns>The node added.</returns>
    function PrependChild(newChild: DNNode): DNNode;
    ///<summary>
    ///  Inserts the specified node immediately after the specified reference node.
    ///</summary>
    ///<remarks><p>If refChild is null, inserts newChild at the beginning of the list of child nodes.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The Node to insert.</param>
    ///  <param name="refChild">The Node that is the reference node. The newNode is placed after the refNode. </param>
    ///<returns>The inserted node.</returns>
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    ///<summary>
    ///  Inserts the specified node immediately before the specified reference node.
    ///</summary>
    ///<remarks><p>If refChild is null, inserts newChild at the end of the list of child nodes.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The Node to insert.</param>
    ///  <param name="refChild">The Node that is the reference node. The newChild is placed before this node.</param>
    ///<returns>The inserted node.</returns>
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    ///<summary>
    ///  Removes the specified child node.
    ///</summary>
    ///<remarks><p>The parent of oldChild is set to null after the node is removed.</p>
    ///</remarks>
    ///  <param name="oldChild">The node to remove.</param>
    ///<returns>The removed node.</returns>
    function RemoveChild(oldChild: DNNode): DNNode;
    ///<summary>
    ///  Removes all the child nodes of the current node.
    ///</summary>
    procedure RemoveAllChildren;
    ///<summary>
    ///  Removes all <see cref="T:Aspose.Words.Markup.SmartTag" />
    ///  descendant nodes of the current node.
    ///</summary>
    ///<remarks>This method does not remove the content of the smart tags.</remarks>
    procedure RemoveSmartTags;
    ///<summary>
    ///  Returns the index of the specified child node in the child node array.
    ///</summary>
    ///<remarks>
    ///  Returns -1 if the node is not found in the child nodes.
    ///</remarks>
    function IndexOf(child: DNNode): Int32;
    ///<summary>
    ///  Reserved for system use. IXPathNavigable.
    ///</summary>
    function CreateNavigator: DDN.Aspose.Common.DNXPathNavigator;
    ///<summary>
    ///  Creates a duplicate of the node.
    ///</summary>
    ///<remarks><p>This method serves as a copy constructor for nodes.
    ///  The cloned node has no parent, but belongs to the same document as the original node.</p>
    ///  <p>This method always performs a deep copy of the node. The <i>isCloneChildren</i> parameter
    ///  specifies whether to perform copy all child nodes as well.</p>
    ///</remarks>
    ///  <param name="isCloneChildren">True to recursively clone the subtree under the specified node;
    ///  false to clone only the node itself.</param>
    ///<returns>The cloned node.</returns>
    ///<dev>
    ///  You should use the <see cref="M:Aspose.Words.Node.Clone(System.Boolean,Aspose.Words.INodeCloningListener)" />
    ///  overload when
    ///  the node cloning is a part of another (usually composite) node cloning process.
    ///  And you should pass down the <see cref="T:Aspose.Words.INodeCloningListener" />
    ///  parameter in this case.
    ///</dev>
    function Clone(isCloneChildren: Boolean): DNNode;
    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the nodes.</param>
    ///<returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Gets the first ancestor of the specified object type.
    ///</summary>
    ///  <param name="ancestorType">The object type of the ancestor to retrieve.</param>
    ///<returns>The ancestor of the specified type or null if no ancestor of this type was found.</returns>
    ///<remarks><p>The ancestor type matches if it is equal to ancestorType or derived from ancestorType.</p>
    ///</remarks>
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    ///<summary>
    ///  Gets the first ancestor of the specified <see cref="T:Aspose.Words.NodeType" />
    ///  .
    ///</summary>
    ///  <param name="ancestorType">The node type of the ancestor to retrieve.</param>
    ///<returns>The ancestor of the specified type or null if no ancestor of this type was found.</returns>
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    ///<summary>
    ///  Removes itself from the parent.
    ///</summary>
    procedure Remove;
    ///<summary>
    ///  Gets next node according to the pre-order tree traversal algorithm.
    ///</summary>
    ///  <param name="rootNode">The top node (limit) of traversal.</param>
    ///<returns>Next node in pre-order order. Null if reached the rootNode.</returns>
    function NextPreOrder(rootNode: DNNode): DNNode;
    ///<summary>
    ///  Gets the previous node according to the pre-order tree traversal algorithm.
    ///</summary>
    ///  <param name="rootNode">The top node (limit) of traversal.</param>
    ///<returns>Previous node in pre-order order. Null if reached the rootNode.</returns>
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    ///<summary>
    ///  Exports the content of the node into a string in the specified format.
    ///</summary>
    ///<returns>The content of the node in the specified format.</returns>
    function ToString(saveFormat: DNSaveFormat): string; overload;
    ///<summary>
    ///  Exports the content of the node into a string using the specified save options.
    ///</summary>
    ///  <param name="saveOptions">Specifies the options that control how the node is saved.</param>
    ///<returns>The content of the node in the specified format.</returns>
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Returns true as this node can have child nodes.
    ///</summary>
    property IsComposite: Boolean read get_IsComposite;
    ///<summary>
    ///  Returns true if this node has any child nodes.
    ///</summary>
    property HasChildNodes: Boolean read get_HasChildNodes;
    ///<summary>
    ///  Gets all immediate child nodes of this node.
    ///</summary>
    ///<remarks><p>Note, <see cref="P:Aspose.Words.CompositeNode.ChildNodes" />
    ///  is equivalent to calling <c>GetChildNodes(NodeType.Any, false)</c>
    ///  and creates and returns a new collection every time it is accessed.</p>
    ///  <p>If there are no child nodes, this property returns an empty collection.</p>
    ///</remarks>
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    ///<summary>
    ///  Gets the first child of the node.
    ///</summary>
    ///<remarks>
    ///  If there is no first child node, a null is returned.
    ///</remarks>
    property FirstChild: DNNode read get_FirstChild;
    ///<summary>
    ///  Gets the last child of the node.
    ///</summary>
    ///<remarks>
    ///  If there is no last child node, a null is returned.
    ///</remarks>
    property LastChild: DNNode read get_LastChild;
    ///<summary>
    ///  Gets the number of immediate children of this node.
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Gets the type of this node.
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Gets the immediate parent of this node.
    ///</summary>
    ///<remarks><p>If a node has just been created and not yet added to the tree,
    ///  or if it has been removed from the tree, the parent is null.</p>
    ///</remarks>
    property ParentNode: DNCompositeNode read get_ParentNode;
    ///<summary>
    ///  Gets the document to which this node belongs.
    ///</summary>
    ///<remarks><p>The node always belongs to a document even if it has just been created
    ///  and not yet added to the tree, or if it has been removed from the tree.</p>
    ///</remarks>
    property Document: DNDocumentBase read get_Document;
    ///<summary>
    ///  Gets the node immediately preceding this node.
    ///</summary>
    ///<remarks>
    ///  If there is no preceding node, a null is returned.
    ///</remarks>
    property PreviousSibling: DNNode read get_PreviousSibling;
    ///<summary>
    ///  Gets the node immediately following this node.
    ///</summary>
    ///<remarks>
    ///  If there is no next node, a null is returned.
    ///</remarks>
    property NextSibling: DNNode read get_NextSibling;
    ///<summary>
    ///  Returns a <b>Range</b>
    ///  object that represents the portion of a document that is contained in this node.
    ///</summary>
    property Range: DNRange read get_Range;
    ///<summary>
    ///  Specifies custom node identifier.
    ///</summary>
    ///<remarks><p>Default is zero.</p>
    ///  <p>This identifier can be set and used arbitrarily. For example, as a key to get external data.</p>
    ///  <p>Important note, specified value is not saved to an output file and exists only during the node lifetime.</p>
    ///</remarks>
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNCompositeNode = class(TDNGenericImport<DNCompositeNodeClass, DNCompositeNode>) end;

  //-------------namespace: Aspose.Words.BuildingBlocks----------------
  DNBuildingBlockClass = interface(DNCompositeNodeClass)
  ['{CEA70232-F3A2-5243-B4B9-02023C08F417}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class.
    ///</summary>
    ///<remarks><p>When <see cref="T:Aspose.Words.BuildingBlocks.BuildingBlock" />
    ///  is created, it belongs to the specified glossary document,
    ///  but is not yet part of the glossary document and <see cref="P:Aspose.Words.Node.ParentNode" />
    ///  is <c>null</c>.</p>
    ///  <p>To append <see cref="T:Aspose.Words.BuildingBlocks.BuildingBlock" />
    ///  to a <see cref="T:Aspose.Words.BuildingBlocks.GlossaryDocument" />
    ///  use
    ///<see cref="M:Aspose.Words.CompositeNode.AppendChild(Aspose.Words.Node)" />
    ///  .</p>
    ///</remarks>
    ///  <param name="glossaryDoc">The owner document.</param>
    {class} function init(glossaryDoc: DNGlossaryDocument): DNBuildingBlock;

  end;

  ///<summary>
  ///  Represents a glossary document entry such as a Building Block, AutoText or an AutoCorrect entry.
  ///</summary>
  ///<remarks><p><see cref="T:Aspose.Words.BuildingBlocks.BuildingBlock" />
  ///  can contain only <see cref="T:Aspose.Words.Section" />
  ///  nodes.</p>
  ///  <p><see cref="T:Aspose.Words.BuildingBlocks.BuildingBlock" />
  ///  can only be a child of <see cref="T:Aspose.Words.BuildingBlocks.GlossaryDocument" />
  ///  .</p>
  ///  <para>You can create new building blocks and insert them into a glossary document.
  ///  You can modify or delete existing building blocks. You can copy or move building blocks
  ///  between documents. You can insert content of a building block into a document.</para><para>Corresponds to the <b>docPart</b>
  ///  , <b>docPartPr</b>
  ///  and <b>docPartBody</b>
  ///  elements in OOXML.</para><seealso cref="T:Aspose.Words.BuildingBlocks.GlossaryDocument" />
  ///</remarks>
  [DNTypeName('Aspose.Words.BuildingBlocks.BuildingBlock')]
  DNBuildingBlock = interface(DNCompositeNode)
  ['{6749BD89-1FC2-3187-A48D-BC8C2C2FD211}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_Sections: DNSectionCollection;
    function get_FirstSection: DNSection;
    function get_LastSection: DNSection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Guid: DDN.mscorlib.DNGuid;
    procedure set_Guid(value: DDN.mscorlib.DNGuid);
    function get_Description: string;
    procedure set_Description(value: string);
    function get_Gallery: DNBuildingBlockGallery;
    procedure set_Gallery(value: DNBuildingBlockGallery);
    function get_Category: string;
    procedure set_Category(value: string);
    function get_Behavior: DNBuildingBlockBehavior;
    procedure set_Behavior(value: DNBuildingBlockBehavior);
    function get_Type: DNBuildingBlockType;
    procedure set_Type(value: DNBuildingBlockType);
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the nodes.</param>
    ///<returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
    ///<remarks><para>Calls <see cref="M:Aspose.Words.DocumentVisitor.VisitBuildingBlockStart(Aspose.Words.BuildingBlocks.BuildingBlock)" />
    ///  , then calls
    ///<see cref="M:Aspose.Words.Node.Accept(Aspose.Words.DocumentVisitor)" />
    ///  for all child nodes of this building block, then calls
    ///<see cref="M:Aspose.Words.DocumentVisitor.VisitBuildingBlockEnd(Aspose.Words.BuildingBlocks.BuildingBlock)" />
    ///  .</para></remarks>
    ///<remarks><para>
    ///  Note: A building block node and its children are not visited when you execute a
    ///  Visitor over a <see cref="T:Aspose.Words.Document" />
    ///  . If you want to execute a Visitor over a
    ///  building block, you need to execute the visitor over <see cref="T:Aspose.Words.BuildingBlocks.GlossaryDocument" />
    ///  or
    ///  call <see cref="M:Aspose.Words.BuildingBlocks.BuildingBlock.Accept(Aspose.Words.DocumentVisitor)" />
    ///  .
    ///</para></remarks>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Gets the text of this node and of all its children.
    ///</summary>
    ///<remarks><p>The returned string includes all control and special characters as described in <see cref="T:Aspose.Words.ControlChar" />
    ///  .</p>
    ///</remarks>
    function GetText: string;
    ///<overloads>Returns a collection of child nodes that match the specified type.</overloads><summary>
    ///  Returns a live collection of child nodes that match the specified type.
    ///</summary>
    ///<remarks><p>The collection of nodes returned by this method is always live.</p>
    ///<remarks><p>A live collection is always in sync with the document. For example, if you
    ///  selected all sections in a document and enumerate through the collection
    ///  deleting the sections, the section is removed from the collection immediately
    ///  when it is removed from the document.</p>
    ///</remarks>
    ///</remarks>
    ///  <param name="nodeType">Specifies the type of nodes to select.</param>
    ///  <param name="isDeep">True to select from all child nodes recursively.
    ///  False to select only among immediate children. </param>
    ///<returns>A live collection of child nodes of the specified type.</returns>
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    ///<summary>
    ///  Returns an Nth child node that matches the specified type.
    ///</summary>
    ///<remarks><p>If index is out of range, a null is returned.</p>
    ///</remarks>
    ///  <param name="nodeType">Specifies the type of the child node.</param>
    ///  <param name="index">Zero based index of the child node to select.
    ///  Negative indexes are also allowed and indicate access from the end,
    ///  that is -1 means the last node.</param>
    ///  <param name="isDeep">True to select from all child nodes recursively.
    ///  False to select only among immediate children. See remarks for more info.</param>
    ///<returns>The child node that matches the criteria or null if no matching node is found.</returns>
    ///<remarks>Note that markup nodes (<see cref="F:Aspose.Words.NodeType.StructuredDocumentTag" />
    ///  and <see cref="F:Aspose.Words.NodeType.SmartTag" />
    ///  )
    ///  are traversed even when isDeep = false and GetChild is invoked for non-markup node type. For example if the first run in a para
    ///  is wrapped in a StructuredDocumentTag, it will still be returned by GetChild(NodeType.Run, 0, false).</remarks>
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    ///<summary>
    ///  Selects a list of nodes matching the XPath expression.
    ///</summary>
    ///<remarks><p>Only expressions with element names are supported at the moment. Expressions
    ///  that use attribute names are not supported.</p>
    ///</remarks>
    ///  <param name="xpath">The XPath expression.</param>
    ///<returns>A list of nodes matching the XPath query.</returns>
    function SelectNodes(xpath: string): DNNodeList;
    ///<summary>
    ///  Selects the first Node that matches the XPath expression.
    ///</summary>
    ///<remarks><p>Only expressions with element names are supported at the moment. Expressions
    ///  that use attribute names are not supported.</p>
    ///</remarks>
    ///  <param name="xpath">The XPath expression.</param>
    ///<returns>The first Node that matches the XPath query or null if no matching node is found.</returns>
    function SelectSingleNode(xpath: string): DNNode;
    ///<summary>
    ///  Provides support for the for each style iteration over the child nodes of this node.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    ///<summary>
    ///  Adds the specified node to the end of the list of child nodes for this node.
    ///</summary>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The node to add.</param>
    ///<returns>The node added.</returns>
    function AppendChild(newChild: DNNode): DNNode;
    ///<summary>
    ///  Adds the specified node to the beginning of the list of child nodes for this node.
    ///</summary>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The node to add.</param>
    ///<returns>The node added.</returns>
    function PrependChild(newChild: DNNode): DNNode;
    ///<summary>
    ///  Inserts the specified node immediately after the specified reference node.
    ///</summary>
    ///<remarks><p>If refChild is null, inserts newChild at the beginning of the list of child nodes.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The Node to insert.</param>
    ///  <param name="refChild">The Node that is the reference node. The newNode is placed after the refNode. </param>
    ///<returns>The inserted node.</returns>
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    ///<summary>
    ///  Inserts the specified node immediately before the specified reference node.
    ///</summary>
    ///<remarks><p>If refChild is null, inserts newChild at the end of the list of child nodes.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The Node to insert.</param>
    ///  <param name="refChild">The Node that is the reference node. The newChild is placed before this node.</param>
    ///<returns>The inserted node.</returns>
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    ///<summary>
    ///  Removes the specified child node.
    ///</summary>
    ///<remarks><p>The parent of oldChild is set to null after the node is removed.</p>
    ///</remarks>
    ///  <param name="oldChild">The node to remove.</param>
    ///<returns>The removed node.</returns>
    function RemoveChild(oldChild: DNNode): DNNode;
    ///<summary>
    ///  Removes all the child nodes of the current node.
    ///</summary>
    procedure RemoveAllChildren;
    ///<summary>
    ///  Removes all <see cref="T:Aspose.Words.Markup.SmartTag" />
    ///  descendant nodes of the current node.
    ///</summary>
    ///<remarks>This method does not remove the content of the smart tags.</remarks>
    procedure RemoveSmartTags;
    ///<summary>
    ///  Returns the index of the specified child node in the child node array.
    ///</summary>
    ///<remarks>
    ///  Returns -1 if the node is not found in the child nodes.
    ///</remarks>
    function IndexOf(child: DNNode): Int32;
    ///<summary>
    ///  Reserved for system use. IXPathNavigable.
    ///</summary>
    function CreateNavigator: DDN.Aspose.Common.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Returns the <see cref="F:Aspose.Words.NodeType.BuildingBlock" />
    ///  value.
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Returns a collection that represents all sections in the building block.
    ///</summary>
    property Sections: DNSectionCollection read get_Sections;
    ///<summary>
    ///  Gets the first section in the building block.
    ///</summary>
    ///<remarks>
    ///  Returns <c>null</c> if there are no sections.
    ///</remarks>
    property FirstSection: DNSection read get_FirstSection;
    ///<summary>
    ///  Gets the last section in the building block.
    ///</summary>
    ///<remarks>
    ///  Returns <c>null</c> if there are no sections.
    ///</remarks>
    property LastSection: DNSection read get_LastSection;
    ///<summary>
    ///  Gets or sets the name of this building block.
    ///</summary>
    ///<remarks><para>The name may contain any string content, usually a friendly identifier.
    ///  Multiple building blocks can have the same name.</para><para>Cannot be <c>null</c> and cannot be an empty string.</para><para>Corresponds to the <b>docPartPr.name</b>
    ///  element in OOXML.</para><seealso cref="P:Aspose.Words.BuildingBlocks.BuildingBlock.Gallery" />
    ///<seealso cref="P:Aspose.Words.BuildingBlocks.BuildingBlock.Category" />
    ///</remarks>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets or sets an identifier (a 128-bit GUID) that uniquely identifies this building block.
    ///</summary>
    ///<remarks><para>Can be used by an application to uniquely reference a building block regardless of
    ///  different naming due to localization.</para><para>Corresponds to the <b>docPartPr.guid</b>
    ///  element in OOXML.</para></remarks>
    property Guid: DDN.mscorlib.DNGuid read get_Guid write set_Guid;
    ///<summary>
    ///  Gets or sets the description associated with this building block.
    ///</summary>
    ///<remarks><para>The description may contain any string content, usually additional information.</para><para>Cannot be <c>null</c>, but can be an empty string.</para><para>Corresponds to the <b>docPartPr.description</b>
    ///  element in OOXML.</para></remarks>
    property Description: string read get_Description write set_Description;
    ///<summary>
    ///  Specifies the first-level categorization for the building block for the purposes of
    ///  classification or user interface sorting.
    ///</summary>
    ///<remarks><para>Building blocks in Microsoft Word user interface are arranged
    ///  into Galleries. Each <see cref="P:Aspose.Words.BuildingBlocks.BuildingBlock.Gallery" />
    ///  can have multiple Categories. Each block within
    ///  a <see cref="P:Aspose.Words.BuildingBlocks.BuildingBlock.Category" />
    ///  has a <see cref="P:Aspose.Words.BuildingBlocks.BuildingBlock.Name" />
    ///  .</para><para>Corresponds to the <b>docPartPr.category.gallery</b>
    ///  element in OOXML.</para><seealso cref="P:Aspose.Words.BuildingBlocks.BuildingBlock.Category" />
    ///<seealso cref="P:Aspose.Words.BuildingBlocks.BuildingBlock.Name" />
    ///</remarks>
    property Gallery: DNBuildingBlockGallery read get_Gallery write set_Gallery;
    ///<summary>
    ///  Specifies the second-level categorization for the building block.
    ///</summary>
    ///<remarks><para>Building blocks in Microsoft Word user interface are arranged
    ///  into Galleries. Each <see cref="P:Aspose.Words.BuildingBlocks.BuildingBlock.Gallery" />
    ///  can have multiple Categories. Each block within
    ///  a <see cref="P:Aspose.Words.BuildingBlocks.BuildingBlock.Category" />
    ///  has a <see cref="P:Aspose.Words.BuildingBlocks.BuildingBlock.Name" />
    ///  .</para><para>Cannot be <c>null</c> and cannot be an empty string.</para><para>Corresponds to the <b>docPartPr.category.name</b>
    ///  element in OOXML.</para><seealso cref="P:Aspose.Words.BuildingBlocks.BuildingBlock.Gallery" />
    ///<seealso cref="P:Aspose.Words.BuildingBlocks.BuildingBlock.Name" />
    ///</remarks>
    property Category: string read get_Category write set_Category;
    ///<summary>
    ///  Specifies the behavior that shall be applied when the contents of the building block
    ///  is inserted into the main document.
    ///</summary>
    property Behavior: DNBuildingBlockBehavior read get_Behavior write set_Behavior;
    ///<summary>
    ///  Specifies the building block type.
    ///</summary>
    ///<remarks><para>The building block type can influence the visibility and behavior of the
    ///  building block in Microsoft Word.</para><para>Corresponds to the <b>docPartPr.types</b>
    ///  element in OOXML.</para></remarks>
    property &Type: DNBuildingBlockType read get_Type write set_Type;
    ///<summary>
    ///  Returns true as this node can have child nodes.
    ///</summary>
    property IsComposite: Boolean read get_IsComposite;
    ///<summary>
    ///  Returns true if this node has any child nodes.
    ///</summary>
    property HasChildNodes: Boolean read get_HasChildNodes;
    ///<summary>
    ///  Gets all immediate child nodes of this node.
    ///</summary>
    ///<remarks><p>Note, <see cref="P:Aspose.Words.CompositeNode.ChildNodes" />
    ///  is equivalent to calling <c>GetChildNodes(NodeType.Any, false)</c>
    ///  and creates and returns a new collection every time it is accessed.</p>
    ///  <p>If there are no child nodes, this property returns an empty collection.</p>
    ///</remarks>
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    ///<summary>
    ///  Gets the first child of the node.
    ///</summary>
    ///<remarks>
    ///  If there is no first child node, a null is returned.
    ///</remarks>
    property FirstChild: DNNode read get_FirstChild;
    ///<summary>
    ///  Gets the last child of the node.
    ///</summary>
    ///<remarks>
    ///  If there is no last child node, a null is returned.
    ///</remarks>
    property LastChild: DNNode read get_LastChild;
    ///<summary>
    ///  Gets the number of immediate children of this node.
    ///</summary>
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNBuildingBlock = class(TDNGenericImport<DNBuildingBlockClass, DNBuildingBlock>) end;

  //-------------namespace: Aspose.Words----------------
  DNDocumentBaseClass = interface(DNCompositeNodeClass)
  ['{55AE2CCC-7B3E-5819-8D03-16FC17FCCB90}']
  end;

  ///<summary>
  ///  Provides the abstract base class for a main document and a glossary document of a Word document.
  ///</summary>
  ///<remarks><para>Aspose.Words represents a Word document as a tree of nodes. <see cref="T:Aspose.Words.DocumentBase" />
  ///  is a
  ///  root node of the tree that contains all other nodes of the document.</para><para><see cref="T:Aspose.Words.DocumentBase" />
  ///  also stores document-wide information such as <see cref="P:Aspose.Words.DocumentBase.Styles" />
  ///  and
  ///<see cref="P:Aspose.Words.DocumentBase.Lists" />
  ///  that the tree nodes might refer to.</para><seealso cref="T:Aspose.Words.Document" />
  ///<seealso cref="T:Aspose.Words.DocumentBase" />
  ///</remarks>
  [DNTypeName('Aspose.Words.DocumentBase')]
  DNDocumentBase = interface(DNCompositeNode)
  ['{4D033E52-2538-3A3B-8BC8-EC7EA3457932}']
  { getters & setters } 

    function get_Document: DNDocumentBase;
    function get_NodeChangingCallback: DNINodeChangingCallback;
    procedure set_NodeChangingCallback(value: DNINodeChangingCallback);
    function get_ResourceLoadingCallback: DNIResourceLoadingCallback;
    procedure set_ResourceLoadingCallback(value: DNIResourceLoadingCallback);
    function get_FontInfos: DNFontInfoCollection;
    function get_Styles: DNStyleCollection;
    function get_Lists: DNListCollection;
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_BackgroundShape: DNShape;
    procedure set_BackgroundShape(value: DNShape);
    function get_PageColor: DDN.Aspose.Common.DNColor;
    procedure set_PageColor(value: DDN.Aspose.Common.DNColor);
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_NodeType: DNNodeType;
    function get_ParentNode: DNCompositeNode;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<overloads>Imports a node from another document to the current document.</overloads><summary><p>Imports a node from another document to the current document.</p>
    ///</summary>
    ///<remarks><p>This method uses the <see cref="F:Aspose.Words.ImportFormatMode.UseDestinationStyles" />
    ///  option to resolve formatting.</p>
    ///  <p>Importing a node creates a copy of the source node belonging to the importing document.
    ///  The returned node has no parent. The source node is not altered or removed from the original document.</p>
    ///  <p>Before a node from another document can be inserted into this document, it must be imported.
    ///  During import, document-specific properties such as references to styles and lists are translated
    ///  from the original to the importing document. After the node was imported, it can be inserted
    ///  into the appropriate place in the document using <see cref="M:Aspose.Words.CompositeNode.InsertBefore(Aspose.Words.Node,Aspose.Words.Node)" />
    ///  or
    ///<see cref="M:Aspose.Words.CompositeNode.InsertAfter(Aspose.Words.Node,Aspose.Words.Node)" />
    ///  .</p>
    ///  <p>If the source node already belongs to the destination document, then simply a deep clone
    ///  of the source node is created.</p>
    ///<seealso cref="T:Aspose.Words.NodeImporter" />
    ///</remarks>
    ///  <param name="srcNode">The node being imported.</param>
    ///  <param name="isImportChildren">True to import all child nodes recursively; otherwise, false.</param>
    ///<returns>The cloned node that belongs to the current document.</returns>
    function ImportNode(srcNode: DNNode; isImportChildren: Boolean): DNNode; overload;
    ///<summary><p>Imports a node from another document to the current document with an option to control formatting.</p>
    ///</summary>
    ///<remarks><p>This overload is useful to control how styles and list formatting are imported.</p>
    ///  <p>Importing a node creates a copy of the source node belonging to the importing document.
    ///  The returned node has no parent. The source node is not altered or removed from the original document.</p>
    ///  <p>Before a node from another document can be inserted into this document, it must be imported.
    ///  During import, document-specific properties such as references to styles and lists are translated
    ///  from the original to the importing document. After the node was imported, it can be inserted
    ///  into the appropriate place in the document using <see cref="M:Aspose.Words.CompositeNode.InsertBefore(Aspose.Words.Node,Aspose.Words.Node)" />
    ///  or
    ///<see cref="M:Aspose.Words.CompositeNode.InsertAfter(Aspose.Words.Node,Aspose.Words.Node)" />
    ///  .</p>
    ///  <p>If the source node already belongs to the destination document, then simply a deep clone
    ///  of the source node is created.</p>
    ///<seealso cref="T:Aspose.Words.ImportFormatMode" />
    ///<seealso cref="T:Aspose.Words.NodeImporter" />
    ///</remarks>
    ///  <param name="srcNode">The node to imported.</param>
    ///  <param name="isImportChildren">True to import all child nodes recursively; otherwise, false.</param>
    ///  <param name="importFormatMode">Specifies how to merge style formatting that clashes.</param>
    ///<returns>The cloned, imported node. The node belongs to the destination document, but has no parent.</returns>
    function ImportNode(srcNode: DNNode; isImportChildren: Boolean; importFormatMode: DNImportFormatMode): DNNode; overload;
    ///<summary>
    ///  Gets the text of this node and of all its children.
    ///</summary>
    ///<remarks><p>The returned string includes all control and special characters as described in <see cref="T:Aspose.Words.ControlChar" />
    ///  .</p>
    ///</remarks>
    function GetText: string;
    ///<overloads>Returns a collection of child nodes that match the specified type.</overloads><summary>
    ///  Returns a live collection of child nodes that match the specified type.
    ///</summary>
    ///<remarks><p>The collection of nodes returned by this method is always live.</p>
    ///<remarks><p>A live collection is always in sync with the document. For example, if you
    ///  selected all sections in a document and enumerate through the collection
    ///  deleting the sections, the section is removed from the collection immediately
    ///  when it is removed from the document.</p>
    ///</remarks>
    ///</remarks>
    ///  <param name="nodeType">Specifies the type of nodes to select.</param>
    ///  <param name="isDeep">True to select from all child nodes recursively.
    ///  False to select only among immediate children. </param>
    ///<returns>A live collection of child nodes of the specified type.</returns>
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    ///<summary>
    ///  Returns an Nth child node that matches the specified type.
    ///</summary>
    ///<remarks><p>If index is out of range, a null is returned.</p>
    ///</remarks>
    ///  <param name="nodeType">Specifies the type of the child node.</param>
    ///  <param name="index">Zero based index of the child node to select.
    ///  Negative indexes are also allowed and indicate access from the end,
    ///  that is -1 means the last node.</param>
    ///  <param name="isDeep">True to select from all child nodes recursively.
    ///  False to select only among immediate children. See remarks for more info.</param>
    ///<returns>The child node that matches the criteria or null if no matching node is found.</returns>
    ///<remarks>Note that markup nodes (<see cref="F:Aspose.Words.NodeType.StructuredDocumentTag" />
    ///  and <see cref="F:Aspose.Words.NodeType.SmartTag" />
    ///  )
    ///  are traversed even when isDeep = false and GetChild is invoked for non-markup node type. For example if the first run in a para
    ///  is wrapped in a StructuredDocumentTag, it will still be returned by GetChild(NodeType.Run, 0, false).</remarks>
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    ///<summary>
    ///  Selects a list of nodes matching the XPath expression.
    ///</summary>
    ///<remarks><p>Only expressions with element names are supported at the moment. Expressions
    ///  that use attribute names are not supported.</p>
    ///</remarks>
    ///  <param name="xpath">The XPath expression.</param>
    ///<returns>A list of nodes matching the XPath query.</returns>
    function SelectNodes(xpath: string): DNNodeList;
    ///<summary>
    ///  Selects the first Node that matches the XPath expression.
    ///</summary>
    ///<remarks><p>Only expressions with element names are supported at the moment. Expressions
    ///  that use attribute names are not supported.</p>
    ///</remarks>
    ///  <param name="xpath">The XPath expression.</param>
    ///<returns>The first Node that matches the XPath query or null if no matching node is found.</returns>
    function SelectSingleNode(xpath: string): DNNode;
    ///<summary>
    ///  Provides support for the for each style iteration over the child nodes of this node.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    ///<summary>
    ///  Adds the specified node to the end of the list of child nodes for this node.
    ///</summary>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The node to add.</param>
    ///<returns>The node added.</returns>
    function AppendChild(newChild: DNNode): DNNode;
    ///<summary>
    ///  Adds the specified node to the beginning of the list of child nodes for this node.
    ///</summary>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The node to add.</param>
    ///<returns>The node added.</returns>
    function PrependChild(newChild: DNNode): DNNode;
    ///<summary>
    ///  Inserts the specified node immediately after the specified reference node.
    ///</summary>
    ///<remarks><p>If refChild is null, inserts newChild at the beginning of the list of child nodes.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The Node to insert.</param>
    ///  <param name="refChild">The Node that is the reference node. The newNode is placed after the refNode. </param>
    ///<returns>The inserted node.</returns>
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    ///<summary>
    ///  Inserts the specified node immediately before the specified reference node.
    ///</summary>
    ///<remarks><p>If refChild is null, inserts newChild at the end of the list of child nodes.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The Node to insert.</param>
    ///  <param name="refChild">The Node that is the reference node. The newChild is placed before this node.</param>
    ///<returns>The inserted node.</returns>
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    ///<summary>
    ///  Removes the specified child node.
    ///</summary>
    ///<remarks><p>The parent of oldChild is set to null after the node is removed.</p>
    ///</remarks>
    ///  <param name="oldChild">The node to remove.</param>
    ///<returns>The removed node.</returns>
    function RemoveChild(oldChild: DNNode): DNNode;
    ///<summary>
    ///  Removes all the child nodes of the current node.
    ///</summary>
    procedure RemoveAllChildren;
    ///<summary>
    ///  Removes all <see cref="T:Aspose.Words.Markup.SmartTag" />
    ///  descendant nodes of the current node.
    ///</summary>
    ///<remarks>This method does not remove the content of the smart tags.</remarks>
    procedure RemoveSmartTags;
    ///<summary>
    ///  Returns the index of the specified child node in the child node array.
    ///</summary>
    ///<remarks>
    ///  Returns -1 if the node is not found in the child nodes.
    ///</remarks>
    function IndexOf(child: DNNode): Int32;
    ///<summary>
    ///  Reserved for system use. IXPathNavigable.
    ///</summary>
    function CreateNavigator: DDN.Aspose.Common.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function Accept(visitor: DNDocumentVisitor): Boolean;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    property Document: DNDocumentBase read get_Document;
    ///<summary>
    ///  Called when a node is inserted or removed in the document.
    ///</summary>
    property NodeChangingCallback: DNINodeChangingCallback read get_NodeChangingCallback write set_NodeChangingCallback;
    ///<summary>
    ///  Allows to control how external resources are loaded.
    ///</summary>
    property ResourceLoadingCallback: DNIResourceLoadingCallback read get_ResourceLoadingCallback write set_ResourceLoadingCallback;
    ///<summary>
    ///  Provides access to properties of fonts used in this document.
    ///</summary>
    ///<remarks><para>This collection of font definitions is loaded as is from the document.
    ///  Font definitions might be optional, missing or incomplete in some documents.</para><para>Do not rely on this collection to ascertain that a particular font is used in the document.
    ///  You should only use this collection to get information about fonts that might be used in the document.</para><seealso cref="T:Aspose.Words.Fonts.FontInfoCollection" />
    ///<seealso cref="T:Aspose.Words.Fonts.FontInfo" />
    ///</remarks>
    property FontInfos: DNFontInfoCollection read get_FontInfos;
    ///<summary>
    ///  Returns a collection of styles defined in the document.
    ///</summary>
    ///<remarks><p>For more information see the description of the <see cref="T:Aspose.Words.StyleCollection" />
    ///  class.</p>
    ///<seealso cref="T:Aspose.Words.StyleCollection" />
    ///<seealso cref="T:Aspose.Words.Style" />
    ///</remarks>
    property Styles: DNStyleCollection read get_Styles;
    ///<summary>
    ///  Provides access to the list formatting used in the document.
    ///</summary>
    ///<remarks><p>For more information see the description of the <see cref="T:Aspose.Words.Lists.ListCollection" />
    ///  class.</p>
    ///<seealso cref="T:Aspose.Words.Lists.ListCollection" />
    ///<seealso cref="T:Aspose.Words.Lists.List" />
    ///<seealso cref="T:Aspose.Words.Lists.ListFormat" />
    ///</remarks>
    property Lists: DNListCollection read get_Lists;
    ///<summary>
    ///  Called during various document processing procedures when an issue is detected that might result
    ///  in data or formatting fidelity loss.
    ///</summary>
    ///<remarks>
    ///  Document may generate warnings at any stage of its existence, so it's important to setup warning callback as
    ///  early as possible to avoid the warnings loss. E.g. such properties as <see cref="P:Aspose.Words.Document.PageCount" />
    ///  actually build the document layout which is used later for rendering, and the layout warnings may be lost if
    ///  warning callback is specified just for the rendering calls later.
    ///</remarks>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Gets or sets the background shape of the document. Can be null.
    ///</summary>
    ///<remarks><para>Microsoft Word allows only a shape that has its <see cref="P:Aspose.Words.Drawing.ShapeBase.ShapeType" />
    ///  property equal
    ///  to <see cref="F:Aspose.Words.Drawing.ShapeType.Rectangle" />
    ///  to be used as a background shape for a document.</para><para>Microsoft Word supports only the fill properties of a background shape. All other properties
    ///  are ignored.</para><para>Setting this property to a non-null value will also set the <see cref="P:Aspose.Words.Settings.ViewOptions.DisplayBackgroundShape" />
    ///  to true.</para><seealso cref="P:Aspose.Words.Settings.ViewOptions.DisplayBackgroundShape" />
    ///<seealso cref="P:Aspose.Words.DocumentBase.PageColor" />
    ///</remarks>
    property BackgroundShape: DNShape read get_BackgroundShape write set_BackgroundShape;
    ///<summary>
    ///  Gets or sets the page color of the document. This property is a simpler version of <see cref="P:Aspose.Words.DocumentBase.BackgroundShape" />
    ///  .
    ///</summary>
    ///<remarks><para>This property provides a simple way to specify a solid page color for the document.
    ///  Setting this property creates and sets an appropriate <see cref="P:Aspose.Words.DocumentBase.BackgroundShape" />
    ///  .</para><para>If the page color is not set (e.g. there is no background shape in the document) returns
    ///<see cref="F:System.Drawing.Color.Empty" />
    ///  .</para><seealso cref="P:Aspose.Words.DocumentBase.BackgroundShape" />
    ///</remarks>
    property PageColor: DDN.Aspose.Common.DNColor read get_PageColor write set_PageColor;
    ///<summary>
    ///  Returns true as this node can have child nodes.
    ///</summary>
    property IsComposite: Boolean read get_IsComposite;
    ///<summary>
    ///  Returns true if this node has any child nodes.
    ///</summary>
    property HasChildNodes: Boolean read get_HasChildNodes;
    ///<summary>
    ///  Gets all immediate child nodes of this node.
    ///</summary>
    ///<remarks><p>Note, <see cref="P:Aspose.Words.CompositeNode.ChildNodes" />
    ///  is equivalent to calling <c>GetChildNodes(NodeType.Any, false)</c>
    ///  and creates and returns a new collection every time it is accessed.</p>
    ///  <p>If there are no child nodes, this property returns an empty collection.</p>
    ///</remarks>
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    ///<summary>
    ///  Gets the first child of the node.
    ///</summary>
    ///<remarks>
    ///  If there is no first child node, a null is returned.
    ///</remarks>
    property FirstChild: DNNode read get_FirstChild;
    ///<summary>
    ///  Gets the last child of the node.
    ///</summary>
    ///<remarks>
    ///  If there is no last child node, a null is returned.
    ///</remarks>
    property LastChild: DNNode read get_LastChild;
    ///<summary>
    ///  Gets the number of immediate children of this node.
    ///</summary>
    property Count: Int32 read get_Count;
    property NodeType: DNNodeType read get_NodeType;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNDocumentBase = class(TDNGenericImport<DNDocumentBaseClass, DNDocumentBase>) end;

  //-------------namespace: Aspose.Words.BuildingBlocks----------------
  DNGlossaryDocumentClass = interface(DNDocumentBaseClass)
  ['{1996884C-5A31-54A7-8EA1-BF5A54F3C8A7}']
  { constructors } 

    {class} function init: DNGlossaryDocument;

  end;

  ///<summary>
  ///  Represents the root element for a glossary document within a Word document.
  ///  A glossary document is a storage for AutoText, AutoCorrect entries and Building Blocks.
  ///</summary>
  ///<remarks><para>Some documents, usually templates, can contain AutoText, AutoCorrect entries
  ///  and/or Building Blocks (also known as <i>glossary document entries</i>, <i>document parts</i>
  ///  or <i>building blocks</i>).</para><para>To access building blocks, you need to load a document into a <see cref="T:Aspose.Words.Document" />
  ///  object. Building blocks will be available via the <see cref="P:Aspose.Words.Document.GlossaryDocument" />
  ///  property.</para><para><see cref="T:Aspose.Words.BuildingBlocks.GlossaryDocument" />
  ///  can contain any number of <see cref="T:Aspose.Words.BuildingBlocks.BuildingBlock" />
  ///  objects.
  ///  Each <see cref="T:Aspose.Words.BuildingBlocks.BuildingBlock" />
  ///  represents one document part.</para><para>Corresponds to the <b>glossaryDocument</b>
  ///  and <b>docParts</b>
  ///  elements in OOXML.</para><seealso cref="T:Aspose.Words.Document" />
  ///<seealso cref="P:Aspose.Words.Document.GlossaryDocument" />
  ///<seealso cref="T:Aspose.Words.BuildingBlocks.BuildingBlock" />
  ///</remarks>
  [DNTypeName('Aspose.Words.BuildingBlocks.GlossaryDocument')]
  DNGlossaryDocument = interface(DNDocumentBase)
  ['{BA3C4B24-F2FB-324B-A1C8-F735A9FA659F}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_BuildingBlocks: DNBuildingBlockCollection;
    function get_FirstBuildingBlock: DNBuildingBlock;
    function get_LastBuildingBlock: DNBuildingBlock;
    function get_Document: DNDocumentBase;
    function get_NodeChangingCallback: DNINodeChangingCallback;
    procedure set_NodeChangingCallback(value: DNINodeChangingCallback);
    function get_ResourceLoadingCallback: DNIResourceLoadingCallback;
    procedure set_ResourceLoadingCallback(value: DNIResourceLoadingCallback);
    function get_FontInfos: DNFontInfoCollection;
    function get_Styles: DNStyleCollection;
    function get_Lists: DNListCollection;
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_BackgroundShape: DNShape;
    procedure set_BackgroundShape(value: DNShape);
    function get_PageColor: DDN.Aspose.Common.DNColor;
    procedure set_PageColor(value: DDN.Aspose.Common.DNColor);
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the nodes.</param>
    ///<returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
    ///<remarks><para>Calls <see cref="M:Aspose.Words.DocumentVisitor.VisitGlossaryDocumentStart(Aspose.Words.BuildingBlocks.GlossaryDocument)" />
    ///  , then calls <see cref="M:Aspose.Words.Node.Accept(Aspose.Words.DocumentVisitor)" />
    ///  for all child nodes of this node and then calls <see cref="M:Aspose.Words.DocumentVisitor.VisitGlossaryDocumentEnd(Aspose.Words.BuildingBlocks.GlossaryDocument)" />
    ///  at the end.</para></remarks>
    ///<remarks><para>
    ///  Note: A glossary document node and its children are not visited when you execute a
    ///  Visitor over a <see cref="T:Aspose.Words.Document" />
    ///  . If you want to execute a Visitor over a
    ///  glossary document, you need to call <see cref="M:Aspose.Words.BuildingBlocks.GlossaryDocument.Accept(Aspose.Words.DocumentVisitor)" />
    ///  .
    ///</para></remarks>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Finds a building block using the specified gallery, category and name.
    ///</summary>
    ///<remarks><para>This is a convenience method that iterates over all building blocks
    ///  in this collection and returns the first building block that matches
    ///  the specified gallery, category and name.</para><para>Microsoft Word organizes building blocks into galleries. The galleries
    ///  are predefined using the <see cref="T:Aspose.Words.BuildingBlocks.BuildingBlockGallery" />
    ///  enum.
    ///  Within each gallery, building blocks can be organized into one or more categories.
    ///  The category name is a string. Each building block has a name. A building block
    ///  name is not guaranteed to be unique.</para></remarks>
    ///  <param name="gallery">The gallery criteria.</param>
    ///  <param name="category">The category criteria. Can be null, in which case it will not be used for comparison.</param>
    ///  <param name="name">The building block name criteria.</param>
    ///<returns>The matching building block or null if a match was not found.</returns>
    function GetBuildingBlock(gallery: DNBuildingBlockGallery; category: string; name: string): DNBuildingBlock;
    ///<overloads>Imports a node from another document to the current document.</overloads><summary><p>Imports a node from another document to the current document.</p>
    ///</summary>
    ///<remarks><p>This method uses the <see cref="F:Aspose.Words.ImportFormatMode.UseDestinationStyles" />
    ///  option to resolve formatting.</p>
    ///  <p>Importing a node creates a copy of the source node belonging to the importing document.
    ///  The returned node has no parent. The source node is not altered or removed from the original document.</p>
    ///  <p>Before a node from another document can be inserted into this document, it must be imported.
    ///  During import, document-specific properties such as references to styles and lists are translated
    ///  from the original to the importing document. After the node was imported, it can be inserted
    ///  into the appropriate place in the document using <see cref="M:Aspose.Words.CompositeNode.InsertBefore(Aspose.Words.Node,Aspose.Words.Node)" />
    ///  or
    ///<see cref="M:Aspose.Words.CompositeNode.InsertAfter(Aspose.Words.Node,Aspose.Words.Node)" />
    ///  .</p>
    ///  <p>If the source node already belongs to the destination document, then simply a deep clone
    ///  of the source node is created.</p>
    ///<seealso cref="T:Aspose.Words.NodeImporter" />
    ///</remarks>
    ///  <param name="srcNode">The node being imported.</param>
    ///  <param name="isImportChildren">True to import all child nodes recursively; otherwise, false.</param>
    ///<returns>The cloned node that belongs to the current document.</returns>
    function ImportNode(srcNode: DNNode; isImportChildren: Boolean): DNNode; overload;
    ///<summary><p>Imports a node from another document to the current document with an option to control formatting.</p>
    ///</summary>
    ///<remarks><p>This overload is useful to control how styles and list formatting are imported.</p>
    ///  <p>Importing a node creates a copy of the source node belonging to the importing document.
    ///  The returned node has no parent. The source node is not altered or removed from the original document.</p>
    ///  <p>Before a node from another document can be inserted into this document, it must be imported.
    ///  During import, document-specific properties such as references to styles and lists are translated
    ///  from the original to the importing document. After the node was imported, it can be inserted
    ///  into the appropriate place in the document using <see cref="M:Aspose.Words.CompositeNode.InsertBefore(Aspose.Words.Node,Aspose.Words.Node)" />
    ///  or
    ///<see cref="M:Aspose.Words.CompositeNode.InsertAfter(Aspose.Words.Node,Aspose.Words.Node)" />
    ///  .</p>
    ///  <p>If the source node already belongs to the destination document, then simply a deep clone
    ///  of the source node is created.</p>
    ///<seealso cref="T:Aspose.Words.ImportFormatMode" />
    ///<seealso cref="T:Aspose.Words.NodeImporter" />
    ///</remarks>
    ///  <param name="srcNode">The node to imported.</param>
    ///  <param name="isImportChildren">True to import all child nodes recursively; otherwise, false.</param>
    ///  <param name="importFormatMode">Specifies how to merge style formatting that clashes.</param>
    ///<returns>The cloned, imported node. The node belongs to the destination document, but has no parent.</returns>
    function ImportNode(srcNode: DNNode; isImportChildren: Boolean; importFormatMode: DNImportFormatMode): DNNode; overload;
    function GetText: string;
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    function SelectNodes(xpath: string): DNNodeList;
    function SelectSingleNode(xpath: string): DNNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    function PrependChild(newChild: DNNode): DNNode;
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    function RemoveChild(oldChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSmartTags;
    function IndexOf(child: DNNode): Int32;
    function CreateNavigator: DDN.Aspose.Common.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Returns the <see cref="F:Aspose.Words.NodeType.GlossaryDocument" />
    ///  value.
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Returns a typed collection that represents all building blocks in the glossary document.
    ///</summary>
    property BuildingBlocks: DNBuildingBlockCollection read get_BuildingBlocks;
    ///<summary>
    ///  Gets the first building block in the glossary document.
    ///</summary>
    ///<remarks>
    ///  Returns <c>null</c> if there are no building blocks available.
    ///</remarks>
    property FirstBuildingBlock: DNBuildingBlock read get_FirstBuildingBlock;
    ///<summary>
    ///  Gets the last building block in the glossary document.
    ///</summary>
    ///<remarks>
    ///  Returns <c>null</c> if there are no building blocks available.
    ///</remarks>
    property LastBuildingBlock: DNBuildingBlock read get_LastBuildingBlock;
    property Document: DNDocumentBase read get_Document;
    ///<summary>
    ///  Called when a node is inserted or removed in the document.
    ///</summary>
    property NodeChangingCallback: DNINodeChangingCallback read get_NodeChangingCallback write set_NodeChangingCallback;
    ///<summary>
    ///  Allows to control how external resources are loaded.
    ///</summary>
    property ResourceLoadingCallback: DNIResourceLoadingCallback read get_ResourceLoadingCallback write set_ResourceLoadingCallback;
    ///<summary>
    ///  Provides access to properties of fonts used in this document.
    ///</summary>
    ///<remarks><para>This collection of font definitions is loaded as is from the document.
    ///  Font definitions might be optional, missing or incomplete in some documents.</para><para>Do not rely on this collection to ascertain that a particular font is used in the document.
    ///  You should only use this collection to get information about fonts that might be used in the document.</para><seealso cref="T:Aspose.Words.Fonts.FontInfoCollection" />
    ///<seealso cref="T:Aspose.Words.Fonts.FontInfo" />
    ///</remarks>
    property FontInfos: DNFontInfoCollection read get_FontInfos;
    ///<summary>
    ///  Returns a collection of styles defined in the document.
    ///</summary>
    ///<remarks><p>For more information see the description of the <see cref="T:Aspose.Words.StyleCollection" />
    ///  class.</p>
    ///<seealso cref="T:Aspose.Words.StyleCollection" />
    ///<seealso cref="T:Aspose.Words.Style" />
    ///</remarks>
    property Styles: DNStyleCollection read get_Styles;
    ///<summary>
    ///  Provides access to the list formatting used in the document.
    ///</summary>
    ///<remarks><p>For more information see the description of the <see cref="T:Aspose.Words.Lists.ListCollection" />
    ///  class.</p>
    ///<seealso cref="T:Aspose.Words.Lists.ListCollection" />
    ///<seealso cref="T:Aspose.Words.Lists.List" />
    ///<seealso cref="T:Aspose.Words.Lists.ListFormat" />
    ///</remarks>
    property Lists: DNListCollection read get_Lists;
    ///<summary>
    ///  Called during various document processing procedures when an issue is detected that might result
    ///  in data or formatting fidelity loss.
    ///</summary>
    ///<remarks>
    ///  Document may generate warnings at any stage of its existence, so it's important to setup warning callback as
    ///  early as possible to avoid the warnings loss. E.g. such properties as <see cref="P:Aspose.Words.Document.PageCount" />
    ///  actually build the document layout which is used later for rendering, and the layout warnings may be lost if
    ///  warning callback is specified just for the rendering calls later.
    ///</remarks>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Gets or sets the background shape of the document. Can be null.
    ///</summary>
    ///<remarks><para>Microsoft Word allows only a shape that has its <see cref="P:Aspose.Words.Drawing.ShapeBase.ShapeType" />
    ///  property equal
    ///  to <see cref="F:Aspose.Words.Drawing.ShapeType.Rectangle" />
    ///  to be used as a background shape for a document.</para><para>Microsoft Word supports only the fill properties of a background shape. All other properties
    ///  are ignored.</para><para>Setting this property to a non-null value will also set the <see cref="P:Aspose.Words.Settings.ViewOptions.DisplayBackgroundShape" />
    ///  to true.</para><seealso cref="P:Aspose.Words.Settings.ViewOptions.DisplayBackgroundShape" />
    ///<seealso cref="P:Aspose.Words.DocumentBase.PageColor" />
    ///</remarks>
    property BackgroundShape: DNShape read get_BackgroundShape write set_BackgroundShape;
    ///<summary>
    ///  Gets or sets the page color of the document. This property is a simpler version of <see cref="P:Aspose.Words.DocumentBase.BackgroundShape" />
    ///  .
    ///</summary>
    ///<remarks><para>This property provides a simple way to specify a solid page color for the document.
    ///  Setting this property creates and sets an appropriate <see cref="P:Aspose.Words.DocumentBase.BackgroundShape" />
    ///  .</para><para>If the page color is not set (e.g. there is no background shape in the document) returns
    ///<see cref="F:System.Drawing.Color.Empty" />
    ///  .</para><seealso cref="P:Aspose.Words.DocumentBase.BackgroundShape" />
    ///</remarks>
    property PageColor: DDN.Aspose.Common.DNColor read get_PageColor write set_PageColor;
    property IsComposite: Boolean read get_IsComposite;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property FirstChild: DNNode read get_FirstChild;
    property LastChild: DNNode read get_LastChild;
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNGlossaryDocument = class(TDNGenericImport<DNGlossaryDocumentClass, DNGlossaryDocument>) end;

  //-------------namespace: Aspose.Words----------------
  DNDocumentClass = interface(DNDocumentBaseClass)
  ['{79C4FC7E-5144-53DF-AE2B-03F04D506BD6}']
  { constructors } 

    ///<overloads>Creates or loads a document.</overloads><summary>
    ///  Creates a blank Word document.
    ///</summary>
    ///<remarks><p>The document paper size is Letter by default. If you want to change page setup, use
    ///<see cref="P:Aspose.Words.Section.PageSetup">Section.PageSetup</see>.</p>
    ///  <p>After creation, you can use <see cref="T:Aspose.Words.DocumentBuilder" />
    ///  to add document content easily.</p>
    ///</remarks>
    {class} function init: DNDocument; overload;
    ///<summary>
    ///  Opens an existing document from a file. Automatically detects the file format.
    ///</summary>
    ///  <param name="fileName">File name of the document to open.</param>
    ///<exception cref="T:Aspose.Words.UnsupportedFileFormatException">The document format is not recognized or not supported.</exception><exception cref="T:Aspose.Words.FileCorruptedException">The document appears to be corrupted and cannot be loaded.</exception><exception cref="T:System.Exception">There is a problem with the document and it should be reported to Aspose.Words developers.</exception><exception cref="T:System.IO.IOException">There is an input/output exception.</exception><exception cref="T:Aspose.Words.IncorrectPasswordException">The document is encrypted and requires a password to open, but you supplied an incorrect password.</exception><exception cref="T:System.ArgumentException">The name of the file cannot be null or empty string.</exception>
    {class} function init(fileName: string): DNDocument; overload;
    ///<summary>
    ///  Opens an existing document from a file. Allows to specify additional options such as an encryption password.
    ///</summary>
    ///  <param name="fileName">File name of the document to open.</param>
    ///  <param name="loadOptions">Additional options to use when loading a document. Can be null.</param>
    ///<exception cref="T:Aspose.Words.UnsupportedFileFormatException">The document format is not recognized or not supported.</exception><exception cref="T:Aspose.Words.FileCorruptedException">The document appears to be corrupted and cannot be loaded.</exception><exception cref="T:System.Exception">There is a problem with the document and it should be reported to Aspose.Words developers.</exception><exception cref="T:System.IO.IOException">There is an input/output exception.</exception><exception cref="T:Aspose.Words.IncorrectPasswordException">The document is encrypted and requires a password to open, but you supplied an incorrect password.</exception><exception cref="T:System.ArgumentException">The name of the file cannot be null or empty string.</exception>
    {class} function init(fileName: string; loadOptions: DNLoadOptions): DNDocument; overload;
    ///<summary>
    ///  Opens an existing document from a stream. Automatically detects the file format.
    ///</summary>
    ///<remarks><p>
    ///  The document must be stored at the beginning of the stream. The stream must support random positioning.</p>
    ///</remarks>
    ///  W
    ///  <param name="stream">Stream where to load the document from.</param>
    ///<exception cref="T:Aspose.Words.UnsupportedFileFormatException">The document format is not recognized or not supported.</exception><exception cref="T:Aspose.Words.FileCorruptedException">The document appears to be corrupted and cannot be loaded.</exception><exception cref="T:System.Exception">There is a problem with the document and it should be reported to Aspose.Words developers.</exception><exception cref="T:System.IO.IOException">There is an input/output exception.</exception><exception cref="T:Aspose.Words.IncorrectPasswordException">The document is encrypted and requires a password to open, but you supplied an incorrect password.</exception><exception cref="T:System.ArgumentNullException">The stream cannot be null.</exception><exception cref="T:System.NotSupportedException">The stream does not support reading or seeking.</exception><exception cref="T:System.ObjectDisposedException">The stream is a disposed object.</exception>
    {class} function init(stream: DDN.mscorlib.DNStream): DNDocument; overload;
    ///<summary>
    ///  Opens an existing document from a stream. Allows to specify additional options such as an encryption password.
    ///</summary>
    ///<remarks><p>
    ///  The document must be stored at the beginning of the stream. The stream must support random positioning.</p>
    ///</remarks>
    ///  <param name="stream">The stream where to load the document from.</param>
    ///  <param name="loadOptions">Additional options to use when loading a document. Can be null.</param>
    ///<exception cref="T:Aspose.Words.UnsupportedFileFormatException">The document format is not recognized or not supported.</exception><exception cref="T:Aspose.Words.FileCorruptedException">The document appears to be corrupted and cannot be loaded.</exception><exception cref="T:System.Exception">There is a problem with the document and it should be reported to Aspose.Words developers.</exception><exception cref="T:System.IO.IOException">There is an input/output exception.</exception><exception cref="T:Aspose.Words.IncorrectPasswordException">The document is encrypted and requires a password to open, but you supplied an incorrect password.</exception><exception cref="T:System.ArgumentNullException">The stream cannot be null.</exception><exception cref="T:System.NotSupportedException">The stream does not support reading or seeking.</exception><exception cref="T:System.ObjectDisposedException">The stream is a disposed object.</exception>
    {class} function init(stream: DDN.mscorlib.DNStream; loadOptions: DNLoadOptions): DNDocument; overload;

  end;

  ///<summary>
  ///  Represents a Word document.
  ///</summary>
  ///<remarks><p>The <b>Document</b>
  ///  is a central object in the Aspose.Words library.</p>
  ///  <p>To load an existing document in any of the <see cref="T:Aspose.Words.LoadFormat" />
  ///  formats, pass a file name
  ///  or a stream into one of the <b>Document</b>
  ///  constructors. To create a blank document, call the
  ///  constructor without parameters.</p>
  ///  <p>Use one of the Save method overloads to save the document in any of the
  ///<see cref="T:Aspose.Words.SaveFormat" />
  ///  formats.</p>
  ///  <para>To draw document pages directly onto a <b>Graphics</b>
  ///  object use
  ///<see cref="M:Aspose.Words.Document.RenderToScale(System.Int32,System.Drawing.Graphics,System.Single,System.Single,System.Single)" />
  ///  or <see cref="M:Aspose.Words.Document.RenderToSize(System.Int32,System.Drawing.Graphics,System.Single,System.Single,System.Single,System.Single)" />
  ///  method.</para><para>To print the document, use one of the <see cref="M:Aspose.Words.Document.Print(System.String)" />
  ///  methods.</para><p><see cref="P:Aspose.Words.Document.MailMerge" />
  ///  is the Aspose.Words's reporting engine that allows to populate
  ///  reports designed in Microsoft Word with data from various data sources quickly and easily.
  ///  The data can be from a DataSet, DataTable, DataView, IDataReader or an array of values.
  ///<b>MailMerge</b>
  ///  will go through the records found in the data source and insert them into
  ///  mail merge fields in the document growing it as necessary.</p>
  ///  <p><b>Document</b>
  ///  stores document-wide information such as <see cref="P:Aspose.Words.DocumentBase.Styles" />
  ///  ,
  ///<see cref="P:Aspose.Words.Document.BuiltInDocumentProperties" />
  ///  , <see cref="P:Aspose.Words.Document.CustomDocumentProperties" />
  ///  , lists and macros.
  ///  Most of these objects are accessible via the corresponding properties of the <b>Document</b>
  ///  .</p>
  ///  <p>The <b>Document</b>
  ///  is a root node of a tree that contains all other nodes of the document.
  ///  The tree is a Composite design pattern and in many ways similar to XmlDocument.
  ///  The content of the document can be manipulated freely programmatically:</p>
  ///<list type="bullet"><item>The nodes of the document can be accessed via typed collections, for example <see cref="P:Aspose.Words.Document.Sections" />
  ///  ,
  ///<see cref="T:Aspose.Words.ParagraphCollection" />
  ///  etc.</item>
  ///<item>The nodes of the document can be selected by their node type using
  ///<see cref="M:Aspose.Words.CompositeNode.GetChildNodes(Aspose.Words.NodeType,System.Boolean)" />
  ///  or using an XPath query with <see cref="M:Aspose.Words.CompositeNode.SelectNodes(System.String)" />
  ///  or <see cref="M:Aspose.Words.CompositeNode.SelectSingleNode(System.String)" />
  ///  .</item>
  ///<item>Content nodes can be added or removed from anywhere in the document using
  ///<see cref="M:Aspose.Words.CompositeNode.InsertBefore(Aspose.Words.Node,Aspose.Words.Node)" />
  ///  , <see cref="M:Aspose.Words.CompositeNode.InsertAfter(Aspose.Words.Node,Aspose.Words.Node)" />
  ///  ,
  ///<see cref="M:Aspose.Words.CompositeNode.RemoveChild(Aspose.Words.Node)" />
  ///  and other
  ///  methods provided by the base class <see cref="T:Aspose.Words.CompositeNode" />
  ///  .</item>
  ///<item>The formatting attributes of each node can be changed via the properties of that node.</item>
  ///</list>
  ///  <p>Consider using <see cref="T:Aspose.Words.DocumentBuilder" />
  ///  that simplifies the task of programmatically creating
  ///  or populating the document tree.</p>
  ///  <p>The <b>Document</b>
  ///  can contain only <see cref="T:Aspose.Words.Section" />
  ///  objects.</p>
  ///  <p>In Microsoft Word, a valid document needs to have at least one section.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.Document')]
  DNDocument = interface(DNDocumentBase)
  ['{43288E36-B94C-3D5D-9C6E-8C8B13CFB216}']
  { getters & setters } 

    function get_AttachedTemplate: string;
    procedure set_AttachedTemplate(value: string);
    function get_AutomaticallyUpdateStyles: Boolean;
    procedure set_AutomaticallyUpdateStyles(value: Boolean);
    function get_ShadeFormData: Boolean;
    procedure set_ShadeFormData(value: Boolean);
    function get_TrackRevisions: Boolean;
    procedure set_TrackRevisions(value: Boolean);
    function get_ShowGrammaticalErrors: Boolean;
    procedure set_ShowGrammaticalErrors(value: Boolean);
    function get_ShowSpellingErrors: Boolean;
    procedure set_ShowSpellingErrors(value: Boolean);
    function get_SpellingChecked: Boolean;
    procedure set_SpellingChecked(value: Boolean);
    function get_GrammarChecked: Boolean;
    procedure set_GrammarChecked(value: Boolean);
    function get_NodeType: DNNodeType;
    function get_BuiltInDocumentProperties: DNBuiltInDocumentProperties;
    function get_WebExtensionTaskPanes: DNTaskPaneCollection;
    function get_CustomDocumentProperties: DNCustomDocumentProperties;
    function get_MailMerge: DNMailMerge;
    function get_ProtectionType: DNProtectionType;
    function get_Sections: DNSectionCollection;
    function get_FirstSection: DNSection;
    function get_LastSection: DNSection;
    function get_ViewOptions: DNViewOptions;
    function get_WriteProtection: DNWriteProtection;
    function get_CompatibilityOptions: DNCompatibilityOptions;
    function get_MailMergeSettings: DNMailMergeSettings;
    procedure set_MailMergeSettings(value: DNMailMergeSettings);
    function get_HyphenationOptions: DNHyphenationOptions;
    function get_HasRevisions: Boolean;
    function get_HasMacros: Boolean;
    function get_Watermark: DNWatermark;
    function get_VersionsCount: Int32;
    function get_DefaultTabStop: Double;
    procedure set_DefaultTabStop(value: Double);
    function get_Theme: DNTheme;
    function get_CustomXmlParts: DNCustomXmlPartCollection;
    procedure set_CustomXmlParts(value: DNCustomXmlPartCollection);
    function get_PackageCustomParts: DNCustomPartCollection;
    procedure set_PackageCustomParts(value: DNCustomPartCollection);
    function get_Variables: DNVariableCollection;
    function get_GlossaryDocument: DNGlossaryDocument;
    procedure set_GlossaryDocument(value: DNGlossaryDocument);
    function get_OriginalFileName: string;
    function get_OriginalLoadFormat: DNLoadFormat;
    function get_Compliance: DNOoxmlCompliance;
    function get_DigitalSignatures: DNDigitalSignatureCollection;
    function get_FontSettings: DNFontSettings;
    procedure set_FontSettings(value: DNFontSettings);
    function get_PageCount: Int32;
    function get_Revisions: DNRevisionCollection;
    function get_LayoutOptions: DNLayoutOptions;
    function get_RevisionsView: DNRevisionsView;
    procedure set_RevisionsView(value: DNRevisionsView);
    function get_FootnoteOptions: DNFootnoteOptions;
    function get_EndnoteOptions: DNEndnoteOptions;
    function get_FieldOptions: DNFieldOptions;
    function get_RemovePersonalInformation: Boolean;
    procedure set_RemovePersonalInformation(value: Boolean);
    function get_VbaProject: DNVbaProject;
    procedure set_VbaProject(value: DNVbaProject);
    function get_Document: DNDocumentBase;
    function get_NodeChangingCallback: DNINodeChangingCallback;
    procedure set_NodeChangingCallback(value: DNINodeChangingCallback);
    function get_ResourceLoadingCallback: DNIResourceLoadingCallback;
    procedure set_ResourceLoadingCallback(value: DNIResourceLoadingCallback);
    function get_FontInfos: DNFontInfoCollection;
    function get_Styles: DNStyleCollection;
    function get_Lists: DNListCollection;
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_BackgroundShape: DNShape;
    procedure set_BackgroundShape(value: DNShape);
    function get_PageColor: DDN.Aspose.Common.DNColor;
    procedure set_PageColor(value: DDN.Aspose.Common.DNColor);
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Gets the page size, orientation and other information about a page that might be useful for printing or rendering.
    ///</summary>
    ///  <param name="pageIndex">The 0-based page index.</param>
    function GetPageInfo(pageIndex: Int32): DNPageInfo;
    ///<overloads>Prints the document without bringing up any user interface forms.</overloads><summary>
    ///  Prints the whole document to the default printer.
    ///</summary>
    procedure Print; overload;
    ///<summary>
    ///  Print the whole document to the specified printer,
    ///  using the standard (no User Interface) print controller.
    ///</summary>
    ///  <param name="printerName">The name of the printer.</param>
    procedure Print(printerName: string); overload;
    ///<summary>
    ///  Prints the document according to the specified printer settings,
    ///  using the standard (no User Interface) print controller.
    ///</summary>
    ///<remarks><para>The <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  object allows you to specify the printer to print on, the range of pages of to print and other options.</para></remarks>
    ///  <param name="printerSettings">The printer settings to use.</param>
    procedure Print(printerSettings: DDN.Aspose.Common.DNPrinterSettings); overload;
    ///<summary>
    ///  Prints the document according to the specified printer settings,
    ///  using the standard (no User Interface) print controller and a document name.
    ///</summary>
    ///<remarks><para>The <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  object allows you to specify the printer to print on, the range of pages of to print and other options.</para></remarks>
    ///  <param name="printerSettings">The printer settings to use.</param>
    ///  <param name="documentName">The document name to display (for example, in a print status dialog
    ///  box or printer queue) while printing the document.</param>
    procedure Print(printerSettings: DDN.Aspose.Common.DNPrinterSettings; documentName: string); overload;
    ///<summary>
    ///  Updates <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.Thumbnail" />
    ///  of the document according to the specified options.
    ///</summary>
    ///<remarks>
    ///  The <see cref="T:Aspose.Words.Rendering.ThumbnailGeneratingOptions" />
    ///  allows you to specify the source of thumbnail, size and other options.
    ///  If attempt to generate thumbnail fails, doesn't change one.
    ///</remarks>
    ///  <param name="options">The generating options to use.</param>
    procedure UpdateThumbnail(options: DNThumbnailGeneratingOptions); overload;
    ///<summary>
    ///  Updates <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.Thumbnail" />
    ///  of the document using default options.
    ///</summary>
    procedure UpdateThumbnail; overload;
    ///<summary>
    ///  Returns the <see cref="T:Aspose.Words.Document" />
    ///  object representing specified range of pages.
    ///</summary>
    ///<remarks>
    ///  The resulting document should look like the one in MS Word, as if we had performed 'Print specific pages' â€“ the numbering,
    ///  headers/footers and cross tables layout will be preserved.
    ///  But due to a large number of nuances, appearing while reducing the number of pages, full match of the layout is a quiet complicated task requiring a lot of effort.
    ///  Depending on the document complexity there might be slight differences in the resulting document contents layout comparing to the source document.
    ///  Any feedback would be greatly appreciated.
    ///</remarks>
    ///  <param name="index">The zero-based index of the first page to extract.</param>
    ///  <param name="count">Number of pages to be extracted.</param>
    function ExtractPages(index: Int32; count: Int32): DNDocument;
    ///<summary>
    ///  Performs a deep copy of the <see cref="T:Aspose.Words.Document" />
    ///  .
    ///</summary>
    ///<returns>The cloned document.</returns>
    ///<dev>Kept to remain compatible with the old API.</dev>
    function Clone: DNDocument; overload;
    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the nodes.</param>
    ///<returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
    ///<remarks>
    ///  Calls DocumentVisitor.VisitDocumentStart, then calls Accept for all child nodes of the document
    ///  and calls DocumentVisitor.VisitDocumentEnd at the end.
    ///</remarks>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Appends the specified document to the end of this document.
    ///</summary>
    ///  <param name="srcDoc">The document to append.</param>
    ///  <param name="importFormatMode">Specifies how to merge style formatting that clashes.</param>
    procedure AppendDocument(srcDoc: DNDocument; importFormatMode: DNImportFormatMode); overload;
    ///<summary>
    ///  Appends the specified document to the end of this document.
    ///</summary>
    ///  <param name="srcDoc">The document to append.</param>
    ///  <param name="importFormatMode">Specifies how to merge style formatting that clashes.</param>
    ///  <param name="importFormatOptions">Allows to specify options that affect formatting of a result document.</param>
    procedure AppendDocument(srcDoc: DNDocument; importFormatMode: DNImportFormatMode; importFormatOptions: DNImportFormatOptions); overload;
    ///<overloads>Saves the document.</overloads><summary>
    ///  Saves the document to a file. Automatically determines the save format from the extension.
    ///</summary>
    ///  <param name="fileName">The name for the document. If a document with the
    ///  specified file name already exists, the existing document is overwritten.</param>
    ///<returns>Additional information that you can optionally use.</returns>
    function Save(fileName: string): DNSaveOutputParameters; overload;
    ///<summary>
    ///  Saves the document to a file in the specified format.
    ///</summary>
    ///  <param name="fileName">The name for the document. If a document with the
    ///  specified file name already exists, the existing document is overwritten.</param>
    ///  <param name="saveFormat">The format in which to save the document.</param>
    ///<returns>Additional information that you can optionally use.</returns>
    function Save(fileName: string; saveFormat: DNSaveFormat): DNSaveOutputParameters; overload;
    ///<summary>
    ///  Saves the document to a file using the specified save options.
    ///</summary>
    ///  <param name="fileName">The name for the document. If a document with the
    ///  specified file name already exists, the existing document is overwritten.</param>
    ///  <param name="saveOptions">Specifies the options that control how the document is saved. Can be null.</param>
    ///<returns>Additional information that you can optionally use.</returns>
    function Save(fileName: string; saveOptions: DNSaveOptions): DNSaveOutputParameters; overload;
    ///<summary>
    ///  Saves the document to a stream using the specified format.
    ///</summary>
    ///  <param name="stream">Stream where to save the document.</param>
    ///  <param name="saveFormat">The format in which to save the document.</param>
    ///<returns>Additional information that you can optionally use.</returns>
    function Save(stream: DDN.mscorlib.DNStream; saveFormat: DNSaveFormat): DNSaveOutputParameters; overload;
    ///<summary>
    ///  Saves the document to a stream using the specified save options.
    ///</summary>
    ///  <param name="stream">Stream where to save the document.</param>
    ///  <param name="saveOptions">Specifies the options that control how the document is saved. Can be null.
    ///  If this is null, the document will be saved in the binary DOC format.</param>
    ///<returns>Additional information that you can optionally use.</returns>
    function Save(stream: DDN.mscorlib.DNStream; saveOptions: DNSaveOptions): DNSaveOutputParameters; overload;
    ///<summary>
    ///  Sends the document to the client browser.
    ///</summary>
    ///<remarks><para>Internally, this method saves to a memory stream first and then copies to the response stream
    ///  because the response stream does not support seek.</para></remarks>
    ///  <param name="response">Response object where to save the document.</param>
    ///  <param name="fileName">The name for the document that will appear at the client browser.
    ///  The name should not contain path.</param>
    ///  <param name="contentDisposition">A <see cref="T:Aspose.Words.ContentDisposition" />
    ///  value that
    ///  specifies how the document is presented at the client browser.</param>
    ///  <param name="saveOptions">Specifies the options that control how the document is saved. Can be null.</param>
    ///<returns>Additional information that you can optionally use.</returns>
    function Save(response: DDN.Aspose.Common.DNHttpResponse; fileName: string; contentDisposition: DNContentDisposition; saveOptions: DNSaveOptions): DNSaveOutputParameters; overload;
    ///<summary>
    ///  If the document contains no sections, creates one section with one paragraph.
    ///</summary>
    procedure EnsureMinimum;
    ///<summary>
    ///  Accepts all tracked changes in the document.
    ///</summary>
    ///<remarks>This method is a shortcut for <see cref="M:Aspose.Words.RevisionCollection.AcceptAll" />
    ///  .</remarks>
    procedure AcceptAllRevisions;
    ///<overloads>Protects the document from changes.</overloads><summary>
    ///  Protects the document from changes without changing the existing password or assigns a random password.
    ///</summary>
    ///<remarks><p>When a document is protected, the user can make only limited changes,
    ///  such as adding annotations, making revisions, or completing a form.</p>
    ///  <p>When you protect a document, and the document already has a protection password,
    ///  the existing protection password is not changed.</p>
    ///  <p>When you protect a document, and the document does not have a protection password,
    ///  this method assigns a random password that makes it impossible to unprotect the document
    ///  in Microsoft Word, but you still can unprotect the document in Aspose.Words as it does not
    ///  require a password when unprotecting.</p>
    ///</remarks>
    ///  <param name="type">Specifies the protection type for the document.</param>
    procedure Protect(&type: DNProtectionType); overload;
    ///<summary>
    ///  Protects the document from changes and optionally sets a protection password.
    ///</summary>
    ///<remarks><p>When a document is protected, the user can make only limited changes,
    ///  such as adding annotations, making revisions, or completing a form.</p>
    ///  <para>Note that document protection is different from write protection.
    ///  Write protection is specified using the <see cref="P:Aspose.Words.Document.WriteProtection" />
    ///  .</para></remarks>
    ///  <param name="type">Specifies the protection type for the document.</param>
    ///  <param name="password">The password to protect the document with.
    ///  Specify null or empty string if you want to protect the document without a password.</param>
    procedure Protect(&type: DNProtectionType; password: string); overload;
    ///<overloads>Removes protection from the document.</overloads><summary>
    ///  Removes protection from the document regardless of the password.
    ///</summary>
    ///<remarks><para>This method unprotects the document even if it has a protection password.</para><para>Note that document protection is different from write protection.
    ///  Write protection is specified using the <see cref="P:Aspose.Words.Document.WriteProtection" />
    ///  .</para></remarks>
    procedure Unprotect; overload;
    ///<summary>
    ///  Removes protection from the document if a correct password is specified.
    ///</summary>
    ///<remarks><para>This method unprotects the document only if a correct password is specified.</para><para>Note that document protection is different from write protection.
    ///  Write protection is specified using the <see cref="P:Aspose.Words.Document.WriteProtection" />
    ///  .</para></remarks>
    ///  <param name="password">The password to unprotect the document with.</param>
    ///<returns>True if a correct password was specified and the document was unprotected.</returns>
    function Unprotect(password: string): Boolean; overload;
    ///<summary>
    ///  Updates word count properties of the document.
    ///</summary>
    ///<remarks><p><b>UpdateWordCount</b>
    ///  recalculates and updates Characters, Words and Paragraphs
    ///  properties in the <see cref="P:Aspose.Words.Document.BuiltInDocumentProperties" />
    ///  collection of the <b>Document</b>
    ///  .</p>
    ///  <p>Note that <b>UpdateWordCount</b>
    ///  does not update number of lines and pages properties.
    ///  Use the <see cref="M:Aspose.Words.Document.UpdateWordCount" />
    ///  overload and pass True value as a parameter to do that.</p>
    ///  <p>When you use an evaluation version, the evaluation watermark will also be included
    ///  in the word count.</p>
    ///</remarks>
    procedure UpdateWordCount; overload;
    ///<summary>
    ///  Updates word count properties of the document, optionally updates <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.Lines" />
    ///  property.
    ///</summary>
    ///<remarks>
    ///  This method will rebuild page layout of the document.
    ///</remarks>
    ///  <param name="updateLinesCount">True if number of lines in the document shall be calculated.</param>
    procedure UpdateWordCount(updateLinesCount: Boolean); overload;
    ///<summary>
    ///  Updates widths of cells and tables in the document according to their preferred widths and content.
    ///  You do not need to call this method if the tables appear correct in the output document.
    ///</summary>
    ///<remarks><p>You do not normally need to call this method as cell and table widths are maintained automatically.
    ///  You can call this method before exporting to PDF (or any other fixed-page format), only in rare cases
    ///  where you confirmed that tables appear incorrectly laid out in the output document. Calling this method
    ///  might help to correct the output.</p>
    ///</remarks>
    procedure UpdateTableLayout;
    ///<summary>
    ///  Updates list labels for all list items in the document.
    ///</summary>
    ///<remarks><para>This method updates list label properties such as <see cref="P:Aspose.Words.Lists.ListLabel.LabelValue" />
    ///  and
    ///<see cref="P:Aspose.Words.Lists.ListLabel.LabelString" />
    ///  for each <see cref="P:Aspose.Words.Paragraph.ListLabel" />
    ///  object in the document.</para><para>Also, this method is sometimes implicitly called when updating fields in the document. This is required
    ///  because some fields that may reference list numbers (such as TOC or REF) need them be up-to-date.</para></remarks>
    procedure UpdateListLabels;
    ///<summary>
    ///  Removes all macros (the VBA project) as well as toolbars and command customizations from the document.
    ///</summary>
    ///<remarks><p>By removing all macros from a document you can ensure the document contains no macro viruses.</p>
    ///</remarks>
    procedure RemoveMacros;
    ///<summary>
    ///  Updates the values of fields in the whole document.
    ///</summary>
    ///<remarks><para>When you open, modify and then save a document, Aspose.Words does not update fields automatically, it keeps them intact.
    ///  Therefore, you would usually want to call this method before saving if you have modified the document
    ///  programmatically and want to make sure the proper (calculated) field values appear in the saved document.</para><para>There is no need to update fields after executing a mail merge because mail merge is a kind of field update
    ///  and automatically updates all fields in the document.</para><p>This method does not update all field types. For the detailed list of supported field types, see the Programmers Guide.</p>
    ///  <para>This method does not update fields that are related to the page layout algorithms (e.g. PAGE, PAGES, PAGEREF).
    ///  The page layout-related fields are updated when you render a document or call <see cref="M:Aspose.Words.Document.UpdatePageLayout" />
    ///  .</para><para>Use the <see cref="M:Aspose.Words.Document.NormalizeFieldTypes" />
    ///  method before fields updating if there were document changes that affected field types.</para><para>To update fields in a specific part of the document use <see cref="M:Aspose.Words.Range.UpdateFields" />
    ///  .</para></remarks>
    procedure UpdateFields;
    ///<summary>
    ///  Unlinks fields in the whole document.
    ///</summary>
    ///<remarks><para>Replaces all the fields in the whole document with their most recent results.</para><para>To unlink fields in a specific part of the document use <see cref="M:Aspose.Words.Range.UnlinkFields" />
    ///  .</para></remarks>
    procedure UnlinkFields;
    ///<summary>
    ///  Changes field type values <see cref="P:Aspose.Words.Fields.FieldChar.FieldType" />
    ///  of <see cref="T:Aspose.Words.Fields.FieldStart" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldSeparator" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldEnd" />
    ///  in the whole document so that they correspond to the field types contained in the field codes.
    ///</summary>
    ///<remarks><para>Use this method after document changes that affect field types.</para><para>To change field type values in a specific part of the document use <see cref="M:Aspose.Words.Range.NormalizeFieldTypes" />
    ///  .</para></remarks>
    procedure NormalizeFieldTypes;
    ///<summary>
    ///  Joins runs with same formatting in all paragraphs of the document.
    ///</summary>
    ///<remarks><p>This is an optimization method. Some documents contain adjacent runs with same formatting.
    ///  Usually this occurs if a document was intensively edited manually.
    ///  You can reduce the document size and speed up further processing by joining these runs.</p>
    ///  <p>The operation checks every <see cref="T:Aspose.Words.Paragraph" />
    ///  node in the document for adjacent <see cref="T:Aspose.Words.Run" />
    ///  nodes having identical properties. It ignores unique identifiers used to track editing sessions of run
    ///  creation and modification. First run in every joining sequence accumulates all text. Remaining
    ///  runs are deleted from the document.</p>
    ///</remarks>
    ///<returns>Number of joins performed. When <b>N</b>
    ///  adjacent runs are being joined they count as <b>N - 1</b>
    ///  joins.</returns>
    function JoinRunsWithSameFormatting: Int32;
    ///<summary>
    ///  Converts formatting specified in table styles into direct formatting on tables in the document.
    ///</summary>
    ///<remarks><para>This method exists because this version of Aspose.Words provides only limited support for
    ///  table styles (see below). This method might be useful when you load a DOCX or WordprocessingML
    ///  document that contains tables formatted with table styles and you need to query formatting of
    ///  tables, cells, paragraphs or text.</para><para>This version of Aspose.Words provides limited support for table styles as follows:</para><list type="bullet"><item>Table styles defined in DOCX or WordprocessingML documents are preserved as table styles
    ///  when saving the document as DOCX or WordprocessingML.</item>
    ///<item>Table styles defined in DOCX or WordprocessingML documents are automatically converted
    ///  to direct formatting on tables when saving the document into any other format,
    ///  rendering or printing.</item>
    ///<item>Table styles defined in DOC documents are preserved as table styles when
    ///  saving the document as DOC only.</item>
    ///</list>
    ///</remarks>
    procedure ExpandTableStylesToDirectFormatting;
    ///<summary>
    ///  Cleans unused styles and lists from the document.
    ///</summary>
    procedure Cleanup; overload;
    ///<summary>
    ///  Cleans unused styles and lists from the document depending on given <see cref="T:Aspose.Words.CleanupOptions" />
    ///  .
    ///</summary>
    procedure Cleanup(options: DNCleanupOptions); overload;
    ///<summary>
    ///  Removes external XML schema references from this document.
    ///</summary>
    procedure RemoveExternalSchemaReferences;
    ///<summary>
    ///  Starts automatically marking all further changes you make to the document programmatically as revision changes.
    ///</summary>
    ///<remarks><p>If you call this method and then make some changes to the document programmatically,
    ///  save the document and later open the document in MS Word you will see these changes as revisions.</p>
    ///  <p>Currently Aspose.Words supports tracking of node insertions and deletions only. Formatting changes are not
    ///  recorded as revisions.</p>
    ///  <p>Automatic tracking of changes is supported both when modifying this document through node manipulations
    ///  as well as when using <see cref="T:Aspose.Words.DocumentBuilder" />
    ///</p>
    ///  <p>This method does not change the <see cref="P:Aspose.Words.Document.TrackRevisions" />
    ///  option and does not use its value
    ///  for the purposes of revision tracking.</p>
    ///</remarks>
    ///  <param name="author">Initials of the author to use for revisions.</param>
    ///  <param name="dateTime">The date and time to use for revisions.</param>
    ///<seealso cref="M:Aspose.Words.Document.StopTrackRevisions" />
    procedure StartTrackRevisions(author: string; dateTime: DDN.mscorlib.DNDateTime); overload;
    ///<summary>
    ///  Starts automatically marking all further changes you make to the document programmatically as revision changes.
    ///</summary>
    ///<remarks><p>If you call this method and then make some changes to the document programmatically,
    ///  save the document and later open the document in MS Word you will see these changes as revisions.</p>
    ///  <p>Currently Aspose.Words supports tracking of node insertions and deletions only. Formatting changes are not
    ///  recorded as revisions.</p>
    ///  <p>Automatic tracking of changes is supported both when modifying this document through node manipulations
    ///  as well as when using <see cref="T:Aspose.Words.DocumentBuilder" />
    ///</p>
    ///  <p>This method does not change the <see cref="P:Aspose.Words.Document.TrackRevisions" />
    ///  option and does not use its value
    ///  for the purposes of revision tracking.</p>
    ///</remarks>
    ///  <param name="author">Initials of the author to use for revisions.</param>
    ///<seealso cref="M:Aspose.Words.Document.StopTrackRevisions" />
    procedure StartTrackRevisions(author: string); overload;
    ///<summary>
    ///  Stops automatic marking of document changes as revisions.
    ///</summary>
    ///<seealso cref="M:Aspose.Words.Document.StartTrackRevisions(System.String,System.DateTime)" />
    procedure StopTrackRevisions;
    ///<summary>
    ///  Compares this document with another document producing changes as number of edit and format revisions <see cref="T:Aspose.Words.Revision" />
    ///  .
    ///</summary>
    ///  <param name="document">Document to compare.</param>
    ///  <param name="author">Initials of the author to use for revisions.</param>
    ///  <param name="dateTime">The date and time to use for revisions.</param>
    ///<remarks>The following document nodes are not compared at the moment:
    ///<list type="bullet"><item><see cref="T:Aspose.Words.Markup.StructuredDocumentTag" />
    ///</item>
    ///<item>Item3</item>
    ///</list>
    ///<note>Documents must not have revisions before comparison.</note></remarks>
    procedure Compare(document: DNDocument; author: string; dateTime: DDN.mscorlib.DNDateTime); overload;
    ///<summary>
    ///  Compares this document with another document producing changes as a number of edit and format revisions <see cref="T:Aspose.Words.Revision" />
    ///  .
    ///  Allows to specify comparison options using <see cref="T:Aspose.Words.Comparing.CompareOptions" />
    ///  .
    ///</summary>
    procedure Compare(document: DNDocument; author: string; dateTime: DDN.mscorlib.DNDateTime; options: DNCompareOptions); overload;
    ///<summary>
    ///  Copies styles from the specified template to a document.
    ///</summary>
    ///<remarks>
    ///  When styles are copied from a template to a document,
    ///  like-named styles in the document are redefined to match the style descriptions in the template.
    ///  Unique styles from the template are copied to the document. Unique styles in the document remain intact.
    ///</remarks>
    ///<dev>
    ///  AM. This is experimental method for WORDSNET-16783.
    ///  Customer trying to copy all styles but we don't fully understand his requirements.
    ///  He wants preserve style hierarchy and this is not possible if copy styles one by one as
    ///  we resolve style in destination collection and update links to based and linked styles
    ///  accordingly.
    ///</dev>
    procedure CopyStylesFromTemplate(template: string); overload;
    ///<summary>
    ///  Copies styles from the specified template to a document.
    ///</summary>
    ///<remarks>
    ///  When styles are copied from a template to a document,
    ///  like-named styles in the document are redefined to match the style descriptions in the template.
    ///  Unique styles from the template are copied to the document. Unique styles in the document remain intact.
    ///</remarks>
    procedure CopyStylesFromTemplate(template: DNDocument); overload;
    ///<summary>
    ///  Rebuilds the page layout of the document.
    ///</summary>
    ///<remarks><para>This method formats a document into pages and updates the page number related fields in the document such
    ///  as PAGE, PAGES, PAGEREF and REF. The up-to-date page layout information is required for a correct rendering of the document
    ///  to fixed-page formats.</para><para>This method is automatically invoked when you first convert a document to PDF, XPS, image or print it.
    ///  However, if you modify the document after rendering and then attempt to render it again - Aspose.Words will not
    ///  update the page layout automatically. In this case you should call <see cref="M:Aspose.Words.Document.UpdatePageLayout" />
    ///  before
    ///  rendering again.</para></remarks>
    procedure UpdatePageLayout;
    ///<summary>
    ///  Renders a document page into a <see cref="T:System.Drawing.Graphics" />
    ///  object to a specified scale.
    ///</summary>
    ///  <param name="pageIndex">The 0-based page index.</param>
    ///  <param name="graphics">The object where to render to.</param>
    ///  <param name="x">The X coordinate (in world units) of the top left corner of the rendered page.</param>
    ///  <param name="y">The Y coordinate (in world units) of the top left corner of the rendered page.</param>
    ///  <param name="scale">The scale for rendering the page (1.0 is 100%).</param>
    ///<returns>The width and height (in world units) of the rendered page.</returns>
    function RenderToScale(pageIndex: Int32; graphics: DDN.Aspose.Common.DNGraphics; x: Single; y: Single; scale: Single): DDN.Aspose.Common.DNSizeF;
    ///<summary>
    ///  Renders a document page into a <see cref="T:System.Drawing.Graphics" />
    ///  object to a specified size.
    ///</summary>
    ///  <param name="pageIndex">The 0-based page index.</param>
    ///  <param name="graphics">The object where to render to.</param>
    ///  <param name="x">The X coordinate (in world units) of the top left corner of the rendered page.</param>
    ///  <param name="y">The Y coordinate (in world units) of the top left corner of the rendered page.</param>
    ///  <param name="width">The maximum width (in world units) that can be occupied by the rendered page.</param>
    ///  <param name="height">The maximum height (in world units) that can be occupied by the rendered page.</param>
    ///<returns>The scale that was automatically calculated for the rendered page to fit the specified size.</returns>
    function RenderToSize(pageIndex: Int32; graphics: DDN.Aspose.Common.DNGraphics; x: Single; y: Single; width: Single; height: Single): Single;
    ///<overloads>Imports a node from another document to the current document.</overloads><summary><p>Imports a node from another document to the current document.</p>
    ///</summary>
    ///<remarks><p>This method uses the <see cref="F:Aspose.Words.ImportFormatMode.UseDestinationStyles" />
    ///  option to resolve formatting.</p>
    ///  <p>Importing a node creates a copy of the source node belonging to the importing document.
    ///  The returned node has no parent. The source node is not altered or removed from the original document.</p>
    ///  <p>Before a node from another document can be inserted into this document, it must be imported.
    ///  During import, document-specific properties such as references to styles and lists are translated
    ///  from the original to the importing document. After the node was imported, it can be inserted
    ///  into the appropriate place in the document using <see cref="M:Aspose.Words.CompositeNode.InsertBefore(Aspose.Words.Node,Aspose.Words.Node)" />
    ///  or
    ///<see cref="M:Aspose.Words.CompositeNode.InsertAfter(Aspose.Words.Node,Aspose.Words.Node)" />
    ///  .</p>
    ///  <p>If the source node already belongs to the destination document, then simply a deep clone
    ///  of the source node is created.</p>
    ///<seealso cref="T:Aspose.Words.NodeImporter" />
    ///</remarks>
    ///  <param name="srcNode">The node being imported.</param>
    ///  <param name="isImportChildren">True to import all child nodes recursively; otherwise, false.</param>
    ///<returns>The cloned node that belongs to the current document.</returns>
    function ImportNode(srcNode: DNNode; isImportChildren: Boolean): DNNode; overload;
    ///<summary><p>Imports a node from another document to the current document with an option to control formatting.</p>
    ///</summary>
    ///<remarks><p>This overload is useful to control how styles and list formatting are imported.</p>
    ///  <p>Importing a node creates a copy of the source node belonging to the importing document.
    ///  The returned node has no parent. The source node is not altered or removed from the original document.</p>
    ///  <p>Before a node from another document can be inserted into this document, it must be imported.
    ///  During import, document-specific properties such as references to styles and lists are translated
    ///  from the original to the importing document. After the node was imported, it can be inserted
    ///  into the appropriate place in the document using <see cref="M:Aspose.Words.CompositeNode.InsertBefore(Aspose.Words.Node,Aspose.Words.Node)" />
    ///  or
    ///<see cref="M:Aspose.Words.CompositeNode.InsertAfter(Aspose.Words.Node,Aspose.Words.Node)" />
    ///  .</p>
    ///  <p>If the source node already belongs to the destination document, then simply a deep clone
    ///  of the source node is created.</p>
    ///<seealso cref="T:Aspose.Words.ImportFormatMode" />
    ///<seealso cref="T:Aspose.Words.NodeImporter" />
    ///</remarks>
    ///  <param name="srcNode">The node to imported.</param>
    ///  <param name="isImportChildren">True to import all child nodes recursively; otherwise, false.</param>
    ///  <param name="importFormatMode">Specifies how to merge style formatting that clashes.</param>
    ///<returns>The cloned, imported node. The node belongs to the destination document, but has no parent.</returns>
    function ImportNode(srcNode: DNNode; isImportChildren: Boolean; importFormatMode: DNImportFormatMode): DNNode; overload;
    function GetText: string;
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    function SelectNodes(xpath: string): DNNodeList;
    function SelectSingleNode(xpath: string): DNNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    function PrependChild(newChild: DNNode): DNNode;
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    function RemoveChild(oldChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSmartTags;
    function IndexOf(child: DNNode): Int32;
    function CreateNavigator: DDN.Aspose.Common.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode; overload;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Gets or sets the full path of the template attached to the document.
    ///</summary>
    ///<remarks><p>Empty string means the document is attached to the Normal template.</p>
    ///<seealso cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.Template" />
    ///</remarks>
    ///<exception cref="T:System.ArgumentNullException">Throws if you attempt to set to a null value.</exception>
    property AttachedTemplate: string read get_AttachedTemplate write set_AttachedTemplate;
    ///<summary>
    ///  Gets or sets a flag indicating whether the styles in the document are updated to match the styles in the
    ///  attached template each time the document is opened in MS Word.
    ///</summary>
    property AutomaticallyUpdateStyles: Boolean read get_AutomaticallyUpdateStyles write set_AutomaticallyUpdateStyles;
    ///<summary>
    ///  Specifies whether to turn on the gray shading on form fields.
    ///</summary>
    property ShadeFormData: Boolean read get_ShadeFormData write set_ShadeFormData;
    ///<summary><b>True</b>
    ///  if changes are tracked when this document is edited in Microsoft Word.
    ///</summary>
    ///<remarks><p>Setting this option only instructs Microsoft Word whether the track changes
    ///  is turned on or off. This property has no effect on changes to the document that you make
    ///  programmatically via Aspose.Words.</p>
    ///  <p>If you want to automatically track changes as they are made programmatically by Aspose.Words
    ///  to this document use the <see cref="M:Aspose.Words.Document.StartTrackRevisions(System.String,System.DateTime)" />
    ///  method.</p>
    ///</remarks>
    property TrackRevisions: Boolean read get_TrackRevisions write set_TrackRevisions;
    ///<summary>
    ///  Specifies whether to display grammar errors in this document.
    ///</summary>
    property ShowGrammaticalErrors: Boolean read get_ShowGrammaticalErrors write set_ShowGrammaticalErrors;
    ///<summary>
    ///  Specifies whether to display spelling errors in this document.
    ///</summary>
    property ShowSpellingErrors: Boolean read get_ShowSpellingErrors write set_ShowSpellingErrors;
    ///<summary>
    ///  Returns <b>true</b>
    ///  if the document has been checked for spelling.
    ///</summary>
    ///<remarks>
    ///  To recheck the spelling in the document, set this property to <b>false</b>
    ///  .
    ///</remarks>
    property SpellingChecked: Boolean read get_SpellingChecked write set_SpellingChecked;
    ///<summary>
    ///  Returns <b>true</b>
    ///  if the document has been checked for grammar.
    ///</summary>
    ///<remarks>
    ///  To recheck the grammar in the document, set this property to <b>false</b>
    ///  .
    ///</remarks>
    property GrammarChecked: Boolean read get_GrammarChecked write set_GrammarChecked;
    ///<summary>
    ///  Returns <b>NodeType.Document</b>
    ///  .
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Returns a collection that represents all the built-in document properties of the document.
    ///</summary>
    property BuiltInDocumentProperties: DNBuiltInDocumentProperties read get_BuiltInDocumentProperties;
    ///<summary>
    ///  Returns a collection that represents a list of task pane add-ins.
    ///</summary>
    property WebExtensionTaskPanes: DNTaskPaneCollection read get_WebExtensionTaskPanes;
    ///<summary>
    ///  Returns a collection that represents all the custom document properties of the document.
    ///</summary>
    property CustomDocumentProperties: DNCustomDocumentProperties read get_CustomDocumentProperties;
    ///<summary>
    ///  Returns a <b>MailMerge</b>
    ///  object that represents the mail merge functionality for the document.
    ///</summary>
    property MailMerge: DNMailMerge read get_MailMerge;
    ///<summary>
    ///  Gets the currently active document protection type.
    ///</summary>
    ///<remarks><p>This property allows to retrieve the currently set document protection type.
    ///  To change the document protection type use the <see cref="M:Aspose.Words.Document.Protect(Aspose.Words.ProtectionType,System.String)" />
    ///  and <see cref="M:Aspose.Words.Document.Unprotect" />
    ///  methods.</p>
    ///  <p>When a document is protected, the user can make only limited changes,
    ///  such as adding annotations, making revisions, or completing a form.</p>
    ///  <para>Note that document protection is different from write protection.
    ///  Write protection is specified using the <see cref="P:Aspose.Words.Document.WriteProtection" />
    ///</para><seealso cref="M:Aspose.Words.Document.Protect(Aspose.Words.ProtectionType,System.String)" />
    ///<seealso cref="M:Aspose.Words.Document.Unprotect" />
    ///<seealso cref="P:Aspose.Words.Document.WriteProtection" />
    ///</remarks>
    property ProtectionType: DNProtectionType read get_ProtectionType;
    ///<summary>
    ///  Returns a collection that represents all sections in the document.
    ///</summary>
    property Sections: DNSectionCollection read get_Sections;
    ///<summary>
    ///  Gets the first section in the document.
    ///</summary>
    ///<remarks>
    ///  Returns <c>null</c> if there are no sections.
    ///</remarks>
    property FirstSection: DNSection read get_FirstSection;
    ///<summary>
    ///  Gets the last section in the document.
    ///</summary>
    ///<remarks>
    ///  Returns <c>null</c> if there are no sections.
    ///</remarks>
    property LastSection: DNSection read get_LastSection;
    ///<summary>
    ///  Provides options to control how the document is displayed in Microsoft Word.
    ///</summary>
    property ViewOptions: DNViewOptions read get_ViewOptions;
    ///<summary>
    ///  Provides access to the document write protection options.
    ///</summary>
    property WriteProtection: DNWriteProtection read get_WriteProtection;
    ///<summary>
    ///  Provides access to document compatibility options (that is, the user preferences entered on the <b>Compatibility</b>
    ///  tab of the <b>Options</b>
    ///  dialog in Word).
    ///</summary>
    property CompatibilityOptions: DNCompatibilityOptions read get_CompatibilityOptions;
    ///<summary>
    ///  Gets or sets the object that contains all of the mail merge information for a document.
    ///</summary>
    ///<remarks><para>You can use this object to specify a mail merge data source for a document and this information
    ///  (along with the available data fields) will appear in Microsoft Word when the user opens this document.
    ///  Or you can use this object to query mail merge settings that the user has specified in Microsoft Word
    ///  for this document.</para><para>This object is never null.</para></remarks>
    property MailMergeSettings: DNMailMergeSettings read get_MailMergeSettings write set_MailMergeSettings;
    ///<summary>
    ///  Provides access to document hyphenation options.
    ///</summary>
    property HyphenationOptions: DNHyphenationOptions read get_HyphenationOptions;
    ///<summary>
    ///  Returns <b>true</b>
    ///  if the document has any tracked changes.
    ///</summary>
    ///<remarks>
    ///  This property is a shortcut for comparing <see cref="P:Aspose.Words.RevisionCollection.Count" />
    ///  to zero.
    ///</remarks>
    property HasRevisions: Boolean read get_HasRevisions;
    ///<summary>
    ///  Returns <b>true</b>
    ///  if the document has a VBA project (macros).
    ///</summary>
    ///<seealso cref="M:Aspose.Words.Document.RemoveMacros" />
    property HasMacros: Boolean read get_HasMacros;
    ///<summary>
    ///  Provides access to the document watermark.
    ///</summary>
    property Watermark: DNWatermark read get_Watermark;
    ///<summary>
    ///  Gets the number of document versions that was stored in the DOC document.
    ///</summary>
    ///<remarks><p>Versions in Microsoft Word are accessed via the File/Versions menu. Microsoft Word supports
    ///  versions only for DOC files.</p>
    ///  <p>This property allows to detect if there were document versions stored in this document
    ///  before it was opened in Aspose.Words. Aspose.Words provides no other support for document versions.
    ///  If you save this document using Aspose.Words, the document will be saved without versions.</p>
    ///</remarks>
    property VersionsCount: Int32 read get_VersionsCount;
    ///<summary>
    ///  Gets or sets the interval (in points) between the default tab stops.
    ///</summary>
    ///<seealso cref="T:Aspose.Words.TabStopCollection" />
    ///<seealso cref="T:Aspose.Words.TabStop" />
    property DefaultTabStop: Double read get_DefaultTabStop write set_DefaultTabStop;
    ///<summary>
    ///  Gets the <see cref="P:Aspose.Words.Document.Theme" />
    ///  object for this document.
    ///</summary>
    property Theme: DNTheme read get_Theme;
    ///<summary>
    ///  Gets or sets the collection of Custom XML Data Storage Parts.
    ///</summary>
    ///<remarks><para>Aspose.Words loads and saves Custom XML Parts into OOXML and DOC documents only.</para><para>This property cannot be <c>null</c>.</para><seealso cref="T:Aspose.Words.Markup.CustomXmlPart" />
    ///</remarks>
    property CustomXmlParts: DNCustomXmlPartCollection read get_CustomXmlParts write set_CustomXmlParts;
    ///<summary>
    ///  Gets or sets the collection of custom parts (arbitrary content) that are linked to the OOXML package using "unknown relationships".
    ///</summary>
    ///<remarks><para>Do not confuse these custom parts with Custom XML Data. If you need to access Custom XML parts,
    ///  use the <see cref="P:Aspose.Words.Document.CustomXmlParts" />
    ///  property.</para><para>This collection contains OOXML parts whose parent is the OOXML package and they targets are of an "unknown relationship".
    ///  For more information see <see cref="T:Aspose.Words.Markup.CustomPart" />
    ///  .</para><para>Aspose.Words loads and saves custom parts into OOXML documents only.</para><para>This property cannot be <c>null</c>.</para><seealso cref="T:Aspose.Words.Markup.CustomPart" />
    ///</remarks>
    property PackageCustomParts: DNCustomPartCollection read get_PackageCustomParts write set_PackageCustomParts;
    ///<summary>
    ///  Returns the collection of variables added to a document or template.
    ///</summary>
    property Variables: DNVariableCollection read get_Variables;
    ///<summary>
    ///  Gets or sets the glossary document within this document or template. A glossary document is a storage
    ///  for AutoText, AutoCorrect and Building Block entries defined in a document.
    ///</summary>
    ///<remarks><para>This property returns <c>null</c> if the document does not have a glossary document.</para><para>You can add a glossary document to a document by creating a
    ///<see cref="T:Aspose.Words.BuildingBlocks.GlossaryDocument" />
    ///  object and assigning to this property.</para><seealso cref="T:Aspose.Words.BuildingBlocks.GlossaryDocument" />
    ///</remarks>
    property GlossaryDocument: DNGlossaryDocument read get_GlossaryDocument write set_GlossaryDocument;
    ///<summary>
    ///  Gets the original file name of the document.
    ///</summary>
    ///<remarks><p>Returns null if the document was loaded from a stream or created blank.</p>
    ///</remarks>
    property OriginalFileName: string read get_OriginalFileName;
    ///<summary>
    ///  Gets the format of the original document that was loaded into this object.
    ///</summary>
    ///<remarks><para>If you created a new blank document, returns the <see cref="F:Aspose.Words.LoadFormat.Doc" />
    ///  value.</para></remarks>
    property OriginalLoadFormat: DNLoadFormat read get_OriginalLoadFormat;
    ///<summary>
    ///  Gets the OOXML compliance version determined from the loaded document content.
    ///  Makes sense only for OOXML documents.
    ///</summary>
    ///<remarks><para>If you created a new blank document or load non OOXML document
    ///  returns the <see cref="F:Aspose.Words.Saving.OoxmlCompliance.Ecma376_2006" />
    ///  value.</para></remarks>
    property Compliance: DNOoxmlCompliance read get_Compliance;
    ///<summary>
    ///  Gets the collection of digital signatures for this document and their validation results.
    ///</summary>
    ///<remarks><para>This collection contains digital signatures that were loaded from the original document.
    ///  These digital signatures will not be saved when you save this <see cref="T:Aspose.Words.Document" />
    ///  object
    ///  into a file or stream because saving or converting will produce a document that is different from the
    ///  original and the original digital signatures will no longer be valid.</para><para>This collection is never null. If the document is not signed, it will contain zero elements.</para></remarks>
    property DigitalSignatures: DNDigitalSignatureCollection read get_DigitalSignatures;
    ///<summary>
    ///  Gets or sets document font settings.
    ///</summary>
    ///<remarks><para>This property allows to specify font settings per document. If set to null, default static font settings
    ///<see cref="P:Aspose.Words.Fonts.FontSettings.DefaultInstance" />
    ///  will be used.</para><para>The default value is null.</para></remarks>
    property FontSettings: DNFontSettings read get_FontSettings write set_FontSettings;
    ///<summary>
    ///  Gets the number of pages in the document as calculated by the most recent page layout operation.
    ///</summary>
    ///<seealso cref="M:Aspose.Words.Document.UpdatePageLayout" />
    property PageCount: Int32 read get_PageCount;
    ///<summary>
    ///  Gets a collection of revisions (tracked changes) that exist in this document.
    ///</summary>
    ///<remarks><para>The returned collection is a "live" collection, which means if you remove parts of a document that contain
    ///  revisions, the deleted revisions will automatically disappear from this collection.</para></remarks>
    property Revisions: DNRevisionCollection read get_Revisions;
    ///<summary>
    ///  Gets a <b>LayoutOptions</b>
    ///  object that represents options to control the layout process of this document.
    ///</summary>
    property LayoutOptions: DNLayoutOptions read get_LayoutOptions;
    ///<summary>
    ///  Gets or sets a value indicating whether to work with the original or revised version of a document.
    ///</summary>
    ///<remarks>
    ///  The default value is <b><see cref="F:Aspose.Words.RevisionsView.Original" />
    ///</b>
    ///  .
    ///</remarks>
    ///<dev>
    ///  Currently this option is supported for <see cref="P:Aspose.Words.Lists.ListLabel.LabelString" />
    ///  ,
    ///<see cref="P:Aspose.Words.Lists.ListFormat.ListLevel" />
    ///  and <see cref="P:Aspose.Words.Lists.ListFormat.ListLevelNumber" />
    ///  only.
    ///</dev>
    property RevisionsView: DNRevisionsView read get_RevisionsView write set_RevisionsView;
    ///<summary>
    ///  Provides options that control numbering and positioning of footnotes in this document.
    ///</summary>
    property FootnoteOptions: DNFootnoteOptions read get_FootnoteOptions;
    ///<summary>
    ///  Provides options that control numbering and positioning of endnotes in this document.
    ///</summary>
    property EndnoteOptions: DNEndnoteOptions read get_EndnoteOptions;
    ///<summary>
    ///  Gets a <b>FieldOptions</b>
    ///  object that represents options to control field handling in the document.
    ///</summary>
    property FieldOptions: DNFieldOptions read get_FieldOptions;
    ///<summary>
    ///  Gets or sets a flag indicating that Microsoft Word will remove all user information from comments, revisions and
    ///  document properties upon saving the document.
    ///</summary>
    property RemovePersonalInformation: Boolean read get_RemovePersonalInformation write set_RemovePersonalInformation;
    ///<summary>
    ///  Gets or sets a <see cref="P:Aspose.Words.Document.VbaProject" />
    ///  .
    ///</summary>
    property VbaProject: DNVbaProject read get_VbaProject write set_VbaProject;
    property Document: DNDocumentBase read get_Document;
    ///<summary>
    ///  Called when a node is inserted or removed in the document.
    ///</summary>
    property NodeChangingCallback: DNINodeChangingCallback read get_NodeChangingCallback write set_NodeChangingCallback;
    ///<summary>
    ///  Allows to control how external resources are loaded.
    ///</summary>
    property ResourceLoadingCallback: DNIResourceLoadingCallback read get_ResourceLoadingCallback write set_ResourceLoadingCallback;
    ///<summary>
    ///  Provides access to properties of fonts used in this document.
    ///</summary>
    ///<remarks><para>This collection of font definitions is loaded as is from the document.
    ///  Font definitions might be optional, missing or incomplete in some documents.</para><para>Do not rely on this collection to ascertain that a particular font is used in the document.
    ///  You should only use this collection to get information about fonts that might be used in the document.</para><seealso cref="T:Aspose.Words.Fonts.FontInfoCollection" />
    ///<seealso cref="T:Aspose.Words.Fonts.FontInfo" />
    ///</remarks>
    property FontInfos: DNFontInfoCollection read get_FontInfos;
    ///<summary>
    ///  Returns a collection of styles defined in the document.
    ///</summary>
    ///<remarks><p>For more information see the description of the <see cref="T:Aspose.Words.StyleCollection" />
    ///  class.</p>
    ///<seealso cref="T:Aspose.Words.StyleCollection" />
    ///<seealso cref="T:Aspose.Words.Style" />
    ///</remarks>
    property Styles: DNStyleCollection read get_Styles;
    ///<summary>
    ///  Provides access to the list formatting used in the document.
    ///</summary>
    ///<remarks><p>For more information see the description of the <see cref="T:Aspose.Words.Lists.ListCollection" />
    ///  class.</p>
    ///<seealso cref="T:Aspose.Words.Lists.ListCollection" />
    ///<seealso cref="T:Aspose.Words.Lists.List" />
    ///<seealso cref="T:Aspose.Words.Lists.ListFormat" />
    ///</remarks>
    property Lists: DNListCollection read get_Lists;
    ///<summary>
    ///  Called during various document processing procedures when an issue is detected that might result
    ///  in data or formatting fidelity loss.
    ///</summary>
    ///<remarks>
    ///  Document may generate warnings at any stage of its existence, so it's important to setup warning callback as
    ///  early as possible to avoid the warnings loss. E.g. such properties as <see cref="P:Aspose.Words.Document.PageCount" />
    ///  actually build the document layout which is used later for rendering, and the layout warnings may be lost if
    ///  warning callback is specified just for the rendering calls later.
    ///</remarks>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Gets or sets the background shape of the document. Can be null.
    ///</summary>
    ///<remarks><para>Microsoft Word allows only a shape that has its <see cref="P:Aspose.Words.Drawing.ShapeBase.ShapeType" />
    ///  property equal
    ///  to <see cref="F:Aspose.Words.Drawing.ShapeType.Rectangle" />
    ///  to be used as a background shape for a document.</para><para>Microsoft Word supports only the fill properties of a background shape. All other properties
    ///  are ignored.</para><para>Setting this property to a non-null value will also set the <see cref="P:Aspose.Words.Settings.ViewOptions.DisplayBackgroundShape" />
    ///  to true.</para><seealso cref="P:Aspose.Words.Settings.ViewOptions.DisplayBackgroundShape" />
    ///<seealso cref="P:Aspose.Words.DocumentBase.PageColor" />
    ///</remarks>
    property BackgroundShape: DNShape read get_BackgroundShape write set_BackgroundShape;
    ///<summary>
    ///  Gets or sets the page color of the document. This property is a simpler version of <see cref="P:Aspose.Words.DocumentBase.BackgroundShape" />
    ///  .
    ///</summary>
    ///<remarks><para>This property provides a simple way to specify a solid page color for the document.
    ///  Setting this property creates and sets an appropriate <see cref="P:Aspose.Words.DocumentBase.BackgroundShape" />
    ///  .</para><para>If the page color is not set (e.g. there is no background shape in the document) returns
    ///<see cref="F:System.Drawing.Color.Empty" />
    ///  .</para><seealso cref="P:Aspose.Words.DocumentBase.BackgroundShape" />
    ///</remarks>
    property PageColor: DDN.Aspose.Common.DNColor read get_PageColor write set_PageColor;
    property IsComposite: Boolean read get_IsComposite;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property FirstChild: DNNode read get_FirstChild;
    property LastChild: DNNode read get_LastChild;
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNDocument = class(TDNGenericImport<DNDocumentClass, DNDocument>) end;

  //-------------namespace: Aspose.Words.Drawing----------------
  DNShapeBaseClass = interface(DNCompositeNodeClass)
  ['{C228A8A4-6CF3-5AF0-8F24-B707CAC7DA84}']
  end;

  ///<summary>
  ///  Base class for objects in the drawing layer, such as an AutoShape, freeform, OLE object, ActiveX control, or picture.
  ///</summary>
  ///<remarks><p>This is an abstract class. The two derived classes that you can instantiate
  ///  are <see cref="T:Aspose.Words.Drawing.Shape" />
  ///  and <see cref="T:Aspose.Words.Drawing.GroupShape" />
  ///  .</p>
  ///  <p>A shape is a node in the document tree.</p>
  ///  <p>If the shape is a child of a <see cref="T:Aspose.Words.Paragraph" />
  ///  object, then the shape is said to be "top-level".
  ///  Top-level shapes are measured and positioned in points.</p>
  ///  <p>A shape can also occur as a child of a <see cref="T:Aspose.Words.Drawing.GroupShape" />
  ///  object when several shapes
  ///  are grouped. Child shapes of a group shape are positioned in the coordinate space and units
  ///  defined by the <see cref="P:Aspose.Words.Drawing.ShapeBase.CoordSize" />
  ///  and <see cref="P:Aspose.Words.Drawing.ShapeBase.CoordOrigin" />
  ///  properties of the parent
  ///  group shape.</p>
  ///  <p>A shape can be positioned inline with text or floating. The positioning method is controlled
  ///  using the <see cref="P:Aspose.Words.Drawing.ShapeBase.WrapType" />
  ///  property.</p>
  ///  <p>When a shape is floating, it is positioned relative to something (e.g the current paragraph,
  ///  the margin or the page). The relative positioning of the shape is specified using the
  ///<see cref="P:Aspose.Words.Drawing.ShapeBase.RelativeHorizontalPosition" />
  ///  and <see cref="P:Aspose.Words.Drawing.ShapeBase.RelativeVerticalPosition" />
  ///  properties.</p>
  ///  <p>A floating shape be positioned explicitly using the <see cref="P:Aspose.Words.Drawing.ShapeBase.Left" />
  ///  and <see cref="P:Aspose.Words.Drawing.ShapeBase.Top" />
  ///  properties or aligned relative to some other object using the <see cref="P:Aspose.Words.Drawing.ShapeBase.HorizontalAlignment" />
  ///  and <see cref="P:Aspose.Words.Drawing.ShapeBase.VerticalAlignment" />
  ///  properties.</p>
  ///<seealso cref="T:Aspose.Words.Drawing.Shape" />
  ///<seealso cref="T:Aspose.Words.Drawing.GroupShape" />
  ///</remarks>
  [DNTypeName('Aspose.Words.Drawing.ShapeBase')]
  DNShapeBase = interface(DNCompositeNode)
  ['{5DE248BE-A9C5-38C3-8C7E-07512A9D6192}']
  { getters & setters } 

    function get_Fill: DNFill;
    function get_ScreenTip: string;
    procedure set_ScreenTip(value: string);
    function get_HRef: string;
    procedure set_HRef(value: string);
    function get_Target: string;
    procedure set_Target(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_IsTopLevel: Boolean;
    function get_IsGroup: Boolean;
    function get_IsImage: Boolean;
    function get_IsHorizontalRule: Boolean;
    function get_IsWordArt: Boolean;
    function get_CanHaveImage: Boolean;
    function get_AnchorLocked: Boolean;
    procedure set_AnchorLocked(value: Boolean);
    function get_AspectRatioLocked: Boolean;
    procedure set_AspectRatioLocked(value: Boolean);
    function get_AllowOverlap: Boolean;
    procedure set_AllowOverlap(value: Boolean);
    function get_BehindText: Boolean;
    procedure set_BehindText(value: Boolean);
    function get_IsInline: Boolean;
    function get_Left: Double;
    procedure set_Left(value: Double);
    function get_Top: Double;
    procedure set_Top(value: Double);
    function get_Right: Double;
    function get_Bottom: Double;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_DistanceTop: Double;
    procedure set_DistanceTop(value: Double);
    function get_DistanceBottom: Double;
    procedure set_DistanceBottom(value: Double);
    function get_DistanceLeft: Double;
    procedure set_DistanceLeft(value: Double);
    function get_DistanceRight: Double;
    procedure set_DistanceRight(value: Double);
    function get_Rotation: Double;
    procedure set_Rotation(value: Double);
    function get_ZOrder: Int32;
    procedure set_ZOrder(value: Int32);
    function get_ParentParagraph: DNParagraph;
    function get_Bounds: DDN.Aspose.Common.DNRectangleF;
    procedure set_Bounds(value: DDN.Aspose.Common.DNRectangleF);
    function get_BoundsInPoints: DDN.Aspose.Common.DNRectangleF;
    function get_BoundsWithEffects: DDN.Aspose.Common.DNRectangleF;
    function get_ShapeType: DNShapeType;
    function get_MarkupLanguage: DNShapeMarkupLanguage;
    function get_SizeInPoints: DDN.Aspose.Common.DNSizeF;
    function get_FlipOrientation: DNFlipOrientation;
    procedure set_FlipOrientation(value: DNFlipOrientation);
    function get_RelativeHorizontalPosition: DNRelativeHorizontalPosition;
    procedure set_RelativeHorizontalPosition(value: DNRelativeHorizontalPosition);
    function get_RelativeVerticalPosition: DNRelativeVerticalPosition;
    procedure set_RelativeVerticalPosition(value: DNRelativeVerticalPosition);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_WrapType: DNWrapType;
    procedure set_WrapType(value: DNWrapType);
    function get_WrapSide: DNWrapSide;
    procedure set_WrapSide(value: DNWrapSide);
    function get_CoordOrigin: DDN.Aspose.Common.DNPoint;
    procedure set_CoordOrigin(value: DDN.Aspose.Common.DNPoint);
    function get_CoordSize: DDN.Aspose.Common.DNSize;
    procedure set_CoordSize(value: DDN.Aspose.Common.DNSize);
    function get_Font: DNFont;
    function get_IsSignatureLine: Boolean;
    function get_IsLayoutInCell: Boolean;
    procedure set_IsLayoutInCell(value: Boolean);
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_NodeType: DNNodeType;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Adds to the source rectangle values of the effect extent and returns the final rectangle.
    ///</summary>
    function AdjustWithEffects(source: DDN.Aspose.Common.DNRectangleF): DDN.Aspose.Common.DNRectangleF;
    ///<summary>
    ///  Creates and returns an object that can be used to render this shape into an image.
    ///</summary>
    ///<remarks><para>This method just invokes the <see cref="T:Aspose.Words.Rendering.ShapeRenderer" />
    ///  constructor and passes
    ///  this object as a parameter.</para></remarks>
    ///<returns>The renderer object for this shape.</returns>
    function GetShapeRenderer: DNShapeRenderer;
    ///<summary>
    ///  Reserved for system use. IShapeAttrSource.
    ///</summary>
    function GetDirectShapeAttr(key: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  Reserved for system use. IShapeAttrSource.
    ///</summary>
    function FetchInheritedShapeAttr(key: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  Reserved for system use. IShapeAttrSource.
    ///</summary>
    function FetchShapeAttr(key: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  Reserved for system use. IShapeAttrSource.
    ///</summary>
    procedure SetShapeAttr(key: Int32; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  Reserved for system use. IShapeAttrSource.
    ///</summary>
    procedure RemoveShapeAttr(key: Int32);
    ///<summary>
    ///  Converts a value from the local coordinate space into the coordinate space of the parent shape.
    ///</summary>
    function LocalToParent(value: DDN.Aspose.Common.DNPointF): DDN.Aspose.Common.DNPointF;
    ///<summary>
    ///  Gets the text of this node and of all its children.
    ///</summary>
    ///<remarks><p>The returned string includes all control and special characters as described in <see cref="T:Aspose.Words.ControlChar" />
    ///  .</p>
    ///</remarks>
    function GetText: string;
    ///<overloads>Returns a collection of child nodes that match the specified type.</overloads><summary>
    ///  Returns a live collection of child nodes that match the specified type.
    ///</summary>
    ///<remarks><p>The collection of nodes returned by this method is always live.</p>
    ///<remarks><p>A live collection is always in sync with the document. For example, if you
    ///  selected all sections in a document and enumerate through the collection
    ///  deleting the sections, the section is removed from the collection immediately
    ///  when it is removed from the document.</p>
    ///</remarks>
    ///</remarks>
    ///  <param name="nodeType">Specifies the type of nodes to select.</param>
    ///  <param name="isDeep">True to select from all child nodes recursively.
    ///  False to select only among immediate children. </param>
    ///<returns>A live collection of child nodes of the specified type.</returns>
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    ///<summary>
    ///  Returns an Nth child node that matches the specified type.
    ///</summary>
    ///<remarks><p>If index is out of range, a null is returned.</p>
    ///</remarks>
    ///  <param name="nodeType">Specifies the type of the child node.</param>
    ///  <param name="index">Zero based index of the child node to select.
    ///  Negative indexes are also allowed and indicate access from the end,
    ///  that is -1 means the last node.</param>
    ///  <param name="isDeep">True to select from all child nodes recursively.
    ///  False to select only among immediate children. See remarks for more info.</param>
    ///<returns>The child node that matches the criteria or null if no matching node is found.</returns>
    ///<remarks>Note that markup nodes (<see cref="F:Aspose.Words.NodeType.StructuredDocumentTag" />
    ///  and <see cref="F:Aspose.Words.NodeType.SmartTag" />
    ///  )
    ///  are traversed even when isDeep = false and GetChild is invoked for non-markup node type. For example if the first run in a para
    ///  is wrapped in a StructuredDocumentTag, it will still be returned by GetChild(NodeType.Run, 0, false).</remarks>
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    ///<summary>
    ///  Selects a list of nodes matching the XPath expression.
    ///</summary>
    ///<remarks><p>Only expressions with element names are supported at the moment. Expressions
    ///  that use attribute names are not supported.</p>
    ///</remarks>
    ///  <param name="xpath">The XPath expression.</param>
    ///<returns>A list of nodes matching the XPath query.</returns>
    function SelectNodes(xpath: string): DNNodeList;
    ///<summary>
    ///  Selects the first Node that matches the XPath expression.
    ///</summary>
    ///<remarks><p>Only expressions with element names are supported at the moment. Expressions
    ///  that use attribute names are not supported.</p>
    ///</remarks>
    ///  <param name="xpath">The XPath expression.</param>
    ///<returns>The first Node that matches the XPath query or null if no matching node is found.</returns>
    function SelectSingleNode(xpath: string): DNNode;
    ///<summary>
    ///  Provides support for the for each style iteration over the child nodes of this node.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    ///<summary>
    ///  Adds the specified node to the end of the list of child nodes for this node.
    ///</summary>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The node to add.</param>
    ///<returns>The node added.</returns>
    function AppendChild(newChild: DNNode): DNNode;
    ///<summary>
    ///  Adds the specified node to the beginning of the list of child nodes for this node.
    ///</summary>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The node to add.</param>
    ///<returns>The node added.</returns>
    function PrependChild(newChild: DNNode): DNNode;
    ///<summary>
    ///  Inserts the specified node immediately after the specified reference node.
    ///</summary>
    ///<remarks><p>If refChild is null, inserts newChild at the beginning of the list of child nodes.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The Node to insert.</param>
    ///  <param name="refChild">The Node that is the reference node. The newNode is placed after the refNode. </param>
    ///<returns>The inserted node.</returns>
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    ///<summary>
    ///  Inserts the specified node immediately before the specified reference node.
    ///</summary>
    ///<remarks><p>If refChild is null, inserts newChild at the end of the list of child nodes.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The Node to insert.</param>
    ///  <param name="refChild">The Node that is the reference node. The newChild is placed before this node.</param>
    ///<returns>The inserted node.</returns>
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    ///<summary>
    ///  Removes the specified child node.
    ///</summary>
    ///<remarks><p>The parent of oldChild is set to null after the node is removed.</p>
    ///</remarks>
    ///  <param name="oldChild">The node to remove.</param>
    ///<returns>The removed node.</returns>
    function RemoveChild(oldChild: DNNode): DNNode;
    ///<summary>
    ///  Removes all the child nodes of the current node.
    ///</summary>
    procedure RemoveAllChildren;
    ///<summary>
    ///  Removes all <see cref="T:Aspose.Words.Markup.SmartTag" />
    ///  descendant nodes of the current node.
    ///</summary>
    ///<remarks>This method does not remove the content of the smart tags.</remarks>
    procedure RemoveSmartTags;
    ///<summary>
    ///  Returns the index of the specified child node in the child node array.
    ///</summary>
    ///<remarks>
    ///  Returns -1 if the node is not found in the child nodes.
    ///</remarks>
    function IndexOf(child: DNNode): Int32;
    ///<summary>
    ///  Reserved for system use. IXPathNavigable.
    ///</summary>
    function CreateNavigator: DDN.Aspose.Common.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function Accept(visitor: DNDocumentVisitor): Boolean;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Gets fill formatting for the shape.
    ///</summary>
    property Fill: DNFill read get_Fill;
    ///<summary>
    ///  Defines the text displayed when the mouse pointer moves over the shape.
    ///</summary>
    ///<remarks><p>The default value is an empty string.</p>
    ///</remarks>
    property ScreenTip: string read get_ScreenTip write set_ScreenTip;
    ///<summary>
    ///  Gets or sets the full hyperlink address for a shape.
    ///</summary>
    ///<remarks><p>The default value is an empty string.</p>
    ///  <p>Below are examples of valid values for this property:</p>
    ///  <p>Full URI: <c>https://www.aspose.com/</c>.</p>
    ///  <p>Full file name: <c>C:\\My Documents\\SalesReport.doc</c>.</p>
    ///  <para>Relative URI: <c>../../../resource.txt</c></para><p>Relative file name: <c>..\\My Documents\\SalesReport.doc</c>.</p>
    ///  <p>Bookmark within another document: <c>https://www.aspose.com/Products/Default.aspx#Suites</c></p>
    ///  <p>Bookmark within this document: <c>#BookmakName</c>.</p>
    ///</remarks>
    property HRef: string read get_HRef write set_HRef;
    ///<summary>
    ///  Gets or sets the target frame for the shape hyperlink.
    ///</summary>
    ///<remarks><p>The default value is an empty string.</p>
    ///</remarks>
    property Target: string read get_Target write set_Target;
    ///<summary>
    ///  Defines alternative text to be displayed instead of a graphic.
    ///</summary>
    ///<remarks><p>The default value is an empty string.</p>
    ///</remarks>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Gets or sets the title (caption) of the current shape object.
    ///</summary>
    ///<remarks><para>Default is empty string.</para><para>Cannot be null, but can be an empty string.</para></remarks>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets the optional shape name.
    ///</summary>
    ///<remarks><para>Default is empty string.</para><para>Cannot be null, but can be an empty string.</para></remarks>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns true if this object was inserted in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    ///<summary>
    ///  Returns true if this object was deleted in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    ///<summary>
    ///  Returns <b>true</b>
    ///  if this object was moved (deleted) in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    ///<summary>
    ///  Returns <b>true</b>
    ///  if this object was moved (inserted) in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    ///<summary>
    ///  Returns true if this shape is not a child of a group shape.
    ///</summary>
    property IsTopLevel: Boolean read get_IsTopLevel;
    ///<summary>
    ///  Returns true if this is a group shape.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    ///<summary>
    ///  Returns true if this shape is an image shape.
    ///</summary>
    property IsImage: Boolean read get_IsImage;
    ///<summary>
    ///  Returns true if this shape is a horizontal rule.
    ///</summary>
    property IsHorizontalRule: Boolean read get_IsHorizontalRule;
    ///<summary>
    ///  Returns true if this shape is a WordArt object.
    ///</summary>
    ///<remarks>
    ///  Works till 2007 compatibility mode.
    ///  In 2010 and higher compatibility mode WordArt is just a TextBox with fancy fonts.
    ///</remarks>
    property IsWordArt: Boolean read get_IsWordArt;
    ///<summary>
    ///  Returns true if the shape type allows the shape to have an image.
    ///</summary>
    ///<remarks><para>Although Microsoft Word has a special shape type for images, it appears that in Microsoft Word documents any shape
    ///  except a group shape can have an image, therefore this property returns true for all shapes except <see cref="T:Aspose.Words.Drawing.GroupShape" />
    ///  .</para></remarks>
    property CanHaveImage: Boolean read get_CanHaveImage;
    ///<summary>
    ///  Specifies whether the shape's anchor is locked.
    ///</summary>
    ///<remarks><p>The default value is <b>false</b>
    ///  .</p>
    ///  <p>Has effect only for top level shapes.</p>
    ///  <p>This property affects behavior of the shape's anchor in Microsoft Word.
    ///  When the anchor is not locked, moving the shape in Microsoft Word can move
    ///  the shape's anchor too.</p>
    ///</remarks>
    property AnchorLocked: Boolean read get_AnchorLocked write set_AnchorLocked;
    ///<summary>
    ///  Specifies whether the shape's aspect ratio is locked.
    ///</summary>
    ///<remarks><p>The default value depends on the <see cref="P:Aspose.Words.Drawing.ShapeBase.ShapeType" />
    ///  , for the ShapeType.Image it is <b>true</b>
    ///  but for the other shape types it is <b>false</b>
    ///  .</p>
    ///  <p>Has effect for top level shapes only.</p>
    ///</remarks>
    property AspectRatioLocked: Boolean read get_AspectRatioLocked write set_AspectRatioLocked;
    ///<summary>
    ///  Gets or sets a value that specifies whether this shape can overlap other shapes.
    ///</summary>
    ///<remarks><para>This property affects behavior of the shape in Microsoft Word.
    ///  Aspose.Words ignores the value of this property.</para><para>This property is applicable only to top level shapes.</para><p>The default value is <b>true</b>
    ///  .</p>
    ///</remarks>
    property AllowOverlap: Boolean read get_AllowOverlap write set_AllowOverlap;
    ///<summary>
    ///  Specifies whether the shape is below or above text.
    ///</summary>
    ///<remarks><p>Has effect only for top level shapes.</p>
    ///  <p>The default value is <b>false</b>
    ///  .</p>
    ///<seealso cref="P:Aspose.Words.Drawing.ShapeBase.ZOrder" />
    ///</remarks>
    property BehindText: Boolean read get_BehindText write set_BehindText;
    ///<summary>
    ///  A quick way to determine if this shape is positioned inline with text.
    ///</summary>
    ///<remarks><p>Has effect only for top level shapes.</p>
    ///</remarks>
    property IsInline: Boolean read get_IsInline;
    ///<summary>
    ///  Gets or sets the position of the left edge of the containing block of the shape.
    ///</summary>
    ///<remarks><p>For a top-level shape, the value is in points and relative to the shape anchor.</p>
    ///  <p>For shapes in a group, the value is in the coordinate space and units of the parent group.</p>
    ///  <p>The default value is 0.</p>
    ///  <p>Has effect only for floating shapes.</p>
    ///</remarks>
    property Left: Double read get_Left write set_Left;
    ///<summary>
    ///  Gets or sets the position of the top edge of the containing block of the shape.
    ///</summary>
    ///<remarks><p>For a top-level shape, the value is in points and relative to the shape anchor.</p>
    ///  <p>For shapes in a group, the value is in the coordinate space and units of the parent group.</p>
    ///  <p>The default value is 0.</p>
    ///  <p>Has effect only for floating shapes.</p>
    ///</remarks>
    property Top: Double read get_Top write set_Top;
    ///<summary>
    ///  Gets the position of the right edge of the containing block of the shape.
    ///</summary>
    ///<remarks><p>For a top-level shape, the value is in points and relative to the shape anchor.</p>
    ///  <p>For shapes in a group, the value is in the coordinate space and units of the parent group.</p>
    ///</remarks>
    property Right: Double read get_Right;
    ///<summary>
    ///  Gets the position of the bottom edge of the containing block of the shape.
    ///</summary>
    ///<remarks><p>For a top-level shape, the value is in points and relative to the shape anchor.</p>
    ///  <p>For shapes in a group, the value is in the coordinate space and units of the parent group.</p>
    ///</remarks>
    property Bottom: Double read get_Bottom;
    ///<summary>
    ///  Gets or sets the width of the containing block of the shape.
    ///</summary>
    ///<remarks><p>For a top-level shape, the value is in points.</p>
    ///  <p>For shapes in a group, the value is in the coordinate space and units of the parent group.</p>
    ///  <p>The default value is 0.</p>
    ///</remarks>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Gets or sets the height of the containing block of the shape.
    ///</summary>
    ///<remarks><p>For a top-level shape, the value is in points.</p>
    ///  <p>For shapes in a group, the value is in the coordinate space and units of the parent group.</p>
    ///  <p>The default value is 0.</p>
    ///</remarks>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Returns or sets the distance (in points) between the document text and the top edge of the shape.
    ///</summary>
    ///<remarks><p>The default value is 0.</p>
    ///  <p>Has effect only for top level shapes.</p>
    ///</remarks>
    property DistanceTop: Double read get_DistanceTop write set_DistanceTop;
    ///<summary>
    ///  Returns or sets the distance (in points) between the document text and the bottom edge of the shape.
    ///</summary>
    ///<remarks><p>The default value is 0.</p>
    ///  <p>Has effect only for top level shapes.</p>
    ///</remarks>
    property DistanceBottom: Double read get_DistanceBottom write set_DistanceBottom;
    ///<summary>
    ///  Returns or sets the distance (in points) between the document text and the left edge of the shape.
    ///</summary>
    ///<remarks><p>The default value is 1/8 inch.</p>
    ///  <p>Has effect only for top level shapes.</p>
    ///</remarks>
    property DistanceLeft: Double read get_DistanceLeft write set_DistanceLeft;
    ///<summary>
    ///  Returns or sets the distance (in points) between the document text and the right edge of the shape.
    ///</summary>
    ///<remarks><p>The default value is 1/8 inch.</p>
    ///  <p>Has effect only for top level shapes.</p>
    ///</remarks>
    property DistanceRight: Double read get_DistanceRight write set_DistanceRight;
    ///<summary>
    ///  Defines the angle (in degrees) that a shape is rotated.
    ///  Positive value corresponds to clockwise rotation angle.
    ///</summary>
    ///<remarks><p>The default value is 0.</p>
    ///</remarks>
    property Rotation: Double read get_Rotation write set_Rotation;
    ///<summary>
    ///  Determines the display order of overlapping shapes.
    ///</summary>
    ///<remarks><p>Has effect only for top level shapes.</p>
    ///  <p>The default value is 0.</p>
    ///  <p>The number represents the stacking precedence. A shape with a higher number will be displayed
    ///  as if it were overlapping (in "front" of) a shape with a lower number. </p>
    ///  <p>The order of overlapping shapes is independent for shapes in the header and in the main
    ///  text of the document.</p>
    ///  <p>The display order of child shapes in a group shape is determined by their order
    ///  inside the group shape.</p>
    ///<seealso cref="P:Aspose.Words.Drawing.ShapeBase.BehindText" />
    ///</remarks>
    property ZOrder: Int32 read get_ZOrder write set_ZOrder;
    ///<summary>
    ///  Returns the immediate parent paragraph.
    ///</summary>
    ///<remarks>For child shapes of a group shape and child shapes of an Office Math object always returns null.</remarks>
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    ///<summary>
    ///  Gets or sets the location and size of the containing block of the shape.
    ///</summary>
    ///<remarks>
    ///  Ignores aspect ratio lock upon setting.
    ///</remarks>
    ///<remarks><p>For a top-level shape, the value is in points and relative to the shape anchor.</p>
    ///  <p>For shapes in a group, the value is in the coordinate space and units of the parent group.</p>
    ///</remarks>
    property Bounds: DDN.Aspose.Common.DNRectangleF read get_Bounds write set_Bounds;
    ///<summary>
    ///  Gets the location and size of the containing block of the shape in points, relative to the anchor of the topmost shape.
    ///</summary>
    property BoundsInPoints: DDN.Aspose.Common.DNRectangleF read get_BoundsInPoints;
    ///<summary>
    ///  Gets final extent that this shape object has after applying drawing effects.
    ///  Value is measured in points.
    ///</summary>
    property BoundsWithEffects: DDN.Aspose.Common.DNRectangleF read get_BoundsWithEffects;
    ///<summary>
    ///  Gets the shape type.
    ///</summary>
    property ShapeType: DNShapeType read get_ShapeType;
    ///<summary>
    ///  Gets MarkupLanguage used for this graphic object.
    ///</summary>
    property MarkupLanguage: DNShapeMarkupLanguage read get_MarkupLanguage;
    ///<summary>
    ///  Gets the size of the shape in points.
    ///</summary>
    property SizeInPoints: DDN.Aspose.Common.DNSizeF read get_SizeInPoints;
    ///<summary>
    ///  Switches the orientation of a shape.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.FlipOrientation.None" />
    ///  .</p>
    ///</remarks>
    property FlipOrientation: DNFlipOrientation read get_FlipOrientation write set_FlipOrientation;
    ///<summary>
    ///  Specifies relative to what the shape is positioned horizontally.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.RelativeHorizontalPosition.Column" />
    ///  .</p>
    ///  <p>Has effect only for top level floating shapes.</p>
    ///</remarks>
    property RelativeHorizontalPosition: DNRelativeHorizontalPosition read get_RelativeHorizontalPosition write set_RelativeHorizontalPosition;
    ///<summary>
    ///  Specifies relative to what the shape is positioned vertically.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.RelativeVerticalPosition.Paragraph" />
    ///  .</p>
    ///  <p>Has effect only for top level floating shapes.</p>
    ///</remarks>
    property RelativeVerticalPosition: DNRelativeVerticalPosition read get_RelativeVerticalPosition write set_RelativeVerticalPosition;
    ///<summary>
    ///  Specifies how the shape is positioned horizontally.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.HorizontalAlignment.None" />
    ///  .</p>
    ///  <p>Has effect only for top level floating shapes.</p>
    ///</remarks>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Specifies how the shape is positioned vertically.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.VerticalAlignment.None" />
    ///  .</p>
    ///  <p>Has effect only for top level floating shapes.</p>
    ///</remarks>
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    ///<summary>
    ///  Defines whether the shape is inline or floating. For floating shapes defines the wrapping mode for text around the shape.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.WrapType.None" />
    ///  .</p>
    ///  <p>Has effect only for top level shapes.</p>
    ///</remarks>
    property WrapType: DNWrapType read get_WrapType write set_WrapType;
    ///<summary>
    ///  Specifies how the text is wrapped around the shape.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.WrapSide.Both" />
    ///  .</p>
    ///  <p>Has effect only for top level shapes.</p>
    ///</remarks>
    property WrapSide: DNWrapSide read get_WrapSide write set_WrapSide;
    ///<summary>
    ///  The coordinates at the top-left corner of the containing block of this shape.
    ///</summary>
    ///<remarks><p>The default value is (0,0).</p>
    ///</remarks>
    property CoordOrigin: DDN.Aspose.Common.DNPoint read get_CoordOrigin write set_CoordOrigin;
    ///<summary>
    ///  The width and height of the coordinate space inside the containing block of this shape.
    ///</summary>
    ///<remarks><p>The default value is (1000, 1000).</p>
    ///</remarks>
    property CoordSize: DDN.Aspose.Common.DNSize read get_CoordSize write set_CoordSize;
    ///<summary>
    ///  Provides access to the font formatting of this object.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Indicates that shape is a SignatureLine.
    ///</summary>
    property IsSignatureLine: Boolean read get_IsSignatureLine;
    ///<summary>
    ///  Gets or sets a flag indicating whether the shape is displayed inside a table or outside of it.
    ///</summary>
    ///<remarks><p>The default value is <b>true</b>
    ///  .</p>
    ///  <p>Has effect only for top level shapes, the property <see cref="P:Aspose.Words.Drawing.ShapeBase.WrapType" />
    ///  of which is set to value
    ///  other than <see cref="T:Aspose.Words.Inline" />
    ///  .</p>
    ///</remarks>
    property IsLayoutInCell: Boolean read get_IsLayoutInCell write set_IsLayoutInCell;
    ///<summary>
    ///  Returns true as this node can have child nodes.
    ///</summary>
    property IsComposite: Boolean read get_IsComposite;
    ///<summary>
    ///  Returns true if this node has any child nodes.
    ///</summary>
    property HasChildNodes: Boolean read get_HasChildNodes;
    ///<summary>
    ///  Gets all immediate child nodes of this node.
    ///</summary>
    ///<remarks><p>Note, <see cref="P:Aspose.Words.CompositeNode.ChildNodes" />
    ///  is equivalent to calling <c>GetChildNodes(NodeType.Any, false)</c>
    ///  and creates and returns a new collection every time it is accessed.</p>
    ///  <p>If there are no child nodes, this property returns an empty collection.</p>
    ///</remarks>
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    ///<summary>
    ///  Gets the first child of the node.
    ///</summary>
    ///<remarks>
    ///  If there is no first child node, a null is returned.
    ///</remarks>
    property FirstChild: DNNode read get_FirstChild;
    ///<summary>
    ///  Gets the last child of the node.
    ///</summary>
    ///<remarks>
    ///  If there is no last child node, a null is returned.
    ///</remarks>
    property LastChild: DNNode read get_LastChild;
    ///<summary>
    ///  Gets the number of immediate children of this node.
    ///</summary>
    property Count: Int32 read get_Count;
    property NodeType: DNNodeType read get_NodeType;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNShapeBase = class(TDNGenericImport<DNShapeBaseClass, DNShapeBase>) end;

  //-------------namespace: Aspose.Words.Drawing----------------
  DNGroupShapeClass = interface(DNShapeBaseClass)
  ['{0F0B8EF9-437C-5131-9BF7-102A606701B8}']
  { constructors } 

    ///<summary>
    ///  Creates a new group shape.
    ///</summary>
    ///  <param name="doc">The owner document.</param>
    ///<remarks><p>By default, the shape is floating and has default location and size.</p>
    ///  <p>You should specify desired shape properties after you created a shape.</p>
    ///</remarks>
    {class} function init(doc: DNDocumentBase): DNGroupShape;

  end;

  ///<summary>
  ///  Represents a group of shapes in a document.
  ///</summary>
  ///<remarks><p>A <see cref="T:Aspose.Words.Drawing.GroupShape" />
  ///  is a composite node and can have <see cref="T:Aspose.Words.Drawing.Shape" />
  ///  and
  ///<see cref="T:Aspose.Words.Drawing.GroupShape" />
  ///  nodes as children.</p>
  ///  <p>Each <see cref="T:Aspose.Words.Drawing.GroupShape" />
  ///  defines a new coordinate system for its child shapes.
  ///  The coordinate system is defined using the <see cref="P:Aspose.Words.Drawing.ShapeBase.CoordSize" />
  ///  and
  ///<see cref="P:Aspose.Words.Drawing.ShapeBase.CoordOrigin" />
  ///  properties.</p>
  ///<seealso cref="T:Aspose.Words.Drawing.ShapeBase" />
  ///<seealso cref="T:Aspose.Words.Drawing.Shape" />
  ///</remarks>
  [DNTypeName('Aspose.Words.Drawing.GroupShape')]
  DNGroupShape = interface(DNShapeBase)
  ['{5A878B83-6A3E-358F-BCE7-4D4CB0AA3603}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_Fill: DNFill;
    function get_ScreenTip: string;
    procedure set_ScreenTip(value: string);
    function get_HRef: string;
    procedure set_HRef(value: string);
    function get_Target: string;
    procedure set_Target(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_IsTopLevel: Boolean;
    function get_IsGroup: Boolean;
    function get_IsImage: Boolean;
    function get_IsHorizontalRule: Boolean;
    function get_IsWordArt: Boolean;
    function get_CanHaveImage: Boolean;
    function get_AnchorLocked: Boolean;
    procedure set_AnchorLocked(value: Boolean);
    function get_AspectRatioLocked: Boolean;
    procedure set_AspectRatioLocked(value: Boolean);
    function get_AllowOverlap: Boolean;
    procedure set_AllowOverlap(value: Boolean);
    function get_BehindText: Boolean;
    procedure set_BehindText(value: Boolean);
    function get_IsInline: Boolean;
    function get_Left: Double;
    procedure set_Left(value: Double);
    function get_Top: Double;
    procedure set_Top(value: Double);
    function get_Right: Double;
    function get_Bottom: Double;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_DistanceTop: Double;
    procedure set_DistanceTop(value: Double);
    function get_DistanceBottom: Double;
    procedure set_DistanceBottom(value: Double);
    function get_DistanceLeft: Double;
    procedure set_DistanceLeft(value: Double);
    function get_DistanceRight: Double;
    procedure set_DistanceRight(value: Double);
    function get_Rotation: Double;
    procedure set_Rotation(value: Double);
    function get_ZOrder: Int32;
    procedure set_ZOrder(value: Int32);
    function get_ParentParagraph: DNParagraph;
    function get_Bounds: DDN.Aspose.Common.DNRectangleF;
    procedure set_Bounds(value: DDN.Aspose.Common.DNRectangleF);
    function get_BoundsInPoints: DDN.Aspose.Common.DNRectangleF;
    function get_BoundsWithEffects: DDN.Aspose.Common.DNRectangleF;
    function get_ShapeType: DNShapeType;
    function get_MarkupLanguage: DNShapeMarkupLanguage;
    function get_SizeInPoints: DDN.Aspose.Common.DNSizeF;
    function get_FlipOrientation: DNFlipOrientation;
    procedure set_FlipOrientation(value: DNFlipOrientation);
    function get_RelativeHorizontalPosition: DNRelativeHorizontalPosition;
    procedure set_RelativeHorizontalPosition(value: DNRelativeHorizontalPosition);
    function get_RelativeVerticalPosition: DNRelativeVerticalPosition;
    procedure set_RelativeVerticalPosition(value: DNRelativeVerticalPosition);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_WrapType: DNWrapType;
    procedure set_WrapType(value: DNWrapType);
    function get_WrapSide: DNWrapSide;
    procedure set_WrapSide(value: DNWrapSide);
    function get_CoordOrigin: DDN.Aspose.Common.DNPoint;
    procedure set_CoordOrigin(value: DDN.Aspose.Common.DNPoint);
    function get_CoordSize: DDN.Aspose.Common.DNSize;
    procedure set_CoordSize(value: DDN.Aspose.Common.DNSize);
    function get_Font: DNFont;
    function get_IsSignatureLine: Boolean;
    function get_IsLayoutInCell: Boolean;
    procedure set_IsLayoutInCell(value: Boolean);
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the nodes.</param>
    ///<returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
    ///<remarks>
    ///  Calls <see cref="M:Aspose.Words.DocumentVisitor.VisitGroupShapeStart(Aspose.Words.Drawing.GroupShape)" />
    ///  , then calls <see cref="M:Aspose.Words.Node.Accept(Aspose.Words.DocumentVisitor)" />
    ///  for all
    ///  child shapes of this group shape and calls <see cref="M:Aspose.Words.DocumentVisitor.VisitGroupShapeEnd(Aspose.Words.Drawing.GroupShape)" />
    ///  at the end.
    ///</remarks>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Adds to the source rectangle values of the effect extent and returns the final rectangle.
    ///</summary>
    function AdjustWithEffects(source: DDN.Aspose.Common.DNRectangleF): DDN.Aspose.Common.DNRectangleF;
    ///<summary>
    ///  Creates and returns an object that can be used to render this shape into an image.
    ///</summary>
    ///<remarks><para>This method just invokes the <see cref="T:Aspose.Words.Rendering.ShapeRenderer" />
    ///  constructor and passes
    ///  this object as a parameter.</para></remarks>
    ///<returns>The renderer object for this shape.</returns>
    function GetShapeRenderer: DNShapeRenderer;
    ///<summary>
    ///  Reserved for system use. IShapeAttrSource.
    ///</summary>
    function GetDirectShapeAttr(key: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  Reserved for system use. IShapeAttrSource.
    ///</summary>
    function FetchInheritedShapeAttr(key: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  Reserved for system use. IShapeAttrSource.
    ///</summary>
    function FetchShapeAttr(key: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  Reserved for system use. IShapeAttrSource.
    ///</summary>
    procedure SetShapeAttr(key: Int32; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  Reserved for system use. IShapeAttrSource.
    ///</summary>
    procedure RemoveShapeAttr(key: Int32);
    ///<summary>
    ///  Converts a value from the local coordinate space into the coordinate space of the parent shape.
    ///</summary>
    function LocalToParent(value: DDN.Aspose.Common.DNPointF): DDN.Aspose.Common.DNPointF;
    function GetText: string;
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    function SelectNodes(xpath: string): DNNodeList;
    function SelectSingleNode(xpath: string): DNNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    function PrependChild(newChild: DNNode): DNNode;
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    function RemoveChild(oldChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSmartTags;
    function IndexOf(child: DNNode): Int32;
    function CreateNavigator: DDN.Aspose.Common.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Returns <see cref="F:Aspose.Words.NodeType.GroupShape" />
    ///  .
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Gets fill formatting for the shape.
    ///</summary>
    property Fill: DNFill read get_Fill;
    ///<summary>
    ///  Defines the text displayed when the mouse pointer moves over the shape.
    ///</summary>
    ///<remarks><p>The default value is an empty string.</p>
    ///</remarks>
    property ScreenTip: string read get_ScreenTip write set_ScreenTip;
    ///<summary>
    ///  Gets or sets the full hyperlink address for a shape.
    ///</summary>
    ///<remarks><p>The default value is an empty string.</p>
    ///  <p>Below are examples of valid values for this property:</p>
    ///  <p>Full URI: <c>https://www.aspose.com/</c>.</p>
    ///  <p>Full file name: <c>C:\\My Documents\\SalesReport.doc</c>.</p>
    ///  <para>Relative URI: <c>../../../resource.txt</c></para><p>Relative file name: <c>..\\My Documents\\SalesReport.doc</c>.</p>
    ///  <p>Bookmark within another document: <c>https://www.aspose.com/Products/Default.aspx#Suites</c></p>
    ///  <p>Bookmark within this document: <c>#BookmakName</c>.</p>
    ///</remarks>
    property HRef: string read get_HRef write set_HRef;
    ///<summary>
    ///  Gets or sets the target frame for the shape hyperlink.
    ///</summary>
    ///<remarks><p>The default value is an empty string.</p>
    ///</remarks>
    property Target: string read get_Target write set_Target;
    ///<summary>
    ///  Defines alternative text to be displayed instead of a graphic.
    ///</summary>
    ///<remarks><p>The default value is an empty string.</p>
    ///</remarks>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Gets or sets the title (caption) of the current shape object.
    ///</summary>
    ///<remarks><para>Default is empty string.</para><para>Cannot be null, but can be an empty string.</para></remarks>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets the optional shape name.
    ///</summary>
    ///<remarks><para>Default is empty string.</para><para>Cannot be null, but can be an empty string.</para></remarks>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns true if this object was inserted in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    ///<summary>
    ///  Returns true if this object was deleted in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    ///<summary>
    ///  Returns <b>true</b>
    ///  if this object was moved (deleted) in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    ///<summary>
    ///  Returns <b>true</b>
    ///  if this object was moved (inserted) in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    ///<summary>
    ///  Returns true if this shape is not a child of a group shape.
    ///</summary>
    property IsTopLevel: Boolean read get_IsTopLevel;
    ///<summary>
    ///  Returns true if this is a group shape.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    ///<summary>
    ///  Returns true if this shape is an image shape.
    ///</summary>
    property IsImage: Boolean read get_IsImage;
    ///<summary>
    ///  Returns true if this shape is a horizontal rule.
    ///</summary>
    property IsHorizontalRule: Boolean read get_IsHorizontalRule;
    ///<summary>
    ///  Returns true if this shape is a WordArt object.
    ///</summary>
    ///<remarks>
    ///  Works till 2007 compatibility mode.
    ///  In 2010 and higher compatibility mode WordArt is just a TextBox with fancy fonts.
    ///</remarks>
    property IsWordArt: Boolean read get_IsWordArt;
    ///<summary>
    ///  Returns true if the shape type allows the shape to have an image.
    ///</summary>
    ///<remarks><para>Although Microsoft Word has a special shape type for images, it appears that in Microsoft Word documents any shape
    ///  except a group shape can have an image, therefore this property returns true for all shapes except <see cref="T:Aspose.Words.Drawing.GroupShape" />
    ///  .</para></remarks>
    property CanHaveImage: Boolean read get_CanHaveImage;
    ///<summary>
    ///  Specifies whether the shape's anchor is locked.
    ///</summary>
    ///<remarks><p>The default value is <b>false</b>
    ///  .</p>
    ///  <p>Has effect only for top level shapes.</p>
    ///  <p>This property affects behavior of the shape's anchor in Microsoft Word.
    ///  When the anchor is not locked, moving the shape in Microsoft Word can move
    ///  the shape's anchor too.</p>
    ///</remarks>
    property AnchorLocked: Boolean read get_AnchorLocked write set_AnchorLocked;
    ///<summary>
    ///  Specifies whether the shape's aspect ratio is locked.
    ///</summary>
    ///<remarks><p>The default value depends on the <see cref="P:Aspose.Words.Drawing.ShapeBase.ShapeType" />
    ///  , for the ShapeType.Image it is <b>true</b>
    ///  but for the other shape types it is <b>false</b>
    ///  .</p>
    ///  <p>Has effect for top level shapes only.</p>
    ///</remarks>
    property AspectRatioLocked: Boolean read get_AspectRatioLocked write set_AspectRatioLocked;
    ///<summary>
    ///  Gets or sets a value that specifies whether this shape can overlap other shapes.
    ///</summary>
    ///<remarks><para>This property affects behavior of the shape in Microsoft Word.
    ///  Aspose.Words ignores the value of this property.</para><para>This property is applicable only to top level shapes.</para><p>The default value is <b>true</b>
    ///  .</p>
    ///</remarks>
    property AllowOverlap: Boolean read get_AllowOverlap write set_AllowOverlap;
    ///<summary>
    ///  Specifies whether the shape is below or above text.
    ///</summary>
    ///<remarks><p>Has effect only for top level shapes.</p>
    ///  <p>The default value is <b>false</b>
    ///  .</p>
    ///<seealso cref="P:Aspose.Words.Drawing.ShapeBase.ZOrder" />
    ///</remarks>
    property BehindText: Boolean read get_BehindText write set_BehindText;
    ///<summary>
    ///  A quick way to determine if this shape is positioned inline with text.
    ///</summary>
    ///<remarks><p>Has effect only for top level shapes.</p>
    ///</remarks>
    property IsInline: Boolean read get_IsInline;
    ///<summary>
    ///  Gets or sets the position of the left edge of the containing block of the shape.
    ///</summary>
    ///<remarks><p>For a top-level shape, the value is in points and relative to the shape anchor.</p>
    ///  <p>For shapes in a group, the value is in the coordinate space and units of the parent group.</p>
    ///  <p>The default value is 0.</p>
    ///  <p>Has effect only for floating shapes.</p>
    ///</remarks>
    property Left: Double read get_Left write set_Left;
    ///<summary>
    ///  Gets or sets the position of the top edge of the containing block of the shape.
    ///</summary>
    ///<remarks><p>For a top-level shape, the value is in points and relative to the shape anchor.</p>
    ///  <p>For shapes in a group, the value is in the coordinate space and units of the parent group.</p>
    ///  <p>The default value is 0.</p>
    ///  <p>Has effect only for floating shapes.</p>
    ///</remarks>
    property Top: Double read get_Top write set_Top;
    ///<summary>
    ///  Gets the position of the right edge of the containing block of the shape.
    ///</summary>
    ///<remarks><p>For a top-level shape, the value is in points and relative to the shape anchor.</p>
    ///  <p>For shapes in a group, the value is in the coordinate space and units of the parent group.</p>
    ///</remarks>
    property Right: Double read get_Right;
    ///<summary>
    ///  Gets the position of the bottom edge of the containing block of the shape.
    ///</summary>
    ///<remarks><p>For a top-level shape, the value is in points and relative to the shape anchor.</p>
    ///  <p>For shapes in a group, the value is in the coordinate space and units of the parent group.</p>
    ///</remarks>
    property Bottom: Double read get_Bottom;
    ///<summary>
    ///  Gets or sets the width of the containing block of the shape.
    ///</summary>
    ///<remarks><p>For a top-level shape, the value is in points.</p>
    ///  <p>For shapes in a group, the value is in the coordinate space and units of the parent group.</p>
    ///  <p>The default value is 0.</p>
    ///</remarks>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Gets or sets the height of the containing block of the shape.
    ///</summary>
    ///<remarks><p>For a top-level shape, the value is in points.</p>
    ///  <p>For shapes in a group, the value is in the coordinate space and units of the parent group.</p>
    ///  <p>The default value is 0.</p>
    ///</remarks>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Returns or sets the distance (in points) between the document text and the top edge of the shape.
    ///</summary>
    ///<remarks><p>The default value is 0.</p>
    ///  <p>Has effect only for top level shapes.</p>
    ///</remarks>
    property DistanceTop: Double read get_DistanceTop write set_DistanceTop;
    ///<summary>
    ///  Returns or sets the distance (in points) between the document text and the bottom edge of the shape.
    ///</summary>
    ///<remarks><p>The default value is 0.</p>
    ///  <p>Has effect only for top level shapes.</p>
    ///</remarks>
    property DistanceBottom: Double read get_DistanceBottom write set_DistanceBottom;
    ///<summary>
    ///  Returns or sets the distance (in points) between the document text and the left edge of the shape.
    ///</summary>
    ///<remarks><p>The default value is 1/8 inch.</p>
    ///  <p>Has effect only for top level shapes.</p>
    ///</remarks>
    property DistanceLeft: Double read get_DistanceLeft write set_DistanceLeft;
    ///<summary>
    ///  Returns or sets the distance (in points) between the document text and the right edge of the shape.
    ///</summary>
    ///<remarks><p>The default value is 1/8 inch.</p>
    ///  <p>Has effect only for top level shapes.</p>
    ///</remarks>
    property DistanceRight: Double read get_DistanceRight write set_DistanceRight;
    ///<summary>
    ///  Defines the angle (in degrees) that a shape is rotated.
    ///  Positive value corresponds to clockwise rotation angle.
    ///</summary>
    ///<remarks><p>The default value is 0.</p>
    ///</remarks>
    property Rotation: Double read get_Rotation write set_Rotation;
    ///<summary>
    ///  Determines the display order of overlapping shapes.
    ///</summary>
    ///<remarks><p>Has effect only for top level shapes.</p>
    ///  <p>The default value is 0.</p>
    ///  <p>The number represents the stacking precedence. A shape with a higher number will be displayed
    ///  as if it were overlapping (in "front" of) a shape with a lower number. </p>
    ///  <p>The order of overlapping shapes is independent for shapes in the header and in the main
    ///  text of the document.</p>
    ///  <p>The display order of child shapes in a group shape is determined by their order
    ///  inside the group shape.</p>
    ///<seealso cref="P:Aspose.Words.Drawing.ShapeBase.BehindText" />
    ///</remarks>
    property ZOrder: Int32 read get_ZOrder write set_ZOrder;
    ///<summary>
    ///  Returns the immediate parent paragraph.
    ///</summary>
    ///<remarks>For child shapes of a group shape and child shapes of an Office Math object always returns null.</remarks>
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    ///<summary>
    ///  Gets or sets the location and size of the containing block of the shape.
    ///</summary>
    ///<remarks>
    ///  Ignores aspect ratio lock upon setting.
    ///</remarks>
    ///<remarks><p>For a top-level shape, the value is in points and relative to the shape anchor.</p>
    ///  <p>For shapes in a group, the value is in the coordinate space and units of the parent group.</p>
    ///</remarks>
    property Bounds: DDN.Aspose.Common.DNRectangleF read get_Bounds write set_Bounds;
    ///<summary>
    ///  Gets the location and size of the containing block of the shape in points, relative to the anchor of the topmost shape.
    ///</summary>
    property BoundsInPoints: DDN.Aspose.Common.DNRectangleF read get_BoundsInPoints;
    ///<summary>
    ///  Gets final extent that this shape object has after applying drawing effects.
    ///  Value is measured in points.
    ///</summary>
    property BoundsWithEffects: DDN.Aspose.Common.DNRectangleF read get_BoundsWithEffects;
    ///<summary>
    ///  Gets the shape type.
    ///</summary>
    property ShapeType: DNShapeType read get_ShapeType;
    ///<summary>
    ///  Gets MarkupLanguage used for this graphic object.
    ///</summary>
    property MarkupLanguage: DNShapeMarkupLanguage read get_MarkupLanguage;
    ///<summary>
    ///  Gets the size of the shape in points.
    ///</summary>
    property SizeInPoints: DDN.Aspose.Common.DNSizeF read get_SizeInPoints;
    ///<summary>
    ///  Switches the orientation of a shape.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.FlipOrientation.None" />
    ///  .</p>
    ///</remarks>
    property FlipOrientation: DNFlipOrientation read get_FlipOrientation write set_FlipOrientation;
    ///<summary>
    ///  Specifies relative to what the shape is positioned horizontally.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.RelativeHorizontalPosition.Column" />
    ///  .</p>
    ///  <p>Has effect only for top level floating shapes.</p>
    ///</remarks>
    property RelativeHorizontalPosition: DNRelativeHorizontalPosition read get_RelativeHorizontalPosition write set_RelativeHorizontalPosition;
    ///<summary>
    ///  Specifies relative to what the shape is positioned vertically.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.RelativeVerticalPosition.Paragraph" />
    ///  .</p>
    ///  <p>Has effect only for top level floating shapes.</p>
    ///</remarks>
    property RelativeVerticalPosition: DNRelativeVerticalPosition read get_RelativeVerticalPosition write set_RelativeVerticalPosition;
    ///<summary>
    ///  Specifies how the shape is positioned horizontally.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.HorizontalAlignment.None" />
    ///  .</p>
    ///  <p>Has effect only for top level floating shapes.</p>
    ///</remarks>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Specifies how the shape is positioned vertically.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.VerticalAlignment.None" />
    ///  .</p>
    ///  <p>Has effect only for top level floating shapes.</p>
    ///</remarks>
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    ///<summary>
    ///  Defines whether the shape is inline or floating. For floating shapes defines the wrapping mode for text around the shape.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.WrapType.None" />
    ///  .</p>
    ///  <p>Has effect only for top level shapes.</p>
    ///</remarks>
    property WrapType: DNWrapType read get_WrapType write set_WrapType;
    ///<summary>
    ///  Specifies how the text is wrapped around the shape.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.WrapSide.Both" />
    ///  .</p>
    ///  <p>Has effect only for top level shapes.</p>
    ///</remarks>
    property WrapSide: DNWrapSide read get_WrapSide write set_WrapSide;
    ///<summary>
    ///  The coordinates at the top-left corner of the containing block of this shape.
    ///</summary>
    ///<remarks><p>The default value is (0,0).</p>
    ///</remarks>
    property CoordOrigin: DDN.Aspose.Common.DNPoint read get_CoordOrigin write set_CoordOrigin;
    ///<summary>
    ///  The width and height of the coordinate space inside the containing block of this shape.
    ///</summary>
    ///<remarks><p>The default value is (1000, 1000).</p>
    ///</remarks>
    property CoordSize: DDN.Aspose.Common.DNSize read get_CoordSize write set_CoordSize;
    ///<summary>
    ///  Provides access to the font formatting of this object.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Indicates that shape is a SignatureLine.
    ///</summary>
    property IsSignatureLine: Boolean read get_IsSignatureLine;
    ///<summary>
    ///  Gets or sets a flag indicating whether the shape is displayed inside a table or outside of it.
    ///</summary>
    ///<remarks><p>The default value is <b>true</b>
    ///  .</p>
    ///  <p>Has effect only for top level shapes, the property <see cref="P:Aspose.Words.Drawing.ShapeBase.WrapType" />
    ///  of which is set to value
    ///  other than <see cref="T:Aspose.Words.Inline" />
    ///  .</p>
    ///</remarks>
    property IsLayoutInCell: Boolean read get_IsLayoutInCell write set_IsLayoutInCell;
    property IsComposite: Boolean read get_IsComposite;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property FirstChild: DNNode read get_FirstChild;
    property LastChild: DNNode read get_LastChild;
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNGroupShape = class(TDNGenericImport<DNGroupShapeClass, DNGroupShape>) end;

  //-------------namespace: Aspose.Words.Drawing----------------
  DNShapeClass = interface(DNShapeBaseClass)
  ['{D0D52D8C-06CE-5955-9F77-20B2DFDF227A}']
  { constructors } 

    ///<summary>
    ///  Creates a new shape object.
    ///</summary>
    ///<remarks><p>You should specify desired shape properties after you created a shape.</p>
    ///</remarks>
    ///  <param name="doc">The owner document.</param>
    ///  <param name="shapeType">The type of the shape to create.</param>
    {class} function init(doc: DNDocumentBase; shapeType: DNShapeType): DNShape;

  end;

  ///<summary>
  ///  Represents an object in the drawing layer, such as an AutoShape, textbox, freeform, OLE object, ActiveX control, or picture.
  ///</summary>
  ///<remarks><p>Using the <see cref="T:Aspose.Words.Drawing.Shape" />
  ///  class you can create or modify shapes in a Microsoft Word document.</p>
  ///  <p>An important property of a shape is its <see cref="P:Aspose.Words.Drawing.ShapeBase.ShapeType" />
  ///  . Shapes of different
  ///  types can have different capabilities in a Word document. For example, only image and OLE shapes
  ///  can have images inside them. Most of the shapes can have text, but not all.</p>
  ///  <p>Shapes that can have text, can contain <see cref="T:Aspose.Words.Paragraph" />
  ///  and
  ///<see cref="T:Aspose.Words.Tables.Table" />
  ///  nodes as children.</p>
  ///<seealso cref="T:Aspose.Words.Drawing.ShapeBase" />
  ///<seealso cref="T:Aspose.Words.Drawing.GroupShape" />
  ///</remarks>
  [DNTypeName('Aspose.Words.Drawing.Shape')]
  DNShape = interface(DNShapeBase)
  ['{9C84FC9B-C6F0-3676-A054-8C657CDC1297}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_StoryType: DNStoryType;
    function get_ExtrusionEnabled: Boolean;
    function get_ShadowEnabled: Boolean;
    function get_Stroke: DNStroke;
    function get_Stroked: Boolean;
    procedure set_Stroked(value: Boolean);
    function get_StrokeWeight: Double;
    procedure set_StrokeWeight(value: Double);
    function get_StrokeColor: DDN.Aspose.Common.DNColor;
    procedure set_StrokeColor(value: DDN.Aspose.Common.DNColor);
    function get_Filled: Boolean;
    procedure set_Filled(value: Boolean);
    function get_FillColor: DDN.Aspose.Common.DNColor;
    procedure set_FillColor(value: DDN.Aspose.Common.DNColor);
    function get_HasImage: Boolean;
    function get_ImageData: DNImageData;
    function get_OleFormat: DNOleFormat;
    function get_TextBox: DNTextBox;
    function get_TextPath: DNTextPath;
    function get_FirstParagraph: DNParagraph;
    function get_LastParagraph: DNParagraph;
    function get_HorizontalRuleFormat: DNHorizontalRuleFormat;
    function get_SignatureLine: DNSignatureLine;
    function get_HasChart: Boolean;
    function get_HasSmartArt: Boolean;
    function get_Chart: DNChart;
    function get_Fill: DNFill;
    function get_ScreenTip: string;
    procedure set_ScreenTip(value: string);
    function get_HRef: string;
    procedure set_HRef(value: string);
    function get_Target: string;
    procedure set_Target(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_IsTopLevel: Boolean;
    function get_IsGroup: Boolean;
    function get_IsImage: Boolean;
    function get_IsHorizontalRule: Boolean;
    function get_IsWordArt: Boolean;
    function get_CanHaveImage: Boolean;
    function get_AnchorLocked: Boolean;
    procedure set_AnchorLocked(value: Boolean);
    function get_AspectRatioLocked: Boolean;
    procedure set_AspectRatioLocked(value: Boolean);
    function get_AllowOverlap: Boolean;
    procedure set_AllowOverlap(value: Boolean);
    function get_BehindText: Boolean;
    procedure set_BehindText(value: Boolean);
    function get_IsInline: Boolean;
    function get_Left: Double;
    procedure set_Left(value: Double);
    function get_Top: Double;
    procedure set_Top(value: Double);
    function get_Right: Double;
    function get_Bottom: Double;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_DistanceTop: Double;
    procedure set_DistanceTop(value: Double);
    function get_DistanceBottom: Double;
    procedure set_DistanceBottom(value: Double);
    function get_DistanceLeft: Double;
    procedure set_DistanceLeft(value: Double);
    function get_DistanceRight: Double;
    procedure set_DistanceRight(value: Double);
    function get_Rotation: Double;
    procedure set_Rotation(value: Double);
    function get_ZOrder: Int32;
    procedure set_ZOrder(value: Int32);
    function get_ParentParagraph: DNParagraph;
    function get_Bounds: DDN.Aspose.Common.DNRectangleF;
    procedure set_Bounds(value: DDN.Aspose.Common.DNRectangleF);
    function get_BoundsInPoints: DDN.Aspose.Common.DNRectangleF;
    function get_BoundsWithEffects: DDN.Aspose.Common.DNRectangleF;
    function get_ShapeType: DNShapeType;
    function get_MarkupLanguage: DNShapeMarkupLanguage;
    function get_SizeInPoints: DDN.Aspose.Common.DNSizeF;
    function get_FlipOrientation: DNFlipOrientation;
    procedure set_FlipOrientation(value: DNFlipOrientation);
    function get_RelativeHorizontalPosition: DNRelativeHorizontalPosition;
    procedure set_RelativeHorizontalPosition(value: DNRelativeHorizontalPosition);
    function get_RelativeVerticalPosition: DNRelativeVerticalPosition;
    procedure set_RelativeVerticalPosition(value: DNRelativeVerticalPosition);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_WrapType: DNWrapType;
    procedure set_WrapType(value: DNWrapType);
    function get_WrapSide: DNWrapSide;
    procedure set_WrapSide(value: DNWrapSide);
    function get_CoordOrigin: DDN.Aspose.Common.DNPoint;
    procedure set_CoordOrigin(value: DDN.Aspose.Common.DNPoint);
    function get_CoordSize: DDN.Aspose.Common.DNSize;
    procedure set_CoordSize(value: DDN.Aspose.Common.DNSize);
    function get_Font: DNFont;
    function get_IsSignatureLine: Boolean;
    function get_IsLayoutInCell: Boolean;
    procedure set_IsLayoutInCell(value: Boolean);
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Updates SmartArt pre-rendered drawing by using Aspose.Words's SmartArt cold rendering engine.
    ///</summary>
    ///<remarks>
    ///  Microsoft Word generates and saves the pre-rendered drawing along with SmartArt object. However,
    ///  if the document is saved by other applications, the pre-rendered SmartArt drawing may be missing or incorrect.
    ///  If pre-rendered drawing is available then Aspose.Words uses it to render the SmartArt object.
    ///  If pre-rendered drawing is missing then Aspose.Words uses its own SmartArt cold rendering engine to render the
    ///  SmartArt object.
    ///  If pre-rendered drawing is incorrect then it is required to call this method to invoke the SmartArt cold
    ///  rendering engine.
    ///</remarks>
    procedure UpdateSmartArtDrawing;
    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the nodes.</param>
    ///<returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
    ///<remarks>
    ///  Calls <see cref="M:Aspose.Words.DocumentVisitor.VisitShapeStart(Aspose.Words.Drawing.Shape)" />
    ///  , then calls <see cref="M:Aspose.Words.Node.Accept(Aspose.Words.DocumentVisitor)" />
    ///  for all child nodes of the shape and calls <see cref="M:Aspose.Words.DocumentVisitor.VisitShapeEnd(Aspose.Words.Drawing.Shape)" />
    ///  at the end.
    ///</remarks>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Adds to the source rectangle values of the effect extent and returns the final rectangle.
    ///</summary>
    function AdjustWithEffects(source: DDN.Aspose.Common.DNRectangleF): DDN.Aspose.Common.DNRectangleF;
    ///<summary>
    ///  Creates and returns an object that can be used to render this shape into an image.
    ///</summary>
    ///<remarks><para>This method just invokes the <see cref="T:Aspose.Words.Rendering.ShapeRenderer" />
    ///  constructor and passes
    ///  this object as a parameter.</para></remarks>
    ///<returns>The renderer object for this shape.</returns>
    function GetShapeRenderer: DNShapeRenderer;
    ///<summary>
    ///  Reserved for system use. IShapeAttrSource.
    ///</summary>
    function GetDirectShapeAttr(key: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  Reserved for system use. IShapeAttrSource.
    ///</summary>
    function FetchInheritedShapeAttr(key: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  Reserved for system use. IShapeAttrSource.
    ///</summary>
    function FetchShapeAttr(key: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  Reserved for system use. IShapeAttrSource.
    ///</summary>
    procedure SetShapeAttr(key: Int32; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  Reserved for system use. IShapeAttrSource.
    ///</summary>
    procedure RemoveShapeAttr(key: Int32);
    ///<summary>
    ///  Converts a value from the local coordinate space into the coordinate space of the parent shape.
    ///</summary>
    function LocalToParent(value: DDN.Aspose.Common.DNPointF): DDN.Aspose.Common.DNPointF;
    function GetText: string;
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    function SelectNodes(xpath: string): DNNodeList;
    function SelectSingleNode(xpath: string): DNNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    function PrependChild(newChild: DNNode): DNNode;
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    function RemoveChild(oldChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSmartTags;
    function IndexOf(child: DNNode): Int32;
    function CreateNavigator: DDN.Aspose.Common.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Returns <see cref="F:Aspose.Words.NodeType.Shape" />
    ///  .
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Returns <see cref="F:Aspose.Words.StoryType.Textbox" />
    ///  .
    ///</summary>
    property StoryType: DNStoryType read get_StoryType;
    ///<summary>
    ///  Returns true if an extrusion effect is enabled.
    ///</summary>
    property ExtrusionEnabled: Boolean read get_ExtrusionEnabled;
    ///<summary>
    ///  Returns true if a shadow effect is enabled.
    ///</summary>
    property ShadowEnabled: Boolean read get_ShadowEnabled;
    ///<summary>
    ///  Defines a stroke for a shape.
    ///</summary>
    property Stroke: DNStroke read get_Stroke;
    ///<summary>
    ///  Defines whether the path will be stroked.
    ///</summary>
    ///<remarks><p>This is a shortcut to the <see cref="P:Aspose.Words.Drawing.Stroke.On" />
    ///  property.</p>
    ///  <p>The default value is <b>true</b>
    ///  .</p>
    ///</remarks>
    property Stroked: Boolean read get_Stroked write set_Stroked;
    ///<summary>
    ///  Defines the brush thickness that strokes the path of a shape in points.
    ///</summary>
    ///<remarks><p>This is a shortcut to the <see cref="P:Aspose.Words.Drawing.Stroke.Weight" />
    ///  property.</p>
    ///  <p>The default value is 0.75.</p>
    ///</remarks>
    property StrokeWeight: Double read get_StrokeWeight write set_StrokeWeight;
    ///<summary>
    ///  Defines the color of a stroke.
    ///</summary>
    ///<remarks><p>This is a shortcut to the <see cref="P:Aspose.Words.Drawing.Stroke.Color" />
    ///  property.</p>
    ///  <p>The default value is
    ///<see cref="P:System.Drawing.Color.Black" />
    ///  .</p>
    ///</remarks>
    property StrokeColor: DDN.Aspose.Common.DNColor read get_StrokeColor write set_StrokeColor;
    ///<summary>
    ///  Determines whether the closed path of the shape will be filled.
    ///</summary>
    ///<remarks><p>This is a shortcut to the <see cref="P:Aspose.Words.Drawing.Fill.On" />
    ///  property.</p>
    ///  <p>The default value is <b>true</b>
    ///  .</p>
    ///</remarks>
    property Filled: Boolean read get_Filled write set_Filled;
    ///<summary>
    ///  Defines the brush color that fills the closed path of the shape.
    ///</summary>
    ///<remarks><p>This is a shortcut to the <see cref="P:Aspose.Words.Drawing.Fill.Color" />
    ///  property.</p>
    ///  <p>The default value is
    ///<see cref="P:System.Drawing.Color.White" />
    ///  .</p>
    ///</remarks>
    property FillColor: DDN.Aspose.Common.DNColor read get_FillColor write set_FillColor;
    ///<summary>
    ///  Returns true if the shape has image bytes or links an image.
    ///</summary>
    property HasImage: Boolean read get_HasImage;
    ///<summary>
    ///  Provides access to the image of the shape.
    ///  Returns null if the shape cannot have an image.
    ///</summary>
    property ImageData: DNImageData read get_ImageData;
    ///<summary>
    ///  Provides access to the OLE data of a shape. For a shape that is not an OLE object or ActiveX control, returns null.
    ///</summary>
    property OleFormat: DNOleFormat read get_OleFormat;
    ///<summary>
    ///  Defines attributes that specify how text is displayed in a shape.
    ///</summary>
    property TextBox: DNTextBox read get_TextBox;
    ///<summary>
    ///  Defines the text of the text path (of a WordArt object).
    ///</summary>
    property TextPath: DNTextPath read get_TextPath;
    ///<summary>
    ///  Gets the first paragraph in the shape.
    ///</summary>
    property FirstParagraph: DNParagraph read get_FirstParagraph;
    ///<summary>
    ///  Gets the last paragraph in the shape.
    ///</summary>
    property LastParagraph: DNParagraph read get_LastParagraph;
    ///<summary>
    ///  Provides access to the properties of the horizontal rule shape.
    ///  For a shape that is not a horizontal rule, returns null.
    ///</summary>
    property HorizontalRuleFormat: DNHorizontalRuleFormat read get_HorizontalRuleFormat;
    ///<summary>
    ///  Gets <see cref="P:Aspose.Words.Drawing.Shape.SignatureLine" />
    ///  object if the shape is a signature line. Returns <b>null</b>
    ///  otherwise.
    ///</summary>
    ///<remarks>You can insert new SignatureLines into the document using <see cref="M:Aspose.Words.DocumentBuilder.InsertSignatureLine(Aspose.Words.SignatureLineOptions)" />
    ///  and
    ///<seealso cref="M:Aspose.Words.DocumentBuilder.InsertSignatureLine(Aspose.Words.SignatureLineOptions,Aspose.Words.Drawing.RelativeHorizontalPosition,System.Double,Aspose.Words.Drawing.RelativeVerticalPosition,System.Double,Aspose.Words.Drawing.WrapType)" />
    ///</remarks>
    property SignatureLine: DNSignatureLine read get_SignatureLine;
    ///<summary>
    ///  Returns true if this Shape has a <see cref="P:Aspose.Words.Drawing.Shape.Chart" />
    ///  .
    ///</summary>
    property HasChart: Boolean read get_HasChart;
    ///<summary>
    ///  Returns true if this Shape has a SmartArt object.
    ///</summary>
    property HasSmartArt: Boolean read get_HasSmartArt;
    ///<summary>
    ///  Provides access to the chart properties if this shape has a Chart.
    ///</summary>
    ///<remarks>This property will return the <see cref="P:Aspose.Words.Drawing.Shape.Chart" />
    ///  object only if <see cref="P:Aspose.Words.Drawing.Shape.HasChart" />
    ///  property is true for this Shape, and will throw an exception otherwise.</remarks>
    property Chart: DNChart read get_Chart;
    ///<summary>
    ///  Gets fill formatting for the shape.
    ///</summary>
    property Fill: DNFill read get_Fill;
    ///<summary>
    ///  Defines the text displayed when the mouse pointer moves over the shape.
    ///</summary>
    ///<remarks><p>The default value is an empty string.</p>
    ///</remarks>
    property ScreenTip: string read get_ScreenTip write set_ScreenTip;
    ///<summary>
    ///  Gets or sets the full hyperlink address for a shape.
    ///</summary>
    ///<remarks><p>The default value is an empty string.</p>
    ///  <p>Below are examples of valid values for this property:</p>
    ///  <p>Full URI: <c>https://www.aspose.com/</c>.</p>
    ///  <p>Full file name: <c>C:\\My Documents\\SalesReport.doc</c>.</p>
    ///  <para>Relative URI: <c>../../../resource.txt</c></para><p>Relative file name: <c>..\\My Documents\\SalesReport.doc</c>.</p>
    ///  <p>Bookmark within another document: <c>https://www.aspose.com/Products/Default.aspx#Suites</c></p>
    ///  <p>Bookmark within this document: <c>#BookmakName</c>.</p>
    ///</remarks>
    property HRef: string read get_HRef write set_HRef;
    ///<summary>
    ///  Gets or sets the target frame for the shape hyperlink.
    ///</summary>
    ///<remarks><p>The default value is an empty string.</p>
    ///</remarks>
    property Target: string read get_Target write set_Target;
    ///<summary>
    ///  Defines alternative text to be displayed instead of a graphic.
    ///</summary>
    ///<remarks><p>The default value is an empty string.</p>
    ///</remarks>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Gets or sets the title (caption) of the current shape object.
    ///</summary>
    ///<remarks><para>Default is empty string.</para><para>Cannot be null, but can be an empty string.</para></remarks>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets the optional shape name.
    ///</summary>
    ///<remarks><para>Default is empty string.</para><para>Cannot be null, but can be an empty string.</para></remarks>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns true if this object was inserted in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    ///<summary>
    ///  Returns true if this object was deleted in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    ///<summary>
    ///  Returns <b>true</b>
    ///  if this object was moved (deleted) in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    ///<summary>
    ///  Returns <b>true</b>
    ///  if this object was moved (inserted) in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    ///<summary>
    ///  Returns true if this shape is not a child of a group shape.
    ///</summary>
    property IsTopLevel: Boolean read get_IsTopLevel;
    ///<summary>
    ///  Returns true if this is a group shape.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    ///<summary>
    ///  Returns true if this shape is an image shape.
    ///</summary>
    property IsImage: Boolean read get_IsImage;
    ///<summary>
    ///  Returns true if this shape is a horizontal rule.
    ///</summary>
    property IsHorizontalRule: Boolean read get_IsHorizontalRule;
    ///<summary>
    ///  Returns true if this shape is a WordArt object.
    ///</summary>
    ///<remarks>
    ///  Works till 2007 compatibility mode.
    ///  In 2010 and higher compatibility mode WordArt is just a TextBox with fancy fonts.
    ///</remarks>
    property IsWordArt: Boolean read get_IsWordArt;
    ///<summary>
    ///  Returns true if the shape type allows the shape to have an image.
    ///</summary>
    ///<remarks><para>Although Microsoft Word has a special shape type for images, it appears that in Microsoft Word documents any shape
    ///  except a group shape can have an image, therefore this property returns true for all shapes except <see cref="T:Aspose.Words.Drawing.GroupShape" />
    ///  .</para></remarks>
    property CanHaveImage: Boolean read get_CanHaveImage;
    ///<summary>
    ///  Specifies whether the shape's anchor is locked.
    ///</summary>
    ///<remarks><p>The default value is <b>false</b>
    ///  .</p>
    ///  <p>Has effect only for top level shapes.</p>
    ///  <p>This property affects behavior of the shape's anchor in Microsoft Word.
    ///  When the anchor is not locked, moving the shape in Microsoft Word can move
    ///  the shape's anchor too.</p>
    ///</remarks>
    property AnchorLocked: Boolean read get_AnchorLocked write set_AnchorLocked;
    ///<summary>
    ///  Specifies whether the shape's aspect ratio is locked.
    ///</summary>
    ///<remarks><p>The default value depends on the <see cref="P:Aspose.Words.Drawing.ShapeBase.ShapeType" />
    ///  , for the ShapeType.Image it is <b>true</b>
    ///  but for the other shape types it is <b>false</b>
    ///  .</p>
    ///  <p>Has effect for top level shapes only.</p>
    ///</remarks>
    property AspectRatioLocked: Boolean read get_AspectRatioLocked write set_AspectRatioLocked;
    ///<summary>
    ///  Gets or sets a value that specifies whether this shape can overlap other shapes.
    ///</summary>
    ///<remarks><para>This property affects behavior of the shape in Microsoft Word.
    ///  Aspose.Words ignores the value of this property.</para><para>This property is applicable only to top level shapes.</para><p>The default value is <b>true</b>
    ///  .</p>
    ///</remarks>
    property AllowOverlap: Boolean read get_AllowOverlap write set_AllowOverlap;
    ///<summary>
    ///  Specifies whether the shape is below or above text.
    ///</summary>
    ///<remarks><p>Has effect only for top level shapes.</p>
    ///  <p>The default value is <b>false</b>
    ///  .</p>
    ///<seealso cref="P:Aspose.Words.Drawing.ShapeBase.ZOrder" />
    ///</remarks>
    property BehindText: Boolean read get_BehindText write set_BehindText;
    ///<summary>
    ///  A quick way to determine if this shape is positioned inline with text.
    ///</summary>
    ///<remarks><p>Has effect only for top level shapes.</p>
    ///</remarks>
    property IsInline: Boolean read get_IsInline;
    ///<summary>
    ///  Gets or sets the position of the left edge of the containing block of the shape.
    ///</summary>
    ///<remarks><p>For a top-level shape, the value is in points and relative to the shape anchor.</p>
    ///  <p>For shapes in a group, the value is in the coordinate space and units of the parent group.</p>
    ///  <p>The default value is 0.</p>
    ///  <p>Has effect only for floating shapes.</p>
    ///</remarks>
    property Left: Double read get_Left write set_Left;
    ///<summary>
    ///  Gets or sets the position of the top edge of the containing block of the shape.
    ///</summary>
    ///<remarks><p>For a top-level shape, the value is in points and relative to the shape anchor.</p>
    ///  <p>For shapes in a group, the value is in the coordinate space and units of the parent group.</p>
    ///  <p>The default value is 0.</p>
    ///  <p>Has effect only for floating shapes.</p>
    ///</remarks>
    property Top: Double read get_Top write set_Top;
    ///<summary>
    ///  Gets the position of the right edge of the containing block of the shape.
    ///</summary>
    ///<remarks><p>For a top-level shape, the value is in points and relative to the shape anchor.</p>
    ///  <p>For shapes in a group, the value is in the coordinate space and units of the parent group.</p>
    ///</remarks>
    property Right: Double read get_Right;
    ///<summary>
    ///  Gets the position of the bottom edge of the containing block of the shape.
    ///</summary>
    ///<remarks><p>For a top-level shape, the value is in points and relative to the shape anchor.</p>
    ///  <p>For shapes in a group, the value is in the coordinate space and units of the parent group.</p>
    ///</remarks>
    property Bottom: Double read get_Bottom;
    ///<summary>
    ///  Gets or sets the width of the containing block of the shape.
    ///</summary>
    ///<remarks><p>For a top-level shape, the value is in points.</p>
    ///  <p>For shapes in a group, the value is in the coordinate space and units of the parent group.</p>
    ///  <p>The default value is 0.</p>
    ///</remarks>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Gets or sets the height of the containing block of the shape.
    ///</summary>
    ///<remarks><p>For a top-level shape, the value is in points.</p>
    ///  <p>For shapes in a group, the value is in the coordinate space and units of the parent group.</p>
    ///  <p>The default value is 0.</p>
    ///</remarks>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Returns or sets the distance (in points) between the document text and the top edge of the shape.
    ///</summary>
    ///<remarks><p>The default value is 0.</p>
    ///  <p>Has effect only for top level shapes.</p>
    ///</remarks>
    property DistanceTop: Double read get_DistanceTop write set_DistanceTop;
    ///<summary>
    ///  Returns or sets the distance (in points) between the document text and the bottom edge of the shape.
    ///</summary>
    ///<remarks><p>The default value is 0.</p>
    ///  <p>Has effect only for top level shapes.</p>
    ///</remarks>
    property DistanceBottom: Double read get_DistanceBottom write set_DistanceBottom;
    ///<summary>
    ///  Returns or sets the distance (in points) between the document text and the left edge of the shape.
    ///</summary>
    ///<remarks><p>The default value is 1/8 inch.</p>
    ///  <p>Has effect only for top level shapes.</p>
    ///</remarks>
    property DistanceLeft: Double read get_DistanceLeft write set_DistanceLeft;
    ///<summary>
    ///  Returns or sets the distance (in points) between the document text and the right edge of the shape.
    ///</summary>
    ///<remarks><p>The default value is 1/8 inch.</p>
    ///  <p>Has effect only for top level shapes.</p>
    ///</remarks>
    property DistanceRight: Double read get_DistanceRight write set_DistanceRight;
    ///<summary>
    ///  Defines the angle (in degrees) that a shape is rotated.
    ///  Positive value corresponds to clockwise rotation angle.
    ///</summary>
    ///<remarks><p>The default value is 0.</p>
    ///</remarks>
    property Rotation: Double read get_Rotation write set_Rotation;
    ///<summary>
    ///  Determines the display order of overlapping shapes.
    ///</summary>
    ///<remarks><p>Has effect only for top level shapes.</p>
    ///  <p>The default value is 0.</p>
    ///  <p>The number represents the stacking precedence. A shape with a higher number will be displayed
    ///  as if it were overlapping (in "front" of) a shape with a lower number. </p>
    ///  <p>The order of overlapping shapes is independent for shapes in the header and in the main
    ///  text of the document.</p>
    ///  <p>The display order of child shapes in a group shape is determined by their order
    ///  inside the group shape.</p>
    ///<seealso cref="P:Aspose.Words.Drawing.ShapeBase.BehindText" />
    ///</remarks>
    property ZOrder: Int32 read get_ZOrder write set_ZOrder;
    ///<summary>
    ///  Returns the immediate parent paragraph.
    ///</summary>
    ///<remarks>For child shapes of a group shape and child shapes of an Office Math object always returns null.</remarks>
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    ///<summary>
    ///  Gets or sets the location and size of the containing block of the shape.
    ///</summary>
    ///<remarks>
    ///  Ignores aspect ratio lock upon setting.
    ///</remarks>
    ///<remarks><p>For a top-level shape, the value is in points and relative to the shape anchor.</p>
    ///  <p>For shapes in a group, the value is in the coordinate space and units of the parent group.</p>
    ///</remarks>
    property Bounds: DDN.Aspose.Common.DNRectangleF read get_Bounds write set_Bounds;
    ///<summary>
    ///  Gets the location and size of the containing block of the shape in points, relative to the anchor of the topmost shape.
    ///</summary>
    property BoundsInPoints: DDN.Aspose.Common.DNRectangleF read get_BoundsInPoints;
    ///<summary>
    ///  Gets final extent that this shape object has after applying drawing effects.
    ///  Value is measured in points.
    ///</summary>
    property BoundsWithEffects: DDN.Aspose.Common.DNRectangleF read get_BoundsWithEffects;
    ///<summary>
    ///  Gets the shape type.
    ///</summary>
    property ShapeType: DNShapeType read get_ShapeType;
    ///<summary>
    ///  Gets MarkupLanguage used for this graphic object.
    ///</summary>
    property MarkupLanguage: DNShapeMarkupLanguage read get_MarkupLanguage;
    ///<summary>
    ///  Gets the size of the shape in points.
    ///</summary>
    property SizeInPoints: DDN.Aspose.Common.DNSizeF read get_SizeInPoints;
    ///<summary>
    ///  Switches the orientation of a shape.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.FlipOrientation.None" />
    ///  .</p>
    ///</remarks>
    property FlipOrientation: DNFlipOrientation read get_FlipOrientation write set_FlipOrientation;
    ///<summary>
    ///  Specifies relative to what the shape is positioned horizontally.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.RelativeHorizontalPosition.Column" />
    ///  .</p>
    ///  <p>Has effect only for top level floating shapes.</p>
    ///</remarks>
    property RelativeHorizontalPosition: DNRelativeHorizontalPosition read get_RelativeHorizontalPosition write set_RelativeHorizontalPosition;
    ///<summary>
    ///  Specifies relative to what the shape is positioned vertically.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.RelativeVerticalPosition.Paragraph" />
    ///  .</p>
    ///  <p>Has effect only for top level floating shapes.</p>
    ///</remarks>
    property RelativeVerticalPosition: DNRelativeVerticalPosition read get_RelativeVerticalPosition write set_RelativeVerticalPosition;
    ///<summary>
    ///  Specifies how the shape is positioned horizontally.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.HorizontalAlignment.None" />
    ///  .</p>
    ///  <p>Has effect only for top level floating shapes.</p>
    ///</remarks>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Specifies how the shape is positioned vertically.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.VerticalAlignment.None" />
    ///  .</p>
    ///  <p>Has effect only for top level floating shapes.</p>
    ///</remarks>
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    ///<summary>
    ///  Defines whether the shape is inline or floating. For floating shapes defines the wrapping mode for text around the shape.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.WrapType.None" />
    ///  .</p>
    ///  <p>Has effect only for top level shapes.</p>
    ///</remarks>
    property WrapType: DNWrapType read get_WrapType write set_WrapType;
    ///<summary>
    ///  Specifies how the text is wrapped around the shape.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.Drawing.WrapSide.Both" />
    ///  .</p>
    ///  <p>Has effect only for top level shapes.</p>
    ///</remarks>
    property WrapSide: DNWrapSide read get_WrapSide write set_WrapSide;
    ///<summary>
    ///  The coordinates at the top-left corner of the containing block of this shape.
    ///</summary>
    ///<remarks><p>The default value is (0,0).</p>
    ///</remarks>
    property CoordOrigin: DDN.Aspose.Common.DNPoint read get_CoordOrigin write set_CoordOrigin;
    ///<summary>
    ///  The width and height of the coordinate space inside the containing block of this shape.
    ///</summary>
    ///<remarks><p>The default value is (1000, 1000).</p>
    ///</remarks>
    property CoordSize: DDN.Aspose.Common.DNSize read get_CoordSize write set_CoordSize;
    ///<summary>
    ///  Provides access to the font formatting of this object.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Indicates that shape is a SignatureLine.
    ///</summary>
    property IsSignatureLine: Boolean read get_IsSignatureLine;
    ///<summary>
    ///  Gets or sets a flag indicating whether the shape is displayed inside a table or outside of it.
    ///</summary>
    ///<remarks><p>The default value is <b>true</b>
    ///  .</p>
    ///  <p>Has effect only for top level shapes, the property <see cref="P:Aspose.Words.Drawing.ShapeBase.WrapType" />
    ///  of which is set to value
    ///  other than <see cref="T:Aspose.Words.Inline" />
    ///  .</p>
    ///</remarks>
    property IsLayoutInCell: Boolean read get_IsLayoutInCell write set_IsLayoutInCell;
    property IsComposite: Boolean read get_IsComposite;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property FirstChild: DNNode read get_FirstChild;
    property LastChild: DNNode read get_LastChild;
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNShape = class(TDNGenericImport<DNShapeClass, DNShape>) end;

  //-------------namespace: Aspose.Words----------------
  DNInlineStoryClass = interface(DNCompositeNodeClass)
  ['{E0BC41BF-55E8-5E53-8848-6D72684816FD}']
  end;

  ///<summary>
  ///  Base class for inline-level nodes that can contain paragraphs and tables.
  ///</summary>
  ///<remarks><p><b>InlineStory</b>
  ///  is a container for block-level nodes <see cref="T:Aspose.Words.Paragraph" />
  ///  and <see cref="T:Aspose.Words.Tables.Table" />
  ///  .</p>
  ///  <p>The classes that derive from <b>InlineStory</b>
  ///  are inline-level nodes that can contain
  ///  their own text (paragraphs and tables). For example, a <b>Comment</b>
  ///  node contains text of a comment
  ///  and a <b>Footnote</b>
  ///  contains text of a footnote.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.InlineStory')]
  DNInlineStory = interface(DNCompositeNode)
  ['{5E9B2814-0E6C-3ECF-885E-0904E01A0516}']
  { getters & setters } 

    function get_StoryType: DNStoryType;
    function get_ParentParagraph: DNParagraph;
    function get_FirstParagraph: DNParagraph;
    function get_LastParagraph: DNParagraph;
    function get_Paragraphs: DNParagraphCollection;
    function get_Tables: DNTableCollection;
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_Font: DNFont;
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_NodeType: DNNodeType;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  If the last child is not a paragraph, creates and appends one empty paragraph.
    ///</summary>
    procedure EnsureMinimum;
    ///<summary>
    ///  Gets the text of this node and of all its children.
    ///</summary>
    ///<remarks><p>The returned string includes all control and special characters as described in <see cref="T:Aspose.Words.ControlChar" />
    ///  .</p>
    ///</remarks>
    function GetText: string;
    ///<overloads>Returns a collection of child nodes that match the specified type.</overloads><summary>
    ///  Returns a live collection of child nodes that match the specified type.
    ///</summary>
    ///<remarks><p>The collection of nodes returned by this method is always live.</p>
    ///<remarks><p>A live collection is always in sync with the document. For example, if you
    ///  selected all sections in a document and enumerate through the collection
    ///  deleting the sections, the section is removed from the collection immediately
    ///  when it is removed from the document.</p>
    ///</remarks>
    ///</remarks>
    ///  <param name="nodeType">Specifies the type of nodes to select.</param>
    ///  <param name="isDeep">True to select from all child nodes recursively.
    ///  False to select only among immediate children. </param>
    ///<returns>A live collection of child nodes of the specified type.</returns>
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    ///<summary>
    ///  Returns an Nth child node that matches the specified type.
    ///</summary>
    ///<remarks><p>If index is out of range, a null is returned.</p>
    ///</remarks>
    ///  <param name="nodeType">Specifies the type of the child node.</param>
    ///  <param name="index">Zero based index of the child node to select.
    ///  Negative indexes are also allowed and indicate access from the end,
    ///  that is -1 means the last node.</param>
    ///  <param name="isDeep">True to select from all child nodes recursively.
    ///  False to select only among immediate children. See remarks for more info.</param>
    ///<returns>The child node that matches the criteria or null if no matching node is found.</returns>
    ///<remarks>Note that markup nodes (<see cref="F:Aspose.Words.NodeType.StructuredDocumentTag" />
    ///  and <see cref="F:Aspose.Words.NodeType.SmartTag" />
    ///  )
    ///  are traversed even when isDeep = false and GetChild is invoked for non-markup node type. For example if the first run in a para
    ///  is wrapped in a StructuredDocumentTag, it will still be returned by GetChild(NodeType.Run, 0, false).</remarks>
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    ///<summary>
    ///  Selects a list of nodes matching the XPath expression.
    ///</summary>
    ///<remarks><p>Only expressions with element names are supported at the moment. Expressions
    ///  that use attribute names are not supported.</p>
    ///</remarks>
    ///  <param name="xpath">The XPath expression.</param>
    ///<returns>A list of nodes matching the XPath query.</returns>
    function SelectNodes(xpath: string): DNNodeList;
    ///<summary>
    ///  Selects the first Node that matches the XPath expression.
    ///</summary>
    ///<remarks><p>Only expressions with element names are supported at the moment. Expressions
    ///  that use attribute names are not supported.</p>
    ///</remarks>
    ///  <param name="xpath">The XPath expression.</param>
    ///<returns>The first Node that matches the XPath query or null if no matching node is found.</returns>
    function SelectSingleNode(xpath: string): DNNode;
    ///<summary>
    ///  Provides support for the for each style iteration over the child nodes of this node.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    ///<summary>
    ///  Adds the specified node to the end of the list of child nodes for this node.
    ///</summary>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The node to add.</param>
    ///<returns>The node added.</returns>
    function AppendChild(newChild: DNNode): DNNode;
    ///<summary>
    ///  Adds the specified node to the beginning of the list of child nodes for this node.
    ///</summary>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The node to add.</param>
    ///<returns>The node added.</returns>
    function PrependChild(newChild: DNNode): DNNode;
    ///<summary>
    ///  Inserts the specified node immediately after the specified reference node.
    ///</summary>
    ///<remarks><p>If refChild is null, inserts newChild at the beginning of the list of child nodes.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The Node to insert.</param>
    ///  <param name="refChild">The Node that is the reference node. The newNode is placed after the refNode. </param>
    ///<returns>The inserted node.</returns>
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    ///<summary>
    ///  Inserts the specified node immediately before the specified reference node.
    ///</summary>
    ///<remarks><p>If refChild is null, inserts newChild at the end of the list of child nodes.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The Node to insert.</param>
    ///  <param name="refChild">The Node that is the reference node. The newChild is placed before this node.</param>
    ///<returns>The inserted node.</returns>
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    ///<summary>
    ///  Removes the specified child node.
    ///</summary>
    ///<remarks><p>The parent of oldChild is set to null after the node is removed.</p>
    ///</remarks>
    ///  <param name="oldChild">The node to remove.</param>
    ///<returns>The removed node.</returns>
    function RemoveChild(oldChild: DNNode): DNNode;
    ///<summary>
    ///  Removes all the child nodes of the current node.
    ///</summary>
    procedure RemoveAllChildren;
    ///<summary>
    ///  Removes all <see cref="T:Aspose.Words.Markup.SmartTag" />
    ///  descendant nodes of the current node.
    ///</summary>
    ///<remarks>This method does not remove the content of the smart tags.</remarks>
    procedure RemoveSmartTags;
    ///<summary>
    ///  Returns the index of the specified child node in the child node array.
    ///</summary>
    ///<remarks>
    ///  Returns -1 if the node is not found in the child nodes.
    ///</remarks>
    function IndexOf(child: DNNode): Int32;
    ///<summary>
    ///  Reserved for system use. IXPathNavigable.
    ///</summary>
    function CreateNavigator: DDN.Aspose.Common.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function Accept(visitor: DNDocumentVisitor): Boolean;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Returns the type of the story.
    ///</summary>
    property StoryType: DNStoryType read get_StoryType;
    ///<summary>
    ///  Retrieves the parent <see cref="T:Aspose.Words.Paragraph" />
    ///  of this node.
    ///</summary>
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    ///<summary>
    ///  Gets the first paragraph in the story.
    ///</summary>
    property FirstParagraph: DNParagraph read get_FirstParagraph;
    ///<summary>
    ///  Gets the last paragraph in the story.
    ///</summary>
    property LastParagraph: DNParagraph read get_LastParagraph;
    ///<summary>
    ///  Gets a collection of paragraphs that are immediate children of the story.
    ///</summary>
    property Paragraphs: DNParagraphCollection read get_Paragraphs;
    ///<summary>
    ///  Gets a collection of tables that are immediate children of the story.
    ///</summary>
    property Tables: DNTableCollection read get_Tables;
    ///<summary>
    ///  Returns true if this object was inserted in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    ///<summary>
    ///  Returns true if this object was deleted in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    ///<summary>
    ///  Returns <b>true</b>
    ///  if this object was moved (deleted) in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    ///<summary>
    ///  Returns <b>true</b>
    ///  if this object was moved (inserted) in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    ///<summary>
    ///  Provides access to the font formatting of the anchor character of this object.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Returns true as this node can have child nodes.
    ///</summary>
    property IsComposite: Boolean read get_IsComposite;
    ///<summary>
    ///  Returns true if this node has any child nodes.
    ///</summary>
    property HasChildNodes: Boolean read get_HasChildNodes;
    ///<summary>
    ///  Gets all immediate child nodes of this node.
    ///</summary>
    ///<remarks><p>Note, <see cref="P:Aspose.Words.CompositeNode.ChildNodes" />
    ///  is equivalent to calling <c>GetChildNodes(NodeType.Any, false)</c>
    ///  and creates and returns a new collection every time it is accessed.</p>
    ///  <p>If there are no child nodes, this property returns an empty collection.</p>
    ///</remarks>
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    ///<summary>
    ///  Gets the first child of the node.
    ///</summary>
    ///<remarks>
    ///  If there is no first child node, a null is returned.
    ///</remarks>
    property FirstChild: DNNode read get_FirstChild;
    ///<summary>
    ///  Gets the last child of the node.
    ///</summary>
    ///<remarks>
    ///  If there is no last child node, a null is returned.
    ///</remarks>
    property LastChild: DNNode read get_LastChild;
    ///<summary>
    ///  Gets the number of immediate children of this node.
    ///</summary>
    property Count: Int32 read get_Count;
    property NodeType: DNNodeType read get_NodeType;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNInlineStory = class(TDNGenericImport<DNInlineStoryClass, DNInlineStory>) end;

  //-------------namespace: Aspose.Words----------------
  DNCommentClass = interface(DNInlineStoryClass)
  ['{59BDB005-8E31-50D6-B922-A414128F2730}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <b>Comment</b>
    ///  class.
    ///</summary>
    ///<remarks><p>When <b>Comment</b>
    ///  is created, it belongs to the specified document, but is not
    ///  yet part of the document and <b>ParentNode</b>
    ///  is null.</p>
    ///  <p>To append <b>Comment</b>
    ///  to the document use InsertAfter or InsertBefore
    ///  on the paragraph where you want the comment inserted.</p>
    ///  <para>After creating a comment, don't forget to set its <see cref="P:Aspose.Words.Comment.Author" />
    ///  ,
    ///<see cref="P:Aspose.Words.Comment.Initial" />
    ///  and <see cref="P:Aspose.Words.Comment.DateTime" />
    ///  properties.</para></remarks>
    ///  <param name="doc">The owner document.</param>
    {class} function init(doc: DNDocumentBase): DNComment; overload;
    ///<summary>
    ///  Initializes a new instance of the <b>Comment</b>
    ///  class.
    ///</summary>
    ///  <param name="doc">The owner document.</param>
    ///  <param name="author">The author name for the comment. Cannot be null.</param>
    ///  <param name="initial">The author initials for the comment. Cannot be null.</param>
    ///  <param name="dateTime">The date and time for the comment.</param>
    {class} function init(doc: DNDocumentBase; author: string; initial: string; dateTime: DDN.mscorlib.DNDateTime): DNComment; overload;

  end;

  ///<summary>
  ///  Represents a container for text of a comment.
  ///</summary>
  ///<remarks><para>A comment is an annotation which is anchored to a region of text or to a position in text.
  ///  A comment can contain an arbitrary amount of block-level content.</para><para>If a <see cref="T:Aspose.Words.Comment" />
  ///  object occurs on its own, the comment is anchored to
  ///  the position of the <see cref="T:Aspose.Words.Comment" />
  ///  object.</para><para>To anchor a comment to a region of text three objects are required: <see cref="T:Aspose.Words.Comment" />
  ///  ,
  ///<see cref="T:Aspose.Words.CommentRangeStart" />
  ///  and <see cref="T:Aspose.Words.CommentRangeEnd" />
  ///  . All three objects need to share the same
  ///<see cref="P:Aspose.Words.Comment.Id" />
  ///  value.</para><p><see cref="T:Aspose.Words.Comment" />
  ///  is an inline-level node and can only be a child of <see cref="T:Aspose.Words.Paragraph" />
  ///  .</p>
  ///  <p><see cref="T:Aspose.Words.Comment" />
  ///  can contain <see cref="T:Aspose.Words.Paragraph" />
  ///  and <see cref="T:Aspose.Words.Tables.Table" />
  ///  child nodes.</p>
  ///<seealso cref="T:Aspose.Words.CommentRangeStart" />
  ///<seealso cref="T:Aspose.Words.CommentRangeEnd" />
  ///</remarks>
  [DNTypeName('Aspose.Words.Comment')]
  DNComment = interface(DNInlineStory)
  ['{701D74FC-B514-36D3-B422-2D042D3E9FF7}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_StoryType: DNStoryType;
    function get_Id: Int32;
    function get_Initial: string;
    procedure set_Initial(value: string);
    function get_DateTime: DDN.mscorlib.DNDateTime;
    procedure set_DateTime(value: DDN.mscorlib.DNDateTime);
    function get_Author: string;
    procedure set_Author(value: string);
    function get_Ancestor: DNComment;
    function get_Replies: DNCommentCollection;
    function get_Done: Boolean;
    procedure set_Done(value: Boolean);
    function get_ParentParagraph: DNParagraph;
    function get_FirstParagraph: DNParagraph;
    function get_LastParagraph: DNParagraph;
    function get_Paragraphs: DNParagraphCollection;
    function get_Tables: DNTableCollection;
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_Font: DNFont;
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the nodes.</param>
    ///<returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
    ///<remarks>
    ///  Calls <see cref="M:Aspose.Words.DocumentVisitor.VisitCommentStart(Aspose.Words.Comment)" />
    ///  , then calls <see cref="M:Aspose.Words.Node.Accept(Aspose.Words.DocumentVisitor)" />
    ///  for all
    ///  child nodes of the comment and calls <see cref="M:Aspose.Words.DocumentVisitor.VisitCommentEnd(Aspose.Words.Comment)" />
    ///  at the end.
    ///</remarks>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Adds a reply to this comment.
    ///</summary>
    ///  <param name="author">The author name for the reply.</param>
    ///  <param name="initial">The author initials for the reply.</param>
    ///  <param name="dateTime">The date and time for the reply.</param>
    ///  <param name="text">The reply text.</param>
    ///<returns>The created <see cref="T:Aspose.Words.Comment" />
    ///  node for the reply.</returns>
    ///<remarks>
    ///  Due to the existing MS Office limitations only 1 level of replies is allowed in the document.
    ///  An exception of type <see cref="T:System.InvalidOperationException" />
    ///  will be raised if this method is
    ///  called on the existing Reply comment.
    ///</remarks>
    function AddReply(author: string; initial: string; dateTime: DDN.mscorlib.DNDateTime; text: string): DNComment;
    ///<summary>
    ///  Removes the specified reply to this comment.
    ///</summary>
    ///<remarks>All constituent nodes of the reply will be deleted from the document.</remarks>
    ///  <param name="reply">The comment node of the deleting reply.</param>
    procedure RemoveReply(reply: DNComment);
    ///<summary>
    ///  Removes all replies to this comment.
    ///</summary>
    ///<remarks> All constituent nodes of the replies will be deleted from the document.</remarks>
    procedure RemoveAllReplies;
    ///<summary>
    ///  This is a convenience method that allows to easily set text of the comment.
    ///</summary>
    ///<remarks><para>This method allows to quickly set text of a comment from a string. The string can contain
    ///  paragraph breaks, this will create paragraphs of text in the comment accordingly.
    ///  If you want to insert more complex elements into the comment, for example bookmarks
    ///  or tables or apply rich formatting, then you need to use the appropriate node classes to
    ///  build up the comment text.</para></remarks>
    ///  <param name="text">The new text of the comment.</param>
    procedure SetText(text: string);
    ///<summary>
    ///  If the last child is not a paragraph, creates and appends one empty paragraph.
    ///</summary>
    procedure EnsureMinimum;
    function GetText: string;
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    function SelectNodes(xpath: string): DNNodeList;
    function SelectSingleNode(xpath: string): DNNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    function PrependChild(newChild: DNNode): DNNode;
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    function RemoveChild(oldChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSmartTags;
    function IndexOf(child: DNNode): Int32;
    function CreateNavigator: DDN.Aspose.Common.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Returns <b>NodeType.Comment</b>
    ///  .
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Returns <b>StoryType.Comments</b>
    ///  .
    ///</summary>
    property StoryType: DNStoryType read get_StoryType;
    ///<summary>
    ///  Gets the comment identifier.
    ///</summary>
    ///<remarks><para>The comment identifier allows to anchor a comment to a region of text in the document.
    ///  The region must be demarcated using the <see cref="T:Aspose.Words.CommentRangeStart" />
    ///  and <see cref="T:Aspose.Words.CommentRangeEnd" />
    ///  object sharing the same identifier value as the <see cref="T:Aspose.Words.Comment" />
    ///  object.</para><para>You would use this value when looking for the <see cref="T:Aspose.Words.CommentRangeStart" />
    ///  and
    ///<see cref="T:Aspose.Words.CommentRangeEnd" />
    ///  nodes that are linked to this comment.</para><para>Comment identifiers are supposed to be unique across a document and Aspose.Words automatically
    ///  maintains comment identifiers when loading, saving and combining documents.</para></remarks>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Returns or sets the initials of the user associated with a specific comment.
    ///</summary>
    ///<remarks><para>Cannot be null.</para><para>Default is empty string.</para></remarks>
    property Initial: string read get_Initial write set_Initial;
    ///<summary>
    ///  Gets the date and time that the comment was made.
    ///</summary>
    ///<remarks><para>Default is <see cref="F:System.DateTime.MinValue" />
    ///  .</para></remarks>
    property DateTime: DDN.mscorlib.DNDateTime read get_DateTime write set_DateTime;
    ///<summary>
    ///  Returns or sets the author name for a comment.
    ///</summary>
    ///<remarks><para>Cannot be null.</para><para>Default is empty string.</para></remarks>
    property Author: string read get_Author write set_Author;
    ///<summary>
    ///  Returns the parent Comment object. Returns null for top-level comments.
    ///</summary>
    property Ancestor: DNComment read get_Ancestor;
    ///<summary>
    ///  Returns a collection of <see cref="T:Aspose.Words.Comment" />
    ///  objects that are immediate children of the specified comment.
    ///</summary>
    property Replies: DNCommentCollection read get_Replies;
    ///<summary>
    ///  Gets or sets flag indicating that the comment has been marked done.
    ///</summary>
    property Done: Boolean read get_Done write set_Done;
    ///<summary>
    ///  Retrieves the parent <see cref="T:Aspose.Words.Paragraph" />
    ///  of this node.
    ///</summary>
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    ///<summary>
    ///  Gets the first paragraph in the story.
    ///</summary>
    property FirstParagraph: DNParagraph read get_FirstParagraph;
    ///<summary>
    ///  Gets the last paragraph in the story.
    ///</summary>
    property LastParagraph: DNParagraph read get_LastParagraph;
    ///<summary>
    ///  Gets a collection of paragraphs that are immediate children of the story.
    ///</summary>
    property Paragraphs: DNParagraphCollection read get_Paragraphs;
    ///<summary>
    ///  Gets a collection of tables that are immediate children of the story.
    ///</summary>
    property Tables: DNTableCollection read get_Tables;
    ///<summary>
    ///  Returns true if this object was inserted in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    ///<summary>
    ///  Returns true if this object was deleted in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    ///<summary>
    ///  Returns <b>true</b>
    ///  if this object was moved (deleted) in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    ///<summary>
    ///  Returns <b>true</b>
    ///  if this object was moved (inserted) in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    ///<summary>
    ///  Provides access to the font formatting of the anchor character of this object.
    ///</summary>
    property Font: DNFont read get_Font;
    property IsComposite: Boolean read get_IsComposite;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property FirstChild: DNNode read get_FirstChild;
    property LastChild: DNNode read get_LastChild;
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNComment = class(TDNGenericImport<DNCommentClass, DNComment>) end;

  //-------------namespace: Aspose.Words.Notes----------------
  DNFootnoteClass = interface(DNInlineStoryClass)
  ['{6725CAB5-9C77-5710-BA30-4DA40F93192A}']
  { constructors } 

    ///<summary>
    ///  Initializes an instance of the <b>Footnote</b>
    ///  class.
    ///</summary>
    ///<remarks><p>When <b>Footnote</b>
    ///  is created, it belongs to the specified document, but is not
    ///  yet part of the document and <b>ParentNode</b>
    ///  is null.</p>
    ///  <p>To append <b>Footnote</b>
    ///  to the document use InsertAfter or InsertBefore
    ///  on the paragraph where you want the footnote inserted.</p>
    ///</remarks>
    ///  <param name="doc">The owner document.</param>
    ///  <param name="footnoteType">A <see cref="P:Aspose.Words.Notes.Footnote.FootnoteType" />
    ///  value
    ///  that specifies whether this is a footnote or endnote.</param>
    {class} function init(doc: DNDocumentBase; footnoteType: DNFootnoteType): DNFootnote;

  end;

  ///<summary>
  ///  Represents a container for text of a footnote or endnote.
  ///</summary>
  ///<remarks><p>The <b>Footnote</b>
  ///  class is used to represent both footnotes and endnotes in a Word document.</p>
  ///  <p><b>Footnote</b>
  ///  is an inline-level node and can only be a child of <b>Paragraph</b>
  ///  .</p>
  ///  <p><b>Footnote</b>
  ///  can contain <b>Paragraph</b>
  ///  and <b>Table</b>
  ///  child nodes.</p>
  ///<seealso cref="P:Aspose.Words.Notes.Footnote.FootnoteType" />
  ///<seealso cref="M:Aspose.Words.DocumentBuilder.InsertFootnote(Aspose.Words.Notes.FootnoteType,System.String)" />
  ///<seealso cref="T:Aspose.Words.Notes.FootnoteOptions" />
  ///<seealso cref="T:Aspose.Words.Notes.EndnoteOptions" />
  ///</remarks>
  [DNTypeName('Aspose.Words.Notes.Footnote')]
  DNFootnote = interface(DNInlineStory)
  ['{6183FD76-8C36-3A95-8F73-8542BA059359}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_StoryType: DNStoryType;
    function get_FootnoteType: DNFootnoteType;
    function get_IsAuto: Boolean;
    procedure set_IsAuto(value: Boolean);
    function get_ReferenceMark: string;
    procedure set_ReferenceMark(value: string);
    function get_ParentParagraph: DNParagraph;
    function get_FirstParagraph: DNParagraph;
    function get_LastParagraph: DNParagraph;
    function get_Paragraphs: DNParagraphCollection;
    function get_Tables: DNTableCollection;
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_Font: DNFont;
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the nodes.</param>
    ///<returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
    ///<remarks>
    ///  Calls DocumentVisitor.VisitFootnoteStart, then calls Accept for all child nodes of the footnote
    ///  and calls DocumentVisitor.VisitFootnoteEnd at the end.
    ///</remarks>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  If the last child is not a paragraph, creates and appends one empty paragraph.
    ///</summary>
    procedure EnsureMinimum;
    function GetText: string;
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    function SelectNodes(xpath: string): DNNodeList;
    function SelectSingleNode(xpath: string): DNNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    function PrependChild(newChild: DNNode): DNNode;
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    function RemoveChild(oldChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSmartTags;
    function IndexOf(child: DNNode): Int32;
    function CreateNavigator: DDN.Aspose.Common.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Returns <b>NodeType.Footnote</b>
    ///  .
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Returns <b>StoryType.Footnotes</b>
    ///  or <b>StoryType.Endnotes</b>
    ///  .
    ///</summary>
    property StoryType: DNStoryType read get_StoryType;
    ///<summary>
    ///  Returns a value that specifies whether this is a footnote or endnote.
    ///</summary>
    property FootnoteType: DNFootnoteType read get_FootnoteType;
    ///<summary>
    ///  Holds a value that specifies whether this is a auto-numbered footnote or
    ///  footnote with user defined custom reference mark.
    ///</summary>
    ///<remarks><see cref="P:Aspose.Words.Notes.Footnote.ReferenceMark" />
    ///  initialized with empty string if IsAuto set to false.
    ///</remarks>
    property IsAuto: Boolean read get_IsAuto write set_IsAuto;
    ///<summary>
    ///  Gets/sets custom reference mark to be used for this footnote.
    ///  Default value is <b>empty string</b>
    ///  (<see cref="F:System.String.Empty" />
    ///  ), meaning auto-numbered footnotes are used.
    ///</summary>
    ///<remarks><para>
    ///  If this property is set to <b>empty string</b>
    ///  (<see cref="F:System.String.Empty" />
    ///  ) or null, then <see cref="P:Aspose.Words.Notes.Footnote.IsAuto" />
    ///  property will automatically be set to true,
    ///  if set to anything else then <see cref="P:Aspose.Words.Notes.Footnote.IsAuto" />
    ///  will be set to false.
    ///</para><para>
    ///  RTF-format can only store 1 symbol as custom reference mark, so upon export only the first symbol will be written others will be discard.
    ///</para></remarks>
    property ReferenceMark: string read get_ReferenceMark write set_ReferenceMark;
    ///<summary>
    ///  Retrieves the parent <see cref="T:Aspose.Words.Paragraph" />
    ///  of this node.
    ///</summary>
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    ///<summary>
    ///  Gets the first paragraph in the story.
    ///</summary>
    property FirstParagraph: DNParagraph read get_FirstParagraph;
    ///<summary>
    ///  Gets the last paragraph in the story.
    ///</summary>
    property LastParagraph: DNParagraph read get_LastParagraph;
    ///<summary>
    ///  Gets a collection of paragraphs that are immediate children of the story.
    ///</summary>
    property Paragraphs: DNParagraphCollection read get_Paragraphs;
    ///<summary>
    ///  Gets a collection of tables that are immediate children of the story.
    ///</summary>
    property Tables: DNTableCollection read get_Tables;
    ///<summary>
    ///  Returns true if this object was inserted in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    ///<summary>
    ///  Returns true if this object was deleted in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    ///<summary>
    ///  Returns <b>true</b>
    ///  if this object was moved (deleted) in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    ///<summary>
    ///  Returns <b>true</b>
    ///  if this object was moved (inserted) in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    ///<summary>
    ///  Provides access to the font formatting of the anchor character of this object.
    ///</summary>
    property Font: DNFont read get_Font;
    property IsComposite: Boolean read get_IsComposite;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property FirstChild: DNNode read get_FirstChild;
    property LastChild: DNNode read get_LastChild;
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNFootnote = class(TDNGenericImport<DNFootnoteClass, DNFootnote>) end;

  //-------------namespace: Aspose.Words.Markup----------------
  DNSmartTagClass = interface(DNCompositeNodeClass)
  ['{57CD8AFC-581D-5726-9AE9-F132EDBF312C}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Words.Markup.SmartTag" />
    ///  class.
    ///</summary>
    ///<remarks><para>When you create a new node, you need to specify a document to which the node belongs.
    ///  A node cannot exist without a document because it depends on the document-wide structures
    ///  such as lists and styles. Although a node always belongs to a document, a node might or might
    ///  not be a part of the document tree.</para><para>When a node is created, it belongs to a document, but is not yet part of the document tree
    ///  and <see cref="P:Aspose.Words.Node.ParentNode" />
    ///  is null. To insert a node into the document, use the
    ///<see cref="M:Aspose.Words.CompositeNode.InsertAfter(Aspose.Words.Node,Aspose.Words.Node)" />
    ///  or <see cref="M:Aspose.Words.CompositeNode.InsertBefore(Aspose.Words.Node,Aspose.Words.Node)" />
    ///  methods
    ///  on the parent node.</para></remarks>
    ///  <param name="doc">The owner document.</param>
    {class} function init(doc: DNDocumentBase): DNSmartTag;

  end;

  ///<summary>
  ///  This element specifies the presence of a smart tag around one or more inline structures
  ///  (runs, images, fields,etc.) within a paragraph.
  ///</summary>
  ///<remarks><para>Smart tags is a kind of custom XML markup. Smart tags provide a facility for embedding
  ///  customer-defined semantics into the document via the ability to provide a basic namespace/name
  ///  for a run or set of runs within a document.</para><p><see cref="T:Aspose.Words.Markup.SmartTag" />
  ///  can be a child of a <see cref="T:Aspose.Words.Paragraph" />
  ///  or
  ///  another <see cref="T:Aspose.Words.Markup.SmartTag" />
  ///  node.</p>
  ///  <p>The complete list of child nodes that can occur inside a smart tag consists of
  ///<see cref="T:Aspose.Words.BookmarkStart" />
  ///  , <see cref="T:Aspose.Words.BookmarkEnd" />
  ///  ,
  ///<see cref="T:Aspose.Words.Fields.FieldStart" />
  ///  , <see cref="T:Aspose.Words.Fields.FieldSeparator" />
  ///  , <see cref="T:Aspose.Words.Fields.FieldEnd" />
  ///  , <see cref="T:Aspose.Words.Fields.FormField" />
  ///  ,
  ///<see cref="T:Aspose.Words.Comment" />
  ///  , <see cref="T:Aspose.Words.Notes.Footnote" />
  ///  ,
  ///<see cref="T:Aspose.Words.Run" />
  ///  , <see cref="T:Aspose.Words.SpecialChar" />
  ///  ,
  ///<see cref="T:Aspose.Words.Drawing.Shape" />
  ///  , <see cref="T:Aspose.Words.Drawing.GroupShape" />
  ///  ,
  ///<see cref="T:Aspose.Words.CommentRangeStart" />
  ///  ,
  ///<see cref="T:Aspose.Words.CommentRangeEnd" />
  ///  ,
  ///<see cref="T:Aspose.Words.Markup.SmartTag" />
  ///  .</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.Markup.SmartTag')]
  DNSmartTag = interface(DNCompositeNode)
  ['{E6D770E8-8E30-3F72-8EA0-4A209613AB0F}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_Element: string;
    procedure set_Element(value: string);
    function get_Uri: string;
    procedure set_Uri(value: string);
    function get_Properties: DNCustomXmlPropertyCollection;
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the nodes.</param>
    ///<returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
    ///<remarks>
    ///  Calls <see cref="M:Aspose.Words.DocumentVisitor.VisitSmartTagStart(Aspose.Words.Markup.SmartTag)" />
    ///  , then calls <see cref="M:Aspose.Words.Node.Accept(Aspose.Words.DocumentVisitor)" />
    ///  for all
    ///  child nodes of the smart tag and calls <see cref="M:Aspose.Words.DocumentVisitor.VisitSmartTagEnd(Aspose.Words.Markup.SmartTag)" />
    ///  at the end.
    ///</remarks>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Gets the text of this node and of all its children.
    ///</summary>
    ///<remarks><p>The returned string includes all control and special characters as described in <see cref="T:Aspose.Words.ControlChar" />
    ///  .</p>
    ///</remarks>
    function GetText: string;
    ///<overloads>Returns a collection of child nodes that match the specified type.</overloads><summary>
    ///  Returns a live collection of child nodes that match the specified type.
    ///</summary>
    ///<remarks><p>The collection of nodes returned by this method is always live.</p>
    ///<remarks><p>A live collection is always in sync with the document. For example, if you
    ///  selected all sections in a document and enumerate through the collection
    ///  deleting the sections, the section is removed from the collection immediately
    ///  when it is removed from the document.</p>
    ///</remarks>
    ///</remarks>
    ///  <param name="nodeType">Specifies the type of nodes to select.</param>
    ///  <param name="isDeep">True to select from all child nodes recursively.
    ///  False to select only among immediate children. </param>
    ///<returns>A live collection of child nodes of the specified type.</returns>
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    ///<summary>
    ///  Returns an Nth child node that matches the specified type.
    ///</summary>
    ///<remarks><p>If index is out of range, a null is returned.</p>
    ///</remarks>
    ///  <param name="nodeType">Specifies the type of the child node.</param>
    ///  <param name="index">Zero based index of the child node to select.
    ///  Negative indexes are also allowed and indicate access from the end,
    ///  that is -1 means the last node.</param>
    ///  <param name="isDeep">True to select from all child nodes recursively.
    ///  False to select only among immediate children. See remarks for more info.</param>
    ///<returns>The child node that matches the criteria or null if no matching node is found.</returns>
    ///<remarks>Note that markup nodes (<see cref="F:Aspose.Words.NodeType.StructuredDocumentTag" />
    ///  and <see cref="F:Aspose.Words.NodeType.SmartTag" />
    ///  )
    ///  are traversed even when isDeep = false and GetChild is invoked for non-markup node type. For example if the first run in a para
    ///  is wrapped in a StructuredDocumentTag, it will still be returned by GetChild(NodeType.Run, 0, false).</remarks>
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    ///<summary>
    ///  Selects a list of nodes matching the XPath expression.
    ///</summary>
    ///<remarks><p>Only expressions with element names are supported at the moment. Expressions
    ///  that use attribute names are not supported.</p>
    ///</remarks>
    ///  <param name="xpath">The XPath expression.</param>
    ///<returns>A list of nodes matching the XPath query.</returns>
    function SelectNodes(xpath: string): DNNodeList;
    ///<summary>
    ///  Selects the first Node that matches the XPath expression.
    ///</summary>
    ///<remarks><p>Only expressions with element names are supported at the moment. Expressions
    ///  that use attribute names are not supported.</p>
    ///</remarks>
    ///  <param name="xpath">The XPath expression.</param>
    ///<returns>The first Node that matches the XPath query or null if no matching node is found.</returns>
    function SelectSingleNode(xpath: string): DNNode;
    ///<summary>
    ///  Provides support for the for each style iteration over the child nodes of this node.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    ///<summary>
    ///  Adds the specified node to the end of the list of child nodes for this node.
    ///</summary>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The node to add.</param>
    ///<returns>The node added.</returns>
    function AppendChild(newChild: DNNode): DNNode;
    ///<summary>
    ///  Adds the specified node to the beginning of the list of child nodes for this node.
    ///</summary>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The node to add.</param>
    ///<returns>The node added.</returns>
    function PrependChild(newChild: DNNode): DNNode;
    ///<summary>
    ///  Inserts the specified node immediately after the specified reference node.
    ///</summary>
    ///<remarks><p>If refChild is null, inserts newChild at the beginning of the list of child nodes.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The Node to insert.</param>
    ///  <param name="refChild">The Node that is the reference node. The newNode is placed after the refNode. </param>
    ///<returns>The inserted node.</returns>
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    ///<summary>
    ///  Inserts the specified node immediately before the specified reference node.
    ///</summary>
    ///<remarks><p>If refChild is null, inserts newChild at the end of the list of child nodes.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The Node to insert.</param>
    ///  <param name="refChild">The Node that is the reference node. The newChild is placed before this node.</param>
    ///<returns>The inserted node.</returns>
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    ///<summary>
    ///  Removes the specified child node.
    ///</summary>
    ///<remarks><p>The parent of oldChild is set to null after the node is removed.</p>
    ///</remarks>
    ///  <param name="oldChild">The node to remove.</param>
    ///<returns>The removed node.</returns>
    function RemoveChild(oldChild: DNNode): DNNode;
    ///<summary>
    ///  Removes all the child nodes of the current node.
    ///</summary>
    procedure RemoveAllChildren;
    ///<summary>
    ///  Removes all <see cref="T:Aspose.Words.Markup.SmartTag" />
    ///  descendant nodes of the current node.
    ///</summary>
    ///<remarks>This method does not remove the content of the smart tags.</remarks>
    procedure RemoveSmartTags;
    ///<summary>
    ///  Returns the index of the specified child node in the child node array.
    ///</summary>
    ///<remarks>
    ///  Returns -1 if the node is not found in the child nodes.
    ///</remarks>
    function IndexOf(child: DNNode): Int32;
    ///<summary>
    ///  Reserved for system use. IXPathNavigable.
    ///</summary>
    function CreateNavigator: DDN.Aspose.Common.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Returns <b>NodeType.SmartTag</b>
    ///  .
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Specifies the name of the smart tag within the document.
    ///</summary>
    ///<remarks><para>Cannot be null.</para><para>Default is empty string.</para></remarks>
    property Element: string read get_Element write set_Element;
    ///<summary>
    ///  Specifies the namespace URI of the smart tag.
    ///</summary>
    ///<remarks><para>Cannot be null.</para><para>Default is empty string.</para></remarks>
    property Uri: string read get_Uri write set_Uri;
    ///<summary>
    ///  A collection of the smart tag properties.
    ///</summary>
    ///<remarks><para>Cannot be null.</para></remarks>
    property Properties: DNCustomXmlPropertyCollection read get_Properties;
    ///<summary>
    ///  Returns true as this node can have child nodes.
    ///</summary>
    property IsComposite: Boolean read get_IsComposite;
    ///<summary>
    ///  Returns true if this node has any child nodes.
    ///</summary>
    property HasChildNodes: Boolean read get_HasChildNodes;
    ///<summary>
    ///  Gets all immediate child nodes of this node.
    ///</summary>
    ///<remarks><p>Note, <see cref="P:Aspose.Words.CompositeNode.ChildNodes" />
    ///  is equivalent to calling <c>GetChildNodes(NodeType.Any, false)</c>
    ///  and creates and returns a new collection every time it is accessed.</p>
    ///  <p>If there are no child nodes, this property returns an empty collection.</p>
    ///</remarks>
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    ///<summary>
    ///  Gets the first child of the node.
    ///</summary>
    ///<remarks>
    ///  If there is no first child node, a null is returned.
    ///</remarks>
    property FirstChild: DNNode read get_FirstChild;
    ///<summary>
    ///  Gets the last child of the node.
    ///</summary>
    ///<remarks>
    ///  If there is no last child node, a null is returned.
    ///</remarks>
    property LastChild: DNNode read get_LastChild;
    ///<summary>
    ///  Gets the number of immediate children of this node.
    ///</summary>
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNSmartTag = class(TDNGenericImport<DNSmartTagClass, DNSmartTag>) end;

  //-------------namespace: Aspose.Words.Markup----------------
  DNStructuredDocumentTagClass = interface(DNCompositeNodeClass)
  ['{BC6B84D0-32C9-5D8C-A88C-552C8A19DC13}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <b>Structured document tag</b>
    ///  class.
    ///</summary>
    ///<remarks><para>The following types of SDT can be created:</para><list type="bullet"><item><see cref="F:Aspose.Words.Markup.SdtType.Checkbox" />
    ///</item>
    ///<item><see cref="F:Aspose.Words.Markup.SdtType.DropDownList" />
    ///</item>
    ///<item><see cref="F:Aspose.Words.Markup.SdtType.ComboBox" />
    ///</item>
    ///<item><see cref="F:Aspose.Words.Markup.SdtType.Date" />
    ///</item>
    ///<item><see cref="F:Aspose.Words.Markup.SdtType.BuildingBlockGallery" />
    ///</item>
    ///<item><see cref="F:Aspose.Words.Markup.SdtType.Group" />
    ///</item>
    ///<item><see cref="F:Aspose.Words.Markup.SdtType.Picture" />
    ///</item>
    ///<item><see cref="F:Aspose.Words.Markup.SdtType.RichText" />
    ///</item>
    ///<item><see cref="F:Aspose.Words.Markup.SdtType.PlainText" />
    ///</item>
    ///</list>
    ///</remarks>
    ///  <param name="doc">The owner document.</param>
    ///  <param name="type">Type of SDT node.</param>
    ///  <param name="level">Level of SDT node within the document.</param>
    {class} function init(doc: DNDocumentBase; &type: DNSdtType; level: DNMarkupLevel): DNStructuredDocumentTag;

  end;

  ///<summary>
  ///  Represents a structured document tag (SDT or content control) in a document.
  ///</summary>
  ///<remarks><para>Structured document tags (SDTs) allow to embed customer-defined semantics as well as its
  ///  behavior and appearance into a document.</para><para>In this version Aspose.Words provides a number of public methods and properties to
  ///  manipulate the behavior and content of <see cref="T:Aspose.Words.Markup.StructuredDocumentTag" />
  ///  .
  ///  Mapping of SDT nodes to custom XML packages within a document can be performed with using
  ///  the <see cref="P:Aspose.Words.Markup.StructuredDocumentTag.XmlMapping" />
  ///  property.</para><para><see cref="T:Aspose.Words.Markup.StructuredDocumentTag" />
  ///  can occur in a document in the following places:</para><list type="bullet"><item>Block-level - Among paragraphs and tables, as a child of a <see cref="T:Aspose.Words.Body" />
  ///  , <see cref="T:Aspose.Words.HeaderFooter" />
  ///  ,
  ///<see cref="T:Aspose.Words.Comment" />
  ///  , <see cref="T:Aspose.Words.Notes.Footnote" />
  ///  or a <see cref="T:Aspose.Words.Drawing.Shape" />
  ///  node.</item>
  ///<item>Row-level - Among rows in a table, as a child of a <see cref="T:Aspose.Words.Tables.Table" />
  ///  node.</item>
  ///<item>Cell-level - Among cells in a table row, as a child of a <see cref="T:Aspose.Words.Tables.Row" />
  ///  node.</item>
  ///<item>Inline-level - Among inline content inside, as a child of a <see cref="T:Aspose.Words.Paragraph" />
  ///  .</item>
  ///<item>Nested inside another <see cref="T:Aspose.Words.Markup.StructuredDocumentTag" />
  ///  .</item>
  ///</list>
  ///</remarks>
  [DNTypeName('Aspose.Words.Markup.StructuredDocumentTag')]
  DNStructuredDocumentTag = interface(DNCompositeNode)
  ['{7698ED80-B832-3D35-8EDC-10DA363FB614}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_Placeholder: DNBuildingBlock;
    function get_PlaceholderName: string;
    procedure set_PlaceholderName(value: string);
    function get_Level: DNMarkupLevel;
    function get_SdtType: DNSdtType;
    function get_Id: Int32;
    function get_LockContentControl: Boolean;
    procedure set_LockContentControl(value: Boolean);
    function get_LockContents: Boolean;
    procedure set_LockContents(value: Boolean);
    function get_IsShowingPlaceholderText: Boolean;
    procedure set_IsShowingPlaceholderText(value: Boolean);
    function get_Tag: string;
    procedure set_Tag(value: string);
    function get_ContentsFont: DNFont;
    function get_EndCharacterFont: DNFont;
    function get_IsTemporary: Boolean;
    procedure set_IsTemporary(value: Boolean);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_ListItems: DNSdtListItemCollection;
    function get_Checked: Boolean;
    procedure set_Checked(value: Boolean);
    function get_DateDisplayLocale: Int32;
    procedure set_DateDisplayLocale(value: Int32);
    function get_DateDisplayFormat: string;
    procedure set_DateDisplayFormat(value: string);
    function get_FullDate: DDN.mscorlib.DNDateTime;
    procedure set_FullDate(value: DDN.mscorlib.DNDateTime);
    function get_DateStorageFormat: DNSdtDateStorageFormat;
    procedure set_DateStorageFormat(value: DNSdtDateStorageFormat);
    function get_CalendarType: DNSdtCalendarType;
    procedure set_CalendarType(value: DNSdtCalendarType);
    function get_BuildingBlockGallery: string;
    procedure set_BuildingBlockGallery(value: string);
    function get_BuildingBlockCategory: string;
    procedure set_BuildingBlockCategory(value: string);
    function get_Multiline: Boolean;
    procedure set_Multiline(value: Boolean);
    function get_Color: DDN.Aspose.Common.DNColor;
    procedure set_Color(value: DDN.Aspose.Common.DNColor);
    function get_Style: DNStyle;
    procedure set_Style(value: DNStyle);
    function get_StyleName: string;
    procedure set_StyleName(value: string);
    function get_XmlMapping: DNXmlMapping;
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Sets the symbol used to represent the checked state of a check box content control.
    ///</summary>
    ///  <param name="characterCode">The character code for the specified symbol.</param>
    ///  <param name="fontName">The name of the font that contains the symbol.</param>
    ///<remarks><para>Accessing this method will only work for <see cref="F:Aspose.Words.Markup.SdtType.Checkbox" />
    ///  SDT types.</para><para>For all other SDT types exception will occur.</para></remarks>
    procedure SetCheckedSymbol(characterCode: Int32; fontName: string);
    ///<summary>
    ///  Sets the symbol used to represent the unchecked state of a check box content control.
    ///</summary>
    ///  <param name="characterCode">The character code for the specified symbol.</param>
    ///  <param name="fontName">The name of the font that contains the symbol.</param>
    ///<remarks><para>Accessing this method will only work for <see cref="F:Aspose.Words.Markup.SdtType.Checkbox" />
    ///  SDT types.</para><para>For all other SDT types exception will occur.</para></remarks>
    procedure SetUncheckedSymbol(characterCode: Int32; fontName: string);
    ///<summary>
    ///  Removes just this SDT node itself, but keeps the content of it inside the document tree.
    ///</summary>
    procedure RemoveSelfOnly;
    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the nodes.</param>
    ///<returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
    ///<remarks>
    ///  Calls <see cref="M:Aspose.Words.DocumentVisitor.VisitStructuredDocumentTagStart(Aspose.Words.Markup.StructuredDocumentTag)" />
    ///  , then calls <see cref="M:Aspose.Words.Node.Accept(Aspose.Words.DocumentVisitor)" />
    ///  for all
    ///  child nodes of the smart tag and calls <see cref="M:Aspose.Words.DocumentVisitor.VisitStructuredDocumentTagEnd(Aspose.Words.Markup.StructuredDocumentTag)" />
    ///  at the end.
    ///</remarks>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Clears contents of this structured document tag and displays a placeholder if it is defined.
    ///</summary>
    ///<remarks><para>It is not possible to clear contents of a structured document tag if it has revisions.</para><para>If this structured document tag is mapped to custom XML (with using the <see cref="P:Aspose.Words.Markup.StructuredDocumentTag.XmlMapping" />
    ///  property), the referenced XML node is cleared.</para></remarks>
    procedure Clear;
    ///<summary>
    ///  Gets the text of this node and of all its children.
    ///</summary>
    ///<remarks><p>The returned string includes all control and special characters as described in <see cref="T:Aspose.Words.ControlChar" />
    ///  .</p>
    ///</remarks>
    function GetText: string;
    ///<overloads>Returns a collection of child nodes that match the specified type.</overloads><summary>
    ///  Returns a live collection of child nodes that match the specified type.
    ///</summary>
    ///<remarks><p>The collection of nodes returned by this method is always live.</p>
    ///<remarks><p>A live collection is always in sync with the document. For example, if you
    ///  selected all sections in a document and enumerate through the collection
    ///  deleting the sections, the section is removed from the collection immediately
    ///  when it is removed from the document.</p>
    ///</remarks>
    ///</remarks>
    ///  <param name="nodeType">Specifies the type of nodes to select.</param>
    ///  <param name="isDeep">True to select from all child nodes recursively.
    ///  False to select only among immediate children. </param>
    ///<returns>A live collection of child nodes of the specified type.</returns>
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    ///<summary>
    ///  Returns an Nth child node that matches the specified type.
    ///</summary>
    ///<remarks><p>If index is out of range, a null is returned.</p>
    ///</remarks>
    ///  <param name="nodeType">Specifies the type of the child node.</param>
    ///  <param name="index">Zero based index of the child node to select.
    ///  Negative indexes are also allowed and indicate access from the end,
    ///  that is -1 means the last node.</param>
    ///  <param name="isDeep">True to select from all child nodes recursively.
    ///  False to select only among immediate children. See remarks for more info.</param>
    ///<returns>The child node that matches the criteria or null if no matching node is found.</returns>
    ///<remarks>Note that markup nodes (<see cref="F:Aspose.Words.NodeType.StructuredDocumentTag" />
    ///  and <see cref="F:Aspose.Words.NodeType.SmartTag" />
    ///  )
    ///  are traversed even when isDeep = false and GetChild is invoked for non-markup node type. For example if the first run in a para
    ///  is wrapped in a StructuredDocumentTag, it will still be returned by GetChild(NodeType.Run, 0, false).</remarks>
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    ///<summary>
    ///  Selects a list of nodes matching the XPath expression.
    ///</summary>
    ///<remarks><p>Only expressions with element names are supported at the moment. Expressions
    ///  that use attribute names are not supported.</p>
    ///</remarks>
    ///  <param name="xpath">The XPath expression.</param>
    ///<returns>A list of nodes matching the XPath query.</returns>
    function SelectNodes(xpath: string): DNNodeList;
    ///<summary>
    ///  Selects the first Node that matches the XPath expression.
    ///</summary>
    ///<remarks><p>Only expressions with element names are supported at the moment. Expressions
    ///  that use attribute names are not supported.</p>
    ///</remarks>
    ///  <param name="xpath">The XPath expression.</param>
    ///<returns>The first Node that matches the XPath query or null if no matching node is found.</returns>
    function SelectSingleNode(xpath: string): DNNode;
    ///<summary>
    ///  Provides support for the for each style iteration over the child nodes of this node.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    ///<summary>
    ///  Adds the specified node to the end of the list of child nodes for this node.
    ///</summary>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The node to add.</param>
    ///<returns>The node added.</returns>
    function AppendChild(newChild: DNNode): DNNode;
    ///<summary>
    ///  Adds the specified node to the beginning of the list of child nodes for this node.
    ///</summary>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The node to add.</param>
    ///<returns>The node added.</returns>
    function PrependChild(newChild: DNNode): DNNode;
    ///<summary>
    ///  Inserts the specified node immediately after the specified reference node.
    ///</summary>
    ///<remarks><p>If refChild is null, inserts newChild at the beginning of the list of child nodes.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The Node to insert.</param>
    ///  <param name="refChild">The Node that is the reference node. The newNode is placed after the refNode. </param>
    ///<returns>The inserted node.</returns>
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    ///<summary>
    ///  Inserts the specified node immediately before the specified reference node.
    ///</summary>
    ///<remarks><p>If refChild is null, inserts newChild at the end of the list of child nodes.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The Node to insert.</param>
    ///  <param name="refChild">The Node that is the reference node. The newChild is placed before this node.</param>
    ///<returns>The inserted node.</returns>
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    ///<summary>
    ///  Removes the specified child node.
    ///</summary>
    ///<remarks><p>The parent of oldChild is set to null after the node is removed.</p>
    ///</remarks>
    ///  <param name="oldChild">The node to remove.</param>
    ///<returns>The removed node.</returns>
    function RemoveChild(oldChild: DNNode): DNNode;
    ///<summary>
    ///  Removes all the child nodes of the current node.
    ///</summary>
    procedure RemoveAllChildren;
    ///<summary>
    ///  Removes all <see cref="T:Aspose.Words.Markup.SmartTag" />
    ///  descendant nodes of the current node.
    ///</summary>
    ///<remarks>This method does not remove the content of the smart tags.</remarks>
    procedure RemoveSmartTags;
    ///<summary>
    ///  Returns the index of the specified child node in the child node array.
    ///</summary>
    ///<remarks>
    ///  Returns -1 if the node is not found in the child nodes.
    ///</remarks>
    function IndexOf(child: DNNode): Int32;
    ///<summary>
    ///  Reserved for system use. IXPathNavigable.
    ///</summary>
    function CreateNavigator: DDN.Aspose.Common.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Returns <b>NodeType.StructuredDocumentTag</b>
    ///  .
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Gets the <see cref="T:Aspose.Words.BuildingBlocks.BuildingBlock" />
    ///  containing placeholder text which should be displayed when this SDT run contents are empty,
    ///  the associated mapped XML element is empty as specified via the <see cref="P:Aspose.Words.Markup.StructuredDocumentTag.XmlMapping" />
    ///  element
    ///  or the <see cref="P:Aspose.Words.Markup.StructuredDocumentTag.IsShowingPlaceholderText" />
    ///  element is true.
    ///</summary>
    ///<remarks>Can be null, meaning that the placeholder is not applicable for this Sdt.</remarks>
    property Placeholder: DNBuildingBlock read get_Placeholder;
    ///<summary><para>Gets or sets Name of the <see cref="T:Aspose.Words.BuildingBlocks.BuildingBlock" />
    ///  containing placeholder text.</para><para>
    ///  BuildingBlock with this name <see cref="P:Aspose.Words.BuildingBlocks.BuildingBlock.Name" />
    ///  has to be present in the <see cref="P:Aspose.Words.Document.GlossaryDocument" />
    ///  otherwise <see cref="T:System.InvalidOperationException" />
    ///  will occur.</para></summary>
    property PlaceholderName: string read get_PlaceholderName write set_PlaceholderName;
    ///<summary>
    ///  Gets the level at which this <b>SDT</b>
    ///  occurs in the document tree.
    ///</summary>
    property Level: DNMarkupLevel read get_Level;
    ///<summary>
    ///  Gets type of this <b>Structured document tag</b>
    ///  .
    ///</summary>
    property SdtType: DNSdtType read get_SdtType;
    ///<summary><para>Specifies a unique read-only persistent numerical Id for this <b>SDT</b>
    ///  .</para></summary>
    ///<remarks><para> Id attribute shall follow these rules:
    ///<list type="bullet"><item>The document shall retain SDT ids only if the whole document is cloned <see cref="M:Aspose.Words.Document.Clone" />
    ///  .</item>
    ///<item>During <see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean)" />
    ///  Id shall be retained if import does not cause conflicts with other SDT Ids in
    ///  the target document.</item>
    ///<item>
    ///  If multiple SDT nodes specify the same decimal number value for the Id attribute,
    ///  then the first SDT in the document shall maintain this original Id,
    ///  and all subsequent SDT nodes shall have new identifiers assigned to them when the document is loaded.
    ///</item>
    ///<item>During standalone SDT <see cref="M:Aspose.Words.Markup.StructuredDocumentTag.Clone(System.Boolean,Aspose.Words.INodeCloningListener)" />
    ///  operation new unique ID will be generated for the cloned SDT node.</item>
    ///<item>
    ///  If Id is not specified in the source document, then the SDT node shall have a new unique identifier assigned
    ///  to it when the document is loaded.
    ///</item>
    ///</list>
    ///</para></remarks>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  When set to true, this property will prohibit a user from deleting this <b>SDT</b>
    ///  .
    ///</summary>
    property LockContentControl: Boolean read get_LockContentControl write set_LockContentControl;
    ///<summary>
    ///  When set to true, this property will prohibit a user from editing the contents of this <b>SDT</b>
    ///  .
    ///</summary>
    property LockContents: Boolean read get_LockContents write set_LockContents;
    ///<summary><para>
    ///  Specifies whether the content of this <b>SDT</b>
    ///  shall be interpreted to contain placeholder text
    ///  (as opposed to regular text contents within the SDT).
    ///</para><para>
    ///  if set to true, this state shall be resumed (showing placeholder text) upon opening this document.
    ///</para></summary>
    property IsShowingPlaceholderText: Boolean read get_IsShowingPlaceholderText write set_IsShowingPlaceholderText;
    ///<summary>
    ///  Specifies a tag associated with the current SDT node.
    ///  Can not be null.
    ///</summary>
    ///<remarks> A tag is an arbitrary string which applications can associate with SDT
    ///  in order to identify it without providing a visible friendly name.</remarks>
    property Tag: string read get_Tag write set_Tag;
    ///<summary>
    ///  Font formatting that will be applied to text entered into <b>SDT</b>
    ///  .
    ///</summary>
    property ContentsFont: DNFont read get_ContentsFont;
    ///<summary>
    ///  Font formatting that will be applied to the last character of text entered into <b>SDT</b>
    ///  .
    ///</summary>
    property EndCharacterFont: DNFont read get_EndCharacterFont;
    ///<summary>
    ///  Specifies whether this <b>SDT</b>
    ///  shall be removed from the WordProcessingML document when its contents
    ///  are modified.
    ///</summary>
    property IsTemporary: Boolean read get_IsTemporary write set_IsTemporary;
    ///<summary>
    ///  Specifies the friendly name associated with this <b>SDT</b>
    ///  .
    ///  Can not be null.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets <see cref="T:Aspose.Words.Markup.SdtListItemCollection" />
    ///  associated with this <b>SDT</b>
    ///  .
    ///</summary>
    ///<remarks><para>Accessing this property will only work for <see cref="F:Aspose.Words.Markup.SdtType.ComboBox" />
    ///  or <see cref="F:Aspose.Words.Markup.SdtType.DropDownList" />
    ///  SDT types.
    ///</para><para>For all other SDT types exception will occur.</para></remarks>
    property ListItems: DNSdtListItemCollection read get_ListItems;
    ///<summary>
    ///  Gets/Sets current state of the Checkbox <b>SDT</b>
    ///  .
    ///  Default value for this property is false.
    ///</summary>
    ///<remarks><para>Accessing this property will only work for <see cref="F:Aspose.Words.Markup.SdtType.Checkbox" />
    ///  SDT types.
    ///</para><para>For all other SDT types exception will occur.</para></remarks>
    property Checked: Boolean read get_Checked write set_Checked;
    ///<summary>
    ///  Allows to set/get the language format for the date displayed in this <b>SDT</b>
    ///  .
    ///</summary>
    ///<remarks><para>Accessing this property will only work for <see cref="F:Aspose.Words.Markup.SdtType.Date" />
    ///  SDT type.
    ///</para><para>For all other SDT types exception will occur.</para></remarks>
    property DateDisplayLocale: Int32 read get_DateDisplayLocale write set_DateDisplayLocale;
    ///<summary>
    ///  String that represents the format in which dates are displayed.
    ///  Can not be null.
    ///<example>The dates for English (U.S.) is "mm/dd/yyyy"</example></summary>
    ///<remarks><para>Accessing this property will only work for <see cref="F:Aspose.Words.Markup.SdtType.Date" />
    ///  SDT type.
    ///</para><para>For all other SDT types exception will occur.</para></remarks>
    property DateDisplayFormat: string read get_DateDisplayFormat write set_DateDisplayFormat;
    ///<summary>
    ///  Specifies the full date and time last entered into this <b>SDT</b>
    ///  .
    ///</summary>
    ///<remarks><para>Accessing this property will only work for <see cref="F:Aspose.Words.Markup.SdtType.Date" />
    ///  SDT type.
    ///</para><para>For all other SDT types exception will occur.</para></remarks>
    property FullDate: DDN.mscorlib.DNDateTime read get_FullDate write set_FullDate;
    ///<summary>
    ///  Gets/sets format in which the date for a date SDT is stored when the <b>SDT</b>
    ///  is bound to an XML node in the document's data store.
    ///  Default value is <see cref="F:Aspose.Words.Markup.SdtDateStorageFormat.DateTime" />
    ///</summary>
    ///<remarks><para>Accessing this property will only work for <see cref="F:Aspose.Words.Markup.SdtType.Date" />
    ///  SDT type.
    ///</para><para>For all other SDT types exception will occur.</para></remarks>
    property DateStorageFormat: DNSdtDateStorageFormat read get_DateStorageFormat write set_DateStorageFormat;
    ///<summary>
    ///  Specifies the type of calendar for this <b>SDT</b>
    ///  .
    ///  Default is <see cref="F:Aspose.Words.Markup.SdtCalendarType.Default" />
    ///</summary>
    ///<remarks><para>Accessing this property will only work for <see cref="F:Aspose.Words.Markup.SdtType.Date" />
    ///  SDT type.
    ///</para><para>For all other SDT types exception will occur.</para></remarks>
    property CalendarType: DNSdtCalendarType read get_CalendarType write set_CalendarType;
    ///<summary>
    ///  Specifies type of building block for this <b>SDT</b>
    ///  .
    ///  Can not be null.
    ///</summary>
    ///<remarks><para>Accessing this property will only work for <see cref="F:Aspose.Words.Markup.SdtType.BuildingBlockGallery" />
    ///  and
    ///<see cref="F:Aspose.Words.Markup.SdtType.DocPartObj" />
    ///  SDT types. It is read-only for <b>SDT</b>
    ///  of the document part type.
    ///</para><para>For all other SDT types exception will occur.</para></remarks>
    property BuildingBlockGallery: string read get_BuildingBlockGallery write set_BuildingBlockGallery;
    ///<summary>
    ///  Specifies category of building block for this <b>SDT</b>
    ///  node.
    ///  Can not be null.
    ///</summary>
    ///<remarks><para>Accessing this property will only work for <see cref="F:Aspose.Words.Markup.SdtType.BuildingBlockGallery" />
    ///  and
    ///<see cref="F:Aspose.Words.Markup.SdtType.DocPartObj" />
    ///  SDT types. It is read-only for <b>SDT</b>
    ///  of the document part type.
    ///</para><para>For all other SDT types exception will occur.</para></remarks>
    property BuildingBlockCategory: string read get_BuildingBlockCategory write set_BuildingBlockCategory;
    ///<summary>
    ///  Specifies whether this <b>SDT</b>
    ///  allows multiple lines of text.
    ///</summary>
    ///<remarks><para>Accessing this property will only work for <see cref="F:Aspose.Words.Markup.SdtType.RichText" />
    ///  and <see cref="F:Aspose.Words.Markup.SdtType.PlainText" />
    ///  SDT type.
    ///</para><para>For all other SDT types exception will occur.</para></remarks>
    property Multiline: Boolean read get_Multiline write set_Multiline;
    ///<summary>
    ///  Gets or sets the color of the structured document tag.
    ///</summary>
    property Color: DDN.Aspose.Common.DNColor read get_Color write set_Color;
    ///<summary>
    ///  Gets or sets the Style of the structured document tag.
    ///</summary>
    ///<remarks>
    ///  Only <see cref="F:Aspose.Words.StyleType.Character" />
    ///  style or <see cref="F:Aspose.Words.StyleType.Paragraph" />
    ///  style with linked character style can be set.
    ///</remarks>
    ///<dev>
    ///  It's ridiculous that Word uses character styles internally but exposes
    ///  linked paragraph styles in GUI and VBA. Anyway, we do the same.
    ///</dev>
    property Style: DNStyle read get_Style write set_Style;
    ///<summary>
    ///  Gets or sets the name of the style applied to the structured document tag.
    ///</summary>
    property StyleName: string read get_StyleName write set_StyleName;
    ///<summary>
    ///  Gets an object that represents the mapping of this structured document tag to XML data
    ///  in a custom XML part of the current document.
    ///</summary>
    ///<remarks>
    ///  You can use the <see cref="M:Aspose.Words.Markup.XmlMapping.SetMapping(Aspose.Words.Markup.CustomXmlPart,System.String,System.String)" />
    ///  method of this object to map
    ///  a structured document tag to XML data.
    ///</remarks>
    ///<dev>
    ///  If this element is present and the parent Sdt is not of a rich text type, then the current
    ///  value of the Sdt shall be determined by finding the XML element (if any) which is
    ///  determined by the attributes on this element.
    ///  See Iso29500, chapter 1, 17.5.2.6 dataBinding (XML Mapping).
    ///  If DataBinding information does not result in an XML element, then the
    ///  application can use any algorithm desired to find the closest available match. If this information does result in an
    ///  XML element, then the contents of that element shall be used to replace the current run content within the
    ///  document.
    ///</dev>
    property XmlMapping: DNXmlMapping read get_XmlMapping;
    ///<summary>
    ///  Returns true as this node can have child nodes.
    ///</summary>
    property IsComposite: Boolean read get_IsComposite;
    ///<summary>
    ///  Returns true if this node has any child nodes.
    ///</summary>
    property HasChildNodes: Boolean read get_HasChildNodes;
    ///<summary>
    ///  Gets all immediate child nodes of this node.
    ///</summary>
    ///<remarks><p>Note, <see cref="P:Aspose.Words.CompositeNode.ChildNodes" />
    ///  is equivalent to calling <c>GetChildNodes(NodeType.Any, false)</c>
    ///  and creates and returns a new collection every time it is accessed.</p>
    ///  <p>If there are no child nodes, this property returns an empty collection.</p>
    ///</remarks>
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    ///<summary>
    ///  Gets the first child of the node.
    ///</summary>
    ///<remarks>
    ///  If there is no first child node, a null is returned.
    ///</remarks>
    property FirstChild: DNNode read get_FirstChild;
    ///<summary>
    ///  Gets the last child of the node.
    ///</summary>
    ///<remarks>
    ///  If there is no last child node, a null is returned.
    ///</remarks>
    property LastChild: DNNode read get_LastChild;
    ///<summary>
    ///  Gets the number of immediate children of this node.
    ///</summary>
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNStructuredDocumentTag = class(TDNGenericImport<DNStructuredDocumentTagClass, DNStructuredDocumentTag>) end;

  //-------------namespace: Aspose.Words.Math----------------
  DNOfficeMathClass = interface(DNCompositeNodeClass)
  ['{8ACB6F38-844B-52D5-9CA2-E1FD0C982353}']
  end;

  ///<summary>
  ///  Represents an Office Math object such as function, equation, matrix or alike. Can contain child elements
  ///  including runs of mathematical text, bookmarks, comments, other <see cref="T:Aspose.Words.Math.OfficeMath" />
  ///  instances and some other nodes.
  ///</summary>
  ///<remarks><para>In this version of Aspose.Words, <see cref="T:Aspose.Words.Math.OfficeMath" />
  ///  nodes do not provide public methods
  ///  and properties to create or modify a OfficeMath object. In this version you are not able to instantiate
  ///<see cref="N:Aspose.Words.Math" />
  ///  nodes or modify existing except deleting them.</para><p><see cref="T:Aspose.Words.Math.OfficeMath" />
  ///  can only be a child of <see cref="T:Aspose.Words.Paragraph" />
  ///  .</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.Math.OfficeMath')]
  DNOfficeMath = interface(DNCompositeNode)
  ['{9CC83208-8525-3DBD-A708-35E0A8F97636}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_ParentParagraph: DNParagraph;
    function get_MathObjectType: DNMathObjectType;
    function get_EquationXmlEncoding: DDN.mscorlib.DNEncoding;
    procedure set_EquationXmlEncoding(value: DDN.mscorlib.DNEncoding);
    function get_Justification: DNOfficeMathJustification;
    procedure set_Justification(value: DNOfficeMathJustification);
    function get_DisplayType: DNOfficeMathDisplayType;
    procedure set_DisplayType(value: DNOfficeMathDisplayType);
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the nodes.</param>
    ///<returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
    ///<remarks>
    ///  Calls <see cref="M:Aspose.Words.DocumentVisitor.VisitOfficeMathStart(Aspose.Words.Math.OfficeMath)" />
    ///  , then calls <see cref="M:Aspose.Words.Node.Accept(Aspose.Words.DocumentVisitor)" />
    ///  for all
    ///  child nodes of the Office Math and calls <see cref="M:Aspose.Words.DocumentVisitor.VisitOfficeMathEnd(Aspose.Words.Math.OfficeMath)" />
    ///  at the end.
    ///</remarks>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Creates and returns an object that can be used to render this equation into an image.
    ///</summary>
    ///<remarks><para>This method just invokes the <see cref="T:Aspose.Words.Rendering.OfficeMathRenderer" />
    ///  constructor and passes
    ///  this object as a parameter.</para></remarks>
    ///<returns>The renderer object for this equation.</returns>
    function GetMathRenderer: DNOfficeMathRenderer;
    ///<summary>
    ///  Gets the text of this node and of all its children.
    ///</summary>
    ///<remarks><p>The returned string includes all control and special characters as described in <see cref="T:Aspose.Words.ControlChar" />
    ///  .</p>
    ///</remarks>
    function GetText: string;
    ///<overloads>Returns a collection of child nodes that match the specified type.</overloads><summary>
    ///  Returns a live collection of child nodes that match the specified type.
    ///</summary>
    ///<remarks><p>The collection of nodes returned by this method is always live.</p>
    ///<remarks><p>A live collection is always in sync with the document. For example, if you
    ///  selected all sections in a document and enumerate through the collection
    ///  deleting the sections, the section is removed from the collection immediately
    ///  when it is removed from the document.</p>
    ///</remarks>
    ///</remarks>
    ///  <param name="nodeType">Specifies the type of nodes to select.</param>
    ///  <param name="isDeep">True to select from all child nodes recursively.
    ///  False to select only among immediate children. </param>
    ///<returns>A live collection of child nodes of the specified type.</returns>
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    ///<summary>
    ///  Returns an Nth child node that matches the specified type.
    ///</summary>
    ///<remarks><p>If index is out of range, a null is returned.</p>
    ///</remarks>
    ///  <param name="nodeType">Specifies the type of the child node.</param>
    ///  <param name="index">Zero based index of the child node to select.
    ///  Negative indexes are also allowed and indicate access from the end,
    ///  that is -1 means the last node.</param>
    ///  <param name="isDeep">True to select from all child nodes recursively.
    ///  False to select only among immediate children. See remarks for more info.</param>
    ///<returns>The child node that matches the criteria or null if no matching node is found.</returns>
    ///<remarks>Note that markup nodes (<see cref="F:Aspose.Words.NodeType.StructuredDocumentTag" />
    ///  and <see cref="F:Aspose.Words.NodeType.SmartTag" />
    ///  )
    ///  are traversed even when isDeep = false and GetChild is invoked for non-markup node type. For example if the first run in a para
    ///  is wrapped in a StructuredDocumentTag, it will still be returned by GetChild(NodeType.Run, 0, false).</remarks>
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    ///<summary>
    ///  Selects a list of nodes matching the XPath expression.
    ///</summary>
    ///<remarks><p>Only expressions with element names are supported at the moment. Expressions
    ///  that use attribute names are not supported.</p>
    ///</remarks>
    ///  <param name="xpath">The XPath expression.</param>
    ///<returns>A list of nodes matching the XPath query.</returns>
    function SelectNodes(xpath: string): DNNodeList;
    ///<summary>
    ///  Selects the first Node that matches the XPath expression.
    ///</summary>
    ///<remarks><p>Only expressions with element names are supported at the moment. Expressions
    ///  that use attribute names are not supported.</p>
    ///</remarks>
    ///  <param name="xpath">The XPath expression.</param>
    ///<returns>The first Node that matches the XPath query or null if no matching node is found.</returns>
    function SelectSingleNode(xpath: string): DNNode;
    ///<summary>
    ///  Provides support for the for each style iteration over the child nodes of this node.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    ///<summary>
    ///  Adds the specified node to the end of the list of child nodes for this node.
    ///</summary>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The node to add.</param>
    ///<returns>The node added.</returns>
    function AppendChild(newChild: DNNode): DNNode;
    ///<summary>
    ///  Adds the specified node to the beginning of the list of child nodes for this node.
    ///</summary>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The node to add.</param>
    ///<returns>The node added.</returns>
    function PrependChild(newChild: DNNode): DNNode;
    ///<summary>
    ///  Inserts the specified node immediately after the specified reference node.
    ///</summary>
    ///<remarks><p>If refChild is null, inserts newChild at the beginning of the list of child nodes.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The Node to insert.</param>
    ///  <param name="refChild">The Node that is the reference node. The newNode is placed after the refNode. </param>
    ///<returns>The inserted node.</returns>
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    ///<summary>
    ///  Inserts the specified node immediately before the specified reference node.
    ///</summary>
    ///<remarks><p>If refChild is null, inserts newChild at the end of the list of child nodes.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The Node to insert.</param>
    ///  <param name="refChild">The Node that is the reference node. The newChild is placed before this node.</param>
    ///<returns>The inserted node.</returns>
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    ///<summary>
    ///  Removes the specified child node.
    ///</summary>
    ///<remarks><p>The parent of oldChild is set to null after the node is removed.</p>
    ///</remarks>
    ///  <param name="oldChild">The node to remove.</param>
    ///<returns>The removed node.</returns>
    function RemoveChild(oldChild: DNNode): DNNode;
    ///<summary>
    ///  Removes all the child nodes of the current node.
    ///</summary>
    procedure RemoveAllChildren;
    ///<summary>
    ///  Removes all <see cref="T:Aspose.Words.Markup.SmartTag" />
    ///  descendant nodes of the current node.
    ///</summary>
    ///<remarks>This method does not remove the content of the smart tags.</remarks>
    procedure RemoveSmartTags;
    ///<summary>
    ///  Returns the index of the specified child node in the child node array.
    ///</summary>
    ///<remarks>
    ///  Returns -1 if the node is not found in the child nodes.
    ///</remarks>
    function IndexOf(child: DNNode): Int32;
    ///<summary>
    ///  Reserved for system use. IXPathNavigable.
    ///</summary>
    function CreateNavigator: DDN.Aspose.Common.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Returns <b>NodeType.OfficeMath</b>
    ///  .
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Retrieves the parent <see cref="T:Aspose.Words.Paragraph" />
    ///  of this node.
    ///</summary>
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    ///<summary>
    ///  Gets type <see cref="P:Aspose.Words.Math.OfficeMath.MathObjectType" />
    ///  of this Office Math object.
    ///</summary>
    property MathObjectType: DNMathObjectType read get_MathObjectType;
    ///<summary>
    ///  Gets/sets an encoding that was used to encode equation XML, if this office math object is read from
    ///  equation XML. We use the encoding on saving a document to write in same encoding that it was read.
    ///</summary>
    property EquationXmlEncoding: DDN.mscorlib.DNEncoding read get_EquationXmlEncoding write set_EquationXmlEncoding;
    ///<summary>
    ///  Gets/sets Office Math justification.
    ///</summary>
    ///<remarks><para>Justification cannot be set to the Office Math with display format type <see cref="F:Aspose.Words.Math.OfficeMathDisplayType.Inline" />
    ///  .</para><para>Inline justification cannot be set to the Office Math with display format type <see cref="F:Aspose.Words.Math.OfficeMathDisplayType.Display" />
    ///  .</para><para>Corresponding <see cref="P:Aspose.Words.Math.OfficeMath.DisplayType" />
    ///  has to be set before setting Office Math justification.</para></remarks>
    property Justification: DNOfficeMathJustification read get_Justification write set_Justification;
    ///<summary>
    ///  Gets/sets Office Math display format type which represents whether an equation is displayed inline with the text
    ///  or displayed on its own line.
    ///</summary>
    ///<remarks><para>Display format type has effect for top level Office Math only.</para><para>Returned display format type is always <see cref="F:Aspose.Words.Math.OfficeMathDisplayType.Inline" />
    ///  for nested Office Math.</para></remarks>
    property DisplayType: DNOfficeMathDisplayType read get_DisplayType write set_DisplayType;
    ///<summary>
    ///  Returns true as this node can have child nodes.
    ///</summary>
    property IsComposite: Boolean read get_IsComposite;
    ///<summary>
    ///  Returns true if this node has any child nodes.
    ///</summary>
    property HasChildNodes: Boolean read get_HasChildNodes;
    ///<summary>
    ///  Gets all immediate child nodes of this node.
    ///</summary>
    ///<remarks><p>Note, <see cref="P:Aspose.Words.CompositeNode.ChildNodes" />
    ///  is equivalent to calling <c>GetChildNodes(NodeType.Any, false)</c>
    ///  and creates and returns a new collection every time it is accessed.</p>
    ///  <p>If there are no child nodes, this property returns an empty collection.</p>
    ///</remarks>
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    ///<summary>
    ///  Gets the first child of the node.
    ///</summary>
    ///<remarks>
    ///  If there is no first child node, a null is returned.
    ///</remarks>
    property FirstChild: DNNode read get_FirstChild;
    ///<summary>
    ///  Gets the last child of the node.
    ///</summary>
    ///<remarks>
    ///  If there is no last child node, a null is returned.
    ///</remarks>
    property LastChild: DNNode read get_LastChild;
    ///<summary>
    ///  Gets the number of immediate children of this node.
    ///</summary>
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNOfficeMath = class(TDNGenericImport<DNOfficeMathClass, DNOfficeMath>) end;

  //-------------namespace: Aspose.Words----------------
  DNParagraphClass = interface(DNCompositeNodeClass)
  ['{671A0A0B-1989-5411-BF3A-3310E8DFCDA4}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <b>Paragraph</b>
    ///  class.
    ///</summary>
    ///<remarks><p>When <b>Paragraph</b>
    ///  is created, it belongs to the specified document, but is not
    ///  yet part of the document and <b>ParentNode</b>
    ///  is null.</p>
    ///  <p>To append <b>Paragraph</b>
    ///  to the document use InsertAfter or InsertBefore
    ///  on the story where you want the paragraph inserted.</p>
    ///</remarks>
    ///  <param name="doc">The owner document.</param>
    {class} function init(doc: DNDocumentBase): DNParagraph;

  end;

  ///<summary>
  ///  Represents a paragraph of text.
  ///</summary>
  ///<remarks><p><see cref="T:Aspose.Words.Paragraph" />
  ///  is a block-level node and can be a child of classes derived from
  ///<see cref="T:Aspose.Words.Story" />
  ///  or <see cref="T:Aspose.Words.InlineStory" />
  ///  .</p>
  ///  <p><see cref="T:Aspose.Words.Paragraph" />
  ///  can contain any number of inline-level nodes and bookmarks.</p>
  ///  <p>The complete list of child nodes that can occur inside a paragraph consists of
  ///<see cref="T:Aspose.Words.BookmarkStart" />
  ///  , <see cref="T:Aspose.Words.BookmarkEnd" />
  ///  ,
  ///<see cref="T:Aspose.Words.Fields.FieldStart" />
  ///  , <see cref="T:Aspose.Words.Fields.FieldSeparator" />
  ///  ,
  ///<see cref="T:Aspose.Words.Fields.FieldEnd" />
  ///  , <see cref="T:Aspose.Words.Fields.FormField" />
  ///  ,
  ///<see cref="T:Aspose.Words.Comment" />
  ///  , <see cref="T:Aspose.Words.Notes.Footnote" />
  ///  ,
  ///<see cref="T:Aspose.Words.Run" />
  ///  , <see cref="T:Aspose.Words.SpecialChar" />
  ///  ,
  ///<see cref="T:Aspose.Words.Drawing.Shape" />
  ///  , <see cref="T:Aspose.Words.Drawing.GroupShape" />
  ///  ,
  ///<see cref="T:Aspose.Words.Markup.SmartTag" />
  ///  .</p>
  ///  <p>A valid paragraph in Microsoft Word always ends with a paragraph break character and
  ///  a minimal valid paragraph consists just of a paragraph break. The <b>Paragraph</b>
  ///  class automatically appends the appropriate paragraph break character at the end
  ///  and this character is not part of the child nodes of the <b>Paragraph</b>
  ///  , therefore
  ///  a <b>Paragraph</b>
  ///  can be empty.</p>
  ///  <p>Do not include the end of paragraph <see cref="F:Aspose.Words.ControlChar.ParagraphBreak">ControlChar.ParagraphBreak</see>
  ///  or end of cell <see cref="F:Aspose.Words.ControlChar.Cell">ControlChar.Cell</see> characters inside the text of
  ///  the paragraph as it might make the paragraph invalid when the document is opened in Microsoft Word.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.Paragraph')]
  DNParagraph = interface(DNCompositeNode)
  ['{E72DEBC5-7B23-3148-8A96-1E336C74E9AD}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_ParentStory: DNStory;
    function get_ParentSection: DNSection;
    function get_IsInCell: Boolean;
    function get_IsEndOfCell: Boolean;
    function get_BreakIsStyleSeparator: Boolean;
    function get_IsEndOfSection: Boolean;
    function get_IsEndOfHeaderFooter: Boolean;
    function get_IsEndOfDocument: Boolean;
    function get_ParagraphFormat: DNParagraphFormat;
    function get_ListFormat: DNListFormat;
    function get_FrameFormat: DNFrameFormat;
    function get_ListLabel: DNListLabel;
    function get_Runs: DNRunCollection;
    function get_ParagraphBreakFont: DNFont;
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_IsFormatRevision: Boolean;
    function get_IsListItem: Boolean;
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns array of all tab stops applied to this paragraph, including applied indirectly by styles or lists.
    ///</summary>
    function GetEffectiveTabStops: TArray<DNTabStop>;
    ///<summary>
    ///  Joins runs with the same formatting in the paragraph.
    ///</summary>
    ///<returns>Number of joins performed. When <b>N</b>
    ///  adjacent runs are being joined they count as <b>N - 1</b>
    ///  joins.</returns>
    function JoinRunsWithSameFormatting: Int32;
    ///<overloads>Appends a Word field to this paragraph.</overloads><summary>
    ///  Appends a field to this paragraph.
    ///</summary>
    ///  <param name="fieldType">The type of the field to append.</param>
    ///  <param name="updateField">Specifies whether to update the field immediately.</param>
    ///<returns>A <see cref="T:Aspose.Words.Fields.Field" />
    ///  object that represents the appended field.</returns>
    function AppendField(fieldType: DNFieldType; updateField: Boolean): DNField; overload;
    ///<overloads>Appends a Word field to this paragraph.</overloads><summary>
    ///  Appends a field to this paragraph.
    ///</summary>
    ///  <param name="fieldCode">The field code to append (without curly braces).</param>
    ///<returns>A <see cref="T:Aspose.Words.Fields.Field" />
    ///  object that represents the appended field.</returns>
    function AppendField(fieldCode: string): DNField; overload;
    ///<overloads>Appends a Word field to this paragraph.</overloads><summary>
    ///  Appends a field to this paragraph.
    ///</summary>
    ///  <param name="fieldCode">The field code to append (without curly braces).</param>
    ///  <param name="fieldValue">The field value to append. Pass null for fields that do not have a value.</param>
    ///<returns>A <see cref="T:Aspose.Words.Fields.Field" />
    ///  object that represents the appended field.</returns>
    function AppendField(fieldCode: string; fieldValue: string): DNField; overload;
    ///<overloads>Inserts a Word field into this paragraph.</overloads><summary>
    ///  Inserts a field into this paragraph.
    ///</summary>
    ///  <param name="fieldType">The type of the field to insert.</param>
    ///  <param name="updateField">Specifies whether to update the field immediately.</param>
    ///  <param name="refNode">Reference node inside this paragraph (if refNode is null, then appends to the end of the paragraph).</param>
    ///  <param name="isAfter">Whether to insert the field after or before reference node.</param>
    ///<returns>A <see cref="T:Aspose.Words.Fields.Field" />
    ///  object that represents the inserted field.</returns>
    function InsertField(fieldType: DNFieldType; updateField: Boolean; refNode: DNNode; isAfter: Boolean): DNField; overload;
    ///<overloads>Inserts a Word field into this paragraph.</overloads><summary>
    ///  Inserts a field into this paragraph.
    ///</summary>
    ///  <param name="fieldCode">The field code to insert (without curly braces).</param>
    ///  <param name="refNode">Reference node inside this paragraph (if refNode is null, then appends to the end of the paragraph).</param>
    ///  <param name="isAfter">Whether to insert the field after or before reference node.</param>
    ///<returns>A <see cref="T:Aspose.Words.Fields.Field" />
    ///  object that represents the inserted field.</returns>
    function InsertField(fieldCode: string; refNode: DNNode; isAfter: Boolean): DNField; overload;
    ///<overloads>Inserts a Word field into this paragraph.</overloads><summary>
    ///  Inserts a field into this paragraph.
    ///</summary>
    ///  <param name="fieldCode">The field code to insert (without curly braces).</param>
    ///  <param name="fieldValue">The field value to insert. Pass null for fields that do not have a value.</param>
    ///  <param name="refNode">Reference node inside this paragraph (if refNode is null, then appends to the end of the paragraph).</param>
    ///  <param name="isAfter">Whether to insert the field after or before reference node.</param>
    ///<returns>A <see cref="T:Aspose.Words.Fields.Field" />
    ///  object that represents the inserted field.</returns>
    function InsertField(fieldCode: string; fieldValue: string; refNode: DNNode; isAfter: Boolean): DNField; overload;
    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the nodes.</param>
    ///<returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
    ///<remarks>
    ///  Calls DocumentVisitor.VisitParagraphStart, then calls Accept for all child nodes
    ///  of the paragraph and calls DocumentVisitor.VisitParagraphEnd at the end.
    ///</remarks>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Gets the text of this paragraph including the end of paragraph character.
    ///</summary>
    ///<remarks><p>The text of all child nodes is concatenated and the end of paragraph character is appended as follows:</p>
    ///<list type="bullet"><item>If the paragraph is the last paragraph of <see cref="T:Aspose.Words.Body" />
    ///  , then
    ///<see cref="F:Aspose.Words.ControlChar.SectionBreak">ControlChar.SectionBreak</see> (\x000c) is appended.</item>
    ///<item>If the paragraph is the last paragraph of <see cref="T:Aspose.Words.Tables.Cell" />
    ///  , then
    ///<see cref="F:Aspose.Words.ControlChar.Cell">ControlChar.Cell</see> (\x0007) is appended.</item>
    ///<item>For all other paragraphs
    ///<see cref="F:Aspose.Words.ControlChar.ParagraphBreak">ControlChar.ParagraphBreak</see> (\r) is appended.</item>
    ///</list>
    ///  <p>The returned string includes all control and special characters as described in <see cref="T:Aspose.Words.ControlChar" />
    ///  .</p>
    ///</remarks>
    function GetText: string;
    ///<overloads>Returns a collection of child nodes that match the specified type.</overloads><summary>
    ///  Returns a live collection of child nodes that match the specified type.
    ///</summary>
    ///<remarks><p>The collection of nodes returned by this method is always live.</p>
    ///<remarks><p>A live collection is always in sync with the document. For example, if you
    ///  selected all sections in a document and enumerate through the collection
    ///  deleting the sections, the section is removed from the collection immediately
    ///  when it is removed from the document.</p>
    ///</remarks>
    ///</remarks>
    ///  <param name="nodeType">Specifies the type of nodes to select.</param>
    ///  <param name="isDeep">True to select from all child nodes recursively.
    ///  False to select only among immediate children. </param>
    ///<returns>A live collection of child nodes of the specified type.</returns>
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    ///<summary>
    ///  Returns an Nth child node that matches the specified type.
    ///</summary>
    ///<remarks><p>If index is out of range, a null is returned.</p>
    ///</remarks>
    ///  <param name="nodeType">Specifies the type of the child node.</param>
    ///  <param name="index">Zero based index of the child node to select.
    ///  Negative indexes are also allowed and indicate access from the end,
    ///  that is -1 means the last node.</param>
    ///  <param name="isDeep">True to select from all child nodes recursively.
    ///  False to select only among immediate children. See remarks for more info.</param>
    ///<returns>The child node that matches the criteria or null if no matching node is found.</returns>
    ///<remarks>Note that markup nodes (<see cref="F:Aspose.Words.NodeType.StructuredDocumentTag" />
    ///  and <see cref="F:Aspose.Words.NodeType.SmartTag" />
    ///  )
    ///  are traversed even when isDeep = false and GetChild is invoked for non-markup node type. For example if the first run in a para
    ///  is wrapped in a StructuredDocumentTag, it will still be returned by GetChild(NodeType.Run, 0, false).</remarks>
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    ///<summary>
    ///  Selects a list of nodes matching the XPath expression.
    ///</summary>
    ///<remarks><p>Only expressions with element names are supported at the moment. Expressions
    ///  that use attribute names are not supported.</p>
    ///</remarks>
    ///  <param name="xpath">The XPath expression.</param>
    ///<returns>A list of nodes matching the XPath query.</returns>
    function SelectNodes(xpath: string): DNNodeList;
    ///<summary>
    ///  Selects the first Node that matches the XPath expression.
    ///</summary>
    ///<remarks><p>Only expressions with element names are supported at the moment. Expressions
    ///  that use attribute names are not supported.</p>
    ///</remarks>
    ///  <param name="xpath">The XPath expression.</param>
    ///<returns>The first Node that matches the XPath query or null if no matching node is found.</returns>
    function SelectSingleNode(xpath: string): DNNode;
    ///<summary>
    ///  Provides support for the for each style iteration over the child nodes of this node.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    ///<summary>
    ///  Adds the specified node to the end of the list of child nodes for this node.
    ///</summary>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The node to add.</param>
    ///<returns>The node added.</returns>
    function AppendChild(newChild: DNNode): DNNode;
    ///<summary>
    ///  Adds the specified node to the beginning of the list of child nodes for this node.
    ///</summary>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The node to add.</param>
    ///<returns>The node added.</returns>
    function PrependChild(newChild: DNNode): DNNode;
    ///<summary>
    ///  Inserts the specified node immediately after the specified reference node.
    ///</summary>
    ///<remarks><p>If refChild is null, inserts newChild at the beginning of the list of child nodes.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The Node to insert.</param>
    ///  <param name="refChild">The Node that is the reference node. The newNode is placed after the refNode. </param>
    ///<returns>The inserted node.</returns>
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    ///<summary>
    ///  Inserts the specified node immediately before the specified reference node.
    ///</summary>
    ///<remarks><p>If refChild is null, inserts newChild at the end of the list of child nodes.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The Node to insert.</param>
    ///  <param name="refChild">The Node that is the reference node. The newChild is placed before this node.</param>
    ///<returns>The inserted node.</returns>
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    ///<summary>
    ///  Removes the specified child node.
    ///</summary>
    ///<remarks><p>The parent of oldChild is set to null after the node is removed.</p>
    ///</remarks>
    ///  <param name="oldChild">The node to remove.</param>
    ///<returns>The removed node.</returns>
    function RemoveChild(oldChild: DNNode): DNNode;
    ///<summary>
    ///  Removes all the child nodes of the current node.
    ///</summary>
    procedure RemoveAllChildren;
    ///<summary>
    ///  Removes all <see cref="T:Aspose.Words.Markup.SmartTag" />
    ///  descendant nodes of the current node.
    ///</summary>
    ///<remarks>This method does not remove the content of the smart tags.</remarks>
    procedure RemoveSmartTags;
    ///<summary>
    ///  Returns the index of the specified child node in the child node array.
    ///</summary>
    ///<remarks>
    ///  Returns -1 if the node is not found in the child nodes.
    ///</remarks>
    function IndexOf(child: DNNode): Int32;
    ///<summary>
    ///  Reserved for system use. IXPathNavigable.
    ///</summary>
    function CreateNavigator: DDN.Aspose.Common.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Returns <b>NodeType.Paragraph</b>
    ///  .
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Retrieves the parent section-level story that can be <see cref="T:Aspose.Words.Body" />
    ///  or <see cref="T:Aspose.Words.HeaderFooter" />
    ///  .
    ///</summary>
    property ParentStory: DNStory read get_ParentStory;
    ///<summary>
    ///  Retrieves the parent <see cref="T:Aspose.Words.Section" />
    ///  of the paragraph.
    ///</summary>
    property ParentSection: DNSection read get_ParentSection;
    ///<summary>
    ///  True if this paragraph is an immediate child of <see cref="T:Aspose.Words.Tables.Cell" />
    ///  ; false otherwise.
    ///</summary>
    property IsInCell: Boolean read get_IsInCell;
    ///<summary>
    ///  True if this paragraph is the last paragraph in a <see cref="T:Aspose.Words.Tables.Cell" />
    ///  ; false otherwise.
    ///</summary>
    property IsEndOfCell: Boolean read get_IsEndOfCell;
    ///<summary>
    ///  True if this paragraph break is a Style Separator. A style separator allows one
    ///  paragraph to consist of parts that have different paragraph styles.
    ///</summary>
    property BreakIsStyleSeparator: Boolean read get_BreakIsStyleSeparator;
    ///<summary>
    ///  True if this paragraph is the last paragraph in the <b>Body</b>
    ///  (main text story) of a <b>Section</b>
    ///  ; false otherwise.
    ///</summary>
    property IsEndOfSection: Boolean read get_IsEndOfSection;
    ///<summary>
    ///  True if this paragraph is the last paragraph in the <b>HeaderFooter</b>
    ///  (main text story) of a <b>Section</b>
    ///  ; false otherwise.
    ///</summary>
    property IsEndOfHeaderFooter: Boolean read get_IsEndOfHeaderFooter;
    ///<summary>
    ///  True if this paragraph is the last paragraph in the last section of the document.
    ///</summary>
    property IsEndOfDocument: Boolean read get_IsEndOfDocument;
    ///<summary>
    ///  Provides access to the paragraph formatting properties.
    ///</summary>
    property ParagraphFormat: DNParagraphFormat read get_ParagraphFormat;
    ///<summary>
    ///  Provides access to the list formatting properties of the paragraph.
    ///</summary>
    property ListFormat: DNListFormat read get_ListFormat;
    ///<summary>
    ///  Provides access to the paragraph formatting properties.
    ///</summary>
    property FrameFormat: DNFrameFormat read get_FrameFormat;
    ///<summary>
    ///  Gets a <see cref="P:Aspose.Words.Paragraph.ListLabel" />
    ///  object that provides access to list numbering value and formatting
    ///  for this paragraph.
    ///</summary>
    property ListLabel: DNListLabel read get_ListLabel;
    ///<summary>
    ///  Provides access to the typed collection of pieces of text inside the paragraph.
    ///</summary>
    property Runs: DNRunCollection read get_Runs;
    ///<summary>
    ///  Provides access to the font formatting of the paragraph break character.
    ///</summary>
    property ParagraphBreakFont: DNFont read get_ParagraphBreakFont;
    ///<summary>
    ///  Returns true if this object was inserted in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    ///<summary>
    ///  Returns true if this object was deleted in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    ///<summary>
    ///  Returns <b>true</b>
    ///  if this object was moved (deleted) in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    ///<summary>
    ///  Returns <b>true</b>
    ///  if this object was moved (inserted) in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    ///<summary>
    ///  Returns true if formatting of the object was changed in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsFormatRevision: Boolean read get_IsFormatRevision;
    ///<summary>
    ///  True when the paragraph is an item in a bulleted or numbered list in original revision.
    ///</summary>
    property IsListItem: Boolean read get_IsListItem;
    ///<summary>
    ///  Returns true as this node can have child nodes.
    ///</summary>
    property IsComposite: Boolean read get_IsComposite;
    ///<summary>
    ///  Returns true if this node has any child nodes.
    ///</summary>
    property HasChildNodes: Boolean read get_HasChildNodes;
    ///<summary>
    ///  Gets all immediate child nodes of this node.
    ///</summary>
    ///<remarks><p>Note, <see cref="P:Aspose.Words.CompositeNode.ChildNodes" />
    ///  is equivalent to calling <c>GetChildNodes(NodeType.Any, false)</c>
    ///  and creates and returns a new collection every time it is accessed.</p>
    ///  <p>If there are no child nodes, this property returns an empty collection.</p>
    ///</remarks>
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    ///<summary>
    ///  Gets the first child of the node.
    ///</summary>
    ///<remarks>
    ///  If there is no first child node, a null is returned.
    ///</remarks>
    property FirstChild: DNNode read get_FirstChild;
    ///<summary>
    ///  Gets the last child of the node.
    ///</summary>
    ///<remarks>
    ///  If there is no last child node, a null is returned.
    ///</remarks>
    property LastChild: DNNode read get_LastChild;
    ///<summary>
    ///  Gets the number of immediate children of this node.
    ///</summary>
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNParagraph = class(TDNGenericImport<DNParagraphClass, DNParagraph>) end;

  //-------------namespace: Aspose.Words----------------
  DNSectionClass = interface(DNCompositeNodeClass)
  ['{A669DD85-73B6-5801-A7C7-636CD9E340D1}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the Section class.
    ///</summary>
    ///<remarks><p>When the section is created, it belongs to the specified document, but is not
    ///  yet part of the document and <b>ParentNode</b>
    ///  is null.</p>
    ///  <p>To include Section into a document use Document.InsertAfter, Document.InsertBefore
    ///  or Sections.Add and Section.Insert methods.</p>
    ///</remarks>
    ///  <param name="doc">The owner document.</param>
    {class} function init(doc: DNDocumentBase): DNSection;

  end;

  ///<summary>
  ///  Represents a single section in a document.
  ///</summary>
  ///<remarks><p><b>Section</b>
  ///  can have one <see cref="P:Aspose.Words.Section.Body" />
  ///  and maximum one <see cref="T:Aspose.Words.HeaderFooter" />
  ///  of each <see cref="T:Aspose.Words.HeaderFooterType" />
  ///  . <b>Body</b>
  ///  and <b>HeaderFooter</b>
  ///  nodes
  ///  can be in any order inside <b>Section</b>
  ///  .</p>
  ///  <p>A minimal valid section needs to have <b>Body</b>
  ///  with one <b>Paragraph</b>
  ///  .</p>
  ///  <p>Each section has its own set of properties that specify page size, orientation, margins etc.</p>
  ///  <p>You can create a copy of a section using <see cref="M:Aspose.Words.Node.Clone(System.Boolean)" />
  ///  . The copy can be inserted into
  ///  the same or different document.</p>
  ///  <p>To add, insert or remove a whole section including section break and
  ///  section properties use methods of the <b>Sections</b>
  ///  object.</p>
  ///  <p>To copy and insert just content of the section excluding the section break
  ///  and section properties use <b>AppendContent</b>
  ///  and <b>PrependContent</b>
  ///  methods.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.Section')]
  DNSection = interface(DNCompositeNode)
  ['{E6FD02C8-94DD-3784-AB78-FC147DA02805}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_Body: DNBody;
    function get_HeadersFooters: DNHeaderFooterCollection;
    function get_PageSetup: DNPageSetup;
    function get_ProtectedForForms: Boolean;
    procedure set_ProtectedForForms(value: Boolean);
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Creates a duplicate of this section.
    ///</summary>
    ///<dev>Kept to remain compatible with the old API.</dev>
    function Clone: DNSection; overload;
    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the nodes.</param>
    ///<returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
    ///<remarks>
    ///  Calls DocumentVisitor.VisitSectionStart, then calls Accept for all child nodes of the section
    ///  and calls DocumentVisitor.VisitSectionEnd at the end.
    ///</remarks>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Inserts a copy of content of the source section at the beginning of this section.
    ///</summary>
    ///<remarks><p>Only content of <see cref="P:Aspose.Words.Section.Body" />
    ///  of the source section is copied, page setup,
    ///  headers and footers are not copied.</p>
    ///  <p>The nodes are automatically imported if the source section belongs to a different document.</p>
    ///  <p>No new section is created in the destination document.</p>
    ///</remarks>
    ///  <param name="sourceSection">The section to copy content from.</param>
    procedure PrependContent(sourceSection: DNSection);
    ///<summary>
    ///  Inserts a copy of content of the source section at the end of this section.
    ///</summary>
    ///<remarks><p>Only content of <see cref="P:Aspose.Words.Section.Body" />
    ///  of the source section is copied, page setup,
    ///  headers and footers are not copied.</p>
    ///  <p>The nodes are automatically imported if the source section belongs to a different document.</p>
    ///  <p>No new section is created in the destination document.</p>
    ///</remarks>
    ///  <param name="sourceSection">The section to copy content from.</param>
    procedure AppendContent(sourceSection: DNSection);
    ///<summary>
    ///  Clears the section.
    ///</summary>
    ///<remarks><p>The text of <see cref="P:Aspose.Words.Section.Body" />
    ///  is cleared, only one empty paragraph is left that represents the section break.</p>
    ///  <p>The text of all headers and footers is cleared, but <see cref="T:Aspose.Words.HeaderFooter" />
    ///  objects themselves are not removed.</p>
    ///</remarks>
    procedure ClearContent;
    ///<summary>
    ///  Clears the headers and footers of this section.
    ///</summary>
    ///<remarks><p>The text of all headers and footers is cleared, but <see cref="T:Aspose.Words.HeaderFooter" />
    ///  objects themselves are not removed.</p>
    ///  <p>This makes headers and footers of this section linked to headers and footers of the previous section.</p>
    ///</remarks>
    procedure ClearHeadersFooters;
    ///<summary>
    ///  Deletes all shapes (drawing objects) from the headers and footers of this section.
    ///</summary>
    procedure DeleteHeaderFooterShapes;
    ///<summary>
    ///  Ensures that the section has Body with one Paragraph.
    ///</summary>
    procedure EnsureMinimum;
    ///<summary>
    ///  Gets the text of this node and of all its children.
    ///</summary>
    ///<remarks><p>The returned string includes all control and special characters as described in <see cref="T:Aspose.Words.ControlChar" />
    ///  .</p>
    ///</remarks>
    function GetText: string;
    ///<overloads>Returns a collection of child nodes that match the specified type.</overloads><summary>
    ///  Returns a live collection of child nodes that match the specified type.
    ///</summary>
    ///<remarks><p>The collection of nodes returned by this method is always live.</p>
    ///<remarks><p>A live collection is always in sync with the document. For example, if you
    ///  selected all sections in a document and enumerate through the collection
    ///  deleting the sections, the section is removed from the collection immediately
    ///  when it is removed from the document.</p>
    ///</remarks>
    ///</remarks>
    ///  <param name="nodeType">Specifies the type of nodes to select.</param>
    ///  <param name="isDeep">True to select from all child nodes recursively.
    ///  False to select only among immediate children. </param>
    ///<returns>A live collection of child nodes of the specified type.</returns>
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    ///<summary>
    ///  Returns an Nth child node that matches the specified type.
    ///</summary>
    ///<remarks><p>If index is out of range, a null is returned.</p>
    ///</remarks>
    ///  <param name="nodeType">Specifies the type of the child node.</param>
    ///  <param name="index">Zero based index of the child node to select.
    ///  Negative indexes are also allowed and indicate access from the end,
    ///  that is -1 means the last node.</param>
    ///  <param name="isDeep">True to select from all child nodes recursively.
    ///  False to select only among immediate children. See remarks for more info.</param>
    ///<returns>The child node that matches the criteria or null if no matching node is found.</returns>
    ///<remarks>Note that markup nodes (<see cref="F:Aspose.Words.NodeType.StructuredDocumentTag" />
    ///  and <see cref="F:Aspose.Words.NodeType.SmartTag" />
    ///  )
    ///  are traversed even when isDeep = false and GetChild is invoked for non-markup node type. For example if the first run in a para
    ///  is wrapped in a StructuredDocumentTag, it will still be returned by GetChild(NodeType.Run, 0, false).</remarks>
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    ///<summary>
    ///  Selects a list of nodes matching the XPath expression.
    ///</summary>
    ///<remarks><p>Only expressions with element names are supported at the moment. Expressions
    ///  that use attribute names are not supported.</p>
    ///</remarks>
    ///  <param name="xpath">The XPath expression.</param>
    ///<returns>A list of nodes matching the XPath query.</returns>
    function SelectNodes(xpath: string): DNNodeList;
    ///<summary>
    ///  Selects the first Node that matches the XPath expression.
    ///</summary>
    ///<remarks><p>Only expressions with element names are supported at the moment. Expressions
    ///  that use attribute names are not supported.</p>
    ///</remarks>
    ///  <param name="xpath">The XPath expression.</param>
    ///<returns>The first Node that matches the XPath query or null if no matching node is found.</returns>
    function SelectSingleNode(xpath: string): DNNode;
    ///<summary>
    ///  Provides support for the for each style iteration over the child nodes of this node.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    ///<summary>
    ///  Adds the specified node to the end of the list of child nodes for this node.
    ///</summary>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The node to add.</param>
    ///<returns>The node added.</returns>
    function AppendChild(newChild: DNNode): DNNode;
    ///<summary>
    ///  Adds the specified node to the beginning of the list of child nodes for this node.
    ///</summary>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The node to add.</param>
    ///<returns>The node added.</returns>
    function PrependChild(newChild: DNNode): DNNode;
    ///<summary>
    ///  Inserts the specified node immediately after the specified reference node.
    ///</summary>
    ///<remarks><p>If refChild is null, inserts newChild at the beginning of the list of child nodes.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The Node to insert.</param>
    ///  <param name="refChild">The Node that is the reference node. The newNode is placed after the refNode. </param>
    ///<returns>The inserted node.</returns>
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    ///<summary>
    ///  Inserts the specified node immediately before the specified reference node.
    ///</summary>
    ///<remarks><p>If refChild is null, inserts newChild at the end of the list of child nodes.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The Node to insert.</param>
    ///  <param name="refChild">The Node that is the reference node. The newChild is placed before this node.</param>
    ///<returns>The inserted node.</returns>
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    ///<summary>
    ///  Removes the specified child node.
    ///</summary>
    ///<remarks><p>The parent of oldChild is set to null after the node is removed.</p>
    ///</remarks>
    ///  <param name="oldChild">The node to remove.</param>
    ///<returns>The removed node.</returns>
    function RemoveChild(oldChild: DNNode): DNNode;
    ///<summary>
    ///  Removes all the child nodes of the current node.
    ///</summary>
    procedure RemoveAllChildren;
    ///<summary>
    ///  Removes all <see cref="T:Aspose.Words.Markup.SmartTag" />
    ///  descendant nodes of the current node.
    ///</summary>
    ///<remarks>This method does not remove the content of the smart tags.</remarks>
    procedure RemoveSmartTags;
    ///<summary>
    ///  Returns the index of the specified child node in the child node array.
    ///</summary>
    ///<remarks>
    ///  Returns -1 if the node is not found in the child nodes.
    ///</remarks>
    function IndexOf(child: DNNode): Int32;
    ///<summary>
    ///  Reserved for system use. IXPathNavigable.
    ///</summary>
    function CreateNavigator: DDN.Aspose.Common.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode; overload;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Returns <b>NodeType.Section</b>
    ///  .
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Returns the <b>Body</b>
    ///  child node of the section.
    ///</summary>
    ///<remarks><p><b>Body</b>
    ///  contains main text of the section.</p>
    ///  <p>Returns null if the section does not have a <b>Body</b>
    ///  node among its children.</p>
    ///</remarks>
    property Body: DNBody read get_Body;
    ///<summary>
    ///  Provides access to the headers and footers nodes of the section.
    ///</summary>
    property HeadersFooters: DNHeaderFooterCollection read get_HeadersFooters;
    ///<summary>
    ///  Returns an object that represents page setup and section properties.
    ///</summary>
    property PageSetup: DNPageSetup read get_PageSetup;
    ///<summary>
    ///  True if the section is protected for forms. When a section is protected for forms,
    ///  users can select and modify text only in form fields in Microsoft Word.
    ///</summary>
    property ProtectedForForms: Boolean read get_ProtectedForForms write set_ProtectedForForms;
    ///<summary>
    ///  Returns true as this node can have child nodes.
    ///</summary>
    property IsComposite: Boolean read get_IsComposite;
    ///<summary>
    ///  Returns true if this node has any child nodes.
    ///</summary>
    property HasChildNodes: Boolean read get_HasChildNodes;
    ///<summary>
    ///  Gets all immediate child nodes of this node.
    ///</summary>
    ///<remarks><p>Note, <see cref="P:Aspose.Words.CompositeNode.ChildNodes" />
    ///  is equivalent to calling <c>GetChildNodes(NodeType.Any, false)</c>
    ///  and creates and returns a new collection every time it is accessed.</p>
    ///  <p>If there are no child nodes, this property returns an empty collection.</p>
    ///</remarks>
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    ///<summary>
    ///  Gets the first child of the node.
    ///</summary>
    ///<remarks>
    ///  If there is no first child node, a null is returned.
    ///</remarks>
    property FirstChild: DNNode read get_FirstChild;
    ///<summary>
    ///  Gets the last child of the node.
    ///</summary>
    ///<remarks>
    ///  If there is no last child node, a null is returned.
    ///</remarks>
    property LastChild: DNNode read get_LastChild;
    ///<summary>
    ///  Gets the number of immediate children of this node.
    ///</summary>
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNSection = class(TDNGenericImport<DNSectionClass, DNSection>) end;

  //-------------namespace: Aspose.Words----------------
  DNStoryClass = interface(DNCompositeNodeClass)
  ['{38A5BD53-AF70-548B-8012-94DFD24B3EAE}']
  end;

  ///<summary>
  ///  Base class for elements that contain block-level nodes <see cref="T:Aspose.Words.Paragraph" />
  ///  and <see cref="T:Aspose.Words.Tables.Table" />
  ///  .
  ///</summary>
  ///<remarks><p>Text of a Word document is said to consist of several stories.
  ///  The main text is stored in the main text story represented by <see cref="T:Aspose.Words.Body" />
  ///  ,
  ///  each header and footer is stored in a separate story represented by <see cref="T:Aspose.Words.HeaderFooter" />
  ///  .</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.Story')]
  DNStory = interface(DNCompositeNode)
  ['{08342A10-1618-3B77-9DD9-2CAD04F3551D}']
  { getters & setters } 

    function get_StoryType: DNStoryType;
    function get_FirstParagraph: DNParagraph;
    function get_LastParagraph: DNParagraph;
    function get_Paragraphs: DNParagraphCollection;
    function get_Tables: DNTableCollection;
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_NodeType: DNNodeType;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Deletes all shapes from the text of this story.
    ///</summary>
    procedure DeleteShapes;
    ///<summary>
    ///  A shortcut method that creates a <see cref="T:Aspose.Words.Paragraph" />
    ///  object with optional text and appends it to the end of this object.
    ///</summary>
    ///  <param name="text">The text for the paragraph. Can be null or empty string.</param>
    ///<returns>The newly created and appended paragraph.</returns>
    function AppendParagraph(text: string): DNParagraph;
    ///<summary>
    ///  Gets the text of this node and of all its children.
    ///</summary>
    ///<remarks><p>The returned string includes all control and special characters as described in <see cref="T:Aspose.Words.ControlChar" />
    ///  .</p>
    ///</remarks>
    function GetText: string;
    ///<overloads>Returns a collection of child nodes that match the specified type.</overloads><summary>
    ///  Returns a live collection of child nodes that match the specified type.
    ///</summary>
    ///<remarks><p>The collection of nodes returned by this method is always live.</p>
    ///<remarks><p>A live collection is always in sync with the document. For example, if you
    ///  selected all sections in a document and enumerate through the collection
    ///  deleting the sections, the section is removed from the collection immediately
    ///  when it is removed from the document.</p>
    ///</remarks>
    ///</remarks>
    ///  <param name="nodeType">Specifies the type of nodes to select.</param>
    ///  <param name="isDeep">True to select from all child nodes recursively.
    ///  False to select only among immediate children. </param>
    ///<returns>A live collection of child nodes of the specified type.</returns>
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    ///<summary>
    ///  Returns an Nth child node that matches the specified type.
    ///</summary>
    ///<remarks><p>If index is out of range, a null is returned.</p>
    ///</remarks>
    ///  <param name="nodeType">Specifies the type of the child node.</param>
    ///  <param name="index">Zero based index of the child node to select.
    ///  Negative indexes are also allowed and indicate access from the end,
    ///  that is -1 means the last node.</param>
    ///  <param name="isDeep">True to select from all child nodes recursively.
    ///  False to select only among immediate children. See remarks for more info.</param>
    ///<returns>The child node that matches the criteria or null if no matching node is found.</returns>
    ///<remarks>Note that markup nodes (<see cref="F:Aspose.Words.NodeType.StructuredDocumentTag" />
    ///  and <see cref="F:Aspose.Words.NodeType.SmartTag" />
    ///  )
    ///  are traversed even when isDeep = false and GetChild is invoked for non-markup node type. For example if the first run in a para
    ///  is wrapped in a StructuredDocumentTag, it will still be returned by GetChild(NodeType.Run, 0, false).</remarks>
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    ///<summary>
    ///  Selects a list of nodes matching the XPath expression.
    ///</summary>
    ///<remarks><p>Only expressions with element names are supported at the moment. Expressions
    ///  that use attribute names are not supported.</p>
    ///</remarks>
    ///  <param name="xpath">The XPath expression.</param>
    ///<returns>A list of nodes matching the XPath query.</returns>
    function SelectNodes(xpath: string): DNNodeList;
    ///<summary>
    ///  Selects the first Node that matches the XPath expression.
    ///</summary>
    ///<remarks><p>Only expressions with element names are supported at the moment. Expressions
    ///  that use attribute names are not supported.</p>
    ///</remarks>
    ///  <param name="xpath">The XPath expression.</param>
    ///<returns>The first Node that matches the XPath query or null if no matching node is found.</returns>
    function SelectSingleNode(xpath: string): DNNode;
    ///<summary>
    ///  Provides support for the for each style iteration over the child nodes of this node.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    ///<summary>
    ///  Adds the specified node to the end of the list of child nodes for this node.
    ///</summary>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The node to add.</param>
    ///<returns>The node added.</returns>
    function AppendChild(newChild: DNNode): DNNode;
    ///<summary>
    ///  Adds the specified node to the beginning of the list of child nodes for this node.
    ///</summary>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The node to add.</param>
    ///<returns>The node added.</returns>
    function PrependChild(newChild: DNNode): DNNode;
    ///<summary>
    ///  Inserts the specified node immediately after the specified reference node.
    ///</summary>
    ///<remarks><p>If refChild is null, inserts newChild at the beginning of the list of child nodes.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The Node to insert.</param>
    ///  <param name="refChild">The Node that is the reference node. The newNode is placed after the refNode. </param>
    ///<returns>The inserted node.</returns>
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    ///<summary>
    ///  Inserts the specified node immediately before the specified reference node.
    ///</summary>
    ///<remarks><p>If refChild is null, inserts newChild at the end of the list of child nodes.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The Node to insert.</param>
    ///  <param name="refChild">The Node that is the reference node. The newChild is placed before this node.</param>
    ///<returns>The inserted node.</returns>
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    ///<summary>
    ///  Removes the specified child node.
    ///</summary>
    ///<remarks><p>The parent of oldChild is set to null after the node is removed.</p>
    ///</remarks>
    ///  <param name="oldChild">The node to remove.</param>
    ///<returns>The removed node.</returns>
    function RemoveChild(oldChild: DNNode): DNNode;
    ///<summary>
    ///  Removes all the child nodes of the current node.
    ///</summary>
    procedure RemoveAllChildren;
    ///<summary>
    ///  Removes all <see cref="T:Aspose.Words.Markup.SmartTag" />
    ///  descendant nodes of the current node.
    ///</summary>
    ///<remarks>This method does not remove the content of the smart tags.</remarks>
    procedure RemoveSmartTags;
    ///<summary>
    ///  Returns the index of the specified child node in the child node array.
    ///</summary>
    ///<remarks>
    ///  Returns -1 if the node is not found in the child nodes.
    ///</remarks>
    function IndexOf(child: DNNode): Int32;
    ///<summary>
    ///  Reserved for system use. IXPathNavigable.
    ///</summary>
    function CreateNavigator: DDN.Aspose.Common.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function Accept(visitor: DNDocumentVisitor): Boolean;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Gets the type of this story.
    ///</summary>
    property StoryType: DNStoryType read get_StoryType;
    ///<summary>
    ///  Gets the first paragraph in the story.
    ///</summary>
    property FirstParagraph: DNParagraph read get_FirstParagraph;
    ///<summary>
    ///  Gets the last paragraph in the story.
    ///</summary>
    property LastParagraph: DNParagraph read get_LastParagraph;
    ///<summary>
    ///  Gets a collection of paragraphs that are immediate children of the story.
    ///</summary>
    property Paragraphs: DNParagraphCollection read get_Paragraphs;
    ///<summary>
    ///  Gets a collection of tables that are immediate children of the story.
    ///</summary>
    property Tables: DNTableCollection read get_Tables;
    ///<summary>
    ///  Returns true as this node can have child nodes.
    ///</summary>
    property IsComposite: Boolean read get_IsComposite;
    ///<summary>
    ///  Returns true if this node has any child nodes.
    ///</summary>
    property HasChildNodes: Boolean read get_HasChildNodes;
    ///<summary>
    ///  Gets all immediate child nodes of this node.
    ///</summary>
    ///<remarks><p>Note, <see cref="P:Aspose.Words.CompositeNode.ChildNodes" />
    ///  is equivalent to calling <c>GetChildNodes(NodeType.Any, false)</c>
    ///  and creates and returns a new collection every time it is accessed.</p>
    ///  <p>If there are no child nodes, this property returns an empty collection.</p>
    ///</remarks>
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    ///<summary>
    ///  Gets the first child of the node.
    ///</summary>
    ///<remarks>
    ///  If there is no first child node, a null is returned.
    ///</remarks>
    property FirstChild: DNNode read get_FirstChild;
    ///<summary>
    ///  Gets the last child of the node.
    ///</summary>
    ///<remarks>
    ///  If there is no last child node, a null is returned.
    ///</remarks>
    property LastChild: DNNode read get_LastChild;
    ///<summary>
    ///  Gets the number of immediate children of this node.
    ///</summary>
    property Count: Int32 read get_Count;
    property NodeType: DNNodeType read get_NodeType;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNStory = class(TDNGenericImport<DNStoryClass, DNStory>) end;

  //-------------namespace: Aspose.Words----------------
  DNBodyClass = interface(DNStoryClass)
  ['{1F5E608B-C732-507E-B81C-F51EDE3921DB}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <b>Body</b>
    ///  class.
    ///</summary>
    ///<remarks><p>When <b>Body</b>
    ///  is created, it belongs to the specified document, but is not
    ///  yet part of the document and <b>ParentNode</b>
    ///  is null.</p>
    ///  <p>To append <b>Body</b>
    ///  to a <b>Section</b>
    ///  use Section.InsertAfter or Section.InsertBefore.</p>
    ///</remarks>
    ///  <param name="doc">The owner document.</param>
    {class} function init(doc: DNDocumentBase): DNBody;

  end;

  ///<summary>
  ///  Represents a container for the main text of a section.
  ///</summary>
  ///<remarks><p><b>Body</b>
  ///  can contain <b>Paragraph</b>
  ///  and <b>Table</b>
  ///  child nodes.</p>
  ///  <p><b>Body</b>
  ///  is a section-level node and can only be a child of <b>Section</b>
  ///  .
  ///  There can only be one <b>Body</b>
  ///  in a <b>Section</b>
  ///  .</p>
  ///  <p>A minimal valid <b>Body</b>
  ///  needs to contain at least one <b>Paragraph</b>
  ///  .</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.Body')]
  DNBody = interface(DNStory)
  ['{48FABDF0-319D-3714-AEB6-1D21F0F5040F}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_ParentSection: DNSection;
    function get_StoryType: DNStoryType;
    function get_FirstParagraph: DNParagraph;
    function get_LastParagraph: DNParagraph;
    function get_Paragraphs: DNParagraphCollection;
    function get_Tables: DNTableCollection;
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the nodes.</param>
    ///<returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
    ///<remarks>
    ///  Calls DocumentVisitor.VisitBodyStart, then calls Accept for all child nodes of the section
    ///  and calls DocumentVisitor.VisitBodyEnd at the end.
    ///</remarks>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  If the last child is not a paragraph, creates and appends one empty paragraph.
    ///</summary>
    procedure EnsureMinimum;
    ///<summary>
    ///  Deletes all shapes from the text of this story.
    ///</summary>
    procedure DeleteShapes;
    ///<summary>
    ///  A shortcut method that creates a <see cref="T:Aspose.Words.Paragraph" />
    ///  object with optional text and appends it to the end of this object.
    ///</summary>
    ///  <param name="text">The text for the paragraph. Can be null or empty string.</param>
    ///<returns>The newly created and appended paragraph.</returns>
    function AppendParagraph(text: string): DNParagraph;
    function GetText: string;
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    function SelectNodes(xpath: string): DNNodeList;
    function SelectSingleNode(xpath: string): DNNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    function PrependChild(newChild: DNNode): DNNode;
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    function RemoveChild(oldChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSmartTags;
    function IndexOf(child: DNNode): Int32;
    function CreateNavigator: DDN.Aspose.Common.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Returns <b>NodeType.Body</b>
    ///  .
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Gets the parent section of this story.
    ///</summary>
    ///<remarks><p><b>ParentSection</b>
    ///  is equivalent to <c>(Section)ParentNode</c>.</p>
    ///</remarks>
    property ParentSection: DNSection read get_ParentSection;
    ///<summary>
    ///  Gets the type of this story.
    ///</summary>
    property StoryType: DNStoryType read get_StoryType;
    ///<summary>
    ///  Gets the first paragraph in the story.
    ///</summary>
    property FirstParagraph: DNParagraph read get_FirstParagraph;
    ///<summary>
    ///  Gets the last paragraph in the story.
    ///</summary>
    property LastParagraph: DNParagraph read get_LastParagraph;
    ///<summary>
    ///  Gets a collection of paragraphs that are immediate children of the story.
    ///</summary>
    property Paragraphs: DNParagraphCollection read get_Paragraphs;
    ///<summary>
    ///  Gets a collection of tables that are immediate children of the story.
    ///</summary>
    property Tables: DNTableCollection read get_Tables;
    property IsComposite: Boolean read get_IsComposite;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property FirstChild: DNNode read get_FirstChild;
    property LastChild: DNNode read get_LastChild;
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNBody = class(TDNGenericImport<DNBodyClass, DNBody>) end;

  //-------------namespace: Aspose.Words----------------
  DNHeaderFooterClass = interface(DNStoryClass)
  ['{D495DD52-C917-5F94-BF65-1D7643E24E6F}']
  { constructors } 

    ///<summary>
    ///  Creates a new header or footer of the specified type.
    ///</summary>
    ///<remarks><p>When <b>HeaderFooter</b>
    ///  is created, it belongs to the specified document, but is not
    ///  yet part of the document and <b>ParentNode</b>
    ///  is null.</p>
    ///  <p>To append <b>HeaderFooter</b>
    ///  to a <b>Section</b>
    ///  use Section.InsertAfter, Section.InsertBefore,
    ///  HeadersFooters.Add or HeadersFooters.Insert.</p>
    ///</remarks>
    ///  <param name="doc">The owner document.</param>
    ///  <param name="headerFooterType">A <see cref="P:Aspose.Words.HeaderFooter.HeaderFooterType" />
    ///  value
    ///  that specifies the type of the header or footer.</param>
    {class} function init(doc: DNDocumentBase; headerFooterType: DNHeaderFooterType): DNHeaderFooter;

  end;

  ///<summary>
  ///  Represents a container for the header or footer text of a section.
  ///</summary>
  ///<remarks><p><b>HeaderFooter</b>
  ///  can contain <b>Paragraph</b>
  ///  and <b>Table</b>
  ///  child nodes.</p>
  ///  <p><b>HeaderFooter</b>
  ///  is a section-level node and can only be a child of <b>Section</b>
  ///  .
  ///  There can only be one <b>HeaderFooter</b>
  ///  or each <see cref="P:Aspose.Words.HeaderFooter.HeaderFooterType" />
  ///  in a <b>Section</b>
  ///  .</p>
  ///  <p>If <b>Section</b>
  ///  does not have a <b>HeaderFooter</b>
  ///  of a specific type or
  ///  the <b>HeaderFooter</b>
  ///  has no child nodes, this header/footer is considered linked to
  ///  the header/footer of the same type of the previous section in Microsoft Word.</p>
  ///  <p>When <b>HeaderFooter</b>
  ///  contains at least one <b>Paragraph</b>
  ///  , it is no longer
  ///  considered linked to previous in Microsoft Word.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.HeaderFooter')]
  DNHeaderFooter = interface(DNStory)
  ['{BDC9F3D3-A70B-3832-8F60-5368EDA45E37}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_ParentSection: DNSection;
    function get_HeaderFooterType: DNHeaderFooterType;
    function get_IsHeader: Boolean;
    function get_IsLinkedToPrevious: Boolean;
    procedure set_IsLinkedToPrevious(value: Boolean);
    function get_StoryType: DNStoryType;
    function get_FirstParagraph: DNParagraph;
    function get_LastParagraph: DNParagraph;
    function get_Paragraphs: DNParagraphCollection;
    function get_Tables: DNTableCollection;
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the nodes.</param>
    ///<returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
    ///<remarks>
    ///  Calls DocumentVisitor.VisitHeaderFooterStart, then calls Accept for all child nodes of the section
    ///  and calls DocumentVisitor.VisitHeaderFooterEnd at the end.
    ///</remarks>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Deletes all shapes from the text of this story.
    ///</summary>
    procedure DeleteShapes;
    ///<summary>
    ///  A shortcut method that creates a <see cref="T:Aspose.Words.Paragraph" />
    ///  object with optional text and appends it to the end of this object.
    ///</summary>
    ///  <param name="text">The text for the paragraph. Can be null or empty string.</param>
    ///<returns>The newly created and appended paragraph.</returns>
    function AppendParagraph(text: string): DNParagraph;
    function GetText: string;
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    function SelectNodes(xpath: string): DNNodeList;
    function SelectSingleNode(xpath: string): DNNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function AppendChild(newChild: DNNode): DNNode;
    function PrependChild(newChild: DNNode): DNNode;
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    function RemoveChild(oldChild: DNNode): DNNode;
    procedure RemoveAllChildren;
    procedure RemoveSmartTags;
    function IndexOf(child: DNNode): Int32;
    function CreateNavigator: DDN.Aspose.Common.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Returns <b>NodeType.HeaderFooter</b>
    ///  .
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Gets the parent section of this story.
    ///</summary>
    ///<remarks><p><b>ParentSection</b>
    ///  is equivalent to <c>(Section)ParentNode</c>.</p>
    ///</remarks>
    property ParentSection: DNSection read get_ParentSection;
    ///<summary>
    ///  Gets the type of this header/footer.
    ///</summary>
    property HeaderFooterType: DNHeaderFooterType read get_HeaderFooterType;
    ///<summary>
    ///  True if this <b>HeaderFooter</b>
    ///  object is a header.
    ///</summary>
    property IsHeader: Boolean read get_IsHeader;
    ///<summary>
    ///  True if this header or footer is linked to the corresponding header or footer
    ///  in the previous section.
    ///</summary>
    ///<remarks><p>Default is true.</p>
    ///  <p>Note, when your link a header or footer, its contents is cleared.</p>
    ///</remarks>
    property IsLinkedToPrevious: Boolean read get_IsLinkedToPrevious write set_IsLinkedToPrevious;
    ///<summary>
    ///  Gets the type of this story.
    ///</summary>
    property StoryType: DNStoryType read get_StoryType;
    ///<summary>
    ///  Gets the first paragraph in the story.
    ///</summary>
    property FirstParagraph: DNParagraph read get_FirstParagraph;
    ///<summary>
    ///  Gets the last paragraph in the story.
    ///</summary>
    property LastParagraph: DNParagraph read get_LastParagraph;
    ///<summary>
    ///  Gets a collection of paragraphs that are immediate children of the story.
    ///</summary>
    property Paragraphs: DNParagraphCollection read get_Paragraphs;
    ///<summary>
    ///  Gets a collection of tables that are immediate children of the story.
    ///</summary>
    property Tables: DNTableCollection read get_Tables;
    property IsComposite: Boolean read get_IsComposite;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    property FirstChild: DNNode read get_FirstChild;
    property LastChild: DNNode read get_LastChild;
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNHeaderFooter = class(TDNGenericImport<DNHeaderFooterClass, DNHeaderFooter>) end;

  //-------------namespace: Aspose.Words.Tables----------------
  DNCellClass = interface(DNCompositeNodeClass)
  ['{8C62A7BC-31C5-5CC4-8A92-624C53417AC7}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <b>Cell</b>
    ///  class.
    ///</summary>
    ///<remarks><p>When <b>Cell</b>
    ///  is created, it belongs to the specified document, but is not
    ///  yet part of the document and <b>ParentNode</b>
    ///  is null.</p>
    ///  <p>To append <b>Cell</b>
    ///  to the document use InsertAfter or InsertBefore
    ///  on the row where you want the cell inserted.</p>
    ///</remarks>
    ///  <param name="doc">The owner document.</param>
    {class} function init(doc: DNDocumentBase): DNCell;

  end;

  ///<summary>
  ///  Represents a table cell.
  ///</summary>
  ///<remarks><p><b>Cell</b>
  ///  can only be a child of a <b>Row</b>
  ///  .</p>
  ///  <p><b>Cell</b>
  ///  can contain block-level nodes <b>Paragraph</b>
  ///  and <b>Table</b>
  ///  .</p>
  ///  <p>A minimal valid cell needs to have at least one <b>Paragraph</b>
  ///  .</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.Tables.Cell')]
  DNCell = interface(DNCompositeNode)
  ['{554FC14F-8EE5-377A-BC5B-EFFC006E6DF5}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_ParentRow: DNRow;
    function get_FirstParagraph: DNParagraph;
    function get_LastParagraph: DNParagraph;
    function get_IsFirstCell: Boolean;
    function get_IsLastCell: Boolean;
    function get_CellFormat: DNCellFormat;
    function get_Paragraphs: DNParagraphCollection;
    function get_Tables: DNTableCollection;
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the nodes.</param>
    ///<returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
    ///<remarks>
    ///  Calls DocumentVisitor.VisitCellStart, then calls Accept for all child nodes of the section
    ///  and calls DocumentVisitor.VisitCellEnd at the end.
    ///</remarks>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  If the last child is not a paragraph, creates and appends one empty paragraph.
    ///</summary>
    procedure EnsureMinimum;
    ///<summary>
    ///  Gets the text of this node and of all its children.
    ///</summary>
    ///<remarks><p>The returned string includes all control and special characters as described in <see cref="T:Aspose.Words.ControlChar" />
    ///  .</p>
    ///</remarks>
    function GetText: string;
    ///<overloads>Returns a collection of child nodes that match the specified type.</overloads><summary>
    ///  Returns a live collection of child nodes that match the specified type.
    ///</summary>
    ///<remarks><p>The collection of nodes returned by this method is always live.</p>
    ///<remarks><p>A live collection is always in sync with the document. For example, if you
    ///  selected all sections in a document and enumerate through the collection
    ///  deleting the sections, the section is removed from the collection immediately
    ///  when it is removed from the document.</p>
    ///</remarks>
    ///</remarks>
    ///  <param name="nodeType">Specifies the type of nodes to select.</param>
    ///  <param name="isDeep">True to select from all child nodes recursively.
    ///  False to select only among immediate children. </param>
    ///<returns>A live collection of child nodes of the specified type.</returns>
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    ///<summary>
    ///  Returns an Nth child node that matches the specified type.
    ///</summary>
    ///<remarks><p>If index is out of range, a null is returned.</p>
    ///</remarks>
    ///  <param name="nodeType">Specifies the type of the child node.</param>
    ///  <param name="index">Zero based index of the child node to select.
    ///  Negative indexes are also allowed and indicate access from the end,
    ///  that is -1 means the last node.</param>
    ///  <param name="isDeep">True to select from all child nodes recursively.
    ///  False to select only among immediate children. See remarks for more info.</param>
    ///<returns>The child node that matches the criteria or null if no matching node is found.</returns>
    ///<remarks>Note that markup nodes (<see cref="F:Aspose.Words.NodeType.StructuredDocumentTag" />
    ///  and <see cref="F:Aspose.Words.NodeType.SmartTag" />
    ///  )
    ///  are traversed even when isDeep = false and GetChild is invoked for non-markup node type. For example if the first run in a para
    ///  is wrapped in a StructuredDocumentTag, it will still be returned by GetChild(NodeType.Run, 0, false).</remarks>
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    ///<summary>
    ///  Selects a list of nodes matching the XPath expression.
    ///</summary>
    ///<remarks><p>Only expressions with element names are supported at the moment. Expressions
    ///  that use attribute names are not supported.</p>
    ///</remarks>
    ///  <param name="xpath">The XPath expression.</param>
    ///<returns>A list of nodes matching the XPath query.</returns>
    function SelectNodes(xpath: string): DNNodeList;
    ///<summary>
    ///  Selects the first Node that matches the XPath expression.
    ///</summary>
    ///<remarks><p>Only expressions with element names are supported at the moment. Expressions
    ///  that use attribute names are not supported.</p>
    ///</remarks>
    ///  <param name="xpath">The XPath expression.</param>
    ///<returns>The first Node that matches the XPath query or null if no matching node is found.</returns>
    function SelectSingleNode(xpath: string): DNNode;
    ///<summary>
    ///  Provides support for the for each style iteration over the child nodes of this node.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    ///<summary>
    ///  Adds the specified node to the end of the list of child nodes for this node.
    ///</summary>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The node to add.</param>
    ///<returns>The node added.</returns>
    function AppendChild(newChild: DNNode): DNNode;
    ///<summary>
    ///  Adds the specified node to the beginning of the list of child nodes for this node.
    ///</summary>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The node to add.</param>
    ///<returns>The node added.</returns>
    function PrependChild(newChild: DNNode): DNNode;
    ///<summary>
    ///  Inserts the specified node immediately after the specified reference node.
    ///</summary>
    ///<remarks><p>If refChild is null, inserts newChild at the beginning of the list of child nodes.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The Node to insert.</param>
    ///  <param name="refChild">The Node that is the reference node. The newNode is placed after the refNode. </param>
    ///<returns>The inserted node.</returns>
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    ///<summary>
    ///  Inserts the specified node immediately before the specified reference node.
    ///</summary>
    ///<remarks><p>If refChild is null, inserts newChild at the end of the list of child nodes.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The Node to insert.</param>
    ///  <param name="refChild">The Node that is the reference node. The newChild is placed before this node.</param>
    ///<returns>The inserted node.</returns>
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    ///<summary>
    ///  Removes the specified child node.
    ///</summary>
    ///<remarks><p>The parent of oldChild is set to null after the node is removed.</p>
    ///</remarks>
    ///  <param name="oldChild">The node to remove.</param>
    ///<returns>The removed node.</returns>
    function RemoveChild(oldChild: DNNode): DNNode;
    ///<summary>
    ///  Removes all the child nodes of the current node.
    ///</summary>
    procedure RemoveAllChildren;
    ///<summary>
    ///  Removes all <see cref="T:Aspose.Words.Markup.SmartTag" />
    ///  descendant nodes of the current node.
    ///</summary>
    ///<remarks>This method does not remove the content of the smart tags.</remarks>
    procedure RemoveSmartTags;
    ///<summary>
    ///  Returns the index of the specified child node in the child node array.
    ///</summary>
    ///<remarks>
    ///  Returns -1 if the node is not found in the child nodes.
    ///</remarks>
    function IndexOf(child: DNNode): Int32;
    ///<summary>
    ///  Reserved for system use. IXPathNavigable.
    ///</summary>
    function CreateNavigator: DDN.Aspose.Common.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Returns <b>NodeType.Cell</b>
    ///  .
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Returns the parent row of the cell.
    ///</summary>
    ///<remarks>Equivalent to <c>(Row)FirstNonMarkupParentNode</c>.</remarks>
    property ParentRow: DNRow read get_ParentRow;
    ///<summary>
    ///  Gets the first paragraph among the immediate children.
    ///</summary>
    property FirstParagraph: DNParagraph read get_FirstParagraph;
    ///<summary>
    ///  Gets the last paragraph among the immediate children.
    ///</summary>
    property LastParagraph: DNParagraph read get_LastParagraph;
    ///<summary>
    ///  True if this is the first cell inside a row; false otherwise.
    ///</summary>
    property IsFirstCell: Boolean read get_IsFirstCell;
    ///<summary>
    ///  True if this is the last cell inside a row; false otherwise.
    ///</summary>
    property IsLastCell: Boolean read get_IsLastCell;
    ///<summary>
    ///  Provides access to the formatting properties of the cell.
    ///</summary>
    property CellFormat: DNCellFormat read get_CellFormat;
    ///<summary>
    ///  Gets a collection of paragraphs that are immediate children of the cell.
    ///</summary>
    property Paragraphs: DNParagraphCollection read get_Paragraphs;
    ///<summary>
    ///  Gets a collection of tables that are immediate children of the cell.
    ///</summary>
    property Tables: DNTableCollection read get_Tables;
    ///<summary>
    ///  Returns true as this node can have child nodes.
    ///</summary>
    property IsComposite: Boolean read get_IsComposite;
    ///<summary>
    ///  Returns true if this node has any child nodes.
    ///</summary>
    property HasChildNodes: Boolean read get_HasChildNodes;
    ///<summary>
    ///  Gets all immediate child nodes of this node.
    ///</summary>
    ///<remarks><p>Note, <see cref="P:Aspose.Words.CompositeNode.ChildNodes" />
    ///  is equivalent to calling <c>GetChildNodes(NodeType.Any, false)</c>
    ///  and creates and returns a new collection every time it is accessed.</p>
    ///  <p>If there are no child nodes, this property returns an empty collection.</p>
    ///</remarks>
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    ///<summary>
    ///  Gets the first child of the node.
    ///</summary>
    ///<remarks>
    ///  If there is no first child node, a null is returned.
    ///</remarks>
    property FirstChild: DNNode read get_FirstChild;
    ///<summary>
    ///  Gets the last child of the node.
    ///</summary>
    ///<remarks>
    ///  If there is no last child node, a null is returned.
    ///</remarks>
    property LastChild: DNNode read get_LastChild;
    ///<summary>
    ///  Gets the number of immediate children of this node.
    ///</summary>
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNCell = class(TDNGenericImport<DNCellClass, DNCell>) end;

  //-------------namespace: Aspose.Words.Tables----------------
  DNRowClass = interface(DNCompositeNodeClass)
  ['{777A6873-6420-5FAA-A5C2-ADDF6F4A94BB}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <b>Row</b>
    ///  class.
    ///</summary>
    ///<remarks><p>When <b>Row</b>
    ///  is created, it belongs to the specified document, but is not
    ///  yet part of the document and <b>ParentNode</b>
    ///  is null.</p>
    ///  <p>To append <b>Row</b>
    ///  to the document use InsertAfter or InsertBefore
    ///  on the table where you want the row inserted.</p>
    ///</remarks>
    ///  <param name="doc">The owner document.</param>
    {class} function init(doc: DNDocumentBase): DNRow;

  end;

  ///<summary>
  ///  Represents a table row.
  ///</summary>
  ///<remarks><p><b>Row</b>
  ///  can only be a child of a <b>Table</b>
  ///  .</p>
  ///  <p><b>Row</b>
  ///  can contain one or more <b>Cell</b>
  ///  nodes.</p>
  ///  <p>A minimal valid row needs to have at least one <b>Cell</b>
  ///  .</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.Tables.Row')]
  DNRow = interface(DNCompositeNode)
  ['{AB978284-EFFB-3943-8D30-3D38A3FA3F3D}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_ParentTable: DNTable;
    function get_IsFirstRow: Boolean;
    function get_IsLastRow: Boolean;
    function get_FirstCell: DNCell;
    function get_LastCell: DNCell;
    function get_Cells: DNCellCollection;
    function get_RowFormat: DNRowFormat;
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the nodes.</param>
    ///<returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
    ///<remarks>
    ///  Calls DocumentVisitor.VisitRowStart, then calls Accept for all child nodes of the section
    ///  and calls DocumentVisitor.VisitRowEnd at the end.
    ///</remarks>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Gets the text of all cells in this row including the end of row character.
    ///</summary>
    ///<remarks><p>Returns concatenated text of all child nodes with the end of row character
    ///<see cref="F:Aspose.Words.ControlChar.Cell">ControlChar.Cell</see> appended at the end.</p>
    ///  <p>The returned string includes all control and special characters as described in <see cref="T:Aspose.Words.ControlChar" />
    ///  .</p>
    ///</remarks>
    function GetText: string;
    ///<summary>
    ///  If the <b>Row</b>
    ///  has no cells, creates and appends one <b>Cell</b>
    ///  .
    ///</summary>
    procedure EnsureMinimum;
    ///<overloads>Returns a collection of child nodes that match the specified type.</overloads><summary>
    ///  Returns a live collection of child nodes that match the specified type.
    ///</summary>
    ///<remarks><p>The collection of nodes returned by this method is always live.</p>
    ///<remarks><p>A live collection is always in sync with the document. For example, if you
    ///  selected all sections in a document and enumerate through the collection
    ///  deleting the sections, the section is removed from the collection immediately
    ///  when it is removed from the document.</p>
    ///</remarks>
    ///</remarks>
    ///  <param name="nodeType">Specifies the type of nodes to select.</param>
    ///  <param name="isDeep">True to select from all child nodes recursively.
    ///  False to select only among immediate children. </param>
    ///<returns>A live collection of child nodes of the specified type.</returns>
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    ///<summary>
    ///  Returns an Nth child node that matches the specified type.
    ///</summary>
    ///<remarks><p>If index is out of range, a null is returned.</p>
    ///</remarks>
    ///  <param name="nodeType">Specifies the type of the child node.</param>
    ///  <param name="index">Zero based index of the child node to select.
    ///  Negative indexes are also allowed and indicate access from the end,
    ///  that is -1 means the last node.</param>
    ///  <param name="isDeep">True to select from all child nodes recursively.
    ///  False to select only among immediate children. See remarks for more info.</param>
    ///<returns>The child node that matches the criteria or null if no matching node is found.</returns>
    ///<remarks>Note that markup nodes (<see cref="F:Aspose.Words.NodeType.StructuredDocumentTag" />
    ///  and <see cref="F:Aspose.Words.NodeType.SmartTag" />
    ///  )
    ///  are traversed even when isDeep = false and GetChild is invoked for non-markup node type. For example if the first run in a para
    ///  is wrapped in a StructuredDocumentTag, it will still be returned by GetChild(NodeType.Run, 0, false).</remarks>
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    ///<summary>
    ///  Selects a list of nodes matching the XPath expression.
    ///</summary>
    ///<remarks><p>Only expressions with element names are supported at the moment. Expressions
    ///  that use attribute names are not supported.</p>
    ///</remarks>
    ///  <param name="xpath">The XPath expression.</param>
    ///<returns>A list of nodes matching the XPath query.</returns>
    function SelectNodes(xpath: string): DNNodeList;
    ///<summary>
    ///  Selects the first Node that matches the XPath expression.
    ///</summary>
    ///<remarks><p>Only expressions with element names are supported at the moment. Expressions
    ///  that use attribute names are not supported.</p>
    ///</remarks>
    ///  <param name="xpath">The XPath expression.</param>
    ///<returns>The first Node that matches the XPath query or null if no matching node is found.</returns>
    function SelectSingleNode(xpath: string): DNNode;
    ///<summary>
    ///  Provides support for the for each style iteration over the child nodes of this node.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    ///<summary>
    ///  Adds the specified node to the end of the list of child nodes for this node.
    ///</summary>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The node to add.</param>
    ///<returns>The node added.</returns>
    function AppendChild(newChild: DNNode): DNNode;
    ///<summary>
    ///  Adds the specified node to the beginning of the list of child nodes for this node.
    ///</summary>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The node to add.</param>
    ///<returns>The node added.</returns>
    function PrependChild(newChild: DNNode): DNNode;
    ///<summary>
    ///  Inserts the specified node immediately after the specified reference node.
    ///</summary>
    ///<remarks><p>If refChild is null, inserts newChild at the beginning of the list of child nodes.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The Node to insert.</param>
    ///  <param name="refChild">The Node that is the reference node. The newNode is placed after the refNode. </param>
    ///<returns>The inserted node.</returns>
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    ///<summary>
    ///  Inserts the specified node immediately before the specified reference node.
    ///</summary>
    ///<remarks><p>If refChild is null, inserts newChild at the end of the list of child nodes.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The Node to insert.</param>
    ///  <param name="refChild">The Node that is the reference node. The newChild is placed before this node.</param>
    ///<returns>The inserted node.</returns>
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    ///<summary>
    ///  Removes the specified child node.
    ///</summary>
    ///<remarks><p>The parent of oldChild is set to null after the node is removed.</p>
    ///</remarks>
    ///  <param name="oldChild">The node to remove.</param>
    ///<returns>The removed node.</returns>
    function RemoveChild(oldChild: DNNode): DNNode;
    ///<summary>
    ///  Removes all the child nodes of the current node.
    ///</summary>
    procedure RemoveAllChildren;
    ///<summary>
    ///  Removes all <see cref="T:Aspose.Words.Markup.SmartTag" />
    ///  descendant nodes of the current node.
    ///</summary>
    ///<remarks>This method does not remove the content of the smart tags.</remarks>
    procedure RemoveSmartTags;
    ///<summary>
    ///  Returns the index of the specified child node in the child node array.
    ///</summary>
    ///<remarks>
    ///  Returns -1 if the node is not found in the child nodes.
    ///</remarks>
    function IndexOf(child: DNNode): Int32;
    ///<summary>
    ///  Reserved for system use. IXPathNavigable.
    ///</summary>
    function CreateNavigator: DDN.Aspose.Common.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Returns <b>NodeType.Row</b>
    ///  .
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Returns the immediate parent table of the row.
    ///</summary>
    ///<remarks>Equivalent to <c>(Table)FirstNonMarkupParentNode</c>.</remarks>
    property ParentTable: DNTable read get_ParentTable;
    ///<summary>
    ///  True if this is the first row in a table; false otherwise.
    ///</summary>
    property IsFirstRow: Boolean read get_IsFirstRow;
    ///<summary>
    ///  True if this is the last row in a table; false otherwise.
    ///</summary>
    property IsLastRow: Boolean read get_IsLastRow;
    ///<summary>
    ///  Returns the first <b>Cell</b>
    ///  in the row.
    ///</summary>
    property FirstCell: DNCell read get_FirstCell;
    ///<summary>
    ///  Returns the last <b>Cell</b>
    ///  in the row.
    ///</summary>
    property LastCell: DNCell read get_LastCell;
    ///<summary>
    ///  Provides typed access to the <b>Cell</b>
    ///  child nodes of the row.
    ///</summary>
    property Cells: DNCellCollection read get_Cells;
    ///<summary>
    ///  Provides access to the formatting properties of the row.
    ///</summary>
    property RowFormat: DNRowFormat read get_RowFormat;
    ///<summary>
    ///  Returns true as this node can have child nodes.
    ///</summary>
    property IsComposite: Boolean read get_IsComposite;
    ///<summary>
    ///  Returns true if this node has any child nodes.
    ///</summary>
    property HasChildNodes: Boolean read get_HasChildNodes;
    ///<summary>
    ///  Gets all immediate child nodes of this node.
    ///</summary>
    ///<remarks><p>Note, <see cref="P:Aspose.Words.CompositeNode.ChildNodes" />
    ///  is equivalent to calling <c>GetChildNodes(NodeType.Any, false)</c>
    ///  and creates and returns a new collection every time it is accessed.</p>
    ///  <p>If there are no child nodes, this property returns an empty collection.</p>
    ///</remarks>
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    ///<summary>
    ///  Gets the first child of the node.
    ///</summary>
    ///<remarks>
    ///  If there is no first child node, a null is returned.
    ///</remarks>
    property FirstChild: DNNode read get_FirstChild;
    ///<summary>
    ///  Gets the last child of the node.
    ///</summary>
    ///<remarks>
    ///  If there is no last child node, a null is returned.
    ///</remarks>
    property LastChild: DNNode read get_LastChild;
    ///<summary>
    ///  Gets the number of immediate children of this node.
    ///</summary>
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNRow = class(TDNGenericImport<DNRowClass, DNRow>) end;

  //-------------namespace: Aspose.Words.Tables----------------
  DNTableClass = interface(DNCompositeNodeClass)
  ['{027F0284-0F37-5651-9CCB-3222A176DFE1}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <b>Table</b>
    ///  class.
    ///</summary>
    ///<remarks><p>When <b>Table</b>
    ///  is created, it belongs to the specified document, but is not
    ///  yet part of the document and <b>ParentNode</b>
    ///  is null.</p>
    ///  <p>To append <b>Table</b>
    ///  to the document use InsertAfter or InsertBefore
    ///  on the story where you want the table inserted.</p>
    ///</remarks>
    ///  <param name="doc">The owner document.</param>
    {class} function init(doc: DNDocumentBase): DNTable;

  end;

  ///<summary>
  ///  Represents a table in a Word document.
  ///</summary>
  ///<remarks><p><b>Table</b>
  ///  is a block-level node and can be a child of classes derived from <b>Story</b>
  ///  or
  ///<b>InlineStory</b>
  ///  .</p>
  ///  <p><b>Table</b>
  ///  can contain one or more <b>Row</b>
  ///  nodes.</p>
  ///  <p>A minimal valid table needs to have at least one <b>Row</b>
  ///  .</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.Tables.Table')]
  DNTable = interface(DNCompositeNode)
  ['{70231099-6DED-3E46-9E99-2EE4BF1EAE7A}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_FirstRow: DNRow;
    function get_LastRow: DNRow;
    function get_Rows: DNRowCollection;
    function get_Alignment: DNTableAlignment;
    procedure set_Alignment(value: DNTableAlignment);
    function get_AllowAutoFit: Boolean;
    procedure set_AllowAutoFit(value: Boolean);
    function get_PreferredWidth: DNPreferredWidth;
    procedure set_PreferredWidth(value: DNPreferredWidth);
    function get_Bidi: Boolean;
    procedure set_Bidi(value: Boolean);
    function get_LeftPadding: Double;
    procedure set_LeftPadding(value: Double);
    function get_RightPadding: Double;
    procedure set_RightPadding(value: Double);
    function get_TopPadding: Double;
    procedure set_TopPadding(value: Double);
    function get_BottomPadding: Double;
    procedure set_BottomPadding(value: Double);
    function get_CellSpacing: Double;
    procedure set_CellSpacing(value: Double);
    function get_AllowCellSpacing: Boolean;
    procedure set_AllowCellSpacing(value: Boolean);
    function get_LeftIndent: Double;
    procedure set_LeftIndent(value: Double);
    function get_StyleOptions: DNTableStyleOptions;
    procedure set_StyleOptions(value: DNTableStyleOptions);
    function get_Style: DNStyle;
    procedure set_Style(value: DNStyle);
    function get_StyleName: string;
    procedure set_StyleName(value: string);
    function get_StyleIdentifier: DNStyleIdentifier;
    procedure set_StyleIdentifier(value: DNStyleIdentifier);
    function get_TextWrapping: DNTextWrapping;
    procedure set_TextWrapping(value: DNTextWrapping);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Description: string;
    procedure set_Description(value: string);
    function get_DistanceLeft: Double;
    function get_DistanceRight: Double;
    function get_DistanceTop: Double;
    function get_DistanceBottom: Double;
    function get_RelativeHorizontalAlignment: DNHorizontalAlignment;
    procedure set_RelativeHorizontalAlignment(value: DNHorizontalAlignment);
    function get_RelativeVerticalAlignment: DNVerticalAlignment;
    procedure set_RelativeVerticalAlignment(value: DNVerticalAlignment);
    function get_HorizontalAnchor: DNRelativeHorizontalPosition;
    procedure set_HorizontalAnchor(value: DNRelativeHorizontalPosition);
    function get_VerticalAnchor: DNRelativeVerticalPosition;
    procedure set_VerticalAnchor(value: DNRelativeVerticalPosition);
    function get_AbsoluteHorizontalDistance: Double;
    procedure set_AbsoluteHorizontalDistance(value: Double);
    function get_AbsoluteVerticalDistance: Double;
    procedure set_AbsoluteVerticalDistance(value: Double);
    function get_AllowOverlap: Boolean;
    function get_IsComposite: Boolean;
    function get_HasChildNodes: Boolean;
    function get_ChildNodes: DNNodeCollection;
    function get_FirstChild: DNNode;
    function get_LastChild: DNNode;
    function get_Count: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Sets the specified table border to the specified line style, width and color.
    ///</summary>
    ///  <param name="borderType">The table border to change.</param>
    ///  <param name="lineStyle">The line style to apply.</param>
    ///  <param name="lineWidth">The line width to set (in points).</param>
    ///  <param name="color">The color to use for the border.</param>
    ///  <param name="isOverrideCellBorders">When <c>true</c>, causes all existing explicit cell borders to be removed.</param>
    procedure SetBorder(borderType: DNBorderType; lineStyle: DNLineStyle; lineWidth: Double; color: DDN.Aspose.Common.DNColor; isOverrideCellBorders: Boolean);
    ///<summary>
    ///  Removes all table and cell borders on this table.
    ///</summary>
    procedure ClearBorders;
    ///<summary>
    ///  Sets shading to the specified values on all cells in the table.
    ///</summary>
    ///  <param name="texture">The texture to apply.</param>
    ///  <param name="foregroundColor">The color of the texture.</param>
    ///  <param name="backgroundColor">The color of the background fill.</param>
    procedure SetShading(texture: DNTextureIndex; foregroundColor: DDN.Aspose.Common.DNColor; backgroundColor: DDN.Aspose.Common.DNColor);
    ///<summary>
    ///  Removes all shading on the table.
    ///</summary>
    procedure ClearShading;
    ///<summary>
    ///  Resizes the table and cells according to the specified auto fit behavior.
    ///</summary>
    ///<remarks><para>This method mimics the commands available in the Auto Fit menu for a table in Microsoft Word.
    ///  The commands available are "Auto Fit to Contents", "Auto Fit to Window" and "Fixed Column Width". In Microsoft Word
    ///  these commands set relevant table properties and then update the table layout and Aspose.Words does the same for you.</para></remarks>
    ///  <param name="behavior">Specifies how to auto fit the table.</param>
    procedure AutoFit(behavior: DNAutoFitBehavior);
    ///<summary>
    ///  Converts cells horizontally merged by width to cells merged by <see cref="P:Aspose.Words.Tables.CellFormat.HorizontalMerge" />
    ///  .
    ///</summary>
    ///<remark><p>Table cells can be horizontally merged either using merge flags <see cref="P:Aspose.Words.Tables.CellFormat.HorizontalMerge" />
    ///  or using cell width <see cref="P:Aspose.Words.Tables.CellFormat.Width" />
    ///  .</p>
    ///  <p>When table cell is merged by width property <see cref="P:Aspose.Words.Tables.CellFormat.HorizontalMerge" />
    ///  is meaningless but sometimes having merge flags is more convenient way.</p>
    ///  <p>Use this method to transforms table cells horizontally merged by width to cells merged by merge flags.</p>
    ///</remark>
    procedure ConvertToHorizontallyMergedCells;
    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the nodes.</param>
    ///<returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
    ///<remarks>
    ///  Calls DocumentVisitor.VisitTableStart, then calls Accept for all child nodes of the section
    ///  and calls DocumentVisitor.VisitTableEnd at the end.
    ///</remarks>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  If the table has no rows, creates and appends one <b>Row</b>
    ///  .
    ///</summary>
    procedure EnsureMinimum;
    ///<summary>
    ///  Sets all table borders to the specified line style, width and color.
    ///</summary>
    ///  <param name="lineStyle">The line style to apply.</param>
    ///  <param name="lineWidth">The line width to set (in points).</param>
    ///  <param name="color">The color to use for the border.</param>
    procedure SetBorders(lineStyle: DNLineStyle; lineWidth: Double; color: DDN.Aspose.Common.DNColor);
    ///<summary>
    ///  Gets the text of this node and of all its children.
    ///</summary>
    ///<remarks><p>The returned string includes all control and special characters as described in <see cref="T:Aspose.Words.ControlChar" />
    ///  .</p>
    ///</remarks>
    function GetText: string;
    ///<overloads>Returns a collection of child nodes that match the specified type.</overloads><summary>
    ///  Returns a live collection of child nodes that match the specified type.
    ///</summary>
    ///<remarks><p>The collection of nodes returned by this method is always live.</p>
    ///<remarks><p>A live collection is always in sync with the document. For example, if you
    ///  selected all sections in a document and enumerate through the collection
    ///  deleting the sections, the section is removed from the collection immediately
    ///  when it is removed from the document.</p>
    ///</remarks>
    ///</remarks>
    ///  <param name="nodeType">Specifies the type of nodes to select.</param>
    ///  <param name="isDeep">True to select from all child nodes recursively.
    ///  False to select only among immediate children. </param>
    ///<returns>A live collection of child nodes of the specified type.</returns>
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    ///<summary>
    ///  Returns an Nth child node that matches the specified type.
    ///</summary>
    ///<remarks><p>If index is out of range, a null is returned.</p>
    ///</remarks>
    ///  <param name="nodeType">Specifies the type of the child node.</param>
    ///  <param name="index">Zero based index of the child node to select.
    ///  Negative indexes are also allowed and indicate access from the end,
    ///  that is -1 means the last node.</param>
    ///  <param name="isDeep">True to select from all child nodes recursively.
    ///  False to select only among immediate children. See remarks for more info.</param>
    ///<returns>The child node that matches the criteria or null if no matching node is found.</returns>
    ///<remarks>Note that markup nodes (<see cref="F:Aspose.Words.NodeType.StructuredDocumentTag" />
    ///  and <see cref="F:Aspose.Words.NodeType.SmartTag" />
    ///  )
    ///  are traversed even when isDeep = false and GetChild is invoked for non-markup node type. For example if the first run in a para
    ///  is wrapped in a StructuredDocumentTag, it will still be returned by GetChild(NodeType.Run, 0, false).</remarks>
    function GetChild(nodeType: DNNodeType; index: Int32; isDeep: Boolean): DNNode;
    ///<summary>
    ///  Selects a list of nodes matching the XPath expression.
    ///</summary>
    ///<remarks><p>Only expressions with element names are supported at the moment. Expressions
    ///  that use attribute names are not supported.</p>
    ///</remarks>
    ///  <param name="xpath">The XPath expression.</param>
    ///<returns>A list of nodes matching the XPath query.</returns>
    function SelectNodes(xpath: string): DNNodeList;
    ///<summary>
    ///  Selects the first Node that matches the XPath expression.
    ///</summary>
    ///<remarks><p>Only expressions with element names are supported at the moment. Expressions
    ///  that use attribute names are not supported.</p>
    ///</remarks>
    ///  <param name="xpath">The XPath expression.</param>
    ///<returns>The first Node that matches the XPath query or null if no matching node is found.</returns>
    function SelectSingleNode(xpath: string): DNNode;
    ///<summary>
    ///  Provides support for the for each style iteration over the child nodes of this node.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    ///<summary>
    ///  Adds the specified node to the end of the list of child nodes for this node.
    ///</summary>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The node to add.</param>
    ///<returns>The node added.</returns>
    function AppendChild(newChild: DNNode): DNNode;
    ///<summary>
    ///  Adds the specified node to the beginning of the list of child nodes for this node.
    ///</summary>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The node to add.</param>
    ///<returns>The node added.</returns>
    function PrependChild(newChild: DNNode): DNNode;
    ///<summary>
    ///  Inserts the specified node immediately after the specified reference node.
    ///</summary>
    ///<remarks><p>If refChild is null, inserts newChild at the beginning of the list of child nodes.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The Node to insert.</param>
    ///  <param name="refChild">The Node that is the reference node. The newNode is placed after the refNode. </param>
    ///<returns>The inserted node.</returns>
    function InsertAfter(newChild: DNNode; refChild: DNNode): DNNode;
    ///<summary>
    ///  Inserts the specified node immediately before the specified reference node.
    ///</summary>
    ///<remarks><p>If refChild is null, inserts newChild at the end of the list of child nodes.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="newChild">The Node to insert.</param>
    ///  <param name="refChild">The Node that is the reference node. The newChild is placed before this node.</param>
    ///<returns>The inserted node.</returns>
    function InsertBefore(newChild: DNNode; refChild: DNNode): DNNode;
    ///<summary>
    ///  Removes the specified child node.
    ///</summary>
    ///<remarks><p>The parent of oldChild is set to null after the node is removed.</p>
    ///</remarks>
    ///  <param name="oldChild">The node to remove.</param>
    ///<returns>The removed node.</returns>
    function RemoveChild(oldChild: DNNode): DNNode;
    ///<summary>
    ///  Removes all the child nodes of the current node.
    ///</summary>
    procedure RemoveAllChildren;
    ///<summary>
    ///  Removes all <see cref="T:Aspose.Words.Markup.SmartTag" />
    ///  descendant nodes of the current node.
    ///</summary>
    ///<remarks>This method does not remove the content of the smart tags.</remarks>
    procedure RemoveSmartTags;
    ///<summary>
    ///  Returns the index of the specified child node in the child node array.
    ///</summary>
    ///<remarks>
    ///  Returns -1 if the node is not found in the child nodes.
    ///</remarks>
    function IndexOf(child: DNNode): Int32;
    ///<summary>
    ///  Reserved for system use. IXPathNavigable.
    ///</summary>
    function CreateNavigator: DDN.Aspose.Common.DNXPathNavigator;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Returns <b>NodeType.Table</b>
    ///  .
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Returns the first <b>Row</b>
    ///  node in the table.
    ///</summary>
    property FirstRow: DNRow read get_FirstRow;
    ///<summary>
    ///  Returns the last <b>Row</b>
    ///  node in the table.
    ///</summary>
    property LastRow: DNRow read get_LastRow;
    ///<summary>
    ///  Provides typed access to the rows of the table.
    ///</summary>
    property Rows: DNRowCollection read get_Rows;
    ///<summary>
    ///  Specifies how an inline table is aligned in the document.
    ///</summary>
    ///<remarks><para>The default value is <see cref="F:Aspose.Words.Tables.TableAlignment.Left" />
    ///  .</para></remarks>
    property Alignment: DNTableAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  Allows Microsoft Word and Aspose.Words to automatically resize cells in a table to fit their contents.
    ///</summary>
    ///<remarks><para>The default value is <c>true</c>.</para><seealso cref="M:Aspose.Words.Tables.Table.AutoFit(Aspose.Words.Tables.AutoFitBehavior)" />
    ///</remarks>
    property AllowAutoFit: Boolean read get_AllowAutoFit write set_AllowAutoFit;
    ///<summary>
    ///  Gets or sets the table preferred width.
    ///</summary>
    ///<remarks><para>The default value is <see cref="F:Aspose.Words.Tables.PreferredWidth.Auto" />
    ///  .</para></remarks>
    property PreferredWidth: DNPreferredWidth read get_PreferredWidth write set_PreferredWidth;
    ///<summary>
    ///  Gets or sets whether this is a right-to-left table.
    ///</summary>
    ///<remarks><p>When <c>true</c>, the cells in this row are laid out right to left.</p>
    ///  <para>The default value is <c>false</c>.</para></remarks>
    property Bidi: Boolean read get_Bidi write set_Bidi;
    ///<summary>
    ///  Gets or sets the amount of space (in points) to add to the left of the contents of cells.
    ///</summary>
    property LeftPadding: Double read get_LeftPadding write set_LeftPadding;
    ///<summary>
    ///  Gets or sets the amount of space (in points) to add to the right of the contents of cells.
    ///</summary>
    property RightPadding: Double read get_RightPadding write set_RightPadding;
    ///<summary>
    ///  Gets or sets the amount of space (in points) to add above the contents of cells.
    ///</summary>
    property TopPadding: Double read get_TopPadding write set_TopPadding;
    ///<summary>
    ///  Gets or sets the amount of space (in points) to add below the contents of cells.
    ///</summary>
    property BottomPadding: Double read get_BottomPadding write set_BottomPadding;
    ///<summary>
    ///  Gets or sets the amount of space (in points) between the cells.
    ///</summary>
    property CellSpacing: Double read get_CellSpacing write set_CellSpacing;
    ///<summary>
    ///  Gets or sets the "Allow spacing between cells" option.
    ///</summary>
    property AllowCellSpacing: Boolean read get_AllowCellSpacing write set_AllowCellSpacing;
    ///<summary>
    ///  Gets or sets the value that represents the left indent of the table.
    ///</summary>
    property LeftIndent: Double read get_LeftIndent write set_LeftIndent;
    ///<summary>
    ///  Gets or sets bit flags that specify how a table style is applied to this table.
    ///</summary>
    property StyleOptions: DNTableStyleOptions read get_StyleOptions write set_StyleOptions;
    ///<summary>
    ///  Gets or sets the table style applied to this table.
    ///</summary>
    property Style: DNStyle read get_Style write set_Style;
    ///<summary>
    ///  Gets or sets the name of the table style applied to this table.
    ///</summary>
    property StyleName: string read get_StyleName write set_StyleName;
    ///<summary>
    ///  Gets or sets the locale independent style identifier of the table style applied to this table.
    ///</summary>
    property StyleIdentifier: DNStyleIdentifier read get_StyleIdentifier write set_StyleIdentifier;
    ///<summary>
    ///  Gets or sets <see cref="P:Aspose.Words.Tables.Table.TextWrapping" />
    ///  for table.
    ///</summary>
    property TextWrapping: DNTextWrapping read get_TextWrapping write set_TextWrapping;
    ///<summary>
    ///  Gets or sets title of this table.
    ///  It provides an alternative text representation of the information contained in the table.
    ///</summary>
    ///<remarks><para>The default value is an empty string.</para><para>This property is meaningful for ISO/IEC 29500 compliant DOCX documents
    ///  (<see cref="T:Aspose.Words.Saving.OoxmlCompliance" />
    ///  ).
    ///  When saved to pre-ISO/IEC 29500 formats, the property is ignored.</para></remarks>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets description of this table.
    ///  It provides an alternative text representation of the information contained in the table.
    ///</summary>
    ///<remarks><para>The default value is an empty string.</para><para>This property is meaningful for ISO/IEC 29500 compliant DOCX documents
    ///  (<see cref="T:Aspose.Words.Saving.OoxmlCompliance" />
    ///  ).
    ///  When saved to pre-ISO/IEC 29500 formats, the property is ignored.</para></remarks>
    property Description: string read get_Description write set_Description;
    ///<summary>
    ///  Gets distance between table left and the surrounding text, in points.
    ///</summary>
    property DistanceLeft: Double read get_DistanceLeft;
    ///<summary>
    ///  Gets distance between table right and the surrounding text, in points.
    ///</summary>
    property DistanceRight: Double read get_DistanceRight;
    ///<summary>
    ///  Gets distance between table top and the surrounding text, in points.
    ///</summary>
    property DistanceTop: Double read get_DistanceTop;
    ///<summary>
    ///  Gets distance between table bottom and the surrounding text, in points.
    ///</summary>
    property DistanceBottom: Double read get_DistanceBottom;
    ///<summary>
    ///  Gets or sets floating table relative horizontal alignment.
    ///</summary>
    property RelativeHorizontalAlignment: DNHorizontalAlignment read get_RelativeHorizontalAlignment write set_RelativeHorizontalAlignment;
    ///<summary>
    ///  Gets or sets floating table relative vertical alignment.
    ///</summary>
    property RelativeVerticalAlignment: DNVerticalAlignment read get_RelativeVerticalAlignment write set_RelativeVerticalAlignment;
    ///<summary>
    ///  Gets the base object from which the horizontal positioning of floating table should be calculated.
    ///  Default value is <see cref="F:Aspose.Words.Drawing.RelativeHorizontalPosition.Column" />
    ///  .
    ///</summary>
    property HorizontalAnchor: DNRelativeHorizontalPosition read get_HorizontalAnchor write set_HorizontalAnchor;
    ///<summary>
    ///  Gets the base object from which the vertical positioning of floating table should be calculated.
    ///  Default value is <see cref="F:Aspose.Words.Drawing.RelativeVerticalPosition.Margin" />
    ///  .
    ///</summary>
    property VerticalAnchor: DNRelativeVerticalPosition read get_VerticalAnchor write set_VerticalAnchor;
    ///<summary>
    ///  Gets or sets absolute horizontal floating table position specified by the table properties, in points.
    ///  Default value is 0.
    ///</summary>
    property AbsoluteHorizontalDistance: Double read get_AbsoluteHorizontalDistance write set_AbsoluteHorizontalDistance;
    ///<summary>
    ///  Gets or sets absolute vertical floating table position specified by the table properties, in points.
    ///  Default value is 0.
    ///</summary>
    property AbsoluteVerticalDistance: Double read get_AbsoluteVerticalDistance write set_AbsoluteVerticalDistance;
    ///<summary>
    ///  Gets whether a floating table shall allow other floating objects in the document
    ///  to overlap its extents when displayed.
    ///  Default value is <c>true</c>.
    ///</summary>
    property AllowOverlap: Boolean read get_AllowOverlap;
    ///<summary>
    ///  Returns true as this node can have child nodes.
    ///</summary>
    property IsComposite: Boolean read get_IsComposite;
    ///<summary>
    ///  Returns true if this node has any child nodes.
    ///</summary>
    property HasChildNodes: Boolean read get_HasChildNodes;
    ///<summary>
    ///  Gets all immediate child nodes of this node.
    ///</summary>
    ///<remarks><p>Note, <see cref="P:Aspose.Words.CompositeNode.ChildNodes" />
    ///  is equivalent to calling <c>GetChildNodes(NodeType.Any, false)</c>
    ///  and creates and returns a new collection every time it is accessed.</p>
    ///  <p>If there are no child nodes, this property returns an empty collection.</p>
    ///</remarks>
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    ///<summary>
    ///  Gets the first child of the node.
    ///</summary>
    ///<remarks>
    ///  If there is no first child node, a null is returned.
    ///</remarks>
    property FirstChild: DNNode read get_FirstChild;
    ///<summary>
    ///  Gets the last child of the node.
    ///</summary>
    ///<remarks>
    ///  If there is no last child node, a null is returned.
    ///</remarks>
    property LastChild: DNNode read get_LastChild;
    ///<summary>
    ///  Gets the number of immediate children of this node.
    ///</summary>
    property Count: Int32 read get_Count;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNTable = class(TDNGenericImport<DNTableClass, DNTable>) end;

  //-------------namespace: Aspose.Words----------------
  DNEditableRangeEndClass = interface(DNNodeClass)
  ['{743F02F2-E692-5859-9675-C2D06CC24565}']
  end;

  ///<summary>
  ///  Represents an end of an editable range in a Word document.
  ///</summary>
  ///<remarks><p>A complete editable range  in a Word document consists of a <see cref="P:Aspose.Words.EditableRangeEnd.EditableRangeStart" />
  ///  and a matching <see cref="T:Aspose.Words.EditableRangeEnd" />
  ///  with the same Id.</p>
  ///  <p><see cref="P:Aspose.Words.EditableRangeEnd.EditableRangeStart" />
  ///  and <see cref="T:Aspose.Words.EditableRangeEnd" />
  ///  are just markers inside a document
  ///  that specify where the editable range starts and ends.</p>
  ///  <p>Use the <see cref="T:Aspose.Words.EditableRange" />
  ///  class as a "facade" to work with an editable range
  ///  as a single object.</p>
  ///<note>Currently editable ranges are supported only at the inline-level, that is inside <see cref="T:Aspose.Words.Paragraph" />
  ///  ,
  ///  but editable range start and editable range end can be in different paragraphs.</note></remarks>
  [DNTypeName('Aspose.Words.EditableRangeEnd')]
  DNEditableRangeEnd = interface(DNNode)
  ['{67846C31-8087-30F6-8441-0D5372111D9C}']
  { getters & setters } 

    function get_EditableRangeStart: DNEditableRangeStart;
    function get_Id: Int32;
    procedure set_Id(value: Int32);
    function get_NodeType: DNNodeType;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Calls <see cref="M:Aspose.Words.DocumentVisitor.VisitEditableRangeEnd(Aspose.Words.EditableRangeEnd)" />
    ///  .</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the node.</param>
    ///<returns>False if the visitor requested the enumeration to stop.</returns>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Creates a duplicate of the node.
    ///</summary>
    ///<remarks><p>This method serves as a copy constructor for nodes.
    ///  The cloned node has no parent, but belongs to the same document as the original node.</p>
    ///  <p>This method always performs a deep copy of the node. The <i>isCloneChildren</i> parameter
    ///  specifies whether to perform copy all child nodes as well.</p>
    ///</remarks>
    ///  <param name="isCloneChildren">True to recursively clone the subtree under the specified node;
    ///  false to clone only the node itself.</param>
    ///<returns>The cloned node.</returns>
    ///<dev>
    ///  You should use the <see cref="M:Aspose.Words.Node.Clone(System.Boolean,Aspose.Words.INodeCloningListener)" />
    ///  overload when
    ///  the node cloning is a part of another (usually composite) node cloning process.
    ///  And you should pass down the <see cref="T:Aspose.Words.INodeCloningListener" />
    ///  parameter in this case.
    ///</dev>
    function Clone(isCloneChildren: Boolean): DNNode;
    ///<summary>
    ///  Gets the text of this node and of all its children.
    ///</summary>
    ///<remarks><p>The returned string includes all control and special characters as described in <see cref="T:Aspose.Words.ControlChar" />
    ///  .</p>
    ///</remarks>
    function GetText: string;
    ///<summary>
    ///  Gets the first ancestor of the specified object type.
    ///</summary>
    ///  <param name="ancestorType">The object type of the ancestor to retrieve.</param>
    ///<returns>The ancestor of the specified type or null if no ancestor of this type was found.</returns>
    ///<remarks><p>The ancestor type matches if it is equal to ancestorType or derived from ancestorType.</p>
    ///</remarks>
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    ///<summary>
    ///  Gets the first ancestor of the specified <see cref="T:Aspose.Words.NodeType" />
    ///  .
    ///</summary>
    ///  <param name="ancestorType">The node type of the ancestor to retrieve.</param>
    ///<returns>The ancestor of the specified type or null if no ancestor of this type was found.</returns>
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    ///<summary>
    ///  Removes itself from the parent.
    ///</summary>
    procedure Remove;
    ///<summary>
    ///  Gets next node according to the pre-order tree traversal algorithm.
    ///</summary>
    ///  <param name="rootNode">The top node (limit) of traversal.</param>
    ///<returns>Next node in pre-order order. Null if reached the rootNode.</returns>
    function NextPreOrder(rootNode: DNNode): DNNode;
    ///<summary>
    ///  Gets the previous node according to the pre-order tree traversal algorithm.
    ///</summary>
    ///  <param name="rootNode">The top node (limit) of traversal.</param>
    ///<returns>Previous node in pre-order order. Null if reached the rootNode.</returns>
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    ///<summary>
    ///  Exports the content of the node into a string in the specified format.
    ///</summary>
    ///<returns>The content of the node in the specified format.</returns>
    function ToString(saveFormat: DNSaveFormat): string; overload;
    ///<summary>
    ///  Exports the content of the node into a string using the specified save options.
    ///</summary>
    ///  <param name="saveOptions">Specifies the options that control how the node is saved.</param>
    ///<returns>The content of the node in the specified format.</returns>
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Corresponding EditableRangeStart, received by ID.
    ///</summary>
    property EditableRangeStart: DNEditableRangeStart read get_EditableRangeStart;
    ///<summary>
    ///  Specifies the identifier of the editable range.
    ///</summary>
    property Id: Int32 read get_Id write set_Id;
    ///<summary>
    ///  Returns <see cref="F:Aspose.Words.NodeType.EditableRangeEnd" />
    ///  .
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Gets the immediate parent of this node.
    ///</summary>
    ///<remarks><p>If a node has just been created and not yet added to the tree,
    ///  or if it has been removed from the tree, the parent is null.</p>
    ///</remarks>
    property ParentNode: DNCompositeNode read get_ParentNode;
    ///<summary>
    ///  Gets the document to which this node belongs.
    ///</summary>
    ///<remarks><p>The node always belongs to a document even if it has just been created
    ///  and not yet added to the tree, or if it has been removed from the tree.</p>
    ///</remarks>
    property Document: DNDocumentBase read get_Document;
    ///<summary>
    ///  Gets the node immediately preceding this node.
    ///</summary>
    ///<remarks>
    ///  If there is no preceding node, a null is returned.
    ///</remarks>
    property PreviousSibling: DNNode read get_PreviousSibling;
    ///<summary>
    ///  Gets the node immediately following this node.
    ///</summary>
    ///<remarks>
    ///  If there is no next node, a null is returned.
    ///</remarks>
    property NextSibling: DNNode read get_NextSibling;
    ///<summary>
    ///  Returns true if this node can contain other nodes.
    ///</summary>
    ///<value>This method returns false as Node cannot have child nodes.</value>
    property IsComposite: Boolean read get_IsComposite;
    ///<summary>
    ///  Returns a <b>Range</b>
    ///  object that represents the portion of a document that is contained in this node.
    ///</summary>
    property Range: DNRange read get_Range;
    ///<summary>
    ///  Specifies custom node identifier.
    ///</summary>
    ///<remarks><p>Default is zero.</p>
    ///  <p>This identifier can be set and used arbitrarily. For example, as a key to get external data.</p>
    ///  <p>Important note, specified value is not saved to an output file and exists only during the node lifetime.</p>
    ///</remarks>
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNEditableRangeEnd = class(TDNGenericImport<DNEditableRangeEndClass, DNEditableRangeEnd>) end;

  //-------------namespace: Aspose.Words----------------
  DNEditableRangeStartClass = interface(DNNodeClass)
  ['{7610740F-2DC0-5A55-B39F-615CB7951BA8}']
  end;

  ///<summary>
  ///  Represents a start of an editable range in a Word document.
  ///</summary>
  ///<remarks><p>A complete editable range in a Word document consists of a <see cref="T:Aspose.Words.EditableRangeStart" />
  ///  and a matching <see cref="T:Aspose.Words.EditableRangeEnd" />
  ///  with the same Id.</p>
  ///  <p><see cref="T:Aspose.Words.EditableRangeStart" />
  ///  and <see cref="T:Aspose.Words.EditableRangeEnd" />
  ///  are just markers inside a document
  ///  that specify where the editable range starts and ends.</p>
  ///  <p>Use the <see cref="P:Aspose.Words.EditableRangeStart.EditableRange" />
  ///  class as a "facade" to work with an editable range
  ///  as a single object.</p>
  ///<note>Currently editable ranges are supported only at the inline-level, that is inside <see cref="T:Aspose.Words.Paragraph" />
  ///  ,
  ///  but editable range start and editable range end can be in different paragraphs.</note></remarks>
  [DNTypeName('Aspose.Words.EditableRangeStart')]
  DNEditableRangeStart = interface(DNNode)
  ['{E7C5E0E4-B32F-35FF-A484-75AFC571383A}']
  { getters & setters } 

    function get_Id: Int32;
    procedure set_Id(value: Int32);
    function get_EditableRange: DNEditableRange;
    function get_NodeType: DNNodeType;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Calls <see cref="M:Aspose.Words.DocumentVisitor.VisitEditableRangeStart(Aspose.Words.EditableRangeStart)" />
    ///  .</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the node.</param>
    ///<returns>False if the visitor requested the enumeration to stop.</returns>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Creates a duplicate of the node.
    ///</summary>
    ///<remarks><p>This method serves as a copy constructor for nodes.
    ///  The cloned node has no parent, but belongs to the same document as the original node.</p>
    ///  <p>This method always performs a deep copy of the node. The <i>isCloneChildren</i> parameter
    ///  specifies whether to perform copy all child nodes as well.</p>
    ///</remarks>
    ///  <param name="isCloneChildren">True to recursively clone the subtree under the specified node;
    ///  false to clone only the node itself.</param>
    ///<returns>The cloned node.</returns>
    ///<dev>
    ///  You should use the <see cref="M:Aspose.Words.Node.Clone(System.Boolean,Aspose.Words.INodeCloningListener)" />
    ///  overload when
    ///  the node cloning is a part of another (usually composite) node cloning process.
    ///  And you should pass down the <see cref="T:Aspose.Words.INodeCloningListener" />
    ///  parameter in this case.
    ///</dev>
    function Clone(isCloneChildren: Boolean): DNNode;
    ///<summary>
    ///  Gets the text of this node and of all its children.
    ///</summary>
    ///<remarks><p>The returned string includes all control and special characters as described in <see cref="T:Aspose.Words.ControlChar" />
    ///  .</p>
    ///</remarks>
    function GetText: string;
    ///<summary>
    ///  Gets the first ancestor of the specified object type.
    ///</summary>
    ///  <param name="ancestorType">The object type of the ancestor to retrieve.</param>
    ///<returns>The ancestor of the specified type or null if no ancestor of this type was found.</returns>
    ///<remarks><p>The ancestor type matches if it is equal to ancestorType or derived from ancestorType.</p>
    ///</remarks>
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    ///<summary>
    ///  Gets the first ancestor of the specified <see cref="T:Aspose.Words.NodeType" />
    ///  .
    ///</summary>
    ///  <param name="ancestorType">The node type of the ancestor to retrieve.</param>
    ///<returns>The ancestor of the specified type or null if no ancestor of this type was found.</returns>
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    ///<summary>
    ///  Removes itself from the parent.
    ///</summary>
    procedure Remove;
    ///<summary>
    ///  Gets next node according to the pre-order tree traversal algorithm.
    ///</summary>
    ///  <param name="rootNode">The top node (limit) of traversal.</param>
    ///<returns>Next node in pre-order order. Null if reached the rootNode.</returns>
    function NextPreOrder(rootNode: DNNode): DNNode;
    ///<summary>
    ///  Gets the previous node according to the pre-order tree traversal algorithm.
    ///</summary>
    ///  <param name="rootNode">The top node (limit) of traversal.</param>
    ///<returns>Previous node in pre-order order. Null if reached the rootNode.</returns>
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    ///<summary>
    ///  Exports the content of the node into a string in the specified format.
    ///</summary>
    ///<returns>The content of the node in the specified format.</returns>
    function ToString(saveFormat: DNSaveFormat): string; overload;
    ///<summary>
    ///  Exports the content of the node into a string using the specified save options.
    ///</summary>
    ///  <param name="saveOptions">Specifies the options that control how the node is saved.</param>
    ///<returns>The content of the node in the specified format.</returns>
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Specifies the identifier of the editable range.
    ///</summary>
    property Id: Int32 read get_Id write set_Id;
    ///<summary>
    ///  Gets the facade object that encapsulates this editable range start and end.
    ///</summary>
    property EditableRange: DNEditableRange read get_EditableRange;
    ///<summary>
    ///  Returns <see cref="F:Aspose.Words.NodeType.EditableRangeStart" />
    ///  .
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Gets the immediate parent of this node.
    ///</summary>
    ///<remarks><p>If a node has just been created and not yet added to the tree,
    ///  or if it has been removed from the tree, the parent is null.</p>
    ///</remarks>
    property ParentNode: DNCompositeNode read get_ParentNode;
    ///<summary>
    ///  Gets the document to which this node belongs.
    ///</summary>
    ///<remarks><p>The node always belongs to a document even if it has just been created
    ///  and not yet added to the tree, or if it has been removed from the tree.</p>
    ///</remarks>
    property Document: DNDocumentBase read get_Document;
    ///<summary>
    ///  Gets the node immediately preceding this node.
    ///</summary>
    ///<remarks>
    ///  If there is no preceding node, a null is returned.
    ///</remarks>
    property PreviousSibling: DNNode read get_PreviousSibling;
    ///<summary>
    ///  Gets the node immediately following this node.
    ///</summary>
    ///<remarks>
    ///  If there is no next node, a null is returned.
    ///</remarks>
    property NextSibling: DNNode read get_NextSibling;
    ///<summary>
    ///  Returns true if this node can contain other nodes.
    ///</summary>
    ///<value>This method returns false as Node cannot have child nodes.</value>
    property IsComposite: Boolean read get_IsComposite;
    ///<summary>
    ///  Returns a <b>Range</b>
    ///  object that represents the portion of a document that is contained in this node.
    ///</summary>
    property Range: DNRange read get_Range;
    ///<summary>
    ///  Specifies custom node identifier.
    ///</summary>
    ///<remarks><p>Default is zero.</p>
    ///  <p>This identifier can be set and used arbitrarily. For example, as a key to get external data.</p>
    ///  <p>Important note, specified value is not saved to an output file and exists only during the node lifetime.</p>
    ///</remarks>
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNEditableRangeStart = class(TDNGenericImport<DNEditableRangeStartClass, DNEditableRangeStart>) end;

  //-------------namespace: Aspose.Words----------------
  DNInlineClass = interface(DNNodeClass)
  ['{CC7C7F58-8BF5-5702-AE52-DE40B4F3D55B}']
  end;

  ///<summary>
  ///  Base class for inline-level nodes that can have character formatting associated with them, but cannot have child nodes of their own.
  ///</summary>
  ///<remarks><p>A class derived from <b>Inline</b>
  ///  can be a child of <b>Paragraph</b>
  ///  .</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.Inline')]
  DNInline = interface(DNNode)
  ['{55AC8D97-B72B-357A-B54F-910ABE089A90}']
  { getters & setters } 

    function get_ParentParagraph: DNParagraph;
    function get_Font: DNFont;
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_IsFormatRevision: Boolean;
    function get_NodeType: DNNodeType;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Creates a duplicate of the node.
    ///</summary>
    ///<remarks><p>This method serves as a copy constructor for nodes.
    ///  The cloned node has no parent, but belongs to the same document as the original node.</p>
    ///  <p>This method always performs a deep copy of the node. The <i>isCloneChildren</i> parameter
    ///  specifies whether to perform copy all child nodes as well.</p>
    ///</remarks>
    ///  <param name="isCloneChildren">True to recursively clone the subtree under the specified node;
    ///  false to clone only the node itself.</param>
    ///<returns>The cloned node.</returns>
    ///<dev>
    ///  You should use the <see cref="M:Aspose.Words.Node.Clone(System.Boolean,Aspose.Words.INodeCloningListener)" />
    ///  overload when
    ///  the node cloning is a part of another (usually composite) node cloning process.
    ///  And you should pass down the <see cref="T:Aspose.Words.INodeCloningListener" />
    ///  parameter in this case.
    ///</dev>
    function Clone(isCloneChildren: Boolean): DNNode;
    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the nodes.</param>
    ///<returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Gets the text of this node and of all its children.
    ///</summary>
    ///<remarks><p>The returned string includes all control and special characters as described in <see cref="T:Aspose.Words.ControlChar" />
    ///  .</p>
    ///</remarks>
    function GetText: string;
    ///<summary>
    ///  Gets the first ancestor of the specified object type.
    ///</summary>
    ///  <param name="ancestorType">The object type of the ancestor to retrieve.</param>
    ///<returns>The ancestor of the specified type or null if no ancestor of this type was found.</returns>
    ///<remarks><p>The ancestor type matches if it is equal to ancestorType or derived from ancestorType.</p>
    ///</remarks>
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    ///<summary>
    ///  Gets the first ancestor of the specified <see cref="T:Aspose.Words.NodeType" />
    ///  .
    ///</summary>
    ///  <param name="ancestorType">The node type of the ancestor to retrieve.</param>
    ///<returns>The ancestor of the specified type or null if no ancestor of this type was found.</returns>
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    ///<summary>
    ///  Removes itself from the parent.
    ///</summary>
    procedure Remove;
    ///<summary>
    ///  Gets next node according to the pre-order tree traversal algorithm.
    ///</summary>
    ///  <param name="rootNode">The top node (limit) of traversal.</param>
    ///<returns>Next node in pre-order order. Null if reached the rootNode.</returns>
    function NextPreOrder(rootNode: DNNode): DNNode;
    ///<summary>
    ///  Gets the previous node according to the pre-order tree traversal algorithm.
    ///</summary>
    ///  <param name="rootNode">The top node (limit) of traversal.</param>
    ///<returns>Previous node in pre-order order. Null if reached the rootNode.</returns>
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    ///<summary>
    ///  Exports the content of the node into a string in the specified format.
    ///</summary>
    ///<returns>The content of the node in the specified format.</returns>
    function ToString(saveFormat: DNSaveFormat): string; overload;
    ///<summary>
    ///  Exports the content of the node into a string using the specified save options.
    ///</summary>
    ///  <param name="saveOptions">Specifies the options that control how the node is saved.</param>
    ///<returns>The content of the node in the specified format.</returns>
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Retrieves the parent <see cref="T:Aspose.Words.Paragraph" />
    ///  of this node.
    ///</summary>
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    ///<summary>
    ///  Provides access to the font formatting of this object.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Returns true if this object was inserted in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    ///<summary>
    ///  Returns true if this object was deleted in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    ///<summary>
    ///  Returns <b>true</b>
    ///  if this object was moved (deleted) in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    ///<summary>
    ///  Returns <b>true</b>
    ///  if this object was moved (inserted) in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    ///<summary>
    ///  Returns true if formatting of the object was changed in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsFormatRevision: Boolean read get_IsFormatRevision;
    ///<summary>
    ///  Gets the type of this node.
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Gets the immediate parent of this node.
    ///</summary>
    ///<remarks><p>If a node has just been created and not yet added to the tree,
    ///  or if it has been removed from the tree, the parent is null.</p>
    ///</remarks>
    property ParentNode: DNCompositeNode read get_ParentNode;
    ///<summary>
    ///  Gets the document to which this node belongs.
    ///</summary>
    ///<remarks><p>The node always belongs to a document even if it has just been created
    ///  and not yet added to the tree, or if it has been removed from the tree.</p>
    ///</remarks>
    property Document: DNDocumentBase read get_Document;
    ///<summary>
    ///  Gets the node immediately preceding this node.
    ///</summary>
    ///<remarks>
    ///  If there is no preceding node, a null is returned.
    ///</remarks>
    property PreviousSibling: DNNode read get_PreviousSibling;
    ///<summary>
    ///  Gets the node immediately following this node.
    ///</summary>
    ///<remarks>
    ///  If there is no next node, a null is returned.
    ///</remarks>
    property NextSibling: DNNode read get_NextSibling;
    ///<summary>
    ///  Returns true if this node can contain other nodes.
    ///</summary>
    ///<value>This method returns false as Node cannot have child nodes.</value>
    property IsComposite: Boolean read get_IsComposite;
    ///<summary>
    ///  Returns a <b>Range</b>
    ///  object that represents the portion of a document that is contained in this node.
    ///</summary>
    property Range: DNRange read get_Range;
    ///<summary>
    ///  Specifies custom node identifier.
    ///</summary>
    ///<remarks><p>Default is zero.</p>
    ///  <p>This identifier can be set and used arbitrarily. For example, as a key to get external data.</p>
    ///  <p>Important note, specified value is not saved to an output file and exists only during the node lifetime.</p>
    ///</remarks>
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNInline = class(TDNGenericImport<DNInlineClass, DNInline>) end;

  //-------------namespace: Aspose.Words----------------
  DNRunClass = interface(DNInlineClass)
  ['{19E4AF0D-CC98-5FAA-A35E-D70518C30751}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <b>Run</b>
    ///  class.
    ///</summary>
    ///<remarks><p>When <b>Run</b>
    ///  is created, it belongs to the specified document, but is not
    ///  yet part of the document and <b>ParentNode</b>
    ///  is null.</p>
    ///  <p>To append <b>Run</b>
    ///  to the document use InsertAfter or InsertBefore
    ///  on the paragraph where you want the run inserted.</p>
    ///</remarks>
    ///  <param name="doc">The owner document.</param>
    {class} function init(doc: DNDocumentBase): DNRun; overload;
    ///<summary>
    ///  Initializes a new instance of the <b>Run</b>
    ///  class.
    ///</summary>
    ///<remarks><p>When <b>Run</b>
    ///  is created, it belongs to the specified document, but is not
    ///  yet part of the document and <b>ParentNode</b>
    ///  is null.</p>
    ///  <p>To append <b>Run</b>
    ///  to the document use InsertAfter or InsertBefore
    ///  on the paragraph where you want the run inserted.</p>
    ///</remarks>
    ///  <param name="doc">The owner document.</param>
    ///  <param name="text">The text of the run.</param>
    {class} function init(doc: DNDocumentBase; text: string): DNRun; overload;

  end;

  ///<summary>
  ///  Represents a run of characters with the same font formatting.
  ///</summary>
  ///<remarks><p>All text of the document is stored in runs of text.</p>
  ///  <p><b>Run</b>
  ///  can only be a child of <b>Paragraph</b>
  ///  or inline <b>StructuredDocumentTag</b>
  ///  .</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.Run')]
  DNRun = interface(DNInline)
  ['{A4EB63A2-B49C-3E67-918D-7D6986D13AD5}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_ParentParagraph: DNParagraph;
    function get_Font: DNFont;
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_IsFormatRevision: Boolean;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Calls DocumentVisitor.VisitRun.</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the node.</param>
    ///<returns>False if the visitor requested the enumeration to stop.</returns>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Gets the text of the run.
    ///</summary>
    ///<returns>The text of the run.</returns>
    function GetText: string;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Returns <b>NodeType.Run</b>
    ///  .
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Gets or sets the text of the run.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Retrieves the parent <see cref="T:Aspose.Words.Paragraph" />
    ///  of this node.
    ///</summary>
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    ///<summary>
    ///  Provides access to the font formatting of this object.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Returns true if this object was inserted in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    ///<summary>
    ///  Returns true if this object was deleted in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    ///<summary>
    ///  Returns <b>true</b>
    ///  if this object was moved (deleted) in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    ///<summary>
    ///  Returns <b>true</b>
    ///  if this object was moved (inserted) in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    ///<summary>
    ///  Returns true if formatting of the object was changed in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsFormatRevision: Boolean read get_IsFormatRevision;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property IsComposite: Boolean read get_IsComposite;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNRun = class(TDNGenericImport<DNRunClass, DNRun>) end;

  //-------------namespace: Aspose.Words----------------
  DNSpecialCharClass = interface(DNInlineClass)
  ['{C31F5841-3D45-5A00-ABEB-99DFBB76DF74}']
  end;

  ///<summary>
  ///  Base class for special characters in the document.
  ///</summary>
  ///<remarks><p>A Microsoft Word document can include a number of special characters
  ///  that represent fields, form fields, shapes, OLE objects, footnotes etc. For the list
  ///  of special characters see <see cref="T:Aspose.Words.ControlChar" />
  ///  .</p>
  ///  <p><b>SpecialChar</b>
  ///  is an inline-node and can only be a child of <b>Paragraph</b>
  ///  .</p>
  ///  <p><b>SpecialChar</b>
  ///  char is used as a base class for more specific classes
  ///  that represent special characters that Aspose.Words provides programmatic access for.
  ///  The <b>SpecialChar</b>
  ///  class is also used itself to represent special character for which
  ///  Aspose.Words does not provide detailed programmatic access.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.SpecialChar')]
  DNSpecialChar = interface(DNInline)
  ['{52E29E56-8BAE-31ED-BC97-EA6EACF16A75}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_ParentParagraph: DNParagraph;
    function get_Font: DNFont;
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_IsFormatRevision: Boolean;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Calls DocumentVisitor.VisitSpecialChar.</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the node.</param>
    ///<returns>False if the visitor requested the enumeration to stop.</returns>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Gets the special character that this node represents.
    ///</summary>
    ///<returns>The string that contains the character that this node represents.</returns>
    function GetText: string;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Returns <b>NodeType.SpecialChar</b>
    ///  .
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Retrieves the parent <see cref="T:Aspose.Words.Paragraph" />
    ///  of this node.
    ///</summary>
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    ///<summary>
    ///  Provides access to the font formatting of this object.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Returns true if this object was inserted in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    ///<summary>
    ///  Returns true if this object was deleted in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    ///<summary>
    ///  Returns <b>true</b>
    ///  if this object was moved (deleted) in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    ///<summary>
    ///  Returns <b>true</b>
    ///  if this object was moved (inserted) in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    ///<summary>
    ///  Returns true if formatting of the object was changed in Microsoft Word while change tracking was enabled.
    ///</summary>
    property IsFormatRevision: Boolean read get_IsFormatRevision;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property IsComposite: Boolean read get_IsComposite;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNSpecialChar = class(TDNGenericImport<DNSpecialCharClass, DNSpecialChar>) end;

  //-------------namespace: Aspose.Words----------------
  DNAbsolutePositionTabClass = interface(DNSpecialCharClass)
  ['{9F81A92A-B130-598D-9F30-BAF2F0892CF1}']
  end;

  ///<summary>
  ///  An absolute position tab is a character which is used to advance the position on
  ///  the current line of text when displaying this WordprocessingML content.
  ///</summary>
  [DNTypeName('Aspose.Words.AbsolutePositionTab')]
  DNAbsolutePositionTab = interface(DNSpecialChar)
  ['{0347CDF3-4CB2-300B-902A-E4821B8840FA}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_ParentParagraph: DNParagraph;
    function get_Font: DNFont;
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_IsFormatRevision: Boolean;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Calls DocumentVisitor.VisitAbsolutePositionTab.</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the node.</param>
    ///<returns>False if the visitor requested the enumeration to stop.</returns>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Gets the special character that this node represents.
    ///</summary>
    ///<returns>The string that contains the character that this node represents.</returns>
    function GetText: string;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Returns <b>NodeType.SpecialChar</b>
    ///  .
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    property Font: DNFont read get_Font;
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    property IsFormatRevision: Boolean read get_IsFormatRevision;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property IsComposite: Boolean read get_IsComposite;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNAbsolutePositionTab = class(TDNGenericImport<DNAbsolutePositionTabClass, DNAbsolutePositionTab>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldCharClass = interface(DNSpecialCharClass)
  ['{ECF289F7-CA8B-58AB-9386-87E4E6B4E9DC}']
  end;

  ///<summary>
  ///  Base class for nodes that represent field characters in a document.
  ///</summary>
  ///<remarks><p>A complete field in a Microsoft Word document is a complex structure consisting of
  ///  a field start character, field code, field separator character, field result
  ///  and field end character. Some fields only have field start, field code and field end.</p>
  ///  <p>To easily insert a new field into a document, use the <see cref="M:Aspose.Words.DocumentBuilder.InsertField(System.String)" />
  ///  method.</p>
  ///</remarks>
  ///<seealso cref="T:Aspose.Words.Fields.FieldStart" />
  ///<seealso cref="T:Aspose.Words.Fields.FieldSeparator" />
  ///<seealso cref="T:Aspose.Words.Fields.FieldEnd" />
  [DNTypeName('Aspose.Words.Fields.FieldChar')]
  DNFieldChar = interface(DNSpecialChar)
  ['{CF88CE0D-B561-3B74-AD64-CC8C70980470}']
  { getters & setters } 

    function get_FieldType: DNFieldType;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_NodeType: DNNodeType;
    function get_ParentParagraph: DNParagraph;
    function get_Font: DNFont;
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_IsFormatRevision: Boolean;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns a field for the field char.
    ///</summary>
    ///<remarks>
    ///  A new <see cref="T:Aspose.Words.Fields.Field" />
    ///  object is created each time the method is called.
    ///</remarks>
    ///<returns>A field for the field char.</returns>
    function GetField: DNField;
    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Calls DocumentVisitor.VisitSpecialChar.</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the node.</param>
    ///<returns>False if the visitor requested the enumeration to stop.</returns>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Gets the special character that this node represents.
    ///</summary>
    ///<returns>The string that contains the character that this node represents.</returns>
    function GetText: string;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Returns the type of the field.
    ///</summary>
    property FieldType: DNFieldType read get_FieldType;
    ///<summary>
    ///  Gets or sets whether the parent field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications
    ///  made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  Returns <b>NodeType.SpecialChar</b>
    ///  .
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    property Font: DNFont read get_Font;
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    property IsFormatRevision: Boolean read get_IsFormatRevision;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property IsComposite: Boolean read get_IsComposite;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNFieldChar = class(TDNGenericImport<DNFieldCharClass, DNFieldChar>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldEndClass = interface(DNFieldCharClass)
  ['{983847A4-D0CE-5C53-BAED-92749161CEC8}']
  end;

  ///<summary>
  ///  Represents an end of a Word field in a document.
  ///</summary>
  ///<remarks><p><see cref="T:Aspose.Words.Fields.FieldEnd" />
  ///  is an inline-level node and represented
  ///  by the <see cref="F:Aspose.Words.ControlChar.FieldEndChar" />
  ///  control character in the document.</p>
  ///  <p><see cref="T:Aspose.Words.Fields.FieldEnd" />
  ///  can only be a child of <see cref="T:Aspose.Words.Paragraph" />
  ///  .</p>
  ///  <p>A complete field in a Microsoft Word document is a complex structure consisting of
  ///  a field start character, field code, field separator character, field result
  ///  and field end character. Some fields only have field start, field code and field end.</p>
  ///  <p>To easily insert a new field into a document, use the <see cref="M:Aspose.Words.DocumentBuilder.InsertField(System.String)" />
  ///  method.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldEnd')]
  DNFieldEnd = interface(DNFieldChar)
  ['{430F0F84-21F0-3672-B567-8E9A35DC926A}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_HasSeparator: Boolean;
    function get_FieldType: DNFieldType;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_ParentParagraph: DNParagraph;
    function get_Font: DNFont;
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_IsFormatRevision: Boolean;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Calls <see cref="M:Aspose.Words.DocumentVisitor.VisitFieldEnd(Aspose.Words.Fields.FieldEnd)" />
    ///  .</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the node.</param>
    ///<returns><b>False</b>
    ///  if the visitor requested the enumeration to stop.</returns>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Returns a field for the field char.
    ///</summary>
    ///<remarks>
    ///  A new <see cref="T:Aspose.Words.Fields.Field" />
    ///  object is created each time the method is called.
    ///</remarks>
    ///<returns>A field for the field char.</returns>
    function GetField: DNField;
    function GetText: string;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Returns <see cref="F:Aspose.Words.NodeType.FieldEnd" />
    ///  .
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Returns <b>true</b>
    ///  if this field has a separator.
    ///</summary>
    property HasSeparator: Boolean read get_HasSeparator;
    ///<summary>
    ///  Returns the type of the field.
    ///</summary>
    property FieldType: DNFieldType read get_FieldType;
    ///<summary>
    ///  Gets or sets whether the parent field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications
    ///  made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    property Font: DNFont read get_Font;
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    property IsFormatRevision: Boolean read get_IsFormatRevision;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property IsComposite: Boolean read get_IsComposite;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNFieldEnd = class(TDNGenericImport<DNFieldEndClass, DNFieldEnd>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldSeparatorClass = interface(DNFieldCharClass)
  ['{9CBAE3FC-3C3D-5AA5-91B8-7035FE70C012}']
  end;

  ///<summary>
  ///  Represents a Word field separator that separates the field code from the field result.
  ///</summary>
  ///<remarks><p><see cref="T:Aspose.Words.Fields.FieldSeparator" />
  ///  is an inline-level node and represented
  ///  by the <see cref="F:Aspose.Words.ControlChar.FieldSeparatorChar" />
  ///  control character in the document.</p>
  ///  <p><see cref="T:Aspose.Words.Fields.FieldSeparator" />
  ///  can only be a child of <see cref="T:Aspose.Words.Paragraph" />
  ///  .</p>
  ///  <p>A complete field in a Microsoft Word document is a complex structure consisting of
  ///  a field start character, field code, field separator character, field result
  ///  and field end character. Some fields only have field start, field code and field end.</p>
  ///  <p>To easily insert a new field into a document, use the <see cref="M:Aspose.Words.DocumentBuilder.InsertField(System.String)" />
  ///  method.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldSeparator')]
  DNFieldSeparator = interface(DNFieldChar)
  ['{39B7C2DC-E9B5-331D-9F15-ACBB0857C9F0}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_FieldType: DNFieldType;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_ParentParagraph: DNParagraph;
    function get_Font: DNFont;
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_IsFormatRevision: Boolean;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Calls <see cref="M:Aspose.Words.DocumentVisitor.VisitFieldSeparator(Aspose.Words.Fields.FieldSeparator)" />
    ///  .</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the node.</param>
    ///<returns><b>False</b>
    ///  if the visitor requested the enumeration to stop.</returns>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Returns a field for the field char.
    ///</summary>
    ///<remarks>
    ///  A new <see cref="T:Aspose.Words.Fields.Field" />
    ///  object is created each time the method is called.
    ///</remarks>
    ///<returns>A field for the field char.</returns>
    function GetField: DNField;
    function GetText: string;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Returns <see cref="F:Aspose.Words.NodeType.FieldSeparator" />
    ///  .
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Returns the type of the field.
    ///</summary>
    property FieldType: DNFieldType read get_FieldType;
    ///<summary>
    ///  Gets or sets whether the parent field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications
    ///  made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    property Font: DNFont read get_Font;
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    property IsFormatRevision: Boolean read get_IsFormatRevision;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property IsComposite: Boolean read get_IsComposite;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNFieldSeparator = class(TDNGenericImport<DNFieldSeparatorClass, DNFieldSeparator>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFieldStartClass = interface(DNFieldCharClass)
  ['{FE189022-DB07-565F-A56B-743CF50F969D}']
  end;

  ///<summary>
  ///  Represents a start of a Word field in a document.
  ///</summary>
  ///<remarks><p><see cref="T:Aspose.Words.Fields.FieldStart" />
  ///  is an inline-level node and represented by the
  ///<see cref="F:Aspose.Words.ControlChar.FieldStartChar" />
  ///  control character in the document.</p>
  ///  <p><see cref="T:Aspose.Words.Fields.FieldStart" />
  ///  can only be a child of <see cref="T:Aspose.Words.Paragraph" />
  ///  .</p>
  ///  <p>A complete field in a Microsoft Word document is a complex structure consisting of
  ///  a field start character, field code, field separator character, field result
  ///  and field end character. Some fields only have field start, field code and field end.</p>
  ///  <p>To easily insert a new field into a document, use the <see cref="M:Aspose.Words.DocumentBuilder.InsertField(System.String)" />
  ///  method.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FieldStart')]
  DNFieldStart = interface(DNFieldChar)
  ['{5A6C9667-B572-3E4E-9FF4-7AD01A0A7020}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_FieldType: DNFieldType;
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_ParentParagraph: DNParagraph;
    function get_Font: DNFont;
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_IsFormatRevision: Boolean;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Calls <see cref="M:Aspose.Words.DocumentVisitor.VisitFieldStart(Aspose.Words.Fields.FieldStart)" />
    ///  .</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the node.</param>
    ///<returns><b>False</b>
    ///  if the visitor requested the enumeration to stop.</returns>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Returns a field for the field char.
    ///</summary>
    ///<remarks>
    ///  A new <see cref="T:Aspose.Words.Fields.Field" />
    ///  object is created each time the method is called.
    ///</remarks>
    ///<returns>A field for the field char.</returns>
    function GetField: DNField;
    function GetText: string;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Returns <see cref="F:Aspose.Words.NodeType.FieldStart" />
    ///  .
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Returns the type of the field.
    ///</summary>
    property FieldType: DNFieldType read get_FieldType;
    ///<summary>
    ///  Gets or sets whether the parent field is locked (should not recalculate its result).
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Gets or sets whether the current result of the field is no longer correct (stale) due to other modifications
    ///  made to the document.
    ///</summary>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    property Font: DNFont read get_Font;
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    property IsFormatRevision: Boolean read get_IsFormatRevision;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property IsComposite: Boolean read get_IsComposite;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNFieldStart = class(TDNGenericImport<DNFieldStartClass, DNFieldStart>) end;

  //-------------namespace: Aspose.Words.Fields----------------
  DNFormFieldClass = interface(DNSpecialCharClass)
  ['{2D296846-BA2F-5FA4-974A-340B407840E0}']
  end;

  ///<summary>
  ///  Represents a single form field.
  ///</summary>
  ///<remarks><p>Microsoft Word provides the following form fields: checkbox, text input and dropdown (combobox).</p>
  ///  <p><b>FormField</b>
  ///  is an inline-node and can only be a child of <b>Paragraph</b>
  ///  .</p>
  ///  <p><b>FormField</b>
  ///  is represented in a document by a special character and
  ///  positioned as a character within a line of text.</p>
  ///  <p>A complete form field in a Word document is a complex structure represented by several
  ///  nodes: field start, field code such as FORMTEXT, form field data, field separator,
  ///  field result, field end and a bookmark. To programmatically create form fields in a Word document use
  ///<see cref="M:Aspose.Words.DocumentBuilder.InsertCheckBox(System.String,System.Boolean,System.Int32)">DocumentBuilder.InsertCheckBox</see>,
  ///<see cref="M:Aspose.Words.DocumentBuilder.InsertTextInput(System.String,Aspose.Words.Fields.TextFormFieldType,System.String,System.String,System.Int32)">DocumentBuilder.InsertTextInput</see> and
  ///<see cref="M:Aspose.Words.DocumentBuilder.InsertComboBox(System.String,System.String[],System.Int32)">DocumentBuilder.InsertComboBox</see> which
  ///  make sure all of the form field nodes are created in a correct order and in a suitable state.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.Fields.FormField')]
  DNFormField = interface(DNSpecialChar)
  ['{2D2C0C23-8258-31AD-926D-4CB545F2ED9B}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: DNFieldType;
    function get_Result: string;
    procedure set_Result(value: string);
    function get_StatusText: string;
    procedure set_StatusText(value: string);
    function get_OwnStatus: Boolean;
    procedure set_OwnStatus(value: Boolean);
    function get_HelpText: string;
    procedure set_HelpText(value: string);
    function get_OwnHelp: Boolean;
    procedure set_OwnHelp(value: Boolean);
    function get_CalculateOnExit: Boolean;
    procedure set_CalculateOnExit(value: Boolean);
    function get_EntryMacro: string;
    procedure set_EntryMacro(value: string);
    function get_ExitMacro: string;
    procedure set_ExitMacro(value: string);
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_TextInputFormat: string;
    procedure set_TextInputFormat(value: string);
    function get_TextInputType: DNTextFormFieldType;
    procedure set_TextInputType(value: DNTextFormFieldType);
    function get_TextInputDefault: string;
    procedure set_TextInputDefault(value: string);
    function get_MaxLength: Int32;
    procedure set_MaxLength(value: Int32);
    function get_DropDownItems: DNDropDownItemCollection;
    function get_DropDownSelectedIndex: Int32;
    procedure set_DropDownSelectedIndex(value: Int32);
    function get_Checked: Boolean;
    procedure set_Checked(value: Boolean);
    function get_Default: Boolean;
    procedure set_Default(value: Boolean);
    function get_IsCheckBoxExactSize: Boolean;
    procedure set_IsCheckBoxExactSize(value: Boolean);
    function get_CheckBoxSize: Double;
    procedure set_CheckBoxSize(value: Double);
    function get_ParentParagraph: DNParagraph;
    function get_Font: DNFont;
    function get_IsInsertRevision: Boolean;
    function get_IsDeleteRevision: Boolean;
    function get_IsMoveFromRevision: Boolean;
    function get_IsMoveToRevision: Boolean;
    function get_IsFormatRevision: Boolean;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Calls DocumentVisitor.VisitFormField.</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the node.</param>
    ///<returns>False if the visitor requested the enumeration to stop.</returns>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Removes the complete form field, not just the form field special character.
    ///</summary>
    ///<remarks>
    ///  If there is a bookmark associated with the form field, the bookmark is not removed.
    ///</remarks>
    procedure RemoveField;
    ///<summary>
    ///  Applies the text format specified in <see cref="P:Aspose.Words.Fields.FormField.TextInputFormat" />
    ///  and stores the value in <see cref="P:Aspose.Words.Fields.FormField.Result" />
    ///  .
    ///</summary>
    ///  <param name="newValue">Can be a string, number or a DateTime object.</param>
    ///<remarks>The <see cref="P:Aspose.Words.Fields.FormField.TextInputDefault" />
    ///  value is applied if <paramref name="newValue" />
    ///  is <c>null</c>.</remarks>
    procedure SetTextInputValue(newValue: DDN.mscorlib.DNObject);
    ///<summary>
    ///  Gets the special character that this node represents.
    ///</summary>
    ///<returns>The string that contains the character that this node represents.</returns>
    function GetText: string;
    function Clone(isCloneChildren: Boolean): DNNode;
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    procedure Remove;
    function NextPreOrder(rootNode: DNNode): DNNode;
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    function ToString(saveFormat: DNSaveFormat): string; overload;
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Returns <b>NodeType.FormField</b>
    ///  .
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Gets or sets the form field name.
    ///</summary>
    ///<remarks>
    ///  Microsoft Word allows strings with at most 20 characters.
    ///</remarks>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns the form field type.
    ///</summary>
    property &Type: DNFieldType read get_Type;
    ///<summary>
    ///  Gets or sets a string that represents the result of this form field.
    ///</summary>
    ///<remarks><p>For a text form field the result is the text that is in the field.</p>
    ///  <p>For a checkbox form field the result can be "1" or "0" to indicate checked or unchecked.</p>
    ///  <p>For a dropdown form field the result is the string selected in the dropdown.</p>
    ///  <p>Setting <see cref="P:Aspose.Words.Fields.FormField.Result" />
    ///  for a text form field does not apply the text format
    ///  specified in <see cref="P:Aspose.Words.Fields.FormField.TextInputFormat" />
    ///  . If you want to set a value and apply the
    ///  format, use the <see cref="M:Aspose.Words.Fields.FormField.SetTextInputValue(System.Object)" />
    ///  method.</p>
    ///  <p>For a text form field the <see cref="P:Aspose.Words.Fields.FormField.TextInputDefault" />
    ///  value is applied
    ///  if <paramref name="value" />
    ///  is <c>null</c>.</p>
    ///</remarks>
    property Result: string read get_Result write set_Result;
    ///<summary>
    ///  Returns or sets the text that's displayed in the status bar when a form field has the focus.
    ///</summary>
    ///<remarks><p>If the OwnStatus property is set to true, the StatusText property specifies the status bar text.
    ///  If the OwnStatus property is set to false, the StatusText property specifies the name of an AutoText
    ///  entry that contains status bar text for the form field.</p>
    ///  <p> Microsoft Word allows strings with at most 138 characters.</p>
    ///</remarks>
    property StatusText: string read get_StatusText write set_StatusText;
    ///<summary>
    ///  Specifies the source of the text that's displayed in the status bar when a form field has the focus.
    ///</summary>
    ///<remarks><p>If true, the text specified by the StatusText property is displayed.
    ///  If false, the text of the AutoText entry specified by the StatusText property is displayed.</p>
    ///</remarks>
    property OwnStatus: Boolean read get_OwnStatus write set_OwnStatus;
    ///<summary>
    ///  Returns or sets the text that's displayed in a message box when the form field has the focus and the user presses F1.
    ///</summary>
    ///<remarks><p>If the OwnHelp property is set to True, HelpText specifies the text string value.
    ///  If OwnHelp is set to False, HelpText specifies the name of an AutoText entry that contains help
    ///  text for the form field.</p>
    ///  <p>Microsoft Word allows strings with at most 255 characters.</p>
    ///</remarks>
    property HelpText: string read get_HelpText write set_HelpText;
    ///<summary>
    ///  Specifies the source of the text that's displayed in a message box when a form field has the focus and the user presses F1.
    ///</summary>
    ///<remarks><p>If True, the text specified by the HelpText property is displayed.
    ///  If False, the text in the AutoText entry specified by the HelpText property is displayed.</p>
    ///</remarks>
    property OwnHelp: Boolean read get_OwnHelp write set_OwnHelp;
    ///<summary>
    ///  True if references to the specified form field are automatically updated whenever the field is exited.
    ///</summary>
    ///<remarks><p>Setting <b>CalculateOnExit</b>
    ///  only affects the behavior of the form field when
    ///  the document is opened in Microsoft Word. Aspose.Words never updates references
    ///  to the form field.</p>
    ///</remarks>
    property CalculateOnExit: Boolean read get_CalculateOnExit write set_CalculateOnExit;
    ///<summary>
    ///  Returns or sets an entry macro name for the form field.
    ///</summary>
    ///<remarks><p>The entry macro runs when the form field gets the focus in Microsoft Word.</p>
    ///  <p>Microsoft Word allows strings with at most 32 characters.</p>
    ///</remarks>
    property EntryMacro: string read get_EntryMacro write set_EntryMacro;
    ///<summary>
    ///  Returns or sets an exit macro name for the form field.
    ///</summary>
    ///<remarks><p>The exit macro runs when the form field loses the focus in Microsoft Word.</p>
    ///  <p>Microsoft Word allows strings with at most 32 characters.</p>
    ///</remarks>
    property ExitMacro: string read get_ExitMacro write set_ExitMacro;
    ///<summary>
    ///  True if a form field is enabled.
    ///</summary>
    ///<remarks><p>If a form field is enabled, its contents can be changed as the form is filled in.</p>
    ///</remarks>
    property Enabled: Boolean read get_Enabled write set_Enabled;
    ///<summary>
    ///  Returns or sets the text formatting for a text form field.
    ///</summary>
    ///<remarks><p>If the text form field contains regular text, then valid format strings are
    ///  "", "UPPERCASE", "LOWERCASE", "FIRST CAPITAL" and "TITLE CASE". The strings
    ///  are case-insensitive.</p>
    ///  <p>If the text form field contains a number or a date/time value, then valid
    ///  format strings are number or date and time format strings.</p>
    ///  <p>Microsoft Word allows strings with at most 64 characters.</p>
    ///</remarks>
    property TextInputFormat: string read get_TextInputFormat write set_TextInputFormat;
    ///<summary>
    ///  Gets or sets the type of a text form field.
    ///</summary>
    property TextInputType: DNTextFormFieldType read get_TextInputType write set_TextInputType;
    ///<summary>
    ///  Gets or sets the default string or a calculation expression of a text form field.
    ///</summary>
    ///<remarks><para>The meaning of this property depends on the value of the <see cref="P:Aspose.Words.Fields.FormField.TextInputType" />
    ///  property.</para><para>When <see cref="P:Aspose.Words.Fields.FormField.TextInputType" />
    ///  is <see cref="F:Aspose.Words.Fields.TextFormFieldType.Regular" />
    ///  or
    ///<see cref="F:Aspose.Words.Fields.TextFormFieldType.Number" />
    ///  , this string specifies the default string for the text form field.
    ///  This string is the content that Microsoft Word will display in the document when the form field is empty.</para><para>When <see cref="P:Aspose.Words.Fields.FormField.TextInputType" />
    ///  is <see cref="F:Aspose.Words.Fields.TextFormFieldType.Calculated" />
    ///  , then this string holds
    ///  the expression to be calculated. The expression needs to be a formula valid according to Microsoft Word formula field
    ///  requirements. When you set a new expression using this property, Aspose.Words calculates the formula result
    ///  automatically and inserts it into the form field.</para><para>Microsoft Word allows strings with at most 255 characters.</para></remarks>
    property TextInputDefault: string read get_TextInputDefault write set_TextInputDefault;
    ///<summary>
    ///  Maximum length for the text field. Zero when the length is not limited.
    ///</summary>
    property MaxLength: Int32 read get_MaxLength write set_MaxLength;
    ///<summary>
    ///  Provides access to the items of a dropdown form field.
    ///</summary>
    ///<remarks><p>Microsoft Word allows maximum 25 items in a dropdown form field.</p>
    ///</remarks>
    property DropDownItems: DNDropDownItemCollection read get_DropDownItems;
    ///<summary>
    ///  Gets or sets the index specifying the currently selected item in a dropdown form field.
    ///</summary>
    property DropDownSelectedIndex: Int32 read get_DropDownSelectedIndex write set_DropDownSelectedIndex;
    ///<summary>
    ///  Gets or sets the checked status of the check box form field.
    ///  Default value for this property is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks><p>Applicable for a check box form field only.</p>
    ///</remarks>
    property Checked: Boolean read get_Checked write set_Checked;
    ///<summary>
    ///  Gets or sets the default value of the check box form field.
    ///  Default value for this property is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks><p>Applicable for a check box form field only.</p>
    ///</remarks>
    property &Default: Boolean read get_Default write set_Default;
    ///<summary>
    ///  Gets or sets the boolean value that indicates whether the size of the textbox is automatic or specified explicitly.
    ///</summary>
    ///<remarks><p>Applicable for a check box form field only.</p>
    ///<seealso cref="P:Aspose.Words.Fields.FormField.CheckBoxSize" />
    ///</remarks>
    property IsCheckBoxExactSize: Boolean read get_IsCheckBoxExactSize write set_IsCheckBoxExactSize;
    ///<summary>
    ///  Gets or sets the size of the checkbox in points. Has effect only when <see cref="P:Aspose.Words.Fields.FormField.IsCheckBoxExactSize" />
    ///  is true.
    ///</summary>
    ///<remarks><p>Applicable for a check box form field only.</p>
    ///<seealso cref="P:Aspose.Words.Fields.FormField.IsCheckBoxExactSize" />
    ///</remarks>
    property CheckBoxSize: Double read get_CheckBoxSize write set_CheckBoxSize;
    property ParentParagraph: DNParagraph read get_ParentParagraph;
    property Font: DNFont read get_Font;
    property IsInsertRevision: Boolean read get_IsInsertRevision;
    property IsDeleteRevision: Boolean read get_IsDeleteRevision;
    property IsMoveFromRevision: Boolean read get_IsMoveFromRevision;
    property IsMoveToRevision: Boolean read get_IsMoveToRevision;
    property IsFormatRevision: Boolean read get_IsFormatRevision;
    property ParentNode: DNCompositeNode read get_ParentNode;
    property Document: DNDocumentBase read get_Document;
    property PreviousSibling: DNNode read get_PreviousSibling;
    property NextSibling: DNNode read get_NextSibling;
    property IsComposite: Boolean read get_IsComposite;
    property Range: DNRange read get_Range;
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNFormField = class(TDNGenericImport<DNFormFieldClass, DNFormField>) end;

  //-------------namespace: Aspose.Words.Markup----------------
  DNStructuredDocumentTagRangeEndClass = interface(DNNodeClass)
  ['{F928A81D-A4EB-56D1-8122-EEC8DBCB89E5}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <b>Structured document tag range end</b>
    ///  class.
    ///</summary>
    ///  <param name="doc">The owner document.</param>
    ///  <param name="id">Identifier of the corresponding structured document tag range start.</param>
    {class} function init(doc: DNDocumentBase; id: Int32): DNStructuredDocumentTagRangeEnd;

  end;

  ///<summary>
  ///  Represents an end of <b>ranged</b>
  ///  structured document tag which accepts multi-sections content.
  ///  See also <see cref="T:Aspose.Words.Markup.StructuredDocumentTagRangeStart" />
  ///  node.
  ///</summary>
  ///<remarks>
  ///  Can be immediate child of <see cref="T:Aspose.Words.Body" />
  ///  node <b>only</b>
  ///  .
  ///</remarks>
  [DNTypeName('Aspose.Words.Markup.StructuredDocumentTagRangeEnd')]
  DNStructuredDocumentTagRangeEnd = interface(DNNode)
  ['{A42A3AA6-21E5-35E4-A643-CF671210D920}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_Id: Int32;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the nodes.</param>
    ///<returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Creates a duplicate of the node.
    ///</summary>
    ///<remarks><p>This method serves as a copy constructor for nodes.
    ///  The cloned node has no parent, but belongs to the same document as the original node.</p>
    ///  <p>This method always performs a deep copy of the node. The <i>isCloneChildren</i> parameter
    ///  specifies whether to perform copy all child nodes as well.</p>
    ///</remarks>
    ///  <param name="isCloneChildren">True to recursively clone the subtree under the specified node;
    ///  false to clone only the node itself.</param>
    ///<returns>The cloned node.</returns>
    ///<dev>
    ///  You should use the <see cref="M:Aspose.Words.Node.Clone(System.Boolean,Aspose.Words.INodeCloningListener)" />
    ///  overload when
    ///  the node cloning is a part of another (usually composite) node cloning process.
    ///  And you should pass down the <see cref="T:Aspose.Words.INodeCloningListener" />
    ///  parameter in this case.
    ///</dev>
    function Clone(isCloneChildren: Boolean): DNNode;
    ///<summary>
    ///  Gets the text of this node and of all its children.
    ///</summary>
    ///<remarks><p>The returned string includes all control and special characters as described in <see cref="T:Aspose.Words.ControlChar" />
    ///  .</p>
    ///</remarks>
    function GetText: string;
    ///<summary>
    ///  Gets the first ancestor of the specified object type.
    ///</summary>
    ///  <param name="ancestorType">The object type of the ancestor to retrieve.</param>
    ///<returns>The ancestor of the specified type or null if no ancestor of this type was found.</returns>
    ///<remarks><p>The ancestor type matches if it is equal to ancestorType or derived from ancestorType.</p>
    ///</remarks>
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    ///<summary>
    ///  Gets the first ancestor of the specified <see cref="T:Aspose.Words.NodeType" />
    ///  .
    ///</summary>
    ///  <param name="ancestorType">The node type of the ancestor to retrieve.</param>
    ///<returns>The ancestor of the specified type or null if no ancestor of this type was found.</returns>
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    ///<summary>
    ///  Removes itself from the parent.
    ///</summary>
    procedure Remove;
    ///<summary>
    ///  Gets next node according to the pre-order tree traversal algorithm.
    ///</summary>
    ///  <param name="rootNode">The top node (limit) of traversal.</param>
    ///<returns>Next node in pre-order order. Null if reached the rootNode.</returns>
    function NextPreOrder(rootNode: DNNode): DNNode;
    ///<summary>
    ///  Gets the previous node according to the pre-order tree traversal algorithm.
    ///</summary>
    ///  <param name="rootNode">The top node (limit) of traversal.</param>
    ///<returns>Previous node in pre-order order. Null if reached the rootNode.</returns>
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    ///<summary>
    ///  Exports the content of the node into a string in the specified format.
    ///</summary>
    ///<returns>The content of the node in the specified format.</returns>
    function ToString(saveFormat: DNSaveFormat): string; overload;
    ///<summary>
    ///  Exports the content of the node into a string using the specified save options.
    ///</summary>
    ///  <param name="saveOptions">Specifies the options that control how the node is saved.</param>
    ///<returns>The content of the node in the specified format.</returns>
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Gets the type of this node.
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Specifies a unique read-only persistent numerical Id for this <b>StructuredDocumentTagRange</b>
    ///  node.
    ///  Corresponding <see cref="T:Aspose.Words.Markup.StructuredDocumentTagRangeStart" />
    ///  node has the same <see cref="P:Aspose.Words.Markup.StructuredDocumentTagRangeStart.Id" />
    ///  .
    ///</summary>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  Gets the immediate parent of this node.
    ///</summary>
    ///<remarks><p>If a node has just been created and not yet added to the tree,
    ///  or if it has been removed from the tree, the parent is null.</p>
    ///</remarks>
    property ParentNode: DNCompositeNode read get_ParentNode;
    ///<summary>
    ///  Gets the document to which this node belongs.
    ///</summary>
    ///<remarks><p>The node always belongs to a document even if it has just been created
    ///  and not yet added to the tree, or if it has been removed from the tree.</p>
    ///</remarks>
    property Document: DNDocumentBase read get_Document;
    ///<summary>
    ///  Gets the node immediately preceding this node.
    ///</summary>
    ///<remarks>
    ///  If there is no preceding node, a null is returned.
    ///</remarks>
    property PreviousSibling: DNNode read get_PreviousSibling;
    ///<summary>
    ///  Gets the node immediately following this node.
    ///</summary>
    ///<remarks>
    ///  If there is no next node, a null is returned.
    ///</remarks>
    property NextSibling: DNNode read get_NextSibling;
    ///<summary>
    ///  Returns true if this node can contain other nodes.
    ///</summary>
    ///<value>This method returns false as Node cannot have child nodes.</value>
    property IsComposite: Boolean read get_IsComposite;
    ///<summary>
    ///  Returns a <b>Range</b>
    ///  object that represents the portion of a document that is contained in this node.
    ///</summary>
    property Range: DNRange read get_Range;
    ///<summary>
    ///  Specifies custom node identifier.
    ///</summary>
    ///<remarks><p>Default is zero.</p>
    ///  <p>This identifier can be set and used arbitrarily. For example, as a key to get external data.</p>
    ///  <p>Important note, specified value is not saved to an output file and exists only during the node lifetime.</p>
    ///</remarks>
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNStructuredDocumentTagRangeEnd = class(TDNGenericImport<DNStructuredDocumentTagRangeEndClass, DNStructuredDocumentTagRangeEnd>) end;

  //-------------namespace: Aspose.Words.Markup----------------
  DNStructuredDocumentTagRangeStartClass = interface(DNNodeClass)
  ['{1B338B23-CFC8-5898-B301-AA44C02635B0}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <b>Structured document tag range start</b>
    ///  class.
    ///</summary>
    ///<remarks><para>The following types of SDT can be created:</para><list type="bullet"><item><see cref="F:Aspose.Words.Markup.SdtType.Checkbox" />
    ///</item>
    ///<item><see cref="F:Aspose.Words.Markup.SdtType.DropDownList" />
    ///</item>
    ///<item><see cref="F:Aspose.Words.Markup.SdtType.ComboBox" />
    ///</item>
    ///<item><see cref="F:Aspose.Words.Markup.SdtType.Date" />
    ///</item>
    ///<item><see cref="F:Aspose.Words.Markup.SdtType.BuildingBlockGallery" />
    ///</item>
    ///<item><see cref="F:Aspose.Words.Markup.SdtType.Group" />
    ///</item>
    ///<item><see cref="F:Aspose.Words.Markup.SdtType.Picture" />
    ///</item>
    ///<item><see cref="F:Aspose.Words.Markup.SdtType.RichText" />
    ///</item>
    ///<item><see cref="F:Aspose.Words.Markup.SdtType.PlainText" />
    ///</item>
    ///</list>
    ///</remarks>
    ///  <param name="doc">The owner document.</param>
    ///  <param name="type">Type of SDT node.</param>
    {class} function init(doc: DNDocumentBase; &type: DNSdtType): DNStructuredDocumentTagRangeStart;

  end;

  ///<summary>
  ///  Represents a start of <b>ranged</b>
  ///  structured document tag which accepts multi-sections content.
  ///  See also <see cref="T:Aspose.Words.Markup.StructuredDocumentTagRangeEnd" />
  ///  .
  ///</summary>
  ///<remarks>
  ///  Can be immediate child of <see cref="T:Aspose.Words.Body" />
  ///  node <b>only</b>
  ///  .
  ///</remarks>
  ///<dev>Implements public facade for encapsulated StructuredDocumentTag node.</dev>
  [DNTypeName('Aspose.Words.Markup.StructuredDocumentTagRangeStart')]
  DNStructuredDocumentTagRangeStart = interface(DNNode)
  ['{DCCDE17E-C127-37BC-A8A6-CB7DCFC24092}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_ChildNodes: DNNodeCollection;
    function get_LastChild: DNNode;
    function get_Level: DNMarkupLevel;
    function get_SdtType: DNSdtType;
    function get_Color: DDN.Aspose.Common.DNColor;
    procedure set_Color(value: DDN.Aspose.Common.DNColor);
    function get_Id: Int32;
    function get_LockContentControl: Boolean;
    procedure set_LockContentControl(value: Boolean);
    function get_LockContents: Boolean;
    procedure set_LockContents(value: Boolean);
    function get_IsShowingPlaceholderText: Boolean;
    procedure set_IsShowingPlaceholderText(value: Boolean);
    function get_Placeholder: DNBuildingBlock;
    function get_PlaceholderName: string;
    procedure set_PlaceholderName(value: string);
    function get_Tag: string;
    procedure set_Tag(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_XmlMapping: DNXmlMapping;
    function get_RangeEnd: DNStructuredDocumentTagRangeEnd;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns a live collection of child nodes that match the specified types.
    ///</summary>
    function GetChildNodes(nodeType: DNNodeType; isDeep: Boolean): DNNodeCollection;
    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the nodes.</param>
    ///<returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Provides support for the for each style iteration over the child nodes of this node.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    ///<summary>
    ///  Adds the specified node to the end of the stdContent range.
    ///</summary>
    ///  <param name="newChild">The node to add.</param>
    ///<returns>The node added.</returns>
    function AppendChild(newChild: DNNode): DNNode;
    ///<summary>
    ///  Removes all the nodes between this range start node and the range end node.
    ///</summary>
    procedure RemoveAllChildren;
    ///<summary>
    ///  Removes this range start and appropriate range end nodes of the structured document tag,
    ///  but keeps its content inside the document tree.
    ///</summary>
    procedure RemoveSelfOnly;
    ///<summary>
    ///  Creates a duplicate of the node.
    ///</summary>
    ///<remarks><p>This method serves as a copy constructor for nodes.
    ///  The cloned node has no parent, but belongs to the same document as the original node.</p>
    ///  <p>This method always performs a deep copy of the node. The <i>isCloneChildren</i> parameter
    ///  specifies whether to perform copy all child nodes as well.</p>
    ///</remarks>
    ///  <param name="isCloneChildren">True to recursively clone the subtree under the specified node;
    ///  false to clone only the node itself.</param>
    ///<returns>The cloned node.</returns>
    ///<dev>
    ///  You should use the <see cref="M:Aspose.Words.Node.Clone(System.Boolean,Aspose.Words.INodeCloningListener)" />
    ///  overload when
    ///  the node cloning is a part of another (usually composite) node cloning process.
    ///  And you should pass down the <see cref="T:Aspose.Words.INodeCloningListener" />
    ///  parameter in this case.
    ///</dev>
    function Clone(isCloneChildren: Boolean): DNNode;
    ///<summary>
    ///  Gets the text of this node and of all its children.
    ///</summary>
    ///<remarks><p>The returned string includes all control and special characters as described in <see cref="T:Aspose.Words.ControlChar" />
    ///  .</p>
    ///</remarks>
    function GetText: string;
    ///<summary>
    ///  Gets the first ancestor of the specified object type.
    ///</summary>
    ///  <param name="ancestorType">The object type of the ancestor to retrieve.</param>
    ///<returns>The ancestor of the specified type or null if no ancestor of this type was found.</returns>
    ///<remarks><p>The ancestor type matches if it is equal to ancestorType or derived from ancestorType.</p>
    ///</remarks>
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    ///<summary>
    ///  Gets the first ancestor of the specified <see cref="T:Aspose.Words.NodeType" />
    ///  .
    ///</summary>
    ///  <param name="ancestorType">The node type of the ancestor to retrieve.</param>
    ///<returns>The ancestor of the specified type or null if no ancestor of this type was found.</returns>
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    ///<summary>
    ///  Removes itself from the parent.
    ///</summary>
    procedure Remove;
    ///<summary>
    ///  Gets next node according to the pre-order tree traversal algorithm.
    ///</summary>
    ///  <param name="rootNode">The top node (limit) of traversal.</param>
    ///<returns>Next node in pre-order order. Null if reached the rootNode.</returns>
    function NextPreOrder(rootNode: DNNode): DNNode;
    ///<summary>
    ///  Gets the previous node according to the pre-order tree traversal algorithm.
    ///</summary>
    ///  <param name="rootNode">The top node (limit) of traversal.</param>
    ///<returns>Previous node in pre-order order. Null if reached the rootNode.</returns>
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    ///<summary>
    ///  Exports the content of the node into a string in the specified format.
    ///</summary>
    ///<returns>The content of the node in the specified format.</returns>
    function ToString(saveFormat: DNSaveFormat): string; overload;
    ///<summary>
    ///  Exports the content of the node into a string using the specified save options.
    ///</summary>
    ///  <param name="saveOptions">Specifies the options that control how the node is saved.</param>
    ///<returns>The content of the node in the specified format.</returns>
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Gets the type of this node.
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Gets all nodes between this range start node and the range end node.
    ///</summary>
    property ChildNodes: DNNodeCollection read get_ChildNodes;
    ///<summary>
    ///  Gets the last child in the stdContent range.
    ///</summary>
    ///<remarks>
    ///  If there is no last child node, a null is returned.
    ///</remarks>
    property LastChild: DNNode read get_LastChild;
    ///<summary>
    ///  Gets the level at which this structured document tag range start occurs in the document tree.
    ///</summary>
    property Level: DNMarkupLevel read get_Level;
    ///<summary>
    ///  Gets type of this structured document tag.
    ///</summary>
    property SdtType: DNSdtType read get_SdtType;
    ///<summary>
    ///  Gets or sets the color of the structured document tag.
    ///</summary>
    property Color: DDN.Aspose.Common.DNColor read get_Color write set_Color;
    ///<summary><para>Specifies a unique read-only persistent numerical Id for this structured document tag.</para></summary>
    ///<remarks><para> Id attribute shall follow these rules:
    ///<list type="bullet"><item>The document shall retain structured document tag ids only if the whole document
    ///  is cloned <see cref="M:Aspose.Words.Document.Clone" />
    ///  .</item>
    ///<item>During <see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean)" />
    ///  Id shall be retained if import does not cause conflicts with other structured document tag Ids in
    ///  the target document.</item>
    ///<item>
    ///  If multiple structured document tag nodes specify the same decimal number value for the Id attribute,
    ///  then the first structured document tag in the document shall maintain this original Id,
    ///  and all subsequent structured document tag nodes shall have new identifiers assigned to them when the document is loaded.
    ///</item>
    ///<item>During standalone structured document tag <see cref="M:Aspose.Words.Markup.StructuredDocumentTag.Clone(System.Boolean,Aspose.Words.INodeCloningListener)" />
    ///  operation new unique ID will be
    ///  generated for the cloned structured document tag node.</item>
    ///<item>
    ///  If Id is not specified in the source document, then the structured document tag node shall have a new unique identifier assigned
    ///  to it when the document is loaded.
    ///</item>
    ///</list>
    ///</para></remarks>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  When set to true, this property will prohibit a user from deleting this structured document tag.
    ///</summary>
    property LockContentControl: Boolean read get_LockContentControl write set_LockContentControl;
    ///<summary>
    ///  When set to true, this property will prohibit a user from editing the contents of this structured document tag.
    ///</summary>
    property LockContents: Boolean read get_LockContents write set_LockContents;
    ///<summary><para>
    ///  Specifies whether the content of this structured document tag shall be interpreted to contain
    ///  placeholder text (as opposed to regular text contents within the structured document tag).
    ///</para><para>
    ///  if set to true, this state shall be resumed (showing placeholder text) upon opening this document.
    ///</para></summary>
    property IsShowingPlaceholderText: Boolean read get_IsShowingPlaceholderText write set_IsShowingPlaceholderText;
    ///<summary>
    ///  Gets the <see cref="T:Aspose.Words.BuildingBlocks.BuildingBlock" />
    ///  containing placeholder text which should be displayed when
    ///  this structured document tag run contents are empty, the associated mapped XML element is empty as specified
    ///  via the <see cref="P:Aspose.Words.Markup.StructuredDocumentTagRangeStart.XmlMapping" />
    ///  element or the <see cref="P:Aspose.Words.Markup.StructuredDocumentTagRangeStart.IsShowingPlaceholderText" />
    ///  element is true.
    ///</summary>
    ///<remarks>Can be null, meaning that the placeholder is not applicable for this structured document tag.</remarks>
    property Placeholder: DNBuildingBlock read get_Placeholder;
    ///<summary><para>Gets or sets Name of the <see cref="T:Aspose.Words.BuildingBlocks.BuildingBlock" />
    ///  containing placeholder text.</para><para>
    ///  BuildingBlock with this name <see cref="P:Aspose.Words.BuildingBlocks.BuildingBlock.Name" />
    ///  has to be present in the <see cref="P:Aspose.Words.Document.GlossaryDocument" />
    ///  otherwise <see cref="T:System.InvalidOperationException" />
    ///  will occur.</para></summary>
    property PlaceholderName: string read get_PlaceholderName write set_PlaceholderName;
    ///<summary>
    ///  Specifies a tag associated with the current structured document tag node.
    ///  Can not be null.
    ///</summary>
    ///<remarks>
    ///  A tag is an arbitrary string which applications can associate with structured document
    ///  tag in order to identify it without providing a visible friendly name.
    ///</remarks>
    property Tag: string read get_Tag write set_Tag;
    ///<summary>
    ///  Specifies the friendly name associated with this structured document tag.
    ///  Can not be null.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets an object that represents the mapping of this structured document tag range to XML data
    ///  in a custom XML part of the current document.
    ///</summary>
    ///<remarks>
    ///  You can use the <see cref="M:Aspose.Words.Markup.XmlMapping.SetMapping(Aspose.Words.Markup.CustomXmlPart,System.String,System.String)" />
    ///  method of this
    ///  object to map a structured document tag range to XML data.
    ///</remarks>
    property XmlMapping: DNXmlMapping read get_XmlMapping;
    ///<summary>
    ///  Specifies end of range if the StructuredDocumentTag is a ranged structured document tag.
    ///  Otherwise returns null.
    ///</summary>
    property RangeEnd: DNStructuredDocumentTagRangeEnd read get_RangeEnd;
    ///<summary>
    ///  Gets the immediate parent of this node.
    ///</summary>
    ///<remarks><p>If a node has just been created and not yet added to the tree,
    ///  or if it has been removed from the tree, the parent is null.</p>
    ///</remarks>
    property ParentNode: DNCompositeNode read get_ParentNode;
    ///<summary>
    ///  Gets the document to which this node belongs.
    ///</summary>
    ///<remarks><p>The node always belongs to a document even if it has just been created
    ///  and not yet added to the tree, or if it has been removed from the tree.</p>
    ///</remarks>
    property Document: DNDocumentBase read get_Document;
    ///<summary>
    ///  Gets the node immediately preceding this node.
    ///</summary>
    ///<remarks>
    ///  If there is no preceding node, a null is returned.
    ///</remarks>
    property PreviousSibling: DNNode read get_PreviousSibling;
    ///<summary>
    ///  Gets the node immediately following this node.
    ///</summary>
    ///<remarks>
    ///  If there is no next node, a null is returned.
    ///</remarks>
    property NextSibling: DNNode read get_NextSibling;
    ///<summary>
    ///  Returns true if this node can contain other nodes.
    ///</summary>
    ///<value>This method returns false as Node cannot have child nodes.</value>
    property IsComposite: Boolean read get_IsComposite;
    ///<summary>
    ///  Returns a <b>Range</b>
    ///  object that represents the portion of a document that is contained in this node.
    ///</summary>
    property Range: DNRange read get_Range;
    ///<summary>
    ///  Specifies custom node identifier.
    ///</summary>
    ///<remarks><p>Default is zero.</p>
    ///  <p>This identifier can be set and used arbitrarily. For example, as a key to get external data.</p>
    ///  <p>Important note, specified value is not saved to an output file and exists only during the node lifetime.</p>
    ///</remarks>
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNStructuredDocumentTagRangeStart = class(TDNGenericImport<DNStructuredDocumentTagRangeStartClass, DNStructuredDocumentTagRangeStart>) end;

  //-------------namespace: Aspose.Words----------------
  DNSubDocumentClass = interface(DNNodeClass)
  ['{5F9EB952-50F4-5478-B813-52F5ACD88FFD}']
  end;

  ///<summary>
  ///  Represents a <b>SubDocument</b>
  ///  - which is a reference to an externally stored document.
  ///</summary>
  ///<remarks><para>In this version of Aspose.Words, <see cref="T:Aspose.Words.SubDocument" />
  ///  nodes do not provide public methods
  ///  and properties to create or modify a subdocument. In this version you are not able to instantiate
  ///  SubDocument nodes or modify existing except deleting them.</para><p><see cref="T:Aspose.Words.SubDocument" />
  ///  can only be a child of <see cref="T:Aspose.Words.Paragraph" />
  ///  .</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.SubDocument')]
  DNSubDocument = interface(DNNode)
  ['{3BCB0991-32DE-3A57-A001-EF4FE73ED2A4}']
  { getters & setters } 

    function get_NodeType: DNNodeType;
    function get_ParentNode: DNCompositeNode;
    function get_Document: DNDocumentBase;
    function get_PreviousSibling: DNNode;
    function get_NextSibling: DNNode;
    function get_IsComposite: Boolean;
    function get_Range: DNRange;
    function get_CustomNodeId: Int32;
    procedure set_CustomNodeId(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts a visitor.
    ///</summary>
    ///<remarks><p>Enumerates over this node and all of its children. Each node calls a corresponding method on DocumentVisitor.</p>
    ///  <p>For more info see the Visitor design pattern.</p>
    ///</remarks>
    ///  <param name="visitor">The visitor that will visit the nodes.</param>
    ///<returns>True if all nodes were visited; false if DocumentVisitor stopped the operation before visiting all nodes.</returns>
    function Accept(visitor: DNDocumentVisitor): Boolean;
    ///<summary>
    ///  Creates a duplicate of the node.
    ///</summary>
    ///<remarks><p>This method serves as a copy constructor for nodes.
    ///  The cloned node has no parent, but belongs to the same document as the original node.</p>
    ///  <p>This method always performs a deep copy of the node. The <i>isCloneChildren</i> parameter
    ///  specifies whether to perform copy all child nodes as well.</p>
    ///</remarks>
    ///  <param name="isCloneChildren">True to recursively clone the subtree under the specified node;
    ///  false to clone only the node itself.</param>
    ///<returns>The cloned node.</returns>
    ///<dev>
    ///  You should use the <see cref="M:Aspose.Words.Node.Clone(System.Boolean,Aspose.Words.INodeCloningListener)" />
    ///  overload when
    ///  the node cloning is a part of another (usually composite) node cloning process.
    ///  And you should pass down the <see cref="T:Aspose.Words.INodeCloningListener" />
    ///  parameter in this case.
    ///</dev>
    function Clone(isCloneChildren: Boolean): DNNode;
    ///<summary>
    ///  Gets the text of this node and of all its children.
    ///</summary>
    ///<remarks><p>The returned string includes all control and special characters as described in <see cref="T:Aspose.Words.ControlChar" />
    ///  .</p>
    ///</remarks>
    function GetText: string;
    ///<summary>
    ///  Gets the first ancestor of the specified object type.
    ///</summary>
    ///  <param name="ancestorType">The object type of the ancestor to retrieve.</param>
    ///<returns>The ancestor of the specified type or null if no ancestor of this type was found.</returns>
    ///<remarks><p>The ancestor type matches if it is equal to ancestorType or derived from ancestorType.</p>
    ///</remarks>
    function GetAncestor(ancestorType: DDN.mscorlib.DNType): DNCompositeNode; overload;
    ///<summary>
    ///  Gets the first ancestor of the specified <see cref="T:Aspose.Words.NodeType" />
    ///  .
    ///</summary>
    ///  <param name="ancestorType">The node type of the ancestor to retrieve.</param>
    ///<returns>The ancestor of the specified type or null if no ancestor of this type was found.</returns>
    function GetAncestor(ancestorType: DNNodeType): DNCompositeNode; overload;
    ///<summary>
    ///  Removes itself from the parent.
    ///</summary>
    procedure Remove;
    ///<summary>
    ///  Gets next node according to the pre-order tree traversal algorithm.
    ///</summary>
    ///  <param name="rootNode">The top node (limit) of traversal.</param>
    ///<returns>Next node in pre-order order. Null if reached the rootNode.</returns>
    function NextPreOrder(rootNode: DNNode): DNNode;
    ///<summary>
    ///  Gets the previous node according to the pre-order tree traversal algorithm.
    ///</summary>
    ///  <param name="rootNode">The top node (limit) of traversal.</param>
    ///<returns>Previous node in pre-order order. Null if reached the rootNode.</returns>
    function PreviousPreOrder(rootNode: DNNode): DNNode;
    ///<summary>
    ///  Exports the content of the node into a string in the specified format.
    ///</summary>
    ///<returns>The content of the node in the specified format.</returns>
    function ToString(saveFormat: DNSaveFormat): string; overload;
    ///<summary>
    ///  Exports the content of the node into a string using the specified save options.
    ///</summary>
    ///  <param name="saveOptions">Specifies the options that control how the node is saved.</param>
    ///<returns>The content of the node in the specified format.</returns>
    function ToString(saveOptions: DNSaveOptions): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  { propertys } 

    ///<summary>
    ///  Returns <b>NodeType.SubDocument</b>
    ///</summary>
    property NodeType: DNNodeType read get_NodeType;
    ///<summary>
    ///  Gets the immediate parent of this node.
    ///</summary>
    ///<remarks><p>If a node has just been created and not yet added to the tree,
    ///  or if it has been removed from the tree, the parent is null.</p>
    ///</remarks>
    property ParentNode: DNCompositeNode read get_ParentNode;
    ///<summary>
    ///  Gets the document to which this node belongs.
    ///</summary>
    ///<remarks><p>The node always belongs to a document even if it has just been created
    ///  and not yet added to the tree, or if it has been removed from the tree.</p>
    ///</remarks>
    property Document: DNDocumentBase read get_Document;
    ///<summary>
    ///  Gets the node immediately preceding this node.
    ///</summary>
    ///<remarks>
    ///  If there is no preceding node, a null is returned.
    ///</remarks>
    property PreviousSibling: DNNode read get_PreviousSibling;
    ///<summary>
    ///  Gets the node immediately following this node.
    ///</summary>
    ///<remarks>
    ///  If there is no next node, a null is returned.
    ///</remarks>
    property NextSibling: DNNode read get_NextSibling;
    ///<summary>
    ///  Returns true if this node can contain other nodes.
    ///</summary>
    ///<value>This method returns false as Node cannot have child nodes.</value>
    property IsComposite: Boolean read get_IsComposite;
    ///<summary>
    ///  Returns a <b>Range</b>
    ///  object that represents the portion of a document that is contained in this node.
    ///</summary>
    property Range: DNRange read get_Range;
    ///<summary>
    ///  Specifies custom node identifier.
    ///</summary>
    ///<remarks><p>Default is zero.</p>
    ///  <p>This identifier can be set and used arbitrarily. For example, as a key to get external data.</p>
    ///  <p>Important note, specified value is not saved to an output file and exists only during the node lifetime.</p>
    ///</remarks>
    property CustomNodeId: Int32 read get_CustomNodeId write set_CustomNodeId;
  end;

  TDNSubDocument = class(TDNGenericImport<DNSubDocumentClass, DNSubDocument>) end;

  //-------------namespace: Aspose.Words----------------
  DNNodeChangingArgsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{93DF10FD-0E44-514F-B078-9195980ADD4F}']
  end;

  ///<summary>
  ///  Provides data for methods of the <see cref="T:Aspose.Words.INodeChangingCallback" />
  ///  interface.
  ///<seealso cref="T:Aspose.Words.DocumentBase" />
  ///<seealso cref="T:Aspose.Words.INodeChangingCallback" />
  ///<seealso cref="T:Aspose.Words.NodeChangingAction" />
  ///</summary>
  [DNTypeName('Aspose.Words.NodeChangingArgs')]
  DNNodeChangingArgs = interface(DDN.mscorlib.DNObject)
  ['{635F9463-EF4C-3295-8013-83177CB6115C}']
  { getters & setters } 

    function get_Node: DNNode;
    function get_OldParent: DNNode;
    function get_NewParent: DNNode;
    function get_Action: DNNodeChangingAction;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the <see cref="P:Aspose.Words.NodeChangingArgs.Node" />
    ///  that is being added or removed.
    ///</summary>
    property Node: DNNode read get_Node;
    ///<summary>
    ///  Gets the node's parent before the operation began.
    ///</summary>
    property OldParent: DNNode read get_OldParent;
    ///<summary>
    ///  Gets the node's parent that will be set after the operation completes.
    ///</summary>
    property NewParent: DNNode read get_NewParent;
    ///<summary>
    ///  Gets a value indicating what type of node change event is occurring.
    ///</summary>
    property Action: DNNodeChangingAction read get_Action;
  end;

  TDNNodeChangingArgs = class(TDNGenericImport<DNNodeChangingArgsClass, DNNodeChangingArgs>) end;

  //-------------namespace: Aspose.Words----------------
  DNNodeCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E0848A83-D237-5CDE-9740-505DD1C7A8BD}']
  end;

  ///<summary>
  ///  Represents a collection of nodes of a specific type.
  ///</summary>
  ///<remarks><p><b>NodeCollection</b>
  ///  does not own the nodes it contains, rather, is just a selection of nodes
  ///  of the specified type, but the nodes are stored in the tree under their respective parent nodes.</p>
  ///  <p><b>NodeCollection</b>
  ///  supports indexed access, iteration and provides add and remove methods.</p>
  ///  <p>The <b>NodeCollection</b>
  ///  collection is "live", i.e. changes to the children of the node object
  ///  that it was created from are immediately reflected in the nodes returned by the <b>NodeCollection</b>
  ///  properties and methods.</p>
  ///  <p><b>NodeCollection</b>
  ///  is returned by <see cref="M:Aspose.Words.CompositeNode.GetChildNodes(Aspose.Words.NodeType,System.Boolean)" />
  ///  and also serves as a base class for typed node collections such as <see cref="T:Aspose.Words.SectionCollection" />
  ///  ,
  ///<see cref="T:Aspose.Words.ParagraphCollection" />
  ///  etc.</p>
  ///  <p><b>NodeCollection</b>
  ///  can be "flat" and contain only immediate children of the node it was created
  ///  from, or it can be "deep" and contain all descendant children.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.NodeCollection')]
  DNNodeCollection = interface(DDN.mscorlib.DNObject)
  ['{812B3881-C65B-3C5D-A865-04ED8F02B9FF}']
  { getters & setters } 

    function get_Item(index: Int32): DNNode;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds a node to the end of the collection.
    ///</summary>
    ///<remarks><p>The node is inserted as a child into the node object from which the collection was created.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="node">The node to be added to the end of the collection.</param>
    ///<exception cref="T:System.NotSupportedException">The <b>NodeCollection</b>
    ///  is a "deep" collection.</exception>
    procedure Add(node: DNNode);
    ///<summary>
    ///  Inserts a node into the collection at the specified index.
    ///</summary>
    ///<remarks><p>The node is inserted as a child into the node object from which the collection was created.</p>
    ///  <p>If the index is equal to or greater than Count, the node is added at the end of the collection.</p>
    ///  <p>If the index is negative and its absolute value is greater than Count, the node is added at the end of the collection.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="index">The zero-based index of the node.
    ///  Negative indexes are allowed and indicate access from the back of the list.
    ///  For example -1 means the last node, -2 means the second before last and so on.</param>
    ///  <param name="node">The node to insert.</param>
    ///<exception cref="T:System.NotSupportedException">The <b>NodeCollection</b>
    ///  is a "deep" collection.</exception>
    procedure Insert(index: Int32; node: DNNode);
    ///<summary>
    ///  Removes the node from the collection and from the document.
    ///</summary>
    ///  <param name="node">The node to remove.</param>
    procedure Remove(node: DNNode);
    ///<summary>
    ///  Removes the node at the specified index from the collection and from the document.
    ///</summary>
    ///  <param name="index">The zero-based index of the node.
    ///  Negative indexes are allowed and indicate access from the back of the list.
    ///  For example -1 means the last node, -2 means the second before last and so on.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all nodes from this collection and from the document.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Determines whether a node is in the collection.
    ///</summary>
    ///<remarks><p>This method performs a linear search; therefore, the average execution time is proportional to Count.</p>
    ///</remarks>
    ///  <param name="node">The node to locate.</param>
    ///<returns>True if item is found in the collection; otherwise, false.</returns>
    function &Contains(node: DNNode): Boolean;
    ///<summary>
    ///  Returns the zero-based index of the specified node.
    ///</summary>
    ///  <param name="node">The node to locate.</param>
    ///<returns>The zero-based index of the node within the collection, if found; otherwise, -1.</returns>
    ///<remarks><p>This method performs a linear search; therefore, the average execution time is proportional to Count.</p>
    ///</remarks>
    function IndexOf(node: DNNode): Int32;
    ///<summary>
    ///  Copies all nodes from the collection to a new array of nodes.
    ///</summary>
    ///<remarks><p>You should not be adding/removing nodes while iterating over a collection
    ///  of nodes because it invalidates the iterator and requires refreshes for live collections.</p>
    ///  <p>To be able to add/remove nodes during iteration, use this method to copy
    ///  nodes into a fixed-size array and then iterate over the array.</p>
    ///</remarks>
    ///<returns>An array of nodes.</returns>
    function ToArray: TArray<DNNode>;
    ///<summary>
    ///  Provides a simple "foreach" style iteration over the collection of nodes.
    ///</summary>
    ///<returns>An IEnumerator.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNNode read get_Item; default;
    ///<summary>
    ///  Gets the number of nodes in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNNodeCollection = class(TDNGenericImport<DNNodeCollectionClass, DNNodeCollection>) end;

  //-------------namespace: Aspose.Words.BuildingBlocks----------------
  DNBuildingBlockCollectionClass = interface(DNNodeCollectionClass)
  ['{4DB2D1FF-A18F-5074-8D27-E384840506FF}']
  end;

  ///<summary>
  ///  A collection of <see cref="T:Aspose.Words.BuildingBlocks.BuildingBlock" />
  ///  objects in the document.
  ///</summary>
  ///<remarks><para>You do not create instances of this class directly. To access a collection
  ///  of building blocks use the <see cref="P:Aspose.Words.BuildingBlocks.GlossaryDocument.BuildingBlocks" />
  ///  property.</para><seealso cref="T:Aspose.Words.BuildingBlocks.GlossaryDocument" />
  ///<seealso cref="P:Aspose.Words.BuildingBlocks.GlossaryDocument.BuildingBlocks" />
  ///<seealso cref="T:Aspose.Words.BuildingBlocks.BuildingBlock" />
  ///</remarks>
  [DNTypeName('Aspose.Words.BuildingBlocks.BuildingBlockCollection')]
  DNBuildingBlockCollection = interface(DNNodeCollection)
  ['{3DFEC7B2-8098-3897-8A80-E18F05A3DFFD}']
  { getters & setters } 

    function get_Item(index: Int32): DNBuildingBlock;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Copies all building blocks from the collection to a new array of building blocks.
    ///</summary>
    ///<returns>An array of building blocks.</returns>
    function ToArray: TArray<DNBuildingBlock>;
    ///<summary>
    ///  Adds a node to the end of the collection.
    ///</summary>
    ///<remarks><p>The node is inserted as a child into the node object from which the collection was created.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="node">The node to be added to the end of the collection.</param>
    ///<exception cref="T:System.NotSupportedException">The <b>NodeCollection</b>
    ///  is a "deep" collection.</exception>
    procedure Add(node: DNNode);
    ///<summary>
    ///  Inserts a node into the collection at the specified index.
    ///</summary>
    ///<remarks><p>The node is inserted as a child into the node object from which the collection was created.</p>
    ///  <p>If the index is equal to or greater than Count, the node is added at the end of the collection.</p>
    ///  <p>If the index is negative and its absolute value is greater than Count, the node is added at the end of the collection.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="index">The zero-based index of the node.
    ///  Negative indexes are allowed and indicate access from the back of the list.
    ///  For example -1 means the last node, -2 means the second before last and so on.</param>
    ///  <param name="node">The node to insert.</param>
    ///<exception cref="T:System.NotSupportedException">The <b>NodeCollection</b>
    ///  is a "deep" collection.</exception>
    procedure Insert(index: Int32; node: DNNode);
    ///<summary>
    ///  Removes the node from the collection and from the document.
    ///</summary>
    ///  <param name="node">The node to remove.</param>
    procedure Remove(node: DNNode);
    ///<summary>
    ///  Removes the node at the specified index from the collection and from the document.
    ///</summary>
    ///  <param name="index">The zero-based index of the node.
    ///  Negative indexes are allowed and indicate access from the back of the list.
    ///  For example -1 means the last node, -2 means the second before last and so on.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all nodes from this collection and from the document.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Determines whether a node is in the collection.
    ///</summary>
    ///<remarks><p>This method performs a linear search; therefore, the average execution time is proportional to Count.</p>
    ///</remarks>
    ///  <param name="node">The node to locate.</param>
    ///<returns>True if item is found in the collection; otherwise, false.</returns>
    function &Contains(node: DNNode): Boolean;
    ///<summary>
    ///  Returns the zero-based index of the specified node.
    ///</summary>
    ///  <param name="node">The node to locate.</param>
    ///<returns>The zero-based index of the node within the collection, if found; otherwise, -1.</returns>
    ///<remarks><p>This method performs a linear search; therefore, the average execution time is proportional to Count.</p>
    ///</remarks>
    function IndexOf(node: DNNode): Int32;
    ///<summary>
    ///  Provides a simple "foreach" style iteration over the collection of nodes.
    ///</summary>
    ///<returns>An IEnumerator.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNBuildingBlock read get_Item; default;
    ///<summary>
    ///  Gets the number of nodes in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNBuildingBlockCollection = class(TDNGenericImport<DNBuildingBlockCollectionClass, DNBuildingBlockCollection>) end;

  //-------------namespace: Aspose.Words----------------
  DNCommentCollectionClass = interface(DNNodeCollectionClass)
  ['{03C809E5-8C58-5C24-9274-070AC5C63D47}']
  end;

  ///<summary>
  ///  Provides typed access to a collection of <see cref="T:Aspose.Words.Comment" />
  ///  nodes.
  ///</summary>
  [DNTypeName('Aspose.Words.CommentCollection')]
  DNCommentCollection = interface(DNNodeCollection)
  ['{AE0C4514-54AC-3A56-ABDE-E14E6BE0769F}']
  { getters & setters } 

    function get_Item(index: Int32): DNComment;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds a node to the end of the collection.
    ///</summary>
    ///<remarks><p>The node is inserted as a child into the node object from which the collection was created.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="node">The node to be added to the end of the collection.</param>
    ///<exception cref="T:System.NotSupportedException">The <b>NodeCollection</b>
    ///  is a "deep" collection.</exception>
    procedure Add(node: DNNode);
    ///<summary>
    ///  Inserts a node into the collection at the specified index.
    ///</summary>
    ///<remarks><p>The node is inserted as a child into the node object from which the collection was created.</p>
    ///  <p>If the index is equal to or greater than Count, the node is added at the end of the collection.</p>
    ///  <p>If the index is negative and its absolute value is greater than Count, the node is added at the end of the collection.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="index">The zero-based index of the node.
    ///  Negative indexes are allowed and indicate access from the back of the list.
    ///  For example -1 means the last node, -2 means the second before last and so on.</param>
    ///  <param name="node">The node to insert.</param>
    ///<exception cref="T:System.NotSupportedException">The <b>NodeCollection</b>
    ///  is a "deep" collection.</exception>
    procedure Insert(index: Int32; node: DNNode);
    ///<summary>
    ///  Removes the node from the collection and from the document.
    ///</summary>
    ///  <param name="node">The node to remove.</param>
    procedure Remove(node: DNNode);
    ///<summary>
    ///  Removes the node at the specified index from the collection and from the document.
    ///</summary>
    ///  <param name="index">The zero-based index of the node.
    ///  Negative indexes are allowed and indicate access from the back of the list.
    ///  For example -1 means the last node, -2 means the second before last and so on.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all nodes from this collection and from the document.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Determines whether a node is in the collection.
    ///</summary>
    ///<remarks><p>This method performs a linear search; therefore, the average execution time is proportional to Count.</p>
    ///</remarks>
    ///  <param name="node">The node to locate.</param>
    ///<returns>True if item is found in the collection; otherwise, false.</returns>
    function &Contains(node: DNNode): Boolean;
    ///<summary>
    ///  Returns the zero-based index of the specified node.
    ///</summary>
    ///  <param name="node">The node to locate.</param>
    ///<returns>The zero-based index of the node within the collection, if found; otherwise, -1.</returns>
    ///<remarks><p>This method performs a linear search; therefore, the average execution time is proportional to Count.</p>
    ///</remarks>
    function IndexOf(node: DNNode): Int32;
    ///<summary>
    ///  Copies all nodes from the collection to a new array of nodes.
    ///</summary>
    ///<remarks><p>You should not be adding/removing nodes while iterating over a collection
    ///  of nodes because it invalidates the iterator and requires refreshes for live collections.</p>
    ///  <p>To be able to add/remove nodes during iteration, use this method to copy
    ///  nodes into a fixed-size array and then iterate over the array.</p>
    ///</remarks>
    ///<returns>An array of nodes.</returns>
    function ToArray: TArray<DNNode>;
    ///<summary>
    ///  Provides a simple "foreach" style iteration over the collection of nodes.
    ///</summary>
    ///<returns>An IEnumerator.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNComment read get_Item; default;
    ///<summary>
    ///  Gets the number of nodes in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNCommentCollection = class(TDNGenericImport<DNCommentCollectionClass, DNCommentCollection>) end;

  //-------------namespace: Aspose.Words----------------
  DNHeaderFooterCollectionClass = interface(DNNodeCollectionClass)
  ['{958D0956-310B-56A5-B9AC-21D1ECE6A4A0}']
  end;

  ///<summary>
  ///  Provides typed access to <see cref="T:Aspose.Words.HeaderFooter" />
  ///  nodes of a <b>Section</b>
  ///  .
  ///</summary>
  ///<remarks><p>There can be maximum of one <b>HeaderFooter</b>
  ///</p>
  ///  of each <see cref="T:Aspose.Words.HeaderFooterType" />
  ///  per
  ///<b>Section</b>
  ///  .
  ///  <p><b>HeaderFooter</b>
  ///  objects can occur in any order in the collection.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.HeaderFooterCollection')]
  DNHeaderFooterCollection = interface(DNNodeCollection)
  ['{474E72BF-A50C-35A0-BC71-ED6E60DA716B}']
  { getters & setters } 

    function get_Item(index: Int32): DNHeaderFooter; overload;
    function get_Item(headerFooterType: DNHeaderFooterType): DNHeaderFooter; overload;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Links or unlinks all headers and footers to the corresponding
    ///  headers and footers in the previous section.
    ///</summary>
    ///<remarks><p>If any of the headers or footers do not exist, creates them automatically.</p>
    ///</remarks>
    ///  <param name="isLinkToPrevious">True to link the headers and footers to the previous section;
    ///  false to unlink them.</param>
    procedure LinkToPrevious(isLinkToPrevious: Boolean); overload;
    ///<summary>
    ///  Links or unlinks the specified header or footer to the corresponding
    ///  header or footer in the previous section.
    ///</summary>
    ///<remarks><p>If the header or footer of the specified type does not exist, creates it automatically.</p>
    ///</remarks>
    ///  <param name="headerFooterType">A <see cref="T:Aspose.Words.HeaderFooterType" />
    ///  value
    ///  that specifies the header or footer to link/unlink.</param>
    ///  <param name="isLinkToPrevious">True to link the header or footer to the previous section;
    ///  false to unlink.</param>
    procedure LinkToPrevious(headerFooterType: DNHeaderFooterType; isLinkToPrevious: Boolean); overload;
    ///<summary>
    ///  Copies all <c>HeaderFoorter</c>s from the collection to a new array of <c>HeaderFoorter</c>s.
    ///</summary>
    ///<returns>An array of <c>HeaderFoorter</c>s.</returns>
    function ToArray: TArray<DNHeaderFooter>;
    ///<summary>
    ///  Adds a node to the end of the collection.
    ///</summary>
    ///<remarks><p>The node is inserted as a child into the node object from which the collection was created.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="node">The node to be added to the end of the collection.</param>
    ///<exception cref="T:System.NotSupportedException">The <b>NodeCollection</b>
    ///  is a "deep" collection.</exception>
    procedure Add(node: DNNode);
    ///<summary>
    ///  Inserts a node into the collection at the specified index.
    ///</summary>
    ///<remarks><p>The node is inserted as a child into the node object from which the collection was created.</p>
    ///  <p>If the index is equal to or greater than Count, the node is added at the end of the collection.</p>
    ///  <p>If the index is negative and its absolute value is greater than Count, the node is added at the end of the collection.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="index">The zero-based index of the node.
    ///  Negative indexes are allowed and indicate access from the back of the list.
    ///  For example -1 means the last node, -2 means the second before last and so on.</param>
    ///  <param name="node">The node to insert.</param>
    ///<exception cref="T:System.NotSupportedException">The <b>NodeCollection</b>
    ///  is a "deep" collection.</exception>
    procedure Insert(index: Int32; node: DNNode);
    ///<summary>
    ///  Removes the node from the collection and from the document.
    ///</summary>
    ///  <param name="node">The node to remove.</param>
    procedure Remove(node: DNNode);
    ///<summary>
    ///  Removes the node at the specified index from the collection and from the document.
    ///</summary>
    ///  <param name="index">The zero-based index of the node.
    ///  Negative indexes are allowed and indicate access from the back of the list.
    ///  For example -1 means the last node, -2 means the second before last and so on.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all nodes from this collection and from the document.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Determines whether a node is in the collection.
    ///</summary>
    ///<remarks><p>This method performs a linear search; therefore, the average execution time is proportional to Count.</p>
    ///</remarks>
    ///  <param name="node">The node to locate.</param>
    ///<returns>True if item is found in the collection; otherwise, false.</returns>
    function &Contains(node: DNNode): Boolean;
    ///<summary>
    ///  Returns the zero-based index of the specified node.
    ///</summary>
    ///  <param name="node">The node to locate.</param>
    ///<returns>The zero-based index of the node within the collection, if found; otherwise, -1.</returns>
    ///<remarks><p>This method performs a linear search; therefore, the average execution time is proportional to Count.</p>
    ///</remarks>
    function IndexOf(node: DNNode): Int32;
    ///<summary>
    ///  Provides a simple "foreach" style iteration over the collection of nodes.
    ///</summary>
    ///<returns>An IEnumerator.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNHeaderFooter read get_Item; default;
    property Item[headerFooterType: DNHeaderFooterType]: DNHeaderFooter read get_Item; default;
    ///<summary>
    ///  Gets the number of nodes in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNHeaderFooterCollection = class(TDNGenericImport<DNHeaderFooterCollectionClass, DNHeaderFooterCollection>) end;

  //-------------namespace: Aspose.Words----------------
  DNParagraphCollectionClass = interface(DNNodeCollectionClass)
  ['{4B339BA6-783A-50F6-824C-6077CAC5DE86}']
  end;

  ///<summary>
  ///  Provides typed access to a collection of <see cref="T:Aspose.Words.Paragraph" />
  ///  nodes.
  ///</summary>
  [DNTypeName('Aspose.Words.ParagraphCollection')]
  DNParagraphCollection = interface(DNNodeCollection)
  ['{E0003EAB-8A3C-3AA0-80D3-32384B9C05AB}']
  { getters & setters } 

    function get_Item(index: Int32): DNParagraph;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Copies all paragraphs from the collection to a new array of paragraphs.
    ///</summary>
    ///<returns>An array of paragraphs.</returns>
    function ToArray: TArray<DNParagraph>;
    ///<summary>
    ///  Adds a node to the end of the collection.
    ///</summary>
    ///<remarks><p>The node is inserted as a child into the node object from which the collection was created.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="node">The node to be added to the end of the collection.</param>
    ///<exception cref="T:System.NotSupportedException">The <b>NodeCollection</b>
    ///  is a "deep" collection.</exception>
    procedure Add(node: DNNode);
    ///<summary>
    ///  Inserts a node into the collection at the specified index.
    ///</summary>
    ///<remarks><p>The node is inserted as a child into the node object from which the collection was created.</p>
    ///  <p>If the index is equal to or greater than Count, the node is added at the end of the collection.</p>
    ///  <p>If the index is negative and its absolute value is greater than Count, the node is added at the end of the collection.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="index">The zero-based index of the node.
    ///  Negative indexes are allowed and indicate access from the back of the list.
    ///  For example -1 means the last node, -2 means the second before last and so on.</param>
    ///  <param name="node">The node to insert.</param>
    ///<exception cref="T:System.NotSupportedException">The <b>NodeCollection</b>
    ///  is a "deep" collection.</exception>
    procedure Insert(index: Int32; node: DNNode);
    ///<summary>
    ///  Removes the node from the collection and from the document.
    ///</summary>
    ///  <param name="node">The node to remove.</param>
    procedure Remove(node: DNNode);
    ///<summary>
    ///  Removes the node at the specified index from the collection and from the document.
    ///</summary>
    ///  <param name="index">The zero-based index of the node.
    ///  Negative indexes are allowed and indicate access from the back of the list.
    ///  For example -1 means the last node, -2 means the second before last and so on.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all nodes from this collection and from the document.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Determines whether a node is in the collection.
    ///</summary>
    ///<remarks><p>This method performs a linear search; therefore, the average execution time is proportional to Count.</p>
    ///</remarks>
    ///  <param name="node">The node to locate.</param>
    ///<returns>True if item is found in the collection; otherwise, false.</returns>
    function &Contains(node: DNNode): Boolean;
    ///<summary>
    ///  Returns the zero-based index of the specified node.
    ///</summary>
    ///  <param name="node">The node to locate.</param>
    ///<returns>The zero-based index of the node within the collection, if found; otherwise, -1.</returns>
    ///<remarks><p>This method performs a linear search; therefore, the average execution time is proportional to Count.</p>
    ///</remarks>
    function IndexOf(node: DNNode): Int32;
    ///<summary>
    ///  Provides a simple "foreach" style iteration over the collection of nodes.
    ///</summary>
    ///<returns>An IEnumerator.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNParagraph read get_Item; default;
    ///<summary>
    ///  Gets the number of nodes in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNParagraphCollection = class(TDNGenericImport<DNParagraphCollectionClass, DNParagraphCollection>) end;

  //-------------namespace: Aspose.Words----------------
  DNRunCollectionClass = interface(DNNodeCollectionClass)
  ['{47C6DC46-64CB-53BE-B595-CC3B7F675BAA}']
  end;

  ///<summary>
  ///  Provides typed access to a collection of <see cref="T:Aspose.Words.Run" />
  ///  nodes.
  ///</summary>
  [DNTypeName('Aspose.Words.RunCollection')]
  DNRunCollection = interface(DNNodeCollection)
  ['{3D12B004-D86D-35F2-A0C2-C209BBA1170A}']
  { getters & setters } 

    function get_Item(index: Int32): DNRun;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Copies all runs from the collection to a new array of runs.
    ///</summary>
    ///<returns>An array of runs.</returns>
    function ToArray: TArray<DNRun>;
    ///<summary>
    ///  Adds a node to the end of the collection.
    ///</summary>
    ///<remarks><p>The node is inserted as a child into the node object from which the collection was created.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="node">The node to be added to the end of the collection.</param>
    ///<exception cref="T:System.NotSupportedException">The <b>NodeCollection</b>
    ///  is a "deep" collection.</exception>
    procedure Add(node: DNNode);
    ///<summary>
    ///  Inserts a node into the collection at the specified index.
    ///</summary>
    ///<remarks><p>The node is inserted as a child into the node object from which the collection was created.</p>
    ///  <p>If the index is equal to or greater than Count, the node is added at the end of the collection.</p>
    ///  <p>If the index is negative and its absolute value is greater than Count, the node is added at the end of the collection.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="index">The zero-based index of the node.
    ///  Negative indexes are allowed and indicate access from the back of the list.
    ///  For example -1 means the last node, -2 means the second before last and so on.</param>
    ///  <param name="node">The node to insert.</param>
    ///<exception cref="T:System.NotSupportedException">The <b>NodeCollection</b>
    ///  is a "deep" collection.</exception>
    procedure Insert(index: Int32; node: DNNode);
    ///<summary>
    ///  Removes the node from the collection and from the document.
    ///</summary>
    ///  <param name="node">The node to remove.</param>
    procedure Remove(node: DNNode);
    ///<summary>
    ///  Removes the node at the specified index from the collection and from the document.
    ///</summary>
    ///  <param name="index">The zero-based index of the node.
    ///  Negative indexes are allowed and indicate access from the back of the list.
    ///  For example -1 means the last node, -2 means the second before last and so on.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all nodes from this collection and from the document.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Determines whether a node is in the collection.
    ///</summary>
    ///<remarks><p>This method performs a linear search; therefore, the average execution time is proportional to Count.</p>
    ///</remarks>
    ///  <param name="node">The node to locate.</param>
    ///<returns>True if item is found in the collection; otherwise, false.</returns>
    function &Contains(node: DNNode): Boolean;
    ///<summary>
    ///  Returns the zero-based index of the specified node.
    ///</summary>
    ///  <param name="node">The node to locate.</param>
    ///<returns>The zero-based index of the node within the collection, if found; otherwise, -1.</returns>
    ///<remarks><p>This method performs a linear search; therefore, the average execution time is proportional to Count.</p>
    ///</remarks>
    function IndexOf(node: DNNode): Int32;
    ///<summary>
    ///  Provides a simple "foreach" style iteration over the collection of nodes.
    ///</summary>
    ///<returns>An IEnumerator.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNRun read get_Item; default;
    ///<summary>
    ///  Gets the number of nodes in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNRunCollection = class(TDNGenericImport<DNRunCollectionClass, DNRunCollection>) end;

  //-------------namespace: Aspose.Words----------------
  DNSectionCollectionClass = interface(DNNodeCollectionClass)
  ['{D045BE58-54FD-52CC-8609-D88EB445CA85}']
  end;

  ///<summary>
  ///  A collection of <b>Section</b>
  ///  objects in the document.
  ///</summary>
  ///<remarks><p>A Microsoft Word document can contain multiple sections. To create a section in a Microsoft Word,
  ///  select the Insert/Break command and select a break type. The break specifies whether section starts
  ///  on a new page or on the same page.</p>
  ///  <p>Programmatically inserting and removing sections can be used to customize documents produced
  ///  during mail merge. If a document needs to have different content or parts of the
  ///  content depending on some criteria, then you can create a "master" document that contains
  ///  multiple sections and delete some of the sections before or after mail merge.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.SectionCollection')]
  DNSectionCollection = interface(DNNodeCollection)
  ['{AD204A75-4D86-312D-BA85-38589B19CDA8}']
  { getters & setters } 

    function get_Item(index: Int32): DNSection;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Copies all sections from the collection to a new array of sections.
    ///</summary>
    ///<returns>An array of sections.</returns>
    function ToArray: TArray<DNSection>;
    ///<summary>
    ///  Adds a node to the end of the collection.
    ///</summary>
    ///<remarks><p>The node is inserted as a child into the node object from which the collection was created.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="node">The node to be added to the end of the collection.</param>
    ///<exception cref="T:System.NotSupportedException">The <b>NodeCollection</b>
    ///  is a "deep" collection.</exception>
    procedure Add(node: DNNode);
    ///<summary>
    ///  Inserts a node into the collection at the specified index.
    ///</summary>
    ///<remarks><p>The node is inserted as a child into the node object from which the collection was created.</p>
    ///  <p>If the index is equal to or greater than Count, the node is added at the end of the collection.</p>
    ///  <p>If the index is negative and its absolute value is greater than Count, the node is added at the end of the collection.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="index">The zero-based index of the node.
    ///  Negative indexes are allowed and indicate access from the back of the list.
    ///  For example -1 means the last node, -2 means the second before last and so on.</param>
    ///  <param name="node">The node to insert.</param>
    ///<exception cref="T:System.NotSupportedException">The <b>NodeCollection</b>
    ///  is a "deep" collection.</exception>
    procedure Insert(index: Int32; node: DNNode);
    ///<summary>
    ///  Removes the node from the collection and from the document.
    ///</summary>
    ///  <param name="node">The node to remove.</param>
    procedure Remove(node: DNNode);
    ///<summary>
    ///  Removes the node at the specified index from the collection and from the document.
    ///</summary>
    ///  <param name="index">The zero-based index of the node.
    ///  Negative indexes are allowed and indicate access from the back of the list.
    ///  For example -1 means the last node, -2 means the second before last and so on.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all nodes from this collection and from the document.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Determines whether a node is in the collection.
    ///</summary>
    ///<remarks><p>This method performs a linear search; therefore, the average execution time is proportional to Count.</p>
    ///</remarks>
    ///  <param name="node">The node to locate.</param>
    ///<returns>True if item is found in the collection; otherwise, false.</returns>
    function &Contains(node: DNNode): Boolean;
    ///<summary>
    ///  Returns the zero-based index of the specified node.
    ///</summary>
    ///  <param name="node">The node to locate.</param>
    ///<returns>The zero-based index of the node within the collection, if found; otherwise, -1.</returns>
    ///<remarks><p>This method performs a linear search; therefore, the average execution time is proportional to Count.</p>
    ///</remarks>
    function IndexOf(node: DNNode): Int32;
    ///<summary>
    ///  Provides a simple "foreach" style iteration over the collection of nodes.
    ///</summary>
    ///<returns>An IEnumerator.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNSection read get_Item; default;
    ///<summary>
    ///  Gets the number of nodes in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNSectionCollection = class(TDNGenericImport<DNSectionCollectionClass, DNSectionCollection>) end;

  //-------------namespace: Aspose.Words.Tables----------------
  DNCellCollectionClass = interface(DNNodeCollectionClass)
  ['{DBD54C62-9688-5684-B221-FACA9D93E0EA}']
  end;

  ///<summary>
  ///  Provides typed access to a collection of <see cref="T:Aspose.Words.Tables.Cell" />
  ///  nodes.
  ///</summary>
  [DNTypeName('Aspose.Words.Tables.CellCollection')]
  DNCellCollection = interface(DNNodeCollection)
  ['{E897CDF4-993D-3252-9E97-6B3E56A188DD}']
  { getters & setters } 

    function get_Item(index: Int32): DNCell;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Copies all cells from the collection to a new array of cells.
    ///</summary>
    ///<returns>An array of cells.</returns>
    function ToArray: TArray<DNCell>;
    ///<summary>
    ///  Adds a node to the end of the collection.
    ///</summary>
    ///<remarks><p>The node is inserted as a child into the node object from which the collection was created.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="node">The node to be added to the end of the collection.</param>
    ///<exception cref="T:System.NotSupportedException">The <b>NodeCollection</b>
    ///  is a "deep" collection.</exception>
    procedure Add(node: DNNode);
    ///<summary>
    ///  Inserts a node into the collection at the specified index.
    ///</summary>
    ///<remarks><p>The node is inserted as a child into the node object from which the collection was created.</p>
    ///  <p>If the index is equal to or greater than Count, the node is added at the end of the collection.</p>
    ///  <p>If the index is negative and its absolute value is greater than Count, the node is added at the end of the collection.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="index">The zero-based index of the node.
    ///  Negative indexes are allowed and indicate access from the back of the list.
    ///  For example -1 means the last node, -2 means the second before last and so on.</param>
    ///  <param name="node">The node to insert.</param>
    ///<exception cref="T:System.NotSupportedException">The <b>NodeCollection</b>
    ///  is a "deep" collection.</exception>
    procedure Insert(index: Int32; node: DNNode);
    ///<summary>
    ///  Removes the node from the collection and from the document.
    ///</summary>
    ///  <param name="node">The node to remove.</param>
    procedure Remove(node: DNNode);
    ///<summary>
    ///  Removes the node at the specified index from the collection and from the document.
    ///</summary>
    ///  <param name="index">The zero-based index of the node.
    ///  Negative indexes are allowed and indicate access from the back of the list.
    ///  For example -1 means the last node, -2 means the second before last and so on.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all nodes from this collection and from the document.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Determines whether a node is in the collection.
    ///</summary>
    ///<remarks><p>This method performs a linear search; therefore, the average execution time is proportional to Count.</p>
    ///</remarks>
    ///  <param name="node">The node to locate.</param>
    ///<returns>True if item is found in the collection; otherwise, false.</returns>
    function &Contains(node: DNNode): Boolean;
    ///<summary>
    ///  Returns the zero-based index of the specified node.
    ///</summary>
    ///  <param name="node">The node to locate.</param>
    ///<returns>The zero-based index of the node within the collection, if found; otherwise, -1.</returns>
    ///<remarks><p>This method performs a linear search; therefore, the average execution time is proportional to Count.</p>
    ///</remarks>
    function IndexOf(node: DNNode): Int32;
    ///<summary>
    ///  Provides a simple "foreach" style iteration over the collection of nodes.
    ///</summary>
    ///<returns>An IEnumerator.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCell read get_Item; default;
    ///<summary>
    ///  Gets the number of nodes in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNCellCollection = class(TDNGenericImport<DNCellCollectionClass, DNCellCollection>) end;

  //-------------namespace: Aspose.Words.Tables----------------
  DNRowCollectionClass = interface(DNNodeCollectionClass)
  ['{6D150B72-6C1A-5ED6-A008-9CD5FFA9958B}']
  end;

  ///<summary>
  ///  Provides typed access to a collection of <see cref="T:Aspose.Words.Tables.Row" />
  ///  nodes.
  ///</summary>
  [DNTypeName('Aspose.Words.Tables.RowCollection')]
  DNRowCollection = interface(DNNodeCollection)
  ['{A861A047-5A78-3656-9EBE-E44DCF80174C}']
  { getters & setters } 

    function get_Item(index: Int32): DNRow;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Copies all rows from the collection to a new array of rows.
    ///</summary>
    ///<returns>An array of rows.</returns>
    function ToArray: TArray<DNRow>;
    ///<summary>
    ///  Adds a node to the end of the collection.
    ///</summary>
    ///<remarks><p>The node is inserted as a child into the node object from which the collection was created.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="node">The node to be added to the end of the collection.</param>
    ///<exception cref="T:System.NotSupportedException">The <b>NodeCollection</b>
    ///  is a "deep" collection.</exception>
    procedure Add(node: DNNode);
    ///<summary>
    ///  Inserts a node into the collection at the specified index.
    ///</summary>
    ///<remarks><p>The node is inserted as a child into the node object from which the collection was created.</p>
    ///  <p>If the index is equal to or greater than Count, the node is added at the end of the collection.</p>
    ///  <p>If the index is negative and its absolute value is greater than Count, the node is added at the end of the collection.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="index">The zero-based index of the node.
    ///  Negative indexes are allowed and indicate access from the back of the list.
    ///  For example -1 means the last node, -2 means the second before last and so on.</param>
    ///  <param name="node">The node to insert.</param>
    ///<exception cref="T:System.NotSupportedException">The <b>NodeCollection</b>
    ///  is a "deep" collection.</exception>
    procedure Insert(index: Int32; node: DNNode);
    ///<summary>
    ///  Removes the node from the collection and from the document.
    ///</summary>
    ///  <param name="node">The node to remove.</param>
    procedure Remove(node: DNNode);
    ///<summary>
    ///  Removes the node at the specified index from the collection and from the document.
    ///</summary>
    ///  <param name="index">The zero-based index of the node.
    ///  Negative indexes are allowed and indicate access from the back of the list.
    ///  For example -1 means the last node, -2 means the second before last and so on.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all nodes from this collection and from the document.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Determines whether a node is in the collection.
    ///</summary>
    ///<remarks><p>This method performs a linear search; therefore, the average execution time is proportional to Count.</p>
    ///</remarks>
    ///  <param name="node">The node to locate.</param>
    ///<returns>True if item is found in the collection; otherwise, false.</returns>
    function &Contains(node: DNNode): Boolean;
    ///<summary>
    ///  Returns the zero-based index of the specified node.
    ///</summary>
    ///  <param name="node">The node to locate.</param>
    ///<returns>The zero-based index of the node within the collection, if found; otherwise, -1.</returns>
    ///<remarks><p>This method performs a linear search; therefore, the average execution time is proportional to Count.</p>
    ///</remarks>
    function IndexOf(node: DNNode): Int32;
    ///<summary>
    ///  Provides a simple "foreach" style iteration over the collection of nodes.
    ///</summary>
    ///<returns>An IEnumerator.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNRow read get_Item; default;
    ///<summary>
    ///  Gets the number of nodes in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNRowCollection = class(TDNGenericImport<DNRowCollectionClass, DNRowCollection>) end;

  //-------------namespace: Aspose.Words.Tables----------------
  DNTableCollectionClass = interface(DNNodeCollectionClass)
  ['{FD31337E-662A-5099-99BD-391D8CF09F58}']
  end;

  ///<summary>
  ///  Provides typed access to a collection of <see cref="T:Aspose.Words.Tables.Table" />
  ///  nodes.
  ///</summary>
  [DNTypeName('Aspose.Words.Tables.TableCollection')]
  DNTableCollection = interface(DNNodeCollection)
  ['{F29700E8-77EA-3800-A365-610DEB5839F6}']
  { getters & setters } 

    function get_Item(index: Int32): DNTable;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Copies all tables from the collection to a new array of tables.
    ///</summary>
    ///<returns>An array of tables.</returns>
    function ToArray: TArray<DNTable>;
    ///<summary>
    ///  Adds a node to the end of the collection.
    ///</summary>
    ///<remarks><p>The node is inserted as a child into the node object from which the collection was created.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="node">The node to be added to the end of the collection.</param>
    ///<exception cref="T:System.NotSupportedException">The <b>NodeCollection</b>
    ///  is a "deep" collection.</exception>
    procedure Add(node: DNNode);
    ///<summary>
    ///  Inserts a node into the collection at the specified index.
    ///</summary>
    ///<remarks><p>The node is inserted as a child into the node object from which the collection was created.</p>
    ///  <p>If the index is equal to or greater than Count, the node is added at the end of the collection.</p>
    ///  <p>If the index is negative and its absolute value is greater than Count, the node is added at the end of the collection.</p>
    ///</remarks>
    ///<remarks><p>If the newChild is already in the tree, it is first removed.</p>
    ///  <p>If the node being inserted was created from another document, you should use
    ///<see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean,Aspose.Words.ImportFormatMode)" />
    ///  to import the node to the current document.
    ///  The imported node can then be inserted into the current document.</p>
    ///</remarks>
    ///  <param name="index">The zero-based index of the node.
    ///  Negative indexes are allowed and indicate access from the back of the list.
    ///  For example -1 means the last node, -2 means the second before last and so on.</param>
    ///  <param name="node">The node to insert.</param>
    ///<exception cref="T:System.NotSupportedException">The <b>NodeCollection</b>
    ///  is a "deep" collection.</exception>
    procedure Insert(index: Int32; node: DNNode);
    ///<summary>
    ///  Removes the node from the collection and from the document.
    ///</summary>
    ///  <param name="node">The node to remove.</param>
    procedure Remove(node: DNNode);
    ///<summary>
    ///  Removes the node at the specified index from the collection and from the document.
    ///</summary>
    ///  <param name="index">The zero-based index of the node.
    ///  Negative indexes are allowed and indicate access from the back of the list.
    ///  For example -1 means the last node, -2 means the second before last and so on.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all nodes from this collection and from the document.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Determines whether a node is in the collection.
    ///</summary>
    ///<remarks><p>This method performs a linear search; therefore, the average execution time is proportional to Count.</p>
    ///</remarks>
    ///  <param name="node">The node to locate.</param>
    ///<returns>True if item is found in the collection; otherwise, false.</returns>
    function &Contains(node: DNNode): Boolean;
    ///<summary>
    ///  Returns the zero-based index of the specified node.
    ///</summary>
    ///  <param name="node">The node to locate.</param>
    ///<returns>The zero-based index of the node within the collection, if found; otherwise, -1.</returns>
    ///<remarks><p>This method performs a linear search; therefore, the average execution time is proportional to Count.</p>
    ///</remarks>
    function IndexOf(node: DNNode): Int32;
    ///<summary>
    ///  Provides a simple "foreach" style iteration over the collection of nodes.
    ///</summary>
    ///<returns>An IEnumerator.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNTable read get_Item; default;
    ///<summary>
    ///  Gets the number of nodes in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNTableCollection = class(TDNGenericImport<DNTableCollectionClass, DNTableCollection>) end;

  //-------------namespace: Aspose.Words----------------
  DNNodeImporterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2D496794-FA07-5E21-A1E8-AD20AED16B09}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Words.NodeImporter" />
    ///  class.
    ///</summary>
    ///  <param name="srcDoc">The source document.</param>
    ///  <param name="dstDoc">The destination document that will be the owner of imported nodes.</param>
    ///  <param name="importFormatMode">Specifies how to merge style formatting that clashes.</param>
    {class} function init(srcDoc: DNDocumentBase; dstDoc: DNDocumentBase; importFormatMode: DNImportFormatMode): DNNodeImporter; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Words.NodeImporter" />
    ///  class.
    ///</summary>
    ///  <param name="srcDoc">The source document.</param>
    ///  <param name="dstDoc">The destination document that will be the owner of imported nodes.</param>
    ///  <param name="importFormatMode">Specifies how to merge style formatting that clashes.</param>
    ///  <param name="importFormatOptions">Specifies various options to format imported node.</param>
    {class} function init(srcDoc: DNDocumentBase; dstDoc: DNDocumentBase; importFormatMode: DNImportFormatMode; importFormatOptions: DNImportFormatOptions): DNNodeImporter; overload;

  end;

  ///<summary>
  ///  Allows to efficiently perform repeated import of nodes from one document to another.
  ///</summary>
  ///<remarks><p>Aspose.Words provides functionality for easy copying and moving fragments
  ///  between Microsoft Word documents. This is known as "importing nodes".
  ///  Before you can insert a fragment from one document into another, you need to "import" it.
  ///  Importing creates a deep clone of the original node, ready to be inserted into the
  ///  destination document.</p>
  ///  <p>The simplest way to import a node is to use the <see cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean)" />
  ///  method
  ///  provided by the <see cref="T:Aspose.Words.DocumentBase" />
  ///  object.</p>
  ///  <p>However, when you need to import nodes from one document to another multiple times,
  ///  it is better to use the <see cref="T:Aspose.Words.NodeImporter" />
  ///  class. The <see cref="T:Aspose.Words.NodeImporter" />
  ///  class allows to minimize the number of styles and lists created in the destination document.</p>
  ///  <p>Copying or moving fragments from one Microsoft Word document to another presents a number
  ///  of technical challenges for Aspose.Words. In a Word document, styles and list formatting
  ///  are stored centrally, separately from the text of the document. The paragraphs
  ///  and runs of text merely reference the styles by internal unique identifiers.</p>
  ///  <p>The challenges arise from the fact that styles and lists are different in different documents.
  ///  For example, to copy a paragraph formatted with the Heading 1 style from one document to another,
  ///  a number of things must be taken into account: decide whether to copy the Heading 1 style from
  ///  the source document to the destination document, clone the paragraph, update the cloned
  ///  paragraph so it refers to the correct Heading 1 style in the destination document.
  ///  If the style had to be copied, all the styles that it references (based on style
  ///  and next paragraph style) should be analyzed and possibly copied too and so on.
  ///  Similar issues exist when copying bulleted or numbered paragraphs because Microsoft Word
  ///  stores list definitions separately from text.</p>
  ///  <p>The <see cref="T:Aspose.Words.NodeImporter" />
  ///  class is like a context, that holds the "translation tables"
  ///  during the import. It correctly translates between styles and lists in the source and
  ///  destination documents.</p>
  ///<seealso cref="T:Aspose.Words.Document" />
  ///<seealso cref="M:Aspose.Words.DocumentBase.ImportNode(Aspose.Words.Node,System.Boolean)" />
  ///</remarks>
  [DNTypeName('Aspose.Words.NodeImporter')]
  DNNodeImporter = interface(DDN.mscorlib.DNObject)
  ['{AE19784E-F6B7-302A-854F-F5009B003E17}']
  { methods } 

    ///<summary><p>Imports a node from one document into another.</p>
    ///</summary>
    ///<remarks><p>Importing a node creates a copy of the source node belonging to the importing document.
    ///  The returned node has no parent. The source node is not altered or removed from the original document.</p>
    ///  <p>Before a node from another document can be inserted into this document, it must be imported.
    ///  During import, document-specific properties such as references to styles and lists are translated
    ///  from the original to the importing document. After the node was imported, it can be inserted
    ///  into the appropriate place in the document using <see cref="M:Aspose.Words.CompositeNode.InsertBefore(Aspose.Words.Node,Aspose.Words.Node)" />
    ///  or
    ///<see cref="M:Aspose.Words.CompositeNode.InsertAfter(Aspose.Words.Node,Aspose.Words.Node)" />
    ///  .</p>
    ///  <p>If the source node already belongs to the destination document, then simply a deep clone
    ///  of the source node is created.</p>
    ///</remarks>
    ///  <param name="srcNode">The node to import.</param>
    ///  <param name="isImportChildren">True to import all child nodes recursively; otherwise, false.</param>
    ///<returns>The cloned, imported node. The node belongs to the destination document, but has no parent.</returns>
    function ImportNode(srcNode: DNNode; isImportChildren: Boolean): DNNode;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNNodeImporter = class(TDNGenericImport<DNNodeImporterClass, DNNodeImporter>) end;

  //-------------namespace: Aspose.Words----------------
  DNNodeListClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7A08AACD-35FC-5F05-A029-5B599364CC5A}']
  end;

  ///<summary>
  ///  Represents a collection of nodes matching an XPath query executed using the <see cref="M:Aspose.Words.CompositeNode.SelectNodes(System.String)" />
  ///  method.
  ///</summary>
  ///<remarks><p><b>NodeList</b>
  ///  is returned by <see cref="M:Aspose.Words.CompositeNode.SelectNodes(System.String)" />
  ///  and contains a collection
  ///  of nodes matching the XPath query.</p>
  ///  <p><b>NodeList</b>
  ///  supports indexed access and iteration.</p>
  ///<note>Treat the <b>NodeList</b>
  ///  collection as a "snapshot" collection. <b>NodeList</b>
  ///  starts
  ///  as a "live" collection because the nodes are not actually retrieved when the XPath query is run.
  ///  The nodes are only retrieved upon access and at this time the node and all nodes that precede
  ///  it are cached forming a "snapshot" collection.</note></remarks>
  [DNTypeName('Aspose.Words.NodeList')]
  DNNodeList = interface(DDN.mscorlib.DNObject)
  ['{839D053C-7D17-3598-8E82-152051A14B61}']
  { getters & setters } 

    function get_Item(index: Int32): DNNode;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Copies all nodes from the collection to a new array of nodes.
    ///</summary>
    ///<remarks><p>You should not be adding/removing nodes while iterating over a collection
    ///  of nodes because it invalidates the iterator and requires refreshes for live collections.</p>
    ///  <p>To be able to add/remove nodes during iteration, use this method to copy
    ///  nodes into a fixed-size array and then iterate over the array.</p>
    ///</remarks>
    ///<returns>An array of nodes.</returns>
    function ToArray: TArray<DNNode>;
    ///<summary>
    ///  Provides a simple "foreach" style iteration over the collection of nodes.
    ///</summary>
    ///<returns>An IEnumerator.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNNode>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNNode read get_Item; default;
    ///<summary>
    ///  Gets the number of nodes in the list.
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNNodeList = class(TDNGenericImport<DNNodeListClass, DNNodeList>) end;

  //-------------namespace: Aspose.Words.Notes----------------
  DNEndnoteOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2261E24B-6F2F-5F1B-9969-4DAA5D044C93}']
  end;

  ///<summary>
  ///  Represents the endnote numbering options for a document or section.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Document.EndnoteOptions" />
  ///<seealso cref="P:Aspose.Words.PageSetup.EndnoteOptions" />
  [DNTypeName('Aspose.Words.Notes.EndnoteOptions')]
  DNEndnoteOptions = interface(DDN.mscorlib.DNObject)
  ['{645F81B5-5528-34D5-88E5-3BCB3A0D02B0}']
  { getters & setters } 

    function get_Position: DNEndnotePosition;
    procedure set_Position(value: DNEndnotePosition);
    function get_NumberStyle: DNNumberStyle;
    procedure set_NumberStyle(value: DNNumberStyle);
    function get_StartNumber: Int32;
    procedure set_StartNumber(value: Int32);
    function get_RestartRule: DNFootnoteNumberingRule;
    procedure set_RestartRule(value: DNFootnoteNumberingRule);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the endnotes position.
    ///</summary>
    property Position: DNEndnotePosition read get_Position write set_Position;
    ///<summary>
    ///  Specifies the number format for automatically numbered endnotes.
    ///</summary>
    ///<remarks><para>Not all number styles are applicable for this property. For the list of applicable
    ///  number styles see the Insert Footnote or Endnote dialog box in Microsoft Word. If you select
    ///  a number style that is not applicable, Microsoft Word will revert to a default value.</para></remarks>
    property NumberStyle: DNNumberStyle read get_NumberStyle write set_NumberStyle;
    ///<summary>
    ///  Specifies the starting number or character for the first automatically numbered endnotes.
    ///</summary>
    ///<remarks><para>This property has effect only when <see cref="P:Aspose.Words.Notes.EndnoteOptions.RestartRule" />
    ///  is set to
    ///<see cref="F:Aspose.Words.Notes.FootnoteNumberingRule.Continuous" />
    ///  .</para></remarks>
    property StartNumber: Int32 read get_StartNumber write set_StartNumber;
    ///<summary>
    ///  Determines when automatic numbering restarts.
    ///</summary>
    ///<remarks><para>Not all values are applicable to endnotes.
    ///  To ascertain which values are applicable see <see cref="T:Aspose.Words.Notes.FootnoteNumberingRule" />
    ///  .</para></remarks>
    property RestartRule: DNFootnoteNumberingRule read get_RestartRule write set_RestartRule;
  end;

  TDNEndnoteOptions = class(TDNGenericImport<DNEndnoteOptionsClass, DNEndnoteOptions>) end;

  //-------------namespace: Aspose.Words.Notes----------------
  DNFootnoteOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{22B0CEFE-3BF8-56D7-9097-6005BEA6E55C}']
  end;

  ///<summary>
  ///  Represents the footnote numbering options for a document or section.
  ///</summary>
  ///<seealso cref="P:Aspose.Words.Document.FootnoteOptions" />
  ///<seealso cref="P:Aspose.Words.PageSetup.FootnoteOptions" />
  [DNTypeName('Aspose.Words.Notes.FootnoteOptions')]
  DNFootnoteOptions = interface(DDN.mscorlib.DNObject)
  ['{A71070B9-018F-31A4-8BE5-60407F63FCFC}']
  { getters & setters } 

    function get_Position: DNFootnotePosition;
    procedure set_Position(value: DNFootnotePosition);
    function get_NumberStyle: DNNumberStyle;
    procedure set_NumberStyle(value: DNNumberStyle);
    function get_StartNumber: Int32;
    procedure set_StartNumber(value: Int32);
    function get_RestartRule: DNFootnoteNumberingRule;
    procedure set_RestartRule(value: DNFootnoteNumberingRule);
    function get_Columns: Int32;
    procedure set_Columns(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the footnotes position.
    ///</summary>
    property Position: DNFootnotePosition read get_Position write set_Position;
    ///<summary>
    ///  Specifies the number format for automatically numbered footnotes.
    ///</summary>
    ///<remarks><para>Not all number styles are applicable for this property. For the list of applicable
    ///  number styles see the Insert Footnote or Endnote dialog box in Microsoft Word. If you select
    ///  a number style that is not applicable, Microsoft Word will revert to a default value.</para></remarks>
    property NumberStyle: DNNumberStyle read get_NumberStyle write set_NumberStyle;
    ///<summary>
    ///  Specifies the starting number or character for the first automatically numbered footnotes.
    ///</summary>
    ///<remarks><para>This property has effect only when <see cref="P:Aspose.Words.Notes.FootnoteOptions.RestartRule" />
    ///  is set to
    ///<see cref="F:Aspose.Words.Notes.FootnoteNumberingRule.Continuous" />
    ///  .</para></remarks>
    property StartNumber: Int32 read get_StartNumber write set_StartNumber;
    ///<summary>
    ///  Determines when automatic numbering restarts.
    ///</summary>
    property RestartRule: DNFootnoteNumberingRule read get_RestartRule write set_RestartRule;
    ///<summary>
    ///  Specifies the number of columns with which the footnotes area is formatted.
    ///</summary>
    ///<remarks>
    ///  If this property has the value of 0, the footnotes area is formatted with a number of columns based on
    ///  the number of columns on the displayed page. The default value is 0.
    ///</remarks>
    property Columns: Int32 read get_Columns write set_Columns;
  end;

  TDNFootnoteOptions = class(TDNGenericImport<DNFootnoteOptionsClass, DNFootnoteOptions>) end;

  //-------------namespace: Aspose.Words----------------
  DNPageSetupClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F27F5F00-C374-5219-81DE-E32195CCEECC}']
  end;

  ///<summary>
  ///  Represents the page setup properties of a section.
  ///</summary>
  ///<remarks><p><b>PageSetup</b>
  ///  object contains all the page setup attributes of a section
  ///  (left margin, bottom margin, paper size, and so on) as properties.</p>
  ///</remarks>
  ///<dev>
  ///  This is a presentation object only, does not store any model data.
  ///</dev>
  [DNTypeName('Aspose.Words.PageSetup')]
  DNPageSetup = interface(DDN.mscorlib.DNObject)
  ['{F86E3F2E-2938-37E5-8834-5CD905696831}']
  { getters & setters } 

    function get_OddAndEvenPagesHeaderFooter: Boolean;
    procedure set_OddAndEvenPagesHeaderFooter(value: Boolean);
    function get_DifferentFirstPageHeaderFooter: Boolean;
    procedure set_DifferentFirstPageHeaderFooter(value: Boolean);
    function get_MultiplePages: DNMultiplePagesType;
    procedure set_MultiplePages(value: DNMultiplePagesType);
    function get_SheetsPerBooklet: Int32;
    procedure set_SheetsPerBooklet(value: Int32);
    function get_SectionStart: DNSectionStart;
    procedure set_SectionStart(value: DNSectionStart);
    function get_SuppressEndnotes: Boolean;
    procedure set_SuppressEndnotes(value: Boolean);
    function get_VerticalAlignment: DNPageVerticalAlignment;
    procedure set_VerticalAlignment(value: DNPageVerticalAlignment);
    function get_Bidi: Boolean;
    procedure set_Bidi(value: Boolean);
    function get_LayoutMode: DNSectionLayoutMode;
    procedure set_LayoutMode(value: DNSectionLayoutMode);
    function get_CharactersPerLine: Int32;
    procedure set_CharactersPerLine(value: Int32);
    function get_LinesPerPage: Int32;
    procedure set_LinesPerPage(value: Int32);
    function get_PageWidth: Double;
    procedure set_PageWidth(value: Double);
    function get_PageHeight: Double;
    procedure set_PageHeight(value: Double);
    function get_PaperSize: DNPaperSize;
    procedure set_PaperSize(value: DNPaperSize);
    function get_Orientation: DNOrientation;
    procedure set_Orientation(value: DNOrientation);
    function get_LeftMargin: Double;
    procedure set_LeftMargin(value: Double);
    function get_RightMargin: Double;
    procedure set_RightMargin(value: Double);
    function get_TopMargin: Double;
    procedure set_TopMargin(value: Double);
    function get_BottomMargin: Double;
    procedure set_BottomMargin(value: Double);
    function get_HeaderDistance: Double;
    procedure set_HeaderDistance(value: Double);
    function get_FooterDistance: Double;
    procedure set_FooterDistance(value: Double);
    function get_Gutter: Double;
    procedure set_Gutter(value: Double);
    function get_FirstPageTray: Int32;
    procedure set_FirstPageTray(value: Int32);
    function get_OtherPagesTray: Int32;
    procedure set_OtherPagesTray(value: Int32);
    function get_PageNumberStyle: DNNumberStyle;
    procedure set_PageNumberStyle(value: DNNumberStyle);
    function get_RestartPageNumbering: Boolean;
    procedure set_RestartPageNumbering(value: Boolean);
    function get_PageStartingNumber: Int32;
    procedure set_PageStartingNumber(value: Int32);
    function get_LineNumberRestartMode: DNLineNumberRestartMode;
    procedure set_LineNumberRestartMode(value: DNLineNumberRestartMode);
    function get_LineNumberCountBy: Int32;
    procedure set_LineNumberCountBy(value: Int32);
    function get_LineNumberDistanceFromText: Double;
    procedure set_LineNumberDistanceFromText(value: Double);
    function get_LineStartingNumber: Int32;
    procedure set_LineStartingNumber(value: Int32);
    function get_TextColumns: DNTextColumnCollection;
    function get_RtlGutter: Boolean;
    procedure set_RtlGutter(value: Boolean);
    function get_BorderAlwaysInFront: Boolean;
    procedure set_BorderAlwaysInFront(value: Boolean);
    function get_BorderDistanceFrom: DNPageBorderDistanceFrom;
    procedure set_BorderDistanceFrom(value: DNPageBorderDistanceFrom);
    function get_BorderAppliesTo: DNPageBorderAppliesTo;
    procedure set_BorderAppliesTo(value: DNPageBorderAppliesTo);
    function get_BorderSurroundsHeader: Boolean;
    procedure set_BorderSurroundsHeader(value: Boolean);
    function get_BorderSurroundsFooter: Boolean;
    procedure set_BorderSurroundsFooter(value: Boolean);
    function get_Borders: DNBorderCollection;
    function get_FootnoteOptions: DNFootnoteOptions;
    function get_EndnoteOptions: DNEndnoteOptions;
    function get_TextOrientation: DNTextOrientation;
    procedure set_TextOrientation(value: DNTextOrientation);

  { methods } 

    ///<summary>
    ///  Resets page setup to default paper size, margins and orientation.
    ///</summary>
    procedure ClearFormatting;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary><b>True</b>
    ///  if the document has different headers and footers for odd-numbered and even-numbered pages.
    ///</summary>
    ///<remarks>
    ///  Note, changing this property affects all sections in the document.
    ///</remarks>
    property OddAndEvenPagesHeaderFooter: Boolean read get_OddAndEvenPagesHeaderFooter write set_OddAndEvenPagesHeaderFooter;
    ///<summary><b>True</b>
    ///  if a different header or footer is used on the first page.
    ///</summary>
    property DifferentFirstPageHeaderFooter: Boolean read get_DifferentFirstPageHeaderFooter write set_DifferentFirstPageHeaderFooter;
    ///<summary>
    ///  For multiple page documents, gets or sets how a document is printed or rendered so that it can be bound as a booklet.
    ///</summary>
    property MultiplePages: DNMultiplePagesType read get_MultiplePages write set_MultiplePages;
    ///<summary>
    ///  Returns or sets the number of pages to be included in each booklet.
    ///</summary>
    property SheetsPerBooklet: Int32 read get_SheetsPerBooklet write set_SheetsPerBooklet;
    ///<summary>
    ///  Returns or sets the type of section break for the specified object.
    ///</summary>
    property SectionStart: DNSectionStart read get_SectionStart write set_SectionStart;
    ///<summary><b>True</b>
    ///  if endnotes are printed at the end of the next section that doesn't suppress endnotes.
    ///  Suppressed endnotes are printed before the endnotes in that section.
    ///</summary>
    property SuppressEndnotes: Boolean read get_SuppressEndnotes write set_SuppressEndnotes;
    ///<summary>
    ///  Returns or sets the vertical alignment of text on each page in a document or section.
    ///</summary>
    property VerticalAlignment: DNPageVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    ///<summary>
    ///  Specifies that this section contains bidirectional (complex scripts) text.
    ///</summary>
    ///<remarks><p>When true, the columns in this section are laid out from right to left.</p>
    ///</remarks>
    property Bidi: Boolean read get_Bidi write set_Bidi;
    ///<summary>
    ///  Gets or sets the layout mode of this section.
    ///</summary>
    property LayoutMode: DNSectionLayoutMode read get_LayoutMode write set_LayoutMode;
    ///<summary>
    ///  Gets or sets the number of characters per line in the document grid.
    ///</summary>
    ///<remarks><para>Minimum value of the property is 1. Maximum value depends on page width and font size of the Normal
    ///  style. Minimum character pitch is 90 percent of the font size. For example, maximum number of characters
    ///  per line of a Letter page with one-inch margins is 43.</para><para>By default, the property has a value, on which character pitch equals to font size of the Normal
    ///  style.</para></remarks>
    property CharactersPerLine: Int32 read get_CharactersPerLine write set_CharactersPerLine;
    ///<summary>
    ///  Gets or sets the number of lines per page in the document grid.
    ///</summary>
    ///<remarks><para>Minimum value of the property is 1. Maximum value depends on page height and font size of the Normal
    ///  style. Minimum line pitch is 136 percent of the font size. For example, maximum number of lines per page of
    ///  a Letter page with one-inch margins is 39.</para><para>By default, the property has a value, on which line pitch is in 1.5 times greater than font size of
    ///  the Normal style.</para></remarks>
    property LinesPerPage: Int32 read get_LinesPerPage write set_LinesPerPage;
    ///<summary>
    ///  Returns or sets the width of the page in points.
    ///</summary>
    property PageWidth: Double read get_PageWidth write set_PageWidth;
    ///<summary>
    ///  Returns or sets the height of the page in points.
    ///</summary>
    property PageHeight: Double read get_PageHeight write set_PageHeight;
    ///<summary>
    ///  Returns or sets the paper size.
    ///</summary>
    ///<remarks><para>Setting this property updates <see cref="P:Aspose.Words.PageSetup.PageWidth" />
    ///  and <see cref="P:Aspose.Words.PageSetup.PageHeight" />
    ///  values.
    ///  Setting this value to <see cref="F:Aspose.Words.PaperSize.Custom" />
    ///  does not change existing values.</para></remarks>
    property PaperSize: DNPaperSize read get_PaperSize write set_PaperSize;
    ///<summary>
    ///  Returns or sets the orientation of the page.
    ///</summary>
    ///<remarks><p>Changing <b>Orientation</b>
    ///  swaps <see cref="P:Aspose.Words.PageSetup.PageWidth" />
    ///  and <see cref="P:Aspose.Words.PageSetup.PageHeight" />
    ///  .</p>
    ///</remarks>
    property Orientation: DNOrientation read get_Orientation write set_Orientation;
    ///<summary>
    ///  Returns or sets the distance (in points) between the left edge of the page and the left boundary of the body text.
    ///</summary>
    property LeftMargin: Double read get_LeftMargin write set_LeftMargin;
    ///<summary>
    ///  Returns or sets the distance (in points) between the right edge of the page and the right boundary of the body text.
    ///</summary>
    property RightMargin: Double read get_RightMargin write set_RightMargin;
    ///<summary>
    ///  Returns or sets the distance (in points) between the top edge of the page and the top boundary of the body text.
    ///</summary>
    property TopMargin: Double read get_TopMargin write set_TopMargin;
    ///<summary>
    ///  Returns or sets the distance (in points) between the bottom edge of the page and the bottom boundary of the body text.
    ///</summary>
    property BottomMargin: Double read get_BottomMargin write set_BottomMargin;
    ///<summary>
    ///  Returns or sets the distance (in points) between the header and the top of the page.
    ///</summary>
    property HeaderDistance: Double read get_HeaderDistance write set_HeaderDistance;
    ///<summary>
    ///  Returns or sets the distance (in points) between the footer and the bottom of the page.
    ///</summary>
    property FooterDistance: Double read get_FooterDistance write set_FooterDistance;
    ///<summary>
    ///  Gets or sets the amount of extra space added to the margin for document binding.
    ///</summary>
    property Gutter: Double read get_Gutter write set_Gutter;
    ///<summary>
    ///  Gets or sets the paper tray (bin) to use for the first page of a section.
    ///  The value is implementation (printer) specific.
    ///</summary>
    property FirstPageTray: Int32 read get_FirstPageTray write set_FirstPageTray;
    ///<summary>
    ///  Gets or sets the paper tray (bin) to be used for all but the first page of a section.
    ///  The value is implementation (printer) specific.
    ///</summary>
    property OtherPagesTray: Int32 read get_OtherPagesTray write set_OtherPagesTray;
    ///<summary>
    ///  Gets or sets the page number format.
    ///</summary>
    property PageNumberStyle: DNNumberStyle read get_PageNumberStyle write set_PageNumberStyle;
    ///<summary><b>True</b>
    ///  if page numbering restarts at the beginning of the section.
    ///</summary>
    ///<remarks>
    ///  If set to <b>false</b>
    ///  , the <b>RestartPageNumbering</b>
    ///  property will override the
    ///<see cref="P:Aspose.Words.PageSetup.PageStartingNumber" />
    ///  property so that page numbering can continue from the previous section.
    ///</remarks>
    property RestartPageNumbering: Boolean read get_RestartPageNumbering write set_RestartPageNumbering;
    ///<summary>
    ///  Gets or sets the starting page number of the section.
    ///</summary>
    ///<remarks>
    ///  The <see cref="P:Aspose.Words.PageSetup.RestartPageNumbering" />
    ///  property, if set to <b>false</b>
    ///  , will override the
    ///<b>PageStartingNumber</b>
    ///  property so that page numbering can continue from the previous section.
    ///</remarks>
    property PageStartingNumber: Int32 read get_PageStartingNumber write set_PageStartingNumber;
    ///<summary>
    ///  Gets or sets the way line numbering runs  that is, whether it starts over at the beginning of a new
    ///  page or section or runs continuously.
    ///</summary>
    property LineNumberRestartMode: DNLineNumberRestartMode read get_LineNumberRestartMode write set_LineNumberRestartMode;
    ///<summary>
    ///  Returns or sets the numeric increment for line numbers.
    ///</summary>
    property LineNumberCountBy: Int32 read get_LineNumberCountBy write set_LineNumberCountBy;
    ///<summary>
    ///  Gets or sets distance between the right edge of line numbers and the left edge of the document.
    ///</summary>
    ///<remarks>
    ///  Set this property to zero for automatic distance between the line numbers and text of the document.
    ///</remarks>
    property LineNumberDistanceFromText: Double read get_LineNumberDistanceFromText write set_LineNumberDistanceFromText;
    ///<summary>
    ///  Gets or sets the starting line number.
    ///</summary>
    property LineStartingNumber: Int32 read get_LineStartingNumber write set_LineStartingNumber;
    ///<summary>
    ///  Returns a collection that represents the set of text columns.
    ///</summary>
    property TextColumns: DNTextColumnCollection read get_TextColumns;
    ///<summary>
    ///  Gets or sets whether Microsoft Word uses gutters for the section based on a right-to-left language or a left-to-right language.
    ///</summary>
    property RtlGutter: Boolean read get_RtlGutter write set_RtlGutter;
    ///<summary>
    ///  Specifies where the page border is positioned relative to intersecting texts and objects.
    ///</summary>
    property BorderAlwaysInFront: Boolean read get_BorderAlwaysInFront write set_BorderAlwaysInFront;
    ///<summary>
    ///  Gets or sets a value that indicates whether the specified page border is measured from the edge of the page or from the text it surrounds.
    ///</summary>
    property BorderDistanceFrom: DNPageBorderDistanceFrom read get_BorderDistanceFrom write set_BorderDistanceFrom;
    ///<summary>
    ///  Specifies which pages the page border is printed on.
    ///</summary>
    property BorderAppliesTo: DNPageBorderAppliesTo read get_BorderAppliesTo write set_BorderAppliesTo;
    ///<summary>
    ///  Specifies whether the page border includes or excludes the header.
    ///</summary>
    ///<remarks>
    ///  Note, changing this property affects all sections in the document.
    ///</remarks>
    property BorderSurroundsHeader: Boolean read get_BorderSurroundsHeader write set_BorderSurroundsHeader;
    ///<summary>
    ///  Specifies whether the page border includes or excludes the footer.
    ///</summary>
    ///<remarks>
    ///  Note, changing this property affects all sections in the document.
    ///</remarks>
    property BorderSurroundsFooter: Boolean read get_BorderSurroundsFooter write set_BorderSurroundsFooter;
    ///<summary>
    ///  Gets a collection of the page borders.
    ///</summary>
    property Borders: DNBorderCollection read get_Borders;
    ///<summary>
    ///  Provides options that control numbering and positioning of footnotes in this section.
    ///</summary>
    property FootnoteOptions: DNFootnoteOptions read get_FootnoteOptions;
    ///<summary>
    ///  Provides options that control numbering and positioning of endnotes in this section.
    ///</summary>
    property EndnoteOptions: DNEndnoteOptions read get_EndnoteOptions;
    ///<summary>
    ///  Allows to specify <see cref="P:Aspose.Words.PageSetup.TextOrientation" />
    ///  for the whole page.
    ///  Default value is <see cref="F:Aspose.Words.TextOrientation.Horizontal" />
    ///</summary>
    ///<remarks>This property is only supported for MS Word native formats DOCX, WML, RTF and DOC.</remarks>
    property TextOrientation: DNTextOrientation read get_TextOrientation write set_TextOrientation;
  end;

  TDNPageSetup = class(TDNGenericImport<DNPageSetupClass, DNPageSetup>) end;

  //-------------namespace: Aspose.Words----------------
  DNParagraphFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6261CF0B-464B-5729-886A-7D375D30BEEA}']
  end;

  ///<summary>
  ///  Represents all the formatting for a paragraph.
  ///</summary>
  [DNTypeName('Aspose.Words.ParagraphFormat')]
  DNParagraphFormat = interface(DDN.mscorlib.DNObject)
  ['{F2448B50-30BA-34A8-ACFA-89F346156D7A}']
  { getters & setters } 

    function get_Alignment: DNParagraphAlignment;
    procedure set_Alignment(value: DNParagraphAlignment);
    function get_NoSpaceBetweenParagraphsOfSameStyle: Boolean;
    procedure set_NoSpaceBetweenParagraphsOfSameStyle(value: Boolean);
    function get_KeepTogether: Boolean;
    procedure set_KeepTogether(value: Boolean);
    function get_KeepWithNext: Boolean;
    procedure set_KeepWithNext(value: Boolean);
    function get_PageBreakBefore: Boolean;
    procedure set_PageBreakBefore(value: Boolean);
    function get_SuppressLineNumbers: Boolean;
    procedure set_SuppressLineNumbers(value: Boolean);
    function get_SuppressAutoHyphens: Boolean;
    procedure set_SuppressAutoHyphens(value: Boolean);
    function get_WidowControl: Boolean;
    procedure set_WidowControl(value: Boolean);
    function get_AddSpaceBetweenFarEastAndAlpha: Boolean;
    procedure set_AddSpaceBetweenFarEastAndAlpha(value: Boolean);
    function get_AddSpaceBetweenFarEastAndDigit: Boolean;
    procedure set_AddSpaceBetweenFarEastAndDigit(value: Boolean);
    function get_FarEastLineBreakControl: Boolean;
    procedure set_FarEastLineBreakControl(value: Boolean);
    function get_WordWrap: Boolean;
    procedure set_WordWrap(value: Boolean);
    function get_HangingPunctuation: Boolean;
    procedure set_HangingPunctuation(value: Boolean);
    function get_Bidi: Boolean;
    procedure set_Bidi(value: Boolean);
    function get_LeftIndent: Double;
    procedure set_LeftIndent(value: Double);
    function get_CharacterUnitLeftIndent: Double;
    procedure set_CharacterUnitLeftIndent(value: Double);
    function get_RightIndent: Double;
    procedure set_RightIndent(value: Double);
    function get_CharacterUnitRightIndent: Double;
    procedure set_CharacterUnitRightIndent(value: Double);
    function get_FirstLineIndent: Double;
    procedure set_FirstLineIndent(value: Double);
    function get_CharacterUnitFirstLineIndent: Double;
    procedure set_CharacterUnitFirstLineIndent(value: Double);
    function get_SpaceBeforeAuto: Boolean;
    procedure set_SpaceBeforeAuto(value: Boolean);
    function get_SpaceAfterAuto: Boolean;
    procedure set_SpaceAfterAuto(value: Boolean);
    function get_SpaceBefore: Double;
    procedure set_SpaceBefore(value: Double);
    function get_LineUnitBefore: Double;
    procedure set_LineUnitBefore(value: Double);
    function get_SpaceAfter: Double;
    procedure set_SpaceAfter(value: Double);
    function get_LineUnitAfter: Double;
    procedure set_LineUnitAfter(value: Double);
    function get_LineSpacingRule: DNLineSpacingRule;
    procedure set_LineSpacingRule(value: DNLineSpacingRule);
    function get_LineSpacing: Double;
    procedure set_LineSpacing(value: Double);
    function get_IsHeading: Boolean;
    function get_IsListItem: Boolean;
    function get_OutlineLevel: DNOutlineLevel;
    procedure set_OutlineLevel(value: DNOutlineLevel);
    function get_LinesToDrop: Int32;
    procedure set_LinesToDrop(value: Int32);
    function get_DropCapPosition: DNDropCapPosition;
    procedure set_DropCapPosition(value: DNDropCapPosition);
    function get_Shading: DNShading;
    function get_Borders: DNBorderCollection;
    function get_Style: DNStyle;
    procedure set_Style(value: DNStyle);
    function get_StyleName: string;
    procedure set_StyleName(value: string);
    function get_StyleIdentifier: DNStyleIdentifier;
    procedure set_StyleIdentifier(value: DNStyleIdentifier);
    function get_SnapToGrid: Boolean;
    procedure set_SnapToGrid(value: Boolean);
    function get_TabStops: DNTabStopCollection;

  { methods } 

    ///<summary>
    ///  Resets to default paragraph formatting.
    ///</summary>
    ///<remarks>
    ///  Default paragraph formatting is Normal style, left aligned, no indentation,
    ///  no spacing, no borders and no shading.
    ///</remarks>
    procedure ClearFormatting;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets text alignment for the paragraph.
    ///</summary>
    property Alignment: DNParagraphAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  When true, <see cref="P:Aspose.Words.ParagraphFormat.SpaceBefore" />
    ///  and <see cref="P:Aspose.Words.ParagraphFormat.SpaceAfter" />
    ///  will be ignored
    ///  between the paragraphs of the same style.
    ///</summary>
    ///<remarks><p>This setting only takes affect when applied to a paragraph style. If applied to
    ///  a paragraph directly, it has no effect.</p>
    ///</remarks>
    property NoSpaceBetweenParagraphsOfSameStyle: Boolean read get_NoSpaceBetweenParagraphsOfSameStyle write set_NoSpaceBetweenParagraphsOfSameStyle;
    ///<summary>
    ///  True if all lines in the paragraph are to remain on the same page.
    ///</summary>
    property KeepTogether: Boolean read get_KeepTogether write set_KeepTogether;
    ///<summary>
    ///  True if the paragraph is to remains on the same page as the paragraph that follows it.
    ///</summary>
    property KeepWithNext: Boolean read get_KeepWithNext write set_KeepWithNext;
    ///<summary>
    ///  True if a page break is forced before the paragraph.
    ///</summary>
    property PageBreakBefore: Boolean read get_PageBreakBefore write set_PageBreakBefore;
    ///<summary>
    ///  Specifies whether the current paragraph's lines should be exempted from line numbering
    ///  which is applied in the parent section.
    ///</summary>
    property SuppressLineNumbers: Boolean read get_SuppressLineNumbers write set_SuppressLineNumbers;
    ///<summary>
    ///  Specifies whether the current paragraph should be exempted from any hyphenation which
    ///  is applied in the document settings.
    ///</summary>
    property SuppressAutoHyphens: Boolean read get_SuppressAutoHyphens write set_SuppressAutoHyphens;
    ///<summary>
    ///  True if the first and last lines in the paragraph are to remain on the same page as the rest of the paragraph.
    ///</summary>
    property WidowControl: Boolean read get_WidowControl write set_WidowControl;
    ///<summary>
    ///  Gets or sets a flag indicating whether inter-character spacing is automatically adjusted between regions
    ///  of Latin text and regions of East Asian text in the current paragraph.
    ///</summary>
    property AddSpaceBetweenFarEastAndAlpha: Boolean read get_AddSpaceBetweenFarEastAndAlpha write set_AddSpaceBetweenFarEastAndAlpha;
    ///<summary>
    ///  Gets or sets a flag indicating whether inter-character spacing is automatically adjusted between regions
    ///  of numbers and regions of East Asian text in the current paragraph.
    ///</summary>
    property AddSpaceBetweenFarEastAndDigit: Boolean read get_AddSpaceBetweenFarEastAndDigit write set_AddSpaceBetweenFarEastAndDigit;
    ///<summary>
    ///  Gets or sets a flag indicating whether East Asian line-breaking rules are applied to the current paragraph.
    ///</summary>
    property FarEastLineBreakControl: Boolean read get_FarEastLineBreakControl write set_FarEastLineBreakControl;
    ///<summary>
    ///  If this property is <b>false</b>
    ///  , Latin text in the middle of a word can be wrapped for
    ///  the current paragraph. Otherwise Latin text is wrapped by whole words.
    ///</summary>
    property WordWrap: Boolean read get_WordWrap write set_WordWrap;
    ///<summary>
    ///  Gets or sets a flag indicating whether hanging punctuation is enabled for the current paragraph.
    ///</summary>
    property HangingPunctuation: Boolean read get_HangingPunctuation write set_HangingPunctuation;
    ///<summary>
    ///  Gets or sets whether this is a right-to-left paragraph.
    ///</summary>
    ///<remarks><p>When true, the runs and other inline objects in this paragraph
    ///  are laid out right to left.</p>
    ///</remarks>
    property Bidi: Boolean read get_Bidi write set_Bidi;
    ///<summary>
    ///  Gets or sets the value (in points) that represents the left indent for paragraph.
    ///</summary>
    property LeftIndent: Double read get_LeftIndent write set_LeftIndent;
    ///<summary>
    ///  Gets or sets the left indent value (in characters) for the specified paragraphs.
    ///</summary>
    property CharacterUnitLeftIndent: Double read get_CharacterUnitLeftIndent write set_CharacterUnitLeftIndent;
    ///<summary>
    ///  Gets or sets the value (in points) that represents the right indent for paragraph.
    ///</summary>
    property RightIndent: Double read get_RightIndent write set_RightIndent;
    ///<summary>
    ///  Gets or sets the right indent value (in characters) for the specified paragraphs.
    ///</summary>
    property CharacterUnitRightIndent: Double read get_CharacterUnitRightIndent write set_CharacterUnitRightIndent;
    ///<summary>
    ///  Gets or sets the value (in points) for a first line or hanging indent.
    ///  <p>Use positive values to set the first-line indent, and negative values to set the hanging indent.</p>
    ///</summary>
    property FirstLineIndent: Double read get_FirstLineIndent write set_FirstLineIndent;
    ///<summary>
    ///  Gets or sets the value (in characters) for the first-line or hanging indent.
    ///  <p>Use positive values to set the first-line indent, and negative values to set the hanging indent.</p>
    ///</summary>
    property CharacterUnitFirstLineIndent: Double read get_CharacterUnitFirstLineIndent write set_CharacterUnitFirstLineIndent;
    ///<summary>
    ///  True if the amount of spacing before the paragraph is set automatically.
    ///</summary>
    ///<remarks><p>When set to true, overrides the effect of <see cref="P:Aspose.Words.ParagraphFormat.SpaceBefore" />
    ///  .</p>
    ///</remarks>
    ///<remarks><p>When you set paragraph Space Before and Space After to Auto,
    ///  Microsoft Word adds 14 points spacing between paragraphs automatically
    ///  according to the following rules:</p>
    ///<list type="bullet"><item>Normally, spacing is added after all paragraphs.</item>
    ///<item>In a bulleted or numbered list, spacing is added only after the last item in the list.
    ///  Spacing is not added between the list items.</item>
    ///<item>In a nested bulleted or numbered list spacing is not added.</item>
    ///<item>Spacing is normally added after a table.</item>
    ///<item>Spacing is not added after a table if it is the last block in a table cell.</item>
    ///<item>Spacing is not added after the last paragraph in a table cell.</item>
    ///</list>
    ///</remarks>
    property SpaceBeforeAuto: Boolean read get_SpaceBeforeAuto write set_SpaceBeforeAuto;
    ///<summary>
    ///  True if the amount of spacing after the paragraph is set automatically.
    ///</summary>
    ///<remarks><p>When set to true, overrides the effect of <see cref="P:Aspose.Words.ParagraphFormat.SpaceAfter" />
    ///  .</p>
    ///</remarks>
    ///<remarks><p>When you set paragraph Space Before and Space After to Auto,
    ///  Microsoft Word adds 14 points spacing between paragraphs automatically
    ///  according to the following rules:</p>
    ///<list type="bullet"><item>Normally, spacing is added after all paragraphs.</item>
    ///<item>In a bulleted or numbered list, spacing is added only after the last item in the list.
    ///  Spacing is not added between the list items.</item>
    ///<item>In a nested bulleted or numbered list spacing is not added.</item>
    ///<item>Spacing is normally added after a table.</item>
    ///<item>Spacing is not added after a table if it is the last block in a table cell.</item>
    ///<item>Spacing is not added after the last paragraph in a table cell.</item>
    ///</list>
    ///</remarks>
    property SpaceAfterAuto: Boolean read get_SpaceAfterAuto write set_SpaceAfterAuto;
    ///<summary>
    ///  Gets or sets the amount of spacing (in points) before the paragraph.
    ///</summary>
    ///<remarks><p>Has no effect when <see cref="P:Aspose.Words.ParagraphFormat.SpaceBeforeAuto" />
    ///  is true.</p>
    ///  <p>Valid values range from 0 to 1584 inclusive.</p>
    ///</remarks>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  Throws when argument was out of the range of valid values.
    ///</exception>
    property SpaceBefore: Double read get_SpaceBefore write set_SpaceBefore;
    ///<summary>
    ///  Gets or sets the amount of spacing (in gridlines) before the paragraphs.
    ///</summary>
    property LineUnitBefore: Double read get_LineUnitBefore write set_LineUnitBefore;
    ///<summary>
    ///  Gets or sets the amount of spacing (in points) after the paragraph.
    ///</summary>
    ///<remarks><p>Has no effect when <see cref="P:Aspose.Words.ParagraphFormat.SpaceAfterAuto" />
    ///  is true.</p>
    ///  <p>Valid values â€‹â€‹range from 0 to 1584 inclusive.</p>
    ///</remarks>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  Throws when argument was out of the range of valid values.
    ///</exception>
    property SpaceAfter: Double read get_SpaceAfter write set_SpaceAfter;
    ///<summary>
    ///  Gets or sets the amount of spacing (in gridlines) after the paragraphs.
    ///</summary>
    property LineUnitAfter: Double read get_LineUnitAfter write set_LineUnitAfter;
    ///<summary>
    ///  Gets or sets the line spacing for the paragraph.
    ///</summary>
    property LineSpacingRule: DNLineSpacingRule read get_LineSpacingRule write set_LineSpacingRule;
    ///<summary>
    ///  Gets or sets the line spacing (in points) for the paragraph.
    ///</summary>
    ///<remarks><p>When LineSpacingRule property is set to AtLeast, the line spacing can be greater than or equal to,
    ///  but never less than the specified LineSpacing value.</p>
    ///  <p>When LineSpacingRule property is set to Exactly, the line spacing never changes from
    ///  the specified LineSpacing value, even if a larger font is used within the paragraph.</p>
    ///</remarks>
    property LineSpacing: Double read get_LineSpacing write set_LineSpacing;
    ///<summary>
    ///  True when the paragraph style is one of the built-in Heading styles.
    ///</summary>
    property IsHeading: Boolean read get_IsHeading;
    ///<summary>
    ///  True when the paragraph is an item in a bulleted or numbered list.
    ///</summary>
    property IsListItem: Boolean read get_IsListItem;
    ///<summary>
    ///  Specifies the outline level of the paragraph in the document.
    ///</summary>
    property OutlineLevel: DNOutlineLevel read get_OutlineLevel write set_OutlineLevel;
    ///<summary>
    ///  Gets or sets the number of lines of the paragraph text used to calculate the drop cap height.
    ///</summary>
    property LinesToDrop: Int32 read get_LinesToDrop write set_LinesToDrop;
    ///<summary>
    ///  Gets or sets the position for a drop cap text.
    ///</summary>
    property DropCapPosition: DNDropCapPosition read get_DropCapPosition write set_DropCapPosition;
    ///<summary>
    ///  Returns a Shading object that refers to the shading formatting for the paragraph.
    ///</summary>
    property Shading: DNShading read get_Shading;
    ///<summary>
    ///  Gets collection of borders of the paragraph.
    ///</summary>
    property Borders: DNBorderCollection read get_Borders;
    ///<summary>
    ///  Gets or sets the paragraph style applied to this formatting.
    ///</summary>
    property Style: DNStyle read get_Style write set_Style;
    ///<summary>
    ///  Gets or sets the name of the paragraph style applied to this formatting.
    ///</summary>
    property StyleName: string read get_StyleName write set_StyleName;
    ///<summary>
    ///  Gets or sets the locale independent style identifier of the paragraph style applied to this formatting.
    ///</summary>
    property StyleIdentifier: DNStyleIdentifier read get_StyleIdentifier write set_StyleIdentifier;
    ///<summary>
    ///  Specifies whether the current paragraph should use the document grid lines per page settings
    ///  when laying out the contents in the paragraph.
    ///</summary>
    property SnapToGrid: Boolean read get_SnapToGrid write set_SnapToGrid;
    ///<summary>
    ///  Gets the collection of custom tab stops defined for this object.
    ///</summary>
    property TabStops: DNTabStopCollection read get_TabStops;
  end;

  TDNParagraphFormat = class(TDNGenericImport<DNParagraphFormatClass, DNParagraphFormat>) end;

  //-------------namespace: Aspose.Words----------------
  DNPlainTextDocumentClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FD0A7F9C-F78B-55F5-81DA-6E13F761FA9B}']
  { constructors } 

    ///<summary>
    ///  Creates a plain text document from a file. Automatically detects the file format.
    ///</summary>
    ///  <param name="fileName">Name of the file to extract the text from.</param>
    ///<exception cref="T:Aspose.Words.UnsupportedFileFormatException">The document format is not recognized or not supported.</exception><exception cref="T:Aspose.Words.FileCorruptedException">The document appears to be corrupted and cannot be loaded.</exception><exception cref="T:System.Exception">There is a problem with the document and it should be reported to Aspose.Words developers.</exception><exception cref="T:System.IO.IOException">There is an input/output exception.</exception><exception cref="T:Aspose.Words.IncorrectPasswordException">The document is encrypted and requires a password to open, but you supplied an incorrect password.</exception><exception cref="T:System.ArgumentException">The name of the file cannot be null or empty string.</exception>
    {class} function init(fileName: string): DNPlainTextDocument; overload;
    ///<summary>
    ///  Creates a plain text document from a file. Allows to specify additional options such as an encryption password.
    ///</summary>
    ///<remarks></remarks>
    ///  <param name="fileName">Name of the file to extract the text from.</param>
    ///  <param name="loadOptions">Additional options to use when loading a document. Can be null.</param>
    ///<exception cref="T:Aspose.Words.UnsupportedFileFormatException">The document format is not recognized or not supported.</exception><exception cref="T:Aspose.Words.FileCorruptedException">The document appears to be corrupted and cannot be loaded.</exception><exception cref="T:System.Exception">There is a problem with the document and it should be reported to Aspose.Words developers.</exception><exception cref="T:System.IO.IOException">There is an input/output exception.</exception><exception cref="T:Aspose.Words.IncorrectPasswordException">The document is encrypted and requires a password to open, but you supplied an incorrect password.</exception><exception cref="T:System.ArgumentException">The name of the file cannot be null or empty string.</exception>
    {class} function init(fileName: string; loadOptions: DNLoadOptions): DNPlainTextDocument; overload;
    ///<summary>
    ///  Creates a plain text document from a stream. Automatically detects the file format.
    ///</summary>
    ///<remarks><p>
    ///  The document must be stored at the beginning of the stream. The stream must support random positioning.</p>
    ///</remarks>
    ///  <param name="stream">The stream where to extract the text from.</param>
    ///<exception cref="T:Aspose.Words.UnsupportedFileFormatException">The document format is not recognized or not supported.</exception><exception cref="T:Aspose.Words.FileCorruptedException">The document appears to be corrupted and cannot be loaded.</exception><exception cref="T:System.Exception">There is a problem with the document and it should be reported to Aspose.Words developers.</exception><exception cref="T:System.IO.IOException">There is an input/output exception.</exception><exception cref="T:Aspose.Words.IncorrectPasswordException">The document is encrypted and requires a password to open, but you supplied an incorrect password.</exception><exception cref="T:System.ArgumentNullException">The stream cannot be null.</exception><exception cref="T:System.NotSupportedException">The stream does not support reading or seeking.</exception><exception cref="T:System.ObjectDisposedException">The stream is a disposed object.</exception>
    {class} function init(stream: DDN.mscorlib.DNStream): DNPlainTextDocument; overload;
    ///<summary>
    ///  Creates a plain text document from a stream. Allows to specify additional options such as an encryption password.
    ///</summary>
    ///<remarks><p>
    ///  The document must be stored at the beginning of the stream. The stream must support random positioning.</p>
    ///</remarks>
    ///  <param name="stream">The stream where to extract the text from.</param>
    ///  <param name="loadOptions">Additional options to use when loading a document. Can be null.</param>
    ///<exception cref="T:Aspose.Words.UnsupportedFileFormatException">The document format is not recognized or not supported.</exception><exception cref="T:Aspose.Words.FileCorruptedException">The document appears to be corrupted and cannot be loaded.</exception><exception cref="T:System.Exception">There is a problem with the document and it should be reported to Aspose.Words developers.</exception><exception cref="T:System.IO.IOException">There is an input/output exception.</exception><exception cref="T:Aspose.Words.IncorrectPasswordException">The document is encrypted and requires a password to open, but you supplied an incorrect password.</exception><exception cref="T:System.ArgumentNullException">The stream cannot be null.</exception><exception cref="T:System.NotSupportedException">The stream does not support reading or seeking.</exception><exception cref="T:System.ObjectDisposedException">The stream is a disposed object.</exception>
    {class} function init(stream: DDN.mscorlib.DNStream; loadOptions: DNLoadOptions): DNPlainTextDocument; overload;

  end;

  ///<summary>
  ///  Allows to extract plain-text representation of the document's content.
  ///</summary>
  [DNTypeName('Aspose.Words.PlainTextDocument')]
  DNPlainTextDocument = interface(DDN.mscorlib.DNObject)
  ['{41AE8608-8468-3A07-B403-B12FFE6B308B}']
  { getters & setters } 

    function get_Text: string;
    function get_BuiltInDocumentProperties: DNBuiltInDocumentProperties;
    function get_CustomDocumentProperties: DNCustomDocumentProperties;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets textual content of the document concatenated as a string.
    ///</summary>
    property Text: string read get_Text;
    ///<summary>
    ///  Gets <see cref="P:Aspose.Words.PlainTextDocument.BuiltInDocumentProperties" />
    ///  of the document.
    ///</summary>
    property BuiltInDocumentProperties: DNBuiltInDocumentProperties read get_BuiltInDocumentProperties;
    ///<summary>
    ///  Gets <see cref="P:Aspose.Words.PlainTextDocument.CustomDocumentProperties" />
    ///  of the document.
    ///</summary>
    property CustomDocumentProperties: DNCustomDocumentProperties read get_CustomDocumentProperties;
  end;

  TDNPlainTextDocument = class(TDNGenericImport<DNPlainTextDocumentClass, DNPlainTextDocument>) end;

  //-------------namespace: Aspose.Words.Properties----------------
  DNDocumentPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3C31B3ED-E1E9-5203-8D43-A8EB8AF488AD}']
  end;

  ///<summary>
  ///  Represents a custom or built-in document property.
  ///</summary>
  ///<seealso cref="T:Aspose.Words.Properties.DocumentPropertyCollection" />
  [DNTypeName('Aspose.Words.Properties.DocumentProperty')]
  DNDocumentProperty = interface(DDN.mscorlib.DNObject)
  ['{7D74154F-9B3F-3DE9-A078-A2454E547770}']
  { getters & setters } 

    function get_Name: string;
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_Type: DNPropertyType;
    function get_LinkSource: string;
    function get_IsLinkToContent: Boolean;

  { methods } 

    ///<summary>
    ///  Returns the property value as a string formatted according to the current locale.
    ///</summary>
    ///<remarks><p>Converts a boolean property into "Y" or "N".
    ///  Converts a date property into a short date string.
    ///  For all other types converts a property using Object.ToString().</p>
    ///</remarks>
    function ToString: string;
    ///<summary>
    ///  Returns the property value as integer.
    ///</summary>
    ///<remarks>
    ///  Throws an exception if the property type is not <see cref="F:Aspose.Words.Properties.PropertyType.Number" />
    ///  .
    ///</remarks>
    function ToInt: Int32;
    ///<summary>
    ///  Returns the property value as double.
    ///</summary>
    ///<remarks>
    ///  Throws an exception if the property type is not <see cref="F:Aspose.Words.Properties.PropertyType.Number" />
    ///  .
    ///</remarks>
    function ToDouble: Double;
    ///<summary>
    ///  Returns the property value as DateTime in UTC.
    ///</summary>
    ///<remarks><p>Throws an exception if the property type is not <see cref="F:Aspose.Words.Properties.PropertyType.DateTime" />
    ///  .</p>
    ///  <p>Microsoft Word stores only the date part (no time) for custom date properties.</p>
    ///</remarks>
    function ToDateTime: DDN.mscorlib.DNDateTime;
    ///<summary>
    ///  Returns the property value as bool.
    ///</summary>
    ///<remarks><p>Throws an exception if the property type is not <see cref="F:Aspose.Words.Properties.PropertyType.Boolean" />
    ///  .</p>
    ///</remarks>
    function ToBool: Boolean;
    ///<summary>
    ///  Returns the property value as byte array.
    ///</summary>
    ///<remarks><p>Throws an exception if the property type is not <see cref="F:Aspose.Words.Properties.PropertyType.ByteArray" />
    ///  .</p>
    ///</remarks>
    function ToByteArray: TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Returns the name of the property.
    ///</summary>
    ///<remarks><para>Cannot be null and cannot be an empty string.</para></remarks>
    property Name: string read get_Name;
    ///<summary>
    ///  Gets or sets the value of the property.
    ///</summary>
    ///<remarks><para>Cannot be null.</para></remarks>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    ///<summary>
    ///  Gets the data type of the property.
    ///</summary>
    property &Type: DNPropertyType read get_Type;
    ///<summary>
    ///  Gets the source of a linked custom document property.
    ///</summary>
    property LinkSource: string read get_LinkSource;
    ///<summary>
    ///  Shows whether this property is linked to content or not.
    ///</summary>
    property IsLinkToContent: Boolean read get_IsLinkToContent;
  end;

  TDNDocumentProperty = class(TDNGenericImport<DNDocumentPropertyClass, DNDocumentProperty>) end;

  //-------------namespace: Aspose.Words.Properties----------------
  DNDocumentPropertyCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A9117CA0-DE41-5688-A490-81BACA4013F2}']
  end;

  ///<summary>
  ///  Base class for <see cref="T:Aspose.Words.Properties.BuiltInDocumentProperties" />
  ///  and <see cref="T:Aspose.Words.Properties.CustomDocumentProperties" />
  ///  collections.
  ///</summary>
  ///<remarks><p>The names of the properties are case-insensitive.</p>
  ///  <p>The properties in the collection are sorted alphabetically by name.</p>
  ///</remarks>
  ///<seealso cref="T:Aspose.Words.Properties.BuiltInDocumentProperties" />
  ///<seealso cref="T:Aspose.Words.Properties.CustomDocumentProperties" />
  [DNTypeName('Aspose.Words.Properties.DocumentPropertyCollection')]
  DNDocumentPropertyCollection = interface(DDN.mscorlib.DNObject)
  ['{58DF0EB8-BA96-3107-8AEE-6C355508336E}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(name: string): DNDocumentProperty; overload;
    function get_Item(index: Int32): DNDocumentProperty; overload;

  { methods } 

    ///<summary>
    ///  Returns an enumerator object that can be used to iterate over all items in the collection.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNDocumentProperty>;
    ///<summary>
    ///  Returns true if a property with the specified name exists in the collection.
    ///</summary>
    ///  <param name="name">The case-insensitive name of the property.</param>
    ///<returns>True if the property exists in the collection; false otherwise.</returns>
    function &Contains(name: string): Boolean;
    ///<summary>
    ///  Gets the index of a property by name.
    ///</summary>
    ///  <param name="name">The case-insensitive name of the property.</param>
    ///<returns>The zero based index. Negative value if not found.</returns>
    function IndexOf(name: string): Int32;
    ///<summary>
    ///  Removes a property with the specified name from the collection.
    ///</summary>
    ///  <param name="name">The case-insensitive name of the property.</param>
    procedure Remove(name: string);
    ///<summary>
    ///  Removes a property at the specified index.
    ///</summary>
    ///  <param name="index">The zero based index.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all properties from the collection.
    ///</summary>
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets number of items in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[name: string]: DNDocumentProperty read get_Item; default;
    property Item[index: Int32]: DNDocumentProperty read get_Item; default;
  end;

  TDNDocumentPropertyCollection = class(TDNGenericImport<DNDocumentPropertyCollectionClass, DNDocumentPropertyCollection>) end;

  //-------------namespace: Aspose.Words.Properties----------------
  DNBuiltInDocumentPropertiesClass = interface(DNDocumentPropertyCollectionClass)
  ['{3EA92E44-67D4-5B82-BCA6-4D8E395B28C6}']
  end;

  ///<summary>
  ///  A collection of built-in document properties.
  ///</summary>
  ///<remarks><para>Provides access to <see cref="T:Aspose.Words.Properties.DocumentProperty" />
  ///  objects by their names (using an indexer) and
  ///  via a set of typed properties that return values of appropriate types.</para></remarks>
  ///<remarks><p>The names of the properties are case-insensitive.</p>
  ///  <p>The properties in the collection are sorted alphabetically by name.</p>
  ///</remarks>
  ///<seealso cref="T:Aspose.Words.Document" />
  ///<seealso cref="P:Aspose.Words.Document.BuiltInDocumentProperties" />
  ///<seealso cref="P:Aspose.Words.Document.CustomDocumentProperties" />
  [DNTypeName('Aspose.Words.Properties.BuiltInDocumentProperties')]
  DNBuiltInDocumentProperties = interface(DNDocumentPropertyCollection)
  ['{7BB98A40-A4D1-3459-BC42-EB8CF2F34613}']
  { getters & setters } 

    function get_Item(name: string): DNDocumentProperty; overload;
    function get_Author: string;
    procedure set_Author(value: string);
    function get_Bytes: Int32;
    procedure set_Bytes(value: Int32);
    function get_Characters: Int32;
    procedure set_Characters(value: Int32);
    function get_CharactersWithSpaces: Int32;
    procedure set_CharactersWithSpaces(value: Int32);
    function get_Comments: string;
    procedure set_Comments(value: string);
    function get_Category: string;
    procedure set_Category(value: string);
    function get_Company: string;
    procedure set_Company(value: string);
    function get_CreatedTime: DDN.mscorlib.DNDateTime;
    procedure set_CreatedTime(value: DDN.mscorlib.DNDateTime);
    function get_HyperlinkBase: string;
    procedure set_HyperlinkBase(value: string);
    function get_Keywords: string;
    procedure set_Keywords(value: string);
    function get_LastPrinted: DDN.mscorlib.DNDateTime;
    procedure set_LastPrinted(value: DDN.mscorlib.DNDateTime);
    function get_LastSavedBy: string;
    procedure set_LastSavedBy(value: string);
    function get_LastSavedTime: DDN.mscorlib.DNDateTime;
    procedure set_LastSavedTime(value: DDN.mscorlib.DNDateTime);
    function get_Lines: Int32;
    procedure set_Lines(value: Int32);
    function get_LinksUpToDate: Boolean;
    procedure set_LinksUpToDate(value: Boolean);
    function get_Manager: string;
    procedure set_Manager(value: string);
    function get_NameOfApplication: string;
    procedure set_NameOfApplication(value: string);
    function get_Pages: Int32;
    procedure set_Pages(value: Int32);
    function get_Paragraphs: Int32;
    procedure set_Paragraphs(value: Int32);
    function get_RevisionNumber: Int32;
    procedure set_RevisionNumber(value: Int32);
    function get_Security: DNDocumentSecurity;
    procedure set_Security(value: DNDocumentSecurity);
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Template: string;
    procedure set_Template(value: string);
    function get_Thumbnail: TArray<Byte>;
    procedure set_Thumbnail(value: TArray<Byte>);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_TotalEditingTime: Int32;
    procedure set_TotalEditingTime(value: Int32);
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_ContentStatus: string;
    procedure set_ContentStatus(value: string);
    function get_Version: Int32;
    procedure set_Version(value: Int32);
    function get_Words: Int32;
    procedure set_Words(value: Int32);
    function get_HeadingPairs: TArray<DDN.mscorlib.DNObject>;
    procedure set_HeadingPairs(value: TArray<DDN.mscorlib.DNObject>);
    function get_TitlesOfParts: TArray<string>;
    procedure set_TitlesOfParts(value: TArray<string>);
    function get_Count: Int32;
    function get_Item(index: Int32): DNDocumentProperty; overload;

  { methods } 

    ///<summary>
    ///  Returns an enumerator object that can be used to iterate over all items in the collection.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNDocumentProperty>;
    ///<summary>
    ///  Returns true if a property with the specified name exists in the collection.
    ///</summary>
    ///  <param name="name">The case-insensitive name of the property.</param>
    ///<returns>True if the property exists in the collection; false otherwise.</returns>
    function &Contains(name: string): Boolean;
    ///<summary>
    ///  Gets the index of a property by name.
    ///</summary>
    ///  <param name="name">The case-insensitive name of the property.</param>
    ///<returns>The zero based index. Negative value if not found.</returns>
    function IndexOf(name: string): Int32;
    ///<summary>
    ///  Removes a property with the specified name from the collection.
    ///</summary>
    ///  <param name="name">The case-insensitive name of the property.</param>
    procedure Remove(name: string);
    ///<summary>
    ///  Removes a property at the specified index.
    ///</summary>
    ///  <param name="index">The zero based index.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all properties from the collection.
    ///</summary>
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNDocumentProperty read get_Item; default;
    ///<summary>
    ///  Gets or sets the name of the document's author.
    ///</summary>
    property Author: string read get_Author write set_Author;
    ///<summary>
    ///  Represents an estimate of the number of bytes in the document.
    ///</summary>
    ///<remarks><para>Microsoft Word does not always set this property.</para><para>Aspose.Words does not update this property.</para></remarks>
    property Bytes: Int32 read get_Bytes write set_Bytes;
    ///<summary>
    ///  Represents an estimate of the number of characters in the document.
    ///</summary>
    ///<remarks><para>Aspose.Words updates this property when you call <see cref="M:Aspose.Words.Document.UpdateWordCount" />
    ///  .</para></remarks>
    property Characters: Int32 read get_Characters write set_Characters;
    ///<summary>
    ///  Represents an estimate of the number of characters (including spaces) in the document.
    ///</summary>
    ///<remarks><para>Aspose.Words updates this property when you call <see cref="M:Aspose.Words.Document.UpdateWordCount" />
    ///  .</para></remarks>
    property CharactersWithSpaces: Int32 read get_CharactersWithSpaces write set_CharactersWithSpaces;
    ///<summary>
    ///  Gets or sets the document comments.
    ///</summary>
    property Comments: string read get_Comments write set_Comments;
    ///<summary>
    ///  Gets or sets the category of the document.
    ///</summary>
    property Category: string read get_Category write set_Category;
    ///<summary>
    ///  Gets or sets the company property.
    ///</summary>
    property Company: string read get_Company write set_Company;
    ///<summary>
    ///  Gets or sets date of the document creation in UTC.
    ///</summary>
    ///<remarks><para>For documents originated from RTF format  this property returns local time of the author's machine at the moment of document creation.</para><para>Aspose.Words does not update this property.</para></remarks>
    property CreatedTime: DDN.mscorlib.DNDateTime read get_CreatedTime write set_CreatedTime;
    ///<summary>
    ///  Specifies the base string used for evaluating relative hyperlinks in this document.
    ///</summary>
    ///<remarks><para>Aspose.Words does not use this property.</para></remarks>
    property HyperlinkBase: string read get_HyperlinkBase write set_HyperlinkBase;
    ///<summary>
    ///  Gets or sets the document keywords.
    ///</summary>
    property Keywords: string read get_Keywords write set_Keywords;
    ///<summary>
    ///  Gets or sets the date when the document was last printed in UTC.
    ///</summary>
    ///<remarks><para>For documents originated from RTF format this property returns the local time of last print operation.</para><para>If the document was never printed, this property will return DateTime.MinValue.</para><para>Aspose.Words does not update this property.</para></remarks>
    property LastPrinted: DDN.mscorlib.DNDateTime read get_LastPrinted write set_LastPrinted;
    ///<summary>
    ///  Gets or sets the name of the last author.
    ///</summary>
    ///<remarks><para>Aspose.Words does not update this property.</para></remarks>
    property LastSavedBy: string read get_LastSavedBy write set_LastSavedBy;
    ///<summary>
    ///  Gets or sets the time of the last save in UTC.
    ///</summary>
    ///<remarks><para>For documents originated from RTF format this property returns the local time of last save operation.</para><para>Aspose.Words does not update this property.</para></remarks>
    property LastSavedTime: DDN.mscorlib.DNDateTime read get_LastSavedTime write set_LastSavedTime;
    ///<summary>
    ///  Represents an estimate of the number of lines in the document.
    ///</summary>
    ///<remarks><para>Aspose.Words updates this property when you call <see cref="M:Aspose.Words.Document.UpdateWordCount(System.Boolean)" />
    ///  .</para></remarks>
    property Lines: Int32 read get_Lines write set_Lines;
    ///<summary>
    ///  Indicates whether hyperlinks in a document are up-to-date.
    ///</summary>
    ///<remarks><para>Aspose.Words does not update this property.</para></remarks>
    property LinksUpToDate: Boolean read get_LinksUpToDate write set_LinksUpToDate;
    ///<summary>
    ///  Gets or sets the manager property.
    ///</summary>
    property Manager: string read get_Manager write set_Manager;
    ///<summary>
    ///  Gets or sets the name of the application.
    ///</summary>
    property NameOfApplication: string read get_NameOfApplication write set_NameOfApplication;
    ///<summary>
    ///  Represents an estimate of the number of pages in the document.
    ///</summary>
    ///<remarks><para>Aspose.Words updates this property when you call <see cref="M:Aspose.Words.Document.UpdatePageLayout" />
    ///  .</para></remarks>
    property Pages: Int32 read get_Pages write set_Pages;
    ///<summary>
    ///  Represents an estimate of the number of paragraphs in the document.
    ///</summary>
    ///<remarks><para>Aspose.Words updates this property when you call <see cref="M:Aspose.Words.Document.UpdateWordCount" />
    ///  .</para></remarks>
    property Paragraphs: Int32 read get_Paragraphs write set_Paragraphs;
    ///<summary>
    ///  Gets or sets the document revision number.
    ///</summary>
    ///<remarks><para>Aspose.Words does not update this property.</para></remarks>
    property RevisionNumber: Int32 read get_RevisionNumber write set_RevisionNumber;
    ///<summary>
    ///  Specifies the security level of a document as a numeric value.
    ///</summary>
    ///<remarks><para>Use this property for informational purposes only because Microsoft Word does not always
    ///  set this property. This property is available in DOC and OOXML documents only.</para><para>To protect or unprotect a document use the
    ///<see cref="M:Aspose.Words.Document.Protect(Aspose.Words.ProtectionType,System.String)" />
    ///  and <see cref="M:Aspose.Words.Document.Unprotect" />
    ///  methods.</para><para>Aspose.Words updates this property to a correct value before saving a document.</para></remarks>
    property Security: DNDocumentSecurity read get_Security write set_Security;
    ///<summary>
    ///  Gets or sets the subject of the document.
    ///</summary>
    property Subject: string read get_Subject write set_Subject;
    ///<summary>
    ///  Gets or sets the informational name of the document template.
    ///</summary>
    ///<remarks><para>In Microsoft Word, this property is for informational purposes only and
    ///  usually contains only the file name of the template without the path.</para><para>Empty string means the document is attached to the Normal template.</para><para>To get or set the actual name of the attached template, use the
    ///<see cref="P:Aspose.Words.Document.AttachedTemplate" />
    ///  property.</para><seealso cref="P:Aspose.Words.Document.AttachedTemplate" />
    ///</remarks>
    property Template: string read get_Template write set_Template;
    ///<summary><para>Gets or sets the thumbnail of the document.</para></summary>
    ///<remarks><para>For now this property is used only when a document is being exported to ePub,
    ///  it's not read from and written to other document formats.</para><para>Image of arbitrary format can be set to this property, but the format is checked during export.
    ///<see cref="T:System.InvalidOperationException" />
    ///  is thrown if the image is invalid or its format is unsupported for
    ///  specific format of document.</para><para>Only gif, jpeg and png images can be used for ePub publication.</para></remarks>
    property Thumbnail: TArray<Byte> read get_Thumbnail write set_Thumbnail;
    ///<summary>
    ///  Gets or sets the title of the document.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets the total editing time in minutes.
    ///</summary>
    property TotalEditingTime: Int32 read get_TotalEditingTime write set_TotalEditingTime;
    ///<summary>
    ///  Gets or sets the ContentStatus of the document.
    ///</summary>
    property ContentType: string read get_ContentType write set_ContentType;
    ///<summary>
    ///  Gets or sets the ContentStatus of the document.
    ///</summary>
    property ContentStatus: string read get_ContentStatus write set_ContentStatus;
    ///<summary>
    ///  Represents the version number of the application that created the document.
    ///</summary>
    ///<remarks><para>When a document was created by Microsoft Word, then high 16 bit represent
    ///  the major version and low 16 bit represent the build number.</para></remarks>
    property Version: Int32 read get_Version write set_Version;
    ///<summary>
    ///  Represents an estimate of the number of words in the document.
    ///</summary>
    ///<remarks><para>Aspose.Words updates this property when you call <see cref="M:Aspose.Words.Document.UpdateWordCount" />
    ///  .</para></remarks>
    property Words: Int32 read get_Words write set_Words;
    ///<summary>
    ///  Specifies document headings and their names.
    ///</summary>
    ///<remarks><para>Every heading pair occupies two elements in this array.</para><para>The first element of the pair is a <see cref="T:System.String" />
    ///  and specifies the heading name.
    ///  The second element of the pair is an <see cref="T:System.Int32" />
    ///  and specifies the count of document
    ///  parts for this heading in the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.TitlesOfParts" />
    ///  property.</para><para>The total sum of counts for all heading pairs in this property must be equal to the
    ///  number of elements in the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.TitlesOfParts" />
    ///  property.</para><para>Aspose.Words does not update this property.</para><seealso cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.TitlesOfParts" />
    ///</remarks>
    property HeadingPairs: TArray<DDN.mscorlib.DNObject> read get_HeadingPairs write set_HeadingPairs;
    ///<summary>
    ///  Each string in the array specifies the name of a part in the document.
    ///</summary>
    ///<remarks><para>Aspose.Words does not update this property.</para><seealso cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.HeadingPairs" />
    ///</remarks>
    property TitlesOfParts: TArray<string> read get_TitlesOfParts write set_TitlesOfParts;
    ///<summary>
    ///  Gets number of items in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNDocumentProperty read get_Item; default;
  end;

  TDNBuiltInDocumentProperties = class(TDNGenericImport<DNBuiltInDocumentPropertiesClass, DNBuiltInDocumentProperties>) end;

  //-------------namespace: Aspose.Words.Properties----------------
  DNCustomDocumentPropertiesClass = interface(DNDocumentPropertyCollectionClass)
  ['{E7432482-4D86-52EB-A7DC-5AAD1367F2C7}']
  end;

  ///<summary>
  ///  A collection of custom document properties.
  ///</summary>
  ///<remarks><p>Each <see cref="T:Aspose.Words.Properties.DocumentProperty" />
  ///  object represents a custom property of a container document.</p>
  ///</remarks>
  ///<remarks><p>The names of the properties are case-insensitive.</p>
  ///  <p>The properties in the collection are sorted alphabetically by name.</p>
  ///</remarks>
  ///<seealso cref="T:Aspose.Words.Document" />
  ///<seealso cref="P:Aspose.Words.Document.BuiltInDocumentProperties" />
  ///<seealso cref="P:Aspose.Words.Document.CustomDocumentProperties" />
  [DNTypeName('Aspose.Words.Properties.CustomDocumentProperties')]
  DNCustomDocumentProperties = interface(DNDocumentPropertyCollection)
  ['{4B149D04-7EEF-33A6-B2A3-964D8AFF12E1}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(name: string): DNDocumentProperty; overload;
    function get_Item(index: Int32): DNDocumentProperty; overload;

  { methods } 

    ///<overloads>Creates a new custom document property.</overloads><summary>
    ///  Creates a new custom document property of the <b>PropertyType.String</b>
    ///  data type.
    ///</summary>
    ///  <param name="name">The name of the property.</param>
    ///  <param name="value">The value of the property.</param>
    ///<returns>The newly created property object.</returns>
    function Add(name: string; value: string): DNDocumentProperty; overload;
    ///<summary>
    ///  Creates a new custom document property of the <b>PropertyType.Number</b>
    ///  data type.
    ///</summary>
    ///  <param name="name">The name of the property.</param>
    ///  <param name="value">The value of the property.</param>
    ///<returns>The newly created property object.</returns>
    function Add(name: string; value: Int32): DNDocumentProperty; overload;
    ///<summary>
    ///  Creates a new custom document property of the <b>PropertyType.DateTime</b>
    ///  data type.
    ///</summary>
    ///  <param name="name">The name of the property.</param>
    ///  <param name="value">The value of the property.</param>
    ///<returns>The newly created property object.</returns>
    function Add(name: string; value: DDN.mscorlib.DNDateTime): DNDocumentProperty; overload;
    ///<summary>
    ///  Creates a new custom document property of the <b>PropertyType.Boolean</b>
    ///  data type.
    ///</summary>
    ///  <param name="name">The name of the property.</param>
    ///  <param name="value">The value of the property.</param>
    ///<returns>The newly created property object.</returns>
    function Add(name: string; value: Boolean): DNDocumentProperty; overload;
    ///<summary>
    ///  Creates a new custom document property of the <b>PropertyType.Float</b>
    ///  data type.
    ///</summary>
    ///  <param name="name">The name of the property.</param>
    ///  <param name="value">The value of the property.</param>
    ///<returns>The newly created property object.</returns>
    function Add(name: string; value: Double): DNDocumentProperty; overload;
    ///<summary>
    ///  Creates a new linked to content custom document property.
    ///</summary>
    ///  <param name="name">The name of the property.</param>
    ///  <param name="linkSource">The source of the property.</param>
    ///<returns>The newly created property object or null when the linkSource is invalid.</returns>
    function AddLinkToContent(name: string; linkSource: string): DNDocumentProperty;
    ///<summary>
    ///  Returns an enumerator object that can be used to iterate over all items in the collection.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNDocumentProperty>;
    ///<summary>
    ///  Returns true if a property with the specified name exists in the collection.
    ///</summary>
    ///  <param name="name">The case-insensitive name of the property.</param>
    ///<returns>True if the property exists in the collection; false otherwise.</returns>
    function &Contains(name: string): Boolean;
    ///<summary>
    ///  Gets the index of a property by name.
    ///</summary>
    ///  <param name="name">The case-insensitive name of the property.</param>
    ///<returns>The zero based index. Negative value if not found.</returns>
    function IndexOf(name: string): Int32;
    ///<summary>
    ///  Removes a property with the specified name from the collection.
    ///</summary>
    ///  <param name="name">The case-insensitive name of the property.</param>
    procedure Remove(name: string);
    ///<summary>
    ///  Removes a property at the specified index.
    ///</summary>
    ///  <param name="index">The zero based index.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all properties from the collection.
    ///</summary>
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets number of items in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[name: string]: DNDocumentProperty read get_Item; default;
    property Item[index: Int32]: DNDocumentProperty read get_Item; default;
  end;

  TDNCustomDocumentProperties = class(TDNGenericImport<DNCustomDocumentPropertiesClass, DNCustomDocumentProperties>) end;

  //-------------namespace: Aspose.Words----------------
  DNRangeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2D500E05-8062-550B-9280-C3CFD05A596B}']
  end;

  ///<summary>
  ///  Represents a contiguous area in a document.
  ///</summary>
  ///<remarks><p>The document is represented by a tree of nodes and the nodes provide operations
  ///  to work with the tree, but some operations are easier to perform if the document
  ///  is treated as a contiguous sequence of text.</p>
  ///  <p><b>Range</b>
  ///  is a "facade" interface that provide methods that treat the document
  ///  or portions of the document as "flat" text regardless of the fact that the document
  ///  nodes are stored in a tree-like object model.</p>
  ///  <p><b>Range</b>
  ///  does not contain any text or nodes, it is merely a view or "window"
  ///  over a fragment of a document.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.Range')]
  DNRange = interface(DDN.mscorlib.DNObject)
  ['{A633B5D1-5131-3B26-A52E-0DB8E9E75A6B}']
  { getters & setters } 

    function get_Text: string;
    function get_FormFields: DNFormFieldCollection;
    function get_Bookmarks: DNBookmarkCollection;
    function get_Fields: DNFieldCollection;

  { methods } 

    ///<summary>
    ///  Deletes all characters of the range.
    ///</summary>
    procedure Delete;
    ///<summary>
    ///  Replaces all occurrences of a specified character string pattern with a replacement string.
    ///</summary>
    ///<remarks><p>The pattern will not be used as regular expression.
    ///  Please use <see cref="M:Aspose.Words.Range.Replace(System.Text.RegularExpressions.Regex,System.String)" />
    ///  if you need regular expressions.</p>
    ///  <p>Used case-insensitive comparison.</p>
    ///  <p>Method is able to process breaks in both pattern and replacement strings.</p>
    ///  You should use special meta-characters if you need to work with breaks:
    ///<list type="bullet"><item><b>&amp;p</b>
    ///  - paragraph break</item>
    ///<item><b>&amp;b</b>
    ///  - section break</item>
    ///<item><b>&amp;m</b>
    ///  - page break</item>
    ///<item><b>&amp;l</b>
    ///  - manual line break</item>
    ///</list>
    ///  Use method <see cref="M:Aspose.Words.Range.Replace(System.String,System.String,Aspose.Words.Replacing.FindReplaceOptions)" />
    ///  to have more flexible customization.
    ///</remarks>
    ///  <param name="pattern">A string to be replaced.</param>
    ///  <param name="replacement">A string to replace all occurrences of pattern.</param>
    ///<returns>The number of replacements made.</returns>
    ///<example><code>
    ///  Document doc = new Document();
    ///  DocumentBuilder builder = new DocumentBuilder(doc);
    ///  builder.Writeln("Numbers 1, 2, 3");
    ///  // Inserts paragraph break after Numbers.
    ///  doc.Range.Replace("Numbers", "Numbers&amp;p", new FindReplaceOptions());
    ///</code></example>
    function Replace(pattern: string; replacement: string): Int32; overload;
    ///<summary>
    ///  Replaces all occurrences of a character pattern specified by a regular expression with another string.
    ///</summary>
    ///<remarks><p>Replaces the whole match captured by the regular expression.</p>
    ///  <p>Method is able to process breaks in both pattern and replacement strings.</p>
    ///  You should use special meta-characters if you need to work with breaks:
    ///<list type="bullet"><item><b>&amp;p</b>
    ///  - paragraph break</item>
    ///<item><b>&amp;b</b>
    ///  - section break</item>
    ///<item><b>&amp;m</b>
    ///  - page break</item>
    ///<item><b>&amp;l</b>
    ///  - manual line break</item>
    ///</list>
    ///  Use method <see cref="M:Aspose.Words.Range.Replace(System.Text.RegularExpressions.Regex,System.String,Aspose.Words.Replacing.FindReplaceOptions)" />
    ///  to have more flexible customization.
    ///</remarks>
    ///  <param name="pattern">A regular expression pattern used to find matches.</param>
    ///  <param name="replacement">A string to replace all occurrences of pattern.</param>
    ///<returns>The number of replacements made.</returns>
    ///<example><code>
    ///  Document doc = new Document();
    ///  DocumentBuilder builder = new DocumentBuilder(doc);
    ///  builder.Writeln("a1, b2, c3");
    ///  // Replaces each number with paragraph break.
    ///  doc.Range.Replace(new Regex(@"\d+"), "&amp;p");
    ///</code></example>
    function Replace(pattern: DDN.Aspose.Common.DNRegex; replacement: string): Int32; overload;
    ///<summary>
    ///  Replaces all occurrences of a specified character string pattern with a replacement string.
    ///</summary>
    ///<remarks><p>The pattern will not be used as regular expression.
    ///  Please use <see cref="M:Aspose.Words.Range.Replace(System.Text.RegularExpressions.Regex,System.String,Aspose.Words.Replacing.FindReplaceOptions)" />
    ///  if you need regular expressions.</p>
    ///  <p>Method is able to process breaks in both pattern and replacement strings.</p>
    ///  You should use special meta-characters if you need to work with breaks:
    ///<list type="bullet"><item><b>&amp;p</b>
    ///  - paragraph break</item>
    ///<item><b>&amp;b</b>
    ///  - section break</item>
    ///<item><b>&amp;m</b>
    ///  - page break</item>
    ///<item><b>&amp;l</b>
    ///  - manual line break</item>
    ///<item><b>&amp;&amp;</b>
    ///  - &amp; character</item>
    ///</list>
    ///</remarks>
    ///  <param name="pattern">A string to be replaced.</param>
    ///  <param name="replacement">A string to replace all occurrences of pattern.</param>
    ///  <param name="options"><see cref="T:Aspose.Words.Replacing.FindReplaceOptions" />
    ///  object to specify additional options.</param>
    ///<returns>The number of replacements made.</returns>
    ///<example><code>
    ///  Document doc = new Document();
    ///  DocumentBuilder builder = new DocumentBuilder(doc);
    ///  builder.Writeln("Numbers 1, 2, 3");
    ///  // Inserts paragraph break after Numbers.
    ///  doc.Range.Replace("Numbers", "Numbers&amp;p", new FindReplaceOptions());
    ///</code></example>
    function Replace(pattern: string; replacement: string; options: DNFindReplaceOptions): Int32; overload;
    ///<summary>
    ///  Replaces all occurrences of a character pattern specified by a regular expression with another string.
    ///</summary>
    ///<remarks><p>Replaces the whole match captured by the regular expression.</p>
    ///  <p>Method is able to process breaks in both pattern and replacement strings.</p>
    ///  You should use special meta-characters if you need to work with breaks:
    ///<list type="bullet"><item><b>&amp;p</b>
    ///  - paragraph break</item>
    ///<item><b>&amp;b</b>
    ///  - section break</item>
    ///<item><b>&amp;m</b>
    ///  - page break</item>
    ///<item><b>&amp;l</b>
    ///  - manual line break</item>
    ///<item><b>&amp;&amp;</b>
    ///  - &amp; character</item>
    ///</list>
    ///</remarks>
    ///  <param name="pattern">A regular expression pattern used to find matches.</param>
    ///  <param name="replacement">A string to replace all occurrences of pattern.</param>
    ///  <param name="options"><see cref="T:Aspose.Words.Replacing.FindReplaceOptions" />
    ///  object to specify additional options.</param>
    ///<returns>The number of replacements made.</returns>
    ///<example><code>
    ///  Document doc = new Document();
    ///  DocumentBuilder builder = new DocumentBuilder(doc);
    ///  builder.Writeln("a1, b2, c3");
    ///  // Replaces each number with paragraph break.
    ///  doc.Range.Replace(new Regex(@"\d+"), "&amp;p", new FindReplaceOptions());
    ///</code></example>
    function Replace(pattern: DDN.Aspose.Common.DNRegex; replacement: string; options: DNFindReplaceOptions): Int32; overload;
    ///<summary>
    ///  Updates the values of document fields in this range.
    ///</summary>
    ///<remarks><para>When you open, modify and then save a document, Aspose.Words does not update fields automatically, it keeps them intact.
    ///  Therefore, you would usually want to call this method before saving if you have modified the document
    ///  programmatically and want to make sure the proper (calculated) field values appear in the saved document.</para><para>There is no need to update fields after executing a mail merge because mail merge is a kind of field update
    ///  and automatically updates all fields in the document.</para><p>This method does not update all field types. For the detailed list of supported field types, see the Programmers Guide.</p>
    ///  <para>This method does not update fields that are related to the page layout algorithms (e.g. PAGE, PAGES, PAGEREF).
    ///  The page layout-related fields are updated when you render a document or call <see cref="M:Aspose.Words.Document.UpdatePageLayout" />
    ///  .</para><para>To update fields in the whole document use <see cref="M:Aspose.Words.Document.UpdateFields" />
    ///  .</para></remarks>
    procedure UpdateFields;
    ///<summary>
    ///  Unlinks fields in this range.
    ///</summary>
    ///<remarks><para>Replaces all the fields in this range with their most recent results.</para><para>To unlink fields in the whole document use <see cref="M:Aspose.Words.Range.UnlinkFields" />
    ///  .</para></remarks>
    procedure UnlinkFields;
    ///<summary>
    ///  Changes field type values <see cref="P:Aspose.Words.Fields.FieldChar.FieldType" />
    ///  of <see cref="T:Aspose.Words.Fields.FieldStart" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldSeparator" />
    ///  , <see cref="T:Aspose.Words.Fields.FieldEnd" />
    ///  in this range so that they correspond to the field types contained in the field codes.
    ///</summary>
    ///<remarks><para>Use this method after document changes that affect field types.</para><para>To change field type values in the whole document use <see cref="M:Aspose.Words.Document.NormalizeFieldTypes" />
    ///  .</para></remarks>
    procedure NormalizeFieldTypes;
    ///<summary>
    ///  Constructs a new fully formed document that contains the range.
    ///</summary>
    function ToDocument: DNDocument;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the text of the range.
    ///</summary>
    ///<remarks><p>The returned string includes all control and special characters as described in <see cref="T:Aspose.Words.ControlChar" />
    ///  .</p>
    ///</remarks>
    property Text: string read get_Text;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Words.Range.FormFields" />
    ///  collection that represents all form fields in the range.
    ///</summary>
    property FormFields: DNFormFieldCollection read get_FormFields;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Words.Range.Bookmarks" />
    ///  collection that represents all bookmarks in the range.
    ///</summary>
    property Bookmarks: DNBookmarkCollection read get_Bookmarks;
    ///<summary>
    ///  Returns a <see cref="P:Aspose.Words.Range.Fields" />
    ///  collection that represents all fields in the range.
    ///</summary>
    property Fields: DNFieldCollection read get_Fields;
  end;

  TDNRange = class(TDNGenericImport<DNRangeClass, DNRange>) end;

  //-------------namespace: Aspose.Words.Rendering----------------
  DNNodeRendererBaseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B53C2152-3E6E-5289-9CA4-69D61778B704}']
  end;

  ///<summary>
  ///  Base class for <see cref="T:Aspose.Words.Rendering.ShapeRenderer" />
  ///  and <see cref="T:Aspose.Words.Rendering.OfficeMathRenderer" />
  ///  .
  ///</summary>
  [DNTypeName('Aspose.Words.Rendering.NodeRendererBase')]
  DNNodeRendererBase = interface(DDN.mscorlib.DNObject)
  ['{E5FE63A1-69BA-32E0-A5E6-FC2276937412}']
  { getters & setters } 

    function get_SizeInPoints: DDN.Aspose.Common.DNSizeF;
    function get_BoundsInPoints: DDN.Aspose.Common.DNRectangleF;
    function get_OpaqueBoundsInPoints: DDN.Aspose.Common.DNRectangleF;

  { methods } 

    ///<summary>
    ///  Calculates the size of the shape in pixels for a specified zoom factor and resolution.
    ///</summary>
    ///<remarks><para>This method converts <see cref="P:Aspose.Words.Rendering.NodeRendererBase.SizeInPoints" />
    ///  into size in pixels and it is useful
    ///  when you want to create a bitmap for rendering the shape neatly onto the bitmap.</para></remarks>
    ///  <param name="scale">The zoom factor (1.0 is 100%).</param>
    ///  <param name="dpi">The resolution (horizontal and vertical) to convert from points to pixels (dots per inch).</param>
    ///<returns>The size of the shape in pixels.</returns>
    function GetSizeInPixels(scale: Single; dpi: Single): DDN.Aspose.Common.DNSize; overload;
    ///<summary>
    ///  Calculates the size of the shape in pixels for a specified zoom factor and resolution.
    ///</summary>
    ///<remarks><para>This method converts <see cref="P:Aspose.Words.Rendering.NodeRendererBase.SizeInPoints" />
    ///  into size in pixels and it is useful
    ///  when you want to create a bitmap for rendering the shape neatly onto the bitmap.</para></remarks>
    ///  <param name="scale">The zoom factor (1.0 is 100%).</param>
    ///  <param name="horizontalDpi">The horizontal resolution to convert from points to pixels (dots per inch).</param>
    ///  <param name="verticalDpi">The vertical resolution to convert from points to pixels (dots per inch).</param>
    ///<returns>The size of the shape in pixels.</returns>
    function GetSizeInPixels(scale: Single; horizontalDpi: Single; verticalDpi: Single): DDN.Aspose.Common.DNSize; overload;
    ///<summary>
    ///  Calculates the bounds of the shape in pixels for a specified zoom factor and resolution.
    ///</summary>
    ///<remarks><para>This method converts <see cref="P:Aspose.Words.Rendering.NodeRendererBase.BoundsInPoints" />
    ///  into rectangle in pixels.</para></remarks>
    ///  <param name="scale">The zoom factor (1.0 is 100%).</param>
    ///  <param name="dpi">The resolution (horizontal and vertical) to convert from points to pixels (dots per inch).</param>
    ///<returns>The actual (as rendered on the page) bounding box of the shape in pixels.</returns>
    function GetBoundsInPixels(scale: Single; dpi: Single): DDN.Aspose.Common.DNRectangle; overload;
    ///<summary>
    ///  Calculates the bounds of the shape in pixels for a specified zoom factor and resolution.
    ///</summary>
    ///<remarks><para>This method converts <see cref="P:Aspose.Words.Rendering.NodeRendererBase.BoundsInPoints" />
    ///  into rectangle in pixels.</para></remarks>
    ///  <param name="scale">The zoom factor (1.0 is 100%).</param>
    ///  <param name="horizontalDpi">The horizontal resolution to convert from points to pixels (dots per inch).</param>
    ///  <param name="verticalDpi">The vertical resolution to convert from points to pixels (dots per inch).</param>
    ///<returns>The actual (as rendered on the page) bounding box of the shape in pixels.</returns>
    function GetBoundsInPixels(scale: Single; horizontalDpi: Single; verticalDpi: Single): DDN.Aspose.Common.DNRectangle; overload;
    ///<summary>
    ///  Calculates the opaque bounds of the shape in pixels for a specified zoom factor and resolution.
    ///</summary>
    ///<remarks><para>This method converts <see cref="P:Aspose.Words.Rendering.NodeRendererBase.OpaqueBoundsInPoints" />
    ///  into rectangle in pixels and it is useful
    ///  when you want to create a bitmap for rendering the shape with only opaque part of the shape.</para></remarks>
    ///  <param name="scale">The zoom factor (1.0 is 100%).</param>
    ///  <param name="dpi">The resolution to convert from points to pixels (dots per inch).</param>
    ///<returns>The opaque rectangle of the shape in pixels.</returns>
    function GetOpaqueBoundsInPixels(scale: Single; dpi: Single): DDN.Aspose.Common.DNRectangle; overload;
    ///<summary>
    ///  Calculates the opaque bounds of the shape in pixels for a specified zoom factor and resolution.
    ///</summary>
    ///<remarks><para>This method converts <see cref="P:Aspose.Words.Rendering.NodeRendererBase.OpaqueBoundsInPoints" />
    ///  into rectangle in pixels and it is useful
    ///  when you want to create a bitmap for rendering the shape with only opaque part of the shape.</para></remarks>
    ///  <param name="scale">The zoom factor (1.0 is 100%).</param>
    ///  <param name="horizontalDpi">The horizontal resolution to convert from points to pixels (dots per inch).</param>
    ///  <param name="verticalDpi">The vertical resolution to convert from points to pixels (dots per inch).</param>
    ///<returns>The opaque rectangle of the shape in pixels.</returns>
    function GetOpaqueBoundsInPixels(scale: Single; horizontalDpi: Single; verticalDpi: Single): DDN.Aspose.Common.DNRectangle; overload;
    ///<summary>
    ///  Renders the shape into a <see cref="T:System.Drawing.Graphics" />
    ///  object to a specified scale.
    ///</summary>
    ///  <param name="graphics">The object where to render to.</param>
    ///  <param name="x">The X coordinate (in world units) of the top left corner of the rendered shape.</param>
    ///  <param name="y">The Y coordinate (in world units) of the top left corner of the rendered shape.</param>
    ///  <param name="scale">The scale for rendering the shape (1.0 is 100%).</param>
    ///<returns>The width and height (in world units) of the rendered shape.</returns>
    function RenderToScale(graphics: DDN.Aspose.Common.DNGraphics; x: Single; y: Single; scale: Single): DDN.Aspose.Common.DNSizeF;
    ///<summary>
    ///  Renders the shape into a <see cref="T:System.Drawing.Graphics" />
    ///  object to a specified size.
    ///</summary>
    ///  <param name="graphics">The object where to render to.</param>
    ///  <param name="x">The X coordinate (in world units) of the top left corner of the rendered shape.</param>
    ///  <param name="y">The Y coordinate (in world units) of the top left corner of the rendered shape.</param>
    ///  <param name="width">The maximum width (in world units) that can be occupied by the rendered shape.</param>
    ///  <param name="height">The maximum height (in world units) that can be occupied by the rendered shape.</param>
    ///<returns>The scale that was automatically calculated for the rendered shape to fit the specified size.</returns>
    function RenderToSize(graphics: DDN.Aspose.Common.DNGraphics; x: Single; y: Single; width: Single; height: Single): Single;
    ///<overloads>Renders the shape and saves into an image.</overloads><summary>
    ///  Renders the shape into an image and saves into a file.
    ///</summary>
    ///  <param name="fileName">The name for the image file. If a file with the specified name already exists, the existing file is overwritten.</param>
    ///  <param name="saveOptions">Specifies the options that control how the shape is rendered and saved. Can be null.</param>
    procedure Save(fileName: string; saveOptions: DNImageSaveOptions); overload;
    ///<summary>
    ///  Renders the shape into an image and saves into a stream.
    ///</summary>
    ///  <param name="stream">The stream where to save the image of the shape.</param>
    ///  <param name="saveOptions">Specifies the options that control how the shape is rendered and saved. Can be null.
    ///  If this is null, the image will be saved in the PNG format.</param>
    procedure Save(stream: DDN.mscorlib.DNStream; saveOptions: DNImageSaveOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the actual size of the shape in points.
    ///</summary>
    ///<remarks><para>This property returns the size of the actual (as rendered on the page) bounding box of the shape.
    ///  The size takes into account shape rotation (if any).</para></remarks>
    property SizeInPoints: DDN.Aspose.Common.DNSizeF read get_SizeInPoints;
    ///<summary>
    ///  Gets the actual bounds of the shape in points.
    ///</summary>
    ///<remarks><para>This property returns the actual (as rendered on the page) bounding box of the shape.
    ///  The bounds takes into account shape rotation (if any).</para></remarks>
    property BoundsInPoints: DDN.Aspose.Common.DNRectangleF read get_BoundsInPoints;
    ///<summary>
    ///  Gets the opaque bounds of the shape in points.
    ///</summary>
    ///<remarks><para>This property returns the opaque (i.e. transparent parts of the shape are ignored) bounding box of the shape.
    ///  The bounds takes the shape rotation into account.</para></remarks>
    property OpaqueBoundsInPoints: DDN.Aspose.Common.DNRectangleF read get_OpaqueBoundsInPoints;
  end;

  TDNNodeRendererBase = class(TDNGenericImport<DNNodeRendererBaseClass, DNNodeRendererBase>) end;

  //-------------namespace: Aspose.Words.Rendering----------------
  DNOfficeMathRendererClass = interface(DNNodeRendererBaseClass)
  ['{F5063BC1-0A73-5956-88DE-9A1A8E865B7C}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class.
    ///</summary>
    ///  <param name="math">The OfficeMath object that you want to render.</param>
    {class} function init(math: DNOfficeMath): DNOfficeMathRenderer;

  end;

  ///<summary>
  ///  Provides methods to render an individual <see cref="T:Aspose.Words.Math.OfficeMath" />
  ///  to a raster or vector image or to a Graphics object.
  ///</summary>
  [DNTypeName('Aspose.Words.Rendering.OfficeMathRenderer')]
  DNOfficeMathRenderer = interface(DNNodeRendererBase)
  ['{B8DAD271-98E1-3D10-956B-148ED8F65665}']
  { getters & setters } 

    function get_SizeInPoints: DDN.Aspose.Common.DNSizeF;
    function get_BoundsInPoints: DDN.Aspose.Common.DNRectangleF;
    function get_OpaqueBoundsInPoints: DDN.Aspose.Common.DNRectangleF;

  { methods } 

    ///<summary>
    ///  Calculates the size of the shape in pixels for a specified zoom factor and resolution.
    ///</summary>
    ///<remarks><para>This method converts <see cref="P:Aspose.Words.Rendering.NodeRendererBase.SizeInPoints" />
    ///  into size in pixels and it is useful
    ///  when you want to create a bitmap for rendering the shape neatly onto the bitmap.</para></remarks>
    ///  <param name="scale">The zoom factor (1.0 is 100%).</param>
    ///  <param name="dpi">The resolution (horizontal and vertical) to convert from points to pixels (dots per inch).</param>
    ///<returns>The size of the shape in pixels.</returns>
    function GetSizeInPixels(scale: Single; dpi: Single): DDN.Aspose.Common.DNSize; overload;
    ///<summary>
    ///  Calculates the size of the shape in pixels for a specified zoom factor and resolution.
    ///</summary>
    ///<remarks><para>This method converts <see cref="P:Aspose.Words.Rendering.NodeRendererBase.SizeInPoints" />
    ///  into size in pixels and it is useful
    ///  when you want to create a bitmap for rendering the shape neatly onto the bitmap.</para></remarks>
    ///  <param name="scale">The zoom factor (1.0 is 100%).</param>
    ///  <param name="horizontalDpi">The horizontal resolution to convert from points to pixels (dots per inch).</param>
    ///  <param name="verticalDpi">The vertical resolution to convert from points to pixels (dots per inch).</param>
    ///<returns>The size of the shape in pixels.</returns>
    function GetSizeInPixels(scale: Single; horizontalDpi: Single; verticalDpi: Single): DDN.Aspose.Common.DNSize; overload;
    ///<summary>
    ///  Calculates the bounds of the shape in pixels for a specified zoom factor and resolution.
    ///</summary>
    ///<remarks><para>This method converts <see cref="P:Aspose.Words.Rendering.NodeRendererBase.BoundsInPoints" />
    ///  into rectangle in pixels.</para></remarks>
    ///  <param name="scale">The zoom factor (1.0 is 100%).</param>
    ///  <param name="dpi">The resolution (horizontal and vertical) to convert from points to pixels (dots per inch).</param>
    ///<returns>The actual (as rendered on the page) bounding box of the shape in pixels.</returns>
    function GetBoundsInPixels(scale: Single; dpi: Single): DDN.Aspose.Common.DNRectangle; overload;
    ///<summary>
    ///  Calculates the bounds of the shape in pixels for a specified zoom factor and resolution.
    ///</summary>
    ///<remarks><para>This method converts <see cref="P:Aspose.Words.Rendering.NodeRendererBase.BoundsInPoints" />
    ///  into rectangle in pixels.</para></remarks>
    ///  <param name="scale">The zoom factor (1.0 is 100%).</param>
    ///  <param name="horizontalDpi">The horizontal resolution to convert from points to pixels (dots per inch).</param>
    ///  <param name="verticalDpi">The vertical resolution to convert from points to pixels (dots per inch).</param>
    ///<returns>The actual (as rendered on the page) bounding box of the shape in pixels.</returns>
    function GetBoundsInPixels(scale: Single; horizontalDpi: Single; verticalDpi: Single): DDN.Aspose.Common.DNRectangle; overload;
    ///<summary>
    ///  Calculates the opaque bounds of the shape in pixels for a specified zoom factor and resolution.
    ///</summary>
    ///<remarks><para>This method converts <see cref="P:Aspose.Words.Rendering.NodeRendererBase.OpaqueBoundsInPoints" />
    ///  into rectangle in pixels and it is useful
    ///  when you want to create a bitmap for rendering the shape with only opaque part of the shape.</para></remarks>
    ///  <param name="scale">The zoom factor (1.0 is 100%).</param>
    ///  <param name="dpi">The resolution to convert from points to pixels (dots per inch).</param>
    ///<returns>The opaque rectangle of the shape in pixels.</returns>
    function GetOpaqueBoundsInPixels(scale: Single; dpi: Single): DDN.Aspose.Common.DNRectangle; overload;
    ///<summary>
    ///  Calculates the opaque bounds of the shape in pixels for a specified zoom factor and resolution.
    ///</summary>
    ///<remarks><para>This method converts <see cref="P:Aspose.Words.Rendering.NodeRendererBase.OpaqueBoundsInPoints" />
    ///  into rectangle in pixels and it is useful
    ///  when you want to create a bitmap for rendering the shape with only opaque part of the shape.</para></remarks>
    ///  <param name="scale">The zoom factor (1.0 is 100%).</param>
    ///  <param name="horizontalDpi">The horizontal resolution to convert from points to pixels (dots per inch).</param>
    ///  <param name="verticalDpi">The vertical resolution to convert from points to pixels (dots per inch).</param>
    ///<returns>The opaque rectangle of the shape in pixels.</returns>
    function GetOpaqueBoundsInPixels(scale: Single; horizontalDpi: Single; verticalDpi: Single): DDN.Aspose.Common.DNRectangle; overload;
    ///<summary>
    ///  Renders the shape into a <see cref="T:System.Drawing.Graphics" />
    ///  object to a specified scale.
    ///</summary>
    ///  <param name="graphics">The object where to render to.</param>
    ///  <param name="x">The X coordinate (in world units) of the top left corner of the rendered shape.</param>
    ///  <param name="y">The Y coordinate (in world units) of the top left corner of the rendered shape.</param>
    ///  <param name="scale">The scale for rendering the shape (1.0 is 100%).</param>
    ///<returns>The width and height (in world units) of the rendered shape.</returns>
    function RenderToScale(graphics: DDN.Aspose.Common.DNGraphics; x: Single; y: Single; scale: Single): DDN.Aspose.Common.DNSizeF;
    ///<summary>
    ///  Renders the shape into a <see cref="T:System.Drawing.Graphics" />
    ///  object to a specified size.
    ///</summary>
    ///  <param name="graphics">The object where to render to.</param>
    ///  <param name="x">The X coordinate (in world units) of the top left corner of the rendered shape.</param>
    ///  <param name="y">The Y coordinate (in world units) of the top left corner of the rendered shape.</param>
    ///  <param name="width">The maximum width (in world units) that can be occupied by the rendered shape.</param>
    ///  <param name="height">The maximum height (in world units) that can be occupied by the rendered shape.</param>
    ///<returns>The scale that was automatically calculated for the rendered shape to fit the specified size.</returns>
    function RenderToSize(graphics: DDN.Aspose.Common.DNGraphics; x: Single; y: Single; width: Single; height: Single): Single;
    ///<overloads>Renders the shape and saves into an image.</overloads><summary>
    ///  Renders the shape into an image and saves into a file.
    ///</summary>
    ///  <param name="fileName">The name for the image file. If a file with the specified name already exists, the existing file is overwritten.</param>
    ///  <param name="saveOptions">Specifies the options that control how the shape is rendered and saved. Can be null.</param>
    procedure Save(fileName: string; saveOptions: DNImageSaveOptions); overload;
    ///<summary>
    ///  Renders the shape into an image and saves into a stream.
    ///</summary>
    ///  <param name="stream">The stream where to save the image of the shape.</param>
    ///  <param name="saveOptions">Specifies the options that control how the shape is rendered and saved. Can be null.
    ///  If this is null, the image will be saved in the PNG format.</param>
    procedure Save(stream: DDN.mscorlib.DNStream; saveOptions: DNImageSaveOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the actual size of the shape in points.
    ///</summary>
    ///<remarks><para>This property returns the size of the actual (as rendered on the page) bounding box of the shape.
    ///  The size takes into account shape rotation (if any).</para></remarks>
    property SizeInPoints: DDN.Aspose.Common.DNSizeF read get_SizeInPoints;
    ///<summary>
    ///  Gets the actual bounds of the shape in points.
    ///</summary>
    ///<remarks><para>This property returns the actual (as rendered on the page) bounding box of the shape.
    ///  The bounds takes into account shape rotation (if any).</para></remarks>
    property BoundsInPoints: DDN.Aspose.Common.DNRectangleF read get_BoundsInPoints;
    ///<summary>
    ///  Gets the opaque bounds of the shape in points.
    ///</summary>
    ///<remarks><para>This property returns the opaque (i.e. transparent parts of the shape are ignored) bounding box of the shape.
    ///  The bounds takes the shape rotation into account.</para></remarks>
    property OpaqueBoundsInPoints: DDN.Aspose.Common.DNRectangleF read get_OpaqueBoundsInPoints;
  end;

  TDNOfficeMathRenderer = class(TDNGenericImport<DNOfficeMathRendererClass, DNOfficeMathRenderer>) end;

  //-------------namespace: Aspose.Words.Rendering----------------
  DNShapeRendererClass = interface(DNNodeRendererBaseClass)
  ['{ED28174D-5107-5771-B474-82DBB3C703B3}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class.
    ///</summary>
    ///  <param name="shape">The DrawinML shape object that you want to render.</param>
    {class} function init(shape: DNShapeBase): DNShapeRenderer;

  end;

  ///<summary>
  ///  Provides methods to render an individual <see cref="T:Aspose.Words.Drawing.Shape" />
  ///  or <see cref="T:Aspose.Words.Drawing.GroupShape" />
  ///  to a raster or vector image or to a Graphics object.
  ///</summary>
  [DNTypeName('Aspose.Words.Rendering.ShapeRenderer')]
  DNShapeRenderer = interface(DNNodeRendererBase)
  ['{5F064B2E-6D8B-39D4-8DFE-9D955410F1F0}']
  { getters & setters } 

    function get_SizeInPoints: DDN.Aspose.Common.DNSizeF;
    function get_BoundsInPoints: DDN.Aspose.Common.DNRectangleF;
    function get_OpaqueBoundsInPoints: DDN.Aspose.Common.DNRectangleF;

  { methods } 

    ///<summary>
    ///  Calculates the size of the shape in pixels for a specified zoom factor and resolution.
    ///</summary>
    ///<remarks><para>This method converts <see cref="P:Aspose.Words.Rendering.NodeRendererBase.SizeInPoints" />
    ///  into size in pixels and it is useful
    ///  when you want to create a bitmap for rendering the shape neatly onto the bitmap.</para></remarks>
    ///  <param name="scale">The zoom factor (1.0 is 100%).</param>
    ///  <param name="dpi">The resolution (horizontal and vertical) to convert from points to pixels (dots per inch).</param>
    ///<returns>The size of the shape in pixels.</returns>
    function GetSizeInPixels(scale: Single; dpi: Single): DDN.Aspose.Common.DNSize; overload;
    ///<summary>
    ///  Calculates the size of the shape in pixels for a specified zoom factor and resolution.
    ///</summary>
    ///<remarks><para>This method converts <see cref="P:Aspose.Words.Rendering.NodeRendererBase.SizeInPoints" />
    ///  into size in pixels and it is useful
    ///  when you want to create a bitmap for rendering the shape neatly onto the bitmap.</para></remarks>
    ///  <param name="scale">The zoom factor (1.0 is 100%).</param>
    ///  <param name="horizontalDpi">The horizontal resolution to convert from points to pixels (dots per inch).</param>
    ///  <param name="verticalDpi">The vertical resolution to convert from points to pixels (dots per inch).</param>
    ///<returns>The size of the shape in pixels.</returns>
    function GetSizeInPixels(scale: Single; horizontalDpi: Single; verticalDpi: Single): DDN.Aspose.Common.DNSize; overload;
    ///<summary>
    ///  Calculates the bounds of the shape in pixels for a specified zoom factor and resolution.
    ///</summary>
    ///<remarks><para>This method converts <see cref="P:Aspose.Words.Rendering.NodeRendererBase.BoundsInPoints" />
    ///  into rectangle in pixels.</para></remarks>
    ///  <param name="scale">The zoom factor (1.0 is 100%).</param>
    ///  <param name="dpi">The resolution (horizontal and vertical) to convert from points to pixels (dots per inch).</param>
    ///<returns>The actual (as rendered on the page) bounding box of the shape in pixels.</returns>
    function GetBoundsInPixels(scale: Single; dpi: Single): DDN.Aspose.Common.DNRectangle; overload;
    ///<summary>
    ///  Calculates the bounds of the shape in pixels for a specified zoom factor and resolution.
    ///</summary>
    ///<remarks><para>This method converts <see cref="P:Aspose.Words.Rendering.NodeRendererBase.BoundsInPoints" />
    ///  into rectangle in pixels.</para></remarks>
    ///  <param name="scale">The zoom factor (1.0 is 100%).</param>
    ///  <param name="horizontalDpi">The horizontal resolution to convert from points to pixels (dots per inch).</param>
    ///  <param name="verticalDpi">The vertical resolution to convert from points to pixels (dots per inch).</param>
    ///<returns>The actual (as rendered on the page) bounding box of the shape in pixels.</returns>
    function GetBoundsInPixels(scale: Single; horizontalDpi: Single; verticalDpi: Single): DDN.Aspose.Common.DNRectangle; overload;
    ///<summary>
    ///  Calculates the opaque bounds of the shape in pixels for a specified zoom factor and resolution.
    ///</summary>
    ///<remarks><para>This method converts <see cref="P:Aspose.Words.Rendering.NodeRendererBase.OpaqueBoundsInPoints" />
    ///  into rectangle in pixels and it is useful
    ///  when you want to create a bitmap for rendering the shape with only opaque part of the shape.</para></remarks>
    ///  <param name="scale">The zoom factor (1.0 is 100%).</param>
    ///  <param name="dpi">The resolution to convert from points to pixels (dots per inch).</param>
    ///<returns>The opaque rectangle of the shape in pixels.</returns>
    function GetOpaqueBoundsInPixels(scale: Single; dpi: Single): DDN.Aspose.Common.DNRectangle; overload;
    ///<summary>
    ///  Calculates the opaque bounds of the shape in pixels for a specified zoom factor and resolution.
    ///</summary>
    ///<remarks><para>This method converts <see cref="P:Aspose.Words.Rendering.NodeRendererBase.OpaqueBoundsInPoints" />
    ///  into rectangle in pixels and it is useful
    ///  when you want to create a bitmap for rendering the shape with only opaque part of the shape.</para></remarks>
    ///  <param name="scale">The zoom factor (1.0 is 100%).</param>
    ///  <param name="horizontalDpi">The horizontal resolution to convert from points to pixels (dots per inch).</param>
    ///  <param name="verticalDpi">The vertical resolution to convert from points to pixels (dots per inch).</param>
    ///<returns>The opaque rectangle of the shape in pixels.</returns>
    function GetOpaqueBoundsInPixels(scale: Single; horizontalDpi: Single; verticalDpi: Single): DDN.Aspose.Common.DNRectangle; overload;
    ///<summary>
    ///  Renders the shape into a <see cref="T:System.Drawing.Graphics" />
    ///  object to a specified scale.
    ///</summary>
    ///  <param name="graphics">The object where to render to.</param>
    ///  <param name="x">The X coordinate (in world units) of the top left corner of the rendered shape.</param>
    ///  <param name="y">The Y coordinate (in world units) of the top left corner of the rendered shape.</param>
    ///  <param name="scale">The scale for rendering the shape (1.0 is 100%).</param>
    ///<returns>The width and height (in world units) of the rendered shape.</returns>
    function RenderToScale(graphics: DDN.Aspose.Common.DNGraphics; x: Single; y: Single; scale: Single): DDN.Aspose.Common.DNSizeF;
    ///<summary>
    ///  Renders the shape into a <see cref="T:System.Drawing.Graphics" />
    ///  object to a specified size.
    ///</summary>
    ///  <param name="graphics">The object where to render to.</param>
    ///  <param name="x">The X coordinate (in world units) of the top left corner of the rendered shape.</param>
    ///  <param name="y">The Y coordinate (in world units) of the top left corner of the rendered shape.</param>
    ///  <param name="width">The maximum width (in world units) that can be occupied by the rendered shape.</param>
    ///  <param name="height">The maximum height (in world units) that can be occupied by the rendered shape.</param>
    ///<returns>The scale that was automatically calculated for the rendered shape to fit the specified size.</returns>
    function RenderToSize(graphics: DDN.Aspose.Common.DNGraphics; x: Single; y: Single; width: Single; height: Single): Single;
    ///<overloads>Renders the shape and saves into an image.</overloads><summary>
    ///  Renders the shape into an image and saves into a file.
    ///</summary>
    ///  <param name="fileName">The name for the image file. If a file with the specified name already exists, the existing file is overwritten.</param>
    ///  <param name="saveOptions">Specifies the options that control how the shape is rendered and saved. Can be null.</param>
    procedure Save(fileName: string; saveOptions: DNImageSaveOptions); overload;
    ///<summary>
    ///  Renders the shape into an image and saves into a stream.
    ///</summary>
    ///  <param name="stream">The stream where to save the image of the shape.</param>
    ///  <param name="saveOptions">Specifies the options that control how the shape is rendered and saved. Can be null.
    ///  If this is null, the image will be saved in the PNG format.</param>
    procedure Save(stream: DDN.mscorlib.DNStream; saveOptions: DNImageSaveOptions); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the actual size of the shape in points.
    ///</summary>
    ///<remarks><para>This property returns the size of the actual (as rendered on the page) bounding box of the shape.
    ///  The size takes into account shape rotation (if any).</para></remarks>
    property SizeInPoints: DDN.Aspose.Common.DNSizeF read get_SizeInPoints;
    ///<summary>
    ///  Gets the actual bounds of the shape in points.
    ///</summary>
    ///<remarks><para>This property returns the actual (as rendered on the page) bounding box of the shape.
    ///  The bounds takes into account shape rotation (if any).</para></remarks>
    property BoundsInPoints: DDN.Aspose.Common.DNRectangleF read get_BoundsInPoints;
    ///<summary>
    ///  Gets the opaque bounds of the shape in points.
    ///</summary>
    ///<remarks><para>This property returns the opaque (i.e. transparent parts of the shape are ignored) bounding box of the shape.
    ///  The bounds takes the shape rotation into account.</para></remarks>
    property OpaqueBoundsInPoints: DDN.Aspose.Common.DNRectangleF read get_OpaqueBoundsInPoints;
  end;

  TDNShapeRenderer = class(TDNGenericImport<DNShapeRendererClass, DNShapeRenderer>) end;

  //-------------namespace: Aspose.Words.Rendering----------------
  DNPageInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E612F5E3-AE21-581E-8D30-00036B587576}']
  end;

  ///<summary>
  ///  Represents information about a particular document page.
  ///</summary>
  ///<remarks><para>The page width and height returned by this object represent the "final" size of the page e.g. they are
  ///  already rotated to the correct orientation.</para><seealso cref="M:Aspose.Words.Document.GetPageInfo(System.Int32)" />
  ///</remarks>
  [DNTypeName('Aspose.Words.Rendering.PageInfo')]
  DNPageInfo = interface(DDN.mscorlib.DNObject)
  ['{DBD5BE33-319C-326A-9E6B-7ACACEDB9260}']
  { getters & setters } 

    function get_PaperSize: DNPaperSize;
    function get_WidthInPoints: Single;
    function get_HeightInPoints: Single;
    function get_SizeInPoints: DDN.Aspose.Common.DNSizeF;
    function get_PaperTray: Int32;
    function get_Landscape: Boolean;

  { methods } 

    ///<summary>
    ///  Calculates the page size in pixels for a specified zoom factor and resolution.
    ///</summary>
    ///  <param name="scale">The zoom factor (1.0 is 100%).</param>
    ///  <param name="dpi">The resolution (horizontal and vertical) to convert from points to pixels (dots per inch).</param>
    ///<returns>The size of the page in pixels.</returns>
    function GetSizeInPixels(scale: Single; dpi: Single): DDN.Aspose.Common.DNSize; overload;
    ///<summary>
    ///  Calculates the page size in pixels for a specified zoom factor and resolution.
    ///</summary>
    ///  <param name="scale">The zoom factor (1.0 is 100%).</param>
    ///  <param name="horizontalDpi">The horizontal resolution to convert from points to pixels (dots per inch).</param>
    ///  <param name="verticalDpi">The vertical resolution to convert from points to pixels (dots per inch).</param>
    ///<returns>The size of the page in pixels.</returns>
    function GetSizeInPixels(scale: Single; horizontalDpi: Single; verticalDpi: Single): DDN.Aspose.Common.DNSize; overload;
    ///<summary>
    ///  Gets the <see cref="T:System.Drawing.Printing.PaperSize" />
    ///  object suitable for printing
    ///  the page represented by this <see cref="T:Aspose.Words.Rendering.PageInfo" />
    ///  .
    ///</summary>
    ///  <param name="paperSizes">Available paper sizes.</param>
    ///<returns>An object that you can use in the .NET printing framework to specify the paper size.</returns>
    function GetDotNetPaperSize(paperSizes: DDN.Aspose.Common.DNPrinterSettings_PaperSizeCollection): DDN.Aspose.Common.DNPaperSize;
    ///<summary>
    ///  Gets the <see cref="T:System.Drawing.Printing.PaperSource" />
    ///  object suitable for printing
    ///  the page represented by this <see cref="T:Aspose.Words.Rendering.PageInfo" />
    ///  .
    ///</summary>
    ///  <param name="paperSources">Available paper sources.</param>
    ///  <param name="defaultPageSettingsPaperSource">Paper source defined in default printer settings.</param>
    ///<returns>An object that you can use in the .NET printing framework to specify the paper source.</returns>
    ///<remarks><para>This method requires .NET Framework 2.0 or later.</para></remarks>
    function GetSpecifiedPrinterPaperSource(paperSources: DDN.Aspose.Common.DNPrinterSettings_PaperSourceCollection; defaultPageSettingsPaperSource: DDN.Aspose.Common.DNPaperSource): DDN.Aspose.Common.DNPaperSource;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the paper size as enumeration.
    ///</summary>
    property PaperSize: DNPaperSize read get_PaperSize;
    ///<summary>
    ///  Gets the width of the page in points.
    ///</summary>
    property WidthInPoints: Single read get_WidthInPoints;
    ///<summary>
    ///  Gets the height of the page in points.
    ///</summary>
    property HeightInPoints: Single read get_HeightInPoints;
    ///<summary>
    ///  Gets the page size in points.
    ///</summary>
    property SizeInPoints: DDN.Aspose.Common.DNSizeF read get_SizeInPoints;
    ///<summary>
    ///  Gets the paper tray (bin) for this page as specified in the document.
    ///  The value is implementation (printer) specific.
    ///</summary>
    property PaperTray: Int32 read get_PaperTray;
    ///<summary>
    ///  Returns true if the page orientation specified in the document for this page is landscape.
    ///</summary>
    property Landscape: Boolean read get_Landscape;
  end;

  TDNPageInfo = class(TDNGenericImport<DNPageInfoClass, DNPageInfo>) end;

  //-------------namespace: Aspose.Words.Rendering----------------
  DNPrinterSettingsContainerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{66553913-2712-5E9B-A087-A3B1EB6DF105}']
  { constructors } 

    ///<summary>
    ///  Creates a container for <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  .
    ///</summary>
    {class} function init(settings: DDN.Aspose.Common.DNPrinterSettings): DNPrinterSettingsContainer;

  end;

  ///<summary>
  ///  Represent a storage for some parameters of <see cref="T:System.Drawing.Printing.PrinterSettings" />
  ///  object.
  ///</summary>
  ///<remarks>
  ///  Access to data of <see cref="T:System.Drawing.Printing.PrinterSettings" />
  ///  takes long time.
  ///<see cref="T:Aspose.Words.Rendering.PrinterSettingsContainer" />
  ///  caches parameters from <see cref="T:System.Drawing.Printing.PrinterSettings" />
  ///  ,
  ///  so printing works faster.
  ///</remarks>
  [DNTypeName('Aspose.Words.Rendering.PrinterSettingsContainer')]
  DNPrinterSettingsContainer = interface(DDN.mscorlib.DNObject)
  ['{9A3B4282-636C-3734-9BBF-01077702961D}']
  { getters & setters } 

    function get_PaperSizes: DDN.Aspose.Common.DNPrinterSettings_PaperSizeCollection;
    function get_DefaultPageSettingsPaperSource: DDN.Aspose.Common.DNPaperSource;
    function get_PaperSources: DDN.Aspose.Common.DNPrinterSettings_PaperSourceCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  See <see cref="P:System.Drawing.Printing.PrinterSettings.PaperSizes" />
    ///  .
    ///</summary>
    property PaperSizes: DDN.Aspose.Common.DNPrinterSettings_PaperSizeCollection read get_PaperSizes;
    ///<summary>
    ///  See <see cref="T:System.Drawing.Printing.PaperSource" />
    ///  of <see cref="P:System.Drawing.Printing.PrinterSettings.DefaultPageSettings" />
    ///  .
    ///</summary>
    property DefaultPageSettingsPaperSource: DDN.Aspose.Common.DNPaperSource read get_DefaultPageSettingsPaperSource;
    ///<summary>
    ///  See <see cref="P:System.Drawing.Printing.PrinterSettings.PaperSources" />
    ///  .
    ///</summary>
    property PaperSources: DDN.Aspose.Common.DNPrinterSettings_PaperSourceCollection read get_PaperSources;
  end;

  TDNPrinterSettingsContainer = class(TDNGenericImport<DNPrinterSettingsContainerClass, DNPrinterSettingsContainer>) end;

  //-------------namespace: Aspose.Words.Rendering----------------
  DNThumbnailGeneratingOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AA8CAB08-E7EE-58BB-B43C-37FBA20623E8}']
  { constructors } 

    {class} function init: DNThumbnailGeneratingOptions;

  end;

  ///<summary>
  ///  Can be used to specify additional options when generating thumbnail for a document.
  ///</summary>
  ///<remarks>
  ///  User can call method <see cref="M:Aspose.Words.Document.UpdateThumbnail(Aspose.Words.Rendering.ThumbnailGeneratingOptions)" />
  ///  to generate
  ///<see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.Thumbnail" />
  ///  for a document.
  ///</remarks>
  [DNTypeName('Aspose.Words.Rendering.ThumbnailGeneratingOptions')]
  DNThumbnailGeneratingOptions = interface(DDN.mscorlib.DNObject)
  ['{7710F27B-3BB9-38D9-BFC1-155455F8934E}']
  { getters & setters } 

    function get_GenerateFromFirstPage: Boolean;
    procedure set_GenerateFromFirstPage(value: Boolean);
    function get_ThumbnailSize: DDN.Aspose.Common.DNSize;
    procedure set_ThumbnailSize(value: DDN.Aspose.Common.DNSize);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies whether to generate thumbnail from first page of the document or first image.
    ///</summary>
    ///<remarks>
    ///  Default is <c>true</c>, which means thumbnail will be generated from first page of the document.
    ///  If value is <c>false</c> and there is no image in the document, thumbnail will be generated
    ///  from first page of the document.
    ///</remarks>
    property GenerateFromFirstPage: Boolean read get_GenerateFromFirstPage write set_GenerateFromFirstPage;
    ///<summary>
    ///  Size of generated thumbnail in pixels.
    ///  Default is 600x900.
    ///</summary>
    property ThumbnailSize: DDN.Aspose.Common.DNSize read get_ThumbnailSize write set_ThumbnailSize;
  end;

  TDNThumbnailGeneratingOptions = class(TDNGenericImport<DNThumbnailGeneratingOptionsClass, DNThumbnailGeneratingOptions>) end;

  //-------------namespace: Aspose.Words.Replacing----------------
  DNFindReplaceOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4BF66460-E974-538D-875C-B039687EB4F8}']
  { constructors } 

    {class} function init: DNFindReplaceOptions; overload;
    {class} function init(direction: DNFindReplaceDirection): DNFindReplaceOptions; overload;
    {class} function init(replacingCallback: DNIReplacingCallback): DNFindReplaceOptions; overload;
    {class} function init(direction: DNFindReplaceDirection; replacingCallback: DNIReplacingCallback): DNFindReplaceOptions; overload;

  end;

  ///<summary>
  ///  Specifies options for find/replace operations.
  ///</summary>
  [DNTypeName('Aspose.Words.Replacing.FindReplaceOptions')]
  DNFindReplaceOptions = interface(DDN.mscorlib.DNObject)
  ['{44FCE32E-EEAE-3F5C-9588-1804F3FCA31A}']
  { getters & setters } 

    function get_ApplyFont: DNFont;
    function get_ApplyParagraphFormat: DNParagraphFormat;
    function get_Direction: DNFindReplaceDirection;
    procedure set_Direction(value: DNFindReplaceDirection);
    function get_MatchCase: Boolean;
    procedure set_MatchCase(value: Boolean);
    function get_FindWholeWordsOnly: Boolean;
    procedure set_FindWholeWordsOnly(value: Boolean);
    function get_ReplacingCallback: DNIReplacingCallback;
    procedure set_ReplacingCallback(value: DNIReplacingCallback);
    function get_UseLegacyOrder: Boolean;
    procedure set_UseLegacyOrder(value: Boolean);
    function get_IgnoreDeleted: Boolean;
    procedure set_IgnoreDeleted(value: Boolean);
    function get_IgnoreInserted: Boolean;
    procedure set_IgnoreInserted(value: Boolean);
    function get_IgnoreFields: Boolean;
    procedure set_IgnoreFields(value: Boolean);
    function get_UseSubstitutions: Boolean;
    procedure set_UseSubstitutions(value: Boolean);
    function get_LegacyMode: Boolean;
    procedure set_LegacyMode(value: Boolean);
    function get_SmartParagraphBreakReplacement: Boolean;
    procedure set_SmartParagraphBreakReplacement(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Text formatting applied to new content.
    ///</summary>
    property ApplyFont: DNFont read get_ApplyFont;
    ///<summary>
    ///  Paragraph formatting applied to new content.
    ///</summary>
    property ApplyParagraphFormat: DNParagraphFormat read get_ApplyParagraphFormat;
    ///<summary>
    ///  Selects direction for replace. Default value is <see cref="F:Aspose.Words.Replacing.FindReplaceDirection.Forward" />
    ///  .
    ///</summary>
    property Direction: DNFindReplaceDirection read get_Direction write set_Direction;
    ///<summary>
    ///  True indicates case-sensitive comparison, false indicates case-insensitive comparison.
    ///</summary>
    property MatchCase: Boolean read get_MatchCase write set_MatchCase;
    ///<summary>
    ///  True indicates the oldValue must be a standalone word.
    ///</summary>
    property FindWholeWordsOnly: Boolean read get_FindWholeWordsOnly write set_FindWholeWordsOnly;
    ///<summary>
    ///  The user-defined method which is called before every replace occurrence.
    ///</summary>
    property ReplacingCallback: DNIReplacingCallback read get_ReplacingCallback write set_ReplacingCallback;
    ///<summary>
    ///  True indicates that a text search is performed sequentially from top to bottom considering the text boxes.
    ///  Default value is false.
    ///</summary>
    ///<dev>
    ///  FIX 19357. Added option.
    ///</dev>
    property UseLegacyOrder: Boolean read get_UseLegacyOrder write set_UseLegacyOrder;
    ///<summary>
    ///  Gets or sets a boolean value indicating either to ignore text inside delete revisions.
    ///  The default value is <c>false</c>.
    ///</summary>
    property IgnoreDeleted: Boolean read get_IgnoreDeleted write set_IgnoreDeleted;
    ///<summary>
    ///  Gets or sets a boolean value indicating either to ignore text inside insert revisions.
    ///  The default value is <c>false</c>.
    ///</summary>
    property IgnoreInserted: Boolean read get_IgnoreInserted write set_IgnoreInserted;
    ///<summary>
    ///  Gets or sets a boolean value indicating either to ignore text inside fields.
    ///  The default value is <c>false</c>.
    ///</summary>
    property IgnoreFields: Boolean read get_IgnoreFields write set_IgnoreFields;
    ///<summary>
    ///  Gets or sets a boolean value indicating whether to recognize and use substitutions within replacement patterns.
    ///  The default value is <c>false</c>.
    ///</summary>
    ///<remarks>
    ///  For the details on substitution elements please refer to:
    ///  https://docs.microsoft.com/en-us/dotnet/standard/base-types/substitutions-in-regular-expressions.
    ///</remarks>
    property UseSubstitutions: Boolean read get_UseSubstitutions write set_UseSubstitutions;
    ///<summary>
    ///  Gets or sets a boolean value indicating that old find/replace algorithm is used.
    ///</summary>
    ///<remarks>
    ///  Use this flag if you need exactly the same behavior as before advanced find/replace feature was introduced.
    ///  Note that old algorithm does not support advanced features such as replace with breaks, apply formatting and so on.
    ///</remarks>
    property LegacyMode: Boolean read get_LegacyMode write set_LegacyMode;
    ///<summary><para>Gets or sets a boolean value indicating either it is allowed to replace paragraph break
    ///  when there is no next sibling paragraph.</para><para>The default value is <c>false</c>.</para></summary>
    ///<remarks>
    ///  This option allows to replace paragraph break when there is no next sibling paragraph to which all child
    ///  nodes can be moved, by finding any (not necessarily sibling) next paragraph after the paragraph being replaced.
    ///</remarks>
    property SmartParagraphBreakReplacement: Boolean read get_SmartParagraphBreakReplacement write set_SmartParagraphBreakReplacement;
  end;

  TDNFindReplaceOptions = class(TDNGenericImport<DNFindReplaceOptionsClass, DNFindReplaceOptions>) end;

  //-------------namespace: Aspose.Words.Replacing----------------
  ///<summary>
  ///  Implement this interface if you want to have your own custom method called during a find and replace operation.
  ///</summary>
  [DNTypeName('Aspose.Words.Replacing.IReplacingCallback')]
  DNIReplacingCallback = interface(DDN.mscorlib.DNObject)
  ['{FF0B8E19-D9B7-3495-9CD2-FB8E0D099D17}']
  { methods } 

    ///<summary>
    ///  A user defined method that is called during a replace operation for each match found just before a replace is made.
    ///</summary>
    ///<returns>
    ///  A <see cref="T:Aspose.Words.Replacing.ReplaceAction" />
    ///  value that specifies the action to be taken for the current match.
    ///</returns>
    function Replacing(args: DNReplacingArgs): DNReplaceAction;

  end;

  //-------------namespace: Aspose.Words.Replacing----------------
  DNReplacingArgsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{042294B3-D622-5F4B-A95D-89B75FAA6CE1}']
  end;

  ///<summary>
  ///  Provides data for a custom replace operation.
  ///</summary>
  ///<seealso cref="T:Aspose.Words.Replacing.IReplacingCallback" />
  ///<seealso cref="T:Aspose.Words.Range" />
  ///<seealso cref="M:Aspose.Words.Range.Replace(System.String,System.String,Aspose.Words.Replacing.FindReplaceOptions)" />
  [DNTypeName('Aspose.Words.Replacing.ReplacingArgs')]
  DNReplacingArgs = interface(DDN.mscorlib.DNObject)
  ['{CDB4CE2F-24BC-3A9D-9228-6A1C90CA70F4}']
  { getters & setters } 

    function get_Match: DDN.Aspose.Common.DNMatch;
    function get_MatchNode: DNNode;
    function get_MatchOffset: Int32;
    function get_Replacement: string;
    procedure set_Replacement(value: string);
    function get_GroupName: string;
    procedure set_GroupName(value: string);
    function get_GroupIndex: Int32;
    procedure set_GroupIndex(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  The <see cref="T:System.Text.RegularExpressions.Match" />
    ///  resulting from a single regular
    ///  expression match during a <b>Replace</b>
    ///  .
    ///</summary>
    ///<remarks><p><b>Match.Index"</b>
    ///  gets the zero-based starting
    ///  position of the match from the start of the find and replace range.</p>
    ///</remarks>
    property Match: DDN.Aspose.Common.DNMatch read get_Match;
    ///<summary>
    ///  Gets the node that contains the beginning of the match.
    ///</summary>
    property MatchNode: DNNode read get_MatchNode;
    ///<summary>
    ///  Gets the zero-based starting position of the match from the start of
    ///  the node that contains the beginning of the match.
    ///</summary>
    property MatchOffset: Int32 read get_MatchOffset;
    ///<summary>
    ///  Gets or sets the replacement string.
    ///</summary>
    property Replacement: string read get_Replacement write set_Replacement;
    ///<summary>
    ///  Identifies, by name, a captured group in the <see cref="P:Aspose.Words.Replacing.ReplacingArgs.Match" />
    ///  that is to be replaced with the <see cref="P:Aspose.Words.Replacing.ReplacingArgs.Replacement" />
    ///  string.
    ///</summary>
    ///<remarks><p>When group name is null, <see cref="P:Aspose.Words.Replacing.ReplacingArgs.GroupIndex" />
    ///  is used to identify the group.</p>
    ///  <p>Default is null.</p>
    ///</remarks>
    property GroupName: string read get_GroupName write set_GroupName;
    ///<summary>
    ///  Identifies, by index, a captured group in the <see cref="P:Aspose.Words.Replacing.ReplacingArgs.Match" />
    ///  that is to be replaced with the <see cref="P:Aspose.Words.Replacing.ReplacingArgs.Replacement" />
    ///  string.
    ///</summary>
    ///<remarks><p><see cref="P:Aspose.Words.Replacing.ReplacingArgs.GroupIndex" />
    ///  has effect only when <see cref="P:Aspose.Words.Replacing.ReplacingArgs.GroupName" />
    ///  is null.</p>
    ///  <p>Default is zero.</p>
    ///</remarks>
    property GroupIndex: Int32 read get_GroupIndex write set_GroupIndex;
  end;

  TDNReplacingArgs = class(TDNGenericImport<DNReplacingArgsClass, DNReplacingArgs>) end;

  //-------------namespace: Aspose.Words.Reporting----------------
  DNCsvDataLoadOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D7250289-D8F7-5CAC-BB42-63601093BC4E}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class with default options.
    ///</summary>
    {class} function init: DNCsvDataLoadOptions; overload;
    ///<summary>
    ///  Initializes a new instance of this class with specifying whether CSV data contains column names
    ///  at the first line.
    ///</summary>
    {class} function init(hasHeaders: Boolean): DNCsvDataLoadOptions; overload;

  end;

  ///<summary>
  ///  Represents options for parsing CSV data.
  ///</summary>
  ///<remarks>
  ///  An instance of this class can be passed into constructors of <see cref="T:Aspose.Words.Reporting.CsvDataSource" />
  ///  .
  ///</remarks>
  [DNTypeName('Aspose.Words.Reporting.CsvDataLoadOptions')]
  DNCsvDataLoadOptions = interface(DDN.mscorlib.DNObject)
  ['{A0BFEBC2-C684-3F8C-BD51-B74783F13327}']
  { getters & setters } 

    function get_HasHeaders: Boolean;
    procedure set_HasHeaders(value: Boolean);
    function get_Delimiter: Char;
    procedure set_Delimiter(value: Char);
    function get_QuoteChar: Char;
    procedure set_QuoteChar(value: Char);
    function get_CommentChar: Char;
    procedure set_CommentChar(value: Char);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a value indicating whether the first record of CSV data contains column names.
    ///</summary>
    ///<remarks>
    ///  The default value is <b>false</b>
    ///  .
    ///</remarks>
    property HasHeaders: Boolean read get_HasHeaders write set_HasHeaders;
    ///<summary>
    ///  Gets or sets the character to be used as a column delimiter.
    ///</summary>
    ///<remarks>
    ///  The default value is ',' (comma).
    ///</remarks>
    property Delimiter: Char read get_Delimiter write set_Delimiter;
    ///<summary>
    ///  Gets or sets the character that is used to quote field values.
    ///</summary>
    ///<remarks><para>The default value is '"' (quotation mark).</para><para>Double the character to place it into quoted text.</para></remarks>
    property QuoteChar: Char read get_QuoteChar write set_QuoteChar;
    ///<summary>
    ///  Gets or sets the character that is used to comment lines of CSV data.
    ///</summary>
    ///<remarks>
    ///  The default value is '#' (number sign).
    ///</remarks>
    property CommentChar: Char read get_CommentChar write set_CommentChar;
  end;

  TDNCsvDataLoadOptions = class(TDNGenericImport<DNCsvDataLoadOptionsClass, DNCsvDataLoadOptions>) end;

  //-------------namespace: Aspose.Words.Reporting----------------
  DNCsvDataSourceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0F4040FF-551A-55DA-9AC6-6B57563AC0FF}']
  { constructors } 

    ///<summary>
    ///  Creates a new data source with data from a CSV file using default options for parsing CSV data.
    ///</summary>
    ///  <param name="csvPath">The path to the CSV file to be used as the data source.</param>
    {class} function init(csvPath: string): DNCsvDataSource; overload;
    ///<summary>
    ///  Creates a new data source with data from a CSV file using the specified options for parsing CSV data.
    ///</summary>
    ///  <param name="csvPath">The path to the CSV file to be used as the data source.</param>
    ///  <param name="options">Options for parsing the CSV data.</param>
    {class} function init(csvPath: string; options: DNCsvDataLoadOptions): DNCsvDataSource; overload;
    ///<summary>
    ///  Creates a new data source with data from a CSV stream using default options for parsing CSV data.
    ///</summary>
    ///  <param name="csvStream">The stream of CSV data to be used as the data source.</param>
    {class} function init(csvStream: DDN.mscorlib.DNStream): DNCsvDataSource; overload;
    ///<summary>
    ///  Creates a new data source with data from a CSV stream using the specified options for parsing CSV data.
    ///</summary>
    ///  <param name="csvStream">The stream of CSV data to be used as the data source.</param>
    ///  <param name="options">Options for parsing the CSV data.</param>
    {class} function init(csvStream: DDN.mscorlib.DNStream; options: DNCsvDataLoadOptions): DNCsvDataSource; overload;

  end;

  ///<summary>
  ///  Provides access to data of a CSV file or stream to be used within a report.
  ///</summary>
  ///<remarks><para>
  ///  To access data of the corresponding file or stream while generating a report, pass an instance of this class as
  ///  a data source to one of <see cref="T:Aspose.Words.Reporting.ReportingEngine" />
  ///  .BuildReport overloads.
  ///</para><para>
  ///  In template documents, a <see cref="T:Aspose.Words.Reporting.CsvDataSource" />
  ///  instance should be treated in the same way as if it was
  ///  a <see cref="T:System.Data.DataTable" />
  ///  instance. For more information, see template syntax reference
  ///  (https://docs.aspose.com/display/wordsnet/Template+Syntax).
  ///</para><para>
  ///  Data types of comma-separated values are determined automatically upon their string representations. So in template
  ///  documents, you can work with typed values rather than just strings. The engine is capable to automatically recognize
  ///  values of the following types:
  ///</para><list type="bullet"><item><see cref="T:System.Nullable`1" />
  ///</item>
  ///<item><see cref="T:System.Nullable`1" />
  ///</item>
  ///<item><see cref="T:System.Nullable`1" />
  ///</item>
  ///<item><see cref="T:System.Nullable`1" />
  ///</item>
  ///<item><see cref="T:System.String" />
  ///</item>
  ///</list>
  ///  <para>
  ///  Note that for automatic recognition of data types to work, string representations of comma-separated values should
  ///  be formed using invariant culture settings.
  ///</para><para>
  ///  To override default behavior of CSV data loading, initialize and pass a <see cref="T:Aspose.Words.Reporting.CsvDataLoadOptions" />
  ///  instance
  ///  to a constructor of this class.
  ///</para></remarks>
  [DNTypeName('Aspose.Words.Reporting.CsvDataSource')]
  DNCsvDataSource = interface(DDN.mscorlib.DNObject)
  ['{26921917-93A0-3D60-A892-4F61D4D023BC}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCsvDataSource = class(TDNGenericImport<DNCsvDataSourceClass, DNCsvDataSource>) end;

  //-------------namespace: Aspose.Words.Reporting----------------
  DNJsonDataLoadOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9E168B7D-6D90-5561-A6AB-3A42F4146D7E}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class with default options.
    ///</summary>
    {class} function init: DNJsonDataLoadOptions;

  end;

  ///<summary>
  ///  Represents options for parsing JSON data.
  ///</summary>
  ///<remarks>
  ///  An instance of this class can be passed into constructors of <see cref="T:Aspose.Words.Reporting.JsonDataSource" />
  ///  .
  ///</remarks>
  [DNTypeName('Aspose.Words.Reporting.JsonDataLoadOptions')]
  DNJsonDataLoadOptions = interface(DDN.mscorlib.DNObject)
  ['{D24DB930-451B-3E3F-8DD5-3EDFAE2B0EAC}']
  { getters & setters } 

    function get_SimpleValueParseMode: DNJsonSimpleValueParseMode;
    procedure set_SimpleValueParseMode(value: DNJsonSimpleValueParseMode);
    function get_ExactDateTimeParseFormat: string;
    procedure set_ExactDateTimeParseFormat(value: string);
    function get_AlwaysGenerateRootObject: Boolean;
    procedure set_AlwaysGenerateRootObject(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a mode for parsing JSON simple values (null, boolean, number, integer, and string)
    ///  while loading JSON. Such a mode does not affect parsing of date-time values. The default is
    ///<see cref="F:Aspose.Words.Reporting.JsonSimpleValueParseMode.Loose" />
    ///  .
    ///</summary>
    property SimpleValueParseMode: DNJsonSimpleValueParseMode read get_SimpleValueParseMode write set_SimpleValueParseMode;
    ///<summary>
    ///  Gets or sets an exact format for parsing JSON date-time values while loading JSON. The default is <b>null</b>
    ///  .
    ///</summary>
    ///<remarks><para>
    ///  Strings encoded using MicrosoftÂ® JSON date-time format (for example, "/Date(1224043200000)/") are always
    ///  recognized as date-time values regardless of a value of this property. The property defines additional
    ///  formats to be used while parsing date-time values from strings in the following way:
    ///</para><list type="bullet"><item>
    ///  When <see cref="P:Aspose.Words.Reporting.JsonDataLoadOptions.ExactDateTimeParseFormat" />
    ///  is <b>null</b>
    ///  , the ISO-8601 format and all date-time formats
    ///  supported for the current, English USA, and English New Zealand cultures are used additionally in
    ///  the mentioned order.
    ///</item>
    ///<item>
    ///  When <see cref="P:Aspose.Words.Reporting.JsonDataLoadOptions.ExactDateTimeParseFormat" />
    ///  is a non-empty string, it is used as a single additional
    ///  date-time format utilizing the current culture.
    ///</item>
    ///<item>
    ///  When <see cref="P:Aspose.Words.Reporting.JsonDataLoadOptions.ExactDateTimeParseFormat" />
    ///  is an empty string, no additional date-time formats are used.
    ///</item>
    ///</list>
    ///</remarks>
    property ExactDateTimeParseFormat: string read get_ExactDateTimeParseFormat write set_ExactDateTimeParseFormat;
    property AlwaysGenerateRootObject: Boolean read get_AlwaysGenerateRootObject write set_AlwaysGenerateRootObject;
  end;

  TDNJsonDataLoadOptions = class(TDNGenericImport<DNJsonDataLoadOptionsClass, DNJsonDataLoadOptions>) end;

  //-------------namespace: Aspose.Words.Reporting----------------
  DNJsonDataSourceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AD568618-CB27-5419-B5B4-29A4F0053570}']
  { constructors } 

    ///<summary>
    ///  Creates a new data source with data from a JSON file using default options for parsing JSON data.
    ///</summary>
    ///  <param name="jsonPath">The path to the JSON file to be used as the data source.</param>
    {class} function init(jsonPath: string): DNJsonDataSource; overload;
    ///<summary>
    ///  Creates a new data source with data from a JSON stream using default options for parsing JSON data.
    ///</summary>
    ///  <param name="jsonStream">The stream of JSON data to be used as the data source.</param>
    {class} function init(jsonStream: DDN.mscorlib.DNStream): DNJsonDataSource; overload;
    ///<summary>
    ///  Creates a new data source with data from a JSON file using the specified options for parsing JSON data.
    ///</summary>
    ///  <param name="jsonPath">The path to the JSON file to be used as the data source.</param>
    ///  <param name="options">Options for parsing JSON data.</param>
    {class} function init(jsonPath: string; options: DNJsonDataLoadOptions): DNJsonDataSource; overload;
    ///<summary>
    ///  Creates a new data source with data from a JSON stream using the specified options for parsing JSON data.
    ///</summary>
    ///  <param name="jsonStream">The stream of JSON data to be used as the data source.</param>
    ///  <param name="options">Options for parsing JSON data.</param>
    {class} function init(jsonStream: DDN.mscorlib.DNStream; options: DNJsonDataLoadOptions): DNJsonDataSource; overload;

  end;

  ///<summary>
  ///  Provides access to data of a JSON file or stream to be used within a report.
  ///</summary>
  ///<remarks><para>
  ///  To access data of the corresponding file or stream while generating a report, pass an instance of this class as
  ///  a data source to one of <see cref="T:Aspose.Words.Reporting.ReportingEngine" />
  ///  .BuildReport overloads.
  ///</para><para>
  ///  In template documents, if a top-level JSON element is an array, a <see cref="T:Aspose.Words.Reporting.JsonDataSource" />
  ///  instance should be
  ///  treated in the same way as if it was a <see cref="T:System.Data.DataTable" />
  ///  instance. If a top-level JSON element
  ///  is an object, a <see cref="T:Aspose.Words.Reporting.JsonDataSource" />
  ///  instance should be treated in the same way as if it was
  ///  a <see cref="T:System.Data.DataRow" />
  ///  instance. For more information, see template syntax reference
  ///  (https://docs.aspose.com/display/wordsnet/Template+Syntax).
  ///</para><para>
  ///  In template documents, you can work with typed values of JSON elements. For convenience, the engine replaces the set
  ///  of JSON simple types with the following one:
  ///</para><list type="bullet"><item><see cref="T:System.Nullable`1" />
  ///</item>
  ///<item><see cref="T:System.Nullable`1" />
  ///</item>
  ///<item><see cref="T:System.Nullable`1" />
  ///</item>
  ///<item><see cref="T:System.Nullable`1" />
  ///</item>
  ///<item><see cref="T:System.String" />
  ///</item>
  ///</list>
  ///  <para>
  ///  The engine automatically recognizes values of the extra types upon their JSON representations.
  ///</para><para>
  ///  To override default behavior of JSON data loading, initialize and pass a <see cref="T:Aspose.Words.Reporting.JsonDataLoadOptions" />
  ///  instance
  ///  to a constructor of this class.
  ///</para></remarks>
  [DNTypeName('Aspose.Words.Reporting.JsonDataSource')]
  DNJsonDataSource = interface(DDN.mscorlib.DNObject)
  ['{6B12A8F3-92D2-3DE0-99C6-29DB8F8F204B}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNJsonDataSource = class(TDNGenericImport<DNJsonDataSourceClass, DNJsonDataSource>) end;

  //-------------namespace: Aspose.Words.Reporting----------------
  DNKnownTypeSetClass = interface(DDN.mscorlib.DNObjectClass)
  ['{124E4DF2-AF88-5049-A660-3568E2CA70B0}']
  end;

  ///<summary>
  ///  Represents an unordered set (i.e. a collection of unique items) containing <see cref="T:System.Type" />
  ///  objects
  ///  which fully or partially qualified names can be used within report templates to invoke the corresponding
  ///  types' static members, perform type casts, etc.
  ///</summary>
  ///<dev>
  ///  This class is just a facade of <see cref="T:Aspose.Reporting.KnownTypeSetCore" />
  ///  . Descriptional comments of these classes
  ///  should be kept in sync.
  ///</dev>
  [DNTypeName('Aspose.Words.Reporting.KnownTypeSet')]
  DNKnownTypeSet = interface(DDN.mscorlib.DNObject)
  ['{F772DA9A-B33A-3673-977E-7A1A40F8CCE3}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    ///<summary><para>Adds the specified <see cref="T:System.Type" />
    ///  object to the set. Throws <see cref="T:System.ArgumentException" />
    ///  in
    ///  the following cases:</para><para>- <paramref name="type" />
    ///  is null.</para><para>- <paramref name="type" />
    ///  represents a void type.</para><para>- <paramref name="type" />
    ///  represents an invisible type, i.e. a non-public type or a public nested type
    ///  which has a non-public outer type.</para><para>- <paramref name="type" />
    ///  represents a generic type.</para><para>- <paramref name="type" />
    ///  represents an array type.</para><para>- <paramref name="type" />
    ///  has been added to the set already.</para></summary>
    ///  <param name="type">A <see cref="T:System.Type" />
    ///  object to add.</param>
    procedure Add(&type: DDN.mscorlib.DNType);
    ///<summary>
    ///  Removes the specified <see cref="T:System.Type" />
    ///  object from the set. Throws <see cref="T:System.ArgumentException" />
    ///  if
    ///  <paramref name="type" />
    ///  is null.
    ///</summary>
    ///  <param name="type">A <see cref="T:System.Type" />
    ///  object to remove.</param>
    procedure Remove(&type: DDN.mscorlib.DNType);
    ///<summary>
    ///  Removes all items from the set.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Returns An <see cref="T:System.Collections.IEnumerator" />
    ///  object to iterate over items of the set.
    ///</summary>
    ///<returns>An <see cref="T:System.Collections.IEnumerator" />
    ///  object to iterate over items of the set.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the count of items in the set.
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNKnownTypeSet = class(TDNGenericImport<DNKnownTypeSetClass, DNKnownTypeSet>) end;

  //-------------namespace: Aspose.Words.Reporting----------------
  DNReportingEngineClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4C4B5C72-84EB-5894-B9C9-63FCB0DC6D4F}']
  { static getter & setter } 

    {class} function get_UseReflectionOptimization: Boolean;
    {class} procedure set_UseReflectionOptimization(value: Boolean);

  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class.
    ///</summary>
    {class} function init: DNReportingEngine;

  { static propertys } 

    ///<summary>
    ///  Gets or sets a value indicating whether invocations of custom type members performed via reflection API are
    ///  optimized using dynamic class generation or not. The default value is true.
    ///</summary>
    ///<remarks>
    ///  There are some scenarios where it is preferrable to disable this optimization. For example, if you are dealing
    ///  with small collections of data items all the time, then an overhead of dynamic class generation can be more
    ///  noticeable than an overhead of direct reflection API calls.
    ///</remarks>
    ///<dev>
    ///  Normally, such settings should be located in configuration files, but it seems like there is no autoportable way
    ///  to achieve this.
    ///</dev>
    {class} property UseReflectionOptimization: Boolean read get_UseReflectionOptimization write set_UseReflectionOptimization;
  end;

  ///<summary>
  ///  Provides routines to populate template documents with data and a set of settings to control these routines.
  ///</summary>
  ///<dev>
  ///  This class is just a facade of <see cref="T:Aspose.Reporting.ReportingEngineCore" />
  ///  . Descriptional comments of these classes
  ///  should be kept in sync.
  ///</dev>
  [DNTypeName('Aspose.Words.Reporting.ReportingEngine')]
  DNReportingEngine = interface(DDN.mscorlib.DNObject)
  ['{D710A255-DE82-3B62-8E3F-65501AD7555A}']
  { getters & setters } 

    function get_Options: DNReportBuildOptions;
    procedure set_Options(value: DNReportBuildOptions);
    function get_KnownTypes: DNKnownTypeSet;

  { methods } 

    ///<summary>
    ///  Populates the specified template document with data from the specified source making it a ready report.
    ///</summary>
    ///<remarks><para>
    ///  Using this overload you can reference the data source's members in the template document, but you cannot
    ///  reference the data source object itself. You should use the <see cref="M:Aspose.Words.Reporting.ReportingEngine.BuildReport(Aspose.Words.Document,System.Object,System.String)" />
    ///  overload to achieve this.
    ///</para><para>
    ///  A data source object can be of one of the following types:
    ///</para><list type="bullet"><item><see cref="T:Aspose.Words.Reporting.XmlDataSource" />
    ///</item>
    ///<item><see cref="T:Aspose.Words.Reporting.JsonDataSource" />
    ///</item>
    ///<item><see cref="T:Aspose.Words.Reporting.CsvDataSource" />
    ///</item>
    ///<item><see cref="T:System.Data.DataSet" />
    ///</item>
    ///<item><see cref="T:System.Data.DataTable" />
    ///</item>
    ///<item><see cref="T:System.Data.DataRow" />
    ///</item>
    ///<item><see cref="T:System.Data.IDataReader" />
    ///</item>
    ///<item><see cref="T:System.Data.IDataRecord" />
    ///</item>
    ///<item><see cref="T:System.Data.DataView" />
    ///</item>
    ///<item><see cref="T:System.Data.DataRowView" />
    ///</item>
    ///<item>
    ///  Any other arbitrary non-dynamic and non-anonymous .NET type
    ///</item>
    ///</list>
    ///  <para>
    ///  For information on how to work with data sources of different types in template documents, see template syntax
    ///  reference (https://docs.aspose.com/display/wordsnet/Template+Syntax).
    ///</para></remarks>
    ///  <param name="document">A template document to be populated with data.</param>
    ///  <param name="dataSource">A data source object.</param>
    ///<returns>A flag indicating whether parsing of the template document was successful.
    ///  The returned flag makes sense only if a value of the <see cref="P:Aspose.Words.Reporting.ReportingEngine.Options" />
    ///  property includes
    ///  the <see cref="F:Aspose.Words.Reporting.ReportBuildOptions.InlineErrorMessages" />
    ///  option.</returns>
    function BuildReport(document: DNDocument; dataSource: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  Populates the specified template document with data from the specified source making it a ready report.
    ///</summary>
    ///<remarks><para>
    ///  Using this overload you can reference the data source's members and the data source object itself in the template.
    ///  If you are not going to reference the data source object itself, you can omit <paramref name="dataSourceName" />
    ///  passing null or use the <see cref="M:Aspose.Words.Reporting.ReportingEngine.BuildReport(Aspose.Words.Document,System.Object)" />
    ///  overload.
    ///</para><para>
    ///  A data source object can be of one of the following types:
    ///</para><list type="bullet"><item><see cref="T:Aspose.Words.Reporting.XmlDataSource" />
    ///</item>
    ///<item><see cref="T:Aspose.Words.Reporting.JsonDataSource" />
    ///</item>
    ///<item><see cref="T:Aspose.Words.Reporting.CsvDataSource" />
    ///</item>
    ///<item><see cref="T:System.Data.DataSet" />
    ///</item>
    ///<item><see cref="T:System.Data.DataTable" />
    ///</item>
    ///<item><see cref="T:System.Data.DataRow" />
    ///</item>
    ///<item><see cref="T:System.Data.IDataReader" />
    ///</item>
    ///<item><see cref="T:System.Data.IDataRecord" />
    ///</item>
    ///<item><see cref="T:System.Data.DataView" />
    ///</item>
    ///<item><see cref="T:System.Data.DataRowView" />
    ///</item>
    ///<item>
    ///  Any other arbitrary non-dynamic and non-anonymous .NET type
    ///</item>
    ///</list>
    ///  <para>
    ///  For information on how to work with data sources of different types in template documents, see template syntax
    ///  reference (https://docs.aspose.com/display/wordsnet/Template+Syntax).
    ///</para></remarks>
    ///  <param name="document">A template document to be populated with data.</param>
    ///  <param name="dataSource">A data source object.</param>
    ///  <param name="dataSourceName">A name to reference the data source object in the template.</param>
    ///<returns>A flag indicating whether parsing of the template document was successful.
    ///  The returned flag makes sense only if a value of the <see cref="P:Aspose.Words.Reporting.ReportingEngine.Options" />
    ///  property includes
    ///  the <see cref="F:Aspose.Words.Reporting.ReportBuildOptions.InlineErrorMessages" />
    ///  option.</returns>
    function BuildReport(document: DNDocument; dataSource: DDN.mscorlib.DNObject; dataSourceName: string): Boolean; overload;
    ///<summary>
    ///  Populates the specified template document with data from the specified sources making it a ready report.
    ///</summary>
    ///<remarks><para>
    ///  Using this overload you can reference multiple data source objects and their members in the template.
    ///  The name of the first data source can be omitted (i.e. be an empty string or null) if you are going to
    ///  reference the data source's members but not the data source object itself. Names of the other data sources
    ///  must be specified and unique.
    ///</para><para>
    ///  If you are going to use a single data source, consider using of <see cref="M:Aspose.Words.Reporting.ReportingEngine.BuildReport(Aspose.Words.Document,System.Object)" />
    ///  and <see cref="M:Aspose.Words.Reporting.ReportingEngine.BuildReport(Aspose.Words.Document,System.Object,System.String)" />
    ///  overloads instead.
    ///</para><para>
    ///  A data source object can be of one of the following types:
    ///</para><list type="bullet"><item><see cref="T:Aspose.Words.Reporting.XmlDataSource" />
    ///</item>
    ///<item><see cref="T:Aspose.Words.Reporting.JsonDataSource" />
    ///</item>
    ///<item><see cref="T:Aspose.Words.Reporting.CsvDataSource" />
    ///</item>
    ///<item><see cref="T:System.Data.DataSet" />
    ///</item>
    ///<item><see cref="T:System.Data.DataTable" />
    ///</item>
    ///<item><see cref="T:System.Data.DataRow" />
    ///</item>
    ///<item><see cref="T:System.Data.IDataReader" />
    ///</item>
    ///<item><see cref="T:System.Data.IDataRecord" />
    ///</item>
    ///<item><see cref="T:System.Data.DataView" />
    ///</item>
    ///<item><see cref="T:System.Data.DataRowView" />
    ///</item>
    ///<item>
    ///  Any other arbitrary non-dynamic and non-anonymous .NET type
    ///</item>
    ///</list>
    ///  <para>
    ///  For information on how to work with data sources of different types in template documents, see template syntax
    ///  reference (https://docs.aspose.com/display/wordsnet/Template+Syntax).
    ///</para></remarks>
    ///  <param name="document">A template document to be populated with data.</param>
    ///  <param name="dataSources">An array of data source objects.</param>
    ///  <param name="dataSourceNames">An array of names to reference the data source objects within the template.</param>
    ///<returns>A flag indicating whether parsing of the template document was successful.
    ///  The returned flag makes sense only if a value of the <see cref="P:Aspose.Words.Reporting.ReportingEngine.Options" />
    ///  property includes
    ///  the <see cref="F:Aspose.Words.Reporting.ReportBuildOptions.InlineErrorMessages" />
    ///  option.</returns>
    function BuildReport(document: DNDocument; dataSources: TArray<DDN.mscorlib.DNObject>; dataSourceNames: TArray<string>): Boolean; overload;
    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a set of flags controlling behavior of this <see cref="T:Aspose.Words.Reporting.ReportingEngine" />
    ///  instance
    ///  while building a report.
    ///</summary>
    property Options: DNReportBuildOptions read get_Options write set_Options;
    ///<summary>
    ///  Gets an unordered set (i.e. a collection of unique items) containing <see cref="T:System.Type" />
    ///  objects
    ///  which fully or partially qualified names can be used within report templates processed by this engine
    ///  instance to invoke the corresponding types' static members, perform type casts, etc.
    ///</summary>
    property KnownTypes: DNKnownTypeSet read get_KnownTypes;
  end;

  TDNReportingEngine = class(TDNGenericImport<DNReportingEngineClass, DNReportingEngine>) end;

  //-------------namespace: Aspose.Words.Reporting----------------
  DNXmlDataLoadOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9D320A09-B0ED-56DF-A703-20FB5A745887}']
  { constructors } 

    {class} function init: DNXmlDataLoadOptions;

  end;

  [DNTypeName('Aspose.Words.Reporting.XmlDataLoadOptions')]
  DNXmlDataLoadOptions = interface(DDN.mscorlib.DNObject)
  ['{A7C0B862-FC41-317D-8D13-FD3A3957D66C}']
  { getters & setters } 

    function get_AlwaysGenerateRootObject: Boolean;
    procedure set_AlwaysGenerateRootObject(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AlwaysGenerateRootObject: Boolean read get_AlwaysGenerateRootObject write set_AlwaysGenerateRootObject;
  end;

  TDNXmlDataLoadOptions = class(TDNGenericImport<DNXmlDataLoadOptionsClass, DNXmlDataLoadOptions>) end;

  //-------------namespace: Aspose.Words.Reporting----------------
  DNXmlDataSourceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7C499077-6B0C-5D31-8809-9C24C266036E}']
  { constructors } 

    ///<summary>
    ///  Creates a new data source with data from an XML file.
    ///</summary>
    ///  <param name="xmlPath">The path to the XML file to be used as the data source.</param>
    {class} function init(xmlPath: string): DNXmlDataSource; overload;
    ///<summary>
    ///  Creates a new data source with data from an XML stream.
    ///</summary>
    ///  <param name="xmlStream">The stream of XML data to be used as the data source.</param>
    {class} function init(xmlStream: DDN.mscorlib.DNStream): DNXmlDataSource; overload;
    ///<summary>
    ///  Creates a new data source with data from an XML file using an XML Schema Definition file.
    ///</summary>
    ///  <param name="xmlPath">The path to the XML file to be used as the data source.</param>
    ///  <param name="xmlSchemaPath">The path to the XML Schema Definition file that provides schema for the XML
    ///  file.</param>
    {class} function init(xmlPath: string; xmlSchemaPath: string): DNXmlDataSource; overload;
    ///<summary>
    ///  Creates a new data source with data from an XML stream using an XML Schema Definition stream.
    ///</summary>
    ///  <param name="xmlStream">The stream of XML data to be used as the data source.</param>
    ///  <param name="xmlSchemaStream">The stream of XML Schema Definition that provides schema for the XML data.</param>
    {class} function init(xmlStream: DDN.mscorlib.DNStream; xmlSchemaStream: DDN.mscorlib.DNStream): DNXmlDataSource; overload;
    {class} function init(xmlPath: string; options: DNXmlDataLoadOptions): DNXmlDataSource; overload;
    {class} function init(xmlStream: DDN.mscorlib.DNStream; options: DNXmlDataLoadOptions): DNXmlDataSource; overload;
    {class} function init(xmlPath: string; xmlSchemaPath: string; options: DNXmlDataLoadOptions): DNXmlDataSource; overload;
    {class} function init(xmlStream: DDN.mscorlib.DNStream; xmlSchemaStream: DDN.mscorlib.DNStream; options: DNXmlDataLoadOptions): DNXmlDataSource; overload;

  end;

  ///<summary>
  ///  Provides access to data of an XML file or stream to be used within a report.
  ///</summary>
  ///<remarks><para>
  ///  To access data of the corresponding file or stream while generating a report, pass an instance of this class as
  ///  a data source to one of <see cref="T:Aspose.Words.Reporting.ReportingEngine" />
  ///  .BuildReport overloads.
  ///</para><para>
  ///  In template documents, if a top-level XML element contains only a list of elements of the same type,
  ///  an <see cref="T:Aspose.Words.Reporting.XmlDataSource" />
  ///  instance should be treated in the same way as if it was
  ///  a <see cref="T:System.Data.DataTable" />
  ///  instance. Otherwise, an <see cref="T:Aspose.Words.Reporting.XmlDataSource" />
  ///  instance should be treated in the same way as if it was
  ///  a <see cref="T:System.Data.DataRow" />
  ///  instance. For more information, see template syntax reference
  ///  (https://docs.aspose.com/display/wordsnet/Template+Syntax).
  ///</para><para>
  ///  When XML Schema Definition is passed to a constructor of this class, data types of values of simple XML elements
  ///  and attributes are determined according to the schema. So in template documents, you can work with typed values
  ///  rather than just strings.
  ///</para><para>
  ///  When XML Schema Definition is not passed to a constructor of this class, data types of values of simple XML elements
  ///  and attributes are determined automatically upon their string representations. So in template documents, you can work
  ///  with typed values in this case as well. The engine is capable to automatically recognize values of the following types:
  ///</para><list type="bullet"><item><see cref="T:System.Nullable`1" />
  ///</item>
  ///<item><see cref="T:System.Nullable`1" />
  ///</item>
  ///<item><see cref="T:System.Nullable`1" />
  ///</item>
  ///<item><see cref="T:System.Nullable`1" />
  ///</item>
  ///<item><see cref="T:System.String" />
  ///</item>
  ///</list>
  ///  <para>
  ///  Note that for automatic recognition of data types to work, string representations of values of simple XML elements
  ///  and attributes should be formed using invariant culture settings.
  ///</para></remarks>
  [DNTypeName('Aspose.Words.Reporting.XmlDataSource')]
  DNXmlDataSource = interface(DDN.mscorlib.DNObject)
  ['{EB29C297-A884-3884-BF8E-397A1445F3B8}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlDataSource = class(TDNGenericImport<DNXmlDataSourceClass, DNXmlDataSource>) end;

  //-------------namespace: Aspose.Words----------------
  DNRevisionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0563EF5B-1A3F-550F-9640-21AB684B6B13}']
  end;

  ///<summary>
  ///  Represents a revision (tracked change) in a document node or style.
  ///  Use <see cref="P:Aspose.Words.Revision.RevisionType" />
  ///  to check the type of this revision.
  ///</summary>
  [DNTypeName('Aspose.Words.Revision')]
  DNRevision = interface(DDN.mscorlib.DNObject)
  ['{CF34EF66-1D88-3E66-A8F8-A6CF59D6E382}']
  { getters & setters } 

    function get_Author: string;
    procedure set_Author(value: string);
    function get_DateTime: DDN.mscorlib.DNDateTime;
    procedure set_DateTime(value: DDN.mscorlib.DNDateTime);
    function get_RevisionType: DNRevisionType;
    function get_ParentNode: DNNode;
    function get_ParentStyle: DNStyle;
    function get_Group: DNRevisionGroup;

  { methods } 

    ///<summary>
    ///  Accepts this revision.
    ///</summary>
    procedure Accept;
    ///<summary>
    ///  Reject this revision.
    ///</summary>
    procedure Reject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the author of this revision. Can not be empty string or null.
    ///</summary>
    property Author: string read get_Author write set_Author;
    ///<summary>
    ///  Gets or sets the date/time of this revision.
    ///</summary>
    property DateTime: DDN.mscorlib.DNDateTime read get_DateTime write set_DateTime;
    ///<summary>
    ///  Gets the type of this revision.
    ///</summary>
    property RevisionType: DNRevisionType read get_RevisionType;
    ///<summary>
    ///  Gets the immediate parent node (owner) of this revision.
    ///  This property will work for any revision type other than <see cref="F:Aspose.Words.RevisionType.StyleDefinitionChange" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  If this revision relates to change of Style formatting, use <see cref="P:Aspose.Words.Revision.ParentStyle" />
    ///  instead.
    ///</remarks>
    property ParentNode: DNNode read get_ParentNode;
    ///<summary>
    ///  Gets the immediate parent style (owner) of this revision.
    ///  This property will work for only for the <see cref="F:Aspose.Words.RevisionType.StyleDefinitionChange" />
    ///  revision type.
    ///</summary>
    ///<remarks>
    ///  If this revision relates to changes on document nodes, use <see cref="P:Aspose.Words.Revision.ParentNode" />
    ///  instead.
    ///</remarks>
    property ParentStyle: DNStyle read get_ParentStyle;
    ///<summary>
    ///  Gets the revision group. Returns null if the revision does not belong to any group.
    ///</summary>
    ///<remarks>
    ///  Revision has no group if revision type is RevisionType.StyleDefinitionChange or
    ///  if the revision is not longer exist in document context (accepted/rejected).
    ///</remarks>
    property Group: DNRevisionGroup read get_Group;
  end;

  TDNRevision = class(TDNGenericImport<DNRevisionClass, DNRevision>) end;

  //-------------namespace: Aspose.Words----------------
  DNRevisionCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C34DEF14-8578-5017-986D-CA21A2C9ABAF}']
  end;

  ///<summary>
  ///  A collection of <see cref="T:Aspose.Words.Revision" />
  ///  objects that represent revisions in the document.
  ///</summary>
  ///<remarks><para>You do not create instances of this class directly. Use the <see cref="P:Aspose.Words.Document.Revisions" />
  ///  property to get revisions present in a document.</para></remarks>
  [DNTypeName('Aspose.Words.RevisionCollection')]
  DNRevisionCollection = interface(DDN.mscorlib.DNObject)
  ['{A4D9FA64-5727-3DD7-ACAF-C161EFD02870}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNRevision;
    function get_Groups: DNRevisionGroupCollection;

  { methods } 

    ///<summary>
    ///  Accepts all revisions in this collection.
    ///</summary>
    procedure AcceptAll;
    ///<summary>
    ///  Rejects all revisions in this collection.
    ///</summary>
    procedure RejectAll;
    ///<summary>
    ///  Returns an enumerator object.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNRevision>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the number of revisions in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNRevision read get_Item; default;
    ///<summary>
    ///  Collection of revision groups.
    ///</summary>
    property Groups: DNRevisionGroupCollection read get_Groups;
  end;

  TDNRevisionCollection = class(TDNGenericImport<DNRevisionCollectionClass, DNRevisionCollection>) end;

  //-------------namespace: Aspose.Words----------------
  DNRevisionGroupClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4167FA46-A49B-5682-87D1-921A491FDCA4}']
  end;

  ///<summary>
  ///  Represents a group of sequential <see cref="T:Aspose.Words.Revision" />
  ///  objects.
  ///</summary>
  [DNTypeName('Aspose.Words.RevisionGroup')]
  DNRevisionGroup = interface(DDN.mscorlib.DNObject)
  ['{8E1ED317-A87E-3308-915C-1DFEFF3DCD8F}']
  { getters & setters } 

    function get_Text: string;
    function get_Author: string;
    function get_RevisionType: DNRevisionType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns inserted/deleted/moved text or description of format change.
    ///</summary>
    property Text: string read get_Text;
    ///<summary>
    ///  Gets the author of this revision group.
    ///</summary>
    property Author: string read get_Author;
    ///<summary>
    ///  Gets the type of revisions included in this group.
    ///</summary>
    property RevisionType: DNRevisionType read get_RevisionType;
  end;

  TDNRevisionGroup = class(TDNGenericImport<DNRevisionGroupClass, DNRevisionGroup>) end;

  //-------------namespace: Aspose.Words----------------
  DNRevisionGroupCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6F886536-A828-57C2-B4AD-A7B674A8861A}']
  end;

  ///<summary>
  ///  A collection of <see cref="T:Aspose.Words.RevisionGroup" />
  ///  objects that represent revision groups in the document.
  ///</summary>
  ///<remarks><para>You do not create instances of this class directly. Use the <see cref="P:Aspose.Words.RevisionCollection.Groups" />
  ///  property to get revision groups present in a document.</para></remarks>
  [DNTypeName('Aspose.Words.RevisionGroupCollection')]
  DNRevisionGroupCollection = interface(DDN.mscorlib.DNObject)
  ['{9DC25D55-E1BF-3AAC-8B7D-E29554315D23}']
  { getters & setters } 

    function get_Item(index: Int32): DNRevisionGroup;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Returns an enumerator object.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNRevisionGroup>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNRevisionGroup read get_Item; default;
    ///<summary>
    ///  Returns the number of revision groups in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNRevisionGroupCollection = class(TDNGenericImport<DNRevisionGroupCollectionClass, DNRevisionGroupCollection>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNBookmarksOutlineLevelCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{807C00C9-7283-557B-88FA-7D2D7346B7D4}']
  { constructors } 

    {class} function init: DNBookmarksOutlineLevelCollection;

  end;

  ///<summary>
  ///  A collection of individual bookmarks outline level.
  ///</summary>
  ///<remarks><para>Key is a case-insensitive string bookmark name. Value is a int bookmark outline level.</para><para>Bookmark outline level may be a value from 0 to 9. Specify 0 and Word bookmark will not be displayed in the document outline.
  ///  Specify 1 and Word bookmark will be displayed in the document outline at level 1; 2 for level 2 and so on.</para></remarks>
  [DNTypeName('Aspose.Words.Saving.BookmarksOutlineLevelCollection')]
  DNBookmarksOutlineLevelCollection = interface(DDN.mscorlib.DNObject)
  ['{593F4037-1A76-3FC7-85B7-472F72815356}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(name: string): Int32; overload;
    procedure set_Item(name: string; value: Int32); overload;
    function get_Item(index: Int32): Int32; overload;
    procedure set_Item(index: Int32; value: Int32); overload;

  { methods } 

    ///<summary>
    ///  Adds a bookmark to the collection.
    ///</summary>
    ///  <param name="name">The case-insensitive name of the bookmark to add.</param>
    ///  <param name="outlineLevel">The outline level of the bookmark. Valid range is 0 to 9.</param>
    procedure Add(name: string; outlineLevel: Int32);
    ///<summary>
    ///  Determines whether the collection contains a bookmark with the given name.
    ///</summary>
    ///  <param name="name">Case-insensitive name of the bookmark to locate.</param>
    ///<returns>True if item is found in the collection; otherwise, false.</returns>
    function &Contains(name: string): Boolean;
    ///<summary>
    ///  Returns the zero-based index of the specified bookmark in the collection.
    ///</summary>
    ///  <param name="name">The case-insensitive name of the bookmark.</param>
    ///<returns>The zero based index. Negative value if not found.</returns>
    function IndexOfKey(name: string): Int32;
    ///<summary>
    ///  Removes a bookmark with the specified name from the collection.
    ///</summary>
    ///  <param name="name">The case-insensitive name of the bookmark.</param>
    procedure Remove(name: string);
    ///<summary>
    ///  Removes a bookmark at the specified index.
    ///</summary>
    ///  <param name="index">The zero based index.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all elements from the collection.
    ///</summary>
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements contained in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[name: string]: Int32 read get_Item write set_Item; default;
    property Item[index: Int32]: Int32 read get_Item write set_Item; default;
  end;

  TDNBookmarksOutlineLevelCollection = class(TDNGenericImport<DNBookmarksOutlineLevelCollectionClass, DNBookmarksOutlineLevelCollection>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNCssSavingArgsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{295A768B-68E3-5CD3-B0A6-389F7F4C7053}']
  end;

  ///<summary>
  ///  Provides data for the <see cref="M:Aspose.Words.Saving.ICssSavingCallback.CssSaving(Aspose.Words.Saving.CssSavingArgs)" />
  ///  event.
  ///</summary>
  ///<remarks><para>By default, when Aspose.Words saves a document to HTML, it saves CSS information inline
  ///  (as a value of the <b>style</b>
  ///  attribute on every element).
  ///</para><para><see cref="T:Aspose.Words.Saving.CssSavingArgs" />
  ///  allows to save CSS information into file by providing your own stream object.</para><para>To save CSS into stream, use the <see cref="P:Aspose.Words.Saving.CssSavingArgs.CssStream" />
  ///  property.</para><para>To suppress saving CSS into a file and embedding to HTML document use the <see cref="P:Aspose.Words.Saving.CssSavingArgs.IsExportNeeded" />
  ///  property.</para></remarks>
  [DNTypeName('Aspose.Words.Saving.CssSavingArgs')]
  DNCssSavingArgs = interface(DDN.mscorlib.DNObject)
  ['{32E5AB82-E4C7-38DE-B09B-07A8362E2CB8}']
  { getters & setters } 

    function get_Document: DNDocument;
    function get_KeepCssStreamOpen: Boolean;
    procedure set_KeepCssStreamOpen(value: Boolean);
    function get_CssStream: DDN.mscorlib.DNStream;
    procedure set_CssStream(value: DDN.mscorlib.DNStream);
    function get_IsExportNeeded: Boolean;
    procedure set_IsExportNeeded(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the document object that is currently being saved.
    ///</summary>
    property Document: DNDocument read get_Document;
    ///<summary>
    ///  Specifies whether Aspose.Words should keep the stream open or close it after saving an CSS information.
    ///</summary>
    ///<remarks><para>Default is <c>false</c> and Aspose.Words will close the stream you provided
    ///  in the <see cref="P:Aspose.Words.Saving.CssSavingArgs.CssStream" />
    ///  property after writing an CSS information into it.
    ///  Specify <c>true</c> to keep the stream open.</para><seealso cref="P:Aspose.Words.Saving.CssSavingArgs.CssStream" />
    ///</remarks>
    property KeepCssStreamOpen: Boolean read get_KeepCssStreamOpen write set_KeepCssStreamOpen;
    ///<summary>
    ///  Allows to specify the stream where the CSS information will be saved to.
    ///</summary>
    ///<remarks><para>This property allows you to save CSS information to a stream.</para><para>The default value is <c>null</c>. This property doesn't suppress saving CSS information to a file or
    ///  embedding to HTML document. To suppress exporting CSS use the <see cref="P:Aspose.Words.Saving.CssSavingArgs.IsExportNeeded" />
    ///  property.</para><para>Using <see cref="T:Aspose.Words.Saving.ICssSavingCallback" />
    ///  you cannot substitute CSS with
    ///  another. It is intended only for saving CSS to a stream.</para><seealso cref="P:Aspose.Words.Saving.CssSavingArgs.KeepCssStreamOpen" />
    ///</remarks>
    property CssStream: DDN.mscorlib.DNStream read get_CssStream write set_CssStream;
    ///<summary>
    ///  Allows to specify whether the CSS will be exported to file and embedded to HTML document. Default is <c>true</c>.
    ///  When this property is <c>false</c>, the CSS information will not be saved to a CSS file and will not be embedded to HTML document.
    ///</summary>
    property IsExportNeeded: Boolean read get_IsExportNeeded write set_IsExportNeeded;
  end;

  TDNCssSavingArgs = class(TDNGenericImport<DNCssSavingArgsClass, DNCssSavingArgs>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNDocumentPartSavingArgsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7E804940-CBB9-54A6-B856-177470153B4B}']
  end;

  ///<summary>
  ///  Provides data for the <see cref="M:Aspose.Words.Saving.IDocumentPartSavingCallback.DocumentPartSaving(Aspose.Words.Saving.DocumentPartSavingArgs)" />
  ///  callback.
  ///</summary>
  ///<remarks><p>When Aspose.Words saves a document to HTML or related formats and <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.DocumentSplitCriteria" />
  ///  is specified, the document is split into parts and by default, each document part is saved into a separate file.</p>
  ///  <p>Class <see cref="T:Aspose.Words.Saving.DocumentPartSavingArgs" />
  ///  allows you to control how each document part will be saved.
  ///  It allows to redefine how file names are generated or to completely circumvent saving of document parts into
  ///  files by providing your own stream objects.</p>
  ///  <p>To save document parts into streams instead of files, use the <see cref="P:Aspose.Words.Saving.DocumentPartSavingArgs.DocumentPartStream" />
  ///  property.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.Saving.DocumentPartSavingArgs')]
  DNDocumentPartSavingArgs = interface(DDN.mscorlib.DNObject)
  ['{7ACC42DE-A6E9-3515-AB9A-6A68FD1923A2}']
  { getters & setters } 

    function get_Document: DNDocument;
    function get_DocumentPartFileName: string;
    procedure set_DocumentPartFileName(value: string);
    function get_KeepDocumentPartStreamOpen: Boolean;
    procedure set_KeepDocumentPartStreamOpen(value: Boolean);
    function get_DocumentPartStream: DDN.mscorlib.DNStream;
    procedure set_DocumentPartStream(value: DDN.mscorlib.DNStream);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the document object that is being saved.
    ///</summary>
    property Document: DNDocument read get_Document;
    ///<summary>
    ///  Gets or sets the file name (without path) where the document part will be saved to.
    ///</summary>
    ///<remarks><p>This property allows you to redefine how the document part file names are generated
    ///  during export to HTML or EPUB.</p>
    ///  <p>When the callback is invoked, this property contains the file name that was generated
    ///  by Aspose.Words. You can change the value of this property to save the document part into a
    ///  different file. Note that the file name for each part must be unique.</p>
    ///  <p><see cref="P:Aspose.Words.Saving.DocumentPartSavingArgs.DocumentPartFileName" />
    ///  must contain only the file name without the path.
    ///  Aspose.Words determines the path for saving using the document file name. If output document
    ///  file name was not specified, for instance when saving to a stream, this file name is used only
    ///  for referencing document parts. The same is true when saving to EPUB format.</p>
    ///<seealso cref="P:Aspose.Words.Saving.DocumentPartSavingArgs.DocumentPartStream" />
    ///</remarks>
    property DocumentPartFileName: string read get_DocumentPartFileName write set_DocumentPartFileName;
    ///<summary>
    ///  Specifies whether Aspose.Words should keep the stream open or close it after saving a document part.
    ///</summary>
    ///<remarks><p>Default is <c>false</c> and Aspose.Words will close the stream you provided
    ///  in the <see cref="P:Aspose.Words.Saving.DocumentPartSavingArgs.DocumentPartStream" />
    ///  property after writing a document part into it.
    ///  Specify <c>true</c> to keep the stream open. Please note that the main output stream
    ///  provided in the call to <see cref="M:Aspose.Words.Document.Save(System.IO.Stream,Aspose.Words.SaveFormat)" />
    ///  or
    ///<see cref="M:Aspose.Words.Document.Save(System.IO.Stream,Aspose.Words.Saving.SaveOptions)" />
    ///  will never be closed by Aspose.Words
    ///  even if <see cref="P:Aspose.Words.Saving.DocumentPartSavingArgs.KeepDocumentPartStreamOpen" />
    ///  is set to <c>false</c>.</p>
    ///<seealso cref="P:Aspose.Words.Saving.DocumentPartSavingArgs.DocumentPartStream" />
    ///</remarks>
    property KeepDocumentPartStreamOpen: Boolean read get_KeepDocumentPartStreamOpen write set_KeepDocumentPartStreamOpen;
    ///<summary>
    ///  Allows to specify the stream where the document part will be saved to.
    ///</summary>
    ///<remarks><p>This property allows you to save document parts to streams instead of files during HTML export.</p>
    ///  <p>The default value is <c>null</c>. When this property is <c>null</c>, the document part
    ///  will be saved to a file specified in the <see cref="P:Aspose.Words.Saving.DocumentPartSavingArgs.DocumentPartFileName" />
    ///  property.</p>
    ///  <p>When saving to a stream in HTML format is requested by <see cref="M:Aspose.Words.Document.Save(System.IO.Stream,Aspose.Words.SaveFormat)" />
    ///  or <see cref="M:Aspose.Words.Document.Save(System.IO.Stream,Aspose.Words.Saving.SaveOptions)" />
    ///  and first document part is about to be saved,
    ///  Aspose.Words suggests here the main output stream initially passed by the caller.</p>
    ///  <p>When saving to EPUB format that is a container format based on HTML, <see cref="P:Aspose.Words.Saving.DocumentPartSavingArgs.DocumentPartStream" />
    ///  cannot
    ///  be specified because all subsidiary parts will be encapsulated into a single output package.</p>
    ///<seealso cref="P:Aspose.Words.Saving.DocumentPartSavingArgs.KeepDocumentPartStreamOpen" />
    ///</remarks>
    property DocumentPartStream: DDN.mscorlib.DNStream read get_DocumentPartStream write set_DocumentPartStream;
  end;

  TDNDocumentPartSavingArgs = class(TDNGenericImport<DNDocumentPartSavingArgsClass, DNDocumentPartSavingArgs>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNDownsampleOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0E24C941-3FC0-54C8-AB6D-ACC7B5A31D10}']
  { constructors } 

    {class} function init: DNDownsampleOptions;

  end;

  ///<summary>
  ///  Allows to specify downsample options.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.DownsampleOptions')]
  DNDownsampleOptions = interface(DDN.mscorlib.DNObject)
  ['{0D4A52ED-9EF7-3DB0-A9B2-E53150BFAAC7}']
  { getters & setters } 

    function get_DownsampleImages: Boolean;
    procedure set_DownsampleImages(value: Boolean);
    function get_Resolution: Int32;
    procedure set_Resolution(value: Int32);
    function get_ResolutionThreshold: Int32;
    procedure set_ResolutionThreshold(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies whether images should be downsampled.
    ///</summary>
    ///<remarks>
    ///  The default value is <c>true</c>.
    ///</remarks>
    property DownsampleImages: Boolean read get_DownsampleImages write set_DownsampleImages;
    ///<summary>
    ///  Specifies the resolution in pixels per inch which the images should be downsampled to.
    ///</summary>
    ///<remarks>
    ///  The default value is 220 ppi.
    ///</remarks>
    property Resolution: Int32 read get_Resolution write set_Resolution;
    ///<summary>
    ///  Specifies the threshold resolution in pixels per inch.
    ///  If resolution of an image in the document is less than threshold value,
    ///  the downsampling algorithm will not be applied.
    ///  A value of 0 means the threshold check is not used and all images that can be reduced in size are downsampled.
    ///</summary>
    ///<remarks>
    ///  The default value is 0.
    ///</remarks>
    property ResolutionThreshold: Int32 read get_ResolutionThreshold write set_ResolutionThreshold;
  end;

  TDNDownsampleOptions = class(TDNGenericImport<DNDownsampleOptionsClass, DNDownsampleOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNFontSavingArgsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3B99152D-C138-5E59-8870-9431784DED06}']
  end;

  ///<summary>
  ///  Provides data for the <see cref="M:Aspose.Words.Saving.IFontSavingCallback.FontSaving(Aspose.Words.Saving.FontSavingArgs)" />
  ///  event.
  ///</summary>
  ///<remarks><para>When Aspose.Words saves a document to HTML or related formats and <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ExportFontResources" />
  ///  is set to <b>true</b>
  ///  , it saves each font subject for export into a separate file.</para><para><see cref="T:Aspose.Words.Saving.FontSavingArgs" />
  ///  controls whether particular font resource should be exported and how.</para><para><see cref="T:Aspose.Words.Saving.FontSavingArgs" />
  ///  also allows to redefine how font file names are generated or to
  ///  completely circumvent saving of fonts into files by providing your own stream objects.</para><para>To decide whether to save a particular font resource, use the <see cref="P:Aspose.Words.Saving.FontSavingArgs.IsExportNeeded" />
  ///  property.</para><para>To save fonts into streams instead of files, use the <see cref="P:Aspose.Words.Saving.FontSavingArgs.FontStream" />
  ///  property.</para></remarks>
  [DNTypeName('Aspose.Words.Saving.FontSavingArgs')]
  DNFontSavingArgs = interface(DDN.mscorlib.DNObject)
  ['{50055EFF-FBE1-306C-A87A-C7B5E3FCB895}']
  { getters & setters } 

    function get_Document: DNDocument;
    function get_FontFamilyName: string;
    function get_Bold: Boolean;
    function get_Italic: Boolean;
    function get_OriginalFileName: string;
    function get_OriginalFileSize: Int32;
    function get_IsExportNeeded: Boolean;
    procedure set_IsExportNeeded(value: Boolean);
    function get_IsSubsettingNeeded: Boolean;
    procedure set_IsSubsettingNeeded(value: Boolean);
    function get_FontFileName: string;
    procedure set_FontFileName(value: string);
    function get_KeepFontStreamOpen: Boolean;
    procedure set_KeepFontStreamOpen(value: Boolean);
    function get_FontStream: DDN.mscorlib.DNStream;
    procedure set_FontStream(value: DDN.mscorlib.DNStream);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the document object that is being saved.
    ///</summary>
    property Document: DNDocument read get_Document;
    ///<summary>
    ///  Indicates the current font family name.
    ///</summary>
    property FontFamilyName: string read get_FontFamilyName;
    ///<summary>
    ///  Indicates whether the current font is bold.
    ///</summary>
    property Bold: Boolean read get_Bold;
    ///<summary>
    ///  Indicates whether the current font is italic.
    ///</summary>
    property Italic: Boolean read get_Italic;
    ///<summary>
    ///  Gets the original font file name with an extension.
    ///</summary>
    ///<remarks><p>This property contains the original file name of the current font if it is known. Otherwise it can be an empty string.</p>
    ///<seealso cref="P:Aspose.Words.Saving.FontSavingArgs.OriginalFileSize" />
    ///</remarks>
    property OriginalFileName: string read get_OriginalFileName;
    ///<summary>
    ///  Gets the original font file size.
    ///</summary>
    ///<remarks><p>This property contains the original file size of the current font if it is known. Otherwise it can be zero.</p>
    ///<seealso cref="P:Aspose.Words.Saving.FontSavingArgs.OriginalFileName" />
    ///<seealso cref="P:Aspose.Words.Saving.FontSavingArgs.IsSubsettingNeeded" />
    ///</remarks>
    property OriginalFileSize: Int32 read get_OriginalFileSize;
    ///<summary>
    ///  Allows to specify whether the current font will be exported as a font resource. Default is <c>true</c>.
    ///</summary>
    property IsExportNeeded: Boolean read get_IsExportNeeded write set_IsExportNeeded;
    ///<summary>
    ///  Allows to specify whether the current font will be subsetted before exporting as a font resource.
    ///</summary>
    ///<remarks><p>Fonts can be exported as complete original font files or subsetted to include only the characters
    ///  that are used in the document. Subsetting allows to reduce the resulting font resource size.</p>
    ///  <para>By default, Aspose.Words decides whether to perform subsetting or not by comparing the original font file size
    ///  with the one specified in <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontResourcesSubsettingSizeThreshold" />
    ///  .
    ///  You can override this behavior for individual fonts by setting the <see cref="P:Aspose.Words.Saving.FontSavingArgs.IsSubsettingNeeded" />
    ///  property.</para></remarks>
    property IsSubsettingNeeded: Boolean read get_IsSubsettingNeeded write set_IsSubsettingNeeded;
    ///<summary>
    ///  Gets or sets the file name (without path) where the font will be saved to.
    ///</summary>
    ///<remarks><para>This property allows you to redefine how the font file names are generated
    ///  during export to HTML.</para><para>When the event is fired, this property contains the file name that was generated
    ///  by Aspose.Words. You can change the value of this property to save the font into a
    ///  different file. Note that file names must be unique.</para><p>Aspose.Words automatically generates a unique file name for every embedded font when
    ///  exporting to HTML format. How the font file name is generated
    ///  depends on whether you save the document to a file or to a stream.</p>
    ///  <p>When saving a document to a file, the generated font file name looks like
    ///<i>&lt;document base file name&gt;.&lt;original file name&gt;&lt;optional suffix&gt;.&lt;extension&gt;</i>.</p>
    ///  <p>When saving a document to a stream, the generated font file name looks like
    ///<i>Aspose.Words.&lt;document guid&gt;.&lt;original file name&gt;&lt;optional suffix&gt;.&lt;extension&gt;</i>.</p>
    ///  <para><see cref="P:Aspose.Words.Saving.FontSavingArgs.FontFileName" />
    ///  must contain only the file name without the path.
    ///  Aspose.Words determines the path for saving using the document file name,
    ///  the <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontsFolder" />
    ///  and
    ///<see cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontsFolderAlias" />
    ///  properties.</para><seealso cref="P:Aspose.Words.Saving.FontSavingArgs.FontStream" />
    ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontsFolder" />
    ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontsFolderAlias" />
    ///</remarks>
    property FontFileName: string read get_FontFileName write set_FontFileName;
    ///<summary>
    ///  Specifies whether Aspose.Words should keep the stream open or close it after saving a font.
    ///</summary>
    ///<remarks><para>Default is <c>false</c> and Aspose.Words will close the stream you provided
    ///  in the <see cref="P:Aspose.Words.Saving.FontSavingArgs.FontStream" />
    ///  property after writing a font into it.
    ///  Specify <c>true</c> to keep the stream open.</para><seealso cref="P:Aspose.Words.Saving.FontSavingArgs.FontStream" />
    ///</remarks>
    property KeepFontStreamOpen: Boolean read get_KeepFontStreamOpen write set_KeepFontStreamOpen;
    ///<summary>
    ///  Allows to specify the stream where the font will be saved to.
    ///</summary>
    ///<remarks><para>This property allows you to save fonts to streams instead of files during HTML export.</para><para>The default value is <c>null</c>. When this property is <c>null</c>, the font
    ///  will be saved to a file specified in the <see cref="P:Aspose.Words.Saving.FontSavingArgs.FontFileName" />
    ///  property.</para><seealso cref="P:Aspose.Words.Saving.FontSavingArgs.FontFileName" />
    ///<seealso cref="P:Aspose.Words.Saving.FontSavingArgs.KeepFontStreamOpen" />
    ///</remarks>
    property FontStream: DDN.mscorlib.DNStream read get_FontStream write set_FontStream;
  end;

  TDNFontSavingArgs = class(TDNGenericImport<DNFontSavingArgsClass, DNFontSavingArgs>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNGraphicsQualityOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F292A8D1-6801-5413-AE0F-8848CDDC2685}']
  { constructors } 

    {class} function init: DNGraphicsQualityOptions;

  end;

  ///<summary>
  ///  Allows to specify additional <see cref="T:System.Drawing.Graphics" />
  ///  quality options.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.GraphicsQualityOptions')]
  DNGraphicsQualityOptions = interface(DDN.mscorlib.DNObject)
  ['{A6E09747-D439-33D0-8A61-B3505CF04C10}']
  { getters & setters } 

    function get_StringFormat: DDN.Aspose.Common.DNStringFormat;
    procedure set_StringFormat(value: DDN.Aspose.Common.DNStringFormat);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets text layout information (such as alignment, orientation and tab stops) display manipulations
    ///  (such as ellipsis insertion and national digit substitution) and OpenType features.
    ///</summary>
    property StringFormat: DDN.Aspose.Common.DNStringFormat read get_StringFormat write set_StringFormat;
  end;

  TDNGraphicsQualityOptions = class(TDNGenericImport<DNGraphicsQualityOptionsClass, DNGraphicsQualityOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Implement this interface if you want to control how Aspose.Words saves CSS (Cascading Style Sheet) when
  ///  saving a document to HTML.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.ICssSavingCallback')]
  DNICssSavingCallback = interface(DDN.mscorlib.DNObject)
  ['{2847C427-25CE-3CB8-85D1-C102E440176F}']
  { methods } 

    ///<summary>
    ///  Called when Aspose.Words saves an CSS (Cascading Style Sheet).
    ///</summary>
    procedure CssSaving(args: DNCssSavingArgs);

  end;

  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Implement this interface if you want to receive notifications and control how
  ///  Aspose.Words saves document parts when exporting a document to <see cref="F:Aspose.Words.SaveFormat.Html" />
  ///  or <see cref="F:Aspose.Words.SaveFormat.Epub" />
  ///  format.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.IDocumentPartSavingCallback')]
  DNIDocumentPartSavingCallback = interface(DDN.mscorlib.DNObject)
  ['{16EC42F9-029C-3185-9A3B-4B587C995F24}']
  { methods } 

    ///<summary>
    ///  Called when Aspose.Words is about to save a document part.
    ///</summary>
    procedure DocumentPartSaving(args: DNDocumentPartSavingArgs);

  end;

  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Implement this interface if you want to receive notifications and control how
  ///  Aspose.Words saves fonts when exporting a document to HTML format.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.IFontSavingCallback')]
  DNIFontSavingCallback = interface(DDN.mscorlib.DNObject)
  ['{489BB40F-AED0-316E-9308-2D95652FA990}']
  { methods } 

    ///<summary>
    ///  Called when Aspose.Words is about to save a font resource.
    ///</summary>
    procedure FontSaving(args: DNFontSavingArgs);

  end;

  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Implement this interface if you want to control how Aspose.Words saves images when
  ///  saving a document to HTML. May be used by other formats.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.IImageSavingCallback')]
  DNIImageSavingCallback = interface(DDN.mscorlib.DNObject)
  ['{D8C578B7-7378-3897-8D13-31B3372593D8}']
  { methods } 

    ///<summary>
    ///  Called when Aspose.Words saves an image to HTML.
    ///</summary>
    procedure ImageSaving(args: DNImageSavingArgs);

  end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNImageSavingArgsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{73329822-7C3B-5501-BAE0-E455282B154B}']
  end;

  ///<summary>
  ///  Provides data for the <see cref="M:Aspose.Words.Saving.IImageSavingCallback.ImageSaving(Aspose.Words.Saving.ImageSavingArgs)" />
  ///  event.
  ///</summary>
  ///<remarks><para>By default, when Aspose.Words saves a document to HTML, it saves each image into
  ///  a separate file. Aspose.Words uses the document file name and a unique number to generate unique file name
  ///  for each image found in the document.</para><para><see cref="T:Aspose.Words.Saving.ImageSavingArgs" />
  ///  allows to redefine how image file names are generated or to
  ///  completely circumvent saving of images into files by providing your own stream objects.</para><para>To apply your own logic for generating image file names use the
  ///<see cref="P:Aspose.Words.Saving.ImageSavingArgs.ImageFileName" />
  ///  , <see cref="P:Aspose.Words.Saving.ImageSavingArgs.CurrentShape" />
  ///  and <see cref="P:Aspose.Words.Saving.ImageSavingArgs.IsImageAvailable" />
  ///  properties.</para><para>To save images into streams instead of files, use the <see cref="P:Aspose.Words.Saving.ImageSavingArgs.ImageStream" />
  ///  property.</para></remarks>
  [DNTypeName('Aspose.Words.Saving.ImageSavingArgs')]
  DNImageSavingArgs = interface(DDN.mscorlib.DNObject)
  ['{64F48B81-AA59-36DB-A9BB-90A48C4D8FB4}']
  { getters & setters } 

    function get_Document: DNDocument;
    function get_CurrentShape: DNShapeBase;
    function get_IsImageAvailable: Boolean;
    function get_ImageFileName: string;
    procedure set_ImageFileName(value: string);
    function get_KeepImageStreamOpen: Boolean;
    procedure set_KeepImageStreamOpen(value: Boolean);
    function get_ImageStream: DDN.mscorlib.DNStream;
    procedure set_ImageStream(value: DDN.mscorlib.DNStream);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the document object that is currently being saved.
    ///</summary>
    property Document: DNDocument read get_Document;
    ///<summary>
    ///  Gets the <see cref="T:Aspose.Words.Drawing.ShapeBase" />
    ///  object corresponding to the shape or group shape
    ///  that is about to be saved.
    ///</summary>
    ///<remarks><para><see cref="T:Aspose.Words.Saving.IImageSavingCallback" />
    ///  can be fired while saving either a shape or a group shape.
    ///  That's why the property has <see cref="T:Aspose.Words.Drawing.ShapeBase" />
    ///  type. You can check whether it's a group shape comparing
    ///<see cref="P:Aspose.Words.Drawing.ShapeBase.ShapeType" />
    ///  with <see cref="F:Aspose.Words.Drawing.ShapeType.Group" />
    ///  or by casting it to one of derived classes:
    ///<see cref="T:Aspose.Words.Drawing.Shape" />
    ///  or <see cref="T:Aspose.Words.Drawing.GroupShape" />
    ///  .</para><para>Aspose.Words uses the document file name and a unique number to generate unique file name
    ///  for each image found in the document. You can use the <see cref="P:Aspose.Words.Saving.ImageSavingArgs.CurrentShape" />
    ///  property to generate
    ///  a "better" file name by examining shape properties such as <see cref="P:Aspose.Words.Drawing.ImageData.Title" />
    ///  (Shape only), <see cref="P:Aspose.Words.Drawing.ImageData.SourceFullName" />
    ///  (Shape only)
    ///  and <see cref="P:Aspose.Words.Drawing.ShapeBase.Name" />
    ///  . Of course you can build file names using any other properties or criteria
    ///  but note that subsidiary file names must be unique within the export operation.</para><para>Some images in the document can be unavailable. To check image availability
    ///  use the <see cref="P:Aspose.Words.Saving.ImageSavingArgs.IsImageAvailable" />
    ///  property.</para></remarks>
    property CurrentShape: DNShapeBase read get_CurrentShape;
    ///<summary>
    ///  Returns <c>true</c> if the current image is available for export.
    ///</summary>
    ///<remarks><para>Some images in the document can be unavailable, for example, because the image
    ///  is linked and the link is inaccessible or does not point to a valid image.
    ///  In this case Aspose.Words exports an icon with a red cross. This property returns
    ///<c>true</c> if the original image is available; returns <c>false</c> if the original
    ///  image is not available and a "no image" icon will be offered for save.</para><para>When saving a group shape or a shape that doesn't require any image this property
    ///  is always <c>true</c>.</para></remarks>
    ///<seealso cref="P:Aspose.Words.Saving.ImageSavingArgs.CurrentShape" />
    property IsImageAvailable: Boolean read get_IsImageAvailable;
    ///<summary>
    ///  Gets or sets the file name (without path) where the image will be saved to.
    ///</summary>
    ///<remarks><para>This property allows you to redefine how the image file names are generated
    ///  during export to HTML.</para><para>When the event is fired, this property contains the file name that was generated
    ///  by Aspose.Words. You can change the value of this property to save the image into a
    ///  different file. Note that file names must be unique.</para><p>Aspose.Words automatically generates a unique file name for every embedded image when
    ///  exporting to HTML format. How the image file name is generated
    ///  depends on whether you save the document to a file or to a stream.</p>
    ///  <p>When saving a document to a file, the generated image file name looks like
    ///<i>&lt;document base file name&gt;.&lt;image number&gt;.&lt;extension&gt;</i>.</p>
    ///  <p>When saving a document to a stream, the generated image file name looks like
    ///<i>Aspose.Words.&lt;document guid&gt;.&lt;image number&gt;.&lt;extension&gt;</i>.</p>
    ///  <para><see cref="P:Aspose.Words.Saving.ImageSavingArgs.ImageFileName" />
    ///  must contain only the file name without the path.
    ///  Aspose.Words determines the path for saving and the value of the <c>src</c> attribute for writing
    ///  to HTML using the document file name, the <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImagesFolder" />
    ///  and
    ///<see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImagesFolderAlias" />
    ///  properties.</para><seealso cref="P:Aspose.Words.Saving.ImageSavingArgs.CurrentShape" />
    ///<seealso cref="P:Aspose.Words.Saving.ImageSavingArgs.IsImageAvailable" />
    ///<seealso cref="P:Aspose.Words.Saving.ImageSavingArgs.ImageStream" />
    ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImagesFolder" />
    ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImagesFolderAlias" />
    ///</remarks>
    property ImageFileName: string read get_ImageFileName write set_ImageFileName;
    ///<summary>
    ///  Specifies whether Aspose.Words should keep the stream open or close it after saving an image.
    ///</summary>
    ///<remarks><para>Default is <c>false</c> and Aspose.Words will close the stream you provided
    ///  in the <see cref="P:Aspose.Words.Saving.ImageSavingArgs.ImageStream" />
    ///  property after writing an image into it.
    ///  Specify <c>true</c> to keep the stream open.</para><seealso cref="P:Aspose.Words.Saving.ImageSavingArgs.ImageStream" />
    ///</remarks>
    property KeepImageStreamOpen: Boolean read get_KeepImageStreamOpen write set_KeepImageStreamOpen;
    ///<summary>
    ///  Allows to specify the stream where the image will be saved to.
    ///</summary>
    ///<remarks><para>This property allows you to save images to streams instead of files during HTML.</para><para>The default value is <c>null</c>. When this property is <c>null</c>, the image
    ///  will be saved to a file specified in the <see cref="P:Aspose.Words.Saving.ImageSavingArgs.ImageFileName" />
    ///  property.</para><para>Using <see cref="T:Aspose.Words.Saving.IImageSavingCallback" />
    ///  you cannot substitute one image with
    ///  another. It is intended only for control over location where to save images.</para><seealso cref="P:Aspose.Words.Saving.ImageSavingArgs.ImageFileName" />
    ///<seealso cref="P:Aspose.Words.Saving.ImageSavingArgs.KeepImageStreamOpen" />
    ///</remarks>
    property ImageStream: DDN.mscorlib.DNStream read get_ImageStream write set_ImageStream;
  end;

  TDNImageSavingArgs = class(TDNGenericImport<DNImageSavingArgsClass, DNImageSavingArgs>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Implement this interface if you want to control how Aspose.Words saves separate pages when
  ///  saving a document to fixed page formats.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.IPageSavingCallback')]
  DNIPageSavingCallback = interface(DDN.mscorlib.DNObject)
  ['{E7399323-579A-3523-8D78-FCCD043DA3DD}']
  { methods } 

    ///<summary>
    ///  Called when Aspose.Words saves a separate page to fixed page formats.
    ///</summary>
    procedure PageSaving(args: DNPageSavingArgs);

  end;

  //-------------namespace: Aspose.Words.Saving----------------
  ///<summary>
  ///  Implement this interface if you want to control how Aspose.Words saves external resources (images, fonts and css) when
  ///  saving a document to fixed page HTML or SVG.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.IResourceSavingCallback')]
  DNIResourceSavingCallback = interface(DDN.mscorlib.DNObject)
  ['{A7400D28-517F-3EC3-8BF2-6783ECC6A626}']
  { methods } 

    ///<summary>
    ///  Called when Aspose.Words saves an external resource to fixed page HTML or SVG formats.
    ///</summary>
    procedure ResourceSaving(args: DNResourceSavingArgs);

  end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNMetafileRenderingOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{033CE463-404A-5E19-A309-1B4C0B550717}']
  { constructors } 

    {class} function init: DNMetafileRenderingOptions;

  end;

  ///<summary>
  ///  Allows to specify additional metafile rendering options.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.MetafileRenderingOptions')]
  DNMetafileRenderingOptions = interface(DDN.mscorlib.DNObject)
  ['{DB3AA226-7A88-324E-A21D-DCF1B31F53A0}']
  { getters & setters } 

    function get_RenderingMode: DNMetafileRenderingMode;
    procedure set_RenderingMode(value: DNMetafileRenderingMode);
    function get_EmfPlusDualRenderingMode: DNEmfPlusDualRenderingMode;
    procedure set_EmfPlusDualRenderingMode(value: DNEmfPlusDualRenderingMode);
    function get_UseEmfEmbeddedToWmf: Boolean;
    procedure set_UseEmfEmbeddedToWmf(value: Boolean);
    function get_EmulateRasterOperations: Boolean;
    procedure set_EmulateRasterOperations(value: Boolean);
    function get_ScaleWmfFontsToMetafileSize: Boolean;
    procedure set_ScaleWmfFontsToMetafileSize(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a value determining how metafile images should be rendered.
    ///</summary>
    ///<remarks><para>The default value depends on the save format. For images it is <see cref="F:Aspose.Words.Saving.MetafileRenderingMode.Bitmap" />
    ///  .
    ///  For other formats it is <see cref="F:Aspose.Words.Saving.MetafileRenderingMode.VectorWithFallback" />
    ///  .</para></remarks>
    property RenderingMode: DNMetafileRenderingMode read get_RenderingMode write set_RenderingMode;
    ///<summary>
    ///  Gets or sets a value determining how EMF+ Dual metafiles should be rendered.
    ///</summary>
    ///<remarks><para>EMF+ Dual metafiles contains both EMF+ and EMF parts. MS Word and GDI+ always renders EMF+ part.
    ///  Aspose.Words currently doesn't fully supports all EMF+ records and in some cases rendering result of
    ///  EMF part looks better then rendering result of EMF+ part.</para><p>This option is used only when metafile is rendered as vector graphics. When metafile is rendered
    ///  to bitmap, EMF+ part is always used.</p>
    ///  <p>The default value is <see cref="F:Aspose.Words.Saving.EmfPlusDualRenderingMode.EmfPlusWithFallback" />
    ///  .</p>
    ///</remarks>
    property EmfPlusDualRenderingMode: DNEmfPlusDualRenderingMode read get_EmfPlusDualRenderingMode write set_EmfPlusDualRenderingMode;
    ///<summary>
    ///  Gets or sets a value determining how WMF metafiles with embedded EMF metafiles should be rendered.
    ///</summary>
    ///<remarks><para>WMF metafiles could contain embedded EMF data. MS Word in most cases uses embedded EMF data.
    ///  GDI+ always uses WMF data.</para><p>When this value is set to <c>true</c>, Aspose.Words uses embedded EMF data when rendering.</p>
    ///  <p>When this value is set to <c>false</c>, Aspose.Words uses WMF data when rendering.</p>
    ///  <p>This option is used only when metafile is rendered as vector graphics. When metafile is rendered
    ///  to bitmap, WMF data is always used.</p>
    ///  <p>The default value is <c>true</c>.</p>
    ///</remarks>
    property UseEmfEmbeddedToWmf: Boolean read get_UseEmfEmbeddedToWmf write set_UseEmfEmbeddedToWmf;
    ///<summary>
    ///  Gets or sets a value determining whether or not the raster operations should be emulated.
    ///</summary>
    ///<remarks><para>Specific raster operations could be used in metafiles. They can not be rendered directly to vector graphics.
    ///  Emulating raster operations requires partial rasterization of the resulting vector graphics which may affect the
    ///  metafile rendering performance.
    ///</para><p>When this value is set to <c>true</c>, Aspose.Words emulates the raster operations. The resulting output maybe
    ///  partially rasterized and performance might be slower.</p>
    ///  <p>When this value is set to <c>false</c>, Aspose.Words does not emulate the raster operations. When Aspose.Words
    ///  encounters a raster operation in a metafile it fallbacks to rendering the metafile into a bitmap by using the
    ///  operating system.</p>
    ///  <p>This option is used only when metafile is rendered as vector graphics.</p>
    ///  <p>The default value is <c>true</c>.</p>
    ///</remarks>
    property EmulateRasterOperations: Boolean read get_EmulateRasterOperations write set_EmulateRasterOperations;
    ///<summary>
    ///  Gets or sets a value determining whether or not to scale fonts in WMF metafile according to metafile size on the page.
    ///</summary>
    ///<remarks><para>When WMF metafiles are displayed in MS Word, fonts may be scaled according to actual metafile size on the page.</para><p>When this value is set to <c>true</c>, Aspose.Words emulates font scaling according to metafile size on the page.</p>
    ///  <p>When this value is set to <c>false</c>, Aspose.Words displays the fonts as metafile is rendered to its default size.</p>
    ///  <p>This option is used only when metafile is rendered as vector graphics.</p>
    ///  <p>The default value is <c>true</c>.</p>
    ///</remarks>
    property ScaleWmfFontsToMetafileSize: Boolean read get_ScaleWmfFontsToMetafileSize write set_ScaleWmfFontsToMetafileSize;
  end;

  TDNMetafileRenderingOptions = class(TDNGenericImport<DNMetafileRenderingOptionsClass, DNMetafileRenderingOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNOutlineOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{542711C2-EC51-5DBE-90ED-B22271A58FE8}']
  { constructors } 

    {class} function init: DNOutlineOptions;

  end;

  ///<summary>
  ///  Allows to specify outline options.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.OutlineOptions')]
  DNOutlineOptions = interface(DDN.mscorlib.DNObject)
  ['{5D959010-3800-3CE5-B229-D546EA36267B}']
  { getters & setters } 

    function get_CreateMissingOutlineLevels: Boolean;
    procedure set_CreateMissingOutlineLevels(value: Boolean);
    function get_HeadingsOutlineLevels: Int32;
    procedure set_HeadingsOutlineLevels(value: Int32);
    function get_ExpandedOutlineLevels: Int32;
    procedure set_ExpandedOutlineLevels(value: Int32);
    function get_DefaultBookmarksOutlineLevel: Int32;
    procedure set_DefaultBookmarksOutlineLevel(value: Int32);
    function get_BookmarksOutlineLevels: DNBookmarksOutlineLevelCollection;
    function get_CreateOutlinesForHeadingsInTables: Boolean;
    procedure set_CreateOutlinesForHeadingsInTables(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary><para>Gets or sets a value determining whether or not to create missing outline levels when the document is
    ///  exported.</para><para>Default value for this property is <b>false</b>
    ///  .</para></summary>
    property CreateMissingOutlineLevels: Boolean read get_CreateMissingOutlineLevels write set_CreateMissingOutlineLevels;
    ///<summary>
    ///  Specifies how many levels of headings (paragraphs formatted with the Heading styles) to include in the
    ///  document outline.
    ///</summary>
    ///<remarks><para>Specify 0 for no headings in the outline; specify 1 for one level of headings in the outline and so on.</para><para>Default is 0. Valid range is 0 to 9.</para></remarks>
    property HeadingsOutlineLevels: Int32 read get_HeadingsOutlineLevels write set_HeadingsOutlineLevels;
    ///<summary>
    ///  Specifies how many levels in the document outline to show expanded when the file is viewed.
    ///</summary>
    ///<remarks><para>Note that this options will not work when saving to XPS.</para><para>Specify 0 and the document outline will be collapsed; specify 1 and the first level items
    ///  in the outline will be expanded and so on.</para><para>Default is 0. Valid range is 0 to 9.</para></remarks>
    property ExpandedOutlineLevels: Int32 read get_ExpandedOutlineLevels write set_ExpandedOutlineLevels;
    ///<summary>
    ///  Specifies the default level in the document outline at which to display Word bookmarks.
    ///</summary>
    ///<remarks><para>Individual bookmarks level could be specified using <see cref="P:Aspose.Words.Saving.OutlineOptions.BookmarksOutlineLevels" />
    ///  property.</para><para>Specify 0 and Word bookmarks will not be displayed in the document outline.
    ///  Specify 1 and Word bookmarks will be displayed in the document outline at level 1; 2 for level 2 and so on.</para><para>Default is 0. Valid range is 0 to 9.</para></remarks>
    property DefaultBookmarksOutlineLevel: Int32 read get_DefaultBookmarksOutlineLevel write set_DefaultBookmarksOutlineLevel;
    ///<summary>
    ///  Allows to specify individual bookmarks outline level.
    ///</summary>
    ///<remarks><para>If bookmark level is not specified in this collection then <see cref="P:Aspose.Words.Saving.OutlineOptions.DefaultBookmarksOutlineLevel" />
    ///  value is used.</para></remarks>
    property BookmarksOutlineLevels: DNBookmarksOutlineLevelCollection read get_BookmarksOutlineLevels;
    ///<summary>
    ///  Specifies whether or not to create outlines for headings (paragraphs formatted with the Heading styles) inside tables.
    ///</summary>
    ///<remarks><para>Default value is <b>false</b>
    ///  .</para></remarks>
    property CreateOutlinesForHeadingsInTables: Boolean read get_CreateOutlinesForHeadingsInTables write set_CreateOutlinesForHeadingsInTables;
  end;

  TDNOutlineOptions = class(TDNGenericImport<DNOutlineOptionsClass, DNOutlineOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNPageRangeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{855D43F2-FEE8-57FA-B89C-07499E320F10}']
  { constructors } 

    ///<summary>
    ///  Creates a new page range object.
    ///</summary>
    ///  <param name="from">
    ///  The starting page zero-based index.
    ///</param>
    ///  <param name="to">
    ///  The ending page zero-based index.
    ///  If it exceeds the index of the last page in the document,
    ///  it is truncated to fit in the document on rendering.
    ///</param>
    ///<remarks><see cref="F:System.Int32.MaxValue" />
    ///  means the last page in the document.
    ///</remarks>
    {class} function init(from: Int32; &to: Int32): DNPageRange;

  end;

  ///<summary>
  ///  Represents a continuous range of pages.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.PageRange')]
  DNPageRange = interface(DDN.mscorlib.DNObject)
  ['{E8CBA7A9-E809-34CF-B185-06B09FC6213D}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPageRange = class(TDNGenericImport<DNPageRangeClass, DNPageRange>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNPageSavingArgsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B5DA3B76-1E51-567B-B396-B594342A1A15}']
  { constructors } 

    {class} function init: DNPageSavingArgs;

  end;

  ///<summary>
  ///  Provides data for the <see cref="M:Aspose.Words.Saving.IPageSavingCallback.PageSaving(Aspose.Words.Saving.PageSavingArgs)" />
  ///  event.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.PageSavingArgs')]
  DNPageSavingArgs = interface(DDN.mscorlib.DNObject)
  ['{F7749EBE-C935-37AE-89B7-D49B8C67AD9E}']
  { getters & setters } 

    function get_PageStream: DDN.mscorlib.DNStream;
    procedure set_PageStream(value: DDN.mscorlib.DNStream);
    function get_KeepPageStreamOpen: Boolean;
    procedure set_KeepPageStreamOpen(value: Boolean);
    function get_PageFileName: string;
    procedure set_PageFileName(value: string);
    function get_PageIndex: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Allows to specify the stream where the document page will be saved to.
    ///</summary>
    ///<remarks><para>This property allows you to save document pages to streams instead of files.</para><para>The default value is <c>null</c>. When this property is <c>null</c>, the document page
    ///  will be saved to a file specified in the <see cref="P:Aspose.Words.Saving.PageSavingArgs.PageFileName" />
    ///  property.</para><para>If both PageStream and PageFileName are set, then PageStream will be used.</para><seealso cref="P:Aspose.Words.Saving.PageSavingArgs.PageFileName" />
    ///<seealso cref="P:Aspose.Words.Saving.PageSavingArgs.KeepPageStreamOpen" />
    ///</remarks>
    property PageStream: DDN.mscorlib.DNStream read get_PageStream write set_PageStream;
    ///<summary>
    ///  Specifies whether Aspose.Words should keep the stream open or close it after saving a document page.
    ///</summary>
    ///<remarks><para>Default is <c>false</c> and Aspose.Words will close the stream you provided
    ///  in the <see cref="P:Aspose.Words.Saving.PageSavingArgs.PageStream" />
    ///  property after writing a document page into it.
    ///  Specify <c>true</c> to keep the stream open.</para><seealso cref="P:Aspose.Words.Saving.PageSavingArgs.PageStream" />
    ///</remarks>
    property KeepPageStreamOpen: Boolean read get_KeepPageStreamOpen write set_KeepPageStreamOpen;
    ///<summary>
    ///  Gets or sets the file name where the document page will be saved to.
    ///</summary>
    ///<remarks>
    ///  If not specified then page file name and path will be generated automatically using original file name.
    ///</remarks>
    property PageFileName: string read get_PageFileName write set_PageFileName;
    ///<summary>
    ///  Current page index.
    ///</summary>
    property PageIndex: Int32 read get_PageIndex;
  end;

  TDNPageSavingArgs = class(TDNGenericImport<DNPageSavingArgsClass, DNPageSavingArgs>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNPageSetClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A74FF888-D921-5D56-898C-F399203A4F9C}']
  { static getter & setter } 

    {class} function get_All: DNPageSet;
    {class} function get_Even: DNPageSet;
    {class} function get_Odd: DNPageSet;

  { constructors } 

    ///<summary>
    ///  Creates an one-page set based on exact page index.
    ///</summary>
    ///  <param name="page">Zero-based index of the page.</param>
    ///<remarks>
    ///  If a page is encountered that is not in the document, an exception will be thrown during rendering.
    ///<see cref="F:System.Int32.MaxValue" />
    ///  means the last page in the document.
    ///</remarks>
    {class} function init(page: Int32): DNPageSet; overload;
    ///<summary>
    ///  Creates a page set based on exact page indices.
    ///</summary>
    ///  <param name="pages">Zero-based indices of pages.</param>
    ///<remarks>
    ///  If a page is encountered that is not in the document, an exception will be thrown during rendering.
    ///<see cref="F:System.Int32.MaxValue" />
    ///  means the last page in the document.
    ///</remarks>
    {class} function init(pages: TArray<Int32>): DNPageSet; overload;
    ///<summary>
    ///  Creates a page set based on ranges.
    ///</summary>
    ///  <param name="ranges">Array of page ranges.</param>
    ///<remarks>
    ///  If a range is encountered that starts after the last page in the document,
    ///  an exception will be thrown during rendering.
    ///  All ranges that end after the last page are truncated to fit in the document.
    ///</remarks>
    {class} function init(ranges: TArray<DNPageRange>): DNPageSet; overload;

  { static propertys } 

    ///<summary>
    ///  Gets a set with all the pages of the document in their original order.
    ///</summary>
    {class} property All: DNPageSet read get_All;
    ///<summary>
    ///  Gets a set with all the even pages of the document in their original order.
    ///</summary>
    ///<remarks>
    ///  Even pages have odd indices since page indices are zero-based.
    ///</remarks>
    {class} property Even: DNPageSet read get_Even;
    ///<summary>
    ///  Gets a set with all the odd pages of the document in their original order.
    ///</summary>
    ///<remarks>
    ///  Odd pages have even indices since page indices are zero-based.
    ///</remarks>
    {class} property Odd: DNPageSet read get_Odd;
  end;

  ///<summary>
  ///  Describes a random set of pages.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.PageSet')]
  DNPageSet = interface(DDN.mscorlib.DNObject)
  ['{D9B4133D-DE33-313C-BF6D-AE77DE88CD62}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPageSet = class(TDNGenericImport<DNPageSetClass, DNPageSet>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNPdfDigitalSignatureDetailsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7603AF66-E63D-5BEF-B752-F5ECBAE3E4CC}']
  { constructors } 

    ///<summary>
    ///  Initializes an instance of this class.
    ///</summary>
    {class} function init: DNPdfDigitalSignatureDetails; overload;
    ///<summary>
    ///  Initializes an instance of this class.
    ///</summary>
    ///  <param name="certificateHolder">A certificate holder which contains the certificate itself.</param>
    ///  <param name="reason">The reason for signing.</param>
    ///  <param name="location">The location of signing.</param>
    ///  <param name="signatureDate">The date and time of signing.</param>
    {class} function init(certificateHolder: DNCertificateHolder; reason: string; location: string; signatureDate: DDN.mscorlib.DNDateTime): DNPdfDigitalSignatureDetails; overload;

  end;

  ///<summary>
  ///  Contains details for signing a PDF document with a digital signature.
  ///</summary>
  ///<remarks><para>At the moment digitally signing PDF documents is only available on .NET 2.0 or higher.</para><para>To digitally sign a PDF document when it is created by Aspose.Words, set the <see cref="P:Aspose.Words.Saving.PdfSaveOptions.DigitalSignatureDetails" />
  ///  property to a valid <see cref="T:Aspose.Words.Saving.PdfDigitalSignatureDetails" />
  ///  object and then save the document in the PDF format passing
  ///  the <see cref="T:Aspose.Words.Saving.PdfSaveOptions" />
  ///  as a parameter into the <see cref="M:Aspose.Words.Document.Save(System.String,Aspose.Words.Saving.SaveOptions)" />
  ///  method.</para><para>Aspose.Words creates a PKCS#7 signature over the whole PDF document and uses the "Adobe.PPKMS" filter and
  ///  "adbe.pkcs7.sha1" subfilter when creating a digital signature.</para><seealso cref="P:Aspose.Words.Saving.PdfSaveOptions.DigitalSignatureDetails" />
  ///</remarks>
  [DNTypeName('Aspose.Words.Saving.PdfDigitalSignatureDetails')]
  DNPdfDigitalSignatureDetails = interface(DDN.mscorlib.DNObject)
  ['{AC310561-CF6F-3C83-ADB7-69077F2EAE11}']
  { getters & setters } 

    function get_CertificateHolder: DNCertificateHolder;
    procedure set_CertificateHolder(value: DNCertificateHolder);
    function get_Reason: string;
    procedure set_Reason(value: string);
    function get_Location: string;
    procedure set_Location(value: string);
    function get_SignatureDate: DDN.mscorlib.DNDateTime;
    procedure set_SignatureDate(value: DDN.mscorlib.DNDateTime);
    function get_HashAlgorithm: DNPdfDigitalSignatureHashAlgorithm;
    procedure set_HashAlgorithm(value: DNPdfDigitalSignatureHashAlgorithm);
    function get_TimestampSettings: DNPdfDigitalSignatureTimestampSettings;
    procedure set_TimestampSettings(value: DNPdfDigitalSignatureTimestampSettings);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the certificate holder object that contains the certificate was used to sign the document.
    ///</summary>
    property CertificateHolder: DNCertificateHolder read get_CertificateHolder write set_CertificateHolder;
    ///<summary>
    ///  Gets or sets the reason for the signing.
    ///</summary>
    ///<remarks>
    ///  The default value is null.
    ///</remarks>
    property Reason: string read get_Reason write set_Reason;
    ///<summary>
    ///  Gets or sets the location of the signing.
    ///</summary>
    ///<remarks>
    ///  The default value is null.
    ///</remarks>
    property Location: string read get_Location write set_Location;
    ///<summary>
    ///  Gets or sets the date of the signing.
    ///</summary>
    ///<remarks><para>The default value is the current time.</para><para>This value will appear in the digital signature as an unverified computer time.</para></remarks>
    property SignatureDate: DDN.mscorlib.DNDateTime read get_SignatureDate write set_SignatureDate;
    ///<summary>
    ///  Gets or sets the hash algorithm.
    ///</summary>
    ///<remarks>The default value is the SHA-512 algorithm.</remarks>
    property HashAlgorithm: DNPdfDigitalSignatureHashAlgorithm read get_HashAlgorithm write set_HashAlgorithm;
    ///<summary>
    ///  Gets or sets the digital signature timestamp settings.
    ///</summary>
    ///<remarks><para>The default value is null and the digital signature will not be time-stamped.
    ///  When this property is set to a valid <see cref="T:Aspose.Words.Saving.PdfDigitalSignatureTimestampSettings" />
    ///  object,
    ///  then the digital signature in the PDF document will be time-stamped.</para></remarks>
    property TimestampSettings: DNPdfDigitalSignatureTimestampSettings read get_TimestampSettings write set_TimestampSettings;
  end;

  TDNPdfDigitalSignatureDetails = class(TDNGenericImport<DNPdfDigitalSignatureDetailsClass, DNPdfDigitalSignatureDetails>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNPdfDigitalSignatureTimestampSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4F2BDC11-C66E-587D-9933-0A144228E589}']
  { constructors } 

    ///<summary>
    ///  Initializes an instance of this class.
    ///</summary>
    {class} function init: DNPdfDigitalSignatureTimestampSettings; overload;
    ///<summary>
    ///  Initializes an instance of this class.
    ///</summary>
    ///  <param name="serverUrl">Timestamp server URL.</param>
    ///  <param name="userName">Timestamp server user name.</param>
    ///  <param name="password">Timestamp server password.</param>
    {class} function init(serverUrl: string; userName: string; password: string): DNPdfDigitalSignatureTimestampSettings; overload;
    ///<summary>
    ///  Initializes an instance of this class.
    ///</summary>
    ///  <param name="serverUrl">Timestamp server URL.</param>
    ///  <param name="userName">Timestamp server user name.</param>
    ///  <param name="password">Timestamp server password.</param>
    ///  <param name="timeout">Time-out value for accessing timestamp server.</param>
    {class} function init(serverUrl: string; userName: string; password: string; timeout: DDN.mscorlib.DNTimeSpan): DNPdfDigitalSignatureTimestampSettings; overload;

  end;

  ///<summary>
  ///  Contains settings of the digital signature timestamp.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.PdfDigitalSignatureTimestampSettings')]
  DNPdfDigitalSignatureTimestampSettings = interface(DDN.mscorlib.DNObject)
  ['{8820CC95-CA11-3497-A456-D13AB1A4A1C3}']
  { getters & setters } 

    function get_ServerUrl: string;
    procedure set_ServerUrl(value: string);
    function get_UserName: string;
    procedure set_UserName(value: string);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_Timeout: DDN.mscorlib.DNTimeSpan;
    procedure set_Timeout(value: DDN.mscorlib.DNTimeSpan);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Timestamp server URL.
    ///</summary>
    ///<remarks>
    ///  The default value is null.
    ///  If null, then the digital signature will not be time-stamped.
    ///</remarks>
    property ServerUrl: string read get_ServerUrl write set_ServerUrl;
    ///<summary>
    ///  Timestamp server user name.
    ///</summary>
    ///<remarks>
    ///  The default value is null.
    ///</remarks>
    property UserName: string read get_UserName write set_UserName;
    ///<summary>
    ///  Timestamp server password.
    ///</summary>
    ///<remarks>
    ///  The default value is null.
    ///</remarks>
    property Password: string read get_Password write set_Password;
    ///<summary>
    ///  Time-out value for accessing timestamp server.
    ///</summary>
    ///<remarks>
    ///  The default value is 100 seconds.
    ///</remarks>
    property Timeout: DDN.mscorlib.DNTimeSpan read get_Timeout write set_Timeout;
  end;

  TDNPdfDigitalSignatureTimestampSettings = class(TDNGenericImport<DNPdfDigitalSignatureTimestampSettingsClass, DNPdfDigitalSignatureTimestampSettings>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNPdfEncryptionDetailsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{886D4E08-691F-58BC-9D7A-F243C874B62E}']
  { constructors } 

    ///<summary>
    ///  Initializes an instance of this class.
    ///</summary>
    {class} function init(userPassword: string; ownerPassword: string; encryptionAlgorithm: DNPdfEncryptionAlgorithm): DNPdfEncryptionDetails;

  end;

  ///<summary>
  ///  Contains details for encrypting and access permissions for a PDF document.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.PdfEncryptionDetails')]
  DNPdfEncryptionDetails = interface(DDN.mscorlib.DNObject)
  ['{D706733D-208B-3460-AB84-B08B0EA1E1E2}']
  { getters & setters } 

    function get_UserPassword: string;
    procedure set_UserPassword(value: string);
    function get_OwnerPassword: string;
    procedure set_OwnerPassword(value: string);
    function get_Permissions: DNPdfPermissions;
    procedure set_Permissions(value: DNPdfPermissions);
    function get_EncryptionAlgorithm: DNPdfEncryptionAlgorithm;
    procedure set_EncryptionAlgorithm(value: DNPdfEncryptionAlgorithm);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the user password required for opening the encrypted PDF document.
    ///</summary>
    ///<remarks><para>The user password will be required to open an encrypted PDF document for viewing. The permissions specified in
    ///<see cref="P:Aspose.Words.Saving.PdfEncryptionDetails.Permissions" />
    ///  will be enforced by the reader software.</para><para>The user password can be null or empty string, in this case no password will be required from the user when
    ///  opening the PDF document. The user password cannot be the same as the owner password.</para></remarks>
    property UserPassword: string read get_UserPassword write set_UserPassword;
    ///<summary>
    ///  Specifies the owner password for the encrypted PDF document.
    ///</summary>
    ///<remarks><para>The owner password allows the user to open an encrypted PDF document without any access restrictions
    ///  specified in <see cref="P:Aspose.Words.Saving.PdfEncryptionDetails.Permissions" />
    ///  .</para><para>The owner password cannot be the same as the user password.</para></remarks>
    property OwnerPassword: string read get_OwnerPassword write set_OwnerPassword;
    ///<summary>
    ///  Specifies the operations that are allowed to a user on an encrypted PDF document.
    ///  The default value is <see cref="F:Aspose.Words.Saving.PdfPermissions.DisallowAll" />
    ///  .
    ///</summary>
    property Permissions: DNPdfPermissions read get_Permissions write set_Permissions;
    ///<summary>
    ///  Specifies the encryption algorithm to use.
    ///</summary>
    property EncryptionAlgorithm: DNPdfEncryptionAlgorithm read get_EncryptionAlgorithm write set_EncryptionAlgorithm;
  end;

  TDNPdfEncryptionDetails = class(TDNGenericImport<DNPdfEncryptionDetailsClass, DNPdfEncryptionDetails>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNResourceSavingArgsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C57BF7C0-2E18-5E70-9C30-4F5B8070984E}']
  end;

  ///<summary>
  ///  Provides data for the <see cref="M:Aspose.Words.Saving.IResourceSavingCallback.ResourceSaving(Aspose.Words.Saving.ResourceSavingArgs)" />
  ///  event.
  ///</summary>
  ///<remarks><para>By default, when Aspose.Words saves a document to fixed page HTML or SVG, it saves each resource into
  ///  a separate file. Aspose.Words uses the document file name and a unique number to generate unique file name
  ///  for each resource found in the document.</para><para><see cref="T:Aspose.Words.Saving.ResourceSavingArgs" />
  ///  allows to redefine how resource file names are generated or to
  ///  completely circumvent saving of resources into files by providing your own stream objects.</para><para>To apply your own logic for generating resource file names use the
  ///<see cref="P:Aspose.Words.Saving.ResourceSavingArgs.ResourceFileName" />
  ///  property.</para><para>To save resources into streams instead of files, use the <see cref="P:Aspose.Words.Saving.ResourceSavingArgs.ResourceStream" />
  ///  property.</para></remarks>
  [DNTypeName('Aspose.Words.Saving.ResourceSavingArgs')]
  DNResourceSavingArgs = interface(DDN.mscorlib.DNObject)
  ['{79533972-54D5-3012-A0AE-86FA8C4B0CFF}']
  { getters & setters } 

    function get_Document: DNDocument;
    function get_ResourceFileName: string;
    procedure set_ResourceFileName(value: string);
    function get_ResourceFileUri: string;
    procedure set_ResourceFileUri(value: string);
    function get_KeepResourceStreamOpen: Boolean;
    procedure set_KeepResourceStreamOpen(value: Boolean);
    function get_ResourceStream: DDN.mscorlib.DNStream;
    procedure set_ResourceStream(value: DDN.mscorlib.DNStream);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the document object that is currently being saved.
    ///</summary>
    property Document: DNDocument read get_Document;
    ///<summary>
    ///  Gets or sets the file name (without path) where the resource will be saved to.
    ///</summary>
    ///<remarks><para>This property allows you to redefine how the resource file names are generated
    ///  during export to fixed page HTML or SVG.</para><para>When the event is fired, this property contains the file name that was generated
    ///  by Aspose.Words. You can change the value of this property to save the resource into a
    ///  different file. Note that file names must be unique.</para><p>Aspose.Words automatically generates a unique file name for every resource when
    ///  exporting to fixed page HTML or SVG format. How the resource file name is generated
    ///  depends on whether you save the document to a file or to a stream.</p>
    ///  <p>When saving a document to a file, the generated resource file name looks like
    ///<i>&lt;document base file name&gt;.&lt;image number&gt;.&lt;extension&gt;</i>.</p>
    ///  <p>When saving a document to a stream, the generated resource file name looks like
    ///<i>Aspose.Words.&lt;document guid&gt;.&lt;image number&gt;.&lt;extension&gt;</i>.</p>
    ///  <para><see cref="P:Aspose.Words.Saving.ResourceSavingArgs.ResourceFileName" />
    ///  must contain only the file name without the path.
    ///  Aspose.Words determines the path for saving and the value of the <c>src</c> attribute for writing
    ///  to fixed page HTML or SVG using the document file name, the <see cref="P:Aspose.Words.Saving.HtmlFixedSaveOptions.ResourcesFolder" />
    ///  or <see cref="P:Aspose.Words.Saving.SvgSaveOptions.ResourcesFolder" />
    ///  and <see cref="P:Aspose.Words.Saving.HtmlFixedSaveOptions.ResourcesFolderAlias" />
    ///  or <see cref="P:Aspose.Words.Saving.SvgSaveOptions.ResourcesFolderAlias" />
    ///  properties.</para><seealso cref="P:Aspose.Words.Saving.ResourceSavingArgs.ResourceStream" />
    ///<see cref="P:Aspose.Words.Saving.HtmlFixedSaveOptions.ResourcesFolder" />
    ///<see cref="P:Aspose.Words.Saving.SvgSaveOptions.ResourcesFolder" />
    ///<see cref="P:Aspose.Words.Saving.HtmlFixedSaveOptions.ResourcesFolderAlias" />
    ///<see cref="P:Aspose.Words.Saving.SvgSaveOptions.ResourcesFolderAlias" />
    ///</remarks>
    property ResourceFileName: string read get_ResourceFileName write set_ResourceFileName;
    ///<summary>
    ///  Gets or sets the uniform resource identifier (URI) used to reference the resource file from the document.
    ///</summary>
    ///<remarks><para>This property allows you to change URIs of resource files exported to fixed page HTML or SVG documents.</para><para>Aspose.Words automatically generates an URI for every resource file during export to fixed page HTML
    ///  or SVG format. The generated URIs reference resource files saved by Aspose.Words. However, the URIs can be
    ///  incorrect if resource files are to be moved to other location or if resource files are saved to streams.
    ///  This property allows to correct URIs in these cases.</para><para>When the event is fired, this property contains the URI that was generated
    ///  by Aspose.Words. You can change the value of this property to provide a custom URI for the resource file.</para><see cref="P:Aspose.Words.Saving.HtmlFixedSaveOptions.ResourcesFolder" />
    ///<see cref="P:Aspose.Words.Saving.SvgSaveOptions.ResourcesFolder" />
    ///<see cref="P:Aspose.Words.Saving.HtmlFixedSaveOptions.ResourcesFolderAlias" />
    ///<see cref="P:Aspose.Words.Saving.SvgSaveOptions.ResourcesFolderAlias" />
    ///</remarks>
    property ResourceFileUri: string read get_ResourceFileUri write set_ResourceFileUri;
    ///<summary>
    ///  Specifies whether Aspose.Words should keep the stream open or close it after saving a resource.
    ///</summary>
    ///<remarks><para>Default is <c>false</c> and Aspose.Words will close the stream you provided
    ///  in the <see cref="P:Aspose.Words.Saving.ResourceSavingArgs.ResourceStream" />
    ///  property after writing a resource into it.
    ///  Specify <c>true</c> to keep the stream open.</para><seealso cref="P:Aspose.Words.Saving.ResourceSavingArgs.ResourceStream" />
    ///</remarks>
    property KeepResourceStreamOpen: Boolean read get_KeepResourceStreamOpen write set_KeepResourceStreamOpen;
    ///<summary>
    ///  Allows to specify the stream where the resource will be saved to.
    ///</summary>
    ///<remarks><para>This property allows you to save resources to streams instead of files.</para><para>The default value is <c>null</c>. When this property is <c>null</c>, the resource
    ///  will be saved to a file specified in the <see cref="P:Aspose.Words.Saving.ResourceSavingArgs.ResourceFileName" />
    ///  property.</para><para>Using <see cref="T:Aspose.Words.Saving.IResourceSavingCallback" />
    ///  you cannot substitute one resource with
    ///  another. It is intended only for control over location where to save resources.</para><seealso cref="P:Aspose.Words.Saving.ResourceSavingArgs.ResourceFileName" />
    ///<seealso cref="P:Aspose.Words.Saving.ResourceSavingArgs.KeepResourceStreamOpen" />
    ///</remarks>
    property ResourceStream: DDN.mscorlib.DNStream read get_ResourceStream write set_ResourceStream;
  end;

  TDNResourceSavingArgs = class(TDNGenericImport<DNResourceSavingArgsClass, DNResourceSavingArgs>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNSaveOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9EDB797C-8D17-5FD1-9FE5-47888ABFEAF1}']
  { static methods } 

    ///<overloads>Creates a save options object of a correct class.</overloads><summary>
    ///  Creates a save options object of a class suitable for the specified save format.
    ///</summary>
    ///  <param name="saveFormat">The save format for which to create a save options object.</param>
    ///<returns>An object of a class that derives from <see cref="T:Aspose.Words.Saving.SaveOptions" />
    ///  .</returns>
    {class} function CreateSaveOptions(saveFormat: DNSaveFormat): DNSaveOptions; overload;
    ///<summary>
    ///  Creates a save options object of a class suitable for the file extension specified in the given file name.
    ///</summary>
    ///  <param name="fileName">The extension of this file name determines the class of the save options object to create.</param>
    ///<returns>An object of a class that derives from <see cref="T:Aspose.Words.Saving.SaveOptions" />
    ///  .</returns>
    {class} function CreateSaveOptions(fileName: string): DNSaveOptions; overload;

  end;

  ///<summary>
  ///  This is an abstract base class for classes that allow the user to specify additional
  ///  options when saving a document into a particular format.
  ///</summary>
  ///<remarks>
  ///  An instance of the SaveOptions class or any derived class is passed to the stream <see cref="M:Aspose.Words.Document.Save(System.IO.Stream,Aspose.Words.Saving.SaveOptions)" />
  ///  or string <see cref="M:Aspose.Words.Document.Save(System.String,Aspose.Words.Saving.SaveOptions)" />
  ///  overloads for the user to define custom options when saving a document.
  ///</remarks>
  [DNTypeName('Aspose.Words.Saving.SaveOptions')]
  DNSaveOptions = interface(DDN.mscorlib.DNObject)
  ['{A75BF89C-3DC7-33BD-9139-2D359A348915}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the format in which the document will be saved if this save options object is used.
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    ///<summary>
    ///  Specifies the folder for temporary files used when saving to a DOC or DOCX file.
    ///  By default this property is <c>null</c> and no temporary files are used.
    ///</summary>
    ///<remarks><para>When Aspose.Words saves a document, it needs to create temporary internal structures. By default,
    ///  these internal structures are created in memory and the memory usage spikes for a short period while
    ///  the document is being saved. When saving is complete, the memory is freed and reclaimed by the garbage collector.</para><para>If you are saving a very large document (thousands of pages) and/or processing many documents at the same time,
    ///  then the memory spike during saving can be significant enough to cause the system to throw <see cref="T:System.OutOfMemoryException" />
    ///  .
    ///  Specifying a temporary folder using <see cref="P:Aspose.Words.Saving.SaveOptions.TempFolder" />
    ///  will cause Aspose.Words to keep the internal structures in
    ///  temporary files instead of memory. It reduces the memory usage during saving, but will decrease the save performance.</para><para>The folder must exist and be writable, otherwise an exception will be thrown.</para><para>Aspose.Words automatically deletes all temporary files when saving is complete.</para></remarks>
    property TempFolder: string read get_TempFolder write set_TempFolder;
    ///<summary>
    ///  When <c>true</c>, pretty formats output where applicable.
    ///  Default value is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks><p>Set to <b>true</b>
    ///  to make HTML, MHTML, EPUB, WordML, RTF, DOCX and ODT output human readable.
    ///  Useful for testing or debugging.</p>
    ///</remarks>
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    ///<summary>
    ///  Gets or sets a value determining whether or not to use anti-aliasing for rendering.
    ///</summary>
    ///<remarks><para>
    ///  The default value is <c>false</c>. When this value is set to <c>true</c> anti-aliasing is
    ///  used for rendering.
    ///</para><para>This property is used when the document is exported to the following formats:
    ///<see cref="F:Aspose.Words.SaveFormat.Tiff" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Png" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Bmp" />
    ///  ,
    ///<see cref="F:Aspose.Words.SaveFormat.Jpeg" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Emf" />
    ///  . When the document is exported to the
    ///<see cref="F:Aspose.Words.SaveFormat.Html" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Mhtml" />
    ///  and <see cref="F:Aspose.Words.SaveFormat.Epub" />
    ///  formats this option is used for raster images.</para></remarks>
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    ///<summary>
    ///  Gets or sets a value determining whether or not to use high quality (i.e. slow) rendering algorithms.
    ///</summary>
    ///<remarks>
    ///  The default value is <c>false</c>.
    ///  <para>This property is used when the document is exported to image formats:
    ///<see cref="F:Aspose.Words.SaveFormat.Tiff" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Png" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Bmp" />
    ///  ,
    ///<see cref="F:Aspose.Words.SaveFormat.Jpeg" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Emf" />
    ///  .</para></remarks>
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    ///<summary>
    ///  Gets or sets value determining whether content of <see cref="T:Aspose.Words.Markup.StructuredDocumentTag" />
    ///  is updated before saving.
    ///</summary>
    ///<remarks>
    ///  The default value is <c>true</c>.
    ///</remarks>
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    ///<summary>
    ///  Gets or sets a value determining how DrawingML shapes are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.DmlRenderingMode.Fallback" />
    ///  .
    ///  <para>This property is used when the document is exported to fixed page formats.</para></remarks>
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    ///<summary>
    ///  Gets or sets a value determining how DrawingML effects are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.DmlEffectsRenderingMode.Simplified" />
    ///  .
    ///  <para>This property is used when the document is exported to fixed page formats.</para></remarks>
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    ///<summary>
    ///  Gets or sets path to default template (including filename).
    ///  Default value for this property is <b>empty string</b>
    ///  (<see cref="F:System.String.Empty" />
    ///  ).
    ///</summary>
    ///<remarks>If specified, this path is used to load template when <see cref="P:Aspose.Words.Document.AutomaticallyUpdateStyles" />
    ///  is true,
    ///  but <see cref="P:Aspose.Words.Document.AttachedTemplate" />
    ///  is empty.</remarks>
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    ///<summary>
    ///  Gets or sets a value determining if fields of certain types should be updated before saving the document to a fixed page format.
    ///  Default value for this property is <b>true</b>
    ///  .
    ///</summary>
    ///<remarks>
    ///  Allows to specify whether to mimic or not MS Word behavior.
    ///</remarks>
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    ///<summary>
    ///  Gets or sets a value determining whether the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.LastSavedTime" />
    ///  property is updated before saving.
    ///</summary>
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    ///<summary>
    ///  Gets or sets a value determining whether the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.LastPrinted" />
    ///  property is updated before saving.
    ///</summary>
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    ///<summary>
    ///  Gets or sets a value determining whether the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.CreatedTime" />
    ///  property is updated before saving.
    ///  Default value is false;
    ///</summary>
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    ///<summary>
    ///  Gets or sets value determining if memory optimization should be performed before saving the document.
    ///  Default value for this property is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks>
    ///  Setting this option to true can significantly decrease memory consumption while saving large documents at the cost of slower saving time.
    ///</remarks>
    ///<dev>
    ///  So far only attribute interning procedure is bound to this property but I think we can make more memory optimization in the future.
    ///  That's why I decided to use more general property name.
    ///</dev>
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    ///<summary>
    ///  Gets or sets a value determining how 3D effects are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.Dml3DEffectsRenderingMode.Basic" />
    ///  .
    ///</remarks>
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    ///<summary>
    ///  Gets or sets a boolean value indicating whether to allow embedding fonts with PostScript outlines
    ///  when embedding TrueType fonts in a document upon it is saved.
    ///  The default value is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks><para>Note, Word does not embed PostScript fonts, but can open documents with embedded fonts of this type.</para><para>This option only works when <see cref="P:Aspose.Words.Fonts.FontInfoCollection.EmbedTrueTypeFonts" />
    ///  of the
    ///<see cref="P:Aspose.Words.DocumentBase.FontInfos" />
    ///  property is set to <c>true</c>.</para></remarks>
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    ///<summary>
    ///  Gets or sets custom local time zone used for date/time fields.
    ///</summary>
    ///<remarks><para>This option is available in either .Net framework starting from 3.5 version or .Net Standard.</para><para>By default, Aspose.Words uses system local time zone when writes date/time fields, this option allows to set custom value.</para></remarks>
    ///<dev>
    ///  So far this option used in SDT content updating only. Please see WORDSNET-20863 for details.
    ///  We can use it for other document date/time values later.
    ///</dev>
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNSaveOptions = class(TDNGenericImport<DNSaveOptionsClass, DNSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNDocSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{9209A1F3-6BAE-5A0E-B1E7-E25C51217840}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class that can be used to save a document in the <see cref="F:Aspose.Words.SaveFormat.Doc" />
    ///  format.
    ///</summary>
    {class} function init: DNDocSaveOptions; overload;
    ///<summary>
    ///  Initializes a new instance of this class that can be used to save a document in the <see cref="F:Aspose.Words.SaveFormat.Doc" />
    ///  or
    ///<see cref="F:Aspose.Words.SaveFormat.Dot" />
    ///  format.
    ///</summary>
    ///  <param name="saveFormat">Can be <see cref="F:Aspose.Words.SaveFormat.Doc" />
    ///  or <see cref="F:Aspose.Words.SaveFormat.Dot" />
    ///  .</param>
    {class} function init(saveFormat: DNSaveFormat): DNDocSaveOptions; overload;

  end;

  ///<summary>
  ///  Can be used to specify additional options when saving a document into the <see cref="F:Aspose.Words.SaveFormat.Doc" />
  ///  or
  ///<see cref="F:Aspose.Words.SaveFormat.Dot" />
  ///  format.
  ///</summary>
  ///<remarks><para>At the moment provides only the <see cref="P:Aspose.Words.Saving.DocSaveOptions.SaveFormat" />
  ///  property, but in the future will have
  ///  other options added, such as an encryption password or digital signature settings.</para></remarks>
  [DNTypeName('Aspose.Words.Saving.DocSaveOptions')]
  DNDocSaveOptions = interface(DNSaveOptions)
  ['{AAE8429B-1E49-376A-8FBB-4E2673E3F0C7}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_SaveRoutingSlip: Boolean;
    procedure set_SaveRoutingSlip(value: Boolean);
    function get_AlwaysCompressMetafiles: Boolean;
    procedure set_AlwaysCompressMetafiles(value: Boolean);
    function get_SavePictureBullet: Boolean;
    procedure set_SavePictureBullet(value: Boolean);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the format in which the document will be saved if this save options object is used.
    ///  Can be <see cref="F:Aspose.Words.SaveFormat.Doc" />
    ///  or <see cref="F:Aspose.Words.SaveFormat.Dot" />
    ///  .
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    ///<summary>
    ///  Gets/sets a password to encrypt document using RC4 encryption method.
    ///</summary>
    ///<remarks><para>In order to save document without encryption this property should be null or empty string.</para></remarks>
    property Password: string read get_Password write set_Password;
    ///<summary>
    ///  When <c>false</c>, RoutingSlip data is not saved to output document.
    ///  Default value is <b>true</b>
    ///  .
    ///</summary>
    property SaveRoutingSlip: Boolean read get_SaveRoutingSlip write set_SaveRoutingSlip;
    ///<summary>
    ///  When <c>false</c>, small metafiles are not compressed for performance reason.
    ///  Default value is <b>true</b>
    ///  , all metafiles are compressed regardless of its size.
    ///</summary>
    property AlwaysCompressMetafiles: Boolean read get_AlwaysCompressMetafiles write set_AlwaysCompressMetafiles;
    ///<summary>
    ///  When <c>false</c>, PictureBullet data is not saved to output document.
    ///  Default value is <b>true</b>
    ///  .
    ///</summary>
    ///<remarks><para>This option is provided for Word 97, which cannot work correctly with PictureBullet data.
    ///  To remove PictureBullet data, set the option to "false".</para></remarks>
    property SavePictureBullet: Boolean read get_SavePictureBullet write set_SavePictureBullet;
    ///<summary>
    ///  Specifies the folder for temporary files used when saving to a DOC or DOCX file.
    ///  By default this property is <c>null</c> and no temporary files are used.
    ///</summary>
    ///<remarks><para>When Aspose.Words saves a document, it needs to create temporary internal structures. By default,
    ///  these internal structures are created in memory and the memory usage spikes for a short period while
    ///  the document is being saved. When saving is complete, the memory is freed and reclaimed by the garbage collector.</para><para>If you are saving a very large document (thousands of pages) and/or processing many documents at the same time,
    ///  then the memory spike during saving can be significant enough to cause the system to throw <see cref="T:System.OutOfMemoryException" />
    ///  .
    ///  Specifying a temporary folder using <see cref="P:Aspose.Words.Saving.SaveOptions.TempFolder" />
    ///  will cause Aspose.Words to keep the internal structures in
    ///  temporary files instead of memory. It reduces the memory usage during saving, but will decrease the save performance.</para><para>The folder must exist and be writable, otherwise an exception will be thrown.</para><para>Aspose.Words automatically deletes all temporary files when saving is complete.</para></remarks>
    property TempFolder: string read get_TempFolder write set_TempFolder;
    ///<summary>
    ///  When <c>true</c>, pretty formats output where applicable.
    ///  Default value is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks><p>Set to <b>true</b>
    ///  to make HTML, MHTML, EPUB, WordML, RTF, DOCX and ODT output human readable.
    ///  Useful for testing or debugging.</p>
    ///</remarks>
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    ///<summary>
    ///  Gets or sets a value determining whether or not to use anti-aliasing for rendering.
    ///</summary>
    ///<remarks><para>
    ///  The default value is <c>false</c>. When this value is set to <c>true</c> anti-aliasing is
    ///  used for rendering.
    ///</para><para>This property is used when the document is exported to the following formats:
    ///<see cref="F:Aspose.Words.SaveFormat.Tiff" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Png" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Bmp" />
    ///  ,
    ///<see cref="F:Aspose.Words.SaveFormat.Jpeg" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Emf" />
    ///  . When the document is exported to the
    ///<see cref="F:Aspose.Words.SaveFormat.Html" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Mhtml" />
    ///  and <see cref="F:Aspose.Words.SaveFormat.Epub" />
    ///  formats this option is used for raster images.</para></remarks>
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    ///<summary>
    ///  Gets or sets a value determining whether or not to use high quality (i.e. slow) rendering algorithms.
    ///</summary>
    ///<remarks>
    ///  The default value is <c>false</c>.
    ///  <para>This property is used when the document is exported to image formats:
    ///<see cref="F:Aspose.Words.SaveFormat.Tiff" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Png" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Bmp" />
    ///  ,
    ///<see cref="F:Aspose.Words.SaveFormat.Jpeg" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Emf" />
    ///  .</para></remarks>
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    ///<summary>
    ///  Gets or sets value determining whether content of <see cref="T:Aspose.Words.Markup.StructuredDocumentTag" />
    ///  is updated before saving.
    ///</summary>
    ///<remarks>
    ///  The default value is <c>true</c>.
    ///</remarks>
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    ///<summary>
    ///  Gets or sets a value determining how DrawingML shapes are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.DmlRenderingMode.Fallback" />
    ///  .
    ///  <para>This property is used when the document is exported to fixed page formats.</para></remarks>
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    ///<summary>
    ///  Gets or sets a value determining how DrawingML effects are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.DmlEffectsRenderingMode.Simplified" />
    ///  .
    ///  <para>This property is used when the document is exported to fixed page formats.</para></remarks>
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    ///<summary>
    ///  Gets or sets path to default template (including filename).
    ///  Default value for this property is <b>empty string</b>
    ///  (<see cref="F:System.String.Empty" />
    ///  ).
    ///</summary>
    ///<remarks>If specified, this path is used to load template when <see cref="P:Aspose.Words.Document.AutomaticallyUpdateStyles" />
    ///  is true,
    ///  but <see cref="P:Aspose.Words.Document.AttachedTemplate" />
    ///  is empty.</remarks>
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    ///<summary>
    ///  Gets or sets a value determining if fields of certain types should be updated before saving the document to a fixed page format.
    ///  Default value for this property is <b>true</b>
    ///  .
    ///</summary>
    ///<remarks>
    ///  Allows to specify whether to mimic or not MS Word behavior.
    ///</remarks>
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    ///<summary>
    ///  Gets or sets a value determining whether the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.LastSavedTime" />
    ///  property is updated before saving.
    ///</summary>
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    ///<summary>
    ///  Gets or sets a value determining whether the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.LastPrinted" />
    ///  property is updated before saving.
    ///</summary>
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    ///<summary>
    ///  Gets or sets a value determining whether the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.CreatedTime" />
    ///  property is updated before saving.
    ///  Default value is false;
    ///</summary>
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    ///<summary>
    ///  Gets or sets value determining if memory optimization should be performed before saving the document.
    ///  Default value for this property is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks>
    ///  Setting this option to true can significantly decrease memory consumption while saving large documents at the cost of slower saving time.
    ///</remarks>
    ///<dev>
    ///  So far only attribute interning procedure is bound to this property but I think we can make more memory optimization in the future.
    ///  That's why I decided to use more general property name.
    ///</dev>
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    ///<summary>
    ///  Gets or sets a value determining how 3D effects are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.Dml3DEffectsRenderingMode.Basic" />
    ///  .
    ///</remarks>
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    ///<summary>
    ///  Gets or sets a boolean value indicating whether to allow embedding fonts with PostScript outlines
    ///  when embedding TrueType fonts in a document upon it is saved.
    ///  The default value is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks><para>Note, Word does not embed PostScript fonts, but can open documents with embedded fonts of this type.</para><para>This option only works when <see cref="P:Aspose.Words.Fonts.FontInfoCollection.EmbedTrueTypeFonts" />
    ///  of the
    ///<see cref="P:Aspose.Words.DocumentBase.FontInfos" />
    ///  property is set to <c>true</c>.</para></remarks>
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    ///<summary>
    ///  Gets or sets custom local time zone used for date/time fields.
    ///</summary>
    ///<remarks><para>This option is available in either .Net framework starting from 3.5 version or .Net Standard.</para><para>By default, Aspose.Words uses system local time zone when writes date/time fields, this option allows to set custom value.</para></remarks>
    ///<dev>
    ///  So far this option used in SDT content updating only. Please see WORDSNET-20863 for details.
    ///  We can use it for other document date/time values later.
    ///</dev>
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNDocSaveOptions = class(TDNGenericImport<DNDocSaveOptionsClass, DNDocSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNFixedPageSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{C9794E3A-527C-5360-AE58-31993EDB69E9}']
  end;

  ///<summary>
  ///  Contains common options that can be specified when saving a document into fixed page formats (PDF, XPS,
  ///  images etc).
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.FixedPageSaveOptions')]
  DNFixedPageSaveOptions = interface(DNSaveOptions)
  ['{BAD9E945-D097-3ED3-B2B6-5FF03F92280C}']
  { getters & setters } 

    function get_PageSet: DNPageSet;
    procedure set_PageSet(value: DNPageSet);
    function get_PageSavingCallback: DNIPageSavingCallback;
    procedure set_PageSavingCallback(value: DNIPageSavingCallback);
    function get_NumeralFormat: DNNumeralFormat;
    procedure set_NumeralFormat(value: DNNumeralFormat);
    function get_MetafileRenderingOptions: DNMetafileRenderingOptions;
    procedure set_MetafileRenderingOptions(value: DNMetafileRenderingOptions);
    function get_JpegQuality: Int32;
    procedure set_JpegQuality(value: Int32);
    function get_ColorMode: DNColorMode;
    procedure set_ColorMode(value: DNColorMode);
    function get_OptimizeOutput: Boolean;
    procedure set_OptimizeOutput(value: Boolean);
    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    ///<summary>
    ///  Determines whether the specified object is equal in value to the current object.
    ///</summary>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the pages to render.
    ///  Default is all the pages in the document.
    ///</summary>
    property PageSet: DNPageSet read get_PageSet write set_PageSet;
    ///<summary>
    ///  Allows to control how separate pages are saved when a document is exported to fixed page format.
    ///</summary>
    property PageSavingCallback: DNIPageSavingCallback read get_PageSavingCallback write set_PageSavingCallback;
    ///<summary>
    ///  Gets or sets <see cref="T:Aspose.Words.Saving.NumeralFormat" />
    ///  used for rendering of numerals.
    ///  European numerals are used by default.
    ///</summary>
    ///<remarks>
    ///  If the value of this property is changed and page layout is already built then
    ///<see cref="M:Aspose.Words.Document.UpdatePageLayout" />
    ///  is invoked automatically to update any changes.
    ///</remarks>
    property NumeralFormat: DNNumeralFormat read get_NumeralFormat write set_NumeralFormat;
    ///<summary>
    ///  Allows to specify metafile rendering options.
    ///</summary>
    property MetafileRenderingOptions: DNMetafileRenderingOptions read get_MetafileRenderingOptions write set_MetafileRenderingOptions;
    ///<summary>
    ///  Gets or sets a value determining the quality of the JPEG images inside Html document.
    ///</summary>
    ///<remarks><para>Has effect only when a document contains JPEG images.</para><p>Use this property to get or set the quality of the images inside a document when saving in fixed page format.
    ///  The value may vary from 0 to 100 where 0 means worst quality but maximum compression and 100
    ///  means best quality but minimum compression.</p>
    ///  <p>The default value is 95.</p>
    ///</remarks>
    property JpegQuality: Int32 read get_JpegQuality write set_JpegQuality;
    ///<summary>
    ///  Gets or sets a value determining how colors are rendered.
    ///</summary>
    ///<remarks>The default value is <see cref="F:Aspose.Words.Saving.ColorMode.Normal" />
    ///  .
    ///</remarks>
    property ColorMode: DNColorMode read get_ColorMode write set_ColorMode;
    ///<summary>
    ///  Flag indicates whether it is required to optimize output.
    ///  If this flag is set redundant nested canvases and empty canvases are removed,
    ///  also neighbor glyphs with the same formatting are concatenated.
    ///  Note: The accuracy of the content display may be affected if this property is set to true.
    ///  Default is false.
    ///</summary>
    property OptimizeOutput: Boolean read get_OptimizeOutput write set_OptimizeOutput;
    ///<summary>
    ///  Specifies the format in which the document will be saved if this save options object is used.
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    ///<summary>
    ///  Specifies the folder for temporary files used when saving to a DOC or DOCX file.
    ///  By default this property is <c>null</c> and no temporary files are used.
    ///</summary>
    ///<remarks><para>When Aspose.Words saves a document, it needs to create temporary internal structures. By default,
    ///  these internal structures are created in memory and the memory usage spikes for a short period while
    ///  the document is being saved. When saving is complete, the memory is freed and reclaimed by the garbage collector.</para><para>If you are saving a very large document (thousands of pages) and/or processing many documents at the same time,
    ///  then the memory spike during saving can be significant enough to cause the system to throw <see cref="T:System.OutOfMemoryException" />
    ///  .
    ///  Specifying a temporary folder using <see cref="P:Aspose.Words.Saving.SaveOptions.TempFolder" />
    ///  will cause Aspose.Words to keep the internal structures in
    ///  temporary files instead of memory. It reduces the memory usage during saving, but will decrease the save performance.</para><para>The folder must exist and be writable, otherwise an exception will be thrown.</para><para>Aspose.Words automatically deletes all temporary files when saving is complete.</para></remarks>
    property TempFolder: string read get_TempFolder write set_TempFolder;
    ///<summary>
    ///  When <c>true</c>, pretty formats output where applicable.
    ///  Default value is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks><p>Set to <b>true</b>
    ///  to make HTML, MHTML, EPUB, WordML, RTF, DOCX and ODT output human readable.
    ///  Useful for testing or debugging.</p>
    ///</remarks>
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    ///<summary>
    ///  Gets or sets a value determining whether or not to use anti-aliasing for rendering.
    ///</summary>
    ///<remarks><para>
    ///  The default value is <c>false</c>. When this value is set to <c>true</c> anti-aliasing is
    ///  used for rendering.
    ///</para><para>This property is used when the document is exported to the following formats:
    ///<see cref="F:Aspose.Words.SaveFormat.Tiff" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Png" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Bmp" />
    ///  ,
    ///<see cref="F:Aspose.Words.SaveFormat.Jpeg" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Emf" />
    ///  . When the document is exported to the
    ///<see cref="F:Aspose.Words.SaveFormat.Html" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Mhtml" />
    ///  and <see cref="F:Aspose.Words.SaveFormat.Epub" />
    ///  formats this option is used for raster images.</para></remarks>
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    ///<summary>
    ///  Gets or sets a value determining whether or not to use high quality (i.e. slow) rendering algorithms.
    ///</summary>
    ///<remarks>
    ///  The default value is <c>false</c>.
    ///  <para>This property is used when the document is exported to image formats:
    ///<see cref="F:Aspose.Words.SaveFormat.Tiff" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Png" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Bmp" />
    ///  ,
    ///<see cref="F:Aspose.Words.SaveFormat.Jpeg" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Emf" />
    ///  .</para></remarks>
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    ///<summary>
    ///  Gets or sets value determining whether content of <see cref="T:Aspose.Words.Markup.StructuredDocumentTag" />
    ///  is updated before saving.
    ///</summary>
    ///<remarks>
    ///  The default value is <c>true</c>.
    ///</remarks>
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    ///<summary>
    ///  Gets or sets a value determining how DrawingML shapes are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.DmlRenderingMode.Fallback" />
    ///  .
    ///  <para>This property is used when the document is exported to fixed page formats.</para></remarks>
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    ///<summary>
    ///  Gets or sets a value determining how DrawingML effects are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.DmlEffectsRenderingMode.Simplified" />
    ///  .
    ///  <para>This property is used when the document is exported to fixed page formats.</para></remarks>
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    ///<summary>
    ///  Gets or sets path to default template (including filename).
    ///  Default value for this property is <b>empty string</b>
    ///  (<see cref="F:System.String.Empty" />
    ///  ).
    ///</summary>
    ///<remarks>If specified, this path is used to load template when <see cref="P:Aspose.Words.Document.AutomaticallyUpdateStyles" />
    ///  is true,
    ///  but <see cref="P:Aspose.Words.Document.AttachedTemplate" />
    ///  is empty.</remarks>
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    ///<summary>
    ///  Gets or sets a value determining if fields of certain types should be updated before saving the document to a fixed page format.
    ///  Default value for this property is <b>true</b>
    ///  .
    ///</summary>
    ///<remarks>
    ///  Allows to specify whether to mimic or not MS Word behavior.
    ///</remarks>
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    ///<summary>
    ///  Gets or sets a value determining whether the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.LastSavedTime" />
    ///  property is updated before saving.
    ///</summary>
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    ///<summary>
    ///  Gets or sets a value determining whether the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.LastPrinted" />
    ///  property is updated before saving.
    ///</summary>
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    ///<summary>
    ///  Gets or sets a value determining whether the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.CreatedTime" />
    ///  property is updated before saving.
    ///  Default value is false;
    ///</summary>
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    ///<summary>
    ///  Gets or sets value determining if memory optimization should be performed before saving the document.
    ///  Default value for this property is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks>
    ///  Setting this option to true can significantly decrease memory consumption while saving large documents at the cost of slower saving time.
    ///</remarks>
    ///<dev>
    ///  So far only attribute interning procedure is bound to this property but I think we can make more memory optimization in the future.
    ///  That's why I decided to use more general property name.
    ///</dev>
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    ///<summary>
    ///  Gets or sets a value determining how 3D effects are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.Dml3DEffectsRenderingMode.Basic" />
    ///  .
    ///</remarks>
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    ///<summary>
    ///  Gets or sets a boolean value indicating whether to allow embedding fonts with PostScript outlines
    ///  when embedding TrueType fonts in a document upon it is saved.
    ///  The default value is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks><para>Note, Word does not embed PostScript fonts, but can open documents with embedded fonts of this type.</para><para>This option only works when <see cref="P:Aspose.Words.Fonts.FontInfoCollection.EmbedTrueTypeFonts" />
    ///  of the
    ///<see cref="P:Aspose.Words.DocumentBase.FontInfos" />
    ///  property is set to <c>true</c>.</para></remarks>
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    ///<summary>
    ///  Gets or sets custom local time zone used for date/time fields.
    ///</summary>
    ///<remarks><para>This option is available in either .Net framework starting from 3.5 version or .Net Standard.</para><para>By default, Aspose.Words uses system local time zone when writes date/time fields, this option allows to set custom value.</para></remarks>
    ///<dev>
    ///  So far this option used in SDT content updating only. Please see WORDSNET-20863 for details.
    ///  We can use it for other document date/time values later.
    ///</dev>
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNFixedPageSaveOptions = class(TDNGenericImport<DNFixedPageSaveOptionsClass, DNFixedPageSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNHtmlFixedSaveOptionsClass = interface(DNFixedPageSaveOptionsClass)
  ['{5DB329F9-80D1-541A-BD2B-04A64E5EA1AB}']
  { constructors } 

    {class} function init: DNHtmlFixedSaveOptions;

  end;

  ///<summary>
  ///  Can be used to specify additional options when saving a document into the <see cref="F:Aspose.Words.SaveFormat.HtmlFixed" />
  ///  format.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.HtmlFixedSaveOptions')]
  DNHtmlFixedSaveOptions = interface(DNFixedPageSaveOptions)
  ['{C1F38AB0-CE84-3277-8738-1E14D6CDB301}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_ShowPageBorder: Boolean;
    procedure set_ShowPageBorder(value: Boolean);
    function get_PageHorizontalAlignment: DNHtmlFixedPageHorizontalAlignment;
    procedure set_PageHorizontalAlignment(value: DNHtmlFixedPageHorizontalAlignment);
    function get_PageMargins: Double;
    procedure set_PageMargins(value: Double);
    function get_ResourcesFolder: string;
    procedure set_ResourcesFolder(value: string);
    function get_ResourcesFolderAlias: string;
    procedure set_ResourcesFolderAlias(value: string);
    function get_ExportEmbeddedImages: Boolean;
    procedure set_ExportEmbeddedImages(value: Boolean);
    function get_ExportEmbeddedFonts: Boolean;
    procedure set_ExportEmbeddedFonts(value: Boolean);
    function get_ExportEmbeddedCss: Boolean;
    procedure set_ExportEmbeddedCss(value: Boolean);
    function get_ExportEmbeddedSvg: Boolean;
    procedure set_ExportEmbeddedSvg(value: Boolean);
    function get_FontFormat: DNExportFontFormat;
    procedure set_FontFormat(value: DNExportFontFormat);
    function get_CssClassNamesPrefix: string;
    procedure set_CssClassNamesPrefix(value: string);
    function get_ResourceSavingCallback: DNIResourceSavingCallback;
    procedure set_ResourceSavingCallback(value: DNIResourceSavingCallback);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_ExportFormFields: Boolean;
    procedure set_ExportFormFields(value: Boolean);
    function get_OptimizeOutput: Boolean;
    procedure set_OptimizeOutput(value: Boolean);
    function get_UseTargetMachineFonts: Boolean;
    procedure set_UseTargetMachineFonts(value: Boolean);
    function get_SaveFontFaceCssSeparately: Boolean;
    procedure set_SaveFontFaceCssSeparately(value: Boolean);
    function get_PageSet: DNPageSet;
    procedure set_PageSet(value: DNPageSet);
    function get_PageSavingCallback: DNIPageSavingCallback;
    procedure set_PageSavingCallback(value: DNIPageSavingCallback);
    function get_NumeralFormat: DNNumeralFormat;
    procedure set_NumeralFormat(value: DNNumeralFormat);
    function get_MetafileRenderingOptions: DNMetafileRenderingOptions;
    procedure set_MetafileRenderingOptions(value: DNMetafileRenderingOptions);
    function get_JpegQuality: Int32;
    procedure set_JpegQuality(value: Int32);
    function get_ColorMode: DNColorMode;
    procedure set_ColorMode(value: DNColorMode);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    ///<summary>
    ///  Determines whether the specified object is equal in value to the current object.
    ///</summary>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the format in which the document will be saved if this save options object is used.
    ///  Can only be <see cref="F:Aspose.Words.SaveFormat.HtmlFixed" />
    ///  .
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    ///<summary>
    ///  Specifies whether border around pages should be shown.
    ///  Default is <c>true</c>.
    ///</summary>
    property ShowPageBorder: Boolean read get_ShowPageBorder write set_ShowPageBorder;
    ///<summary>
    ///  Specifies the horizontal alignment of pages in an HTML document.
    ///  Default value is <c>HtmlFixedHorizontalPageAlignment.Center</c>.
    ///</summary>
    property PageHorizontalAlignment: DNHtmlFixedPageHorizontalAlignment read get_PageHorizontalAlignment write set_PageHorizontalAlignment;
    ///<summary>
    ///  Specifies the margins around pages in an HTML document.
    ///  The margins value is measured in points and should be equal to or greater than 0.
    ///  Default value is 10 points.
    ///</summary>
    ///<remarks><para>Depends on the value of <see cref="P:Aspose.Words.Saving.HtmlFixedSaveOptions.PageHorizontalAlignment" />
    ///  property:</para><list type="bullet"><item>
    ///  Defines top, bottom and left page margins if the value is <see cref="F:Aspose.Words.Saving.HtmlFixedPageHorizontalAlignment.Left" />
    ///  .
    ///</item>
    ///<item>
    ///  Defines top, bottom and right page margins if the value is <see cref="F:Aspose.Words.Saving.HtmlFixedPageHorizontalAlignment.Right" />
    ///  .
    ///</item>
    ///<item>
    ///  Defines top and bottom page margins if the value is <see cref="F:Aspose.Words.Saving.HtmlFixedPageHorizontalAlignment.Center" />
    ///  .
    ///</item>
    ///</list>
    ///</remarks>
    property PageMargins: Double read get_PageMargins write set_PageMargins;
    ///<summary>
    ///  Specifies the physical folder where resources (images, fonts, css) are saved when exporting a document to Html format.
    ///  Default is <c>null</c>.
    ///</summary>
    ///<remarks><p>Has effect only if <see cref="P:Aspose.Words.Saving.HtmlFixedSaveOptions.ExportEmbeddedImages" />
    ///  property is false.</p>
    ///  <p>When you save a <see cref="T:Aspose.Words.Document" />
    ///  in Html format, Aspose.Words needs to save all
    ///  images embedded in the document as standalone files. <see cref="P:Aspose.Words.Saving.HtmlFixedSaveOptions.ResourcesFolder" />
    ///  allows you to specify where the images will be saved and <see cref="P:Aspose.Words.Saving.HtmlFixedSaveOptions.ResourcesFolderAlias" />
    ///  allows to specify how the image URIs will be constructed.</p>
    ///  <p>If you save a document into a file and provide a file name, Aspose.Words, by default, saves the
    ///  images in the same folder where the document file is saved. Use <see cref="P:Aspose.Words.Saving.HtmlFixedSaveOptions.ResourcesFolder" />
    ///  to override this behavior.</p>
    ///  <p>If you save a document into a stream, Aspose.Words does not have a folder where to save the images,
    ///  but still needs to save the images somewhere. In this case, you need to specify an accessible folder
    ///  by using the <see cref="P:Aspose.Words.Saving.HtmlFixedSaveOptions.ResourcesFolder" />
    ///  property</p>
    ///<seealso cref="P:Aspose.Words.Saving.HtmlFixedSaveOptions.ResourcesFolderAlias" />
    ///</remarks>
    property ResourcesFolder: string read get_ResourcesFolder write set_ResourcesFolder;
    ///<summary>
    ///  Specifies the name of the folder used to construct image URIs written into an Html document.
    ///  Default is <c>null</c>.
    ///</summary>
    ///<remarks><p>When you save a <see cref="T:Aspose.Words.Document" />
    ///  in Html format, Aspose.Words needs to save all
    ///  images embedded in the document as standalone files. <see cref="P:Aspose.Words.Saving.HtmlFixedSaveOptions.ResourcesFolder" />
    ///  allows you to specify where the images will be saved and <see cref="P:Aspose.Words.Saving.HtmlFixedSaveOptions.ResourcesFolderAlias" />
    ///  allows to specify how the image URIs will be constructed.</p>
    ///<seealso cref="P:Aspose.Words.Saving.HtmlFixedSaveOptions.ResourcesFolder" />
    ///</remarks>
    property ResourcesFolderAlias: string read get_ResourcesFolderAlias write set_ResourcesFolderAlias;
    ///<summary>
    ///  Specifies whether images should be embedded into Html document in Base64 format.
    ///  Note setting this flag can significantly increase size of output Html file.
    ///</summary>
    property ExportEmbeddedImages: Boolean read get_ExportEmbeddedImages write set_ExportEmbeddedImages;
    ///<summary>
    ///  Specifies whether fonts should be embedded into Html document in Base64 format.
    ///  Note setting this flag can significantly increase size of output Html file.
    ///</summary>
    property ExportEmbeddedFonts: Boolean read get_ExportEmbeddedFonts write set_ExportEmbeddedFonts;
    ///<summary>
    ///  Specifies whether the CSS (Cascading Style Sheet) should be embedded into Html document.
    ///</summary>
    property ExportEmbeddedCss: Boolean read get_ExportEmbeddedCss write set_ExportEmbeddedCss;
    ///<summary>
    ///  Specifies whether SVG resources should be embedded into Html document.
    ///  Default value is <c>true</c>.
    ///</summary>
    property ExportEmbeddedSvg: Boolean read get_ExportEmbeddedSvg write set_ExportEmbeddedSvg;
    ///<summary>
    ///  Gets or sets <see cref="T:Aspose.Words.Saving.ExportFontFormat" />
    ///  used for font exporting.
    ///  Default value is <see cref="F:Aspose.Words.Saving.ExportFontFormat.Woff" />
    ///  .
    ///</summary>
    property FontFormat: DNExportFontFormat read get_FontFormat write set_FontFormat;
    ///<summary>
    ///  Specifies prefix which is added to all class names in style.css file.
    ///  Default value is <c>"aw"</c>.
    ///</summary>
    property CssClassNamesPrefix: string read get_CssClassNamesPrefix write set_CssClassNamesPrefix;
    ///<summary>
    ///  Allows to control how resources (images, fonts and css) are saved when a document is exported to fixed page Html format.
    ///</summary>
    property ResourceSavingCallback: DNIResourceSavingCallback read get_ResourceSavingCallback write set_ResourceSavingCallback;
    ///<summary>
    ///  Specifies the encoding to use when exporting to HTML.
    ///  Default value is <c>new UTF8Encoding(true)</c> (UTF-8 with BOM).
    ///</summary>
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    ///<summary>
    ///  Gets or sets indication of whether form fields are exported as interactive
    ///  items (as 'input' tag) rather than converted to text or graphics.
    ///</summary>
    property ExportFormFields: Boolean read get_ExportFormFields write set_ExportFormFields;
    ///<summary>
    ///  Flag indicates whether it is required to optimize output.
    ///  If this flag is set redundant nested canvases and empty canvases are removed,
    ///  also neighbor glyphs with the same formating are concatenated.
    ///  Note: The accuracy of the content display may be affected if this property is set to true.
    ///  Default is true.
    ///</summary>
    property OptimizeOutput: Boolean read get_OptimizeOutput write set_OptimizeOutput;
    ///<summary>
    ///  Flag indicates whether fonts from target machine must be used to display the document.
    ///  If this flag is set to true, <see cref="P:Aspose.Words.Saving.HtmlFixedSaveOptions.FontFormat" />
    ///  and <see cref="P:Aspose.Words.Saving.HtmlFixedSaveOptions.ExportEmbeddedFonts" />
    ///  properties do not have effect,
    ///  also <see cref="P:Aspose.Words.Saving.HtmlFixedSaveOptions.ResourceSavingCallback" />
    ///  is not fired for fonts.
    ///  Default is false.
    ///</summary>
    property UseTargetMachineFonts: Boolean read get_UseTargetMachineFonts write set_UseTargetMachineFonts;
    ///<summary>
    ///  Flag indicates whether "@font-face" CSS rules should be placed into a separate file "fontFaces.css"
    ///  when a document is being saved with external stylesheet (that is, when <see cref="P:Aspose.Words.Saving.HtmlFixedSaveOptions.ExportEmbeddedCss" />
    ///  is <c>false</c>).
    ///  Default value is <c>false</c>, all CSS rules are written into single file "styles.css".
    ///</summary>
    ///<remarks>
    ///  Setting this property to <c>true</c> restores the old behavior (separate files) for compatibility with legacy code.
    ///</remarks>
    property SaveFontFaceCssSeparately: Boolean read get_SaveFontFaceCssSeparately write set_SaveFontFaceCssSeparately;
    ///<summary>
    ///  Gets or sets the pages to render.
    ///  Default is all the pages in the document.
    ///</summary>
    property PageSet: DNPageSet read get_PageSet write set_PageSet;
    ///<summary>
    ///  Allows to control how separate pages are saved when a document is exported to fixed page format.
    ///</summary>
    property PageSavingCallback: DNIPageSavingCallback read get_PageSavingCallback write set_PageSavingCallback;
    ///<summary>
    ///  Gets or sets <see cref="T:Aspose.Words.Saving.NumeralFormat" />
    ///  used for rendering of numerals.
    ///  European numerals are used by default.
    ///</summary>
    ///<remarks>
    ///  If the value of this property is changed and page layout is already built then
    ///<see cref="M:Aspose.Words.Document.UpdatePageLayout" />
    ///  is invoked automatically to update any changes.
    ///</remarks>
    property NumeralFormat: DNNumeralFormat read get_NumeralFormat write set_NumeralFormat;
    ///<summary>
    ///  Allows to specify metafile rendering options.
    ///</summary>
    property MetafileRenderingOptions: DNMetafileRenderingOptions read get_MetafileRenderingOptions write set_MetafileRenderingOptions;
    ///<summary>
    ///  Gets or sets a value determining the quality of the JPEG images inside Html document.
    ///</summary>
    ///<remarks><para>Has effect only when a document contains JPEG images.</para><p>Use this property to get or set the quality of the images inside a document when saving in fixed page format.
    ///  The value may vary from 0 to 100 where 0 means worst quality but maximum compression and 100
    ///  means best quality but minimum compression.</p>
    ///  <p>The default value is 95.</p>
    ///</remarks>
    property JpegQuality: Int32 read get_JpegQuality write set_JpegQuality;
    ///<summary>
    ///  Gets or sets a value determining how colors are rendered.
    ///</summary>
    ///<remarks>The default value is <see cref="F:Aspose.Words.Saving.ColorMode.Normal" />
    ///  .
    ///</remarks>
    property ColorMode: DNColorMode read get_ColorMode write set_ColorMode;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNHtmlFixedSaveOptions = class(TDNGenericImport<DNHtmlFixedSaveOptionsClass, DNHtmlFixedSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNImageSaveOptionsClass = interface(DNFixedPageSaveOptionsClass)
  ['{81C1273B-782B-507E-BD6B-67BB671B3C6E}']
  { static getter & setter } 

    procedure set_Resolution(value: Single);

  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class that can be used to save rendered images in the
    ///<see cref="F:Aspose.Words.SaveFormat.Tiff" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Png" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Bmp" />
    ///  ,
    ///<see cref="F:Aspose.Words.SaveFormat.Emf" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Jpeg" />
    ///  or <see cref="F:Aspose.Words.SaveFormat.Svg" />
    ///  format.
    ///<see cref="F:Aspose.Words.SaveFormat.Png" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Bmp" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Jpeg" />
    ///  or <see cref="F:Aspose.Words.SaveFormat.Svg" />
    ///  format.
    ///</summary>
    ///  <param name="saveFormat">Can be
    ///<see cref="F:Aspose.Words.SaveFormat.Tiff" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Png" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Bmp" />
    ///  ,
    ///<see cref="F:Aspose.Words.SaveFormat.Emf" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Jpeg" />
    ///  or <see cref="F:Aspose.Words.SaveFormat.Svg" />
    ///  .
    ///<see cref="F:Aspose.Words.SaveFormat.Png" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Bmp" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Jpeg" />
    ///  or <see cref="F:Aspose.Words.SaveFormat.Svg" />
    ///  .
    ///</param>
    {class} function init(saveFormat: DNSaveFormat): DNImageSaveOptions;

  { static propertys } 

    ///<summary>
    ///  Sets both horizontal and vertical resolution for the generated images, in dots per inch.
    ///</summary>
    ///<remarks><para>This property has effect only when saving to raster image formats.</para></remarks>
    {class} property Resolution: Single write set_Resolution;
  end;

  ///<summary>
  ///  Allows to specify additional options when rendering document pages or shapes to images.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.ImageSaveOptions')]
  DNImageSaveOptions = interface(DNFixedPageSaveOptions)
  ['{4D42F7A9-EF61-37FC-98F4-C2437CBFB364}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_PageSet: DNPageSet;
    procedure set_PageSet(value: DNPageSet);
    function get_PaperColor: DDN.Aspose.Common.DNColor;
    procedure set_PaperColor(value: DDN.Aspose.Common.DNColor);
    function get_PixelFormat: DNImagePixelFormat;
    procedure set_PixelFormat(value: DNImagePixelFormat);
    function get_HorizontalResolution: Single;
    procedure set_HorizontalResolution(value: Single);
    function get_VerticalResolution: Single;
    procedure set_VerticalResolution(value: Single);
    procedure set_Resolution(value: Single);
    function get_JpegQuality: Int32;
    procedure set_JpegQuality(value: Int32);
    function get_TiffCompression: DNTiffCompression;
    procedure set_TiffCompression(value: DNTiffCompression);
    function get_ImageColorMode: DNImageColorMode;
    procedure set_ImageColorMode(value: DNImageColorMode);
    function get_ImageBrightness: Single;
    procedure set_ImageBrightness(value: Single);
    function get_ImageContrast: Single;
    procedure set_ImageContrast(value: Single);
    function get_Scale: Single;
    procedure set_Scale(value: Single);
    function get_MetafileRenderingOptions: DNMetafileRenderingOptions;
    function get_TiffBinarizationMethod: DNImageBinarizationMethod;
    procedure set_TiffBinarizationMethod(value: DNImageBinarizationMethod);
    function get_ThresholdForFloydSteinbergDithering: Byte;
    procedure set_ThresholdForFloydSteinbergDithering(value: Byte);
    function get_GraphicsQualityOptions: DNGraphicsQualityOptions;
    procedure set_GraphicsQualityOptions(value: DNGraphicsQualityOptions);
    function get_UseGdiEmfRenderer: Boolean;
    procedure set_UseGdiEmfRenderer(value: Boolean);
    function get_PageSavingCallback: DNIPageSavingCallback;
    procedure set_PageSavingCallback(value: DNIPageSavingCallback);
    function get_NumeralFormat: DNNumeralFormat;
    procedure set_NumeralFormat(value: DNNumeralFormat);
    function get_ColorMode: DNColorMode;
    procedure set_ColorMode(value: DNColorMode);
    function get_OptimizeOutput: Boolean;
    procedure set_OptimizeOutput(value: Boolean);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    ///<summary>
    ///  Creates a deep clone of this object.
    ///</summary>
    function Clone: DNImageSaveOptions;
    ///<summary>
    ///  Determines whether the specified object is equal in value to the current object.
    ///</summary>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the format in which the rendered document pages or shapes will be saved if this save options object is used.
    ///  Can be a raster
    ///<see cref="F:Aspose.Words.SaveFormat.Tiff" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Png" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Bmp" />
    ///  ,
    ///<see cref="F:Aspose.Words.SaveFormat.Jpeg" />
    ///  or vector <see cref="F:Aspose.Words.SaveFormat.Emf" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Svg" />
    ///  .
    ///</summary>
    ///<remarks><para>On different platforms, the supported formats may be different. The number of other options depends on the selected format.</para><para>Also, it is possible to save to SVG both via ImageSaveOptions and via <see cref="T:Aspose.Words.Saving.SvgSaveOptions" />
    ///  .</para></remarks>
    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    ///<summary>
    ///  Gets or sets the pages to render.
    ///  Default is all the pages in the document.
    ///</summary>
    ///<remarks><para>This property has effect only when rendering document pages. This property is ignored when rendering shapes to images.</para></remarks>
    property PageSet: DNPageSet read get_PageSet write set_PageSet;
    ///<summary>
    ///  Gets or sets the background (paper) color for the generated images.
    ///  <p>The default value is <see cref="P:System.Drawing.Color.White" />
    ///  .</p>
    ///</summary>
    ///<remarks><para>When rendering pages of a document that specifies its own background color,
    ///  then the document background color will override the color specified by this property.</para></remarks>
    property PaperColor: DDN.Aspose.Common.DNColor read get_PaperColor write set_PaperColor;
    ///<summary>
    ///  Gets or sets the pixel format for the generated images.
    ///</summary>
    ///<remarks><para>This property has effect only when saving to raster image formats.</para><p>The default value is <see cref="F:Aspose.Words.Saving.ImagePixelFormat.Format32BppArgb" />
    ///  .</p>
    ///  <p>Pixel format of the output image may differ from the set value
    ///  because of work of GDI+.</p>
    ///</remarks>
    property PixelFormat: DNImagePixelFormat read get_PixelFormat write set_PixelFormat;
    ///<summary>
    ///  Gets or sets the horizontal resolution for the generated images, in dots per inch.
    ///</summary>
    ///<remarks><para>This property has effect only when saving to raster image formats and affects the output size in pixels.</para><p>The default value is 96.</p>
    ///</remarks>
    property HorizontalResolution: Single read get_HorizontalResolution write set_HorizontalResolution;
    ///<summary>
    ///  Gets or sets the vertical resolution for the generated images, in dots per inch.
    ///</summary>
    ///<remarks><para>This property has effect only when saving to raster image formats and affects the output size in pixels.</para><p>The default value is 96.</p>
    ///</remarks>
    property VerticalResolution: Single read get_VerticalResolution write set_VerticalResolution;
    ///<summary>
    ///  Sets both horizontal and vertical resolution for the generated images, in dots per inch.
    ///</summary>
    ///<remarks><para>This property has effect only when saving to raster image formats.</para></remarks>
    property Resolution: Single write set_Resolution;
    ///<summary>
    ///  Gets or sets a value determining the quality of the generated JPEG images.
    ///</summary>
    ///<remarks><para>Has effect only when saving to JPEG.</para><p>Use this property to get or set the quality of generated images when saving in JPEG format.
    ///  The value may vary from 0 to 100 where 0 means worst quality but maximum compression and 100
    ///  means best quality but minimum compression.</p>
    ///  <p>The default value is 95.</p>
    ///</remarks>
    property JpegQuality: Int32 read get_JpegQuality write set_JpegQuality;
    ///<summary>
    ///  Gets or sets the type of compression to apply when saving generated images to the TIFF format.
    ///</summary>
    ///<remarks><para>Has effect only when saving to TIFF.</para><p>The default value is <see cref="F:Aspose.Words.Saving.TiffCompression.Lzw" />
    ///  .</p>
    ///</remarks>
    property TiffCompression: DNTiffCompression read get_TiffCompression write set_TiffCompression;
    ///<summary>
    ///  Gets or sets the color mode for the generated images.
    ///</summary>
    ///<remarks><para>This property has effect only when saving to raster image formats.</para><para>The default value is <see cref="F:Aspose.Words.Saving.ImageColorMode.None" />
    ///  .</para></remarks>
    property ImageColorMode: DNImageColorMode read get_ImageColorMode write set_ImageColorMode;
    ///<summary>
    ///  Gets or sets the brightness for the generated images.
    ///</summary>
    ///<remarks><para>This property has effect only when saving to raster image formats.</para><para>The default value is 0.5. The value must be in the range between 0 and 1.</para></remarks>
    property ImageBrightness: Single read get_ImageBrightness write set_ImageBrightness;
    ///<summary>
    ///  Gets or sets the contrast for the generated images.
    ///</summary>
    ///<remarks><para>This property has effect only when saving to raster image formats.</para><para>The default value is 0.5. The value must be in the range between 0 and 1.</para></remarks>
    property ImageContrast: Single read get_ImageContrast write set_ImageContrast;
    ///<summary>
    ///  Gets or sets the zoom factor for the generated images.
    ///</summary>
    ///<remarks>
    ///  The default value is 1.0. The value must be greater than 0.
    ///</remarks>
    property Scale: Single read get_Scale write set_Scale;
    ///<summary>
    ///  Allows to specify how metafiles are treated in the rendered output.
    ///</summary>
    ///<remarks><para>When <see cref="F:Aspose.Words.Saving.MetafileRenderingMode.Vector" />
    ///  is specified, Aspose.Words renders
    ///  metafile to vector graphics using its own metafile rendering engine first and then renders vector
    ///  graphics to the image.</para><para>When <see cref="F:Aspose.Words.Saving.MetafileRenderingMode.Bitmap" />
    ///  is specified, Aspose.Words renders
    ///  metafile directly to the image using the GDI+ metafile rendering engine.</para><para>GDI+ metafile rendering engine works faster, supports almost all metafile features but on low
    ///  resolutions may produce inconsistent result when compared to the rest of vector graphics (especially for text)
    ///  on the page. Aspose.Words metafile rendering engine will produce more consistent result even
    ///  on low resolutions but works slower and may inaccurately render complex metafiles.</para><para>The default value for <see cref="T:Aspose.Words.Saving.MetafileRenderingMode" />
    ///  is <see cref="F:Aspose.Words.Saving.MetafileRenderingMode.Bitmap" />
    ///  .</para></remarks>
    property MetafileRenderingOptions: DNMetafileRenderingOptions read get_MetafileRenderingOptions;
    ///<summary>
    ///  Gets or sets method used while converting images to 1 bpp format
    ///  when <see cref="P:Aspose.Words.Saving.ImageSaveOptions.SaveFormat" />
    ///  is  SaveFormat.Tiff and
    ///<see cref="P:Aspose.Words.Saving.ImageSaveOptions.TiffCompression" />
    ///  is equal to TiffCompression.Ccitt3 or TiffCompression.Ccitt4.
    ///</summary>
    ///<remarks><para>The default value is ImageBinarizationMethod.Threshold.</para></remarks>
    property TiffBinarizationMethod: DNImageBinarizationMethod read get_TiffBinarizationMethod write set_TiffBinarizationMethod;
    ///<summary>
    ///  Gets or sets the threshold that determines the value
    ///  of the binarization error in the Floyd-Steinberg method.
    ///  when <see cref="T:Aspose.Words.Saving.ImageBinarizationMethod" />
    ///  is ImageBinarizationMethod.FloydSteinbergDithering.
    ///</summary>
    ///<remarks><para>The default value is 128.</para></remarks>
    property ThresholdForFloydSteinbergDithering: Byte read get_ThresholdForFloydSteinbergDithering write set_ThresholdForFloydSteinbergDithering;
    ///<summary>
    ///  Allows to specify rendering mode and quality for the <see cref="T:System.Drawing.Graphics" />
    ///  object.
    ///</summary>
    ///<remarks><para>Use this property to override the Graphics settings provided by Aspose.Words engine by default.</para><para>It will take effect only when a document is being saved to an image-like format.</para></remarks>
    property GraphicsQualityOptions: DNGraphicsQualityOptions read get_GraphicsQualityOptions write set_GraphicsQualityOptions;
    ///<summary>
    ///  Gets or sets a value determining whether to use GDI+ or Aspose.Words metafile renderer when saving to EMF.
    ///</summary>
    ///<remarks><para>If set to <c>true</c> GDI+ metafile renderer is used. I.e. content is written to GDI+ graphics
    ///  object and saved to metafile.</para><para>If set to <c>false</c> Aspose.Words metafile renderer is used. I.e. content is written directly
    ///  to the metafile format with Aspose.Words.</para><para>Has effect only when saving to EMF.</para><para>GDI+ saving works only on .NET.</para><para>The default value is <c>true</c>.</para></remarks>
    property UseGdiEmfRenderer: Boolean read get_UseGdiEmfRenderer write set_UseGdiEmfRenderer;
    ///<summary>
    ///  Allows to control how separate pages are saved when a document is exported to fixed page format.
    ///</summary>
    property PageSavingCallback: DNIPageSavingCallback read get_PageSavingCallback write set_PageSavingCallback;
    ///<summary>
    ///  Gets or sets <see cref="T:Aspose.Words.Saving.NumeralFormat" />
    ///  used for rendering of numerals.
    ///  European numerals are used by default.
    ///</summary>
    ///<remarks>
    ///  If the value of this property is changed and page layout is already built then
    ///<see cref="M:Aspose.Words.Document.UpdatePageLayout" />
    ///  is invoked automatically to update any changes.
    ///</remarks>
    property NumeralFormat: DNNumeralFormat read get_NumeralFormat write set_NumeralFormat;
    ///<summary>
    ///  Gets or sets a value determining how colors are rendered.
    ///</summary>
    ///<remarks>The default value is <see cref="F:Aspose.Words.Saving.ColorMode.Normal" />
    ///  .
    ///</remarks>
    property ColorMode: DNColorMode read get_ColorMode write set_ColorMode;
    ///<summary>
    ///  Flag indicates whether it is required to optimize output.
    ///  If this flag is set redundant nested canvases and empty canvases are removed,
    ///  also neighbor glyphs with the same formatting are concatenated.
    ///  Note: The accuracy of the content display may be affected if this property is set to true.
    ///  Default is false.
    ///</summary>
    property OptimizeOutput: Boolean read get_OptimizeOutput write set_OptimizeOutput;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNImageSaveOptions = class(TDNGenericImport<DNImageSaveOptionsClass, DNImageSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNPclSaveOptionsClass = interface(DNFixedPageSaveOptionsClass)
  ['{00D49C5F-CDAF-5FDF-B9A6-065D1467FE47}']
  { constructors } 

    {class} function init: DNPclSaveOptions;

  end;

  ///<summary>
  ///  Can be used to specify additional options when saving a document into the <see cref="F:Aspose.Words.SaveFormat.Pcl" />
  ///  format.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.PclSaveOptions')]
  DNPclSaveOptions = interface(DNFixedPageSaveOptions)
  ['{1D77C81F-CFC5-325F-85B8-BCCE4D84D4A9}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_RasterizeTransformedElements: Boolean;
    procedure set_RasterizeTransformedElements(value: Boolean);
    function get_FallbackFontName: string;
    procedure set_FallbackFontName(value: string);
    function get_PageSet: DNPageSet;
    procedure set_PageSet(value: DNPageSet);
    function get_PageSavingCallback: DNIPageSavingCallback;
    procedure set_PageSavingCallback(value: DNIPageSavingCallback);
    function get_NumeralFormat: DNNumeralFormat;
    procedure set_NumeralFormat(value: DNNumeralFormat);
    function get_MetafileRenderingOptions: DNMetafileRenderingOptions;
    procedure set_MetafileRenderingOptions(value: DNMetafileRenderingOptions);
    function get_JpegQuality: Int32;
    procedure set_JpegQuality(value: Int32);
    function get_ColorMode: DNColorMode;
    procedure set_ColorMode(value: DNColorMode);
    function get_OptimizeOutput: Boolean;
    procedure set_OptimizeOutput(value: Boolean);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    ///<summary>
    ///  Adds information about font that is uploaded to the printer by manufacturer.
    ///</summary>
    ///  <param name="fontFullName">Full name of the font (e.g. "Times New Roman Bold Italic").</param>
    ///  <param name="fontPclName">Name of the font that is used in Pcl document.</param>
    ///<remarks>
    ///  There are 52 fonts that are to be built in any printer according to Pcl specification.
    ///  However manufactures can add some other fonts to their devices.
    ///</remarks>
    procedure AddPrinterFont(fontFullName: string; fontPclName: string);
    ///<summary>
    ///  Determines whether the specified object is equal in value to the current object.
    ///</summary>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the format in which the document will be saved if this save options object is used.
    ///  Can only be <see cref="F:Aspose.Words.SaveFormat.Pcl" />
    ///  .
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    ///<summary>
    ///  Gets or sets a value determining whether or not complex transformed elements
    ///  should be rasterized before saving to PCL document.
    ///  Default is <c>true</c>.
    ///</summary>
    ///<remarks>
    ///  PCL doesn't support some kind of transformations that are used by Aspose Words.
    ///  E.g. rotated, skewed images and texture brushes. To properly render such elements
    ///  rasterization process is used, i.e. saving to image and clipping.
    ///  This process can take additional time and memory.
    ///  If flag is set to <c>false</c>, some content in output may be different
    ///  as compared with the source document.
    ///</remarks>
    property RasterizeTransformedElements: Boolean read get_RasterizeTransformedElements write set_RasterizeTransformedElements;
    ///<summary>
    ///  Name of the font that will be used
    ///  if no expected font is found in printer and built-in fonts collections.
    ///</summary>
    ///<remarks>
    ///  If no fallback is found, a warning is generated and "Arial" font is used.
    ///</remarks>
    property FallbackFontName: string read get_FallbackFontName write set_FallbackFontName;
    ///<summary>
    ///  Gets or sets the pages to render.
    ///  Default is all the pages in the document.
    ///</summary>
    property PageSet: DNPageSet read get_PageSet write set_PageSet;
    ///<summary>
    ///  Allows to control how separate pages are saved when a document is exported to fixed page format.
    ///</summary>
    property PageSavingCallback: DNIPageSavingCallback read get_PageSavingCallback write set_PageSavingCallback;
    ///<summary>
    ///  Gets or sets <see cref="T:Aspose.Words.Saving.NumeralFormat" />
    ///  used for rendering of numerals.
    ///  European numerals are used by default.
    ///</summary>
    ///<remarks>
    ///  If the value of this property is changed and page layout is already built then
    ///<see cref="M:Aspose.Words.Document.UpdatePageLayout" />
    ///  is invoked automatically to update any changes.
    ///</remarks>
    property NumeralFormat: DNNumeralFormat read get_NumeralFormat write set_NumeralFormat;
    ///<summary>
    ///  Allows to specify metafile rendering options.
    ///</summary>
    property MetafileRenderingOptions: DNMetafileRenderingOptions read get_MetafileRenderingOptions write set_MetafileRenderingOptions;
    ///<summary>
    ///  Gets or sets a value determining the quality of the JPEG images inside Html document.
    ///</summary>
    ///<remarks><para>Has effect only when a document contains JPEG images.</para><p>Use this property to get or set the quality of the images inside a document when saving in fixed page format.
    ///  The value may vary from 0 to 100 where 0 means worst quality but maximum compression and 100
    ///  means best quality but minimum compression.</p>
    ///  <p>The default value is 95.</p>
    ///</remarks>
    property JpegQuality: Int32 read get_JpegQuality write set_JpegQuality;
    ///<summary>
    ///  Gets or sets a value determining how colors are rendered.
    ///</summary>
    ///<remarks>The default value is <see cref="F:Aspose.Words.Saving.ColorMode.Normal" />
    ///  .
    ///</remarks>
    property ColorMode: DNColorMode read get_ColorMode write set_ColorMode;
    ///<summary>
    ///  Flag indicates whether it is required to optimize output.
    ///  If this flag is set redundant nested canvases and empty canvases are removed,
    ///  also neighbor glyphs with the same formatting are concatenated.
    ///  Note: The accuracy of the content display may be affected if this property is set to true.
    ///  Default is false.
    ///</summary>
    property OptimizeOutput: Boolean read get_OptimizeOutput write set_OptimizeOutput;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNPclSaveOptions = class(TDNGenericImport<DNPclSaveOptionsClass, DNPclSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNPdfSaveOptionsClass = interface(DNFixedPageSaveOptionsClass)
  ['{8B1DB7FB-DF8C-5A90-AF1C-7368E0257685}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class that can be used to save a document in the
    ///<see cref="F:Aspose.Words.SaveFormat.Pdf" />
    ///  format.
    ///</summary>
    {class} function init: DNPdfSaveOptions;

  end;

  ///<summary>
  ///  Can be used to specify additional options when saving a document into the <see cref="F:Aspose.Words.SaveFormat.Pdf" />
  ///  format.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.PdfSaveOptions')]
  DNPdfSaveOptions = interface(DNFixedPageSaveOptions)
  ['{9D576DD9-EE16-369F-BBC3-56B85FECA563}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_OutlineOptions: DNOutlineOptions;
    function get_TextCompression: DNPdfTextCompression;
    procedure set_TextCompression(value: DNPdfTextCompression);
    function get_JpegQuality: Int32;
    procedure set_JpegQuality(value: Int32);
    function get_PreserveFormFields: Boolean;
    procedure set_PreserveFormFields(value: Boolean);
    function get_CreateNoteHyperlinks: Boolean;
    procedure set_CreateNoteHyperlinks(value: Boolean);
    function get_EncryptionDetails: DNPdfEncryptionDetails;
    procedure set_EncryptionDetails(value: DNPdfEncryptionDetails);
    function get_DigitalSignatureDetails: DNPdfDigitalSignatureDetails;
    procedure set_DigitalSignatureDetails(value: DNPdfDigitalSignatureDetails);
    function get_EmbedFullFonts: Boolean;
    procedure set_EmbedFullFonts(value: Boolean);
    function get_FontEmbeddingMode: DNPdfFontEmbeddingMode;
    procedure set_FontEmbeddingMode(value: DNPdfFontEmbeddingMode);
    function get_UseCoreFonts: Boolean;
    procedure set_UseCoreFonts(value: Boolean);
    function get_CustomPropertiesExport: DNPdfCustomPropertiesExport;
    procedure set_CustomPropertiesExport(value: DNPdfCustomPropertiesExport);
    function get_ZoomBehavior: DNPdfZoomBehavior;
    procedure set_ZoomBehavior(value: DNPdfZoomBehavior);
    function get_ZoomFactor: Int32;
    procedure set_ZoomFactor(value: Int32);
    function get_ImageCompression: DNPdfImageCompression;
    procedure set_ImageCompression(value: DNPdfImageCompression);
    function get_OpenHyperlinksInNewWindow: Boolean;
    procedure set_OpenHyperlinksInNewWindow(value: Boolean);
    function get_ExportDocumentStructure: Boolean;
    procedure set_ExportDocumentStructure(value: Boolean);
    function get_UseBookFoldPrintingSettings: Boolean;
    procedure set_UseBookFoldPrintingSettings(value: Boolean);
    function get_DownsampleOptions: DNDownsampleOptions;
    procedure set_DownsampleOptions(value: DNDownsampleOptions);
    function get_PageMode: DNPdfPageMode;
    procedure set_PageMode(value: DNPdfPageMode);
    function get_ImageColorSpaceExportMode: DNPdfImageColorSpaceExportMode;
    procedure set_ImageColorSpaceExportMode(value: DNPdfImageColorSpaceExportMode);
    function get_PreblendImages: Boolean;
    procedure set_PreblendImages(value: Boolean);
    function get_DisplayDocTitle: Boolean;
    procedure set_DisplayDocTitle(value: Boolean);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_HeaderFooterBookmarksExportMode: DNHeaderFooterBookmarksExportMode;
    procedure set_HeaderFooterBookmarksExportMode(value: DNHeaderFooterBookmarksExportMode);
    function get_AdditionalTextPositioning: Boolean;
    procedure set_AdditionalTextPositioning(value: Boolean);
    function get_InterpolateImages: Boolean;
    procedure set_InterpolateImages(value: Boolean);
    function get_Compliance: DNPdfCompliance;
    procedure set_Compliance(value: DNPdfCompliance);
    function get_PageSet: DNPageSet;
    procedure set_PageSet(value: DNPageSet);
    function get_PageSavingCallback: DNIPageSavingCallback;
    procedure set_PageSavingCallback(value: DNIPageSavingCallback);
    function get_NumeralFormat: DNNumeralFormat;
    procedure set_NumeralFormat(value: DNNumeralFormat);
    function get_MetafileRenderingOptions: DNMetafileRenderingOptions;
    procedure set_MetafileRenderingOptions(value: DNMetafileRenderingOptions);
    function get_ColorMode: DNColorMode;
    procedure set_ColorMode(value: DNColorMode);
    function get_OptimizeOutput: Boolean;
    procedure set_OptimizeOutput(value: Boolean);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    ///<summary>
    ///  Creates a deep clone of this object.
    ///</summary>
    function Clone: DNPdfSaveOptions;
    ///<summary>
    ///  Determines whether the specified object is equal in value to the current object.
    ///</summary>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the format in which the document will be saved if this save options object is used.
    ///  Can only be <see cref="F:Aspose.Words.SaveFormat.Pdf" />
    ///  .
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    ///<summary>
    ///  Allows to specify outline options.
    ///</summary>
    ///<remarks><para>Outlines can be created from headings and bookmarks.</para><para>For headings outline level is determined by the heading level.</para><para>It is possible to set the max heading level to be included into outlines or disable heading outlines at all.</para><para>For bookmarks outline level may be set in options as a default value for all bookmarks or as individual values for particular bookmarks.</para><para>Also, outlines can be exported to XPS format by using the same <see cref="P:Aspose.Words.Saving.PdfSaveOptions.OutlineOptions" />
    ///  class.</para></remarks>
    property OutlineOptions: DNOutlineOptions read get_OutlineOptions;
    ///<summary>
    ///  Specifies compression type to be used for all textual content in the document.
    ///</summary>
    ///<remarks><para>Default is <see cref="F:Aspose.Words.Saving.PdfTextCompression.Flate" />
    ///  .</para><para>Significantly increases output size when saving a document without compression.</para></remarks>
    property TextCompression: DNPdfTextCompression read get_TextCompression write set_TextCompression;
    ///<summary>
    ///  Gets or sets a value determining the quality of the JPEG images inside PDF document.
    ///</summary>
    ///<remarks><p>The default value is 100.</p>
    ///  <para>This property is used in conjunction with the <see cref="P:Aspose.Words.Saving.PdfSaveOptions.ImageCompression" />
    ///  option.</para><para>Has effect only when a document contains JPEG images.</para><para>Use this property to get or set the quality of the images inside a document when saving in PDF format.
    ///  The value may vary from 0 to 100 where 0 means worst quality but maximum compression and 100
    ///  means best quality but minimum compression.
    ///  If quality is 100 and source image is JPEG, it means no compression - original bytes will be saved.</para></remarks>
    property JpegQuality: Int32 read get_JpegQuality write set_JpegQuality;
    ///<summary>
    ///  Specifies whether to preserve Microsoft Word form fields as form fields in PDF or convert them to text.
    ///  Default is <c>false</c>.
    ///</summary>
    ///<remarks><para>Microsoft Word form fields include text input, drop down and check box controls.</para><para>When set to <c>false</c>, these fields will be exported as text to PDF. When set to <c>true</c>, these fields will be exported as PDF form fields.</para><para>When exporting form fields to PDF as form fields, some formatting loss might occur because PDF form fields do not support all features of Microsoft Word form fields.</para><para>Also, the output size depends on the content size because editable forms in Microsoft Word are inline objects.</para></remarks>
    property PreserveFormFields: Boolean read get_PreserveFormFields write set_PreserveFormFields;
    ///<summary>
    ///  Specifies whether to convert footnote/endnote references in main text story into active hyperlinks.
    ///  When clicked the hyperlink will lead to the corresponding footnote/endnote.
    ///  Default is <c>false</c>.
    ///</summary>
    property CreateNoteHyperlinks: Boolean read get_CreateNoteHyperlinks write set_CreateNoteHyperlinks;
    ///<summary>
    ///  Gets or sets the details for encrypting the output PDF document.
    ///</summary>
    ///<remarks><para>The default value is null and the output document will not be encrypted.
    ///  When this property is set to a valid <see cref="T:Aspose.Words.Saving.PdfEncryptionDetails" />
    ///  object,
    ///  then the output PDF document will be encrypted.</para><para>Note that encryption cannot be used when PDF/A compliance is set as this compliance does not permit encryption.");</para></remarks>
    property EncryptionDetails: DNPdfEncryptionDetails read get_EncryptionDetails write set_EncryptionDetails;
    ///<summary>
    ///  Gets or sets the details for signing the output PDF document.
    ///</summary>
    ///<remarks><para>At the moment digitally signing PDF documents is only available on .NET 2.0 or higher.</para><para>The default value is null and the output document will not be signed.
    ///  When this property is set to a valid <see cref="T:Aspose.Words.Saving.PdfDigitalSignatureDetails" />
    ///  object,
    ///  then the output PDF document will be digitally signed.</para></remarks>
    property DigitalSignatureDetails: DNPdfDigitalSignatureDetails read get_DigitalSignatureDetails write set_DigitalSignatureDetails;
    ///<summary>
    ///  Controls how fonts are embedded into the resulting PDF documents.
    ///</summary>
    ///<remarks><para> The default value is <c>false</c>, which means the fonts are subsetted before embedding.
    ///  Subsetting is useful if you want to keep the output file size smaller. Subsetting removes all
    ///  unused glyphs from a font.</para><para>When this value is set to <c>true</c>, a complete font file is embedded into PDF without
    ///  subsetting. This will result in larger output files, but can be a useful option when you want to
    ///  edit the resulting PDF later (e.g. add more text).</para><para> Some fonts are large (several megabytes) and embedding them without subsetting
    ///  will result in large output documents.</para></remarks>
    property EmbedFullFonts: Boolean read get_EmbedFullFonts write set_EmbedFullFonts;
    ///<summary>
    ///  Specifies the font embedding mode.
    ///</summary>
    ///<remarks><para>The default value is <see cref="F:Aspose.Words.Saving.PdfFontEmbeddingMode.EmbedAll" />
    ///  .</para><para>This setting works only for the text in ANSI (Windows-1252) encoding. If the document contains non-ANSI
    ///  text then corresponding fonts will be embedded regardless of this setting.</para><para>Note that when saving to PDF/A this option must be set to <see cref="F:Aspose.Words.Saving.PdfFontEmbeddingMode.EmbedAll" />
    ///  as all fonts must be embedded in the PDF file.</para></remarks>
    property FontEmbeddingMode: DNPdfFontEmbeddingMode read get_FontEmbeddingMode write set_FontEmbeddingMode;
    ///<summary>
    ///  Gets or sets a value determining whether or not to substitute TrueType fonts Arial, Times New Roman,
    ///  Courier New and Symbol with core PDF Type 1 fonts.
    ///</summary>
    ///<remarks><para>The default value is <c>false</c>. When this value is set to <c>true</c> Arial, Times New Roman,
    ///  Courier New and Symbol fonts are replaced in PDF document with corresponding core Type 1 font.</para><para>Core PDF fonts, or their font metrics and suitable substitution fonts, are required to be available to any
    ///  PDF viewer application.</para><para>This setting works only for the text in ANSI (Windows-1252) encoding. Non-ANSI text will be written
    ///  with embedded TrueType font regardless of this setting.</para><para>Settings core fonts to <c>true</c> is not allowed when saving to PDF/A as this compliance requires all fonts to be embedded.</para><para>This option has a higher priority then <see cref="P:Aspose.Words.Saving.PdfSaveOptions.FontEmbeddingMode" />
    ///  option.</para></remarks>
    property UseCoreFonts: Boolean read get_UseCoreFonts write set_UseCoreFonts;
    ///<summary>
    ///  Gets or sets a value determining the way <see cref="P:Aspose.Words.Document.CustomDocumentProperties" />
    ///  are exported to PDF file.
    ///  Default value is <see cref="F:Aspose.Words.Saving.PdfCustomPropertiesExport.None" />
    ///  .
    ///</summary>
    property CustomPropertiesExport: DNPdfCustomPropertiesExport read get_CustomPropertiesExport write set_CustomPropertiesExport;
    ///<summary>
    ///  Gets or sets a value determining what type of zoom should be applied when a document is opened with a PDF viewer.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.PdfZoomBehavior.None" />
    ///  , i.e. no fit is applied.
    ///</remarks>
    property ZoomBehavior: DNPdfZoomBehavior read get_ZoomBehavior write set_ZoomBehavior;
    ///<summary>
    ///  Gets or sets a value determining zoom factor (in percentages) for a document.
    ///</summary>
    ///<remarks>
    ///  This value is used only if <see cref="P:Aspose.Words.Saving.PdfSaveOptions.ZoomBehavior" />
    ///  is set to <see cref="F:Aspose.Words.Saving.PdfZoomBehavior.ZoomFactor" />
    ///  .
    ///</remarks>
    property ZoomFactor: Int32 read get_ZoomFactor write set_ZoomFactor;
    ///<summary>
    ///  Specifies compression type to be used for all images in the document.
    ///</summary>
    ///<remarks><para>Default is <see cref="F:Aspose.Words.Saving.PdfImageCompression.Auto" />
    ///  .</para><para>Using <see cref="F:Aspose.Words.Saving.PdfImageCompression.Jpeg" />
    ///  lets you control the quality of images in the output document through the <see cref="P:Aspose.Words.Saving.PdfSaveOptions.JpegQuality" />
    ///  property.</para><para>Using <see cref="F:Aspose.Words.Saving.PdfImageCompression.Jpeg" />
    ///  provides the fastest conversion speed when compared to the performance of other compression types,
    ///  but in this case, there is lossy JPEG compression.</para><para>Using <see cref="F:Aspose.Words.Saving.PdfImageCompression.Auto" />
    ///  lets to control the quality of Jpeg in the output document through the <see cref="P:Aspose.Words.Saving.PdfSaveOptions.JpegQuality" />
    ///  property,
    ///  but for other formats, raw pixel data is extracted and saved with Flate compression.
    ///  This case is slower than Jpeg conversion but lossless.</para></remarks>
    property ImageCompression: DNPdfImageCompression read get_ImageCompression write set_ImageCompression;
    ///<summary>
    ///  Gets or sets a value determining whether hyperlinks in the output Pdf document
    ///  are forced to be opened in a new window (or tab) of a browser.
    ///</summary>
    ///<remarks><para>
    ///  The default value is <c>false</c>. When this value is set to <c>true</c>
    ///  hyperlinks are saved using JavaScript code.
    ///  JavaScript code is <c>app.launchURL("URL", true);</c>,
    ///  where <c>URL</c> is a hyperlink.
    ///</para><para>
    ///  Note that if this option is set to <c>true</c> hyperlinks can't work
    ///  in some PDF readers e.g. Chrome, Firefox.
    ///</para></remarks>
    property OpenHyperlinksInNewWindow: Boolean read get_OpenHyperlinksInNewWindow write set_OpenHyperlinksInNewWindow;
    ///<summary>
    ///  Gets or sets a value determining whether or not to export document structure.
    ///</summary>
    ///<remarks><para>This value is ignored when saving to PDF/A-1a because document structure is required for this compliance.</para><para>
    ///  Note that exporting the document structure significantly increases the memory consumption, especially
    ///  for the large documents.
    ///</para></remarks>
    property ExportDocumentStructure: Boolean read get_ExportDocumentStructure write set_ExportDocumentStructure;
    ///<summary>
    ///  Gets or sets a boolean value indicating whether the document should be saved using a booklet printing layout,
    ///  if it is specified via <see cref="P:Aspose.Words.PageSetup.MultiplePages" />
    ///  .
    ///</summary>
    ///<remarks><para>
    ///  If this option is specified, <see cref="P:Aspose.Words.Saving.FixedPageSaveOptions.PageSet" />
    ///  is ignored when saving.
    ///  This behavior matches MS Word.
    ///  If book fold printing settings are not specified in page setup, this option will have no effect.
    ///</para></remarks>
    property UseBookFoldPrintingSettings: Boolean read get_UseBookFoldPrintingSettings write set_UseBookFoldPrintingSettings;
    ///<summary>
    ///  Allows to specify downsample options.
    ///</summary>
    property DownsampleOptions: DNDownsampleOptions read get_DownsampleOptions write set_DownsampleOptions;
    ///<summary>
    ///  Specifies how the PDF document should be displayed when opened in the PDF reader.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.PdfPageMode.UseOutlines" />
    ///  .
    ///</remarks>
    property PageMode: DNPdfPageMode read get_PageMode write set_PageMode;
    ///<summary>
    ///  Specifies how the color space will be selected for the images in PDF document.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.PdfImageColorSpaceExportMode.Auto" />
    ///  .
    ///  If <see cref="F:Aspose.Words.Saving.PdfImageColorSpaceExportMode.SimpleCmyk" />
    ///  value is specified,
    ///<see cref="P:Aspose.Words.Saving.PdfSaveOptions.ImageCompression" />
    ///  option is ignored and
    ///  Flate compression is used for all images in the document.
    ///</remarks>
    property ImageColorSpaceExportMode: DNPdfImageColorSpaceExportMode read get_ImageColorSpaceExportMode write set_ImageColorSpaceExportMode;
    ///<summary>
    ///  Gets or sets a value determining whether or not to preblend transparent images with black background color.
    ///</summary>
    ///<remarks><para>Preblending images may improve PDF document visual appearance in Adobe Reader and remove anti-aliasing artifacts.</para><para>In order to properly display preblended images, PDF viewer application must support /Matte entry in soft-mask image dictionary.
    ///  Also preblending images may decrease PDF rendering performance.</para><para>The default value is <c>false</c>.</para></remarks>
    property PreblendImages: Boolean read get_PreblendImages write set_PreblendImages;
    ///<summary>
    ///  A flag specifying whether the windowâ€™s title bar should display the document title taken from
    ///  the Title entry of the document information dictionary.
    ///</summary>
    ///<remarks>
    ///  If <c>false</c>, the title bar should instead display the name
    ///  of the PDF file containing the document.
    ///  <para>The default value is <c>false</c>.</para></remarks>
    property DisplayDocTitle: Boolean read get_DisplayDocTitle write set_DisplayDocTitle;
    ///<summary>
    ///  Gets or sets a value determining how DrawingML effects are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.DmlEffectsRenderingMode.Simplified" />
    ///  .
    ///  <para>This property is used when the document is exported to fixed page formats.</para><para>If <see cref="P:Aspose.Words.Saving.PdfSaveOptions.Compliance" />
    ///  is set to <see cref="F:Aspose.Words.Saving.PdfCompliance.PdfA1a" />
    ///  or <see cref="F:Aspose.Words.Saving.PdfCompliance.PdfA1b" />
    ///  ,
    ///  property always returns <see cref="F:Aspose.Words.Saving.DmlEffectsRenderingMode.None" />
    ///  .</para></remarks>
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    ///<summary>
    ///  Determines how bookmarks in headers/footers are exported.
    ///</summary>
    ///<remarks><para>The default value is <see cref="F:Aspose.Words.Saving.HeaderFooterBookmarksExportMode.All" />
    ///  .</para><para>This property is used in conjunction with the <see cref="P:Aspose.Words.Saving.PdfSaveOptions.OutlineOptions" />
    ///  option.</para></remarks>
    property HeaderFooterBookmarksExportMode: DNHeaderFooterBookmarksExportMode read get_HeaderFooterBookmarksExportMode write set_HeaderFooterBookmarksExportMode;
    ///<summary>
    ///  A flag specifying whether to write additional text positioning operators or not.
    ///</summary>
    ///<remarks><para>
    ///  If <c>true</c>, additional text positioning operators are written to the output PDF. This may help to overcome
    ///  issues with inaccurate text positioning with some printers. The downside is the increased PDF document size.
    ///</para><para>The default value is <c>false</c>.</para></remarks>
    ///<dev>
    ///  This option is introduced per enterprise customer request. See WORDSNET-18027 for more details.
    ///</dev>
    property AdditionalTextPositioning: Boolean read get_AdditionalTextPositioning write set_AdditionalTextPositioning;
    ///<summary>
    ///  A flag indicating whether image interpolation shall be performed by a conforming reader.
    ///  When <c>false</c> is specified, the flag is not written to the output document and
    ///  the default behaviour of reader is used instead.
    ///</summary>
    ///<remarks><para>
    ///  When the resolution of a source image is significantly lower than that of the output device,
    ///  each source sample covers many device pixels. As a result, images can appear jaggy or blocky.
    ///  These visual artifacts can be reduced by applying an image interpolation algorithm during rendering.
    ///  Instead of painting all pixels covered by a source sample with the same color, image interpolation
    ///  attempts to produce a smooth transition between adjacent sample values.
    ///</para><para>
    ///  A conforming Reader may choose to not implement this feature of PDF,
    ///  or may use any specific implementation of interpolation that it wishes.
    ///</para><para>The default value is <c>false</c>.</para></remarks>
    property InterpolateImages: Boolean read get_InterpolateImages write set_InterpolateImages;
    ///<summary>
    ///  Specifies the PDF standards compliance level for output documents.
    ///</summary>
    ///<remarks><para>Default is <see cref="F:Aspose.Words.Saving.PdfCompliance.Pdf17" />
    ///  .</para></remarks>
    property Compliance: DNPdfCompliance read get_Compliance write set_Compliance;
    ///<summary>
    ///  Gets or sets the pages to render.
    ///  Default is all the pages in the document.
    ///</summary>
    property PageSet: DNPageSet read get_PageSet write set_PageSet;
    ///<summary>
    ///  Allows to control how separate pages are saved when a document is exported to fixed page format.
    ///</summary>
    property PageSavingCallback: DNIPageSavingCallback read get_PageSavingCallback write set_PageSavingCallback;
    ///<summary>
    ///  Gets or sets <see cref="T:Aspose.Words.Saving.NumeralFormat" />
    ///  used for rendering of numerals.
    ///  European numerals are used by default.
    ///</summary>
    ///<remarks>
    ///  If the value of this property is changed and page layout is already built then
    ///<see cref="M:Aspose.Words.Document.UpdatePageLayout" />
    ///  is invoked automatically to update any changes.
    ///</remarks>
    property NumeralFormat: DNNumeralFormat read get_NumeralFormat write set_NumeralFormat;
    ///<summary>
    ///  Allows to specify metafile rendering options.
    ///</summary>
    property MetafileRenderingOptions: DNMetafileRenderingOptions read get_MetafileRenderingOptions write set_MetafileRenderingOptions;
    ///<summary>
    ///  Gets or sets a value determining how colors are rendered.
    ///</summary>
    ///<remarks>The default value is <see cref="F:Aspose.Words.Saving.ColorMode.Normal" />
    ///  .
    ///</remarks>
    property ColorMode: DNColorMode read get_ColorMode write set_ColorMode;
    ///<summary>
    ///  Flag indicates whether it is required to optimize output.
    ///  If this flag is set redundant nested canvases and empty canvases are removed,
    ///  also neighbor glyphs with the same formatting are concatenated.
    ///  Note: The accuracy of the content display may be affected if this property is set to true.
    ///  Default is false.
    ///</summary>
    property OptimizeOutput: Boolean read get_OptimizeOutput write set_OptimizeOutput;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNPdfSaveOptions = class(TDNGenericImport<DNPdfSaveOptionsClass, DNPdfSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNPsSaveOptionsClass = interface(DNFixedPageSaveOptionsClass)
  ['{407AC513-19E9-573C-BC13-D641B7F7DB8D}']
  { constructors } 

    {class} function init: DNPsSaveOptions;

  end;

  ///<summary>
  ///  Can be used to specify additional options when saving a document into the <see cref="F:Aspose.Words.SaveFormat.Ps" />
  ///  format.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.PsSaveOptions')]
  DNPsSaveOptions = interface(DNFixedPageSaveOptions)
  ['{BB25BA83-0E38-3987-8A91-6B68FF64AB8D}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_UseBookFoldPrintingSettings: Boolean;
    procedure set_UseBookFoldPrintingSettings(value: Boolean);
    function get_PageSet: DNPageSet;
    procedure set_PageSet(value: DNPageSet);
    function get_PageSavingCallback: DNIPageSavingCallback;
    procedure set_PageSavingCallback(value: DNIPageSavingCallback);
    function get_NumeralFormat: DNNumeralFormat;
    procedure set_NumeralFormat(value: DNNumeralFormat);
    function get_MetafileRenderingOptions: DNMetafileRenderingOptions;
    procedure set_MetafileRenderingOptions(value: DNMetafileRenderingOptions);
    function get_JpegQuality: Int32;
    procedure set_JpegQuality(value: Int32);
    function get_ColorMode: DNColorMode;
    procedure set_ColorMode(value: DNColorMode);
    function get_OptimizeOutput: Boolean;
    procedure set_OptimizeOutput(value: Boolean);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    ///<summary>
    ///  Determines whether the specified object is equal in value to the current object.
    ///</summary>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the format in which the document will be saved if this save options object is used.
    ///  Can only be <see cref="F:Aspose.Words.SaveFormat.Ps" />
    ///  .
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    ///<summary>
    ///  Gets or sets a boolean value indicating whether the document should be saved using a booklet printing layout,
    ///  if it is specified via <see cref="P:Aspose.Words.PageSetup.MultiplePages" />
    ///  .
    ///</summary>
    ///<remarks><para>
    ///  If this option is specified, <see cref="P:Aspose.Words.Saving.FixedPageSaveOptions.PageSet" />
    ///  is ignored when saving.
    ///  This behavior matches MS Word.
    ///  If book fold printing settings are not specified in page setup, this option will have no effect.
    ///</para></remarks>
    property UseBookFoldPrintingSettings: Boolean read get_UseBookFoldPrintingSettings write set_UseBookFoldPrintingSettings;
    ///<summary>
    ///  Gets or sets the pages to render.
    ///  Default is all the pages in the document.
    ///</summary>
    property PageSet: DNPageSet read get_PageSet write set_PageSet;
    ///<summary>
    ///  Allows to control how separate pages are saved when a document is exported to fixed page format.
    ///</summary>
    property PageSavingCallback: DNIPageSavingCallback read get_PageSavingCallback write set_PageSavingCallback;
    ///<summary>
    ///  Gets or sets <see cref="T:Aspose.Words.Saving.NumeralFormat" />
    ///  used for rendering of numerals.
    ///  European numerals are used by default.
    ///</summary>
    ///<remarks>
    ///  If the value of this property is changed and page layout is already built then
    ///<see cref="M:Aspose.Words.Document.UpdatePageLayout" />
    ///  is invoked automatically to update any changes.
    ///</remarks>
    property NumeralFormat: DNNumeralFormat read get_NumeralFormat write set_NumeralFormat;
    ///<summary>
    ///  Allows to specify metafile rendering options.
    ///</summary>
    property MetafileRenderingOptions: DNMetafileRenderingOptions read get_MetafileRenderingOptions write set_MetafileRenderingOptions;
    ///<summary>
    ///  Gets or sets a value determining the quality of the JPEG images inside Html document.
    ///</summary>
    ///<remarks><para>Has effect only when a document contains JPEG images.</para><p>Use this property to get or set the quality of the images inside a document when saving in fixed page format.
    ///  The value may vary from 0 to 100 where 0 means worst quality but maximum compression and 100
    ///  means best quality but minimum compression.</p>
    ///  <p>The default value is 95.</p>
    ///</remarks>
    property JpegQuality: Int32 read get_JpegQuality write set_JpegQuality;
    ///<summary>
    ///  Gets or sets a value determining how colors are rendered.
    ///</summary>
    ///<remarks>The default value is <see cref="F:Aspose.Words.Saving.ColorMode.Normal" />
    ///  .
    ///</remarks>
    property ColorMode: DNColorMode read get_ColorMode write set_ColorMode;
    ///<summary>
    ///  Flag indicates whether it is required to optimize output.
    ///  If this flag is set redundant nested canvases and empty canvases are removed,
    ///  also neighbor glyphs with the same formatting are concatenated.
    ///  Note: The accuracy of the content display may be affected if this property is set to true.
    ///  Default is false.
    ///</summary>
    property OptimizeOutput: Boolean read get_OptimizeOutput write set_OptimizeOutput;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNPsSaveOptions = class(TDNGenericImport<DNPsSaveOptionsClass, DNPsSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNSvgSaveOptionsClass = interface(DNFixedPageSaveOptionsClass)
  ['{D6C65AFC-6F81-5707-A3C7-1B7C3280C100}']
  { constructors } 

    {class} function init: DNSvgSaveOptions;

  end;

  ///<summary>
  ///  Can be used to specify additional options when saving a document into the <see cref="F:Aspose.Words.SaveFormat.Svg" />
  ///  format.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.SvgSaveOptions')]
  DNSvgSaveOptions = interface(DNFixedPageSaveOptions)
  ['{69F847AE-37ED-3E89-99FA-1962B62CD876}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_ShowPageBorder: Boolean;
    procedure set_ShowPageBorder(value: Boolean);
    function get_TextOutputMode: DNSvgTextOutputMode;
    procedure set_TextOutputMode(value: DNSvgTextOutputMode);
    function get_ResourcesFolder: string;
    procedure set_ResourcesFolder(value: string);
    function get_ResourcesFolderAlias: string;
    procedure set_ResourcesFolderAlias(value: string);
    function get_ExportEmbeddedImages: Boolean;
    procedure set_ExportEmbeddedImages(value: Boolean);
    function get_FitToViewPort: Boolean;
    procedure set_FitToViewPort(value: Boolean);
    function get_ResourceSavingCallback: DNIResourceSavingCallback;
    procedure set_ResourceSavingCallback(value: DNIResourceSavingCallback);
    function get_PageSet: DNPageSet;
    procedure set_PageSet(value: DNPageSet);
    function get_PageSavingCallback: DNIPageSavingCallback;
    procedure set_PageSavingCallback(value: DNIPageSavingCallback);
    function get_NumeralFormat: DNNumeralFormat;
    procedure set_NumeralFormat(value: DNNumeralFormat);
    function get_MetafileRenderingOptions: DNMetafileRenderingOptions;
    procedure set_MetafileRenderingOptions(value: DNMetafileRenderingOptions);
    function get_JpegQuality: Int32;
    procedure set_JpegQuality(value: Int32);
    function get_ColorMode: DNColorMode;
    procedure set_ColorMode(value: DNColorMode);
    function get_OptimizeOutput: Boolean;
    procedure set_OptimizeOutput(value: Boolean);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    ///<summary>
    ///  Determines whether the specified object is equal in value to the current object.
    ///</summary>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the format in which the document will be saved if this save options object is used.
    ///  Can only be <see cref="F:Aspose.Words.SaveFormat.Svg" />
    ///  .
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    ///<summary>
    ///  Controls whether a border is added to the outline of the page.
    ///  Default is <c>true</c>.
    ///</summary>
    property ShowPageBorder: Boolean read get_ShowPageBorder write set_ShowPageBorder;
    ///<summary>
    ///  Gets or sets a value determining how text should be rendered in SVG.
    ///</summary>
    ///<remarks><p>Use this property to get or set the mode of how text inside a document should be rendered
    ///  when saving in SVG format.</p>
    ///  <p>The default value is <see cref="F:Aspose.Words.Saving.SvgTextOutputMode.UseTargetMachineFonts" />
    ///  .</p>
    ///</remarks>
    property TextOutputMode: DNSvgTextOutputMode read get_TextOutputMode write set_TextOutputMode;
    ///<summary>
    ///  Specifies the physical folder where resources (images) are saved when exporting a document to Svg format.
    ///  Default is <c>null</c>.
    ///</summary>
    ///<remarks><p>Has effect only if <see cref="P:Aspose.Words.Saving.SvgSaveOptions.ExportEmbeddedImages" />
    ///  property is false.</p>
    ///  <p>When you save a <see cref="T:Aspose.Words.Document" />
    ///  in SVG format, Aspose.Words needs to save all
    ///  images embedded in the document as standalone files. <see cref="P:Aspose.Words.Saving.SvgSaveOptions.ResourcesFolder" />
    ///  allows you to specify where the images will be saved and <see cref="P:Aspose.Words.Saving.SvgSaveOptions.ResourcesFolderAlias" />
    ///  allows to specify how the image URIs will be constructed.</p>
    ///  <p>If you save a document into a file and provide a file name, Aspose.Words, by default, saves the
    ///  images in the same folder where the document file is saved. Use <see cref="P:Aspose.Words.Saving.SvgSaveOptions.ResourcesFolder" />
    ///  to override this behavior.</p>
    ///  <p>If you save a document into a stream, Aspose.Words does not have a folder where to save the images,
    ///  but still needs to save the images somewhere. In this case, you need to specify an accessible folder
    ///  in the <see cref="P:Aspose.Words.Saving.SvgSaveOptions.ResourcesFolder" />
    ///  property</p>
    ///<seealso cref="P:Aspose.Words.Saving.SvgSaveOptions.ResourcesFolderAlias" />
    ///</remarks>
    property ResourcesFolder: string read get_ResourcesFolder write set_ResourcesFolder;
    ///<summary>
    ///  Specifies the name of the folder used to construct image URIs written into an SVG document.
    ///  Default is <c>null</c>.
    ///</summary>
    ///<remarks><p>When you save a <see cref="T:Aspose.Words.Document" />
    ///  in SVG format, Aspose.Words needs to save all
    ///  images embedded in the document as standalone files. <see cref="P:Aspose.Words.Saving.SvgSaveOptions.ResourcesFolder" />
    ///  allows you to specify where the images will be saved and <see cref="P:Aspose.Words.Saving.SvgSaveOptions.ResourcesFolderAlias" />
    ///  allows to specify how the image URIs will be constructed.</p>
    ///<seealso cref="P:Aspose.Words.Saving.SvgSaveOptions.ResourcesFolder" />
    ///</remarks>
    property ResourcesFolderAlias: string read get_ResourcesFolderAlias write set_ResourcesFolderAlias;
    ///<summary>
    ///  Specified whether images should be embedded into SVG document as base64.
    ///  Note setting this flag can significantly increase size of output SVG file.
    ///</summary>
    property ExportEmbeddedImages: Boolean read get_ExportEmbeddedImages write set_ExportEmbeddedImages;
    ///<summary>
    ///  Specifies if the output SVG should fill the available viewport area (browser window or container).
    ///  When set to true width and height of output SVG are set to 100%.
    ///  <p>The default value is false.</p>
    ///</summary>
    property FitToViewPort: Boolean read get_FitToViewPort write set_FitToViewPort;
    ///<summary>
    ///  Allows to control how resources (images) are saved when a document is exported to SVG format.
    ///</summary>
    property ResourceSavingCallback: DNIResourceSavingCallback read get_ResourceSavingCallback write set_ResourceSavingCallback;
    ///<summary>
    ///  Gets or sets the pages to render.
    ///  Default is all the pages in the document.
    ///</summary>
    property PageSet: DNPageSet read get_PageSet write set_PageSet;
    ///<summary>
    ///  Allows to control how separate pages are saved when a document is exported to fixed page format.
    ///</summary>
    property PageSavingCallback: DNIPageSavingCallback read get_PageSavingCallback write set_PageSavingCallback;
    ///<summary>
    ///  Gets or sets <see cref="T:Aspose.Words.Saving.NumeralFormat" />
    ///  used for rendering of numerals.
    ///  European numerals are used by default.
    ///</summary>
    ///<remarks>
    ///  If the value of this property is changed and page layout is already built then
    ///<see cref="M:Aspose.Words.Document.UpdatePageLayout" />
    ///  is invoked automatically to update any changes.
    ///</remarks>
    property NumeralFormat: DNNumeralFormat read get_NumeralFormat write set_NumeralFormat;
    ///<summary>
    ///  Allows to specify metafile rendering options.
    ///</summary>
    property MetafileRenderingOptions: DNMetafileRenderingOptions read get_MetafileRenderingOptions write set_MetafileRenderingOptions;
    ///<summary>
    ///  Gets or sets a value determining the quality of the JPEG images inside Html document.
    ///</summary>
    ///<remarks><para>Has effect only when a document contains JPEG images.</para><p>Use this property to get or set the quality of the images inside a document when saving in fixed page format.
    ///  The value may vary from 0 to 100 where 0 means worst quality but maximum compression and 100
    ///  means best quality but minimum compression.</p>
    ///  <p>The default value is 95.</p>
    ///</remarks>
    property JpegQuality: Int32 read get_JpegQuality write set_JpegQuality;
    ///<summary>
    ///  Gets or sets a value determining how colors are rendered.
    ///</summary>
    ///<remarks>The default value is <see cref="F:Aspose.Words.Saving.ColorMode.Normal" />
    ///  .
    ///</remarks>
    property ColorMode: DNColorMode read get_ColorMode write set_ColorMode;
    ///<summary>
    ///  Flag indicates whether it is required to optimize output.
    ///  If this flag is set redundant nested canvases and empty canvases are removed,
    ///  also neighbor glyphs with the same formatting are concatenated.
    ///  Note: The accuracy of the content display may be affected if this property is set to true.
    ///  Default is false.
    ///</summary>
    property OptimizeOutput: Boolean read get_OptimizeOutput write set_OptimizeOutput;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNSvgSaveOptions = class(TDNGenericImport<DNSvgSaveOptionsClass, DNSvgSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNXamlFixedSaveOptionsClass = interface(DNFixedPageSaveOptionsClass)
  ['{91668CBA-988B-569D-8EA1-1941FB01C6E1}']
  { constructors } 

    {class} function init: DNXamlFixedSaveOptions;

  end;

  ///<summary>
  ///  Can be used to specify additional options when saving a document into the <see cref="F:Aspose.Words.SaveFormat.XamlFixed" />
  ///  format.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.XamlFixedSaveOptions')]
  DNXamlFixedSaveOptions = interface(DNFixedPageSaveOptions)
  ['{CA17D521-691C-395C-9A26-DF7CAEB12E7A}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_ResourcesFolder: string;
    procedure set_ResourcesFolder(value: string);
    function get_ResourcesFolderAlias: string;
    procedure set_ResourcesFolderAlias(value: string);
    function get_ResourceSavingCallback: DNIResourceSavingCallback;
    procedure set_ResourceSavingCallback(value: DNIResourceSavingCallback);
    function get_PageSet: DNPageSet;
    procedure set_PageSet(value: DNPageSet);
    function get_PageSavingCallback: DNIPageSavingCallback;
    procedure set_PageSavingCallback(value: DNIPageSavingCallback);
    function get_NumeralFormat: DNNumeralFormat;
    procedure set_NumeralFormat(value: DNNumeralFormat);
    function get_MetafileRenderingOptions: DNMetafileRenderingOptions;
    procedure set_MetafileRenderingOptions(value: DNMetafileRenderingOptions);
    function get_JpegQuality: Int32;
    procedure set_JpegQuality(value: Int32);
    function get_ColorMode: DNColorMode;
    procedure set_ColorMode(value: DNColorMode);
    function get_OptimizeOutput: Boolean;
    procedure set_OptimizeOutput(value: Boolean);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    ///<summary>
    ///  Determines whether the specified object is equal in value to the current object.
    ///</summary>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the format in which the document will be saved if this save options object is used.
    ///  Can only be <see cref="F:Aspose.Words.SaveFormat.XamlFixed" />
    ///  .
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    ///<summary>
    ///  Specifies the physical folder where resources (images and fonts) are saved when exporting a document to fixed page Xaml format.
    ///  Default is <c>null</c>.
    ///</summary>
    ///<remarks><p>When you save a <see cref="T:Aspose.Words.Document" />
    ///  in fixed page Xaml format, Aspose.Words needs to save all
    ///  images embedded in the document as standalone files. <see cref="P:Aspose.Words.Saving.XamlFixedSaveOptions.ResourcesFolder" />
    ///  allows you to specify where the images will be saved and <see cref="P:Aspose.Words.Saving.XamlFixedSaveOptions.ResourcesFolderAlias" />
    ///  allows to specify how the image URIs will be constructed.</p>
    ///  <p>If you save a document into a file and provide a file name, Aspose.Words, by default, saves the
    ///  images in the same folder where the document file is saved. Use <see cref="P:Aspose.Words.Saving.XamlFixedSaveOptions.ResourcesFolder" />
    ///  to override this behavior.</p>
    ///  <p>If you save a document into a stream, Aspose.Words does not have a folder where to save the images,
    ///  but still needs to save the images somewhere. In this case, you need to specify an accessible folder
    ///  by using the <see cref="P:Aspose.Words.Saving.XamlFixedSaveOptions.ResourcesFolder" />
    ///  property</p>
    ///<seealso cref="P:Aspose.Words.Saving.XamlFixedSaveOptions.ResourcesFolderAlias" />
    ///</remarks>
    property ResourcesFolder: string read get_ResourcesFolder write set_ResourcesFolder;
    ///<summary>
    ///  Specifies the name of the folder used to construct image URIs written into an fixed page Xaml document.
    ///  Default is <c>null</c>.
    ///</summary>
    ///<remarks><p>When you save a <see cref="T:Aspose.Words.Document" />
    ///  in fixed page Xaml format, Aspose.Words needs to save all
    ///  images embedded in the document as standalone files. <see cref="P:Aspose.Words.Saving.XamlFixedSaveOptions.ResourcesFolder" />
    ///  allows you to specify where the images will be saved and <see cref="P:Aspose.Words.Saving.XamlFixedSaveOptions.ResourcesFolderAlias" />
    ///  allows to specify how the image URIs will be constructed.</p>
    ///<seealso cref="P:Aspose.Words.Saving.XamlFixedSaveOptions.ResourcesFolder" />
    ///</remarks>
    property ResourcesFolderAlias: string read get_ResourcesFolderAlias write set_ResourcesFolderAlias;
    ///<summary>
    ///  Allows to control how resources (images and fonts) are saved when a document is exported to fixed page Xaml format.
    ///</summary>
    property ResourceSavingCallback: DNIResourceSavingCallback read get_ResourceSavingCallback write set_ResourceSavingCallback;
    ///<summary>
    ///  Gets or sets the pages to render.
    ///  Default is all the pages in the document.
    ///</summary>
    property PageSet: DNPageSet read get_PageSet write set_PageSet;
    ///<summary>
    ///  Allows to control how separate pages are saved when a document is exported to fixed page format.
    ///</summary>
    property PageSavingCallback: DNIPageSavingCallback read get_PageSavingCallback write set_PageSavingCallback;
    ///<summary>
    ///  Gets or sets <see cref="T:Aspose.Words.Saving.NumeralFormat" />
    ///  used for rendering of numerals.
    ///  European numerals are used by default.
    ///</summary>
    ///<remarks>
    ///  If the value of this property is changed and page layout is already built then
    ///<see cref="M:Aspose.Words.Document.UpdatePageLayout" />
    ///  is invoked automatically to update any changes.
    ///</remarks>
    property NumeralFormat: DNNumeralFormat read get_NumeralFormat write set_NumeralFormat;
    ///<summary>
    ///  Allows to specify metafile rendering options.
    ///</summary>
    property MetafileRenderingOptions: DNMetafileRenderingOptions read get_MetafileRenderingOptions write set_MetafileRenderingOptions;
    ///<summary>
    ///  Gets or sets a value determining the quality of the JPEG images inside Html document.
    ///</summary>
    ///<remarks><para>Has effect only when a document contains JPEG images.</para><p>Use this property to get or set the quality of the images inside a document when saving in fixed page format.
    ///  The value may vary from 0 to 100 where 0 means worst quality but maximum compression and 100
    ///  means best quality but minimum compression.</p>
    ///  <p>The default value is 95.</p>
    ///</remarks>
    property JpegQuality: Int32 read get_JpegQuality write set_JpegQuality;
    ///<summary>
    ///  Gets or sets a value determining how colors are rendered.
    ///</summary>
    ///<remarks>The default value is <see cref="F:Aspose.Words.Saving.ColorMode.Normal" />
    ///  .
    ///</remarks>
    property ColorMode: DNColorMode read get_ColorMode write set_ColorMode;
    ///<summary>
    ///  Flag indicates whether it is required to optimize output.
    ///  If this flag is set redundant nested canvases and empty canvases are removed,
    ///  also neighbor glyphs with the same formatting are concatenated.
    ///  Note: The accuracy of the content display may be affected if this property is set to true.
    ///  Default is false.
    ///</summary>
    property OptimizeOutput: Boolean read get_OptimizeOutput write set_OptimizeOutput;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNXamlFixedSaveOptions = class(TDNGenericImport<DNXamlFixedSaveOptionsClass, DNXamlFixedSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNXpsSaveOptionsClass = interface(DNFixedPageSaveOptionsClass)
  ['{A3DC1193-2F71-5F6E-8FE2-24C77DA103B5}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class that can be used to save a document
    ///  in the <see cref="F:Aspose.Words.SaveFormat.Xps" />
    ///  format.
    ///</summary>
    {class} function init: DNXpsSaveOptions; overload;
    ///<summary>
    ///  Initializes a new instance of this class that can be used to save a document
    ///  in the <see cref="F:Aspose.Words.SaveFormat.Xps" />
    ///  or <see cref="F:Aspose.Words.SaveFormat.OpenXps" />
    ///  format.
    ///</summary>
    {class} function init(saveFormat: DNSaveFormat): DNXpsSaveOptions; overload;

  end;

  ///<summary>
  ///  Can be used to specify additional options when saving a document into the <see cref="F:Aspose.Words.SaveFormat.Xps" />
  ///  format.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.XpsSaveOptions')]
  DNXpsSaveOptions = interface(DNFixedPageSaveOptions)
  ['{C6F78792-EA5F-35F9-B2C0-501850CC136C}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_OutlineOptions: DNOutlineOptions;
    function get_UseBookFoldPrintingSettings: Boolean;
    procedure set_UseBookFoldPrintingSettings(value: Boolean);
    function get_PageSet: DNPageSet;
    procedure set_PageSet(value: DNPageSet);
    function get_PageSavingCallback: DNIPageSavingCallback;
    procedure set_PageSavingCallback(value: DNIPageSavingCallback);
    function get_NumeralFormat: DNNumeralFormat;
    procedure set_NumeralFormat(value: DNNumeralFormat);
    function get_MetafileRenderingOptions: DNMetafileRenderingOptions;
    procedure set_MetafileRenderingOptions(value: DNMetafileRenderingOptions);
    function get_JpegQuality: Int32;
    procedure set_JpegQuality(value: Int32);
    function get_ColorMode: DNColorMode;
    procedure set_ColorMode(value: DNColorMode);
    function get_OptimizeOutput: Boolean;
    procedure set_OptimizeOutput(value: Boolean);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    ///<summary>
    ///  Determines whether the specified object is equal in value to the current object.
    ///</summary>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the format in which the document will be saved if this save options object is used.
    ///  Can only be <see cref="F:Aspose.Words.SaveFormat.Xps" />
    ///  .
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    ///<summary>
    ///  Allows to specify outline options.
    ///</summary>
    ///<remarks><para>Note that ExpandedOutlineLevels option will not work when saving to XPS.</para></remarks>
    property OutlineOptions: DNOutlineOptions read get_OutlineOptions;
    ///<summary>
    ///  Gets or sets a boolean value indicating whether the document should be saved using a booklet printing layout,
    ///  if it is specified via <see cref="P:Aspose.Words.PageSetup.MultiplePages" />
    ///  .
    ///</summary>
    ///<remarks><para>
    ///  If this option is specified, <see cref="P:Aspose.Words.Saving.FixedPageSaveOptions.PageSet" />
    ///  is ignored when saving.
    ///  This behavior matches MS Word.
    ///  If book fold printing settings are not specified in page setup, this option will have no effect.
    ///</para></remarks>
    property UseBookFoldPrintingSettings: Boolean read get_UseBookFoldPrintingSettings write set_UseBookFoldPrintingSettings;
    ///<summary>
    ///  Gets or sets the pages to render.
    ///  Default is all the pages in the document.
    ///</summary>
    property PageSet: DNPageSet read get_PageSet write set_PageSet;
    ///<summary>
    ///  Allows to control how separate pages are saved when a document is exported to fixed page format.
    ///</summary>
    property PageSavingCallback: DNIPageSavingCallback read get_PageSavingCallback write set_PageSavingCallback;
    ///<summary>
    ///  Gets or sets <see cref="T:Aspose.Words.Saving.NumeralFormat" />
    ///  used for rendering of numerals.
    ///  European numerals are used by default.
    ///</summary>
    ///<remarks>
    ///  If the value of this property is changed and page layout is already built then
    ///<see cref="M:Aspose.Words.Document.UpdatePageLayout" />
    ///  is invoked automatically to update any changes.
    ///</remarks>
    property NumeralFormat: DNNumeralFormat read get_NumeralFormat write set_NumeralFormat;
    ///<summary>
    ///  Allows to specify metafile rendering options.
    ///</summary>
    property MetafileRenderingOptions: DNMetafileRenderingOptions read get_MetafileRenderingOptions write set_MetafileRenderingOptions;
    ///<summary>
    ///  Gets or sets a value determining the quality of the JPEG images inside Html document.
    ///</summary>
    ///<remarks><para>Has effect only when a document contains JPEG images.</para><p>Use this property to get or set the quality of the images inside a document when saving in fixed page format.
    ///  The value may vary from 0 to 100 where 0 means worst quality but maximum compression and 100
    ///  means best quality but minimum compression.</p>
    ///  <p>The default value is 95.</p>
    ///</remarks>
    property JpegQuality: Int32 read get_JpegQuality write set_JpegQuality;
    ///<summary>
    ///  Gets or sets a value determining how colors are rendered.
    ///</summary>
    ///<remarks>The default value is <see cref="F:Aspose.Words.Saving.ColorMode.Normal" />
    ///  .
    ///</remarks>
    property ColorMode: DNColorMode read get_ColorMode write set_ColorMode;
    ///<summary>
    ///  Flag indicates whether it is required to optimize output.
    ///  If this flag is set redundant nested canvases and empty canvases are removed,
    ///  also neighbor glyphs with the same formatting are concatenated.
    ///  Note: The accuracy of the content display may be affected if this property is set to true.
    ///  Default is false.
    ///</summary>
    property OptimizeOutput: Boolean read get_OptimizeOutput write set_OptimizeOutput;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNXpsSaveOptions = class(TDNGenericImport<DNXpsSaveOptionsClass, DNXpsSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNHtmlSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{4A46DB8B-5958-5873-A8B1-D31B03D3AA8C}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class that can be used to save a document
    ///  in the <see cref="F:Aspose.Words.SaveFormat.Html" />
    ///  format.
    ///</summary>
    {class} function init: DNHtmlSaveOptions; overload;
    ///<summary>
    ///  Initializes a new instance of this class that can be used to save a document
    ///  in the <see cref="F:Aspose.Words.SaveFormat.Html" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Mhtml" />
    ///  or <see cref="F:Aspose.Words.SaveFormat.Epub" />
    ///  format.
    ///</summary>
    ///  <param name="saveFormat">Can be <see cref="F:Aspose.Words.SaveFormat.Html" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Mhtml" />
    ///  or <see cref="F:Aspose.Words.SaveFormat.Epub" />
    ///  .</param>
    {class} function init(saveFormat: DNSaveFormat): DNHtmlSaveOptions; overload;

  end;

  ///<summary>
  ///  Can be used to specify additional options when saving a document into the <see cref="F:Aspose.Words.SaveFormat.Html" />
  ///  ,
  ///<see cref="F:Aspose.Words.SaveFormat.Mhtml" />
  ///  or <see cref="F:Aspose.Words.SaveFormat.Epub" />
  ///  format.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.HtmlSaveOptions')]
  DNHtmlSaveOptions = interface(DNSaveOptions)
  ['{5BA53B75-29CD-307A-B2A1-76B33A8C3D0B}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_AllowNegativeIndent: Boolean;
    procedure set_AllowNegativeIndent(value: Boolean);
    function get_CssStyleSheetFileName: string;
    procedure set_CssStyleSheetFileName(value: string);
    function get_CssStyleSheetType: DNCssStyleSheetType;
    procedure set_CssStyleSheetType(value: DNCssStyleSheetType);
    function get_CssClassNamePrefix: string;
    procedure set_CssClassNamePrefix(value: string);
    function get_DocumentPartSavingCallback: DNIDocumentPartSavingCallback;
    procedure set_DocumentPartSavingCallback(value: DNIDocumentPartSavingCallback);
    function get_CssSavingCallback: DNICssSavingCallback;
    procedure set_CssSavingCallback(value: DNICssSavingCallback);
    function get_DocumentSplitCriteria: DNDocumentSplitCriteria;
    procedure set_DocumentSplitCriteria(value: DNDocumentSplitCriteria);
    function get_DocumentSplitHeadingLevel: Int32;
    procedure set_DocumentSplitHeadingLevel(value: Int32);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_EpubNavigationMapLevel: Int32;
    procedure set_EpubNavigationMapLevel(value: Int32);
    function get_ExportDocumentProperties: Boolean;
    procedure set_ExportDocumentProperties(value: Boolean);
    function get_ExportFontResources: Boolean;
    procedure set_ExportFontResources(value: Boolean);
    function get_ExportFontsAsBase64: Boolean;
    procedure set_ExportFontsAsBase64(value: Boolean);
    function get_ExportHeadersFootersMode: DNExportHeadersFootersMode;
    procedure set_ExportHeadersFootersMode(value: DNExportHeadersFootersMode);
    function get_ExportImagesAsBase64: Boolean;
    procedure set_ExportImagesAsBase64(value: Boolean);
    function get_ExportLanguageInformation: Boolean;
    procedure set_ExportLanguageInformation(value: Boolean);
    function get_ExportListLabels: DNExportListLabels;
    procedure set_ExportListLabels(value: DNExportListLabels);
    function get_MetafileFormat: DNHtmlMetafileFormat;
    procedure set_MetafileFormat(value: DNHtmlMetafileFormat);
    function get_ExportPageSetup: Boolean;
    procedure set_ExportPageSetup(value: Boolean);
    function get_ExportPageMargins: Boolean;
    procedure set_ExportPageMargins(value: Boolean);
    function get_ExportRelativeFontSize: Boolean;
    procedure set_ExportRelativeFontSize(value: Boolean);
    function get_ExportTextInputFormFieldAsText: Boolean;
    procedure set_ExportTextInputFormFieldAsText(value: Boolean);
    function get_ExportTextBoxAsSvg: Boolean;
    procedure set_ExportTextBoxAsSvg(value: Boolean);
    function get_ExportDropDownFormFieldAsText: Boolean;
    procedure set_ExportDropDownFormFieldAsText(value: Boolean);
    function get_ExportTocPageNumbers: Boolean;
    procedure set_ExportTocPageNumbers(value: Boolean);
    function get_ExportXhtmlTransitional: Boolean;
    procedure set_ExportXhtmlTransitional(value: Boolean);
    function get_HtmlVersion: DNHtmlVersion;
    procedure set_HtmlVersion(value: DNHtmlVersion);
    function get_ExportRoundtripInformation: Boolean;
    procedure set_ExportRoundtripInformation(value: Boolean);
    function get_ResourceFolder: string;
    procedure set_ResourceFolder(value: string);
    function get_ResourceFolderAlias: string;
    procedure set_ResourceFolderAlias(value: string);
    function get_FontsFolder: string;
    procedure set_FontsFolder(value: string);
    function get_FontsFolderAlias: string;
    procedure set_FontsFolderAlias(value: string);
    function get_FontResourcesSubsettingSizeThreshold: Int32;
    procedure set_FontResourcesSubsettingSizeThreshold(value: Int32);
    function get_FontSavingCallback: DNIFontSavingCallback;
    procedure set_FontSavingCallback(value: DNIFontSavingCallback);
    function get_ImagesFolder: string;
    procedure set_ImagesFolder(value: string);
    function get_ImagesFolderAlias: string;
    procedure set_ImagesFolderAlias(value: string);
    function get_ImageResolution: Int32;
    procedure set_ImageResolution(value: Int32);
    function get_ImageSavingCallback: DNIImageSavingCallback;
    procedure set_ImageSavingCallback(value: DNIImageSavingCallback);
    function get_ScaleImageToShapeSize: Boolean;
    procedure set_ScaleImageToShapeSize(value: Boolean);
    function get_TableWidthOutputMode: DNHtmlElementSizeOutputMode;
    procedure set_TableWidthOutputMode(value: DNHtmlElementSizeOutputMode);
    function get_OfficeMathOutputMode: DNHtmlOfficeMathOutputMode;
    procedure set_OfficeMathOutputMode(value: DNHtmlOfficeMathOutputMode);
    function get_ExportOriginalUrlForLinkedImages: Boolean;
    procedure set_ExportOriginalUrlForLinkedImages(value: Boolean);
    function get_ExportCidUrlsForMhtmlResources: Boolean;
    procedure set_ExportCidUrlsForMhtmlResources(value: Boolean);
    function get_ResolveFontNames: Boolean;
    procedure set_ResolveFontNames(value: Boolean);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the format in which the document will be saved if this save options object is used.
    ///  Can be <see cref="F:Aspose.Words.SaveFormat.Html" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Mhtml" />
    ///  or <see cref="F:Aspose.Words.SaveFormat.Epub" />
    ///  .
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    ///<summary>
    ///  Specifies whether negative left and right indents of paragraphs are normalized
    ///  when saving to HTML, MHTML or EPUB. Default value is <c>false</c>.
    ///</summary>
    ///<remarks><para>When negative indent is not allowed, it is exported as zero margin to HTML.
    ///  When negative indent is allowed, a paragraph might appear partially outside of the
    ///  browser window.</para></remarks>
    property AllowNegativeIndent: Boolean read get_AllowNegativeIndent write set_AllowNegativeIndent;
    ///<summary>
    ///  Specifies the path and the name of the Cascading Style Sheet (CSS) file written when a document
    ///  is exported to HTML.
    ///  Default is an empty string.
    ///</summary>
    ///<remarks><para>This property has effect only when saving a document to HTML format
    ///  and external CSS style sheet is requested using <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.CssStyleSheetType" />
    ///  .</para><para>If this property is empty, the CSS file will be saved into the same folder and with the same name as the HTML
    ///  document but with the ".css" extension.</para><para>If only path but no file name is specified in this property, the CSS file will be saved into the specified
    ///  folder and will have the same name as the HTML document but with the ".css" extension.</para><para>If the folder specified by this property doesn't exist, it will be created automatically before the CSS file
    ///  is saved.</para><para>Another way to specify a folder where external CSS file is saved is to use <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ResourceFolder" />
    ///  .
    ///</para><seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.ResourceFolder" />
    ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.ResourceFolderAlias" />
    ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.CssStyleSheetType" />
    ///</remarks>
    property CssStyleSheetFileName: string read get_CssStyleSheetFileName write set_CssStyleSheetFileName;
    ///<summary>
    ///  Specifies how CSS (Cascading Style Sheet) styles are exported to HTML, MHTML or EPUB.
    ///  Default value is <see cref="F:Aspose.Words.Saving.CssStyleSheetType.Inline" />
    ///  for HTML/MHTML and
    ///<see cref="F:Aspose.Words.Saving.CssStyleSheetType.External" />
    ///  for EPUB.
    ///</summary>
    ///<remarks><para>Saving CSS style sheet into an external file is only supported when saving to HTML.
    ///  When you are exporting to one of the container formats (EPUB or MHTML) and specifying
    ///<see cref="F:Aspose.Words.Saving.CssStyleSheetType.External" />
    ///  , CSS file will be encapsulated
    ///  into the output package.</para></remarks>
    ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.CssStyleSheetFileName" />
    property CssStyleSheetType: DNCssStyleSheetType read get_CssStyleSheetType write set_CssStyleSheetType;
    ///<summary>
    ///  Specifies a prefix which is added to all CSS class names.
    ///  Default value is an empty string and generated CSS class names have no common prefix.
    ///</summary>
    ///<remarks><para>If this value is not empty, all CSS classes generated by Aspose.Words will start with the specified prefix.
    ///  This might be useful, for example, if you add custom CSS to generated documents and want to prevent class
    ///  name conflicts.</para><para>If the value is not <c>null</c> or empty, it must be a valid CSS identifier.</para></remarks>
    ///<exception cref="T:System.ArgumentException">The value is not empty and is not a valid CSS identifier.</exception>
    property CssClassNamePrefix: string read get_CssClassNamePrefix write set_CssClassNamePrefix;
    ///<summary>
    ///  Allows to control how document parts are saved when a document is saved to HTML or EPUB.
    ///</summary>
    property DocumentPartSavingCallback: DNIDocumentPartSavingCallback read get_DocumentPartSavingCallback write set_DocumentPartSavingCallback;
    ///<summary>
    ///  Allows to control how CSS styles are saved when a document is saved to HTML, MHTML or EPUB.
    ///</summary>
    property CssSavingCallback: DNICssSavingCallback read get_CssSavingCallback write set_CssSavingCallback;
    ///<summary>
    ///  Specifies how the document should be split when saving to <see cref="F:Aspose.Words.SaveFormat.Html" />
    ///  or <see cref="F:Aspose.Words.SaveFormat.Epub" />
    ///  format.
    ///  Default is <see cref="F:Aspose.Words.Saving.DocumentSplitCriteria.None" />
    ///  for HTML and
    ///<see cref="F:Aspose.Words.Saving.DocumentSplitCriteria.HeadingParagraph" />
    ///  for EPUB.
    ///</summary>
    ///<remarks><para>Normally you would want a document saved to HTML as a single file.
    ///  But in some cases it is preferable to split the output into several smaller HTML pages.
    ///  When saving to HTML format these pages will be output to individual files or streams.
    ///  When saving to EPUB format they will be incorporated into corresponding packages.</para><para>A document cannot be split when saving in the MHTML format.</para><seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.DocumentSplitHeadingLevel" />
    ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.DocumentPartSavingCallback" />
    ///</remarks>
    property DocumentSplitCriteria: DNDocumentSplitCriteria read get_DocumentSplitCriteria write set_DocumentSplitCriteria;
    ///<summary>
    ///  Specifies the maximum level of headings at which to split the document.
    ///  Default value is <c>2</c>.
    ///</summary>
    ///<remarks><para>When <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.DocumentSplitCriteria" />
    ///  includes <see cref="F:Aspose.Words.Saving.DocumentSplitCriteria.HeadingParagraph" />
    ///  and this property is set to a value from 1 to 9, the document will be split at paragraphs formatted using
    ///<b>Heading 1</b>
    ///  , <b>Heading 2</b>
    ///  , <b>Heading 3</b>
    ///  etc. styles up to the specified heading level.</para><para>By default, only <b>Heading 1</b>
    ///  and <b>Heading 2</b>
    ///  paragraphs cause the document to be split.
    ///  Setting this property to zero will cause the document not to be split at heading paragraphs at all.</para><seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.DocumentSplitCriteria" />
    ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.DocumentPartSavingCallback" />
    ///</remarks>
    property DocumentSplitHeadingLevel: Int32 read get_DocumentSplitHeadingLevel write set_DocumentSplitHeadingLevel;
    ///<summary>
    ///  Specifies the encoding to use when exporting to HTML, MHTML or EPUB.
    ///  Default value is <c>new UTF8Encoding(false)</c> (UTF-8 without BOM).
    ///</summary>
    ///<remarks></remarks>
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    ///<summary>
    ///  Specifies the maximum level of headings populated to the navigation map when exporting to IDPF EPUB format.
    ///  Default value is <c>3</c>.
    ///</summary>
    ///<remarks><para>Navigation map in IDPF EPUB format allows user agents to provide easy way of navigation
    ///  through the document structure. Usually navigation points correspond to headings in the document.
    ///  To populate headings up to level <b>N</b>
    ///  assign this value to <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.EpubNavigationMapLevel" />
    ///  .</para><para>By default, three levels of headings are populated: paragraphs of styles <b>Heading 1</b>
    ///  , <b>Heading 2</b>
    ///  and <b>Heading 3</b>
    ///  .
    ///  You can set this property to a value from 1 to 9 to request corresponding maximum level.
    ///  Setting it to zero will reduce navigation map to only document root or roots of document parts.</para></remarks>
    property EpubNavigationMapLevel: Int32 read get_EpubNavigationMapLevel write set_EpubNavigationMapLevel;
    ///<summary>
    ///  Specifies whether to export built-in and custom document properties to HTML, MHTML or EPUB.
    ///  Default value is <c>false</c>.
    ///</summary>
    property ExportDocumentProperties: Boolean read get_ExportDocumentProperties write set_ExportDocumentProperties;
    ///<summary>
    ///  Specifies whether font resources should be exported to HTML, MHTML or EPUB.
    ///  Default is <c>false</c>.
    ///</summary>
    ///<remarks><para>Exporting font resources allows for consistent document rendering independent of the fonts available
    ///  in a given user's environment.</para><para>If <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ExportFontResources" />
    ///  is set to <c>true</c>, main HTML document will refer to every font via
    ///  the CSS 3 <b>@font-face</b>
    ///  at-rule and fonts will be output as separate files. When exporting to IDPF EPUB or MHTML
    ///  formats, fonts will be embedded into the corresponding package along with other subsidiary files.</para><para>If <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ExportFontsAsBase64" />
    ///  is set to <c>true</c>, fonts will not be saved to separate files.
    ///  Instead, they will be embedded into <b>@font-face</b>
    ///  at-rules in Base64 encoding.</para><p><b>Important!</b>
    ///  When exporting font resources, font licensing issues should be considered. Authors who want to use specific fonts via a downloadable
    ///  font mechanism must always carefully verify that their intended use is within the scope of the font license. Many commercial fonts presently do not
    ///  allow web downloading of their fonts in any form. License agreements that cover some fonts specifically note that usage via <b>@font-face</b>
    ///  rules
    ///  in CSS style sheets is not allowed. Font subsetting can also violate license terms.
    ///</p>
    ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontResourcesSubsettingSizeThreshold" />
    ///</remarks>
    property ExportFontResources: Boolean read get_ExportFontResources write set_ExportFontResources;
    ///<summary>
    ///  Specifies whether fonts resources should be embedded to HTML in Base64 encoding.
    ///  Default is <c>false</c>.
    ///</summary>
    ///<remarks><para>By default, fonts are written to separate files. If this option is set to <c>true</c>, fonts will be embedded
    ///  into the document's CSS in Base64 encoding.</para></remarks>
    property ExportFontsAsBase64: Boolean read get_ExportFontsAsBase64 write set_ExportFontsAsBase64;
    ///<summary>
    ///  Specifies how headers and footers are output to HTML, MHTML or EPUB.
    ///  Default value is <see cref="F:Aspose.Words.Saving.ExportHeadersFootersMode.PerSection" />
    ///  for HTML/MHTML
    ///  and <see cref="F:Aspose.Words.Saving.ExportHeadersFootersMode.None" />
    ///  for EPUB.
    ///</summary>
    ///<remarks><para>It is hard to meaningfully output headers and footers to HTML because HTML is not paginated.</para><para>When this property is <see cref="F:Aspose.Words.Saving.ExportHeadersFootersMode.PerSection" />
    ///  , Aspose.Words exports
    ///  only primary headers and footers at the beginning and the end of each section.</para><para>When it is <see cref="F:Aspose.Words.Saving.ExportHeadersFootersMode.FirstSectionHeaderLastSectionFooter" />
    ///  only first primary header and the last primary footer (including linked to previous) are exported.</para><para>You can disable export of headers and footers altogether by setting this property
    ///  to <see cref="F:Aspose.Words.Saving.ExportHeadersFootersMode.None" />
    ///  .</para></remarks>
    property ExportHeadersFootersMode: DNExportHeadersFootersMode read get_ExportHeadersFootersMode write set_ExportHeadersFootersMode;
    ///<summary>
    ///  Specifies whether images are saved in Base64 format to HTML, MHTML or EPUB.
    ///  Default is <c>false</c>.
    ///</summary>
    ///<remarks><para>When this property is set to <c>true</c> image data is exported directly on the <b>img</b>
    ///  elements
    ///  and separate files are not created.</para></remarks>
    property ExportImagesAsBase64: Boolean read get_ExportImagesAsBase64 write set_ExportImagesAsBase64;
    ///<summary>
    ///  Specifies whether language information is exported to HTML, MHTML or EPUB.
    ///  Default is <c>false</c>.
    ///</summary>
    ///<remarks><para>When this property is set to <c>true</c> Aspose.Words outputs <b>lang</b>
    ///  HTML attribute on the document
    ///  elements that specify language. This can be needed to preserve language related semantics.</para></remarks>
    property ExportLanguageInformation: Boolean read get_ExportLanguageInformation write set_ExportLanguageInformation;
    ///<summary>
    ///  Controls how list labels are output to HTML, MHTML or EPUB.
    ///  Default value is <see cref="F:Aspose.Words.Saving.ExportListLabels.Auto" />
    ///  .
    ///</summary>
    property ExportListLabels: DNExportListLabels read get_ExportListLabels write set_ExportListLabels;
    ///<summary>
    ///  Specifies in what format metafiles are saved when exporting to HTML, MHTML, or EPUB.
    ///  Default value is <see cref="F:Aspose.Words.Saving.HtmlMetafileFormat.Png" />
    ///  , meaning that metafiles are rendered to raster PNG images.
    ///</summary>
    ///<remarks><para>Metafiles are not natively displayed by HTML browsers. By default, Aspose.Words converts WMF and EMF
    ///  images into PNG files when exporting to HTML. Other options are to convert metafiles to SVG images or to export
    ///  them as is without conversion.</para><para>Some image transforms, in particular image cropping, will not be applied to metafile images if they
    ///  are exported to HTML without conversion.</para></remarks>
    ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImageResolution" />
    ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.ScaleImageToShapeSize" />
    property MetafileFormat: DNHtmlMetafileFormat read get_MetafileFormat write set_MetafileFormat;
    ///<summary>
    ///  Specifies whether page setup is exported to HTML, MHTML or EPUB.
    ///  Default is <c>false</c>.
    ///</summary>
    ///<remarks><para>Each <see cref="T:Aspose.Words.Section" />
    ///  in Aspose.Words document model provides page setup information
    ///  via <see cref="T:Aspose.Words.PageSetup" />
    ///  class. When you export a document to HTML format you might need to keep this information
    ///  for further usage. In particular, page setup might be important for rendering to paged media (printing)
    ///  or subsequent conversion to the native Microsoft Word file formats (DOCX, DOC, RTF, WML).</para><para>In most cases HTML is intended for viewing in browsers where pagination is not performed. So this feature
    ///  is inactive by default.</para></remarks>
    property ExportPageSetup: Boolean read get_ExportPageSetup write set_ExportPageSetup;
    ///<summary>
    ///  Specifies whether page margins is exported to HTML, MHTML or EPUB.
    ///  Default is <c>false</c>.
    ///</summary>
    ///<remarks>
    ///  Aspose.Words does not show area of page margins by default.
    ///  If any elements are completely or partially clipped by the document edge the displayed area can be extended with
    ///  this option.
    ///</remarks>
    property ExportPageMargins: Boolean read get_ExportPageMargins write set_ExportPageMargins;
    ///<summary>
    ///  Specifies whether font sizes should be output in relative units when saving to HTML, MHTML or EPUB.
    ///  Default is <c>false</c>.
    ///</summary>
    ///<remarks><para>In many existing documents (HTML, IDPF EPUB) font sizes are specified in relative units. This allows
    ///  applications to adjust text size when viewing/processing documents. For instance, Microsoft Internet Explorer
    ///  has "View-&gt;Text Size" submenu, Adobe Digital Editions has two buttons: Increase/Decrease Text Size.
    ///  If you expect this functionality to work then set <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ExportRelativeFontSize" />
    ///  property to <c>true</c>.
    ///</para><para>Aspose Words document model contains and operates only with absolute font size units. Relative units need
    ///  additional logic to be recalculated from some initial (standard) size. Font size of <b>Normal</b>
    ///  document style
    ///  is taken as standard. For instance, if <b>Normal</b>
    ///  has 12pt font and some text is 18pt then it will be output
    ///  as <b>1.5em.</b>
    ///  to the HTML.</para><para>When this option is enabled, document elements other than text will still have absolute sizes. Also some
    ///  text-related attributes might be expressed absolutely. In particular, line spacing specified with "exactly" rule
    ///  might produce unwanted results when scaling text. So the source documents should be properly designed and tested
    ///  when exporting with <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ExportRelativeFontSize" />
    ///  set to <c>true</c>.</para></remarks>
    property ExportRelativeFontSize: Boolean read get_ExportRelativeFontSize write set_ExportRelativeFontSize;
    ///<summary>
    ///  Controls how text input form fields are saved to HTML or MHTML.
    ///  Default value is <c>false</c>.
    ///</summary>
    ///<remarks><para>When set to <c>true</c>, exports text input form fields as normal text.
    ///  When <c>false</c>, exports Word text input form fields as INPUT elements in HTML.</para><para>When exporting to EPUB, text input form fields are always saved as text due
    ///  to requirements of this format.</para></remarks>
    property ExportTextInputFormFieldAsText: Boolean read get_ExportTextInputFormFieldAsText write set_ExportTextInputFormFieldAsText;
    ///<summary>
    ///  Controls how textboxes represented by <see cref="T:Aspose.Words.Drawing.Shape" />
    ///  are saved to HTML, MHTML or EPUB.
    ///  Default value is <c>false</c>.
    ///</summary>
    ///<remarks><para>When set to <c>true</c>, exports textboxes as inline <b>&lt;svg&gt;</b>
    ///  elements.
    ///  When <c>false</c>, exports as <b>&lt;img&gt;</b>
    ///  elements.</para></remarks>
    property ExportTextBoxAsSvg: Boolean read get_ExportTextBoxAsSvg write set_ExportTextBoxAsSvg;
    ///<summary>
    ///  Controls how drop-down form fields are saved to HTML or MHTML.
    ///  Default value is <c>false</c>.
    ///</summary>
    ///<remarks><para>When set to <c>true</c>, exports drop-down form fields as normal text.
    ///  When <c>false</c>, exports drop-down form fields as SELECT element in HTML.</para><para>When exporting to EPUB, text drop-down form fields are always saved as text due
    ///  to requirements of this format.</para></remarks>
    property ExportDropDownFormFieldAsText: Boolean read get_ExportDropDownFormFieldAsText write set_ExportDropDownFormFieldAsText;
    ///<summary>
    ///  Specifies whether to write page numbers to table of contents when saving HTML, MHTML and EPUB.
    ///  Default value is <c>false</c>.
    ///</summary>
    property ExportTocPageNumbers: Boolean read get_ExportTocPageNumbers write set_ExportTocPageNumbers;
    ///<summary>
    ///  Specifies whether to write the DOCTYPE declaration when saving to HTML or MHTML.
    ///  When <c>true</c>, writes a DOCTYPE declaration in the document prior to the root element.
    ///  Default value is <c>false</c>.
    ///  When saving to EPUB or HTML5 (<see cref="F:Aspose.Words.Saving.HtmlVersion.Html5" />
    ///  ) the DOCTYPE
    ///  declaration is always written.
    ///</summary>
    ///<remarks><para>Aspose.Words always writes well formed HTML regardless of this setting.</para><para>When <c>true</c>, the beginning of the HTML output document will look like this:</para><code>
    ///  &lt;?xml version="1.0" encoding="utf-8" standalone="no" ?&gt;
    ///  &lt;!DOCTYPE html
    ///  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    ///  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
    ///  &lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"&gt;
    ///</code><para>Aspose.Words aims to output XHTML according to the XHTML 1.0 Transitional specification,
    ///  but the output will not always validate against the DTD. Some structures inside a Microsoft Word
    ///  document are hard or impossible to map to a document that will validate against the XHTML schema.
    ///  For example, XHTML does not allow nested lists (UL cannot be nested inside another UL element),
    ///  but in Microsoft Word document multilevel lists occur quite often.</para></remarks>
    property ExportXhtmlTransitional: Boolean read get_ExportXhtmlTransitional write set_ExportXhtmlTransitional;
    ///<summary>
    ///  Specifies version of HTML standard that should be used when saving the document to HTML or MHTML.
    ///  Default value is <see cref="F:Aspose.Words.Saving.HtmlVersion.Xhtml" />
    ///  .
    ///</summary>
    property HtmlVersion: DNHtmlVersion read get_HtmlVersion write set_HtmlVersion;
    ///<summary>
    ///  Specifies whether to write the roundtrip information when saving to HTML, MHTML or EPUB.
    ///  Default value is <c>true</c> for HTML and <c>false</c> for MHTML and EPUB.
    ///</summary>
    ///<remarks><para>Saving of the roundtrip information allows to restore document properties such as tab stops,
    ///  comments, headers and footers during the HTML documents loading back into a <see cref="T:Aspose.Words.Document" />
    ///  object.</para><para>When <c>true</c>, the roundtrip information is exported as -aw-* CSS properties
    ///  of the corresponding HTML elements.</para><para>When <c>false</c>, causes no roundtrip information to be output into produced files.</para></remarks>
    property ExportRoundtripInformation: Boolean read get_ExportRoundtripInformation write set_ExportRoundtripInformation;
    ///<summary>
    ///  Specifies a physical folder where all resources like images, fonts, and external CSS are saved when a document
    ///  is exported to HTML. Default is an empty string.
    ///</summary>
    ///<remarks><para><see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ResourceFolder" />
    ///  is the simplest way to specify a folder where all resources should be written.
    ///  Another way is to use individual properties <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontsFolder" />
    ///  , <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImagesFolder" />
    ///  ,
    ///  and <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.CssStyleSheetFileName" />
    ///  .</para><para><see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ResourceFolder" />
    ///  has a lower priority than folders specified via <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontsFolder" />
    ///  ,
    ///<see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImagesFolder" />
    ///  , and <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.CssStyleSheetFileName" />
    ///  . For example, if both
    ///<see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ResourceFolder" />
    ///  and <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontsFolder" />
    ///  are specified, fonts will be saved
    ///  to <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontsFolder" />
    ///  , while images and CSS will be saved to <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ResourceFolder" />
    ///  .</para><para>If the folder specified by <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ResourceFolder" />
    ///  doesn't exist, it will be created automatically.
    ///</para><seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontsFolder" />
    ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImagesFolder" />
    ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.CssStyleSheetFileName" />
    ///</remarks>
    property ResourceFolder: string read get_ResourceFolder write set_ResourceFolder;
    ///<summary>
    ///  Specifies the name of the folder used to construct URIs of all resources written into an HTML document.
    ///  Default is an empty string.
    ///</summary>
    ///<remarks><para><see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ResourceFolderAlias" />
    ///  is the simplest way to specify how URIs for all resource files should be
    ///  constructed. Same information can be specified for images and fonts separately via <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImagesFolderAlias" />
    ///  and <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontsFolderAlias" />
    ///  properties, respectively. However, there is no individual property for CSS.
    ///</para><para><see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ResourceFolderAlias" />
    ///  has lower priority than <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontsFolderAlias" />
    ///  and <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImagesFolderAlias" />
    ///  . For example, if both <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ResourceFolderAlias" />
    ///  and <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontsFolderAlias" />
    ///  are specified, fonts' URIs will be constructed using
    ///<see cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontsFolderAlias" />
    ///  , while URIs of images and CSS will be constructed using
    ///<see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ResourceFolderAlias" />
    ///  .</para><para>If <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ResourceFolderAlias" />
    ///  is empty, the <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ResourceFolder" />
    ///  property value will be used
    ///  to construct resource URIs.</para><para>If <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ResourceFolderAlias" />
    ///  is set to '.' (dot), resource URIs will contain file names only, without
    ///  any path.</para><seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.ResourceFolder" />
    ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontsFolderAlias" />
    ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImagesFolderAlias" />
    ///</remarks>
    property ResourceFolderAlias: string read get_ResourceFolderAlias write set_ResourceFolderAlias;
    ///<summary>
    ///  Specifies the physical folder where fonts are saved when exporting a document to HTML.
    ///  Default is an empty string.
    ///</summary>
    ///<remarks><para>When you save a <see cref="T:Aspose.Words.Document" />
    ///  in HTML format and <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ExportFontResources" />
    ///  is set to <c>true</c>, Aspose.Words needs to save fonts used in the document as standalone files.
    ///<see cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontsFolder" />
    ///  allows you to specify where the fonts will be saved and
    ///<see cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontsFolderAlias" />
    ///  allows to specify how the font URIs will be constructed.</para><para>If you save a document into a file and provide a file name, Aspose.Words, by default, saves the
    ///  fonts in the same folder where the document file is saved. Use <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontsFolder" />
    ///  to override this behavior.</para><para>If you save a document into a stream, Aspose.Words does not have a folder where to save the fonts,
    ///  but still needs to save the fonts somewhere. In this case, you need to specify an accessible folder
    ///  in the <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontsFolder" />
    ///  property or provide custom streams via
    ///  the <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontSavingCallback" />
    ///  event handler.</para><para>If the folder specified by <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontsFolder" />
    ///  doesn't exist, it will be created automatically.</para><para><see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ResourceFolder" />
    ///  is another way to specify a folder where fonts should be saved.</para><seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.ResourceFolder" />
    ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.ExportFontResources" />
    ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontsFolderAlias" />
    ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontSavingCallback" />
    ///</remarks>
    property FontsFolder: string read get_FontsFolder write set_FontsFolder;
    ///<summary>
    ///  Specifies the name of the folder used to construct font URIs written into an HTML document.
    ///  Default is an empty string.
    ///</summary>
    ///<remarks><para>When you save a <see cref="T:Aspose.Words.Document" />
    ///  in HTML format and <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ExportFontResources" />
    ///  is set to <c>true</c>, Aspose.Words needs to save fonts used in the document as standalone files.
    ///<see cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontsFolder" />
    ///  allows you to specify where the fonts will be saved and
    ///<see cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontsFolderAlias" />
    ///  allows to specify how the font URIs will be constructed.</para><para>If <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontsFolderAlias" />
    ///  is not an empty string, then the font URI written
    ///  to HTML will be <i>FontsFolderAlias + &lt;font file name&gt;</i>.</para><para>If <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontsFolderAlias" />
    ///  is an empty string, then the font URI written
    ///  to HTML will be <i>FontsFolder + &lt;font file name&gt;</i>.</para><para>If <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontsFolderAlias" />
    ///  is set to '.' (dot), then the font file name
    ///  will be written to HTML without path regardless of other options.</para><para>Alternative way to specify the name of the folder to construct font URIs
    ///  is to use <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ResourceFolderAlias" />
    ///  .</para><seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.ResourceFolderAlias" />
    ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.ExportFontResources" />
    ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontsFolder" />
    ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontSavingCallback" />
    ///</remarks>
    property FontsFolderAlias: string read get_FontsFolderAlias write set_FontsFolderAlias;
    ///<summary>
    ///  Controls which font resources need subsetting when saving to HTML, MHTML or EPUB.
    ///  Default is <c>0</c>.
    ///</summary>
    ///<remarks><para><see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ExportFontResources" />
    ///  allows exporting fonts as subsidiary files or as parts of the output
    ///  package. If the document uses many fonts, especially with large number of glyphs, then output size can grow
    ///  significantly. Font subsetting reduces the size of the exported font resource by filtering out glyphs that
    ///  are not used by the current document.</para><para>Font subsetting works as follows:</para><list type="bullet"><item>By default, all exported fonts are subsetted.</item>
    ///<item>Setting <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.FontResourcesSubsettingSizeThreshold" />
    ///  to a positive value
    ///  instructs Aspose.Words to subset fonts which file size is larger than the specified value.</item>
    ///<item>Setting the property to <see cref="F:System.Int32.MaxValue" />
    ///  suppresses font subsetting.</item>
    ///</list>
    ///  <p><b>Important!</b>
    ///  When exporting font resources, font licensing issues should be considered. Authors who want to use specific fonts via a downloadable
    ///  font mechanism must always carefully verify that their intended use is within the scope of the font license. Many commercial fonts presently do not
    ///  allow web downloading of their fonts in any form. License agreements that cover some fonts specifically note that usage via <b>@font-face</b>
    ///  rules
    ///  in CSS style sheets is not allowed. Font subsetting can also violate license terms.
    ///</p>
    ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.ExportFontResources" />
    ///</remarks>
    property FontResourcesSubsettingSizeThreshold: Int32 read get_FontResourcesSubsettingSizeThreshold write set_FontResourcesSubsettingSizeThreshold;
    ///<summary>
    ///  Allows to control how fonts are saved when a document is saved to HTML, MHTML or EPUB.
    ///</summary>
    property FontSavingCallback: DNIFontSavingCallback read get_FontSavingCallback write set_FontSavingCallback;
    ///<summary>
    ///  Specifies the physical folder where images are saved when exporting a document to HTML format.
    ///  Default is an empty string.
    ///</summary>
    ///<remarks><para>When you save a <see cref="T:Aspose.Words.Document" />
    ///  in HTML format, Aspose.Words needs to save all
    ///  images embedded in the document as standalone files. <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImagesFolder" />
    ///  allows you to specify where the images will be saved and <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImagesFolderAlias" />
    ///  allows to specify how the image URIs will be constructed.</para><para>If you save a document into a file and provide a file name, Aspose.Words, by default, saves the
    ///  images in the same folder where the document file is saved. Use <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImagesFolder" />
    ///  to override this behavior.</para><para>If you save a document into a stream, Aspose.Words does not have a folder where to save the images,
    ///  but still needs to save the images somewhere. In this case, you need to specify an accessible folder
    ///  in the <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImagesFolder" />
    ///  property or provide custom streams via
    ///  the <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImageSavingCallback" />
    ///  event handler.</para><para>If the folder specified by <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImagesFolder" />
    ///  doesn't exist, it will be created automatically.</para><para><see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ResourceFolder" />
    ///  is another way to specify a folder where images should be saved.</para><seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.ResourceFolder" />
    ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImagesFolderAlias" />
    ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImageSavingCallback" />
    ///</remarks>
    property ImagesFolder: string read get_ImagesFolder write set_ImagesFolder;
    ///<summary>
    ///  Specifies the name of the folder used to construct image URIs written into an HTML document.
    ///  Default is an empty string.
    ///</summary>
    ///<remarks><para>When you save a <see cref="T:Aspose.Words.Document" />
    ///  in HTML format, Aspose.Words needs to save all
    ///  images embedded in the document as standalone files. <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImagesFolder" />
    ///  allows you to specify where the images will be saved and <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImagesFolderAlias" />
    ///  allows to specify how the image URIs will be constructed.</para><para>If <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImagesFolderAlias" />
    ///  is not an empty string, then the image URI written
    ///  to HTML will be <i>ImagesFolderAlias + &lt;image file name&gt;</i>.</para><para>If <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImagesFolderAlias" />
    ///  is an empty string, then the image URI written
    ///  to HTML will be <i>ImagesFolder + &lt;image file name&gt;</i>.</para><para>If <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImagesFolderAlias" />
    ///  is set to '.' (dot), then the image file name
    ///  will be written to HTML without path regardless of other options.</para><para>Alternative way to specify the name of the folder to construct image URIs
    ///  is to use <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ResourceFolderAlias" />
    ///  .</para><seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.ResourceFolderAlias" />
    ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImagesFolder" />
    ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImageSavingCallback" />
    ///</remarks>
    property ImagesFolderAlias: string read get_ImagesFolderAlias write set_ImagesFolderAlias;
    ///<summary>
    ///  Specifies the output resolution for images when exporting to HTML, MHTML or EPUB.
    ///  Default is <c>96 dpi</c>.
    ///</summary>
    ///<remarks><para>This property effects raster images when <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ScaleImageToShapeSize" />
    ///  is <c>true</c> and effects metafiles exported as raster images. Some image properties such as cropping
    ///  or rotation require saving transformed images and in this case transformed images are created in the given
    ///  resolution.</para></remarks>
    ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.ScaleImageToShapeSize" />
    property ImageResolution: Int32 read get_ImageResolution write set_ImageResolution;
    ///<summary>
    ///  Allows to control how images are saved when a document is saved to HTML, MHTML or EPUB.
    ///</summary>
    property ImageSavingCallback: DNIImageSavingCallback read get_ImageSavingCallback write set_ImageSavingCallback;
    ///<summary>
    ///  Specifies whether images are scaled by Aspose.Words to the bounding shape size when exporting to HTML, MHTML
    ///  or EPUB.
    ///  Default value is <c>true</c>.
    ///</summary>
    ///<remarks><para>An image in a Microsoft Word document is a shape. The shape has a size and the image
    ///  has its own size. The sizes are not directly linked. For example, the image can be 1024x786 pixels,
    ///  but shape that displays this image can be 400x300 points.</para><para>In order to display an image in the browser, it must be scaled to the shape size.
    ///  The <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ScaleImageToShapeSize" />
    ///  property controls where the scaling of the image
    ///  takes place: in Aspose.Words during export to HTML or in the browser when displaying the document.</para><para>When <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ScaleImageToShapeSize" />
    ///  is <c>true</c>, the image is scaled by Aspose.Words
    ///  using high quality scaling during export to HTML. When <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ScaleImageToShapeSize" />
    ///  is <c>false</c>, the image is output with its original size and the browser has to scale it.</para><para>In general, browsers do quick and poor quality scaling. As a result, you will normally get better
    ///  display quality in the browser and smaller file size when <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ScaleImageToShapeSize" />
    ///  is <c>true</c>,
    ///  but better printing quality and faster conversion when <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ScaleImageToShapeSize" />
    ///  is <c>false</c>.</para></remarks>
    ///<seealso cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImageResolution" />
    property ScaleImageToShapeSize: Boolean read get_ScaleImageToShapeSize write set_ScaleImageToShapeSize;
    ///<summary>
    ///  Controls how table, row and cell widths are exported to HTML, MHTML or EPUB.
    ///  Default value is <see cref="F:Aspose.Words.Saving.HtmlElementSizeOutputMode.All" />
    ///  .
    ///</summary>
    ///<remarks><para>In the HTML format, table, row and cell elements
    ///  (<b>&lt;table&gt;</b>
    ///  , <b>&lt;tr&gt;</b>
    ///  , <b>&lt;th&gt;</b>
    ///  , <b>&lt;td&gt;</b>
    ///  )
    ///  can have their widths specified either in relative (percentage) or in absolute units.
    ///  In a document in Aspose.Words, tables, rows and cells can have their widths specified
    ///  using either relative or absolute units too.</para><para>When you convert a document to HTML using Aspose.Words, you might want to control how
    ///  table, row and cell widths are exported to affect how the resulting document is displayed
    ///  in the visual agent (e.g. a browser or viewer).</para><para>Use this property as a filter to specify what table widths values are exported into the destination document.
    ///  For example, if you are converting a document to EPUB and intend to view the document on a mobile reading device,
    ///  then you probably want to avoid exporting absolute width values. To do this you need to specify
    ///  the output mode <see cref="F:Aspose.Words.Saving.HtmlElementSizeOutputMode.RelativeOnly" />
    ///  or <see cref="F:Aspose.Words.Saving.HtmlElementSizeOutputMode.None" />
    ///  so the viewer on the mobile device can layout the table to fit the width of the screen as best as it can.</para></remarks>
    property TableWidthOutputMode: DNHtmlElementSizeOutputMode read get_TableWidthOutputMode write set_TableWidthOutputMode;
    ///<summary>
    ///  Controls how OfficeMath objects are exported to HTML, MHTML or EPUB.
    ///  Default value is <c>HtmlOfficeMathOutputMode.Image</c>.
    ///</summary>
    property OfficeMathOutputMode: DNHtmlOfficeMathOutputMode read get_OfficeMathOutputMode write set_OfficeMathOutputMode;
    ///<summary>
    ///  Specifies whether original URL should be used as the URL of the linked images.
    ///  Default value is <c>false</c>.
    ///</summary>
    ///<remarks><para>If value is set to <c>true</c><see cref="P:Aspose.Words.Drawing.ImageData.SourceFullName" />
    ///  value is used
    ///  as the URL of linked images and linked images are not loaded into document's folder
    ///  or <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImagesFolder" />
    ///  .</para><para>If value is set to <c>false</c> linked images are loaded into document's folder
    ///  or <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImagesFolder" />
    ///  and URL of each linked image is constructed depending
    ///  on document's folder, <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImagesFolder" />
    ///  and <see cref="P:Aspose.Words.Saving.HtmlSaveOptions.ImagesFolderAlias" />
    ///  properties.</para></remarks>
    property ExportOriginalUrlForLinkedImages: Boolean read get_ExportOriginalUrlForLinkedImages write set_ExportOriginalUrlForLinkedImages;
    ///<summary>
    ///  Specifies whether to use CID (Content-ID) URLs to reference resources (images, fonts, CSS) included in MHTML
    ///  documents. Default value is <c>false</c>.
    ///</summary>
    ///<remarks><para>This option affects only documents being saved to MHTML.</para><para>By default, resources in MHTML documents are referenced by file name (for example, "image.png"), which
    ///  are matched against "Content-Location" headers of MIME parts.</para><para>This option enables an alternative method, where references to resource files are written as CID (Content-ID)
    ///  URLs (for example, "cid:image.png") and are matched against "Content-ID" headers.</para><para>In theory, there should be no difference between the two referencing methods and either of them should work
    ///  fine in any browser or mail agent. In practice, however, some agents fail to fetch resources by file name. If your
    ///  browser or mail agent refuses to load resources included in an MTHML document (doesn't show images or doesn't load
    ///  CSS styles), try exporting the document with CID URLs.</para></remarks>
    property ExportCidUrlsForMhtmlResources: Boolean read get_ExportCidUrlsForMhtmlResources write set_ExportCidUrlsForMhtmlResources;
    ///<summary>
    ///  Specifies whether font family names used in the document are resolved and substituted according to
    ///<see cref="P:Aspose.Words.Document.FontSettings" />
    ///  when being written into HTML-based formats.
    ///</summary>
    ///<remarks><para>By default, this option is set to <c>false</c> and font family names are written to HTML as specified
    ///  in source documents. That is, <see cref="P:Aspose.Words.Document.FontSettings" />
    ///  are ignored and no resolution or substitution
    ///  of font family names is performed.</para><para>If this option is set to <c>true</c>, Aspose.Words uses <see cref="P:Aspose.Words.Document.FontSettings" />
    ///  to resolve
    ///  each font family name specified in a source document into the name of an available font family, performing
    ///  font subsitution as required.</para></remarks>
    property ResolveFontNames: Boolean read get_ResolveFontNames write set_ResolveFontNames;
    ///<summary>
    ///  Specifies the folder for temporary files used when saving to a DOC or DOCX file.
    ///  By default this property is <c>null</c> and no temporary files are used.
    ///</summary>
    ///<remarks><para>When Aspose.Words saves a document, it needs to create temporary internal structures. By default,
    ///  these internal structures are created in memory and the memory usage spikes for a short period while
    ///  the document is being saved. When saving is complete, the memory is freed and reclaimed by the garbage collector.</para><para>If you are saving a very large document (thousands of pages) and/or processing many documents at the same time,
    ///  then the memory spike during saving can be significant enough to cause the system to throw <see cref="T:System.OutOfMemoryException" />
    ///  .
    ///  Specifying a temporary folder using <see cref="P:Aspose.Words.Saving.SaveOptions.TempFolder" />
    ///  will cause Aspose.Words to keep the internal structures in
    ///  temporary files instead of memory. It reduces the memory usage during saving, but will decrease the save performance.</para><para>The folder must exist and be writable, otherwise an exception will be thrown.</para><para>Aspose.Words automatically deletes all temporary files when saving is complete.</para></remarks>
    property TempFolder: string read get_TempFolder write set_TempFolder;
    ///<summary>
    ///  When <c>true</c>, pretty formats output where applicable.
    ///  Default value is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks><p>Set to <b>true</b>
    ///  to make HTML, MHTML, EPUB, WordML, RTF, DOCX and ODT output human readable.
    ///  Useful for testing or debugging.</p>
    ///</remarks>
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    ///<summary>
    ///  Gets or sets a value determining whether or not to use anti-aliasing for rendering.
    ///</summary>
    ///<remarks><para>
    ///  The default value is <c>false</c>. When this value is set to <c>true</c> anti-aliasing is
    ///  used for rendering.
    ///</para><para>This property is used when the document is exported to the following formats:
    ///<see cref="F:Aspose.Words.SaveFormat.Tiff" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Png" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Bmp" />
    ///  ,
    ///<see cref="F:Aspose.Words.SaveFormat.Jpeg" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Emf" />
    ///  . When the document is exported to the
    ///<see cref="F:Aspose.Words.SaveFormat.Html" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Mhtml" />
    ///  and <see cref="F:Aspose.Words.SaveFormat.Epub" />
    ///  formats this option is used for raster images.</para></remarks>
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    ///<summary>
    ///  Gets or sets a value determining whether or not to use high quality (i.e. slow) rendering algorithms.
    ///</summary>
    ///<remarks>
    ///  The default value is <c>false</c>.
    ///  <para>This property is used when the document is exported to image formats:
    ///<see cref="F:Aspose.Words.SaveFormat.Tiff" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Png" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Bmp" />
    ///  ,
    ///<see cref="F:Aspose.Words.SaveFormat.Jpeg" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Emf" />
    ///  .</para></remarks>
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    ///<summary>
    ///  Gets or sets value determining whether content of <see cref="T:Aspose.Words.Markup.StructuredDocumentTag" />
    ///  is updated before saving.
    ///</summary>
    ///<remarks>
    ///  The default value is <c>true</c>.
    ///</remarks>
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    ///<summary>
    ///  Gets or sets a value determining how DrawingML shapes are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.DmlRenderingMode.Fallback" />
    ///  .
    ///  <para>This property is used when the document is exported to fixed page formats.</para></remarks>
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    ///<summary>
    ///  Gets or sets a value determining how DrawingML effects are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.DmlEffectsRenderingMode.Simplified" />
    ///  .
    ///  <para>This property is used when the document is exported to fixed page formats.</para></remarks>
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    ///<summary>
    ///  Gets or sets path to default template (including filename).
    ///  Default value for this property is <b>empty string</b>
    ///  (<see cref="F:System.String.Empty" />
    ///  ).
    ///</summary>
    ///<remarks>If specified, this path is used to load template when <see cref="P:Aspose.Words.Document.AutomaticallyUpdateStyles" />
    ///  is true,
    ///  but <see cref="P:Aspose.Words.Document.AttachedTemplate" />
    ///  is empty.</remarks>
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    ///<summary>
    ///  Gets or sets a value determining if fields of certain types should be updated before saving the document to a fixed page format.
    ///  Default value for this property is <b>true</b>
    ///  .
    ///</summary>
    ///<remarks>
    ///  Allows to specify whether to mimic or not MS Word behavior.
    ///</remarks>
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    ///<summary>
    ///  Gets or sets a value determining whether the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.LastSavedTime" />
    ///  property is updated before saving.
    ///</summary>
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    ///<summary>
    ///  Gets or sets a value determining whether the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.LastPrinted" />
    ///  property is updated before saving.
    ///</summary>
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    ///<summary>
    ///  Gets or sets a value determining whether the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.CreatedTime" />
    ///  property is updated before saving.
    ///  Default value is false;
    ///</summary>
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    ///<summary>
    ///  Gets or sets value determining if memory optimization should be performed before saving the document.
    ///  Default value for this property is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks>
    ///  Setting this option to true can significantly decrease memory consumption while saving large documents at the cost of slower saving time.
    ///</remarks>
    ///<dev>
    ///  So far only attribute interning procedure is bound to this property but I think we can make more memory optimization in the future.
    ///  That's why I decided to use more general property name.
    ///</dev>
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    ///<summary>
    ///  Gets or sets a value determining how 3D effects are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.Dml3DEffectsRenderingMode.Basic" />
    ///  .
    ///</remarks>
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    ///<summary>
    ///  Gets or sets a boolean value indicating whether to allow embedding fonts with PostScript outlines
    ///  when embedding TrueType fonts in a document upon it is saved.
    ///  The default value is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks><para>Note, Word does not embed PostScript fonts, but can open documents with embedded fonts of this type.</para><para>This option only works when <see cref="P:Aspose.Words.Fonts.FontInfoCollection.EmbedTrueTypeFonts" />
    ///  of the
    ///<see cref="P:Aspose.Words.DocumentBase.FontInfos" />
    ///  property is set to <c>true</c>.</para></remarks>
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    ///<summary>
    ///  Gets or sets custom local time zone used for date/time fields.
    ///</summary>
    ///<remarks><para>This option is available in either .Net framework starting from 3.5 version or .Net Standard.</para><para>By default, Aspose.Words uses system local time zone when writes date/time fields, this option allows to set custom value.</para></remarks>
    ///<dev>
    ///  So far this option used in SDT content updating only. Please see WORDSNET-20863 for details.
    ///  We can use it for other document date/time values later.
    ///</dev>
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNHtmlSaveOptions = class(TDNGenericImport<DNHtmlSaveOptionsClass, DNHtmlSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNOdtSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{75683997-3815-55F4-98A7-597A73882305}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class that can be used to save a document in the <see cref="F:Aspose.Words.SaveFormat.Odt" />
    ///  format.
    ///</summary>
    {class} function init: DNOdtSaveOptions; overload;
    ///<summary>
    ///  Initializes a new instance of this class that can be used to save a document in the <see cref="F:Aspose.Words.SaveFormat.Odt" />
    ///  format
    ///  encrypted with a password.
    ///</summary>
    {class} function init(password: string): DNOdtSaveOptions; overload;
    ///<summary>
    ///  Initializes a new instance of this class that can be used to save a document in the <see cref="F:Aspose.Words.SaveFormat.Odt" />
    ///  or
    ///<see cref="F:Aspose.Words.SaveFormat.Ott" />
    ///  format.
    ///</summary>
    ///  <param name="saveFormat">Can be <see cref="F:Aspose.Words.SaveFormat.Odt" />
    ///  or <see cref="F:Aspose.Words.SaveFormat.Ott" />
    ///  .</param>
    {class} function init(saveFormat: DNSaveFormat): DNOdtSaveOptions; overload;

  end;

  ///<summary>
  ///  Can be used to specify additional options when saving a document into the <see cref="F:Aspose.Words.SaveFormat.Odt" />
  ///  or
  ///<see cref="F:Aspose.Words.SaveFormat.Ott" />
  ///  format.
  ///</summary>
  ///<remarks><para>At the moment provides only the <see cref="P:Aspose.Words.Saving.OdtSaveOptions.SaveFormat" />
  ///  property, but in the future will have
  ///  other options added, such as an encryption password or digital signature settings.</para></remarks>
  [DNTypeName('Aspose.Words.Saving.OdtSaveOptions')]
  DNOdtSaveOptions = interface(DNSaveOptions)
  ['{09AB98A9-13A3-3E80-A59E-3F39E4B5F079}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_IsStrictSchema11: Boolean;
    procedure set_IsStrictSchema11(value: Boolean);
    function get_MeasureUnit: DNOdtSaveMeasureUnit;
    procedure set_MeasureUnit(value: DNOdtSaveMeasureUnit);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the format in which the document will be saved if this save options object is used.
    ///  Can be <see cref="F:Aspose.Words.SaveFormat.Odt" />
    ///  or <see cref="F:Aspose.Words.SaveFormat.Ott" />
    ///  .
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    ///<summary>
    ///  Specifies whether export should correspond to ODT specification 1.1 strictly.
    ///  OOo 3.0 displays files correctly when they contain elements and attributes of ODT 1.2.
    ///  Use "false" for this purpose, or "true" for strict conformity of specification 1.1.
    ///  The default value is <b>false</b>
    ///  .
    ///</summary>
    property IsStrictSchema11: Boolean read get_IsStrictSchema11 write set_IsStrictSchema11;
    ///<summary>
    ///  Allows to specify units of measure to apply to document content.
    ///  The default value is <see cref="F:Aspose.Words.Saving.OdtSaveMeasureUnit.Centimeters" />
    ///</summary>
    ///<remarks>
    ///  Open Office uses centimeters when specifying lengths, widths and other measurable formatting and
    ///  content properties in documents whereas MS Office uses inches.
    ///</remarks>
    property MeasureUnit: DNOdtSaveMeasureUnit read get_MeasureUnit write set_MeasureUnit;
    ///<summary>
    ///  Gets or sets a password to encrypt document.
    ///</summary>
    ///<remarks><para>In order to save document without encryption this property should be null or empty string.</para></remarks>
    property Password: string read get_Password write set_Password;
    ///<summary>
    ///  Specifies the folder for temporary files used when saving to a DOC or DOCX file.
    ///  By default this property is <c>null</c> and no temporary files are used.
    ///</summary>
    ///<remarks><para>When Aspose.Words saves a document, it needs to create temporary internal structures. By default,
    ///  these internal structures are created in memory and the memory usage spikes for a short period while
    ///  the document is being saved. When saving is complete, the memory is freed and reclaimed by the garbage collector.</para><para>If you are saving a very large document (thousands of pages) and/or processing many documents at the same time,
    ///  then the memory spike during saving can be significant enough to cause the system to throw <see cref="T:System.OutOfMemoryException" />
    ///  .
    ///  Specifying a temporary folder using <see cref="P:Aspose.Words.Saving.SaveOptions.TempFolder" />
    ///  will cause Aspose.Words to keep the internal structures in
    ///  temporary files instead of memory. It reduces the memory usage during saving, but will decrease the save performance.</para><para>The folder must exist and be writable, otherwise an exception will be thrown.</para><para>Aspose.Words automatically deletes all temporary files when saving is complete.</para></remarks>
    property TempFolder: string read get_TempFolder write set_TempFolder;
    ///<summary>
    ///  When <c>true</c>, pretty formats output where applicable.
    ///  Default value is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks><p>Set to <b>true</b>
    ///  to make HTML, MHTML, EPUB, WordML, RTF, DOCX and ODT output human readable.
    ///  Useful for testing or debugging.</p>
    ///</remarks>
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    ///<summary>
    ///  Gets or sets a value determining whether or not to use anti-aliasing for rendering.
    ///</summary>
    ///<remarks><para>
    ///  The default value is <c>false</c>. When this value is set to <c>true</c> anti-aliasing is
    ///  used for rendering.
    ///</para><para>This property is used when the document is exported to the following formats:
    ///<see cref="F:Aspose.Words.SaveFormat.Tiff" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Png" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Bmp" />
    ///  ,
    ///<see cref="F:Aspose.Words.SaveFormat.Jpeg" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Emf" />
    ///  . When the document is exported to the
    ///<see cref="F:Aspose.Words.SaveFormat.Html" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Mhtml" />
    ///  and <see cref="F:Aspose.Words.SaveFormat.Epub" />
    ///  formats this option is used for raster images.</para></remarks>
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    ///<summary>
    ///  Gets or sets a value determining whether or not to use high quality (i.e. slow) rendering algorithms.
    ///</summary>
    ///<remarks>
    ///  The default value is <c>false</c>.
    ///  <para>This property is used when the document is exported to image formats:
    ///<see cref="F:Aspose.Words.SaveFormat.Tiff" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Png" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Bmp" />
    ///  ,
    ///<see cref="F:Aspose.Words.SaveFormat.Jpeg" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Emf" />
    ///  .</para></remarks>
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    ///<summary>
    ///  Gets or sets value determining whether content of <see cref="T:Aspose.Words.Markup.StructuredDocumentTag" />
    ///  is updated before saving.
    ///</summary>
    ///<remarks>
    ///  The default value is <c>true</c>.
    ///</remarks>
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    ///<summary>
    ///  Gets or sets a value determining how DrawingML shapes are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.DmlRenderingMode.Fallback" />
    ///  .
    ///  <para>This property is used when the document is exported to fixed page formats.</para></remarks>
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    ///<summary>
    ///  Gets or sets a value determining how DrawingML effects are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.DmlEffectsRenderingMode.Simplified" />
    ///  .
    ///  <para>This property is used when the document is exported to fixed page formats.</para></remarks>
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    ///<summary>
    ///  Gets or sets path to default template (including filename).
    ///  Default value for this property is <b>empty string</b>
    ///  (<see cref="F:System.String.Empty" />
    ///  ).
    ///</summary>
    ///<remarks>If specified, this path is used to load template when <see cref="P:Aspose.Words.Document.AutomaticallyUpdateStyles" />
    ///  is true,
    ///  but <see cref="P:Aspose.Words.Document.AttachedTemplate" />
    ///  is empty.</remarks>
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    ///<summary>
    ///  Gets or sets a value determining if fields of certain types should be updated before saving the document to a fixed page format.
    ///  Default value for this property is <b>true</b>
    ///  .
    ///</summary>
    ///<remarks>
    ///  Allows to specify whether to mimic or not MS Word behavior.
    ///</remarks>
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    ///<summary>
    ///  Gets or sets a value determining whether the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.LastSavedTime" />
    ///  property is updated before saving.
    ///</summary>
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    ///<summary>
    ///  Gets or sets a value determining whether the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.LastPrinted" />
    ///  property is updated before saving.
    ///</summary>
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    ///<summary>
    ///  Gets or sets a value determining whether the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.CreatedTime" />
    ///  property is updated before saving.
    ///  Default value is false;
    ///</summary>
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    ///<summary>
    ///  Gets or sets value determining if memory optimization should be performed before saving the document.
    ///  Default value for this property is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks>
    ///  Setting this option to true can significantly decrease memory consumption while saving large documents at the cost of slower saving time.
    ///</remarks>
    ///<dev>
    ///  So far only attribute interning procedure is bound to this property but I think we can make more memory optimization in the future.
    ///  That's why I decided to use more general property name.
    ///</dev>
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    ///<summary>
    ///  Gets or sets a value determining how 3D effects are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.Dml3DEffectsRenderingMode.Basic" />
    ///  .
    ///</remarks>
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    ///<summary>
    ///  Gets or sets a boolean value indicating whether to allow embedding fonts with PostScript outlines
    ///  when embedding TrueType fonts in a document upon it is saved.
    ///  The default value is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks><para>Note, Word does not embed PostScript fonts, but can open documents with embedded fonts of this type.</para><para>This option only works when <see cref="P:Aspose.Words.Fonts.FontInfoCollection.EmbedTrueTypeFonts" />
    ///  of the
    ///<see cref="P:Aspose.Words.DocumentBase.FontInfos" />
    ///  property is set to <c>true</c>.</para></remarks>
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    ///<summary>
    ///  Gets or sets custom local time zone used for date/time fields.
    ///</summary>
    ///<remarks><para>This option is available in either .Net framework starting from 3.5 version or .Net Standard.</para><para>By default, Aspose.Words uses system local time zone when writes date/time fields, this option allows to set custom value.</para></remarks>
    ///<dev>
    ///  So far this option used in SDT content updating only. Please see WORDSNET-20863 for details.
    ///  We can use it for other document date/time values later.
    ///</dev>
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNOdtSaveOptions = class(TDNGenericImport<DNOdtSaveOptionsClass, DNOdtSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNOoxmlSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{BE828524-9605-53E2-8442-E060CE18CD06}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class that can be used to save a document in the <see cref="F:Aspose.Words.SaveFormat.Docx" />
    ///  format.
    ///</summary>
    {class} function init: DNOoxmlSaveOptions; overload;
    ///<summary>
    ///  Initializes a new instance of this class that can be used to save a document in the <see cref="F:Aspose.Words.SaveFormat.Docx" />
    ///  ,
    ///<see cref="F:Aspose.Words.SaveFormat.Docm" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Dotx" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Dotm" />
    ///  or
    ///<see cref="F:Aspose.Words.SaveFormat.FlatOpc" />
    ///  format.
    ///</summary>
    ///  <param name="saveFormat">Can be <see cref="F:Aspose.Words.SaveFormat.Docx" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Docm" />
    ///  ,
    ///<see cref="F:Aspose.Words.SaveFormat.Dotx" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Dotm" />
    ///  or <see cref="F:Aspose.Words.SaveFormat.FlatOpc" />
    ///  .
    ///</param>
    {class} function init(saveFormat: DNSaveFormat): DNOoxmlSaveOptions; overload;

  end;

  ///<summary>
  ///  Can be used to specify additional options when saving a document into the <see cref="F:Aspose.Words.SaveFormat.Docx" />
  ///  ,
  ///<see cref="F:Aspose.Words.SaveFormat.Docm" />
  ///  , <see cref="F:Aspose.Words.SaveFormat.Dotx" />
  ///  , <see cref="F:Aspose.Words.SaveFormat.Dotm" />
  ///  or
  ///<see cref="F:Aspose.Words.SaveFormat.FlatOpc" />
  ///  format.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.OoxmlSaveOptions')]
  DNOoxmlSaveOptions = interface(DNSaveOptions)
  ['{08F4DD51-9EF3-352B-9A40-EB99CF50EE43}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_Compliance: DNOoxmlCompliance;
    procedure set_Compliance(value: DNOoxmlCompliance);
    function get_KeepLegacyControlChars: Boolean;
    procedure set_KeepLegacyControlChars(value: Boolean);
    function get_CompressionLevel: DNCompressionLevel;
    procedure set_CompressionLevel(value: DNCompressionLevel);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the format in which the document will be saved if this save options object is used.
    ///  Can be <see cref="F:Aspose.Words.SaveFormat.Docx" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Docm" />
    ///  ,
    ///<see cref="F:Aspose.Words.SaveFormat.Dotx" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Dotm" />
    ///  or <see cref="F:Aspose.Words.SaveFormat.FlatOpc" />
    ///  .
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    ///<summary>
    ///  Gets/sets a password to encrypt document using ECMA376 Standard encryption algorithm.
    ///</summary>
    ///<remarks><para>In order to save document without encryption this property should be null or empty string.</para></remarks>
    property Password: string read get_Password write set_Password;
    ///<summary>
    ///  Specifies the OOXML version for the output document.
    ///  The default value is <see cref="F:Aspose.Words.Saving.OoxmlCompliance.Ecma376_2006" />
    ///  .
    ///</summary>
    property Compliance: DNOoxmlCompliance read get_Compliance write set_Compliance;
    ///<summary>
    ///  Keeps original representation of legacy control characters.
    ///</summary>
    property KeepLegacyControlChars: Boolean read get_KeepLegacyControlChars write set_KeepLegacyControlChars;
    ///<summary>
    ///  Specifies the compression level used to save document.
    ///  The default value is <see cref="F:Aspose.Words.Saving.CompressionLevel.Normal" />
    ///  .
    ///</summary>
    property CompressionLevel: DNCompressionLevel read get_CompressionLevel write set_CompressionLevel;
    ///<summary>
    ///  Specifies the folder for temporary files used when saving to a DOC or DOCX file.
    ///  By default this property is <c>null</c> and no temporary files are used.
    ///</summary>
    ///<remarks><para>When Aspose.Words saves a document, it needs to create temporary internal structures. By default,
    ///  these internal structures are created in memory and the memory usage spikes for a short period while
    ///  the document is being saved. When saving is complete, the memory is freed and reclaimed by the garbage collector.</para><para>If you are saving a very large document (thousands of pages) and/or processing many documents at the same time,
    ///  then the memory spike during saving can be significant enough to cause the system to throw <see cref="T:System.OutOfMemoryException" />
    ///  .
    ///  Specifying a temporary folder using <see cref="P:Aspose.Words.Saving.SaveOptions.TempFolder" />
    ///  will cause Aspose.Words to keep the internal structures in
    ///  temporary files instead of memory. It reduces the memory usage during saving, but will decrease the save performance.</para><para>The folder must exist and be writable, otherwise an exception will be thrown.</para><para>Aspose.Words automatically deletes all temporary files when saving is complete.</para></remarks>
    property TempFolder: string read get_TempFolder write set_TempFolder;
    ///<summary>
    ///  When <c>true</c>, pretty formats output where applicable.
    ///  Default value is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks><p>Set to <b>true</b>
    ///  to make HTML, MHTML, EPUB, WordML, RTF, DOCX and ODT output human readable.
    ///  Useful for testing or debugging.</p>
    ///</remarks>
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    ///<summary>
    ///  Gets or sets a value determining whether or not to use anti-aliasing for rendering.
    ///</summary>
    ///<remarks><para>
    ///  The default value is <c>false</c>. When this value is set to <c>true</c> anti-aliasing is
    ///  used for rendering.
    ///</para><para>This property is used when the document is exported to the following formats:
    ///<see cref="F:Aspose.Words.SaveFormat.Tiff" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Png" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Bmp" />
    ///  ,
    ///<see cref="F:Aspose.Words.SaveFormat.Jpeg" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Emf" />
    ///  . When the document is exported to the
    ///<see cref="F:Aspose.Words.SaveFormat.Html" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Mhtml" />
    ///  and <see cref="F:Aspose.Words.SaveFormat.Epub" />
    ///  formats this option is used for raster images.</para></remarks>
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    ///<summary>
    ///  Gets or sets a value determining whether or not to use high quality (i.e. slow) rendering algorithms.
    ///</summary>
    ///<remarks>
    ///  The default value is <c>false</c>.
    ///  <para>This property is used when the document is exported to image formats:
    ///<see cref="F:Aspose.Words.SaveFormat.Tiff" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Png" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Bmp" />
    ///  ,
    ///<see cref="F:Aspose.Words.SaveFormat.Jpeg" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Emf" />
    ///  .</para></remarks>
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    ///<summary>
    ///  Gets or sets value determining whether content of <see cref="T:Aspose.Words.Markup.StructuredDocumentTag" />
    ///  is updated before saving.
    ///</summary>
    ///<remarks>
    ///  The default value is <c>true</c>.
    ///</remarks>
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    ///<summary>
    ///  Gets or sets a value determining how DrawingML shapes are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.DmlRenderingMode.Fallback" />
    ///  .
    ///  <para>This property is used when the document is exported to fixed page formats.</para></remarks>
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    ///<summary>
    ///  Gets or sets a value determining how DrawingML effects are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.DmlEffectsRenderingMode.Simplified" />
    ///  .
    ///  <para>This property is used when the document is exported to fixed page formats.</para></remarks>
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    ///<summary>
    ///  Gets or sets path to default template (including filename).
    ///  Default value for this property is <b>empty string</b>
    ///  (<see cref="F:System.String.Empty" />
    ///  ).
    ///</summary>
    ///<remarks>If specified, this path is used to load template when <see cref="P:Aspose.Words.Document.AutomaticallyUpdateStyles" />
    ///  is true,
    ///  but <see cref="P:Aspose.Words.Document.AttachedTemplate" />
    ///  is empty.</remarks>
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    ///<summary>
    ///  Gets or sets a value determining if fields of certain types should be updated before saving the document to a fixed page format.
    ///  Default value for this property is <b>true</b>
    ///  .
    ///</summary>
    ///<remarks>
    ///  Allows to specify whether to mimic or not MS Word behavior.
    ///</remarks>
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    ///<summary>
    ///  Gets or sets a value determining whether the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.LastSavedTime" />
    ///  property is updated before saving.
    ///</summary>
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    ///<summary>
    ///  Gets or sets a value determining whether the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.LastPrinted" />
    ///  property is updated before saving.
    ///</summary>
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    ///<summary>
    ///  Gets or sets a value determining whether the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.CreatedTime" />
    ///  property is updated before saving.
    ///  Default value is false;
    ///</summary>
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    ///<summary>
    ///  Gets or sets value determining if memory optimization should be performed before saving the document.
    ///  Default value for this property is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks>
    ///  Setting this option to true can significantly decrease memory consumption while saving large documents at the cost of slower saving time.
    ///</remarks>
    ///<dev>
    ///  So far only attribute interning procedure is bound to this property but I think we can make more memory optimization in the future.
    ///  That's why I decided to use more general property name.
    ///</dev>
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    ///<summary>
    ///  Gets or sets a value determining how 3D effects are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.Dml3DEffectsRenderingMode.Basic" />
    ///  .
    ///</remarks>
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    ///<summary>
    ///  Gets or sets a boolean value indicating whether to allow embedding fonts with PostScript outlines
    ///  when embedding TrueType fonts in a document upon it is saved.
    ///  The default value is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks><para>Note, Word does not embed PostScript fonts, but can open documents with embedded fonts of this type.</para><para>This option only works when <see cref="P:Aspose.Words.Fonts.FontInfoCollection.EmbedTrueTypeFonts" />
    ///  of the
    ///<see cref="P:Aspose.Words.DocumentBase.FontInfos" />
    ///  property is set to <c>true</c>.</para></remarks>
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    ///<summary>
    ///  Gets or sets custom local time zone used for date/time fields.
    ///</summary>
    ///<remarks><para>This option is available in either .Net framework starting from 3.5 version or .Net Standard.</para><para>By default, Aspose.Words uses system local time zone when writes date/time fields, this option allows to set custom value.</para></remarks>
    ///<dev>
    ///  So far this option used in SDT content updating only. Please see WORDSNET-20863 for details.
    ///  We can use it for other document date/time values later.
    ///</dev>
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNOoxmlSaveOptions = class(TDNGenericImport<DNOoxmlSaveOptionsClass, DNOoxmlSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNRtfSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{8CED6F30-9AB5-50D1-8DF3-BDA123BEFCD1}']
  { constructors } 

    {class} function init: DNRtfSaveOptions;

  end;

  ///<summary>
  ///  Can be used to specify additional options when saving a document into the <see cref="F:Aspose.Words.SaveFormat.Rtf" />
  ///  format.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.RtfSaveOptions')]
  DNRtfSaveOptions = interface(DNSaveOptions)
  ['{08719B96-9A2E-38BD-A0DE-CE64A3F2C642}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_ExportCompactSize: Boolean;
    procedure set_ExportCompactSize(value: Boolean);
    function get_ExportImagesForOldReaders: Boolean;
    procedure set_ExportImagesForOldReaders(value: Boolean);
    function get_SaveImagesAsWmf: Boolean;
    procedure set_SaveImagesAsWmf(value: Boolean);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the format in which the document will be saved if this save options object is used.
    ///  Can only be <see cref="F:Aspose.Words.SaveFormat.Rtf" />
    ///  .
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    ///<summary>
    ///  Allows to make output RTF documents smaller in size, but if they contain
    ///  RTL (right-to-left) text, it will not be displayed correctly.
    ///  Default value is <c>false</c>.
    ///</summary>
    ///<remarks><para>If the document that you want to convert to RTF using Aspose.Words does not contain
    ///  right-to-left text in languages like Arabic, then you can set this option to <c>true</c>
    ///  to reduce the size of the resulting RTF.</para></remarks>
    property ExportCompactSize: Boolean read get_ExportCompactSize write set_ExportCompactSize;
    ///<summary>
    ///  Specifies whether the keywords for "old readers" are written to RTF or not.
    ///  This can significantly affect the size of the RTF document.
    ///  Default value is <c>true</c>.
    ///</summary>
    ///<remarks><para>"Old readers" are pre-Microsoft Word 97 applications and also WordPad.
    ///  When this option is <c>true</c> Aspose.Words writes additional RTF keywords.
    ///  These keywords allow the document to be displayed correctly when opened in an
    ///  "old reader" application, but can significantly increase the size of the document.</para><para>If you set this option to <c>false</c>, then only images in WMF, EMF and BMP formats
    ///  will be displayed in "old readers".</para></remarks>
    property ExportImagesForOldReaders: Boolean read get_ExportImagesForOldReaders write set_ExportImagesForOldReaders;
    ///<summary>
    ///  When true all images will be saved as WMF.
    ///</summary>
    ///<remarks>
    ///  This option might help to avoid WordPad warning messages.
    ///</remarks>
    property SaveImagesAsWmf: Boolean read get_SaveImagesAsWmf write set_SaveImagesAsWmf;
    ///<summary>
    ///  Specifies the folder for temporary files used when saving to a DOC or DOCX file.
    ///  By default this property is <c>null</c> and no temporary files are used.
    ///</summary>
    ///<remarks><para>When Aspose.Words saves a document, it needs to create temporary internal structures. By default,
    ///  these internal structures are created in memory and the memory usage spikes for a short period while
    ///  the document is being saved. When saving is complete, the memory is freed and reclaimed by the garbage collector.</para><para>If you are saving a very large document (thousands of pages) and/or processing many documents at the same time,
    ///  then the memory spike during saving can be significant enough to cause the system to throw <see cref="T:System.OutOfMemoryException" />
    ///  .
    ///  Specifying a temporary folder using <see cref="P:Aspose.Words.Saving.SaveOptions.TempFolder" />
    ///  will cause Aspose.Words to keep the internal structures in
    ///  temporary files instead of memory. It reduces the memory usage during saving, but will decrease the save performance.</para><para>The folder must exist and be writable, otherwise an exception will be thrown.</para><para>Aspose.Words automatically deletes all temporary files when saving is complete.</para></remarks>
    property TempFolder: string read get_TempFolder write set_TempFolder;
    ///<summary>
    ///  When <c>true</c>, pretty formats output where applicable.
    ///  Default value is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks><p>Set to <b>true</b>
    ///  to make HTML, MHTML, EPUB, WordML, RTF, DOCX and ODT output human readable.
    ///  Useful for testing or debugging.</p>
    ///</remarks>
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    ///<summary>
    ///  Gets or sets a value determining whether or not to use anti-aliasing for rendering.
    ///</summary>
    ///<remarks><para>
    ///  The default value is <c>false</c>. When this value is set to <c>true</c> anti-aliasing is
    ///  used for rendering.
    ///</para><para>This property is used when the document is exported to the following formats:
    ///<see cref="F:Aspose.Words.SaveFormat.Tiff" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Png" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Bmp" />
    ///  ,
    ///<see cref="F:Aspose.Words.SaveFormat.Jpeg" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Emf" />
    ///  . When the document is exported to the
    ///<see cref="F:Aspose.Words.SaveFormat.Html" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Mhtml" />
    ///  and <see cref="F:Aspose.Words.SaveFormat.Epub" />
    ///  formats this option is used for raster images.</para></remarks>
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    ///<summary>
    ///  Gets or sets a value determining whether or not to use high quality (i.e. slow) rendering algorithms.
    ///</summary>
    ///<remarks>
    ///  The default value is <c>false</c>.
    ///  <para>This property is used when the document is exported to image formats:
    ///<see cref="F:Aspose.Words.SaveFormat.Tiff" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Png" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Bmp" />
    ///  ,
    ///<see cref="F:Aspose.Words.SaveFormat.Jpeg" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Emf" />
    ///  .</para></remarks>
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    ///<summary>
    ///  Gets or sets value determining whether content of <see cref="T:Aspose.Words.Markup.StructuredDocumentTag" />
    ///  is updated before saving.
    ///</summary>
    ///<remarks>
    ///  The default value is <c>true</c>.
    ///</remarks>
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    ///<summary>
    ///  Gets or sets a value determining how DrawingML shapes are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.DmlRenderingMode.Fallback" />
    ///  .
    ///  <para>This property is used when the document is exported to fixed page formats.</para></remarks>
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    ///<summary>
    ///  Gets or sets a value determining how DrawingML effects are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.DmlEffectsRenderingMode.Simplified" />
    ///  .
    ///  <para>This property is used when the document is exported to fixed page formats.</para></remarks>
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    ///<summary>
    ///  Gets or sets path to default template (including filename).
    ///  Default value for this property is <b>empty string</b>
    ///  (<see cref="F:System.String.Empty" />
    ///  ).
    ///</summary>
    ///<remarks>If specified, this path is used to load template when <see cref="P:Aspose.Words.Document.AutomaticallyUpdateStyles" />
    ///  is true,
    ///  but <see cref="P:Aspose.Words.Document.AttachedTemplate" />
    ///  is empty.</remarks>
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    ///<summary>
    ///  Gets or sets a value determining if fields of certain types should be updated before saving the document to a fixed page format.
    ///  Default value for this property is <b>true</b>
    ///  .
    ///</summary>
    ///<remarks>
    ///  Allows to specify whether to mimic or not MS Word behavior.
    ///</remarks>
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    ///<summary>
    ///  Gets or sets a value determining whether the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.LastSavedTime" />
    ///  property is updated before saving.
    ///</summary>
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    ///<summary>
    ///  Gets or sets a value determining whether the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.LastPrinted" />
    ///  property is updated before saving.
    ///</summary>
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    ///<summary>
    ///  Gets or sets a value determining whether the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.CreatedTime" />
    ///  property is updated before saving.
    ///  Default value is false;
    ///</summary>
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    ///<summary>
    ///  Gets or sets value determining if memory optimization should be performed before saving the document.
    ///  Default value for this property is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks>
    ///  Setting this option to true can significantly decrease memory consumption while saving large documents at the cost of slower saving time.
    ///</remarks>
    ///<dev>
    ///  So far only attribute interning procedure is bound to this property but I think we can make more memory optimization in the future.
    ///  That's why I decided to use more general property name.
    ///</dev>
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    ///<summary>
    ///  Gets or sets a value determining how 3D effects are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.Dml3DEffectsRenderingMode.Basic" />
    ///  .
    ///</remarks>
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    ///<summary>
    ///  Gets or sets a boolean value indicating whether to allow embedding fonts with PostScript outlines
    ///  when embedding TrueType fonts in a document upon it is saved.
    ///  The default value is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks><para>Note, Word does not embed PostScript fonts, but can open documents with embedded fonts of this type.</para><para>This option only works when <see cref="P:Aspose.Words.Fonts.FontInfoCollection.EmbedTrueTypeFonts" />
    ///  of the
    ///<see cref="P:Aspose.Words.DocumentBase.FontInfos" />
    ///  property is set to <c>true</c>.</para></remarks>
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    ///<summary>
    ///  Gets or sets custom local time zone used for date/time fields.
    ///</summary>
    ///<remarks><para>This option is available in either .Net framework starting from 3.5 version or .Net Standard.</para><para>By default, Aspose.Words uses system local time zone when writes date/time fields, this option allows to set custom value.</para></remarks>
    ///<dev>
    ///  So far this option used in SDT content updating only. Please see WORDSNET-20863 for details.
    ///  We can use it for other document date/time values later.
    ///</dev>
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNRtfSaveOptions = class(TDNGenericImport<DNRtfSaveOptionsClass, DNRtfSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNTxtSaveOptionsBaseClass = interface(DNSaveOptionsClass)
  ['{F6FCE2C2-6B84-515B-86E3-64796F81AD17}']
  end;

  ///<summary>
  ///  The base class for specifying additional options when saving a document into a text based formats.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.TxtSaveOptionsBase')]
  DNTxtSaveOptionsBase = interface(DNSaveOptions)
  ['{B497D40F-3125-3EE8-9579-69422FDE9087}']
  { getters & setters } 

    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_ParagraphBreak: string;
    procedure set_ParagraphBreak(value: string);
    function get_ForcePageBreaks: Boolean;
    procedure set_ForcePageBreaks(value: Boolean);
    function get_ExportHeadersFootersMode: DNTxtExportHeadersFootersMode;
    procedure set_ExportHeadersFootersMode(value: DNTxtExportHeadersFootersMode);
    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the encoding to use when exporting in text formats.
    ///  Default value is <b>Encoding.UTF8</b>
    ///  .
    ///</summary>
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    ///<summary>
    ///  Specifies the string to use as a paragraph break when exporting in text formats.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.ControlChar.CrLf" />
    ///  .</p>
    ///</remarks>
    property ParagraphBreak: string read get_ParagraphBreak write set_ParagraphBreak;
    ///<summary><para>Allows to specify whether the page breaks should be preserved during export.</para><para>The default value is <b>false</b>
    ///  .</para></summary>
    ///<remarks>
    ///  The property affects only page breaks that are inserted explicitly into a document.
    ///  It is not related to page breaks that MS Word automatically inserts at the end of each page.
    ///</remarks>
    property ForcePageBreaks: Boolean read get_ForcePageBreaks write set_ForcePageBreaks;
    ///<summary>
    ///  Specifies the way headers and footers are exported to the text formats.
    ///  Default value is <see cref="F:Aspose.Words.Saving.TxtExportHeadersFootersMode.PrimaryOnly" />
    ///  .
    ///</summary>
    property ExportHeadersFootersMode: DNTxtExportHeadersFootersMode read get_ExportHeadersFootersMode write set_ExportHeadersFootersMode;
    ///<summary>
    ///  Specifies the format in which the document will be saved if this save options object is used.
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    ///<summary>
    ///  Specifies the folder for temporary files used when saving to a DOC or DOCX file.
    ///  By default this property is <c>null</c> and no temporary files are used.
    ///</summary>
    ///<remarks><para>When Aspose.Words saves a document, it needs to create temporary internal structures. By default,
    ///  these internal structures are created in memory and the memory usage spikes for a short period while
    ///  the document is being saved. When saving is complete, the memory is freed and reclaimed by the garbage collector.</para><para>If you are saving a very large document (thousands of pages) and/or processing many documents at the same time,
    ///  then the memory spike during saving can be significant enough to cause the system to throw <see cref="T:System.OutOfMemoryException" />
    ///  .
    ///  Specifying a temporary folder using <see cref="P:Aspose.Words.Saving.SaveOptions.TempFolder" />
    ///  will cause Aspose.Words to keep the internal structures in
    ///  temporary files instead of memory. It reduces the memory usage during saving, but will decrease the save performance.</para><para>The folder must exist and be writable, otherwise an exception will be thrown.</para><para>Aspose.Words automatically deletes all temporary files when saving is complete.</para></remarks>
    property TempFolder: string read get_TempFolder write set_TempFolder;
    ///<summary>
    ///  When <c>true</c>, pretty formats output where applicable.
    ///  Default value is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks><p>Set to <b>true</b>
    ///  to make HTML, MHTML, EPUB, WordML, RTF, DOCX and ODT output human readable.
    ///  Useful for testing or debugging.</p>
    ///</remarks>
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    ///<summary>
    ///  Gets or sets a value determining whether or not to use anti-aliasing for rendering.
    ///</summary>
    ///<remarks><para>
    ///  The default value is <c>false</c>. When this value is set to <c>true</c> anti-aliasing is
    ///  used for rendering.
    ///</para><para>This property is used when the document is exported to the following formats:
    ///<see cref="F:Aspose.Words.SaveFormat.Tiff" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Png" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Bmp" />
    ///  ,
    ///<see cref="F:Aspose.Words.SaveFormat.Jpeg" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Emf" />
    ///  . When the document is exported to the
    ///<see cref="F:Aspose.Words.SaveFormat.Html" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Mhtml" />
    ///  and <see cref="F:Aspose.Words.SaveFormat.Epub" />
    ///  formats this option is used for raster images.</para></remarks>
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    ///<summary>
    ///  Gets or sets a value determining whether or not to use high quality (i.e. slow) rendering algorithms.
    ///</summary>
    ///<remarks>
    ///  The default value is <c>false</c>.
    ///  <para>This property is used when the document is exported to image formats:
    ///<see cref="F:Aspose.Words.SaveFormat.Tiff" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Png" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Bmp" />
    ///  ,
    ///<see cref="F:Aspose.Words.SaveFormat.Jpeg" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Emf" />
    ///  .</para></remarks>
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    ///<summary>
    ///  Gets or sets value determining whether content of <see cref="T:Aspose.Words.Markup.StructuredDocumentTag" />
    ///  is updated before saving.
    ///</summary>
    ///<remarks>
    ///  The default value is <c>true</c>.
    ///</remarks>
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    ///<summary>
    ///  Gets or sets a value determining how DrawingML shapes are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.DmlRenderingMode.Fallback" />
    ///  .
    ///  <para>This property is used when the document is exported to fixed page formats.</para></remarks>
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    ///<summary>
    ///  Gets or sets a value determining how DrawingML effects are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.DmlEffectsRenderingMode.Simplified" />
    ///  .
    ///  <para>This property is used when the document is exported to fixed page formats.</para></remarks>
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    ///<summary>
    ///  Gets or sets path to default template (including filename).
    ///  Default value for this property is <b>empty string</b>
    ///  (<see cref="F:System.String.Empty" />
    ///  ).
    ///</summary>
    ///<remarks>If specified, this path is used to load template when <see cref="P:Aspose.Words.Document.AutomaticallyUpdateStyles" />
    ///  is true,
    ///  but <see cref="P:Aspose.Words.Document.AttachedTemplate" />
    ///  is empty.</remarks>
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    ///<summary>
    ///  Gets or sets a value determining if fields of certain types should be updated before saving the document to a fixed page format.
    ///  Default value for this property is <b>true</b>
    ///  .
    ///</summary>
    ///<remarks>
    ///  Allows to specify whether to mimic or not MS Word behavior.
    ///</remarks>
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    ///<summary>
    ///  Gets or sets a value determining whether the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.LastSavedTime" />
    ///  property is updated before saving.
    ///</summary>
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    ///<summary>
    ///  Gets or sets a value determining whether the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.LastPrinted" />
    ///  property is updated before saving.
    ///</summary>
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    ///<summary>
    ///  Gets or sets a value determining whether the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.CreatedTime" />
    ///  property is updated before saving.
    ///  Default value is false;
    ///</summary>
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    ///<summary>
    ///  Gets or sets value determining if memory optimization should be performed before saving the document.
    ///  Default value for this property is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks>
    ///  Setting this option to true can significantly decrease memory consumption while saving large documents at the cost of slower saving time.
    ///</remarks>
    ///<dev>
    ///  So far only attribute interning procedure is bound to this property but I think we can make more memory optimization in the future.
    ///  That's why I decided to use more general property name.
    ///</dev>
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    ///<summary>
    ///  Gets or sets a value determining how 3D effects are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.Dml3DEffectsRenderingMode.Basic" />
    ///  .
    ///</remarks>
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    ///<summary>
    ///  Gets or sets a boolean value indicating whether to allow embedding fonts with PostScript outlines
    ///  when embedding TrueType fonts in a document upon it is saved.
    ///  The default value is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks><para>Note, Word does not embed PostScript fonts, but can open documents with embedded fonts of this type.</para><para>This option only works when <see cref="P:Aspose.Words.Fonts.FontInfoCollection.EmbedTrueTypeFonts" />
    ///  of the
    ///<see cref="P:Aspose.Words.DocumentBase.FontInfos" />
    ///  property is set to <c>true</c>.</para></remarks>
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    ///<summary>
    ///  Gets or sets custom local time zone used for date/time fields.
    ///</summary>
    ///<remarks><para>This option is available in either .Net framework starting from 3.5 version or .Net Standard.</para><para>By default, Aspose.Words uses system local time zone when writes date/time fields, this option allows to set custom value.</para></remarks>
    ///<dev>
    ///  So far this option used in SDT content updating only. Please see WORDSNET-20863 for details.
    ///  We can use it for other document date/time values later.
    ///</dev>
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNTxtSaveOptionsBase = class(TDNGenericImport<DNTxtSaveOptionsBaseClass, DNTxtSaveOptionsBase>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNMarkdownSaveOptionsClass = interface(DNTxtSaveOptionsBaseClass)
  ['{12040165-2CAD-51E9-A8E3-B145B55B2E88}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class that can be used to save a document
    ///  in the <see cref="F:Aspose.Words.SaveFormat.Markdown" />
    ///  format.
    ///</summary>
    {class} function init: DNMarkdownSaveOptions;

  end;

  ///<summary>
  ///  Class to specify additional options when saving a document into the <see cref="F:Aspose.Words.SaveFormat.Markdown" />
  ///  format.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.MarkdownSaveOptions')]
  DNMarkdownSaveOptions = interface(DNTxtSaveOptionsBase)
  ['{6FA59D6B-5FCD-3DBA-8241-553A3F5063A1}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_TableContentAlignment: DNTableContentAlignment;
    procedure set_TableContentAlignment(value: DNTableContentAlignment);
    function get_ImagesFolder: string;
    procedure set_ImagesFolder(value: string);
    function get_ImageSavingCallback: DNIImageSavingCallback;
    procedure set_ImageSavingCallback(value: DNIImageSavingCallback);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_ParagraphBreak: string;
    procedure set_ParagraphBreak(value: string);
    function get_ForcePageBreaks: Boolean;
    procedure set_ForcePageBreaks(value: Boolean);
    function get_ExportHeadersFootersMode: DNTxtExportHeadersFootersMode;
    procedure set_ExportHeadersFootersMode(value: DNTxtExportHeadersFootersMode);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the format in which the document will be saved if this save options object is used.
    ///  Can only be <see cref="F:Aspose.Words.SaveFormat.Markdown" />
    ///  .
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    ///<summary>
    ///  Gets or sets a value that specifies how to align contents in tables
    ///  when exporting into the <see cref="F:Aspose.Words.SaveFormat.Markdown" />
    ///  format.
    ///  The default value is <see cref="F:Aspose.Words.Saving.TableContentAlignment.Auto" />
    ///  .
    ///</summary>
    property TableContentAlignment: DNTableContentAlignment read get_TableContentAlignment write set_TableContentAlignment;
    ///<summary>
    ///  Specifies the physical folder where images are saved when exporting a document to
    ///  the <see cref="F:Aspose.Words.SaveFormat.Markdown" />
    ///  format. Default is an empty string.
    ///</summary>
    ///<remarks><para>
    ///  When you save a <see cref="T:Aspose.Words.Document" />
    ///  in <see cref="F:Aspose.Words.SaveFormat.Markdown" />
    ///  format,
    ///  Aspose.Words needs to save all images embedded in the document as standalone files.
    ///<see cref="P:Aspose.Words.Saving.MarkdownSaveOptions.ImagesFolder" />
    ///  allows you to specify where the images will be saved.
    ///</para><para>
    ///  If you save a document into a file and provide a file name, Aspose.Words, by default, saves the images in
    ///  the same folder where the document file is saved. Use <see cref="P:Aspose.Words.Saving.MarkdownSaveOptions.ImagesFolder" />
    ///  to override this behavior.
    ///</para><para>
    ///  If you save a document into a stream, Aspose.Words does not have a folder
    ///  where to save the images, but still needs to save the images somewhere. In this case,
    ///  you need to specify an accessible folder in the <see cref="P:Aspose.Words.Saving.MarkdownSaveOptions.ImagesFolder" />
    ///  property.
    ///</para><para>
    ///  If the folder specified by <see cref="P:Aspose.Words.Saving.MarkdownSaveOptions.ImagesFolder" />
    ///  doesn't exist, it will be created automatically.
    ///</para></remarks>
    property ImagesFolder: string read get_ImagesFolder write set_ImagesFolder;
    ///<summary>
    ///  Allows to control how images are saved when a document is saved to
    ///<see cref="F:Aspose.Words.SaveFormat.Markdown" />
    ///  format.
    ///</summary>
    property ImageSavingCallback: DNIImageSavingCallback read get_ImageSavingCallback write set_ImageSavingCallback;
    ///<summary>
    ///  Specifies the encoding to use when exporting in text formats.
    ///  Default value is <b>Encoding.UTF8</b>
    ///  .
    ///</summary>
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    ///<summary>
    ///  Specifies the string to use as a paragraph break when exporting in text formats.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.ControlChar.CrLf" />
    ///  .</p>
    ///</remarks>
    property ParagraphBreak: string read get_ParagraphBreak write set_ParagraphBreak;
    ///<summary><para>Allows to specify whether the page breaks should be preserved during export.</para><para>The default value is <b>false</b>
    ///  .</para></summary>
    ///<remarks>
    ///  The property affects only page breaks that are inserted explicitly into a document.
    ///  It is not related to page breaks that MS Word automatically inserts at the end of each page.
    ///</remarks>
    property ForcePageBreaks: Boolean read get_ForcePageBreaks write set_ForcePageBreaks;
    ///<summary>
    ///  Specifies the way headers and footers are exported to the text formats.
    ///  Default value is <see cref="F:Aspose.Words.Saving.TxtExportHeadersFootersMode.PrimaryOnly" />
    ///  .
    ///</summary>
    property ExportHeadersFootersMode: DNTxtExportHeadersFootersMode read get_ExportHeadersFootersMode write set_ExportHeadersFootersMode;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNMarkdownSaveOptions = class(TDNGenericImport<DNMarkdownSaveOptionsClass, DNMarkdownSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNTxtSaveOptionsClass = interface(DNTxtSaveOptionsBaseClass)
  ['{94939A2B-0C18-5984-9678-E114ECA7C20E}']
  { constructors } 

    {class} function init: DNTxtSaveOptions;

  end;

  ///<summary>
  ///  Can be used to specify additional options when saving a document into the <see cref="F:Aspose.Words.SaveFormat.Text" />
  ///  format.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.TxtSaveOptions')]
  DNTxtSaveOptions = interface(DNTxtSaveOptionsBase)
  ['{07740729-1142-3DD3-878B-BFD0C3D67FD3}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_SimplifyListLabels: Boolean;
    procedure set_SimplifyListLabels(value: Boolean);
    function get_AddBidiMarks: Boolean;
    procedure set_AddBidiMarks(value: Boolean);
    function get_ListIndentation: DNTxtListIndentation;
    function get_PreserveTableLayout: Boolean;
    procedure set_PreserveTableLayout(value: Boolean);
    function get_MaxCharactersPerLine: Int32;
    procedure set_MaxCharactersPerLine(value: Int32);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_ParagraphBreak: string;
    procedure set_ParagraphBreak(value: string);
    function get_ForcePageBreaks: Boolean;
    procedure set_ForcePageBreaks(value: Boolean);
    function get_ExportHeadersFootersMode: DNTxtExportHeadersFootersMode;
    procedure set_ExportHeadersFootersMode(value: DNTxtExportHeadersFootersMode);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the format in which the document will be saved if this save options object is used.
    ///  Can only be <see cref="F:Aspose.Words.SaveFormat.Text" />
    ///  .
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    ///<summary><para>Specifies whether the program should simplify list labels in case of
    ///  complex label formatting not being adequately represented by plain text.</para><para>If set to <b>true</b>
    ///  , numbered list labels are written in simple numeric format
    ///  and itemized list labels as simple ASCII characters. The default value is <b>false</b>
    ///  .</para></summary>
    property SimplifyListLabels: Boolean read get_SimplifyListLabels write set_SimplifyListLabels;
    ///<summary><para>Specifies whether to add bi-directional marks before each BiDi run when exporting in plain text format.</para><para>The default value is <b>false</b>
    ///  .</para></summary>
    property AddBidiMarks: Boolean read get_AddBidiMarks write set_AddBidiMarks;
    ///<summary>
    ///  Gets a ListIndentation object that specifies how many and which character to use for indentation of list levels.
    ///  By default it is zero count of character '\0', that means no indentation.
    ///</summary>
    property ListIndentation: DNTxtListIndentation read get_ListIndentation;
    ///<summary>
    ///  Specifies whether the program should attempt to preserve layout of tables when saving in the plain text format.
    ///  The default value is <b>false</b>
    ///  .
    ///</summary>
    property PreserveTableLayout: Boolean read get_PreserveTableLayout write set_PreserveTableLayout;
    property MaxCharactersPerLine: Int32 read get_MaxCharactersPerLine write set_MaxCharactersPerLine;
    ///<summary>
    ///  Specifies the encoding to use when exporting in text formats.
    ///  Default value is <b>Encoding.UTF8</b>
    ///  .
    ///</summary>
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    ///<summary>
    ///  Specifies the string to use as a paragraph break when exporting in text formats.
    ///</summary>
    ///<remarks><p>The default value is <see cref="F:Aspose.Words.ControlChar.CrLf" />
    ///  .</p>
    ///</remarks>
    property ParagraphBreak: string read get_ParagraphBreak write set_ParagraphBreak;
    ///<summary><para>Allows to specify whether the page breaks should be preserved during export.</para><para>The default value is <b>false</b>
    ///  .</para></summary>
    ///<remarks>
    ///  The property affects only page breaks that are inserted explicitly into a document.
    ///  It is not related to page breaks that MS Word automatically inserts at the end of each page.
    ///</remarks>
    property ForcePageBreaks: Boolean read get_ForcePageBreaks write set_ForcePageBreaks;
    ///<summary>
    ///  Specifies the way headers and footers are exported to the text formats.
    ///  Default value is <see cref="F:Aspose.Words.Saving.TxtExportHeadersFootersMode.PrimaryOnly" />
    ///  .
    ///</summary>
    property ExportHeadersFootersMode: DNTxtExportHeadersFootersMode read get_ExportHeadersFootersMode write set_ExportHeadersFootersMode;
    property TempFolder: string read get_TempFolder write set_TempFolder;
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNTxtSaveOptions = class(TDNGenericImport<DNTxtSaveOptionsClass, DNTxtSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNWordML2003SaveOptionsClass = interface(DNSaveOptionsClass)
  ['{303BAC21-076C-555F-A664-720912729924}']
  { constructors } 

    {class} function init: DNWordML2003SaveOptions;

  end;

  ///<summary>
  ///  Can be used to specify additional options when saving a document into the <see cref="F:Aspose.Words.SaveFormat.WordML" />
  ///  format.
  ///</summary>
  ///<remarks><para>At the moment provides only the <see cref="P:Aspose.Words.Saving.WordML2003SaveOptions.SaveFormat" />
  ///  property, but in the future may have other options added.</para></remarks>
  [DNTypeName('Aspose.Words.Saving.WordML2003SaveOptions')]
  DNWordML2003SaveOptions = interface(DNSaveOptions)
  ['{05DC32AB-BD1B-3D07-81DC-C2BC021C1DD5}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the format in which the document will be saved if this save options object is used.
    ///  Can only be <see cref="F:Aspose.Words.SaveFormat.WordML" />
    ///  .
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    ///<summary>
    ///  Specifies the folder for temporary files used when saving to a DOC or DOCX file.
    ///  By default this property is <c>null</c> and no temporary files are used.
    ///</summary>
    ///<remarks><para>When Aspose.Words saves a document, it needs to create temporary internal structures. By default,
    ///  these internal structures are created in memory and the memory usage spikes for a short period while
    ///  the document is being saved. When saving is complete, the memory is freed and reclaimed by the garbage collector.</para><para>If you are saving a very large document (thousands of pages) and/or processing many documents at the same time,
    ///  then the memory spike during saving can be significant enough to cause the system to throw <see cref="T:System.OutOfMemoryException" />
    ///  .
    ///  Specifying a temporary folder using <see cref="P:Aspose.Words.Saving.SaveOptions.TempFolder" />
    ///  will cause Aspose.Words to keep the internal structures in
    ///  temporary files instead of memory. It reduces the memory usage during saving, but will decrease the save performance.</para><para>The folder must exist and be writable, otherwise an exception will be thrown.</para><para>Aspose.Words automatically deletes all temporary files when saving is complete.</para></remarks>
    property TempFolder: string read get_TempFolder write set_TempFolder;
    ///<summary>
    ///  When <c>true</c>, pretty formats output where applicable.
    ///  Default value is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks><p>Set to <b>true</b>
    ///  to make HTML, MHTML, EPUB, WordML, RTF, DOCX and ODT output human readable.
    ///  Useful for testing or debugging.</p>
    ///</remarks>
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    ///<summary>
    ///  Gets or sets a value determining whether or not to use anti-aliasing for rendering.
    ///</summary>
    ///<remarks><para>
    ///  The default value is <c>false</c>. When this value is set to <c>true</c> anti-aliasing is
    ///  used for rendering.
    ///</para><para>This property is used when the document is exported to the following formats:
    ///<see cref="F:Aspose.Words.SaveFormat.Tiff" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Png" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Bmp" />
    ///  ,
    ///<see cref="F:Aspose.Words.SaveFormat.Jpeg" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Emf" />
    ///  . When the document is exported to the
    ///<see cref="F:Aspose.Words.SaveFormat.Html" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Mhtml" />
    ///  and <see cref="F:Aspose.Words.SaveFormat.Epub" />
    ///  formats this option is used for raster images.</para></remarks>
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    ///<summary>
    ///  Gets or sets a value determining whether or not to use high quality (i.e. slow) rendering algorithms.
    ///</summary>
    ///<remarks>
    ///  The default value is <c>false</c>.
    ///  <para>This property is used when the document is exported to image formats:
    ///<see cref="F:Aspose.Words.SaveFormat.Tiff" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Png" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Bmp" />
    ///  ,
    ///<see cref="F:Aspose.Words.SaveFormat.Jpeg" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Emf" />
    ///  .</para></remarks>
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    ///<summary>
    ///  Gets or sets value determining whether content of <see cref="T:Aspose.Words.Markup.StructuredDocumentTag" />
    ///  is updated before saving.
    ///</summary>
    ///<remarks>
    ///  The default value is <c>true</c>.
    ///</remarks>
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    ///<summary>
    ///  Gets or sets a value determining how DrawingML shapes are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.DmlRenderingMode.Fallback" />
    ///  .
    ///  <para>This property is used when the document is exported to fixed page formats.</para></remarks>
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    ///<summary>
    ///  Gets or sets a value determining how DrawingML effects are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.DmlEffectsRenderingMode.Simplified" />
    ///  .
    ///  <para>This property is used when the document is exported to fixed page formats.</para></remarks>
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    ///<summary>
    ///  Gets or sets path to default template (including filename).
    ///  Default value for this property is <b>empty string</b>
    ///  (<see cref="F:System.String.Empty" />
    ///  ).
    ///</summary>
    ///<remarks>If specified, this path is used to load template when <see cref="P:Aspose.Words.Document.AutomaticallyUpdateStyles" />
    ///  is true,
    ///  but <see cref="P:Aspose.Words.Document.AttachedTemplate" />
    ///  is empty.</remarks>
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    ///<summary>
    ///  Gets or sets a value determining if fields of certain types should be updated before saving the document to a fixed page format.
    ///  Default value for this property is <b>true</b>
    ///  .
    ///</summary>
    ///<remarks>
    ///  Allows to specify whether to mimic or not MS Word behavior.
    ///</remarks>
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    ///<summary>
    ///  Gets or sets a value determining whether the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.LastSavedTime" />
    ///  property is updated before saving.
    ///</summary>
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    ///<summary>
    ///  Gets or sets a value determining whether the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.LastPrinted" />
    ///  property is updated before saving.
    ///</summary>
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    ///<summary>
    ///  Gets or sets a value determining whether the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.CreatedTime" />
    ///  property is updated before saving.
    ///  Default value is false;
    ///</summary>
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    ///<summary>
    ///  Gets or sets value determining if memory optimization should be performed before saving the document.
    ///  Default value for this property is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks>
    ///  Setting this option to true can significantly decrease memory consumption while saving large documents at the cost of slower saving time.
    ///</remarks>
    ///<dev>
    ///  So far only attribute interning procedure is bound to this property but I think we can make more memory optimization in the future.
    ///  That's why I decided to use more general property name.
    ///</dev>
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    ///<summary>
    ///  Gets or sets a value determining how 3D effects are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.Dml3DEffectsRenderingMode.Basic" />
    ///  .
    ///</remarks>
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    ///<summary>
    ///  Gets or sets a boolean value indicating whether to allow embedding fonts with PostScript outlines
    ///  when embedding TrueType fonts in a document upon it is saved.
    ///  The default value is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks><para>Note, Word does not embed PostScript fonts, but can open documents with embedded fonts of this type.</para><para>This option only works when <see cref="P:Aspose.Words.Fonts.FontInfoCollection.EmbedTrueTypeFonts" />
    ///  of the
    ///<see cref="P:Aspose.Words.DocumentBase.FontInfos" />
    ///  property is set to <c>true</c>.</para></remarks>
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    ///<summary>
    ///  Gets or sets custom local time zone used for date/time fields.
    ///</summary>
    ///<remarks><para>This option is available in either .Net framework starting from 3.5 version or .Net Standard.</para><para>By default, Aspose.Words uses system local time zone when writes date/time fields, this option allows to set custom value.</para></remarks>
    ///<dev>
    ///  So far this option used in SDT content updating only. Please see WORDSNET-20863 for details.
    ///  We can use it for other document date/time values later.
    ///</dev>
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNWordML2003SaveOptions = class(TDNGenericImport<DNWordML2003SaveOptionsClass, DNWordML2003SaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNXamlFlowSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{E9AD8DC3-BBD1-562F-808F-E004F3E4F12E}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class that can be used to save a document in the <see cref="F:Aspose.Words.SaveFormat.XamlFlow" />
    ///  format.
    ///</summary>
    {class} function init: DNXamlFlowSaveOptions; overload;
    ///<summary>
    ///  Initializes a new instance of this class that can be used to save a document in the <see cref="F:Aspose.Words.SaveFormat.XamlFlow" />
    ///  or <see cref="F:Aspose.Words.SaveFormat.XamlFlowPack" />
    ///  format.
    ///</summary>
    ///  <param name="saveFormat">Can be <see cref="F:Aspose.Words.SaveFormat.XamlFlow" />
    ///  or <see cref="F:Aspose.Words.SaveFormat.XamlFlowPack" />
    ///  .</param>
    {class} function init(saveFormat: DNSaveFormat): DNXamlFlowSaveOptions; overload;

  end;

  ///<summary>
  ///  Can be used to specify additional options when saving a document into the
  ///<see cref="F:Aspose.Words.SaveFormat.XamlFlow" />
  ///  or <see cref="F:Aspose.Words.SaveFormat.XamlFlowPack" />
  ///  format.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.XamlFlowSaveOptions')]
  DNXamlFlowSaveOptions = interface(DNSaveOptions)
  ['{B893C5BB-AFC5-3CF8-B26F-AAEF6457C859}']
  { getters & setters } 

    function get_SaveFormat: DNSaveFormat;
    procedure set_SaveFormat(value: DNSaveFormat);
    function get_ImagesFolder: string;
    procedure set_ImagesFolder(value: string);
    function get_ImagesFolderAlias: string;
    procedure set_ImagesFolderAlias(value: string);
    function get_ImageSavingCallback: DNIImageSavingCallback;
    procedure set_ImageSavingCallback(value: DNIImageSavingCallback);
    function get_TempFolder: string;
    procedure set_TempFolder(value: string);
    function get_PrettyFormat: Boolean;
    procedure set_PrettyFormat(value: Boolean);
    function get_UseAntiAliasing: Boolean;
    procedure set_UseAntiAliasing(value: Boolean);
    function get_UseHighQualityRendering: Boolean;
    procedure set_UseHighQualityRendering(value: Boolean);
    function get_UpdateSdtContent: Boolean;
    procedure set_UpdateSdtContent(value: Boolean);
    function get_DmlRenderingMode: DNDmlRenderingMode;
    procedure set_DmlRenderingMode(value: DNDmlRenderingMode);
    function get_DmlEffectsRenderingMode: DNDmlEffectsRenderingMode;
    procedure set_DmlEffectsRenderingMode(value: DNDmlEffectsRenderingMode);
    function get_ImlRenderingMode: DNImlRenderingMode;
    procedure set_ImlRenderingMode(value: DNImlRenderingMode);
    function get_DefaultTemplate: string;
    procedure set_DefaultTemplate(value: string);
    function get_UpdateFields: Boolean;
    procedure set_UpdateFields(value: Boolean);
    function get_UpdateLastSavedTimeProperty: Boolean;
    procedure set_UpdateLastSavedTimeProperty(value: Boolean);
    function get_UpdateLastPrintedProperty: Boolean;
    procedure set_UpdateLastPrintedProperty(value: Boolean);
    function get_UpdateCreatedTimeProperty: Boolean;
    procedure set_UpdateCreatedTimeProperty(value: Boolean);
    function get_MemoryOptimization: Boolean;
    procedure set_MemoryOptimization(value: Boolean);
    function get_Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode;
    procedure set_Dml3DEffectsRenderingMode(value: DNDml3DEffectsRenderingMode);
    function get_AllowEmbeddingPostScriptFonts: Boolean;
    procedure set_AllowEmbeddingPostScriptFonts(value: Boolean);
    function get_CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo;
    procedure set_CustomTimeZoneInfo(value: DDN.mscorlib.DNTimeZoneInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the format in which the document will be saved if this save options object is used.
    ///  Can only be <see cref="F:Aspose.Words.SaveFormat.XamlFlow" />
    ///  .
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat write set_SaveFormat;
    ///<summary>
    ///  Specifies the physical folder where images are saved when exporting a document to XAML format.
    ///  Default is an empty string.
    ///</summary>
    ///<remarks><p>When you save a <see cref="T:Aspose.Words.Document" />
    ///  in XAML format, Aspose.Words needs to save all
    ///  images embedded in the document as standalone files. <see cref="P:Aspose.Words.Saving.XamlFlowSaveOptions.ImagesFolder" />
    ///  allows you to specify where the images will be saved and <see cref="P:Aspose.Words.Saving.XamlFlowSaveOptions.ImagesFolderAlias" />
    ///  allows to specify how the image URIs will be constructed.</p>
    ///  <p>If you save a document into a file and provide a file name, Aspose.Words, by default, saves the
    ///  images in the same folder where the document file is saved. Use <see cref="P:Aspose.Words.Saving.XamlFlowSaveOptions.ImagesFolder" />
    ///  to override this behavior.</p>
    ///  <p>If you save a document into a stream, Aspose.Words does not have a folder where to save the images,
    ///  but still needs to save the images somewhere. In this case, you need to specify an accessible folder
    ///  in the <see cref="P:Aspose.Words.Saving.XamlFlowSaveOptions.ImagesFolder" />
    ///  property or provide custom streams via
    ///  the <see cref="P:Aspose.Words.Saving.XamlFlowSaveOptions.ImageSavingCallback" />
    ///  event handler.</p>
    ///<seealso cref="P:Aspose.Words.Saving.XamlFlowSaveOptions.ImagesFolderAlias" />
    ///<seealso cref="P:Aspose.Words.Saving.XamlFlowSaveOptions.ImageSavingCallback" />
    ///</remarks>
    property ImagesFolder: string read get_ImagesFolder write set_ImagesFolder;
    ///<summary>
    ///  Specifies the name of the folder used to construct image URIs written into an XAML document.
    ///  Default is an empty string.
    ///</summary>
    ///<remarks><p>When you save a <see cref="T:Aspose.Words.Document" />
    ///  in XAML format, Aspose.Words needs to save all
    ///  images embedded in the document as standalone files. <see cref="P:Aspose.Words.Saving.XamlFlowSaveOptions.ImagesFolder" />
    ///  allows you to specify where the images will be saved and <see cref="P:Aspose.Words.Saving.XamlFlowSaveOptions.ImagesFolderAlias" />
    ///  allows to specify how the image URIs will be constructed.</p>
    ///  <p>If <see cref="P:Aspose.Words.Saving.XamlFlowSaveOptions.ImagesFolderAlias" />
    ///  is not an empty string, then the image URI written
    ///  to XAML will be <i>ImagesFolderAlias + &lt;image file name&gt;</i>.</p>
    ///  <p>If <see cref="P:Aspose.Words.Saving.XamlFlowSaveOptions.ImagesFolderAlias" />
    ///  is an empty string, then the image URI written
    ///  to XAML will be <i>ImagesFolder + &lt;image file name&gt;</i>.</p>
    ///  <p>If <see cref="P:Aspose.Words.Saving.XamlFlowSaveOptions.ImagesFolderAlias" />
    ///  is set to '.' (dot), then the image file name
    ///  will be written to XAML without path regardless of other options.</p>
    ///<seealso cref="P:Aspose.Words.Saving.XamlFlowSaveOptions.ImagesFolder" />
    ///<seealso cref="P:Aspose.Words.Saving.XamlFlowSaveOptions.ImageSavingCallback" />
    ///</remarks>
    property ImagesFolderAlias: string read get_ImagesFolderAlias write set_ImagesFolderAlias;
    ///<summary>
    ///  Allows to control how images are saved when a document is saved to XAML.
    ///</summary>
    property ImageSavingCallback: DNIImageSavingCallback read get_ImageSavingCallback write set_ImageSavingCallback;
    ///<summary>
    ///  Specifies the folder for temporary files used when saving to a DOC or DOCX file.
    ///  By default this property is <c>null</c> and no temporary files are used.
    ///</summary>
    ///<remarks><para>When Aspose.Words saves a document, it needs to create temporary internal structures. By default,
    ///  these internal structures are created in memory and the memory usage spikes for a short period while
    ///  the document is being saved. When saving is complete, the memory is freed and reclaimed by the garbage collector.</para><para>If you are saving a very large document (thousands of pages) and/or processing many documents at the same time,
    ///  then the memory spike during saving can be significant enough to cause the system to throw <see cref="T:System.OutOfMemoryException" />
    ///  .
    ///  Specifying a temporary folder using <see cref="P:Aspose.Words.Saving.SaveOptions.TempFolder" />
    ///  will cause Aspose.Words to keep the internal structures in
    ///  temporary files instead of memory. It reduces the memory usage during saving, but will decrease the save performance.</para><para>The folder must exist and be writable, otherwise an exception will be thrown.</para><para>Aspose.Words automatically deletes all temporary files when saving is complete.</para></remarks>
    property TempFolder: string read get_TempFolder write set_TempFolder;
    ///<summary>
    ///  When <c>true</c>, pretty formats output where applicable.
    ///  Default value is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks><p>Set to <b>true</b>
    ///  to make HTML, MHTML, EPUB, WordML, RTF, DOCX and ODT output human readable.
    ///  Useful for testing or debugging.</p>
    ///</remarks>
    property PrettyFormat: Boolean read get_PrettyFormat write set_PrettyFormat;
    ///<summary>
    ///  Gets or sets a value determining whether or not to use anti-aliasing for rendering.
    ///</summary>
    ///<remarks><para>
    ///  The default value is <c>false</c>. When this value is set to <c>true</c> anti-aliasing is
    ///  used for rendering.
    ///</para><para>This property is used when the document is exported to the following formats:
    ///<see cref="F:Aspose.Words.SaveFormat.Tiff" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Png" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Bmp" />
    ///  ,
    ///<see cref="F:Aspose.Words.SaveFormat.Jpeg" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Emf" />
    ///  . When the document is exported to the
    ///<see cref="F:Aspose.Words.SaveFormat.Html" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Mhtml" />
    ///  and <see cref="F:Aspose.Words.SaveFormat.Epub" />
    ///  formats this option is used for raster images.</para></remarks>
    property UseAntiAliasing: Boolean read get_UseAntiAliasing write set_UseAntiAliasing;
    ///<summary>
    ///  Gets or sets a value determining whether or not to use high quality (i.e. slow) rendering algorithms.
    ///</summary>
    ///<remarks>
    ///  The default value is <c>false</c>.
    ///  <para>This property is used when the document is exported to image formats:
    ///<see cref="F:Aspose.Words.SaveFormat.Tiff" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Png" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Bmp" />
    ///  ,
    ///<see cref="F:Aspose.Words.SaveFormat.Jpeg" />
    ///  , <see cref="F:Aspose.Words.SaveFormat.Emf" />
    ///  .</para></remarks>
    property UseHighQualityRendering: Boolean read get_UseHighQualityRendering write set_UseHighQualityRendering;
    ///<summary>
    ///  Gets or sets value determining whether content of <see cref="T:Aspose.Words.Markup.StructuredDocumentTag" />
    ///  is updated before saving.
    ///</summary>
    ///<remarks>
    ///  The default value is <c>true</c>.
    ///</remarks>
    property UpdateSdtContent: Boolean read get_UpdateSdtContent write set_UpdateSdtContent;
    ///<summary>
    ///  Gets or sets a value determining how DrawingML shapes are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.DmlRenderingMode.Fallback" />
    ///  .
    ///  <para>This property is used when the document is exported to fixed page formats.</para></remarks>
    property DmlRenderingMode: DNDmlRenderingMode read get_DmlRenderingMode write set_DmlRenderingMode;
    ///<summary>
    ///  Gets or sets a value determining how DrawingML effects are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.DmlEffectsRenderingMode.Simplified" />
    ///  .
    ///  <para>This property is used when the document is exported to fixed page formats.</para></remarks>
    property DmlEffectsRenderingMode: DNDmlEffectsRenderingMode read get_DmlEffectsRenderingMode write set_DmlEffectsRenderingMode;
    property ImlRenderingMode: DNImlRenderingMode read get_ImlRenderingMode write set_ImlRenderingMode;
    ///<summary>
    ///  Gets or sets path to default template (including filename).
    ///  Default value for this property is <b>empty string</b>
    ///  (<see cref="F:System.String.Empty" />
    ///  ).
    ///</summary>
    ///<remarks>If specified, this path is used to load template when <see cref="P:Aspose.Words.Document.AutomaticallyUpdateStyles" />
    ///  is true,
    ///  but <see cref="P:Aspose.Words.Document.AttachedTemplate" />
    ///  is empty.</remarks>
    property DefaultTemplate: string read get_DefaultTemplate write set_DefaultTemplate;
    ///<summary>
    ///  Gets or sets a value determining if fields of certain types should be updated before saving the document to a fixed page format.
    ///  Default value for this property is <b>true</b>
    ///  .
    ///</summary>
    ///<remarks>
    ///  Allows to specify whether to mimic or not MS Word behavior.
    ///</remarks>
    property UpdateFields: Boolean read get_UpdateFields write set_UpdateFields;
    ///<summary>
    ///  Gets or sets a value determining whether the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.LastSavedTime" />
    ///  property is updated before saving.
    ///</summary>
    property UpdateLastSavedTimeProperty: Boolean read get_UpdateLastSavedTimeProperty write set_UpdateLastSavedTimeProperty;
    ///<summary>
    ///  Gets or sets a value determining whether the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.LastPrinted" />
    ///  property is updated before saving.
    ///</summary>
    property UpdateLastPrintedProperty: Boolean read get_UpdateLastPrintedProperty write set_UpdateLastPrintedProperty;
    ///<summary>
    ///  Gets or sets a value determining whether the <see cref="P:Aspose.Words.Properties.BuiltInDocumentProperties.CreatedTime" />
    ///  property is updated before saving.
    ///  Default value is false;
    ///</summary>
    property UpdateCreatedTimeProperty: Boolean read get_UpdateCreatedTimeProperty write set_UpdateCreatedTimeProperty;
    ///<summary>
    ///  Gets or sets value determining if memory optimization should be performed before saving the document.
    ///  Default value for this property is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks>
    ///  Setting this option to true can significantly decrease memory consumption while saving large documents at the cost of slower saving time.
    ///</remarks>
    ///<dev>
    ///  So far only attribute interning procedure is bound to this property but I think we can make more memory optimization in the future.
    ///  That's why I decided to use more general property name.
    ///</dev>
    property MemoryOptimization: Boolean read get_MemoryOptimization write set_MemoryOptimization;
    ///<summary>
    ///  Gets or sets a value determining how 3D effects are rendered.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Saving.Dml3DEffectsRenderingMode.Basic" />
    ///  .
    ///</remarks>
    property Dml3DEffectsRenderingMode: DNDml3DEffectsRenderingMode read get_Dml3DEffectsRenderingMode write set_Dml3DEffectsRenderingMode;
    ///<summary>
    ///  Gets or sets a boolean value indicating whether to allow embedding fonts with PostScript outlines
    ///  when embedding TrueType fonts in a document upon it is saved.
    ///  The default value is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks><para>Note, Word does not embed PostScript fonts, but can open documents with embedded fonts of this type.</para><para>This option only works when <see cref="P:Aspose.Words.Fonts.FontInfoCollection.EmbedTrueTypeFonts" />
    ///  of the
    ///<see cref="P:Aspose.Words.DocumentBase.FontInfos" />
    ///  property is set to <c>true</c>.</para></remarks>
    property AllowEmbeddingPostScriptFonts: Boolean read get_AllowEmbeddingPostScriptFonts write set_AllowEmbeddingPostScriptFonts;
    ///<summary>
    ///  Gets or sets custom local time zone used for date/time fields.
    ///</summary>
    ///<remarks><para>This option is available in either .Net framework starting from 3.5 version or .Net Standard.</para><para>By default, Aspose.Words uses system local time zone when writes date/time fields, this option allows to set custom value.</para></remarks>
    ///<dev>
    ///  So far this option used in SDT content updating only. Please see WORDSNET-20863 for details.
    ///  We can use it for other document date/time values later.
    ///</dev>
    property CustomTimeZoneInfo: DDN.mscorlib.DNTimeZoneInfo read get_CustomTimeZoneInfo write set_CustomTimeZoneInfo;
  end;

  TDNXamlFlowSaveOptions = class(TDNGenericImport<DNXamlFlowSaveOptionsClass, DNXamlFlowSaveOptions>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNSaveOutputParametersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{11B4698C-6FEB-5F82-9A66-898C81F9524C}']
  end;

  ///<summary>
  ///  This object is returned to the caller after a document is saved and contains additional information that
  ///  has been generated or calculated during the save operation. The caller can use or ignore this object.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.SaveOutputParameters')]
  DNSaveOutputParameters = interface(DDN.mscorlib.DNObject)
  ['{625E5307-FC3D-333A-BFB7-CB164624C339}']
  { getters & setters } 

    function get_ContentType: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the Content-Type string (Internet Media Type) that identifies the type of the saved document.
    ///</summary>
    property ContentType: string read get_ContentType;
  end;

  TDNSaveOutputParameters = class(TDNGenericImport<DNSaveOutputParametersClass, DNSaveOutputParameters>) end;

  //-------------namespace: Aspose.Words.Saving----------------
  DNTxtListIndentationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6EA9839D-3316-593A-9279-E79E606F026F}']
  { constructors } 

    {class} function init: DNTxtListIndentation;

  end;

  ///<summary>
  ///  Specifies how list levels are indented when document is exporting to <see cref="F:Aspose.Words.SaveFormat.Text" />
  ///  format.
  ///</summary>
  [DNTypeName('Aspose.Words.Saving.TxtListIndentation')]
  DNTxtListIndentation = interface(DDN.mscorlib.DNObject)
  ['{59513251-3BB5-3CE9-9076-F63E4FB5C523}']
  { getters & setters } 

    function get_Count: Int32;
    procedure set_Count(value: Int32);
    function get_Character: Char;
    procedure set_Character(value: Char);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets how many <see cref="P:Aspose.Words.Saving.TxtListIndentation.Character" />
    ///  to use as indentation per one list level.
    ///  The default value is 0, that means no indentation.
    ///</summary>
    property Count: Int32 read get_Count write set_Count;
    ///<summary>
    ///  Gets or sets which character to use for indenting list levels.
    ///  The default value is '\0', that means there is no indentation.
    ///</summary>
    property Character: Char read get_Character write set_Character;
  end;

  TDNTxtListIndentation = class(TDNGenericImport<DNTxtListIndentationClass, DNTxtListIndentation>) end;

  //-------------namespace: Aspose.Words.Settings----------------
  DNCompatibilityOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{456E5D8E-6EF6-574B-9548-389734C4FF5F}']
  end;

  ///<summary>
  ///  Contains compatibility options (that is, the user preferences entered on the <b>Compatibility</b>
  ///  tab of the <b>Options</b>
  ///  dialog in Microsoft Word).
  ///</summary>
  ///<seealso cref="T:Aspose.Words.Document" />
  ///<seealso cref="P:Aspose.Words.Document.CompatibilityOptions" />
  [DNTypeName('Aspose.Words.Settings.CompatibilityOptions')]
  DNCompatibilityOptions = interface(DDN.mscorlib.DNObject)
  ['{0A513673-91A6-3086-8949-9D10EC12C3C2}']
  { getters & setters } 

    function get_NoTabHangInd: Boolean;
    procedure set_NoTabHangInd(value: Boolean);
    function get_NoSpaceRaiseLower: Boolean;
    procedure set_NoSpaceRaiseLower(value: Boolean);
    function get_SuppressSpBfAfterPgBrk: Boolean;
    procedure set_SuppressSpBfAfterPgBrk(value: Boolean);
    function get_WrapTrailSpaces: Boolean;
    procedure set_WrapTrailSpaces(value: Boolean);
    function get_PrintColBlack: Boolean;
    procedure set_PrintColBlack(value: Boolean);
    function get_NoColumnBalance: Boolean;
    procedure set_NoColumnBalance(value: Boolean);
    function get_ConvMailMergeEsc: Boolean;
    procedure set_ConvMailMergeEsc(value: Boolean);
    function get_SuppressTopSpacing: Boolean;
    procedure set_SuppressTopSpacing(value: Boolean);
    function get_UseSingleBorderforContiguousCells: Boolean;
    procedure set_UseSingleBorderforContiguousCells(value: Boolean);
    function get_TransparentMetafiles: Boolean;
    procedure set_TransparentMetafiles(value: Boolean);
    function get_ShowBreaksInFrames: Boolean;
    procedure set_ShowBreaksInFrames(value: Boolean);
    function get_SwapBordersFacingPgs: Boolean;
    procedure set_SwapBordersFacingPgs(value: Boolean);
    function get_DoNotLeaveBackslashAlone: Boolean;
    procedure set_DoNotLeaveBackslashAlone(value: Boolean);
    function get_DoNotExpandShiftReturn: Boolean;
    procedure set_DoNotExpandShiftReturn(value: Boolean);
    function get_UlTrailSpace: Boolean;
    procedure set_UlTrailSpace(value: Boolean);
    function get_BalanceSingleByteDoubleByteWidth: Boolean;
    procedure set_BalanceSingleByteDoubleByteWidth(value: Boolean);
    function get_SuppressSpacingAtTopOfPage: Boolean;
    procedure set_SuppressSpacingAtTopOfPage(value: Boolean);
    function get_SpacingInWholePoints: Boolean;
    procedure set_SpacingInWholePoints(value: Boolean);
    function get_PrintBodyTextBeforeHeader: Boolean;
    procedure set_PrintBodyTextBeforeHeader(value: Boolean);
    function get_NoLeading: Boolean;
    procedure set_NoLeading(value: Boolean);
    function get_SpaceForUL: Boolean;
    procedure set_SpaceForUL(value: Boolean);
    function get_MWSmallCaps: Boolean;
    procedure set_MWSmallCaps(value: Boolean);
    function get_SuppressTopSpacingWP: Boolean;
    procedure set_SuppressTopSpacingWP(value: Boolean);
    function get_TruncateFontHeightsLikeWP6: Boolean;
    procedure set_TruncateFontHeightsLikeWP6(value: Boolean);
    function get_SubFontBySize: Boolean;
    procedure set_SubFontBySize(value: Boolean);
    function get_LineWrapLikeWord6: Boolean;
    procedure set_LineWrapLikeWord6(value: Boolean);
    function get_DoNotSuppressParagraphBorders: Boolean;
    procedure set_DoNotSuppressParagraphBorders(value: Boolean);
    function get_NoExtraLineSpacing: Boolean;
    procedure set_NoExtraLineSpacing(value: Boolean);
    function get_SuppressBottomSpacing: Boolean;
    procedure set_SuppressBottomSpacing(value: Boolean);
    function get_WPSpaceWidth: Boolean;
    procedure set_WPSpaceWidth(value: Boolean);
    function get_WPJustification: Boolean;
    procedure set_WPJustification(value: Boolean);
    function get_UsePrinterMetrics: Boolean;
    procedure set_UsePrinterMetrics(value: Boolean);
    function get_ShapeLayoutLikeWW8: Boolean;
    procedure set_ShapeLayoutLikeWW8(value: Boolean);
    function get_FootnoteLayoutLikeWW8: Boolean;
    procedure set_FootnoteLayoutLikeWW8(value: Boolean);
    function get_DoNotUseHTMLParagraphAutoSpacing: Boolean;
    procedure set_DoNotUseHTMLParagraphAutoSpacing(value: Boolean);
    function get_AdjustLineHeightInTable: Boolean;
    procedure set_AdjustLineHeightInTable(value: Boolean);
    function get_ForgetLastTabAlignment: Boolean;
    procedure set_ForgetLastTabAlignment(value: Boolean);
    function get_AutoSpaceLikeWord95: Boolean;
    procedure set_AutoSpaceLikeWord95(value: Boolean);
    function get_AlignTablesRowByRow: Boolean;
    procedure set_AlignTablesRowByRow(value: Boolean);
    function get_LayoutRawTableWidth: Boolean;
    procedure set_LayoutRawTableWidth(value: Boolean);
    function get_LayoutTableRowsApart: Boolean;
    procedure set_LayoutTableRowsApart(value: Boolean);
    function get_UseWord97LineBreakRules: Boolean;
    procedure set_UseWord97LineBreakRules(value: Boolean);
    function get_DoNotBreakWrappedTables: Boolean;
    procedure set_DoNotBreakWrappedTables(value: Boolean);
    function get_DoNotSnapToGridInCell: Boolean;
    procedure set_DoNotSnapToGridInCell(value: Boolean);
    function get_SelectFldWithFirstOrLastChar: Boolean;
    procedure set_SelectFldWithFirstOrLastChar(value: Boolean);
    function get_ApplyBreakingRules: Boolean;
    procedure set_ApplyBreakingRules(value: Boolean);
    function get_DoNotWrapTextWithPunct: Boolean;
    procedure set_DoNotWrapTextWithPunct(value: Boolean);
    function get_DoNotUseEastAsianBreakRules: Boolean;
    procedure set_DoNotUseEastAsianBreakRules(value: Boolean);
    function get_UseWord2002TableStyleRules: Boolean;
    procedure set_UseWord2002TableStyleRules(value: Boolean);
    function get_GrowAutofit: Boolean;
    procedure set_GrowAutofit(value: Boolean);
    function get_UseNormalStyleForList: Boolean;
    procedure set_UseNormalStyleForList(value: Boolean);
    function get_DoNotUseIndentAsNumberingTabStop: Boolean;
    procedure set_DoNotUseIndentAsNumberingTabStop(value: Boolean);
    function get_UseAltKinsokuLineBreakRules: Boolean;
    procedure set_UseAltKinsokuLineBreakRules(value: Boolean);
    function get_AllowSpaceOfSameStyleInTable: Boolean;
    procedure set_AllowSpaceOfSameStyleInTable(value: Boolean);
    function get_DoNotSuppressIndentation: Boolean;
    procedure set_DoNotSuppressIndentation(value: Boolean);
    function get_DoNotAutofitConstrainedTables: Boolean;
    procedure set_DoNotAutofitConstrainedTables(value: Boolean);
    function get_AutofitToFirstFixedWidthCell: Boolean;
    procedure set_AutofitToFirstFixedWidthCell(value: Boolean);
    function get_UnderlineTabInNumList: Boolean;
    procedure set_UnderlineTabInNumList(value: Boolean);
    function get_DisplayHangulFixedWidth: Boolean;
    procedure set_DisplayHangulFixedWidth(value: Boolean);
    function get_SplitPgBreakAndParaMark: Boolean;
    procedure set_SplitPgBreakAndParaMark(value: Boolean);
    function get_DoNotVertAlignCellWithSp: Boolean;
    procedure set_DoNotVertAlignCellWithSp(value: Boolean);
    function get_DoNotBreakConstrainedForcedTable: Boolean;
    procedure set_DoNotBreakConstrainedForcedTable(value: Boolean);
    function get_DoNotVertAlignInTxbx: Boolean;
    procedure set_DoNotVertAlignInTxbx(value: Boolean);
    function get_UseAnsiKerningPairs: Boolean;
    procedure set_UseAnsiKerningPairs(value: Boolean);
    function get_CachedColBalance: Boolean;
    procedure set_CachedColBalance(value: Boolean);
    function get_UseFELayout: Boolean;
    procedure set_UseFELayout(value: Boolean);
    function get_OverrideTableStyleFontSizeAndJustification: Boolean;
    procedure set_OverrideTableStyleFontSizeAndJustification(value: Boolean);
    function get_DisableOpenTypeFontFormattingFeatures: Boolean;
    procedure set_DisableOpenTypeFontFormattingFeatures(value: Boolean);
    function get_SwapInsideAndOutsideForMirrorIndentsAndRelativePositioning: Boolean;
    procedure set_SwapInsideAndOutsideForMirrorIndentsAndRelativePositioning(value: Boolean);
    function get_UseWord2010TableStyleRules: Boolean;
    procedure set_UseWord2010TableStyleRules(value: Boolean);
    function get_UICompat97To2003: Boolean;
    procedure set_UICompat97To2003(value: Boolean);

  { methods } 

    ///<summary><para>Allows to optimize the document contents as well as default Aspose.Words behavior to a particular versions of MS Word.</para><para>Use this method to prevent MS Word from displaying "Compatibility mode" ribbon upon document loading.
    ///  (Note that you may also need to set the <see cref="P:Aspose.Words.Saving.OoxmlSaveOptions.Compliance" />
    ///  property to
    ///<see cref="F:Aspose.Words.Saving.OoxmlCompliance.Iso29500_2008_Transitional" />
    ///  or higher.)
    ///</para></summary>
    procedure OptimizeFor(version: DNMsWordVersion);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Do Not Create Custom Tab Stop for Hanging Indent.
    ///</summary>
    property NoTabHangInd: Boolean read get_NoTabHangInd write set_NoTabHangInd;
    ///<summary>
    ///  Do Not Increase Line Height for Raised/Lowered Text.
    ///</summary>
    property NoSpaceRaiseLower: Boolean read get_NoSpaceRaiseLower write set_NoSpaceRaiseLower;
    ///<summary>
    ///  Do Not Use Space Before On First Line After a Page Break.
    ///</summary>
    property SuppressSpBfAfterPgBrk: Boolean read get_SuppressSpBfAfterPgBrk write set_SuppressSpBfAfterPgBrk;
    ///<summary>
    ///  Line Wrap Trailing Spaces.
    ///</summary>
    property WrapTrailSpaces: Boolean read get_WrapTrailSpaces write set_WrapTrailSpaces;
    ///<summary>
    ///  Print Colors as Black And White without Dithering.
    ///</summary>
    property PrintColBlack: Boolean read get_PrintColBlack write set_PrintColBlack;
    ///<summary>
    ///  Do Not Balance Text Columns within a Section.
    ///</summary>
    property NoColumnBalance: Boolean read get_NoColumnBalance write set_NoColumnBalance;
    ///<summary>
    ///  Treat Backslash Quotation Delimiter as Two Quotation Marks.
    ///</summary>
    property ConvMailMergeEsc: Boolean read get_ConvMailMergeEsc write set_ConvMailMergeEsc;
    ///<summary>
    ///  Ignore Minimum and Exact Line Height for First Line on Page.
    ///</summary>
    property SuppressTopSpacing: Boolean read get_SuppressTopSpacing write set_SuppressTopSpacing;
    ///<summary>
    ///  Use Simplified Rules For Table Border Conflicts.
    ///</summary>
    property UseSingleBorderforContiguousCells: Boolean read get_UseSingleBorderforContiguousCells write set_UseSingleBorderforContiguousCells;
    ///<summary>
    ///  Specifies not to blank the area behind metafile pictures.
    ///</summary>
    property TransparentMetafiles: Boolean read get_TransparentMetafiles write set_TransparentMetafiles;
    ///<summary>
    ///  Display Page/Column Breaks Present in Frames.
    ///</summary>
    property ShowBreaksInFrames: Boolean read get_ShowBreaksInFrames write set_ShowBreaksInFrames;
    ///<summary>
    ///  Swap Paragraph Borders on Odd Numbered Pages.
    ///</summary>
    property SwapBordersFacingPgs: Boolean read get_SwapBordersFacingPgs write set_SwapBordersFacingPgs;
    ///<summary>
    ///  Convert Backslash To Yen Sign When Entered.
    ///</summary>
    property DoNotLeaveBackslashAlone: Boolean read get_DoNotLeaveBackslashAlone write set_DoNotLeaveBackslashAlone;
    ///<summary>
    ///  Don't Justify Lines Ending in Soft Line Break.
    ///</summary>
    property DoNotExpandShiftReturn: Boolean read get_DoNotExpandShiftReturn write set_DoNotExpandShiftReturn;
    ///<summary>
    ///  Underline All Trailing Spaces.
    ///</summary>
    property UlTrailSpace: Boolean read get_UlTrailSpace write set_UlTrailSpace;
    ///<summary>
    ///  Balance Single Byte and Double Byte Characters.
    ///</summary>
    property BalanceSingleByteDoubleByteWidth: Boolean read get_BalanceSingleByteDoubleByteWidth write set_BalanceSingleByteDoubleByteWidth;
    ///<summary>
    ///  Ignore Minimum Line Height for First Line on Page.
    ///</summary>
    property SuppressSpacingAtTopOfPage: Boolean read get_SuppressSpacingAtTopOfPage write set_SuppressSpacingAtTopOfPage;
    ///<summary>
    ///  Only Expand/Condense Text By Whole Points.
    ///</summary>
    property SpacingInWholePoints: Boolean read get_SpacingInWholePoints write set_SpacingInWholePoints;
    ///<summary>
    ///  Print Body Text before Header/Footer Contents.
    ///</summary>
    property PrintBodyTextBeforeHeader: Boolean read get_PrintBodyTextBeforeHeader write set_PrintBodyTextBeforeHeader;
    ///<summary>
    ///  Do Not Add Leading Between Lines of Text.
    ///</summary>
    property NoLeading: Boolean read get_NoLeading write set_NoLeading;
    ///<summary>
    ///  Add Additional Space Below Baseline For Underlined East Asian Text.
    ///</summary>
    property SpaceForUL: Boolean read get_SpaceForUL write set_SpaceForUL;
    ///<summary>
    ///  Emulate Word 5.x for the Macintosh Small Caps Formatting.
    ///</summary>
    property MWSmallCaps: Boolean read get_MWSmallCaps write set_MWSmallCaps;
    ///<summary>
    ///  Emulate WordPerfect 5.x Line Spacing.
    ///</summary>
    property SuppressTopSpacingWP: Boolean read get_SuppressTopSpacingWP write set_SuppressTopSpacingWP;
    ///<summary>
    ///  Emulate WordPerfect 6.x Font Height Calculation.
    ///</summary>
    property TruncateFontHeightsLikeWP6: Boolean read get_TruncateFontHeightsLikeWP6 write set_TruncateFontHeightsLikeWP6;
    ///<summary>
    ///  Increase Priority Of Font Size During Font Substitution.
    ///</summary>
    property SubFontBySize: Boolean read get_SubFontBySize write set_SubFontBySize;
    ///<summary>
    ///  Emulate Word 6.0 Line Wrapping for East Asian Text.
    ///</summary>
    property LineWrapLikeWord6: Boolean read get_LineWrapLikeWord6 write set_LineWrapLikeWord6;
    ///<summary>
    ///  Do Not Suppress Paragraph Borders Next To Frames.
    ///</summary>
    property DoNotSuppressParagraphBorders: Boolean read get_DoNotSuppressParagraphBorders write set_DoNotSuppressParagraphBorders;
    ///<summary>
    ///  Do Not Center Content on Lines With Exact Line Height.
    ///</summary>
    property NoExtraLineSpacing: Boolean read get_NoExtraLineSpacing write set_NoExtraLineSpacing;
    ///<summary>
    ///  Ignore Exact Line Height for Last Line on Page.
    ///</summary>
    property SuppressBottomSpacing: Boolean read get_SuppressBottomSpacing write set_SuppressBottomSpacing;
    ///<summary>
    ///  Specifies whether to set the width of a space as is done in WordPerfect 5.x.
    ///</summary>
    property WPSpaceWidth: Boolean read get_WPSpaceWidth write set_WPSpaceWidth;
    ///<summary>
    ///  Emulate WordPerfect 6.x Paragraph Justification.
    ///</summary>
    property WPJustification: Boolean read get_WPJustification write set_WPJustification;
    ///<summary>
    ///  Use Printer Metrics To Display Documents.
    ///</summary>
    ///<remarks>
    ///  Printer Metrics may differ depending on drivers used.
    ///  For instance, Windows "Microsoft OpenXPS Class Driver 2" and "Microsoft Print to PDF" provide slightly different metrics.
    ///  Therefore, the final document's layout may change if this option is enabled.
    ///</remarks>
    property UsePrinterMetrics: Boolean read get_UsePrinterMetrics write set_UsePrinterMetrics;
    ///<summary>
    ///  Emulate Word 97 Text Wrapping Around Floating Objects.
    ///</summary>
    property ShapeLayoutLikeWW8: Boolean read get_ShapeLayoutLikeWW8 write set_ShapeLayoutLikeWW8;
    ///<summary>
    ///  Emulate Word 6.x/95/97 Footnote Placement.
    ///</summary>
    property FootnoteLayoutLikeWW8: Boolean read get_FootnoteLayoutLikeWW8 write set_FootnoteLayoutLikeWW8;
    ///<summary>
    ///  Use Fixed Paragraph Spacing for HTML Auto Setting.
    ///</summary>
    property DoNotUseHTMLParagraphAutoSpacing: Boolean read get_DoNotUseHTMLParagraphAutoSpacing write set_DoNotUseHTMLParagraphAutoSpacing;
    ///<summary>
    ///  Add Document Grid Line Pitch To Lines in Table Cells.
    ///</summary>
    property AdjustLineHeightInTable: Boolean read get_AdjustLineHeightInTable write set_AdjustLineHeightInTable;
    ///<summary>
    ///  Ignore Width of Last Tab Stop When Aligning Paragraph If It Is Not Left Aligned.
    ///</summary>
    property ForgetLastTabAlignment: Boolean read get_ForgetLastTabAlignment write set_ForgetLastTabAlignment;
    ///<summary>
    ///  Emulate Word 95 Full-Width Character Spacing.
    ///</summary>
    property AutoSpaceLikeWord95: Boolean read get_AutoSpaceLikeWord95 write set_AutoSpaceLikeWord95;
    ///<summary>
    ///  Align Table Rows Independently.
    ///</summary>
    property AlignTablesRowByRow: Boolean read get_AlignTablesRowByRow write set_AlignTablesRowByRow;
    ///<summary>
    ///  Ignore Space Before Table When Deciding If Table Should Wrap Floating Object.
    ///</summary>
    property LayoutRawTableWidth: Boolean read get_LayoutRawTableWidth write set_LayoutRawTableWidth;
    ///<summary>
    ///  Allow Table Rows to Wrap Inline Objects Independently.
    ///</summary>
    property LayoutTableRowsApart: Boolean read get_LayoutTableRowsApart write set_LayoutTableRowsApart;
    ///<summary>
    ///  Emulate Word 97 East Asian Line Breaking.
    ///</summary>
    property UseWord97LineBreakRules: Boolean read get_UseWord97LineBreakRules write set_UseWord97LineBreakRules;
    ///<summary>
    ///  Do Not Allow Floating Tables To Break Across Pages.
    ///</summary>
    property DoNotBreakWrappedTables: Boolean read get_DoNotBreakWrappedTables write set_DoNotBreakWrappedTables;
    ///<summary>
    ///  Do Not Snap to Document Grid in Table Cells with Objects.
    ///</summary>
    property DoNotSnapToGridInCell: Boolean read get_DoNotSnapToGridInCell write set_DoNotSnapToGridInCell;
    ///<summary>
    ///  Select Field When First or Last Character Is Selected.
    ///</summary>
    property SelectFldWithFirstOrLastChar: Boolean read get_SelectFldWithFirstOrLastChar write set_SelectFldWithFirstOrLastChar;
    ///<summary>
    ///  Use Legacy Ethiopic and Amharic Line Breaking Rules.
    ///</summary>
    property ApplyBreakingRules: Boolean read get_ApplyBreakingRules write set_ApplyBreakingRules;
    ///<summary>
    ///  Do Not Allow Hanging Punctuation With Character Grid.
    ///</summary>
    property DoNotWrapTextWithPunct: Boolean read get_DoNotWrapTextWithPunct write set_DoNotWrapTextWithPunct;
    ///<summary>
    ///  Do Not Compress Compressible Characters When Using Document Grid.
    ///</summary>
    property DoNotUseEastAsianBreakRules: Boolean read get_DoNotUseEastAsianBreakRules write set_DoNotUseEastAsianBreakRules;
    ///<summary>
    ///  Emulate Word 2002 Table Style Rules.
    ///</summary>
    property UseWord2002TableStyleRules: Boolean read get_UseWord2002TableStyleRules write set_UseWord2002TableStyleRules;
    ///<summary>
    ///  Allow Tables to AutoFit Into Page Margins.
    ///</summary>
    property GrowAutofit: Boolean read get_GrowAutofit write set_GrowAutofit;
    ///<summary>
    ///  Do Not Automatically Apply List Paragraph Style To Bulleted/Numbered Text.
    ///</summary>
    property UseNormalStyleForList: Boolean read get_UseNormalStyleForList write set_UseNormalStyleForList;
    ///<summary>
    ///  Ignore Hanging Indent When Creating Tab Stop After Numbering.
    ///</summary>
    property DoNotUseIndentAsNumberingTabStop: Boolean read get_DoNotUseIndentAsNumberingTabStop write set_DoNotUseIndentAsNumberingTabStop;
    ///<summary>
    ///  Use Alternate Set of East Asian Line Breaking Rules.
    ///</summary>
    property UseAltKinsokuLineBreakRules: Boolean read get_UseAltKinsokuLineBreakRules write set_UseAltKinsokuLineBreakRules;
    ///<summary>
    ///  Allow Contextual Spacing of Paragraphs in Tables.
    ///</summary>
    property AllowSpaceOfSameStyleInTable: Boolean read get_AllowSpaceOfSameStyleInTable write set_AllowSpaceOfSameStyleInTable;
    ///<summary>
    ///  Do Not Ignore Floating Objects When Calculating Paragraph Indentation.
    ///</summary>
    property DoNotSuppressIndentation: Boolean read get_DoNotSuppressIndentation write set_DoNotSuppressIndentation;
    ///<summary>
    ///  Do Not AutoFit Tables To Fit Next To Wrapped Objects.
    ///</summary>
    property DoNotAutofitConstrainedTables: Boolean read get_DoNotAutofitConstrainedTables write set_DoNotAutofitConstrainedTables;
    ///<summary>
    ///  Allow Table Columns To Exceed Preferred Widths of Constituent Cells.
    ///</summary>
    ///<remarks>
    ///  The option is called "Use Word 2003 table autofit rules" in MS Word 2013 user interface.
    ///  It actually affects how the grid is calculated for fixed layout tables, too (for some cases).
    ///</remarks>
    property AutofitToFirstFixedWidthCell: Boolean read get_AutofitToFirstFixedWidthCell write set_AutofitToFirstFixedWidthCell;
    ///<summary>
    ///  Underline Following Character Following Numbering.
    ///</summary>
    property UnderlineTabInNumList: Boolean read get_UnderlineTabInNumList write set_UnderlineTabInNumList;
    ///<summary>
    ///  Always Use Fixed Width for Hangul Characters.
    ///</summary>
    property DisplayHangulFixedWidth: Boolean read get_DisplayHangulFixedWidth write set_DisplayHangulFixedWidth;
    ///<summary>
    ///  Always Move Paragraph Mark to Page after a Page Break.
    ///</summary>
    property SplitPgBreakAndParaMark: Boolean read get_SplitPgBreakAndParaMark write set_SplitPgBreakAndParaMark;
    ///<summary>
    ///  Don't Vertically Align Cells Containing Floating Objects.
    ///</summary>
    property DoNotVertAlignCellWithSp: Boolean read get_DoNotVertAlignCellWithSp write set_DoNotVertAlignCellWithSp;
    ///<summary>
    ///  Don't Break Table Rows Around Floating Tables.
    ///</summary>
    property DoNotBreakConstrainedForcedTable: Boolean read get_DoNotBreakConstrainedForcedTable write set_DoNotBreakConstrainedForcedTable;
    ///<summary>
    ///  Ignore Vertical Alignment in Textboxes.
    ///</summary>
    property DoNotVertAlignInTxbx: Boolean read get_DoNotVertAlignInTxbx write set_DoNotVertAlignInTxbx;
    ///<summary>
    ///  Use ANSI Kerning Pairs from Fonts.
    ///</summary>
    property UseAnsiKerningPairs: Boolean read get_UseAnsiKerningPairs write set_UseAnsiKerningPairs;
    ///<summary>
    ///  Use Cached Paragraph Information for Column Balancing.
    ///</summary>
    property CachedColBalance: Boolean read get_CachedColBalance write set_CachedColBalance;
    ///<summary>
    ///  Do Not Bypass East Asian/Complex Script Layout Code.
    ///</summary>
    property UseFELayout: Boolean read get_UseFELayout write set_UseFELayout;
    ///<summary>
    ///  Specifies how the style hierarchy of the document is evaluated.
    ///</summary>
    property OverrideTableStyleFontSizeAndJustification: Boolean read get_OverrideTableStyleFontSizeAndJustification write set_OverrideTableStyleFontSizeAndJustification;
    property DisableOpenTypeFontFormattingFeatures: Boolean read get_DisableOpenTypeFontFormattingFeatures write set_DisableOpenTypeFontFormattingFeatures;
    property SwapInsideAndOutsideForMirrorIndentsAndRelativePositioning: Boolean read get_SwapInsideAndOutsideForMirrorIndentsAndRelativePositioning write set_SwapInsideAndOutsideForMirrorIndentsAndRelativePositioning;
    property UseWord2010TableStyleRules: Boolean read get_UseWord2010TableStyleRules write set_UseWord2010TableStyleRules;
    ///<summary><b>True</b>
    ///  to disable UI functionality which is not compatible with Word97-2003.
    ///  Default value is <b>false</b>
    ///  .
    ///</summary>
    ///<remarks>
    ///  Controls the Word97-2003 compatibility setting that disables UI functionality which
    ///  is not compatible with Word97-2003.
    ///  When <b>true</b>
    ///  , 'w:uiCompat97To2003' XML element is written to '\word\settings.xml'
    ///  document package part.
    ///  Default value is <b>false</b>
    ///  . When set to <b>false</b>
    ///  , this element is not written.
    ///  Technically this property is not part of compatibility options, but we have put it here for API convenience.
    ///</remarks>
    property UICompat97To2003: Boolean read get_UICompat97To2003 write set_UICompat97To2003;
  end;

  TDNCompatibilityOptions = class(TDNGenericImport<DNCompatibilityOptionsClass, DNCompatibilityOptions>) end;

  //-------------namespace: Aspose.Words.Settings----------------
  DNHyphenationOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3BE46930-918B-5418-9FD4-4D50BCAC496E}']
  { constructors } 

    {class} function init: DNHyphenationOptions;

  end;

  ///<summary>
  ///  Allows to configure document hyphenation options.
  ///</summary>
  [DNTypeName('Aspose.Words.Settings.HyphenationOptions')]
  DNHyphenationOptions = interface(DDN.mscorlib.DNObject)
  ['{1F90E4D9-B5A4-35D5-A6D4-6166D0AE1D00}']
  { getters & setters } 

    function get_AutoHyphenation: Boolean;
    procedure set_AutoHyphenation(value: Boolean);
    function get_ConsecutiveHyphenLimit: Int32;
    procedure set_ConsecutiveHyphenLimit(value: Int32);
    function get_HyphenationZone: Int32;
    procedure set_HyphenationZone(value: Int32);
    function get_HyphenateCaps: Boolean;
    procedure set_HyphenateCaps(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets value determining whether automatic hyphenation is turned on for the document.
    ///  Default value for this property is <b>false</b>
    ///  .
    ///</summary>
    property AutoHyphenation: Boolean read get_AutoHyphenation write set_AutoHyphenation;
    ///<summary>
    ///  Gets or sets the maximum number of consecutive lines that can end with hyphens.
    ///  Default value for this property is 0.
    ///</summary>
    ///<remarks><p>If value of this property is set to 0, any number of consecutive lines can end with hyphens.</p>
    ///  <p>The property does not have effect when saving to fixed page formats e.g. PDF.</p>
    ///</remarks>
    property ConsecutiveHyphenLimit: Int32 read get_ConsecutiveHyphenLimit write set_ConsecutiveHyphenLimit;
    ///<summary>
    ///  Gets or sets the distance in 1/20 of a point from the right margin within which you do not want
    ///  to hyphenate words.
    ///  Default value for this property is 360 (0.25 inch).
    ///</summary>
    ///<dev>
    ///  MS Word does not hyphenate words starting inside the hyphenation zone.
    ///  A smaller zone reduces the raggedness of the right margin, but more words may require hyphens.
    ///  A larger zone increases the raggedness of the right margin, but fewer words may require hyphens.
    ///</dev>
    property HyphenationZone: Int32 read get_HyphenationZone write set_HyphenationZone;
    ///<summary>
    ///  Gets or sets value determining whether words written in all capital letters are hyphenated.
    ///  Default value for this property is <b>true</b>
    ///  .
    ///</summary>
    property HyphenateCaps: Boolean read get_HyphenateCaps write set_HyphenateCaps;
  end;

  TDNHyphenationOptions = class(TDNGenericImport<DNHyphenationOptionsClass, DNHyphenationOptions>) end;

  //-------------namespace: Aspose.Words.Settings----------------
  DNMailMergeSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{76FB862F-73D6-5B7D-8A64-98F4E3F5104A}']
  { constructors } 

    {class} function init: DNMailMergeSettings;

  end;

  ///<summary>
  ///  Specifies all of the mail merge information for a document.
  ///</summary>
  ///<remarks><para>You can use this object to specify a mail merge data source for a document and this information
  ///  (along with the available data fields) will appear in Microsoft Word when the user opens this document.
  ///  Or you can use this object to query mail merge settings that the user has specified in Microsoft Word
  ///  for this document.</para><para>You do not normally need to create objects of this class directly because Mail merge settings
  ///  of a document are always available via the <see cref="P:Aspose.Words.Document.MailMergeSettings" />
  ///  property.</para><para>To detect whether this document is a mail merge main document, check the value of the
  ///<see cref="P:Aspose.Words.Settings.MailMergeSettings.MainDocumentType" />
  ///  property.</para><para>To remove mail merge settings and data source information from a document you can use the
  ///<see cref="M:Aspose.Words.Settings.MailMergeSettings.Clear" />
  ///  method. Aspose.Words will not write mail merge settings to a document if
  ///  the <see cref="P:Aspose.Words.Settings.MailMergeSettings.MainDocumentType" />
  ///  property is set to <see cref="F:Aspose.Words.Settings.MailMergeMainDocumentType.NotAMergeDocument" />
  ///  or the <see cref="P:Aspose.Words.Settings.MailMergeSettings.DataType" />
  ///  property is set to <see cref="F:Aspose.Words.Settings.MailMergeDataType.None" />
  ///  .</para><para>The best way to learn how to use the properties of this object is to create a document with a desired
  ///  data source manually in Microsoft Word and then open that document using Aspose.Words and examine the properties
  ///  of the <see cref="P:Aspose.Words.Document.MailMergeSettings" />
  ///  and <see cref="P:Aspose.Words.Settings.MailMergeSettings.Odso" />
  ///  objects. This is
  ///  a good approach to take if you want to learn how to programmatically configure a data source, for example.</para><para>Aspose.Words preserves mail merge information when loading, saving and converting documents
  ///  between different formats, but does not use this information when performing its own mail merge
  ///  using the <see cref="T:Aspose.Words.MailMerging.MailMerge" />
  ///  object.</para><seealso cref="P:Aspose.Words.Document.MailMergeSettings" />
  ///</remarks>
  [DNTypeName('Aspose.Words.Settings.MailMergeSettings')]
  DNMailMergeSettings = interface(DDN.mscorlib.DNObject)
  ['{CAA6BD1E-C5FA-3387-8BC8-877655715A6C}']
  { getters & setters } 

    function get_ActiveRecord: Int32;
    procedure set_ActiveRecord(value: Int32);
    function get_AddressFieldName: string;
    procedure set_AddressFieldName(value: string);
    function get_CheckErrors: DNMailMergeCheckErrors;
    procedure set_CheckErrors(value: DNMailMergeCheckErrors);
    function get_ConnectString: string;
    procedure set_ConnectString(value: string);
    function get_DataSource: string;
    procedure set_DataSource(value: string);
    function get_DataType: DNMailMergeDataType;
    procedure set_DataType(value: DNMailMergeDataType);
    function get_Destination: DNMailMergeDestination;
    procedure set_Destination(value: DNMailMergeDestination);
    function get_DoNotSupressBlankLines: Boolean;
    procedure set_DoNotSupressBlankLines(value: Boolean);
    function get_HeaderSource: string;
    procedure set_HeaderSource(value: string);
    function get_LinkToQuery: Boolean;
    procedure set_LinkToQuery(value: Boolean);
    function get_MailAsAttachment: Boolean;
    procedure set_MailAsAttachment(value: Boolean);
    function get_MailSubject: string;
    procedure set_MailSubject(value: string);
    function get_MainDocumentType: DNMailMergeMainDocumentType;
    procedure set_MainDocumentType(value: DNMailMergeMainDocumentType);
    function get_Odso: DNOdso;
    procedure set_Odso(value: DNOdso);
    function get_Query: string;
    procedure set_Query(value: string);
    function get_ViewMergedData: Boolean;
    procedure set_ViewMergedData(value: Boolean);

  { methods } 

    ///<summary>
    ///  Clears the mail merge settings in such a way that when the document is saved,
    ///  no mail merge settings will be saved and it will become a normal document.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Returns a deep clone of this object.
    ///</summary>
    function Clone: DNMailMergeSettings;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the one-based index of the record from the data source which shall be displayed in Microsoft Word. The default value is 1.
    ///</summary>
    property ActiveRecord: Int32 read get_ActiveRecord write set_ActiveRecord;
    ///<summary>
    ///  Specifies the column within the data source that contains e-mail addresses. The default value is an empty string.
    ///</summary>
    property AddressFieldName: string read get_AddressFieldName write set_AddressFieldName;
    ///<summary>
    ///  Specifies the type of error reporting which shall be conducted by Microsoft Word when performing a mail merge.
    ///  The default value is <see cref="F:Aspose.Words.Settings.MailMergeCheckErrors.Default" />
    ///  .
    ///</summary>
    property CheckErrors: DNMailMergeCheckErrors read get_CheckErrors write set_CheckErrors;
    ///<summary>
    ///  Specifies the connection string used to connect to an external data source. The default value is an empty string.
    ///</summary>
    property ConnectString: string read get_ConnectString write set_ConnectString;
    ///<summary>
    ///  Specifies the path to the mail-merge data source. The default value is an empty string.
    ///</summary>
    property DataSource: string read get_DataSource write set_DataSource;
    ///<summary>
    ///  Specifies the type of the mail-merge data source and the method of data access.
    ///  The default value is <see cref="F:Aspose.Words.Settings.MailMergeDataType.Default" />
    ///  .
    ///</summary>
    property DataType: DNMailMergeDataType read get_DataType write set_DataType;
    ///<summary>
    ///  Specifies how Microsoft Word will output the results of a mail merge.
    ///  The default value is <see cref="F:Aspose.Words.Settings.MailMergeDestination.Default" />
    ///  .
    ///</summary>
    property Destination: DNMailMergeDestination read get_Destination write set_Destination;
    ///<summary>
    ///  Specifies how an application performing the mail merge shall handle blank lines in the merged documents resulting from the mail merge.
    ///  The default value is <c>false</c>.
    ///</summary>
    property DoNotSupressBlankLines: Boolean read get_DoNotSupressBlankLines write set_DoNotSupressBlankLines;
    ///<summary>
    ///  Specifies the path to the mail-merge header source.
    ///  The default value is an empty string.
    ///</summary>
    property HeaderSource: string read get_HeaderSource write set_HeaderSource;
    ///<summary>
    ///  Not sure about this one.
    ///  The Microsoft Word Automation Reference suggests that this specifies that the query is executed every time the document
    ///  is opened in Microsoft Word. But the OOXML specification suggests that this specifies that the query contains a reference
    ///  to an external query file which contains the actual query.
    ///  The default value is <c>false</c>.
    ///</summary>
    property LinkToQuery: Boolean read get_LinkToQuery write set_LinkToQuery;
    ///<summary>
    ///  Specifies that the documents produced during a mail merge operation should be emailed as an attachment rather
    ///  than the body of the actual e-mail. The default value is <c>false</c>.
    ///</summary>
    property MailAsAttachment: Boolean read get_MailAsAttachment write set_MailAsAttachment;
    ///<summary>
    ///  Specifies the text which shall appear in the subject line of the e-mails or faxes produced during mail merge.
    ///  The default value is an empty string.
    ///</summary>
    property MailSubject: string read get_MailSubject write set_MailSubject;
    ///<summary>
    ///  Specifies the mail-merge main document type.
    ///  The default value is <see cref="F:Aspose.Words.Settings.MailMergeMainDocumentType.Default" />
    ///  .
    ///</summary>
    ///<remarks><para>The main document is the document that contains information that is the same for each version of the merged document.</para></remarks>
    property MainDocumentType: DNMailMergeMainDocumentType read get_MainDocumentType write set_MainDocumentType;
    ///<summary>
    ///  Gets or sets the object that specifies the Office Data Source Object (ODSO) settings.
    ///</summary>
    ///<remarks><para>This object is never null.</para></remarks>
    property Odso: DNOdso read get_Odso write set_Odso;
    ///<summary>
    ///  Contains the Structured Query Language string that shall be run against the specified external data source to
    ///  return the set of records which shall be imported into the document when the mail merge operation is performed.
    ///  The default value is an empty string.
    ///</summary>
    property Query: string read get_Query write set_Query;
    ///<summary>
    ///  Specifies that Microsoft Word shall display the data from the specified external data source where merge fields
    ///  have been inserted (e.g. preview merged data). The default value is <c>false</c>.
    ///</summary>
    property ViewMergedData: Boolean read get_ViewMergedData write set_ViewMergedData;
  end;

  TDNMailMergeSettings = class(TDNGenericImport<DNMailMergeSettingsClass, DNMailMergeSettings>) end;

  //-------------namespace: Aspose.Words.Settings----------------
  DNOdsoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6BC3BB86-3036-58C1-864E-6F31B0215CB0}']
  { constructors } 

    {class} function init: DNOdso;

  end;

  ///<summary>
  ///  Specifies the Office Data Source Object (ODSO) settings for a mail merge data source.
  ///</summary>
  ///<remarks><para>ODSO seems to be the "new" way the newer Microsoft Word versions prefer to use when specifying certain
  ///  types of data sources for a mail merge document. ODSO probably first appeared in Microsoft Word 2000.</para><para>The use of ODSO is poorly documented and the best way to learn how to use the properies of this object
  ///  is to create a document with a desired data source manually in Microsoft Word and then open that document using
  ///  Aspose.Words and examine the properties of the <see cref="P:Aspose.Words.Document.MailMergeSettings" />
  ///  and
  ///<see cref="P:Aspose.Words.Settings.MailMergeSettings.Odso" />
  ///  objects. This is a good approach to take if you want to learn how to
  ///  programmatically configure a data source, for example.</para><para>You do not normally need to create objects of this class directly because ODSO settings
  ///  are always available via the <see cref="P:Aspose.Words.Settings.MailMergeSettings.Odso" />
  ///  property.</para><seealso cref="P:Aspose.Words.Settings.MailMergeSettings.Odso" />
  ///</remarks>
  [DNTypeName('Aspose.Words.Settings.Odso')]
  DNOdso = interface(DDN.mscorlib.DNObject)
  ['{CF017D73-F247-3840-AF61-3F0CF7144CC0}']
  { getters & setters } 

    function get_ColumnDelimiter: Char;
    procedure set_ColumnDelimiter(value: Char);
    function get_FirstRowContainsColumnNames: Boolean;
    procedure set_FirstRowContainsColumnNames(value: Boolean);
    function get_DataSource: string;
    procedure set_DataSource(value: string);
    function get_TableName: string;
    procedure set_TableName(value: string);
    function get_DataSourceType: DNOdsoDataSourceType;
    procedure set_DataSourceType(value: DNOdsoDataSourceType);
    function get_UdlConnectString: string;
    procedure set_UdlConnectString(value: string);
    function get_FieldMapDatas: DNOdsoFieldMapDataCollection;
    procedure set_FieldMapDatas(value: DNOdsoFieldMapDataCollection);
    function get_RecipientDatas: DNOdsoRecipientDataCollection;
    procedure set_RecipientDatas(value: DNOdsoRecipientDataCollection);

  { methods } 

    ///<summary>
    ///  Returns a deep clone of this object.
    ///</summary>
    function Clone: DNOdso;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the character which shall be interpreted as the column delimiter used to separate columns within external data sources.
    ///  The default value is 0 which means there is no column delimiter defined.
    ///</summary>
    ///<remarks><para>RK I have never seen this in use.</para></remarks>
    property ColumnDelimiter: Char read get_ColumnDelimiter write set_ColumnDelimiter;
    ///<summary>
    ///  Specifies that a hosting application shall treat the first row of data in the specified external data
    ///  source as a header row containing the names of each column in the data source.
    ///  The default value is <c>false</c>.
    ///</summary>
    ///<remarks><para>RK I have never seen this in use.</para></remarks>
    property FirstRowContainsColumnNames: Boolean read get_FirstRowContainsColumnNames write set_FirstRowContainsColumnNames;
    ///<summary>
    ///  Specifies the location of the external data source to be connected to a document to perform the mail merge.
    ///  The default value is an empty string.
    ///</summary>
    property DataSource: string read get_DataSource write set_DataSource;
    ///<summary>
    ///  Specifies the particular set of data that a source shall be connected to within an external data source.
    ///  The default value is an empty string.
    ///</summary>
    property TableName: string read get_TableName write set_TableName;
    ///<summary>
    ///  Specifies the type of the external data source to be connected to as part of the ODSO connection information for this mail merge.
    ///  The default value is <see cref="F:Aspose.Words.Settings.OdsoDataSourceType.Default" />
    ///  .
    ///</summary>
    ///<remarks><para>This setting is purely a suggestion of the data source type that is being used for this mail merge.</para></remarks>
    property DataSourceType: DNOdsoDataSourceType read get_DataSourceType write set_DataSourceType;
    ///<summary>
    ///  Specifies the Universal Data Link (UDL) connection string used to connect to an external data source.
    ///  The default value is an empty string.
    ///</summary>
    property UdlConnectString: string read get_UdlConnectString write set_UdlConnectString;
    ///<summary>
    ///  Gets or sets a collection of objects that specify how columns from the external data source
    ///  are mapped to the predefined merge field names in the document.
    ///  This object is never null.
    ///</summary>
    property FieldMapDatas: DNOdsoFieldMapDataCollection read get_FieldMapDatas write set_FieldMapDatas;
    ///<summary>
    ///  Gets or sets a collection of objects that specify inclusion/exclusion of individual records in the mail merge.
    ///  This object is never null.
    ///</summary>
    property RecipientDatas: DNOdsoRecipientDataCollection read get_RecipientDatas write set_RecipientDatas;
  end;

  TDNOdso = class(TDNGenericImport<DNOdsoClass, DNOdso>) end;

  //-------------namespace: Aspose.Words.Settings----------------
  DNOdsoFieldMapDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8F4CAA55-397E-5702-A461-83D168B8FF43}']
  { constructors } 

    {class} function init: DNOdsoFieldMapData;

  end;

  ///<summary>
  ///  Specifies how a column in the external data source shall be mapped to the predefined merge fields within the document.
  ///</summary>
  ///<remarks><para>Microsoft Word provides some predefined merge field names that it allows to insert into a document as MERGEFIELD or
  ///  use in the ADDRESSBLOCK or GREETINGLINE fields. The information specified in <see cref="T:Aspose.Words.Settings.OdsoFieldMapData" />
  ///  allows to map one column in the external data source to a single predefined merge field.</para><seealso cref="T:Aspose.Words.Settings.OdsoFieldMapDataCollection" />
  ///<seealso cref="T:Aspose.Words.Settings.Odso" />
  ///</remarks>
  [DNTypeName('Aspose.Words.Settings.OdsoFieldMapData')]
  DNOdsoFieldMapData = interface(DDN.mscorlib.DNObject)
  ['{DB0A2311-0FC8-3654-99F7-FDD0689FFA39}']
  { getters & setters } 

    function get_Column: Int32;
    procedure set_Column(value: Int32);
    function get_MappedName: string;
    procedure set_MappedName(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: DNOdsoFieldMappingType;
    procedure set_Type(value: DNOdsoFieldMappingType);

  { methods } 

    ///<summary>
    ///  Returns a deep clone of this object.
    ///</summary>
    function Clone: DNOdsoFieldMapData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the zero-based index of the column within an external data source which shall be
    ///  mapped to the local name of a specific MERGEFIELD field.
    ///  The default value is 0.
    ///</summary>
    property Column: Int32 read get_Column write set_Column;
    ///<summary>
    ///  Specifies the predefined merge field name which shall be mapped to the column number
    ///  specified by the <see cref="P:Aspose.Words.Settings.OdsoFieldMapData.Column" />
    ///  property within this field mapping.
    ///  The default value is an empty string.
    ///</summary>
    property MappedName: string read get_MappedName write set_MappedName;
    ///<summary>
    ///  Specifies the column name within an external data source for the column whose
    ///  index is specified by the <see cref="P:Aspose.Words.Settings.OdsoFieldMapData.Column" />
    ///  property.
    ///  The default value is an empty string.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Specifies if a given mail merge field has been mapped to a column in the given external data source or not.
    ///  The default value is <see cref="F:Aspose.Words.Settings.OdsoFieldMappingType.Default" />
    ///  .
    ///</summary>
    property &Type: DNOdsoFieldMappingType read get_Type write set_Type;
  end;

  TDNOdsoFieldMapData = class(TDNGenericImport<DNOdsoFieldMapDataClass, DNOdsoFieldMapData>) end;

  //-------------namespace: Aspose.Words.Settings----------------
  DNOdsoFieldMapDataCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6EC27F95-9728-5BF4-967D-C546938E91B2}']
  { constructors } 

    {class} function init: DNOdsoFieldMapDataCollection;

  end;

  ///<summary>
  ///  A typed collection of the <see cref="T:Aspose.Words.Settings.OdsoFieldMapData" />
  ///  objects.
  ///</summary>
  ///<seealso cref="T:Aspose.Words.Settings.OdsoFieldMapData" />
  ///<seealso cref="P:Aspose.Words.Settings.Odso.FieldMapDatas" />
  [DNTypeName('Aspose.Words.Settings.OdsoFieldMapDataCollection')]
  DNOdsoFieldMapDataCollection = interface(DDN.mscorlib.DNObject)
  ['{4B75C58F-DC36-3EA5-9D28-2270E970D001}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNOdsoFieldMapData;
    procedure set_Item(index: Int32; value: DNOdsoFieldMapData);

  { methods } 

    ///<summary>
    ///  Returns an enumerator object that can be used to iterate over all items in the collection.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNOdsoFieldMapData>;
    ///<summary>
    ///  Adds an object to the end of this collection.
    ///</summary>
    ///  <param name="value">The object to add. Cannot be null.</param>
    function Add(value: DNOdsoFieldMapData): Int32;
    ///<summary>
    ///  Removes all elements from this collection.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Removes the element at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index of the element.</param>
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements contained in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNOdsoFieldMapData read get_Item write set_Item; default;
  end;

  TDNOdsoFieldMapDataCollection = class(TDNGenericImport<DNOdsoFieldMapDataCollectionClass, DNOdsoFieldMapDataCollection>) end;

  //-------------namespace: Aspose.Words.Settings----------------
  DNOdsoRecipientDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4885F9C9-B2DF-5CAD-9CB6-10E0B602D829}']
  { constructors } 

    {class} function init: DNOdsoRecipientData;

  end;

  ///<summary>
  ///  Represents information about a single record within an external data source that is to be excluded from the mail merge.
  ///</summary>
  ///<remarks><para>If a record shall be merged into a merged document, then no information is needed about that record.
  ///  However, if a given record shall not be merged into a merged document, then the value of the unique key
  ///  for that record shall be stored in the <see cref="P:Aspose.Words.Settings.OdsoRecipientData.UniqueTag" />
  ///  property of this object to indicate this exclusion.</para></remarks>
  [DNTypeName('Aspose.Words.Settings.OdsoRecipientData')]
  DNOdsoRecipientData = interface(DDN.mscorlib.DNObject)
  ['{79A92811-BDDE-3159-89EC-D1AF92475706}']
  { getters & setters } 

    function get_Active: Boolean;
    procedure set_Active(value: Boolean);
    function get_Column: Int32;
    procedure set_Column(value: Int32);
    function get_UniqueTag: TArray<Byte>;
    procedure set_UniqueTag(value: TArray<Byte>);
    function get_Hash: Int32;
    procedure set_Hash(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns a deep clone of this object.
    ///</summary>
    function Clone: DNOdsoRecipientData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies whether the record from the data source shall be imported into a document when the mail merge is performed.
    ///  The default value is <c>true</c>.
    ///</summary>
    property Active: Boolean read get_Active write set_Active;
    ///<summary>
    ///  Specifies the column within the data source that contains unique data for the current record.
    ///  The default value is 0.
    ///</summary>
    property Column: Int32 read get_Column write set_Column;
    ///<summary>
    ///  Specifies the contents of a given record in the column containing unique data.
    ///  The default value is <c>null</c>.
    ///</summary>
    property UniqueTag: TArray<Byte> read get_UniqueTag write set_UniqueTag;
    ///<summary>
    ///  Represents the hash code for this record.
    ///  Sometimes Microsoft Word uses <see cref="P:Aspose.Words.Settings.OdsoRecipientData.Hash" />
    ///  of a whole record instead of a <see cref="P:Aspose.Words.Settings.OdsoRecipientData.UniqueTag" />
    ///  value.
    ///  The default value is 0.
    ///</summary>
    property Hash: Int32 read get_Hash write set_Hash;
  end;

  TDNOdsoRecipientData = class(TDNGenericImport<DNOdsoRecipientDataClass, DNOdsoRecipientData>) end;

  //-------------namespace: Aspose.Words.Settings----------------
  DNOdsoRecipientDataCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5DF04E0A-F21C-57AA-ACD5-74F2B95DF33C}']
  { constructors } 

    {class} function init: DNOdsoRecipientDataCollection;

  end;

  ///<summary>
  ///  A typed collection of <see cref="T:Aspose.Words.Settings.OdsoRecipientData" />
  ///</summary>
  ///<remarks><seealso cref="T:Aspose.Words.Settings.OdsoRecipientData" />
  ///<seealso cref="P:Aspose.Words.Settings.Odso.RecipientDatas" />
  ///</remarks>
  [DNTypeName('Aspose.Words.Settings.OdsoRecipientDataCollection')]
  DNOdsoRecipientDataCollection = interface(DDN.mscorlib.DNObject)
  ['{86150772-1F9F-3197-A8B7-8863AE4D1797}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNOdsoRecipientData;
    procedure set_Item(index: Int32; value: DNOdsoRecipientData);

  { methods } 

    ///<summary>
    ///  Returns an enumerator object that can be used to iterate over all items in the collection.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNOdsoRecipientData>;
    ///<summary>
    ///  Adds an object to the end of this collection.
    ///</summary>
    ///  <param name="value">The object to add. Cannot be null.</param>
    function Add(value: DNOdsoRecipientData): Int32;
    ///<summary>
    ///  Removes all elements from this collection.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Removes the element at the specified index.
    ///</summary>
    ///  <param name="index">The zero-based index of the element.</param>
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements contained in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNOdsoRecipientData read get_Item write set_Item; default;
  end;

  TDNOdsoRecipientDataCollection = class(TDNGenericImport<DNOdsoRecipientDataCollectionClass, DNOdsoRecipientDataCollection>) end;

  //-------------namespace: Aspose.Words.Settings----------------
  DNViewOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E9AF0A4E-AD9B-5E2D-AC82-F46437DE17FC}']
  end;

  ///<summary>
  ///  Provides various options that control how a document is shown in Microsoft Word.
  ///</summary>
  ///<seealso cref="T:Aspose.Words.Document" />
  ///<seealso cref="P:Aspose.Words.Document.ViewOptions" />
  [DNTypeName('Aspose.Words.Settings.ViewOptions')]
  DNViewOptions = interface(DDN.mscorlib.DNObject)
  ['{8FFACF64-3C38-3B60-9D1C-9FD08C923309}']
  { getters & setters } 

    function get_ViewType: DNViewType;
    procedure set_ViewType(value: DNViewType);
    function get_ZoomType: DNZoomType;
    procedure set_ZoomType(value: DNZoomType);
    function get_ZoomPercent: Int32;
    procedure set_ZoomPercent(value: Int32);
    function get_DoNotDisplayPageBoundaries: Boolean;
    procedure set_DoNotDisplayPageBoundaries(value: Boolean);
    function get_DisplayBackgroundShape: Boolean;
    procedure set_DisplayBackgroundShape(value: Boolean);
    function get_FormsDesign: Boolean;
    procedure set_FormsDesign(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Controls the view mode in Microsoft Word.
    ///</summary>
    ///<remarks><p>Although Aspose.Words is able to read and write this option, its usage is application-specific.
    ///  For example MS Word 2013 does not respect the value of this option.</p>
    ///</remarks>
    property ViewType: DNViewType read get_ViewType write set_ViewType;
    ///<summary>
    ///  Gets or sets a zoom value based on the size of the window.
    ///</summary>
    property ZoomType: DNZoomType read get_ZoomType write set_ZoomType;
    ///<summary>
    ///  Gets or sets the percentage (between 10 and 500) at which you want to view your document.
    ///</summary>
    ///<remarks><p>If value is 0 then this property uses 100 instead, else if value is less than 10 or greater
    ///  than 500 this property throws.</p>
    ///  <p>Although Aspose.Words is able to read and write this option, its usage is application-specific.
    ///  For example MS Word 2013 does not respect the value of this option.</p>
    ///</remarks>
    property ZoomPercent: Int32 read get_ZoomPercent write set_ZoomPercent;
    ///<summary>
    ///  Turns off display of the space between the top of the text and the top edge of the page.
    ///</summary>
    property DoNotDisplayPageBoundaries: Boolean read get_DoNotDisplayPageBoundaries write set_DoNotDisplayPageBoundaries;
    ///<summary>
    ///  Controls display of the background shape in print layout view.
    ///</summary>
    property DisplayBackgroundShape: Boolean read get_DisplayBackgroundShape write set_DisplayBackgroundShape;
    ///<summary>
    ///  Specifies whether the document is in forms design mode.
    ///</summary>
    ///<remarks><p>Currently works only for documents in WordML format.</p>
    ///</remarks>
    property FormsDesign: Boolean read get_FormsDesign write set_FormsDesign;
  end;

  TDNViewOptions = class(TDNGenericImport<DNViewOptionsClass, DNViewOptions>) end;

  //-------------namespace: Aspose.Words.Settings----------------
  DNWriteProtectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4E4702BC-8D74-5F68-B9F0-39502879B743}']
  end;

  ///<summary>
  ///  Specifies write protection settings for a document.
  ///</summary>
  ///<remarks><para>Write protection specifies whether the author has recommended that
  ///  the document is to be opened as read-only and/or require a password to modify a document.</para><para>Write protection is different from document protection. Write protection is specified in
  ///  Microsoft Word in the options of the Save As dialog box.</para><para>You do not create instances of this class directly. You access document protection settings
  ///  via the <see cref="P:Aspose.Words.Document.WriteProtection" />
  ///  property.</para></remarks>
  [DNTypeName('Aspose.Words.Settings.WriteProtection')]
  DNWriteProtection = interface(DDN.mscorlib.DNObject)
  ['{84CD56B7-DE81-35C6-88D7-F24F2255B7AA}']
  { getters & setters } 

    function get_ReadOnlyRecommended: Boolean;
    procedure set_ReadOnlyRecommended(value: Boolean);
    function get_IsWriteProtected: Boolean;

  { methods } 

    ///<summary>
    ///  Sets the write protection password for the document.
    ///</summary>
    ///<remarks><para>If a password is set, Microsoft Word will require the user to enter it or open
    ///  the document as read-only.</para></remarks>
    ///  <param name="password">The password to set. Cannot be null, but can be an empty string.</param>
    procedure SetPassword(password: string);
    ///<summary>
    ///  Returns true if the specified password is the same as the write-protection password the document was protected with.
    ///  If document is not write-protected with password then returns false.
    ///</summary>
    function ValidatePassword(password: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies whether the document author has recommended that the document be opened as read-only.
    ///</summary>
    property ReadOnlyRecommended: Boolean read get_ReadOnlyRecommended write set_ReadOnlyRecommended;
    ///<summary>
    ///  Returns true when a write protection password is set.
    ///</summary>
    property IsWriteProtected: Boolean read get_IsWriteProtected;
  end;

  TDNWriteProtection = class(TDNGenericImport<DNWriteProtectionClass, DNWriteProtection>) end;

  //-------------namespace: Aspose.Words.Shaping----------------
  DNBasicTextShaperCacheClass = interface(DDN.mscorlib.DNObjectClass)
  ['{625DECF7-7768-52D6-9FCB-308744F1D955}']
  { constructors } 

    {class} function init(factory: DNITextShaperFactory): DNBasicTextShaperCache;

  end;

  [DNTypeName('Aspose.Words.Shaping.BasicTextShaperCache')]
  DNBasicTextShaperCache = interface(DDN.mscorlib.DNObject)
  ['{9A5C99B1-F2D4-39F4-8B6A-FE44F9A60F83}']
  { methods } 

    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBasicTextShaperCache = class(TDNGenericImport<DNBasicTextShaperCacheClass, DNBasicTextShaperCache>) end;

  //-------------namespace: Aspose.Words.Shaping----------------
  DNClusterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{909B7C0A-768C-5B36-BD70-561ECBCD5F61}']
  { constructors } 

    {class} function init(codepoints: TArray<Int32>; glyphs: TArray<DNGlyph>): DNCluster;

  { static methods } 

    {class} function GetString(clusters: TArray<DNCluster>): string;

  end;

  [DNTypeName('Aspose.Words.Shaping.Cluster')]
  DNCluster = interface(DDN.mscorlib.DNObject)
  ['{4DA202D4-5C0C-38AA-B10D-D08D53D1B40D}']
  { getters & setters } 

    function get_Codepoints: TArray<Int32>;
    function get_CodepointsLength: Int32;
    function get_Glyphs: TArray<DNGlyph>;

  { methods } 

    function GetWidth(em: Int32; fontSize: Single): Single;
    function DeepClone: DNCluster;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Codepoints: TArray<Int32> read get_Codepoints;
    property CodepointsLength: Int32 read get_CodepointsLength;
    property Glyphs: TArray<DNGlyph> read get_Glyphs;
  end;

  TDNCluster = class(TDNGenericImport<DNClusterClass, DNCluster>) end;

  //-------------namespace: Aspose.Words.Shaping----------------
  DNGlyphClass = interface(DDN.mscorlib.DNObjectClass)
  ['{03221F11-9952-5F95-8399-FC80BD750C46}']
  { constructors } 

    {class} function init(glyphIndex: Int32; advance: Int16; advanceOffset: Int16; ascenderOffset: Int16): DNGlyph;

  end;

  [DNTypeName('Aspose.Words.Shaping.Glyph')]
  DNGlyph = interface(DDN.mscorlib.DNObject)
  ['{79C5B45E-50E0-39C7-9F5C-C2AD245935A8}']
  { getters & setters } 

    function get_GlyphIndex: Int32;
    function get_Advance: Int16;
    procedure set_Advance(value: Int16);
    function get_AdvanceOffset: Int16;
    function get_AscenderOffset: Int16;

  { methods } 

    function GetWidth(em: Int32; fontSize: Single): Single;
    function Clone: DNGlyph;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property GlyphIndex: Int32 read get_GlyphIndex;
    property Advance: Int16 read get_Advance write set_Advance;
    property AdvanceOffset: Int16 read get_AdvanceOffset;
    property AscenderOffset: Int16 read get_AscenderOffset;
  end;

  TDNGlyph = class(TDNGenericImport<DNGlyphClass, DNGlyph>) end;

  //-------------namespace: Aspose.Words.Shaping----------------
  [DNTypeName('Aspose.Words.Shaping.ITextShaperFactory')]
  DNITextShaperFactory = interface(DDN.mscorlib.DNObject)
  ['{70F491F8-4760-3E37-8A21-20C3293D4C4D}']
  { methods } 

    function GetTextShaper(fontPath: string; faceIndex: Int32): DNITextShaper; overload;
    function GetTextShaper(fontId: string; fontBlob: TArray<Byte>; faceIndex: Int32): DNITextShaper; overload;

  end;

  //-------------namespace: Aspose.Words----------------
  DNSignatureLineOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1D4A8242-87C9-58FB-A675-046C1DE948D4}']
  { constructors } 

    {class} function init: DNSignatureLineOptions;

  end;

  ///<summary>
  ///  Allows to specify options for signature line being inserted. Used in <see cref="T:Aspose.Words.DocumentBuilder" />
  ///  .
  ///</summary>
  [DNTypeName('Aspose.Words.SignatureLineOptions')]
  DNSignatureLineOptions = interface(DDN.mscorlib.DNObject)
  ['{326A4341-380D-3D70-87E9-30B72573017B}']
  { getters & setters } 

    function get_Signer: string;
    procedure set_Signer(value: string);
    function get_SignerTitle: string;
    procedure set_SignerTitle(value: string);
    function get_Email: string;
    procedure set_Email(value: string);
    function get_DefaultInstructions: Boolean;
    procedure set_DefaultInstructions(value: Boolean);
    function get_Instructions: string;
    procedure set_Instructions(value: string);
    function get_AllowComments: Boolean;
    procedure set_AllowComments(value: Boolean);
    function get_ShowDate: Boolean;
    procedure set_ShowDate(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets suggested signer of the signature line.
    ///  Default value for this property is <b>empty string</b>
    ///  (<see cref="F:System.String.Empty" />
    ///  ).
    ///</summary>
    property Signer: string read get_Signer write set_Signer;
    ///<summary>
    ///  Gets or sets suggested signer's title.
    ///  Default value for this property is <b>empty string</b>
    ///  (<see cref="F:System.String.Empty" />
    ///  ).
    ///</summary>
    property SignerTitle: string read get_SignerTitle write set_SignerTitle;
    ///<summary>
    ///  Gets or sets suggested signer's e-mail address.
    ///  Default value for this property is <b>empty string</b>
    ///  (<see cref="F:System.String.Empty" />
    ///  ).
    ///</summary>
    property Email: string read get_Email write set_Email;
    ///<summary>
    ///  Gets or sets a value indicating that default instructions is shown in the Sign dialog.
    ///  Default value for this property is <b>true</b>
    ///  .
    ///</summary>
    property DefaultInstructions: Boolean read get_DefaultInstructions write set_DefaultInstructions;
    ///<summary>
    ///  Gets or sets instructions to the signer that are displayed on signing the signature line.
    ///  Default value for this property is <b>empty string</b>
    ///  (<see cref="F:System.String.Empty" />
    ///  ).
    ///</summary>
    property Instructions: string read get_Instructions write set_Instructions;
    ///<summary>
    ///  Gets or sets a value indicating that the signer can add comments in the Sign dialog.
    ///  Default value for this property is <b>false</b>
    ///  .
    ///</summary>
    property AllowComments: Boolean read get_AllowComments write set_AllowComments;
    ///<summary>
    ///  Gets or sets a value indicating that sign date is shown in the signature line.
    ///  Default value for this property is <b>true</b>
    ///  .
    ///</summary>
    property ShowDate: Boolean read get_ShowDate write set_ShowDate;
  end;

  TDNSignatureLineOptions = class(TDNGenericImport<DNSignatureLineOptionsClass, DNSignatureLineOptions>) end;

  //-------------namespace: Aspose.Words----------------
  DNStyleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6316924D-DC4D-5781-B786-E752250F4A14}']
  end;

  ///<summary>
  ///  Represents a single built-in or user-defined style.
  ///</summary>
  [DNTypeName('Aspose.Words.Style')]
  DNStyle = interface(DDN.mscorlib.DNObject)
  ['{DDA7CCF0-27F0-31C1-8AE8-EF46D8861000}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_StyleIdentifier: DNStyleIdentifier;
    function get_Aliases: TArray<string>;
    function get_IsHeading: Boolean;
    function get_Type: DNStyleType;
    function get_Document: DNDocumentBase;
    function get_LinkedStyleName: string;
    function get_BaseStyleName: string;
    procedure set_BaseStyleName(value: string);
    function get_NextParagraphStyleName: string;
    procedure set_NextParagraphStyleName(value: string);
    function get_BuiltIn: Boolean;
    function get_Font: DNFont;
    function get_ParagraphFormat: DNParagraphFormat;
    function get_List: DNList;
    function get_ListFormat: DNListFormat;
    function get_IsQuickStyle: Boolean;
    procedure set_IsQuickStyle(value: Boolean);
    function get_Styles: DNStyleCollection;

  { methods } 

    ///<summary>
    ///  Removes the specified style from the document.
    ///</summary>
    ///<remarks>
    ///  Style removal has following effects on the document model:
    ///<list type="bullet"><item>All references to the style are removed from corresponding paragraphs, runs and tables.</item>
    ///<item>If base style is removed its formatting is moved to child styles.</item>
    ///<item>If style to be deleted has a linked style, then both of these are deleted.</item>
    ///</list>
    ///</remarks>
    procedure Remove;
    ///<summary>
    ///  Compares with the specified style.
    ///  Styles Istds are compared for built-in styles only.
    ///  Styles defaults are not included in comparison.
    ///  Base style, linked style and next paragraph style are recursively compared.
    ///</summary>
    function Equals(style: DNStyle): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the name of the style.
    ///</summary>
    ///<remarks><p>Can not be empty string.</p>
    ///  <p>If there already is a style with such name in the collection, then this style will override it. All affected nodes will reference new style.</p>
    ///</remarks>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets the locale independent style identifier for a built-in style.
    ///</summary>
    ///<remarks><para>For user defined (custom) styles, this property returns <see cref="F:Aspose.Words.StyleIdentifier.User" />
    ///  .</para><seealso cref="P:Aspose.Words.Style.Name" />
    ///</remarks>
    property StyleIdentifier: DNStyleIdentifier read get_StyleIdentifier;
    ///<summary>
    ///  Gets all aliases of this style. If style has no aliases then empty array of string is returned.
    ///</summary>
    property Aliases: TArray<string> read get_Aliases;
    ///<summary>
    ///  True when the style is one of the built-in Heading styles.
    ///</summary>
    property IsHeading: Boolean read get_IsHeading;
    ///<summary>
    ///  Gets the style type (paragraph or character).
    ///</summary>
    property &Type: DNStyleType read get_Type;
    ///<summary>
    ///  Gets the owner document.
    ///</summary>
    property Document: DNDocumentBase read get_Document;
    ///<summary>
    ///  Gets the name of the Style linked to this one. Returns Empty string if no styles are linked.
    ///</summary>
    property LinkedStyleName: string read get_LinkedStyleName;
    ///<summary>
    ///  Gets/sets the name of the style this style is based on.
    ///</summary>
    ///<remarks>
    ///  This will be an empty string if the style is not based on any other style and it can be set
    ///  to an empty string.
    ///</remarks>
    property BaseStyleName: string read get_BaseStyleName write set_BaseStyleName;
    ///<summary>
    ///  Gets/sets the name of the style to be applied automatically to a new paragraph inserted after a
    ///  paragraph formatted with the specified style.
    ///</summary>
    ///<remarks>
    ///  This property is not used by Aspose.Words. The next paragraph style will only
    ///  be applied automatically when you edit the document in MS Word.
    ///</remarks>
    property NextParagraphStyleName: string read get_NextParagraphStyleName write set_NextParagraphStyleName;
    ///<summary>
    ///  True if this style is one of the built-in styles in MS Word.
    ///</summary>
    property BuiltIn: Boolean read get_BuiltIn;
    ///<summary>
    ///  Gets the character formatting of the style.
    ///</summary>
    ///<remarks><para>For list styles this property returns null.</para></remarks>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Gets the paragraph formatting of the style.
    ///</summary>
    ///<remarks><para>For character and list styles this property returns null.</para></remarks>
    property ParagraphFormat: DNParagraphFormat read get_ParagraphFormat;
    ///<summary>
    ///  Gets the list that defines formatting of this list style.
    ///</summary>
    ///<remarks><para>This property is only valid for list styles.
    ///  For other style types this property returns null.</para></remarks>
    property List: DNList read get_List;
    ///<summary>
    ///  Provides access to the list formatting properties of a paragraph style.
    ///</summary>
    ///<remarks><para>This property is only valid for paragraph styles.
    ///  For other style types this property returns null.</para></remarks>
    property ListFormat: DNListFormat read get_ListFormat;
    ///<summary>
    ///  Specifies whether this style is shown in the Quick Style gallery inside MS Word UI.
    ///</summary>
    property IsQuickStyle: Boolean read get_IsQuickStyle write set_IsQuickStyle;
    ///<summary>
    ///  Gets the collection of styles this style belongs to.
    ///</summary>
    property Styles: DNStyleCollection read get_Styles;
  end;

  TDNStyle = class(TDNGenericImport<DNStyleClass, DNStyle>) end;

  //-------------namespace: Aspose.Words----------------
  DNTableStyleClass = interface(DNStyleClass)
  ['{B49108C5-CAEE-55CD-BED2-43C02C7009F6}']
  end;

  ///<summary>
  ///  Represents a table style.
  ///</summary>
  ///<dev>
  ///  It is interesting to note that all attribute collections in the style are not supposed
  ///  to contain attributes that reference another style. E.g. TablePr of the style should not
  ///  contain Istd of a table style. It is actually a good thing. The only problem is that we
  ///  do not validate it and maybe reading from some formats could leave Istd in these collections.
  ///</dev>
  [DNTypeName('Aspose.Words.TableStyle')]
  DNTableStyle = interface(DNStyle)
  ['{771048DD-8839-3358-A638-0DAAF50BDA80}']
  { getters & setters } 

    function get_AllowBreakAcrossPages: Boolean;
    procedure set_AllowBreakAcrossPages(value: Boolean);
    function get_Borders: DNBorderCollection;
    function get_LeftPadding: Double;
    procedure set_LeftPadding(value: Double);
    function get_RightPadding: Double;
    procedure set_RightPadding(value: Double);
    function get_TopPadding: Double;
    procedure set_TopPadding(value: Double);
    function get_BottomPadding: Double;
    procedure set_BottomPadding(value: Double);
    function get_Alignment: DNTableAlignment;
    procedure set_Alignment(value: DNTableAlignment);
    function get_CellSpacing: Double;
    procedure set_CellSpacing(value: Double);
    function get_Bidi: Boolean;
    procedure set_Bidi(value: Boolean);
    function get_LeftIndent: Double;
    procedure set_LeftIndent(value: Double);
    function get_Shading: DNShading;
    function get_VerticalAlignment: DNCellVerticalAlignment;
    procedure set_VerticalAlignment(value: DNCellVerticalAlignment);
    function get_RowStripe: Int32;
    procedure set_RowStripe(value: Int32);
    function get_ColumnStripe: Int32;
    procedure set_ColumnStripe(value: Int32);
    function get_ConditionalStyles: DNConditionalStyleCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_StyleIdentifier: DNStyleIdentifier;
    function get_Aliases: TArray<string>;
    function get_IsHeading: Boolean;
    function get_Type: DNStyleType;
    function get_Document: DNDocumentBase;
    function get_LinkedStyleName: string;
    function get_BaseStyleName: string;
    procedure set_BaseStyleName(value: string);
    function get_NextParagraphStyleName: string;
    procedure set_NextParagraphStyleName(value: string);
    function get_BuiltIn: Boolean;
    function get_Font: DNFont;
    function get_ParagraphFormat: DNParagraphFormat;
    function get_List: DNList;
    function get_ListFormat: DNListFormat;
    function get_IsQuickStyle: Boolean;
    procedure set_IsQuickStyle(value: Boolean);
    function get_Styles: DNStyleCollection;

  { methods } 

    ///<summary>
    ///  Removes the specified style from the document.
    ///</summary>
    ///<remarks>
    ///  Style removal has following effects on the document model:
    ///<list type="bullet"><item>All references to the style are removed from corresponding paragraphs, runs and tables.</item>
    ///<item>If base style is removed its formatting is moved to child styles.</item>
    ///<item>If style to be deleted has a linked style, then both of these are deleted.</item>
    ///</list>
    ///</remarks>
    procedure Remove;
    ///<summary>
    ///  Compares with the specified style.
    ///  Styles Istds are compared for built-in styles only.
    ///  Styles defaults are not included in comparison.
    ///  Base style, linked style and next paragraph style are recursively compared.
    ///</summary>
    function Equals(style: DNStyle): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a flag indicating whether text in a table row is allowed to split across a page break.
    ///</summary>
    ///<remarks>
    ///  The default value is <b>true</b>
    ///  .
    ///</remarks>
    property AllowBreakAcrossPages: Boolean read get_AllowBreakAcrossPages write set_AllowBreakAcrossPages;
    ///<summary>
    ///  Gets the collection of default cell borders for the style.
    ///</summary>
    property Borders: DNBorderCollection read get_Borders;
    ///<summary>
    ///  Gets or sets the amount of space (in points) to add to the left of the contents of table cells.
    ///</summary>
    property LeftPadding: Double read get_LeftPadding write set_LeftPadding;
    ///<summary>
    ///  Gets or sets the amount of space (in points) to add to the right of the contents of table cells.
    ///</summary>
    property RightPadding: Double read get_RightPadding write set_RightPadding;
    ///<summary>
    ///  Gets or sets the amount of space (in points) to add above the contents of table cells.
    ///</summary>
    property TopPadding: Double read get_TopPadding write set_TopPadding;
    ///<summary>
    ///  Gets or sets the amount of space (in points) to add below the contents of table cells.
    ///</summary>
    property BottomPadding: Double read get_BottomPadding write set_BottomPadding;
    ///<summary>
    ///  Specifies the alignment for the table style.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Tables.TableAlignment.Left" />
    ///  .
    ///</remarks>
    property Alignment: DNTableAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  Gets or sets the amount of space (in points) between the cells.
    ///</summary>
    property CellSpacing: Double read get_CellSpacing write set_CellSpacing;
    ///<summary>
    ///  Gets or sets whether this is a style for a right-to-left table.
    ///</summary>
    ///<remarks><para>When <b>true</b>
    ///  , the cells in rows are laid out right to left.</para><para>The default value is <b>false</b>
    ///  .</para></remarks>
    property Bidi: Boolean read get_Bidi write set_Bidi;
    ///<summary>
    ///  Gets or sets the value that represents the left indent of a table.
    ///</summary>
    property LeftIndent: Double read get_LeftIndent write set_LeftIndent;
    ///<summary>
    ///  Gets a <see cref="T:Aspose.Words.Shading" />
    ///  object that refers to the shading formatting for table cells.
    ///</summary>
    property Shading: DNShading read get_Shading;
    ///<summary>
    ///  Specifies the vertical alignment for the cells.
    ///</summary>
    ///<remarks>
    ///  The default value is <see cref="F:Aspose.Words.Tables.CellVerticalAlignment.Top" />
    ///  .
    ///</remarks>
    ///<dev>
    ///  AM. We copy Word VBA here and do not expose CellFormat object.
    ///  I think the reason is that CellFormat contains properties such as VerticalMerge which is not applicable
    ///  to table style.
    ///</dev>
    property VerticalAlignment: DNCellVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    ///<summary>
    ///  Gets or sets a number of rows to include in the banding when the style specifies odd/even row banding.
    ///</summary>
    property RowStripe: Int32 read get_RowStripe write set_RowStripe;
    ///<summary>
    ///  Gets or sets a number of columns to include in the banding when the style specifies odd/even columns banding.
    ///</summary>
    property ColumnStripe: Int32 read get_ColumnStripe write set_ColumnStripe;
    ///<summary>
    ///  Collection of conditional styles that may be defined for this table style.
    ///</summary>
    property ConditionalStyles: DNConditionalStyleCollection read get_ConditionalStyles;
    ///<summary>
    ///  Gets or sets the name of the style.
    ///</summary>
    ///<remarks><p>Can not be empty string.</p>
    ///  <p>If there already is a style with such name in the collection, then this style will override it. All affected nodes will reference new style.</p>
    ///</remarks>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets the locale independent style identifier for a built-in style.
    ///</summary>
    ///<remarks><para>For user defined (custom) styles, this property returns <see cref="F:Aspose.Words.StyleIdentifier.User" />
    ///  .</para><seealso cref="P:Aspose.Words.Style.Name" />
    ///</remarks>
    property StyleIdentifier: DNStyleIdentifier read get_StyleIdentifier;
    ///<summary>
    ///  Gets all aliases of this style. If style has no aliases then empty array of string is returned.
    ///</summary>
    property Aliases: TArray<string> read get_Aliases;
    ///<summary>
    ///  True when the style is one of the built-in Heading styles.
    ///</summary>
    property IsHeading: Boolean read get_IsHeading;
    ///<summary>
    ///  Gets the style type (paragraph or character).
    ///</summary>
    property &Type: DNStyleType read get_Type;
    ///<summary>
    ///  Gets the owner document.
    ///</summary>
    property Document: DNDocumentBase read get_Document;
    ///<summary>
    ///  Gets the name of the Style linked to this one. Returns Empty string if no styles are linked.
    ///</summary>
    property LinkedStyleName: string read get_LinkedStyleName;
    ///<summary>
    ///  Gets/sets the name of the style this style is based on.
    ///</summary>
    ///<remarks>
    ///  This will be an empty string if the style is not based on any other style and it can be set
    ///  to an empty string.
    ///</remarks>
    property BaseStyleName: string read get_BaseStyleName write set_BaseStyleName;
    ///<summary>
    ///  Gets/sets the name of the style to be applied automatically to a new paragraph inserted after a
    ///  paragraph formatted with the specified style.
    ///</summary>
    ///<remarks>
    ///  This property is not used by Aspose.Words. The next paragraph style will only
    ///  be applied automatically when you edit the document in MS Word.
    ///</remarks>
    property NextParagraphStyleName: string read get_NextParagraphStyleName write set_NextParagraphStyleName;
    ///<summary>
    ///  True if this style is one of the built-in styles in MS Word.
    ///</summary>
    property BuiltIn: Boolean read get_BuiltIn;
    ///<summary>
    ///  Gets the character formatting of the style.
    ///</summary>
    ///<remarks><para>For list styles this property returns null.</para></remarks>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Gets the paragraph formatting of the style.
    ///</summary>
    ///<remarks><para>For character and list styles this property returns null.</para></remarks>
    property ParagraphFormat: DNParagraphFormat read get_ParagraphFormat;
    ///<summary>
    ///  Gets the list that defines formatting of this list style.
    ///</summary>
    ///<remarks><para>This property is only valid for list styles.
    ///  For other style types this property returns null.</para></remarks>
    property List: DNList read get_List;
    ///<summary>
    ///  Provides access to the list formatting properties of a paragraph style.
    ///</summary>
    ///<remarks><para>This property is only valid for paragraph styles.
    ///  For other style types this property returns null.</para></remarks>
    property ListFormat: DNListFormat read get_ListFormat;
    ///<summary>
    ///  Specifies whether this style is shown in the Quick Style gallery inside MS Word UI.
    ///</summary>
    property IsQuickStyle: Boolean read get_IsQuickStyle write set_IsQuickStyle;
    ///<summary>
    ///  Gets the collection of styles this style belongs to.
    ///</summary>
    property Styles: DNStyleCollection read get_Styles;
  end;

  TDNTableStyle = class(TDNGenericImport<DNTableStyleClass, DNTableStyle>) end;

  //-------------namespace: Aspose.Words----------------
  DNStyleCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{335E7ACE-B325-5201-AEC5-D8A639765D41}']
  end;

  ///<summary>
  ///  A collection of Style objects that represent both the built-in and user-defined styles in a document.
  ///</summary>
  ///<dev>
  ///  At the moment the styles are identified by istd (style index) that never changes (it only changes
  ///  when importing a style from another document). Will it be better if I used a string name as an
  ///  identifier? Note however, it should not change once it has been assigned, otherwise will need to
  ///  update all references to the style in the model.
  ///</dev>
  [DNTypeName('Aspose.Words.StyleCollection')]
  DNStyleCollection = interface(DDN.mscorlib.DNObject)
  ['{9578406E-1090-3C30-976D-195110A8F4E5}']
  { getters & setters } 

    function get_Document: DNDocumentBase;
    function get_DefaultFont: DNFont;
    function get_DefaultParagraphFormat: DNParagraphFormat;
    function get_Count: Int32;
    function get_Item(name: string): DNStyle; overload;
    function get_Item(sti: DNStyleIdentifier): DNStyle; overload;
    function get_Item(index: Int32): DNStyle; overload;

  { methods } 

    ///<summary>
    ///  Removes all styles from the Quick Style Gallery panel.
    ///</summary>
    procedure ClearQuickStyleGallery;
    ///<summary>
    ///  Gets an enumerator object that will enumerate styles in the alphabetical order of their names.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNStyle>;
    ///<summary>
    ///  Creates a new user defined style and adds it the collection.
    ///</summary>
    ///<remarks><p>You can create character, paragraph or a list style.</p>
    ///  <p>When creating a list style, the style is created with default numbered list formatting (1 \ a \ i).</p>
    ///  <p>Throws an exception if a style with this name already exists.</p>
    ///</remarks>
    ///  <param name="type">A <see cref="T:Aspose.Words.StyleType" />
    ///  value that specifies the type of the style to create.</param>
    ///  <param name="name">Case sensitive name of the style to create.</param>
    function Add(&type: DNStyleType; name: string): DNStyle;
    ///<summary>
    ///  Copies a style into this collection.
    ///</summary>
    ///  <param name="style">Style to be copied.</param>
    ///<returns>Copied style ready for usage.</returns>
    ///<remarks><para>Style to be copied can belong to the same document as well as to different document.</para><para>Linked style is copied.</para><para>This method does doesn't copy base styles.</para><para>If collection already contains a style with the same name, then new name is
    ///  automatically generated by adding "_number" suffix starting from 0 e.g. "Normal_0", "Heading 1_1" etc.
    ///  Use <see cref="P:Aspose.Words.Style.Name" />
    ///  setter for changing the name of the imported style.</para></remarks>
    function AddCopy(style: DNStyle): DNStyle;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the owner document.
    ///</summary>
    property Document: DNDocumentBase read get_Document;
    ///<summary>
    ///  Gets document default text formatting.
    ///</summary>
    ///<remarks><p>Note that document-wide defaults were introduced in Microsoft Word 2007 and are fully supported in OOXML formats (<see cref="F:Aspose.Words.LoadFormat.Docx" />
    ///  ) only.
    ///  Earlier document formats have limited support for this feature and only font names can be stored.</p>
    ///</remarks>
    property DefaultFont: DNFont read get_DefaultFont;
    ///<summary>
    ///  Gets document default paragraph formatting.
    ///</summary>
    ///<remarks><p>Note that document-wide defaults were introduced in Microsoft Word 2007 and are fully supported in OOXML formats (<see cref="F:Aspose.Words.LoadFormat.Docx" />
    ///  ) only.
    ///  Earlier document formats have no support for document default paragraph formatting.</p>
    ///</remarks>
    ///<dev>
    ///  Default paragraph formatting is copied to all top level styles when it is not supported in target document format.
    ///</dev>
    property DefaultParagraphFormat: DNParagraphFormat read get_DefaultParagraphFormat;
    ///<summary>
    ///  Gets the number of styles in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[name: string]: DNStyle read get_Item; default;
    property Item[sti: DNStyleIdentifier]: DNStyle read get_Item; default;
    property Item[index: Int32]: DNStyle read get_Item; default;
  end;

  TDNStyleCollection = class(TDNGenericImport<DNStyleCollectionClass, DNStyleCollection>) end;

  //-------------namespace: Aspose.Words.Tables----------------
  DNCellFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C0B640B3-F66A-59AE-BD22-6B85695AD1AC}']
  end;

  ///<summary>
  ///  Represents all formatting for a table cell.
  ///</summary>
  [DNTypeName('Aspose.Words.Tables.CellFormat')]
  DNCellFormat = interface(DDN.mscorlib.DNObject)
  ['{746BFBF9-8785-3AF5-847E-FBE77644F369}']
  { getters & setters } 

    function get_LeftPadding: Double;
    procedure set_LeftPadding(value: Double);
    function get_RightPadding: Double;
    procedure set_RightPadding(value: Double);
    function get_TopPadding: Double;
    procedure set_TopPadding(value: Double);
    function get_BottomPadding: Double;
    procedure set_BottomPadding(value: Double);
    function get_Borders: DNBorderCollection;
    function get_Shading: DNShading;
    function get_VerticalAlignment: DNCellVerticalAlignment;
    procedure set_VerticalAlignment(value: DNCellVerticalAlignment);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_PreferredWidth: DNPreferredWidth;
    procedure set_PreferredWidth(value: DNPreferredWidth);
    function get_VerticalMerge: DNCellMerge;
    procedure set_VerticalMerge(value: DNCellMerge);
    function get_HorizontalMerge: DNCellMerge;
    procedure set_HorizontalMerge(value: DNCellMerge);
    function get_Orientation: DNTextOrientation;
    procedure set_Orientation(value: DNTextOrientation);
    function get_FitText: Boolean;
    procedure set_FitText(value: Boolean);
    function get_WrapText: Boolean;
    procedure set_WrapText(value: Boolean);

  { methods } 

    ///<summary>
    ///  Resets to default cell formatting. Does not change the width of the cell.
    ///</summary>
    procedure ClearFormatting;
    ///<summary>
    ///  Sets the amount of space (in points) to add to the left/top/right/bottom of the contents of cell.
    ///</summary>
    procedure SetPaddings(leftPadding: Double; topPadding: Double; rightPadding: Double; bottomPadding: Double);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns or sets the amount of space (in points) to add to the left of the contents of cell.
    ///</summary>
    property LeftPadding: Double read get_LeftPadding write set_LeftPadding;
    ///<summary>
    ///  Returns or sets the amount of space (in points) to add to the right of the contents of cell.
    ///</summary>
    property RightPadding: Double read get_RightPadding write set_RightPadding;
    ///<summary>
    ///  Returns or sets the amount of space (in points) to add above the contents of cell.
    ///</summary>
    property TopPadding: Double read get_TopPadding write set_TopPadding;
    ///<summary>
    ///  Returns or sets the amount of space (in points) to add below the contents of cell.
    ///</summary>
    property BottomPadding: Double read get_BottomPadding write set_BottomPadding;
    ///<summary>
    ///  Gets collection of borders of the cell.
    ///</summary>
    property Borders: DNBorderCollection read get_Borders;
    ///<summary>
    ///  Returns a Shading object that refers to the shading formatting for the cell.
    ///</summary>
    property Shading: DNShading read get_Shading;
    ///<summary>
    ///  Returns or sets the vertical alignment of text in the cell.
    ///</summary>
    property VerticalAlignment: DNCellVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    ///<summary>
    ///  Gets the width of the cell in points.
    ///</summary>
    ///<remarks><para>
    ///  The width is calculated by Aspose.Words on document loading and saving.
    ///  Currently, not every combination of table, cell and document properties is supported.
    ///  The returned value may not be accurate for some documents.
    ///  It may not exactly match the cell width as calculated by MS Word when the document is opened in MS Word.
    ///</para><para>
    ///  Setting this property is not recommended.
    ///  There is no guarantee that the cell will actually have the set width.
    ///  The width may be adjusted to accommodate cell contents in an auto-fit table layout.
    ///  Cells in other rows may have conflicting width settings.
    ///  The table may be resized to fit into the container or to meet table width settings.
    ///  Consider using <see cref="P:Aspose.Words.Tables.CellFormat.PreferredWidth" />
    ///  for setting the cell width.
    ///  Setting this property sets <see cref="P:Aspose.Words.Tables.CellFormat.PreferredWidth" />
    ///  implicitly since version 15.8.
    ///</para><seealso cref="P:Aspose.Words.Tables.CellFormat.PreferredWidth" />
    ///</remarks>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Returns or sets the preferred width of the cell.
    ///</summary>
    ///<remarks><para>The preferred width (along with the table's Auto Fit option) determines how the actual
    ///  width of the cell is calculated by the table layout algorithm. Table layout can be performed by
    ///  Aspose.Words when it saves the document or by Microsoft Word when it displays the document.</para><para>The preferred width can be specified in points or in percent. The preferred width
    ///  can also be specified as "auto", which means no preferred width is specified.</para><para>The default value is <see cref="F:Aspose.Words.Tables.PreferredWidth.Auto" />
    ///  .</para><seealso cref="P:Aspose.Words.Tables.CellFormat.Width" />
    ///</remarks>
    property PreferredWidth: DNPreferredWidth read get_PreferredWidth write set_PreferredWidth;
    ///<summary>
    ///  Specifies how the cell is merged with other cells vertically.
    ///</summary>
    ///<remarks><p>Cells can only be merged vertically if their left and right boundaries are identical.</p>
    ///  <p>When cells are vertically merged, the display areas of the merged cells are consolidated.
    ///  The consolidated area is used to display the contents of the first vertically merged cell
    ///  and all other vertically merged cells must be empty.</p>
    ///<seealso cref="P:Aspose.Words.Tables.CellFormat.HorizontalMerge" />
    ///</remarks>
    property VerticalMerge: DNCellMerge read get_VerticalMerge write set_VerticalMerge;
    ///<summary>
    ///  Specifies how the cell is merged horizontally with other cells in the row.
    ///</summary>
    ///<seealso cref="P:Aspose.Words.Tables.CellFormat.VerticalMerge" />
    property HorizontalMerge: DNCellMerge read get_HorizontalMerge write set_HorizontalMerge;
    ///<summary>
    ///  Returns or sets the orientation of text in a table cell.
    ///</summary>
    property Orientation: DNTextOrientation read get_Orientation write set_Orientation;
    ///<summary>
    ///  If true, fits text in the cell, compressing each paragraph to the width of the cell.
    ///</summary>
    property FitText: Boolean read get_FitText write set_FitText;
    ///<summary>
    ///  If true, wrap text for the cell.
    ///</summary>
    property WrapText: Boolean read get_WrapText write set_WrapText;
  end;

  TDNCellFormat = class(TDNGenericImport<DNCellFormatClass, DNCellFormat>) end;

  //-------------namespace: Aspose.Words.Tables----------------
  DNPreferredWidthClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7FC73144-3E93-52D9-9DD3-2BFACBF253A2}']
  { static fields getter & setter } 

   function __fakeFieldGet_Auto: DNPreferredWidth;

  { static fields } 

    ///<summary>
    ///  Returns an instance that represents the "preferred width is not specified" value.
    ///</summary>
    {class} property Auto: DNPreferredWidth read __fakeFieldGet_Auto;

  { static methods } 

    ///<summary>
    ///  A creation method that returns a new instance that represents a preferred width specified as a percentage.
    ///</summary>
    ///  <param name="percent">The value must be from 0 to 100.</param>
    {class} function FromPercent(percent: Double): DNPreferredWidth;
    ///<summary>
    ///  A creation method that returns a new instance that represents a preferred width specified using a number of points.
    ///</summary>
    ///  <param name="points">The value must be from 0 to 22 inches (22 * 72 points).</param>
    {class} function FromPoints(points: Double): DNPreferredWidth;

  end;

  ///<summary>
  ///  Represents a value and its unit of measure that is used to specify the preferred width of a table or a cell.
  ///</summary>
  ///<remarks><para>Preferred width can be specified as a percentage, number of points or a special "none/auto" value.</para><para>The instances of this class are immutable.</para><seealso cref="P:Aspose.Words.Tables.Table.PreferredWidth" />
  ///<seealso cref="P:Aspose.Words.Tables.CellFormat.PreferredWidth" />
  ///</remarks>
  [DNTypeName('Aspose.Words.Tables.PreferredWidth')]
  DNPreferredWidth = interface(DDN.mscorlib.DNObject)
  ['{57107975-D7B3-3379-99D8-14C599705A9A}']
  { getters & setters } 

    function get_Type: DNPreferredWidthType;
    function get_Value: Double;

  { methods } 

    ///<summary>
    ///  Determines whether the specified PreferredWidth is equal in value to the current PreferredWidth.
    ///</summary>
    function Equals(other: DNPreferredWidth): Boolean; overload;
    ///<summary>
    ///  Determines whether the specified object is equal in value to the current object.
    ///</summary>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  Serves as a hash function for this type.
    ///</summary>
    function GetHashCode: Int32;
    ///<summary>
    ///  Returns a user-friendly string that displays the value of this object.
    ///</summary>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets the unit of measure used for this preferred width value.
    ///</summary>
    property &Type: DNPreferredWidthType read get_Type;
    ///<summary>
    ///  Gets the preferred width value. The unit of measure is specified in the <see cref="P:Aspose.Words.Tables.PreferredWidth.Type" />
    ///  property.
    ///</summary>
    property Value: Double read get_Value;
  end;

  TDNPreferredWidth = class(TDNGenericImport<DNPreferredWidthClass, DNPreferredWidth>) end;

  //-------------namespace: Aspose.Words.Tables----------------
  DNRowFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{36E1D3D4-10F8-5415-BC72-D1ED5F6D84D8}']
  end;

  ///<summary>
  ///  Represents all formatting for a table row.
  ///</summary>
  ///<dev>
  ///  RK I don't expose Shading here because default shading in MS Word works very strange,
  ///  cells do not seem to inherit the shading specified for the table so it will be pretty
  ///  confusing to work with. Setting row shading should actually go and set shading for
  ///  all of the cells in the row.
  ///</dev>
  [DNTypeName('Aspose.Words.Tables.RowFormat')]
  DNRowFormat = interface(DDN.mscorlib.DNObject)
  ['{D175925D-1E8B-30FE-9443-27F569CB9D18}']
  { getters & setters } 

    function get_Borders: DNBorderCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_HeightRule: DNHeightRule;
    procedure set_HeightRule(value: DNHeightRule);
    function get_AllowBreakAcrossPages: Boolean;
    procedure set_AllowBreakAcrossPages(value: Boolean);
    function get_HeadingFormat: Boolean;
    procedure set_HeadingFormat(value: Boolean);

  { methods } 

    ///<summary>
    ///  Resets to default row formatting.
    ///</summary>
    procedure ClearFormatting;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the collection of default cell borders for the row.
    ///</summary>
    property Borders: DNBorderCollection read get_Borders;
    ///<summary>
    ///  Gets or sets the height of the table row in points.
    ///</summary>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Gets or sets the rule for determining the height of the table row.
    ///</summary>
    property HeightRule: DNHeightRule read get_HeightRule write set_HeightRule;
    ///<summary>
    ///  True if the text in a table row is allowed to split across a page break.
    ///</summary>
    property AllowBreakAcrossPages: Boolean read get_AllowBreakAcrossPages write set_AllowBreakAcrossPages;
    ///<summary>
    ///  True if the row is repeated as a table heading on every page when the table spans more than one page.
    ///</summary>
    property HeadingFormat: Boolean read get_HeadingFormat write set_HeadingFormat;
  end;

  TDNRowFormat = class(TDNGenericImport<DNRowFormatClass, DNRowFormat>) end;

  //-------------namespace: Aspose.Words----------------
  DNTabStopClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1651598C-D91E-5703-88EA-DB55EED49078}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class.
    ///</summary>
    {class} function init(position: Double): DNTabStop; overload;
    ///<summary>
    ///  Initializes a new instance of this class.
    ///</summary>
    ///  <param name="position">The position of the tab stop in points.</param>
    ///  <param name="alignment">A <see cref="T:Aspose.Words.TabAlignment" />
    ///  value that
    ///  specifies the alignment of text at this tab stop.</param>
    ///  <param name="leader">A <see cref="T:Aspose.Words.TabLeader" />
    ///  value that specifies
    ///  the type of the leader line displayed under the tab character.</param>
    {class} function init(position: Double; alignment: DNTabAlignment; leader: DNTabLeader): DNTabStop; overload;

  end;

  ///<summary>
  ///  Represents a single custom tab stop. The <b>TabStop</b>
  ///  object is a member of the
  ///<see cref="T:Aspose.Words.TabStopCollection" />
  ///  collection.
  ///</summary>
  ///<remarks><p>Normally, a tab stop specifies a position where a tab stop exists. But because
  ///  tab stops can be inherited from parent styles, it might be needed for the child object
  ///  to define explicitly that there is no tab stop at a given position. To clear
  ///  an inherited tab stop at a given position, create a <b>TabStop</b>
  ///  object and set
  ///<see cref="P:Aspose.Words.TabStop.Alignment" />
  ///  to <c>TabAlignment.Clear</c>.</p>
  ///  <p>For more information see <see cref="T:Aspose.Words.TabStopCollection" />
  ///  .</p>
  ///<seealso cref="T:Aspose.Words.ParagraphFormat" />
  ///<seealso cref="T:Aspose.Words.TabStopCollection" />
  ///<seealso cref="P:Aspose.Words.Document.DefaultTabStop" />
  ///</remarks>
  [DNTypeName('Aspose.Words.TabStop')]
  DNTabStop = interface(DDN.mscorlib.DNObject)
  ['{ACC9600F-0C72-3737-AF39-ACE4CC73EC27}']
  { getters & setters } 

    function get_Position: Double;
    function get_Alignment: DNTabAlignment;
    procedure set_Alignment(value: DNTabAlignment);
    function get_Leader: DNTabLeader;
    procedure set_Leader(value: DNTabLeader);
    function get_IsClear: Boolean;

  { methods } 

    ///<summary>
    ///  Compares with the specified TabStop.
    ///</summary>
    function Equals(rhs: DNTabStop): Boolean; overload;
    ///<summary>
    ///  Calculates hash code for this object.
    ///</summary>
    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the position of the tab stop in points.
    ///</summary>
    property Position: Double read get_Position;
    ///<summary>
    ///  Gets or sets the alignment of text at this tab stop.
    ///</summary>
    property Alignment: DNTabAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  Gets or sets the type of the leader line displayed under the tab character.
    ///</summary>
    property Leader: DNTabLeader read get_Leader write set_Leader;
    ///<summary>
    ///  Returns true if this tab stop clears any existing tab stops in this position.
    ///</summary>
    property IsClear: Boolean read get_IsClear;
  end;

  TDNTabStop = class(TDNGenericImport<DNTabStopClass, DNTabStop>) end;

  //-------------namespace: Aspose.Words----------------
  DNTextColumnClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0F28C792-3347-5CAC-B3FC-7B6EB4BC9326}']
  end;

  ///<summary>
  ///  Represents a single text column. <b>TextColumn</b>
  ///  is a member of the <see cref="T:Aspose.Words.TextColumnCollection" />
  ///  collection.
  ///  The <b>TextColumns</b>
  ///  collection includes all the columns in a section of a document.
  ///</summary>
  ///<remarks><p><b>TextColumn</b>
  ///  objects are only used to specify columns with custom width and spacing. If you want
  ///  the columns in the document to be of equal width, set TextColumns.<see cref="P:Aspose.Words.TextColumnCollection.EvenlySpaced" />
  ///  to <b>true</b>
  ///  .</p>
  ///  <p>When a new <b>TextColumn</b>
  ///  is created it has its width and spacing set to zero.</p>
  ///<seealso cref="T:Aspose.Words.TextColumnCollection" />
  ///<seealso cref="T:Aspose.Words.PageSetup" />
  ///<seealso cref="T:Aspose.Words.Section" />
  ///</remarks>
  ///<dev>
  ///  This is both a presentation and a model class. Represents width and spacing of a single column
  ///  in a section. Only used for custom width columns (not for evenly spaced columns).
  ///</dev>
  [DNTypeName('Aspose.Words.TextColumn')]
  DNTextColumn = interface(DDN.mscorlib.DNObject)
  ['{36DCC010-BA66-3A38-A879-B94DF0098A55}']
  { getters & setters } 

    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_SpaceAfter: Double;
    procedure set_SpaceAfter(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the width of the text column in points.
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Gets or sets the space between this column and the next column in points. Not required for the last column.
    ///</summary>
    property SpaceAfter: Double read get_SpaceAfter write set_SpaceAfter;
  end;

  TDNTextColumn = class(TDNGenericImport<DNTextColumnClass, DNTextColumn>) end;

  //-------------namespace: Aspose.Words----------------
  DNTextColumnCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2788615A-D1B7-58C5-A2E2-3317DB06A290}']
  end;

  ///<summary>
  ///  A collection of <see cref="T:Aspose.Words.TextColumn" />
  ///  objects that represent all the columns of text in a section of a document.
  ///</summary>
  ///<remarks><p>Use <see cref="M:Aspose.Words.TextColumnCollection.SetCount(System.Int32)" />
  ///  to set the number of text columns.</p>
  ///  <p>To make all columns equal width and spaced evenly, set <see cref="P:Aspose.Words.TextColumnCollection.EvenlySpaced" />
  ///  to <b>true</b>
  ///  and specify the amount of space between the columns in <see cref="P:Aspose.Words.TextColumnCollection.Spacing" />
  ///  . MS Word will
  ///  automatically calculate column widths.</p>
  ///  <p>If you have <b>EvenlySpaced</b>
  ///  set to <b>false</b>
  ///  , you need to specify width and spacing for each
  ///  column individually. Use the indexer to access individual <see cref="T:Aspose.Words.TextColumn" />
  ///  objects.</p>
  ///  <p>When using custom column widths, make sure the sum of all column widths and spacings between them
  ///  equals page width minus left and right page margins.</p>
  ///<seealso cref="T:Aspose.Words.PageSetup" />
  ///<seealso cref="T:Aspose.Words.Section" />
  ///</remarks>
  ///<dev>
  ///  This is a pure presentation class. Does not store any model data, just provides friendly
  ///  access to section attributes that are related to managing text columns.
  ///</dev>
  [DNTypeName('Aspose.Words.TextColumnCollection')]
  DNTextColumnCollection = interface(DDN.mscorlib.DNObject)
  ['{0032900D-FB36-3B81-946C-F3369BA8DD7E}']
  { getters & setters } 

    function get_EvenlySpaced: Boolean;
    procedure set_EvenlySpaced(value: Boolean);
    function get_Spacing: Double;
    procedure set_Spacing(value: Double);
    function get_Width: Double;
    function get_LineBetween: Boolean;
    procedure set_LineBetween(value: Boolean);
    function get_Count: Int32;
    function get_Item(index: Int32): DNTextColumn;

  { methods } 

    ///<summary>
    ///  Arranges text into the specified number of text columns.
    ///</summary>
    ///<remarks><p>When <see cref="P:Aspose.Words.TextColumnCollection.EvenlySpaced" />
    ///  is <b>false</b>
    ///  and you increase the number of columns,
    ///  new <see cref="T:Aspose.Words.TextColumn" />
    ///  objects are created with zero width and spacing.
    ///  You need to set width and spacing for the new columns.</p>
    ///</remarks>
    ///  <param name="newCount">The number of columns the text is to be arranged into.</param>
    procedure SetCount(newCount: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary><b>True</b>
    ///  if text columns are of equal width and evenly spaced.
    ///</summary>
    property EvenlySpaced: Boolean read get_EvenlySpaced write set_EvenlySpaced;
    ///<summary>
    ///  When columns are evenly spaced, gets or sets the amount of space between each column in points.
    ///</summary>
    ///<remarks>
    ///  Has effect only when <see cref="P:Aspose.Words.TextColumnCollection.EvenlySpaced" />
    ///  is set to <b>true</b>
    ///  .
    ///</remarks>
    property Spacing: Double read get_Spacing write set_Spacing;
    ///<summary>
    ///  When columns are evenly spaced, gets the width of the columns.
    ///</summary>
    ///<remarks><p>Has effect only when <see cref="P:Aspose.Words.TextColumnCollection.EvenlySpaced" />
    ///  is set to <b>true</b>
    ///  .</p>
    ///</remarks>
    property Width: Double read get_Width;
    ///<summary>
    ///  When <b>true</b>
    ///  , adds a vertical line between columns.
    ///</summary>
    property LineBetween: Boolean read get_LineBetween write set_LineBetween;
    ///<summary>
    ///  Gets the number of columns in the section of a document.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNTextColumn read get_Item; default;
  end;

  TDNTextColumnCollection = class(TDNGenericImport<DNTextColumnCollectionClass, DNTextColumnCollection>) end;

  //-------------namespace: Aspose.Words----------------
  DNTextWatermarkOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E53194D3-D658-5452-A1D4-79D5153DA7F3}']
  { constructors } 

    {class} function init: DNTextWatermarkOptions;

  end;

  ///<summary>
  ///  Contains options that can be specified when adding a watermark with text.
  ///</summary>
  [DNTypeName('Aspose.Words.TextWatermarkOptions')]
  DNTextWatermarkOptions = interface(DDN.mscorlib.DNObject)
  ['{E0CD50A7-5675-3BD5-8A7F-03F77E7EC391}']
  { getters & setters } 

    function get_FontFamily: string;
    procedure set_FontFamily(value: string);
    function get_Color: DDN.Aspose.Common.DNColor;
    procedure set_Color(value: DDN.Aspose.Common.DNColor);
    function get_FontSize: Single;
    procedure set_FontSize(value: Single);
    function get_IsSemitrasparent: Boolean;
    procedure set_IsSemitrasparent(value: Boolean);
    function get_Layout: DNWatermarkLayout;
    procedure set_Layout(value: DNWatermarkLayout);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets font family name. The default value is "Calibri".
    ///</summary>
    property FontFamily: string read get_FontFamily write set_FontFamily;
    ///<summary>
    ///  Gets or sets font color. The default value is Color.Silver.
    ///</summary>
    property Color: DDN.Aspose.Common.DNColor read get_Color write set_Color;
    ///<summary>
    ///  Gets or sets a font size. The default value is 0 - auto.
    ///</summary>
    ///<remarks><p>Valid values range from 0 to 65.5 inclusive.</p>
    ///  <p> Auto font size means that the watermark will be scaled to its max width and max height relative to
    ///  the page margins.</p>
    ///</remarks>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  Throws when argument was out of the range of valid values.
    ///</exception>
    property FontSize: Single read get_FontSize write set_FontSize;
    ///<summary>
    ///  Gets or sets a boolean value which is responsible for opacity of the watermark.
    ///  The default value is True.
    ///</summary>
    property IsSemitrasparent: Boolean read get_IsSemitrasparent write set_IsSemitrasparent;
    ///<summary>
    ///  Gets or sets layout of the watermark. The default value is <see cref="F:Aspose.Words.WatermarkLayout.Diagonal" />
    ///  .
    ///</summary>
    property Layout: DNWatermarkLayout read get_Layout write set_Layout;
  end;

  TDNTextWatermarkOptions = class(TDNGenericImport<DNTextWatermarkOptionsClass, DNTextWatermarkOptions>) end;

  //-------------namespace: Aspose.Words.Themes----------------
  DNThemeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9674EA5E-70D2-51C6-A575-C4E84604746A}']
  { constructors } 

    {class} function init: DNTheme;

  end;

  ///<summary>
  ///  Represents document Theme, and provides access to main theme parts including <see cref="P:Aspose.Words.Themes.Theme.MajorFonts" />
  ///  , <see cref="P:Aspose.Words.Themes.Theme.MinorFonts" />
  ///  and <see cref="P:Aspose.Words.Themes.Theme.Colors" />
  ///</summary>
  ///<dev>
  ///  At the moment this is just a crude hack to preserve themes during DOCX to DOCX roundtrip,
  ///  but later should be worked into a more appropriate object.
  ///  WORDSNET-10513. Limited support for theme handling was implemented.
  ///  If customer changes one of theme part then theme is rewritten with new values.
  ///  If theme is unchanged during roundtrip then it is written raw as before.
  ///</dev>
  [DNTypeName('Aspose.Words.Themes.Theme')]
  DNTheme = interface(DDN.mscorlib.DNObject)
  ['{4A7BE2D1-1821-36E2-A8E8-69AFC3287A8F}']
  { getters & setters } 

    function get_MajorFonts: DNThemeFonts;
    function get_MinorFonts: DNThemeFonts;
    function get_Colors: DNThemeColors;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Allows to specify the set of major fonts for different languages.
    ///</summary>
    property MajorFonts: DNThemeFonts read get_MajorFonts;
    ///<summary>
    ///  Allows to specify the set of minor fonts for different languages.
    ///</summary>
    property MinorFonts: DNThemeFonts read get_MinorFonts;
    ///<summary>
    ///  Allows to specify the set of theme colors for the document.
    ///</summary>
    property Colors: DNThemeColors read get_Colors;
  end;

  TDNTheme = class(TDNGenericImport<DNThemeClass, DNTheme>) end;

  //-------------namespace: Aspose.Words.Themes----------------
  DNThemeColorsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3035ABC0-812C-52D9-A49D-1CD71E3A8D64}']
  end;

  ///<summary><p>Represents the color scheme of the document theme which contains twelve colors.</p>
  ///  <p>ThemeColors object contains six accent colors, two dark colors, two light colors
  ///  and a color for each of a hyperlink and followed hyperlink.</p>
  ///</summary>
  ///<dev>
  ///  20.1.6.2 clrScheme (Color Scheme)
  ///  Defines a set of colors which are referred to as a color scheme. The The Color Scheme Color elements appear in a sequence.
  ///</dev>
  [DNTypeName('Aspose.Words.Themes.ThemeColors')]
  DNThemeColors = interface(DDN.mscorlib.DNObject)
  ['{DB45BACE-88AB-3877-A9C6-AC9F78A14438}']
  { getters & setters } 

    function get_Accent1: DDN.Aspose.Common.DNColor;
    procedure set_Accent1(value: DDN.Aspose.Common.DNColor);
    function get_Accent2: DDN.Aspose.Common.DNColor;
    procedure set_Accent2(value: DDN.Aspose.Common.DNColor);
    function get_Accent3: DDN.Aspose.Common.DNColor;
    procedure set_Accent3(value: DDN.Aspose.Common.DNColor);
    function get_Accent4: DDN.Aspose.Common.DNColor;
    procedure set_Accent4(value: DDN.Aspose.Common.DNColor);
    function get_Accent5: DDN.Aspose.Common.DNColor;
    procedure set_Accent5(value: DDN.Aspose.Common.DNColor);
    function get_Accent6: DDN.Aspose.Common.DNColor;
    procedure set_Accent6(value: DDN.Aspose.Common.DNColor);
    function get_Dark1: DDN.Aspose.Common.DNColor;
    procedure set_Dark1(value: DDN.Aspose.Common.DNColor);
    function get_Dark2: DDN.Aspose.Common.DNColor;
    procedure set_Dark2(value: DDN.Aspose.Common.DNColor);
    function get_FollowedHyperlink: DDN.Aspose.Common.DNColor;
    procedure set_FollowedHyperlink(value: DDN.Aspose.Common.DNColor);
    function get_Hyperlink: DDN.Aspose.Common.DNColor;
    procedure set_Hyperlink(value: DDN.Aspose.Common.DNColor);
    function get_Light1: DDN.Aspose.Common.DNColor;
    procedure set_Light1(value: DDN.Aspose.Common.DNColor);
    function get_Light2: DDN.Aspose.Common.DNColor;
    procedure set_Light2(value: DDN.Aspose.Common.DNColor);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies color Accent 1.
    ///</summary>
    property Accent1: DDN.Aspose.Common.DNColor read get_Accent1 write set_Accent1;
    ///<summary>
    ///  Specifies color Accent 2.
    ///</summary>
    property Accent2: DDN.Aspose.Common.DNColor read get_Accent2 write set_Accent2;
    ///<summary>
    ///  Specifies color Accent 3.
    ///</summary>
    property Accent3: DDN.Aspose.Common.DNColor read get_Accent3 write set_Accent3;
    ///<summary>
    ///  Specifies color Accent 4.
    ///</summary>
    property Accent4: DDN.Aspose.Common.DNColor read get_Accent4 write set_Accent4;
    ///<summary>
    ///  Specifies color Accent 5.
    ///</summary>
    property Accent5: DDN.Aspose.Common.DNColor read get_Accent5 write set_Accent5;
    ///<summary>
    ///  Specifies color Accent 6.
    ///</summary>
    property Accent6: DDN.Aspose.Common.DNColor read get_Accent6 write set_Accent6;
    ///<summary>
    ///  Specifies color Dark 1.
    ///</summary>
    property Dark1: DDN.Aspose.Common.DNColor read get_Dark1 write set_Dark1;
    ///<summary>
    ///  Specifies color Dark 2.
    ///</summary>
    property Dark2: DDN.Aspose.Common.DNColor read get_Dark2 write set_Dark2;
    ///<summary>
    ///  Specifies color for a clicked hyperlink.
    ///</summary>
    property FollowedHyperlink: DDN.Aspose.Common.DNColor read get_FollowedHyperlink write set_FollowedHyperlink;
    ///<summary>
    ///  Specifies color for a hyperlink.
    ///</summary>
    property Hyperlink: DDN.Aspose.Common.DNColor read get_Hyperlink write set_Hyperlink;
    ///<summary>
    ///  Specifies color Light 1.
    ///</summary>
    property Light1: DDN.Aspose.Common.DNColor read get_Light1 write set_Light1;
    ///<summary>
    ///  Specifies color Light 2.
    ///</summary>
    property Light2: DDN.Aspose.Common.DNColor read get_Light2 write set_Light2;
  end;

  TDNThemeColors = class(TDNGenericImport<DNThemeColorsClass, DNThemeColors>) end;

  //-------------namespace: Aspose.Words.Themes----------------
  DNThemeFontsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1D52F073-017C-56EA-B61A-FAFEE0CE5AB9}']
  end;

  ///<summary>
  ///  Represents a collection of fonts in the font scheme, allowing to specify different fonts for different languages <see cref="P:Aspose.Words.Themes.ThemeFonts.Latin" />
  ///  , <see cref="P:Aspose.Words.Themes.ThemeFonts.EastAsian" />
  ///  and <see cref="P:Aspose.Words.Themes.ThemeFonts.ComplexScript" />
  ///  .
  ///</summary>
  ///<dev>
  ///  Corresponds to 5.1.4.1.24 majorFont (Major Font) or 5.1.4.1.25 minorFont (Minor fonts).
  ///</dev>
  [DNTypeName('Aspose.Words.Themes.ThemeFonts')]
  DNThemeFonts = interface(DDN.mscorlib.DNObject)
  ['{2E29389A-1D8C-3482-8480-851121A64986}']
  { getters & setters } 

    function get_Latin: string;
    procedure set_Latin(value: string);
    function get_EastAsian: string;
    procedure set_EastAsian(value: string);
    function get_ComplexScript: string;
    procedure set_ComplexScript(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies font name for Latin characters.
    ///</summary>
    property Latin: string read get_Latin write set_Latin;
    ///<summary>
    ///  Specifies font name for EastAsian characters.
    ///</summary>
    property EastAsian: string read get_EastAsian write set_EastAsian;
    ///<summary>
    ///  Specifies font name for ComplexScript characters.
    ///</summary>
    property ComplexScript: string read get_ComplexScript write set_ComplexScript;
  end;

  TDNThemeFonts = class(TDNGenericImport<DNThemeFontsClass, DNThemeFonts>) end;

  //-------------namespace: Aspose.Words----------------
  DNVariableCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{544267DF-F261-5F00-9C6B-873CFDFF6CA2}']
  end;

  ///<summary>
  ///  A collection of document variables.
  ///</summary>
  ///<remarks><p>Variable names and values are strings.</p>
  ///  <p>Variable names are case-insensitive.</p>
  ///</remarks>
  [DNTypeName('Aspose.Words.VariableCollection')]
  DNVariableCollection = interface(DDN.mscorlib.DNObject)
  ['{3AD29478-5D5B-3D72-AE6B-C88F0D6E307E}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(name: string): string; overload;
    procedure set_Item(name: string; value: string); overload;
    function get_Item(index: Int32): string; overload;
    procedure set_Item(index: Int32; value: string); overload;

  { methods } 

    ///<summary>
    ///  Adds a document variable to the collection.
    ///</summary>
    ///  <param name="name">The case-insensitive name of the variable to add.</param>
    ///  <param name="value">The value of the variable. The value cannot be null, if value is null empty string will be used instead.</param>
    procedure Add(name: string; value: string);
    ///<summary>
    ///  Determines whether the collection contains a document variable with the given name.
    ///</summary>
    ///  <param name="name">Case-insensitive name of the document variable to locate.</param>
    ///<returns>True if item is found in the collection; otherwise, false.</returns>
    function &Contains(name: string): Boolean;
    ///<summary>
    ///  Returns the zero-based index of the specified document variable in the collection.
    ///</summary>
    ///  <param name="name">The case-insensitive name of the variable.</param>
    ///<returns>The zero based index. Negative value if not found.</returns>
    function IndexOfKey(name: string): Int32;
    ///<summary>
    ///  Removes a document variable with the specified name from the collection.
    ///</summary>
    ///  <param name="name">The case-insensitive name of the variable.</param>
    procedure Remove(name: string);
    ///<summary>
    ///  Removes a document variable at the specified index.
    ///</summary>
    ///  <param name="index">The zero based index.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all elements from the collection.
    ///</summary>
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements contained in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[name: string]: string read get_Item write set_Item; default;
    property Item[index: Int32]: string read get_Item write set_Item; default;
  end;

  TDNVariableCollection = class(TDNGenericImport<DNVariableCollectionClass, DNVariableCollection>) end;

  //-------------namespace: Aspose.Words.Vba----------------
  DNVbaModuleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{228294C1-9014-5BB8-9E10-5E5C40788725}']
  { constructors } 

    ///<summary>
    ///  Creates an empty module.
    ///</summary>
    {class} function init: DNVbaModule;

  end;

  ///<summary>
  ///  Provides access to VBA project module.
  ///</summary>
  [DNTypeName('Aspose.Words.Vba.VbaModule')]
  DNVbaModule = interface(DDN.mscorlib.DNObject)
  ['{66B6050F-E4A2-3A3F-AA1F-86515C3F9628}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_SourceCode: string;
    procedure set_SourceCode(value: string);
    function get_Type: DNVbaModuleType;
    procedure set_Type(value: DNVbaModuleType);

  { methods } 

    ///<summary>
    ///  Performs a copy of the <see cref="T:Aspose.Words.Vba.VbaModule" />
    ///  .
    ///</summary>
    ///<returns>The cloned VbaModule.</returns>
    function Clone: DNVbaModule;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets VBA project module name.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets or sets VBA project module source code.
    ///</summary>
    property SourceCode: string read get_SourceCode write set_SourceCode;
    ///<summary>
    ///  Specifies whether the module is a procedural module, document module, class module, or designer module.
    ///</summary>
    property &Type: DNVbaModuleType read get_Type write set_Type;
  end;

  TDNVbaModule = class(TDNGenericImport<DNVbaModuleClass, DNVbaModule>) end;

  //-------------namespace: Aspose.Words.Vba----------------
  DNVbaModuleCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3982FACE-D866-5F10-880E-D37D1DF84662}']
  end;

  ///<summary>
  ///  Represents a collection of <see cref="T:Aspose.Words.Vba.VbaModule" />
  ///  objects.
  ///</summary>
  [DNTypeName('Aspose.Words.Vba.VbaModuleCollection')]
  DNVbaModuleCollection = interface(DDN.mscorlib.DNObject)
  ['{14500945-5D5F-3DCE-B2B3-FEEDC3485C47}']
  { getters & setters } 

    function get_Item(index: Int32): DNVbaModule; overload;
    function get_Item(name: string): DNVbaModule; overload;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds a module to the collection.
    ///</summary>
    procedure Add(vbaModule: DNVbaModule);
    ///<summary>
    ///  Removes the specified module from the collection.
    ///</summary>
    ///  <param name="module">The module to remove.</param>
    procedure Remove(module: DNVbaModule);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNVbaModule read get_Item; default;
    property Item[name: string]: DNVbaModule read get_Item; default;
    ///<summary>
    ///  Returns the number of VBA modules in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNVbaModuleCollection = class(TDNGenericImport<DNVbaModuleCollectionClass, DNVbaModuleCollection>) end;

  //-------------namespace: Aspose.Words.Vba----------------
  DNVbaProjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E6FFE32A-0DCB-5C9E-A3DD-709EC2041C58}']
  { constructors } 

    ///<summary>
    ///  Creates a blank VbaProject.
    ///</summary>
    {class} function init: DNVbaProject;

  end;

  ///<summary>
  ///  Provides access to VBA project information.
  ///  A VBA project inside the document is defined as a collection of VBA modules.
  ///</summary>
  [DNTypeName('Aspose.Words.Vba.VbaProject')]
  DNVbaProject = interface(DDN.mscorlib.DNObject)
  ['{A57FB974-7CB6-384B-B9F2-E653FDBF4CF5}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modules: DNVbaModuleCollection;
    function get_CodePage: Int32;
    function get_IsSigned: Boolean;
    function get_References: DNVbaReferenceCollection;

  { methods } 

    ///<summary>
    ///  Performs a copy of the <see cref="T:Aspose.Words.Vba.VbaProject" />
    ///  .
    ///</summary>
    ///<returns>The cloned VbaProject.</returns>
    function Clone: DNVbaProject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets VBA project name.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Returns collection of VBA project modules.
    ///</summary>
    property Modules: DNVbaModuleCollection read get_Modules;
    ///<summary>
    ///  Returns the VBA projectâ€™s code page.
    ///</summary>
    property CodePage: Int32 read get_CodePage;
    ///<summary>
    ///  Shows whether the VbaProject is signed or not.
    ///</summary>
    property IsSigned: Boolean read get_IsSigned;
    ///<summary>
    ///  Gets a collection of VBA project references.
    ///</summary>
    property References: DNVbaReferenceCollection read get_References;
  end;

  TDNVbaProject = class(TDNGenericImport<DNVbaProjectClass, DNVbaProject>) end;

  //-------------namespace: Aspose.Words.Vba----------------
  DNVbaReferenceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{22AB6555-7797-55F0-8EEA-CB514D5EBAC9}']
  end;

  ///<summary>
  ///  Implements a reference to an Automation type library or VBA project.
  ///</summary>
  [DNTypeName('Aspose.Words.Vba.VbaReference')]
  DNVbaReference = interface(DDN.mscorlib.DNObject)
  ['{BEC71B10-EB06-3D86-850C-53993CB0F828}']
  { getters & setters } 

    function get_Type: DNVbaReferenceType;
    function get_LibId: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets <see cref="T:Aspose.Words.Vba.VbaReferenceType" />
    ///  object that indicates the type of reference that a VbaReference object represents.
    ///</summary>
    property &Type: DNVbaReferenceType read get_Type;
    ///<summary>
    ///  Gets a string value containing the identifier of an Automation type library.
    ///</summary>
    ///<remarks>
    ///  Depending on reference type, the value of this property can be:
    ///<list type="bullet"><item>a LibidReference specified at 2.1.1.8 LibidReference of [MS-OVBA]:
    ///  https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-ovba/3737ef6e-d819-4186-a5f2-6e258ddf66a5</item>
    ///<item>a ProjectReference specified at 2.1.1.12 ProjectReference of [MS-OVBA]:
    ///  https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-ovba/9a45ac1a-f1ff-4ebd-958e-537701aa8131</item>
    ///</list>
    ///</remarks>
    property LibId: string read get_LibId;
  end;

  TDNVbaReference = class(TDNGenericImport<DNVbaReferenceClass, DNVbaReference>) end;

  //-------------namespace: Aspose.Words.Vba----------------
  DNVbaReferenceCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{82B60898-F38D-504C-A8B4-F60C51A2BD69}']
  end;

  ///<summary>
  ///  Represents a collection of <see cref="T:Aspose.Words.Vba.VbaReference" />
  ///  objects.
  ///</summary>
  [DNTypeName('Aspose.Words.Vba.VbaReferenceCollection')]
  DNVbaReferenceCollection = interface(DDN.mscorlib.DNObject)
  ['{85201476-83D5-3001-81ED-4C3955BF6B1D}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNVbaReference;

  { methods } 

    ///<summary>
    ///  Removes the first occurrence of a specified VbaReference item from the collection.
    ///</summary>
    procedure Remove(item: DNVbaReference);
    ///<summary>
    ///  Removes the VbaReference element at the specified index of the the collection.
    ///</summary>
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the number of VBA references in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNVbaReference read get_Item; default;
  end;

  TDNVbaReferenceCollection = class(TDNGenericImport<DNVbaReferenceCollectionClass, DNVbaReferenceCollection>) end;

  //-------------namespace: Aspose.Words----------------
  DNWarningInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{865862A6-56A6-57D1-A810-D46D47B7DFDC}']
  end;

  ///<summary>
  ///  Contains information about a warning that Aspose.Words issued during document loading or saving.
  ///</summary>
  ///<remarks><para>You do not create instances of this class. Objects of this class are created
  ///  and passed by Aspose.Words to the <see cref="M:Aspose.Words.IWarningCallback.Warning(Aspose.Words.WarningInfo)" />
  ///  method.</para><seealso cref="T:Aspose.Words.IWarningCallback" />
  ///</remarks>
  [DNTypeName('Aspose.Words.WarningInfo')]
  DNWarningInfo = interface(DDN.mscorlib.DNObject)
  ['{06F63F53-1076-3B83-93FB-8FF07E66AC46}']
  { getters & setters } 

    function get_WarningType: DNWarningType;
    function get_Description: string;
    function get_Source: DNWarningSource;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the type of the warning.
    ///</summary>
    property WarningType: DNWarningType read get_WarningType;
    ///<summary>
    ///  Returns the description of the warning.
    ///</summary>
    property Description: string read get_Description;
    ///<summary>
    ///  Returns the source of the warning.
    ///</summary>
    property Source: DNWarningSource read get_Source;
  end;

  TDNWarningInfo = class(TDNGenericImport<DNWarningInfoClass, DNWarningInfo>) end;

  //-------------namespace: Aspose.Words----------------
  DNWarningInfoCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{029BACC2-2116-52AE-AAA7-6EF208DB9C13}']
  { constructors } 

    {class} function init: DNWarningInfoCollection;

  end;

  ///<summary>
  ///  Represents a typed collection of <see cref="T:Aspose.Words.WarningInfo" />
  ///  objects.
  ///</summary>
  ///<remarks><para>You can use this collection object as the simplest form of <see cref="T:Aspose.Words.IWarningCallback" />
  ///  implementation to gather
  ///  all warnings that Aspose.Words generates during a load or save operation. Create an instance of this class and assign it
  ///  to the <see cref="P:Aspose.Words.Loading.LoadOptions.WarningCallback" />
  ///  or <see cref="P:Aspose.Words.DocumentBase.WarningCallback" />
  ///  property.</para><seealso cref="T:Aspose.Words.WarningInfo" />
  ///<seealso cref="T:Aspose.Words.IWarningCallback" />
  ///</remarks>
  [DNTypeName('Aspose.Words.WarningInfoCollection')]
  DNWarningInfoCollection = interface(DDN.mscorlib.DNObject)
  ['{AC46CEE5-B262-31C2-BF85-B1E189AD18DD}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNWarningInfo;

  { methods } 

    ///<summary>
    ///  Returns an enumerator object that can be used to iterate over all items in the collection.
    ///</summary>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWarningInfo>;
    ///<summary>
    ///  Removes all elements from the collection.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Implements the <see cref="T:Aspose.Words.IWarningCallback" />
    ///  interface. Adds a warning to this collection.
    ///</summary>
    procedure Warning(info: DNWarningInfo);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements contained in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNWarningInfo read get_Item; default;
  end;

  TDNWarningInfoCollection = class(TDNGenericImport<DNWarningInfoCollectionClass, DNWarningInfoCollection>) end;

  //-------------namespace: Aspose.Words----------------
  DNWatermarkClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F333959D-55AC-59D2-AEFF-B9D816F52565}']
  end;

  ///<summary>
  ///  Represents class to work with document watermark.
  ///</summary>
  ///<dev>
  ///  FIX 4879. This class has been added to working with a watermark.
  ///</dev>
  [DNTypeName('Aspose.Words.Watermark')]
  DNWatermark = interface(DDN.mscorlib.DNObject)
  ['{117DB641-A1B5-3562-8ECB-E542E3414C99}']
  { getters & setters } 

    function get_Type: DNWatermarkType;

  { methods } 

    ///<summary>
    ///  Adds Text watermark into the document.
    ///</summary>
    ///  <param name="text">Text that is displayed as a watermark.</param>
    ///<remarks>
    ///  The text length must be in the range from 1 to 200 inclusive.
    ///  The text cannot be null or contain only whitespaces.
    ///</remarks>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  Throws when the text length is out of range or the text contains only whitespaces.
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  Throws when the text is null.
    ///</exception>
    procedure SetText(text: string); overload;
    ///<summary>
    ///  Adds Text watermark into the document.
    ///</summary>
    ///  <param name="text">Text that is displayed as a watermark.</param>
    ///  <param name="options">Defines additional options for the text watermark.</param>
    ///<remarks>
    ///  The text length must be in the range from 1 to 200 inclusive.
    ///  The text cannot be null or contain only whitespaces.
    ///</remarks>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  Throws when the text length is out of range or the text contain only whitespaces.
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  Throws when the text is null.
    ///</exception><remarks>If <see cref="T:Aspose.Words.TextWatermarkOptions" />
    ///  is null, the watermark will be set with default options.</remarks>
    procedure SetText(text: string; options: DNTextWatermarkOptions); overload;
    ///<summary>
    ///  Adds Image watermark into the document.
    ///</summary>
    ///  <param name="image">Image that is displayed as a watermark.</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  Throws when the image is null.
    ///</exception>
    procedure SetImage(image: DDN.Aspose.Common.DNImage); overload;
    ///<summary>
    ///  Adds Image watermark into the document.
    ///</summary>
    ///  <param name="image">Image that is displayed as a watermark.</param>
    ///  <param name="options">Defines additional options for the image watermark.</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  Throws when the image is null.
    ///</exception><remarks>If <see cref="T:Aspose.Words.ImageWatermarkOptions" />
    ///  is null, the watermark will be set with default options.</remarks>
    procedure SetImage(image: DDN.Aspose.Common.DNImage; options: DNImageWatermarkOptions); overload;
    ///<summary>
    ///  Adds Image watermark into the document.
    ///</summary>
    ///  <param name="imagePath">Path to the image file that is displayed as a watermark.</param>
    ///  <param name="options">Defines additional options for the image watermark.</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  Throws when the path is null.
    ///</exception><remarks>If <see cref="T:Aspose.Words.ImageWatermarkOptions" />
    ///  is null, the watermark will be set with default options.</remarks>
    procedure SetImage(imagePath: string; options: DNImageWatermarkOptions); overload;
    ///<summary>
    ///  Removes the watermark.
    ///</summary>
    procedure Remove;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the watermark type.
    ///</summary>
    property &Type: DNWatermarkType read get_Type;
  end;

  TDNWatermark = class(TDNGenericImport<DNWatermarkClass, DNWatermark>) end;

  //-------------namespace: Aspose.Words.WebExtensions----------------
  DNTaskPaneCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1C9CE4CF-2A34-543B-A4D2-7323C0D4A76D}']
  end;

  ///<summary>
  ///  Specifies a list of persisted task pane objects.
  ///</summary>
  ///<dev>2.2.9 CT_OsfTaskpanes</dev>
  [DNTypeName('Aspose.Words.WebExtensions.TaskPaneCollection')]
  DNTaskPaneCollection = interface(DDN.mscorlib.DNObject)
  ['{16C01BA5-E789-327A-B661-AF9ACD138D30}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNTaskPane;
    procedure set_Item(index: Int32; value: DNTaskPane);

  { methods } 

    procedure Add(item: DNTaskPane);
    procedure Clear;
    procedure Remove(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNTaskPane>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNTaskPane read get_Item write set_Item; default;
  end;

  TDNTaskPaneCollection = class(TDNGenericImport<DNTaskPaneCollectionClass, DNTaskPaneCollection>) end;

  //-------------namespace: Aspose.Words.WebExtensions----------------
  DNWebExtensionBindingCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E967972C-F89E-5CA3-B27A-42A7ECA60E6B}']
  end;

  ///<summary>
  ///  Specifies a list of web extension bindings.
  ///</summary>
  ///<dev>2.2.4 CT_OsfWebExtensionBindingList</dev>
  [DNTypeName('Aspose.Words.WebExtensions.WebExtensionBindingCollection')]
  DNWebExtensionBindingCollection = interface(DDN.mscorlib.DNObject)
  ['{A6731403-4FEA-3AF3-A1E7-BB209163496C}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNWebExtensionBinding;
    procedure set_Item(index: Int32; value: DNWebExtensionBinding);

  { methods } 

    procedure Add(item: DNWebExtensionBinding);
    procedure Clear;
    procedure Remove(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWebExtensionBinding>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNWebExtensionBinding read get_Item write set_Item; default;
  end;

  TDNWebExtensionBindingCollection = class(TDNGenericImport<DNWebExtensionBindingCollectionClass, DNWebExtensionBindingCollection>) end;

  //-------------namespace: Aspose.Words.WebExtensions----------------
  DNWebExtensionPropertyCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CA76CA83-8F01-578E-8F1B-332030602D7F}']
  end;

  ///<summary>
  ///  Specifies a set of web extension custom properties.
  ///</summary>
  ///<dev>2.2.2 CT_OsfWebExtensionPropertyBag</dev>
  [DNTypeName('Aspose.Words.WebExtensions.WebExtensionPropertyCollection')]
  DNWebExtensionPropertyCollection = interface(DDN.mscorlib.DNObject)
  ['{6D4099F4-C0FB-3428-9BF1-6A8088FB9818}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNWebExtensionProperty;
    procedure set_Item(index: Int32; value: DNWebExtensionProperty);

  { methods } 

    procedure Add(item: DNWebExtensionProperty);
    procedure Clear;
    procedure Remove(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWebExtensionProperty>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNWebExtensionProperty read get_Item write set_Item; default;
  end;

  TDNWebExtensionPropertyCollection = class(TDNGenericImport<DNWebExtensionPropertyCollectionClass, DNWebExtensionPropertyCollection>) end;

  //-------------namespace: Aspose.Words.WebExtensions----------------
  DNWebExtensionReferenceCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0F7D2C67-70B5-59E7-A47E-800D89791526}']
  end;

  ///<summary>
  ///  Specifies a list of web extension references.
  ///</summary>
  ///<dev>2.2.6 CT_OsfWebExtensionReferenceList</dev>
  [DNTypeName('Aspose.Words.WebExtensions.WebExtensionReferenceCollection')]
  DNWebExtensionReferenceCollection = interface(DDN.mscorlib.DNObject)
  ['{1CEA8F6C-966D-3A9D-818E-04407252C9DD}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNWebExtensionReference;
    procedure set_Item(index: Int32; value: DNWebExtensionReference);

  { methods } 

    procedure Add(item: DNWebExtensionReference);
    procedure Clear;
    procedure Remove(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWebExtensionReference>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNWebExtensionReference read get_Item write set_Item; default;
  end;

  TDNWebExtensionReferenceCollection = class(TDNGenericImport<DNWebExtensionReferenceCollectionClass, DNWebExtensionReferenceCollection>) end;

  //-------------namespace: Aspose.Words.WebExtensions----------------
  DNTaskPaneClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D80358EE-385D-55DB-BAE8-EFFD15764EC3}']
  { constructors } 

    {class} function init: DNTaskPane;

  end;

  ///<summary>
  ///  Represents an add-in task pane object.
  ///</summary>
  ///<dev>2.2.8 CT_OsfTaskpane. This essence has public constructor.</dev>
  [DNTypeName('Aspose.Words.WebExtensions.TaskPane')]
  DNTaskPane = interface(DDN.mscorlib.DNObject)
  ['{8BE20BA3-CE65-3C8A-A43D-B4C84D42A1E8}']
  { getters & setters } 

    function get_Row: Int32;
    procedure set_Row(value: Int32);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_IsLocked: Boolean;
    procedure set_IsLocked(value: Boolean);
    function get_IsVisible: Boolean;
    procedure set_IsVisible(value: Boolean);
    function get_DockState: DNTaskPaneDockState;
    procedure set_DockState(value: DNTaskPaneDockState);
    function get_WebExtension: DNWebExtension;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the index, enumerating from the outside to the inside, of this task pane among other persisted
    ///  task panes docked in the same default location.
    ///</summary>
    property Row: Int32 read get_Row write set_Row;
    ///<summary>
    ///  Specifies the default width value for this task pane instance.
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Specifies whether the task pane is locked to the document in the UI and cannot be closed by the user.
    ///</summary>
    property IsLocked: Boolean read get_IsLocked write set_IsLocked;
    ///<summary>
    ///  Specifies whether the task pane shows as visible by default when the document opens.
    ///</summary>
    property IsVisible: Boolean read get_IsVisible write set_IsVisible;
    ///<summary>
    ///  Specifies the last-docked location of this task pane object.
    ///</summary>
    ///<dev>In the spec this value represents as string.</dev>
    property DockState: DNTaskPaneDockState read get_DockState write set_DockState;
    ///<summary>
    ///  Represents an web extension object.
    ///</summary>
    property WebExtension: DNWebExtension read get_WebExtension;
  end;

  TDNTaskPane = class(TDNGenericImport<DNTaskPaneClass, DNTaskPane>) end;

  //-------------namespace: Aspose.Words.WebExtensions----------------
  DNWebExtensionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B8FEE4B2-77CA-520A-A780-2142CA1C0FB8}']
  end;

  ///<summary>
  ///  Represents a web extension object.
  ///</summary>
  ///<dev>2.2.7 CT_OsfWebExtension</dev>
  [DNTypeName('Aspose.Words.WebExtensions.WebExtension')]
  DNWebExtension = interface(DDN.mscorlib.DNObject)
  ['{EDE979FC-E8D0-3373-9948-7F0D7D5F6B3A}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_IsFrozen: Boolean;
    procedure set_IsFrozen(value: Boolean);
    function get_Reference: DNWebExtensionReference;
    function get_Bindings: DNWebExtensionBindingCollection;
    function get_AlternateReferences: DNWebExtensionReferenceCollection;
    function get_Properties: DNWebExtensionPropertyCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Uniquely identifies the web extension instance in the current document.
    ///</summary>
    property Id: string read get_Id write set_Id;
    ///<summary>
    ///  Specifies whether the user can interact with the web extension or not.
    ///</summary>
    property IsFrozen: Boolean read get_IsFrozen write set_IsFrozen;
    ///<summary>
    ///  Specifies the primary reference to an web extension.
    ///</summary>
    property Reference: DNWebExtensionReference read get_Reference;
    ///<summary>
    ///  Specifies a list of web extension bindings.
    ///</summary>
    property Bindings: DNWebExtensionBindingCollection read get_Bindings;
    ///<summary>
    ///  Specifies alternate references to a web extension.
    ///</summary>
    property AlternateReferences: DNWebExtensionReferenceCollection read get_AlternateReferences;
    ///<summary>
    ///  Represents a set of web extension custom properties.
    ///</summary>
    property Properties: DNWebExtensionPropertyCollection read get_Properties;
  end;

  TDNWebExtension = class(TDNGenericImport<DNWebExtensionClass, DNWebExtension>) end;

  //-------------namespace: Aspose.Words.WebExtensions----------------
  DNWebExtensionBindingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{96665C51-E519-5264-94A5-B43B448E61E2}']
  { constructors } 

    ///<summary>
    ///  Creates web extension binding with specified parameters.
    ///</summary>
    ///  <param name="id">Binding identifier.</param>
    ///  <param name="bindingType">Binding type.</param>
    ///  <param name="appRef">Binding key used to map the binding entry in this list with the bound data in the document.</param>
    {class} function init(id: string; bindingType: DNWebExtensionBindingType; appRef: string): DNWebExtensionBinding;

  end;

  ///<summary>
  ///  Specifies a binding relationship between a web extension and the data in the document.
  ///</summary>
  ///<dev>2.2.3 CT_OsfWebExtensionBinding</dev>
  [DNTypeName('Aspose.Words.WebExtensions.WebExtensionBinding')]
  DNWebExtensionBinding = interface(DDN.mscorlib.DNObject)
  ['{CDF7DA44-927C-310A-B18A-3224D994995C}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_BindingType: DNWebExtensionBindingType;
    procedure set_BindingType(value: DNWebExtensionBindingType);
    function get_AppRef: string;
    procedure set_AppRef(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies the binding identifier.
    ///</summary>
    property Id: string read get_Id write set_Id;
    ///<summary>
    ///  Specifies the binding type.
    ///</summary>
    property BindingType: DNWebExtensionBindingType read get_BindingType write set_BindingType;
    ///<summary>
    ///  Specifies the binding key used to map the binding entry in this list with the bound data in the document.
    ///</summary>
    ///<dev>It may be, for example, identifier of the SDT.</dev>
    property AppRef: string read get_AppRef write set_AppRef;
  end;

  TDNWebExtensionBinding = class(TDNGenericImport<DNWebExtensionBindingClass, DNWebExtensionBinding>) end;

  //-------------namespace: Aspose.Words.WebExtensions----------------
  DNWebExtensionPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{20093733-C310-54B0-B289-7989B6F477A5}']
  { constructors } 

    ///<summary>
    ///  Creates web extension custom property with specified name and value.
    ///</summary>
    ///  <param name="name">Property name.</param>
    ///  <param name="value">Property value.</param>
    {class} function init(name: string; value: string): DNWebExtensionProperty;

  end;

  ///<summary>
  ///  Specifies a web extension custom property.
  ///</summary>
  ///<dev>2.2.1 CT_OsfWebExtensionProperty</dev>
  [DNTypeName('Aspose.Words.WebExtensions.WebExtensionProperty')]
  DNWebExtensionProperty = interface(DDN.mscorlib.DNObject)
  ['{56A46FD7-F501-3B13-B41F-1522D0E134F3}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies a custom property name
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Specifies a custom property value.
    ///</summary>
    property Value: string read get_Value write set_Value;
  end;

  TDNWebExtensionProperty = class(TDNGenericImport<DNWebExtensionPropertyClass, DNWebExtensionProperty>) end;

  //-------------namespace: Aspose.Words.WebExtensions----------------
  DNWebExtensionReferenceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{02671627-BB0A-56A3-930F-D8CA3EBF230D}']
  { constructors } 

    {class} function init: DNWebExtensionReference;

  end;

  ///<summary>
  ///  Represents the reference to a web extension. The reference is used to identify the provider location and version of the
  ///  extension.
  ///</summary>
  ///<dev>2.2.5 CT_OsfWebExtensionReference. This essence has public constructor to provide ability to populate alternate references.</dev>
  [DNTypeName('Aspose.Words.WebExtensions.WebExtensionReference')]
  DNWebExtensionReference = interface(DDN.mscorlib.DNObject)
  ['{715CED18-4556-35F3-B1F3-9CC84F22BFD4}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Version: string;
    procedure set_Version(value: string);
    function get_Store: string;
    procedure set_Store(value: string);
    function get_StoreType: DNWebExtensionStoreType;
    procedure set_StoreType(value: DNWebExtensionStoreType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Identifier associated with the web extension within a catalog provider.
    ///</summary>
    property Id: string read get_Id write set_Id;
    ///<summary>
    ///  Specifies the version of the web extension.
    ///</summary>
    property Version: string read get_Version write set_Version;
    ///<summary>
    ///  Specifies the instance of the marketplace where the web extension is stored.
    ///</summary>
    property Store: string read get_Store write set_Store;
    ///<summary>
    ///  Specifies the type of marketplace.
    ///</summary>
    property StoreType: DNWebExtensionStoreType read get_StoreType write set_StoreType;
  end;

  TDNWebExtensionReference = class(TDNGenericImport<DNWebExtensionReferenceClass, DNWebExtensionReference>) end;

  //-------------namespace: Aspose.Words----------------
  DNDocumentReaderPluginLoadExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{633DC452-DD1F-5FB8-A121-DC94499FB1E3}']
  end;

  ///<summary>
  ///  Thrown during document load, when the plugin required for reading the document format cannot be loaded.
  ///</summary>
  [DNTypeName('Aspose.Words.DocumentReaderPluginLoadException')]
  DNDocumentReaderPluginLoadException = interface(DDN.mscorlib.DNException)
  ['{1947A36C-6F85-3329-B7AA-1952FB428107}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDocumentReaderPluginLoadException = class(TDNGenericImport<DNDocumentReaderPluginLoadExceptionClass, DNDocumentReaderPluginLoadException>) end;

  //-------------namespace: Aspose.Words----------------
  DNFileCorruptedExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{4A124324-7413-5159-B2D1-ABC8EE8A64BB}']
  end;

  ///<summary>
  ///  Thrown during document load, when the document appears to be corrupted and impossible to load.
  ///</summary>
  [DNTypeName('Aspose.Words.FileCorruptedException')]
  DNFileCorruptedException = interface(DDN.mscorlib.DNException)
  ['{B45F1E92-2D5C-3C8A-8302-68A3BE9D4CD7}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNFileCorruptedException = class(TDNGenericImport<DNFileCorruptedExceptionClass, DNFileCorruptedException>) end;

  //-------------namespace: Aspose.Words----------------
  DNIncorrectPasswordExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{CB4EC97C-3B85-5867-B9E3-51CC190A26FC}']
  end;

  ///<summary>
  ///  Thrown if a document is encrypted with a password and the password specified when opening the document is incorrect or missing.
  ///</summary>
  [DNTypeName('Aspose.Words.IncorrectPasswordException')]
  DNIncorrectPasswordException = interface(DDN.mscorlib.DNException)
  ['{C2075551-FF3D-36E6-95E2-D5F4E77BAD77}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNIncorrectPasswordException = class(TDNGenericImport<DNIncorrectPasswordExceptionClass, DNIncorrectPasswordException>) end;

  //-------------namespace: Aspose.Words----------------
  DNUnsupportedFileFormatExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{8094CDC7-5367-556E-BF54-F97FAC524F9B}']
  end;

  ///<summary>
  ///  Thrown during document load, when the document format is not recognized or not supported by Aspose.Words.
  ///</summary>
  [DNTypeName('Aspose.Words.UnsupportedFileFormatException')]
  DNUnsupportedFileFormatException = interface(DDN.mscorlib.DNException)
  ['{0B701103-861E-39CD-BE2E-0780C220C4B9}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNUnsupportedFileFormatException = class(TDNGenericImport<DNUnsupportedFileFormatExceptionClass, DNUnsupportedFileFormatException>) end;

  //-------------namespace: Aspose.Words.Shaping----------------
  [DNTypeName('Aspose.Words.Shaping.ITextShaper')]
  DNITextShaper = interface(DDN.mscorlib.DNIDisposable)
  ['{54342F49-90D6-36F7-A47B-DDE50D7A558C}']
  { methods } 

    function ShapeText(runs: TArray<string>; direction: DNDirection; script: DNUnicodeScript; fontFeatures: TArray<DNFontFeature>): TArray<TArray<DNCluster>>;

  end;

  //-------------namespace: Aspose.Words.Rendering----------------
  DNAsposeWordsPrintDocumentClass = interface(DDN.Aspose.Common.DNPrintDocumentClass)
  ['{CD711D5D-37C5-52AD-B2D7-07931D08E3F2}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of this class.
    ///</summary>
    ///  <param name="document">The document to print.</param>
    {class} function init(document: DNDocument): DNAsposeWordsPrintDocument;

  end;

  ///<summary>
  ///  Provides a default implementation for printing of a <see cref="T:Aspose.Words.Document" />
  ///  within
  ///  the .NET printing framework.
  ///</summary>
  ///<remarks><para><see cref="T:Aspose.Words.Rendering.AsposeWordsPrintDocument" />
  ///  overrides <see cref="M:System.Drawing.Printing.PrintDocument.OnBeginPrint(System.Drawing.Printing.PrintEventArgs)" />
  ///  to print the range of pages that is specified in <see cref="P:System.Drawing.Printing.PrintDocument.PrinterSettings" />
  ///  .</para><para>A single Word document can consist of multiple sections that specify pages with different sizes,
  ///  orientation and paper trays. <see cref="T:Aspose.Words.Rendering.AsposeWordsPrintDocument" />
  ///  overrides
  ///<see cref="M:System.Drawing.Printing.PrintDocument.OnQueryPageSettings(System.Drawing.Printing.QueryPageSettingsEventArgs)" />
  ///  to properly select paper size, orientation
  ///  and paper source when printing a Word document.</para><para>Microsoft Word stores printer specific values for paper trays in a Word document and therefore,
  ///  only printing on the same printer model as the one that was selected when the user specified the paper trays
  ///  will result in printing from the correct trays. If you print a document on a different printer, then most likely
  ///  the default paper tray will be used, not the trays specified in the document.</para></remarks>
  [DNTypeName('Aspose.Words.Rendering.AsposeWordsPrintDocument')]
  DNAsposeWordsPrintDocument = interface(DDN.Aspose.Common.DNPrintDocument)
  ['{8220A5D5-3C09-39B6-AF68-72C0E6810D8B}']
  { getters & setters } 

    function get_DefaultPageSettings: DDN.Aspose.Common.DNPageSettings;
    procedure set_DefaultPageSettings(value: DDN.Aspose.Common.DNPageSettings);
    function get_DocumentName: string;
    procedure set_DocumentName(value: string);
    function get_OriginAtMargins: Boolean;
    procedure set_OriginAtMargins(value: Boolean);
    function get_PrintController: DDN.Aspose.Common.DNPrintController;
    procedure set_PrintController(value: DDN.Aspose.Common.DNPrintController);
    function get_PrinterSettings: DDN.Aspose.Common.DNPrinterSettings;
    procedure set_PrinterSettings(value: DDN.Aspose.Common.DNPrinterSettings);
    function get_Site: DDN.Aspose.Common.DNISite;
    procedure set_Site(value: DDN.Aspose.Common.DNISite);
    function get_Container: DDN.Aspose.Common.DNIContainer;

  { events } 

    procedure add_BeginPrint(value: DDN.Aspose.Common.DNPrintEventHandler);
    procedure remove_BeginPrint(value: DDN.Aspose.Common.DNPrintEventHandler);
    procedure add_EndPrint(value: DDN.Aspose.Common.DNPrintEventHandler);
    procedure remove_EndPrint(value: DDN.Aspose.Common.DNPrintEventHandler);
    procedure add_PrintPage(value: DDN.Aspose.Common.DNPrintPageEventHandler);
    procedure remove_PrintPage(value: DDN.Aspose.Common.DNPrintPageEventHandler);
    procedure add_QueryPageSettings(value: DDN.Aspose.Common.DNQueryPageSettingsEventHandler);
    procedure remove_QueryPageSettings(value: DDN.Aspose.Common.DNQueryPageSettingsEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  Reads and caches some fields of <see cref="T:System.Drawing.Printing.PrinterSettings" />
    ///  to reduce printing time.
    ///</summary>
    ///<remarks>
    ///  This method is called before the printing starts if it wasn't executed previously.
    ///</remarks>
    procedure CachePrinterSettings;
    procedure Print;
    function ToString: string;
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultPageSettings: DDN.Aspose.Common.DNPageSettings read get_DefaultPageSettings write set_DefaultPageSettings;
    property DocumentName: string read get_DocumentName write set_DocumentName;
    property OriginAtMargins: Boolean read get_OriginAtMargins write set_OriginAtMargins;
    property PrintController: DDN.Aspose.Common.DNPrintController read get_PrintController write set_PrintController;
    property PrinterSettings: DDN.Aspose.Common.DNPrinterSettings read get_PrinterSettings write set_PrinterSettings;
    property Site: DDN.Aspose.Common.DNISite read get_Site write set_Site;
    property Container: DDN.Aspose.Common.DNIContainer read get_Container;
  end;

  TDNAsposeWordsPrintDocument = class(TDNGenericImport<DNAsposeWordsPrintDocumentClass, DNAsposeWordsPrintDocument>) end;


implementation

end.
