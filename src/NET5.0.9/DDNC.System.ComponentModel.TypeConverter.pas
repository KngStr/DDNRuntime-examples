//----------------------------------------------------------------------------
//  System.ComponentModel.TypeConverter.dll: System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 5.0.9
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.ComponentModel.TypeConverter
//  Author: ying32
//----------------------------------------------------------------------------

{$IFNDEF DDNCSYSTEMCOMPONENTMODELTYPECONVERTER}
unit DDNC.System.ComponentModel.TypeConverter;
{$ENDIF}

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.System.Private.CoreLib,
  DDNC.System.ComponentModel.Primitives,
  DDNC.System.Resources.Writer,
  DDNC.System.ComponentModel,
  DDNC.System.Collections.NonGeneric;

type

{ enums }

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.BindableSupport')]
  DNBindableSupport = type Integer;
  DNBindableSupportHelper = record helper for DNBindableSupport
  public const
    No = 0;
    Yes = 1;
    Default_ = 2;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.BindingDirection')]
  DNBindingDirection = type Integer;
  DNBindingDirectionHelper = record helper for DNBindingDirection
  public const
    OneWay = 0;
    TwoWay = 1;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.CollectionChangeAction')]
  DNCollectionChangeAction = type Integer;
  DNCollectionChangeActionHelper = record helper for DNCollectionChangeAction
  public const
    Add = 1;
    Remove = 2;
    Refresh = 3;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.DataObjectMethodType')]
  DNDataObjectMethodType = type Integer;
  DNDataObjectMethodTypeHelper = record helper for DNDataObjectMethodType
  public const
    Fill = 0;
    Select = 1;
    Update = 2;
    Insert = 3;
    Delete = 4;
  end;


  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.HelpContextType')]
  DNHelpContextType = type Integer;
  DNHelpContextTypeHelper = record helper for DNHelpContextType
  public const
    Ambient = 0;
    Window = 1;
    Selection = 2;
    ToolWindowSelection = 3;
  end;


  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.HelpKeywordType')]
  DNHelpKeywordType = type Integer;
  DNHelpKeywordTypeHelper = record helper for DNHelpKeywordType
  public const
    F1Keyword = 0;
    GeneralKeyword = 1;
    FilterKeyword = 2;
  end;


  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.SelectionTypes')]
  DNSelectionTypes = type Integer;
  DNSelectionTypesHelper = record helper for DNSelectionTypes
  public const
    Auto = 1;
    Normal = 1;
    Replace = 2;
    MouseDown = 4;
    MouseUp = 8;
    Click = 16;
    Primary = 16;
    Valid = 31;
    Toggle = 32;
    Add = 64;
    Remove = 128;
  end;


  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.ViewTechnology')]
  DNViewTechnology = type Integer;
  DNViewTechnologyHelper = record helper for DNViewTechnology
  public const
    Passthrough = 0;
    WindowsForms = 1;
    Default_ = 2;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.InheritanceLevel')]
  DNInheritanceLevel = type Integer;
  DNInheritanceLevelHelper = record helper for DNInheritanceLevel
  public const
    Inherited_ = 1;
    InheritedReadOnly = 2;
    NotInherited = 3;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.LicenseUsageMode')]
  DNLicenseUsageMode = type Integer;
  DNLicenseUsageModeHelper = record helper for DNLicenseUsageMode
  public const
    Runtime = 0;
    Designtime = 1;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.ListChangedType')]
  DNListChangedType = type Integer;
  DNListChangedTypeHelper = record helper for DNListChangedType
  public const
    Reset = 0;
    ItemAdded = 1;
    ItemDeleted = 2;
    ItemMoved = 3;
    ItemChanged = 4;
    PropertyDescriptorAdded = 5;
    PropertyDescriptorDeleted = 6;
    PropertyDescriptorChanged = 7;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.ListSortDirection')]
  DNListSortDirection = type Integer;
  DNListSortDirectionHelper = record helper for DNListSortDirection
  public const
    Ascending = 0;
    Descending = 1;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.MaskedTextResultHint')]
  DNMaskedTextResultHint = type Integer;
  DNMaskedTextResultHintHelper = record helper for DNMaskedTextResultHint
  public const
    Unknown = 0;
    CharacterEscaped = 1;
    NoEffect = 2;
    SideEffect = 3;
    Success = 4;
    PositionOutOfRange = -55;
    NonEditPosition = -54;
    UnavailableEditPosition = -53;
    PromptCharNotAllowed = -52;
    InvalidInput = -51;
    SignedDigitExpected = -5;
    LetterExpected = -4;
    DigitExpected = -3;
    AlphanumericCharacterExpected = -2;
    AsciiCharacterExpected = -1;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.PropertyTabScope')]
  DNPropertyTabScope = type Integer;
  DNPropertyTabScopeHelper = record helper for DNPropertyTabScope
  public const
    Static_ = 0;
    Global = 1;
    Document = 2;
    Component = 3;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.ToolboxItemFilterType')]
  DNToolboxItemFilterType = type Integer;
  DNToolboxItemFilterTypeHelper = record helper for DNToolboxItemFilterType
  public const
    Allow = 0;
    Custom = 1;
    Prevent = 2;
    Require = 3;
  end;




type


{ declares }

  DNIBindingList = interface; // type: System.ComponentModel.IBindingList, namespace: System.ComponentModel
  DNIBindingListView = interface; // type: System.ComponentModel.IBindingListView, namespace: System.ComponentModel
  DNIComponentChangeService = interface; // type: System.ComponentModel.Design.IComponentChangeService, namespace: System.ComponentModel.Design
  DNIComponentDiscoveryService = interface; // type: System.ComponentModel.Design.IComponentDiscoveryService, namespace: System.ComponentModel.Design
  DNIComponentInitializer = interface; // type: System.ComponentModel.Design.IComponentInitializer, namespace: System.ComponentModel.Design
  DNIDesignerEventService = interface; // type: System.ComponentModel.Design.IDesignerEventService, namespace: System.ComponentModel.Design
  DNIDesignerFilter = interface; // type: System.ComponentModel.Design.IDesignerFilter, namespace: System.ComponentModel.Design
  DNIDesignerHostTransactionState = interface; // type: System.ComponentModel.Design.IDesignerHostTransactionState, namespace: System.ComponentModel.Design
  DNIDesignerOptionService = interface; // type: System.ComponentModel.Design.IDesignerOptionService, namespace: System.ComponentModel.Design
  DNIDictionaryService = interface; // type: System.ComponentModel.Design.IDictionaryService, namespace: System.ComponentModel.Design
  DNIEventBindingService = interface; // type: System.ComponentModel.Design.IEventBindingService, namespace: System.ComponentModel.Design
  DNIExtenderListService = interface; // type: System.ComponentModel.Design.IExtenderListService, namespace: System.ComponentModel.Design
  DNIExtenderProviderService = interface; // type: System.ComponentModel.Design.IExtenderProviderService, namespace: System.ComponentModel.Design
  DNIHelpService = interface; // type: System.ComponentModel.Design.IHelpService, namespace: System.ComponentModel.Design
  DNIInheritanceService = interface; // type: System.ComponentModel.Design.IInheritanceService, namespace: System.ComponentModel.Design
  DNIMenuCommandService = interface; // type: System.ComponentModel.Design.IMenuCommandService, namespace: System.ComponentModel.Design
  DNIReferenceService = interface; // type: System.ComponentModel.Design.IReferenceService, namespace: System.ComponentModel.Design
  DNIResourceService = interface; // type: System.ComponentModel.Design.IResourceService, namespace: System.ComponentModel.Design
  DNISelectionService = interface; // type: System.ComponentModel.Design.ISelectionService, namespace: System.ComponentModel.Design
  DNITypeDescriptorFilterService = interface; // type: System.ComponentModel.Design.ITypeDescriptorFilterService, namespace: System.ComponentModel.Design
  DNITypeDiscoveryService = interface; // type: System.ComponentModel.Design.ITypeDiscoveryService, namespace: System.ComponentModel.Design
  DNITypeResolutionService = interface; // type: System.ComponentModel.Design.ITypeResolutionService, namespace: System.ComponentModel.Design
  DNIDesignerLoaderService = interface; // type: System.ComponentModel.Design.Serialization.IDesignerLoaderService, namespace: System.ComponentModel.Design.Serialization
  DNIDesignerSerializationProvider = interface; // type: System.ComponentModel.Design.Serialization.IDesignerSerializationProvider, namespace: System.ComponentModel.Design.Serialization
  DNIDesignerSerializationService = interface; // type: System.ComponentModel.Design.Serialization.IDesignerSerializationService, namespace: System.ComponentModel.Design.Serialization
  DNINameCreationService = interface; // type: System.ComponentModel.Design.Serialization.INameCreationService, namespace: System.ComponentModel.Design.Serialization
  DNICancelAddNew = interface; // type: System.ComponentModel.ICancelAddNew, namespace: System.ComponentModel
  DNIComNativeDescriptorHandler = interface; // type: System.ComponentModel.IComNativeDescriptorHandler, namespace: System.ComponentModel
  DNICustomTypeDescriptor = interface; // type: System.ComponentModel.ICustomTypeDescriptor, namespace: System.ComponentModel
  DNIDataErrorInfo = interface; // type: System.ComponentModel.IDataErrorInfo, namespace: System.ComponentModel
  DNIExtenderProvider = interface; // type: System.ComponentModel.IExtenderProvider, namespace: System.ComponentModel
  DNIIntellisenseBuilder = interface; // type: System.ComponentModel.IIntellisenseBuilder, namespace: System.ComponentModel
  DNIListSource = interface; // type: System.ComponentModel.IListSource, namespace: System.ComponentModel
  DNIRaiseItemChangedEvents = interface; // type: System.ComponentModel.IRaiseItemChangedEvents, namespace: System.ComponentModel
  DNISupportInitializeNotification = interface; // type: System.ComponentModel.ISupportInitializeNotification, namespace: System.ComponentModel
  DNITypedList = interface; // type: System.ComponentModel.ITypedList, namespace: System.ComponentModel
  DNIDesigner = interface; // type: System.ComponentModel.Design.IDesigner, namespace: System.ComponentModel.Design
  DNIRootDesigner = interface; // type: System.ComponentModel.Design.IRootDesigner, namespace: System.ComponentModel.Design
  DNITreeDesigner = interface; // type: System.ComponentModel.Design.ITreeDesigner, namespace: System.ComponentModel.Design
  DNINestedContainer = interface; // type: System.ComponentModel.INestedContainer, namespace: System.ComponentModel
  DNIServiceContainer = interface; // type: System.ComponentModel.Design.IServiceContainer, namespace: System.ComponentModel.Design
  DNIDesignerHost = interface; // type: System.ComponentModel.Design.IDesignerHost, namespace: System.ComponentModel.Design
  DNIDesignerLoaderHost = interface; // type: System.ComponentModel.Design.Serialization.IDesignerLoaderHost, namespace: System.ComponentModel.Design.Serialization
  DNIDesignerLoaderHost2 = interface; // type: System.ComponentModel.Design.Serialization.IDesignerLoaderHost2, namespace: System.ComponentModel.Design.Serialization
  DNIDesignerSerializationManager = interface; // type: System.ComponentModel.Design.Serialization.IDesignerSerializationManager, namespace: System.ComponentModel.Design.Serialization
  DNINestedSite = interface; // type: System.ComponentModel.INestedSite, namespace: System.ComponentModel
  DNITypeDescriptorContext = interface; // type: System.ComponentModel.ITypeDescriptorContext, namespace: System.ComponentModel
  DNAmbientValueAttribute = interface; // type: System.ComponentModel.AmbientValueAttribute, namespace: System.ComponentModel
  DNAttributeProviderAttribute = interface; // type: System.ComponentModel.AttributeProviderAttribute, namespace: System.ComponentModel
  DNBindableAttribute = interface; // type: System.ComponentModel.BindableAttribute, namespace: System.ComponentModel
  DNComplexBindingPropertiesAttribute = interface; // type: System.ComponentModel.ComplexBindingPropertiesAttribute, namespace: System.ComponentModel
  DNDataObjectAttribute = interface; // type: System.ComponentModel.DataObjectAttribute, namespace: System.ComponentModel
  DNDataObjectFieldAttribute = interface; // type: System.ComponentModel.DataObjectFieldAttribute, namespace: System.ComponentModel
  DNDataObjectMethodAttribute = interface; // type: System.ComponentModel.DataObjectMethodAttribute, namespace: System.ComponentModel
  DNDefaultBindingPropertyAttribute = interface; // type: System.ComponentModel.DefaultBindingPropertyAttribute, namespace: System.ComponentModel
  DNDefaultEventAttribute = interface; // type: System.ComponentModel.DefaultEventAttribute, namespace: System.ComponentModel
  DNDefaultPropertyAttribute = interface; // type: System.ComponentModel.DefaultPropertyAttribute, namespace: System.ComponentModel
  DNTimersDescriptionAttribute = interface; // type: System.Timers.TimersDescriptionAttribute, namespace: System.Timers
  DNHelpKeywordAttribute = interface; // type: System.ComponentModel.Design.HelpKeywordAttribute, namespace: System.ComponentModel.Design
  DNDefaultSerializationProviderAttribute = interface; // type: System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute, namespace: System.ComponentModel.Design.Serialization
  DNRootDesignerSerializerAttribute = interface; // type: System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute, namespace: System.ComponentModel.Design.Serialization
  DNDesignTimeVisibleAttribute = interface; // type: System.ComponentModel.DesignTimeVisibleAttribute, namespace: System.ComponentModel
  DNExtenderProvidedPropertyAttribute = interface; // type: System.ComponentModel.ExtenderProvidedPropertyAttribute, namespace: System.ComponentModel
  DNInheritanceAttribute = interface; // type: System.ComponentModel.InheritanceAttribute, namespace: System.ComponentModel
  DNInstallerTypeAttribute = interface; // type: System.ComponentModel.InstallerTypeAttribute, namespace: System.ComponentModel
  DNLicenseProviderAttribute = interface; // type: System.ComponentModel.LicenseProviderAttribute, namespace: System.ComponentModel
  DNListBindableAttribute = interface; // type: System.ComponentModel.ListBindableAttribute, namespace: System.ComponentModel
  DNLookupBindingPropertiesAttribute = interface; // type: System.ComponentModel.LookupBindingPropertiesAttribute, namespace: System.ComponentModel
  DNPasswordPropertyTextAttribute = interface; // type: System.ComponentModel.PasswordPropertyTextAttribute, namespace: System.ComponentModel
  DNPropertyTabAttribute = interface; // type: System.ComponentModel.PropertyTabAttribute, namespace: System.ComponentModel
  DNProvidePropertyAttribute = interface; // type: System.ComponentModel.ProvidePropertyAttribute, namespace: System.ComponentModel
  DNRecommendedAsConfigurableAttribute = interface; // type: System.ComponentModel.RecommendedAsConfigurableAttribute, namespace: System.ComponentModel
  DNRunInstallerAttribute = interface; // type: System.ComponentModel.RunInstallerAttribute, namespace: System.ComponentModel
  DNSettingsBindableAttribute = interface; // type: System.ComponentModel.SettingsBindableAttribute, namespace: System.ComponentModel
  DNToolboxItemAttribute = interface; // type: System.ComponentModel.ToolboxItemAttribute, namespace: System.ComponentModel
  DNToolboxItemFilterAttribute = interface; // type: System.ComponentModel.ToolboxItemFilterAttribute, namespace: System.ComponentModel
  DNDesignerVerbCollection = interface; // type: System.ComponentModel.Design.DesignerVerbCollection, namespace: System.ComponentModel.Design
  DNBindingList<T> = interface; // type: System.ComponentModel.BindingList`1, namespace: System.ComponentModel
  DNAttributeCollection = interface; // type: System.ComponentModel.AttributeCollection, namespace: System.ComponentModel
  DNComponentEditor = interface; // type: System.ComponentModel.ComponentEditor, namespace: System.ComponentModel
  DNContainer = interface; // type: System.ComponentModel.Container, namespace: System.ComponentModel
  DNNestedContainer = interface; // type: System.ComponentModel.NestedContainer, namespace: System.ComponentModel
  DNContainerFilterService = interface; // type: System.ComponentModel.ContainerFilterService, namespace: System.ComponentModel
  DNCustomTypeDescriptor = interface; // type: System.ComponentModel.CustomTypeDescriptor, namespace: System.ComponentModel
  DNCommandID = interface; // type: System.ComponentModel.Design.CommandID, namespace: System.ComponentModel.Design
  DNDesignerCollection = interface; // type: System.ComponentModel.Design.DesignerCollection, namespace: System.ComponentModel.Design
  DNDesignerOptionService = interface; // type: System.ComponentModel.Design.DesignerOptionService, namespace: System.ComponentModel.Design
  DNDesignerOptionService_DesignerOptionCollection = interface; // type: System.ComponentModel.Design.DesignerOptionService+DesignerOptionCollection, namespace: System.ComponentModel.Design
  DNDesignerTransaction = interface; // type: System.ComponentModel.Design.DesignerTransaction, namespace: System.ComponentModel.Design
  DNDesigntimeLicenseContextSerializer = interface; // type: System.ComponentModel.Design.DesigntimeLicenseContextSerializer, namespace: System.ComponentModel.Design
  DNMenuCommand = interface; // type: System.ComponentModel.Design.MenuCommand, namespace: System.ComponentModel.Design
  DNDesignerVerb = interface; // type: System.ComponentModel.Design.DesignerVerb, namespace: System.ComponentModel.Design
  DNComponentSerializationService = interface; // type: System.ComponentModel.Design.Serialization.ComponentSerializationService, namespace: System.ComponentModel.Design.Serialization
  DNContextStack = interface; // type: System.ComponentModel.Design.Serialization.ContextStack, namespace: System.ComponentModel.Design.Serialization
  DNDesignerLoader = interface; // type: System.ComponentModel.Design.Serialization.DesignerLoader, namespace: System.ComponentModel.Design.Serialization
  DNInstanceDescriptor = interface; // type: System.ComponentModel.Design.Serialization.InstanceDescriptor, namespace: System.ComponentModel.Design.Serialization
  DNMemberRelationshipService = interface; // type: System.ComponentModel.Design.Serialization.MemberRelationshipService, namespace: System.ComponentModel.Design.Serialization
  DNSerializationStore = interface; // type: System.ComponentModel.Design.Serialization.SerializationStore, namespace: System.ComponentModel.Design.Serialization
  DNServiceContainer = interface; // type: System.ComponentModel.Design.ServiceContainer, namespace: System.ComponentModel.Design
  DNStandardCommands = interface; // type: System.ComponentModel.Design.StandardCommands, namespace: System.ComponentModel.Design
  DNStandardToolWindows = interface; // type: System.ComponentModel.Design.StandardToolWindows, namespace: System.ComponentModel.Design
  DNTypeDescriptionProviderService = interface; // type: System.ComponentModel.Design.TypeDescriptionProviderService, namespace: System.ComponentModel.Design
  DNEventDescriptorCollection = interface; // type: System.ComponentModel.EventDescriptorCollection, namespace: System.ComponentModel
  DNInstanceCreationEditor = interface; // type: System.ComponentModel.InstanceCreationEditor, namespace: System.ComponentModel
  DNLicense = interface; // type: System.ComponentModel.License, namespace: System.ComponentModel
  DNLicenseContext = interface; // type: System.ComponentModel.LicenseContext, namespace: System.ComponentModel
  DNDesigntimeLicenseContext = interface; // type: System.ComponentModel.Design.DesigntimeLicenseContext, namespace: System.ComponentModel.Design
  DNLicenseManager = interface; // type: System.ComponentModel.LicenseManager, namespace: System.ComponentModel
  DNLicenseProvider = interface; // type: System.ComponentModel.LicenseProvider, namespace: System.ComponentModel
  DNLicFileLicenseProvider = interface; // type: System.ComponentModel.LicFileLicenseProvider, namespace: System.ComponentModel
  DNListSortDescription = interface; // type: System.ComponentModel.ListSortDescription, namespace: System.ComponentModel
  DNListSortDescriptionCollection = interface; // type: System.ComponentModel.ListSortDescriptionCollection, namespace: System.ComponentModel
  DNMarshalByValueComponent = interface; // type: System.ComponentModel.MarshalByValueComponent, namespace: System.ComponentModel
  DNMaskedTextProvider = interface; // type: System.ComponentModel.MaskedTextProvider, namespace: System.ComponentModel
  DNMemberDescriptor = interface; // type: System.ComponentModel.MemberDescriptor, namespace: System.ComponentModel
  DNEventDescriptor = interface; // type: System.ComponentModel.EventDescriptor, namespace: System.ComponentModel
  DNPropertyDescriptor = interface; // type: System.ComponentModel.PropertyDescriptor, namespace: System.ComponentModel
  DNPropertyDescriptorCollection = interface; // type: System.ComponentModel.PropertyDescriptorCollection, namespace: System.ComponentModel
  DNSyntaxCheck = interface; // type: System.ComponentModel.SyntaxCheck, namespace: System.ComponentModel
  DNTypeConverter = interface; // type: System.ComponentModel.TypeConverter, namespace: System.ComponentModel
  DNTypeConverter_StandardValuesCollection = interface; // type: System.ComponentModel.TypeConverter+StandardValuesCollection, namespace: System.ComponentModel
  DNBaseNumberConverter = interface; // type: System.ComponentModel.BaseNumberConverter, namespace: System.ComponentModel
  DNByteConverter = interface; // type: System.ComponentModel.ByteConverter, namespace: System.ComponentModel
  DNDecimalConverter = interface; // type: System.ComponentModel.DecimalConverter, namespace: System.ComponentModel
  DNDoubleConverter = interface; // type: System.ComponentModel.DoubleConverter, namespace: System.ComponentModel
  DNInt16Converter = interface; // type: System.ComponentModel.Int16Converter, namespace: System.ComponentModel
  DNInt32Converter = interface; // type: System.ComponentModel.Int32Converter, namespace: System.ComponentModel
  DNInt64Converter = interface; // type: System.ComponentModel.Int64Converter, namespace: System.ComponentModel
  DNSByteConverter = interface; // type: System.ComponentModel.SByteConverter, namespace: System.ComponentModel
  DNSingleConverter = interface; // type: System.ComponentModel.SingleConverter, namespace: System.ComponentModel
  DNUInt16Converter = interface; // type: System.ComponentModel.UInt16Converter, namespace: System.ComponentModel
  DNUInt32Converter = interface; // type: System.ComponentModel.UInt32Converter, namespace: System.ComponentModel
  DNUInt64Converter = interface; // type: System.ComponentModel.UInt64Converter, namespace: System.ComponentModel
  DNBooleanConverter = interface; // type: System.ComponentModel.BooleanConverter, namespace: System.ComponentModel
  DNCharConverter = interface; // type: System.ComponentModel.CharConverter, namespace: System.ComponentModel
  DNCollectionConverter = interface; // type: System.ComponentModel.CollectionConverter, namespace: System.ComponentModel
  DNArrayConverter = interface; // type: System.ComponentModel.ArrayConverter, namespace: System.ComponentModel
  DNCultureInfoConverter = interface; // type: System.ComponentModel.CultureInfoConverter, namespace: System.ComponentModel
  DNDateTimeConverter = interface; // type: System.ComponentModel.DateTimeConverter, namespace: System.ComponentModel
  DNDateTimeOffsetConverter = interface; // type: System.ComponentModel.DateTimeOffsetConverter, namespace: System.ComponentModel
  DNEnumConverter = interface; // type: System.ComponentModel.EnumConverter, namespace: System.ComponentModel
  DNExpandableObjectConverter = interface; // type: System.ComponentModel.ExpandableObjectConverter, namespace: System.ComponentModel
  DNGuidConverter = interface; // type: System.ComponentModel.GuidConverter, namespace: System.ComponentModel
  DNMultilineStringConverter = interface; // type: System.ComponentModel.MultilineStringConverter, namespace: System.ComponentModel
  DNNullableConverter = interface; // type: System.ComponentModel.NullableConverter, namespace: System.ComponentModel
  DNReferenceConverter = interface; // type: System.ComponentModel.ReferenceConverter, namespace: System.ComponentModel
  DNComponentConverter = interface; // type: System.ComponentModel.ComponentConverter, namespace: System.ComponentModel
  DNStringConverter = interface; // type: System.ComponentModel.StringConverter, namespace: System.ComponentModel
  DNTimeSpanConverter = interface; // type: System.ComponentModel.TimeSpanConverter, namespace: System.ComponentModel
  DNTypeListConverter = interface; // type: System.ComponentModel.TypeListConverter, namespace: System.ComponentModel
  DNVersionConverter = interface; // type: System.ComponentModel.VersionConverter, namespace: System.ComponentModel
  DNColorConverter = interface; // type: System.Drawing.ColorConverter, namespace: System.Drawing
  DNPointConverter = interface; // type: System.Drawing.PointConverter, namespace: System.Drawing
  DNRectangleConverter = interface; // type: System.Drawing.RectangleConverter, namespace: System.Drawing
  DNSizeConverter = interface; // type: System.Drawing.SizeConverter, namespace: System.Drawing
  DNSizeFConverter = interface; // type: System.Drawing.SizeFConverter, namespace: System.Drawing
  DNExtendedProtectionPolicyTypeConverter = interface; // type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter, namespace: System.Security.Authentication.ExtendedProtection
  DNUriTypeConverter = interface; // type: System.UriTypeConverter, namespace: System
  DNTypeDescriptionProvider = interface; // type: System.ComponentModel.TypeDescriptionProvider, namespace: System.ComponentModel
  DNTypeDescriptor = interface; // type: System.ComponentModel.TypeDescriptor, namespace: System.ComponentModel
  DNAddingNewEventArgs = interface; // type: System.ComponentModel.AddingNewEventArgs, namespace: System.ComponentModel
  DNCollectionChangeEventArgs = interface; // type: System.ComponentModel.CollectionChangeEventArgs, namespace: System.ComponentModel
  DNActiveDesignerEventArgs = interface; // type: System.ComponentModel.Design.ActiveDesignerEventArgs, namespace: System.ComponentModel.Design
  DNComponentChangedEventArgs = interface; // type: System.ComponentModel.Design.ComponentChangedEventArgs, namespace: System.ComponentModel.Design
  DNComponentChangingEventArgs = interface; // type: System.ComponentModel.Design.ComponentChangingEventArgs, namespace: System.ComponentModel.Design
  DNComponentEventArgs = interface; // type: System.ComponentModel.Design.ComponentEventArgs, namespace: System.ComponentModel.Design
  DNComponentRenameEventArgs = interface; // type: System.ComponentModel.Design.ComponentRenameEventArgs, namespace: System.ComponentModel.Design
  DNDesignerEventArgs = interface; // type: System.ComponentModel.Design.DesignerEventArgs, namespace: System.ComponentModel.Design
  DNDesignerTransactionCloseEventArgs = interface; // type: System.ComponentModel.Design.DesignerTransactionCloseEventArgs, namespace: System.ComponentModel.Design
  DNResolveNameEventArgs = interface; // type: System.ComponentModel.Design.Serialization.ResolveNameEventArgs, namespace: System.ComponentModel.Design.Serialization
  DNHandledEventArgs = interface; // type: System.ComponentModel.HandledEventArgs, namespace: System.ComponentModel
  DNListChangedEventArgs = interface; // type: System.ComponentModel.ListChangedEventArgs, namespace: System.ComponentModel
  DNRefreshEventArgs = interface; // type: System.ComponentModel.RefreshEventArgs, namespace: System.ComponentModel
  DNElapsedEventArgs = interface; // type: System.Timers.ElapsedEventArgs, namespace: System.Timers
  DNLicenseException = interface; // type: System.ComponentModel.LicenseException, namespace: System.ComponentModel
  DNWarningException = interface; // type: System.ComponentModel.WarningException, namespace: System.ComponentModel
  DNCheckoutException = interface; // type: System.ComponentModel.Design.CheckoutException, namespace: System.ComponentModel.Design
  DNTimer = interface; // type: System.Timers.Timer, namespace: System.Timers
  DNComponentResourceManager = interface; // type: System.ComponentModel.ComponentResourceManager, namespace: System.ComponentModel
  DNMemberRelationship = interface; // type: System.ComponentModel.Design.Serialization.MemberRelationship, namespace: System.ComponentModel.Design.Serialization

{ delegates }

  [DNTypeName('System.ComponentModel.AddingNewEventHandler')]
  DNAddingNewEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNAddingNewEventArgs) of object;

  [DNTypeName('System.ComponentModel.CancelEventHandler')]
  DNCancelEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DDNC.System.ComponentModel.DNCancelEventArgs) of object;

  [DNTypeName('System.ComponentModel.CollectionChangeEventHandler')]
  DNCollectionChangeEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNCollectionChangeEventArgs) of object;

  [DNTypeName('System.ComponentModel.Design.ActiveDesignerEventHandler')]
  DNActiveDesignerEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNActiveDesignerEventArgs) of object;

  [DNTypeName('System.ComponentModel.Design.ComponentChangedEventHandler')]
  DNComponentChangedEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNComponentChangedEventArgs) of object;

  [DNTypeName('System.ComponentModel.Design.ComponentChangingEventHandler')]
  DNComponentChangingEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNComponentChangingEventArgs) of object;

  [DNTypeName('System.ComponentModel.Design.ComponentEventHandler')]
  DNComponentEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNComponentEventArgs) of object;

  [DNTypeName('System.ComponentModel.Design.ComponentRenameEventHandler')]
  DNComponentRenameEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNComponentRenameEventArgs) of object;

  [DNTypeName('System.ComponentModel.Design.DesignerEventHandler')]
  DNDesignerEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNDesignerEventArgs) of object;

  [DNTypeName('System.ComponentModel.Design.DesignerTransactionCloseEventHandler')]
  DNDesignerTransactionCloseEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNDesignerTransactionCloseEventArgs) of object;

  [DNTypeName('System.ComponentModel.Design.Serialization.ResolveNameEventHandler')]
  DNResolveNameEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNResolveNameEventArgs) of object;

  [DNTypeName('System.ComponentModel.Design.ServiceCreatorCallback')]
  DNServiceCreatorCallback = function(container: DNIServiceContainer; serviceType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject of object;

  [DNTypeName('System.ComponentModel.HandledEventHandler')]
  DNHandledEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNHandledEventArgs) of object;

  [DNTypeName('System.ComponentModel.ListChangedEventHandler')]
  DNListChangedEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNListChangedEventArgs) of object;

  [DNTypeName('System.ComponentModel.RefreshEventHandler')]
  DNRefreshEventHandler = procedure(e: DNRefreshEventArgs) of object;

  [DNTypeName('System.Timers.ElapsedEventHandler')]
  DNElapsedEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DNElapsedEventArgs) of object;




{ objects }

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.IBindingList')]
  DNIBindingList = interface(DDNC.System.Private.CoreLib.DNIList)
  ['{A3CB8810-1DA4-35EF-86A2-77A80371893D}']
  { getters & setters } 

    function get_AllowNew: Boolean;
    function get_AllowEdit: Boolean;
    function get_AllowRemove: Boolean;
    function get_SupportsChangeNotification: Boolean;
    function get_SupportsSearching: Boolean;
    function get_SupportsSorting: Boolean;
    function get_IsSorted: Boolean;
    function get_SortProperty: DNPropertyDescriptor;
    function get_SortDirection: DNListSortDirection;

  { events } 

    procedure add_ListChanged(value: DNListChangedEventHandler);
    procedure remove_ListChanged(value: DNListChangedEventHandler);

  { methods } 

    function AddNew: DDNC.System.Private.CoreLib.DNObject;
    procedure AddIndex(&property: DNPropertyDescriptor);
    procedure ApplySort(&property: DNPropertyDescriptor; direction: DNListSortDirection);
    function Find(&property: DNPropertyDescriptor; key: DDNC.System.Private.CoreLib.DNObject): Int32;
    procedure RemoveIndex(&property: DNPropertyDescriptor);
    procedure RemoveSort;

  { propertys } 

    property AllowNew: Boolean read get_AllowNew;
    property AllowEdit: Boolean read get_AllowEdit;
    property AllowRemove: Boolean read get_AllowRemove;
    property SupportsChangeNotification: Boolean read get_SupportsChangeNotification;
    property SupportsSearching: Boolean read get_SupportsSearching;
    property SupportsSorting: Boolean read get_SupportsSorting;
    property IsSorted: Boolean read get_IsSorted;
    property SortProperty: DNPropertyDescriptor read get_SortProperty;
    property SortDirection: DNListSortDirection read get_SortDirection;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.IBindingListView')]
  DNIBindingListView = interface(DNIBindingList)
  ['{75B36905-3B29-3A26-B554-C4FB93DC0B18}']
  { getters & setters } 

    function get_Filter: string;
    procedure set_Filter(value: string);
    function get_SortDescriptions: DNListSortDescriptionCollection;
    function get_SupportsAdvancedSorting: Boolean;
    function get_SupportsFiltering: Boolean;

  { methods } 

    procedure ApplySort(sorts: DNListSortDescriptionCollection);
    procedure RemoveFilter;

  { propertys } 

    property Filter: string read get_Filter write set_Filter;
    property SortDescriptions: DNListSortDescriptionCollection read get_SortDescriptions;
    property SupportsAdvancedSorting: Boolean read get_SupportsAdvancedSorting;
    property SupportsFiltering: Boolean read get_SupportsFiltering;
  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IComponentChangeService')]
  DNIComponentChangeService = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{2FEF0210-9EBD-32C0-9BFD-24841AC0FCF7}']
  { events } 

    procedure add_ComponentAdded(value: DNComponentEventHandler);
    procedure remove_ComponentAdded(value: DNComponentEventHandler);
    procedure add_ComponentAdding(value: DNComponentEventHandler);
    procedure remove_ComponentAdding(value: DNComponentEventHandler);
    procedure add_ComponentChanged(value: DNComponentChangedEventHandler);
    procedure remove_ComponentChanged(value: DNComponentChangedEventHandler);
    procedure add_ComponentChanging(value: DNComponentChangingEventHandler);
    procedure remove_ComponentChanging(value: DNComponentChangingEventHandler);
    procedure add_ComponentRemoved(value: DNComponentEventHandler);
    procedure remove_ComponentRemoved(value: DNComponentEventHandler);
    procedure add_ComponentRemoving(value: DNComponentEventHandler);
    procedure remove_ComponentRemoving(value: DNComponentEventHandler);
    procedure add_ComponentRename(value: DNComponentRenameEventHandler);
    procedure remove_ComponentRename(value: DNComponentRenameEventHandler);

  { methods } 

    procedure OnComponentChanged(component: DDNC.System.Private.CoreLib.DNObject; member: DNMemberDescriptor; oldValue: DDNC.System.Private.CoreLib.DNObject; newValue: DDNC.System.Private.CoreLib.DNObject);
    procedure OnComponentChanging(component: DDNC.System.Private.CoreLib.DNObject; member: DNMemberDescriptor);

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IComponentDiscoveryService')]
  DNIComponentDiscoveryService = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{E50C8D58-3C49-301C-A498-C1B81C69A0F0}']
  { methods } 

    function GetComponentTypes(designerHost: DNIDesignerHost; baseType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNICollection;

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IComponentInitializer')]
  DNIComponentInitializer = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{B21B7991-FDC0-3CF3-AD7E-F1A28F25FF7C}']
  { methods } 

    procedure InitializeExistingComponent(defaultValues: DDNC.System.Private.CoreLib.DNIDictionary);
    procedure InitializeNewComponent(defaultValues: DDNC.System.Private.CoreLib.DNIDictionary);

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IDesignerEventService')]
  DNIDesignerEventService = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{EF902D46-ACE1-3668-ADFF-B323562E22F9}']
  { getters & setters } 

    function get_ActiveDesigner: DNIDesignerHost;
    function get_Designers: DNDesignerCollection;

  { events } 

    procedure add_ActiveDesignerChanged(value: DNActiveDesignerEventHandler);
    procedure remove_ActiveDesignerChanged(value: DNActiveDesignerEventHandler);
    procedure add_DesignerCreated(value: DNDesignerEventHandler);
    procedure remove_DesignerCreated(value: DNDesignerEventHandler);
    procedure add_DesignerDisposed(value: DNDesignerEventHandler);
    procedure remove_DesignerDisposed(value: DNDesignerEventHandler);
    procedure add_SelectionChanged(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_SelectionChanged(value: DDNC.System.Private.CoreLib.DNEventHandler);

  { propertys } 

    property ActiveDesigner: DNIDesignerHost read get_ActiveDesigner;
    property Designers: DNDesignerCollection read get_Designers;
  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IDesignerFilter')]
  DNIDesignerFilter = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{52BD540E-625F-3D7B-85BF-1E31491614B5}']
  { methods } 

    procedure PostFilterAttributes(attributes: DDNC.System.Private.CoreLib.DNIDictionary);
    procedure PostFilterEvents(events: DDNC.System.Private.CoreLib.DNIDictionary);
    procedure PostFilterProperties(properties: DDNC.System.Private.CoreLib.DNIDictionary);
    procedure PreFilterAttributes(attributes: DDNC.System.Private.CoreLib.DNIDictionary);
    procedure PreFilterEvents(events: DDNC.System.Private.CoreLib.DNIDictionary);
    procedure PreFilterProperties(properties: DDNC.System.Private.CoreLib.DNIDictionary);

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IDesignerHostTransactionState')]
  DNIDesignerHostTransactionState = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{6259D1EB-8A8C-3480-9ADC-F744F09BF201}']
  { getters & setters } 

    function get_IsClosingTransaction: Boolean;

  { propertys } 

    property IsClosingTransaction: Boolean read get_IsClosingTransaction;
  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IDesignerOptionService')]
  DNIDesignerOptionService = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{053A8DE0-5A5E-362F-8F1A-0FBFD70F8B36}']
  { methods } 

    function GetOptionValue(pageName: string; valueName: string): DDNC.System.Private.CoreLib.DNObject;
    procedure SetOptionValue(pageName: string; valueName: string; value: DDNC.System.Private.CoreLib.DNObject);

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IDictionaryService')]
  DNIDictionaryService = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{122139D6-7904-3E22-BFBF-09D0DDF52C50}']
  { methods } 

    function GetKey(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject;
    function GetValue(key: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject;
    procedure SetValue(key: DDNC.System.Private.CoreLib.DNObject; value: DDNC.System.Private.CoreLib.DNObject);

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IEventBindingService')]
  DNIEventBindingService = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{1A19D89E-F4FE-3E8E-B7EC-05D4E592F3F6}']
  { methods } 

    function CreateUniqueMethodName(component: DDNC.System.ComponentModel.Primitives.DNIComponent; e: DNEventDescriptor): string;
    function GetCompatibleMethods(e: DNEventDescriptor): DDNC.System.Private.CoreLib.DNICollection;
    function GetEvent(&property: DNPropertyDescriptor): DNEventDescriptor;
    function GetEventProperties(events: DNEventDescriptorCollection): DNPropertyDescriptorCollection;
    function GetEventProperty(e: DNEventDescriptor): DNPropertyDescriptor;
    function ShowCode: Boolean; overload;
    function ShowCode(lineNumber: Int32): Boolean; overload;
    function ShowCode(component: DDNC.System.ComponentModel.Primitives.DNIComponent; e: DNEventDescriptor): Boolean; overload;

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IExtenderListService')]
  DNIExtenderListService = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{1F1867DC-3A21-3650-844A-C70DC4111E6A}']
  { methods } 

    function GetExtenderProviders: TArray<DNIExtenderProvider>;

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IExtenderProviderService')]
  DNIExtenderProviderService = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{B9892E44-035C-3655-A1BE-15613779E7AD}']
  { methods } 

    procedure AddExtenderProvider(provider: DNIExtenderProvider);
    procedure RemoveExtenderProvider(provider: DNIExtenderProvider);

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IHelpService')]
  DNIHelpService = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{D981C498-C74A-3474-A29A-49494A07BD2F}']
  { methods } 

    procedure AddContextAttribute(name: string; value: string; keywordType: DNHelpKeywordType);
    procedure ClearContextAttributes;
    function CreateLocalContext(contextType: DNHelpContextType): DNIHelpService;
    procedure RemoveContextAttribute(name: string; value: string);
    procedure RemoveLocalContext(localContext: DNIHelpService);
    procedure ShowHelpFromKeyword(helpKeyword: string);
    procedure ShowHelpFromUrl(helpUrl: string);

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IInheritanceService')]
  DNIInheritanceService = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{6D559C27-4D35-3944-8C93-6644B4252B6D}']
  { methods } 

    procedure AddInheritedComponents(component: DDNC.System.ComponentModel.Primitives.DNIComponent; container: DDNC.System.ComponentModel.Primitives.DNIContainer);
    function GetInheritanceAttribute(component: DDNC.System.ComponentModel.Primitives.DNIComponent): DNInheritanceAttribute;

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IMenuCommandService')]
  DNIMenuCommandService = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{DF651C5D-783E-3789-901F-A962B7587E69}']
  { getters & setters } 

    function get_Verbs: DNDesignerVerbCollection;

  { methods } 

    procedure AddCommand(command: DNMenuCommand);
    procedure AddVerb(verb: DNDesignerVerb);
    function FindCommand(commandID: DNCommandID): DNMenuCommand;
    function GlobalInvoke(commandID: DNCommandID): Boolean;
    procedure RemoveCommand(command: DNMenuCommand);
    procedure RemoveVerb(verb: DNDesignerVerb);
    procedure ShowContextMenu(menuID: DNCommandID; x: Int32; y: Int32);

  { propertys } 

    property Verbs: DNDesignerVerbCollection read get_Verbs;
  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IReferenceService')]
  DNIReferenceService = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{001209AD-9892-3B07-AFD8-4E99CC5D7A99}']
  { methods } 

    function GetComponent(reference: DDNC.System.Private.CoreLib.DNObject): DDNC.System.ComponentModel.Primitives.DNIComponent;
    function GetReference(name: string): DDNC.System.Private.CoreLib.DNObject;
    function GetName(reference: DDNC.System.Private.CoreLib.DNObject): string;
    function GetReferences: TArray<DDNC.System.Private.CoreLib.DNObject>; overload;
    function GetReferences(baseType: DDNC.System.Private.CoreLib.DNType): TArray<DDNC.System.Private.CoreLib.DNObject>; overload;

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IResourceService')]
  DNIResourceService = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{1D4341D5-C4A4-3D81-94D2-17035A7E5B6E}']
  { methods } 

    function GetResourceReader(info: DDNC.System.Private.CoreLib.DNCultureInfo): DDNC.System.Private.CoreLib.DNIResourceReader;
    function GetResourceWriter(info: DDNC.System.Private.CoreLib.DNCultureInfo): DDNC.System.Resources.Writer.DNIResourceWriter;

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.ISelectionService')]
  DNISelectionService = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{297A65BE-5080-3F7F-AD19-B0D05D6F2327}']
  { getters & setters } 

    function get_PrimarySelection: DDNC.System.Private.CoreLib.DNObject;
    function get_SelectionCount: Int32;

  { events } 

    procedure add_SelectionChanged(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_SelectionChanged(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure add_SelectionChanging(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_SelectionChanging(value: DDNC.System.Private.CoreLib.DNEventHandler);

  { methods } 

    function GetComponentSelected(component: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetSelectedComponents: DDNC.System.Private.CoreLib.DNICollection;
    procedure SetSelectedComponents(components: DDNC.System.Private.CoreLib.DNICollection); overload;
    procedure SetSelectedComponents(components: DDNC.System.Private.CoreLib.DNICollection; selectionType: DNSelectionTypes); overload;

  { propertys } 

    property PrimarySelection: DDNC.System.Private.CoreLib.DNObject read get_PrimarySelection;
    property SelectionCount: Int32 read get_SelectionCount;
  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.ITypeDescriptorFilterService')]
  DNITypeDescriptorFilterService = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{9ACEF790-218B-33F3-AA78-9AA9C166BDCC}']
  { methods } 

    function FilterAttributes(component: DDNC.System.ComponentModel.Primitives.DNIComponent; attributes: DDNC.System.Private.CoreLib.DNIDictionary): Boolean;
    function FilterEvents(component: DDNC.System.ComponentModel.Primitives.DNIComponent; events: DDNC.System.Private.CoreLib.DNIDictionary): Boolean;
    function FilterProperties(component: DDNC.System.ComponentModel.Primitives.DNIComponent; properties: DDNC.System.Private.CoreLib.DNIDictionary): Boolean;

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.ITypeDiscoveryService')]
  DNITypeDiscoveryService = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{1EE0C222-9738-372E-A5C3-6AECD748C828}']
  { methods } 

    function GetTypes(baseType: DDNC.System.Private.CoreLib.DNType; excludeGlobalTypes: Boolean): DDNC.System.Private.CoreLib.DNICollection;

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.ITypeResolutionService')]
  DNITypeResolutionService = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{73DFCF4C-368F-3F73-9308-1EE21A7D4A2F}']
  { methods } 

    function GetAssembly(name: DDNC.System.Private.CoreLib.DNAssemblyName): DDNC.System.Private.CoreLib.DNAssembly; overload;
    function GetAssembly(name: DDNC.System.Private.CoreLib.DNAssemblyName; throwOnError: Boolean): DDNC.System.Private.CoreLib.DNAssembly; overload;
    function GetType(name: string): DDNC.System.Private.CoreLib.DNType; overload;
    function GetType(name: string; throwOnError: Boolean): DDNC.System.Private.CoreLib.DNType; overload;
    function GetType(name: string; throwOnError: Boolean; ignoreCase: Boolean): DDNC.System.Private.CoreLib.DNType; overload;
    procedure ReferenceAssembly(name: DDNC.System.Private.CoreLib.DNAssemblyName);
    function GetPathOfAssembly(name: DDNC.System.Private.CoreLib.DNAssemblyName): string;

  end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  [DNTypeName('System.ComponentModel.Design.Serialization.IDesignerLoaderService')]
  DNIDesignerLoaderService = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{60D8C960-D259-37AD-8B1F-E0B137BE02EA}']
  { methods } 

    procedure AddLoadDependency;
    procedure DependentLoadComplete(successful: Boolean; errorCollection: DDNC.System.Private.CoreLib.DNICollection);
    function Reload: Boolean;

  end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  [DNTypeName('System.ComponentModel.Design.Serialization.IDesignerSerializationProvider')]
  DNIDesignerSerializationProvider = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{C8888EBB-A061-3406-BBF5-489DFE1E5CC8}']
  { methods } 

    function GetSerializer(manager: DNIDesignerSerializationManager; currentSerializer: DDNC.System.Private.CoreLib.DNObject; objectType: DDNC.System.Private.CoreLib.DNType; serializerType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;

  end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  [DNTypeName('System.ComponentModel.Design.Serialization.IDesignerSerializationService')]
  DNIDesignerSerializationService = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{0423332B-8BBA-3A5B-B6E8-BD50156F6A5C}']
  { methods } 

    function Deserialize(serializationData: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNICollection;
    function Serialize(objects: DDNC.System.Private.CoreLib.DNICollection): DDNC.System.Private.CoreLib.DNObject;

  end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  [DNTypeName('System.ComponentModel.Design.Serialization.INameCreationService')]
  DNINameCreationService = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{67936D0C-D946-3C81-8CC8-38042D763BCC}']
  { methods } 

    function CreateName(container: DDNC.System.ComponentModel.Primitives.DNIContainer; dataType: DDNC.System.Private.CoreLib.DNType): string;
    function IsValidName(name: string): Boolean;
    procedure ValidateName(name: string);

  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.ICancelAddNew')]
  DNICancelAddNew = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{61147C96-48CF-3FDB-8365-39E23E89FCE0}']
  { methods } 

    procedure CancelNew(itemIndex: Int32);
    procedure EndNew(itemIndex: Int32);

  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.IComNativeDescriptorHandler')]
  DNIComNativeDescriptorHandler = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{BF1E7984-3F4D-388B-8837-2B6D73D9D66A}']
  { methods } 

    function GetAttributes(component: DDNC.System.Private.CoreLib.DNObject): DNAttributeCollection;
    function GetClassName(component: DDNC.System.Private.CoreLib.DNObject): string;
    function GetConverter(component: DDNC.System.Private.CoreLib.DNObject): DNTypeConverter;
    function GetDefaultEvent(component: DDNC.System.Private.CoreLib.DNObject): DNEventDescriptor;
    function GetDefaultProperty(component: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptor;
    function GetEditor(component: DDNC.System.Private.CoreLib.DNObject; baseEditorType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    function GetName(component: DDNC.System.Private.CoreLib.DNObject): string;
    function GetEvents(component: DDNC.System.Private.CoreLib.DNObject): DNEventDescriptorCollection; overload;
    function GetEvents(component: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNEventDescriptorCollection; overload;
    function GetProperties(component: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection;
    function GetPropertyValue(component: DDNC.System.Private.CoreLib.DNObject; propertyName: string; out success: Boolean): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetPropertyValue(component: DDNC.System.Private.CoreLib.DNObject; &dispid: Int32; out success: Boolean): DDNC.System.Private.CoreLib.DNObject; overload;

  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.ICustomTypeDescriptor')]
  DNICustomTypeDescriptor = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{463BF9AA-D192-387E-80C6-6D659869DF97}']
  { methods } 

    function GetAttributes: DNAttributeCollection;
    function GetClassName: string;
    function GetComponentName: string;
    function GetConverter: DNTypeConverter;
    function GetDefaultEvent: DNEventDescriptor;
    function GetDefaultProperty: DNPropertyDescriptor;
    function GetEditor(editorBaseType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    function GetEvents: DNEventDescriptorCollection; overload;
    function GetEvents(attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNEventDescriptorCollection; overload;
    function GetProperties: DNPropertyDescriptorCollection; overload;
    function GetProperties(attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertyOwner(pd: DNPropertyDescriptor): DDNC.System.Private.CoreLib.DNObject;

  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.IDataErrorInfo')]
  DNIDataErrorInfo = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{627FDADB-DE23-36F7-B8CE-A78E0F9DE86C}']
  { getters & setters } 

    function get_Item(columnName: string): string;
    function get_Error: string;

  { propertys } 

    property Item[columnName: string]: string read get_Item; default;
    property Error: string read get_Error;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.IExtenderProvider')]
  DNIExtenderProvider = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{080EB369-A85A-302F-8A2A-8A9584DB1582}']
  { methods } 

    function CanExtend(extendee: DDNC.System.Private.CoreLib.DNObject): Boolean;

  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.IIntellisenseBuilder')]
  DNIIntellisenseBuilder = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{880118AA-F3CA-3603-A7BE-85AC3F023137}']
  { getters & setters } 

    function get_Name: string;

  { methods } 

    function Show(language: string; value: string; out newValue: string): Boolean;

  { propertys } 

    property Name: string read get_Name;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.IListSource')]
  DNIListSource = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{1DF397F0-B723-36DD-A0D6-5DE75B427BE6}']
  { getters & setters } 

    function get_ContainsListCollection: Boolean;

  { methods } 

    function GetList: DDNC.System.Private.CoreLib.DNIList;

  { propertys } 

    property ContainsListCollection: Boolean read get_ContainsListCollection;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.IRaiseItemChangedEvents')]
  DNIRaiseItemChangedEvents = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{F693B786-40E6-314B-B04E-8C8F89A21AAE}']
  { getters & setters } 

    function get_RaisesItemChangedEvents: Boolean;

  { propertys } 

    property RaisesItemChangedEvents: Boolean read get_RaisesItemChangedEvents;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.ISupportInitializeNotification')]
  DNISupportInitializeNotification = interface(DDNC.System.ComponentModel.Primitives.DNISupportInitialize)
  ['{3836DFC9-C088-33FE-B2D0-F2F0FB74143C}']
  { getters & setters } 

    function get_IsInitialized: Boolean;

  { events } 

    procedure add_Initialized(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_Initialized(value: DDNC.System.Private.CoreLib.DNEventHandler);

  { propertys } 

    property IsInitialized: Boolean read get_IsInitialized;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.ITypedList')]
  DNITypedList = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{BFC9720D-0C61-3BFF-B4EF-20A714D15544}']
  { methods } 

    function GetListName(listAccessors: TArray<DNPropertyDescriptor>): string;
    function GetItemProperties(listAccessors: TArray<DNPropertyDescriptor>): DNPropertyDescriptorCollection;

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IDesigner')]
  DNIDesigner = interface(DDNC.System.Private.CoreLib.DNIDisposable)
  ['{6EEF3D0D-305A-3DF4-9830-8C2B40E1C4BF}']
  { getters & setters } 

    function get_Component: DDNC.System.ComponentModel.Primitives.DNIComponent;
    function get_Verbs: DNDesignerVerbCollection;

  { methods } 

    procedure DoDefaultAction;
    procedure Initialize(component: DDNC.System.ComponentModel.Primitives.DNIComponent);

  { propertys } 

    property Component: DDNC.System.ComponentModel.Primitives.DNIComponent read get_Component;
    property Verbs: DNDesignerVerbCollection read get_Verbs;
  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IRootDesigner')]
  DNIRootDesigner = interface(DNIDesigner)
  ['{2CC5E562-6C14-34A6-9D0B-E6FF949AE8FB}']
  { getters & setters } 

    function get_SupportedTechnologies: TArray<DNViewTechnology>;

  { methods } 

    function GetView(technology: DNViewTechnology): DDNC.System.Private.CoreLib.DNObject;

  { propertys } 

    property SupportedTechnologies: TArray<DNViewTechnology> read get_SupportedTechnologies;
  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.ITreeDesigner')]
  DNITreeDesigner = interface(DNIDesigner)
  ['{99122D47-BCB2-3ACB-9022-471C213EB5D7}']
  { getters & setters } 

    function get_Children: DDNC.System.Private.CoreLib.DNICollection;
    function get_Parent: DNIDesigner;

  { propertys } 

    property Children: DDNC.System.Private.CoreLib.DNICollection read get_Children;
    property Parent: DNIDesigner read get_Parent;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.INestedContainer')]
  DNINestedContainer = interface(DDNC.System.ComponentModel.Primitives.DNIContainer)
  ['{2948093A-1AD8-3297-BBF2-E74ABA7D09A4}']
  { getters & setters } 

    function get_Owner: DDNC.System.ComponentModel.Primitives.DNIComponent;

  { propertys } 

    property Owner: DDNC.System.ComponentModel.Primitives.DNIComponent read get_Owner;
  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IServiceContainer')]
  DNIServiceContainer = interface(DDNC.System.ComponentModel.DNIServiceProvider)
  ['{6BA96B42-7FDD-3223-BF52-7FE677B92815}']
  { methods } 

    procedure AddService(serviceType: DDNC.System.Private.CoreLib.DNType; serviceInstance: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure AddService(serviceType: DDNC.System.Private.CoreLib.DNType; serviceInstance: DDNC.System.Private.CoreLib.DNObject; promote: Boolean); overload;
    procedure AddService(serviceType: DDNC.System.Private.CoreLib.DNType; callback: DNServiceCreatorCallback); overload;
    procedure AddService(serviceType: DDNC.System.Private.CoreLib.DNType; callback: DNServiceCreatorCallback; promote: Boolean); overload;
    procedure RemoveService(serviceType: DDNC.System.Private.CoreLib.DNType); overload;
    procedure RemoveService(serviceType: DDNC.System.Private.CoreLib.DNType; promote: Boolean); overload;

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IDesignerHost')]
  DNIDesignerHost = interface(DNIServiceContainer)
  ['{EEC98CD8-EF5B-3B60-82C9-86F616F6BB20}']
  { getters & setters } 

    function get_Loading: Boolean;
    function get_InTransaction: Boolean;
    function get_Container: DDNC.System.ComponentModel.Primitives.DNIContainer;
    function get_RootComponent: DDNC.System.ComponentModel.Primitives.DNIComponent;
    function get_RootComponentClassName: string;
    function get_TransactionDescription: string;

  { events } 

    procedure add_Activated(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_Activated(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure add_Deactivated(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_Deactivated(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure add_LoadComplete(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_LoadComplete(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure add_TransactionClosed(value: DNDesignerTransactionCloseEventHandler);
    procedure remove_TransactionClosed(value: DNDesignerTransactionCloseEventHandler);
    procedure add_TransactionClosing(value: DNDesignerTransactionCloseEventHandler);
    procedure remove_TransactionClosing(value: DNDesignerTransactionCloseEventHandler);
    procedure add_TransactionOpened(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_TransactionOpened(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure add_TransactionOpening(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_TransactionOpening(value: DDNC.System.Private.CoreLib.DNEventHandler);

  { methods } 

    procedure Activate;
    function CreateComponent(componentClass: DDNC.System.Private.CoreLib.DNType): DDNC.System.ComponentModel.Primitives.DNIComponent; overload;
    function CreateComponent(componentClass: DDNC.System.Private.CoreLib.DNType; name: string): DDNC.System.ComponentModel.Primitives.DNIComponent; overload;
    function CreateTransaction: DNDesignerTransaction; overload;
    function CreateTransaction(description: string): DNDesignerTransaction; overload;
    procedure DestroyComponent(component: DDNC.System.ComponentModel.Primitives.DNIComponent);
    function GetDesigner(component: DDNC.System.ComponentModel.Primitives.DNIComponent): DNIDesigner;
    function GetType(typeName: string): DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Loading: Boolean read get_Loading;
    property InTransaction: Boolean read get_InTransaction;
    property Container: DDNC.System.ComponentModel.Primitives.DNIContainer read get_Container;
    property RootComponent: DDNC.System.ComponentModel.Primitives.DNIComponent read get_RootComponent;
    property RootComponentClassName: string read get_RootComponentClassName;
    property TransactionDescription: string read get_TransactionDescription;
  end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  [DNTypeName('System.ComponentModel.Design.Serialization.IDesignerLoaderHost')]
  DNIDesignerLoaderHost = interface(DNIDesignerHost)
  ['{74425452-E35A-3727-9E5A-19AAF3803003}']
  { methods } 

    procedure EndLoad(baseClassName: string; successful: Boolean; errorCollection: DDNC.System.Private.CoreLib.DNICollection);
    procedure Reload;

  end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  [DNTypeName('System.ComponentModel.Design.Serialization.IDesignerLoaderHost2')]
  DNIDesignerLoaderHost2 = interface(DNIDesignerLoaderHost)
  ['{5221DCDD-D5F9-3482-85FF-187C6DC363D3}']
  { getters & setters } 

    function get_IgnoreErrorsDuringReload: Boolean;
    procedure set_IgnoreErrorsDuringReload(value: Boolean);
    function get_CanReloadWithErrors: Boolean;
    procedure set_CanReloadWithErrors(value: Boolean);

  { propertys } 

    property IgnoreErrorsDuringReload: Boolean read get_IgnoreErrorsDuringReload write set_IgnoreErrorsDuringReload;
    property CanReloadWithErrors: Boolean read get_CanReloadWithErrors write set_CanReloadWithErrors;
  end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  [DNTypeName('System.ComponentModel.Design.Serialization.IDesignerSerializationManager')]
  DNIDesignerSerializationManager = interface(DDNC.System.ComponentModel.DNIServiceProvider)
  ['{C1E3744E-A053-396F-B968-7F172D804C38}']
  { getters & setters } 

    function get_Context: DNContextStack;
    function get_Properties: DNPropertyDescriptorCollection;

  { events } 

    procedure add_ResolveName(value: DNResolveNameEventHandler);
    procedure remove_ResolveName(value: DNResolveNameEventHandler);
    procedure add_SerializationComplete(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_SerializationComplete(value: DDNC.System.Private.CoreLib.DNEventHandler);

  { methods } 

    procedure AddSerializationProvider(provider: DNIDesignerSerializationProvider);
    function CreateInstance(&type: DDNC.System.Private.CoreLib.DNType; arguments: DDNC.System.Private.CoreLib.DNICollection; name: string; addToContainer: Boolean): DDNC.System.Private.CoreLib.DNObject;
    function GetInstance(name: string): DDNC.System.Private.CoreLib.DNObject;
    function GetName(value: DDNC.System.Private.CoreLib.DNObject): string;
    function GetSerializer(objectType: DDNC.System.Private.CoreLib.DNType; serializerType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    function GetType(typeName: string): DDNC.System.Private.CoreLib.DNType;
    procedure RemoveSerializationProvider(provider: DNIDesignerSerializationProvider);
    procedure ReportError(errorInformation: DDNC.System.Private.CoreLib.DNObject);
    procedure SetName(instance: DDNC.System.Private.CoreLib.DNObject; name: string);

  { propertys } 

    property Context: DNContextStack read get_Context;
    property Properties: DNPropertyDescriptorCollection read get_Properties;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.INestedSite')]
  DNINestedSite = interface(DDNC.System.ComponentModel.Primitives.DNISite)
  ['{A1D1196F-ABFB-3350-BBAE-AA24E4C2E050}']
  { getters & setters } 

    function get_FullName: string;

  { propertys } 

    property FullName: string read get_FullName;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.ITypeDescriptorContext')]
  DNITypeDescriptorContext = interface(DDNC.System.ComponentModel.DNIServiceProvider)
  ['{5CBAE170-8759-3B8A-B919-E12FB86AD1F3}']
  { getters & setters } 

    function get_Container: DDNC.System.ComponentModel.Primitives.DNIContainer;
    function get_Instance: DDNC.System.Private.CoreLib.DNObject;
    function get_PropertyDescriptor: DNPropertyDescriptor;

  { methods } 

    function OnComponentChanging: Boolean;
    procedure OnComponentChanged;

  { propertys } 

    property Container: DDNC.System.ComponentModel.Primitives.DNIContainer read get_Container;
    property Instance: DDNC.System.Private.CoreLib.DNObject read get_Instance;
    property PropertyDescriptor: DNPropertyDescriptor read get_PropertyDescriptor;
  end;

  //-------------namespace: System.ComponentModel----------------
  DNAmbientValueAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{A45EF6F6-B8A4-51AF-9EFB-394C8DA240EF}']
  { constructors } 

    {class} function init(&type: DDNC.System.Private.CoreLib.DNType; value: string): DNAmbientValueAttribute; overload;
    {class} function init(value: Char): DNAmbientValueAttribute; overload;
    {class} function init(value: Byte): DNAmbientValueAttribute; overload;
    {class} function init(value: Int16): DNAmbientValueAttribute; overload;
    {class} function init(value: Int32): DNAmbientValueAttribute; overload;
    {class} function init(value: Int64): DNAmbientValueAttribute; overload;
    {class} function init(value: Single): DNAmbientValueAttribute; overload;
    {class} function init(value: Double): DNAmbientValueAttribute; overload;
    {class} function init(value: Boolean): DNAmbientValueAttribute; overload;
    {class} function init(value: string): DNAmbientValueAttribute; overload;
    {class} function init(value: DDNC.System.Private.CoreLib.DNObject): DNAmbientValueAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.AmbientValueAttribute')]
  DNAmbientValueAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{770DF8AF-9C10-331F-BC09-FD4596A0FF5E}']
  { getters & setters } 

    function get_Value: DDNC.System.Private.CoreLib.DNObject;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Value: DDNC.System.Private.CoreLib.DNObject read get_Value;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNAmbientValueAttribute = class(TDNGenericImport<DNAmbientValueAttributeClass, DNAmbientValueAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNAttributeProviderAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{23CD8CEE-0DC6-5CCB-A5B7-C956D36A386F}']
  { constructors } 

    {class} function init(typeName: string): DNAttributeProviderAttribute; overload;
    {class} function init(typeName: string; propertyName: string): DNAttributeProviderAttribute; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType): DNAttributeProviderAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.AttributeProviderAttribute')]
  DNAttributeProviderAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{B9D9E8F1-3FA8-3464-BA92-B0BF83B71005}']
  { getters & setters } 

    function get_TypeName: string;
    function get_PropertyName: string;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property TypeName: string read get_TypeName;
    property PropertyName: string read get_PropertyName;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNAttributeProviderAttribute = class(TDNGenericImport<DNAttributeProviderAttributeClass, DNAttributeProviderAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNBindableAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{017AB842-1D19-55BE-8E2E-3FD3BC33DAD9}']
  { constructors } 

    {class} function init(bindable: Boolean): DNBindableAttribute; overload;
    {class} function init(bindable: Boolean; direction: DNBindingDirection): DNBindableAttribute; overload;
    {class} function init(flags: DNBindableSupport): DNBindableAttribute; overload;
    {class} function init(flags: DNBindableSupport; direction: DNBindingDirection): DNBindableAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Yes: DNBindableAttribute;
   function __fakeFieldGet_No: DNBindableAttribute;
   function __fakeFieldGet_Default: DNBindableAttribute;

  { static fields } 

    {class} property Yes: DNBindableAttribute read __fakeFieldGet_Yes;
    {class} property No: DNBindableAttribute read __fakeFieldGet_No;
    {class} property &Default: DNBindableAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.BindableAttribute')]
  DNBindableAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{6262D17E-7D8A-3CEE-BC49-F8494EE879B8}']
  { getters & setters } 

    function get_Bindable: Boolean;
    function get_Direction: DNBindingDirection;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Bindable: Boolean read get_Bindable;
    property Direction: DNBindingDirection read get_Direction;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNBindableAttribute = class(TDNGenericImport<DNBindableAttributeClass, DNBindableAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNComplexBindingPropertiesAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{05A6843C-4C74-5F4E-8C2B-F3015461E851}']
  { constructors } 

    {class} function init: DNComplexBindingPropertiesAttribute; overload;
    {class} function init(dataSource: string): DNComplexBindingPropertiesAttribute; overload;
    {class} function init(dataSource: string; dataMember: string): DNComplexBindingPropertiesAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNComplexBindingPropertiesAttribute;

  { static fields } 

    {class} property &Default: DNComplexBindingPropertiesAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.ComplexBindingPropertiesAttribute')]
  DNComplexBindingPropertiesAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{814E53B2-04E1-3895-883F-6FE37E6B53D9}']
  { getters & setters } 

    function get_DataSource: string;
    function get_DataMember: string;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property DataSource: string read get_DataSource;
    property DataMember: string read get_DataMember;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNComplexBindingPropertiesAttribute = class(TDNGenericImport<DNComplexBindingPropertiesAttributeClass, DNComplexBindingPropertiesAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDataObjectAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{A289E376-600E-5307-9983-6DD06563383D}']
  { constructors } 

    {class} function init: DNDataObjectAttribute; overload;
    {class} function init(isDataObject: Boolean): DNDataObjectAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_DataObject: DNDataObjectAttribute;
   function __fakeFieldGet_NonDataObject: DNDataObjectAttribute;
   function __fakeFieldGet_Default: DNDataObjectAttribute;

  { static fields } 

    {class} property DataObject: DNDataObjectAttribute read __fakeFieldGet_DataObject;
    {class} property NonDataObject: DNDataObjectAttribute read __fakeFieldGet_NonDataObject;
    {class} property &Default: DNDataObjectAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.DataObjectAttribute')]
  DNDataObjectAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{F0343635-5232-352C-AF0C-87FE258E7145}']
  { getters & setters } 

    function get_IsDataObject: Boolean;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property IsDataObject: Boolean read get_IsDataObject;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDataObjectAttribute = class(TDNGenericImport<DNDataObjectAttributeClass, DNDataObjectAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDataObjectFieldAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{17E8FFDA-F212-595B-99E9-1D468CD75B00}']
  { constructors } 

    {class} function init(primaryKey: Boolean): DNDataObjectFieldAttribute; overload;
    {class} function init(primaryKey: Boolean; isIdentity: Boolean): DNDataObjectFieldAttribute; overload;
    {class} function init(primaryKey: Boolean; isIdentity: Boolean; isNullable: Boolean): DNDataObjectFieldAttribute; overload;
    {class} function init(primaryKey: Boolean; isIdentity: Boolean; isNullable: Boolean; length: Int32): DNDataObjectFieldAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataObjectFieldAttribute')]
  DNDataObjectFieldAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{4B40432D-A3DD-37FF-AD5B-F2E8B835E2CD}']
  { getters & setters } 

    function get_IsIdentity: Boolean;
    function get_IsNullable: Boolean;
    function get_Length: Int32;
    function get_PrimaryKey: Boolean;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property IsIdentity: Boolean read get_IsIdentity;
    property IsNullable: Boolean read get_IsNullable;
    property Length: Int32 read get_Length;
    property PrimaryKey: Boolean read get_PrimaryKey;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDataObjectFieldAttribute = class(TDNGenericImport<DNDataObjectFieldAttributeClass, DNDataObjectFieldAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDataObjectMethodAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{4256A501-399C-5647-83AA-F92D0059CD28}']
  { constructors } 

    {class} function init(methodType: DNDataObjectMethodType): DNDataObjectMethodAttribute; overload;
    {class} function init(methodType: DNDataObjectMethodType; isDefault: Boolean): DNDataObjectMethodAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataObjectMethodAttribute')]
  DNDataObjectMethodAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{45C54444-28DF-34E3-B4A2-1F35EADF0EAC}']
  { getters & setters } 

    function get_IsDefault: Boolean;
    function get_MethodType: DNDataObjectMethodType;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property IsDefault: Boolean read get_IsDefault;
    property MethodType: DNDataObjectMethodType read get_MethodType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDataObjectMethodAttribute = class(TDNGenericImport<DNDataObjectMethodAttributeClass, DNDataObjectMethodAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDefaultBindingPropertyAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{1E2A0978-41CF-532A-974D-0AB2E80C5D6B}']
  { constructors } 

    {class} function init: DNDefaultBindingPropertyAttribute; overload;
    {class} function init(name: string): DNDefaultBindingPropertyAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNDefaultBindingPropertyAttribute;

  { static fields } 

    {class} property &Default: DNDefaultBindingPropertyAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.DefaultBindingPropertyAttribute')]
  DNDefaultBindingPropertyAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{A831CD28-F597-3315-A394-0468EA3F81A4}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDefaultBindingPropertyAttribute = class(TDNGenericImport<DNDefaultBindingPropertyAttributeClass, DNDefaultBindingPropertyAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDefaultEventAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{F9AC69D3-B780-57FA-8036-66255A0592E8}']
  { constructors } 

    {class} function init(name: string): DNDefaultEventAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNDefaultEventAttribute;

  { static fields } 

    {class} property &Default: DNDefaultEventAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.DefaultEventAttribute')]
  DNDefaultEventAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{D958413C-3D7E-3D8D-A482-1823636F2D53}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDefaultEventAttribute = class(TDNGenericImport<DNDefaultEventAttributeClass, DNDefaultEventAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDefaultPropertyAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{CC2B6D0F-6518-51B5-8B0A-9601BDA84479}']
  { constructors } 

    {class} function init(name: string): DNDefaultPropertyAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNDefaultPropertyAttribute;

  { static fields } 

    {class} property &Default: DNDefaultPropertyAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.DefaultPropertyAttribute')]
  DNDefaultPropertyAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{939B92C9-0229-3997-A00A-97DC70A68FB0}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDefaultPropertyAttribute = class(TDNGenericImport<DNDefaultPropertyAttributeClass, DNDefaultPropertyAttribute>) end;

  //-------------namespace: System.Timers----------------
  DNTimersDescriptionAttributeClass = interface(DNObjectClass)
  ['{51112A0E-7A39-5F7F-ADC3-F48F055D67DD}']
  { constructors } 

    {class} function init(description: string): DNTimersDescriptionAttribute;

  end;

  [DNTypeName('System.Timers.TimersDescriptionAttribute')]
  DNTimersDescriptionAttribute = interface(DNObject)
  ['{BE0FB949-9356-34F8-913A-875DA180A97B}']
  { getters & setters } 

    function get_Description: string;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Description: string read get_Description;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNTimersDescriptionAttribute = class(TDNGenericImport<DNTimersDescriptionAttributeClass, DNTimersDescriptionAttribute>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNHelpKeywordAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{D43683B7-4B07-57F2-AC31-4053977B24A7}']
  { constructors } 

    {class} function init: DNHelpKeywordAttribute; overload;
    {class} function init(keyword: string): DNHelpKeywordAttribute; overload;
    {class} function init(t: DDNC.System.Private.CoreLib.DNType): DNHelpKeywordAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNHelpKeywordAttribute;

  { static fields } 

    {class} property &Default: DNHelpKeywordAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.Design.HelpKeywordAttribute')]
  DNHelpKeywordAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{0E8CAF38-F94A-3F77-A480-4C56E94FEC06}']
  { getters & setters } 

    function get_HelpKeyword: string;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property HelpKeyword: string read get_HelpKeyword;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNHelpKeywordAttribute = class(TDNGenericImport<DNHelpKeywordAttributeClass, DNHelpKeywordAttribute>) end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  DNDefaultSerializationProviderAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{94F1031E-EE0E-55FB-88B5-4320DAD77929}']
  { constructors } 

    {class} function init(providerType: DDNC.System.Private.CoreLib.DNType): DNDefaultSerializationProviderAttribute; overload;
    {class} function init(providerTypeName: string): DNDefaultSerializationProviderAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute')]
  DNDefaultSerializationProviderAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{ED3B85C9-3E1C-3F7E-B46B-F3D0C4A17A74}']
  { getters & setters } 

    function get_ProviderTypeName: string;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property ProviderTypeName: string read get_ProviderTypeName;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDefaultSerializationProviderAttribute = class(TDNGenericImport<DNDefaultSerializationProviderAttributeClass, DNDefaultSerializationProviderAttribute>) end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  DNRootDesignerSerializerAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{C26E88EB-6453-5F40-AE46-87A159F8AC74}']
  { constructors } 

    {class} function init(serializerType: DDNC.System.Private.CoreLib.DNType; baseSerializerType: DDNC.System.Private.CoreLib.DNType; reloadable: Boolean): DNRootDesignerSerializerAttribute; overload;
    {class} function init(serializerTypeName: string; baseSerializerType: DDNC.System.Private.CoreLib.DNType; reloadable: Boolean): DNRootDesignerSerializerAttribute; overload;
    {class} function init(serializerTypeName: string; baseSerializerTypeName: string; reloadable: Boolean): DNRootDesignerSerializerAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute')]
  DNRootDesignerSerializerAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{9581C1C2-5E25-369B-823A-A5559EDF0996}']
  { getters & setters } 

    function get_Reloadable: Boolean;
    function get_SerializerTypeName: string;
    function get_SerializerBaseTypeName: string;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Reloadable: Boolean read get_Reloadable;
    property SerializerTypeName: string read get_SerializerTypeName;
    property SerializerBaseTypeName: string read get_SerializerBaseTypeName;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNRootDesignerSerializerAttribute = class(TDNGenericImport<DNRootDesignerSerializerAttributeClass, DNRootDesignerSerializerAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDesignTimeVisibleAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{A15257CD-0843-5AE2-85ED-03432C8D3903}']
  { constructors } 

    {class} function init(visible: Boolean): DNDesignTimeVisibleAttribute; overload;
    {class} function init: DNDesignTimeVisibleAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Yes: DNDesignTimeVisibleAttribute;
   function __fakeFieldGet_No: DNDesignTimeVisibleAttribute;
   function __fakeFieldGet_Default: DNDesignTimeVisibleAttribute;

  { static fields } 

    {class} property Yes: DNDesignTimeVisibleAttribute read __fakeFieldGet_Yes;
    {class} property No: DNDesignTimeVisibleAttribute read __fakeFieldGet_No;
    {class} property &Default: DNDesignTimeVisibleAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.DesignTimeVisibleAttribute')]
  DNDesignTimeVisibleAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{184D335F-BF5D-32C4-9461-AB30B2B09515}']
  { getters & setters } 

    function get_Visible: Boolean;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Visible: Boolean read get_Visible;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDesignTimeVisibleAttribute = class(TDNGenericImport<DNDesignTimeVisibleAttributeClass, DNDesignTimeVisibleAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNExtenderProvidedPropertyAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{2A1EA4BE-4630-5910-AE0A-30C1E2A0AF5E}']
  { constructors } 

    {class} function init: DNExtenderProvidedPropertyAttribute;

  end;

  [DNTypeName('System.ComponentModel.ExtenderProvidedPropertyAttribute')]
  DNExtenderProvidedPropertyAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{4DFA2660-8047-3C3E-83AD-AFD284509000}']
  { getters & setters } 

    function get_ExtenderProperty: DNPropertyDescriptor;
    function get_Provider: DNIExtenderProvider;
    function get_ReceiverType: DDNC.System.Private.CoreLib.DNType;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property ExtenderProperty: DNPropertyDescriptor read get_ExtenderProperty;
    property Provider: DNIExtenderProvider read get_Provider;
    property ReceiverType: DDNC.System.Private.CoreLib.DNType read get_ReceiverType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNExtenderProvidedPropertyAttribute = class(TDNGenericImport<DNExtenderProvidedPropertyAttributeClass, DNExtenderProvidedPropertyAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNInheritanceAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{ED3EBA74-B8EB-563C-90E7-FFAE4192177B}']
  { constructors } 

    {class} function init: DNInheritanceAttribute; overload;
    {class} function init(inheritanceLevel: DNInheritanceLevel): DNInheritanceAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Inherited: DNInheritanceAttribute;
   function __fakeFieldGet_InheritedReadOnly: DNInheritanceAttribute;
   function __fakeFieldGet_NotInherited: DNInheritanceAttribute;
   function __fakeFieldGet_Default: DNInheritanceAttribute;

  { static fields } 

    {class} property &Inherited: DNInheritanceAttribute read __fakeFieldGet_Inherited;
    {class} property InheritedReadOnly: DNInheritanceAttribute read __fakeFieldGet_InheritedReadOnly;
    {class} property NotInherited: DNInheritanceAttribute read __fakeFieldGet_NotInherited;
    {class} property &Default: DNInheritanceAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.InheritanceAttribute')]
  DNInheritanceAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{F7136B1F-838A-35F1-BFFF-B64248BD6CE8}']
  { getters & setters } 

    function get_InheritanceLevel: DNInheritanceLevel;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property InheritanceLevel: DNInheritanceLevel read get_InheritanceLevel;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNInheritanceAttribute = class(TDNGenericImport<DNInheritanceAttributeClass, DNInheritanceAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNInstallerTypeAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{9FE5ECA5-4142-5697-9399-E44055047529}']
  { constructors } 

    {class} function init(installerType: DDNC.System.Private.CoreLib.DNType): DNInstallerTypeAttribute; overload;
    {class} function init(typeName: string): DNInstallerTypeAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.InstallerTypeAttribute')]
  DNInstallerTypeAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{D45A6AAF-E0CC-3417-A756-E22DEF329870}']
  { getters & setters } 

    function get_InstallerType: DDNC.System.Private.CoreLib.DNType;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property InstallerType: DDNC.System.Private.CoreLib.DNType read get_InstallerType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNInstallerTypeAttribute = class(TDNGenericImport<DNInstallerTypeAttributeClass, DNInstallerTypeAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNLicenseProviderAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{FDAC8340-D523-5371-A373-A6074FFACA70}']
  { constructors } 

    {class} function init: DNLicenseProviderAttribute; overload;
    {class} function init(typeName: string): DNLicenseProviderAttribute; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType): DNLicenseProviderAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNLicenseProviderAttribute;

  { static fields } 

    {class} property &Default: DNLicenseProviderAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.LicenseProviderAttribute')]
  DNLicenseProviderAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{30581054-339C-3988-A674-FF9EA4B9330D}']
  { getters & setters } 

    function get_LicenseProvider: DDNC.System.Private.CoreLib.DNType;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property LicenseProvider: DDNC.System.Private.CoreLib.DNType read get_LicenseProvider;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNLicenseProviderAttribute = class(TDNGenericImport<DNLicenseProviderAttributeClass, DNLicenseProviderAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNListBindableAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{0EF91421-28DE-53CE-9AA4-B67E627441C3}']
  { constructors } 

    {class} function init(listBindable: Boolean): DNListBindableAttribute; overload;
    {class} function init(flags: DNBindableSupport): DNListBindableAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Yes: DNListBindableAttribute;
   function __fakeFieldGet_No: DNListBindableAttribute;
   function __fakeFieldGet_Default: DNListBindableAttribute;

  { static fields } 

    {class} property Yes: DNListBindableAttribute read __fakeFieldGet_Yes;
    {class} property No: DNListBindableAttribute read __fakeFieldGet_No;
    {class} property &Default: DNListBindableAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.ListBindableAttribute')]
  DNListBindableAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{660D512D-BD67-39E4-AB32-A2FB36A35DB5}']
  { getters & setters } 

    function get_ListBindable: Boolean;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property ListBindable: Boolean read get_ListBindable;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNListBindableAttribute = class(TDNGenericImport<DNListBindableAttributeClass, DNListBindableAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNLookupBindingPropertiesAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{09F2D510-772A-5E8D-AEFA-FA2EB9F834D5}']
  { constructors } 

    {class} function init: DNLookupBindingPropertiesAttribute; overload;
    {class} function init(dataSource: string; displayMember: string; valueMember: string; lookupMember: string): DNLookupBindingPropertiesAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNLookupBindingPropertiesAttribute;

  { static fields } 

    {class} property &Default: DNLookupBindingPropertiesAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.LookupBindingPropertiesAttribute')]
  DNLookupBindingPropertiesAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{9EC16C66-BB53-38F9-ABEE-196C31B1482F}']
  { getters & setters } 

    function get_DataSource: string;
    function get_DisplayMember: string;
    function get_ValueMember: string;
    function get_LookupMember: string;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property DataSource: string read get_DataSource;
    property DisplayMember: string read get_DisplayMember;
    property ValueMember: string read get_ValueMember;
    property LookupMember: string read get_LookupMember;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNLookupBindingPropertiesAttribute = class(TDNGenericImport<DNLookupBindingPropertiesAttributeClass, DNLookupBindingPropertiesAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNPasswordPropertyTextAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{D0FFB209-D3E1-5899-BAE7-048505C02F06}']
  { constructors } 

    {class} function init: DNPasswordPropertyTextAttribute; overload;
    {class} function init(password: Boolean): DNPasswordPropertyTextAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Yes: DNPasswordPropertyTextAttribute;
   function __fakeFieldGet_No: DNPasswordPropertyTextAttribute;
   function __fakeFieldGet_Default: DNPasswordPropertyTextAttribute;

  { static fields } 

    {class} property Yes: DNPasswordPropertyTextAttribute read __fakeFieldGet_Yes;
    {class} property No: DNPasswordPropertyTextAttribute read __fakeFieldGet_No;
    {class} property &Default: DNPasswordPropertyTextAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.PasswordPropertyTextAttribute')]
  DNPasswordPropertyTextAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{4C5B724E-1F89-30EB-BFE8-8D3BD72A6C91}']
  { getters & setters } 

    function get_Password: Boolean;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(o: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Password: Boolean read get_Password;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNPasswordPropertyTextAttribute = class(TDNGenericImport<DNPasswordPropertyTextAttributeClass, DNPasswordPropertyTextAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNPropertyTabAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{043662E1-BB36-5B36-A286-0FB62F0883E4}']
  { constructors } 

    {class} function init: DNPropertyTabAttribute; overload;
    {class} function init(tabClass: DDNC.System.Private.CoreLib.DNType): DNPropertyTabAttribute; overload;
    {class} function init(tabClassName: string): DNPropertyTabAttribute; overload;
    {class} function init(tabClass: DDNC.System.Private.CoreLib.DNType; tabScope: DNPropertyTabScope): DNPropertyTabAttribute; overload;
    {class} function init(tabClassName: string; tabScope: DNPropertyTabScope): DNPropertyTabAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.PropertyTabAttribute')]
  DNPropertyTabAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{FB15C335-0BE1-321A-945F-239AA4F835AD}']
  { getters & setters } 

    function get_TabClasses: TArray<DDNC.System.Private.CoreLib.DNType>;
    function get_TabScopes: TArray<DNPropertyTabScope>;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(other: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNPropertyTabAttribute): Boolean; overload;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property TabClasses: TArray<DDNC.System.Private.CoreLib.DNType> read get_TabClasses;
    property TabScopes: TArray<DNPropertyTabScope> read get_TabScopes;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNPropertyTabAttribute = class(TDNGenericImport<DNPropertyTabAttributeClass, DNPropertyTabAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNProvidePropertyAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{B082C2C4-54A0-538C-86C3-9BA6A0D11291}']
  { constructors } 

    {class} function init(propertyName: string; receiverType: DDNC.System.Private.CoreLib.DNType): DNProvidePropertyAttribute; overload;
    {class} function init(propertyName: string; receiverTypeName: string): DNProvidePropertyAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.ProvidePropertyAttribute')]
  DNProvidePropertyAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{F58116A6-CAC0-3DFD-964C-E14BCB1D6F1D}']
  { getters & setters } 

    function get_PropertyName: string;
    function get_ReceiverTypeName: string;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property PropertyName: string read get_PropertyName;
    property ReceiverTypeName: string read get_ReceiverTypeName;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNProvidePropertyAttribute = class(TDNGenericImport<DNProvidePropertyAttributeClass, DNProvidePropertyAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNRecommendedAsConfigurableAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{9BD03E25-C9FB-5F10-8D73-19C0CC2F56F5}']
  { constructors } 

    {class} function init(recommendedAsConfigurable: Boolean): DNRecommendedAsConfigurableAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_No: DNRecommendedAsConfigurableAttribute;
   function __fakeFieldGet_Yes: DNRecommendedAsConfigurableAttribute;
   function __fakeFieldGet_Default: DNRecommendedAsConfigurableAttribute;

  { static fields } 

    {class} property No: DNRecommendedAsConfigurableAttribute read __fakeFieldGet_No;
    {class} property Yes: DNRecommendedAsConfigurableAttribute read __fakeFieldGet_Yes;
    {class} property &Default: DNRecommendedAsConfigurableAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.RecommendedAsConfigurableAttribute')]
  DNRecommendedAsConfigurableAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{72CFC105-9971-3698-95DD-B8F60992787B}']
  { getters & setters } 

    function get_RecommendedAsConfigurable: Boolean;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property RecommendedAsConfigurable: Boolean read get_RecommendedAsConfigurable;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNRecommendedAsConfigurableAttribute = class(TDNGenericImport<DNRecommendedAsConfigurableAttributeClass, DNRecommendedAsConfigurableAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNRunInstallerAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{7D5AB00A-C96E-50DB-8975-BBBAD0BA829D}']
  { constructors } 

    {class} function init(runInstaller: Boolean): DNRunInstallerAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Yes: DNRunInstallerAttribute;
   function __fakeFieldGet_No: DNRunInstallerAttribute;
   function __fakeFieldGet_Default: DNRunInstallerAttribute;

  { static fields } 

    {class} property Yes: DNRunInstallerAttribute read __fakeFieldGet_Yes;
    {class} property No: DNRunInstallerAttribute read __fakeFieldGet_No;
    {class} property &Default: DNRunInstallerAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.RunInstallerAttribute')]
  DNRunInstallerAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{91D86D65-8008-36AA-877C-0B250D7209D5}']
  { getters & setters } 

    function get_RunInstaller: Boolean;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property RunInstaller: Boolean read get_RunInstaller;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNRunInstallerAttribute = class(TDNGenericImport<DNRunInstallerAttributeClass, DNRunInstallerAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNSettingsBindableAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{AC73C2FF-BDF7-5FF5-906B-EDFE4B0710EE}']
  { constructors } 

    {class} function init(bindable: Boolean): DNSettingsBindableAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Yes: DNSettingsBindableAttribute;
   function __fakeFieldGet_No: DNSettingsBindableAttribute;

  { static fields } 

    {class} property Yes: DNSettingsBindableAttribute read __fakeFieldGet_Yes;
    {class} property No: DNSettingsBindableAttribute read __fakeFieldGet_No;

  end;

  [DNTypeName('System.ComponentModel.SettingsBindableAttribute')]
  DNSettingsBindableAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{8E5CBFF0-0448-331A-B629-48D848E27F65}']
  { getters & setters } 

    function get_Bindable: Boolean;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Bindable: Boolean read get_Bindable;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNSettingsBindableAttribute = class(TDNGenericImport<DNSettingsBindableAttributeClass, DNSettingsBindableAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNToolboxItemAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{977F4BF7-D687-5B69-B354-308D885EDD3B}']
  { constructors } 

    {class} function init(defaultType: Boolean): DNToolboxItemAttribute; overload;
    {class} function init(toolboxItemTypeName: string): DNToolboxItemAttribute; overload;
    {class} function init(toolboxItemType: DDNC.System.Private.CoreLib.DNType): DNToolboxItemAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNToolboxItemAttribute;
   function __fakeFieldGet_None: DNToolboxItemAttribute;

  { static fields } 

    {class} property &Default: DNToolboxItemAttribute read __fakeFieldGet_Default;
    {class} property None: DNToolboxItemAttribute read __fakeFieldGet_None;

  end;

  [DNTypeName('System.ComponentModel.ToolboxItemAttribute')]
  DNToolboxItemAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{AF912EAE-7D4D-38E4-8CAB-3B72F190B6E8}']
  { getters & setters } 

    function get_ToolboxItemType: DDNC.System.Private.CoreLib.DNType;
    function get_ToolboxItemTypeName: string;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsDefaultAttribute: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property ToolboxItemType: DDNC.System.Private.CoreLib.DNType read get_ToolboxItemType;
    property ToolboxItemTypeName: string read get_ToolboxItemTypeName;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNToolboxItemAttribute = class(TDNGenericImport<DNToolboxItemAttributeClass, DNToolboxItemAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNToolboxItemFilterAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{2A9694EE-F09A-5BA8-A030-4A541EEC3726}']
  { constructors } 

    {class} function init(filterString: string): DNToolboxItemFilterAttribute; overload;
    {class} function init(filterString: string; filterType: DNToolboxItemFilterType): DNToolboxItemFilterAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.ToolboxItemFilterAttribute')]
  DNToolboxItemFilterAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{43FA5E9C-3CCE-39DB-836E-8858D2AC0F1F}']
  { getters & setters } 

    function get_FilterString: string;
    function get_FilterType: DNToolboxItemFilterType;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function ToString: string;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property FilterString: string read get_FilterString;
    property FilterType: DNToolboxItemFilterType read get_FilterType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNToolboxItemFilterAttribute = class(TDNGenericImport<DNToolboxItemFilterAttributeClass, DNToolboxItemFilterAttribute>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNDesignerVerbCollectionClass = interface(DNObjectClass)
  ['{080431CD-F376-543C-A49B-052CDA4B0008}']
  { constructors } 

    {class} function init: DNDesignerVerbCollection; overload;
    {class} function init(value: TArray<DNDesignerVerb>): DNDesignerVerbCollection; overload;

  end;

  [DNTypeName('System.ComponentModel.Design.DesignerVerbCollection')]
  DNDesignerVerbCollection = interface(DNObject)
  ['{BDC2D679-9C11-3625-B9C3-9E24AAE0B81B}']
  { getters & setters } 

    function get_Item(index: Int32): DNDesignerVerb;
    procedure set_Item(index: Int32; value: DNDesignerVerb);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(value: DNDesignerVerb): Int32;
    procedure AddRange(value: TArray<DNDesignerVerb>); overload;
    procedure AddRange(value: DNDesignerVerbCollection); overload;
    procedure Insert(index: Int32; value: DNDesignerVerb);
    function IndexOf(value: DNDesignerVerb): Int32;
    function &Contains(value: DNDesignerVerb): Boolean;
    procedure Remove(value: DNDesignerVerb);
    procedure CopyTo(&array: TArray<DNDesignerVerb>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[index: Int32]: DNDesignerVerb read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNDesignerVerbCollection = class(TDNGenericImport<DNDesignerVerbCollectionClass, DNDesignerVerbCollection>) end;

  //-------------namespace: System.ComponentModel----------------
  DNBindingListClass<T> = interface(DDNC.System.Private.CoreLib.DNCollectionClass<T>)
  ['{A0CE25A8-E1C5-5DF5-A04D-9A850DB2C1F9}']
  { constructors } 

    {class} function init: DNBindingList<T>; overload;
    {class} function init(list: DDNC.System.Private.CoreLib.DNIList<T>): DNBindingList<T>; overload;

  end;

  [DNTypeName('System.ComponentModel.BindingList`1')]
  DNBindingList<T> = interface(DDNC.System.Private.CoreLib.DNCollection<T>)
  ['{5E17D945-CBFD-3351-ABAD-A29EBD69881C}']
  { getters & setters } 

    function get_RaiseListChangedEvents: Boolean;
    procedure set_RaiseListChangedEvents(value: Boolean);
    function get_AllowNew: Boolean;
    procedure set_AllowNew(value: Boolean);
    function get_AllowEdit: Boolean;
    procedure set_AllowEdit(value: Boolean);
    function get_AllowRemove: Boolean;
    procedure set_AllowRemove(value: Boolean);
    function get_Count: Int32;

  { events } 

    procedure add_AddingNew(value: DNAddingNewEventHandler);
    procedure remove_AddingNew(value: DNAddingNewEventHandler);
    procedure add_ListChanged(value: DNListChangedEventHandler);
    procedure remove_ListChanged(value: DNListChangedEventHandler);

  { methods } 

    procedure ResetBindings;
    procedure ResetItem(position: Int32);
    procedure CancelNew(itemIndex: Int32);
    procedure EndNew(itemIndex: Int32);
    function AddNew: T;
    procedure CopyTo(&array: TArray<T>; index: Int32);
    function &Contains(item: T): Boolean;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<T>;
    function IndexOf(item: T): Int32;
    procedure Insert(index: Int32; item: T);
    procedure RemoveAt(index: Int32);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property RaiseListChangedEvents: Boolean read get_RaiseListChangedEvents write set_RaiseListChangedEvents;
    property AllowNew: Boolean read get_AllowNew write set_AllowNew;
    property AllowEdit: Boolean read get_AllowEdit write set_AllowEdit;
    property AllowRemove: Boolean read get_AllowRemove write set_AllowRemove;
    property Count: Int32 read get_Count;
  end;

  TDNBindingList<T> = class(TDNGenericImport<DNBindingListClass<T>, DNBindingList<T>>) end;

  //-------------namespace: System.ComponentModel----------------
  DNAttributeCollectionClass = interface(DNObjectClass)
  ['{52CC94CD-33C3-54DB-8EAF-12312C0211AD}']
  { constructors } 

    {class} function init(attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNAttributeCollection;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNAttributeCollection;

  { static fields } 

    {class} property Empty: DNAttributeCollection read __fakeFieldGet_Empty;

  { static methods } 

    {class} function FromExisting(existing: DNAttributeCollection; newAttributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNAttributeCollection;

  end;

  [DNTypeName('System.ComponentModel.AttributeCollection')]
  DNAttributeCollection = interface(DDNC.System.Private.CoreLib.DNICollection)
  ['{0131D1AA-65F1-3275-92B5-AD46B8E157EB}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DDNC.System.Private.CoreLib.DNAttribute; overload;
    function get_Item(attributeType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNAttribute; overload;

  { methods } 

    function &Contains(attribute: DDNC.System.Private.CoreLib.DNAttribute): Boolean; overload;
    function &Contains(attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): Boolean; overload;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function Matches(attribute: DDNC.System.Private.CoreLib.DNAttribute): Boolean; overload;
    function Matches(attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): Boolean; overload;
    procedure CopyTo(&array: DDNC.System.Private.CoreLib.DNArray; index: Int32);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DDNC.System.Private.CoreLib.DNAttribute read get_Item; default;
    property Item[attributeType: DDNC.System.Private.CoreLib.DNType]: DDNC.System.Private.CoreLib.DNAttribute read get_Item; default;
  end;

  TDNAttributeCollection = class(TDNGenericImport<DNAttributeCollectionClass, DNAttributeCollection>) end;

  //-------------namespace: System.ComponentModel----------------
  DNComponentEditorClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{BCD8C083-5839-58DF-A409-8F9E56E18C34}']
  end;

  [DNTypeName('System.ComponentModel.ComponentEditor')]
  DNComponentEditor = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{B7EF11FA-4AFE-3D07-AB70-F10D5E77B0E8}']
  { methods } 

    function EditComponent(component: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function EditComponent(context: DNITypeDescriptorContext; component: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNComponentEditor = class(TDNGenericImport<DNComponentEditorClass, DNComponentEditor>) end;

  //-------------namespace: System.ComponentModel----------------
  DNContainerClass = interface(DNObjectClass)
  ['{0484937D-BC7C-535C-A5E6-6B163A724E7E}']
  { constructors } 

    {class} function init: DNContainer;

  end;

  [DNTypeName('System.ComponentModel.Container')]
  DNContainer = interface(DDNC.System.ComponentModel.Primitives.DNIContainer)
  ['{4AA3CA56-0AEB-3A5E-B0DF-369EB6F3CC5D}']
  { getters & setters } 

    function get_Components: DDNC.System.ComponentModel.Primitives.DNComponentCollection;

  { methods } 

    procedure Add(component: DDNC.System.ComponentModel.Primitives.DNIComponent); overload;
    procedure Add(component: DDNC.System.ComponentModel.Primitives.DNIComponent; name: string); overload;
    procedure Dispose;
    procedure Remove(component: DDNC.System.ComponentModel.Primitives.DNIComponent);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Components: DDNC.System.ComponentModel.Primitives.DNComponentCollection read get_Components;
  end;

  TDNContainer = class(TDNGenericImport<DNContainerClass, DNContainer>) end;

  //-------------namespace: System.ComponentModel----------------
  DNNestedContainerClass = interface(DNContainerClass)
  ['{697B79FA-FBFE-59D6-960B-E5BD478D512D}']
  { constructors } 

    {class} function init(owner: DDNC.System.ComponentModel.Primitives.DNIComponent): DNNestedContainer;

  end;

  [DNTypeName('System.ComponentModel.NestedContainer')]
  DNNestedContainer = interface(DNContainer)
  ['{1B69EE62-1121-3DC7-B705-D4C013EC318C}']
  { getters & setters } 

    function get_Owner: DDNC.System.ComponentModel.Primitives.DNIComponent;
    function get_Components: DDNC.System.ComponentModel.Primitives.DNComponentCollection;

  { methods } 

    procedure Add(component: DDNC.System.ComponentModel.Primitives.DNIComponent); overload;
    procedure Add(component: DDNC.System.ComponentModel.Primitives.DNIComponent; name: string); overload;
    procedure Dispose;
    procedure Remove(component: DDNC.System.ComponentModel.Primitives.DNIComponent);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Owner: DDNC.System.ComponentModel.Primitives.DNIComponent read get_Owner;
    property Components: DDNC.System.ComponentModel.Primitives.DNComponentCollection read get_Components;
  end;

  TDNNestedContainer = class(TDNGenericImport<DNNestedContainerClass, DNNestedContainer>) end;

  //-------------namespace: System.ComponentModel----------------
  DNContainerFilterServiceClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{08BDBC59-612F-5857-BDF7-D0963EF9A392}']
  end;

  [DNTypeName('System.ComponentModel.ContainerFilterService')]
  DNContainerFilterService = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{CCE58928-0B06-3597-9CBB-5B44009E279D}']
  { methods } 

    function FilterComponents(components: DDNC.System.ComponentModel.Primitives.DNComponentCollection): DDNC.System.ComponentModel.Primitives.DNComponentCollection;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNContainerFilterService = class(TDNGenericImport<DNContainerFilterServiceClass, DNContainerFilterService>) end;

  //-------------namespace: System.ComponentModel----------------
  DNCustomTypeDescriptorClass = interface(DNObjectClass)
  ['{608F60CA-FE5E-57F9-A293-C471656B568B}']
  end;

  [DNTypeName('System.ComponentModel.CustomTypeDescriptor')]
  DNCustomTypeDescriptor = interface(DNICustomTypeDescriptor)
  ['{60674978-D83D-381C-9A43-4DBF50A4877E}']
  { methods } 

    function GetAttributes: DNAttributeCollection;
    function GetClassName: string;
    function GetComponentName: string;
    function GetConverter: DNTypeConverter;
    function GetDefaultEvent: DNEventDescriptor;
    function GetDefaultProperty: DNPropertyDescriptor;
    function GetEditor(editorBaseType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    function GetEvents: DNEventDescriptorCollection; overload;
    function GetEvents(attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNEventDescriptorCollection; overload;
    function GetProperties: DNPropertyDescriptorCollection; overload;
    function GetProperties(attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertyOwner(pd: DNPropertyDescriptor): DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNCustomTypeDescriptor = class(TDNGenericImport<DNCustomTypeDescriptorClass, DNCustomTypeDescriptor>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNCommandIDClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{3F4B9E59-C151-5121-8F92-5A824434D0C0}']
  { constructors } 

    {class} function init(menuGroup: DDNC.System.Private.CoreLib.DNGuid; commandID: Int32): DNCommandID;

  end;

  [DNTypeName('System.ComponentModel.Design.CommandID')]
  DNCommandID = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{D381B908-027F-3544-B0AD-DFEC98F41AAA}']
  { getters & setters } 

    function get_ID: Int32;
    function get_Guid: DDNC.System.Private.CoreLib.DNGuid;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property ID: Int32 read get_ID;
    property Guid: DDNC.System.Private.CoreLib.DNGuid read get_Guid;
  end;

  TDNCommandID = class(TDNGenericImport<DNCommandIDClass, DNCommandID>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNDesignerCollectionClass = interface(DNObjectClass)
  ['{71182291-7017-5FF0-9424-8641144568FB}']
  { constructors } 

    {class} function init(designers: TArray<DNIDesignerHost>): DNDesignerCollection; overload;
    {class} function init(designers: DDNC.System.Private.CoreLib.DNIList): DNDesignerCollection; overload;

  end;

  [DNTypeName('System.ComponentModel.Design.DesignerCollection')]
  DNDesignerCollection = interface(DDNC.System.Private.CoreLib.DNICollection)
  ['{3C892ECB-86DB-32B5-AB30-0D8502BB2055}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNIDesignerHost;

  { methods } 

    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNIDesignerHost read get_Item; default;
  end;

  TDNDesignerCollection = class(TDNGenericImport<DNDesignerCollectionClass, DNDesignerCollection>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNDesignerOptionServiceClass = interface(DNObjectClass)
  ['{F0013D25-7375-5784-8A49-2C58DABA6E70}']
  end;

  [DNTypeName('System.ComponentModel.Design.DesignerOptionService')]
  DNDesignerOptionService = interface(DNIDesignerOptionService)
  ['{E2402CA4-314B-3408-8952-E3FA7B2ABD68}']
  { getters & setters } 

    function get_Options: DNDesignerOptionService_DesignerOptionCollection;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Options: DNDesignerOptionService_DesignerOptionCollection read get_Options;
  end;

  TDNDesignerOptionService = class(TDNGenericImport<DNDesignerOptionServiceClass, DNDesignerOptionService>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNDesignerOptionService_DesignerOptionCollectionClass = interface(DNObjectClass)
  ['{9D20FE07-B3BA-5BFF-85AE-5E5425F18053}']
  end;

  [DNTypeName('System.ComponentModel.Design.DesignerOptionService+DesignerOptionCollection')]
  DNDesignerOptionService_DesignerOptionCollection = interface(DDNC.System.Private.CoreLib.DNIList)
  ['{E7AC3856-3ED4-3609-9F29-F3FA3B4A612C}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Name: string;
    function get_Parent: DNDesignerOptionService_DesignerOptionCollection;
    function get_Properties: DNPropertyDescriptorCollection;
    function get_Item(index: Int32): DNDesignerOptionService_DesignerOptionCollection; overload;
    function get_Item(name: string): DNDesignerOptionService_DesignerOptionCollection; overload;

  { methods } 

    procedure CopyTo(&array: DDNC.System.Private.CoreLib.DNArray; index: Int32);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function IndexOf(value: DNDesignerOptionService_DesignerOptionCollection): Int32;
    function ShowDialog: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property Name: string read get_Name;
    property Parent: DNDesignerOptionService_DesignerOptionCollection read get_Parent;
    property Properties: DNPropertyDescriptorCollection read get_Properties;
    property Item[index: Int32]: DNDesignerOptionService_DesignerOptionCollection read get_Item; default;
    property Item[name: string]: DNDesignerOptionService_DesignerOptionCollection read get_Item; default;
  end;

  TDNDesignerOptionService_DesignerOptionCollection = class(TDNGenericImport<DNDesignerOptionService_DesignerOptionCollectionClass, DNDesignerOptionService_DesignerOptionCollection>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNDesignerTransactionClass = interface(DNObjectClass)
  ['{E827B7D5-A62C-5F41-823C-B10317251BC2}']
  end;

  [DNTypeName('System.ComponentModel.Design.DesignerTransaction')]
  DNDesignerTransaction = interface(DDNC.System.Private.CoreLib.DNIDisposable)
  ['{9C47659D-EE71-34F2-9AF6-65035D519624}']
  { getters & setters } 

    function get_Canceled: Boolean;
    function get_Committed: Boolean;
    function get_Description: string;

  { methods } 

    procedure Cancel;
    procedure Commit;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Canceled: Boolean read get_Canceled;
    property Committed: Boolean read get_Committed;
    property Description: string read get_Description;
  end;

  TDNDesignerTransaction = class(TDNGenericImport<DNDesignerTransactionClass, DNDesignerTransaction>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNDesigntimeLicenseContextSerializerClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{07E40F46-2765-5BF9-9440-6670B3DDB869}']
  { static methods } 

    {class} procedure Serialize(o: DDNC.System.Private.CoreLib.DNStream; cryptoKey: string; context: DNDesigntimeLicenseContext);

  end;

  [DNTypeName('System.ComponentModel.Design.DesigntimeLicenseContextSerializer')]
  DNDesigntimeLicenseContextSerializer = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{5EEFF6D3-4656-3BD7-9D3E-0C456F3D575C}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNDesigntimeLicenseContextSerializer = class(TDNGenericImport<DNDesigntimeLicenseContextSerializerClass, DNDesigntimeLicenseContextSerializer>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNMenuCommandClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{4559E2F5-DE6C-55EB-804E-150378823AA3}']
  { constructors } 

    {class} function init(handler: DDNC.System.Private.CoreLib.DNEventHandler; command: DNCommandID): DNMenuCommand;

  end;

  [DNTypeName('System.ComponentModel.Design.MenuCommand')]
  DNMenuCommand = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{1AB0A3C3-D6D9-3F96-9B30-7B793D0CCCBF}']
  { getters & setters } 

    function get_Checked: Boolean;
    procedure set_Checked(value: Boolean);
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_Properties: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_Supported: Boolean;
    procedure set_Supported(value: Boolean);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_CommandID: DNCommandID;
    function get_OleStatus: Int32;

  { events } 

    procedure add_CommandChanged(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_CommandChanged(value: DDNC.System.Private.CoreLib.DNEventHandler);

  { methods } 

    procedure Invoke; overload;
    procedure Invoke(arg: DDNC.System.Private.CoreLib.DNObject); overload;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Checked: Boolean read get_Checked write set_Checked;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property Properties: DDNC.System.Private.CoreLib.DNIDictionary read get_Properties;
    property Supported: Boolean read get_Supported write set_Supported;
    property Visible: Boolean read get_Visible write set_Visible;
    property CommandID: DNCommandID read get_CommandID;
    property OleStatus: Int32 read get_OleStatus;
  end;

  TDNMenuCommand = class(TDNGenericImport<DNMenuCommandClass, DNMenuCommand>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNDesignerVerbClass = interface(DNMenuCommandClass)
  ['{7DC810DA-D985-51C3-B9F5-D09F95E57E90}']
  { constructors } 

    {class} function init(text: string; handler: DDNC.System.Private.CoreLib.DNEventHandler): DNDesignerVerb; overload;
    {class} function init(text: string; handler: DDNC.System.Private.CoreLib.DNEventHandler; startCommandID: DNCommandID): DNDesignerVerb; overload;

  end;

  [DNTypeName('System.ComponentModel.Design.DesignerVerb')]
  DNDesignerVerb = interface(DNMenuCommand)
  ['{8F1D389F-4BEB-3862-A8F1-9EE13795E20C}']
  { getters & setters } 

    function get_Description: string;
    procedure set_Description(value: string);
    function get_Text: string;
    function get_Checked: Boolean;
    procedure set_Checked(value: Boolean);
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_Properties: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_Supported: Boolean;
    procedure set_Supported(value: Boolean);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_CommandID: DNCommandID;
    function get_OleStatus: Int32;

  { events } 

    procedure add_CommandChanged(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_CommandChanged(value: DDNC.System.Private.CoreLib.DNEventHandler);

  { methods } 

    function ToString: string;
    procedure Invoke; overload;
    procedure Invoke(arg: DDNC.System.Private.CoreLib.DNObject); overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Description: string read get_Description write set_Description;
    property Text: string read get_Text;
    property Checked: Boolean read get_Checked write set_Checked;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property Properties: DDNC.System.Private.CoreLib.DNIDictionary read get_Properties;
    property Supported: Boolean read get_Supported write set_Supported;
    property Visible: Boolean read get_Visible write set_Visible;
    property CommandID: DNCommandID read get_CommandID;
    property OleStatus: Int32 read get_OleStatus;
  end;

  TDNDesignerVerb = class(TDNGenericImport<DNDesignerVerbClass, DNDesignerVerb>) end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  DNComponentSerializationServiceClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{9E065347-6C30-5B06-8BB6-20B28C254B50}']
  end;

  [DNTypeName('System.ComponentModel.Design.Serialization.ComponentSerializationService')]
  DNComponentSerializationService = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{B5DD7455-5C09-3503-A967-AF140C685384}']
  { methods } 

    function CreateStore: DNSerializationStore;
    function LoadStore(stream: DDNC.System.Private.CoreLib.DNStream): DNSerializationStore;
    procedure Serialize(store: DNSerializationStore; value: DDNC.System.Private.CoreLib.DNObject);
    procedure SerializeAbsolute(store: DNSerializationStore; value: DDNC.System.Private.CoreLib.DNObject);
    procedure SerializeMember(store: DNSerializationStore; owningObject: DDNC.System.Private.CoreLib.DNObject; member: DNMemberDescriptor);
    procedure SerializeMemberAbsolute(store: DNSerializationStore; owningObject: DDNC.System.Private.CoreLib.DNObject; member: DNMemberDescriptor);
    function Deserialize(store: DNSerializationStore): DDNC.System.Private.CoreLib.DNICollection; overload;
    function Deserialize(store: DNSerializationStore; container: DDNC.System.ComponentModel.Primitives.DNIContainer): DDNC.System.Private.CoreLib.DNICollection; overload;
    procedure DeserializeTo(store: DNSerializationStore; container: DDNC.System.ComponentModel.Primitives.DNIContainer; validateRecycledTypes: Boolean; applyDefaults: Boolean); overload;
    procedure DeserializeTo(store: DNSerializationStore; container: DDNC.System.ComponentModel.Primitives.DNIContainer); overload;
    procedure DeserializeTo(store: DNSerializationStore; container: DDNC.System.ComponentModel.Primitives.DNIContainer; validateRecycledTypes: Boolean); overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNComponentSerializationService = class(TDNGenericImport<DNComponentSerializationServiceClass, DNComponentSerializationService>) end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  DNContextStackClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{C023381F-5DDA-5B1F-9C30-E6734EFB010B}']
  { constructors } 

    {class} function init: DNContextStack;

  end;

  [DNTypeName('System.ComponentModel.Design.Serialization.ContextStack')]
  DNContextStack = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{8C31033B-1FB5-3717-A3B9-62FE3937743B}']
  { getters & setters } 

    function get_Current: DDNC.System.Private.CoreLib.DNObject;
    function get_Item(level: Int32): DDNC.System.Private.CoreLib.DNObject; overload;
    function get_Item(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;

  { methods } 

    procedure Append(context: DDNC.System.Private.CoreLib.DNObject);
    function Pop: DDNC.System.Private.CoreLib.DNObject;
    procedure Push(context: DDNC.System.Private.CoreLib.DNObject);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Current: DDNC.System.Private.CoreLib.DNObject read get_Current;
    property Item[level: Int32]: DDNC.System.Private.CoreLib.DNObject read get_Item; default;
    property Item[&type: DDNC.System.Private.CoreLib.DNType]: DDNC.System.Private.CoreLib.DNObject read get_Item; default;
  end;

  TDNContextStack = class(TDNGenericImport<DNContextStackClass, DNContextStack>) end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  DNDesignerLoaderClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{8E323053-D40C-54E5-B817-EE1FAAB4E190}']
  end;

  [DNTypeName('System.ComponentModel.Design.Serialization.DesignerLoader')]
  DNDesignerLoader = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{6CEC3C7F-42D8-3235-AADB-843E6D1A6227}']
  { getters & setters } 

    function get_Loading: Boolean;

  { methods } 

    procedure BeginLoad(host: DNIDesignerLoaderHost);
    procedure Dispose;
    procedure Flush;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Loading: Boolean read get_Loading;
  end;

  TDNDesignerLoader = class(TDNGenericImport<DNDesignerLoaderClass, DNDesignerLoader>) end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  DNInstanceDescriptorClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{844ADF36-43C0-5265-8811-C7A1FAE34530}']
  { constructors } 

    {class} function init(member: DDNC.System.Private.CoreLib.DNMemberInfo; arguments: DDNC.System.Private.CoreLib.DNICollection): DNInstanceDescriptor; overload;
    {class} function init(member: DDNC.System.Private.CoreLib.DNMemberInfo; arguments: DDNC.System.Private.CoreLib.DNICollection; isComplete: Boolean): DNInstanceDescriptor; overload;

  end;

  [DNTypeName('System.ComponentModel.Design.Serialization.InstanceDescriptor')]
  DNInstanceDescriptor = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{7914E1B5-D087-3462-BF3C-08979991B271}']
  { getters & setters } 

    function get_Arguments: DDNC.System.Private.CoreLib.DNICollection;
    function get_IsComplete: Boolean;
    function get_MemberInfo: DDNC.System.Private.CoreLib.DNMemberInfo;

  { methods } 

    function Invoke: DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Arguments: DDNC.System.Private.CoreLib.DNICollection read get_Arguments;
    property IsComplete: Boolean read get_IsComplete;
    property MemberInfo: DDNC.System.Private.CoreLib.DNMemberInfo read get_MemberInfo;
  end;

  TDNInstanceDescriptor = class(TDNGenericImport<DNInstanceDescriptorClass, DNInstanceDescriptor>) end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  DNMemberRelationshipServiceClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{17CF882F-A1C9-5FE5-BD68-8F87C3E4CA56}']
  end;

  [DNTypeName('System.ComponentModel.Design.Serialization.MemberRelationshipService')]
  DNMemberRelationshipService = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{A48EBE14-DADC-3CE0-95EF-7109AE2D0168}']
  { getters & setters } 

    function get_Item(source: DNMemberRelationship): DNMemberRelationship; overload;
    procedure set_Item(source: DNMemberRelationship; value: DNMemberRelationship); overload;
    function get_Item(sourceOwner: DDNC.System.Private.CoreLib.DNObject; sourceMember: DNMemberDescriptor): DNMemberRelationship; overload;
    procedure set_Item(sourceOwner: DDNC.System.Private.CoreLib.DNObject; sourceMember: DNMemberDescriptor; value: DNMemberRelationship); overload;

  { methods } 

    function SupportsRelationship(source: DNMemberRelationship; relationship: DNMemberRelationship): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[source: DNMemberRelationship]: DNMemberRelationship read get_Item write set_Item; default;
    property Item[sourceOwner: DDNC.System.Private.CoreLib.DNObject; sourceMember: DNMemberDescriptor]: DNMemberRelationship read get_Item write set_Item; default;
  end;

  TDNMemberRelationshipService = class(TDNGenericImport<DNMemberRelationshipServiceClass, DNMemberRelationshipService>) end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  DNSerializationStoreClass = interface(DNObjectClass)
  ['{5666CB4F-00BE-5DA3-AF31-A3F114DB0CE9}']
  end;

  [DNTypeName('System.ComponentModel.Design.Serialization.SerializationStore')]
  DNSerializationStore = interface(DDNC.System.Private.CoreLib.DNIDisposable)
  ['{5C941E7E-AA61-3AE9-8289-0E682E18AD47}']
  { getters & setters } 

    function get_Errors: DDNC.System.Private.CoreLib.DNICollection;

  { methods } 

    procedure Close;
    procedure Save(stream: DDNC.System.Private.CoreLib.DNStream);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Errors: DDNC.System.Private.CoreLib.DNICollection read get_Errors;
  end;

  TDNSerializationStore = class(TDNGenericImport<DNSerializationStoreClass, DNSerializationStore>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNServiceContainerClass = interface(DNObjectClass)
  ['{56B446EB-D5A9-5C00-A5AA-735A565F2D11}']
  { constructors } 

    {class} function init: DNServiceContainer; overload;
    {class} function init(parentProvider: DDNC.System.ComponentModel.DNIServiceProvider): DNServiceContainer; overload;

  end;

  [DNTypeName('System.ComponentModel.Design.ServiceContainer')]
  DNServiceContainer = interface(DNIServiceContainer)
  ['{C05CE06D-A8F4-3B36-9CBB-490C1E44F79C}']
  { methods } 

    procedure AddService(serviceType: DDNC.System.Private.CoreLib.DNType; serviceInstance: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure AddService(serviceType: DDNC.System.Private.CoreLib.DNType; serviceInstance: DDNC.System.Private.CoreLib.DNObject; promote: Boolean); overload;
    procedure AddService(serviceType: DDNC.System.Private.CoreLib.DNType; callback: DNServiceCreatorCallback); overload;
    procedure AddService(serviceType: DDNC.System.Private.CoreLib.DNType; callback: DNServiceCreatorCallback; promote: Boolean); overload;
    procedure Dispose;
    function GetService(serviceType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    procedure RemoveService(serviceType: DDNC.System.Private.CoreLib.DNType); overload;
    procedure RemoveService(serviceType: DDNC.System.Private.CoreLib.DNType; promote: Boolean); overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNServiceContainer = class(TDNGenericImport<DNServiceContainerClass, DNServiceContainer>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNStandardCommandsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{5F23F2BB-4A84-5468-8E47-779C04642E91}']
  { constructors } 

    {class} function init: DNStandardCommands;

  { static fields getter & setter } 

   function __fakeFieldGet_AlignBottom: DNCommandID;
   function __fakeFieldGet_AlignHorizontalCenters: DNCommandID;
   function __fakeFieldGet_AlignLeft: DNCommandID;
   function __fakeFieldGet_AlignRight: DNCommandID;
   function __fakeFieldGet_AlignToGrid: DNCommandID;
   function __fakeFieldGet_AlignTop: DNCommandID;
   function __fakeFieldGet_AlignVerticalCenters: DNCommandID;
   function __fakeFieldGet_ArrangeBottom: DNCommandID;
   function __fakeFieldGet_ArrangeRight: DNCommandID;
   function __fakeFieldGet_BringForward: DNCommandID;
   function __fakeFieldGet_BringToFront: DNCommandID;
   function __fakeFieldGet_CenterHorizontally: DNCommandID;
   function __fakeFieldGet_CenterVertically: DNCommandID;
   function __fakeFieldGet_ViewCode: DNCommandID;
   function __fakeFieldGet_DocumentOutline: DNCommandID;
   function __fakeFieldGet_Copy: DNCommandID;
   function __fakeFieldGet_Cut: DNCommandID;
   function __fakeFieldGet_Delete: DNCommandID;
   function __fakeFieldGet_Group: DNCommandID;
   function __fakeFieldGet_HorizSpaceConcatenate: DNCommandID;
   function __fakeFieldGet_HorizSpaceDecrease: DNCommandID;
   function __fakeFieldGet_HorizSpaceIncrease: DNCommandID;
   function __fakeFieldGet_HorizSpaceMakeEqual: DNCommandID;
   function __fakeFieldGet_Paste: DNCommandID;
   function __fakeFieldGet_Properties: DNCommandID;
   function __fakeFieldGet_Redo: DNCommandID;
   function __fakeFieldGet_MultiLevelRedo: DNCommandID;
   function __fakeFieldGet_SelectAll: DNCommandID;
   function __fakeFieldGet_SendBackward: DNCommandID;
   function __fakeFieldGet_SendToBack: DNCommandID;
   function __fakeFieldGet_SizeToControl: DNCommandID;
   function __fakeFieldGet_SizeToControlHeight: DNCommandID;
   function __fakeFieldGet_SizeToControlWidth: DNCommandID;
   function __fakeFieldGet_SizeToFit: DNCommandID;
   function __fakeFieldGet_SizeToGrid: DNCommandID;
   function __fakeFieldGet_SnapToGrid: DNCommandID;
   function __fakeFieldGet_TabOrder: DNCommandID;
   function __fakeFieldGet_Undo: DNCommandID;
   function __fakeFieldGet_MultiLevelUndo: DNCommandID;
   function __fakeFieldGet_Ungroup: DNCommandID;
   function __fakeFieldGet_VertSpaceConcatenate: DNCommandID;
   function __fakeFieldGet_VertSpaceDecrease: DNCommandID;
   function __fakeFieldGet_VertSpaceIncrease: DNCommandID;
   function __fakeFieldGet_VertSpaceMakeEqual: DNCommandID;
   function __fakeFieldGet_ShowGrid: DNCommandID;
   function __fakeFieldGet_ViewGrid: DNCommandID;
   function __fakeFieldGet_Replace: DNCommandID;
   function __fakeFieldGet_PropertiesWindow: DNCommandID;
   function __fakeFieldGet_LockControls: DNCommandID;
   function __fakeFieldGet_F1Help: DNCommandID;
   function __fakeFieldGet_ArrangeIcons: DNCommandID;
   function __fakeFieldGet_LineupIcons: DNCommandID;
   function __fakeFieldGet_ShowLargeIcons: DNCommandID;
   function __fakeFieldGet_VerbFirst: DNCommandID;
   function __fakeFieldGet_VerbLast: DNCommandID;

  { static fields } 

    {class} property AlignBottom: DNCommandID read __fakeFieldGet_AlignBottom;
    {class} property AlignHorizontalCenters: DNCommandID read __fakeFieldGet_AlignHorizontalCenters;
    {class} property AlignLeft: DNCommandID read __fakeFieldGet_AlignLeft;
    {class} property AlignRight: DNCommandID read __fakeFieldGet_AlignRight;
    {class} property AlignToGrid: DNCommandID read __fakeFieldGet_AlignToGrid;
    {class} property AlignTop: DNCommandID read __fakeFieldGet_AlignTop;
    {class} property AlignVerticalCenters: DNCommandID read __fakeFieldGet_AlignVerticalCenters;
    {class} property ArrangeBottom: DNCommandID read __fakeFieldGet_ArrangeBottom;
    {class} property ArrangeRight: DNCommandID read __fakeFieldGet_ArrangeRight;
    {class} property BringForward: DNCommandID read __fakeFieldGet_BringForward;
    {class} property BringToFront: DNCommandID read __fakeFieldGet_BringToFront;
    {class} property CenterHorizontally: DNCommandID read __fakeFieldGet_CenterHorizontally;
    {class} property CenterVertically: DNCommandID read __fakeFieldGet_CenterVertically;
    {class} property ViewCode: DNCommandID read __fakeFieldGet_ViewCode;
    {class} property DocumentOutline: DNCommandID read __fakeFieldGet_DocumentOutline;
    {class} property Copy: DNCommandID read __fakeFieldGet_Copy;
    {class} property Cut: DNCommandID read __fakeFieldGet_Cut;
    {class} property Delete: DNCommandID read __fakeFieldGet_Delete;
    {class} property Group: DNCommandID read __fakeFieldGet_Group;
    {class} property HorizSpaceConcatenate: DNCommandID read __fakeFieldGet_HorizSpaceConcatenate;
    {class} property HorizSpaceDecrease: DNCommandID read __fakeFieldGet_HorizSpaceDecrease;
    {class} property HorizSpaceIncrease: DNCommandID read __fakeFieldGet_HorizSpaceIncrease;
    {class} property HorizSpaceMakeEqual: DNCommandID read __fakeFieldGet_HorizSpaceMakeEqual;
    {class} property Paste: DNCommandID read __fakeFieldGet_Paste;
    {class} property Properties: DNCommandID read __fakeFieldGet_Properties;
    {class} property Redo: DNCommandID read __fakeFieldGet_Redo;
    {class} property MultiLevelRedo: DNCommandID read __fakeFieldGet_MultiLevelRedo;
    {class} property SelectAll: DNCommandID read __fakeFieldGet_SelectAll;
    {class} property SendBackward: DNCommandID read __fakeFieldGet_SendBackward;
    {class} property SendToBack: DNCommandID read __fakeFieldGet_SendToBack;
    {class} property SizeToControl: DNCommandID read __fakeFieldGet_SizeToControl;
    {class} property SizeToControlHeight: DNCommandID read __fakeFieldGet_SizeToControlHeight;
    {class} property SizeToControlWidth: DNCommandID read __fakeFieldGet_SizeToControlWidth;
    {class} property SizeToFit: DNCommandID read __fakeFieldGet_SizeToFit;
    {class} property SizeToGrid: DNCommandID read __fakeFieldGet_SizeToGrid;
    {class} property SnapToGrid: DNCommandID read __fakeFieldGet_SnapToGrid;
    {class} property TabOrder: DNCommandID read __fakeFieldGet_TabOrder;
    {class} property Undo: DNCommandID read __fakeFieldGet_Undo;
    {class} property MultiLevelUndo: DNCommandID read __fakeFieldGet_MultiLevelUndo;
    {class} property Ungroup: DNCommandID read __fakeFieldGet_Ungroup;
    {class} property VertSpaceConcatenate: DNCommandID read __fakeFieldGet_VertSpaceConcatenate;
    {class} property VertSpaceDecrease: DNCommandID read __fakeFieldGet_VertSpaceDecrease;
    {class} property VertSpaceIncrease: DNCommandID read __fakeFieldGet_VertSpaceIncrease;
    {class} property VertSpaceMakeEqual: DNCommandID read __fakeFieldGet_VertSpaceMakeEqual;
    {class} property ShowGrid: DNCommandID read __fakeFieldGet_ShowGrid;
    {class} property ViewGrid: DNCommandID read __fakeFieldGet_ViewGrid;
    {class} property Replace: DNCommandID read __fakeFieldGet_Replace;
    {class} property PropertiesWindow: DNCommandID read __fakeFieldGet_PropertiesWindow;
    {class} property LockControls: DNCommandID read __fakeFieldGet_LockControls;
    {class} property F1Help: DNCommandID read __fakeFieldGet_F1Help;
    {class} property ArrangeIcons: DNCommandID read __fakeFieldGet_ArrangeIcons;
    {class} property LineupIcons: DNCommandID read __fakeFieldGet_LineupIcons;
    {class} property ShowLargeIcons: DNCommandID read __fakeFieldGet_ShowLargeIcons;
    {class} property VerbFirst: DNCommandID read __fakeFieldGet_VerbFirst;
    {class} property VerbLast: DNCommandID read __fakeFieldGet_VerbLast;

  end;

  [DNTypeName('System.ComponentModel.Design.StandardCommands')]
  DNStandardCommands = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{7012F5D3-28F5-3F99-B0D5-3D026E6AE7A6}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNStandardCommands = class(TDNGenericImport<DNStandardCommandsClass, DNStandardCommands>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNStandardToolWindowsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{0B0C8A38-DBD6-50E7-A5D7-74A039D09CC3}']
  { constructors } 

    {class} function init: DNStandardToolWindows;

  { static fields getter & setter } 

   function __fakeFieldGet_ObjectBrowser: DDNC.System.Private.CoreLib.DNGuid;
   function __fakeFieldGet_OutputWindow: DDNC.System.Private.CoreLib.DNGuid;
   function __fakeFieldGet_ProjectExplorer: DDNC.System.Private.CoreLib.DNGuid;
   function __fakeFieldGet_PropertyBrowser: DDNC.System.Private.CoreLib.DNGuid;
   function __fakeFieldGet_RelatedLinks: DDNC.System.Private.CoreLib.DNGuid;
   function __fakeFieldGet_ServerExplorer: DDNC.System.Private.CoreLib.DNGuid;
   function __fakeFieldGet_TaskList: DDNC.System.Private.CoreLib.DNGuid;
   function __fakeFieldGet_Toolbox: DDNC.System.Private.CoreLib.DNGuid;

  { static fields } 

    {class} property ObjectBrowser: DDNC.System.Private.CoreLib.DNGuid read __fakeFieldGet_ObjectBrowser;
    {class} property OutputWindow: DDNC.System.Private.CoreLib.DNGuid read __fakeFieldGet_OutputWindow;
    {class} property ProjectExplorer: DDNC.System.Private.CoreLib.DNGuid read __fakeFieldGet_ProjectExplorer;
    {class} property PropertyBrowser: DDNC.System.Private.CoreLib.DNGuid read __fakeFieldGet_PropertyBrowser;
    {class} property RelatedLinks: DDNC.System.Private.CoreLib.DNGuid read __fakeFieldGet_RelatedLinks;
    {class} property ServerExplorer: DDNC.System.Private.CoreLib.DNGuid read __fakeFieldGet_ServerExplorer;
    {class} property TaskList: DDNC.System.Private.CoreLib.DNGuid read __fakeFieldGet_TaskList;
    {class} property Toolbox: DDNC.System.Private.CoreLib.DNGuid read __fakeFieldGet_Toolbox;

  end;

  [DNTypeName('System.ComponentModel.Design.StandardToolWindows')]
  DNStandardToolWindows = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{34366D1D-D3BF-3094-ACD0-69B348C380A4}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNStandardToolWindows = class(TDNGenericImport<DNStandardToolWindowsClass, DNStandardToolWindows>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNTypeDescriptionProviderServiceClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{0B8A0501-EE79-5C1C-B3C0-BF133876273A}']
  end;

  [DNTypeName('System.ComponentModel.Design.TypeDescriptionProviderService')]
  DNTypeDescriptionProviderService = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{36F1F8C5-2649-3860-A3E7-57014F048E75}']
  { methods } 

    function GetProvider(instance: DDNC.System.Private.CoreLib.DNObject): DNTypeDescriptionProvider; overload;
    function GetProvider(&type: DDNC.System.Private.CoreLib.DNType): DNTypeDescriptionProvider; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNTypeDescriptionProviderService = class(TDNGenericImport<DNTypeDescriptionProviderServiceClass, DNTypeDescriptionProviderService>) end;

  //-------------namespace: System.ComponentModel----------------
  DNEventDescriptorCollectionClass = interface(DNObjectClass)
  ['{09095D3A-8179-5FBA-92C8-5FCB110CD210}']
  { constructors } 

    {class} function init(events: TArray<DNEventDescriptor>): DNEventDescriptorCollection; overload;
    {class} function init(events: TArray<DNEventDescriptor>; readOnly: Boolean): DNEventDescriptorCollection; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNEventDescriptorCollection;

  { static fields } 

    {class} property Empty: DNEventDescriptorCollection read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.ComponentModel.EventDescriptorCollection')]
  DNEventDescriptorCollection = interface(DDNC.System.Private.CoreLib.DNICollection)
  ['{AF0D79A7-9297-3F08-A740-73813DF35A0B}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNEventDescriptor; overload;
    function get_Item(name: string): DNEventDescriptor; overload;

  { methods } 

    function Add(value: DNEventDescriptor): Int32;
    procedure Clear;
    function &Contains(value: DNEventDescriptor): Boolean;
    function Find(name: string; ignoreCase: Boolean): DNEventDescriptor;
    function IndexOf(value: DNEventDescriptor): Int32;
    procedure Insert(index: Int32; value: DNEventDescriptor);
    procedure Remove(value: DNEventDescriptor);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function Sort: DNEventDescriptorCollection; overload;
    function Sort(names: TArray<string>): DNEventDescriptorCollection; overload;
    function Sort(names: TArray<string>; comparer: DDNC.System.Private.CoreLib.DNIComparer): DNEventDescriptorCollection; overload;
    function Sort(comparer: DDNC.System.Private.CoreLib.DNIComparer): DNEventDescriptorCollection; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNEventDescriptor read get_Item; default;
    property Item[name: string]: DNEventDescriptor read get_Item; default;
  end;

  TDNEventDescriptorCollection = class(TDNGenericImport<DNEventDescriptorCollectionClass, DNEventDescriptorCollection>) end;

  //-------------namespace: System.ComponentModel----------------
  DNInstanceCreationEditorClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{7EF52CF7-C211-591B-8CE6-DC1D27DB2904}']
  end;

  [DNTypeName('System.ComponentModel.InstanceCreationEditor')]
  DNInstanceCreationEditor = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{EAFFDC6F-78EF-3F49-8C14-A8EAED53994B}']
  { getters & setters } 

    function get_Text: string;

  { methods } 

    function CreateInstance(context: DNITypeDescriptorContext; instanceType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Text: string read get_Text;
  end;

  TDNInstanceCreationEditor = class(TDNGenericImport<DNInstanceCreationEditorClass, DNInstanceCreationEditor>) end;

  //-------------namespace: System.ComponentModel----------------
  DNLicenseClass = interface(DNObjectClass)
  ['{0995EA7B-59DD-5C22-8312-B1F80FE9CC47}']
  end;

  [DNTypeName('System.ComponentModel.License')]
  DNLicense = interface(DDNC.System.Private.CoreLib.DNIDisposable)
  ['{2ECC1F6B-D9FE-324B-81B5-E290B24FC38A}']
  { getters & setters } 

    function get_LicenseKey: string;

  { methods } 

    procedure Dispose;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property LicenseKey: string read get_LicenseKey;
  end;

  TDNLicense = class(TDNGenericImport<DNLicenseClass, DNLicense>) end;

  //-------------namespace: System.ComponentModel----------------
  DNLicenseContextClass = interface(DNObjectClass)
  ['{E752C5A7-9CAB-5DBF-979A-5A73F4FE4ABE}']
  { constructors } 

    {class} function init: DNLicenseContext;

  end;

  [DNTypeName('System.ComponentModel.LicenseContext')]
  DNLicenseContext = interface(DDNC.System.ComponentModel.DNIServiceProvider)
  ['{89ACFC86-73C9-33D8-9EEE-3C9C78111408}']
  { getters & setters } 

    function get_UsageMode: DNLicenseUsageMode;

  { methods } 

    function GetSavedLicenseKey(&type: DDNC.System.Private.CoreLib.DNType; resourceAssembly: DDNC.System.Private.CoreLib.DNAssembly): string;
    function GetService(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    procedure SetSavedLicenseKey(&type: DDNC.System.Private.CoreLib.DNType; key: string);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property UsageMode: DNLicenseUsageMode read get_UsageMode;
  end;

  TDNLicenseContext = class(TDNGenericImport<DNLicenseContextClass, DNLicenseContext>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNDesigntimeLicenseContextClass = interface(DNLicenseContextClass)
  ['{C390517B-75ED-5A95-BB46-14582CFFF042}']
  { constructors } 

    {class} function init: DNDesigntimeLicenseContext;

  end;

  [DNTypeName('System.ComponentModel.Design.DesigntimeLicenseContext')]
  DNDesigntimeLicenseContext = interface(DNLicenseContext)
  ['{790707F3-3771-311D-8E62-F67AB3278CD8}']
  { getters & setters } 

    function get_UsageMode: DNLicenseUsageMode;

  { methods } 

    function GetSavedLicenseKey(&type: DDNC.System.Private.CoreLib.DNType; resourceAssembly: DDNC.System.Private.CoreLib.DNAssembly): string;
    procedure SetSavedLicenseKey(&type: DDNC.System.Private.CoreLib.DNType; key: string);
    function GetService(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property UsageMode: DNLicenseUsageMode read get_UsageMode;
  end;

  TDNDesigntimeLicenseContext = class(TDNGenericImport<DNDesigntimeLicenseContextClass, DNDesigntimeLicenseContext>) end;

  //-------------namespace: System.ComponentModel----------------
  DNLicenseManagerClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{3B2941D7-24B4-56A8-AB57-E99CF9EB8B1F}']
  { static getter & setter } 

    {class} function get_CurrentContext: DNLicenseContext;
    {class} procedure set_CurrentContext(value: DNLicenseContext);
    {class} function get_UsageMode: DNLicenseUsageMode;

  { static methods } 

    {class} function CreateWithContext(&type: DDNC.System.Private.CoreLib.DNType; creationContext: DNLicenseContext): DDNC.System.Private.CoreLib.DNObject; overload;
    {class} function CreateWithContext(&type: DDNC.System.Private.CoreLib.DNType; creationContext: DNLicenseContext; args: TArray<DDNC.System.Private.CoreLib.DNObject>): DDNC.System.Private.CoreLib.DNObject; overload;
    {class} function IsLicensed(&type: DDNC.System.Private.CoreLib.DNType): Boolean;
    {class} function IsValid(&type: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    {class} function IsValid(&type: DDNC.System.Private.CoreLib.DNType; instance: DDNC.System.Private.CoreLib.DNObject; out license: DNLicense): Boolean; overload;
    {class} procedure LockContext(contextUser: DDNC.System.Private.CoreLib.DNObject);
    {class} procedure UnlockContext(contextUser: DDNC.System.Private.CoreLib.DNObject);
    {class} procedure Validate(&type: DDNC.System.Private.CoreLib.DNType); overload;
    {class} function Validate(&type: DDNC.System.Private.CoreLib.DNType; instance: DDNC.System.Private.CoreLib.DNObject): DNLicense; overload;

  { static propertys } 

    {class} property CurrentContext: DNLicenseContext read get_CurrentContext write set_CurrentContext;
    {class} property UsageMode: DNLicenseUsageMode read get_UsageMode;
  end;

  [DNTypeName('System.ComponentModel.LicenseManager')]
  DNLicenseManager = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{EF2395ED-9157-3C4F-8DEF-638D1F38C4DB}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNLicenseManager = class(TDNGenericImport<DNLicenseManagerClass, DNLicenseManager>) end;

  //-------------namespace: System.ComponentModel----------------
  DNLicenseProviderClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{1263ED45-61A8-5081-B066-AD64EA288913}']
  end;

  [DNTypeName('System.ComponentModel.LicenseProvider')]
  DNLicenseProvider = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{047DA1F0-E346-35D9-9BBE-0BCEA0DF5A76}']
  { methods } 

    function GetLicense(context: DNLicenseContext; &type: DDNC.System.Private.CoreLib.DNType; instance: DDNC.System.Private.CoreLib.DNObject; allowExceptions: Boolean): DNLicense;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNLicenseProvider = class(TDNGenericImport<DNLicenseProviderClass, DNLicenseProvider>) end;

  //-------------namespace: System.ComponentModel----------------
  DNLicFileLicenseProviderClass = interface(DNLicenseProviderClass)
  ['{4C189340-CD34-5D20-9D9B-A00860371424}']
  { constructors } 

    {class} function init: DNLicFileLicenseProvider;

  end;

  [DNTypeName('System.ComponentModel.LicFileLicenseProvider')]
  DNLicFileLicenseProvider = interface(DNLicenseProvider)
  ['{CBAA80E7-4D80-3EF7-9E2B-EFE97001A617}']
  { methods } 

    function GetLicense(context: DNLicenseContext; &type: DDNC.System.Private.CoreLib.DNType; instance: DDNC.System.Private.CoreLib.DNObject; allowExceptions: Boolean): DNLicense;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNLicFileLicenseProvider = class(TDNGenericImport<DNLicFileLicenseProviderClass, DNLicFileLicenseProvider>) end;

  //-------------namespace: System.ComponentModel----------------
  DNListSortDescriptionClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{A9F2BE63-F25E-5BC3-8126-45AD47C75C61}']
  { constructors } 

    {class} function init(&property: DNPropertyDescriptor; direction: DNListSortDirection): DNListSortDescription;

  end;

  [DNTypeName('System.ComponentModel.ListSortDescription')]
  DNListSortDescription = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{3330B1C4-5E38-3E01-9A5D-6C4BDC4F4CE5}']
  { getters & setters } 

    function get_PropertyDescriptor: DNPropertyDescriptor;
    procedure set_PropertyDescriptor(value: DNPropertyDescriptor);
    function get_SortDirection: DNListSortDirection;
    procedure set_SortDirection(value: DNListSortDirection);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property PropertyDescriptor: DNPropertyDescriptor read get_PropertyDescriptor write set_PropertyDescriptor;
    property SortDirection: DNListSortDirection read get_SortDirection write set_SortDirection;
  end;

  TDNListSortDescription = class(TDNGenericImport<DNListSortDescriptionClass, DNListSortDescription>) end;

  //-------------namespace: System.ComponentModel----------------
  DNListSortDescriptionCollectionClass = interface(DNObjectClass)
  ['{ADDD078F-BA44-583F-B171-AAD5EF88F5CF}']
  { constructors } 

    {class} function init: DNListSortDescriptionCollection; overload;
    {class} function init(sorts: TArray<DNListSortDescription>): DNListSortDescriptionCollection; overload;

  end;

  [DNTypeName('System.ComponentModel.ListSortDescriptionCollection')]
  DNListSortDescriptionCollection = interface(DDNC.System.Private.CoreLib.DNIList)
  ['{43568949-43EB-359A-AD0A-C8DA64E90403}']
  { getters & setters } 

    function get_Item(index: Int32): DNListSortDescription;
    procedure set_Item(index: Int32; value: DNListSortDescription);
    function get_Count: Int32;

  { methods } 

    function &Contains(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IndexOf(value: DDNC.System.Private.CoreLib.DNObject): Int32;
    procedure CopyTo(&array: DDNC.System.Private.CoreLib.DNArray; index: Int32);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[index: Int32]: DNListSortDescription read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNListSortDescriptionCollection = class(TDNGenericImport<DNListSortDescriptionCollectionClass, DNListSortDescriptionCollection>) end;

  //-------------namespace: System.ComponentModel----------------
  DNMarshalByValueComponentClass = interface(DNObjectClass)
  ['{5BDA50EE-70A6-5B88-B257-7C457C975FD7}']
  { constructors } 

    {class} function init: DNMarshalByValueComponent;

  end;

  [DNTypeName('System.ComponentModel.MarshalByValueComponent')]
  DNMarshalByValueComponent = interface(DDNC.System.ComponentModel.Primitives.DNIComponent)
  ['{81A588E1-B8AC-3BD5-9F18-8A61A0BFAC6B}']
  { getters & setters } 

    function get_Site: DDNC.System.ComponentModel.Primitives.DNISite;
    procedure set_Site(value: DDNC.System.ComponentModel.Primitives.DNISite);
    function get_Container: DDNC.System.ComponentModel.Primitives.DNIContainer;
    function get_DesignMode: Boolean;

  { events } 

    procedure add_Disposed(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_Disposed(value: DDNC.System.Private.CoreLib.DNEventHandler);

  { methods } 

    procedure Dispose;
    function GetService(service: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Site: DDNC.System.ComponentModel.Primitives.DNISite read get_Site write set_Site;
    property Container: DDNC.System.ComponentModel.Primitives.DNIContainer read get_Container;
    property DesignMode: Boolean read get_DesignMode;
  end;

  TDNMarshalByValueComponent = class(TDNGenericImport<DNMarshalByValueComponentClass, DNMarshalByValueComponent>) end;

  //-------------namespace: System.ComponentModel----------------
  DNMaskedTextProviderClass = interface(DNObjectClass)
  ['{1215958A-D456-5D7F-A817-DBBD73EAC414}']
  { static getter & setter } 

    {class} function get_DefaultPasswordChar: Char;
    {class} function get_InvalidIndex: Int32;

  { constructors } 

    {class} function init(mask: string): DNMaskedTextProvider; overload;
    {class} function init(mask: string; restrictToAscii: Boolean): DNMaskedTextProvider; overload;
    {class} function init(mask: string; culture: DDNC.System.Private.CoreLib.DNCultureInfo): DNMaskedTextProvider; overload;
    {class} function init(mask: string; culture: DDNC.System.Private.CoreLib.DNCultureInfo; restrictToAscii: Boolean): DNMaskedTextProvider; overload;
    {class} function init(mask: string; passwordChar: Char; allowPromptAsInput: Boolean): DNMaskedTextProvider; overload;
    {class} function init(mask: string; culture: DDNC.System.Private.CoreLib.DNCultureInfo; passwordChar: Char; allowPromptAsInput: Boolean): DNMaskedTextProvider; overload;
    {class} function init(mask: string; culture: DDNC.System.Private.CoreLib.DNCultureInfo; allowPromptAsInput: Boolean; promptChar: Char; passwordChar: Char; restrictToAscii: Boolean): DNMaskedTextProvider; overload;

  { static methods } 

    {class} function GetOperationResultFromHint(hint: DNMaskedTextResultHint): Boolean;
    {class} function IsValidInputChar(c: Char): Boolean;
    {class} function IsValidMaskChar(c: Char): Boolean;
    {class} function IsValidPasswordChar(c: Char): Boolean;

  { static propertys } 

    {class} property DefaultPasswordChar: Char read get_DefaultPasswordChar;
    {class} property InvalidIndex: Int32 read get_InvalidIndex;
  end;

  [DNTypeName('System.ComponentModel.MaskedTextProvider')]
  DNMaskedTextProvider = interface(DDNC.System.Private.CoreLib.DNICloneable)
  ['{CF2A387D-B370-3572-9CBD-D7037DD3FC3E}']
  { getters & setters } 

    function get_AllowPromptAsInput: Boolean;
    function get_AssignedEditPositionCount: Int32;
    function get_AvailableEditPositionCount: Int32;
    function get_Culture: DDNC.System.Private.CoreLib.DNCultureInfo;
    function get_EditPositionCount: Int32;
    function get_EditPositions: DDNC.System.Private.CoreLib.DNIEnumerator;
    function get_IncludeLiterals: Boolean;
    procedure set_IncludeLiterals(value: Boolean);
    function get_IncludePrompt: Boolean;
    procedure set_IncludePrompt(value: Boolean);
    function get_AsciiOnly: Boolean;
    function get_IsPassword: Boolean;
    procedure set_IsPassword(value: Boolean);
    function get_LastAssignedPosition: Int32;
    function get_Length: Int32;
    function get_Mask: string;
    function get_MaskCompleted: Boolean;
    function get_MaskFull: Boolean;
    function get_PasswordChar: Char;
    procedure set_PasswordChar(value: Char);
    function get_PromptChar: Char;
    procedure set_PromptChar(value: Char);
    function get_ResetOnPrompt: Boolean;
    procedure set_ResetOnPrompt(value: Boolean);
    function get_ResetOnSpace: Boolean;
    procedure set_ResetOnSpace(value: Boolean);
    function get_SkipLiterals: Boolean;
    procedure set_SkipLiterals(value: Boolean);
    function get_Item(index: Int32): Char;

  { methods } 

    function Replace(input: string; position: Int32; out testPosition: Int32; out resultHint: DNMaskedTextResultHint): Boolean; overload;
    function Replace(input: string; startPosition: Int32; endPosition: Int32; out testPosition: Int32; out resultHint: DNMaskedTextResultHint): Boolean; overload;
    function &Set(input: string): Boolean; overload;
    function &Set(input: string; out testPosition: Int32; out resultHint: DNMaskedTextResultHint): Boolean; overload;
    function ToDisplayString: string;
    function ToString: string; overload;
    function ToString(ignorePasswordChar: Boolean): string; overload;
    function ToString(startPosition: Int32; length: Int32): string; overload;
    function ToString(ignorePasswordChar: Boolean; startPosition: Int32; length: Int32): string; overload;
    function ToString(includePrompt: Boolean; includeLiterals: Boolean): string; overload;
    function ToString(includePrompt: Boolean; includeLiterals: Boolean; startPosition: Int32; length: Int32): string; overload;
    function ToString(ignorePasswordChar: Boolean; includePrompt: Boolean; includeLiterals: Boolean; startPosition: Int32; length: Int32): string; overload;
    function VerifyChar(input: Char; position: Int32; out hint: DNMaskedTextResultHint): Boolean;
    function VerifyEscapeChar(input: Char; position: Int32): Boolean;
    function VerifyString(input: string): Boolean; overload;
    function VerifyString(input: string; out testPosition: Int32; out resultHint: DNMaskedTextResultHint): Boolean; overload;
    function Clone: DDNC.System.Private.CoreLib.DNObject;
    function Add(input: Char): Boolean; overload;
    function Add(input: Char; out testPosition: Int32; out resultHint: DNMaskedTextResultHint): Boolean; overload;
    function Add(input: string): Boolean; overload;
    function Add(input: string; out testPosition: Int32; out resultHint: DNMaskedTextResultHint): Boolean; overload;
    procedure Clear; overload;
    procedure Clear(out resultHint: DNMaskedTextResultHint); overload;
    function FindAssignedEditPositionFrom(position: Int32; direction: Boolean): Int32;
    function FindAssignedEditPositionInRange(startPosition: Int32; endPosition: Int32; direction: Boolean): Int32;
    function FindEditPositionFrom(position: Int32; direction: Boolean): Int32;
    function FindEditPositionInRange(startPosition: Int32; endPosition: Int32; direction: Boolean): Int32;
    function FindNonEditPositionFrom(position: Int32; direction: Boolean): Int32;
    function FindNonEditPositionInRange(startPosition: Int32; endPosition: Int32; direction: Boolean): Int32;
    function FindUnassignedEditPositionFrom(position: Int32; direction: Boolean): Int32;
    function FindUnassignedEditPositionInRange(startPosition: Int32; endPosition: Int32; direction: Boolean): Int32;
    function InsertAt(input: Char; position: Int32): Boolean; overload;
    function InsertAt(input: Char; position: Int32; out testPosition: Int32; out resultHint: DNMaskedTextResultHint): Boolean; overload;
    function InsertAt(input: string; position: Int32): Boolean; overload;
    function InsertAt(input: string; position: Int32; out testPosition: Int32; out resultHint: DNMaskedTextResultHint): Boolean; overload;
    function IsAvailablePosition(position: Int32): Boolean;
    function IsEditPosition(position: Int32): Boolean;
    function Remove: Boolean; overload;
    function Remove(out testPosition: Int32; out resultHint: DNMaskedTextResultHint): Boolean; overload;
    function RemoveAt(position: Int32): Boolean; overload;
    function RemoveAt(startPosition: Int32; endPosition: Int32): Boolean; overload;
    function RemoveAt(startPosition: Int32; endPosition: Int32; out testPosition: Int32; out resultHint: DNMaskedTextResultHint): Boolean; overload;
    function Replace(input: Char; position: Int32): Boolean; overload;
    function Replace(input: Char; position: Int32; out testPosition: Int32; out resultHint: DNMaskedTextResultHint): Boolean; overload;
    function Replace(input: Char; startPosition: Int32; endPosition: Int32; out testPosition: Int32; out resultHint: DNMaskedTextResultHint): Boolean; overload;
    function Replace(input: string; position: Int32): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property AllowPromptAsInput: Boolean read get_AllowPromptAsInput;
    property AssignedEditPositionCount: Int32 read get_AssignedEditPositionCount;
    property AvailableEditPositionCount: Int32 read get_AvailableEditPositionCount;
    property Culture: DDNC.System.Private.CoreLib.DNCultureInfo read get_Culture;
    property EditPositionCount: Int32 read get_EditPositionCount;
    property EditPositions: DDNC.System.Private.CoreLib.DNIEnumerator read get_EditPositions;
    property IncludeLiterals: Boolean read get_IncludeLiterals write set_IncludeLiterals;
    property IncludePrompt: Boolean read get_IncludePrompt write set_IncludePrompt;
    property AsciiOnly: Boolean read get_AsciiOnly;
    property IsPassword: Boolean read get_IsPassword write set_IsPassword;
    property LastAssignedPosition: Int32 read get_LastAssignedPosition;
    property Length: Int32 read get_Length;
    property Mask: string read get_Mask;
    property MaskCompleted: Boolean read get_MaskCompleted;
    property MaskFull: Boolean read get_MaskFull;
    property PasswordChar: Char read get_PasswordChar write set_PasswordChar;
    property PromptChar: Char read get_PromptChar write set_PromptChar;
    property ResetOnPrompt: Boolean read get_ResetOnPrompt write set_ResetOnPrompt;
    property ResetOnSpace: Boolean read get_ResetOnSpace write set_ResetOnSpace;
    property SkipLiterals: Boolean read get_SkipLiterals write set_SkipLiterals;
    property Item[index: Int32]: Char read get_Item; default;
  end;

  TDNMaskedTextProvider = class(TDNGenericImport<DNMaskedTextProviderClass, DNMaskedTextProvider>) end;

  //-------------namespace: System.ComponentModel----------------
  DNMemberDescriptorClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{5B077737-0F17-5752-AD25-BBCF8ABF736B}']
  end;

  [DNTypeName('System.ComponentModel.MemberDescriptor')]
  DNMemberDescriptor = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{2D29BD4B-62FF-31F3-B6C5-07B71AC485FE}']
  { getters & setters } 

    function get_Attributes: DNAttributeCollection;
    function get_Category: string;
    function get_Description: string;
    function get_IsBrowsable: Boolean;
    function get_Name: string;
    function get_DesignTimeOnly: Boolean;
    function get_DisplayName: string;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Attributes: DNAttributeCollection read get_Attributes;
    property Category: string read get_Category;
    property Description: string read get_Description;
    property IsBrowsable: Boolean read get_IsBrowsable;
    property Name: string read get_Name;
    property DesignTimeOnly: Boolean read get_DesignTimeOnly;
    property DisplayName: string read get_DisplayName;
  end;

  TDNMemberDescriptor = class(TDNGenericImport<DNMemberDescriptorClass, DNMemberDescriptor>) end;

  //-------------namespace: System.ComponentModel----------------
  DNEventDescriptorClass = interface(DNMemberDescriptorClass)
  ['{0AFB629B-F6D0-52AE-8D7D-FBB32C7BEF96}']
  end;

  [DNTypeName('System.ComponentModel.EventDescriptor')]
  DNEventDescriptor = interface(DNMemberDescriptor)
  ['{FF23305D-3628-36B8-81B1-BC7039306A71}']
  { getters & setters } 

    function get_ComponentType: DDNC.System.Private.CoreLib.DNType;
    function get_EventType: DDNC.System.Private.CoreLib.DNType;
    function get_IsMulticast: Boolean;
    function get_Attributes: DNAttributeCollection;
    function get_Category: string;
    function get_Description: string;
    function get_IsBrowsable: Boolean;
    function get_Name: string;
    function get_DesignTimeOnly: Boolean;
    function get_DisplayName: string;

  { methods } 

    procedure AddEventHandler(component: DDNC.System.Private.CoreLib.DNObject; value: DDNC.System.Private.CoreLib.DNDelegate);
    procedure RemoveEventHandler(component: DDNC.System.Private.CoreLib.DNObject; value: DDNC.System.Private.CoreLib.DNDelegate);
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property ComponentType: DDNC.System.Private.CoreLib.DNType read get_ComponentType;
    property EventType: DDNC.System.Private.CoreLib.DNType read get_EventType;
    property IsMulticast: Boolean read get_IsMulticast;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Category: string read get_Category;
    property Description: string read get_Description;
    property IsBrowsable: Boolean read get_IsBrowsable;
    property Name: string read get_Name;
    property DesignTimeOnly: Boolean read get_DesignTimeOnly;
    property DisplayName: string read get_DisplayName;
  end;

  TDNEventDescriptor = class(TDNGenericImport<DNEventDescriptorClass, DNEventDescriptor>) end;

  //-------------namespace: System.ComponentModel----------------
  DNPropertyDescriptorClass = interface(DNMemberDescriptorClass)
  ['{C5C343EC-8360-585C-A838-DD17D7938784}']
  end;

  [DNTypeName('System.ComponentModel.PropertyDescriptor')]
  DNPropertyDescriptor = interface(DNMemberDescriptor)
  ['{5FF6C634-2EE8-3645-86C3-87841110DEB7}']
  { getters & setters } 

    function get_ComponentType: DDNC.System.Private.CoreLib.DNType;
    function get_Converter: DNTypeConverter;
    function get_IsLocalizable: Boolean;
    function get_IsReadOnly: Boolean;
    function get_SerializationVisibility: DDNC.System.ComponentModel.Primitives.DNDesignerSerializationVisibility;
    function get_PropertyType: DDNC.System.Private.CoreLib.DNType;
    function get_SupportsChangeEvents: Boolean;
    function get_Attributes: DNAttributeCollection;
    function get_Category: string;
    function get_Description: string;
    function get_IsBrowsable: Boolean;
    function get_Name: string;
    function get_DesignTimeOnly: Boolean;
    function get_DisplayName: string;

  { methods } 

    procedure AddValueChanged(component: DDNC.System.Private.CoreLib.DNObject; handler: DDNC.System.Private.CoreLib.DNEventHandler);
    function CanResetValue(component: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetChildProperties: DNPropertyDescriptorCollection; overload;
    function GetChildProperties(filter: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetChildProperties(instance: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetChildProperties(instance: DDNC.System.Private.CoreLib.DNObject; filter: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetEditor(editorBaseType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    function GetHashCode: Int32;
    function GetValue(component: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject;
    procedure RemoveValueChanged(component: DDNC.System.Private.CoreLib.DNObject; handler: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure ResetValue(component: DDNC.System.Private.CoreLib.DNObject);
    procedure SetValue(component: DDNC.System.Private.CoreLib.DNObject; value: DDNC.System.Private.CoreLib.DNObject);
    function ShouldSerializeValue(component: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property ComponentType: DDNC.System.Private.CoreLib.DNType read get_ComponentType;
    property Converter: DNTypeConverter read get_Converter;
    property IsLocalizable: Boolean read get_IsLocalizable;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property SerializationVisibility: DDNC.System.ComponentModel.Primitives.DNDesignerSerializationVisibility read get_SerializationVisibility;
    property PropertyType: DDNC.System.Private.CoreLib.DNType read get_PropertyType;
    property SupportsChangeEvents: Boolean read get_SupportsChangeEvents;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Category: string read get_Category;
    property Description: string read get_Description;
    property IsBrowsable: Boolean read get_IsBrowsable;
    property Name: string read get_Name;
    property DesignTimeOnly: Boolean read get_DesignTimeOnly;
    property DisplayName: string read get_DisplayName;
  end;

  TDNPropertyDescriptor = class(TDNGenericImport<DNPropertyDescriptorClass, DNPropertyDescriptor>) end;

  //-------------namespace: System.ComponentModel----------------
  DNPropertyDescriptorCollectionClass = interface(DNObjectClass)
  ['{23622175-A8A8-5CAC-A1F0-91BC4E205176}']
  { constructors } 

    {class} function init(properties: TArray<DNPropertyDescriptor>): DNPropertyDescriptorCollection; overload;
    {class} function init(properties: TArray<DNPropertyDescriptor>; readOnly: Boolean): DNPropertyDescriptorCollection; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNPropertyDescriptorCollection;

  { static fields } 

    {class} property Empty: DNPropertyDescriptorCollection read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.ComponentModel.PropertyDescriptorCollection')]
  DNPropertyDescriptorCollection = interface(DDNC.System.Private.CoreLib.DNICollection)
  ['{C132D481-C348-3F9B-BDF2-FE2861AB8703}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNPropertyDescriptor; overload;
    function get_Item(name: string): DNPropertyDescriptor; overload;

  { methods } 

    function Add(value: DNPropertyDescriptor): Int32;
    procedure Clear;
    function &Contains(value: DNPropertyDescriptor): Boolean;
    procedure CopyTo(&array: DDNC.System.Private.CoreLib.DNArray; index: Int32);
    function Find(name: string; ignoreCase: Boolean): DNPropertyDescriptor;
    function IndexOf(value: DNPropertyDescriptor): Int32;
    procedure Insert(index: Int32; value: DNPropertyDescriptor);
    procedure Remove(value: DNPropertyDescriptor);
    procedure RemoveAt(index: Int32);
    function Sort: DNPropertyDescriptorCollection; overload;
    function Sort(names: TArray<string>): DNPropertyDescriptorCollection; overload;
    function Sort(names: TArray<string>; comparer: DDNC.System.Private.CoreLib.DNIComparer): DNPropertyDescriptorCollection; overload;
    function Sort(comparer: DDNC.System.Private.CoreLib.DNIComparer): DNPropertyDescriptorCollection; overload;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNPropertyDescriptor read get_Item; default;
    property Item[name: string]: DNPropertyDescriptor read get_Item; default;
  end;

  TDNPropertyDescriptorCollection = class(TDNGenericImport<DNPropertyDescriptorCollectionClass, DNPropertyDescriptorCollection>) end;

  //-------------namespace: System.ComponentModel----------------
  DNSyntaxCheckClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{A2009849-EE9C-5658-B3D4-863EB99CB076}']
  { static methods } 

    {class} function CheckMachineName(value: string): Boolean;
    {class} function CheckPath(value: string): Boolean;
    {class} function CheckRootedPath(value: string): Boolean;

  end;

  [DNTypeName('System.ComponentModel.SyntaxCheck')]
  DNSyntaxCheck = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{70BB3480-83DE-31DA-9931-F2412C71CB22}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSyntaxCheck = class(TDNGenericImport<DNSyntaxCheckClass, DNSyntaxCheck>) end;

  //-------------namespace: System.ComponentModel----------------
  DNTypeConverterClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{FA462598-E9A1-562F-8DC3-09AE84F5B171}']
  { constructors } 

    {class} function init: DNTypeConverter;

  end;

  [DNTypeName('System.ComponentModel.TypeConverter')]
  DNTypeConverter = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{137E6091-D46C-3FDC-91F4-23B963CD8963}']
  { methods } 

    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNTypeConverter = class(TDNGenericImport<DNTypeConverterClass, DNTypeConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNTypeConverter_StandardValuesCollectionClass = interface(DNObjectClass)
  ['{D3F97A00-297E-5C3B-B625-98BD3A1647ED}']
  { constructors } 

    {class} function init(values: DDNC.System.Private.CoreLib.DNICollection): DNTypeConverter_StandardValuesCollection;

  end;

  [DNTypeName('System.ComponentModel.TypeConverter+StandardValuesCollection')]
  DNTypeConverter_StandardValuesCollection = interface(DDNC.System.Private.CoreLib.DNICollection)
  ['{27F07E4D-7785-3424-9ECF-8A96CA22FAFE}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    procedure CopyTo(&array: DDNC.System.Private.CoreLib.DNArray; index: Int32);
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DDNC.System.Private.CoreLib.DNObject read get_Item; default;
  end;

  TDNTypeConverter_StandardValuesCollection = class(TDNGenericImport<DNTypeConverter_StandardValuesCollectionClass, DNTypeConverter_StandardValuesCollection>) end;

  //-------------namespace: System.ComponentModel----------------
  DNBaseNumberConverterClass = interface(DNTypeConverterClass)
  ['{D07B179E-58BB-5882-90D7-9CABFE33783D}']
  end;

  [DNTypeName('System.ComponentModel.BaseNumberConverter')]
  DNBaseNumberConverter = interface(DNTypeConverter)
  ['{E778DFB8-DA53-3F8F-8FFF-A02F71B07A0A}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNBaseNumberConverter = class(TDNGenericImport<DNBaseNumberConverterClass, DNBaseNumberConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNByteConverterClass = interface(DNBaseNumberConverterClass)
  ['{B21CFEB6-2FE0-518B-BD76-560FA3FDE654}']
  { constructors } 

    {class} function init: DNByteConverter;

  end;

  [DNTypeName('System.ComponentModel.ByteConverter')]
  DNByteConverter = interface(DNBaseNumberConverter)
  ['{62F917D2-7359-396A-AD68-3791CC2F2FFB}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNByteConverter = class(TDNGenericImport<DNByteConverterClass, DNByteConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDecimalConverterClass = interface(DNBaseNumberConverterClass)
  ['{34BC8F42-8FE2-58B5-A2A4-DF2A12ED2A39}']
  { constructors } 

    {class} function init: DNDecimalConverter;

  end;

  [DNTypeName('System.ComponentModel.DecimalConverter')]
  DNDecimalConverter = interface(DNBaseNumberConverter)
  ['{DDDCE0E2-620A-327B-B712-070BEDE78536}']
  { methods } 

    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNDecimalConverter = class(TDNGenericImport<DNDecimalConverterClass, DNDecimalConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDoubleConverterClass = interface(DNBaseNumberConverterClass)
  ['{9A242A50-02DE-5DB7-BE22-1759D84DAC3A}']
  { constructors } 

    {class} function init: DNDoubleConverter;

  end;

  [DNTypeName('System.ComponentModel.DoubleConverter')]
  DNDoubleConverter = interface(DNBaseNumberConverter)
  ['{F8CFD5A6-B68D-369C-B869-3A37C5149D21}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNDoubleConverter = class(TDNGenericImport<DNDoubleConverterClass, DNDoubleConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNInt16ConverterClass = interface(DNBaseNumberConverterClass)
  ['{BFAE895B-D26B-59D4-9B47-A32B75A7EE0A}']
  { constructors } 

    {class} function init: DNInt16Converter;

  end;

  [DNTypeName('System.ComponentModel.Int16Converter')]
  DNInt16Converter = interface(DNBaseNumberConverter)
  ['{B31C5068-EC06-3D92-B178-49192B626529}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNInt16Converter = class(TDNGenericImport<DNInt16ConverterClass, DNInt16Converter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNInt32ConverterClass = interface(DNBaseNumberConverterClass)
  ['{C31CED3A-E6DD-534A-99F4-B77A6E0BDBA6}']
  { constructors } 

    {class} function init: DNInt32Converter;

  end;

  [DNTypeName('System.ComponentModel.Int32Converter')]
  DNInt32Converter = interface(DNBaseNumberConverter)
  ['{1908F860-FD22-35B7-B30B-6DAE911FB695}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNInt32Converter = class(TDNGenericImport<DNInt32ConverterClass, DNInt32Converter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNInt64ConverterClass = interface(DNBaseNumberConverterClass)
  ['{5619AE7C-8C20-5FE8-80E7-09ECDA302870}']
  { constructors } 

    {class} function init: DNInt64Converter;

  end;

  [DNTypeName('System.ComponentModel.Int64Converter')]
  DNInt64Converter = interface(DNBaseNumberConverter)
  ['{B4865BDC-B14D-3438-AF6A-CD095DEDE323}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNInt64Converter = class(TDNGenericImport<DNInt64ConverterClass, DNInt64Converter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNSByteConverterClass = interface(DNBaseNumberConverterClass)
  ['{B74D3218-7683-55A1-ADD1-1A2AC1A578F7}']
  { constructors } 

    {class} function init: DNSByteConverter;

  end;

  [DNTypeName('System.ComponentModel.SByteConverter')]
  DNSByteConverter = interface(DNBaseNumberConverter)
  ['{5650AFB9-AE99-330E-918A-61A768D15679}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSByteConverter = class(TDNGenericImport<DNSByteConverterClass, DNSByteConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNSingleConverterClass = interface(DNBaseNumberConverterClass)
  ['{7F59DD1C-6892-53E6-99BA-B27020D678EA}']
  { constructors } 

    {class} function init: DNSingleConverter;

  end;

  [DNTypeName('System.ComponentModel.SingleConverter')]
  DNSingleConverter = interface(DNBaseNumberConverter)
  ['{6F20C8BB-AFC4-32A9-A459-42CD6D14B626}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSingleConverter = class(TDNGenericImport<DNSingleConverterClass, DNSingleConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNUInt16ConverterClass = interface(DNBaseNumberConverterClass)
  ['{BAE58B33-23D4-5029-9328-E68F253ED25F}']
  { constructors } 

    {class} function init: DNUInt16Converter;

  end;

  [DNTypeName('System.ComponentModel.UInt16Converter')]
  DNUInt16Converter = interface(DNBaseNumberConverter)
  ['{E206A901-7AF3-306B-926C-27B8152B1192}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNUInt16Converter = class(TDNGenericImport<DNUInt16ConverterClass, DNUInt16Converter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNUInt32ConverterClass = interface(DNBaseNumberConverterClass)
  ['{B518BDDD-027C-5E33-9952-A4EDBD4C486D}']
  { constructors } 

    {class} function init: DNUInt32Converter;

  end;

  [DNTypeName('System.ComponentModel.UInt32Converter')]
  DNUInt32Converter = interface(DNBaseNumberConverter)
  ['{780A3E84-FCD9-3ED0-A4AD-62E160C2B1B9}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNUInt32Converter = class(TDNGenericImport<DNUInt32ConverterClass, DNUInt32Converter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNUInt64ConverterClass = interface(DNBaseNumberConverterClass)
  ['{F92422B9-F54F-57DB-BBAD-A1DF8316BD88}']
  { constructors } 

    {class} function init: DNUInt64Converter;

  end;

  [DNTypeName('System.ComponentModel.UInt64Converter')]
  DNUInt64Converter = interface(DNBaseNumberConverter)
  ['{6A2F630D-CB85-37A9-9570-B38AC23B4663}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNUInt64Converter = class(TDNGenericImport<DNUInt64ConverterClass, DNUInt64Converter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNBooleanConverterClass = interface(DNTypeConverterClass)
  ['{83F7300F-E0A3-508E-867F-CB0C4BC13D83}']
  { constructors } 

    {class} function init: DNBooleanConverter;

  end;

  [DNTypeName('System.ComponentModel.BooleanConverter')]
  DNBooleanConverter = interface(DNTypeConverter)
  ['{C3819516-7F4E-307A-911D-285430CD245D}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNBooleanConverter = class(TDNGenericImport<DNBooleanConverterClass, DNBooleanConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNCharConverterClass = interface(DNTypeConverterClass)
  ['{AECC672F-AFAD-5A0A-95D4-88013701B4BC}']
  { constructors } 

    {class} function init: DNCharConverter;

  end;

  [DNTypeName('System.ComponentModel.CharConverter')]
  DNCharConverter = interface(DNTypeConverter)
  ['{10827FB6-D27B-3A5E-A482-27934A081BF9}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNCharConverter = class(TDNGenericImport<DNCharConverterClass, DNCharConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNCollectionConverterClass = interface(DNTypeConverterClass)
  ['{CC71876D-5F65-5B56-915C-CB27119EE407}']
  { constructors } 

    {class} function init: DNCollectionConverter;

  end;

  [DNTypeName('System.ComponentModel.CollectionConverter')]
  DNCollectionConverter = interface(DNTypeConverter)
  ['{E846584A-F9AA-3D7C-8E66-51C55F8D2AFF}']
  { methods } 

    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNCollectionConverter = class(TDNGenericImport<DNCollectionConverterClass, DNCollectionConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNArrayConverterClass = interface(DNCollectionConverterClass)
  ['{5D6FD411-2FC2-5DA3-BBA1-03025C84B1D7}']
  { constructors } 

    {class} function init: DNArrayConverter;

  end;

  [DNTypeName('System.ComponentModel.ArrayConverter')]
  DNArrayConverter = interface(DNCollectionConverter)
  ['{27DB4C57-4FDD-310A-BEFE-5F40AF6A893A}']
  { methods } 

    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNArrayConverter = class(TDNGenericImport<DNArrayConverterClass, DNArrayConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNCultureInfoConverterClass = interface(DNTypeConverterClass)
  ['{CE52A18F-B933-5560-90F9-7EC0AEFE3FF3}']
  { constructors } 

    {class} function init: DNCultureInfoConverter;

  end;

  [DNTypeName('System.ComponentModel.CultureInfoConverter')]
  DNCultureInfoConverter = interface(DNTypeConverter)
  ['{5752F7D1-E625-3187-B783-03E72881DC4C}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNCultureInfoConverter = class(TDNGenericImport<DNCultureInfoConverterClass, DNCultureInfoConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDateTimeConverterClass = interface(DNTypeConverterClass)
  ['{4DF7AC05-6C83-5218-A733-9C64B9D012DA}']
  { constructors } 

    {class} function init: DNDateTimeConverter;

  end;

  [DNTypeName('System.ComponentModel.DateTimeConverter')]
  DNDateTimeConverter = interface(DNTypeConverter)
  ['{CD420A03-271F-3F05-9A0E-17D1F5DC7A1D}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNDateTimeConverter = class(TDNGenericImport<DNDateTimeConverterClass, DNDateTimeConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDateTimeOffsetConverterClass = interface(DNTypeConverterClass)
  ['{437ECD97-15F1-54A4-A6B6-AC613E279EED}']
  { constructors } 

    {class} function init: DNDateTimeOffsetConverter;

  end;

  [DNTypeName('System.ComponentModel.DateTimeOffsetConverter')]
  DNDateTimeOffsetConverter = interface(DNTypeConverter)
  ['{FE314789-9B3F-33AD-B076-0966FA5E6A2E}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNDateTimeOffsetConverter = class(TDNGenericImport<DNDateTimeOffsetConverterClass, DNDateTimeOffsetConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNEnumConverterClass = interface(DNTypeConverterClass)
  ['{93A2D6C3-BFD3-56E9-B52F-8A0A06E7397C}']
  { constructors } 

    {class} function init(&type: DDNC.System.Private.CoreLib.DNType): DNEnumConverter;

  end;

  [DNTypeName('System.ComponentModel.EnumConverter')]
  DNEnumConverter = interface(DNTypeConverter)
  ['{6DA1DA38-E97E-38E7-B195-DBFA5567FC88}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNEnumConverter = class(TDNGenericImport<DNEnumConverterClass, DNEnumConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNExpandableObjectConverterClass = interface(DNTypeConverterClass)
  ['{BB978238-F79E-5E25-9A88-4B8153AB91C8}']
  { constructors } 

    {class} function init: DNExpandableObjectConverter;

  end;

  [DNTypeName('System.ComponentModel.ExpandableObjectConverter')]
  DNExpandableObjectConverter = interface(DNTypeConverter)
  ['{6C82E11B-2F4B-3888-A43E-0355D62C193D}']
  { methods } 

    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNExpandableObjectConverter = class(TDNGenericImport<DNExpandableObjectConverterClass, DNExpandableObjectConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNGuidConverterClass = interface(DNTypeConverterClass)
  ['{60C47F4F-B79E-5165-AF9F-1ED97AD27818}']
  { constructors } 

    {class} function init: DNGuidConverter;

  end;

  [DNTypeName('System.ComponentModel.GuidConverter')]
  DNGuidConverter = interface(DNTypeConverter)
  ['{43E38E42-E4FA-36B2-AE1E-8B7226E9E368}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNGuidConverter = class(TDNGenericImport<DNGuidConverterClass, DNGuidConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNMultilineStringConverterClass = interface(DNTypeConverterClass)
  ['{B3FAF7AC-6746-5CAE-BF1F-0CB504EB05C4}']
  { constructors } 

    {class} function init: DNMultilineStringConverter;

  end;

  [DNTypeName('System.ComponentModel.MultilineStringConverter')]
  DNMultilineStringConverter = interface(DNTypeConverter)
  ['{FE4EC8B2-7835-3A38-AD1F-97EBA08EA879}']
  { methods } 

    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNMultilineStringConverter = class(TDNGenericImport<DNMultilineStringConverterClass, DNMultilineStringConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNNullableConverterClass = interface(DNTypeConverterClass)
  ['{42602927-87AA-5378-982C-9DA5A21CD3AF}']
  { constructors } 

    {class} function init(&type: DDNC.System.Private.CoreLib.DNType): DNNullableConverter;

  end;

  [DNTypeName('System.ComponentModel.NullableConverter')]
  DNNullableConverter = interface(DNTypeConverter)
  ['{985F1089-83E4-3EA5-A006-DF5FE561199B}']
  { getters & setters } 

    function get_NullableType: DDNC.System.Private.CoreLib.DNType;
    function get_UnderlyingType: DDNC.System.Private.CoreLib.DNType;
    function get_UnderlyingTypeConverter: DNTypeConverter;

  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property NullableType: DDNC.System.Private.CoreLib.DNType read get_NullableType;
    property UnderlyingType: DDNC.System.Private.CoreLib.DNType read get_UnderlyingType;
    property UnderlyingTypeConverter: DNTypeConverter read get_UnderlyingTypeConverter;
  end;

  TDNNullableConverter = class(TDNGenericImport<DNNullableConverterClass, DNNullableConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNReferenceConverterClass = interface(DNTypeConverterClass)
  ['{D6338DA8-DD26-5DE2-9731-1F257C573D38}']
  { constructors } 

    {class} function init(&type: DDNC.System.Private.CoreLib.DNType): DNReferenceConverter;

  end;

  [DNTypeName('System.ComponentModel.ReferenceConverter')]
  DNReferenceConverter = interface(DNTypeConverter)
  ['{82E15B31-7D31-39A4-98CC-0AE5AEB5DF82}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNReferenceConverter = class(TDNGenericImport<DNReferenceConverterClass, DNReferenceConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNComponentConverterClass = interface(DNReferenceConverterClass)
  ['{71B92B73-059F-5517-90B3-78004C36EAED}']
  { constructors } 

    {class} function init(&type: DDNC.System.Private.CoreLib.DNType): DNComponentConverter;

  end;

  [DNTypeName('System.ComponentModel.ComponentConverter')]
  DNComponentConverter = interface(DNReferenceConverter)
  ['{EC9458F9-4FCA-3C6F-A6D5-CC80D7CA60A7}']
  { methods } 

    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNComponentConverter = class(TDNGenericImport<DNComponentConverterClass, DNComponentConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNStringConverterClass = interface(DNTypeConverterClass)
  ['{9BAAB20B-A5A8-51C4-A213-B1D4DCBE7DFE}']
  { constructors } 

    {class} function init: DNStringConverter;

  end;

  [DNTypeName('System.ComponentModel.StringConverter')]
  DNStringConverter = interface(DNTypeConverter)
  ['{DCA31428-7D15-383F-8F22-6BB9F05C26B6}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNStringConverter = class(TDNGenericImport<DNStringConverterClass, DNStringConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNTimeSpanConverterClass = interface(DNTypeConverterClass)
  ['{97B7EAC8-8DDE-58E7-A50E-D3FFD6F092BA}']
  { constructors } 

    {class} function init: DNTimeSpanConverter;

  end;

  [DNTypeName('System.ComponentModel.TimeSpanConverter')]
  DNTimeSpanConverter = interface(DNTypeConverter)
  ['{1AF32521-05CF-338B-A7D8-427A0E0C40DA}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNTimeSpanConverter = class(TDNGenericImport<DNTimeSpanConverterClass, DNTimeSpanConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNTypeListConverterClass = interface(DNTypeConverterClass)
  ['{E150F29C-BB34-562B-AE6D-2A624D8228CF}']
  end;

  [DNTypeName('System.ComponentModel.TypeListConverter')]
  DNTypeListConverter = interface(DNTypeConverter)
  ['{67AEB2C4-EB12-39FB-A871-92A441EE9605}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNTypeListConverter = class(TDNGenericImport<DNTypeListConverterClass, DNTypeListConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNVersionConverterClass = interface(DNTypeConverterClass)
  ['{7F5238BC-4EC6-5D6C-A98E-9777752F4C8B}']
  { constructors } 

    {class} function init: DNVersionConverter;

  end;

  [DNTypeName('System.ComponentModel.VersionConverter')]
  DNVersionConverter = interface(DNTypeConverter)
  ['{B72A5D2F-CE89-380B-95BA-9BCEB08320B5}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNVersionConverter = class(TDNGenericImport<DNVersionConverterClass, DNVersionConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNColorConverterClass = interface(DNTypeConverterClass)
  ['{4FE36744-BBEF-5E68-AD94-EBA231396866}']
  { constructors } 

    {class} function init: DNColorConverter;

  end;

  [DNTypeName('System.Drawing.ColorConverter')]
  DNColorConverter = interface(DNTypeConverter)
  ['{AB9A1DFF-3BB6-3CC9-ABAB-E390F4AE1DA0}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNColorConverter = class(TDNGenericImport<DNColorConverterClass, DNColorConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNPointConverterClass = interface(DNTypeConverterClass)
  ['{A56F1413-9FDD-5E63-9F2C-419DE1AC8717}']
  { constructors } 

    {class} function init: DNPointConverter;

  end;

  [DNTypeName('System.Drawing.PointConverter')]
  DNPointConverter = interface(DNTypeConverter)
  ['{06F82EED-AF48-3ECE-B542-00C1334719A7}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNPointConverter = class(TDNGenericImport<DNPointConverterClass, DNPointConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNRectangleConverterClass = interface(DNTypeConverterClass)
  ['{80B8D7E0-C05D-588E-8BBA-2456255625A1}']
  { constructors } 

    {class} function init: DNRectangleConverter;

  end;

  [DNTypeName('System.Drawing.RectangleConverter')]
  DNRectangleConverter = interface(DNTypeConverter)
  ['{59CCA933-FF7A-328C-AEDC-A72635282487}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNRectangleConverter = class(TDNGenericImport<DNRectangleConverterClass, DNRectangleConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNSizeConverterClass = interface(DNTypeConverterClass)
  ['{7EC34EEA-08B0-5EB4-80D6-074355ECCDC4}']
  { constructors } 

    {class} function init: DNSizeConverter;

  end;

  [DNTypeName('System.Drawing.SizeConverter')]
  DNSizeConverter = interface(DNTypeConverter)
  ['{86A7EE66-D607-3505-988D-B89F552B863B}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSizeConverter = class(TDNGenericImport<DNSizeConverterClass, DNSizeConverter>) end;

  //-------------namespace: System.Drawing----------------
  DNSizeFConverterClass = interface(DNTypeConverterClass)
  ['{376458D9-D937-5BFF-A1C7-0AE5A37C8B6C}']
  { constructors } 

    {class} function init: DNSizeFConverter;

  end;

  [DNTypeName('System.Drawing.SizeFConverter')]
  DNSizeFConverter = interface(DNTypeConverter)
  ['{F901C629-CAF6-31D6-AB59-F4E43E5B78E5}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNSizeFConverter = class(TDNGenericImport<DNSizeFConverterClass, DNSizeFConverter>) end;

  //-------------namespace: System.Security.Authentication.ExtendedProtection----------------
  DNExtendedProtectionPolicyTypeConverterClass = interface(DNTypeConverterClass)
  ['{8CC65B72-A960-5742-B432-4D46B6FA4FB1}']
  { constructors } 

    {class} function init: DNExtendedProtectionPolicyTypeConverter;

  end;

  [DNTypeName('System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter')]
  DNExtendedProtectionPolicyTypeConverter = interface(DNTypeConverter)
  ['{682D6E3A-D1B7-3D4E-A790-6007CF160C2F}']
  { methods } 

    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNExtendedProtectionPolicyTypeConverter = class(TDNGenericImport<DNExtendedProtectionPolicyTypeConverterClass, DNExtendedProtectionPolicyTypeConverter>) end;

  //-------------namespace: System----------------
  DNUriTypeConverterClass = interface(DNTypeConverterClass)
  ['{7744E6C9-4E82-5918-A769-2D3C3DB60858}']
  { constructors } 

    {class} function init: DNUriTypeConverter;

  end;

  [DNTypeName('System.UriTypeConverter')]
  DNUriTypeConverter = interface(DNTypeConverter)
  ['{F45EFE9B-9860-37B2-BDAB-DFBA9159F966}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function CanConvertFrom(sourceType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDNC.System.Private.CoreLib.DNType): Boolean; overload;
    function ConvertFrom(value: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; text: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertTo(value: DDNC.System.Private.CoreLib.DNObject; destinationType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    function ConvertToInvariantString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDNC.System.Private.CoreLib.DNCultureInfo; value: DDNC.System.Private.CoreLib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDNC.System.Private.CoreLib.DNIDictionary): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDNC.System.Private.CoreLib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNUriTypeConverter = class(TDNGenericImport<DNUriTypeConverterClass, DNUriTypeConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNTypeDescriptionProviderClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{899D2857-A72E-5A7C-9B63-20B6D706FEF3}']
  end;

  [DNTypeName('System.ComponentModel.TypeDescriptionProvider')]
  DNTypeDescriptionProvider = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{CF11D645-4DFA-39C1-BBE3-5855C94D743B}']
  { methods } 

    function CreateInstance(provider: DDNC.System.ComponentModel.DNIServiceProvider; objectType: DDNC.System.Private.CoreLib.DNType; argTypes: TArray<DDNC.System.Private.CoreLib.DNType>; args: TArray<DDNC.System.Private.CoreLib.DNObject>): DDNC.System.Private.CoreLib.DNObject;
    function GetCache(instance: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNIDictionary;
    function GetExtendedTypeDescriptor(instance: DDNC.System.Private.CoreLib.DNObject): DNICustomTypeDescriptor;
    function GetFullComponentName(component: DDNC.System.Private.CoreLib.DNObject): string;
    function GetReflectionType(objectType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNType; overload;
    function GetReflectionType(instance: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNType; overload;
    function GetReflectionType(objectType: DDNC.System.Private.CoreLib.DNType; instance: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNType; overload;
    function GetRuntimeType(reflectionType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNType;
    function GetTypeDescriptor(objectType: DDNC.System.Private.CoreLib.DNType): DNICustomTypeDescriptor; overload;
    function GetTypeDescriptor(instance: DDNC.System.Private.CoreLib.DNObject): DNICustomTypeDescriptor; overload;
    function GetTypeDescriptor(objectType: DDNC.System.Private.CoreLib.DNType; instance: DDNC.System.Private.CoreLib.DNObject): DNICustomTypeDescriptor; overload;
    function IsSupportedType(&type: DDNC.System.Private.CoreLib.DNType): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNTypeDescriptionProvider = class(TDNGenericImport<DNTypeDescriptionProviderClass, DNTypeDescriptionProvider>) end;

  //-------------namespace: System.ComponentModel----------------
  DNTypeDescriptorClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{CFF0E7C3-07C0-5784-B937-A7D9DCA5E668}']
  { static getter & setter } 

    {class} function get_InterfaceType: DDNC.System.Private.CoreLib.DNType;
    {class} function get_ComObjectType: DDNC.System.Private.CoreLib.DNType;
    {class} function get_ComNativeDescriptorHandler: DNIComNativeDescriptorHandler;
    {class} procedure set_ComNativeDescriptorHandler(value: DNIComNativeDescriptorHandler);

  { static methods } 

    {class} procedure RemoveAssociation(primary: DDNC.System.Private.CoreLib.DNObject; secondary: DDNC.System.Private.CoreLib.DNObject);
    {class} procedure RemoveAssociations(primary: DDNC.System.Private.CoreLib.DNObject);
    {class} procedure RemoveProvider(provider: DNTypeDescriptionProvider; &type: DDNC.System.Private.CoreLib.DNType); overload;
    {class} procedure RemoveProvider(provider: DNTypeDescriptionProvider; instance: DDNC.System.Private.CoreLib.DNObject); overload;
    {class} procedure RemoveProviderTransparent(provider: DNTypeDescriptionProvider; &type: DDNC.System.Private.CoreLib.DNType); overload;
    {class} procedure RemoveProviderTransparent(provider: DNTypeDescriptionProvider; instance: DDNC.System.Private.CoreLib.DNObject); overload;
    {class} procedure SortDescriptorArray(infos: DDNC.System.Private.CoreLib.DNIList);
    {class} function AddAttributes(&type: DDNC.System.Private.CoreLib.DNType; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNTypeDescriptionProvider; overload;
    {class} function AddAttributes(instance: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNTypeDescriptionProvider; overload;
    {class} procedure AddEditorTable(editorBaseType: DDNC.System.Private.CoreLib.DNType; table: DDNC.System.Private.CoreLib.DNHashtable);
    {class} procedure AddProvider(provider: DNTypeDescriptionProvider; &type: DDNC.System.Private.CoreLib.DNType); overload;
    {class} procedure AddProvider(provider: DNTypeDescriptionProvider; instance: DDNC.System.Private.CoreLib.DNObject); overload;
    {class} procedure AddProviderTransparent(provider: DNTypeDescriptionProvider; &type: DDNC.System.Private.CoreLib.DNType); overload;
    {class} procedure AddProviderTransparent(provider: DNTypeDescriptionProvider; instance: DDNC.System.Private.CoreLib.DNObject); overload;
    {class} procedure CreateAssociation(primary: DDNC.System.Private.CoreLib.DNObject; secondary: DDNC.System.Private.CoreLib.DNObject);
    {class} function CreateEvent(componentType: DDNC.System.Private.CoreLib.DNType; name: string; &type: DDNC.System.Private.CoreLib.DNType; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNEventDescriptor; overload;
    {class} function CreateEvent(componentType: DDNC.System.Private.CoreLib.DNType; oldEventDescriptor: DNEventDescriptor; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNEventDescriptor; overload;
    {class} function CreateInstance(provider: DDNC.System.ComponentModel.DNIServiceProvider; objectType: DDNC.System.Private.CoreLib.DNType; argTypes: TArray<DDNC.System.Private.CoreLib.DNType>; args: TArray<DDNC.System.Private.CoreLib.DNObject>): DDNC.System.Private.CoreLib.DNObject;
    {class} function CreateProperty(componentType: DDNC.System.Private.CoreLib.DNType; name: string; &type: DDNC.System.Private.CoreLib.DNType; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptor; overload;
    {class} function CreateProperty(componentType: DDNC.System.Private.CoreLib.DNType; oldPropertyDescriptor: DNPropertyDescriptor; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptor; overload;
    {class} function GetAssociation(&type: DDNC.System.Private.CoreLib.DNType; primary: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNObject;
    {class} function GetAttributes(componentType: DDNC.System.Private.CoreLib.DNType): DNAttributeCollection; overload;
    {class} function GetAttributes(component: DDNC.System.Private.CoreLib.DNObject): DNAttributeCollection; overload;
    {class} function GetAttributes(component: DDNC.System.Private.CoreLib.DNObject; noCustomTypeDesc: Boolean): DNAttributeCollection; overload;
    {class} function GetClassName(component: DDNC.System.Private.CoreLib.DNObject): string; overload;
    {class} function GetClassName(component: DDNC.System.Private.CoreLib.DNObject; noCustomTypeDesc: Boolean): string; overload;
    {class} function GetClassName(componentType: DDNC.System.Private.CoreLib.DNType): string; overload;
    {class} function GetComponentName(component: DDNC.System.Private.CoreLib.DNObject): string; overload;
    {class} function GetComponentName(component: DDNC.System.Private.CoreLib.DNObject; noCustomTypeDesc: Boolean): string; overload;
    {class} function GetConverter(component: DDNC.System.Private.CoreLib.DNObject): DNTypeConverter; overload;
    {class} function GetConverter(component: DDNC.System.Private.CoreLib.DNObject; noCustomTypeDesc: Boolean): DNTypeConverter; overload;
    {class} function GetConverter(&type: DDNC.System.Private.CoreLib.DNType): DNTypeConverter; overload;
    {class} function GetDefaultEvent(componentType: DDNC.System.Private.CoreLib.DNType): DNEventDescriptor; overload;
    {class} function GetDefaultEvent(component: DDNC.System.Private.CoreLib.DNObject): DNEventDescriptor; overload;
    {class} function GetDefaultEvent(component: DDNC.System.Private.CoreLib.DNObject; noCustomTypeDesc: Boolean): DNEventDescriptor; overload;
    {class} function GetDefaultProperty(componentType: DDNC.System.Private.CoreLib.DNType): DNPropertyDescriptor; overload;
    {class} function GetDefaultProperty(component: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptor; overload;
    {class} function GetDefaultProperty(component: DDNC.System.Private.CoreLib.DNObject; noCustomTypeDesc: Boolean): DNPropertyDescriptor; overload;
    {class} function GetEditor(component: DDNC.System.Private.CoreLib.DNObject; editorBaseType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    {class} function GetEditor(component: DDNC.System.Private.CoreLib.DNObject; editorBaseType: DDNC.System.Private.CoreLib.DNType; noCustomTypeDesc: Boolean): DDNC.System.Private.CoreLib.DNObject; overload;
    {class} function GetEditor(&type: DDNC.System.Private.CoreLib.DNType; editorBaseType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject; overload;
    {class} function GetEvents(componentType: DDNC.System.Private.CoreLib.DNType): DNEventDescriptorCollection; overload;
    {class} function GetEvents(componentType: DDNC.System.Private.CoreLib.DNType; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNEventDescriptorCollection; overload;
    {class} function GetEvents(component: DDNC.System.Private.CoreLib.DNObject): DNEventDescriptorCollection; overload;
    {class} function GetEvents(component: DDNC.System.Private.CoreLib.DNObject; noCustomTypeDesc: Boolean): DNEventDescriptorCollection; overload;
    {class} function GetEvents(component: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNEventDescriptorCollection; overload;
    {class} function GetEvents(component: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>; noCustomTypeDesc: Boolean): DNEventDescriptorCollection; overload;
    {class} function GetFullComponentName(component: DDNC.System.Private.CoreLib.DNObject): string;
    {class} function GetProperties(componentType: DDNC.System.Private.CoreLib.DNType): DNPropertyDescriptorCollection; overload;
    {class} function GetProperties(componentType: DDNC.System.Private.CoreLib.DNType; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    {class} function GetProperties(component: DDNC.System.Private.CoreLib.DNObject): DNPropertyDescriptorCollection; overload;
    {class} function GetProperties(component: DDNC.System.Private.CoreLib.DNObject; noCustomTypeDesc: Boolean): DNPropertyDescriptorCollection; overload;
    {class} function GetProperties(component: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    {class} function GetProperties(component: DDNC.System.Private.CoreLib.DNObject; attributes: TArray<DDNC.System.Private.CoreLib.DNAttribute>; noCustomTypeDesc: Boolean): DNPropertyDescriptorCollection; overload;
    {class} function GetProvider(&type: DDNC.System.Private.CoreLib.DNType): DNTypeDescriptionProvider; overload;
    {class} function GetProvider(instance: DDNC.System.Private.CoreLib.DNObject): DNTypeDescriptionProvider; overload;
    {class} function GetReflectionType(&type: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNType; overload;
    {class} function GetReflectionType(instance: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNType; overload;
    {class} procedure Refresh(component: DDNC.System.Private.CoreLib.DNObject); overload;
    {class} procedure Refresh(&type: DDNC.System.Private.CoreLib.DNType); overload;
    {class} procedure Refresh(module: DDNC.System.Private.CoreLib.DNModule); overload;
    {class} procedure Refresh(assembly: DDNC.System.Private.CoreLib.DNAssembly); overload;
    {class} function CreateDesigner(component: DDNC.System.ComponentModel.Primitives.DNIComponent; designerBaseType: DDNC.System.Private.CoreLib.DNType): DNIDesigner;

  { static propertys } 

    {class} property InterfaceType: DDNC.System.Private.CoreLib.DNType read get_InterfaceType;
    {class} property ComObjectType: DDNC.System.Private.CoreLib.DNType read get_ComObjectType;
    {class} property ComNativeDescriptorHandler: DNIComNativeDescriptorHandler read get_ComNativeDescriptorHandler write set_ComNativeDescriptorHandler;
  end;

  [DNTypeName('System.ComponentModel.TypeDescriptor')]
  DNTypeDescriptor = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{F1A51B06-33D2-3EE1-9EBE-AC453E3077BA}']
  { events } 

    {class} procedure add_Refreshed(value: DNRefreshEventHandler);
    {class} procedure remove_Refreshed(value: DNRefreshEventHandler);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNTypeDescriptor = class(TDNGenericImport<DNTypeDescriptorClass, DNTypeDescriptor>) end;

  //-------------namespace: System.ComponentModel----------------
  DNAddingNewEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{5371A17D-4712-57EC-B504-C3AAE20208DB}']
  { constructors } 

    {class} function init: DNAddingNewEventArgs; overload;
    {class} function init(newObject: DDNC.System.Private.CoreLib.DNObject): DNAddingNewEventArgs; overload;

  end;

  [DNTypeName('System.ComponentModel.AddingNewEventArgs')]
  DNAddingNewEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{6D9D7FCF-7D94-3DBF-A75B-6B8069EA12F8}']
  { getters & setters } 

    function get_NewObject: DDNC.System.Private.CoreLib.DNObject;
    procedure set_NewObject(value: DDNC.System.Private.CoreLib.DNObject);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property NewObject: DDNC.System.Private.CoreLib.DNObject read get_NewObject write set_NewObject;
  end;

  TDNAddingNewEventArgs = class(TDNGenericImport<DNAddingNewEventArgsClass, DNAddingNewEventArgs>) end;

  //-------------namespace: System.ComponentModel----------------
  DNCollectionChangeEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{B79B4EF5-E404-58DD-BE20-B53C103A6017}']
  { constructors } 

    {class} function init(action: DNCollectionChangeAction; element: DDNC.System.Private.CoreLib.DNObject): DNCollectionChangeEventArgs;

  end;

  [DNTypeName('System.ComponentModel.CollectionChangeEventArgs')]
  DNCollectionChangeEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{3A8E4098-A064-3016-9638-74B2B14846E2}']
  { getters & setters } 

    function get_Action: DNCollectionChangeAction;
    function get_Element: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Action: DNCollectionChangeAction read get_Action;
    property Element: DDNC.System.Private.CoreLib.DNObject read get_Element;
  end;

  TDNCollectionChangeEventArgs = class(TDNGenericImport<DNCollectionChangeEventArgsClass, DNCollectionChangeEventArgs>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNActiveDesignerEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{F72DD9CC-2B63-51A2-A20A-9C903AE279AE}']
  { constructors } 

    {class} function init(oldDesigner: DNIDesignerHost; newDesigner: DNIDesignerHost): DNActiveDesignerEventArgs;

  end;

  [DNTypeName('System.ComponentModel.Design.ActiveDesignerEventArgs')]
  DNActiveDesignerEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{9F6884BB-29DF-3584-A586-DE0F3AD92780}']
  { getters & setters } 

    function get_OldDesigner: DNIDesignerHost;
    function get_NewDesigner: DNIDesignerHost;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property OldDesigner: DNIDesignerHost read get_OldDesigner;
    property NewDesigner: DNIDesignerHost read get_NewDesigner;
  end;

  TDNActiveDesignerEventArgs = class(TDNGenericImport<DNActiveDesignerEventArgsClass, DNActiveDesignerEventArgs>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNComponentChangedEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{AAD354C1-81FB-57AE-9E15-AAB90E03B5E9}']
  { constructors } 

    {class} function init(component: DDNC.System.Private.CoreLib.DNObject; member: DNMemberDescriptor; oldValue: DDNC.System.Private.CoreLib.DNObject; newValue: DDNC.System.Private.CoreLib.DNObject): DNComponentChangedEventArgs;

  end;

  [DNTypeName('System.ComponentModel.Design.ComponentChangedEventArgs')]
  DNComponentChangedEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{76C1E850-74D3-3BD0-BC32-869638977F31}']
  { getters & setters } 

    function get_Component: DDNC.System.Private.CoreLib.DNObject;
    function get_Member: DNMemberDescriptor;
    function get_NewValue: DDNC.System.Private.CoreLib.DNObject;
    function get_OldValue: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Component: DDNC.System.Private.CoreLib.DNObject read get_Component;
    property Member: DNMemberDescriptor read get_Member;
    property NewValue: DDNC.System.Private.CoreLib.DNObject read get_NewValue;
    property OldValue: DDNC.System.Private.CoreLib.DNObject read get_OldValue;
  end;

  TDNComponentChangedEventArgs = class(TDNGenericImport<DNComponentChangedEventArgsClass, DNComponentChangedEventArgs>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNComponentChangingEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{28357031-94F1-5575-B9CE-B56DEC906308}']
  { constructors } 

    {class} function init(component: DDNC.System.Private.CoreLib.DNObject; member: DNMemberDescriptor): DNComponentChangingEventArgs;

  end;

  [DNTypeName('System.ComponentModel.Design.ComponentChangingEventArgs')]
  DNComponentChangingEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{801C4CBA-439F-30A4-A1DA-C2D4F13BEBE4}']
  { getters & setters } 

    function get_Component: DDNC.System.Private.CoreLib.DNObject;
    function get_Member: DNMemberDescriptor;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Component: DDNC.System.Private.CoreLib.DNObject read get_Component;
    property Member: DNMemberDescriptor read get_Member;
  end;

  TDNComponentChangingEventArgs = class(TDNGenericImport<DNComponentChangingEventArgsClass, DNComponentChangingEventArgs>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNComponentEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{1BA15450-42C4-5AD0-98BC-5C4EFCBF8BA5}']
  { constructors } 

    {class} function init(component: DDNC.System.ComponentModel.Primitives.DNIComponent): DNComponentEventArgs;

  end;

  [DNTypeName('System.ComponentModel.Design.ComponentEventArgs')]
  DNComponentEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{9A8B7F5E-D3E9-3D68-ACFA-F8A6DFBF7118}']
  { getters & setters } 

    function get_Component: DDNC.System.ComponentModel.Primitives.DNIComponent;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Component: DDNC.System.ComponentModel.Primitives.DNIComponent read get_Component;
  end;

  TDNComponentEventArgs = class(TDNGenericImport<DNComponentEventArgsClass, DNComponentEventArgs>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNComponentRenameEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{C1053845-4DCD-5963-9E51-B7477AFAADEC}']
  { constructors } 

    {class} function init(component: DDNC.System.Private.CoreLib.DNObject; oldName: string; newName: string): DNComponentRenameEventArgs;

  end;

  [DNTypeName('System.ComponentModel.Design.ComponentRenameEventArgs')]
  DNComponentRenameEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{DAF78C21-369F-3362-8846-79952868E097}']
  { getters & setters } 

    function get_Component: DDNC.System.Private.CoreLib.DNObject;
    function get_OldName: string;
    function get_NewName: string;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Component: DDNC.System.Private.CoreLib.DNObject read get_Component;
    property OldName: string read get_OldName;
    property NewName: string read get_NewName;
  end;

  TDNComponentRenameEventArgs = class(TDNGenericImport<DNComponentRenameEventArgsClass, DNComponentRenameEventArgs>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNDesignerEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{5B8E6D3C-8F8C-5AE1-85A3-3FAEBB0F92A6}']
  { constructors } 

    {class} function init(host: DNIDesignerHost): DNDesignerEventArgs;

  end;

  [DNTypeName('System.ComponentModel.Design.DesignerEventArgs')]
  DNDesignerEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{3508C523-729B-358A-B866-9D00909343C5}']
  { getters & setters } 

    function get_Designer: DNIDesignerHost;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Designer: DNIDesignerHost read get_Designer;
  end;

  TDNDesignerEventArgs = class(TDNGenericImport<DNDesignerEventArgsClass, DNDesignerEventArgs>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNDesignerTransactionCloseEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{DF7551F6-C480-56F7-B342-E9AA4DDE6337}']
  { constructors } 

    {class} function init(commit: Boolean): DNDesignerTransactionCloseEventArgs; overload;
    {class} function init(commit: Boolean; lastTransaction: Boolean): DNDesignerTransactionCloseEventArgs; overload;

  end;

  [DNTypeName('System.ComponentModel.Design.DesignerTransactionCloseEventArgs')]
  DNDesignerTransactionCloseEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{931DE8AE-3280-3A57-932C-E3C035FDA123}']
  { getters & setters } 

    function get_TransactionCommitted: Boolean;
    function get_LastTransaction: Boolean;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TransactionCommitted: Boolean read get_TransactionCommitted;
    property LastTransaction: Boolean read get_LastTransaction;
  end;

  TDNDesignerTransactionCloseEventArgs = class(TDNGenericImport<DNDesignerTransactionCloseEventArgsClass, DNDesignerTransactionCloseEventArgs>) end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  DNResolveNameEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{CA25AFE4-C01B-5C8E-867C-C9E51215E9BB}']
  { constructors } 

    {class} function init(name: string): DNResolveNameEventArgs;

  end;

  [DNTypeName('System.ComponentModel.Design.Serialization.ResolveNameEventArgs')]
  DNResolveNameEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{BA143B92-7EDE-3BE7-9B58-CFE0769BD49C}']
  { getters & setters } 

    function get_Name: string;
    function get_Value: DDNC.System.Private.CoreLib.DNObject;
    procedure set_Value(value: DDNC.System.Private.CoreLib.DNObject);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name;
    property Value: DDNC.System.Private.CoreLib.DNObject read get_Value write set_Value;
  end;

  TDNResolveNameEventArgs = class(TDNGenericImport<DNResolveNameEventArgsClass, DNResolveNameEventArgs>) end;

  //-------------namespace: System.ComponentModel----------------
  DNHandledEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{25684D83-5A7C-5C27-9BD3-729624944801}']
  { constructors } 

    {class} function init: DNHandledEventArgs; overload;
    {class} function init(defaultHandledValue: Boolean): DNHandledEventArgs; overload;

  end;

  [DNTypeName('System.ComponentModel.HandledEventArgs')]
  DNHandledEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{28AF082C-4C14-316E-8DB0-EA4A9C1672E2}']
  { getters & setters } 

    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNHandledEventArgs = class(TDNGenericImport<DNHandledEventArgsClass, DNHandledEventArgs>) end;

  //-------------namespace: System.ComponentModel----------------
  DNListChangedEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{4EAA3CC7-0A3B-5826-AC2E-BEAEA8A11272}']
  { constructors } 

    {class} function init(listChangedType: DNListChangedType; newIndex: Int32): DNListChangedEventArgs; overload;
    {class} function init(listChangedType: DNListChangedType; newIndex: Int32; propDesc: DNPropertyDescriptor): DNListChangedEventArgs; overload;
    {class} function init(listChangedType: DNListChangedType; propDesc: DNPropertyDescriptor): DNListChangedEventArgs; overload;
    {class} function init(listChangedType: DNListChangedType; newIndex: Int32; oldIndex: Int32): DNListChangedEventArgs; overload;

  end;

  [DNTypeName('System.ComponentModel.ListChangedEventArgs')]
  DNListChangedEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{D7A9D4D4-9A2E-3103-B610-1227EAE70247}']
  { getters & setters } 

    function get_ListChangedType: DNListChangedType;
    function get_NewIndex: Int32;
    function get_OldIndex: Int32;
    function get_PropertyDescriptor: DNPropertyDescriptor;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ListChangedType: DNListChangedType read get_ListChangedType;
    property NewIndex: Int32 read get_NewIndex;
    property OldIndex: Int32 read get_OldIndex;
    property PropertyDescriptor: DNPropertyDescriptor read get_PropertyDescriptor;
  end;

  TDNListChangedEventArgs = class(TDNGenericImport<DNListChangedEventArgsClass, DNListChangedEventArgs>) end;

  //-------------namespace: System.ComponentModel----------------
  DNRefreshEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{BD3E2015-9535-59B9-A924-57A986CD33D1}']
  { constructors } 

    {class} function init(componentChanged: DDNC.System.Private.CoreLib.DNObject): DNRefreshEventArgs; overload;
    {class} function init(typeChanged: DDNC.System.Private.CoreLib.DNType): DNRefreshEventArgs; overload;

  end;

  [DNTypeName('System.ComponentModel.RefreshEventArgs')]
  DNRefreshEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{D68FF7AD-26FD-3043-A70F-FBDC2B402942}']
  { getters & setters } 

    function get_ComponentChanged: DDNC.System.Private.CoreLib.DNObject;
    function get_TypeChanged: DDNC.System.Private.CoreLib.DNType;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ComponentChanged: DDNC.System.Private.CoreLib.DNObject read get_ComponentChanged;
    property TypeChanged: DDNC.System.Private.CoreLib.DNType read get_TypeChanged;
  end;

  TDNRefreshEventArgs = class(TDNGenericImport<DNRefreshEventArgsClass, DNRefreshEventArgs>) end;

  //-------------namespace: System.Timers----------------
  DNElapsedEventArgsClass = interface(DDNC.System.Private.CoreLib.DNEventArgsClass)
  ['{83BE0D2A-D799-5028-A654-364E6B3E770A}']
  end;

  [DNTypeName('System.Timers.ElapsedEventArgs')]
  DNElapsedEventArgs = interface(DDNC.System.Private.CoreLib.DNEventArgs)
  ['{D2C7FFD7-ACCD-330C-B82F-3AE5D6936D8C}']
  { getters & setters } 

    function get_SignalTime: DDNC.System.Private.CoreLib.DNDateTime;

  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property SignalTime: DDNC.System.Private.CoreLib.DNDateTime read get_SignalTime;
  end;

  TDNElapsedEventArgs = class(TDNGenericImport<DNElapsedEventArgsClass, DNElapsedEventArgs>) end;

  //-------------namespace: System.ComponentModel----------------
  DNLicenseExceptionClass = interface(DDNC.System.Private.CoreLib.DNSystemExceptionClass)
  ['{3234C036-55B8-5845-98C0-F56D866E8DAF}']
  { constructors } 

    {class} function init(&type: DDNC.System.Private.CoreLib.DNType): DNLicenseException; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType; instance: DDNC.System.Private.CoreLib.DNObject): DNLicenseException; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType; instance: DDNC.System.Private.CoreLib.DNObject; message: string): DNLicenseException; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType; instance: DDNC.System.Private.CoreLib.DNObject; message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNLicenseException; overload;

  end;

  [DNTypeName('System.ComponentModel.LicenseException')]
  DNLicenseException = interface(DDNC.System.Private.CoreLib.DNSystemException)
  ['{14F13A6D-1C02-32BD-AF88-53B588517853}']
  { getters & setters } 

    function get_LicensedType: DDNC.System.Private.CoreLib.DNType;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property LicensedType: DDNC.System.Private.CoreLib.DNType read get_LicensedType;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNLicenseException = class(TDNGenericImport<DNLicenseExceptionClass, DNLicenseException>) end;

  //-------------namespace: System.ComponentModel----------------
  DNWarningExceptionClass = interface(DDNC.System.Private.CoreLib.DNSystemExceptionClass)
  ['{15A8EEBC-EA30-51A9-89F0-B8FC34B44F07}']
  { constructors } 

    {class} function init: DNWarningException; overload;
    {class} function init(message: string): DNWarningException; overload;
    {class} function init(message: string; helpUrl: string): DNWarningException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNWarningException; overload;
    {class} function init(message: string; helpUrl: string; helpTopic: string): DNWarningException; overload;

  end;

  [DNTypeName('System.ComponentModel.WarningException')]
  DNWarningException = interface(DDNC.System.Private.CoreLib.DNSystemException)
  ['{87B8FEAA-0C79-33A2-977C-6B0CB9CBD9EC}']
  { getters & setters } 

    function get_HelpUrl: string;
    function get_HelpTopic: string;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property HelpUrl: string read get_HelpUrl;
    property HelpTopic: string read get_HelpTopic;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNWarningException = class(TDNGenericImport<DNWarningExceptionClass, DNWarningException>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNCheckoutExceptionClass = interface(DDNC.System.Private.CoreLib.DNExternalExceptionClass)
  ['{67DEC796-BB40-5A42-823D-81691E260E1B}']
  { constructors } 

    {class} function init: DNCheckoutException; overload;
    {class} function init(message: string): DNCheckoutException; overload;
    {class} function init(message: string; errorCode: Int32): DNCheckoutException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNCheckoutException; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Canceled: DNCheckoutException;

  { static fields } 

    {class} property Canceled: DNCheckoutException read __fakeFieldGet_Canceled;

  end;

  [DNTypeName('System.ComponentModel.Design.CheckoutException')]
  DNCheckoutException = interface(DDNC.System.Private.CoreLib.DNExternalException)
  ['{1BCB34A5-0254-3BE2-9B72-9FF4E18F975C}']
  { getters & setters } 

    function get_ErrorCode: Int32;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function ToString: string;
    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ErrorCode: Int32 read get_ErrorCode;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNCheckoutException = class(TDNGenericImport<DNCheckoutExceptionClass, DNCheckoutException>) end;

  //-------------namespace: System.Timers----------------
  DNTimerClass = interface(DNObjectClass)
  ['{C266F4B7-DB62-5166-8D8A-8EC2B1A5AA1C}']
  { constructors } 

    {class} function init: DNTimer; overload;
    {class} function init(interval: Double): DNTimer; overload;

  end;

  [DNTypeName('System.Timers.Timer')]
  DNTimer = interface(DNObject)
  ['{B6F976AB-0D92-3A53-8281-AF0E4186C503}']
  { getters & setters } 

    function get_AutoReset: Boolean;
    procedure set_AutoReset(value: Boolean);
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_Interval: Double;
    procedure set_Interval(value: Double);
    function get_Site: DDNC.System.ComponentModel.Primitives.DNISite;
    procedure set_Site(value: DDNC.System.ComponentModel.Primitives.DNISite);
    function get_SynchronizingObject: DDNC.System.ComponentModel.Primitives.DNISynchronizeInvoke;
    procedure set_SynchronizingObject(value: DDNC.System.ComponentModel.Primitives.DNISynchronizeInvoke);
    function get_Container: DDNC.System.ComponentModel.Primitives.DNIContainer;

  { events } 

    procedure add_Elapsed(value: DNElapsedEventHandler);
    procedure remove_Elapsed(value: DNElapsedEventHandler);
    procedure add_Disposed(value: DDNC.System.Private.CoreLib.DNEventHandler);
    procedure remove_Disposed(value: DDNC.System.Private.CoreLib.DNEventHandler);

  { methods } 

    procedure BeginInit;
    procedure Close;
    procedure EndInit;
    procedure Start;
    procedure Stop;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property AutoReset: Boolean read get_AutoReset write set_AutoReset;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property Interval: Double read get_Interval write set_Interval;
    property Site: DDNC.System.ComponentModel.Primitives.DNISite read get_Site write set_Site;
    property SynchronizingObject: DDNC.System.ComponentModel.Primitives.DNISynchronizeInvoke read get_SynchronizingObject write set_SynchronizingObject;
    property Container: DDNC.System.ComponentModel.Primitives.DNIContainer read get_Container;
  end;

  TDNTimer = class(TDNGenericImport<DNTimerClass, DNTimer>) end;

  //-------------namespace: System.ComponentModel----------------
  DNComponentResourceManagerClass = interface(DDNC.System.Private.CoreLib.DNResourceManagerClass)
  ['{3C2257D0-4473-58B3-8438-AE8747311FE4}']
  { constructors } 

    {class} function init: DNComponentResourceManager; overload;
    {class} function init(t: DDNC.System.Private.CoreLib.DNType): DNComponentResourceManager; overload;

  end;

  [DNTypeName('System.ComponentModel.ComponentResourceManager')]
  DNComponentResourceManager = interface(DDNC.System.Private.CoreLib.DNResourceManager)
  ['{F423B092-6372-38A0-8C38-BD170D9F4F82}']
  { getters & setters } 

    function get_BaseName: string;
    function get_IgnoreCase: Boolean;
    procedure set_IgnoreCase(value: Boolean);
    function get_ResourceSetType: DDNC.System.Private.CoreLib.DNType;

  { methods } 

    procedure ApplyResources(value: DDNC.System.Private.CoreLib.DNObject; objectName: string); overload;
    procedure ApplyResources(value: DDNC.System.Private.CoreLib.DNObject; objectName: string; culture: DDNC.System.Private.CoreLib.DNCultureInfo); overload;
    procedure ReleaseAllResources;
    function GetResourceSet(culture: DDNC.System.Private.CoreLib.DNCultureInfo; createIfNotExists: Boolean; tryParents: Boolean): DDNC.System.Private.CoreLib.DNResourceSet;
    function GetString(name: string): string; overload;
    function GetString(name: string; culture: DDNC.System.Private.CoreLib.DNCultureInfo): string; overload;
    function GetObject(name: string): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetObject(name: string; culture: DDNC.System.Private.CoreLib.DNCultureInfo): DDNC.System.Private.CoreLib.DNObject; overload;
    function GetStream(name: string): DDNC.System.Private.CoreLib.DNUnmanagedMemoryStream; overload;
    function GetStream(name: string; culture: DDNC.System.Private.CoreLib.DNCultureInfo): DDNC.System.Private.CoreLib.DNUnmanagedMemoryStream; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property BaseName: string read get_BaseName;
    property IgnoreCase: Boolean read get_IgnoreCase write set_IgnoreCase;
    property ResourceSetType: DDNC.System.Private.CoreLib.DNType read get_ResourceSetType;
  end;

  TDNComponentResourceManager = class(TDNGenericImport<DNComponentResourceManagerClass, DNComponentResourceManager>) end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  DNMemberRelationshipClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{D6A88677-1B3E-5F1D-B26B-14F095764E2C}']
  { constructors } 

    {class} function init(owner: DDNC.System.Private.CoreLib.DNObject; member: DNMemberDescriptor): DNMemberRelationship;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNMemberRelationship;

  { static fields } 

    {class} property Empty: DNMemberRelationship read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.ComponentModel.Design.Serialization.MemberRelationship')]
  DNMemberRelationship = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{64E9903E-1DF5-3167-995B-37AB0DAB8AA9}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_Member: DNMemberDescriptor;
    function get_Owner: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
    property Member: DNMemberDescriptor read get_Member;
    property Owner: DDNC.System.Private.CoreLib.DNObject read get_Owner;
  end;

  TDNMemberRelationship = class(TDNGenericImport<DNMemberRelationshipClass, DNMemberRelationship>) end;


implementation


initialization
  LoadAssemblyModule('System.ComponentModel.TypeConverter.dll', True);

finalization

end.
