//----------------------------------------------------------------------------
//  System.dll: System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib;

type

{ enums }

  //-------------namespace: Microsoft.Win32----------------
  [DNTypeName('Microsoft.Win32.PowerModes')]
  DNPowerModes = type Integer;
  DNPowerModesHelper = record helper for DNPowerModes
  public const
    Resume = 1;
    StatusChange = 2;
    Suspend = 3;
  end;


  //-------------namespace: Microsoft.Win32----------------
  [DNTypeName('Microsoft.Win32.SessionEndReasons')]
  DNSessionEndReasons = type Integer;
  DNSessionEndReasonsHelper = record helper for DNSessionEndReasons
  public const
    Logoff = 1;
    SystemShutdown = 2;
  end;


  //-------------namespace: Microsoft.Win32----------------
  [DNTypeName('Microsoft.Win32.SessionSwitchReason')]
  DNSessionSwitchReason = type Integer;
  DNSessionSwitchReasonHelper = record helper for DNSessionSwitchReason
  public const
    ConsoleConnect = 1;
    ConsoleDisconnect = 2;
    RemoteConnect = 3;
    RemoteDisconnect = 4;
    SessionLogon = 5;
    SessionLogoff = 6;
    SessionLock = 7;
    SessionUnlock = 8;
    SessionRemoteControl = 9;
  end;


  //-------------namespace: Microsoft.Win32----------------
  [DNTypeName('Microsoft.Win32.UserPreferenceCategory')]
  DNUserPreferenceCategory = type Integer;
  DNUserPreferenceCategoryHelper = record helper for DNUserPreferenceCategory
  public const
    Accessibility = 1;
    Color = 2;
    Desktop = 3;
    General = 4;
    Icon = 5;
    Keyboard = 6;
    Menu = 7;
    Mouse = 8;
    Policy = 9;
    Power = 10;
    Screensaver = 11;
    Window = 12;
    Locale = 13;
    VisualStyle = 14;
  end;


  //-------------namespace: System.CodeDom----------------
  [DNTypeName('System.CodeDom.CodeBinaryOperatorType')]
  DNCodeBinaryOperatorType = type Integer;
  DNCodeBinaryOperatorTypeHelper = record helper for DNCodeBinaryOperatorType
  public const
    Add = 0;
    Subtract = 1;
    Multiply = 2;
    Divide = 3;
    Modulus = 4;
    Assign = 5;
    IdentityInequality = 6;
    IdentityEquality = 7;
    ValueEquality = 8;
    BitwiseOr = 9;
    BitwiseAnd = 10;
    BooleanOr = 11;
    BooleanAnd = 12;
    LessThan = 13;
    LessThanOrEqual = 14;
    GreaterThan = 15;
    GreaterThanOrEqual = 16;
  end;


  //-------------namespace: System.CodeDom----------------
  [DNTypeName('System.CodeDom.CodeRegionMode')]
  DNCodeRegionMode = type Integer;
  DNCodeRegionModeHelper = record helper for DNCodeRegionMode
  public const
    None = 0;
    Start = 1;
    End_ = 2;
  end;


  //-------------namespace: System.CodeDom----------------
  [DNTypeName('System.CodeDom.CodeTypeReferenceOptions')]
  DNCodeTypeReferenceOptions = type Integer;
  DNCodeTypeReferenceOptionsHelper = record helper for DNCodeTypeReferenceOptions
  public const
    GlobalReference = 1;
    GenericTypeParameter = 2;
  end;


  //-------------namespace: System.CodeDom.Compiler----------------
  [DNTypeName('System.CodeDom.Compiler.GeneratorSupport')]
  DNGeneratorSupport = type Integer;
  DNGeneratorSupportHelper = record helper for DNGeneratorSupport
  public const
    ArraysOfArrays = 1;
    EntryPointMethod = 2;
    GotoStatements = 4;
    MultidimensionalArrays = 8;
    StaticConstructors = 16;
    TryCatchStatements = 32;
    ReturnTypeAttributes = 64;
    DeclareValueTypes = 128;
    DeclareEnums = 256;
    DeclareDelegates = 512;
    DeclareInterfaces = 1024;
    DeclareEvents = 2048;
    AssemblyAttributes = 4096;
    ParameterAttributes = 8192;
    ReferenceParameters = 16384;
    ChainedConstructorArguments = 32768;
    NestedTypes = 65536;
    MultipleInterfaceMembers = 131072;
    PublicStaticMembers = 262144;
    ComplexExpressions = 524288;
    Win32Resources = 1048576;
    Resources = 2097152;
    PartialTypes = 4194304;
    GenericTypeReference = 8388608;
    GenericTypeDeclaration = 16777216;
    DeclareIndexerProperties = 33554432;
  end;


  //-------------namespace: System.CodeDom.Compiler----------------
  [DNTypeName('System.CodeDom.Compiler.LanguageOptions')]
  DNLanguageOptions = type Integer;
  DNLanguageOptionsHelper = record helper for DNLanguageOptions
  public const
    None = 0;
    CaseInsensitive = 1;
  end;


  //-------------namespace: System.CodeDom----------------
  [DNTypeName('System.CodeDom.FieldDirection')]
  DNFieldDirection = type Integer;
  DNFieldDirectionHelper = record helper for DNFieldDirection
  public const
    In_ = 0;
    Out_ = 1;
    Ref = 2;
  end;


  //-------------namespace: System.CodeDom----------------
  [DNTypeName('System.CodeDom.MemberAttributes')]
  DNMemberAttributes = type Integer;
  DNMemberAttributesHelper = record helper for DNMemberAttributes
  public const
    Abstract_ = 1;
    Final_ = 2;
    Static_ = 3;
    Override_ = 4;
    Const_ = 5;
    ScopeMask = 15;
    New = 16;
    VTableMask = 240;
    Overloaded = 256;
    Assembly = 4096;
    FamilyAndAssembly = 8192;
    Family = 12288;
    FamilyOrAssembly = 16384;
    Private_ = 20480;
    Public_ = 24576;
    AccessMask = 61440;
  end;


  //-------------namespace: System.Collections.Specialized----------------
  [DNTypeName('System.Collections.Specialized.NotifyCollectionChangedAction')]
  DNNotifyCollectionChangedAction = type Integer;
  DNNotifyCollectionChangedActionHelper = record helper for DNNotifyCollectionChangedAction
  public const
    Add = 0;
    Remove = 1;
    Replace = 2;
    Move = 3;
    Reset = 4;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.BindableSupport')]
  DNBindableSupport = type Integer;
  DNBindableSupportHelper = record helper for DNBindableSupport
  public const
    No = 0;
    Yes = 1;
    Default_ = 2;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.BindingDirection')]
  DNBindingDirection = type Integer;
  DNBindingDirectionHelper = record helper for DNBindingDirection
  public const
    OneWay = 0;
    TwoWay = 1;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.CollectionChangeAction')]
  DNCollectionChangeAction = type Integer;
  DNCollectionChangeActionHelper = record helper for DNCollectionChangeAction
  public const
    Add = 1;
    Remove = 2;
    Refresh = 3;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.DataObjectMethodType')]
  DNDataObjectMethodType = type Integer;
  DNDataObjectMethodTypeHelper = record helper for DNDataObjectMethodType
  public const
    Fill = 0;
    Select = 1;
    Update = 2;
    Insert = 3;
    Delete = 4;
  end;


  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.HelpContextType')]
  DNHelpContextType = type Integer;
  DNHelpContextTypeHelper = record helper for DNHelpContextType
  public const
    Ambient = 0;
    Window = 1;
    Selection = 2;
    ToolWindowSelection = 3;
  end;


  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.HelpKeywordType')]
  DNHelpKeywordType = type Integer;
  DNHelpKeywordTypeHelper = record helper for DNHelpKeywordType
  public const
    F1Keyword = 0;
    GeneralKeyword = 1;
    FilterKeyword = 2;
  end;


  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.SelectionTypes')]
  DNSelectionTypes = type Integer;
  DNSelectionTypesHelper = record helper for DNSelectionTypes
  public const
    Auto = 1;
    Normal = 1;
    Replace = 2;
    MouseDown = 4;
    MouseUp = 8;
    Click = 16;
    Primary = 16;
    Valid = 31;
    Toggle = 32;
    Add = 64;
    Remove = 128;
  end;


  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.ViewTechnology')]
  DNViewTechnology = type Integer;
  DNViewTechnologyHelper = record helper for DNViewTechnology
  public const
    Passthrough = 0;
    WindowsForms = 1;
    Default_ = 2;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.DesignerSerializationVisibility')]
  DNDesignerSerializationVisibility = type Integer;
  DNDesignerSerializationVisibilityHelper = record helper for DNDesignerSerializationVisibility
  public const
    Hidden = 0;
    Visible = 1;
    Content = 2;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.EditorBrowsableState')]
  DNEditorBrowsableState = type Integer;
  DNEditorBrowsableStateHelper = record helper for DNEditorBrowsableState
  public const
    Always = 0;
    Never = 1;
    Advanced = 2;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.InheritanceLevel')]
  DNInheritanceLevel = type Integer;
  DNInheritanceLevelHelper = record helper for DNInheritanceLevel
  public const
    Inherited_ = 1;
    InheritedReadOnly = 2;
    NotInherited = 3;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.LicenseUsageMode')]
  DNLicenseUsageMode = type Integer;
  DNLicenseUsageModeHelper = record helper for DNLicenseUsageMode
  public const
    Runtime = 0;
    Designtime = 1;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.ListChangedType')]
  DNListChangedType = type Integer;
  DNListChangedTypeHelper = record helper for DNListChangedType
  public const
    Reset = 0;
    ItemAdded = 1;
    ItemDeleted = 2;
    ItemMoved = 3;
    ItemChanged = 4;
    PropertyDescriptorAdded = 5;
    PropertyDescriptorDeleted = 6;
    PropertyDescriptorChanged = 7;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.ListSortDirection')]
  DNListSortDirection = type Integer;
  DNListSortDirectionHelper = record helper for DNListSortDirection
  public const
    Ascending = 0;
    Descending = 1;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.MaskedTextResultHint')]
  DNMaskedTextResultHint = type Integer;
  DNMaskedTextResultHintHelper = record helper for DNMaskedTextResultHint
  public const
    Unknown = 0;
    CharacterEscaped = 1;
    NoEffect = 2;
    SideEffect = 3;
    Success = 4;
    PositionOutOfRange = -55;
    NonEditPosition = -54;
    UnavailableEditPosition = -53;
    PromptCharNotAllowed = -52;
    InvalidInput = -51;
    SignedDigitExpected = -5;
    LetterExpected = -4;
    DigitExpected = -3;
    AlphanumericCharacterExpected = -2;
    AsciiCharacterExpected = -1;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.PropertyTabScope')]
  DNPropertyTabScope = type Integer;
  DNPropertyTabScopeHelper = record helper for DNPropertyTabScope
  public const
    Static_ = 0;
    Global = 1;
    Document = 2;
    Component = 3;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.RefreshProperties')]
  DNRefreshProperties = type Integer;
  DNRefreshPropertiesHelper = record helper for DNRefreshProperties
  public const
    None = 0;
    All = 1;
    Repaint = 2;
  end;


  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.ToolboxItemFilterType')]
  DNToolboxItemFilterType = type Integer;
  DNToolboxItemFilterTypeHelper = record helper for DNToolboxItemFilterType
  public const
    Allow = 0;
    Custom = 1;
    Prevent = 2;
    Require = 3;
  end;


  //-------------namespace: System.Diagnostics----------------
  [DNTypeName('System.Diagnostics.EventLogEntryType')]
  DNEventLogEntryType = type Integer;
  DNEventLogEntryTypeHelper = record helper for DNEventLogEntryType
  public const
    Error = 1;
    Warning = 2;
    Information = 4;
    SuccessAudit = 8;
    FailureAudit = 16;
  end;


  //-------------namespace: System.Diagnostics----------------
  [DNTypeName('System.Diagnostics.EventLogPermissionAccess')]
  DNEventLogPermissionAccess = type Integer;
  DNEventLogPermissionAccessHelper = record helper for DNEventLogPermissionAccess
  public const
    None = 0;
    Browse = 2;
    Instrument = 6;
    Audit = 10;
    Write = 16;
    Administer = 48;
  end;


  //-------------namespace: System.Diagnostics----------------
  [DNTypeName('System.Diagnostics.OverflowAction')]
  DNOverflowAction = type Integer;
  DNOverflowActionHelper = record helper for DNOverflowAction
  public const
    OverwriteAsNeeded = 0;
    OverwriteOlder = 1;
    DoNotOverwrite = -1;
  end;


  //-------------namespace: System.Diagnostics----------------
  [DNTypeName('System.Diagnostics.PerformanceCounterCategoryType')]
  DNPerformanceCounterCategoryType = type Integer;
  DNPerformanceCounterCategoryTypeHelper = record helper for DNPerformanceCounterCategoryType
  public const
    SingleInstance = 0;
    MultiInstance = 1;
    Unknown = -1;
  end;


  //-------------namespace: System.Diagnostics----------------
  [DNTypeName('System.Diagnostics.PerformanceCounterInstanceLifetime')]
  DNPerformanceCounterInstanceLifetime = type Integer;
  DNPerformanceCounterInstanceLifetimeHelper = record helper for DNPerformanceCounterInstanceLifetime
  public const
    Global = 0;
    Process = 1;
  end;


  //-------------namespace: System.Diagnostics----------------
  [DNTypeName('System.Diagnostics.PerformanceCounterPermissionAccess')]
  DNPerformanceCounterPermissionAccess = type Integer;
  DNPerformanceCounterPermissionAccessHelper = record helper for DNPerformanceCounterPermissionAccess
  public const
    None = 0;
    Read = 1;
    Browse = 1;
    Write = 2;
    Instrument = 3;
    Administer = 7;
  end;


  //-------------namespace: System.Diagnostics----------------
  [DNTypeName('System.Diagnostics.PerformanceCounterType')]
  DNPerformanceCounterType = type Integer;
  DNPerformanceCounterTypeHelper = record helper for DNPerformanceCounterType
  public const
    NumberOfItemsHEX32 = 0;
    NumberOfItemsHEX64 = 256;
    NumberOfItems32 = 65536;
    NumberOfItems64 = 65792;
    CounterDelta32 = 4195328;
    CounterDelta64 = 4195584;
    SampleCounter = 4260864;
    CountPerTimeInterval32 = 4523008;
    CountPerTimeInterval64 = 4523264;
    RateOfCountsPerSecond32 = 272696320;
    RateOfCountsPerSecond64 = 272696576;
    RawFraction = 537003008;
    CounterTimer = 541132032;
    Timer100Ns = 542180608;
    SampleFraction = 549585920;
    CounterTimerInverse = 557909248;
    Timer100NsInverse = 558957824;
    CounterMultiTimer = 574686464;
    CounterMultiTimer100Ns = 575735040;
    CounterMultiTimerInverse = 591463680;
    CounterMultiTimer100NsInverse = 592512256;
    AverageTimer32 = 805438464;
    ElapsedTime = 807666944;
    AverageCount64 = 1073874176;
    SampleBase = 1073939457;
    AverageBase = 1073939458;
    RawBase = 1073939459;
    CounterMultiBase = 1107494144;
  end;


  //-------------namespace: System.Diagnostics----------------
  [DNTypeName('System.Diagnostics.ProcessPriorityClass')]
  DNProcessPriorityClass = type Integer;
  DNProcessPriorityClassHelper = record helper for DNProcessPriorityClass
  public const
    Normal = 32;
    Idle = 64;
    High = 128;
    RealTime = 256;
    BelowNormal = 16384;
    AboveNormal = 32768;
  end;


  //-------------namespace: System.Diagnostics----------------
  [DNTypeName('System.Diagnostics.ProcessWindowStyle')]
  DNProcessWindowStyle = type Integer;
  DNProcessWindowStyleHelper = record helper for DNProcessWindowStyle
  public const
    Normal = 0;
    Hidden = 1;
    Minimized = 2;
    Maximized = 3;
  end;


  //-------------namespace: System.Diagnostics----------------
  [DNTypeName('System.Diagnostics.SourceLevels')]
  DNSourceLevels = type Integer;
  DNSourceLevelsHelper = record helper for DNSourceLevels
  public const
    Off = 0;
    Critical = 1;
    Error = 3;
    Warning = 7;
    Information = 15;
    Verbose = 31;
    ActivityTracing = 65280;
    All = -1;
  end;


  //-------------namespace: System.Diagnostics----------------
  [DNTypeName('System.Diagnostics.ThreadPriorityLevel')]
  DNThreadPriorityLevel = type Integer;
  DNThreadPriorityLevelHelper = record helper for DNThreadPriorityLevel
  public const
    Normal = 0;
    AboveNormal = 1;
    Highest = 2;
    TimeCritical = 15;
    Idle = -15;
    Lowest = -2;
    BelowNormal = -1;
  end;


  //-------------namespace: System.Diagnostics----------------
  [DNTypeName('System.Diagnostics.ThreadState')]
  DNThreadState = type Integer;
  DNThreadStateHelper = record helper for DNThreadState
  public const
    Initialized = 0;
    Ready = 1;
    Running = 2;
    Standby = 3;
    Terminated = 4;
    Wait = 5;
    Transition = 6;
    Unknown = 7;
  end;


  //-------------namespace: System.Diagnostics----------------
  [DNTypeName('System.Diagnostics.ThreadWaitReason')]
  DNThreadWaitReason = type Integer;
  DNThreadWaitReasonHelper = record helper for DNThreadWaitReason
  public const
    Executive = 0;
    FreePage = 1;
    PageIn = 2;
    SystemAllocation = 3;
    ExecutionDelay = 4;
    Suspended = 5;
    UserRequest = 6;
    EventPairHigh = 7;
    EventPairLow = 8;
    LpcReceive = 9;
    LpcReply = 10;
    VirtualMemory = 11;
    PageOut = 12;
    Unknown = 13;
  end;


  //-------------namespace: System.Diagnostics----------------
  [DNTypeName('System.Diagnostics.TraceEventType')]
  DNTraceEventType = type Integer;
  DNTraceEventTypeHelper = record helper for DNTraceEventType
  public const
    Critical = 1;
    Error = 2;
    Warning = 4;
    Information = 8;
    Verbose = 16;
    Start = 256;
    Stop = 512;
    Suspend = 1024;
    Resume = 2048;
    Transfer = 4096;
  end;


  //-------------namespace: System.Diagnostics----------------
  [DNTypeName('System.Diagnostics.TraceLevel')]
  DNTraceLevel = type Integer;
  DNTraceLevelHelper = record helper for DNTraceLevel
  public const
    Off = 0;
    Error = 1;
    Warning = 2;
    Info = 3;
    Verbose = 4;
  end;


  //-------------namespace: System.Diagnostics----------------
  [DNTypeName('System.Diagnostics.TraceOptions')]
  DNTraceOptions = type Integer;
  DNTraceOptionsHelper = record helper for DNTraceOptions
  public const
    None = 0;
    LogicalOperationStack = 1;
    DateTime = 2;
    Timestamp = 4;
    ProcessId = 8;
    ThreadId = 16;
    Callstack = 32;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.GenericUriParserOptions')]
  DNGenericUriParserOptions = type Integer;
  DNGenericUriParserOptionsHelper = record helper for DNGenericUriParserOptions
  public const
    Default_ = 0;
    GenericAuthority = 1;
    AllowEmptyAuthority = 2;
    NoUserInfo = 4;
    NoPort = 8;
    NoQuery = 16;
    NoFragment = 32;
    DontConvertPathBackslashes = 64;
    DontCompressPath = 128;
    DontUnescapePathDotsAndSlashes = 256;
    Idn = 512;
    IriParsing = 1024;
  end;


  //-------------namespace: System.IO.Compression----------------
  [DNTypeName('System.IO.Compression.CompressionLevel')]
  DNCompressionLevel = type Integer;
  DNCompressionLevelHelper = record helper for DNCompressionLevel
  public const
    Optimal = 0;
    Fastest = 1;
    NoCompression = 2;
  end;


  //-------------namespace: System.IO.Compression----------------
  [DNTypeName('System.IO.Compression.CompressionMode')]
  DNCompressionMode = type Integer;
  DNCompressionModeHelper = record helper for DNCompressionMode
  public const
    Decompress = 0;
    Compress = 1;
  end;


  //-------------namespace: System.IO----------------
  [DNTypeName('System.IO.NotifyFilters')]
  DNNotifyFilters = type Integer;
  DNNotifyFiltersHelper = record helper for DNNotifyFilters
  public const
    FileName = 1;
    DirectoryName = 2;
    Attributes = 4;
    Size = 8;
    LastWrite = 16;
    LastAccess = 32;
    CreationTime = 64;
    Security = 256;
  end;


  //-------------namespace: System.IO.Ports----------------
  [DNTypeName('System.IO.Ports.Handshake')]
  DNHandshake = type Integer;
  DNHandshakeHelper = record helper for DNHandshake
  public const
    None = 0;
    XOnXOff = 1;
    RequestToSend = 2;
    RequestToSendXOnXOff = 3;
  end;


  //-------------namespace: System.IO.Ports----------------
  [DNTypeName('System.IO.Ports.Parity')]
  DNParity = type Integer;
  DNParityHelper = record helper for DNParity
  public const
    None = 0;
    Odd = 1;
    Even = 2;
    Mark = 3;
    Space = 4;
  end;


  //-------------namespace: System.IO.Ports----------------
  [DNTypeName('System.IO.Ports.SerialData')]
  DNSerialData = type Integer;
  DNSerialDataHelper = record helper for DNSerialData
  public const
    Chars = 1;
    Eof = 2;
  end;


  //-------------namespace: System.IO.Ports----------------
  [DNTypeName('System.IO.Ports.SerialError')]
  DNSerialError = type Integer;
  DNSerialErrorHelper = record helper for DNSerialError
  public const
    RXOver = 1;
    Overrun = 2;
    RXParity = 4;
    Frame = 8;
    TXFull = 256;
  end;


  //-------------namespace: System.IO.Ports----------------
  [DNTypeName('System.IO.Ports.SerialPinChange')]
  DNSerialPinChange = type Integer;
  DNSerialPinChangeHelper = record helper for DNSerialPinChange
  public const
    CtsChanged = 8;
    DsrChanged = 16;
    CDChanged = 32;
    Break = 64;
    Ring = 256;
  end;


  //-------------namespace: System.IO.Ports----------------
  [DNTypeName('System.IO.Ports.StopBits')]
  DNStopBits = type Integer;
  DNStopBitsHelper = record helper for DNStopBits
  public const
    None = 0;
    One = 1;
    Two = 2;
    OnePointFive = 3;
  end;


  //-------------namespace: System.IO----------------
  [DNTypeName('System.IO.WatcherChangeTypes')]
  DNWatcherChangeTypes = type Integer;
  DNWatcherChangeTypesHelper = record helper for DNWatcherChangeTypes
  public const
    Created = 1;
    Deleted = 2;
    Changed = 4;
    Renamed = 8;
    All = 15;
  end;


  //-------------namespace: System.Net----------------
  [DNTypeName('System.Net.AuthenticationSchemes')]
  DNAuthenticationSchemes = type Integer;
  DNAuthenticationSchemesHelper = record helper for DNAuthenticationSchemes
  public const
    None = 0;
    Digest = 1;
    Negotiate = 2;
    Ntlm = 4;
    IntegratedWindowsAuthentication = 6;
    Basic = 8;
    Anonymous = 32768;
  end;


  //-------------namespace: System.Net.Cache----------------
  [DNTypeName('System.Net.Cache.HttpCacheAgeControl')]
  DNHttpCacheAgeControl = type Integer;
  DNHttpCacheAgeControlHelper = record helper for DNHttpCacheAgeControl
  public const
    None = 0;
    MinFresh = 1;
    MaxAge = 2;
    MaxAgeAndMinFresh = 3;
    MaxStale = 4;
    MaxAgeAndMaxStale = 6;
  end;


  //-------------namespace: System.Net.Cache----------------
  [DNTypeName('System.Net.Cache.HttpRequestCacheLevel')]
  DNHttpRequestCacheLevel = type Integer;
  DNHttpRequestCacheLevelHelper = record helper for DNHttpRequestCacheLevel
  public const
    Default_ = 0;
    BypassCache = 1;
    CacheOnly = 2;
    CacheIfAvailable = 3;
    Revalidate = 4;
    Reload = 5;
    NoCacheNoStore = 6;
    CacheOrNextCacheOnly = 7;
    Refresh = 8;
  end;


  //-------------namespace: System.Net.Cache----------------
  [DNTypeName('System.Net.Cache.RequestCacheLevel')]
  DNRequestCacheLevel = type Integer;
  DNRequestCacheLevelHelper = record helper for DNRequestCacheLevel
  public const
    Default_ = 0;
    BypassCache = 1;
    CacheOnly = 2;
    CacheIfAvailable = 3;
    Revalidate = 4;
    Reload = 5;
    NoCacheNoStore = 6;
  end;


  //-------------namespace: System.Net----------------
  [DNTypeName('System.Net.DecompressionMethods')]
  DNDecompressionMethods = type Integer;
  DNDecompressionMethodsHelper = record helper for DNDecompressionMethods
  public const
    None = 0;
    GZip = 1;
    Deflate = 2;
  end;


  //-------------namespace: System.Net----------------
  [DNTypeName('System.Net.FtpStatusCode')]
  DNFtpStatusCode = type Integer;
  DNFtpStatusCodeHelper = record helper for DNFtpStatusCode
  public const
    Undefined = 0;
    RestartMarker = 110;
    ServiceTemporarilyNotAvailable = 120;
    DataAlreadyOpen = 125;
    OpeningData = 150;
    CommandOK = 200;
    CommandExtraneous = 202;
    DirectoryStatus = 212;
    FileStatus = 213;
    SystemType = 215;
    SendUserCommand = 220;
    ClosingControl = 221;
    ClosingData = 226;
    EnteringPassive = 227;
    LoggedInProceed = 230;
    ServerWantsSecureSession = 234;
    FileActionOK = 250;
    PathnameCreated = 257;
    SendPasswordCommand = 331;
    NeedLoginAccount = 332;
    FileCommandPending = 350;
    ServiceNotAvailable = 421;
    CantOpenData = 425;
    ConnectionClosed = 426;
    ActionNotTakenFileUnavailableOrBusy = 450;
    ActionAbortedLocalProcessingError = 451;
    ActionNotTakenInsufficientSpace = 452;
    CommandSyntaxError = 500;
    ArgumentSyntaxError = 501;
    CommandNotImplemented = 502;
    BadCommandSequence = 503;
    NotLoggedIn = 530;
    AccountNeeded = 532;
    ActionNotTakenFileUnavailable = 550;
    ActionAbortedUnknownPageType = 551;
    FileActionAborted = 552;
    ActionNotTakenFilenameNotAllowed = 553;
  end;


  //-------------namespace: System.Net----------------
  [DNTypeName('System.Net.HttpRequestHeader')]
  DNHttpRequestHeader = type Integer;
  DNHttpRequestHeaderHelper = record helper for DNHttpRequestHeader
  public const
    CacheControl = 0;
    Connection = 1;
    Date = 2;
    KeepAlive = 3;
    Pragma = 4;
    Trailer = 5;
    TransferEncoding = 6;
    Upgrade = 7;
    Via = 8;
    Warning = 9;
    Allow = 10;
    ContentLength = 11;
    ContentType = 12;
    ContentEncoding = 13;
    ContentLanguage = 14;
    ContentLocation = 15;
    ContentMd5 = 16;
    ContentRange = 17;
    Expires = 18;
    LastModified = 19;
    Accept = 20;
    AcceptCharset = 21;
    AcceptEncoding = 22;
    AcceptLanguage = 23;
    Authorization = 24;
    Cookie = 25;
    Expect = 26;
    From = 27;
    Host = 28;
    IfMatch = 29;
    IfModifiedSince = 30;
    IfNoneMatch = 31;
    IfRange = 32;
    IfUnmodifiedSince = 33;
    MaxForwards = 34;
    ProxyAuthorization = 35;
    Referer = 36;
    Range = 37;
    Te = 38;
    Translate = 39;
    UserAgent = 40;
  end;


  //-------------namespace: System.Net----------------
  [DNTypeName('System.Net.HttpResponseHeader')]
  DNHttpResponseHeader = type Integer;
  DNHttpResponseHeaderHelper = record helper for DNHttpResponseHeader
  public const
    CacheControl = 0;
    Connection = 1;
    Date = 2;
    KeepAlive = 3;
    Pragma = 4;
    Trailer = 5;
    TransferEncoding = 6;
    Upgrade = 7;
    Via = 8;
    Warning = 9;
    Allow = 10;
    ContentLength = 11;
    ContentType = 12;
    ContentEncoding = 13;
    ContentLanguage = 14;
    ContentLocation = 15;
    ContentMd5 = 16;
    ContentRange = 17;
    Expires = 18;
    LastModified = 19;
    AcceptRanges = 20;
    Age = 21;
    ETag = 22;
    Location = 23;
    ProxyAuthenticate = 24;
    RetryAfter = 25;
    Server = 26;
    SetCookie = 27;
    Vary = 28;
    WwwAuthenticate = 29;
  end;


  //-------------namespace: System.Net----------------
  [DNTypeName('System.Net.HttpStatusCode')]
  DNHttpStatusCode = type Integer;
  DNHttpStatusCodeHelper = record helper for DNHttpStatusCode
  public const
    Continue_ = 100;
    SwitchingProtocols = 101;
    OK = 200;
    Created = 201;
    Accepted = 202;
    NonAuthoritativeInformation = 203;
    NoContent = 204;
    ResetContent = 205;
    PartialContent = 206;
    MultipleChoices = 300;
    Ambiguous = 300;
    MovedPermanently = 301;
    Moved = 301;
    Found = 302;
    Redirect = 302;
    SeeOther = 303;
    RedirectMethod = 303;
    NotModified = 304;
    UseProxy = 305;
    Unused = 306;
    TemporaryRedirect = 307;
    RedirectKeepVerb = 307;
    BadRequest = 400;
    Unauthorized = 401;
    PaymentRequired = 402;
    Forbidden = 403;
    NotFound = 404;
    MethodNotAllowed = 405;
    NotAcceptable = 406;
    ProxyAuthenticationRequired = 407;
    RequestTimeout = 408;
    Conflict = 409;
    Gone = 410;
    LengthRequired = 411;
    PreconditionFailed = 412;
    RequestEntityTooLarge = 413;
    RequestUriTooLong = 414;
    UnsupportedMediaType = 415;
    RequestedRangeNotSatisfiable = 416;
    ExpectationFailed = 417;
    UpgradeRequired = 426;
    InternalServerError = 500;
    NotImplemented = 501;
    BadGateway = 502;
    ServiceUnavailable = 503;
    GatewayTimeout = 504;
    HttpVersionNotSupported = 505;
  end;


  //-------------namespace: System.Net.Mail----------------
  [DNTypeName('System.Net.Mail.DeliveryNotificationOptions')]
  DNDeliveryNotificationOptions = type Integer;
  DNDeliveryNotificationOptionsHelper = record helper for DNDeliveryNotificationOptions
  public const
    None = 0;
    OnSuccess = 1;
    OnFailure = 2;
    Delay = 4;
    Never = 134217728;
  end;


  //-------------namespace: System.Net.Mail----------------
  [DNTypeName('System.Net.Mail.MailPriority')]
  DNMailPriority = type Integer;
  DNMailPriorityHelper = record helper for DNMailPriority
  public const
    Normal = 0;
    Low = 1;
    High = 2;
  end;


  //-------------namespace: System.Net.Mail----------------
  [DNTypeName('System.Net.Mail.SmtpAccess')]
  DNSmtpAccess = type Integer;
  DNSmtpAccessHelper = record helper for DNSmtpAccess
  public const
    None = 0;
    Connect = 1;
    ConnectToUnrestrictedPort = 2;
  end;


  //-------------namespace: System.Net.Mail----------------
  [DNTypeName('System.Net.Mail.SmtpDeliveryFormat')]
  DNSmtpDeliveryFormat = type Integer;
  DNSmtpDeliveryFormatHelper = record helper for DNSmtpDeliveryFormat
  public const
    SevenBit = 0;
    International = 1;
  end;


  //-------------namespace: System.Net.Mail----------------
  [DNTypeName('System.Net.Mail.SmtpDeliveryMethod')]
  DNSmtpDeliveryMethod = type Integer;
  DNSmtpDeliveryMethodHelper = record helper for DNSmtpDeliveryMethod
  public const
    Network = 0;
    SpecifiedPickupDirectory = 1;
    PickupDirectoryFromIis = 2;
  end;


  //-------------namespace: System.Net.Mail----------------
  [DNTypeName('System.Net.Mail.SmtpStatusCode')]
  DNSmtpStatusCode = type Integer;
  DNSmtpStatusCodeHelper = record helper for DNSmtpStatusCode
  public const
    SystemStatus = 211;
    HelpMessage = 214;
    ServiceReady = 220;
    ServiceClosingTransmissionChannel = 221;
    Ok = 250;
    UserNotLocalWillForward = 251;
    CannotVerifyUserWillAttemptDelivery = 252;
    StartMailInput = 354;
    ServiceNotAvailable = 421;
    MailboxBusy = 450;
    LocalErrorInProcessing = 451;
    InsufficientStorage = 452;
    ClientNotPermitted = 454;
    CommandUnrecognized = 500;
    SyntaxError = 501;
    CommandNotImplemented = 502;
    BadCommandSequence = 503;
    CommandParameterNotImplemented = 504;
    MustIssueStartTlsFirst = 530;
    MailboxUnavailable = 550;
    UserNotLocalTryAlternatePath = 551;
    ExceededStorageAllocation = 552;
    MailboxNameNotAllowed = 553;
    TransactionFailed = 554;
    GeneralFailure = -1;
  end;


  //-------------namespace: System.Net.Mime----------------
  [DNTypeName('System.Net.Mime.TransferEncoding')]
  DNTransferEncoding = type Integer;
  DNTransferEncodingHelper = record helper for DNTransferEncoding
  public const
    QuotedPrintable = 0;
    Base64 = 1;
    SevenBit = 2;
    EightBit = 3;
    Unknown = -1;
  end;


  //-------------namespace: System.Net----------------
  [DNTypeName('System.Net.NetworkAccess')]
  DNNetworkAccess = type Integer;
  DNNetworkAccessHelper = record helper for DNNetworkAccess
  public const
    Connect = 64;
    Accept = 128;
  end;


  //-------------namespace: System.Net.NetworkInformation----------------
  [DNTypeName('System.Net.NetworkInformation.DuplicateAddressDetectionState')]
  DNDuplicateAddressDetectionState = type Integer;
  DNDuplicateAddressDetectionStateHelper = record helper for DNDuplicateAddressDetectionState
  public const
    Invalid = 0;
    Tentative = 1;
    Duplicate = 2;
    Deprecated = 3;
    Preferred = 4;
  end;


  //-------------namespace: System.Net.NetworkInformation----------------
  [DNTypeName('System.Net.NetworkInformation.IPStatus')]
  DNIPStatus = type Integer;
  DNIPStatusHelper = record helper for DNIPStatus
  public const
    Success = 0;
    DestinationNetworkUnreachable = 11002;
    DestinationHostUnreachable = 11003;
    DestinationProhibited = 11004;
    DestinationProtocolUnreachable = 11004;
    DestinationPortUnreachable = 11005;
    NoResources = 11006;
    BadOption = 11007;
    HardwareError = 11008;
    PacketTooBig = 11009;
    TimedOut = 11010;
    BadRoute = 11012;
    TtlExpired = 11013;
    TtlReassemblyTimeExceeded = 11014;
    ParameterProblem = 11015;
    SourceQuench = 11016;
    BadDestination = 11018;
    DestinationUnreachable = 11040;
    TimeExceeded = 11041;
    BadHeader = 11042;
    UnrecognizedNextHeader = 11043;
    IcmpError = 11044;
    DestinationScopeMismatch = 11045;
    Unknown = -1;
  end;


  //-------------namespace: System.Net.NetworkInformation----------------
  [DNTypeName('System.Net.NetworkInformation.NetBiosNodeType')]
  DNNetBiosNodeType = type Integer;
  DNNetBiosNodeTypeHelper = record helper for DNNetBiosNodeType
  public const
    Unknown = 0;
    Broadcast = 1;
    Peer2Peer = 2;
    Mixed = 4;
    Hybrid = 8;
  end;


  //-------------namespace: System.Net.NetworkInformation----------------
  [DNTypeName('System.Net.NetworkInformation.NetworkInformationAccess')]
  DNNetworkInformationAccess = type Integer;
  DNNetworkInformationAccessHelper = record helper for DNNetworkInformationAccess
  public const
    None = 0;
    Read = 1;
    Ping = 4;
  end;


  //-------------namespace: System.Net.NetworkInformation----------------
  [DNTypeName('System.Net.NetworkInformation.NetworkInterfaceComponent')]
  DNNetworkInterfaceComponent = type Integer;
  DNNetworkInterfaceComponentHelper = record helper for DNNetworkInterfaceComponent
  public const
    IPv4 = 0;
    IPv6 = 1;
  end;


  //-------------namespace: System.Net.NetworkInformation----------------
  [DNTypeName('System.Net.NetworkInformation.NetworkInterfaceType')]
  DNNetworkInterfaceType = type Integer;
  DNNetworkInterfaceTypeHelper = record helper for DNNetworkInterfaceType
  public const
    Unknown = 1;
    Ethernet = 6;
    TokenRing = 9;
    Fddi = 15;
    BasicIsdn = 20;
    PrimaryIsdn = 21;
    Ppp = 23;
    Loopback = 24;
    Ethernet3Megabit = 26;
    Slip = 28;
    Atm = 37;
    GenericModem = 48;
    FastEthernetT = 62;
    Isdn = 63;
    FastEthernetFx = 69;
    Wireless80211 = 71;
    AsymmetricDsl = 94;
    RateAdaptDsl = 95;
    SymmetricDsl = 96;
    VeryHighSpeedDsl = 97;
    IPOverAtm = 114;
    GigabitEthernet = 117;
    Tunnel = 131;
    MultiRateSymmetricDsl = 143;
    HighPerformanceSerialBus = 144;
    Wman = 237;
    Wwanpp = 243;
    Wwanpp2 = 244;
  end;


  //-------------namespace: System.Net.NetworkInformation----------------
  [DNTypeName('System.Net.NetworkInformation.OperationalStatus')]
  DNOperationalStatus = type Integer;
  DNOperationalStatusHelper = record helper for DNOperationalStatus
  public const
    Up = 1;
    Down = 2;
    Testing = 3;
    Unknown = 4;
    Dormant = 5;
    NotPresent = 6;
    LowerLayerDown = 7;
  end;


  //-------------namespace: System.Net.NetworkInformation----------------
  [DNTypeName('System.Net.NetworkInformation.PrefixOrigin')]
  DNPrefixOrigin = type Integer;
  DNPrefixOriginHelper = record helper for DNPrefixOrigin
  public const
    Other = 0;
    Manual = 1;
    WellKnown = 2;
    Dhcp = 3;
    RouterAdvertisement = 4;
  end;


  //-------------namespace: System.Net.NetworkInformation----------------
  [DNTypeName('System.Net.NetworkInformation.ScopeLevel')]
  DNScopeLevel = type Integer;
  DNScopeLevelHelper = record helper for DNScopeLevel
  public const
    None = 0;
    Interface_ = 1;
    Link = 2;
    Subnet = 3;
    Admin = 4;
    Site = 5;
    Organization = 8;
    Global = 14;
  end;


  //-------------namespace: System.Net.NetworkInformation----------------
  [DNTypeName('System.Net.NetworkInformation.SuffixOrigin')]
  DNSuffixOrigin = type Integer;
  DNSuffixOriginHelper = record helper for DNSuffixOrigin
  public const
    Other = 0;
    Manual = 1;
    WellKnown = 2;
    OriginDhcp = 3;
    LinkLayerAddress = 4;
    Random = 5;
  end;


  //-------------namespace: System.Net.NetworkInformation----------------
  [DNTypeName('System.Net.NetworkInformation.TcpState')]
  DNTcpState = type Integer;
  DNTcpStateHelper = record helper for DNTcpState
  public const
    Unknown = 0;
    Closed = 1;
    Listen = 2;
    SynSent = 3;
    SynReceived = 4;
    Established = 5;
    FinWait1 = 6;
    FinWait2 = 7;
    CloseWait = 8;
    Closing = 9;
    LastAck = 10;
    TimeWait = 11;
    DeleteTcb = 12;
  end;


  //-------------namespace: System.Net.Security----------------
  [DNTypeName('System.Net.Security.AuthenticationLevel')]
  DNAuthenticationLevel = type Integer;
  DNAuthenticationLevelHelper = record helper for DNAuthenticationLevel
  public const
    None = 0;
    MutualAuthRequested = 1;
    MutualAuthRequired = 2;
  end;


  //-------------namespace: System.Net.Security----------------
  [DNTypeName('System.Net.Security.EncryptionPolicy')]
  DNEncryptionPolicy = type Integer;
  DNEncryptionPolicyHelper = record helper for DNEncryptionPolicy
  public const
    RequireEncryption = 0;
    AllowNoEncryption = 1;
    NoEncryption = 2;
  end;


  //-------------namespace: System.Net.Security----------------
  [DNTypeName('System.Net.Security.ProtectionLevel')]
  DNProtectionLevel = type Integer;
  DNProtectionLevelHelper = record helper for DNProtectionLevel
  public const
    None = 0;
    Sign = 1;
    EncryptAndSign = 2;
  end;


  //-------------namespace: System.Net.Security----------------
  [DNTypeName('System.Net.Security.SslPolicyErrors')]
  DNSslPolicyErrors = type Integer;
  DNSslPolicyErrorsHelper = record helper for DNSslPolicyErrors
  public const
    None = 0;
    RemoteCertificateNotAvailable = 1;
    RemoteCertificateNameMismatch = 2;
    RemoteCertificateChainErrors = 4;
  end;


  //-------------namespace: System.Net----------------
  [DNTypeName('System.Net.SecurityProtocolType')]
  DNSecurityProtocolType = type Integer;
  DNSecurityProtocolTypeHelper = record helper for DNSecurityProtocolType
  public const
    SystemDefault = 0;
    Ssl3 = 48;
    Tls = 192;
    Tls11 = 768;
    Tls12 = 3072;
    Tls13 = 12288;
  end;


  //-------------namespace: System.Net.Sockets----------------
  [DNTypeName('System.Net.Sockets.AddressFamily')]
  DNAddressFamily = type Integer;
  DNAddressFamilyHelper = record helper for DNAddressFamily
  public const
    Unspecified = 0;
    Unix = 1;
    InterNetwork = 2;
    ImpLink = 3;
    Pup = 4;
    Chaos = 5;
    Ipx = 6;
    NS = 6;
    Iso = 7;
    Osi = 7;
    Ecma = 8;
    DataKit = 9;
    Ccitt = 10;
    Sna = 11;
    DecNet = 12;
    DataLink = 13;
    Lat = 14;
    HyperChannel = 15;
    AppleTalk = 16;
    NetBios = 17;
    VoiceView = 18;
    FireFox = 19;
    Banyan = 21;
    Atm = 22;
    InterNetworkV6 = 23;
    Cluster = 24;
    Ieee12844 = 25;
    Irda = 26;
    NetworkDesigners = 28;
    Max = 29;
    Unknown = -1;
  end;


  //-------------namespace: System.Net.Sockets----------------
  [DNTypeName('System.Net.Sockets.IOControlCode')]
  DNIOControlCode = type Integer;
  DNIOControlCodeHelper = record helper for DNIOControlCode
  public const
    EnableCircularQueuing = 671088642;
    Flush = 671088644;
    AddressListChange = 671088663;
    DataToRead = 1074030207;
    OobDataRead = 1074033415;
    GetBroadcastAddress = 1207959557;
    AddressListQuery = 1207959574;
    QueryTargetPnpHandle = 1207959576;
    AsyncIO = 2147772029;
    NonBlockingIO = 2147772030;
    AssociateHandle = 2281701377;
    MultipointLoopback = 2281701385;
    MulticastScope = 2281701386;
    SetQos = 2281701387;
    SetGroupQos = 2281701388;
    RoutingInterfaceChange = 2281701397;
    NamespaceChange = 2281701401;
    ReceiveAll = 2550136833;
    ReceiveAllMulticast = 2550136834;
    ReceiveAllIgmpMulticast = 2550136835;
    KeepAliveValues = 2550136836;
    AbsorbRouterAlert = 2550136837;
    UnicastInterface = 2550136838;
    LimitBroadcasts = 2550136839;
    BindToInterface = 2550136840;
    MulticastInterface = 2550136841;
    AddMulticastGroupOnInterface = 2550136842;
    DeleteMulticastGroupFromInterface = 2550136843;
    GetExtensionFunctionPointer = 3355443206;
    GetQos = 3355443207;
    GetGroupQos = 3355443208;
    TranslateHandle = 3355443213;
    RoutingInterfaceQuery = 3355443220;
    AddressListSort = 3355443225;
  end;


  //-------------namespace: System.Net.Sockets----------------
  [DNTypeName('System.Net.Sockets.IPProtectionLevel')]
  DNIPProtectionLevel = type Integer;
  DNIPProtectionLevelHelper = record helper for DNIPProtectionLevel
  public const
    Unrestricted = 10;
    EdgeRestricted = 20;
    Restricted = 30;
    Unspecified = -1;
  end;


  //-------------namespace: System.Net.Sockets----------------
  [DNTypeName('System.Net.Sockets.ProtocolFamily')]
  DNProtocolFamily = type Integer;
  DNProtocolFamilyHelper = record helper for DNProtocolFamily
  public const
    Unspecified = 0;
    Unix = 1;
    InterNetwork = 2;
    ImpLink = 3;
    Pup = 4;
    Chaos = 5;
    Ipx = 6;
    NS = 6;
    Iso = 7;
    Osi = 7;
    Ecma = 8;
    DataKit = 9;
    Ccitt = 10;
    Sna = 11;
    DecNet = 12;
    DataLink = 13;
    Lat = 14;
    HyperChannel = 15;
    AppleTalk = 16;
    NetBios = 17;
    VoiceView = 18;
    FireFox = 19;
    Banyan = 21;
    Atm = 22;
    InterNetworkV6 = 23;
    Cluster = 24;
    Ieee12844 = 25;
    Irda = 26;
    NetworkDesigners = 28;
    Max = 29;
    Unknown = -1;
  end;


  //-------------namespace: System.Net.Sockets----------------
  [DNTypeName('System.Net.Sockets.ProtocolType')]
  DNProtocolType = type Integer;
  DNProtocolTypeHelper = record helper for DNProtocolType
  public const
    IPv6HopByHopOptions = 0;
    IP = 0;
    Unspecified = 0;
    Icmp = 1;
    Igmp = 2;
    Ggp = 3;
    IPv4 = 4;
    Tcp = 6;
    Pup = 12;
    Udp = 17;
    Idp = 22;
    IPv6 = 41;
    IPv6RoutingHeader = 43;
    IPv6FragmentHeader = 44;
    IPSecEncapsulatingSecurityPayload = 50;
    IPSecAuthenticationHeader = 51;
    IcmpV6 = 58;
    IPv6NoNextHeader = 59;
    IPv6DestinationOptions = 60;
    ND = 77;
    Raw = 255;
    Ipx = 1000;
    Spx = 1256;
    SpxII = 1257;
    Unknown = -1;
  end;


  //-------------namespace: System.Net.Sockets----------------
  [DNTypeName('System.Net.Sockets.SelectMode')]
  DNSelectMode = type Integer;
  DNSelectModeHelper = record helper for DNSelectMode
  public const
    SelectRead = 0;
    SelectWrite = 1;
    SelectError = 2;
  end;


  //-------------namespace: System.Net.Sockets----------------
  [DNTypeName('System.Net.Sockets.SocketAsyncOperation')]
  DNSocketAsyncOperation = type Integer;
  DNSocketAsyncOperationHelper = record helper for DNSocketAsyncOperation
  public const
    None = 0;
    Accept = 1;
    Connect = 2;
    Disconnect = 3;
    Receive = 4;
    ReceiveFrom = 5;
    ReceiveMessageFrom = 6;
    Send = 7;
    SendPackets = 8;
    SendTo = 9;
  end;


  //-------------namespace: System.Net.Sockets----------------
  [DNTypeName('System.Net.Sockets.SocketClientAccessPolicyProtocol')]
  DNSocketClientAccessPolicyProtocol = type Integer;
  DNSocketClientAccessPolicyProtocolHelper = record helper for DNSocketClientAccessPolicyProtocol
  public const
    Tcp = 0;
    Http = 1;
  end;


  //-------------namespace: System.Net.Sockets----------------
  [DNTypeName('System.Net.Sockets.SocketError')]
  DNSocketError = type Integer;
  DNSocketErrorHelper = record helper for DNSocketError
  public const
    Success = 0;
    OperationAborted = 995;
    IOPending = 997;
    Interrupted = 10004;
    AccessDenied = 10013;
    Fault = 10014;
    InvalidArgument = 10022;
    TooManyOpenSockets = 10024;
    WouldBlock = 10035;
    InProgress = 10036;
    AlreadyInProgress = 10037;
    NotSocket = 10038;
    DestinationAddressRequired = 10039;
    MessageSize = 10040;
    ProtocolType = 10041;
    ProtocolOption = 10042;
    ProtocolNotSupported = 10043;
    SocketNotSupported = 10044;
    OperationNotSupported = 10045;
    ProtocolFamilyNotSupported = 10046;
    AddressFamilyNotSupported = 10047;
    AddressAlreadyInUse = 10048;
    AddressNotAvailable = 10049;
    NetworkDown = 10050;
    NetworkUnreachable = 10051;
    NetworkReset = 10052;
    ConnectionAborted = 10053;
    ConnectionReset = 10054;
    NoBufferSpaceAvailable = 10055;
    IsConnected = 10056;
    NotConnected = 10057;
    Shutdown = 10058;
    TimedOut = 10060;
    ConnectionRefused = 10061;
    HostDown = 10064;
    HostUnreachable = 10065;
    ProcessLimit = 10067;
    SystemNotReady = 10091;
    VersionNotSupported = 10092;
    NotInitialized = 10093;
    Disconnecting = 10101;
    TypeNotFound = 10109;
    HostNotFound = 11001;
    TryAgain = 11002;
    NoRecovery = 11003;
    NoData = 11004;
    SocketError = -1;
  end;


  //-------------namespace: System.Net.Sockets----------------
  [DNTypeName('System.Net.Sockets.SocketFlags')]
  DNSocketFlags = type Integer;
  DNSocketFlagsHelper = record helper for DNSocketFlags
  public const
    None = 0;
    OutOfBand = 1;
    Peek = 2;
    DontRoute = 4;
    MaxIOVectorLength = 16;
    Truncated = 256;
    ControlDataTruncated = 512;
    Broadcast = 1024;
    Multicast = 2048;
    Partial = 32768;
  end;


  //-------------namespace: System.Net.Sockets----------------
  [DNTypeName('System.Net.Sockets.SocketInformationOptions')]
  DNSocketInformationOptions = type Integer;
  DNSocketInformationOptionsHelper = record helper for DNSocketInformationOptions
  public const
    NonBlocking = 1;
    Connected = 2;
    Listening = 4;
    UseOnlyOverlappedIO = 8;
  end;


  //-------------namespace: System.Net.Sockets----------------
  [DNTypeName('System.Net.Sockets.SocketOptionLevel')]
  DNSocketOptionLevel = type Integer;
  DNSocketOptionLevelHelper = record helper for DNSocketOptionLevel
  public const
    IP = 0;
    Tcp = 6;
    Udp = 17;
    IPv6 = 41;
    Socket = 65535;
  end;


  //-------------namespace: System.Net.Sockets----------------
  [DNTypeName('System.Net.Sockets.SocketOptionName')]
  DNSocketOptionName = type Integer;
  DNSocketOptionNameHelper = record helper for DNSocketOptionName
  public const
    IPOptions = 1;
    Debug = 1;
    NoChecksum = 1;
    NoDelay = 1;
    HeaderIncluded = 2;
    AcceptConnection = 2;
    BsdUrgent = 2;
    Expedited = 2;
    TypeOfService = 3;
    ReuseAddress = 4;
    IpTimeToLive = 4;
    KeepAlive = 8;
    MulticastInterface = 9;
    MulticastTimeToLive = 10;
    MulticastLoopback = 11;
    AddMembership = 12;
    DropMembership = 13;
    DontFragment = 14;
    AddSourceMembership = 15;
    DropSourceMembership = 16;
    DontRoute = 16;
    BlockSource = 17;
    UnblockSource = 18;
    PacketInformation = 19;
    ChecksumCoverage = 20;
    HopLimit = 21;
    IPProtectionLevel = 23;
    IPv6Only = 27;
    Broadcast = 32;
    UseLoopback = 64;
    Linger = 128;
    OutOfBandInline = 256;
    SendBuffer = 4097;
    ReceiveBuffer = 4098;
    SendLowWater = 4099;
    ReceiveLowWater = 4100;
    SendTimeout = 4101;
    ReceiveTimeout = 4102;
    Error = 4103;
    Type_ = 4104;
    ReuseUnicastPort = 12295;
    UpdateAcceptContext = 28683;
    UpdateConnectContext = 28688;
    MaxConnections = 2147483647;
    DontLinger = -129;
    ExclusiveAddressUse = -5;
  end;


  //-------------namespace: System.Net.Sockets----------------
  [DNTypeName('System.Net.Sockets.SocketShutdown')]
  DNSocketShutdown = type Integer;
  DNSocketShutdownHelper = record helper for DNSocketShutdown
  public const
    Receive = 0;
    Send = 1;
    Both = 2;
  end;


  //-------------namespace: System.Net.Sockets----------------
  [DNTypeName('System.Net.Sockets.SocketType')]
  DNSocketType = type Integer;
  DNSocketTypeHelper = record helper for DNSocketType
  public const
    Stream = 1;
    Dgram = 2;
    Raw = 3;
    Rdm = 4;
    Seqpacket = 5;
    Unknown = -1;
  end;


  //-------------namespace: System.Net.Sockets----------------
  [DNTypeName('System.Net.Sockets.TransmitFileOptions')]
  DNTransmitFileOptions = type Integer;
  DNTransmitFileOptionsHelper = record helper for DNTransmitFileOptions
  public const
    UseDefaultWorkerThread = 0;
    Disconnect = 1;
    ReuseSocket = 2;
    WriteBehind = 4;
    UseSystemThread = 16;
    UseKernelApc = 32;
  end;


  //-------------namespace: System.Net----------------
  [DNTypeName('System.Net.TransportType')]
  DNTransportType = type Integer;
  DNTransportTypeHelper = record helper for DNTransportType
  public const
    Udp = 1;
    Connectionless = 1;
    Tcp = 2;
    ConnectionOriented = 2;
    All = 3;
  end;


  //-------------namespace: System.Net----------------
  [DNTypeName('System.Net.WebExceptionStatus')]
  DNWebExceptionStatus = type Integer;
  DNWebExceptionStatusHelper = record helper for DNWebExceptionStatus
  public const
    Success = 0;
    NameResolutionFailure = 1;
    ConnectFailure = 2;
    ReceiveFailure = 3;
    SendFailure = 4;
    PipelineFailure = 5;
    RequestCanceled = 6;
    ProtocolError = 7;
    ConnectionClosed = 8;
    TrustFailure = 9;
    SecureChannelFailure = 10;
    ServerProtocolViolation = 11;
    KeepAliveFailure = 12;
    Pending = 13;
    Timeout = 14;
    ProxyNameResolutionFailure = 15;
    UnknownError = 16;
    MessageLengthLimitExceeded = 17;
    CacheEntryNotFound = 18;
    RequestProhibitedByCachePolicy = 19;
    RequestProhibitedByProxy = 20;
  end;


  //-------------namespace: System.Net.WebSockets----------------
  [DNTypeName('System.Net.WebSockets.WebSocketCloseStatus')]
  DNWebSocketCloseStatus = type Integer;
  DNWebSocketCloseStatusHelper = record helper for DNWebSocketCloseStatus
  public const
    NormalClosure = 1000;
    EndpointUnavailable = 1001;
    ProtocolError = 1002;
    InvalidMessageType = 1003;
    Empty = 1005;
    InvalidPayloadData = 1007;
    PolicyViolation = 1008;
    MessageTooBig = 1009;
    MandatoryExtension = 1010;
    InternalServerError = 1011;
  end;


  //-------------namespace: System.Net.WebSockets----------------
  [DNTypeName('System.Net.WebSockets.WebSocketError')]
  DNWebSocketError = type Integer;
  DNWebSocketErrorHelper = record helper for DNWebSocketError
  public const
    Success = 0;
    InvalidMessageType = 1;
    Faulted = 2;
    NativeError = 3;
    NotAWebSocket = 4;
    UnsupportedVersion = 5;
    UnsupportedProtocol = 6;
    HeaderError = 7;
    ConnectionClosedPrematurely = 8;
    InvalidState = 9;
  end;


  //-------------namespace: System.Net.WebSockets----------------
  [DNTypeName('System.Net.WebSockets.WebSocketMessageType')]
  DNWebSocketMessageType = type Integer;
  DNWebSocketMessageTypeHelper = record helper for DNWebSocketMessageType
  public const
    Text = 0;
    Binary = 1;
    Close = 2;
  end;


  //-------------namespace: System.Net.WebSockets----------------
  [DNTypeName('System.Net.WebSockets.WebSocketState')]
  DNWebSocketState = type Integer;
  DNWebSocketStateHelper = record helper for DNWebSocketState
  public const
    None = 0;
    Connecting = 1;
    Open = 2;
    CloseSent = 3;
    CloseReceived = 4;
    Closed = 5;
    Aborted = 6;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.ADVF')]
  DNADVF = type Integer;
  DNADVFHelper = record helper for DNADVF
  public const
    ADVF_NODATA = 1;
    ADVF_PRIMEFIRST = 2;
    ADVF_ONLYONCE = 4;
    ADVFCACHE_NOHANDLER = 8;
    ADVFCACHE_FORCEBUILTIN = 16;
    ADVFCACHE_ONSAVE = 32;
    ADVF_DATAONSTOP = 64;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.DATADIR')]
  DNDATADIR = type Integer;
  DNDATADIRHelper = record helper for DNDATADIR
  public const
    DATADIR_GET = 1;
    DATADIR_SET = 2;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.DVASPECT')]
  DNDVASPECT = type Integer;
  DNDVASPECTHelper = record helper for DNDVASPECT
  public const
    DVASPECT_CONTENT = 1;
    DVASPECT_THUMBNAIL = 2;
    DVASPECT_ICON = 4;
    DVASPECT_DOCPRINT = 8;
  end;


  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.TYMED')]
  DNTYMED = type Integer;
  DNTYMEDHelper = record helper for DNTYMED
  public const
    TYMED_NULL = 0;
    TYMED_HGLOBAL = 1;
    TYMED_FILE = 2;
    TYMED_ISTREAM = 4;
    TYMED_ISTORAGE = 8;
    TYMED_GDI = 16;
    TYMED_MFPICT = 32;
    TYMED_ENHMF = 64;
  end;


  //-------------namespace: System.Security.AccessControl----------------
  [DNTypeName('System.Security.AccessControl.SemaphoreRights')]
  DNSemaphoreRights = type Integer;
  DNSemaphoreRightsHelper = record helper for DNSemaphoreRights
  public const
    Modify = 2;
    Delete = 65536;
    ReadPermissions = 131072;
    ChangePermissions = 262144;
    TakeOwnership = 524288;
    Synchronize = 1048576;
    FullControl = 2031619;
  end;


  //-------------namespace: System.Security.Authentication----------------
  [DNTypeName('System.Security.Authentication.CipherAlgorithmType')]
  DNCipherAlgorithmType = type Integer;
  DNCipherAlgorithmTypeHelper = record helper for DNCipherAlgorithmType
  public const
    None = 0;
    Null = 24576;
    Des = 26113;
    Rc2 = 26114;
    TripleDes = 26115;
    Aes128 = 26126;
    Aes192 = 26127;
    Aes256 = 26128;
    Aes = 26129;
    Rc4 = 26625;
  end;


  //-------------namespace: System.Security.Authentication----------------
  [DNTypeName('System.Security.Authentication.ExchangeAlgorithmType')]
  DNExchangeAlgorithmType = type Integer;
  DNExchangeAlgorithmTypeHelper = record helper for DNExchangeAlgorithmType
  public const
    None = 0;
    RsaSign = 9216;
    RsaKeyX = 41984;
    DiffieHellman = 43522;
  end;


  //-------------namespace: System.Security.Authentication.ExtendedProtection----------------
  [DNTypeName('System.Security.Authentication.ExtendedProtection.ChannelBindingKind')]
  DNChannelBindingKind = type Integer;
  DNChannelBindingKindHelper = record helper for DNChannelBindingKind
  public const
    Unknown = 0;
    Unique = 25;
    Endpoint = 26;
  end;


  //-------------namespace: System.Security.Authentication.ExtendedProtection----------------
  [DNTypeName('System.Security.Authentication.ExtendedProtection.PolicyEnforcement')]
  DNPolicyEnforcement = type Integer;
  DNPolicyEnforcementHelper = record helper for DNPolicyEnforcement
  public const
    Never = 0;
    WhenSupported = 1;
    Always = 2;
  end;


  //-------------namespace: System.Security.Authentication.ExtendedProtection----------------
  [DNTypeName('System.Security.Authentication.ExtendedProtection.ProtectionScenario')]
  DNProtectionScenario = type Integer;
  DNProtectionScenarioHelper = record helper for DNProtectionScenario
  public const
    TransportSelected = 0;
    TrustedProxy = 1;
  end;


  //-------------namespace: System.Security.Authentication.ExtendedProtection----------------
  [DNTypeName('System.Security.Authentication.ExtendedProtection.TokenBindingType')]
  DNTokenBindingType = type Integer;
  DNTokenBindingTypeHelper = record helper for DNTokenBindingType
  public const
    Provided = 0;
    Referred = 1;
  end;


  //-------------namespace: System.Security.Authentication----------------
  [DNTypeName('System.Security.Authentication.HashAlgorithmType')]
  DNHashAlgorithmType = type Integer;
  DNHashAlgorithmTypeHelper = record helper for DNHashAlgorithmType
  public const
    None = 0;
    Md5 = 32771;
    Sha1 = 32772;
    Sha256 = 32780;
    Sha384 = 32781;
    Sha512 = 32782;
  end;


  //-------------namespace: System.Security.Authentication----------------
  [DNTypeName('System.Security.Authentication.SslProtocols')]
  DNSslProtocols = type Integer;
  DNSslProtocolsHelper = record helper for DNSslProtocols
  public const
    None = 0;
    Ssl2 = 12;
    Ssl3 = 48;
    Tls = 192;
    Default_ = 240;
    Tls11 = 768;
    Tls12 = 3072;
    Tls13 = 12288;
  end;


  //-------------namespace: System.Security.Cryptography----------------
  [DNTypeName('System.Security.Cryptography.OidGroup')]
  DNOidGroup = type Integer;
  DNOidGroupHelper = record helper for DNOidGroup
  public const
    All = 0;
    HashAlgorithm = 1;
    EncryptionAlgorithm = 2;
    PublicKeyAlgorithm = 3;
    SignatureAlgorithm = 4;
    Attribute = 5;
    ExtensionOrAttribute = 6;
    EnhancedKeyUsage = 7;
    Policy = 8;
    Template = 9;
    KeyDerivationFunction = 10;
  end;


  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  [DNTypeName('System.Security.Cryptography.X509Certificates.OpenFlags')]
  DNOpenFlags = type Integer;
  DNOpenFlagsHelper = record helper for DNOpenFlags
  public const
    ReadOnly = 0;
    ReadWrite = 1;
    MaxAllowed = 2;
    OpenExistingOnly = 4;
    IncludeArchived = 8;
  end;


  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  [DNTypeName('System.Security.Cryptography.X509Certificates.StoreLocation')]
  DNStoreLocation = type Integer;
  DNStoreLocationHelper = record helper for DNStoreLocation
  public const
    CurrentUser = 1;
    LocalMachine = 2;
  end;


  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  [DNTypeName('System.Security.Cryptography.X509Certificates.StoreName')]
  DNStoreName = type Integer;
  DNStoreNameHelper = record helper for DNStoreName
  public const
    AddressBook = 1;
    AuthRoot = 2;
    CertificateAuthority = 3;
    Disallowed = 4;
    My = 5;
    Root = 6;
    TrustedPeople = 7;
    TrustedPublisher = 8;
  end;


  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  [DNTypeName('System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags')]
  DNX500DistinguishedNameFlags = type Integer;
  DNX500DistinguishedNameFlagsHelper = record helper for DNX500DistinguishedNameFlags
  public const
    None = 0;
    Reversed = 1;
    UseSemicolons = 16;
    DoNotUsePlusSign = 32;
    DoNotUseQuotes = 64;
    UseCommas = 128;
    UseNewLines = 256;
    UseUTF8Encoding = 4096;
    UseT61Encoding = 8192;
    ForceUTF8Encoding = 16384;
  end;


  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  [DNTypeName('System.Security.Cryptography.X509Certificates.X509ChainStatusFlags')]
  DNX509ChainStatusFlags = type Integer;
  DNX509ChainStatusFlagsHelper = record helper for DNX509ChainStatusFlags
  public const
    NoError = 0;
    NotTimeValid = 1;
    NotTimeNested = 2;
    Revoked = 4;
    NotSignatureValid = 8;
    NotValidForUsage = 16;
    UntrustedRoot = 32;
    RevocationStatusUnknown = 64;
    Cyclic = 128;
    InvalidExtension = 256;
    InvalidPolicyConstraints = 512;
    InvalidBasicConstraints = 1024;
    InvalidNameConstraints = 2048;
    HasNotSupportedNameConstraint = 4096;
    HasNotDefinedNameConstraint = 8192;
    HasNotPermittedNameConstraint = 16384;
    HasExcludedNameConstraint = 32768;
    PartialChain = 65536;
    CtlNotTimeValid = 131072;
    CtlNotSignatureValid = 262144;
    CtlNotValidForUsage = 524288;
    HasWeakSignature = 1048576;
    OfflineRevocation = 16777216;
    NoIssuanceChainPolicy = 33554432;
    ExplicitDistrust = 67108864;
    HasNotSupportedCriticalExtension = 134217728;
  end;


  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  [DNTypeName('System.Security.Cryptography.X509Certificates.X509FindType')]
  DNX509FindType = type Integer;
  DNX509FindTypeHelper = record helper for DNX509FindType
  public const
    FindByThumbprint = 0;
    FindBySubjectName = 1;
    FindBySubjectDistinguishedName = 2;
    FindByIssuerName = 3;
    FindByIssuerDistinguishedName = 4;
    FindBySerialNumber = 5;
    FindByTimeValid = 6;
    FindByTimeNotYetValid = 7;
    FindByTimeExpired = 8;
    FindByTemplateName = 9;
    FindByApplicationPolicy = 10;
    FindByCertificatePolicy = 11;
    FindByExtension = 12;
    FindByKeyUsage = 13;
    FindBySubjectKeyIdentifier = 14;
  end;


  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  [DNTypeName('System.Security.Cryptography.X509Certificates.X509IncludeOption')]
  DNX509IncludeOption = type Integer;
  DNX509IncludeOptionHelper = record helper for DNX509IncludeOption
  public const
    None = 0;
    ExcludeRoot = 1;
    EndCertOnly = 2;
    WholeChain = 3;
  end;


  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  [DNTypeName('System.Security.Cryptography.X509Certificates.X509KeyUsageFlags')]
  DNX509KeyUsageFlags = type Integer;
  DNX509KeyUsageFlagsHelper = record helper for DNX509KeyUsageFlags
  public const
    None = 0;
    EncipherOnly = 1;
    CrlSign = 2;
    KeyCertSign = 4;
    KeyAgreement = 8;
    DataEncipherment = 16;
    KeyEncipherment = 32;
    NonRepudiation = 64;
    DigitalSignature = 128;
    DecipherOnly = 32768;
  end;


  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  [DNTypeName('System.Security.Cryptography.X509Certificates.X509NameType')]
  DNX509NameType = type Integer;
  DNX509NameTypeHelper = record helper for DNX509NameType
  public const
    SimpleName = 0;
    EmailName = 1;
    UpnName = 2;
    DnsName = 3;
    DnsFromAlternativeName = 4;
    UrlName = 5;
  end;


  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  [DNTypeName('System.Security.Cryptography.X509Certificates.X509RevocationFlag')]
  DNX509RevocationFlag = type Integer;
  DNX509RevocationFlagHelper = record helper for DNX509RevocationFlag
  public const
    EndCertificateOnly = 0;
    EntireChain = 1;
    ExcludeRoot = 2;
  end;


  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  [DNTypeName('System.Security.Cryptography.X509Certificates.X509RevocationMode')]
  DNX509RevocationMode = type Integer;
  DNX509RevocationModeHelper = record helper for DNX509RevocationMode
  public const
    NoCheck = 0;
    Online = 1;
    Offline = 2;
  end;


  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  [DNTypeName('System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm')]
  DNX509SubjectKeyIdentifierHashAlgorithm = type Integer;
  DNX509SubjectKeyIdentifierHashAlgorithmHelper = record helper for DNX509SubjectKeyIdentifierHashAlgorithm
  public const
    Sha1 = 0;
    ShortSha1 = 1;
    CapiSha1 = 2;
  end;


  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  [DNTypeName('System.Security.Cryptography.X509Certificates.X509VerificationFlags')]
  DNX509VerificationFlags = type Integer;
  DNX509VerificationFlagsHelper = record helper for DNX509VerificationFlags
  public const
    NoFlag = 0;
    IgnoreNotTimeValid = 1;
    IgnoreCtlNotTimeValid = 2;
    IgnoreNotTimeNested = 4;
    IgnoreInvalidBasicConstraints = 8;
    AllowUnknownCertificateAuthority = 16;
    IgnoreWrongUsage = 32;
    IgnoreInvalidName = 64;
    IgnoreInvalidPolicy = 128;
    IgnoreEndRevocationUnknown = 256;
    IgnoreCtlSignerRevocationUnknown = 512;
    IgnoreCertificateAuthorityRevocationUnknown = 1024;
    IgnoreRootRevocationUnknown = 2048;
    AllFlags = 4095;
  end;


  //-------------namespace: System.Security.Permissions----------------
  [DNTypeName('System.Security.Permissions.StorePermissionFlags')]
  DNStorePermissionFlags = type Integer;
  DNStorePermissionFlagsHelper = record helper for DNStorePermissionFlags
  public const
    NoFlags = 0;
    CreateStore = 1;
    DeleteStore = 2;
    EnumerateStores = 4;
    OpenStore = 16;
    AddToStore = 32;
    RemoveFromStore = 64;
    EnumerateCertificates = 128;
    AllFlags = 247;
  end;


  //-------------namespace: System.Security.Permissions----------------
  [DNTypeName('System.Security.Permissions.TypeDescriptorPermissionFlags')]
  DNTypeDescriptorPermissionFlags = type Integer;
  DNTypeDescriptorPermissionFlagsHelper = record helper for DNTypeDescriptorPermissionFlags
  public const
    NoFlags = 0;
    RestrictedRegistrationAccess = 1;
  end;


  //-------------namespace: System.Text.RegularExpressions----------------
  [DNTypeName('System.Text.RegularExpressions.RegexOptions')]
  DNRegexOptions = type Integer;
  DNRegexOptionsHelper = record helper for DNRegexOptions
  public const
    None = 0;
    IgnoreCase = 1;
    Multiline = 2;
    ExplicitCapture = 4;
    Compiled = 8;
    Singleline = 16;
    IgnorePatternWhitespace = 32;
    RightToLeft = 64;
    ECMAScript = 256;
    CultureInvariant = 512;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.UriComponents')]
  DNUriComponents = type Integer;
  DNUriComponentsHelper = record helper for DNUriComponents
  public const
    Scheme = 1;
    UserInfo = 2;
    Host = 4;
    Port = 8;
    SchemeAndServer = 13;
    Path = 16;
    Query = 32;
    PathAndQuery = 48;
    HttpRequestUrl = 61;
    Fragment = 64;
    AbsoluteUri = 127;
    StrongPort = 128;
    HostAndPort = 132;
    StrongAuthority = 134;
    NormalizedHost = 256;
    KeepDelimiter = 1073741824;
    SerializationInfoString = -2147483648;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.UriFormat')]
  DNUriFormat = type Integer;
  DNUriFormatHelper = record helper for DNUriFormat
  public const
    UriEscaped = 1;
    Unescaped = 2;
    SafeUnescaped = 3;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.UriHostNameType')]
  DNUriHostNameType = type Integer;
  DNUriHostNameTypeHelper = record helper for DNUriHostNameType
  public const
    Unknown = 0;
    Basic = 1;
    Dns = 2;
    IPv4 = 3;
    IPv6 = 4;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.UriIdnScope')]
  DNUriIdnScope = type Integer;
  DNUriIdnScopeHelper = record helper for DNUriIdnScope
  public const
    None = 0;
    AllExceptIntranet = 1;
    All = 2;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.UriKind')]
  DNUriKind = type Integer;
  DNUriKindHelper = record helper for DNUriKind
  public const
    RelativeOrAbsolute = 0;
    Absolute_ = 1;
    Relative = 2;
  end;


  //-------------namespace: System----------------
  [DNTypeName('System.UriPartial')]
  DNUriPartial = type Integer;
  DNUriPartialHelper = record helper for DNUriPartial
  public const
    Scheme = 0;
    Authority = 1;
    Path = 2;
    Query = 3;
  end;


  //-------------namespace: System.Web----------------
  [DNTypeName('System.Web.AspNetHostingPermissionLevel')]
  DNAspNetHostingPermissionLevel = type Integer;
  DNAspNetHostingPermissionLevelHelper = record helper for DNAspNetHostingPermissionLevel
  public const
    None = 100;
    Minimal = 200;
    Low = 300;
    Medium = 400;
    High = 500;
    Unrestricted = 600;
  end;




type


{ declares }

  DNICodeCompiler = interface; // type: System.CodeDom.Compiler.ICodeCompiler, namespace: System.CodeDom.Compiler
  DNICodeGenerator = interface; // type: System.CodeDom.Compiler.ICodeGenerator, namespace: System.CodeDom.Compiler
  DNICodeParser = interface; // type: System.CodeDom.Compiler.ICodeParser, namespace: System.CodeDom.Compiler
  DNISet<T> = interface; // type: System.Collections.Generic.ISet`1, namespace: System.Collections.Generic
  DNIOrderedDictionary = interface; // type: System.Collections.Specialized.IOrderedDictionary, namespace: System.Collections.Specialized
  DNIBindingList = interface; // type: System.ComponentModel.IBindingList, namespace: System.ComponentModel
  DNIBindingListView = interface; // type: System.ComponentModel.IBindingListView, namespace: System.ComponentModel
  DNINotifyCollectionChanged = interface; // type: System.Collections.Specialized.INotifyCollectionChanged, namespace: System.Collections.Specialized
  DNIComponentChangeService = interface; // type: System.ComponentModel.Design.IComponentChangeService, namespace: System.ComponentModel.Design
  DNIComponentDiscoveryService = interface; // type: System.ComponentModel.Design.IComponentDiscoveryService, namespace: System.ComponentModel.Design
  DNIComponentInitializer = interface; // type: System.ComponentModel.Design.IComponentInitializer, namespace: System.ComponentModel.Design
  DNIDesignerEventService = interface; // type: System.ComponentModel.Design.IDesignerEventService, namespace: System.ComponentModel.Design
  DNIDesignerFilter = interface; // type: System.ComponentModel.Design.IDesignerFilter, namespace: System.ComponentModel.Design
  DNIDesignerHostTransactionState = interface; // type: System.ComponentModel.Design.IDesignerHostTransactionState, namespace: System.ComponentModel.Design
  DNIDesignerOptionService = interface; // type: System.ComponentModel.Design.IDesignerOptionService, namespace: System.ComponentModel.Design
  DNIDictionaryService = interface; // type: System.ComponentModel.Design.IDictionaryService, namespace: System.ComponentModel.Design
  DNIEventBindingService = interface; // type: System.ComponentModel.Design.IEventBindingService, namespace: System.ComponentModel.Design
  DNIExtenderListService = interface; // type: System.ComponentModel.Design.IExtenderListService, namespace: System.ComponentModel.Design
  DNIExtenderProviderService = interface; // type: System.ComponentModel.Design.IExtenderProviderService, namespace: System.ComponentModel.Design
  DNIHelpService = interface; // type: System.ComponentModel.Design.IHelpService, namespace: System.ComponentModel.Design
  DNIInheritanceService = interface; // type: System.ComponentModel.Design.IInheritanceService, namespace: System.ComponentModel.Design
  DNIMenuCommandService = interface; // type: System.ComponentModel.Design.IMenuCommandService, namespace: System.ComponentModel.Design
  DNIReferenceService = interface; // type: System.ComponentModel.Design.IReferenceService, namespace: System.ComponentModel.Design
  DNIResourceService = interface; // type: System.ComponentModel.Design.IResourceService, namespace: System.ComponentModel.Design
  DNISelectionService = interface; // type: System.ComponentModel.Design.ISelectionService, namespace: System.ComponentModel.Design
  DNITypeDescriptorFilterService = interface; // type: System.ComponentModel.Design.ITypeDescriptorFilterService, namespace: System.ComponentModel.Design
  DNITypeDiscoveryService = interface; // type: System.ComponentModel.Design.ITypeDiscoveryService, namespace: System.ComponentModel.Design
  DNITypeResolutionService = interface; // type: System.ComponentModel.Design.ITypeResolutionService, namespace: System.ComponentModel.Design
  DNIDesignerLoaderService = interface; // type: System.ComponentModel.Design.Serialization.IDesignerLoaderService, namespace: System.ComponentModel.Design.Serialization
  DNIDesignerSerializationProvider = interface; // type: System.ComponentModel.Design.Serialization.IDesignerSerializationProvider, namespace: System.ComponentModel.Design.Serialization
  DNIDesignerSerializationService = interface; // type: System.ComponentModel.Design.Serialization.IDesignerSerializationService, namespace: System.ComponentModel.Design.Serialization
  DNINameCreationService = interface; // type: System.ComponentModel.Design.Serialization.INameCreationService, namespace: System.ComponentModel.Design.Serialization
  DNICancelAddNew = interface; // type: System.ComponentModel.ICancelAddNew, namespace: System.ComponentModel
  DNIChangeTracking = interface; // type: System.ComponentModel.IChangeTracking, namespace: System.ComponentModel
  DNIRevertibleChangeTracking = interface; // type: System.ComponentModel.IRevertibleChangeTracking, namespace: System.ComponentModel
  DNIComNativeDescriptorHandler = interface; // type: System.ComponentModel.IComNativeDescriptorHandler, namespace: System.ComponentModel
  DNICustomTypeDescriptor = interface; // type: System.ComponentModel.ICustomTypeDescriptor, namespace: System.ComponentModel
  DNIDataErrorInfo = interface; // type: System.ComponentModel.IDataErrorInfo, namespace: System.ComponentModel
  DNIEditableObject = interface; // type: System.ComponentModel.IEditableObject, namespace: System.ComponentModel
  DNIExtenderProvider = interface; // type: System.ComponentModel.IExtenderProvider, namespace: System.ComponentModel
  DNIIntellisenseBuilder = interface; // type: System.ComponentModel.IIntellisenseBuilder, namespace: System.ComponentModel
  DNIListSource = interface; // type: System.ComponentModel.IListSource, namespace: System.ComponentModel
  DNINotifyDataErrorInfo = interface; // type: System.ComponentModel.INotifyDataErrorInfo, namespace: System.ComponentModel
  DNINotifyPropertyChanged = interface; // type: System.ComponentModel.INotifyPropertyChanged, namespace: System.ComponentModel
  DNINotifyPropertyChanging = interface; // type: System.ComponentModel.INotifyPropertyChanging, namespace: System.ComponentModel
  DNIRaiseItemChangedEvents = interface; // type: System.ComponentModel.IRaiseItemChangedEvents, namespace: System.ComponentModel
  DNISupportInitialize = interface; // type: System.ComponentModel.ISupportInitialize, namespace: System.ComponentModel
  DNISupportInitializeNotification = interface; // type: System.ComponentModel.ISupportInitializeNotification, namespace: System.ComponentModel
  DNISynchronizeInvoke = interface; // type: System.ComponentModel.ISynchronizeInvoke, namespace: System.ComponentModel
  DNITypedList = interface; // type: System.ComponentModel.ITypedList, namespace: System.ComponentModel
  DNICollectData = interface; // type: System.Diagnostics.ICollectData, namespace: System.Diagnostics
  DNIDesigner = interface; // type: System.ComponentModel.Design.IDesigner, namespace: System.ComponentModel.Design
  DNIRootDesigner = interface; // type: System.ComponentModel.Design.IRootDesigner, namespace: System.ComponentModel.Design
  DNITreeDesigner = interface; // type: System.ComponentModel.Design.ITreeDesigner, namespace: System.ComponentModel.Design
  DNIComponent = interface; // type: System.ComponentModel.IComponent, namespace: System.ComponentModel
  DNIContainer = interface; // type: System.ComponentModel.IContainer, namespace: System.ComponentModel
  DNINestedContainer = interface; // type: System.ComponentModel.INestedContainer, namespace: System.ComponentModel
  DNIServiceContainer = interface; // type: System.ComponentModel.Design.IServiceContainer, namespace: System.ComponentModel.Design
  DNIDesignerHost = interface; // type: System.ComponentModel.Design.IDesignerHost, namespace: System.ComponentModel.Design
  DNIDesignerLoaderHost = interface; // type: System.ComponentModel.Design.Serialization.IDesignerLoaderHost, namespace: System.ComponentModel.Design.Serialization
  DNIDesignerLoaderHost2 = interface; // type: System.ComponentModel.Design.Serialization.IDesignerLoaderHost2, namespace: System.ComponentModel.Design.Serialization
  DNIDesignerSerializationManager = interface; // type: System.ComponentModel.Design.Serialization.IDesignerSerializationManager, namespace: System.ComponentModel.Design.Serialization
  DNISite = interface; // type: System.ComponentModel.ISite, namespace: System.ComponentModel
  DNINestedSite = interface; // type: System.ComponentModel.INestedSite, namespace: System.ComponentModel
  DNITypeDescriptorContext = interface; // type: System.ComponentModel.ITypeDescriptorContext, namespace: System.ComponentModel
  DNIAuthenticationModule = interface; // type: System.Net.IAuthenticationModule, namespace: System.Net
  DNICertificatePolicy = interface; // type: System.Net.ICertificatePolicy, namespace: System.Net
  DNICredentialPolicy = interface; // type: System.Net.ICredentialPolicy, namespace: System.Net
  DNICredentials = interface; // type: System.Net.ICredentials, namespace: System.Net
  DNICredentialsByHost = interface; // type: System.Net.ICredentialsByHost, namespace: System.Net
  DNIWebProxy = interface; // type: System.Net.IWebProxy, namespace: System.Net
  DNIWebProxyScript = interface; // type: System.Net.IWebProxyScript, namespace: System.Net
  DNIWebRequestCreate = interface; // type: System.Net.IWebRequestCreate, namespace: System.Net
  DNICustomTypeProvider = interface; // type: System.Reflection.ICustomTypeProvider, namespace: System.Reflection
  DNIAdviseSink = interface; // type: System.Runtime.InteropServices.ComTypes.IAdviseSink, namespace: System.Runtime.InteropServices.ComTypes
  DNIDataObject = interface; // type: System.Runtime.InteropServices.ComTypes.IDataObject, namespace: System.Runtime.InteropServices.ComTypes
  DNIEnumFORMATETC = interface; // type: System.Runtime.InteropServices.ComTypes.IEnumFORMATETC, namespace: System.Runtime.InteropServices.ComTypes
  DNIEnumSTATDATA = interface; // type: System.Runtime.InteropServices.ComTypes.IEnumSTATDATA, namespace: System.Runtime.InteropServices.ComTypes
  DNICommand = interface; // type: System.Windows.Input.ICommand, namespace: System.Windows.Input
  DNIntranetZoneCredentialPolicy = interface; // type: Microsoft.Win32.IntranetZoneCredentialPolicy, namespace: Microsoft.Win32
  DNSystemEvents = interface; // type: Microsoft.Win32.SystemEvents, namespace: Microsoft.Win32
  DNGeneratedCodeAttribute = interface; // type: System.CodeDom.Compiler.GeneratedCodeAttribute, namespace: System.CodeDom.Compiler
  DNAmbientValueAttribute = interface; // type: System.ComponentModel.AmbientValueAttribute, namespace: System.ComponentModel
  DNAttributeProviderAttribute = interface; // type: System.ComponentModel.AttributeProviderAttribute, namespace: System.ComponentModel
  DNBindableAttribute = interface; // type: System.ComponentModel.BindableAttribute, namespace: System.ComponentModel
  DNBrowsableAttribute = interface; // type: System.ComponentModel.BrowsableAttribute, namespace: System.ComponentModel
  DNCategoryAttribute = interface; // type: System.ComponentModel.CategoryAttribute, namespace: System.ComponentModel
  DNComplexBindingPropertiesAttribute = interface; // type: System.ComponentModel.ComplexBindingPropertiesAttribute, namespace: System.ComponentModel
  DNDataObjectAttribute = interface; // type: System.ComponentModel.DataObjectAttribute, namespace: System.ComponentModel
  DNDataObjectFieldAttribute = interface; // type: System.ComponentModel.DataObjectFieldAttribute, namespace: System.ComponentModel
  DNDataObjectMethodAttribute = interface; // type: System.ComponentModel.DataObjectMethodAttribute, namespace: System.ComponentModel
  DNDefaultBindingPropertyAttribute = interface; // type: System.ComponentModel.DefaultBindingPropertyAttribute, namespace: System.ComponentModel
  DNDefaultEventAttribute = interface; // type: System.ComponentModel.DefaultEventAttribute, namespace: System.ComponentModel
  DNDefaultPropertyAttribute = interface; // type: System.ComponentModel.DefaultPropertyAttribute, namespace: System.ComponentModel
  DNDefaultValueAttribute = interface; // type: System.ComponentModel.DefaultValueAttribute, namespace: System.ComponentModel
  DNDescriptionAttribute = interface; // type: System.ComponentModel.DescriptionAttribute, namespace: System.ComponentModel
  DNMonitoringDescriptionAttribute = interface; // type: System.Diagnostics.MonitoringDescriptionAttribute, namespace: System.Diagnostics
  DNIODescriptionAttribute = interface; // type: System.IO.IODescriptionAttribute, namespace: System.IO
  DNTimersDescriptionAttribute = interface; // type: System.Timers.TimersDescriptionAttribute, namespace: System.Timers
  DNHelpKeywordAttribute = interface; // type: System.ComponentModel.Design.HelpKeywordAttribute, namespace: System.ComponentModel.Design
  DNDefaultSerializationProviderAttribute = interface; // type: System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute, namespace: System.ComponentModel.Design.Serialization
  DNDesignerSerializerAttribute = interface; // type: System.ComponentModel.Design.Serialization.DesignerSerializerAttribute, namespace: System.ComponentModel.Design.Serialization
  DNRootDesignerSerializerAttribute = interface; // type: System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute, namespace: System.ComponentModel.Design.Serialization
  DNDesignerAttribute = interface; // type: System.ComponentModel.DesignerAttribute, namespace: System.ComponentModel
  DNDesignerCategoryAttribute = interface; // type: System.ComponentModel.DesignerCategoryAttribute, namespace: System.ComponentModel
  DNDesignerSerializationVisibilityAttribute = interface; // type: System.ComponentModel.DesignerSerializationVisibilityAttribute, namespace: System.ComponentModel
  DNDesignOnlyAttribute = interface; // type: System.ComponentModel.DesignOnlyAttribute, namespace: System.ComponentModel
  DNDesignTimeVisibleAttribute = interface; // type: System.ComponentModel.DesignTimeVisibleAttribute, namespace: System.ComponentModel
  DNDisplayNameAttribute = interface; // type: System.ComponentModel.DisplayNameAttribute, namespace: System.ComponentModel
  DNEditorAttribute = interface; // type: System.ComponentModel.EditorAttribute, namespace: System.ComponentModel
  DNEditorBrowsableAttribute = interface; // type: System.ComponentModel.EditorBrowsableAttribute, namespace: System.ComponentModel
  DNExtenderProvidedPropertyAttribute = interface; // type: System.ComponentModel.ExtenderProvidedPropertyAttribute, namespace: System.ComponentModel
  DNImmutableObjectAttribute = interface; // type: System.ComponentModel.ImmutableObjectAttribute, namespace: System.ComponentModel
  DNInheritanceAttribute = interface; // type: System.ComponentModel.InheritanceAttribute, namespace: System.ComponentModel
  DNInitializationEventAttribute = interface; // type: System.ComponentModel.InitializationEventAttribute, namespace: System.ComponentModel
  DNInstallerTypeAttribute = interface; // type: System.ComponentModel.InstallerTypeAttribute, namespace: System.ComponentModel
  DNLicenseProviderAttribute = interface; // type: System.ComponentModel.LicenseProviderAttribute, namespace: System.ComponentModel
  DNListBindableAttribute = interface; // type: System.ComponentModel.ListBindableAttribute, namespace: System.ComponentModel
  DNLocalizableAttribute = interface; // type: System.ComponentModel.LocalizableAttribute, namespace: System.ComponentModel
  DNLookupBindingPropertiesAttribute = interface; // type: System.ComponentModel.LookupBindingPropertiesAttribute, namespace: System.ComponentModel
  DNMergablePropertyAttribute = interface; // type: System.ComponentModel.MergablePropertyAttribute, namespace: System.ComponentModel
  DNNotifyParentPropertyAttribute = interface; // type: System.ComponentModel.NotifyParentPropertyAttribute, namespace: System.ComponentModel
  DNParenthesizePropertyNameAttribute = interface; // type: System.ComponentModel.ParenthesizePropertyNameAttribute, namespace: System.ComponentModel
  DNPasswordPropertyTextAttribute = interface; // type: System.ComponentModel.PasswordPropertyTextAttribute, namespace: System.ComponentModel
  DNPropertyTabAttribute = interface; // type: System.ComponentModel.PropertyTabAttribute, namespace: System.ComponentModel
  DNProvidePropertyAttribute = interface; // type: System.ComponentModel.ProvidePropertyAttribute, namespace: System.ComponentModel
  DNReadOnlyAttribute = interface; // type: System.ComponentModel.ReadOnlyAttribute, namespace: System.ComponentModel
  DNRecommendedAsConfigurableAttribute = interface; // type: System.ComponentModel.RecommendedAsConfigurableAttribute, namespace: System.ComponentModel
  DNRefreshPropertiesAttribute = interface; // type: System.ComponentModel.RefreshPropertiesAttribute, namespace: System.ComponentModel
  DNRunInstallerAttribute = interface; // type: System.ComponentModel.RunInstallerAttribute, namespace: System.ComponentModel
  DNSettingsBindableAttribute = interface; // type: System.ComponentModel.SettingsBindableAttribute, namespace: System.ComponentModel
  DNToolboxItemAttribute = interface; // type: System.ComponentModel.ToolboxItemAttribute, namespace: System.ComponentModel
  DNToolboxItemFilterAttribute = interface; // type: System.ComponentModel.ToolboxItemFilterAttribute, namespace: System.ComponentModel
  DNTypeConverterAttribute = interface; // type: System.ComponentModel.TypeConverterAttribute, namespace: System.ComponentModel
  DNTypeDescriptionProviderAttribute = interface; // type: System.ComponentModel.TypeDescriptionProviderAttribute, namespace: System.ComponentModel
  DNExcludeFromCodeCoverageAttribute = interface; // type: System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute, namespace: System.Diagnostics.CodeAnalysis
  DNSwitchAttribute = interface; // type: System.Diagnostics.SwitchAttribute, namespace: System.Diagnostics
  DNSwitchLevelAttribute = interface; // type: System.Diagnostics.SwitchLevelAttribute, namespace: System.Diagnostics
  DNDefaultParameterValueAttribute = interface; // type: System.Runtime.InteropServices.DefaultParameterValueAttribute, namespace: System.Runtime.InteropServices
  DNEventLogPermissionAttribute = interface; // type: System.Diagnostics.EventLogPermissionAttribute, namespace: System.Diagnostics
  DNPerformanceCounterPermissionAttribute = interface; // type: System.Diagnostics.PerformanceCounterPermissionAttribute, namespace: System.Diagnostics
  DNDnsPermissionAttribute = interface; // type: System.Net.DnsPermissionAttribute, namespace: System.Net
  DNSmtpPermissionAttribute = interface; // type: System.Net.Mail.SmtpPermissionAttribute, namespace: System.Net.Mail
  DNNetworkInformationPermissionAttribute = interface; // type: System.Net.NetworkInformation.NetworkInformationPermissionAttribute, namespace: System.Net.NetworkInformation
  DNSocketPermissionAttribute = interface; // type: System.Net.SocketPermissionAttribute, namespace: System.Net
  DNWebPermissionAttribute = interface; // type: System.Net.WebPermissionAttribute, namespace: System.Net
  DNStorePermissionAttribute = interface; // type: System.Security.Permissions.StorePermissionAttribute, namespace: System.Security.Permissions
  DNTypeDescriptorPermissionAttribute = interface; // type: System.Security.Permissions.TypeDescriptorPermissionAttribute, namespace: System.Security.Permissions
  DNAspNetHostingPermissionAttribute = interface; // type: System.Web.AspNetHostingPermissionAttribute, namespace: System.Web
  DNValueSerializerAttribute = interface; // type: System.Windows.Markup.ValueSerializerAttribute, namespace: System.Windows.Markup
  DNCodeAttributeArgument = interface; // type: System.CodeDom.CodeAttributeArgument, namespace: System.CodeDom
  DNCodeAttributeDeclaration = interface; // type: System.CodeDom.CodeAttributeDeclaration, namespace: System.CodeDom
  DNCodeCatchClause = interface; // type: System.CodeDom.CodeCatchClause, namespace: System.CodeDom
  DNCodeLinePragma = interface; // type: System.CodeDom.CodeLinePragma, namespace: System.CodeDom
  DNCodeNamespaceImportCollection = interface; // type: System.CodeDom.CodeNamespaceImportCollection, namespace: System.CodeDom
  DNCodeObject = interface; // type: System.CodeDom.CodeObject, namespace: System.CodeDom
  DNCodeComment = interface; // type: System.CodeDom.CodeComment, namespace: System.CodeDom
  DNCodeCompileUnit = interface; // type: System.CodeDom.CodeCompileUnit, namespace: System.CodeDom
  DNCodeSnippetCompileUnit = interface; // type: System.CodeDom.CodeSnippetCompileUnit, namespace: System.CodeDom
  DNCodeDirective = interface; // type: System.CodeDom.CodeDirective, namespace: System.CodeDom
  DNCodeChecksumPragma = interface; // type: System.CodeDom.CodeChecksumPragma, namespace: System.CodeDom
  DNCodeRegionDirective = interface; // type: System.CodeDom.CodeRegionDirective, namespace: System.CodeDom
  DNCodeExpression = interface; // type: System.CodeDom.CodeExpression, namespace: System.CodeDom
  DNCodeArgumentReferenceExpression = interface; // type: System.CodeDom.CodeArgumentReferenceExpression, namespace: System.CodeDom
  DNCodeArrayCreateExpression = interface; // type: System.CodeDom.CodeArrayCreateExpression, namespace: System.CodeDom
  DNCodeArrayIndexerExpression = interface; // type: System.CodeDom.CodeArrayIndexerExpression, namespace: System.CodeDom
  DNCodeBaseReferenceExpression = interface; // type: System.CodeDom.CodeBaseReferenceExpression, namespace: System.CodeDom
  DNCodeBinaryOperatorExpression = interface; // type: System.CodeDom.CodeBinaryOperatorExpression, namespace: System.CodeDom
  DNCodeCastExpression = interface; // type: System.CodeDom.CodeCastExpression, namespace: System.CodeDom
  DNCodeDefaultValueExpression = interface; // type: System.CodeDom.CodeDefaultValueExpression, namespace: System.CodeDom
  DNCodeDelegateCreateExpression = interface; // type: System.CodeDom.CodeDelegateCreateExpression, namespace: System.CodeDom
  DNCodeDelegateInvokeExpression = interface; // type: System.CodeDom.CodeDelegateInvokeExpression, namespace: System.CodeDom
  DNCodeDirectionExpression = interface; // type: System.CodeDom.CodeDirectionExpression, namespace: System.CodeDom
  DNCodeEventReferenceExpression = interface; // type: System.CodeDom.CodeEventReferenceExpression, namespace: System.CodeDom
  DNCodeFieldReferenceExpression = interface; // type: System.CodeDom.CodeFieldReferenceExpression, namespace: System.CodeDom
  DNCodeIndexerExpression = interface; // type: System.CodeDom.CodeIndexerExpression, namespace: System.CodeDom
  DNCodeMethodInvokeExpression = interface; // type: System.CodeDom.CodeMethodInvokeExpression, namespace: System.CodeDom
  DNCodeMethodReferenceExpression = interface; // type: System.CodeDom.CodeMethodReferenceExpression, namespace: System.CodeDom
  DNCodeObjectCreateExpression = interface; // type: System.CodeDom.CodeObjectCreateExpression, namespace: System.CodeDom
  DNCodeParameterDeclarationExpression = interface; // type: System.CodeDom.CodeParameterDeclarationExpression, namespace: System.CodeDom
  DNCodePrimitiveExpression = interface; // type: System.CodeDom.CodePrimitiveExpression, namespace: System.CodeDom
  DNCodePropertyReferenceExpression = interface; // type: System.CodeDom.CodePropertyReferenceExpression, namespace: System.CodeDom
  DNCodePropertySetValueReferenceExpression = interface; // type: System.CodeDom.CodePropertySetValueReferenceExpression, namespace: System.CodeDom
  DNCodeSnippetExpression = interface; // type: System.CodeDom.CodeSnippetExpression, namespace: System.CodeDom
  DNCodeThisReferenceExpression = interface; // type: System.CodeDom.CodeThisReferenceExpression, namespace: System.CodeDom
  DNCodeTypeOfExpression = interface; // type: System.CodeDom.CodeTypeOfExpression, namespace: System.CodeDom
  DNCodeTypeReferenceExpression = interface; // type: System.CodeDom.CodeTypeReferenceExpression, namespace: System.CodeDom
  DNCodeVariableReferenceExpression = interface; // type: System.CodeDom.CodeVariableReferenceExpression, namespace: System.CodeDom
  DNCodeNamespace = interface; // type: System.CodeDom.CodeNamespace, namespace: System.CodeDom
  DNCodeNamespaceImport = interface; // type: System.CodeDom.CodeNamespaceImport, namespace: System.CodeDom
  DNCodeStatement = interface; // type: System.CodeDom.CodeStatement, namespace: System.CodeDom
  DNCodeAssignStatement = interface; // type: System.CodeDom.CodeAssignStatement, namespace: System.CodeDom
  DNCodeAttachEventStatement = interface; // type: System.CodeDom.CodeAttachEventStatement, namespace: System.CodeDom
  DNCodeCommentStatement = interface; // type: System.CodeDom.CodeCommentStatement, namespace: System.CodeDom
  DNCodeConditionStatement = interface; // type: System.CodeDom.CodeConditionStatement, namespace: System.CodeDom
  DNCodeExpressionStatement = interface; // type: System.CodeDom.CodeExpressionStatement, namespace: System.CodeDom
  DNCodeGotoStatement = interface; // type: System.CodeDom.CodeGotoStatement, namespace: System.CodeDom
  DNCodeIterationStatement = interface; // type: System.CodeDom.CodeIterationStatement, namespace: System.CodeDom
  DNCodeLabeledStatement = interface; // type: System.CodeDom.CodeLabeledStatement, namespace: System.CodeDom
  DNCodeMethodReturnStatement = interface; // type: System.CodeDom.CodeMethodReturnStatement, namespace: System.CodeDom
  DNCodeRemoveEventStatement = interface; // type: System.CodeDom.CodeRemoveEventStatement, namespace: System.CodeDom
  DNCodeSnippetStatement = interface; // type: System.CodeDom.CodeSnippetStatement, namespace: System.CodeDom
  DNCodeThrowExceptionStatement = interface; // type: System.CodeDom.CodeThrowExceptionStatement, namespace: System.CodeDom
  DNCodeTryCatchFinallyStatement = interface; // type: System.CodeDom.CodeTryCatchFinallyStatement, namespace: System.CodeDom
  DNCodeVariableDeclarationStatement = interface; // type: System.CodeDom.CodeVariableDeclarationStatement, namespace: System.CodeDom
  DNCodeTypeMember = interface; // type: System.CodeDom.CodeTypeMember, namespace: System.CodeDom
  DNCodeMemberEvent = interface; // type: System.CodeDom.CodeMemberEvent, namespace: System.CodeDom
  DNCodeMemberField = interface; // type: System.CodeDom.CodeMemberField, namespace: System.CodeDom
  DNCodeMemberMethod = interface; // type: System.CodeDom.CodeMemberMethod, namespace: System.CodeDom
  DNCodeConstructor = interface; // type: System.CodeDom.CodeConstructor, namespace: System.CodeDom
  DNCodeEntryPointMethod = interface; // type: System.CodeDom.CodeEntryPointMethod, namespace: System.CodeDom
  DNCodeTypeConstructor = interface; // type: System.CodeDom.CodeTypeConstructor, namespace: System.CodeDom
  DNCodeMemberProperty = interface; // type: System.CodeDom.CodeMemberProperty, namespace: System.CodeDom
  DNCodeSnippetTypeMember = interface; // type: System.CodeDom.CodeSnippetTypeMember, namespace: System.CodeDom
  DNCodeTypeDeclaration = interface; // type: System.CodeDom.CodeTypeDeclaration, namespace: System.CodeDom
  DNCodeTypeDelegate = interface; // type: System.CodeDom.CodeTypeDelegate, namespace: System.CodeDom
  DNCodeTypeParameter = interface; // type: System.CodeDom.CodeTypeParameter, namespace: System.CodeDom
  DNCodeTypeReference = interface; // type: System.CodeDom.CodeTypeReference, namespace: System.CodeDom
  DNCodeGenerator = interface; // type: System.CodeDom.Compiler.CodeGenerator, namespace: System.CodeDom.Compiler
  DNCodeCompiler = interface; // type: System.CodeDom.Compiler.CodeCompiler, namespace: System.CodeDom.Compiler
  DNCodeGeneratorOptions = interface; // type: System.CodeDom.Compiler.CodeGeneratorOptions, namespace: System.CodeDom.Compiler
  DNCodeParser = interface; // type: System.CodeDom.Compiler.CodeParser, namespace: System.CodeDom.Compiler
  DNCompilerError = interface; // type: System.CodeDom.Compiler.CompilerError, namespace: System.CodeDom.Compiler
  DNCompilerInfo = interface; // type: System.CodeDom.Compiler.CompilerInfo, namespace: System.CodeDom.Compiler
  DNCompilerParameters = interface; // type: System.CodeDom.Compiler.CompilerParameters, namespace: System.CodeDom.Compiler
  DNCompilerResults = interface; // type: System.CodeDom.Compiler.CompilerResults, namespace: System.CodeDom.Compiler
  DNExecutor = interface; // type: System.CodeDom.Compiler.Executor, namespace: System.CodeDom.Compiler
  DNTempFileCollection = interface; // type: System.CodeDom.Compiler.TempFileCollection, namespace: System.CodeDom.Compiler
  DNCodeAttributeArgumentCollection = interface; // type: System.CodeDom.CodeAttributeArgumentCollection, namespace: System.CodeDom
  DNCodeAttributeDeclarationCollection = interface; // type: System.CodeDom.CodeAttributeDeclarationCollection, namespace: System.CodeDom
  DNCodeCatchClauseCollection = interface; // type: System.CodeDom.CodeCatchClauseCollection, namespace: System.CodeDom
  DNCodeCommentStatementCollection = interface; // type: System.CodeDom.CodeCommentStatementCollection, namespace: System.CodeDom
  DNCodeDirectiveCollection = interface; // type: System.CodeDom.CodeDirectiveCollection, namespace: System.CodeDom
  DNCodeExpressionCollection = interface; // type: System.CodeDom.CodeExpressionCollection, namespace: System.CodeDom
  DNCodeNamespaceCollection = interface; // type: System.CodeDom.CodeNamespaceCollection, namespace: System.CodeDom
  DNCodeParameterDeclarationExpressionCollection = interface; // type: System.CodeDom.CodeParameterDeclarationExpressionCollection, namespace: System.CodeDom
  DNCodeStatementCollection = interface; // type: System.CodeDom.CodeStatementCollection, namespace: System.CodeDom
  DNCodeTypeDeclarationCollection = interface; // type: System.CodeDom.CodeTypeDeclarationCollection, namespace: System.CodeDom
  DNCodeTypeMemberCollection = interface; // type: System.CodeDom.CodeTypeMemberCollection, namespace: System.CodeDom
  DNCodeTypeParameterCollection = interface; // type: System.CodeDom.CodeTypeParameterCollection, namespace: System.CodeDom
  DNCodeTypeReferenceCollection = interface; // type: System.CodeDom.CodeTypeReferenceCollection, namespace: System.CodeDom
  DNCompilerErrorCollection = interface; // type: System.CodeDom.Compiler.CompilerErrorCollection, namespace: System.CodeDom.Compiler
  DNDesignerVerbCollection = interface; // type: System.ComponentModel.Design.DesignerVerbCollection, namespace: System.ComponentModel.Design
  DNCounterCreationDataCollection = interface; // type: System.Diagnostics.CounterCreationDataCollection, namespace: System.Diagnostics
  DNEventLogPermissionEntryCollection = interface; // type: System.Diagnostics.EventLogPermissionEntryCollection, namespace: System.Diagnostics
  DNPerformanceCounterPermissionEntryCollection = interface; // type: System.Diagnostics.PerformanceCounterPermissionEntryCollection, namespace: System.Diagnostics
  DNX509CertificateCollection = interface; // type: System.Security.Cryptography.X509Certificates.X509CertificateCollection, namespace: System.Security.Cryptography.X509Certificates
  DNX509Certificate2Collection = interface; // type: System.Security.Cryptography.X509Certificates.X509Certificate2Collection, namespace: System.Security.Cryptography.X509Certificates
  DNBlockingCollection<T> = interface; // type: System.Collections.Concurrent.BlockingCollection`1, namespace: System.Collections.Concurrent
  DNConcurrentBag<T> = interface; // type: System.Collections.Concurrent.ConcurrentBag`1, namespace: System.Collections.Concurrent
  DNInstanceDataCollection = interface; // type: System.Diagnostics.InstanceDataCollection, namespace: System.Diagnostics
  DNInstanceDataCollectionCollection = interface; // type: System.Diagnostics.InstanceDataCollectionCollection, namespace: System.Diagnostics
  DNLinkedList<T> = interface; // type: System.Collections.Generic.LinkedList`1, namespace: System.Collections.Generic
  DNLinkedListNode<T> = interface; // type: System.Collections.Generic.LinkedListNode`1, namespace: System.Collections.Generic
  DNQueue<T> = interface; // type: System.Collections.Generic.Queue`1, namespace: System.Collections.Generic
  DNSortedDictionary<TKey, TValue> = interface; // type: System.Collections.Generic.SortedDictionary`2, namespace: System.Collections.Generic
  DNSortedDictionary_KeyCollection<TKey, TValue> = interface; // type: System.Collections.Generic.SortedDictionary`2+KeyCollection, namespace: System.Collections.Generic
  DNSortedDictionary_ValueCollection<TKey, TValue> = interface; // type: System.Collections.Generic.SortedDictionary`2+ValueCollection, namespace: System.Collections.Generic
  DNSortedList<TKey, TValue> = interface; // type: System.Collections.Generic.SortedList`2, namespace: System.Collections.Generic
  DNSortedSet<T> = interface; // type: System.Collections.Generic.SortedSet`1, namespace: System.Collections.Generic
  DNStack<T> = interface; // type: System.Collections.Generic.Stack`1, namespace: System.Collections.Generic
  DNAlternateViewCollection = interface; // type: System.Net.Mail.AlternateViewCollection, namespace: System.Net.Mail
  DNAttachmentCollection = interface; // type: System.Net.Mail.AttachmentCollection, namespace: System.Net.Mail
  DNLinkedResourceCollection = interface; // type: System.Net.Mail.LinkedResourceCollection, namespace: System.Net.Mail
  DNMailAddressCollection = interface; // type: System.Net.Mail.MailAddressCollection, namespace: System.Net.Mail
  DNObservableCollection<T> = interface; // type: System.Collections.ObjectModel.ObservableCollection`1, namespace: System.Collections.ObjectModel
  DNBindingList<T> = interface; // type: System.ComponentModel.BindingList`1, namespace: System.ComponentModel
  DNReadOnlyObservableCollection<T> = interface; // type: System.Collections.ObjectModel.ReadOnlyObservableCollection`1, namespace: System.Collections.ObjectModel
  DNComponentCollection = interface; // type: System.ComponentModel.ComponentCollection, namespace: System.ComponentModel
  DNProcessModuleCollection = interface; // type: System.Diagnostics.ProcessModuleCollection, namespace: System.Diagnostics
  DNProcessThreadCollection = interface; // type: System.Diagnostics.ProcessThreadCollection, namespace: System.Diagnostics
  DNServiceNameCollection = interface; // type: System.Security.Authentication.ExtendedProtection.ServiceNameCollection, namespace: System.Security.Authentication.ExtendedProtection
  DNCollectionsUtil = interface; // type: System.Collections.Specialized.CollectionsUtil, namespace: System.Collections.Specialized
  DNHybridDictionary = interface; // type: System.Collections.Specialized.HybridDictionary, namespace: System.Collections.Specialized
  DNListDictionary = interface; // type: System.Collections.Specialized.ListDictionary, namespace: System.Collections.Specialized
  DNNameObjectCollectionBase = interface; // type: System.Collections.Specialized.NameObjectCollectionBase, namespace: System.Collections.Specialized
  DNNameObjectCollectionBase_KeysCollection = interface; // type: System.Collections.Specialized.NameObjectCollectionBase+KeysCollection, namespace: System.Collections.Specialized
  DNNameValueCollection = interface; // type: System.Collections.Specialized.NameValueCollection, namespace: System.Collections.Specialized
  DNWebHeaderCollection = interface; // type: System.Net.WebHeaderCollection, namespace: System.Net
  DNOrderedDictionary = interface; // type: System.Collections.Specialized.OrderedDictionary, namespace: System.Collections.Specialized
  DNStringCollection = interface; // type: System.Collections.Specialized.StringCollection, namespace: System.Collections.Specialized
  DNStringDictionary = interface; // type: System.Collections.Specialized.StringDictionary, namespace: System.Collections.Specialized
  DNStringEnumerator = interface; // type: System.Collections.Specialized.StringEnumerator, namespace: System.Collections.Specialized
  DNAsyncOperation = interface; // type: System.ComponentModel.AsyncOperation, namespace: System.ComponentModel
  DNAsyncOperationManager = interface; // type: System.ComponentModel.AsyncOperationManager, namespace: System.ComponentModel
  DNAttributeCollection = interface; // type: System.ComponentModel.AttributeCollection, namespace: System.ComponentModel
  DNComponentEditor = interface; // type: System.ComponentModel.ComponentEditor, namespace: System.ComponentModel
  DNContainer = interface; // type: System.ComponentModel.Container, namespace: System.ComponentModel
  DNNestedContainer = interface; // type: System.ComponentModel.NestedContainer, namespace: System.ComponentModel
  DNContainerFilterService = interface; // type: System.ComponentModel.ContainerFilterService, namespace: System.ComponentModel
  DNCustomTypeDescriptor = interface; // type: System.ComponentModel.CustomTypeDescriptor, namespace: System.ComponentModel
  DNCommandID = interface; // type: System.ComponentModel.Design.CommandID, namespace: System.ComponentModel.Design
  DNDesignerCollection = interface; // type: System.ComponentModel.Design.DesignerCollection, namespace: System.ComponentModel.Design
  DNDesignerOptionService = interface; // type: System.ComponentModel.Design.DesignerOptionService, namespace: System.ComponentModel.Design
  DNDesignerOptionService_DesignerOptionCollection = interface; // type: System.ComponentModel.Design.DesignerOptionService+DesignerOptionCollection, namespace: System.ComponentModel.Design
  DNDesignerTransaction = interface; // type: System.ComponentModel.Design.DesignerTransaction, namespace: System.ComponentModel.Design
  DNDesigntimeLicenseContextSerializer = interface; // type: System.ComponentModel.Design.DesigntimeLicenseContextSerializer, namespace: System.ComponentModel.Design
  DNMenuCommand = interface; // type: System.ComponentModel.Design.MenuCommand, namespace: System.ComponentModel.Design
  DNDesignerVerb = interface; // type: System.ComponentModel.Design.DesignerVerb, namespace: System.ComponentModel.Design
  DNComponentSerializationService = interface; // type: System.ComponentModel.Design.Serialization.ComponentSerializationService, namespace: System.ComponentModel.Design.Serialization
  DNContextStack = interface; // type: System.ComponentModel.Design.Serialization.ContextStack, namespace: System.ComponentModel.Design.Serialization
  DNDesignerLoader = interface; // type: System.ComponentModel.Design.Serialization.DesignerLoader, namespace: System.ComponentModel.Design.Serialization
  DNInstanceDescriptor = interface; // type: System.ComponentModel.Design.Serialization.InstanceDescriptor, namespace: System.ComponentModel.Design.Serialization
  DNMemberRelationshipService = interface; // type: System.ComponentModel.Design.Serialization.MemberRelationshipService, namespace: System.ComponentModel.Design.Serialization
  DNSerializationStore = interface; // type: System.ComponentModel.Design.Serialization.SerializationStore, namespace: System.ComponentModel.Design.Serialization
  DNServiceContainer = interface; // type: System.ComponentModel.Design.ServiceContainer, namespace: System.ComponentModel.Design
  DNStandardCommands = interface; // type: System.ComponentModel.Design.StandardCommands, namespace: System.ComponentModel.Design
  DNStandardToolWindows = interface; // type: System.ComponentModel.Design.StandardToolWindows, namespace: System.ComponentModel.Design
  DNTypeDescriptionProviderService = interface; // type: System.ComponentModel.Design.TypeDescriptionProviderService, namespace: System.ComponentModel.Design
  DNEventDescriptorCollection = interface; // type: System.ComponentModel.EventDescriptorCollection, namespace: System.ComponentModel
  DNEventHandlerList = interface; // type: System.ComponentModel.EventHandlerList, namespace: System.ComponentModel
  DNInstanceCreationEditor = interface; // type: System.ComponentModel.InstanceCreationEditor, namespace: System.ComponentModel
  DNLicense = interface; // type: System.ComponentModel.License, namespace: System.ComponentModel
  DNLicenseContext = interface; // type: System.ComponentModel.LicenseContext, namespace: System.ComponentModel
  DNDesigntimeLicenseContext = interface; // type: System.ComponentModel.Design.DesigntimeLicenseContext, namespace: System.ComponentModel.Design
  DNLicenseManager = interface; // type: System.ComponentModel.LicenseManager, namespace: System.ComponentModel
  DNLicenseProvider = interface; // type: System.ComponentModel.LicenseProvider, namespace: System.ComponentModel
  DNLicFileLicenseProvider = interface; // type: System.ComponentModel.LicFileLicenseProvider, namespace: System.ComponentModel
  DNListSortDescription = interface; // type: System.ComponentModel.ListSortDescription, namespace: System.ComponentModel
  DNListSortDescriptionCollection = interface; // type: System.ComponentModel.ListSortDescriptionCollection, namespace: System.ComponentModel
  DNMarshalByValueComponent = interface; // type: System.ComponentModel.MarshalByValueComponent, namespace: System.ComponentModel
  DNMaskedTextProvider = interface; // type: System.ComponentModel.MaskedTextProvider, namespace: System.ComponentModel
  DNMemberDescriptor = interface; // type: System.ComponentModel.MemberDescriptor, namespace: System.ComponentModel
  DNEventDescriptor = interface; // type: System.ComponentModel.EventDescriptor, namespace: System.ComponentModel
  DNPropertyDescriptor = interface; // type: System.ComponentModel.PropertyDescriptor, namespace: System.ComponentModel
  DNPropertyDescriptorCollection = interface; // type: System.ComponentModel.PropertyDescriptorCollection, namespace: System.ComponentModel
  DNSyntaxCheck = interface; // type: System.ComponentModel.SyntaxCheck, namespace: System.ComponentModel
  DNTypeConverter = interface; // type: System.ComponentModel.TypeConverter, namespace: System.ComponentModel
  DNTypeConverter_StandardValuesCollection = interface; // type: System.ComponentModel.TypeConverter+StandardValuesCollection, namespace: System.ComponentModel
  DNBaseNumberConverter = interface; // type: System.ComponentModel.BaseNumberConverter, namespace: System.ComponentModel
  DNByteConverter = interface; // type: System.ComponentModel.ByteConverter, namespace: System.ComponentModel
  DNDecimalConverter = interface; // type: System.ComponentModel.DecimalConverter, namespace: System.ComponentModel
  DNDoubleConverter = interface; // type: System.ComponentModel.DoubleConverter, namespace: System.ComponentModel
  DNInt16Converter = interface; // type: System.ComponentModel.Int16Converter, namespace: System.ComponentModel
  DNInt32Converter = interface; // type: System.ComponentModel.Int32Converter, namespace: System.ComponentModel
  DNInt64Converter = interface; // type: System.ComponentModel.Int64Converter, namespace: System.ComponentModel
  DNSByteConverter = interface; // type: System.ComponentModel.SByteConverter, namespace: System.ComponentModel
  DNSingleConverter = interface; // type: System.ComponentModel.SingleConverter, namespace: System.ComponentModel
  DNUInt16Converter = interface; // type: System.ComponentModel.UInt16Converter, namespace: System.ComponentModel
  DNUInt32Converter = interface; // type: System.ComponentModel.UInt32Converter, namespace: System.ComponentModel
  DNUInt64Converter = interface; // type: System.ComponentModel.UInt64Converter, namespace: System.ComponentModel
  DNBooleanConverter = interface; // type: System.ComponentModel.BooleanConverter, namespace: System.ComponentModel
  DNCharConverter = interface; // type: System.ComponentModel.CharConverter, namespace: System.ComponentModel
  DNCollectionConverter = interface; // type: System.ComponentModel.CollectionConverter, namespace: System.ComponentModel
  DNArrayConverter = interface; // type: System.ComponentModel.ArrayConverter, namespace: System.ComponentModel
  DNCultureInfoConverter = interface; // type: System.ComponentModel.CultureInfoConverter, namespace: System.ComponentModel
  DNDateTimeConverter = interface; // type: System.ComponentModel.DateTimeConverter, namespace: System.ComponentModel
  DNDateTimeOffsetConverter = interface; // type: System.ComponentModel.DateTimeOffsetConverter, namespace: System.ComponentModel
  DNEnumConverter = interface; // type: System.ComponentModel.EnumConverter, namespace: System.ComponentModel
  DNExpandableObjectConverter = interface; // type: System.ComponentModel.ExpandableObjectConverter, namespace: System.ComponentModel
  DNGuidConverter = interface; // type: System.ComponentModel.GuidConverter, namespace: System.ComponentModel
  DNMultilineStringConverter = interface; // type: System.ComponentModel.MultilineStringConverter, namespace: System.ComponentModel
  DNNullableConverter = interface; // type: System.ComponentModel.NullableConverter, namespace: System.ComponentModel
  DNReferenceConverter = interface; // type: System.ComponentModel.ReferenceConverter, namespace: System.ComponentModel
  DNComponentConverter = interface; // type: System.ComponentModel.ComponentConverter, namespace: System.ComponentModel
  DNStringConverter = interface; // type: System.ComponentModel.StringConverter, namespace: System.ComponentModel
  DNTimeSpanConverter = interface; // type: System.ComponentModel.TimeSpanConverter, namespace: System.ComponentModel
  DNTypeListConverter = interface; // type: System.ComponentModel.TypeListConverter, namespace: System.ComponentModel
  DNExtendedProtectionPolicyTypeConverter = interface; // type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter, namespace: System.Security.Authentication.ExtendedProtection
  DNUriTypeConverter = interface; // type: System.UriTypeConverter, namespace: System
  DNTypeDescriptionProvider = interface; // type: System.ComponentModel.TypeDescriptionProvider, namespace: System.ComponentModel
  DNTypeDescriptor = interface; // type: System.ComponentModel.TypeDescriptor, namespace: System.ComponentModel
  DNCorrelationManager = interface; // type: System.Diagnostics.CorrelationManager, namespace: System.Diagnostics
  DNCounterCreationData = interface; // type: System.Diagnostics.CounterCreationData, namespace: System.Diagnostics
  DNCounterSampleCalculator = interface; // type: System.Diagnostics.CounterSampleCalculator, namespace: System.Diagnostics
  DNDebug = interface; // type: System.Diagnostics.Debug, namespace: System.Diagnostics
  DNEventInstance = interface; // type: System.Diagnostics.EventInstance, namespace: System.Diagnostics
  DNEventLogEntryCollection = interface; // type: System.Diagnostics.EventLogEntryCollection, namespace: System.Diagnostics
  DNEventLogPermissionEntry = interface; // type: System.Diagnostics.EventLogPermissionEntry, namespace: System.Diagnostics
  DNEventSourceCreationData = interface; // type: System.Diagnostics.EventSourceCreationData, namespace: System.Diagnostics
  DNFileVersionInfo = interface; // type: System.Diagnostics.FileVersionInfo, namespace: System.Diagnostics
  DNInstanceData = interface; // type: System.Diagnostics.InstanceData, namespace: System.Diagnostics
  DNPerformanceCounterCategory = interface; // type: System.Diagnostics.PerformanceCounterCategory, namespace: System.Diagnostics
  DNPerformanceCounterManager = interface; // type: System.Diagnostics.PerformanceCounterManager, namespace: System.Diagnostics
  DNPerformanceCounterPermissionEntry = interface; // type: System.Diagnostics.PerformanceCounterPermissionEntry, namespace: System.Diagnostics
  DNProcessStartInfo = interface; // type: System.Diagnostics.ProcessStartInfo, namespace: System.Diagnostics
  DNStackFrameExtensions = interface; // type: System.Diagnostics.StackFrameExtensions, namespace: System.Diagnostics
  DNStopwatch = interface; // type: System.Diagnostics.Stopwatch, namespace: System.Diagnostics
  DNSwitch = interface; // type: System.Diagnostics.Switch, namespace: System.Diagnostics
  DNBooleanSwitch = interface; // type: System.Diagnostics.BooleanSwitch, namespace: System.Diagnostics
  DNSourceSwitch = interface; // type: System.Diagnostics.SourceSwitch, namespace: System.Diagnostics
  DNTraceSwitch = interface; // type: System.Diagnostics.TraceSwitch, namespace: System.Diagnostics
  DNTrace = interface; // type: System.Diagnostics.Trace, namespace: System.Diagnostics
  DNTraceEventCache = interface; // type: System.Diagnostics.TraceEventCache, namespace: System.Diagnostics
  DNTraceFilter = interface; // type: System.Diagnostics.TraceFilter, namespace: System.Diagnostics
  DNEventTypeFilter = interface; // type: System.Diagnostics.EventTypeFilter, namespace: System.Diagnostics
  DNSourceFilter = interface; // type: System.Diagnostics.SourceFilter, namespace: System.Diagnostics
  DNTraceListenerCollection = interface; // type: System.Diagnostics.TraceListenerCollection, namespace: System.Diagnostics
  DNTraceSource = interface; // type: System.Diagnostics.TraceSource, namespace: System.Diagnostics
  DNPowerModeChangedEventArgs = interface; // type: Microsoft.Win32.PowerModeChangedEventArgs, namespace: Microsoft.Win32
  DNSessionEndedEventArgs = interface; // type: Microsoft.Win32.SessionEndedEventArgs, namespace: Microsoft.Win32
  DNSessionEndingEventArgs = interface; // type: Microsoft.Win32.SessionEndingEventArgs, namespace: Microsoft.Win32
  DNSessionSwitchEventArgs = interface; // type: Microsoft.Win32.SessionSwitchEventArgs, namespace: Microsoft.Win32
  DNTimerElapsedEventArgs = interface; // type: Microsoft.Win32.TimerElapsedEventArgs, namespace: Microsoft.Win32
  DNUserPreferenceChangedEventArgs = interface; // type: Microsoft.Win32.UserPreferenceChangedEventArgs, namespace: Microsoft.Win32
  DNUserPreferenceChangingEventArgs = interface; // type: Microsoft.Win32.UserPreferenceChangingEventArgs, namespace: Microsoft.Win32
  DNNotifyCollectionChangedEventArgs = interface; // type: System.Collections.Specialized.NotifyCollectionChangedEventArgs, namespace: System.Collections.Specialized
  DNAddingNewEventArgs = interface; // type: System.ComponentModel.AddingNewEventArgs, namespace: System.ComponentModel
  DNAsyncCompletedEventArgs = interface; // type: System.ComponentModel.AsyncCompletedEventArgs, namespace: System.ComponentModel
  DNRunWorkerCompletedEventArgs = interface; // type: System.ComponentModel.RunWorkerCompletedEventArgs, namespace: System.ComponentModel
  DNDownloadDataCompletedEventArgs = interface; // type: System.Net.DownloadDataCompletedEventArgs, namespace: System.Net
  DNDownloadStringCompletedEventArgs = interface; // type: System.Net.DownloadStringCompletedEventArgs, namespace: System.Net
  DNPingCompletedEventArgs = interface; // type: System.Net.NetworkInformation.PingCompletedEventArgs, namespace: System.Net.NetworkInformation
  DNOpenReadCompletedEventArgs = interface; // type: System.Net.OpenReadCompletedEventArgs, namespace: System.Net
  DNOpenWriteCompletedEventArgs = interface; // type: System.Net.OpenWriteCompletedEventArgs, namespace: System.Net
  DNUploadDataCompletedEventArgs = interface; // type: System.Net.UploadDataCompletedEventArgs, namespace: System.Net
  DNUploadFileCompletedEventArgs = interface; // type: System.Net.UploadFileCompletedEventArgs, namespace: System.Net
  DNUploadStringCompletedEventArgs = interface; // type: System.Net.UploadStringCompletedEventArgs, namespace: System.Net
  DNUploadValuesCompletedEventArgs = interface; // type: System.Net.UploadValuesCompletedEventArgs, namespace: System.Net
  DNCancelEventArgs = interface; // type: System.ComponentModel.CancelEventArgs, namespace: System.ComponentModel
  DNDoWorkEventArgs = interface; // type: System.ComponentModel.DoWorkEventArgs, namespace: System.ComponentModel
  DNCollectionChangeEventArgs = interface; // type: System.ComponentModel.CollectionChangeEventArgs, namespace: System.ComponentModel
  DNDataErrorsChangedEventArgs = interface; // type: System.ComponentModel.DataErrorsChangedEventArgs, namespace: System.ComponentModel
  DNActiveDesignerEventArgs = interface; // type: System.ComponentModel.Design.ActiveDesignerEventArgs, namespace: System.ComponentModel.Design
  DNComponentChangedEventArgs = interface; // type: System.ComponentModel.Design.ComponentChangedEventArgs, namespace: System.ComponentModel.Design
  DNComponentChangingEventArgs = interface; // type: System.ComponentModel.Design.ComponentChangingEventArgs, namespace: System.ComponentModel.Design
  DNComponentEventArgs = interface; // type: System.ComponentModel.Design.ComponentEventArgs, namespace: System.ComponentModel.Design
  DNComponentRenameEventArgs = interface; // type: System.ComponentModel.Design.ComponentRenameEventArgs, namespace: System.ComponentModel.Design
  DNDesignerEventArgs = interface; // type: System.ComponentModel.Design.DesignerEventArgs, namespace: System.ComponentModel.Design
  DNDesignerTransactionCloseEventArgs = interface; // type: System.ComponentModel.Design.DesignerTransactionCloseEventArgs, namespace: System.ComponentModel.Design
  DNResolveNameEventArgs = interface; // type: System.ComponentModel.Design.Serialization.ResolveNameEventArgs, namespace: System.ComponentModel.Design.Serialization
  DNHandledEventArgs = interface; // type: System.ComponentModel.HandledEventArgs, namespace: System.ComponentModel
  DNListChangedEventArgs = interface; // type: System.ComponentModel.ListChangedEventArgs, namespace: System.ComponentModel
  DNProgressChangedEventArgs = interface; // type: System.ComponentModel.ProgressChangedEventArgs, namespace: System.ComponentModel
  DNDownloadProgressChangedEventArgs = interface; // type: System.Net.DownloadProgressChangedEventArgs, namespace: System.Net
  DNUploadProgressChangedEventArgs = interface; // type: System.Net.UploadProgressChangedEventArgs, namespace: System.Net
  DNPropertyChangedEventArgs = interface; // type: System.ComponentModel.PropertyChangedEventArgs, namespace: System.ComponentModel
  DNPropertyChangingEventArgs = interface; // type: System.ComponentModel.PropertyChangingEventArgs, namespace: System.ComponentModel
  DNRefreshEventArgs = interface; // type: System.ComponentModel.RefreshEventArgs, namespace: System.ComponentModel
  DNDataReceivedEventArgs = interface; // type: System.Diagnostics.DataReceivedEventArgs, namespace: System.Diagnostics
  DNEntryWrittenEventArgs = interface; // type: System.Diagnostics.EntryWrittenEventArgs, namespace: System.Diagnostics
  DNErrorEventArgs = interface; // type: System.IO.ErrorEventArgs, namespace: System.IO
  DNFileSystemEventArgs = interface; // type: System.IO.FileSystemEventArgs, namespace: System.IO
  DNRenamedEventArgs = interface; // type: System.IO.RenamedEventArgs, namespace: System.IO
  DNSerialDataReceivedEventArgs = interface; // type: System.IO.Ports.SerialDataReceivedEventArgs, namespace: System.IO.Ports
  DNSerialErrorReceivedEventArgs = interface; // type: System.IO.Ports.SerialErrorReceivedEventArgs, namespace: System.IO.Ports
  DNSerialPinChangedEventArgs = interface; // type: System.IO.Ports.SerialPinChangedEventArgs, namespace: System.IO.Ports
  DNNetworkAvailabilityEventArgs = interface; // type: System.Net.NetworkInformation.NetworkAvailabilityEventArgs, namespace: System.Net.NetworkInformation
  DNSocketAsyncEventArgs = interface; // type: System.Net.Sockets.SocketAsyncEventArgs, namespace: System.Net.Sockets
  DNWriteStreamClosedEventArgs = interface; // type: System.Net.WriteStreamClosedEventArgs, namespace: System.Net
  DNThreadExceptionEventArgs = interface; // type: System.Threading.ThreadExceptionEventArgs, namespace: System.Threading
  DNElapsedEventArgs = interface; // type: System.Timers.ElapsedEventArgs, namespace: System.Timers
  DNSmtpException = interface; // type: System.Net.Mail.SmtpException, namespace: System.Net.Mail
  DNSmtpFailedRecipientException = interface; // type: System.Net.Mail.SmtpFailedRecipientException, namespace: System.Net.Mail
  DNSmtpFailedRecipientsException = interface; // type: System.Net.Mail.SmtpFailedRecipientsException, namespace: System.Net.Mail
  DNInvalidAsynchronousStateException = interface; // type: System.ComponentModel.InvalidAsynchronousStateException, namespace: System.ComponentModel
  DNInvalidEnumArgumentException = interface; // type: System.ComponentModel.InvalidEnumArgumentException, namespace: System.ComponentModel
  DNLicenseException = interface; // type: System.ComponentModel.LicenseException, namespace: System.ComponentModel
  DNWarningException = interface; // type: System.ComponentModel.WarningException, namespace: System.ComponentModel
  DNCookieException = interface; // type: System.Net.CookieException, namespace: System.Net
  DNUriFormatException = interface; // type: System.UriFormatException, namespace: System
  DNPingException = interface; // type: System.Net.NetworkInformation.PingException, namespace: System.Net.NetworkInformation
  DNProtocolViolationException = interface; // type: System.Net.ProtocolViolationException, namespace: System.Net
  DNWebException = interface; // type: System.Net.WebException, namespace: System.Net
  DNInternalBufferOverflowException = interface; // type: System.IO.InternalBufferOverflowException, namespace: System.IO
  DNInvalidDataException = interface; // type: System.IO.InvalidDataException, namespace: System.IO
  DNCheckoutException = interface; // type: System.ComponentModel.Design.CheckoutException, namespace: System.ComponentModel.Design
  DNWin32Exception = interface; // type: System.ComponentModel.Win32Exception, namespace: System.ComponentModel
  DNHttpListenerException = interface; // type: System.Net.HttpListenerException, namespace: System.Net
  DNNetworkInformationException = interface; // type: System.Net.NetworkInformation.NetworkInformationException, namespace: System.Net.NetworkInformation
  DNSocketException = interface; // type: System.Net.Sockets.SocketException, namespace: System.Net.Sockets
  DNWebSocketException = interface; // type: System.Net.WebSockets.WebSocketException, namespace: System.Net.WebSockets
  DNAuthenticationException = interface; // type: System.Security.Authentication.AuthenticationException, namespace: System.Security.Authentication
  DNInvalidCredentialException = interface; // type: System.Security.Authentication.InvalidCredentialException, namespace: System.Security.Authentication
  DNRegexMatchTimeoutException = interface; // type: System.Text.RegularExpressions.RegexMatchTimeoutException, namespace: System.Text.RegularExpressions
  DNBarrierPostPhaseException = interface; // type: System.Threading.BarrierPostPhaseException, namespace: System.Threading
  DNComponent = interface; // type: System.ComponentModel.Component, namespace: System.ComponentModel
  DNCodeDomProvider = interface; // type: System.CodeDom.Compiler.CodeDomProvider, namespace: System.CodeDom.Compiler
  DNCSharpCodeProvider = interface; // type: Microsoft.CSharp.CSharpCodeProvider, namespace: Microsoft.CSharp
  DNVBCodeProvider = interface; // type: Microsoft.VisualBasic.VBCodeProvider, namespace: Microsoft.VisualBasic
  DNBackgroundWorker = interface; // type: System.ComponentModel.BackgroundWorker, namespace: System.ComponentModel
  DNEventLog = interface; // type: System.Diagnostics.EventLog, namespace: System.Diagnostics
  DNEventLogEntry = interface; // type: System.Diagnostics.EventLogEntry, namespace: System.Diagnostics
  DNPerformanceCounter = interface; // type: System.Diagnostics.PerformanceCounter, namespace: System.Diagnostics
  DNProcess = interface; // type: System.Diagnostics.Process, namespace: System.Diagnostics
  DNProcessModule = interface; // type: System.Diagnostics.ProcessModule, namespace: System.Diagnostics
  DNProcessThread = interface; // type: System.Diagnostics.ProcessThread, namespace: System.Diagnostics
  DNFileSystemWatcher = interface; // type: System.IO.FileSystemWatcher, namespace: System.IO
  DNSerialPort = interface; // type: System.IO.Ports.SerialPort, namespace: System.IO.Ports
  DNSoundPlayer = interface; // type: System.Media.SoundPlayer, namespace: System.Media
  DNPing = interface; // type: System.Net.NetworkInformation.Ping, namespace: System.Net.NetworkInformation
  DNWebClient = interface; // type: System.Net.WebClient, namespace: System.Net
  DNTimer = interface; // type: System.Timers.Timer, namespace: System.Timers
  DNTraceListener = interface; // type: System.Diagnostics.TraceListener, namespace: System.Diagnostics
  DNDefaultTraceListener = interface; // type: System.Diagnostics.DefaultTraceListener, namespace: System.Diagnostics
  DNEventLogTraceListener = interface; // type: System.Diagnostics.EventLogTraceListener, namespace: System.Diagnostics
  DNTextWriterTraceListener = interface; // type: System.Diagnostics.TextWriterTraceListener, namespace: System.Diagnostics
  DNConsoleTraceListener = interface; // type: System.Diagnostics.ConsoleTraceListener, namespace: System.Diagnostics
  DNDelimitedListTraceListener = interface; // type: System.Diagnostics.DelimitedListTraceListener, namespace: System.Diagnostics
  DNXmlWriterTraceListener = interface; // type: System.Diagnostics.XmlWriterTraceListener, namespace: System.Diagnostics
  DNDeflateStream = interface; // type: System.IO.Compression.DeflateStream, namespace: System.IO.Compression
  DNGZipStream = interface; // type: System.IO.Compression.GZipStream, namespace: System.IO.Compression
  DNAuthenticatedStream = interface; // type: System.Net.Security.AuthenticatedStream, namespace: System.Net.Security
  DNNegotiateStream = interface; // type: System.Net.Security.NegotiateStream, namespace: System.Net.Security
  DNSslStream = interface; // type: System.Net.Security.SslStream, namespace: System.Net.Security
  DNNetworkStream = interface; // type: System.Net.Sockets.NetworkStream, namespace: System.Net.Sockets
  DNIndentedTextWriter = interface; // type: System.CodeDom.Compiler.IndentedTextWriter, namespace: System.CodeDom.Compiler
  DNWebRequest = interface; // type: System.Net.WebRequest, namespace: System.Net
  DNFileWebRequest = interface; // type: System.Net.FileWebRequest, namespace: System.Net
  DNFtpWebRequest = interface; // type: System.Net.FtpWebRequest, namespace: System.Net
  DNHttpWebRequest = interface; // type: System.Net.HttpWebRequest, namespace: System.Net
  DNWebResponse = interface; // type: System.Net.WebResponse, namespace: System.Net
  DNFileWebResponse = interface; // type: System.Net.FileWebResponse, namespace: System.Net
  DNFtpWebResponse = interface; // type: System.Net.FtpWebResponse, namespace: System.Net
  DNHttpWebResponse = interface; // type: System.Net.HttpWebResponse, namespace: System.Net
  DNStandardOleMarshalObject = interface; // type: System.Runtime.InteropServices.StandardOleMarshalObject, namespace: System.Runtime.InteropServices
  DNSemaphore = interface; // type: System.Threading.Semaphore, namespace: System.Threading
  DNSystemSound = interface; // type: System.Media.SystemSound, namespace: System.Media
  DNSystemSounds = interface; // type: System.Media.SystemSounds, namespace: System.Media
  DNAuthenticationManager = interface; // type: System.Net.AuthenticationManager, namespace: System.Net
  DNAuthorization = interface; // type: System.Net.Authorization, namespace: System.Net
  DNRequestCachePolicy = interface; // type: System.Net.Cache.RequestCachePolicy, namespace: System.Net.Cache
  DNHttpRequestCachePolicy = interface; // type: System.Net.Cache.HttpRequestCachePolicy, namespace: System.Net.Cache
  DNCookie = interface; // type: System.Net.Cookie, namespace: System.Net
  DNCookieCollection = interface; // type: System.Net.CookieCollection, namespace: System.Net
  DNCookieContainer = interface; // type: System.Net.CookieContainer, namespace: System.Net
  DNCredentialCache = interface; // type: System.Net.CredentialCache, namespace: System.Net
  DNDns = interface; // type: System.Net.Dns, namespace: System.Net
  DNEndPoint = interface; // type: System.Net.EndPoint, namespace: System.Net
  DNDnsEndPoint = interface; // type: System.Net.DnsEndPoint, namespace: System.Net
  DNIPEndPoint = interface; // type: System.Net.IPEndPoint, namespace: System.Net
  DNEndpointPermission = interface; // type: System.Net.EndpointPermission, namespace: System.Net
  DNGlobalProxySelection = interface; // type: System.Net.GlobalProxySelection, namespace: System.Net
  DNHttpListener = interface; // type: System.Net.HttpListener, namespace: System.Net
  DNHttpListenerContext = interface; // type: System.Net.HttpListenerContext, namespace: System.Net
  DNHttpListenerPrefixCollection = interface; // type: System.Net.HttpListenerPrefixCollection, namespace: System.Net
  DNHttpListenerRequest = interface; // type: System.Net.HttpListenerRequest, namespace: System.Net
  DNHttpListenerResponse = interface; // type: System.Net.HttpListenerResponse, namespace: System.Net
  DNHttpListenerTimeoutManager = interface; // type: System.Net.HttpListenerTimeoutManager, namespace: System.Net
  DNHttpVersion = interface; // type: System.Net.HttpVersion, namespace: System.Net
  DNIPAddress = interface; // type: System.Net.IPAddress, namespace: System.Net
  DNIPHostEntry = interface; // type: System.Net.IPHostEntry, namespace: System.Net
  DNAttachmentBase = interface; // type: System.Net.Mail.AttachmentBase, namespace: System.Net.Mail
  DNAlternateView = interface; // type: System.Net.Mail.AlternateView, namespace: System.Net.Mail
  DNAttachment = interface; // type: System.Net.Mail.Attachment, namespace: System.Net.Mail
  DNLinkedResource = interface; // type: System.Net.Mail.LinkedResource, namespace: System.Net.Mail
  DNMailAddress = interface; // type: System.Net.Mail.MailAddress, namespace: System.Net.Mail
  DNMailMessage = interface; // type: System.Net.Mail.MailMessage, namespace: System.Net.Mail
  DNSmtpClient = interface; // type: System.Net.Mail.SmtpClient, namespace: System.Net.Mail
  DNContentDisposition = interface; // type: System.Net.Mime.ContentDisposition, namespace: System.Net.Mime
  DNContentType = interface; // type: System.Net.Mime.ContentType, namespace: System.Net.Mime
  DNDispositionTypeNames = interface; // type: System.Net.Mime.DispositionTypeNames, namespace: System.Net.Mime
  DNMediaTypeNames = interface; // type: System.Net.Mime.MediaTypeNames, namespace: System.Net.Mime
  DNMediaTypeNames_Application = interface; // type: System.Net.Mime.MediaTypeNames+Application, namespace: System.Net.Mime
  DNMediaTypeNames_Image = interface; // type: System.Net.Mime.MediaTypeNames+Image, namespace: System.Net.Mime
  DNMediaTypeNames_Text = interface; // type: System.Net.Mime.MediaTypeNames+Text, namespace: System.Net.Mime
  DNNetworkCredential = interface; // type: System.Net.NetworkCredential, namespace: System.Net
  DNGatewayIPAddressInformation = interface; // type: System.Net.NetworkInformation.GatewayIPAddressInformation, namespace: System.Net.NetworkInformation
  DNGatewayIPAddressInformationCollection = interface; // type: System.Net.NetworkInformation.GatewayIPAddressInformationCollection, namespace: System.Net.NetworkInformation
  DNIcmpV4Statistics = interface; // type: System.Net.NetworkInformation.IcmpV4Statistics, namespace: System.Net.NetworkInformation
  DNIcmpV6Statistics = interface; // type: System.Net.NetworkInformation.IcmpV6Statistics, namespace: System.Net.NetworkInformation
  DNIPAddressCollection = interface; // type: System.Net.NetworkInformation.IPAddressCollection, namespace: System.Net.NetworkInformation
  DNIPAddressInformation = interface; // type: System.Net.NetworkInformation.IPAddressInformation, namespace: System.Net.NetworkInformation
  DNMulticastIPAddressInformation = interface; // type: System.Net.NetworkInformation.MulticastIPAddressInformation, namespace: System.Net.NetworkInformation
  DNUnicastIPAddressInformation = interface; // type: System.Net.NetworkInformation.UnicastIPAddressInformation, namespace: System.Net.NetworkInformation
  DNIPAddressInformationCollection = interface; // type: System.Net.NetworkInformation.IPAddressInformationCollection, namespace: System.Net.NetworkInformation
  DNIPGlobalProperties = interface; // type: System.Net.NetworkInformation.IPGlobalProperties, namespace: System.Net.NetworkInformation
  DNIPGlobalStatistics = interface; // type: System.Net.NetworkInformation.IPGlobalStatistics, namespace: System.Net.NetworkInformation
  DNIPInterfaceProperties = interface; // type: System.Net.NetworkInformation.IPInterfaceProperties, namespace: System.Net.NetworkInformation
  DNIPInterfaceStatistics = interface; // type: System.Net.NetworkInformation.IPInterfaceStatistics, namespace: System.Net.NetworkInformation
  DNIPv4InterfaceProperties = interface; // type: System.Net.NetworkInformation.IPv4InterfaceProperties, namespace: System.Net.NetworkInformation
  DNIPv4InterfaceStatistics = interface; // type: System.Net.NetworkInformation.IPv4InterfaceStatistics, namespace: System.Net.NetworkInformation
  DNIPv6InterfaceProperties = interface; // type: System.Net.NetworkInformation.IPv6InterfaceProperties, namespace: System.Net.NetworkInformation
  DNMulticastIPAddressInformationCollection = interface; // type: System.Net.NetworkInformation.MulticastIPAddressInformationCollection, namespace: System.Net.NetworkInformation
  DNNetworkChange = interface; // type: System.Net.NetworkInformation.NetworkChange, namespace: System.Net.NetworkInformation
  DNNetworkInterface = interface; // type: System.Net.NetworkInformation.NetworkInterface, namespace: System.Net.NetworkInformation
  DNPhysicalAddress = interface; // type: System.Net.NetworkInformation.PhysicalAddress, namespace: System.Net.NetworkInformation
  DNPingOptions = interface; // type: System.Net.NetworkInformation.PingOptions, namespace: System.Net.NetworkInformation
  DNPingReply = interface; // type: System.Net.NetworkInformation.PingReply, namespace: System.Net.NetworkInformation
  DNTcpConnectionInformation = interface; // type: System.Net.NetworkInformation.TcpConnectionInformation, namespace: System.Net.NetworkInformation
  DNTcpStatistics = interface; // type: System.Net.NetworkInformation.TcpStatistics, namespace: System.Net.NetworkInformation
  DNUdpStatistics = interface; // type: System.Net.NetworkInformation.UdpStatistics, namespace: System.Net.NetworkInformation
  DNUnicastIPAddressInformationCollection = interface; // type: System.Net.NetworkInformation.UnicastIPAddressInformationCollection, namespace: System.Net.NetworkInformation
  DNServicePoint = interface; // type: System.Net.ServicePoint, namespace: System.Net
  DNServicePointManager = interface; // type: System.Net.ServicePointManager, namespace: System.Net
  DNSocketAddress = interface; // type: System.Net.SocketAddress, namespace: System.Net
  DNIPv6MulticastOption = interface; // type: System.Net.Sockets.IPv6MulticastOption, namespace: System.Net.Sockets
  DNLingerOption = interface; // type: System.Net.Sockets.LingerOption, namespace: System.Net.Sockets
  DNMulticastOption = interface; // type: System.Net.Sockets.MulticastOption, namespace: System.Net.Sockets
  DNSendPacketsElement = interface; // type: System.Net.Sockets.SendPacketsElement, namespace: System.Net.Sockets
  DNSocket = interface; // type: System.Net.Sockets.Socket, namespace: System.Net.Sockets
  DNSocketTaskExtensions = interface; // type: System.Net.Sockets.SocketTaskExtensions, namespace: System.Net.Sockets
  DNTcpClient = interface; // type: System.Net.Sockets.TcpClient, namespace: System.Net.Sockets
  DNTcpListener = interface; // type: System.Net.Sockets.TcpListener, namespace: System.Net.Sockets
  DNUdpClient = interface; // type: System.Net.Sockets.UdpClient, namespace: System.Net.Sockets
  DNTransportContext = interface; // type: System.Net.TransportContext, namespace: System.Net
  DNWebProxy = interface; // type: System.Net.WebProxy, namespace: System.Net
  DNWebRequestMethods = interface; // type: System.Net.WebRequestMethods, namespace: System.Net
  DNWebRequestMethods_File = interface; // type: System.Net.WebRequestMethods+File, namespace: System.Net
  DNWebRequestMethods_Ftp = interface; // type: System.Net.WebRequestMethods+Ftp, namespace: System.Net
  DNWebRequestMethods_Http = interface; // type: System.Net.WebRequestMethods+Http, namespace: System.Net
  DNClientWebSocketOptions = interface; // type: System.Net.WebSockets.ClientWebSocketOptions, namespace: System.Net.WebSockets
  DNWebSocket = interface; // type: System.Net.WebSockets.WebSocket, namespace: System.Net.WebSockets
  DNClientWebSocket = interface; // type: System.Net.WebSockets.ClientWebSocket, namespace: System.Net.WebSockets
  DNWebSocketContext = interface; // type: System.Net.WebSockets.WebSocketContext, namespace: System.Net.WebSockets
  DNHttpListenerWebSocketContext = interface; // type: System.Net.WebSockets.HttpListenerWebSocketContext, namespace: System.Net.WebSockets
  DNWebSocketReceiveResult = interface; // type: System.Net.WebSockets.WebSocketReceiveResult, namespace: System.Net.WebSockets
  DNWebUtility = interface; // type: System.Net.WebUtility, namespace: System.Net
  DNComponentResourceManager = interface; // type: System.ComponentModel.ComponentResourceManager, namespace: System.ComponentModel
  DNSafeProcessHandle = interface; // type: Microsoft.Win32.SafeHandles.SafeProcessHandle, namespace: Microsoft.Win32.SafeHandles
  DNSafeX509ChainHandle = interface; // type: Microsoft.Win32.SafeHandles.SafeX509ChainHandle, namespace: Microsoft.Win32.SafeHandles
  DNChannelBinding = interface; // type: System.Security.Authentication.ExtendedProtection.ChannelBinding, namespace: System.Security.Authentication.ExtendedProtection
  DNHandleCollector = interface; // type: System.Runtime.InteropServices.HandleCollector, namespace: System.Runtime.InteropServices
  DNFrameworkName = interface; // type: System.Runtime.Versioning.FrameworkName, namespace: System.Runtime.Versioning
  DNSemaphoreAccessRule = interface; // type: System.Security.AccessControl.SemaphoreAccessRule, namespace: System.Security.AccessControl
  DNSemaphoreAuditRule = interface; // type: System.Security.AccessControl.SemaphoreAuditRule, namespace: System.Security.AccessControl
  DNSemaphoreSecurity = interface; // type: System.Security.AccessControl.SemaphoreSecurity, namespace: System.Security.AccessControl
  DNExtendedProtectionPolicy = interface; // type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy, namespace: System.Security.Authentication.ExtendedProtection
  DNTokenBinding = interface; // type: System.Security.Authentication.ExtendedProtection.TokenBinding, namespace: System.Security.Authentication.ExtendedProtection
  DNHttpListenerBasicIdentity = interface; // type: System.Net.HttpListenerBasicIdentity, namespace: System.Net
  DNDynamicRoleClaimProvider = interface; // type: System.Security.Claims.DynamicRoleClaimProvider, namespace: System.Security.Claims
  DNDnsPermission = interface; // type: System.Net.DnsPermission, namespace: System.Net
  DNSmtpPermission = interface; // type: System.Net.Mail.SmtpPermission, namespace: System.Net.Mail
  DNNetworkInformationPermission = interface; // type: System.Net.NetworkInformation.NetworkInformationPermission, namespace: System.Net.NetworkInformation
  DNSocketPermission = interface; // type: System.Net.SocketPermission, namespace: System.Net
  DNWebPermission = interface; // type: System.Net.WebPermission, namespace: System.Net
  DNResourcePermissionBase = interface; // type: System.Security.Permissions.ResourcePermissionBase, namespace: System.Security.Permissions
  DNEventLogPermission = interface; // type: System.Diagnostics.EventLogPermission, namespace: System.Diagnostics
  DNPerformanceCounterPermission = interface; // type: System.Diagnostics.PerformanceCounterPermission, namespace: System.Diagnostics
  DNStorePermission = interface; // type: System.Security.Permissions.StorePermission, namespace: System.Security.Permissions
  DNTypeDescriptorPermission = interface; // type: System.Security.Permissions.TypeDescriptorPermission, namespace: System.Security.Permissions
  DNAspNetHostingPermission = interface; // type: System.Web.AspNetHostingPermission, namespace: System.Web
  DNAsnEncodedData = interface; // type: System.Security.Cryptography.AsnEncodedData, namespace: System.Security.Cryptography
  DNX500DistinguishedName = interface; // type: System.Security.Cryptography.X509Certificates.X500DistinguishedName, namespace: System.Security.Cryptography.X509Certificates
  DNX509Extension = interface; // type: System.Security.Cryptography.X509Certificates.X509Extension, namespace: System.Security.Cryptography.X509Certificates
  DNX509BasicConstraintsExtension = interface; // type: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension, namespace: System.Security.Cryptography.X509Certificates
  DNX509EnhancedKeyUsageExtension = interface; // type: System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension, namespace: System.Security.Cryptography.X509Certificates
  DNX509KeyUsageExtension = interface; // type: System.Security.Cryptography.X509Certificates.X509KeyUsageExtension, namespace: System.Security.Cryptography.X509Certificates
  DNX509SubjectKeyIdentifierExtension = interface; // type: System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension, namespace: System.Security.Cryptography.X509Certificates
  DNAsnEncodedDataCollection = interface; // type: System.Security.Cryptography.AsnEncodedDataCollection, namespace: System.Security.Cryptography
  DNAsnEncodedDataEnumerator = interface; // type: System.Security.Cryptography.AsnEncodedDataEnumerator, namespace: System.Security.Cryptography
  DNOid = interface; // type: System.Security.Cryptography.Oid, namespace: System.Security.Cryptography
  DNOidCollection = interface; // type: System.Security.Cryptography.OidCollection, namespace: System.Security.Cryptography
  DNOidEnumerator = interface; // type: System.Security.Cryptography.OidEnumerator, namespace: System.Security.Cryptography
  DNPublicKey = interface; // type: System.Security.Cryptography.X509Certificates.PublicKey, namespace: System.Security.Cryptography.X509Certificates
  DNX509Certificate2 = interface; // type: System.Security.Cryptography.X509Certificates.X509Certificate2, namespace: System.Security.Cryptography.X509Certificates
  DNX509Certificate2Enumerator = interface; // type: System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator, namespace: System.Security.Cryptography.X509Certificates
  DNX509CertificateCollection_X509CertificateEnumerator = interface; // type: System.Security.Cryptography.X509Certificates.X509CertificateCollection+X509CertificateEnumerator, namespace: System.Security.Cryptography.X509Certificates
  DNX509Chain = interface; // type: System.Security.Cryptography.X509Certificates.X509Chain, namespace: System.Security.Cryptography.X509Certificates
  DNX509ChainElement = interface; // type: System.Security.Cryptography.X509Certificates.X509ChainElement, namespace: System.Security.Cryptography.X509Certificates
  DNX509ChainElementCollection = interface; // type: System.Security.Cryptography.X509Certificates.X509ChainElementCollection, namespace: System.Security.Cryptography.X509Certificates
  DNX509ChainElementEnumerator = interface; // type: System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator, namespace: System.Security.Cryptography.X509Certificates
  DNX509ChainPolicy = interface; // type: System.Security.Cryptography.X509Certificates.X509ChainPolicy, namespace: System.Security.Cryptography.X509Certificates
  DNX509ExtensionCollection = interface; // type: System.Security.Cryptography.X509Certificates.X509ExtensionCollection, namespace: System.Security.Cryptography.X509Certificates
  DNX509ExtensionEnumerator = interface; // type: System.Security.Cryptography.X509Certificates.X509ExtensionEnumerator, namespace: System.Security.Cryptography.X509Certificates
  DNX509Store = interface; // type: System.Security.Cryptography.X509Certificates.X509Store, namespace: System.Security.Cryptography.X509Certificates
  DNResourcePermissionBaseEntry = interface; // type: System.Security.Permissions.ResourcePermissionBaseEntry, namespace: System.Security.Permissions
  DNSecureStringMarshal = interface; // type: System.Security.SecureStringMarshal, namespace: System.Security
  DNStringNormalizationExtensions = interface; // type: System.StringNormalizationExtensions, namespace: System
  DNCapture = interface; // type: System.Text.RegularExpressions.Capture, namespace: System.Text.RegularExpressions
  DNGroup = interface; // type: System.Text.RegularExpressions.Group, namespace: System.Text.RegularExpressions
  DNMatch = interface; // type: System.Text.RegularExpressions.Match, namespace: System.Text.RegularExpressions
  DNCaptureCollection = interface; // type: System.Text.RegularExpressions.CaptureCollection, namespace: System.Text.RegularExpressions
  DNGroupCollection = interface; // type: System.Text.RegularExpressions.GroupCollection, namespace: System.Text.RegularExpressions
  DNMatchCollection = interface; // type: System.Text.RegularExpressions.MatchCollection, namespace: System.Text.RegularExpressions
  DNRegex = interface; // type: System.Text.RegularExpressions.Regex, namespace: System.Text.RegularExpressions
  DNRegexCompilationInfo = interface; // type: System.Text.RegularExpressions.RegexCompilationInfo, namespace: System.Text.RegularExpressions
  DNRegexRunner = interface; // type: System.Text.RegularExpressions.RegexRunner, namespace: System.Text.RegularExpressions
  DNRegexRunnerFactory = interface; // type: System.Text.RegularExpressions.RegexRunnerFactory, namespace: System.Text.RegularExpressions
  DNBarrier = interface; // type: System.Threading.Barrier, namespace: System.Threading
  DNUri = interface; // type: System.Uri, namespace: System
  DNUriBuilder = interface; // type: System.UriBuilder, namespace: System
  DNUriParser = interface; // type: System.UriParser, namespace: System
  DNFileStyleUriParser = interface; // type: System.FileStyleUriParser, namespace: System
  DNFtpStyleUriParser = interface; // type: System.FtpStyleUriParser, namespace: System
  DNGenericUriParser = interface; // type: System.GenericUriParser, namespace: System
  DNGopherStyleUriParser = interface; // type: System.GopherStyleUriParser, namespace: System
  DNHttpStyleUriParser = interface; // type: System.HttpStyleUriParser, namespace: System
  DNLdapStyleUriParser = interface; // type: System.LdapStyleUriParser, namespace: System
  DNNetPipeStyleUriParser = interface; // type: System.NetPipeStyleUriParser, namespace: System
  DNNetTcpStyleUriParser = interface; // type: System.NetTcpStyleUriParser, namespace: System
  DNNewsStyleUriParser = interface; // type: System.NewsStyleUriParser, namespace: System
  DNLinkedList_Enumerator<T> = interface; // type: System.Collections.Generic.LinkedList`1+Enumerator, namespace: System.Collections.Generic
  DNQueue_Enumerator<T> = interface; // type: System.Collections.Generic.Queue`1+Enumerator, namespace: System.Collections.Generic
  DNSortedDictionary_Enumerator<TKey, TValue> = interface; // type: System.Collections.Generic.SortedDictionary`2+Enumerator, namespace: System.Collections.Generic
  DNSortedDictionary_KeyCollection_Enumerator<TKey, TValue> = interface; // type: System.Collections.Generic.SortedDictionary`2+KeyCollection+Enumerator, namespace: System.Collections.Generic
  DNSortedDictionary_ValueCollection_Enumerator<TKey, TValue> = interface; // type: System.Collections.Generic.SortedDictionary`2+ValueCollection+Enumerator, namespace: System.Collections.Generic
  DNSortedSet_Enumerator<T> = interface; // type: System.Collections.Generic.SortedSet`1+Enumerator, namespace: System.Collections.Generic
  DNStack_Enumerator<T> = interface; // type: System.Collections.Generic.Stack`1+Enumerator, namespace: System.Collections.Generic
  DNBitVector32 = interface; // type: System.Collections.Specialized.BitVector32, namespace: System.Collections.Specialized
  DNBitVector32_Section = interface; // type: System.Collections.Specialized.BitVector32+Section, namespace: System.Collections.Specialized
  DNMemberRelationship = interface; // type: System.ComponentModel.Design.Serialization.MemberRelationship, namespace: System.ComponentModel.Design.Serialization
  DNCounterSample = interface; // type: System.Diagnostics.CounterSample, namespace: System.Diagnostics
  DNWaitForChangedResult = interface; // type: System.IO.WaitForChangedResult, namespace: System.IO
  DNIPPacketInformation = interface; // type: System.Net.Sockets.IPPacketInformation, namespace: System.Net.Sockets
  DNSocketInformation = interface; // type: System.Net.Sockets.SocketInformation, namespace: System.Net.Sockets
  DNSocketReceiveFromResult = interface; // type: System.Net.Sockets.SocketReceiveFromResult, namespace: System.Net.Sockets
  DNSocketReceiveMessageFromResult = interface; // type: System.Net.Sockets.SocketReceiveMessageFromResult, namespace: System.Net.Sockets
  DNUdpReceiveResult = interface; // type: System.Net.Sockets.UdpReceiveResult, namespace: System.Net.Sockets
  DNFORMATETC = interface; // type: System.Runtime.InteropServices.ComTypes.FORMATETC, namespace: System.Runtime.InteropServices.ComTypes
  DNSTATDATA = interface; // type: System.Runtime.InteropServices.ComTypes.STATDATA, namespace: System.Runtime.InteropServices.ComTypes
  DNSTGMEDIUM = interface; // type: System.Runtime.InteropServices.ComTypes.STGMEDIUM, namespace: System.Runtime.InteropServices.ComTypes
  DNX509ChainStatus = interface; // type: System.Security.Cryptography.X509Certificates.X509ChainStatus, namespace: System.Security.Cryptography.X509Certificates

{ delegates }

  [DNTypeName('Microsoft.Win32.PowerModeChangedEventHandler')]
  DNPowerModeChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNPowerModeChangedEventArgs) of object;

  [DNTypeName('Microsoft.Win32.SessionEndedEventHandler')]
  DNSessionEndedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNSessionEndedEventArgs) of object;

  [DNTypeName('Microsoft.Win32.SessionEndingEventHandler')]
  DNSessionEndingEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNSessionEndingEventArgs) of object;

  [DNTypeName('Microsoft.Win32.SessionSwitchEventHandler')]
  DNSessionSwitchEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNSessionSwitchEventArgs) of object;

  [DNTypeName('Microsoft.Win32.TimerElapsedEventHandler')]
  DNTimerElapsedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNTimerElapsedEventArgs) of object;

  [DNTypeName('Microsoft.Win32.UserPreferenceChangedEventHandler')]
  DNUserPreferenceChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNUserPreferenceChangedEventArgs) of object;

  [DNTypeName('Microsoft.Win32.UserPreferenceChangingEventHandler')]
  DNUserPreferenceChangingEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNUserPreferenceChangingEventArgs) of object;

  [DNTypeName('System.Collections.Specialized.NotifyCollectionChangedEventHandler')]
  DNNotifyCollectionChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNNotifyCollectionChangedEventArgs) of object;

  [DNTypeName('System.ComponentModel.AddingNewEventHandler')]
  DNAddingNewEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNAddingNewEventArgs) of object;

  [DNTypeName('System.ComponentModel.AsyncCompletedEventHandler')]
  DNAsyncCompletedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNAsyncCompletedEventArgs) of object;

  [DNTypeName('System.ComponentModel.CancelEventHandler')]
  DNCancelEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNCancelEventArgs) of object;

  [DNTypeName('System.ComponentModel.CollectionChangeEventHandler')]
  DNCollectionChangeEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNCollectionChangeEventArgs) of object;

  [DNTypeName('System.ComponentModel.Design.ActiveDesignerEventHandler')]
  DNActiveDesignerEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNActiveDesignerEventArgs) of object;

  [DNTypeName('System.ComponentModel.Design.ComponentChangedEventHandler')]
  DNComponentChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNComponentChangedEventArgs) of object;

  [DNTypeName('System.ComponentModel.Design.ComponentChangingEventHandler')]
  DNComponentChangingEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNComponentChangingEventArgs) of object;

  [DNTypeName('System.ComponentModel.Design.ComponentEventHandler')]
  DNComponentEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNComponentEventArgs) of object;

  [DNTypeName('System.ComponentModel.Design.ComponentRenameEventHandler')]
  DNComponentRenameEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNComponentRenameEventArgs) of object;

  [DNTypeName('System.ComponentModel.Design.DesignerEventHandler')]
  DNDesignerEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDesignerEventArgs) of object;

  [DNTypeName('System.ComponentModel.Design.DesignerTransactionCloseEventHandler')]
  DNDesignerTransactionCloseEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDesignerTransactionCloseEventArgs) of object;

  [DNTypeName('System.ComponentModel.Design.Serialization.ResolveNameEventHandler')]
  DNResolveNameEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNResolveNameEventArgs) of object;

  [DNTypeName('System.ComponentModel.Design.ServiceCreatorCallback')]
  DNServiceCreatorCallback = function(container: DNIServiceContainer; serviceType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject of object;

  [DNTypeName('System.ComponentModel.DoWorkEventHandler')]
  DNDoWorkEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDoWorkEventArgs) of object;

  [DNTypeName('System.ComponentModel.HandledEventHandler')]
  DNHandledEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNHandledEventArgs) of object;

  [DNTypeName('System.ComponentModel.ListChangedEventHandler')]
  DNListChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNListChangedEventArgs) of object;

  [DNTypeName('System.ComponentModel.ProgressChangedEventHandler')]
  DNProgressChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNProgressChangedEventArgs) of object;

  [DNTypeName('System.ComponentModel.PropertyChangedEventHandler')]
  DNPropertyChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNPropertyChangedEventArgs) of object;

  [DNTypeName('System.ComponentModel.PropertyChangingEventHandler')]
  DNPropertyChangingEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNPropertyChangingEventArgs) of object;

  [DNTypeName('System.ComponentModel.RefreshEventHandler')]
  DNRefreshEventHandler = procedure(e: DNRefreshEventArgs) of object;

  [DNTypeName('System.ComponentModel.RunWorkerCompletedEventHandler')]
  DNRunWorkerCompletedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNRunWorkerCompletedEventArgs) of object;

  [DNTypeName('System.Diagnostics.DataReceivedEventHandler')]
  DNDataReceivedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDataReceivedEventArgs) of object;

  [DNTypeName('System.Diagnostics.EntryWrittenEventHandler')]
  DNEntryWrittenEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNEntryWrittenEventArgs) of object;

  [DNTypeName('System.IO.ErrorEventHandler')]
  DNErrorEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNErrorEventArgs) of object;

  [DNTypeName('System.IO.FileSystemEventHandler')]
  DNFileSystemEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNFileSystemEventArgs) of object;

  [DNTypeName('System.IO.Ports.SerialDataReceivedEventHandler')]
  DNSerialDataReceivedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNSerialDataReceivedEventArgs) of object;

  [DNTypeName('System.IO.Ports.SerialErrorReceivedEventHandler')]
  DNSerialErrorReceivedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNSerialErrorReceivedEventArgs) of object;

  [DNTypeName('System.IO.Ports.SerialPinChangedEventHandler')]
  DNSerialPinChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNSerialPinChangedEventArgs) of object;

  [DNTypeName('System.IO.RenamedEventHandler')]
  DNRenamedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNRenamedEventArgs) of object;

  [DNTypeName('System.Net.AuthenticationSchemeSelector')]
  DNAuthenticationSchemeSelector = function(httpRequest: DNHttpListenerRequest): DNAuthenticationSchemes of object;

  [DNTypeName('System.Net.BindIPEndPoint')]
  DNBindIPEndPoint = function(servicePoint: DNServicePoint; remoteEndPoint: DNIPEndPoint; retryCount: Int32): DNIPEndPoint of object;

  [DNTypeName('System.Net.DownloadDataCompletedEventHandler')]
  DNDownloadDataCompletedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDownloadDataCompletedEventArgs) of object;

  [DNTypeName('System.Net.DownloadProgressChangedEventHandler')]
  DNDownloadProgressChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDownloadProgressChangedEventArgs) of object;

  [DNTypeName('System.Net.DownloadStringCompletedEventHandler')]
  DNDownloadStringCompletedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDownloadStringCompletedEventArgs) of object;

  [DNTypeName('System.Net.HttpContinueDelegate')]
  DNHttpContinueDelegate = procedure(StatusCode: Int32; httpHeaders: DNWebHeaderCollection) of object;

  [DNTypeName('System.Net.HttpListener+ExtendedProtectionSelector')]
  DNHttpListener_ExtendedProtectionSelector = function(request: DNHttpListenerRequest): DNExtendedProtectionPolicy of object;

  [DNTypeName('System.Net.Mail.SendCompletedEventHandler')]
  DNSendCompletedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNAsyncCompletedEventArgs) of object;

  [DNTypeName('System.Net.NetworkInformation.NetworkAddressChangedEventHandler')]
  DNNetworkAddressChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DDN.mscorlib.DNEventArgs) of object;

  [DNTypeName('System.Net.NetworkInformation.NetworkAvailabilityChangedEventHandler')]
  DNNetworkAvailabilityChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNNetworkAvailabilityEventArgs) of object;

  [DNTypeName('System.Net.NetworkInformation.PingCompletedEventHandler')]
  DNPingCompletedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNPingCompletedEventArgs) of object;

  [DNTypeName('System.Net.OpenReadCompletedEventHandler')]
  DNOpenReadCompletedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNOpenReadCompletedEventArgs) of object;

  [DNTypeName('System.Net.OpenWriteCompletedEventHandler')]
  DNOpenWriteCompletedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNOpenWriteCompletedEventArgs) of object;

  [DNTypeName('System.Net.Security.LocalCertificateSelectionCallback')]
  DNLocalCertificateSelectionCallback = function(sender: DDN.mscorlib.DNObject; targetHost: string; localCertificates: DNX509CertificateCollection; remoteCertificate: DDN.mscorlib.DNX509Certificate; acceptableIssuers: TArray<string>): DDN.mscorlib.DNX509Certificate of object;

  [DNTypeName('System.Net.Security.RemoteCertificateValidationCallback')]
  DNRemoteCertificateValidationCallback = function(sender: DDN.mscorlib.DNObject; certificate: DDN.mscorlib.DNX509Certificate; chain: DNX509Chain; sslPolicyErrors: DNSslPolicyErrors): Boolean of object;

  [DNTypeName('System.Net.UploadDataCompletedEventHandler')]
  DNUploadDataCompletedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNUploadDataCompletedEventArgs) of object;

  [DNTypeName('System.Net.UploadFileCompletedEventHandler')]
  DNUploadFileCompletedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNUploadFileCompletedEventArgs) of object;

  [DNTypeName('System.Net.UploadProgressChangedEventHandler')]
  DNUploadProgressChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNUploadProgressChangedEventArgs) of object;

  [DNTypeName('System.Net.UploadStringCompletedEventHandler')]
  DNUploadStringCompletedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNUploadStringCompletedEventArgs) of object;

  [DNTypeName('System.Net.UploadValuesCompletedEventHandler')]
  DNUploadValuesCompletedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNUploadValuesCompletedEventArgs) of object;

  [DNTypeName('System.Net.WriteStreamClosedEventHandler')]
  DNWriteStreamClosedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNWriteStreamClosedEventArgs) of object;

  [DNTypeName('System.Text.RegularExpressions.MatchEvaluator')]
  DNMatchEvaluator = function(match: DNMatch): string of object;

  [DNTypeName('System.Threading.ThreadExceptionEventHandler')]
  DNThreadExceptionEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNThreadExceptionEventArgs) of object;

  [DNTypeName('System.Timers.ElapsedEventHandler')]
  DNElapsedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNElapsedEventArgs) of object;




{ objects }

  //-------------namespace: System.CodeDom.Compiler----------------
  [DNTypeName('System.CodeDom.Compiler.ICodeCompiler')]
  DNICodeCompiler = interface(DDN.mscorlib.DNObject)
  ['{436B1E43-8A38-359B-9E1A-2A700DBDB6BC}']
  { methods } 

    function CompileAssemblyFromDom(options: DNCompilerParameters; compilationUnit: DNCodeCompileUnit): DNCompilerResults;
    function CompileAssemblyFromFile(options: DNCompilerParameters; fileName: string): DNCompilerResults;
    function CompileAssemblyFromSource(options: DNCompilerParameters; source: string): DNCompilerResults;
    function CompileAssemblyFromDomBatch(options: DNCompilerParameters; compilationUnits: TArray<DNCodeCompileUnit>): DNCompilerResults;
    function CompileAssemblyFromFileBatch(options: DNCompilerParameters; fileNames: TArray<string>): DNCompilerResults;
    function CompileAssemblyFromSourceBatch(options: DNCompilerParameters; sources: TArray<string>): DNCompilerResults;

  end;

  //-------------namespace: System.CodeDom.Compiler----------------
  [DNTypeName('System.CodeDom.Compiler.ICodeGenerator')]
  DNICodeGenerator = interface(DDN.mscorlib.DNObject)
  ['{AA6F6449-A84E-377B-A86C-FD956602CB06}']
  { methods } 

    function IsValidIdentifier(value: string): Boolean;
    procedure ValidateIdentifier(value: string);
    function CreateEscapedIdentifier(value: string): string;
    function CreateValidIdentifier(value: string): string;
    function GetTypeOutput(&type: DNCodeTypeReference): string;
    function Supports(supports: DNGeneratorSupport): Boolean;
    procedure GenerateCodeFromExpression(e: DNCodeExpression; w: DDN.mscorlib.DNTextWriter; o: DNCodeGeneratorOptions);
    procedure GenerateCodeFromStatement(e: DNCodeStatement; w: DDN.mscorlib.DNTextWriter; o: DNCodeGeneratorOptions);
    procedure GenerateCodeFromNamespace(e: DNCodeNamespace; w: DDN.mscorlib.DNTextWriter; o: DNCodeGeneratorOptions);
    procedure GenerateCodeFromCompileUnit(e: DNCodeCompileUnit; w: DDN.mscorlib.DNTextWriter; o: DNCodeGeneratorOptions);
    procedure GenerateCodeFromType(e: DNCodeTypeDeclaration; w: DDN.mscorlib.DNTextWriter; o: DNCodeGeneratorOptions);

  end;

  //-------------namespace: System.CodeDom.Compiler----------------
  [DNTypeName('System.CodeDom.Compiler.ICodeParser')]
  DNICodeParser = interface(DDN.mscorlib.DNObject)
  ['{E4091F1C-1C69-39D7-BDB7-C84B60AB3A07}']
  { methods } 

    function Parse(codeStream: DDN.mscorlib.DNTextReader): DNCodeCompileUnit;

  end;

  //-------------namespace: System.Collections.Generic----------------
  [DNTypeName('System.Collections.Generic.ISet`1')]
  DNISet<T> = interface(DDN.mscorlib.DNICollection<T>)
  ['{17A06585-6615-3D19-8DFF-5443FB19804F}']
  { methods } 

    function Add(item: T): Boolean;
    procedure UnionWith(other: DDN.mscorlib.DNIEnumerable<T>);
    procedure IntersectWith(other: DDN.mscorlib.DNIEnumerable<T>);
    procedure ExceptWith(other: DDN.mscorlib.DNIEnumerable<T>);
    procedure SymmetricExceptWith(other: DDN.mscorlib.DNIEnumerable<T>);
    function IsSubsetOf(other: DDN.mscorlib.DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DDN.mscorlib.DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DDN.mscorlib.DNIEnumerable<T>): Boolean;
    function IsProperSubsetOf(other: DDN.mscorlib.DNIEnumerable<T>): Boolean;
    function Overlaps(other: DDN.mscorlib.DNIEnumerable<T>): Boolean;
    function SetEquals(other: DDN.mscorlib.DNIEnumerable<T>): Boolean;

  end;

  //-------------namespace: System.Collections.Specialized----------------
  [DNTypeName('System.Collections.Specialized.IOrderedDictionary')]
  DNIOrderedDictionary = interface(DDN.mscorlib.DNIDictionary)
  ['{0D2C82B1-3F52-34F4-AFE6-D1016005CDF3}']
  { getters & setters } 

    function get_Item(index: Int32): DDN.mscorlib.DNObject;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject);

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIDictionaryEnumerator;
    procedure Insert(index: Int32; key: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);
    procedure RemoveAt(index: Int32);

  { propertys } 

    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.IBindingList')]
  DNIBindingList = interface(DDN.mscorlib.DNIList)
  ['{A3CB8810-1DA4-35EF-86A2-77A80371893D}']
  { getters & setters } 

    function get_AllowNew: Boolean;
    function get_AllowEdit: Boolean;
    function get_AllowRemove: Boolean;
    function get_SupportsChangeNotification: Boolean;
    function get_SupportsSearching: Boolean;
    function get_SupportsSorting: Boolean;
    function get_IsSorted: Boolean;
    function get_SortProperty: DNPropertyDescriptor;
    function get_SortDirection: DNListSortDirection;

  { events } 

    procedure add_ListChanged(value: DNListChangedEventHandler);
    procedure remove_ListChanged(value: DNListChangedEventHandler);

  { methods } 

    function AddNew: DDN.mscorlib.DNObject;
    procedure AddIndex(&property: DNPropertyDescriptor);
    procedure ApplySort(&property: DNPropertyDescriptor; direction: DNListSortDirection);
    function Find(&property: DNPropertyDescriptor; key: DDN.mscorlib.DNObject): Int32;
    procedure RemoveIndex(&property: DNPropertyDescriptor);
    procedure RemoveSort;

  { propertys } 

    property AllowNew: Boolean read get_AllowNew;
    property AllowEdit: Boolean read get_AllowEdit;
    property AllowRemove: Boolean read get_AllowRemove;
    property SupportsChangeNotification: Boolean read get_SupportsChangeNotification;
    property SupportsSearching: Boolean read get_SupportsSearching;
    property SupportsSorting: Boolean read get_SupportsSorting;
    property IsSorted: Boolean read get_IsSorted;
    property SortProperty: DNPropertyDescriptor read get_SortProperty;
    property SortDirection: DNListSortDirection read get_SortDirection;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.IBindingListView')]
  DNIBindingListView = interface(DNIBindingList)
  ['{75B36905-3B29-3A26-B554-C4FB93DC0B18}']
  { getters & setters } 

    function get_Filter: string;
    procedure set_Filter(value: string);
    function get_SortDescriptions: DNListSortDescriptionCollection;
    function get_SupportsAdvancedSorting: Boolean;
    function get_SupportsFiltering: Boolean;

  { methods } 

    procedure ApplySort(sorts: DNListSortDescriptionCollection);
    procedure RemoveFilter;

  { propertys } 

    property Filter: string read get_Filter write set_Filter;
    property SortDescriptions: DNListSortDescriptionCollection read get_SortDescriptions;
    property SupportsAdvancedSorting: Boolean read get_SupportsAdvancedSorting;
    property SupportsFiltering: Boolean read get_SupportsFiltering;
  end;

  //-------------namespace: System.Collections.Specialized----------------
  [DNTypeName('System.Collections.Specialized.INotifyCollectionChanged')]
  DNINotifyCollectionChanged = interface(DDN.mscorlib.DNObject)
  ['{150173C6-D488-3654-807A-7FE534EB309C}']
  { events } 

    procedure add_CollectionChanged(value: DNNotifyCollectionChangedEventHandler);
    procedure remove_CollectionChanged(value: DNNotifyCollectionChangedEventHandler);

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IComponentChangeService')]
  DNIComponentChangeService = interface(DDN.mscorlib.DNObject)
  ['{2FEF0210-9EBD-32C0-9BFD-24841AC0FCF7}']
  { events } 

    procedure add_ComponentAdded(value: DNComponentEventHandler);
    procedure remove_ComponentAdded(value: DNComponentEventHandler);
    procedure add_ComponentAdding(value: DNComponentEventHandler);
    procedure remove_ComponentAdding(value: DNComponentEventHandler);
    procedure add_ComponentChanged(value: DNComponentChangedEventHandler);
    procedure remove_ComponentChanged(value: DNComponentChangedEventHandler);
    procedure add_ComponentChanging(value: DNComponentChangingEventHandler);
    procedure remove_ComponentChanging(value: DNComponentChangingEventHandler);
    procedure add_ComponentRemoved(value: DNComponentEventHandler);
    procedure remove_ComponentRemoved(value: DNComponentEventHandler);
    procedure add_ComponentRemoving(value: DNComponentEventHandler);
    procedure remove_ComponentRemoving(value: DNComponentEventHandler);
    procedure add_ComponentRename(value: DNComponentRenameEventHandler);
    procedure remove_ComponentRename(value: DNComponentRenameEventHandler);

  { methods } 

    procedure OnComponentChanged(component: DDN.mscorlib.DNObject; member: DNMemberDescriptor; oldValue: DDN.mscorlib.DNObject; newValue: DDN.mscorlib.DNObject);
    procedure OnComponentChanging(component: DDN.mscorlib.DNObject; member: DNMemberDescriptor);

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IComponentDiscoveryService')]
  DNIComponentDiscoveryService = interface(DDN.mscorlib.DNObject)
  ['{E50C8D58-3C49-301C-A498-C1B81C69A0F0}']
  { methods } 

    function GetComponentTypes(designerHost: DNIDesignerHost; baseType: DDN.mscorlib.DNType): DDN.mscorlib.DNICollection;

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IComponentInitializer')]
  DNIComponentInitializer = interface(DDN.mscorlib.DNObject)
  ['{B21B7991-FDC0-3CF3-AD7E-F1A28F25FF7C}']
  { methods } 

    procedure InitializeExistingComponent(defaultValues: DDN.mscorlib.DNIDictionary);
    procedure InitializeNewComponent(defaultValues: DDN.mscorlib.DNIDictionary);

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IDesignerEventService')]
  DNIDesignerEventService = interface(DDN.mscorlib.DNObject)
  ['{EF902D46-ACE1-3668-ADFF-B323562E22F9}']
  { getters & setters } 

    function get_ActiveDesigner: DNIDesignerHost;
    function get_Designers: DNDesignerCollection;

  { events } 

    procedure add_ActiveDesignerChanged(value: DNActiveDesignerEventHandler);
    procedure remove_ActiveDesignerChanged(value: DNActiveDesignerEventHandler);
    procedure add_DesignerCreated(value: DNDesignerEventHandler);
    procedure remove_DesignerCreated(value: DNDesignerEventHandler);
    procedure add_DesignerDisposed(value: DNDesignerEventHandler);
    procedure remove_DesignerDisposed(value: DNDesignerEventHandler);
    procedure add_SelectionChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_SelectionChanged(value: DDN.mscorlib.DNEventHandler);

  { propertys } 

    property ActiveDesigner: DNIDesignerHost read get_ActiveDesigner;
    property Designers: DNDesignerCollection read get_Designers;
  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IDesignerFilter')]
  DNIDesignerFilter = interface(DDN.mscorlib.DNObject)
  ['{52BD540E-625F-3D7B-85BF-1E31491614B5}']
  { methods } 

    procedure PostFilterAttributes(attributes: DDN.mscorlib.DNIDictionary);
    procedure PostFilterEvents(events: DDN.mscorlib.DNIDictionary);
    procedure PostFilterProperties(properties: DDN.mscorlib.DNIDictionary);
    procedure PreFilterAttributes(attributes: DDN.mscorlib.DNIDictionary);
    procedure PreFilterEvents(events: DDN.mscorlib.DNIDictionary);
    procedure PreFilterProperties(properties: DDN.mscorlib.DNIDictionary);

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IDesignerHostTransactionState')]
  DNIDesignerHostTransactionState = interface(DDN.mscorlib.DNObject)
  ['{6259D1EB-8A8C-3480-9ADC-F744F09BF201}']
  { getters & setters } 

    function get_IsClosingTransaction: Boolean;

  { propertys } 

    property IsClosingTransaction: Boolean read get_IsClosingTransaction;
  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IDesignerOptionService')]
  DNIDesignerOptionService = interface(DDN.mscorlib.DNObject)
  ['{053A8DE0-5A5E-362F-8F1A-0FBFD70F8B36}']
  { methods } 

    function GetOptionValue(pageName: string; valueName: string): DDN.mscorlib.DNObject;
    procedure SetOptionValue(pageName: string; valueName: string; value: DDN.mscorlib.DNObject);

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IDictionaryService')]
  DNIDictionaryService = interface(DDN.mscorlib.DNObject)
  ['{122139D6-7904-3E22-BFBF-09D0DDF52C50}']
  { methods } 

    function GetKey(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    function GetValue(key: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    procedure SetValue(key: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IEventBindingService')]
  DNIEventBindingService = interface(DDN.mscorlib.DNObject)
  ['{1A19D89E-F4FE-3E8E-B7EC-05D4E592F3F6}']
  { methods } 

    function CreateUniqueMethodName(component: DNIComponent; e: DNEventDescriptor): string;
    function GetCompatibleMethods(e: DNEventDescriptor): DDN.mscorlib.DNICollection;
    function GetEvent(&property: DNPropertyDescriptor): DNEventDescriptor;
    function GetEventProperties(events: DNEventDescriptorCollection): DNPropertyDescriptorCollection;
    function GetEventProperty(e: DNEventDescriptor): DNPropertyDescriptor;
    function ShowCode: Boolean; overload;
    function ShowCode(lineNumber: Int32): Boolean; overload;
    function ShowCode(component: DNIComponent; e: DNEventDescriptor): Boolean; overload;

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IExtenderListService')]
  DNIExtenderListService = interface(DDN.mscorlib.DNObject)
  ['{1F1867DC-3A21-3650-844A-C70DC4111E6A}']
  { methods } 

    function GetExtenderProviders: TArray<DNIExtenderProvider>;

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IExtenderProviderService')]
  DNIExtenderProviderService = interface(DDN.mscorlib.DNObject)
  ['{B9892E44-035C-3655-A1BE-15613779E7AD}']
  { methods } 

    procedure AddExtenderProvider(provider: DNIExtenderProvider);
    procedure RemoveExtenderProvider(provider: DNIExtenderProvider);

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IHelpService')]
  DNIHelpService = interface(DDN.mscorlib.DNObject)
  ['{D981C498-C74A-3474-A29A-49494A07BD2F}']
  { methods } 

    procedure AddContextAttribute(name: string; value: string; keywordType: DNHelpKeywordType);
    procedure ClearContextAttributes;
    function CreateLocalContext(contextType: DNHelpContextType): DNIHelpService;
    procedure RemoveContextAttribute(name: string; value: string);
    procedure RemoveLocalContext(localContext: DNIHelpService);
    procedure ShowHelpFromKeyword(helpKeyword: string);
    procedure ShowHelpFromUrl(helpUrl: string);

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IInheritanceService')]
  DNIInheritanceService = interface(DDN.mscorlib.DNObject)
  ['{6D559C27-4D35-3944-8C93-6644B4252B6D}']
  { methods } 

    procedure AddInheritedComponents(component: DNIComponent; container: DNIContainer);
    function GetInheritanceAttribute(component: DNIComponent): DNInheritanceAttribute;

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IMenuCommandService')]
  DNIMenuCommandService = interface(DDN.mscorlib.DNObject)
  ['{DF651C5D-783E-3789-901F-A962B7587E69}']
  { getters & setters } 

    function get_Verbs: DNDesignerVerbCollection;

  { methods } 

    procedure AddCommand(command: DNMenuCommand);
    procedure AddVerb(verb: DNDesignerVerb);
    function FindCommand(commandID: DNCommandID): DNMenuCommand;
    function GlobalInvoke(commandID: DNCommandID): Boolean;
    procedure RemoveCommand(command: DNMenuCommand);
    procedure RemoveVerb(verb: DNDesignerVerb);
    procedure ShowContextMenu(menuID: DNCommandID; x: Int32; y: Int32);

  { propertys } 

    property Verbs: DNDesignerVerbCollection read get_Verbs;
  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IReferenceService')]
  DNIReferenceService = interface(DDN.mscorlib.DNObject)
  ['{001209AD-9892-3B07-AFD8-4E99CC5D7A99}']
  { methods } 

    function GetComponent(reference: DDN.mscorlib.DNObject): DNIComponent;
    function GetReference(name: string): DDN.mscorlib.DNObject;
    function GetName(reference: DDN.mscorlib.DNObject): string;
    function GetReferences: TArray<DDN.mscorlib.DNObject>; overload;
    function GetReferences(baseType: DDN.mscorlib.DNType): TArray<DDN.mscorlib.DNObject>; overload;

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IResourceService')]
  DNIResourceService = interface(DDN.mscorlib.DNObject)
  ['{1D4341D5-C4A4-3D81-94D2-17035A7E5B6E}']
  { methods } 

    function GetResourceReader(info: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNIResourceReader;
    function GetResourceWriter(info: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNIResourceWriter;

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.ISelectionService')]
  DNISelectionService = interface(DDN.mscorlib.DNObject)
  ['{297A65BE-5080-3F7F-AD19-B0D05D6F2327}']
  { getters & setters } 

    function get_PrimarySelection: DDN.mscorlib.DNObject;
    function get_SelectionCount: Int32;

  { events } 

    procedure add_SelectionChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_SelectionChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_SelectionChanging(value: DDN.mscorlib.DNEventHandler);
    procedure remove_SelectionChanging(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetComponentSelected(component: DDN.mscorlib.DNObject): Boolean;
    function GetSelectedComponents: DDN.mscorlib.DNICollection;
    procedure SetSelectedComponents(components: DDN.mscorlib.DNICollection); overload;
    procedure SetSelectedComponents(components: DDN.mscorlib.DNICollection; selectionType: DNSelectionTypes); overload;

  { propertys } 

    property PrimarySelection: DDN.mscorlib.DNObject read get_PrimarySelection;
    property SelectionCount: Int32 read get_SelectionCount;
  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.ITypeDescriptorFilterService')]
  DNITypeDescriptorFilterService = interface(DDN.mscorlib.DNObject)
  ['{9ACEF790-218B-33F3-AA78-9AA9C166BDCC}']
  { methods } 

    function FilterAttributes(component: DNIComponent; attributes: DDN.mscorlib.DNIDictionary): Boolean;
    function FilterEvents(component: DNIComponent; events: DDN.mscorlib.DNIDictionary): Boolean;
    function FilterProperties(component: DNIComponent; properties: DDN.mscorlib.DNIDictionary): Boolean;

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.ITypeDiscoveryService')]
  DNITypeDiscoveryService = interface(DDN.mscorlib.DNObject)
  ['{1EE0C222-9738-372E-A5C3-6AECD748C828}']
  { methods } 

    function GetTypes(baseType: DDN.mscorlib.DNType; excludeGlobalTypes: Boolean): DDN.mscorlib.DNICollection;

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.ITypeResolutionService')]
  DNITypeResolutionService = interface(DDN.mscorlib.DNObject)
  ['{73DFCF4C-368F-3F73-9308-1EE21A7D4A2F}']
  { methods } 

    function GetAssembly(name: DDN.mscorlib.DNAssemblyName): DDN.mscorlib.DNAssembly; overload;
    function GetAssembly(name: DDN.mscorlib.DNAssemblyName; throwOnError: Boolean): DDN.mscorlib.DNAssembly; overload;
    function GetType(name: string): DDN.mscorlib.DNType; overload;
    function GetType(name: string; throwOnError: Boolean): DDN.mscorlib.DNType; overload;
    function GetType(name: string; throwOnError: Boolean; ignoreCase: Boolean): DDN.mscorlib.DNType; overload;
    procedure ReferenceAssembly(name: DDN.mscorlib.DNAssemblyName);
    function GetPathOfAssembly(name: DDN.mscorlib.DNAssemblyName): string;

  end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  [DNTypeName('System.ComponentModel.Design.Serialization.IDesignerLoaderService')]
  DNIDesignerLoaderService = interface(DDN.mscorlib.DNObject)
  ['{60D8C960-D259-37AD-8B1F-E0B137BE02EA}']
  { methods } 

    procedure AddLoadDependency;
    procedure DependentLoadComplete(successful: Boolean; errorCollection: DDN.mscorlib.DNICollection);
    function Reload: Boolean;

  end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  [DNTypeName('System.ComponentModel.Design.Serialization.IDesignerSerializationProvider')]
  DNIDesignerSerializationProvider = interface(DDN.mscorlib.DNObject)
  ['{C8888EBB-A061-3406-BBF5-489DFE1E5CC8}']
  { methods } 

    function GetSerializer(manager: DNIDesignerSerializationManager; currentSerializer: DDN.mscorlib.DNObject; objectType: DDN.mscorlib.DNType; serializerType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;

  end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  [DNTypeName('System.ComponentModel.Design.Serialization.IDesignerSerializationService')]
  DNIDesignerSerializationService = interface(DDN.mscorlib.DNObject)
  ['{0423332B-8BBA-3A5B-B6E8-BD50156F6A5C}']
  { methods } 

    function Deserialize(serializationData: DDN.mscorlib.DNObject): DDN.mscorlib.DNICollection;
    function Serialize(objects: DDN.mscorlib.DNICollection): DDN.mscorlib.DNObject;

  end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  [DNTypeName('System.ComponentModel.Design.Serialization.INameCreationService')]
  DNINameCreationService = interface(DDN.mscorlib.DNObject)
  ['{67936D0C-D946-3C81-8CC8-38042D763BCC}']
  { methods } 

    function CreateName(container: DNIContainer; dataType: DDN.mscorlib.DNType): string;
    function IsValidName(name: string): Boolean;
    procedure ValidateName(name: string);

  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.ICancelAddNew')]
  DNICancelAddNew = interface(DDN.mscorlib.DNObject)
  ['{61147C96-48CF-3FDB-8365-39E23E89FCE0}']
  { methods } 

    procedure CancelNew(itemIndex: Int32);
    procedure EndNew(itemIndex: Int32);

  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.IChangeTracking')]
  DNIChangeTracking = interface(DDN.mscorlib.DNObject)
  ['{FF0C7454-B05F-3140-8EA0-2E05004F79CB}']
  { getters & setters } 

    function get_IsChanged: Boolean;

  { methods } 

    procedure AcceptChanges;

  { propertys } 

    property IsChanged: Boolean read get_IsChanged;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.IRevertibleChangeTracking')]
  DNIRevertibleChangeTracking = interface(DNIChangeTracking)
  ['{F900AD90-34B5-3E5E-8DBE-EB871C9D7941}']
  { methods } 

    procedure RejectChanges;

  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.IComNativeDescriptorHandler')]
  DNIComNativeDescriptorHandler = interface(DDN.mscorlib.DNObject)
  ['{BF1E7984-3F4D-388B-8837-2B6D73D9D66A}']
  { methods } 

    function GetAttributes(component: DDN.mscorlib.DNObject): DNAttributeCollection;
    function GetClassName(component: DDN.mscorlib.DNObject): string;
    function GetConverter(component: DDN.mscorlib.DNObject): DNTypeConverter;
    function GetDefaultEvent(component: DDN.mscorlib.DNObject): DNEventDescriptor;
    function GetDefaultProperty(component: DDN.mscorlib.DNObject): DNPropertyDescriptor;
    function GetEditor(component: DDN.mscorlib.DNObject; baseEditorType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function GetName(component: DDN.mscorlib.DNObject): string;
    function GetEvents(component: DDN.mscorlib.DNObject): DNEventDescriptorCollection; overload;
    function GetEvents(component: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNEventDescriptorCollection; overload;
    function GetProperties(component: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection;
    function GetPropertyValue(component: DDN.mscorlib.DNObject; propertyName: string; out success: Boolean): DDN.mscorlib.DNObject; overload;
    function GetPropertyValue(component: DDN.mscorlib.DNObject; &dispid: Int32; out success: Boolean): DDN.mscorlib.DNObject; overload;

  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.ICustomTypeDescriptor')]
  DNICustomTypeDescriptor = interface(DDN.mscorlib.DNObject)
  ['{463BF9AA-D192-387E-80C6-6D659869DF97}']
  { methods } 

    function GetAttributes: DNAttributeCollection;
    function GetClassName: string;
    function GetComponentName: string;
    function GetConverter: DNTypeConverter;
    function GetDefaultEvent: DNEventDescriptor;
    function GetDefaultProperty: DNPropertyDescriptor;
    function GetEditor(editorBaseType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function GetEvents: DNEventDescriptorCollection; overload;
    function GetEvents(attributes: TArray<DDN.mscorlib.DNAttribute>): DNEventDescriptorCollection; overload;
    function GetProperties: DNPropertyDescriptorCollection; overload;
    function GetProperties(attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertyOwner(pd: DNPropertyDescriptor): DDN.mscorlib.DNObject;

  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.IDataErrorInfo')]
  DNIDataErrorInfo = interface(DDN.mscorlib.DNObject)
  ['{627FDADB-DE23-36F7-B8CE-A78E0F9DE86C}']
  { getters & setters } 

    function get_Item(columnName: string): string;
    function get_Error: string;

  { propertys } 

    property Item[columnName: string]: string read get_Item; default;
    property Error: string read get_Error;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.IEditableObject')]
  DNIEditableObject = interface(DDN.mscorlib.DNObject)
  ['{C12F480B-D724-34BC-A4E5-E4A94D639B39}']
  { methods } 

    procedure BeginEdit;
    procedure EndEdit;
    procedure CancelEdit;

  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.IExtenderProvider')]
  DNIExtenderProvider = interface(DDN.mscorlib.DNObject)
  ['{080EB369-A85A-302F-8A2A-8A9584DB1582}']
  { methods } 

    function CanExtend(extendee: DDN.mscorlib.DNObject): Boolean;

  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.IIntellisenseBuilder')]
  DNIIntellisenseBuilder = interface(DDN.mscorlib.DNObject)
  ['{880118AA-F3CA-3603-A7BE-85AC3F023137}']
  { getters & setters } 

    function get_Name: string;

  { methods } 

    function Show(language: string; value: string; out newValue: string): Boolean;

  { propertys } 

    property Name: string read get_Name;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.IListSource')]
  DNIListSource = interface(DDN.mscorlib.DNObject)
  ['{1DF397F0-B723-36DD-A0D6-5DE75B427BE6}']
  { getters & setters } 

    function get_ContainsListCollection: Boolean;

  { methods } 

    function GetList: DDN.mscorlib.DNIList;

  { propertys } 

    property ContainsListCollection: Boolean read get_ContainsListCollection;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.INotifyDataErrorInfo')]
  DNINotifyDataErrorInfo = interface(DDN.mscorlib.DNObject)
  ['{93FD8F7C-CC87-33E4-9C0D-6802CEA49FA1}']
  { getters & setters } 

    function get_HasErrors: Boolean;

  { events } 

    procedure add_ErrorsChanged(value: DDN.mscorlib.DNEventHandler<DNDataErrorsChangedEventArgs>);
    procedure remove_ErrorsChanged(value: DDN.mscorlib.DNEventHandler<DNDataErrorsChangedEventArgs>);

  { methods } 

    function GetErrors(propertyName: string): DDN.mscorlib.DNIEnumerable;

  { propertys } 

    property HasErrors: Boolean read get_HasErrors;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.INotifyPropertyChanged')]
  DNINotifyPropertyChanged = interface(DDN.mscorlib.DNObject)
  ['{C1E4E159-8825-3659-BAB8-17F67BE9E7EE}']
  { events } 

    procedure add_PropertyChanged(value: DNPropertyChangedEventHandler);
    procedure remove_PropertyChanged(value: DNPropertyChangedEventHandler);

  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.INotifyPropertyChanging')]
  DNINotifyPropertyChanging = interface(DDN.mscorlib.DNObject)
  ['{A5A88A27-3028-3A2A-B8FB-F5E0900FDB20}']
  { events } 

    procedure add_PropertyChanging(value: DNPropertyChangingEventHandler);
    procedure remove_PropertyChanging(value: DNPropertyChangingEventHandler);

  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.IRaiseItemChangedEvents')]
  DNIRaiseItemChangedEvents = interface(DDN.mscorlib.DNObject)
  ['{F693B786-40E6-314B-B04E-8C8F89A21AAE}']
  { getters & setters } 

    function get_RaisesItemChangedEvents: Boolean;

  { propertys } 

    property RaisesItemChangedEvents: Boolean read get_RaisesItemChangedEvents;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.ISupportInitialize')]
  DNISupportInitialize = interface(DDN.mscorlib.DNObject)
  ['{CF793A55-B9DD-30C2-A484-360AF143C228}']
  { methods } 

    procedure BeginInit;
    procedure EndInit;

  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.ISupportInitializeNotification')]
  DNISupportInitializeNotification = interface(DNISupportInitialize)
  ['{3836DFC9-C088-33FE-B2D0-F2F0FB74143C}']
  { getters & setters } 

    function get_IsInitialized: Boolean;

  { events } 

    procedure add_Initialized(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Initialized(value: DDN.mscorlib.DNEventHandler);

  { propertys } 

    property IsInitialized: Boolean read get_IsInitialized;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.ISynchronizeInvoke')]
  DNISynchronizeInvoke = interface(DDN.mscorlib.DNObject)
  ['{1CC69C3D-AFDD-3ABA-9AF1-87C5681BA5ED}']
  { getters & setters } 

    function get_InvokeRequired: Boolean;

  { methods } 

    function BeginInvoke(method: DDN.mscorlib.DNDelegate; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNIAsyncResult;
    function EndInvoke(result: DDN.mscorlib.DNIAsyncResult): DDN.mscorlib.DNObject;
    function Invoke(method: DDN.mscorlib.DNDelegate; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;

  { propertys } 

    property InvokeRequired: Boolean read get_InvokeRequired;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.ITypedList')]
  DNITypedList = interface(DDN.mscorlib.DNObject)
  ['{BFC9720D-0C61-3BFF-B4EF-20A714D15544}']
  { methods } 

    function GetListName(listAccessors: TArray<DNPropertyDescriptor>): string;
    function GetItemProperties(listAccessors: TArray<DNPropertyDescriptor>): DNPropertyDescriptorCollection;

  end;

  //-------------namespace: System.Diagnostics----------------
  [DNTypeName('System.Diagnostics.ICollectData')]
  DNICollectData = interface(DDN.mscorlib.DNObject)
  ['{73386977-D6FD-11D2-BED5-00C04F79E3AE}']
  { methods } 

    procedure CollectData(id: Int32; valueName: IntPtr; data: IntPtr; totalBytes: Int32; out res: IntPtr);
    procedure CloseData;

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IDesigner')]
  DNIDesigner = interface(DDN.mscorlib.DNIDisposable)
  ['{6EEF3D0D-305A-3DF4-9830-8C2B40E1C4BF}']
  { getters & setters } 

    function get_Component: DNIComponent;
    function get_Verbs: DNDesignerVerbCollection;

  { methods } 

    procedure DoDefaultAction;
    procedure Initialize(component: DNIComponent);

  { propertys } 

    property Component: DNIComponent read get_Component;
    property Verbs: DNDesignerVerbCollection read get_Verbs;
  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IRootDesigner')]
  DNIRootDesigner = interface(DNIDesigner)
  ['{2CC5E562-6C14-34A6-9D0B-E6FF949AE8FB}']
  { getters & setters } 

    function get_SupportedTechnologies: TArray<DNViewTechnology>;

  { methods } 

    function GetView(technology: DNViewTechnology): DDN.mscorlib.DNObject;

  { propertys } 

    property SupportedTechnologies: TArray<DNViewTechnology> read get_SupportedTechnologies;
  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.ITreeDesigner')]
  DNITreeDesigner = interface(DNIDesigner)
  ['{99122D47-BCB2-3ACB-9022-471C213EB5D7}']
  { getters & setters } 

    function get_Children: DDN.mscorlib.DNICollection;
    function get_Parent: DNIDesigner;

  { propertys } 

    property Children: DDN.mscorlib.DNICollection read get_Children;
    property Parent: DNIDesigner read get_Parent;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.IComponent')]
  DNIComponent = interface(DDN.mscorlib.DNIDisposable)
  ['{B86E59F2-F1E2-389D-B5F1-C55307C8106E}']
  { getters & setters } 

    function get_Site: DNISite;
    procedure set_Site(value: DNISite);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { propertys } 

    property Site: DNISite read get_Site write set_Site;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.IContainer')]
  DNIContainer = interface(DDN.mscorlib.DNIDisposable)
  ['{61D9C50C-4AAD-3539-AF82-4F36C19D77C8}']
  { getters & setters } 

    function get_Components: DNComponentCollection;

  { methods } 

    procedure Add(component: DNIComponent); overload;
    procedure Add(component: DNIComponent; name: string); overload;
    procedure Remove(component: DNIComponent);

  { propertys } 

    property Components: DNComponentCollection read get_Components;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.INestedContainer')]
  DNINestedContainer = interface(DNIContainer)
  ['{2948093A-1AD8-3297-BBF2-E74ABA7D09A4}']
  { getters & setters } 

    function get_Owner: DNIComponent;

  { propertys } 

    property Owner: DNIComponent read get_Owner;
  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IServiceContainer')]
  DNIServiceContainer = interface(DDN.mscorlib.DNIServiceProvider)
  ['{6BA96B42-7FDD-3223-BF52-7FE677B92815}']
  { methods } 

    procedure AddService(serviceType: DDN.mscorlib.DNType; serviceInstance: DDN.mscorlib.DNObject); overload;
    procedure AddService(serviceType: DDN.mscorlib.DNType; serviceInstance: DDN.mscorlib.DNObject; promote: Boolean); overload;
    procedure AddService(serviceType: DDN.mscorlib.DNType; callback: DNServiceCreatorCallback); overload;
    procedure AddService(serviceType: DDN.mscorlib.DNType; callback: DNServiceCreatorCallback; promote: Boolean); overload;
    procedure RemoveService(serviceType: DDN.mscorlib.DNType); overload;
    procedure RemoveService(serviceType: DDN.mscorlib.DNType; promote: Boolean); overload;

  end;

  //-------------namespace: System.ComponentModel.Design----------------
  [DNTypeName('System.ComponentModel.Design.IDesignerHost')]
  DNIDesignerHost = interface(DNIServiceContainer)
  ['{EEC98CD8-EF5B-3B60-82C9-86F616F6BB20}']
  { getters & setters } 

    function get_Loading: Boolean;
    function get_InTransaction: Boolean;
    function get_Container: DNIContainer;
    function get_RootComponent: DNIComponent;
    function get_RootComponentClassName: string;
    function get_TransactionDescription: string;

  { events } 

    procedure add_Activated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Activated(value: DDN.mscorlib.DNEventHandler);
    procedure add_Deactivated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Deactivated(value: DDN.mscorlib.DNEventHandler);
    procedure add_LoadComplete(value: DDN.mscorlib.DNEventHandler);
    procedure remove_LoadComplete(value: DDN.mscorlib.DNEventHandler);
    procedure add_TransactionClosed(value: DNDesignerTransactionCloseEventHandler);
    procedure remove_TransactionClosed(value: DNDesignerTransactionCloseEventHandler);
    procedure add_TransactionClosing(value: DNDesignerTransactionCloseEventHandler);
    procedure remove_TransactionClosing(value: DNDesignerTransactionCloseEventHandler);
    procedure add_TransactionOpened(value: DDN.mscorlib.DNEventHandler);
    procedure remove_TransactionOpened(value: DDN.mscorlib.DNEventHandler);
    procedure add_TransactionOpening(value: DDN.mscorlib.DNEventHandler);
    procedure remove_TransactionOpening(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetDesigner(component: DNIComponent): DNIDesigner;
    procedure Activate;
    function CreateComponent(componentClass: DDN.mscorlib.DNType): DNIComponent; overload;
    function CreateComponent(componentClass: DDN.mscorlib.DNType; name: string): DNIComponent; overload;
    function CreateTransaction: DNDesignerTransaction; overload;
    function CreateTransaction(description: string): DNDesignerTransaction; overload;
    procedure DestroyComponent(component: DNIComponent);
    function GetType(typeName: string): DDN.mscorlib.DNType;

  { propertys } 

    property Loading: Boolean read get_Loading;
    property InTransaction: Boolean read get_InTransaction;
    property Container: DNIContainer read get_Container;
    property RootComponent: DNIComponent read get_RootComponent;
    property RootComponentClassName: string read get_RootComponentClassName;
    property TransactionDescription: string read get_TransactionDescription;
  end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  [DNTypeName('System.ComponentModel.Design.Serialization.IDesignerLoaderHost')]
  DNIDesignerLoaderHost = interface(DNIDesignerHost)
  ['{74425452-E35A-3727-9E5A-19AAF3803003}']
  { methods } 

    procedure EndLoad(baseClassName: string; successful: Boolean; errorCollection: DDN.mscorlib.DNICollection);
    procedure Reload;

  end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  [DNTypeName('System.ComponentModel.Design.Serialization.IDesignerLoaderHost2')]
  DNIDesignerLoaderHost2 = interface(DNIDesignerLoaderHost)
  ['{5221DCDD-D5F9-3482-85FF-187C6DC363D3}']
  { getters & setters } 

    function get_IgnoreErrorsDuringReload: Boolean;
    procedure set_IgnoreErrorsDuringReload(value: Boolean);
    function get_CanReloadWithErrors: Boolean;
    procedure set_CanReloadWithErrors(value: Boolean);

  { propertys } 

    property IgnoreErrorsDuringReload: Boolean read get_IgnoreErrorsDuringReload write set_IgnoreErrorsDuringReload;
    property CanReloadWithErrors: Boolean read get_CanReloadWithErrors write set_CanReloadWithErrors;
  end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  [DNTypeName('System.ComponentModel.Design.Serialization.IDesignerSerializationManager')]
  DNIDesignerSerializationManager = interface(DDN.mscorlib.DNIServiceProvider)
  ['{C1E3744E-A053-396F-B968-7F172D804C38}']
  { getters & setters } 

    function get_Context: DNContextStack;
    function get_Properties: DNPropertyDescriptorCollection;

  { events } 

    procedure add_ResolveName(value: DNResolveNameEventHandler);
    procedure remove_ResolveName(value: DNResolveNameEventHandler);
    procedure add_SerializationComplete(value: DDN.mscorlib.DNEventHandler);
    procedure remove_SerializationComplete(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure AddSerializationProvider(provider: DNIDesignerSerializationProvider);
    function CreateInstance(&type: DDN.mscorlib.DNType; arguments: DDN.mscorlib.DNICollection; name: string; addToContainer: Boolean): DDN.mscorlib.DNObject;
    function GetInstance(name: string): DDN.mscorlib.DNObject;
    function GetName(value: DDN.mscorlib.DNObject): string;
    function GetSerializer(objectType: DDN.mscorlib.DNType; serializerType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function GetType(typeName: string): DDN.mscorlib.DNType;
    procedure RemoveSerializationProvider(provider: DNIDesignerSerializationProvider);
    procedure ReportError(errorInformation: DDN.mscorlib.DNObject);
    procedure SetName(instance: DDN.mscorlib.DNObject; name: string);

  { propertys } 

    property Context: DNContextStack read get_Context;
    property Properties: DNPropertyDescriptorCollection read get_Properties;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.ISite')]
  DNISite = interface(DDN.mscorlib.DNIServiceProvider)
  ['{C4E1006A-9D98-3E96-A07E-921725135C28}']
  { getters & setters } 

    function get_Component: DNIComponent;
    function get_Container: DNIContainer;
    function get_DesignMode: Boolean;
    function get_Name: string;
    procedure set_Name(value: string);

  { propertys } 

    property Component: DNIComponent read get_Component;
    property Container: DNIContainer read get_Container;
    property DesignMode: Boolean read get_DesignMode;
    property Name: string read get_Name write set_Name;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.INestedSite')]
  DNINestedSite = interface(DNISite)
  ['{A1D1196F-ABFB-3350-BBAE-AA24E4C2E050}']
  { getters & setters } 

    function get_FullName: string;

  { propertys } 

    property FullName: string read get_FullName;
  end;

  //-------------namespace: System.ComponentModel----------------
  [DNTypeName('System.ComponentModel.ITypeDescriptorContext')]
  DNITypeDescriptorContext = interface(DDN.mscorlib.DNIServiceProvider)
  ['{5CBAE170-8759-3B8A-B919-E12FB86AD1F3}']
  { getters & setters } 

    function get_Container: DNIContainer;
    function get_Instance: DDN.mscorlib.DNObject;
    function get_PropertyDescriptor: DNPropertyDescriptor;

  { methods } 

    function OnComponentChanging: Boolean;
    procedure OnComponentChanged;

  { propertys } 

    property Container: DNIContainer read get_Container;
    property Instance: DDN.mscorlib.DNObject read get_Instance;
    property PropertyDescriptor: DNPropertyDescriptor read get_PropertyDescriptor;
  end;

  //-------------namespace: System.Net----------------
  [DNTypeName('System.Net.IAuthenticationModule')]
  DNIAuthenticationModule = interface(DDN.mscorlib.DNObject)
  ['{F9EA8965-6040-3595-998B-72D4EE883C3F}']
  { getters & setters } 

    function get_CanPreAuthenticate: Boolean;
    function get_AuthenticationType: string;

  { methods } 

    function Authenticate(challenge: string; request: DNWebRequest; credentials: DNICredentials): DNAuthorization;
    function PreAuthenticate(request: DNWebRequest; credentials: DNICredentials): DNAuthorization;

  { propertys } 

    property CanPreAuthenticate: Boolean read get_CanPreAuthenticate;
    property AuthenticationType: string read get_AuthenticationType;
  end;

  //-------------namespace: System.Net----------------
  [DNTypeName('System.Net.ICertificatePolicy')]
  DNICertificatePolicy = interface(DDN.mscorlib.DNObject)
  ['{91A08729-FBC2-356F-8A65-DFC074454522}']
  { methods } 

    function CheckValidationResult(srvPoint: DNServicePoint; certificate: DDN.mscorlib.DNX509Certificate; request: DNWebRequest; certificateProblem: Int32): Boolean;

  end;

  //-------------namespace: System.Net----------------
  [DNTypeName('System.Net.ICredentialPolicy')]
  DNICredentialPolicy = interface(DDN.mscorlib.DNObject)
  ['{C31393E0-E2EC-37C3-BA6C-BB46E1D0E1FE}']
  { methods } 

    function ShouldSendCredential(challengeUri: DNUri; request: DNWebRequest; credential: DNNetworkCredential; authenticationModule: DNIAuthenticationModule): Boolean;

  end;

  //-------------namespace: System.Net----------------
  [DNTypeName('System.Net.ICredentials')]
  DNICredentials = interface(DDN.mscorlib.DNObject)
  ['{AA928FDF-0CBF-3845-8ECB-08339B2DC61D}']
  { methods } 

    function GetCredential(uri: DNUri; authType: string): DNNetworkCredential;

  end;

  //-------------namespace: System.Net----------------
  [DNTypeName('System.Net.ICredentialsByHost')]
  DNICredentialsByHost = interface(DDN.mscorlib.DNObject)
  ['{864BFF99-3AF0-38DA-B9FC-5E0DDF74E952}']
  { methods } 

    function GetCredential(host: string; port: Int32; authenticationType: string): DNNetworkCredential;

  end;

  //-------------namespace: System.Net----------------
  [DNTypeName('System.Net.IWebProxy')]
  DNIWebProxy = interface(DDN.mscorlib.DNObject)
  ['{26EE9E09-527D-3AB2-B8F2-6C0425580210}']
  { getters & setters } 

    function get_Credentials: DNICredentials;
    procedure set_Credentials(value: DNICredentials);

  { methods } 

    function GetProxy(destination: DNUri): DNUri;
    function IsBypassed(host: DNUri): Boolean;

  { propertys } 

    property Credentials: DNICredentials read get_Credentials write set_Credentials;
  end;

  //-------------namespace: System.Net----------------
  [DNTypeName('System.Net.IWebProxyScript')]
  DNIWebProxyScript = interface(DDN.mscorlib.DNObject)
  ['{C5DA1D34-2FE3-3B8B-A4B9-E2FA4B58AFFF}']
  { methods } 

    function Load(scriptLocation: DNUri; script: string; helperType: DDN.mscorlib.DNType): Boolean;
    function Run(url: string; host: string): string;
    procedure Close;

  end;

  //-------------namespace: System.Net----------------
  [DNTypeName('System.Net.IWebRequestCreate')]
  DNIWebRequestCreate = interface(DDN.mscorlib.DNObject)
  ['{9801F161-166F-3532-85DF-DB6C310570BE}']
  { methods } 

    function Create(uri: DNUri): DNWebRequest;

  end;

  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.ICustomTypeProvider')]
  DNICustomTypeProvider = interface(DDN.mscorlib.DNObject)
  ['{DD5FF3DC-D82F-3CD4-A9D3-C08E43FE34DC}']
  { methods } 

    function GetCustomType: DDN.mscorlib.DNType;

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IAdviseSink')]
  DNIAdviseSink = interface(DDN.mscorlib.DNObject)
  ['{0000010F-0000-0000-C000-000000000046}']
  { methods } 

    procedure OnDataChange(out format: DNFORMATETC; out stgmedium: DNSTGMEDIUM);
    procedure OnViewChange(aspect: Int32; index: Int32);
    procedure OnRename(moniker: DDN.mscorlib.DNIMoniker);
    procedure OnSave;
    procedure OnClose;

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IDataObject')]
  DNIDataObject = interface(DDN.mscorlib.DNObject)
  ['{0000010E-0000-0000-C000-000000000046}']
  { methods } 

    function QueryGetData(out format: DNFORMATETC): Int32;
    procedure GetData(out format: DNFORMATETC; out medium: DNSTGMEDIUM);
    procedure GetDataHere(out format: DNFORMATETC; out medium: DNSTGMEDIUM);
    function GetCanonicalFormatEtc(out formatIn: DNFORMATETC; out formatOut: DNFORMATETC): Int32;
    procedure SetData(out formatIn: DNFORMATETC; out medium: DNSTGMEDIUM; release: Boolean);
    function EnumFormatEtc(direction: DNDATADIR): DNIEnumFORMATETC;
    function DAdvise(out pFormatetc: DNFORMATETC; advf: DNADVF; adviseSink: DNIAdviseSink; out connection: Int32): Int32;
    procedure DUnadvise(connection: Int32);
    function EnumDAdvise(out enumAdvise: DNIEnumSTATDATA): Int32;

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IEnumFORMATETC')]
  DNIEnumFORMATETC = interface(DDN.mscorlib.DNObject)
  ['{00000103-0000-0000-C000-000000000046}']
  { methods } 

    function Next(celt: Int32; rgelt: TArray<DNFORMATETC>; pceltFetched: TArray<Int32>): Int32;
    function Skip(celt: Int32): Int32;
    function Reset: Int32;
    procedure Clone(out newEnum: DNIEnumFORMATETC);

  end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  [DNTypeName('System.Runtime.InteropServices.ComTypes.IEnumSTATDATA')]
  DNIEnumSTATDATA = interface(DDN.mscorlib.DNObject)
  ['{00000103-0000-0000-C000-000000000046}']
  { methods } 

    function Next(celt: Int32; rgelt: TArray<DNSTATDATA>; pceltFetched: TArray<Int32>): Int32;
    function Skip(celt: Int32): Int32;
    function Reset: Int32;
    procedure Clone(out newEnum: DNIEnumSTATDATA);

  end;

  //-------------namespace: System.Windows.Input----------------
  [DNTypeName('System.Windows.Input.ICommand')]
  DNICommand = interface(DDN.mscorlib.DNObject)
  ['{87196B24-1A72-31F7-8F0B-0E068BC21B4C}']
  { events } 

    procedure add_CanExecuteChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CanExecuteChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CanExecute(parameter: DDN.mscorlib.DNObject): Boolean;
    procedure Execute(parameter: DDN.mscorlib.DNObject);

  end;

  //-------------namespace: Microsoft.Win32----------------
  DNIntranetZoneCredentialPolicyClass = interface(DNObjectClass)
  ['{8C7A8D2F-6D58-501C-888F-BCB3ECAB7D5F}']
  { constructors } 

    {class} function init: DNIntranetZoneCredentialPolicy;

  end;

  [DNTypeName('Microsoft.Win32.IntranetZoneCredentialPolicy')]
  DNIntranetZoneCredentialPolicy = interface(DNICredentialPolicy)
  ['{6E2A2C51-D81A-34B9-9EF4-557FE4E5A90B}']
  { methods } 

    function ShouldSendCredential(challengeUri: DNUri; request: DNWebRequest; credential: DNNetworkCredential; authModule: DNIAuthenticationModule): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNIntranetZoneCredentialPolicy = class(TDNGenericImport<DNIntranetZoneCredentialPolicyClass, DNIntranetZoneCredentialPolicy>) end;

  //-------------namespace: Microsoft.Win32----------------
  DNSystemEventsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{24BA6ED5-7871-528A-94BF-54672EBAFF28}']
  { static methods } 

    {class} procedure KillTimer(timerId: IntPtr);
    {class} function CreateTimer(interval: Int32): IntPtr;
    {class} procedure InvokeOnEventsThread(method: DDN.mscorlib.DNDelegate);

  end;

  [DNTypeName('Microsoft.Win32.SystemEvents')]
  DNSystemEvents = interface(DDN.mscorlib.DNObject)
  ['{D4DC9D1E-4E6D-3DAF-AB89-51D5C19E4010}']
  { events } 

    {class} procedure add_DisplaySettingsChanging(value: DDN.mscorlib.DNEventHandler);
    {class} procedure remove_DisplaySettingsChanging(value: DDN.mscorlib.DNEventHandler);
    {class} procedure add_DisplaySettingsChanged(value: DDN.mscorlib.DNEventHandler);
    {class} procedure remove_DisplaySettingsChanged(value: DDN.mscorlib.DNEventHandler);
    {class} procedure add_EventsThreadShutdown(value: DDN.mscorlib.DNEventHandler);
    {class} procedure remove_EventsThreadShutdown(value: DDN.mscorlib.DNEventHandler);
    {class} procedure add_InstalledFontsChanged(value: DDN.mscorlib.DNEventHandler);
    {class} procedure remove_InstalledFontsChanged(value: DDN.mscorlib.DNEventHandler);
    {class} procedure add_LowMemory(value: DDN.mscorlib.DNEventHandler);
    {class} procedure remove_LowMemory(value: DDN.mscorlib.DNEventHandler);
    {class} procedure add_PaletteChanged(value: DDN.mscorlib.DNEventHandler);
    {class} procedure remove_PaletteChanged(value: DDN.mscorlib.DNEventHandler);
    {class} procedure add_PowerModeChanged(value: DNPowerModeChangedEventHandler);
    {class} procedure remove_PowerModeChanged(value: DNPowerModeChangedEventHandler);
    {class} procedure add_SessionEnded(value: DNSessionEndedEventHandler);
    {class} procedure remove_SessionEnded(value: DNSessionEndedEventHandler);
    {class} procedure add_SessionEnding(value: DNSessionEndingEventHandler);
    {class} procedure remove_SessionEnding(value: DNSessionEndingEventHandler);
    {class} procedure add_SessionSwitch(value: DNSessionSwitchEventHandler);
    {class} procedure remove_SessionSwitch(value: DNSessionSwitchEventHandler);
    {class} procedure add_TimeChanged(value: DDN.mscorlib.DNEventHandler);
    {class} procedure remove_TimeChanged(value: DDN.mscorlib.DNEventHandler);
    {class} procedure add_TimerElapsed(value: DNTimerElapsedEventHandler);
    {class} procedure remove_TimerElapsed(value: DNTimerElapsedEventHandler);
    {class} procedure add_UserPreferenceChanged(value: DNUserPreferenceChangedEventHandler);
    {class} procedure remove_UserPreferenceChanged(value: DNUserPreferenceChangedEventHandler);
    {class} procedure add_UserPreferenceChanging(value: DNUserPreferenceChangingEventHandler);
    {class} procedure remove_UserPreferenceChanging(value: DNUserPreferenceChangingEventHandler);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSystemEvents = class(TDNGenericImport<DNSystemEventsClass, DNSystemEvents>) end;

  //-------------namespace: System.CodeDom.Compiler----------------
  DNGeneratedCodeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{ED872513-1808-5E36-A9CA-3E0AC74D48D2}']
  { constructors } 

    {class} function init(tool: string; version: string): DNGeneratedCodeAttribute;

  end;

  [DNTypeName('System.CodeDom.Compiler.GeneratedCodeAttribute')]
  DNGeneratedCodeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{4ED5F1E8-5F99-3F4C-A042-0EE39FB02BBF}']
  { getters & setters } 

    function get_Tool: string;
    function get_Version: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Tool: string read get_Tool;
    property Version: string read get_Version;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNGeneratedCodeAttribute = class(TDNGenericImport<DNGeneratedCodeAttributeClass, DNGeneratedCodeAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNAmbientValueAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{68B2323A-604A-54E3-B6B0-19F63EF67728}']
  { constructors } 

    {class} function init(&type: DDN.mscorlib.DNType; value: string): DNAmbientValueAttribute; overload;
    {class} function init(value: Char): DNAmbientValueAttribute; overload;
    {class} function init(value: Byte): DNAmbientValueAttribute; overload;
    {class} function init(value: Int16): DNAmbientValueAttribute; overload;
    {class} function init(value: Int32): DNAmbientValueAttribute; overload;
    {class} function init(value: Int64): DNAmbientValueAttribute; overload;
    {class} function init(value: Single): DNAmbientValueAttribute; overload;
    {class} function init(value: Double): DNAmbientValueAttribute; overload;
    {class} function init(value: Boolean): DNAmbientValueAttribute; overload;
    {class} function init(value: string): DNAmbientValueAttribute; overload;
    {class} function init(value: DDN.mscorlib.DNObject): DNAmbientValueAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.AmbientValueAttribute')]
  DNAmbientValueAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{472C146F-97CB-3C81-B832-22137321745B}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: DDN.mscorlib.DNObject read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNAmbientValueAttribute = class(TDNGenericImport<DNAmbientValueAttributeClass, DNAmbientValueAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNAttributeProviderAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{32A7A865-B941-5877-9F48-24123309E327}']
  { constructors } 

    {class} function init(typeName: string): DNAttributeProviderAttribute; overload;
    {class} function init(typeName: string; propertyName: string): DNAttributeProviderAttribute; overload;
    {class} function init(&type: DDN.mscorlib.DNType): DNAttributeProviderAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.AttributeProviderAttribute')]
  DNAttributeProviderAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{96D6567E-AAA6-34A0-A5B9-44D7AE7673A1}']
  { getters & setters } 

    function get_TypeName: string;
    function get_PropertyName: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeName: string read get_TypeName;
    property PropertyName: string read get_PropertyName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNAttributeProviderAttribute = class(TDNGenericImport<DNAttributeProviderAttributeClass, DNAttributeProviderAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNBindableAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{BEA49855-D1E2-5C97-93C6-12D1687A6FBA}']
  { constructors } 

    {class} function init(bindable: Boolean): DNBindableAttribute; overload;
    {class} function init(bindable: Boolean; direction: DNBindingDirection): DNBindableAttribute; overload;
    {class} function init(flags: DNBindableSupport): DNBindableAttribute; overload;
    {class} function init(flags: DNBindableSupport; direction: DNBindingDirection): DNBindableAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Yes: DNBindableAttribute;
   function __fakeFieldGet_No: DNBindableAttribute;
   function __fakeFieldGet_Default: DNBindableAttribute;

  { static fields } 

    {class} property Yes: DNBindableAttribute read __fakeFieldGet_Yes;
    {class} property No: DNBindableAttribute read __fakeFieldGet_No;
    {class} property &Default: DNBindableAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.BindableAttribute')]
  DNBindableAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{3595B8D7-C1E2-37C3-B14E-96ACFDD29BC5}']
  { getters & setters } 

    function get_Bindable: Boolean;
    function get_Direction: DNBindingDirection;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Bindable: Boolean read get_Bindable;
    property Direction: DNBindingDirection read get_Direction;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNBindableAttribute = class(TDNGenericImport<DNBindableAttributeClass, DNBindableAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNBrowsableAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{1DA7FEC7-6536-5E56-8381-91F6E9CAC9F9}']
  { constructors } 

    {class} function init(browsable: Boolean): DNBrowsableAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Yes: DNBrowsableAttribute;
   function __fakeFieldGet_No: DNBrowsableAttribute;
   function __fakeFieldGet_Default: DNBrowsableAttribute;

  { static fields } 

    {class} property Yes: DNBrowsableAttribute read __fakeFieldGet_Yes;
    {class} property No: DNBrowsableAttribute read __fakeFieldGet_No;
    {class} property &Default: DNBrowsableAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.BrowsableAttribute')]
  DNBrowsableAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{349AACAF-AE81-3E86-8D0E-DBA25BE0C8ED}']
  { getters & setters } 

    function get_Browsable: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Browsable: Boolean read get_Browsable;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNBrowsableAttribute = class(TDNGenericImport<DNBrowsableAttributeClass, DNBrowsableAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNCategoryAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{C9CBFC69-DEAB-5506-B480-17726D15412D}']
  { static getter & setter } 

    {class} function get_Action: DNCategoryAttribute;
    {class} function get_Appearance: DNCategoryAttribute;
    {class} function get_Asynchronous: DNCategoryAttribute;
    {class} function get_Behavior: DNCategoryAttribute;
    {class} function get_Data: DNCategoryAttribute;
    {class} function get_Default: DNCategoryAttribute;
    {class} function get_Design: DNCategoryAttribute;
    {class} function get_DragDrop: DNCategoryAttribute;
    {class} function get_Focus: DNCategoryAttribute;
    {class} function get_Format: DNCategoryAttribute;
    {class} function get_Key: DNCategoryAttribute;
    {class} function get_Layout: DNCategoryAttribute;
    {class} function get_Mouse: DNCategoryAttribute;
    {class} function get_WindowStyle: DNCategoryAttribute;

  { constructors } 

    {class} function init: DNCategoryAttribute; overload;
    {class} function init(category: string): DNCategoryAttribute; overload;

  { static propertys } 

    {class} property Action: DNCategoryAttribute read get_Action;
    {class} property Appearance: DNCategoryAttribute read get_Appearance;
    {class} property Asynchronous: DNCategoryAttribute read get_Asynchronous;
    {class} property Behavior: DNCategoryAttribute read get_Behavior;
    {class} property Data: DNCategoryAttribute read get_Data;
    {class} property &Default: DNCategoryAttribute read get_Default;
    {class} property Design: DNCategoryAttribute read get_Design;
    {class} property DragDrop: DNCategoryAttribute read get_DragDrop;
    {class} property Focus: DNCategoryAttribute read get_Focus;
    {class} property Format: DNCategoryAttribute read get_Format;
    {class} property Key: DNCategoryAttribute read get_Key;
    {class} property Layout: DNCategoryAttribute read get_Layout;
    {class} property Mouse: DNCategoryAttribute read get_Mouse;
    {class} property WindowStyle: DNCategoryAttribute read get_WindowStyle;
  end;

  [DNTypeName('System.ComponentModel.CategoryAttribute')]
  DNCategoryAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{01503A58-C3FD-34AB-B19B-41F9E31A70EF}']
  { getters & setters } 

    function get_Category: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Category: string read get_Category;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNCategoryAttribute = class(TDNGenericImport<DNCategoryAttributeClass, DNCategoryAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNComplexBindingPropertiesAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{7B53D206-9EB7-5869-B2DF-1BE1E0D6F2B4}']
  { constructors } 

    {class} function init: DNComplexBindingPropertiesAttribute; overload;
    {class} function init(dataSource: string): DNComplexBindingPropertiesAttribute; overload;
    {class} function init(dataSource: string; dataMember: string): DNComplexBindingPropertiesAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNComplexBindingPropertiesAttribute;

  { static fields } 

    {class} property &Default: DNComplexBindingPropertiesAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.ComplexBindingPropertiesAttribute')]
  DNComplexBindingPropertiesAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{5F41F277-AE73-395B-967D-29B8071166A1}']
  { getters & setters } 

    function get_DataSource: string;
    function get_DataMember: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataSource: string read get_DataSource;
    property DataMember: string read get_DataMember;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNComplexBindingPropertiesAttribute = class(TDNGenericImport<DNComplexBindingPropertiesAttributeClass, DNComplexBindingPropertiesAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDataObjectAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{F7B08B4E-8723-5ABE-AB20-E052F864C447}']
  { constructors } 

    {class} function init: DNDataObjectAttribute; overload;
    {class} function init(isDataObject: Boolean): DNDataObjectAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_DataObject: DNDataObjectAttribute;
   function __fakeFieldGet_NonDataObject: DNDataObjectAttribute;
   function __fakeFieldGet_Default: DNDataObjectAttribute;

  { static fields } 

    {class} property DataObject: DNDataObjectAttribute read __fakeFieldGet_DataObject;
    {class} property NonDataObject: DNDataObjectAttribute read __fakeFieldGet_NonDataObject;
    {class} property &Default: DNDataObjectAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.DataObjectAttribute')]
  DNDataObjectAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{2FE26D6F-517C-3FD7-A52B-A2C37930F38E}']
  { getters & setters } 

    function get_IsDataObject: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsDataObject: Boolean read get_IsDataObject;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDataObjectAttribute = class(TDNGenericImport<DNDataObjectAttributeClass, DNDataObjectAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDataObjectFieldAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{FA5E65E9-ADDA-56B5-A0C8-48FEE7FBF66A}']
  { constructors } 

    {class} function init(primaryKey: Boolean): DNDataObjectFieldAttribute; overload;
    {class} function init(primaryKey: Boolean; isIdentity: Boolean): DNDataObjectFieldAttribute; overload;
    {class} function init(primaryKey: Boolean; isIdentity: Boolean; isNullable: Boolean): DNDataObjectFieldAttribute; overload;
    {class} function init(primaryKey: Boolean; isIdentity: Boolean; isNullable: Boolean; length: Int32): DNDataObjectFieldAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataObjectFieldAttribute')]
  DNDataObjectFieldAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{44F685C9-9BAD-31A5-B764-9A688CD644CA}']
  { getters & setters } 

    function get_IsIdentity: Boolean;
    function get_IsNullable: Boolean;
    function get_Length: Int32;
    function get_PrimaryKey: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsIdentity: Boolean read get_IsIdentity;
    property IsNullable: Boolean read get_IsNullable;
    property Length: Int32 read get_Length;
    property PrimaryKey: Boolean read get_PrimaryKey;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDataObjectFieldAttribute = class(TDNGenericImport<DNDataObjectFieldAttributeClass, DNDataObjectFieldAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDataObjectMethodAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{A9BB422F-0551-59EF-A66C-E6EF937E0B98}']
  { constructors } 

    {class} function init(methodType: DNDataObjectMethodType): DNDataObjectMethodAttribute; overload;
    {class} function init(methodType: DNDataObjectMethodType; isDefault: Boolean): DNDataObjectMethodAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataObjectMethodAttribute')]
  DNDataObjectMethodAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{96B556E2-1330-3CFE-8E33-8C9518C149AD}']
  { getters & setters } 

    function get_IsDefault: Boolean;
    function get_MethodType: DNDataObjectMethodType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsDefault: Boolean read get_IsDefault;
    property MethodType: DNDataObjectMethodType read get_MethodType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDataObjectMethodAttribute = class(TDNGenericImport<DNDataObjectMethodAttributeClass, DNDataObjectMethodAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDefaultBindingPropertyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{66A21F6F-4CE5-5D97-8DDD-FAEC6BD8290C}']
  { constructors } 

    {class} function init: DNDefaultBindingPropertyAttribute; overload;
    {class} function init(name: string): DNDefaultBindingPropertyAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNDefaultBindingPropertyAttribute;

  { static fields } 

    {class} property &Default: DNDefaultBindingPropertyAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.DefaultBindingPropertyAttribute')]
  DNDefaultBindingPropertyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{F0F91E96-E35B-3A83-A198-C33E95C4CB13}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDefaultBindingPropertyAttribute = class(TDNGenericImport<DNDefaultBindingPropertyAttributeClass, DNDefaultBindingPropertyAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDefaultEventAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{B52B40BF-56E8-574B-8743-FC7B8723BB75}']
  { constructors } 

    {class} function init(name: string): DNDefaultEventAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNDefaultEventAttribute;

  { static fields } 

    {class} property &Default: DNDefaultEventAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.DefaultEventAttribute')]
  DNDefaultEventAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{E8BE8206-8D04-3EAD-A7A0-1579FFEDFC71}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDefaultEventAttribute = class(TDNGenericImport<DNDefaultEventAttributeClass, DNDefaultEventAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDefaultPropertyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{EFD1F4B1-2AE1-5870-9A4C-E785063C60C5}']
  { constructors } 

    {class} function init(name: string): DNDefaultPropertyAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNDefaultPropertyAttribute;

  { static fields } 

    {class} property &Default: DNDefaultPropertyAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.DefaultPropertyAttribute')]
  DNDefaultPropertyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{94B8637A-F7D1-31E3-B58A-BB7530D907F6}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDefaultPropertyAttribute = class(TDNGenericImport<DNDefaultPropertyAttributeClass, DNDefaultPropertyAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDefaultValueAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{DC2995DE-CC48-5711-9FFA-58E967DF68CC}']
  { constructors } 

    {class} function init(&type: DDN.mscorlib.DNType; value: string): DNDefaultValueAttribute; overload;
    {class} function init(value: Char): DNDefaultValueAttribute; overload;
    {class} function init(value: Byte): DNDefaultValueAttribute; overload;
    {class} function init(value: Int16): DNDefaultValueAttribute; overload;
    {class} function init(value: Int32): DNDefaultValueAttribute; overload;
    {class} function init(value: Int64): DNDefaultValueAttribute; overload;
    {class} function init(value: Single): DNDefaultValueAttribute; overload;
    {class} function init(value: Double): DNDefaultValueAttribute; overload;
    {class} function init(value: Boolean): DNDefaultValueAttribute; overload;
    {class} function init(value: string): DNDefaultValueAttribute; overload;
    {class} function init(value: DDN.mscorlib.DNObject): DNDefaultValueAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DefaultValueAttribute')]
  DNDefaultValueAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{F3DF5E0C-7B64-32FA-9D31-FA763496B93B}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: DDN.mscorlib.DNObject read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDefaultValueAttribute = class(TDNGenericImport<DNDefaultValueAttributeClass, DNDefaultValueAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDescriptionAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{BE05124F-E7DA-5C47-BD86-52736D1869F8}']
  { constructors } 

    {class} function init: DNDescriptionAttribute; overload;
    {class} function init(description: string): DNDescriptionAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNDescriptionAttribute;

  { static fields } 

    {class} property &Default: DNDescriptionAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.DescriptionAttribute')]
  DNDescriptionAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{5D6C6457-D751-3A1E-AC91-CEB8C59EA878}']
  { getters & setters } 

    function get_Description: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Description: string read get_Description;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDescriptionAttribute = class(TDNGenericImport<DNDescriptionAttributeClass, DNDescriptionAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNMonitoringDescriptionAttributeClass = interface(DNDescriptionAttributeClass)
  ['{57F40ABD-70CF-500D-92AD-5604BF9EEBFF}']
  { constructors } 

    {class} function init(description: string): DNMonitoringDescriptionAttribute;

  end;

  [DNTypeName('System.Diagnostics.MonitoringDescriptionAttribute')]
  DNMonitoringDescriptionAttribute = interface(DNDescriptionAttribute)
  ['{D5CB0730-1AC8-34D1-B264-94ABABCCCF20}']
  { getters & setters } 

    function get_Description: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Description: string read get_Description;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNMonitoringDescriptionAttribute = class(TDNGenericImport<DNMonitoringDescriptionAttributeClass, DNMonitoringDescriptionAttribute>) end;

  //-------------namespace: System.IO----------------
  DNIODescriptionAttributeClass = interface(DNDescriptionAttributeClass)
  ['{73DC5E99-FF9F-523F-962F-45AC8E79A934}']
  { constructors } 

    {class} function init(description: string): DNIODescriptionAttribute;

  end;

  [DNTypeName('System.IO.IODescriptionAttribute')]
  DNIODescriptionAttribute = interface(DNDescriptionAttribute)
  ['{AEA65A61-5CCA-316D-8715-E2CEF73F4D0C}']
  { getters & setters } 

    function get_Description: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Description: string read get_Description;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNIODescriptionAttribute = class(TDNGenericImport<DNIODescriptionAttributeClass, DNIODescriptionAttribute>) end;

  //-------------namespace: System.Timers----------------
  DNTimersDescriptionAttributeClass = interface(DNDescriptionAttributeClass)
  ['{F7D09C22-71D3-590B-950D-0DC07888E634}']
  { constructors } 

    {class} function init(description: string): DNTimersDescriptionAttribute;

  end;

  [DNTypeName('System.Timers.TimersDescriptionAttribute')]
  DNTimersDescriptionAttribute = interface(DNDescriptionAttribute)
  ['{ED31606D-547D-3EB9-9B32-44D91BCB8414}']
  { getters & setters } 

    function get_Description: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Description: string read get_Description;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNTimersDescriptionAttribute = class(TDNGenericImport<DNTimersDescriptionAttributeClass, DNTimersDescriptionAttribute>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNHelpKeywordAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{63E4F4BC-7F35-57FC-95D5-26C122D744C0}']
  { constructors } 

    {class} function init: DNHelpKeywordAttribute; overload;
    {class} function init(keyword: string): DNHelpKeywordAttribute; overload;
    {class} function init(t: DDN.mscorlib.DNType): DNHelpKeywordAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNHelpKeywordAttribute;

  { static fields } 

    {class} property &Default: DNHelpKeywordAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.Design.HelpKeywordAttribute')]
  DNHelpKeywordAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{ED790356-FE86-38C0-B1E5-DC125647F47E}']
  { getters & setters } 

    function get_HelpKeyword: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HelpKeyword: string read get_HelpKeyword;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNHelpKeywordAttribute = class(TDNGenericImport<DNHelpKeywordAttributeClass, DNHelpKeywordAttribute>) end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  DNDefaultSerializationProviderAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{7080960C-FC8C-5F8C-9E38-E4F3E93D8E1B}']
  { constructors } 

    {class} function init(providerType: DDN.mscorlib.DNType): DNDefaultSerializationProviderAttribute; overload;
    {class} function init(providerTypeName: string): DNDefaultSerializationProviderAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute')]
  DNDefaultSerializationProviderAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{C0C67389-6B8F-39B3-9E7F-44245F9EC2D8}']
  { getters & setters } 

    function get_ProviderTypeName: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ProviderTypeName: string read get_ProviderTypeName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDefaultSerializationProviderAttribute = class(TDNGenericImport<DNDefaultSerializationProviderAttributeClass, DNDefaultSerializationProviderAttribute>) end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  DNDesignerSerializerAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{88223C64-5711-5E35-A27E-3C893C9D6287}']
  { constructors } 

    {class} function init(serializerType: DDN.mscorlib.DNType; baseSerializerType: DDN.mscorlib.DNType): DNDesignerSerializerAttribute; overload;
    {class} function init(serializerTypeName: string; baseSerializerType: DDN.mscorlib.DNType): DNDesignerSerializerAttribute; overload;
    {class} function init(serializerTypeName: string; baseSerializerTypeName: string): DNDesignerSerializerAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.Design.Serialization.DesignerSerializerAttribute')]
  DNDesignerSerializerAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{9EBC413A-B6BA-314F-9B42-96D9185B4531}']
  { getters & setters } 

    function get_SerializerTypeName: string;
    function get_SerializerBaseTypeName: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SerializerTypeName: string read get_SerializerTypeName;
    property SerializerBaseTypeName: string read get_SerializerBaseTypeName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDesignerSerializerAttribute = class(TDNGenericImport<DNDesignerSerializerAttributeClass, DNDesignerSerializerAttribute>) end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  DNRootDesignerSerializerAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{E6ADA40D-1E7E-541F-B487-8097DE2D0658}']
  { constructors } 

    {class} function init(serializerType: DDN.mscorlib.DNType; baseSerializerType: DDN.mscorlib.DNType; reloadable: Boolean): DNRootDesignerSerializerAttribute; overload;
    {class} function init(serializerTypeName: string; baseSerializerType: DDN.mscorlib.DNType; reloadable: Boolean): DNRootDesignerSerializerAttribute; overload;
    {class} function init(serializerTypeName: string; baseSerializerTypeName: string; reloadable: Boolean): DNRootDesignerSerializerAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute')]
  DNRootDesignerSerializerAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{0C810CD0-1597-38E3-8B2C-CA79CD486D26}']
  { getters & setters } 

    function get_Reloadable: Boolean;
    function get_SerializerTypeName: string;
    function get_SerializerBaseTypeName: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Reloadable: Boolean read get_Reloadable;
    property SerializerTypeName: string read get_SerializerTypeName;
    property SerializerBaseTypeName: string read get_SerializerBaseTypeName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNRootDesignerSerializerAttribute = class(TDNGenericImport<DNRootDesignerSerializerAttributeClass, DNRootDesignerSerializerAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDesignerAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{755BB553-5A94-5040-A7AD-61188459A78F}']
  { constructors } 

    {class} function init(designerTypeName: string): DNDesignerAttribute; overload;
    {class} function init(designerType: DDN.mscorlib.DNType): DNDesignerAttribute; overload;
    {class} function init(designerTypeName: string; designerBaseTypeName: string): DNDesignerAttribute; overload;
    {class} function init(designerTypeName: string; designerBaseType: DDN.mscorlib.DNType): DNDesignerAttribute; overload;
    {class} function init(designerType: DDN.mscorlib.DNType; designerBaseType: DDN.mscorlib.DNType): DNDesignerAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DesignerAttribute')]
  DNDesignerAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{A2A1CFB6-904A-31A9-884D-C83BB3C73457}']
  { getters & setters } 

    function get_DesignerBaseTypeName: string;
    function get_DesignerTypeName: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DesignerBaseTypeName: string read get_DesignerBaseTypeName;
    property DesignerTypeName: string read get_DesignerTypeName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDesignerAttribute = class(TDNGenericImport<DNDesignerAttributeClass, DNDesignerAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDesignerCategoryAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{A9198D9E-E09C-500A-B6C5-0D1BCEC70F8B}']
  { constructors } 

    {class} function init: DNDesignerCategoryAttribute; overload;
    {class} function init(category: string): DNDesignerCategoryAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Component: DNDesignerCategoryAttribute;
   function __fakeFieldGet_Default: DNDesignerCategoryAttribute;
   function __fakeFieldGet_Form: DNDesignerCategoryAttribute;
   function __fakeFieldGet_Generic: DNDesignerCategoryAttribute;

  { static fields } 

    {class} property Component: DNDesignerCategoryAttribute read __fakeFieldGet_Component;
    {class} property &Default: DNDesignerCategoryAttribute read __fakeFieldGet_Default;
    {class} property Form: DNDesignerCategoryAttribute read __fakeFieldGet_Form;
    {class} property Generic: DNDesignerCategoryAttribute read __fakeFieldGet_Generic;

  end;

  [DNTypeName('System.ComponentModel.DesignerCategoryAttribute')]
  DNDesignerCategoryAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{45873FCA-7996-377D-9893-977FFC497BD6}']
  { getters & setters } 

    function get_Category: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Category: string read get_Category;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDesignerCategoryAttribute = class(TDNGenericImport<DNDesignerCategoryAttributeClass, DNDesignerCategoryAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDesignerSerializationVisibilityAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{56C3C7C8-988C-5680-AD54-06362BB49285}']
  { constructors } 

    {class} function init(visibility: DNDesignerSerializationVisibility): DNDesignerSerializationVisibilityAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Content: DNDesignerSerializationVisibilityAttribute;
   function __fakeFieldGet_Hidden: DNDesignerSerializationVisibilityAttribute;
   function __fakeFieldGet_Visible: DNDesignerSerializationVisibilityAttribute;
   function __fakeFieldGet_Default: DNDesignerSerializationVisibilityAttribute;

  { static fields } 

    {class} property Content: DNDesignerSerializationVisibilityAttribute read __fakeFieldGet_Content;
    {class} property Hidden: DNDesignerSerializationVisibilityAttribute read __fakeFieldGet_Hidden;
    {class} property Visible: DNDesignerSerializationVisibilityAttribute read __fakeFieldGet_Visible;
    {class} property &Default: DNDesignerSerializationVisibilityAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.DesignerSerializationVisibilityAttribute')]
  DNDesignerSerializationVisibilityAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{194033CE-F72B-323F-9502-64F2F4A19ACD}']
  { getters & setters } 

    function get_Visibility: DNDesignerSerializationVisibility;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Visibility: DNDesignerSerializationVisibility read get_Visibility;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDesignerSerializationVisibilityAttribute = class(TDNGenericImport<DNDesignerSerializationVisibilityAttributeClass, DNDesignerSerializationVisibilityAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDesignOnlyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{E8C93BBE-A5BA-5A3C-AD5A-0FF95A5EE9BC}']
  { constructors } 

    {class} function init(isDesignOnly: Boolean): DNDesignOnlyAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Yes: DNDesignOnlyAttribute;
   function __fakeFieldGet_No: DNDesignOnlyAttribute;
   function __fakeFieldGet_Default: DNDesignOnlyAttribute;

  { static fields } 

    {class} property Yes: DNDesignOnlyAttribute read __fakeFieldGet_Yes;
    {class} property No: DNDesignOnlyAttribute read __fakeFieldGet_No;
    {class} property &Default: DNDesignOnlyAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.DesignOnlyAttribute')]
  DNDesignOnlyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{338DFDE4-AEBE-321F-A19B-2B36736DA7A5}']
  { getters & setters } 

    function get_IsDesignOnly: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function IsDefaultAttribute: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsDesignOnly: Boolean read get_IsDesignOnly;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDesignOnlyAttribute = class(TDNGenericImport<DNDesignOnlyAttributeClass, DNDesignOnlyAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDesignTimeVisibleAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{617BD76E-BD1A-5CA7-BBBC-E3AE54C078E6}']
  { constructors } 

    {class} function init(visible: Boolean): DNDesignTimeVisibleAttribute; overload;
    {class} function init: DNDesignTimeVisibleAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Yes: DNDesignTimeVisibleAttribute;
   function __fakeFieldGet_No: DNDesignTimeVisibleAttribute;
   function __fakeFieldGet_Default: DNDesignTimeVisibleAttribute;

  { static fields } 

    {class} property Yes: DNDesignTimeVisibleAttribute read __fakeFieldGet_Yes;
    {class} property No: DNDesignTimeVisibleAttribute read __fakeFieldGet_No;
    {class} property &Default: DNDesignTimeVisibleAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.DesignTimeVisibleAttribute')]
  DNDesignTimeVisibleAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{B0FED1B4-ED66-3785-9C74-2EBD3EBE10FE}']
  { getters & setters } 

    function get_Visible: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Visible: Boolean read get_Visible;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDesignTimeVisibleAttribute = class(TDNGenericImport<DNDesignTimeVisibleAttributeClass, DNDesignTimeVisibleAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDisplayNameAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{7B3BDE1D-22C0-5C77-9C1D-43B78F688DC6}']
  { constructors } 

    {class} function init: DNDisplayNameAttribute; overload;
    {class} function init(displayName: string): DNDisplayNameAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNDisplayNameAttribute;

  { static fields } 

    {class} property &Default: DNDisplayNameAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.DisplayNameAttribute')]
  DNDisplayNameAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{F742EFA2-D4E5-39CD-9DC1-7E4C66F5E8AA}']
  { getters & setters } 

    function get_DisplayName: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DisplayName: string read get_DisplayName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDisplayNameAttribute = class(TDNGenericImport<DNDisplayNameAttributeClass, DNDisplayNameAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNEditorAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{0F4CB4D9-D053-54ED-BB75-86D34723BF34}']
  { constructors } 

    {class} function init: DNEditorAttribute; overload;
    {class} function init(typeName: string; baseTypeName: string): DNEditorAttribute; overload;
    {class} function init(typeName: string; baseType: DDN.mscorlib.DNType): DNEditorAttribute; overload;
    {class} function init(&type: DDN.mscorlib.DNType; baseType: DDN.mscorlib.DNType): DNEditorAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.EditorAttribute')]
  DNEditorAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{7E852A96-AE53-3B0D-B822-12B2F2268BF4}']
  { getters & setters } 

    function get_EditorBaseTypeName: string;
    function get_EditorTypeName: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EditorBaseTypeName: string read get_EditorBaseTypeName;
    property EditorTypeName: string read get_EditorTypeName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNEditorAttribute = class(TDNGenericImport<DNEditorAttributeClass, DNEditorAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNEditorBrowsableAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{A5C6DFB9-043D-5A66-9014-211FBB891791}']
  { constructors } 

    {class} function init(state: DNEditorBrowsableState): DNEditorBrowsableAttribute; overload;
    {class} function init: DNEditorBrowsableAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.EditorBrowsableAttribute')]
  DNEditorBrowsableAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{DFAA4DBF-A199-3539-8DF3-A00DE3CC0707}']
  { getters & setters } 

    function get_State: DNEditorBrowsableState;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property State: DNEditorBrowsableState read get_State;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNEditorBrowsableAttribute = class(TDNGenericImport<DNEditorBrowsableAttributeClass, DNEditorBrowsableAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNExtenderProvidedPropertyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{21B31ED5-5C63-52FF-A419-025E025F09E4}']
  { constructors } 

    {class} function init: DNExtenderProvidedPropertyAttribute;

  end;

  [DNTypeName('System.ComponentModel.ExtenderProvidedPropertyAttribute')]
  DNExtenderProvidedPropertyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{BB4329CD-65B5-3AE6-892E-947913197CB0}']
  { getters & setters } 

    function get_ExtenderProperty: DNPropertyDescriptor;
    function get_Provider: DNIExtenderProvider;
    function get_ReceiverType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ExtenderProperty: DNPropertyDescriptor read get_ExtenderProperty;
    property Provider: DNIExtenderProvider read get_Provider;
    property ReceiverType: DDN.mscorlib.DNType read get_ReceiverType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNExtenderProvidedPropertyAttribute = class(TDNGenericImport<DNExtenderProvidedPropertyAttributeClass, DNExtenderProvidedPropertyAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNImmutableObjectAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{020E4E4F-5BBA-58ED-986B-A6E22747E1E5}']
  { constructors } 

    {class} function init(immutable: Boolean): DNImmutableObjectAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Yes: DNImmutableObjectAttribute;
   function __fakeFieldGet_No: DNImmutableObjectAttribute;
   function __fakeFieldGet_Default: DNImmutableObjectAttribute;

  { static fields } 

    {class} property Yes: DNImmutableObjectAttribute read __fakeFieldGet_Yes;
    {class} property No: DNImmutableObjectAttribute read __fakeFieldGet_No;
    {class} property &Default: DNImmutableObjectAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.ImmutableObjectAttribute')]
  DNImmutableObjectAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{0AF8352D-E7A4-3906-AC6C-F9EF5C64829F}']
  { getters & setters } 

    function get_Immutable: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Immutable: Boolean read get_Immutable;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNImmutableObjectAttribute = class(TDNGenericImport<DNImmutableObjectAttributeClass, DNImmutableObjectAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNInheritanceAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{65EDC43C-D4FB-598C-A4F2-1713B152EC21}']
  { constructors } 

    {class} function init: DNInheritanceAttribute; overload;
    {class} function init(inheritanceLevel: DNInheritanceLevel): DNInheritanceAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Inherited: DNInheritanceAttribute;
   function __fakeFieldGet_InheritedReadOnly: DNInheritanceAttribute;
   function __fakeFieldGet_NotInherited: DNInheritanceAttribute;
   function __fakeFieldGet_Default: DNInheritanceAttribute;

  { static fields } 

    {class} property &Inherited: DNInheritanceAttribute read __fakeFieldGet_Inherited;
    {class} property InheritedReadOnly: DNInheritanceAttribute read __fakeFieldGet_InheritedReadOnly;
    {class} property NotInherited: DNInheritanceAttribute read __fakeFieldGet_NotInherited;
    {class} property &Default: DNInheritanceAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.InheritanceAttribute')]
  DNInheritanceAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{9DB75DB9-46DA-36C8-98EE-E3C80F37DF7E}']
  { getters & setters } 

    function get_InheritanceLevel: DNInheritanceLevel;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(value: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function ToString: string;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property InheritanceLevel: DNInheritanceLevel read get_InheritanceLevel;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNInheritanceAttribute = class(TDNGenericImport<DNInheritanceAttributeClass, DNInheritanceAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNInitializationEventAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{36714612-3ECE-5C80-B66B-4AF141B68758}']
  { constructors } 

    {class} function init(eventName: string): DNInitializationEventAttribute;

  end;

  [DNTypeName('System.ComponentModel.InitializationEventAttribute')]
  DNInitializationEventAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{0C12D3DE-6EBB-38DF-8F07-26C39A9167D2}']
  { getters & setters } 

    function get_EventName: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EventName: string read get_EventName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNInitializationEventAttribute = class(TDNGenericImport<DNInitializationEventAttributeClass, DNInitializationEventAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNInstallerTypeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{8705DAE1-8927-575E-A3D8-C5360421CC48}']
  { constructors } 

    {class} function init(installerType: DDN.mscorlib.DNType): DNInstallerTypeAttribute; overload;
    {class} function init(typeName: string): DNInstallerTypeAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.InstallerTypeAttribute')]
  DNInstallerTypeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{93289B3A-FF81-3CC8-A802-96C6E8595CFA}']
  { getters & setters } 

    function get_InstallerType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property InstallerType: DDN.mscorlib.DNType read get_InstallerType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNInstallerTypeAttribute = class(TDNGenericImport<DNInstallerTypeAttributeClass, DNInstallerTypeAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNLicenseProviderAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{3F5A0428-3B7A-5010-AF15-47A61D68F867}']
  { constructors } 

    {class} function init: DNLicenseProviderAttribute; overload;
    {class} function init(typeName: string): DNLicenseProviderAttribute; overload;
    {class} function init(&type: DDN.mscorlib.DNType): DNLicenseProviderAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNLicenseProviderAttribute;

  { static fields } 

    {class} property &Default: DNLicenseProviderAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.LicenseProviderAttribute')]
  DNLicenseProviderAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{D06B2403-58D0-3CF0-B985-F7B32860F51B}']
  { getters & setters } 

    function get_LicenseProvider: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(value: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LicenseProvider: DDN.mscorlib.DNType read get_LicenseProvider;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNLicenseProviderAttribute = class(TDNGenericImport<DNLicenseProviderAttributeClass, DNLicenseProviderAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNListBindableAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{96342193-0CF9-56F6-9F35-E6E0E8964B1F}']
  { constructors } 

    {class} function init(listBindable: Boolean): DNListBindableAttribute; overload;
    {class} function init(flags: DNBindableSupport): DNListBindableAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Yes: DNListBindableAttribute;
   function __fakeFieldGet_No: DNListBindableAttribute;
   function __fakeFieldGet_Default: DNListBindableAttribute;

  { static fields } 

    {class} property Yes: DNListBindableAttribute read __fakeFieldGet_Yes;
    {class} property No: DNListBindableAttribute read __fakeFieldGet_No;
    {class} property &Default: DNListBindableAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.ListBindableAttribute')]
  DNListBindableAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{8F6785E8-8153-3448-9671-338BF86CB5DA}']
  { getters & setters } 

    function get_ListBindable: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ListBindable: Boolean read get_ListBindable;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNListBindableAttribute = class(TDNGenericImport<DNListBindableAttributeClass, DNListBindableAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNLocalizableAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{B5EB9A98-F3E1-5988-B9BB-184187059A53}']
  { constructors } 

    {class} function init(isLocalizable: Boolean): DNLocalizableAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Yes: DNLocalizableAttribute;
   function __fakeFieldGet_No: DNLocalizableAttribute;
   function __fakeFieldGet_Default: DNLocalizableAttribute;

  { static fields } 

    {class} property Yes: DNLocalizableAttribute read __fakeFieldGet_Yes;
    {class} property No: DNLocalizableAttribute read __fakeFieldGet_No;
    {class} property &Default: DNLocalizableAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.LocalizableAttribute')]
  DNLocalizableAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{564C234D-726D-3560-BD48-9EBE6E825D86}']
  { getters & setters } 

    function get_IsLocalizable: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function IsDefaultAttribute: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsLocalizable: Boolean read get_IsLocalizable;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNLocalizableAttribute = class(TDNGenericImport<DNLocalizableAttributeClass, DNLocalizableAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNLookupBindingPropertiesAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{E6615E45-294F-53D1-96E9-32F322D996BD}']
  { constructors } 

    {class} function init: DNLookupBindingPropertiesAttribute; overload;
    {class} function init(dataSource: string; displayMember: string; valueMember: string; lookupMember: string): DNLookupBindingPropertiesAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNLookupBindingPropertiesAttribute;

  { static fields } 

    {class} property &Default: DNLookupBindingPropertiesAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.LookupBindingPropertiesAttribute')]
  DNLookupBindingPropertiesAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{2D212AA5-F073-38F5-9953-5DA98885F5E2}']
  { getters & setters } 

    function get_DataSource: string;
    function get_DisplayMember: string;
    function get_ValueMember: string;
    function get_LookupMember: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataSource: string read get_DataSource;
    property DisplayMember: string read get_DisplayMember;
    property ValueMember: string read get_ValueMember;
    property LookupMember: string read get_LookupMember;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNLookupBindingPropertiesAttribute = class(TDNGenericImport<DNLookupBindingPropertiesAttributeClass, DNLookupBindingPropertiesAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNMergablePropertyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{6C21837F-89B3-5D63-B53C-FE30B4A503BF}']
  { constructors } 

    {class} function init(allowMerge: Boolean): DNMergablePropertyAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Yes: DNMergablePropertyAttribute;
   function __fakeFieldGet_No: DNMergablePropertyAttribute;
   function __fakeFieldGet_Default: DNMergablePropertyAttribute;

  { static fields } 

    {class} property Yes: DNMergablePropertyAttribute read __fakeFieldGet_Yes;
    {class} property No: DNMergablePropertyAttribute read __fakeFieldGet_No;
    {class} property &Default: DNMergablePropertyAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.MergablePropertyAttribute')]
  DNMergablePropertyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{4D6888D2-99CD-36D0-8BE2-99B926A1A700}']
  { getters & setters } 

    function get_AllowMerge: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowMerge: Boolean read get_AllowMerge;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNMergablePropertyAttribute = class(TDNGenericImport<DNMergablePropertyAttributeClass, DNMergablePropertyAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNNotifyParentPropertyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{0593477E-CED4-5D62-997C-619A96EBBA28}']
  { constructors } 

    {class} function init(notifyParent: Boolean): DNNotifyParentPropertyAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Yes: DNNotifyParentPropertyAttribute;
   function __fakeFieldGet_No: DNNotifyParentPropertyAttribute;
   function __fakeFieldGet_Default: DNNotifyParentPropertyAttribute;

  { static fields } 

    {class} property Yes: DNNotifyParentPropertyAttribute read __fakeFieldGet_Yes;
    {class} property No: DNNotifyParentPropertyAttribute read __fakeFieldGet_No;
    {class} property &Default: DNNotifyParentPropertyAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.NotifyParentPropertyAttribute')]
  DNNotifyParentPropertyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{65689C64-3052-3CE1-8737-B34AE9FFAEE6}']
  { getters & setters } 

    function get_NotifyParent: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NotifyParent: Boolean read get_NotifyParent;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNNotifyParentPropertyAttribute = class(TDNGenericImport<DNNotifyParentPropertyAttributeClass, DNNotifyParentPropertyAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNParenthesizePropertyNameAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{49F41BD8-209F-5AAD-9CBA-C5693D1810FF}']
  { constructors } 

    {class} function init: DNParenthesizePropertyNameAttribute; overload;
    {class} function init(needParenthesis: Boolean): DNParenthesizePropertyNameAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNParenthesizePropertyNameAttribute;

  { static fields } 

    {class} property &Default: DNParenthesizePropertyNameAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.ParenthesizePropertyNameAttribute')]
  DNParenthesizePropertyNameAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{F2EF896A-B8DE-3E6B-A78E-4AD3C512E684}']
  { getters & setters } 

    function get_NeedParenthesis: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(o: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NeedParenthesis: Boolean read get_NeedParenthesis;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNParenthesizePropertyNameAttribute = class(TDNGenericImport<DNParenthesizePropertyNameAttributeClass, DNParenthesizePropertyNameAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNPasswordPropertyTextAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{FA94F556-E22E-5A49-A830-3BC2B253DF79}']
  { constructors } 

    {class} function init: DNPasswordPropertyTextAttribute; overload;
    {class} function init(password: Boolean): DNPasswordPropertyTextAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Yes: DNPasswordPropertyTextAttribute;
   function __fakeFieldGet_No: DNPasswordPropertyTextAttribute;
   function __fakeFieldGet_Default: DNPasswordPropertyTextAttribute;

  { static fields } 

    {class} property Yes: DNPasswordPropertyTextAttribute read __fakeFieldGet_Yes;
    {class} property No: DNPasswordPropertyTextAttribute read __fakeFieldGet_No;
    {class} property &Default: DNPasswordPropertyTextAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.PasswordPropertyTextAttribute')]
  DNPasswordPropertyTextAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{CE07DA4E-E43E-3A18-91A4-8E39555DCF88}']
  { getters & setters } 

    function get_Password: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(o: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Password: Boolean read get_Password;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNPasswordPropertyTextAttribute = class(TDNGenericImport<DNPasswordPropertyTextAttributeClass, DNPasswordPropertyTextAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNPropertyTabAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{72972EF9-FE9D-56F1-BCBA-BF0C99DCA91C}']
  { constructors } 

    {class} function init: DNPropertyTabAttribute; overload;
    {class} function init(tabClass: DDN.mscorlib.DNType): DNPropertyTabAttribute; overload;
    {class} function init(tabClassName: string): DNPropertyTabAttribute; overload;
    {class} function init(tabClass: DDN.mscorlib.DNType; tabScope: DNPropertyTabScope): DNPropertyTabAttribute; overload;
    {class} function init(tabClassName: string; tabScope: DNPropertyTabScope): DNPropertyTabAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.PropertyTabAttribute')]
  DNPropertyTabAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{BF0874AD-05EE-35FC-A025-BF6CFE7F6526}']
  { getters & setters } 

    function get_TabClasses: TArray<DDN.mscorlib.DNType>;
    function get_TabScopes: TArray<DNPropertyTabScope>;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(other: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(other: DNPropertyTabAttribute): Boolean; overload;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TabClasses: TArray<DDN.mscorlib.DNType> read get_TabClasses;
    property TabScopes: TArray<DNPropertyTabScope> read get_TabScopes;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNPropertyTabAttribute = class(TDNGenericImport<DNPropertyTabAttributeClass, DNPropertyTabAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNProvidePropertyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{CA3A825A-21A6-5C83-8338-93FE5A5FAD30}']
  { constructors } 

    {class} function init(propertyName: string; receiverType: DDN.mscorlib.DNType): DNProvidePropertyAttribute; overload;
    {class} function init(propertyName: string; receiverTypeName: string): DNProvidePropertyAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.ProvidePropertyAttribute')]
  DNProvidePropertyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{41E6233F-1625-313C-A83D-B03F1DB21F2C}']
  { getters & setters } 

    function get_PropertyName: string;
    function get_ReceiverTypeName: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PropertyName: string read get_PropertyName;
    property ReceiverTypeName: string read get_ReceiverTypeName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNProvidePropertyAttribute = class(TDNGenericImport<DNProvidePropertyAttributeClass, DNProvidePropertyAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNReadOnlyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{67F4285C-8FFD-55E6-A5B7-488F894ABBDC}']
  { constructors } 

    {class} function init(isReadOnly: Boolean): DNReadOnlyAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Yes: DNReadOnlyAttribute;
   function __fakeFieldGet_No: DNReadOnlyAttribute;
   function __fakeFieldGet_Default: DNReadOnlyAttribute;

  { static fields } 

    {class} property Yes: DNReadOnlyAttribute read __fakeFieldGet_Yes;
    {class} property No: DNReadOnlyAttribute read __fakeFieldGet_No;
    {class} property &Default: DNReadOnlyAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.ReadOnlyAttribute')]
  DNReadOnlyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{42306F00-8FF5-3D6C-889C-CB189907F212}']
  { getters & setters } 

    function get_IsReadOnly: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(value: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsReadOnly: Boolean read get_IsReadOnly;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNReadOnlyAttribute = class(TDNGenericImport<DNReadOnlyAttributeClass, DNReadOnlyAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNRecommendedAsConfigurableAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{65DFAEA4-AB7E-545D-8A8A-3CF2860E4139}']
  { constructors } 

    {class} function init(recommendedAsConfigurable: Boolean): DNRecommendedAsConfigurableAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_No: DNRecommendedAsConfigurableAttribute;
   function __fakeFieldGet_Yes: DNRecommendedAsConfigurableAttribute;
   function __fakeFieldGet_Default: DNRecommendedAsConfigurableAttribute;

  { static fields } 

    {class} property No: DNRecommendedAsConfigurableAttribute read __fakeFieldGet_No;
    {class} property Yes: DNRecommendedAsConfigurableAttribute read __fakeFieldGet_Yes;
    {class} property &Default: DNRecommendedAsConfigurableAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.RecommendedAsConfigurableAttribute')]
  DNRecommendedAsConfigurableAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{71D572AE-F8D0-3E4E-9A80-97F47E06E478}']
  { getters & setters } 

    function get_RecommendedAsConfigurable: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RecommendedAsConfigurable: Boolean read get_RecommendedAsConfigurable;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNRecommendedAsConfigurableAttribute = class(TDNGenericImport<DNRecommendedAsConfigurableAttributeClass, DNRecommendedAsConfigurableAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNRefreshPropertiesAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{FEC17FA5-9F3D-5CA4-8B66-258E1D8EE2D5}']
  { constructors } 

    {class} function init(refresh: DNRefreshProperties): DNRefreshPropertiesAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_All: DNRefreshPropertiesAttribute;
   function __fakeFieldGet_Repaint: DNRefreshPropertiesAttribute;
   function __fakeFieldGet_Default: DNRefreshPropertiesAttribute;

  { static fields } 

    {class} property All: DNRefreshPropertiesAttribute read __fakeFieldGet_All;
    {class} property Repaint: DNRefreshPropertiesAttribute read __fakeFieldGet_Repaint;
    {class} property &Default: DNRefreshPropertiesAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.RefreshPropertiesAttribute')]
  DNRefreshPropertiesAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{CC342565-B219-3F34-BB44-CA1D6D5F9AD6}']
  { getters & setters } 

    function get_RefreshProperties: DNRefreshProperties;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(value: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RefreshProperties: DNRefreshProperties read get_RefreshProperties;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNRefreshPropertiesAttribute = class(TDNGenericImport<DNRefreshPropertiesAttributeClass, DNRefreshPropertiesAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNRunInstallerAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{4100D309-6AAB-5CA7-ACE3-4E88329D77C4}']
  { constructors } 

    {class} function init(runInstaller: Boolean): DNRunInstallerAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Yes: DNRunInstallerAttribute;
   function __fakeFieldGet_No: DNRunInstallerAttribute;
   function __fakeFieldGet_Default: DNRunInstallerAttribute;

  { static fields } 

    {class} property Yes: DNRunInstallerAttribute read __fakeFieldGet_Yes;
    {class} property No: DNRunInstallerAttribute read __fakeFieldGet_No;
    {class} property &Default: DNRunInstallerAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.RunInstallerAttribute')]
  DNRunInstallerAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{BFBC38BE-7E0C-3ED9-AA25-67D2F149934A}']
  { getters & setters } 

    function get_RunInstaller: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RunInstaller: Boolean read get_RunInstaller;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNRunInstallerAttribute = class(TDNGenericImport<DNRunInstallerAttributeClass, DNRunInstallerAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNSettingsBindableAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{3BFE3A6D-A00B-5E2D-9BE7-D9088AE0A7DA}']
  { constructors } 

    {class} function init(bindable: Boolean): DNSettingsBindableAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Yes: DNSettingsBindableAttribute;
   function __fakeFieldGet_No: DNSettingsBindableAttribute;

  { static fields } 

    {class} property Yes: DNSettingsBindableAttribute read __fakeFieldGet_Yes;
    {class} property No: DNSettingsBindableAttribute read __fakeFieldGet_No;

  end;

  [DNTypeName('System.ComponentModel.SettingsBindableAttribute')]
  DNSettingsBindableAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{AA0D3C77-D8FC-3593-B188-5C997FDC4173}']
  { getters & setters } 

    function get_Bindable: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Bindable: Boolean read get_Bindable;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSettingsBindableAttribute = class(TDNGenericImport<DNSettingsBindableAttributeClass, DNSettingsBindableAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNToolboxItemAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{B8A4A266-09E6-545E-8819-A9171092696B}']
  { constructors } 

    {class} function init(defaultType: Boolean): DNToolboxItemAttribute; overload;
    {class} function init(toolboxItemTypeName: string): DNToolboxItemAttribute; overload;
    {class} function init(toolboxItemType: DDN.mscorlib.DNType): DNToolboxItemAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNToolboxItemAttribute;
   function __fakeFieldGet_None: DNToolboxItemAttribute;

  { static fields } 

    {class} property &Default: DNToolboxItemAttribute read __fakeFieldGet_Default;
    {class} property None: DNToolboxItemAttribute read __fakeFieldGet_None;

  end;

  [DNTypeName('System.ComponentModel.ToolboxItemAttribute')]
  DNToolboxItemAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{3D70AE49-4185-3034-B67C-B28329097FFB}']
  { getters & setters } 

    function get_ToolboxItemType: DDN.mscorlib.DNType;
    function get_ToolboxItemTypeName: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function IsDefaultAttribute: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ToolboxItemType: DDN.mscorlib.DNType read get_ToolboxItemType;
    property ToolboxItemTypeName: string read get_ToolboxItemTypeName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNToolboxItemAttribute = class(TDNGenericImport<DNToolboxItemAttributeClass, DNToolboxItemAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNToolboxItemFilterAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{6F4F2401-8F5A-5C1B-802E-0D41598CDB1C}']
  { constructors } 

    {class} function init(filterString: string): DNToolboxItemFilterAttribute; overload;
    {class} function init(filterString: string; filterType: DNToolboxItemFilterType): DNToolboxItemFilterAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.ToolboxItemFilterAttribute')]
  DNToolboxItemFilterAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{70A44850-3D94-394D-A9F2-F5E185CDB53F}']
  { getters & setters } 

    function get_FilterString: string;
    function get_FilterType: DNToolboxItemFilterType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property FilterString: string read get_FilterString;
    property FilterType: DNToolboxItemFilterType read get_FilterType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNToolboxItemFilterAttribute = class(TDNGenericImport<DNToolboxItemFilterAttributeClass, DNToolboxItemFilterAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNTypeConverterAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{EF97B5CA-2718-5B1E-B212-B2A1737F9287}']
  { constructors } 

    {class} function init: DNTypeConverterAttribute; overload;
    {class} function init(&type: DDN.mscorlib.DNType): DNTypeConverterAttribute; overload;
    {class} function init(typeName: string): DNTypeConverterAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNTypeConverterAttribute;

  { static fields } 

    {class} property &Default: DNTypeConverterAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.ComponentModel.TypeConverterAttribute')]
  DNTypeConverterAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{A6863727-668B-34B2-8F62-C2CB7065EEA9}']
  { getters & setters } 

    function get_ConverterTypeName: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ConverterTypeName: string read get_ConverterTypeName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNTypeConverterAttribute = class(TDNGenericImport<DNTypeConverterAttributeClass, DNTypeConverterAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNTypeDescriptionProviderAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{51C7FDBA-5216-51B2-8FB4-1FA1FAEE10EE}']
  { constructors } 

    {class} function init(typeName: string): DNTypeDescriptionProviderAttribute; overload;
    {class} function init(&type: DDN.mscorlib.DNType): DNTypeDescriptionProviderAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.TypeDescriptionProviderAttribute')]
  DNTypeDescriptionProviderAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{F0C9E001-DC7E-3A7E-930D-0781F3E7E1AB}']
  { getters & setters } 

    function get_TypeName: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeName: string read get_TypeName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNTypeDescriptionProviderAttribute = class(TDNGenericImport<DNTypeDescriptionProviderAttributeClass, DNTypeDescriptionProviderAttribute>) end;

  //-------------namespace: System.Diagnostics.CodeAnalysis----------------
  DNExcludeFromCodeCoverageAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{33DCDED2-25C1-51C0-BDBF-A6E79303ADE6}']
  { constructors } 

    {class} function init: DNExcludeFromCodeCoverageAttribute;

  end;

  [DNTypeName('System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute')]
  DNExcludeFromCodeCoverageAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{4F93722E-B872-394C-AB77-ABA6D49149D7}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNExcludeFromCodeCoverageAttribute = class(TDNGenericImport<DNExcludeFromCodeCoverageAttributeClass, DNExcludeFromCodeCoverageAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNSwitchAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{A6E16EA6-DEAD-5B49-8E2D-B5F3D35E70A3}']
  { constructors } 

    {class} function init(switchName: string; switchType: DDN.mscorlib.DNType): DNSwitchAttribute;

  { static methods } 

    {class} function GetAll(assembly: DDN.mscorlib.DNAssembly): TArray<DNSwitchAttribute>;

  end;

  [DNTypeName('System.Diagnostics.SwitchAttribute')]
  DNSwitchAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{75FE43CD-4702-37F5-93A4-6C099F6619D3}']
  { getters & setters } 

    function get_SwitchName: string;
    procedure set_SwitchName(value: string);
    function get_SwitchType: DDN.mscorlib.DNType;
    procedure set_SwitchType(value: DDN.mscorlib.DNType);
    function get_SwitchDescription: string;
    procedure set_SwitchDescription(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SwitchName: string read get_SwitchName write set_SwitchName;
    property SwitchType: DDN.mscorlib.DNType read get_SwitchType write set_SwitchType;
    property SwitchDescription: string read get_SwitchDescription write set_SwitchDescription;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSwitchAttribute = class(TDNGenericImport<DNSwitchAttributeClass, DNSwitchAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNSwitchLevelAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{A2B51A1F-B3F9-545C-B951-FA4CC9BA3B4F}']
  { constructors } 

    {class} function init(switchLevelType: DDN.mscorlib.DNType): DNSwitchLevelAttribute;

  end;

  [DNTypeName('System.Diagnostics.SwitchLevelAttribute')]
  DNSwitchLevelAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{D4F76AB6-2033-3D3F-B38C-B1826142F55E}']
  { getters & setters } 

    function get_SwitchLevelType: DDN.mscorlib.DNType;
    procedure set_SwitchLevelType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SwitchLevelType: DDN.mscorlib.DNType read get_SwitchLevelType write set_SwitchLevelType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSwitchLevelAttribute = class(TDNGenericImport<DNSwitchLevelAttributeClass, DNSwitchLevelAttribute>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNDefaultParameterValueAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{64B42235-081B-55B3-98E3-AC2F5DFBBC03}']
  { constructors } 

    {class} function init(value: DDN.mscorlib.DNObject): DNDefaultParameterValueAttribute;

  end;

  [DNTypeName('System.Runtime.InteropServices.DefaultParameterValueAttribute')]
  DNDefaultParameterValueAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{EE02CFE7-6C32-328B-A055-C7417EBD0BED}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: DDN.mscorlib.DNObject read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDefaultParameterValueAttribute = class(TDNGenericImport<DNDefaultParameterValueAttributeClass, DNDefaultParameterValueAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNEventLogPermissionAttributeClass = interface(DDN.mscorlib.DNCodeAccessSecurityAttributeClass)
  ['{08E618DB-EE24-5A60-B82C-F34B884D17D8}']
  { constructors } 

    {class} function init(action: DDN.mscorlib.DNSecurityAction): DNEventLogPermissionAttribute;

  end;

  [DNTypeName('System.Diagnostics.EventLogPermissionAttribute')]
  DNEventLogPermissionAttribute = interface(DDN.mscorlib.DNCodeAccessSecurityAttribute)
  ['{2975168B-150D-3A71-94C9-E9B47A3F0DC3}']
  { getters & setters } 

    function get_MachineName: string;
    procedure set_MachineName(value: string);
    function get_PermissionAccess: DNEventLogPermissionAccess;
    procedure set_PermissionAccess(value: DNEventLogPermissionAccess);
    function get_Action: DDN.mscorlib.DNSecurityAction;
    procedure set_Action(value: DDN.mscorlib.DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function CreatePermission: DDN.mscorlib.DNIPermission;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MachineName: string read get_MachineName write set_MachineName;
    property PermissionAccess: DNEventLogPermissionAccess read get_PermissionAccess write set_PermissionAccess;
    property Action: DDN.mscorlib.DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNEventLogPermissionAttribute = class(TDNGenericImport<DNEventLogPermissionAttributeClass, DNEventLogPermissionAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNPerformanceCounterPermissionAttributeClass = interface(DDN.mscorlib.DNCodeAccessSecurityAttributeClass)
  ['{6EC2EC3A-19EF-5A39-A6FD-27D484D8C10A}']
  { constructors } 

    {class} function init(action: DDN.mscorlib.DNSecurityAction): DNPerformanceCounterPermissionAttribute;

  end;

  [DNTypeName('System.Diagnostics.PerformanceCounterPermissionAttribute')]
  DNPerformanceCounterPermissionAttribute = interface(DDN.mscorlib.DNCodeAccessSecurityAttribute)
  ['{C9DF9D9F-51F6-3A46-9E61-2CA0FE6FDF21}']
  { getters & setters } 

    function get_CategoryName: string;
    procedure set_CategoryName(value: string);
    function get_MachineName: string;
    procedure set_MachineName(value: string);
    function get_PermissionAccess: DNPerformanceCounterPermissionAccess;
    procedure set_PermissionAccess(value: DNPerformanceCounterPermissionAccess);
    function get_Action: DDN.mscorlib.DNSecurityAction;
    procedure set_Action(value: DDN.mscorlib.DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function CreatePermission: DDN.mscorlib.DNIPermission;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CategoryName: string read get_CategoryName write set_CategoryName;
    property MachineName: string read get_MachineName write set_MachineName;
    property PermissionAccess: DNPerformanceCounterPermissionAccess read get_PermissionAccess write set_PermissionAccess;
    property Action: DDN.mscorlib.DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNPerformanceCounterPermissionAttribute = class(TDNGenericImport<DNPerformanceCounterPermissionAttributeClass, DNPerformanceCounterPermissionAttribute>) end;

  //-------------namespace: System.Net----------------
  DNDnsPermissionAttributeClass = interface(DDN.mscorlib.DNCodeAccessSecurityAttributeClass)
  ['{A2739F9A-359C-53F3-A2DA-654B00178805}']
  { constructors } 

    {class} function init(action: DDN.mscorlib.DNSecurityAction): DNDnsPermissionAttribute;

  end;

  [DNTypeName('System.Net.DnsPermissionAttribute')]
  DNDnsPermissionAttribute = interface(DDN.mscorlib.DNCodeAccessSecurityAttribute)
  ['{192A77F8-72F8-30D7-8E02-2F83DEF5B801}']
  { getters & setters } 

    function get_Action: DDN.mscorlib.DNSecurityAction;
    procedure set_Action(value: DDN.mscorlib.DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function CreatePermission: DDN.mscorlib.DNIPermission;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Action: DDN.mscorlib.DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDnsPermissionAttribute = class(TDNGenericImport<DNDnsPermissionAttributeClass, DNDnsPermissionAttribute>) end;

  //-------------namespace: System.Net.Mail----------------
  DNSmtpPermissionAttributeClass = interface(DDN.mscorlib.DNCodeAccessSecurityAttributeClass)
  ['{0E051E44-85B8-5BD5-BAA2-5BE80F9495F2}']
  { constructors } 

    {class} function init(action: DDN.mscorlib.DNSecurityAction): DNSmtpPermissionAttribute;

  end;

  [DNTypeName('System.Net.Mail.SmtpPermissionAttribute')]
  DNSmtpPermissionAttribute = interface(DDN.mscorlib.DNCodeAccessSecurityAttribute)
  ['{C51294F5-1726-3AB6-8BE0-CAB3D2FAE9C0}']
  { getters & setters } 

    function get_Access: string;
    procedure set_Access(value: string);
    function get_Action: DDN.mscorlib.DNSecurityAction;
    procedure set_Action(value: DDN.mscorlib.DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function CreatePermission: DDN.mscorlib.DNIPermission;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Access: string read get_Access write set_Access;
    property Action: DDN.mscorlib.DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSmtpPermissionAttribute = class(TDNGenericImport<DNSmtpPermissionAttributeClass, DNSmtpPermissionAttribute>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNNetworkInformationPermissionAttributeClass = interface(DDN.mscorlib.DNCodeAccessSecurityAttributeClass)
  ['{D4360941-FF34-5312-A5F4-BBC25ACFFEF6}']
  { constructors } 

    {class} function init(action: DDN.mscorlib.DNSecurityAction): DNNetworkInformationPermissionAttribute;

  end;

  [DNTypeName('System.Net.NetworkInformation.NetworkInformationPermissionAttribute')]
  DNNetworkInformationPermissionAttribute = interface(DDN.mscorlib.DNCodeAccessSecurityAttribute)
  ['{D98FA7EC-321D-3558-A330-07DBE21F9D33}']
  { getters & setters } 

    function get_Access: string;
    procedure set_Access(value: string);
    function get_Action: DDN.mscorlib.DNSecurityAction;
    procedure set_Action(value: DDN.mscorlib.DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function CreatePermission: DDN.mscorlib.DNIPermission;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Access: string read get_Access write set_Access;
    property Action: DDN.mscorlib.DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNNetworkInformationPermissionAttribute = class(TDNGenericImport<DNNetworkInformationPermissionAttributeClass, DNNetworkInformationPermissionAttribute>) end;

  //-------------namespace: System.Net----------------
  DNSocketPermissionAttributeClass = interface(DDN.mscorlib.DNCodeAccessSecurityAttributeClass)
  ['{1928124C-AAE1-54DB-97AF-ECCC9C9EFFAA}']
  { constructors } 

    {class} function init(action: DDN.mscorlib.DNSecurityAction): DNSocketPermissionAttribute;

  end;

  [DNTypeName('System.Net.SocketPermissionAttribute')]
  DNSocketPermissionAttribute = interface(DDN.mscorlib.DNCodeAccessSecurityAttribute)
  ['{B1708F73-ACC6-3069-A5E7-9B26C9A8DCFD}']
  { getters & setters } 

    function get_Access: string;
    procedure set_Access(value: string);
    function get_Host: string;
    procedure set_Host(value: string);
    function get_Transport: string;
    procedure set_Transport(value: string);
    function get_Port: string;
    procedure set_Port(value: string);
    function get_Action: DDN.mscorlib.DNSecurityAction;
    procedure set_Action(value: DDN.mscorlib.DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function CreatePermission: DDN.mscorlib.DNIPermission;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Access: string read get_Access write set_Access;
    property Host: string read get_Host write set_Host;
    property Transport: string read get_Transport write set_Transport;
    property Port: string read get_Port write set_Port;
    property Action: DDN.mscorlib.DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSocketPermissionAttribute = class(TDNGenericImport<DNSocketPermissionAttributeClass, DNSocketPermissionAttribute>) end;

  //-------------namespace: System.Net----------------
  DNWebPermissionAttributeClass = interface(DDN.mscorlib.DNCodeAccessSecurityAttributeClass)
  ['{CE64FEA6-DBFC-5218-BD13-C0D2D660C42D}']
  { constructors } 

    {class} function init(action: DDN.mscorlib.DNSecurityAction): DNWebPermissionAttribute;

  end;

  [DNTypeName('System.Net.WebPermissionAttribute')]
  DNWebPermissionAttribute = interface(DDN.mscorlib.DNCodeAccessSecurityAttribute)
  ['{EF69DFFF-444D-38C4-8C96-E332572E1895}']
  { getters & setters } 

    function get_Connect: string;
    procedure set_Connect(value: string);
    function get_Accept: string;
    procedure set_Accept(value: string);
    function get_ConnectPattern: string;
    procedure set_ConnectPattern(value: string);
    function get_AcceptPattern: string;
    procedure set_AcceptPattern(value: string);
    function get_Action: DDN.mscorlib.DNSecurityAction;
    procedure set_Action(value: DDN.mscorlib.DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function CreatePermission: DDN.mscorlib.DNIPermission;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Connect: string read get_Connect write set_Connect;
    property Accept: string read get_Accept write set_Accept;
    property ConnectPattern: string read get_ConnectPattern write set_ConnectPattern;
    property AcceptPattern: string read get_AcceptPattern write set_AcceptPattern;
    property Action: DDN.mscorlib.DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNWebPermissionAttribute = class(TDNGenericImport<DNWebPermissionAttributeClass, DNWebPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNStorePermissionAttributeClass = interface(DDN.mscorlib.DNCodeAccessSecurityAttributeClass)
  ['{C10BE7C6-FBA5-5743-8353-DF1949B2FA80}']
  { constructors } 

    {class} function init(action: DDN.mscorlib.DNSecurityAction): DNStorePermissionAttribute;

  end;

  [DNTypeName('System.Security.Permissions.StorePermissionAttribute')]
  DNStorePermissionAttribute = interface(DDN.mscorlib.DNCodeAccessSecurityAttribute)
  ['{8C54DBDF-7BB1-3283-AF1F-4A2A94AD9243}']
  { getters & setters } 

    function get_Flags: DNStorePermissionFlags;
    procedure set_Flags(value: DNStorePermissionFlags);
    function get_CreateStore: Boolean;
    procedure set_CreateStore(value: Boolean);
    function get_DeleteStore: Boolean;
    procedure set_DeleteStore(value: Boolean);
    function get_EnumerateStores: Boolean;
    procedure set_EnumerateStores(value: Boolean);
    function get_OpenStore: Boolean;
    procedure set_OpenStore(value: Boolean);
    function get_AddToStore: Boolean;
    procedure set_AddToStore(value: Boolean);
    function get_RemoveFromStore: Boolean;
    procedure set_RemoveFromStore(value: Boolean);
    function get_EnumerateCertificates: Boolean;
    procedure set_EnumerateCertificates(value: Boolean);
    function get_Action: DDN.mscorlib.DNSecurityAction;
    procedure set_Action(value: DDN.mscorlib.DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function CreatePermission: DDN.mscorlib.DNIPermission;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Flags: DNStorePermissionFlags read get_Flags write set_Flags;
    property CreateStore: Boolean read get_CreateStore write set_CreateStore;
    property DeleteStore: Boolean read get_DeleteStore write set_DeleteStore;
    property EnumerateStores: Boolean read get_EnumerateStores write set_EnumerateStores;
    property OpenStore: Boolean read get_OpenStore write set_OpenStore;
    property AddToStore: Boolean read get_AddToStore write set_AddToStore;
    property RemoveFromStore: Boolean read get_RemoveFromStore write set_RemoveFromStore;
    property EnumerateCertificates: Boolean read get_EnumerateCertificates write set_EnumerateCertificates;
    property Action: DDN.mscorlib.DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNStorePermissionAttribute = class(TDNGenericImport<DNStorePermissionAttributeClass, DNStorePermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNTypeDescriptorPermissionAttributeClass = interface(DDN.mscorlib.DNCodeAccessSecurityAttributeClass)
  ['{ECD329B6-7791-5B33-8CF6-4E1685811886}']
  { constructors } 

    {class} function init(action: DDN.mscorlib.DNSecurityAction): DNTypeDescriptorPermissionAttribute;

  end;

  [DNTypeName('System.Security.Permissions.TypeDescriptorPermissionAttribute')]
  DNTypeDescriptorPermissionAttribute = interface(DDN.mscorlib.DNCodeAccessSecurityAttribute)
  ['{6DCF1E46-EAFD-3107-8DDE-DBA52ADDDC5F}']
  { getters & setters } 

    function get_Flags: DNTypeDescriptorPermissionFlags;
    procedure set_Flags(value: DNTypeDescriptorPermissionFlags);
    function get_RestrictedRegistrationAccess: Boolean;
    procedure set_RestrictedRegistrationAccess(value: Boolean);
    function get_Action: DDN.mscorlib.DNSecurityAction;
    procedure set_Action(value: DDN.mscorlib.DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function CreatePermission: DDN.mscorlib.DNIPermission;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Flags: DNTypeDescriptorPermissionFlags read get_Flags write set_Flags;
    property RestrictedRegistrationAccess: Boolean read get_RestrictedRegistrationAccess write set_RestrictedRegistrationAccess;
    property Action: DDN.mscorlib.DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNTypeDescriptorPermissionAttribute = class(TDNGenericImport<DNTypeDescriptorPermissionAttributeClass, DNTypeDescriptorPermissionAttribute>) end;

  //-------------namespace: System.Web----------------
  DNAspNetHostingPermissionAttributeClass = interface(DDN.mscorlib.DNCodeAccessSecurityAttributeClass)
  ['{2909F112-246B-50CB-B1EE-8403DA428652}']
  { constructors } 

    {class} function init(action: DDN.mscorlib.DNSecurityAction): DNAspNetHostingPermissionAttribute;

  end;

  [DNTypeName('System.Web.AspNetHostingPermissionAttribute')]
  DNAspNetHostingPermissionAttribute = interface(DDN.mscorlib.DNCodeAccessSecurityAttribute)
  ['{2B8A741C-7F6F-314D-819A-4D758B6C3936}']
  { getters & setters } 

    function get_Level: DNAspNetHostingPermissionLevel;
    procedure set_Level(value: DNAspNetHostingPermissionLevel);
    function get_Action: DDN.mscorlib.DNSecurityAction;
    procedure set_Action(value: DDN.mscorlib.DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function CreatePermission: DDN.mscorlib.DNIPermission;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Level: DNAspNetHostingPermissionLevel read get_Level write set_Level;
    property Action: DDN.mscorlib.DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNAspNetHostingPermissionAttribute = class(TDNGenericImport<DNAspNetHostingPermissionAttributeClass, DNAspNetHostingPermissionAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNValueSerializerAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{BE65E1CF-6395-5CA7-886A-CD329462BC17}']
  { constructors } 

    {class} function init(valueSerializerType: DDN.mscorlib.DNType): DNValueSerializerAttribute; overload;
    {class} function init(valueSerializerTypeName: string): DNValueSerializerAttribute; overload;

  end;

  [DNTypeName('System.Windows.Markup.ValueSerializerAttribute')]
  DNValueSerializerAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{3C1C579F-3B5A-3370-950A-E75621977088}']
  { getters & setters } 

    function get_ValueSerializerType: DDN.mscorlib.DNType;
    function get_ValueSerializerTypeName: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ValueSerializerType: DDN.mscorlib.DNType read get_ValueSerializerType;
    property ValueSerializerTypeName: string read get_ValueSerializerTypeName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNValueSerializerAttribute = class(TDNGenericImport<DNValueSerializerAttributeClass, DNValueSerializerAttribute>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeAttributeArgumentClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4E5D91F5-6294-576B-8497-6519155E32CD}']
  { constructors } 

    {class} function init: DNCodeAttributeArgument; overload;
    {class} function init(value: DNCodeExpression): DNCodeAttributeArgument; overload;
    {class} function init(name: string; value: DNCodeExpression): DNCodeAttributeArgument; overload;

  end;

  [DNTypeName('System.CodeDom.CodeAttributeArgument')]
  DNCodeAttributeArgument = interface(DDN.mscorlib.DNObject)
  ['{06E6FAA2-7623-396A-B9F1-75D31A17CF27}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Value: DNCodeExpression;
    procedure set_Value(value: DNCodeExpression);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Value: DNCodeExpression read get_Value write set_Value;
  end;

  TDNCodeAttributeArgument = class(TDNGenericImport<DNCodeAttributeArgumentClass, DNCodeAttributeArgument>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeAttributeDeclarationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7824FFF9-FB44-5BB5-9E5E-CDA7E7ACF504}']
  { constructors } 

    {class} function init: DNCodeAttributeDeclaration; overload;
    {class} function init(name: string): DNCodeAttributeDeclaration; overload;
    {class} function init(name: string; arguments: TArray<DNCodeAttributeArgument>): DNCodeAttributeDeclaration; overload;
    {class} function init(attributeType: DNCodeTypeReference): DNCodeAttributeDeclaration; overload;
    {class} function init(attributeType: DNCodeTypeReference; arguments: TArray<DNCodeAttributeArgument>): DNCodeAttributeDeclaration; overload;

  end;

  [DNTypeName('System.CodeDom.CodeAttributeDeclaration')]
  DNCodeAttributeDeclaration = interface(DDN.mscorlib.DNObject)
  ['{C0BA0202-2FF3-3E0A-952A-B570B1371DB2}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Arguments: DNCodeAttributeArgumentCollection;
    function get_AttributeType: DNCodeTypeReference;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Arguments: DNCodeAttributeArgumentCollection read get_Arguments;
    property AttributeType: DNCodeTypeReference read get_AttributeType;
  end;

  TDNCodeAttributeDeclaration = class(TDNGenericImport<DNCodeAttributeDeclarationClass, DNCodeAttributeDeclaration>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeCatchClauseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{508A1083-8B62-526B-B936-B3AD706E0793}']
  { constructors } 

    {class} function init: DNCodeCatchClause; overload;
    {class} function init(localName: string): DNCodeCatchClause; overload;
    {class} function init(localName: string; catchExceptionType: DNCodeTypeReference): DNCodeCatchClause; overload;
    {class} function init(localName: string; catchExceptionType: DNCodeTypeReference; statements: TArray<DNCodeStatement>): DNCodeCatchClause; overload;

  end;

  [DNTypeName('System.CodeDom.CodeCatchClause')]
  DNCodeCatchClause = interface(DDN.mscorlib.DNObject)
  ['{548F7954-B3FD-39E0-9A30-9D8FC9443C0E}']
  { getters & setters } 

    function get_LocalName: string;
    procedure set_LocalName(value: string);
    function get_CatchExceptionType: DNCodeTypeReference;
    procedure set_CatchExceptionType(value: DNCodeTypeReference);
    function get_Statements: DNCodeStatementCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LocalName: string read get_LocalName write set_LocalName;
    property CatchExceptionType: DNCodeTypeReference read get_CatchExceptionType write set_CatchExceptionType;
    property Statements: DNCodeStatementCollection read get_Statements;
  end;

  TDNCodeCatchClause = class(TDNGenericImport<DNCodeCatchClauseClass, DNCodeCatchClause>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeLinePragmaClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FC5E1FFF-E8E2-5E55-B8FA-CDC84AF587E7}']
  { constructors } 

    {class} function init: DNCodeLinePragma; overload;
    {class} function init(fileName: string; lineNumber: Int32): DNCodeLinePragma; overload;

  end;

  [DNTypeName('System.CodeDom.CodeLinePragma')]
  DNCodeLinePragma = interface(DDN.mscorlib.DNObject)
  ['{17575EA6-BE56-381E-88E7-74B376743E77}']
  { getters & setters } 

    function get_FileName: string;
    procedure set_FileName(value: string);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FileName: string read get_FileName write set_FileName;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
  end;

  TDNCodeLinePragma = class(TDNGenericImport<DNCodeLinePragmaClass, DNCodeLinePragma>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeNamespaceImportCollectionClass = interface(DNObjectClass)
  ['{012A8777-FF9A-5B5F-8413-661E038DADC9}']
  { constructors } 

    {class} function init: DNCodeNamespaceImportCollection;

  end;

  [DNTypeName('System.CodeDom.CodeNamespaceImportCollection')]
  DNCodeNamespaceImportCollection = interface(DDN.mscorlib.DNIList)
  ['{7A168834-5605-30DB-8274-6B21E621A955}']
  { getters & setters } 

    function get_Item(index: Int32): DNCodeNamespaceImport;
    procedure set_Item(index: Int32; value: DNCodeNamespaceImport);
    function get_Count: Int32;

  { methods } 

    procedure Add(value: DNCodeNamespaceImport);
    procedure AddRange(value: TArray<DNCodeNamespaceImport>);
    procedure Clear;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCodeNamespaceImport read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNCodeNamespaceImportCollection = class(TDNGenericImport<DNCodeNamespaceImportCollectionClass, DNCodeNamespaceImportCollection>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeObjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D861AE64-6D47-5422-B040-EA1E3D046F93}']
  { constructors } 

    {class} function init: DNCodeObject;

  end;

  [DNTypeName('System.CodeDom.CodeObject')]
  DNCodeObject = interface(DDN.mscorlib.DNObject)
  ['{88D0C986-398A-3A31-9349-B0736357C40B}']
  { getters & setters } 

    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeObject = class(TDNGenericImport<DNCodeObjectClass, DNCodeObject>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeCommentClass = interface(DNCodeObjectClass)
  ['{19139269-2E87-5345-9E35-665F5A4B8F90}']
  { constructors } 

    {class} function init: DNCodeComment; overload;
    {class} function init(text: string): DNCodeComment; overload;
    {class} function init(text: string; docComment: Boolean): DNCodeComment; overload;

  end;

  [DNTypeName('System.CodeDom.CodeComment')]
  DNCodeComment = interface(DNCodeObject)
  ['{F3E7E9C5-E63A-3F3B-A4F8-096E82664819}']
  { getters & setters } 

    function get_DocComment: Boolean;
    procedure set_DocComment(value: Boolean);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DocComment: Boolean read get_DocComment write set_DocComment;
    property Text: string read get_Text write set_Text;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeComment = class(TDNGenericImport<DNCodeCommentClass, DNCodeComment>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeCompileUnitClass = interface(DNCodeObjectClass)
  ['{B97554D4-9B0B-5145-A41D-A3E6D5223053}']
  { constructors } 

    {class} function init: DNCodeCompileUnit;

  end;

  [DNTypeName('System.CodeDom.CodeCompileUnit')]
  DNCodeCompileUnit = interface(DNCodeObject)
  ['{25A5D609-4D61-3C52-A3E1-49EF93066FD1}']
  { getters & setters } 

    function get_Namespaces: DNCodeNamespaceCollection;
    function get_ReferencedAssemblies: DNStringCollection;
    function get_AssemblyCustomAttributes: DNCodeAttributeDeclarationCollection;
    function get_StartDirectives: DNCodeDirectiveCollection;
    function get_EndDirectives: DNCodeDirectiveCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Namespaces: DNCodeNamespaceCollection read get_Namespaces;
    property ReferencedAssemblies: DNStringCollection read get_ReferencedAssemblies;
    property AssemblyCustomAttributes: DNCodeAttributeDeclarationCollection read get_AssemblyCustomAttributes;
    property StartDirectives: DNCodeDirectiveCollection read get_StartDirectives;
    property EndDirectives: DNCodeDirectiveCollection read get_EndDirectives;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeCompileUnit = class(TDNGenericImport<DNCodeCompileUnitClass, DNCodeCompileUnit>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeSnippetCompileUnitClass = interface(DNCodeCompileUnitClass)
  ['{429FC1A5-4594-5CA0-B986-9CC1F6721AFD}']
  { constructors } 

    {class} function init: DNCodeSnippetCompileUnit; overload;
    {class} function init(value: string): DNCodeSnippetCompileUnit; overload;

  end;

  [DNTypeName('System.CodeDom.CodeSnippetCompileUnit')]
  DNCodeSnippetCompileUnit = interface(DNCodeCompileUnit)
  ['{AF2DF285-73D3-3623-AEAB-1CDBCF75A9D0}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_LinePragma: DNCodeLinePragma;
    procedure set_LinePragma(value: DNCodeLinePragma);
    function get_Namespaces: DNCodeNamespaceCollection;
    function get_ReferencedAssemblies: DNStringCollection;
    function get_AssemblyCustomAttributes: DNCodeAttributeDeclarationCollection;
    function get_StartDirectives: DNCodeDirectiveCollection;
    function get_EndDirectives: DNCodeDirectiveCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property LinePragma: DNCodeLinePragma read get_LinePragma write set_LinePragma;
    property Namespaces: DNCodeNamespaceCollection read get_Namespaces;
    property ReferencedAssemblies: DNStringCollection read get_ReferencedAssemblies;
    property AssemblyCustomAttributes: DNCodeAttributeDeclarationCollection read get_AssemblyCustomAttributes;
    property StartDirectives: DNCodeDirectiveCollection read get_StartDirectives;
    property EndDirectives: DNCodeDirectiveCollection read get_EndDirectives;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeSnippetCompileUnit = class(TDNGenericImport<DNCodeSnippetCompileUnitClass, DNCodeSnippetCompileUnit>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeDirectiveClass = interface(DNCodeObjectClass)
  ['{CAC54AE4-7B24-5ECD-884F-4107127C4BAA}']
  { constructors } 

    {class} function init: DNCodeDirective;

  end;

  [DNTypeName('System.CodeDom.CodeDirective')]
  DNCodeDirective = interface(DNCodeObject)
  ['{6B405F7D-01CA-3595-A65B-34CB0168ACA0}']
  { getters & setters } 

    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeDirective = class(TDNGenericImport<DNCodeDirectiveClass, DNCodeDirective>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeChecksumPragmaClass = interface(DNCodeDirectiveClass)
  ['{5F74D519-929A-5937-B703-859CF8B06340}']
  { constructors } 

    {class} function init: DNCodeChecksumPragma; overload;
    {class} function init(fileName: string; checksumAlgorithmId: DDN.mscorlib.DNGuid; checksumData: TArray<Byte>): DNCodeChecksumPragma; overload;

  end;

  [DNTypeName('System.CodeDom.CodeChecksumPragma')]
  DNCodeChecksumPragma = interface(DNCodeDirective)
  ['{E1845F73-C0CC-3B6B-B913-6E43F42D8BA1}']
  { getters & setters } 

    function get_FileName: string;
    procedure set_FileName(value: string);
    function get_ChecksumAlgorithmId: DDN.mscorlib.DNGuid;
    procedure set_ChecksumAlgorithmId(value: DDN.mscorlib.DNGuid);
    function get_ChecksumData: TArray<Byte>;
    procedure set_ChecksumData(value: TArray<Byte>);
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FileName: string read get_FileName write set_FileName;
    property ChecksumAlgorithmId: DDN.mscorlib.DNGuid read get_ChecksumAlgorithmId write set_ChecksumAlgorithmId;
    property ChecksumData: TArray<Byte> read get_ChecksumData write set_ChecksumData;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeChecksumPragma = class(TDNGenericImport<DNCodeChecksumPragmaClass, DNCodeChecksumPragma>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeRegionDirectiveClass = interface(DNCodeDirectiveClass)
  ['{239A7D2C-A14F-5D56-8B63-DD884A66B59F}']
  { constructors } 

    {class} function init: DNCodeRegionDirective; overload;
    {class} function init(regionMode: DNCodeRegionMode; regionText: string): DNCodeRegionDirective; overload;

  end;

  [DNTypeName('System.CodeDom.CodeRegionDirective')]
  DNCodeRegionDirective = interface(DNCodeDirective)
  ['{932861EC-65C4-30F0-905D-905B9CE98979}']
  { getters & setters } 

    function get_RegionText: string;
    procedure set_RegionText(value: string);
    function get_RegionMode: DNCodeRegionMode;
    procedure set_RegionMode(value: DNCodeRegionMode);
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RegionText: string read get_RegionText write set_RegionText;
    property RegionMode: DNCodeRegionMode read get_RegionMode write set_RegionMode;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeRegionDirective = class(TDNGenericImport<DNCodeRegionDirectiveClass, DNCodeRegionDirective>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeExpressionClass = interface(DNCodeObjectClass)
  ['{CCDF92CD-6BE7-5D71-8D5D-5CA584CFCE2D}']
  { constructors } 

    {class} function init: DNCodeExpression;

  end;

  [DNTypeName('System.CodeDom.CodeExpression')]
  DNCodeExpression = interface(DNCodeObject)
  ['{F4267FE0-72E6-34E2-9093-17DEA43078C1}']
  { getters & setters } 

    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeExpression = class(TDNGenericImport<DNCodeExpressionClass, DNCodeExpression>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeArgumentReferenceExpressionClass = interface(DNCodeExpressionClass)
  ['{944AAF44-959D-5804-BFF0-B2C623EE37B9}']
  { constructors } 

    {class} function init: DNCodeArgumentReferenceExpression; overload;
    {class} function init(parameterName: string): DNCodeArgumentReferenceExpression; overload;

  end;

  [DNTypeName('System.CodeDom.CodeArgumentReferenceExpression')]
  DNCodeArgumentReferenceExpression = interface(DNCodeExpression)
  ['{3E3F971A-A80D-3468-A9EB-3113CE46D13A}']
  { getters & setters } 

    function get_ParameterName: string;
    procedure set_ParameterName(value: string);
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ParameterName: string read get_ParameterName write set_ParameterName;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeArgumentReferenceExpression = class(TDNGenericImport<DNCodeArgumentReferenceExpressionClass, DNCodeArgumentReferenceExpression>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeArrayCreateExpressionClass = interface(DNCodeExpressionClass)
  ['{B314FF9D-B6C6-5EA3-AC78-B6E5AD32FCD9}']
  { constructors } 

    {class} function init: DNCodeArrayCreateExpression; overload;
    {class} function init(createType: DNCodeTypeReference; initializers: TArray<DNCodeExpression>): DNCodeArrayCreateExpression; overload;
    {class} function init(createType: string; initializers: TArray<DNCodeExpression>): DNCodeArrayCreateExpression; overload;
    {class} function init(createType: DDN.mscorlib.DNType; initializers: TArray<DNCodeExpression>): DNCodeArrayCreateExpression; overload;
    {class} function init(createType: DNCodeTypeReference; size: Int32): DNCodeArrayCreateExpression; overload;
    {class} function init(createType: string; size: Int32): DNCodeArrayCreateExpression; overload;
    {class} function init(createType: DDN.mscorlib.DNType; size: Int32): DNCodeArrayCreateExpression; overload;
    {class} function init(createType: DNCodeTypeReference; size: DNCodeExpression): DNCodeArrayCreateExpression; overload;
    {class} function init(createType: string; size: DNCodeExpression): DNCodeArrayCreateExpression; overload;
    {class} function init(createType: DDN.mscorlib.DNType; size: DNCodeExpression): DNCodeArrayCreateExpression; overload;

  end;

  [DNTypeName('System.CodeDom.CodeArrayCreateExpression')]
  DNCodeArrayCreateExpression = interface(DNCodeExpression)
  ['{24B3BCED-984A-340B-923C-C9B39D94D5A9}']
  { getters & setters } 

    function get_CreateType: DNCodeTypeReference;
    procedure set_CreateType(value: DNCodeTypeReference);
    function get_Initializers: DNCodeExpressionCollection;
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_SizeExpression: DNCodeExpression;
    procedure set_SizeExpression(value: DNCodeExpression);
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CreateType: DNCodeTypeReference read get_CreateType write set_CreateType;
    property Initializers: DNCodeExpressionCollection read get_Initializers;
    property Size: Int32 read get_Size write set_Size;
    property SizeExpression: DNCodeExpression read get_SizeExpression write set_SizeExpression;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeArrayCreateExpression = class(TDNGenericImport<DNCodeArrayCreateExpressionClass, DNCodeArrayCreateExpression>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeArrayIndexerExpressionClass = interface(DNCodeExpressionClass)
  ['{526F78C2-A0F5-54C3-94B3-77F4A5CFFBB6}']
  { constructors } 

    {class} function init: DNCodeArrayIndexerExpression; overload;
    {class} function init(targetObject: DNCodeExpression; indices: TArray<DNCodeExpression>): DNCodeArrayIndexerExpression; overload;

  end;

  [DNTypeName('System.CodeDom.CodeArrayIndexerExpression')]
  DNCodeArrayIndexerExpression = interface(DNCodeExpression)
  ['{8C0BC333-6F03-3228-8B5C-31C8627DAAB3}']
  { getters & setters } 

    function get_TargetObject: DNCodeExpression;
    procedure set_TargetObject(value: DNCodeExpression);
    function get_Indices: DNCodeExpressionCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetObject: DNCodeExpression read get_TargetObject write set_TargetObject;
    property Indices: DNCodeExpressionCollection read get_Indices;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeArrayIndexerExpression = class(TDNGenericImport<DNCodeArrayIndexerExpressionClass, DNCodeArrayIndexerExpression>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeBaseReferenceExpressionClass = interface(DNCodeExpressionClass)
  ['{810D3C5A-60F7-514B-B5AC-BBC4A826DDE0}']
  { constructors } 

    {class} function init: DNCodeBaseReferenceExpression;

  end;

  [DNTypeName('System.CodeDom.CodeBaseReferenceExpression')]
  DNCodeBaseReferenceExpression = interface(DNCodeExpression)
  ['{3A9E7044-FBD0-3E23-82AE-F0DFB86C0C4E}']
  { getters & setters } 

    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeBaseReferenceExpression = class(TDNGenericImport<DNCodeBaseReferenceExpressionClass, DNCodeBaseReferenceExpression>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeBinaryOperatorExpressionClass = interface(DNCodeExpressionClass)
  ['{5B095684-9392-58D2-98A9-B184940548E6}']
  { constructors } 

    {class} function init: DNCodeBinaryOperatorExpression; overload;
    {class} function init(left: DNCodeExpression; op: DNCodeBinaryOperatorType; right: DNCodeExpression): DNCodeBinaryOperatorExpression; overload;

  end;

  [DNTypeName('System.CodeDom.CodeBinaryOperatorExpression')]
  DNCodeBinaryOperatorExpression = interface(DNCodeExpression)
  ['{30776C84-E88E-330D-8CE2-B5BF1E48427D}']
  { getters & setters } 

    function get_Right: DNCodeExpression;
    procedure set_Right(value: DNCodeExpression);
    function get_Left: DNCodeExpression;
    procedure set_Left(value: DNCodeExpression);
    function get_Operator: DNCodeBinaryOperatorType;
    procedure set_Operator(value: DNCodeBinaryOperatorType);
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Right: DNCodeExpression read get_Right write set_Right;
    property Left: DNCodeExpression read get_Left write set_Left;
    property Operator: DNCodeBinaryOperatorType read get_Operator write set_Operator;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeBinaryOperatorExpression = class(TDNGenericImport<DNCodeBinaryOperatorExpressionClass, DNCodeBinaryOperatorExpression>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeCastExpressionClass = interface(DNCodeExpressionClass)
  ['{7E3598DE-8EE0-59AA-9B34-65D8AC49B42A}']
  { constructors } 

    {class} function init: DNCodeCastExpression; overload;
    {class} function init(targetType: DNCodeTypeReference; expression: DNCodeExpression): DNCodeCastExpression; overload;
    {class} function init(targetType: string; expression: DNCodeExpression): DNCodeCastExpression; overload;
    {class} function init(targetType: DDN.mscorlib.DNType; expression: DNCodeExpression): DNCodeCastExpression; overload;

  end;

  [DNTypeName('System.CodeDom.CodeCastExpression')]
  DNCodeCastExpression = interface(DNCodeExpression)
  ['{DE2AE793-C1C1-3C33-8B9C-0D8F90301860}']
  { getters & setters } 

    function get_TargetType: DNCodeTypeReference;
    procedure set_TargetType(value: DNCodeTypeReference);
    function get_Expression: DNCodeExpression;
    procedure set_Expression(value: DNCodeExpression);
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetType: DNCodeTypeReference read get_TargetType write set_TargetType;
    property Expression: DNCodeExpression read get_Expression write set_Expression;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeCastExpression = class(TDNGenericImport<DNCodeCastExpressionClass, DNCodeCastExpression>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeDefaultValueExpressionClass = interface(DNCodeExpressionClass)
  ['{6DA158D1-FF2F-5578-8F88-D45EA24B8AF6}']
  { constructors } 

    {class} function init: DNCodeDefaultValueExpression; overload;
    {class} function init(&type: DNCodeTypeReference): DNCodeDefaultValueExpression; overload;

  end;

  [DNTypeName('System.CodeDom.CodeDefaultValueExpression')]
  DNCodeDefaultValueExpression = interface(DNCodeExpression)
  ['{5AECB7A2-5797-3BFF-9B86-FC4CB9AE4F41}']
  { getters & setters } 

    function get_Type: DNCodeTypeReference;
    procedure set_Type(value: DNCodeTypeReference);
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNCodeTypeReference read get_Type write set_Type;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeDefaultValueExpression = class(TDNGenericImport<DNCodeDefaultValueExpressionClass, DNCodeDefaultValueExpression>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeDelegateCreateExpressionClass = interface(DNCodeExpressionClass)
  ['{FD7BB3E8-072E-5208-9604-7FD85DA476E4}']
  { constructors } 

    {class} function init: DNCodeDelegateCreateExpression; overload;
    {class} function init(delegateType: DNCodeTypeReference; targetObject: DNCodeExpression; methodName: string): DNCodeDelegateCreateExpression; overload;

  end;

  [DNTypeName('System.CodeDom.CodeDelegateCreateExpression')]
  DNCodeDelegateCreateExpression = interface(DNCodeExpression)
  ['{92FB692E-211C-33DA-BE48-05B690D3F00B}']
  { getters & setters } 

    function get_DelegateType: DNCodeTypeReference;
    procedure set_DelegateType(value: DNCodeTypeReference);
    function get_TargetObject: DNCodeExpression;
    procedure set_TargetObject(value: DNCodeExpression);
    function get_MethodName: string;
    procedure set_MethodName(value: string);
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DelegateType: DNCodeTypeReference read get_DelegateType write set_DelegateType;
    property TargetObject: DNCodeExpression read get_TargetObject write set_TargetObject;
    property MethodName: string read get_MethodName write set_MethodName;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeDelegateCreateExpression = class(TDNGenericImport<DNCodeDelegateCreateExpressionClass, DNCodeDelegateCreateExpression>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeDelegateInvokeExpressionClass = interface(DNCodeExpressionClass)
  ['{02B66BA9-0070-5492-BC11-B21A31939264}']
  { constructors } 

    {class} function init: DNCodeDelegateInvokeExpression; overload;
    {class} function init(targetObject: DNCodeExpression): DNCodeDelegateInvokeExpression; overload;
    {class} function init(targetObject: DNCodeExpression; parameters: TArray<DNCodeExpression>): DNCodeDelegateInvokeExpression; overload;

  end;

  [DNTypeName('System.CodeDom.CodeDelegateInvokeExpression')]
  DNCodeDelegateInvokeExpression = interface(DNCodeExpression)
  ['{D79B10B1-16A3-3A23-A606-CE1227F3765A}']
  { getters & setters } 

    function get_TargetObject: DNCodeExpression;
    procedure set_TargetObject(value: DNCodeExpression);
    function get_Parameters: DNCodeExpressionCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetObject: DNCodeExpression read get_TargetObject write set_TargetObject;
    property Parameters: DNCodeExpressionCollection read get_Parameters;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeDelegateInvokeExpression = class(TDNGenericImport<DNCodeDelegateInvokeExpressionClass, DNCodeDelegateInvokeExpression>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeDirectionExpressionClass = interface(DNCodeExpressionClass)
  ['{9294BA0F-BAFD-599B-87F4-6934B018F7C6}']
  { constructors } 

    {class} function init: DNCodeDirectionExpression; overload;
    {class} function init(direction: DNFieldDirection; expression: DNCodeExpression): DNCodeDirectionExpression; overload;

  end;

  [DNTypeName('System.CodeDom.CodeDirectionExpression')]
  DNCodeDirectionExpression = interface(DNCodeExpression)
  ['{5FEA4BE0-D7FC-3DAF-877E-16F181F18BAE}']
  { getters & setters } 

    function get_Expression: DNCodeExpression;
    procedure set_Expression(value: DNCodeExpression);
    function get_Direction: DNFieldDirection;
    procedure set_Direction(value: DNFieldDirection);
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Expression: DNCodeExpression read get_Expression write set_Expression;
    property Direction: DNFieldDirection read get_Direction write set_Direction;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeDirectionExpression = class(TDNGenericImport<DNCodeDirectionExpressionClass, DNCodeDirectionExpression>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeEventReferenceExpressionClass = interface(DNCodeExpressionClass)
  ['{B560BA39-248F-5900-B443-BB6335221D1A}']
  { constructors } 

    {class} function init: DNCodeEventReferenceExpression; overload;
    {class} function init(targetObject: DNCodeExpression; eventName: string): DNCodeEventReferenceExpression; overload;

  end;

  [DNTypeName('System.CodeDom.CodeEventReferenceExpression')]
  DNCodeEventReferenceExpression = interface(DNCodeExpression)
  ['{E396945B-2690-377E-A992-12775D444CD7}']
  { getters & setters } 

    function get_TargetObject: DNCodeExpression;
    procedure set_TargetObject(value: DNCodeExpression);
    function get_EventName: string;
    procedure set_EventName(value: string);
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetObject: DNCodeExpression read get_TargetObject write set_TargetObject;
    property EventName: string read get_EventName write set_EventName;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeEventReferenceExpression = class(TDNGenericImport<DNCodeEventReferenceExpressionClass, DNCodeEventReferenceExpression>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeFieldReferenceExpressionClass = interface(DNCodeExpressionClass)
  ['{EA1ABDF2-D2E0-5748-AFEB-584C5B6B4C29}']
  { constructors } 

    {class} function init: DNCodeFieldReferenceExpression; overload;
    {class} function init(targetObject: DNCodeExpression; fieldName: string): DNCodeFieldReferenceExpression; overload;

  end;

  [DNTypeName('System.CodeDom.CodeFieldReferenceExpression')]
  DNCodeFieldReferenceExpression = interface(DNCodeExpression)
  ['{E2F01F29-A264-387B-AE29-A273AC89EEE7}']
  { getters & setters } 

    function get_TargetObject: DNCodeExpression;
    procedure set_TargetObject(value: DNCodeExpression);
    function get_FieldName: string;
    procedure set_FieldName(value: string);
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetObject: DNCodeExpression read get_TargetObject write set_TargetObject;
    property FieldName: string read get_FieldName write set_FieldName;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeFieldReferenceExpression = class(TDNGenericImport<DNCodeFieldReferenceExpressionClass, DNCodeFieldReferenceExpression>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeIndexerExpressionClass = interface(DNCodeExpressionClass)
  ['{38CC3B4B-C5BD-5C0F-B717-E1069E3FB0E6}']
  { constructors } 

    {class} function init: DNCodeIndexerExpression; overload;
    {class} function init(targetObject: DNCodeExpression; indices: TArray<DNCodeExpression>): DNCodeIndexerExpression; overload;

  end;

  [DNTypeName('System.CodeDom.CodeIndexerExpression')]
  DNCodeIndexerExpression = interface(DNCodeExpression)
  ['{4D19B9BB-0979-38BE-B438-29997E58C2D1}']
  { getters & setters } 

    function get_TargetObject: DNCodeExpression;
    procedure set_TargetObject(value: DNCodeExpression);
    function get_Indices: DNCodeExpressionCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetObject: DNCodeExpression read get_TargetObject write set_TargetObject;
    property Indices: DNCodeExpressionCollection read get_Indices;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeIndexerExpression = class(TDNGenericImport<DNCodeIndexerExpressionClass, DNCodeIndexerExpression>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeMethodInvokeExpressionClass = interface(DNCodeExpressionClass)
  ['{16401554-76ED-5B9B-96CD-27F7D16F03EF}']
  { constructors } 

    {class} function init: DNCodeMethodInvokeExpression; overload;
    {class} function init(method: DNCodeMethodReferenceExpression; parameters: TArray<DNCodeExpression>): DNCodeMethodInvokeExpression; overload;
    {class} function init(targetObject: DNCodeExpression; methodName: string; parameters: TArray<DNCodeExpression>): DNCodeMethodInvokeExpression; overload;

  end;

  [DNTypeName('System.CodeDom.CodeMethodInvokeExpression')]
  DNCodeMethodInvokeExpression = interface(DNCodeExpression)
  ['{62AC67B4-2088-3DB7-9A80-154EFE9C6CAF}']
  { getters & setters } 

    function get_Method: DNCodeMethodReferenceExpression;
    procedure set_Method(value: DNCodeMethodReferenceExpression);
    function get_Parameters: DNCodeExpressionCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Method: DNCodeMethodReferenceExpression read get_Method write set_Method;
    property Parameters: DNCodeExpressionCollection read get_Parameters;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeMethodInvokeExpression = class(TDNGenericImport<DNCodeMethodInvokeExpressionClass, DNCodeMethodInvokeExpression>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeMethodReferenceExpressionClass = interface(DNCodeExpressionClass)
  ['{449AB7D2-E444-5566-B986-E5AE2A416005}']
  { constructors } 

    {class} function init: DNCodeMethodReferenceExpression; overload;
    {class} function init(targetObject: DNCodeExpression; methodName: string): DNCodeMethodReferenceExpression; overload;
    {class} function init(targetObject: DNCodeExpression; methodName: string; typeParameters: TArray<DNCodeTypeReference>): DNCodeMethodReferenceExpression; overload;

  end;

  [DNTypeName('System.CodeDom.CodeMethodReferenceExpression')]
  DNCodeMethodReferenceExpression = interface(DNCodeExpression)
  ['{36AE2637-C0A4-3214-8A93-AEE1CABD540E}']
  { getters & setters } 

    function get_TargetObject: DNCodeExpression;
    procedure set_TargetObject(value: DNCodeExpression);
    function get_MethodName: string;
    procedure set_MethodName(value: string);
    function get_TypeArguments: DNCodeTypeReferenceCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetObject: DNCodeExpression read get_TargetObject write set_TargetObject;
    property MethodName: string read get_MethodName write set_MethodName;
    property TypeArguments: DNCodeTypeReferenceCollection read get_TypeArguments;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeMethodReferenceExpression = class(TDNGenericImport<DNCodeMethodReferenceExpressionClass, DNCodeMethodReferenceExpression>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeObjectCreateExpressionClass = interface(DNCodeExpressionClass)
  ['{B455F025-EFA6-5C80-91FF-040407469FF2}']
  { constructors } 

    {class} function init: DNCodeObjectCreateExpression; overload;
    {class} function init(createType: DNCodeTypeReference; parameters: TArray<DNCodeExpression>): DNCodeObjectCreateExpression; overload;
    {class} function init(createType: string; parameters: TArray<DNCodeExpression>): DNCodeObjectCreateExpression; overload;
    {class} function init(createType: DDN.mscorlib.DNType; parameters: TArray<DNCodeExpression>): DNCodeObjectCreateExpression; overload;

  end;

  [DNTypeName('System.CodeDom.CodeObjectCreateExpression')]
  DNCodeObjectCreateExpression = interface(DNCodeExpression)
  ['{F3BA98C3-39CF-3C2D-ADA5-75BD63D7AF08}']
  { getters & setters } 

    function get_CreateType: DNCodeTypeReference;
    procedure set_CreateType(value: DNCodeTypeReference);
    function get_Parameters: DNCodeExpressionCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CreateType: DNCodeTypeReference read get_CreateType write set_CreateType;
    property Parameters: DNCodeExpressionCollection read get_Parameters;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeObjectCreateExpression = class(TDNGenericImport<DNCodeObjectCreateExpressionClass, DNCodeObjectCreateExpression>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeParameterDeclarationExpressionClass = interface(DNCodeExpressionClass)
  ['{5109A9FB-C563-5C84-80A2-BEA2640A2E4A}']
  { constructors } 

    {class} function init: DNCodeParameterDeclarationExpression; overload;
    {class} function init(&type: DNCodeTypeReference; name: string): DNCodeParameterDeclarationExpression; overload;
    {class} function init(&type: string; name: string): DNCodeParameterDeclarationExpression; overload;
    {class} function init(&type: DDN.mscorlib.DNType; name: string): DNCodeParameterDeclarationExpression; overload;

  end;

  [DNTypeName('System.CodeDom.CodeParameterDeclarationExpression')]
  DNCodeParameterDeclarationExpression = interface(DNCodeExpression)
  ['{6ACD3B02-EF29-31B9-8958-45B47BAD4A00}']
  { getters & setters } 

    function get_CustomAttributes: DNCodeAttributeDeclarationCollection;
    procedure set_CustomAttributes(value: DNCodeAttributeDeclarationCollection);
    function get_Direction: DNFieldDirection;
    procedure set_Direction(value: DNFieldDirection);
    function get_Type: DNCodeTypeReference;
    procedure set_Type(value: DNCodeTypeReference);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CustomAttributes: DNCodeAttributeDeclarationCollection read get_CustomAttributes write set_CustomAttributes;
    property Direction: DNFieldDirection read get_Direction write set_Direction;
    property &Type: DNCodeTypeReference read get_Type write set_Type;
    property Name: string read get_Name write set_Name;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeParameterDeclarationExpression = class(TDNGenericImport<DNCodeParameterDeclarationExpressionClass, DNCodeParameterDeclarationExpression>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodePrimitiveExpressionClass = interface(DNCodeExpressionClass)
  ['{D62BF899-12BB-55D2-9DE8-E60AACE117EF}']
  { constructors } 

    {class} function init: DNCodePrimitiveExpression; overload;
    {class} function init(value: DDN.mscorlib.DNObject): DNCodePrimitiveExpression; overload;

  end;

  [DNTypeName('System.CodeDom.CodePrimitiveExpression')]
  DNCodePrimitiveExpression = interface(DNCodeExpression)
  ['{6C1E6791-0558-3CD3-AAB8-C90A2B03EF5F}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodePrimitiveExpression = class(TDNGenericImport<DNCodePrimitiveExpressionClass, DNCodePrimitiveExpression>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodePropertyReferenceExpressionClass = interface(DNCodeExpressionClass)
  ['{8CD10B20-052D-5B00-BE08-16FE1166C070}']
  { constructors } 

    {class} function init: DNCodePropertyReferenceExpression; overload;
    {class} function init(targetObject: DNCodeExpression; propertyName: string): DNCodePropertyReferenceExpression; overload;

  end;

  [DNTypeName('System.CodeDom.CodePropertyReferenceExpression')]
  DNCodePropertyReferenceExpression = interface(DNCodeExpression)
  ['{9703F066-9C59-32C4-86B2-570E97AB75F2}']
  { getters & setters } 

    function get_TargetObject: DNCodeExpression;
    procedure set_TargetObject(value: DNCodeExpression);
    function get_PropertyName: string;
    procedure set_PropertyName(value: string);
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TargetObject: DNCodeExpression read get_TargetObject write set_TargetObject;
    property PropertyName: string read get_PropertyName write set_PropertyName;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodePropertyReferenceExpression = class(TDNGenericImport<DNCodePropertyReferenceExpressionClass, DNCodePropertyReferenceExpression>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodePropertySetValueReferenceExpressionClass = interface(DNCodeExpressionClass)
  ['{DAF08E74-000D-514B-809E-8AAE93C9E634}']
  { constructors } 

    {class} function init: DNCodePropertySetValueReferenceExpression;

  end;

  [DNTypeName('System.CodeDom.CodePropertySetValueReferenceExpression')]
  DNCodePropertySetValueReferenceExpression = interface(DNCodeExpression)
  ['{395C1A4D-AABB-3415-B527-8CB694777B84}']
  { getters & setters } 

    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodePropertySetValueReferenceExpression = class(TDNGenericImport<DNCodePropertySetValueReferenceExpressionClass, DNCodePropertySetValueReferenceExpression>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeSnippetExpressionClass = interface(DNCodeExpressionClass)
  ['{4272829E-AE04-5CA4-84F6-E6FC93382DF9}']
  { constructors } 

    {class} function init: DNCodeSnippetExpression; overload;
    {class} function init(value: string): DNCodeSnippetExpression; overload;

  end;

  [DNTypeName('System.CodeDom.CodeSnippetExpression')]
  DNCodeSnippetExpression = interface(DNCodeExpression)
  ['{509AF058-A0E5-32E6-AE00-15F8209D31F9}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeSnippetExpression = class(TDNGenericImport<DNCodeSnippetExpressionClass, DNCodeSnippetExpression>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeThisReferenceExpressionClass = interface(DNCodeExpressionClass)
  ['{98020518-CDE4-55FF-9AB3-52ACB6EAF607}']
  { constructors } 

    {class} function init: DNCodeThisReferenceExpression;

  end;

  [DNTypeName('System.CodeDom.CodeThisReferenceExpression')]
  DNCodeThisReferenceExpression = interface(DNCodeExpression)
  ['{21206362-562F-3F08-8F06-4BCFD2C95F29}']
  { getters & setters } 

    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeThisReferenceExpression = class(TDNGenericImport<DNCodeThisReferenceExpressionClass, DNCodeThisReferenceExpression>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeTypeOfExpressionClass = interface(DNCodeExpressionClass)
  ['{3E46F5F3-4042-589B-AF8C-32213DD6CA96}']
  { constructors } 

    {class} function init: DNCodeTypeOfExpression; overload;
    {class} function init(&type: DNCodeTypeReference): DNCodeTypeOfExpression; overload;
    {class} function init(&type: string): DNCodeTypeOfExpression; overload;
    {class} function init(&type: DDN.mscorlib.DNType): DNCodeTypeOfExpression; overload;

  end;

  [DNTypeName('System.CodeDom.CodeTypeOfExpression')]
  DNCodeTypeOfExpression = interface(DNCodeExpression)
  ['{FB6A595A-B5DD-3361-8842-70E806D73573}']
  { getters & setters } 

    function get_Type: DNCodeTypeReference;
    procedure set_Type(value: DNCodeTypeReference);
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNCodeTypeReference read get_Type write set_Type;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeTypeOfExpression = class(TDNGenericImport<DNCodeTypeOfExpressionClass, DNCodeTypeOfExpression>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeTypeReferenceExpressionClass = interface(DNCodeExpressionClass)
  ['{D3872280-688C-5E75-BF16-B94064C319CC}']
  { constructors } 

    {class} function init: DNCodeTypeReferenceExpression; overload;
    {class} function init(&type: DNCodeTypeReference): DNCodeTypeReferenceExpression; overload;
    {class} function init(&type: string): DNCodeTypeReferenceExpression; overload;
    {class} function init(&type: DDN.mscorlib.DNType): DNCodeTypeReferenceExpression; overload;

  end;

  [DNTypeName('System.CodeDom.CodeTypeReferenceExpression')]
  DNCodeTypeReferenceExpression = interface(DNCodeExpression)
  ['{8871C106-C8BA-37A0-ADE2-E4AEBEC7E3C9}']
  { getters & setters } 

    function get_Type: DNCodeTypeReference;
    procedure set_Type(value: DNCodeTypeReference);
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNCodeTypeReference read get_Type write set_Type;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeTypeReferenceExpression = class(TDNGenericImport<DNCodeTypeReferenceExpressionClass, DNCodeTypeReferenceExpression>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeVariableReferenceExpressionClass = interface(DNCodeExpressionClass)
  ['{9EBB677E-DA76-556E-8ED1-23244E90D8D1}']
  { constructors } 

    {class} function init: DNCodeVariableReferenceExpression; overload;
    {class} function init(variableName: string): DNCodeVariableReferenceExpression; overload;

  end;

  [DNTypeName('System.CodeDom.CodeVariableReferenceExpression')]
  DNCodeVariableReferenceExpression = interface(DNCodeExpression)
  ['{39ABD141-93AE-397A-9E98-6F2E50124CEC}']
  { getters & setters } 

    function get_VariableName: string;
    procedure set_VariableName(value: string);
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property VariableName: string read get_VariableName write set_VariableName;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeVariableReferenceExpression = class(TDNGenericImport<DNCodeVariableReferenceExpressionClass, DNCodeVariableReferenceExpression>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeNamespaceClass = interface(DNCodeObjectClass)
  ['{0732F817-E71C-5B82-9A86-E4220CC818B9}']
  { constructors } 

    {class} function init: DNCodeNamespace; overload;
    {class} function init(name: string): DNCodeNamespace; overload;

  end;

  [DNTypeName('System.CodeDom.CodeNamespace')]
  DNCodeNamespace = interface(DNCodeObject)
  ['{DD1C0C7A-BC95-339A-8321-9DBF4803CAF4}']
  { getters & setters } 

    function get_Types: DNCodeTypeDeclarationCollection;
    function get_Imports: DNCodeNamespaceImportCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Comments: DNCodeCommentStatementCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { events } 

    procedure add_PopulateComments(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PopulateComments(value: DDN.mscorlib.DNEventHandler);
    procedure add_PopulateImports(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PopulateImports(value: DDN.mscorlib.DNEventHandler);
    procedure add_PopulateTypes(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PopulateTypes(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Types: DNCodeTypeDeclarationCollection read get_Types;
    property Imports: DNCodeNamespaceImportCollection read get_Imports;
    property Name: string read get_Name write set_Name;
    property Comments: DNCodeCommentStatementCollection read get_Comments;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeNamespace = class(TDNGenericImport<DNCodeNamespaceClass, DNCodeNamespace>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeNamespaceImportClass = interface(DNCodeObjectClass)
  ['{2DD74AF4-BBBB-538D-AF59-30434E0D3848}']
  { constructors } 

    {class} function init: DNCodeNamespaceImport; overload;
    {class} function init(nameSpace: string): DNCodeNamespaceImport; overload;

  end;

  [DNTypeName('System.CodeDom.CodeNamespaceImport')]
  DNCodeNamespaceImport = interface(DNCodeObject)
  ['{B0B32470-44A6-3DBC-BDB2-CE024F966088}']
  { getters & setters } 

    function get_LinePragma: DNCodeLinePragma;
    procedure set_LinePragma(value: DNCodeLinePragma);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LinePragma: DNCodeLinePragma read get_LinePragma write set_LinePragma;
    property Namespace: string read get_Namespace write set_Namespace;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeNamespaceImport = class(TDNGenericImport<DNCodeNamespaceImportClass, DNCodeNamespaceImport>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeStatementClass = interface(DNCodeObjectClass)
  ['{9B079EF9-EBDD-5F09-AEE6-D9A7ABBFE3A4}']
  { constructors } 

    {class} function init: DNCodeStatement;

  end;

  [DNTypeName('System.CodeDom.CodeStatement')]
  DNCodeStatement = interface(DNCodeObject)
  ['{10A98D9F-994D-3762-89B4-2116A95063EE}']
  { getters & setters } 

    function get_LinePragma: DNCodeLinePragma;
    procedure set_LinePragma(value: DNCodeLinePragma);
    function get_StartDirectives: DNCodeDirectiveCollection;
    function get_EndDirectives: DNCodeDirectiveCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LinePragma: DNCodeLinePragma read get_LinePragma write set_LinePragma;
    property StartDirectives: DNCodeDirectiveCollection read get_StartDirectives;
    property EndDirectives: DNCodeDirectiveCollection read get_EndDirectives;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeStatement = class(TDNGenericImport<DNCodeStatementClass, DNCodeStatement>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeAssignStatementClass = interface(DNCodeStatementClass)
  ['{850D1E31-3488-5A2A-A537-C0A0A6A95198}']
  { constructors } 

    {class} function init: DNCodeAssignStatement; overload;
    {class} function init(left: DNCodeExpression; right: DNCodeExpression): DNCodeAssignStatement; overload;

  end;

  [DNTypeName('System.CodeDom.CodeAssignStatement')]
  DNCodeAssignStatement = interface(DNCodeStatement)
  ['{E4350CAA-27C9-320E-AC79-71294ABDA592}']
  { getters & setters } 

    function get_Left: DNCodeExpression;
    procedure set_Left(value: DNCodeExpression);
    function get_Right: DNCodeExpression;
    procedure set_Right(value: DNCodeExpression);
    function get_LinePragma: DNCodeLinePragma;
    procedure set_LinePragma(value: DNCodeLinePragma);
    function get_StartDirectives: DNCodeDirectiveCollection;
    function get_EndDirectives: DNCodeDirectiveCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Left: DNCodeExpression read get_Left write set_Left;
    property Right: DNCodeExpression read get_Right write set_Right;
    property LinePragma: DNCodeLinePragma read get_LinePragma write set_LinePragma;
    property StartDirectives: DNCodeDirectiveCollection read get_StartDirectives;
    property EndDirectives: DNCodeDirectiveCollection read get_EndDirectives;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeAssignStatement = class(TDNGenericImport<DNCodeAssignStatementClass, DNCodeAssignStatement>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeAttachEventStatementClass = interface(DNCodeStatementClass)
  ['{1818B2E2-196A-5F33-9A3F-FEF592B95C71}']
  { constructors } 

    {class} function init: DNCodeAttachEventStatement; overload;
    {class} function init(eventRef: DNCodeEventReferenceExpression; listener: DNCodeExpression): DNCodeAttachEventStatement; overload;
    {class} function init(targetObject: DNCodeExpression; eventName: string; listener: DNCodeExpression): DNCodeAttachEventStatement; overload;

  end;

  [DNTypeName('System.CodeDom.CodeAttachEventStatement')]
  DNCodeAttachEventStatement = interface(DNCodeStatement)
  ['{1AB6B26C-A339-3B51-9308-44CA3A05F873}']
  { getters & setters } 

    function get_Event: DNCodeEventReferenceExpression;
    procedure set_Event(value: DNCodeEventReferenceExpression);
    function get_Listener: DNCodeExpression;
    procedure set_Listener(value: DNCodeExpression);
    function get_LinePragma: DNCodeLinePragma;
    procedure set_LinePragma(value: DNCodeLinePragma);
    function get_StartDirectives: DNCodeDirectiveCollection;
    function get_EndDirectives: DNCodeDirectiveCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Event: DNCodeEventReferenceExpression read get_Event write set_Event;
    property Listener: DNCodeExpression read get_Listener write set_Listener;
    property LinePragma: DNCodeLinePragma read get_LinePragma write set_LinePragma;
    property StartDirectives: DNCodeDirectiveCollection read get_StartDirectives;
    property EndDirectives: DNCodeDirectiveCollection read get_EndDirectives;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeAttachEventStatement = class(TDNGenericImport<DNCodeAttachEventStatementClass, DNCodeAttachEventStatement>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeCommentStatementClass = interface(DNCodeStatementClass)
  ['{E75CE08B-EE5F-54AB-8F49-C146239165B4}']
  { constructors } 

    {class} function init: DNCodeCommentStatement; overload;
    {class} function init(comment: DNCodeComment): DNCodeCommentStatement; overload;
    {class} function init(text: string): DNCodeCommentStatement; overload;
    {class} function init(text: string; docComment: Boolean): DNCodeCommentStatement; overload;

  end;

  [DNTypeName('System.CodeDom.CodeCommentStatement')]
  DNCodeCommentStatement = interface(DNCodeStatement)
  ['{F69F43D6-EF83-3723-8839-519D2421E927}']
  { getters & setters } 

    function get_Comment: DNCodeComment;
    procedure set_Comment(value: DNCodeComment);
    function get_LinePragma: DNCodeLinePragma;
    procedure set_LinePragma(value: DNCodeLinePragma);
    function get_StartDirectives: DNCodeDirectiveCollection;
    function get_EndDirectives: DNCodeDirectiveCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Comment: DNCodeComment read get_Comment write set_Comment;
    property LinePragma: DNCodeLinePragma read get_LinePragma write set_LinePragma;
    property StartDirectives: DNCodeDirectiveCollection read get_StartDirectives;
    property EndDirectives: DNCodeDirectiveCollection read get_EndDirectives;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeCommentStatement = class(TDNGenericImport<DNCodeCommentStatementClass, DNCodeCommentStatement>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeConditionStatementClass = interface(DNCodeStatementClass)
  ['{94925064-19B6-582E-ACFC-BB3BC4A82082}']
  { constructors } 

    {class} function init: DNCodeConditionStatement; overload;
    {class} function init(condition: DNCodeExpression; trueStatements: TArray<DNCodeStatement>): DNCodeConditionStatement; overload;
    {class} function init(condition: DNCodeExpression; trueStatements: TArray<DNCodeStatement>; falseStatements: TArray<DNCodeStatement>): DNCodeConditionStatement; overload;

  end;

  [DNTypeName('System.CodeDom.CodeConditionStatement')]
  DNCodeConditionStatement = interface(DNCodeStatement)
  ['{1BA2DE2F-EE39-3628-968F-0E12705013C4}']
  { getters & setters } 

    function get_Condition: DNCodeExpression;
    procedure set_Condition(value: DNCodeExpression);
    function get_TrueStatements: DNCodeStatementCollection;
    function get_FalseStatements: DNCodeStatementCollection;
    function get_LinePragma: DNCodeLinePragma;
    procedure set_LinePragma(value: DNCodeLinePragma);
    function get_StartDirectives: DNCodeDirectiveCollection;
    function get_EndDirectives: DNCodeDirectiveCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Condition: DNCodeExpression read get_Condition write set_Condition;
    property TrueStatements: DNCodeStatementCollection read get_TrueStatements;
    property FalseStatements: DNCodeStatementCollection read get_FalseStatements;
    property LinePragma: DNCodeLinePragma read get_LinePragma write set_LinePragma;
    property StartDirectives: DNCodeDirectiveCollection read get_StartDirectives;
    property EndDirectives: DNCodeDirectiveCollection read get_EndDirectives;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeConditionStatement = class(TDNGenericImport<DNCodeConditionStatementClass, DNCodeConditionStatement>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeExpressionStatementClass = interface(DNCodeStatementClass)
  ['{40824D65-E9AA-53CC-99A5-FEA19BB9586C}']
  { constructors } 

    {class} function init: DNCodeExpressionStatement; overload;
    {class} function init(expression: DNCodeExpression): DNCodeExpressionStatement; overload;

  end;

  [DNTypeName('System.CodeDom.CodeExpressionStatement')]
  DNCodeExpressionStatement = interface(DNCodeStatement)
  ['{ABC8FC89-D640-32FC-9E9F-04410010E5EC}']
  { getters & setters } 

    function get_Expression: DNCodeExpression;
    procedure set_Expression(value: DNCodeExpression);
    function get_LinePragma: DNCodeLinePragma;
    procedure set_LinePragma(value: DNCodeLinePragma);
    function get_StartDirectives: DNCodeDirectiveCollection;
    function get_EndDirectives: DNCodeDirectiveCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Expression: DNCodeExpression read get_Expression write set_Expression;
    property LinePragma: DNCodeLinePragma read get_LinePragma write set_LinePragma;
    property StartDirectives: DNCodeDirectiveCollection read get_StartDirectives;
    property EndDirectives: DNCodeDirectiveCollection read get_EndDirectives;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeExpressionStatement = class(TDNGenericImport<DNCodeExpressionStatementClass, DNCodeExpressionStatement>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeGotoStatementClass = interface(DNCodeStatementClass)
  ['{CF62F0AB-A3C4-56EF-B999-2D325FF858F7}']
  { constructors } 

    {class} function init: DNCodeGotoStatement; overload;
    {class} function init(&label: string): DNCodeGotoStatement; overload;

  end;

  [DNTypeName('System.CodeDom.CodeGotoStatement')]
  DNCodeGotoStatement = interface(DNCodeStatement)
  ['{148E03E0-C74E-3D67-BD3A-B27995F9AC49}']
  { getters & setters } 

    function get_Label: string;
    procedure set_Label(value: string);
    function get_LinePragma: DNCodeLinePragma;
    procedure set_LinePragma(value: DNCodeLinePragma);
    function get_StartDirectives: DNCodeDirectiveCollection;
    function get_EndDirectives: DNCodeDirectiveCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Label: string read get_Label write set_Label;
    property LinePragma: DNCodeLinePragma read get_LinePragma write set_LinePragma;
    property StartDirectives: DNCodeDirectiveCollection read get_StartDirectives;
    property EndDirectives: DNCodeDirectiveCollection read get_EndDirectives;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeGotoStatement = class(TDNGenericImport<DNCodeGotoStatementClass, DNCodeGotoStatement>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeIterationStatementClass = interface(DNCodeStatementClass)
  ['{22CA4F09-69E0-59C7-977A-56A4F4CC599B}']
  { constructors } 

    {class} function init: DNCodeIterationStatement; overload;
    {class} function init(initStatement: DNCodeStatement; testExpression: DNCodeExpression; incrementStatement: DNCodeStatement; statements: TArray<DNCodeStatement>): DNCodeIterationStatement; overload;

  end;

  [DNTypeName('System.CodeDom.CodeIterationStatement')]
  DNCodeIterationStatement = interface(DNCodeStatement)
  ['{421C8130-0316-3993-801D-E6BE3A159BAA}']
  { getters & setters } 

    function get_InitStatement: DNCodeStatement;
    procedure set_InitStatement(value: DNCodeStatement);
    function get_TestExpression: DNCodeExpression;
    procedure set_TestExpression(value: DNCodeExpression);
    function get_IncrementStatement: DNCodeStatement;
    procedure set_IncrementStatement(value: DNCodeStatement);
    function get_Statements: DNCodeStatementCollection;
    function get_LinePragma: DNCodeLinePragma;
    procedure set_LinePragma(value: DNCodeLinePragma);
    function get_StartDirectives: DNCodeDirectiveCollection;
    function get_EndDirectives: DNCodeDirectiveCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property InitStatement: DNCodeStatement read get_InitStatement write set_InitStatement;
    property TestExpression: DNCodeExpression read get_TestExpression write set_TestExpression;
    property IncrementStatement: DNCodeStatement read get_IncrementStatement write set_IncrementStatement;
    property Statements: DNCodeStatementCollection read get_Statements;
    property LinePragma: DNCodeLinePragma read get_LinePragma write set_LinePragma;
    property StartDirectives: DNCodeDirectiveCollection read get_StartDirectives;
    property EndDirectives: DNCodeDirectiveCollection read get_EndDirectives;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeIterationStatement = class(TDNGenericImport<DNCodeIterationStatementClass, DNCodeIterationStatement>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeLabeledStatementClass = interface(DNCodeStatementClass)
  ['{81E93A0E-43D1-5D1F-BA1B-FAD111C9D03B}']
  { constructors } 

    {class} function init: DNCodeLabeledStatement; overload;
    {class} function init(&label: string): DNCodeLabeledStatement; overload;
    {class} function init(&label: string; statement: DNCodeStatement): DNCodeLabeledStatement; overload;

  end;

  [DNTypeName('System.CodeDom.CodeLabeledStatement')]
  DNCodeLabeledStatement = interface(DNCodeStatement)
  ['{4975B127-5464-3E9E-B4AA-D6DF3721189A}']
  { getters & setters } 

    function get_Label: string;
    procedure set_Label(value: string);
    function get_Statement: DNCodeStatement;
    procedure set_Statement(value: DNCodeStatement);
    function get_LinePragma: DNCodeLinePragma;
    procedure set_LinePragma(value: DNCodeLinePragma);
    function get_StartDirectives: DNCodeDirectiveCollection;
    function get_EndDirectives: DNCodeDirectiveCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Label: string read get_Label write set_Label;
    property Statement: DNCodeStatement read get_Statement write set_Statement;
    property LinePragma: DNCodeLinePragma read get_LinePragma write set_LinePragma;
    property StartDirectives: DNCodeDirectiveCollection read get_StartDirectives;
    property EndDirectives: DNCodeDirectiveCollection read get_EndDirectives;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeLabeledStatement = class(TDNGenericImport<DNCodeLabeledStatementClass, DNCodeLabeledStatement>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeMethodReturnStatementClass = interface(DNCodeStatementClass)
  ['{8AD2AA25-37E3-5B66-8EB1-1F8C45A869E1}']
  { constructors } 

    {class} function init: DNCodeMethodReturnStatement; overload;
    {class} function init(expression: DNCodeExpression): DNCodeMethodReturnStatement; overload;

  end;

  [DNTypeName('System.CodeDom.CodeMethodReturnStatement')]
  DNCodeMethodReturnStatement = interface(DNCodeStatement)
  ['{031A6B24-BFAA-3D76-B6DA-59C9C469A0FB}']
  { getters & setters } 

    function get_Expression: DNCodeExpression;
    procedure set_Expression(value: DNCodeExpression);
    function get_LinePragma: DNCodeLinePragma;
    procedure set_LinePragma(value: DNCodeLinePragma);
    function get_StartDirectives: DNCodeDirectiveCollection;
    function get_EndDirectives: DNCodeDirectiveCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Expression: DNCodeExpression read get_Expression write set_Expression;
    property LinePragma: DNCodeLinePragma read get_LinePragma write set_LinePragma;
    property StartDirectives: DNCodeDirectiveCollection read get_StartDirectives;
    property EndDirectives: DNCodeDirectiveCollection read get_EndDirectives;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeMethodReturnStatement = class(TDNGenericImport<DNCodeMethodReturnStatementClass, DNCodeMethodReturnStatement>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeRemoveEventStatementClass = interface(DNCodeStatementClass)
  ['{1E3F280A-477A-5F03-8DF7-31501D91F0F4}']
  { constructors } 

    {class} function init: DNCodeRemoveEventStatement; overload;
    {class} function init(eventRef: DNCodeEventReferenceExpression; listener: DNCodeExpression): DNCodeRemoveEventStatement; overload;
    {class} function init(targetObject: DNCodeExpression; eventName: string; listener: DNCodeExpression): DNCodeRemoveEventStatement; overload;

  end;

  [DNTypeName('System.CodeDom.CodeRemoveEventStatement')]
  DNCodeRemoveEventStatement = interface(DNCodeStatement)
  ['{F38B3709-9B63-32E6-9CFB-07991C40717F}']
  { getters & setters } 

    function get_Event: DNCodeEventReferenceExpression;
    procedure set_Event(value: DNCodeEventReferenceExpression);
    function get_Listener: DNCodeExpression;
    procedure set_Listener(value: DNCodeExpression);
    function get_LinePragma: DNCodeLinePragma;
    procedure set_LinePragma(value: DNCodeLinePragma);
    function get_StartDirectives: DNCodeDirectiveCollection;
    function get_EndDirectives: DNCodeDirectiveCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Event: DNCodeEventReferenceExpression read get_Event write set_Event;
    property Listener: DNCodeExpression read get_Listener write set_Listener;
    property LinePragma: DNCodeLinePragma read get_LinePragma write set_LinePragma;
    property StartDirectives: DNCodeDirectiveCollection read get_StartDirectives;
    property EndDirectives: DNCodeDirectiveCollection read get_EndDirectives;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeRemoveEventStatement = class(TDNGenericImport<DNCodeRemoveEventStatementClass, DNCodeRemoveEventStatement>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeSnippetStatementClass = interface(DNCodeStatementClass)
  ['{8165EED9-E4A5-54B0-A346-03141C61BB53}']
  { constructors } 

    {class} function init: DNCodeSnippetStatement; overload;
    {class} function init(value: string): DNCodeSnippetStatement; overload;

  end;

  [DNTypeName('System.CodeDom.CodeSnippetStatement')]
  DNCodeSnippetStatement = interface(DNCodeStatement)
  ['{880287BC-D3A4-3113-B8D1-6538B7C19E97}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_LinePragma: DNCodeLinePragma;
    procedure set_LinePragma(value: DNCodeLinePragma);
    function get_StartDirectives: DNCodeDirectiveCollection;
    function get_EndDirectives: DNCodeDirectiveCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property LinePragma: DNCodeLinePragma read get_LinePragma write set_LinePragma;
    property StartDirectives: DNCodeDirectiveCollection read get_StartDirectives;
    property EndDirectives: DNCodeDirectiveCollection read get_EndDirectives;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeSnippetStatement = class(TDNGenericImport<DNCodeSnippetStatementClass, DNCodeSnippetStatement>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeThrowExceptionStatementClass = interface(DNCodeStatementClass)
  ['{61E4F12D-6F5A-5A7C-8F1A-D2A4A598FD19}']
  { constructors } 

    {class} function init: DNCodeThrowExceptionStatement; overload;
    {class} function init(toThrow: DNCodeExpression): DNCodeThrowExceptionStatement; overload;

  end;

  [DNTypeName('System.CodeDom.CodeThrowExceptionStatement')]
  DNCodeThrowExceptionStatement = interface(DNCodeStatement)
  ['{A2F81DED-8536-3C27-9759-BA3EAC94D0A2}']
  { getters & setters } 

    function get_ToThrow: DNCodeExpression;
    procedure set_ToThrow(value: DNCodeExpression);
    function get_LinePragma: DNCodeLinePragma;
    procedure set_LinePragma(value: DNCodeLinePragma);
    function get_StartDirectives: DNCodeDirectiveCollection;
    function get_EndDirectives: DNCodeDirectiveCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ToThrow: DNCodeExpression read get_ToThrow write set_ToThrow;
    property LinePragma: DNCodeLinePragma read get_LinePragma write set_LinePragma;
    property StartDirectives: DNCodeDirectiveCollection read get_StartDirectives;
    property EndDirectives: DNCodeDirectiveCollection read get_EndDirectives;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeThrowExceptionStatement = class(TDNGenericImport<DNCodeThrowExceptionStatementClass, DNCodeThrowExceptionStatement>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeTryCatchFinallyStatementClass = interface(DNCodeStatementClass)
  ['{678FA654-27F6-51CC-8472-3731754B3A83}']
  { constructors } 

    {class} function init: DNCodeTryCatchFinallyStatement; overload;
    {class} function init(tryStatements: TArray<DNCodeStatement>; catchClauses: TArray<DNCodeCatchClause>): DNCodeTryCatchFinallyStatement; overload;
    {class} function init(tryStatements: TArray<DNCodeStatement>; catchClauses: TArray<DNCodeCatchClause>; finallyStatements: TArray<DNCodeStatement>): DNCodeTryCatchFinallyStatement; overload;

  end;

  [DNTypeName('System.CodeDom.CodeTryCatchFinallyStatement')]
  DNCodeTryCatchFinallyStatement = interface(DNCodeStatement)
  ['{CB3BF2D6-DB22-31DF-A6F4-E3707972E10C}']
  { getters & setters } 

    function get_TryStatements: DNCodeStatementCollection;
    function get_CatchClauses: DNCodeCatchClauseCollection;
    function get_FinallyStatements: DNCodeStatementCollection;
    function get_LinePragma: DNCodeLinePragma;
    procedure set_LinePragma(value: DNCodeLinePragma);
    function get_StartDirectives: DNCodeDirectiveCollection;
    function get_EndDirectives: DNCodeDirectiveCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TryStatements: DNCodeStatementCollection read get_TryStatements;
    property CatchClauses: DNCodeCatchClauseCollection read get_CatchClauses;
    property FinallyStatements: DNCodeStatementCollection read get_FinallyStatements;
    property LinePragma: DNCodeLinePragma read get_LinePragma write set_LinePragma;
    property StartDirectives: DNCodeDirectiveCollection read get_StartDirectives;
    property EndDirectives: DNCodeDirectiveCollection read get_EndDirectives;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeTryCatchFinallyStatement = class(TDNGenericImport<DNCodeTryCatchFinallyStatementClass, DNCodeTryCatchFinallyStatement>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeVariableDeclarationStatementClass = interface(DNCodeStatementClass)
  ['{C0593468-5875-5804-B0F5-D024935A774D}']
  { constructors } 

    {class} function init: DNCodeVariableDeclarationStatement; overload;
    {class} function init(&type: DNCodeTypeReference; name: string): DNCodeVariableDeclarationStatement; overload;
    {class} function init(&type: string; name: string): DNCodeVariableDeclarationStatement; overload;
    {class} function init(&type: DDN.mscorlib.DNType; name: string): DNCodeVariableDeclarationStatement; overload;
    {class} function init(&type: DNCodeTypeReference; name: string; initExpression: DNCodeExpression): DNCodeVariableDeclarationStatement; overload;
    {class} function init(&type: string; name: string; initExpression: DNCodeExpression): DNCodeVariableDeclarationStatement; overload;
    {class} function init(&type: DDN.mscorlib.DNType; name: string; initExpression: DNCodeExpression): DNCodeVariableDeclarationStatement; overload;

  end;

  [DNTypeName('System.CodeDom.CodeVariableDeclarationStatement')]
  DNCodeVariableDeclarationStatement = interface(DNCodeStatement)
  ['{943B4474-D661-344E-AD1B-1A1F3C8EA01A}']
  { getters & setters } 

    function get_InitExpression: DNCodeExpression;
    procedure set_InitExpression(value: DNCodeExpression);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: DNCodeTypeReference;
    procedure set_Type(value: DNCodeTypeReference);
    function get_LinePragma: DNCodeLinePragma;
    procedure set_LinePragma(value: DNCodeLinePragma);
    function get_StartDirectives: DNCodeDirectiveCollection;
    function get_EndDirectives: DNCodeDirectiveCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property InitExpression: DNCodeExpression read get_InitExpression write set_InitExpression;
    property Name: string read get_Name write set_Name;
    property &Type: DNCodeTypeReference read get_Type write set_Type;
    property LinePragma: DNCodeLinePragma read get_LinePragma write set_LinePragma;
    property StartDirectives: DNCodeDirectiveCollection read get_StartDirectives;
    property EndDirectives: DNCodeDirectiveCollection read get_EndDirectives;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeVariableDeclarationStatement = class(TDNGenericImport<DNCodeVariableDeclarationStatementClass, DNCodeVariableDeclarationStatement>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeTypeMemberClass = interface(DNCodeObjectClass)
  ['{8D9597BB-CC5B-5D6E-8EE9-3B117E7D8654}']
  { constructors } 

    {class} function init: DNCodeTypeMember;

  end;

  [DNTypeName('System.CodeDom.CodeTypeMember')]
  DNCodeTypeMember = interface(DNCodeObject)
  ['{69DCE654-E184-38E5-BFD6-E0EB6F592A11}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Attributes: DNMemberAttributes;
    procedure set_Attributes(value: DNMemberAttributes);
    function get_CustomAttributes: DNCodeAttributeDeclarationCollection;
    procedure set_CustomAttributes(value: DNCodeAttributeDeclarationCollection);
    function get_LinePragma: DNCodeLinePragma;
    procedure set_LinePragma(value: DNCodeLinePragma);
    function get_Comments: DNCodeCommentStatementCollection;
    function get_StartDirectives: DNCodeDirectiveCollection;
    function get_EndDirectives: DNCodeDirectiveCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Attributes: DNMemberAttributes read get_Attributes write set_Attributes;
    property CustomAttributes: DNCodeAttributeDeclarationCollection read get_CustomAttributes write set_CustomAttributes;
    property LinePragma: DNCodeLinePragma read get_LinePragma write set_LinePragma;
    property Comments: DNCodeCommentStatementCollection read get_Comments;
    property StartDirectives: DNCodeDirectiveCollection read get_StartDirectives;
    property EndDirectives: DNCodeDirectiveCollection read get_EndDirectives;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeTypeMember = class(TDNGenericImport<DNCodeTypeMemberClass, DNCodeTypeMember>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeMemberEventClass = interface(DNCodeTypeMemberClass)
  ['{4343FAAA-0936-5D94-A28F-344F789CFF72}']
  { constructors } 

    {class} function init: DNCodeMemberEvent;

  end;

  [DNTypeName('System.CodeDom.CodeMemberEvent')]
  DNCodeMemberEvent = interface(DNCodeTypeMember)
  ['{E401E3C7-2646-37C7-A37A-BA115D000FAA}']
  { getters & setters } 

    function get_Type: DNCodeTypeReference;
    procedure set_Type(value: DNCodeTypeReference);
    function get_PrivateImplementationType: DNCodeTypeReference;
    procedure set_PrivateImplementationType(value: DNCodeTypeReference);
    function get_ImplementationTypes: DNCodeTypeReferenceCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Attributes: DNMemberAttributes;
    procedure set_Attributes(value: DNMemberAttributes);
    function get_CustomAttributes: DNCodeAttributeDeclarationCollection;
    procedure set_CustomAttributes(value: DNCodeAttributeDeclarationCollection);
    function get_LinePragma: DNCodeLinePragma;
    procedure set_LinePragma(value: DNCodeLinePragma);
    function get_Comments: DNCodeCommentStatementCollection;
    function get_StartDirectives: DNCodeDirectiveCollection;
    function get_EndDirectives: DNCodeDirectiveCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNCodeTypeReference read get_Type write set_Type;
    property PrivateImplementationType: DNCodeTypeReference read get_PrivateImplementationType write set_PrivateImplementationType;
    property ImplementationTypes: DNCodeTypeReferenceCollection read get_ImplementationTypes;
    property Name: string read get_Name write set_Name;
    property Attributes: DNMemberAttributes read get_Attributes write set_Attributes;
    property CustomAttributes: DNCodeAttributeDeclarationCollection read get_CustomAttributes write set_CustomAttributes;
    property LinePragma: DNCodeLinePragma read get_LinePragma write set_LinePragma;
    property Comments: DNCodeCommentStatementCollection read get_Comments;
    property StartDirectives: DNCodeDirectiveCollection read get_StartDirectives;
    property EndDirectives: DNCodeDirectiveCollection read get_EndDirectives;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeMemberEvent = class(TDNGenericImport<DNCodeMemberEventClass, DNCodeMemberEvent>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeMemberFieldClass = interface(DNCodeTypeMemberClass)
  ['{6133C8E0-5A8E-58FE-AF5C-29B7F4EC9FF1}']
  { constructors } 

    {class} function init: DNCodeMemberField; overload;
    {class} function init(&type: DNCodeTypeReference; name: string): DNCodeMemberField; overload;
    {class} function init(&type: string; name: string): DNCodeMemberField; overload;
    {class} function init(&type: DDN.mscorlib.DNType; name: string): DNCodeMemberField; overload;

  end;

  [DNTypeName('System.CodeDom.CodeMemberField')]
  DNCodeMemberField = interface(DNCodeTypeMember)
  ['{ACDCDF3A-21DC-37E3-9253-CD26CAEC0B58}']
  { getters & setters } 

    function get_Type: DNCodeTypeReference;
    procedure set_Type(value: DNCodeTypeReference);
    function get_InitExpression: DNCodeExpression;
    procedure set_InitExpression(value: DNCodeExpression);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Attributes: DNMemberAttributes;
    procedure set_Attributes(value: DNMemberAttributes);
    function get_CustomAttributes: DNCodeAttributeDeclarationCollection;
    procedure set_CustomAttributes(value: DNCodeAttributeDeclarationCollection);
    function get_LinePragma: DNCodeLinePragma;
    procedure set_LinePragma(value: DNCodeLinePragma);
    function get_Comments: DNCodeCommentStatementCollection;
    function get_StartDirectives: DNCodeDirectiveCollection;
    function get_EndDirectives: DNCodeDirectiveCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNCodeTypeReference read get_Type write set_Type;
    property InitExpression: DNCodeExpression read get_InitExpression write set_InitExpression;
    property Name: string read get_Name write set_Name;
    property Attributes: DNMemberAttributes read get_Attributes write set_Attributes;
    property CustomAttributes: DNCodeAttributeDeclarationCollection read get_CustomAttributes write set_CustomAttributes;
    property LinePragma: DNCodeLinePragma read get_LinePragma write set_LinePragma;
    property Comments: DNCodeCommentStatementCollection read get_Comments;
    property StartDirectives: DNCodeDirectiveCollection read get_StartDirectives;
    property EndDirectives: DNCodeDirectiveCollection read get_EndDirectives;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeMemberField = class(TDNGenericImport<DNCodeMemberFieldClass, DNCodeMemberField>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeMemberMethodClass = interface(DNCodeTypeMemberClass)
  ['{264AA17A-A571-5DB3-9F70-4AF003856B6B}']
  { constructors } 

    {class} function init: DNCodeMemberMethod;

  end;

  [DNTypeName('System.CodeDom.CodeMemberMethod')]
  DNCodeMemberMethod = interface(DNCodeTypeMember)
  ['{812E9B72-2CCC-364B-9EB8-DA8F4EAE724F}']
  { getters & setters } 

    function get_ReturnType: DNCodeTypeReference;
    procedure set_ReturnType(value: DNCodeTypeReference);
    function get_Statements: DNCodeStatementCollection;
    function get_Parameters: DNCodeParameterDeclarationExpressionCollection;
    function get_PrivateImplementationType: DNCodeTypeReference;
    procedure set_PrivateImplementationType(value: DNCodeTypeReference);
    function get_ImplementationTypes: DNCodeTypeReferenceCollection;
    function get_ReturnTypeCustomAttributes: DNCodeAttributeDeclarationCollection;
    function get_TypeParameters: DNCodeTypeParameterCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Attributes: DNMemberAttributes;
    procedure set_Attributes(value: DNMemberAttributes);
    function get_CustomAttributes: DNCodeAttributeDeclarationCollection;
    procedure set_CustomAttributes(value: DNCodeAttributeDeclarationCollection);
    function get_LinePragma: DNCodeLinePragma;
    procedure set_LinePragma(value: DNCodeLinePragma);
    function get_Comments: DNCodeCommentStatementCollection;
    function get_StartDirectives: DNCodeDirectiveCollection;
    function get_EndDirectives: DNCodeDirectiveCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { events } 

    procedure add_PopulateParameters(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PopulateParameters(value: DDN.mscorlib.DNEventHandler);
    procedure add_PopulateStatements(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PopulateStatements(value: DDN.mscorlib.DNEventHandler);
    procedure add_PopulateImplementationTypes(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PopulateImplementationTypes(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReturnType: DNCodeTypeReference read get_ReturnType write set_ReturnType;
    property Statements: DNCodeStatementCollection read get_Statements;
    property Parameters: DNCodeParameterDeclarationExpressionCollection read get_Parameters;
    property PrivateImplementationType: DNCodeTypeReference read get_PrivateImplementationType write set_PrivateImplementationType;
    property ImplementationTypes: DNCodeTypeReferenceCollection read get_ImplementationTypes;
    property ReturnTypeCustomAttributes: DNCodeAttributeDeclarationCollection read get_ReturnTypeCustomAttributes;
    property TypeParameters: DNCodeTypeParameterCollection read get_TypeParameters;
    property Name: string read get_Name write set_Name;
    property Attributes: DNMemberAttributes read get_Attributes write set_Attributes;
    property CustomAttributes: DNCodeAttributeDeclarationCollection read get_CustomAttributes write set_CustomAttributes;
    property LinePragma: DNCodeLinePragma read get_LinePragma write set_LinePragma;
    property Comments: DNCodeCommentStatementCollection read get_Comments;
    property StartDirectives: DNCodeDirectiveCollection read get_StartDirectives;
    property EndDirectives: DNCodeDirectiveCollection read get_EndDirectives;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeMemberMethod = class(TDNGenericImport<DNCodeMemberMethodClass, DNCodeMemberMethod>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeConstructorClass = interface(DNCodeMemberMethodClass)
  ['{5B4233F8-39F1-5B40-BBA8-9EAFCD8FCCE4}']
  { constructors } 

    {class} function init: DNCodeConstructor;

  end;

  [DNTypeName('System.CodeDom.CodeConstructor')]
  DNCodeConstructor = interface(DNCodeMemberMethod)
  ['{2A7A02A4-408D-32C6-B5E2-BC4B57399B0C}']
  { getters & setters } 

    function get_BaseConstructorArgs: DNCodeExpressionCollection;
    function get_ChainedConstructorArgs: DNCodeExpressionCollection;
    function get_ReturnType: DNCodeTypeReference;
    procedure set_ReturnType(value: DNCodeTypeReference);
    function get_Statements: DNCodeStatementCollection;
    function get_Parameters: DNCodeParameterDeclarationExpressionCollection;
    function get_PrivateImplementationType: DNCodeTypeReference;
    procedure set_PrivateImplementationType(value: DNCodeTypeReference);
    function get_ImplementationTypes: DNCodeTypeReferenceCollection;
    function get_ReturnTypeCustomAttributes: DNCodeAttributeDeclarationCollection;
    function get_TypeParameters: DNCodeTypeParameterCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Attributes: DNMemberAttributes;
    procedure set_Attributes(value: DNMemberAttributes);
    function get_CustomAttributes: DNCodeAttributeDeclarationCollection;
    procedure set_CustomAttributes(value: DNCodeAttributeDeclarationCollection);
    function get_LinePragma: DNCodeLinePragma;
    procedure set_LinePragma(value: DNCodeLinePragma);
    function get_Comments: DNCodeCommentStatementCollection;
    function get_StartDirectives: DNCodeDirectiveCollection;
    function get_EndDirectives: DNCodeDirectiveCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { events } 

    procedure add_PopulateParameters(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PopulateParameters(value: DDN.mscorlib.DNEventHandler);
    procedure add_PopulateStatements(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PopulateStatements(value: DDN.mscorlib.DNEventHandler);
    procedure add_PopulateImplementationTypes(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PopulateImplementationTypes(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BaseConstructorArgs: DNCodeExpressionCollection read get_BaseConstructorArgs;
    property ChainedConstructorArgs: DNCodeExpressionCollection read get_ChainedConstructorArgs;
    property ReturnType: DNCodeTypeReference read get_ReturnType write set_ReturnType;
    property Statements: DNCodeStatementCollection read get_Statements;
    property Parameters: DNCodeParameterDeclarationExpressionCollection read get_Parameters;
    property PrivateImplementationType: DNCodeTypeReference read get_PrivateImplementationType write set_PrivateImplementationType;
    property ImplementationTypes: DNCodeTypeReferenceCollection read get_ImplementationTypes;
    property ReturnTypeCustomAttributes: DNCodeAttributeDeclarationCollection read get_ReturnTypeCustomAttributes;
    property TypeParameters: DNCodeTypeParameterCollection read get_TypeParameters;
    property Name: string read get_Name write set_Name;
    property Attributes: DNMemberAttributes read get_Attributes write set_Attributes;
    property CustomAttributes: DNCodeAttributeDeclarationCollection read get_CustomAttributes write set_CustomAttributes;
    property LinePragma: DNCodeLinePragma read get_LinePragma write set_LinePragma;
    property Comments: DNCodeCommentStatementCollection read get_Comments;
    property StartDirectives: DNCodeDirectiveCollection read get_StartDirectives;
    property EndDirectives: DNCodeDirectiveCollection read get_EndDirectives;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeConstructor = class(TDNGenericImport<DNCodeConstructorClass, DNCodeConstructor>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeEntryPointMethodClass = interface(DNCodeMemberMethodClass)
  ['{F5DEFD5F-FD59-5CFF-B7CA-A8ACF8538958}']
  { constructors } 

    {class} function init: DNCodeEntryPointMethod;

  end;

  [DNTypeName('System.CodeDom.CodeEntryPointMethod')]
  DNCodeEntryPointMethod = interface(DNCodeMemberMethod)
  ['{DFF5C8A1-425F-305D-AE85-10C9DD7704C3}']
  { getters & setters } 

    function get_ReturnType: DNCodeTypeReference;
    procedure set_ReturnType(value: DNCodeTypeReference);
    function get_Statements: DNCodeStatementCollection;
    function get_Parameters: DNCodeParameterDeclarationExpressionCollection;
    function get_PrivateImplementationType: DNCodeTypeReference;
    procedure set_PrivateImplementationType(value: DNCodeTypeReference);
    function get_ImplementationTypes: DNCodeTypeReferenceCollection;
    function get_ReturnTypeCustomAttributes: DNCodeAttributeDeclarationCollection;
    function get_TypeParameters: DNCodeTypeParameterCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Attributes: DNMemberAttributes;
    procedure set_Attributes(value: DNMemberAttributes);
    function get_CustomAttributes: DNCodeAttributeDeclarationCollection;
    procedure set_CustomAttributes(value: DNCodeAttributeDeclarationCollection);
    function get_LinePragma: DNCodeLinePragma;
    procedure set_LinePragma(value: DNCodeLinePragma);
    function get_Comments: DNCodeCommentStatementCollection;
    function get_StartDirectives: DNCodeDirectiveCollection;
    function get_EndDirectives: DNCodeDirectiveCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { events } 

    procedure add_PopulateParameters(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PopulateParameters(value: DDN.mscorlib.DNEventHandler);
    procedure add_PopulateStatements(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PopulateStatements(value: DDN.mscorlib.DNEventHandler);
    procedure add_PopulateImplementationTypes(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PopulateImplementationTypes(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReturnType: DNCodeTypeReference read get_ReturnType write set_ReturnType;
    property Statements: DNCodeStatementCollection read get_Statements;
    property Parameters: DNCodeParameterDeclarationExpressionCollection read get_Parameters;
    property PrivateImplementationType: DNCodeTypeReference read get_PrivateImplementationType write set_PrivateImplementationType;
    property ImplementationTypes: DNCodeTypeReferenceCollection read get_ImplementationTypes;
    property ReturnTypeCustomAttributes: DNCodeAttributeDeclarationCollection read get_ReturnTypeCustomAttributes;
    property TypeParameters: DNCodeTypeParameterCollection read get_TypeParameters;
    property Name: string read get_Name write set_Name;
    property Attributes: DNMemberAttributes read get_Attributes write set_Attributes;
    property CustomAttributes: DNCodeAttributeDeclarationCollection read get_CustomAttributes write set_CustomAttributes;
    property LinePragma: DNCodeLinePragma read get_LinePragma write set_LinePragma;
    property Comments: DNCodeCommentStatementCollection read get_Comments;
    property StartDirectives: DNCodeDirectiveCollection read get_StartDirectives;
    property EndDirectives: DNCodeDirectiveCollection read get_EndDirectives;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeEntryPointMethod = class(TDNGenericImport<DNCodeEntryPointMethodClass, DNCodeEntryPointMethod>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeTypeConstructorClass = interface(DNCodeMemberMethodClass)
  ['{4AF846DD-F21D-55FC-BBC1-A87FB2D2B54E}']
  { constructors } 

    {class} function init: DNCodeTypeConstructor;

  end;

  [DNTypeName('System.CodeDom.CodeTypeConstructor')]
  DNCodeTypeConstructor = interface(DNCodeMemberMethod)
  ['{7544623F-E6DE-3918-9E10-29AAF16E560B}']
  { getters & setters } 

    function get_ReturnType: DNCodeTypeReference;
    procedure set_ReturnType(value: DNCodeTypeReference);
    function get_Statements: DNCodeStatementCollection;
    function get_Parameters: DNCodeParameterDeclarationExpressionCollection;
    function get_PrivateImplementationType: DNCodeTypeReference;
    procedure set_PrivateImplementationType(value: DNCodeTypeReference);
    function get_ImplementationTypes: DNCodeTypeReferenceCollection;
    function get_ReturnTypeCustomAttributes: DNCodeAttributeDeclarationCollection;
    function get_TypeParameters: DNCodeTypeParameterCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Attributes: DNMemberAttributes;
    procedure set_Attributes(value: DNMemberAttributes);
    function get_CustomAttributes: DNCodeAttributeDeclarationCollection;
    procedure set_CustomAttributes(value: DNCodeAttributeDeclarationCollection);
    function get_LinePragma: DNCodeLinePragma;
    procedure set_LinePragma(value: DNCodeLinePragma);
    function get_Comments: DNCodeCommentStatementCollection;
    function get_StartDirectives: DNCodeDirectiveCollection;
    function get_EndDirectives: DNCodeDirectiveCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { events } 

    procedure add_PopulateParameters(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PopulateParameters(value: DDN.mscorlib.DNEventHandler);
    procedure add_PopulateStatements(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PopulateStatements(value: DDN.mscorlib.DNEventHandler);
    procedure add_PopulateImplementationTypes(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PopulateImplementationTypes(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReturnType: DNCodeTypeReference read get_ReturnType write set_ReturnType;
    property Statements: DNCodeStatementCollection read get_Statements;
    property Parameters: DNCodeParameterDeclarationExpressionCollection read get_Parameters;
    property PrivateImplementationType: DNCodeTypeReference read get_PrivateImplementationType write set_PrivateImplementationType;
    property ImplementationTypes: DNCodeTypeReferenceCollection read get_ImplementationTypes;
    property ReturnTypeCustomAttributes: DNCodeAttributeDeclarationCollection read get_ReturnTypeCustomAttributes;
    property TypeParameters: DNCodeTypeParameterCollection read get_TypeParameters;
    property Name: string read get_Name write set_Name;
    property Attributes: DNMemberAttributes read get_Attributes write set_Attributes;
    property CustomAttributes: DNCodeAttributeDeclarationCollection read get_CustomAttributes write set_CustomAttributes;
    property LinePragma: DNCodeLinePragma read get_LinePragma write set_LinePragma;
    property Comments: DNCodeCommentStatementCollection read get_Comments;
    property StartDirectives: DNCodeDirectiveCollection read get_StartDirectives;
    property EndDirectives: DNCodeDirectiveCollection read get_EndDirectives;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeTypeConstructor = class(TDNGenericImport<DNCodeTypeConstructorClass, DNCodeTypeConstructor>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeMemberPropertyClass = interface(DNCodeTypeMemberClass)
  ['{22747656-273D-59F4-B370-8CA368CBB6F8}']
  { constructors } 

    {class} function init: DNCodeMemberProperty;

  end;

  [DNTypeName('System.CodeDom.CodeMemberProperty')]
  DNCodeMemberProperty = interface(DNCodeTypeMember)
  ['{D459C868-9174-353A-BB17-F2166E83FE24}']
  { getters & setters } 

    function get_PrivateImplementationType: DNCodeTypeReference;
    procedure set_PrivateImplementationType(value: DNCodeTypeReference);
    function get_ImplementationTypes: DNCodeTypeReferenceCollection;
    function get_Type: DNCodeTypeReference;
    procedure set_Type(value: DNCodeTypeReference);
    function get_HasGet: Boolean;
    procedure set_HasGet(value: Boolean);
    function get_HasSet: Boolean;
    procedure set_HasSet(value: Boolean);
    function get_GetStatements: DNCodeStatementCollection;
    function get_SetStatements: DNCodeStatementCollection;
    function get_Parameters: DNCodeParameterDeclarationExpressionCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Attributes: DNMemberAttributes;
    procedure set_Attributes(value: DNMemberAttributes);
    function get_CustomAttributes: DNCodeAttributeDeclarationCollection;
    procedure set_CustomAttributes(value: DNCodeAttributeDeclarationCollection);
    function get_LinePragma: DNCodeLinePragma;
    procedure set_LinePragma(value: DNCodeLinePragma);
    function get_Comments: DNCodeCommentStatementCollection;
    function get_StartDirectives: DNCodeDirectiveCollection;
    function get_EndDirectives: DNCodeDirectiveCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PrivateImplementationType: DNCodeTypeReference read get_PrivateImplementationType write set_PrivateImplementationType;
    property ImplementationTypes: DNCodeTypeReferenceCollection read get_ImplementationTypes;
    property &Type: DNCodeTypeReference read get_Type write set_Type;
    property HasGet: Boolean read get_HasGet write set_HasGet;
    property HasSet: Boolean read get_HasSet write set_HasSet;
    property GetStatements: DNCodeStatementCollection read get_GetStatements;
    property SetStatements: DNCodeStatementCollection read get_SetStatements;
    property Parameters: DNCodeParameterDeclarationExpressionCollection read get_Parameters;
    property Name: string read get_Name write set_Name;
    property Attributes: DNMemberAttributes read get_Attributes write set_Attributes;
    property CustomAttributes: DNCodeAttributeDeclarationCollection read get_CustomAttributes write set_CustomAttributes;
    property LinePragma: DNCodeLinePragma read get_LinePragma write set_LinePragma;
    property Comments: DNCodeCommentStatementCollection read get_Comments;
    property StartDirectives: DNCodeDirectiveCollection read get_StartDirectives;
    property EndDirectives: DNCodeDirectiveCollection read get_EndDirectives;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeMemberProperty = class(TDNGenericImport<DNCodeMemberPropertyClass, DNCodeMemberProperty>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeSnippetTypeMemberClass = interface(DNCodeTypeMemberClass)
  ['{41A6E306-9DEB-5327-9C89-ACC889A906B7}']
  { constructors } 

    {class} function init: DNCodeSnippetTypeMember; overload;
    {class} function init(text: string): DNCodeSnippetTypeMember; overload;

  end;

  [DNTypeName('System.CodeDom.CodeSnippetTypeMember')]
  DNCodeSnippetTypeMember = interface(DNCodeTypeMember)
  ['{0FAC5DAB-AD52-38BF-854E-FD3059369C44}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Attributes: DNMemberAttributes;
    procedure set_Attributes(value: DNMemberAttributes);
    function get_CustomAttributes: DNCodeAttributeDeclarationCollection;
    procedure set_CustomAttributes(value: DNCodeAttributeDeclarationCollection);
    function get_LinePragma: DNCodeLinePragma;
    procedure set_LinePragma(value: DNCodeLinePragma);
    function get_Comments: DNCodeCommentStatementCollection;
    function get_StartDirectives: DNCodeDirectiveCollection;
    function get_EndDirectives: DNCodeDirectiveCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text write set_Text;
    property Name: string read get_Name write set_Name;
    property Attributes: DNMemberAttributes read get_Attributes write set_Attributes;
    property CustomAttributes: DNCodeAttributeDeclarationCollection read get_CustomAttributes write set_CustomAttributes;
    property LinePragma: DNCodeLinePragma read get_LinePragma write set_LinePragma;
    property Comments: DNCodeCommentStatementCollection read get_Comments;
    property StartDirectives: DNCodeDirectiveCollection read get_StartDirectives;
    property EndDirectives: DNCodeDirectiveCollection read get_EndDirectives;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeSnippetTypeMember = class(TDNGenericImport<DNCodeSnippetTypeMemberClass, DNCodeSnippetTypeMember>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeTypeDeclarationClass = interface(DNCodeTypeMemberClass)
  ['{3CD92F40-1C2B-5228-AD31-DA70CB6CC38B}']
  { constructors } 

    {class} function init: DNCodeTypeDeclaration; overload;
    {class} function init(name: string): DNCodeTypeDeclaration; overload;

  end;

  [DNTypeName('System.CodeDom.CodeTypeDeclaration')]
  DNCodeTypeDeclaration = interface(DNCodeTypeMember)
  ['{2B708A48-52D8-3049-9565-6BA42EE2BE17}']
  { getters & setters } 

    function get_TypeAttributes: DDN.mscorlib.DNTypeAttributes;
    procedure set_TypeAttributes(value: DDN.mscorlib.DNTypeAttributes);
    function get_BaseTypes: DNCodeTypeReferenceCollection;
    function get_IsClass: Boolean;
    procedure set_IsClass(value: Boolean);
    function get_IsStruct: Boolean;
    procedure set_IsStruct(value: Boolean);
    function get_IsEnum: Boolean;
    procedure set_IsEnum(value: Boolean);
    function get_IsInterface: Boolean;
    procedure set_IsInterface(value: Boolean);
    function get_IsPartial: Boolean;
    procedure set_IsPartial(value: Boolean);
    function get_Members: DNCodeTypeMemberCollection;
    function get_TypeParameters: DNCodeTypeParameterCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Attributes: DNMemberAttributes;
    procedure set_Attributes(value: DNMemberAttributes);
    function get_CustomAttributes: DNCodeAttributeDeclarationCollection;
    procedure set_CustomAttributes(value: DNCodeAttributeDeclarationCollection);
    function get_LinePragma: DNCodeLinePragma;
    procedure set_LinePragma(value: DNCodeLinePragma);
    function get_Comments: DNCodeCommentStatementCollection;
    function get_StartDirectives: DNCodeDirectiveCollection;
    function get_EndDirectives: DNCodeDirectiveCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { events } 

    procedure add_PopulateBaseTypes(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PopulateBaseTypes(value: DDN.mscorlib.DNEventHandler);
    procedure add_PopulateMembers(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PopulateMembers(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeAttributes: DDN.mscorlib.DNTypeAttributes read get_TypeAttributes write set_TypeAttributes;
    property BaseTypes: DNCodeTypeReferenceCollection read get_BaseTypes;
    property IsClass: Boolean read get_IsClass write set_IsClass;
    property IsStruct: Boolean read get_IsStruct write set_IsStruct;
    property IsEnum: Boolean read get_IsEnum write set_IsEnum;
    property IsInterface: Boolean read get_IsInterface write set_IsInterface;
    property IsPartial: Boolean read get_IsPartial write set_IsPartial;
    property Members: DNCodeTypeMemberCollection read get_Members;
    property TypeParameters: DNCodeTypeParameterCollection read get_TypeParameters;
    property Name: string read get_Name write set_Name;
    property Attributes: DNMemberAttributes read get_Attributes write set_Attributes;
    property CustomAttributes: DNCodeAttributeDeclarationCollection read get_CustomAttributes write set_CustomAttributes;
    property LinePragma: DNCodeLinePragma read get_LinePragma write set_LinePragma;
    property Comments: DNCodeCommentStatementCollection read get_Comments;
    property StartDirectives: DNCodeDirectiveCollection read get_StartDirectives;
    property EndDirectives: DNCodeDirectiveCollection read get_EndDirectives;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeTypeDeclaration = class(TDNGenericImport<DNCodeTypeDeclarationClass, DNCodeTypeDeclaration>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeTypeDelegateClass = interface(DNCodeTypeDeclarationClass)
  ['{FDFF52C1-A070-53B2-9505-8F850FB1BE2A}']
  { constructors } 

    {class} function init: DNCodeTypeDelegate; overload;
    {class} function init(name: string): DNCodeTypeDelegate; overload;

  end;

  [DNTypeName('System.CodeDom.CodeTypeDelegate')]
  DNCodeTypeDelegate = interface(DNCodeTypeDeclaration)
  ['{6FBC1E34-565D-3721-B5C0-5C796540481F}']
  { getters & setters } 

    function get_ReturnType: DNCodeTypeReference;
    procedure set_ReturnType(value: DNCodeTypeReference);
    function get_Parameters: DNCodeParameterDeclarationExpressionCollection;
    function get_TypeAttributes: DDN.mscorlib.DNTypeAttributes;
    procedure set_TypeAttributes(value: DDN.mscorlib.DNTypeAttributes);
    function get_BaseTypes: DNCodeTypeReferenceCollection;
    function get_IsClass: Boolean;
    procedure set_IsClass(value: Boolean);
    function get_IsStruct: Boolean;
    procedure set_IsStruct(value: Boolean);
    function get_IsEnum: Boolean;
    procedure set_IsEnum(value: Boolean);
    function get_IsInterface: Boolean;
    procedure set_IsInterface(value: Boolean);
    function get_IsPartial: Boolean;
    procedure set_IsPartial(value: Boolean);
    function get_Members: DNCodeTypeMemberCollection;
    function get_TypeParameters: DNCodeTypeParameterCollection;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Attributes: DNMemberAttributes;
    procedure set_Attributes(value: DNMemberAttributes);
    function get_CustomAttributes: DNCodeAttributeDeclarationCollection;
    procedure set_CustomAttributes(value: DNCodeAttributeDeclarationCollection);
    function get_LinePragma: DNCodeLinePragma;
    procedure set_LinePragma(value: DNCodeLinePragma);
    function get_Comments: DNCodeCommentStatementCollection;
    function get_StartDirectives: DNCodeDirectiveCollection;
    function get_EndDirectives: DNCodeDirectiveCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { events } 

    procedure add_PopulateBaseTypes(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PopulateBaseTypes(value: DDN.mscorlib.DNEventHandler);
    procedure add_PopulateMembers(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PopulateMembers(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReturnType: DNCodeTypeReference read get_ReturnType write set_ReturnType;
    property Parameters: DNCodeParameterDeclarationExpressionCollection read get_Parameters;
    property TypeAttributes: DDN.mscorlib.DNTypeAttributes read get_TypeAttributes write set_TypeAttributes;
    property BaseTypes: DNCodeTypeReferenceCollection read get_BaseTypes;
    property IsClass: Boolean read get_IsClass write set_IsClass;
    property IsStruct: Boolean read get_IsStruct write set_IsStruct;
    property IsEnum: Boolean read get_IsEnum write set_IsEnum;
    property IsInterface: Boolean read get_IsInterface write set_IsInterface;
    property IsPartial: Boolean read get_IsPartial write set_IsPartial;
    property Members: DNCodeTypeMemberCollection read get_Members;
    property TypeParameters: DNCodeTypeParameterCollection read get_TypeParameters;
    property Name: string read get_Name write set_Name;
    property Attributes: DNMemberAttributes read get_Attributes write set_Attributes;
    property CustomAttributes: DNCodeAttributeDeclarationCollection read get_CustomAttributes write set_CustomAttributes;
    property LinePragma: DNCodeLinePragma read get_LinePragma write set_LinePragma;
    property Comments: DNCodeCommentStatementCollection read get_Comments;
    property StartDirectives: DNCodeDirectiveCollection read get_StartDirectives;
    property EndDirectives: DNCodeDirectiveCollection read get_EndDirectives;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeTypeDelegate = class(TDNGenericImport<DNCodeTypeDelegateClass, DNCodeTypeDelegate>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeTypeParameterClass = interface(DNCodeObjectClass)
  ['{6B7C3A91-0AE8-50BA-9217-9B3ED7E81956}']
  { constructors } 

    {class} function init: DNCodeTypeParameter; overload;
    {class} function init(name: string): DNCodeTypeParameter; overload;

  end;

  [DNTypeName('System.CodeDom.CodeTypeParameter')]
  DNCodeTypeParameter = interface(DNCodeObject)
  ['{E5E30108-7A5B-398F-B50C-09793C6299E1}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Constraints: DNCodeTypeReferenceCollection;
    function get_CustomAttributes: DNCodeAttributeDeclarationCollection;
    function get_HasConstructorConstraint: Boolean;
    procedure set_HasConstructorConstraint(value: Boolean);
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Constraints: DNCodeTypeReferenceCollection read get_Constraints;
    property CustomAttributes: DNCodeAttributeDeclarationCollection read get_CustomAttributes;
    property HasConstructorConstraint: Boolean read get_HasConstructorConstraint write set_HasConstructorConstraint;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeTypeParameter = class(TDNGenericImport<DNCodeTypeParameterClass, DNCodeTypeParameter>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeTypeReferenceClass = interface(DNCodeObjectClass)
  ['{34BB9B22-23E9-5C2F-8864-E3AAB65F6C24}']
  { constructors } 

    {class} function init: DNCodeTypeReference; overload;
    {class} function init(&type: DDN.mscorlib.DNType): DNCodeTypeReference; overload;
    {class} function init(&type: DDN.mscorlib.DNType; codeTypeReferenceOption: DNCodeTypeReferenceOptions): DNCodeTypeReference; overload;
    {class} function init(typeName: string; codeTypeReferenceOption: DNCodeTypeReferenceOptions): DNCodeTypeReference; overload;
    {class} function init(typeName: string): DNCodeTypeReference; overload;
    {class} function init(typeName: string; typeArguments: TArray<DNCodeTypeReference>): DNCodeTypeReference; overload;
    {class} function init(typeParameter: DNCodeTypeParameter): DNCodeTypeReference; overload;
    {class} function init(baseType: string; rank: Int32): DNCodeTypeReference; overload;
    {class} function init(arrayType: DNCodeTypeReference; rank: Int32): DNCodeTypeReference; overload;

  end;

  [DNTypeName('System.CodeDom.CodeTypeReference')]
  DNCodeTypeReference = interface(DNCodeObject)
  ['{F3DE25AC-25ED-374C-8805-4B6456FA0CB2}']
  { getters & setters } 

    function get_ArrayElementType: DNCodeTypeReference;
    procedure set_ArrayElementType(value: DNCodeTypeReference);
    function get_ArrayRank: Int32;
    procedure set_ArrayRank(value: Int32);
    function get_BaseType: string;
    procedure set_BaseType(value: string);
    function get_Options: DNCodeTypeReferenceOptions;
    procedure set_Options(value: DNCodeTypeReferenceOptions);
    function get_TypeArguments: DNCodeTypeReferenceCollection;
    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ArrayElementType: DNCodeTypeReference read get_ArrayElementType write set_ArrayElementType;
    property ArrayRank: Int32 read get_ArrayRank write set_ArrayRank;
    property BaseType: string read get_BaseType write set_BaseType;
    property Options: DNCodeTypeReferenceOptions read get_Options write set_Options;
    property TypeArguments: DNCodeTypeReferenceCollection read get_TypeArguments;
    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  TDNCodeTypeReference = class(TDNGenericImport<DNCodeTypeReferenceClass, DNCodeTypeReference>) end;

  //-------------namespace: System.CodeDom.Compiler----------------
  DNCodeGeneratorClass = interface(DNObjectClass)
  ['{0DF71559-B5A5-5416-9FDA-23325040A9ED}']
  { static methods } 

    {class} function IsValidLanguageIndependentIdentifier(value: string): Boolean;
    {class} procedure ValidateIdentifiers(e: DNCodeObject);

  end;

  [DNTypeName('System.CodeDom.Compiler.CodeGenerator')]
  DNCodeGenerator = interface(DNICodeGenerator)
  ['{26B6959A-A9E6-31CF-9436-DBD2EAA08DA0}']
  { methods } 

    procedure GenerateCodeFromMember(member: DNCodeTypeMember; writer: DDN.mscorlib.DNTextWriter; options: DNCodeGeneratorOptions);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCodeGenerator = class(TDNGenericImport<DNCodeGeneratorClass, DNCodeGenerator>) end;

  //-------------namespace: System.CodeDom.Compiler----------------
  DNCodeCompilerClass = interface(DNCodeGeneratorClass)
  ['{62762F6E-FFB2-534E-B83C-5668FB64735C}']
  end;

  [DNTypeName('System.CodeDom.Compiler.CodeCompiler')]
  DNCodeCompiler = interface(DNCodeGenerator)
  ['{E4CD5A21-84D2-37EA-95E5-3BE7ECA020D9}']
  { methods } 

    procedure GenerateCodeFromMember(member: DNCodeTypeMember; writer: DDN.mscorlib.DNTextWriter; options: DNCodeGeneratorOptions);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCodeCompiler = class(TDNGenericImport<DNCodeCompilerClass, DNCodeCompiler>) end;

  //-------------namespace: System.CodeDom.Compiler----------------
  DNCodeGeneratorOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{098EAA0D-036E-51C3-AADC-D641966FA714}']
  { constructors } 

    {class} function init: DNCodeGeneratorOptions;

  end;

  [DNTypeName('System.CodeDom.Compiler.CodeGeneratorOptions')]
  DNCodeGeneratorOptions = interface(DDN.mscorlib.DNObject)
  ['{C6506495-674B-3816-8FAF-9E706ECE3326}']
  { getters & setters } 

    function get_Item(index: string): DDN.mscorlib.DNObject;
    procedure set_Item(index: string; value: DDN.mscorlib.DNObject);
    function get_IndentString: string;
    procedure set_IndentString(value: string);
    function get_BracingStyle: string;
    procedure set_BracingStyle(value: string);
    function get_ElseOnClosing: Boolean;
    procedure set_ElseOnClosing(value: Boolean);
    function get_BlankLinesBetweenMembers: Boolean;
    procedure set_BlankLinesBetweenMembers(value: Boolean);
    function get_VerbatimOrder: Boolean;
    procedure set_VerbatimOrder(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property IndentString: string read get_IndentString write set_IndentString;
    property BracingStyle: string read get_BracingStyle write set_BracingStyle;
    property ElseOnClosing: Boolean read get_ElseOnClosing write set_ElseOnClosing;
    property BlankLinesBetweenMembers: Boolean read get_BlankLinesBetweenMembers write set_BlankLinesBetweenMembers;
    property VerbatimOrder: Boolean read get_VerbatimOrder write set_VerbatimOrder;
  end;

  TDNCodeGeneratorOptions = class(TDNGenericImport<DNCodeGeneratorOptionsClass, DNCodeGeneratorOptions>) end;

  //-------------namespace: System.CodeDom.Compiler----------------
  DNCodeParserClass = interface(DNObjectClass)
  ['{66CA4BD5-D583-5A40-8E60-142AA689F1F3}']
  end;

  [DNTypeName('System.CodeDom.Compiler.CodeParser')]
  DNCodeParser = interface(DNICodeParser)
  ['{140FD93F-D933-3EB3-9DDA-376AEC842F54}']
  { methods } 

    function Parse(codeStream: DDN.mscorlib.DNTextReader): DNCodeCompileUnit;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCodeParser = class(TDNGenericImport<DNCodeParserClass, DNCodeParser>) end;

  //-------------namespace: System.CodeDom.Compiler----------------
  DNCompilerErrorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8ACEA8FC-6ABB-5B1F-B305-59E001C27C32}']
  { constructors } 

    {class} function init: DNCompilerError; overload;
    {class} function init(fileName: string; line: Int32; column: Int32; errorNumber: string; errorText: string): DNCompilerError; overload;

  end;

  [DNTypeName('System.CodeDom.Compiler.CompilerError')]
  DNCompilerError = interface(DDN.mscorlib.DNObject)
  ['{A3C7B849-316F-389D-BE25-4FBF1595B534}']
  { getters & setters } 

    function get_Line: Int32;
    procedure set_Line(value: Int32);
    function get_Column: Int32;
    procedure set_Column(value: Int32);
    function get_ErrorNumber: string;
    procedure set_ErrorNumber(value: string);
    function get_ErrorText: string;
    procedure set_ErrorText(value: string);
    function get_IsWarning: Boolean;
    procedure set_IsWarning(value: Boolean);
    function get_FileName: string;
    procedure set_FileName(value: string);

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Line: Int32 read get_Line write set_Line;
    property Column: Int32 read get_Column write set_Column;
    property ErrorNumber: string read get_ErrorNumber write set_ErrorNumber;
    property ErrorText: string read get_ErrorText write set_ErrorText;
    property IsWarning: Boolean read get_IsWarning write set_IsWarning;
    property FileName: string read get_FileName write set_FileName;
  end;

  TDNCompilerError = class(TDNGenericImport<DNCompilerErrorClass, DNCompilerError>) end;

  //-------------namespace: System.CodeDom.Compiler----------------
  DNCompilerInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{75051793-5501-52FD-ADB5-ED9A3BC8965A}']
  end;

  [DNTypeName('System.CodeDom.Compiler.CompilerInfo')]
  DNCompilerInfo = interface(DDN.mscorlib.DNObject)
  ['{CBB8F837-C710-3207-A59E-7501E4890887}']
  { getters & setters } 

    function get_CodeDomProviderType: DDN.mscorlib.DNType;
    function get_IsCodeDomProviderTypeValid: Boolean;

  { methods } 

    function CreateProvider(providerOptions: DDN.mscorlib.DNIDictionary<string, string>): DNCodeDomProvider; overload;
    function GetLanguages: TArray<string>;
    function GetExtensions: TArray<string>;
    function CreateDefaultCompilerParameters: DNCompilerParameters;
    function GetHashCode: Int32;
    function Equals(o: DDN.mscorlib.DNObject): Boolean;
    function CreateProvider: DNCodeDomProvider; overload;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CodeDomProviderType: DDN.mscorlib.DNType read get_CodeDomProviderType;
    property IsCodeDomProviderTypeValid: Boolean read get_IsCodeDomProviderTypeValid;
  end;

  TDNCompilerInfo = class(TDNGenericImport<DNCompilerInfoClass, DNCompilerInfo>) end;

  //-------------namespace: System.CodeDom.Compiler----------------
  DNCompilerParametersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{98AAC05D-9F4A-52E0-9F3C-86251DA7DA26}']
  { constructors } 

    {class} function init: DNCompilerParameters; overload;
    {class} function init(assemblyNames: TArray<string>): DNCompilerParameters; overload;
    {class} function init(assemblyNames: TArray<string>; outputName: string): DNCompilerParameters; overload;
    {class} function init(assemblyNames: TArray<string>; outputName: string; includeDebugInformation: Boolean): DNCompilerParameters; overload;

  end;

  [DNTypeName('System.CodeDom.Compiler.CompilerParameters')]
  DNCompilerParameters = interface(DDN.mscorlib.DNObject)
  ['{48967BCC-A6C5-3321-9537-A4313CF4B316}']
  { getters & setters } 

    function get_CoreAssemblyFileName: string;
    procedure set_CoreAssemblyFileName(value: string);
    function get_GenerateExecutable: Boolean;
    procedure set_GenerateExecutable(value: Boolean);
    function get_GenerateInMemory: Boolean;
    procedure set_GenerateInMemory(value: Boolean);
    function get_ReferencedAssemblies: DNStringCollection;
    function get_MainClass: string;
    procedure set_MainClass(value: string);
    function get_OutputAssembly: string;
    procedure set_OutputAssembly(value: string);
    function get_TempFiles: DNTempFileCollection;
    procedure set_TempFiles(value: DNTempFileCollection);
    function get_IncludeDebugInformation: Boolean;
    procedure set_IncludeDebugInformation(value: Boolean);
    function get_TreatWarningsAsErrors: Boolean;
    procedure set_TreatWarningsAsErrors(value: Boolean);
    function get_WarningLevel: Int32;
    procedure set_WarningLevel(value: Int32);
    function get_CompilerOptions: string;
    procedure set_CompilerOptions(value: string);
    function get_Win32Resource: string;
    procedure set_Win32Resource(value: string);
    function get_EmbeddedResources: DNStringCollection;
    function get_LinkedResources: DNStringCollection;
    function get_UserToken: IntPtr;
    procedure set_UserToken(value: IntPtr);
    function get_Evidence: DDN.mscorlib.DNEvidence;
    procedure set_Evidence(value: DDN.mscorlib.DNEvidence);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CoreAssemblyFileName: string read get_CoreAssemblyFileName write set_CoreAssemblyFileName;
    property GenerateExecutable: Boolean read get_GenerateExecutable write set_GenerateExecutable;
    property GenerateInMemory: Boolean read get_GenerateInMemory write set_GenerateInMemory;
    property ReferencedAssemblies: DNStringCollection read get_ReferencedAssemblies;
    property MainClass: string read get_MainClass write set_MainClass;
    property OutputAssembly: string read get_OutputAssembly write set_OutputAssembly;
    property TempFiles: DNTempFileCollection read get_TempFiles write set_TempFiles;
    property IncludeDebugInformation: Boolean read get_IncludeDebugInformation write set_IncludeDebugInformation;
    property TreatWarningsAsErrors: Boolean read get_TreatWarningsAsErrors write set_TreatWarningsAsErrors;
    property WarningLevel: Int32 read get_WarningLevel write set_WarningLevel;
    property CompilerOptions: string read get_CompilerOptions write set_CompilerOptions;
    property Win32Resource: string read get_Win32Resource write set_Win32Resource;
    property EmbeddedResources: DNStringCollection read get_EmbeddedResources;
    property LinkedResources: DNStringCollection read get_LinkedResources;
    property UserToken: IntPtr read get_UserToken write set_UserToken;
    property Evidence: DDN.mscorlib.DNEvidence read get_Evidence write set_Evidence;
  end;

  TDNCompilerParameters = class(TDNGenericImport<DNCompilerParametersClass, DNCompilerParameters>) end;

  //-------------namespace: System.CodeDom.Compiler----------------
  DNCompilerResultsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{37437627-1F61-520F-A758-23B3183573AA}']
  { constructors } 

    {class} function init(tempFiles: DNTempFileCollection): DNCompilerResults;

  end;

  [DNTypeName('System.CodeDom.Compiler.CompilerResults')]
  DNCompilerResults = interface(DDN.mscorlib.DNObject)
  ['{6A56D79B-F9D7-341C-9FB9-38FA7DBE1719}']
  { getters & setters } 

    function get_TempFiles: DNTempFileCollection;
    procedure set_TempFiles(value: DNTempFileCollection);
    function get_Evidence: DDN.mscorlib.DNEvidence;
    procedure set_Evidence(value: DDN.mscorlib.DNEvidence);
    function get_CompiledAssembly: DDN.mscorlib.DNAssembly;
    procedure set_CompiledAssembly(value: DDN.mscorlib.DNAssembly);
    function get_Errors: DNCompilerErrorCollection;
    function get_Output: DNStringCollection;
    function get_PathToAssembly: string;
    procedure set_PathToAssembly(value: string);
    function get_NativeCompilerReturnValue: Int32;
    procedure set_NativeCompilerReturnValue(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TempFiles: DNTempFileCollection read get_TempFiles write set_TempFiles;
    property Evidence: DDN.mscorlib.DNEvidence read get_Evidence write set_Evidence;
    property CompiledAssembly: DDN.mscorlib.DNAssembly read get_CompiledAssembly write set_CompiledAssembly;
    property Errors: DNCompilerErrorCollection read get_Errors;
    property Output: DNStringCollection read get_Output;
    property PathToAssembly: string read get_PathToAssembly write set_PathToAssembly;
    property NativeCompilerReturnValue: Int32 read get_NativeCompilerReturnValue write set_NativeCompilerReturnValue;
  end;

  TDNCompilerResults = class(TDNGenericImport<DNCompilerResultsClass, DNCompilerResults>) end;

  //-------------namespace: System.CodeDom.Compiler----------------
  DNExecutorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4F24C0CF-44B4-5264-AA06-46D5B70ED9EE}']
  { static methods } 

    {class} procedure ExecWait(cmd: string; tempFiles: DNTempFileCollection);
    {class} function ExecWaitWithCapture(cmd: string; tempFiles: DNTempFileCollection; out outputName: string; out errorName: string): Int32; overload;
    {class} function ExecWaitWithCapture(cmd: string; currentDir: string; tempFiles: DNTempFileCollection; out outputName: string; out errorName: string): Int32; overload;
    {class} function ExecWaitWithCapture(userToken: IntPtr; cmd: string; tempFiles: DNTempFileCollection; out outputName: string; out errorName: string): Int32; overload;
    {class} function ExecWaitWithCapture(userToken: IntPtr; cmd: string; currentDir: string; tempFiles: DNTempFileCollection; out outputName: string; out errorName: string): Int32; overload;

  end;

  [DNTypeName('System.CodeDom.Compiler.Executor')]
  DNExecutor = interface(DDN.mscorlib.DNObject)
  ['{CD166526-2B05-37ED-A4F7-A0158D5FEBD2}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNExecutor = class(TDNGenericImport<DNExecutorClass, DNExecutor>) end;

  //-------------namespace: System.CodeDom.Compiler----------------
  DNTempFileCollectionClass = interface(DNObjectClass)
  ['{8720C78F-8D29-533B-A6C5-8E0C45930103}']
  { constructors } 

    {class} function init: DNTempFileCollection; overload;
    {class} function init(tempDir: string): DNTempFileCollection; overload;
    {class} function init(tempDir: string; keepFiles: Boolean): DNTempFileCollection; overload;

  end;

  [DNTypeName('System.CodeDom.Compiler.TempFileCollection')]
  DNTempFileCollection = interface(DDN.mscorlib.DNICollection)
  ['{90C29C80-D7C1-3265-A8FF-DCE48A64EDF6}']
  { getters & setters } 

    function get_Count: Int32;
    function get_TempDir: string;
    function get_BasePath: string;
    function get_KeepFiles: Boolean;
    procedure set_KeepFiles(value: Boolean);

  { methods } 

    function AddExtension(fileExtension: string; keepFile: Boolean): string; overload;
    procedure AddFile(fileName: string; keepFile: Boolean);
    procedure Delete;
    function AddExtension(fileExtension: string): string; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure CopyTo(fileNames: TArray<string>; start: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property TempDir: string read get_TempDir;
    property BasePath: string read get_BasePath;
    property KeepFiles: Boolean read get_KeepFiles write set_KeepFiles;
  end;

  TDNTempFileCollection = class(TDNGenericImport<DNTempFileCollectionClass, DNTempFileCollection>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeAttributeArgumentCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{E74BF669-9EC9-58E4-B149-6ED80B55DAA9}']
  { constructors } 

    {class} function init: DNCodeAttributeArgumentCollection; overload;
    {class} function init(value: DNCodeAttributeArgumentCollection): DNCodeAttributeArgumentCollection; overload;
    {class} function init(value: TArray<DNCodeAttributeArgument>): DNCodeAttributeArgumentCollection; overload;

  end;

  [DNTypeName('System.CodeDom.CodeAttributeArgumentCollection')]
  DNCodeAttributeArgumentCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{424720CD-671F-329D-80DF-FA8BCD9EA9CD}']
  { getters & setters } 

    function get_Item(index: Int32): DNCodeAttributeArgument;
    procedure set_Item(index: Int32; value: DNCodeAttributeArgument);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(value: DNCodeAttributeArgument): Int32;
    procedure AddRange(value: TArray<DNCodeAttributeArgument>); overload;
    procedure AddRange(value: DNCodeAttributeArgumentCollection); overload;
    function &Contains(value: DNCodeAttributeArgument): Boolean;
    procedure CopyTo(&array: TArray<DNCodeAttributeArgument>; index: Int32);
    function IndexOf(value: DNCodeAttributeArgument): Int32;
    procedure Insert(index: Int32; value: DNCodeAttributeArgument);
    procedure Remove(value: DNCodeAttributeArgument);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCodeAttributeArgument read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNCodeAttributeArgumentCollection = class(TDNGenericImport<DNCodeAttributeArgumentCollectionClass, DNCodeAttributeArgumentCollection>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeAttributeDeclarationCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{D6CA8D17-800B-5AF3-AFD4-AC6FDC8071C8}']
  { constructors } 

    {class} function init: DNCodeAttributeDeclarationCollection; overload;
    {class} function init(value: DNCodeAttributeDeclarationCollection): DNCodeAttributeDeclarationCollection; overload;
    {class} function init(value: TArray<DNCodeAttributeDeclaration>): DNCodeAttributeDeclarationCollection; overload;

  end;

  [DNTypeName('System.CodeDom.CodeAttributeDeclarationCollection')]
  DNCodeAttributeDeclarationCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{3A8E937E-C560-3779-A423-B645BAD276A1}']
  { getters & setters } 

    function get_Item(index: Int32): DNCodeAttributeDeclaration;
    procedure set_Item(index: Int32; value: DNCodeAttributeDeclaration);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(value: DNCodeAttributeDeclaration): Int32;
    procedure AddRange(value: TArray<DNCodeAttributeDeclaration>); overload;
    procedure AddRange(value: DNCodeAttributeDeclarationCollection); overload;
    function &Contains(value: DNCodeAttributeDeclaration): Boolean;
    procedure CopyTo(&array: TArray<DNCodeAttributeDeclaration>; index: Int32);
    function IndexOf(value: DNCodeAttributeDeclaration): Int32;
    procedure Insert(index: Int32; value: DNCodeAttributeDeclaration);
    procedure Remove(value: DNCodeAttributeDeclaration);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCodeAttributeDeclaration read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNCodeAttributeDeclarationCollection = class(TDNGenericImport<DNCodeAttributeDeclarationCollectionClass, DNCodeAttributeDeclarationCollection>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeCatchClauseCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{2D65CDDA-768E-57A6-8BCB-329709DC693C}']
  { constructors } 

    {class} function init: DNCodeCatchClauseCollection; overload;
    {class} function init(value: DNCodeCatchClauseCollection): DNCodeCatchClauseCollection; overload;
    {class} function init(value: TArray<DNCodeCatchClause>): DNCodeCatchClauseCollection; overload;

  end;

  [DNTypeName('System.CodeDom.CodeCatchClauseCollection')]
  DNCodeCatchClauseCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{2077ECF3-61C8-3CC5-9E45-721189A88E03}']
  { getters & setters } 

    function get_Item(index: Int32): DNCodeCatchClause;
    procedure set_Item(index: Int32; value: DNCodeCatchClause);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(value: DNCodeCatchClause): Int32;
    procedure AddRange(value: TArray<DNCodeCatchClause>); overload;
    procedure AddRange(value: DNCodeCatchClauseCollection); overload;
    function &Contains(value: DNCodeCatchClause): Boolean;
    procedure CopyTo(&array: TArray<DNCodeCatchClause>; index: Int32);
    function IndexOf(value: DNCodeCatchClause): Int32;
    procedure Insert(index: Int32; value: DNCodeCatchClause);
    procedure Remove(value: DNCodeCatchClause);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCodeCatchClause read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNCodeCatchClauseCollection = class(TDNGenericImport<DNCodeCatchClauseCollectionClass, DNCodeCatchClauseCollection>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeCommentStatementCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{C1EFBDC7-6F16-561C-ADE9-47CAC9A4D2C2}']
  { constructors } 

    {class} function init: DNCodeCommentStatementCollection; overload;
    {class} function init(value: DNCodeCommentStatementCollection): DNCodeCommentStatementCollection; overload;
    {class} function init(value: TArray<DNCodeCommentStatement>): DNCodeCommentStatementCollection; overload;

  end;

  [DNTypeName('System.CodeDom.CodeCommentStatementCollection')]
  DNCodeCommentStatementCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{C12A8292-F24A-3BA8-94E6-EB3206D225E2}']
  { getters & setters } 

    function get_Item(index: Int32): DNCodeCommentStatement;
    procedure set_Item(index: Int32; value: DNCodeCommentStatement);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(value: DNCodeCommentStatement): Int32;
    procedure AddRange(value: TArray<DNCodeCommentStatement>); overload;
    procedure AddRange(value: DNCodeCommentStatementCollection); overload;
    function &Contains(value: DNCodeCommentStatement): Boolean;
    procedure CopyTo(&array: TArray<DNCodeCommentStatement>; index: Int32);
    function IndexOf(value: DNCodeCommentStatement): Int32;
    procedure Insert(index: Int32; value: DNCodeCommentStatement);
    procedure Remove(value: DNCodeCommentStatement);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCodeCommentStatement read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNCodeCommentStatementCollection = class(TDNGenericImport<DNCodeCommentStatementCollectionClass, DNCodeCommentStatementCollection>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeDirectiveCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{3AE85A91-85DE-55CE-82B9-53A708347559}']
  { constructors } 

    {class} function init: DNCodeDirectiveCollection; overload;
    {class} function init(value: DNCodeDirectiveCollection): DNCodeDirectiveCollection; overload;
    {class} function init(value: TArray<DNCodeDirective>): DNCodeDirectiveCollection; overload;

  end;

  [DNTypeName('System.CodeDom.CodeDirectiveCollection')]
  DNCodeDirectiveCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{ED78C3FA-AB56-353C-98BB-9280D3404C81}']
  { getters & setters } 

    function get_Item(index: Int32): DNCodeDirective;
    procedure set_Item(index: Int32; value: DNCodeDirective);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(value: DNCodeDirective): Int32;
    procedure AddRange(value: TArray<DNCodeDirective>); overload;
    procedure AddRange(value: DNCodeDirectiveCollection); overload;
    function &Contains(value: DNCodeDirective): Boolean;
    procedure CopyTo(&array: TArray<DNCodeDirective>; index: Int32);
    function IndexOf(value: DNCodeDirective): Int32;
    procedure Insert(index: Int32; value: DNCodeDirective);
    procedure Remove(value: DNCodeDirective);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCodeDirective read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNCodeDirectiveCollection = class(TDNGenericImport<DNCodeDirectiveCollectionClass, DNCodeDirectiveCollection>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeExpressionCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{A11420C7-7387-5750-BDAD-673F51EA3628}']
  { constructors } 

    {class} function init: DNCodeExpressionCollection; overload;
    {class} function init(value: DNCodeExpressionCollection): DNCodeExpressionCollection; overload;
    {class} function init(value: TArray<DNCodeExpression>): DNCodeExpressionCollection; overload;

  end;

  [DNTypeName('System.CodeDom.CodeExpressionCollection')]
  DNCodeExpressionCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{26D06C1F-81BA-33C3-BDE2-49747AA83A11}']
  { getters & setters } 

    function get_Item(index: Int32): DNCodeExpression;
    procedure set_Item(index: Int32; value: DNCodeExpression);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    procedure AddRange(value: TArray<DNCodeExpression>); overload;
    function Add(value: DNCodeExpression): Int32;
    procedure AddRange(value: DNCodeExpressionCollection); overload;
    function &Contains(value: DNCodeExpression): Boolean;
    procedure CopyTo(&array: TArray<DNCodeExpression>; index: Int32);
    function IndexOf(value: DNCodeExpression): Int32;
    procedure Insert(index: Int32; value: DNCodeExpression);
    procedure Remove(value: DNCodeExpression);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCodeExpression read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNCodeExpressionCollection = class(TDNGenericImport<DNCodeExpressionCollectionClass, DNCodeExpressionCollection>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeNamespaceCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{D311E3C1-9640-5B8A-AA57-723AC0DEE45D}']
  { constructors } 

    {class} function init: DNCodeNamespaceCollection; overload;
    {class} function init(value: DNCodeNamespaceCollection): DNCodeNamespaceCollection; overload;
    {class} function init(value: TArray<DNCodeNamespace>): DNCodeNamespaceCollection; overload;

  end;

  [DNTypeName('System.CodeDom.CodeNamespaceCollection')]
  DNCodeNamespaceCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{D4985194-80E5-36FE-8B95-8CD2E35E5FF5}']
  { getters & setters } 

    function get_Item(index: Int32): DNCodeNamespace;
    procedure set_Item(index: Int32; value: DNCodeNamespace);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(value: DNCodeNamespace): Int32;
    procedure AddRange(value: TArray<DNCodeNamespace>); overload;
    procedure AddRange(value: DNCodeNamespaceCollection); overload;
    function &Contains(value: DNCodeNamespace): Boolean;
    procedure CopyTo(&array: TArray<DNCodeNamespace>; index: Int32);
    function IndexOf(value: DNCodeNamespace): Int32;
    procedure Insert(index: Int32; value: DNCodeNamespace);
    procedure Remove(value: DNCodeNamespace);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCodeNamespace read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNCodeNamespaceCollection = class(TDNGenericImport<DNCodeNamespaceCollectionClass, DNCodeNamespaceCollection>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeParameterDeclarationExpressionCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{06404C36-4330-5AA2-8ED3-D84B2013CA69}']
  { constructors } 

    {class} function init: DNCodeParameterDeclarationExpressionCollection; overload;
    {class} function init(value: DNCodeParameterDeclarationExpressionCollection): DNCodeParameterDeclarationExpressionCollection; overload;
    {class} function init(value: TArray<DNCodeParameterDeclarationExpression>): DNCodeParameterDeclarationExpressionCollection; overload;

  end;

  [DNTypeName('System.CodeDom.CodeParameterDeclarationExpressionCollection')]
  DNCodeParameterDeclarationExpressionCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{7FD9E7C0-B133-302F-A3A1-42167780CB62}']
  { getters & setters } 

    function get_Item(index: Int32): DNCodeParameterDeclarationExpression;
    procedure set_Item(index: Int32; value: DNCodeParameterDeclarationExpression);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(value: DNCodeParameterDeclarationExpression): Int32;
    procedure AddRange(value: TArray<DNCodeParameterDeclarationExpression>); overload;
    procedure AddRange(value: DNCodeParameterDeclarationExpressionCollection); overload;
    function &Contains(value: DNCodeParameterDeclarationExpression): Boolean;
    procedure CopyTo(&array: TArray<DNCodeParameterDeclarationExpression>; index: Int32);
    function IndexOf(value: DNCodeParameterDeclarationExpression): Int32;
    procedure Insert(index: Int32; value: DNCodeParameterDeclarationExpression);
    procedure Remove(value: DNCodeParameterDeclarationExpression);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCodeParameterDeclarationExpression read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNCodeParameterDeclarationExpressionCollection = class(TDNGenericImport<DNCodeParameterDeclarationExpressionCollectionClass, DNCodeParameterDeclarationExpressionCollection>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeStatementCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{29A26EC3-BC15-51A4-B536-87ECAAB368C4}']
  { constructors } 

    {class} function init: DNCodeStatementCollection; overload;
    {class} function init(value: DNCodeStatementCollection): DNCodeStatementCollection; overload;
    {class} function init(value: TArray<DNCodeStatement>): DNCodeStatementCollection; overload;

  end;

  [DNTypeName('System.CodeDom.CodeStatementCollection')]
  DNCodeStatementCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{A531374E-FA08-36C6-AF96-31C684EEFC08}']
  { getters & setters } 

    function get_Item(index: Int32): DNCodeStatement;
    procedure set_Item(index: Int32; value: DNCodeStatement);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(value: DNCodeStatement): Int32; overload;
    function Add(value: DNCodeExpression): Int32; overload;
    procedure AddRange(value: TArray<DNCodeStatement>); overload;
    procedure AddRange(value: DNCodeStatementCollection); overload;
    function &Contains(value: DNCodeStatement): Boolean;
    procedure CopyTo(&array: TArray<DNCodeStatement>; index: Int32);
    function IndexOf(value: DNCodeStatement): Int32;
    procedure Insert(index: Int32; value: DNCodeStatement);
    procedure Remove(value: DNCodeStatement);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCodeStatement read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNCodeStatementCollection = class(TDNGenericImport<DNCodeStatementCollectionClass, DNCodeStatementCollection>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeTypeDeclarationCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{51287AF6-A040-5047-80F6-F555BAE09B77}']
  { constructors } 

    {class} function init: DNCodeTypeDeclarationCollection; overload;
    {class} function init(value: DNCodeTypeDeclarationCollection): DNCodeTypeDeclarationCollection; overload;
    {class} function init(value: TArray<DNCodeTypeDeclaration>): DNCodeTypeDeclarationCollection; overload;

  end;

  [DNTypeName('System.CodeDom.CodeTypeDeclarationCollection')]
  DNCodeTypeDeclarationCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{A0BD9913-B07D-32C3-8DF1-AA998B3FB10E}']
  { getters & setters } 

    function get_Item(index: Int32): DNCodeTypeDeclaration;
    procedure set_Item(index: Int32; value: DNCodeTypeDeclaration);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(value: DNCodeTypeDeclaration): Int32;
    procedure AddRange(value: TArray<DNCodeTypeDeclaration>); overload;
    procedure AddRange(value: DNCodeTypeDeclarationCollection); overload;
    function &Contains(value: DNCodeTypeDeclaration): Boolean;
    procedure CopyTo(&array: TArray<DNCodeTypeDeclaration>; index: Int32);
    function IndexOf(value: DNCodeTypeDeclaration): Int32;
    procedure Insert(index: Int32; value: DNCodeTypeDeclaration);
    procedure Remove(value: DNCodeTypeDeclaration);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCodeTypeDeclaration read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNCodeTypeDeclarationCollection = class(TDNGenericImport<DNCodeTypeDeclarationCollectionClass, DNCodeTypeDeclarationCollection>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeTypeMemberCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{43E0D17B-C84B-548D-9B51-FCF6D3BC2591}']
  { constructors } 

    {class} function init: DNCodeTypeMemberCollection; overload;
    {class} function init(value: DNCodeTypeMemberCollection): DNCodeTypeMemberCollection; overload;
    {class} function init(value: TArray<DNCodeTypeMember>): DNCodeTypeMemberCollection; overload;

  end;

  [DNTypeName('System.CodeDom.CodeTypeMemberCollection')]
  DNCodeTypeMemberCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{85D435C5-7AF6-30E9-8A0B-C978737C2849}']
  { getters & setters } 

    function get_Item(index: Int32): DNCodeTypeMember;
    procedure set_Item(index: Int32; value: DNCodeTypeMember);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(value: DNCodeTypeMember): Int32;
    procedure AddRange(value: TArray<DNCodeTypeMember>); overload;
    procedure AddRange(value: DNCodeTypeMemberCollection); overload;
    function &Contains(value: DNCodeTypeMember): Boolean;
    procedure CopyTo(&array: TArray<DNCodeTypeMember>; index: Int32);
    function IndexOf(value: DNCodeTypeMember): Int32;
    procedure Insert(index: Int32; value: DNCodeTypeMember);
    procedure Remove(value: DNCodeTypeMember);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCodeTypeMember read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNCodeTypeMemberCollection = class(TDNGenericImport<DNCodeTypeMemberCollectionClass, DNCodeTypeMemberCollection>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeTypeParameterCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{84151890-0AD4-57A9-99F0-AE976E14FD00}']
  { constructors } 

    {class} function init: DNCodeTypeParameterCollection; overload;
    {class} function init(value: DNCodeTypeParameterCollection): DNCodeTypeParameterCollection; overload;
    {class} function init(value: TArray<DNCodeTypeParameter>): DNCodeTypeParameterCollection; overload;

  end;

  [DNTypeName('System.CodeDom.CodeTypeParameterCollection')]
  DNCodeTypeParameterCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{6019C9D4-84CB-33BC-9E79-25F21172C33B}']
  { getters & setters } 

    function get_Item(index: Int32): DNCodeTypeParameter;
    procedure set_Item(index: Int32; value: DNCodeTypeParameter);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(value: DNCodeTypeParameter): Int32; overload;
    procedure Add(value: string); overload;
    procedure AddRange(value: TArray<DNCodeTypeParameter>); overload;
    procedure AddRange(value: DNCodeTypeParameterCollection); overload;
    function &Contains(value: DNCodeTypeParameter): Boolean;
    procedure CopyTo(&array: TArray<DNCodeTypeParameter>; index: Int32);
    function IndexOf(value: DNCodeTypeParameter): Int32;
    procedure Insert(index: Int32; value: DNCodeTypeParameter);
    procedure Remove(value: DNCodeTypeParameter);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCodeTypeParameter read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNCodeTypeParameterCollection = class(TDNGenericImport<DNCodeTypeParameterCollectionClass, DNCodeTypeParameterCollection>) end;

  //-------------namespace: System.CodeDom----------------
  DNCodeTypeReferenceCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{0B91A58D-75E2-5DAE-B4DD-028A9A625195}']
  { constructors } 

    {class} function init: DNCodeTypeReferenceCollection; overload;
    {class} function init(value: DNCodeTypeReferenceCollection): DNCodeTypeReferenceCollection; overload;
    {class} function init(value: TArray<DNCodeTypeReference>): DNCodeTypeReferenceCollection; overload;

  end;

  [DNTypeName('System.CodeDom.CodeTypeReferenceCollection')]
  DNCodeTypeReferenceCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{3F2E333C-9A04-33AC-95C7-7B0015BEB345}']
  { getters & setters } 

    function get_Item(index: Int32): DNCodeTypeReference;
    procedure set_Item(index: Int32; value: DNCodeTypeReference);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(value: DNCodeTypeReference): Int32; overload;
    procedure Add(value: string); overload;
    procedure Add(value: DDN.mscorlib.DNType); overload;
    procedure AddRange(value: TArray<DNCodeTypeReference>); overload;
    procedure AddRange(value: DNCodeTypeReferenceCollection); overload;
    function &Contains(value: DNCodeTypeReference): Boolean;
    procedure CopyTo(&array: TArray<DNCodeTypeReference>; index: Int32);
    function IndexOf(value: DNCodeTypeReference): Int32;
    procedure Insert(index: Int32; value: DNCodeTypeReference);
    procedure Remove(value: DNCodeTypeReference);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCodeTypeReference read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNCodeTypeReferenceCollection = class(TDNGenericImport<DNCodeTypeReferenceCollectionClass, DNCodeTypeReferenceCollection>) end;

  //-------------namespace: System.CodeDom.Compiler----------------
  DNCompilerErrorCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{5C187F4F-CBF8-50C0-97DB-589EE88F1669}']
  { constructors } 

    {class} function init: DNCompilerErrorCollection; overload;
    {class} function init(value: DNCompilerErrorCollection): DNCompilerErrorCollection; overload;
    {class} function init(value: TArray<DNCompilerError>): DNCompilerErrorCollection; overload;

  end;

  [DNTypeName('System.CodeDom.Compiler.CompilerErrorCollection')]
  DNCompilerErrorCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{074B0421-0346-38F9-BF08-9F4B52FC292E}']
  { getters & setters } 

    function get_Item(index: Int32): DNCompilerError;
    procedure set_Item(index: Int32; value: DNCompilerError);
    function get_HasErrors: Boolean;
    function get_HasWarnings: Boolean;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(value: DNCompilerError): Int32;
    procedure AddRange(value: TArray<DNCompilerError>); overload;
    procedure AddRange(value: DNCompilerErrorCollection); overload;
    function &Contains(value: DNCompilerError): Boolean;
    procedure CopyTo(&array: TArray<DNCompilerError>; index: Int32);
    function IndexOf(value: DNCompilerError): Int32;
    procedure Insert(index: Int32; value: DNCompilerError);
    procedure Remove(value: DNCompilerError);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCompilerError read get_Item write set_Item; default;
    property HasErrors: Boolean read get_HasErrors;
    property HasWarnings: Boolean read get_HasWarnings;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNCompilerErrorCollection = class(TDNGenericImport<DNCompilerErrorCollectionClass, DNCompilerErrorCollection>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNDesignerVerbCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{712FC46D-9B66-5FFC-A84D-49D1CF219852}']
  { constructors } 

    {class} function init: DNDesignerVerbCollection; overload;
    {class} function init(value: TArray<DNDesignerVerb>): DNDesignerVerbCollection; overload;

  end;

  [DNTypeName('System.ComponentModel.Design.DesignerVerbCollection')]
  DNDesignerVerbCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{67114ED5-9F2A-3A0A-8C7A-746FDA064488}']
  { getters & setters } 

    function get_Item(index: Int32): DNDesignerVerb;
    procedure set_Item(index: Int32; value: DNDesignerVerb);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(value: DNDesignerVerb): Int32;
    procedure AddRange(value: TArray<DNDesignerVerb>); overload;
    procedure AddRange(value: DNDesignerVerbCollection); overload;
    procedure Insert(index: Int32; value: DNDesignerVerb);
    function IndexOf(value: DNDesignerVerb): Int32;
    function &Contains(value: DNDesignerVerb): Boolean;
    procedure Remove(value: DNDesignerVerb);
    procedure CopyTo(&array: TArray<DNDesignerVerb>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNDesignerVerb read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNDesignerVerbCollection = class(TDNGenericImport<DNDesignerVerbCollectionClass, DNDesignerVerbCollection>) end;

  //-------------namespace: System.Diagnostics----------------
  DNCounterCreationDataCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{DB1CAD55-E6CE-5838-81F2-583F2498AE84}']
  { constructors } 

    {class} function init: DNCounterCreationDataCollection; overload;
    {class} function init(value: DNCounterCreationDataCollection): DNCounterCreationDataCollection; overload;
    {class} function init(value: TArray<DNCounterCreationData>): DNCounterCreationDataCollection; overload;

  end;

  [DNTypeName('System.Diagnostics.CounterCreationDataCollection')]
  DNCounterCreationDataCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{3C67AA6C-2076-3E69-B7A2-91A88115CCF9}']
  { getters & setters } 

    function get_Item(index: Int32): DNCounterCreationData;
    procedure set_Item(index: Int32; value: DNCounterCreationData);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(value: DNCounterCreationData): Int32;
    procedure AddRange(value: TArray<DNCounterCreationData>); overload;
    procedure AddRange(value: DNCounterCreationDataCollection); overload;
    function &Contains(value: DNCounterCreationData): Boolean;
    procedure CopyTo(&array: TArray<DNCounterCreationData>; index: Int32);
    function IndexOf(value: DNCounterCreationData): Int32;
    procedure Insert(index: Int32; value: DNCounterCreationData);
    procedure Remove(value: DNCounterCreationData);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCounterCreationData read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNCounterCreationDataCollection = class(TDNGenericImport<DNCounterCreationDataCollectionClass, DNCounterCreationDataCollection>) end;

  //-------------namespace: System.Diagnostics----------------
  DNEventLogPermissionEntryCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{B5B22639-3366-5539-9E55-485EBABDD21E}']
  end;

  [DNTypeName('System.Diagnostics.EventLogPermissionEntryCollection')]
  DNEventLogPermissionEntryCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{79286B78-C5B2-3D1F-8880-FACC34D40685}']
  { getters & setters } 

    function get_Item(index: Int32): DNEventLogPermissionEntry;
    procedure set_Item(index: Int32; value: DNEventLogPermissionEntry);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(value: DNEventLogPermissionEntry): Int32;
    procedure AddRange(value: TArray<DNEventLogPermissionEntry>); overload;
    procedure AddRange(value: DNEventLogPermissionEntryCollection); overload;
    function &Contains(value: DNEventLogPermissionEntry): Boolean;
    procedure CopyTo(&array: TArray<DNEventLogPermissionEntry>; index: Int32);
    function IndexOf(value: DNEventLogPermissionEntry): Int32;
    procedure Insert(index: Int32; value: DNEventLogPermissionEntry);
    procedure Remove(value: DNEventLogPermissionEntry);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNEventLogPermissionEntry read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNEventLogPermissionEntryCollection = class(TDNGenericImport<DNEventLogPermissionEntryCollectionClass, DNEventLogPermissionEntryCollection>) end;

  //-------------namespace: System.Diagnostics----------------
  DNPerformanceCounterPermissionEntryCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{64B3AB61-7362-53F5-8FA0-4AB8B6E02C7E}']
  end;

  [DNTypeName('System.Diagnostics.PerformanceCounterPermissionEntryCollection')]
  DNPerformanceCounterPermissionEntryCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{23C455F6-80F7-33FD-949B-0EA69D224FB2}']
  { getters & setters } 

    function get_Item(index: Int32): DNPerformanceCounterPermissionEntry;
    procedure set_Item(index: Int32; value: DNPerformanceCounterPermissionEntry);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(value: DNPerformanceCounterPermissionEntry): Int32;
    procedure AddRange(value: TArray<DNPerformanceCounterPermissionEntry>); overload;
    procedure AddRange(value: DNPerformanceCounterPermissionEntryCollection); overload;
    function &Contains(value: DNPerformanceCounterPermissionEntry): Boolean;
    procedure CopyTo(&array: TArray<DNPerformanceCounterPermissionEntry>; index: Int32);
    function IndexOf(value: DNPerformanceCounterPermissionEntry): Int32;
    procedure Insert(index: Int32; value: DNPerformanceCounterPermissionEntry);
    procedure Remove(value: DNPerformanceCounterPermissionEntry);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNPerformanceCounterPermissionEntry read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNPerformanceCounterPermissionEntryCollection = class(TDNGenericImport<DNPerformanceCounterPermissionEntryCollectionClass, DNPerformanceCounterPermissionEntryCollection>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX509CertificateCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{83C3CA7F-F03B-57EF-A7C6-5777897E6B60}']
  { constructors } 

    {class} function init: DNX509CertificateCollection; overload;
    {class} function init(value: DNX509CertificateCollection): DNX509CertificateCollection; overload;
    {class} function init(value: TArray<DDN.mscorlib.DNX509Certificate>): DNX509CertificateCollection; overload;

  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.X509CertificateCollection')]
  DNX509CertificateCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{2794BB5A-5E85-3BC9-892B-C863B375B2EF}']
  { getters & setters } 

    function get_Item(index: Int32): DDN.mscorlib.DNX509Certificate;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNX509Certificate);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(value: DDN.mscorlib.DNX509Certificate): Int32;
    procedure AddRange(value: TArray<DDN.mscorlib.DNX509Certificate>); overload;
    procedure AddRange(value: DNX509CertificateCollection); overload;
    function &Contains(value: DDN.mscorlib.DNX509Certificate): Boolean;
    procedure CopyTo(&array: TArray<DDN.mscorlib.DNX509Certificate>; index: Int32);
    function IndexOf(value: DDN.mscorlib.DNX509Certificate): Int32;
    procedure Insert(index: Int32; value: DDN.mscorlib.DNX509Certificate);
    function GetEnumerator: DNX509CertificateCollection_X509CertificateEnumerator;
    procedure Remove(value: DDN.mscorlib.DNX509Certificate);
    function GetHashCode: Int32;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DDN.mscorlib.DNX509Certificate read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNX509CertificateCollection = class(TDNGenericImport<DNX509CertificateCollectionClass, DNX509CertificateCollection>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX509Certificate2CollectionClass = interface(DNX509CertificateCollectionClass)
  ['{8EC4A263-D22E-598F-8C32-9BE4060EAA6B}']
  { constructors } 

    {class} function init: DNX509Certificate2Collection; overload;
    {class} function init(certificate: DNX509Certificate2): DNX509Certificate2Collection; overload;
    {class} function init(certificates: DNX509Certificate2Collection): DNX509Certificate2Collection; overload;
    {class} function init(certificates: TArray<DNX509Certificate2>): DNX509Certificate2Collection; overload;

  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.X509Certificate2Collection')]
  DNX509Certificate2Collection = interface(DNX509CertificateCollection)
  ['{3A42BB0C-95CE-30D4-9677-10FAE0ED3892}']
  { getters & setters } 

    function get_Item(index: Int32): DNX509Certificate2;
    procedure set_Item(index: Int32; value: DNX509Certificate2);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(certificate: DNX509Certificate2): Int32; overload;
    procedure AddRange(certificates: TArray<DNX509Certificate2>); overload;
    procedure AddRange(certificates: DNX509Certificate2Collection); overload;
    function &Contains(certificate: DNX509Certificate2): Boolean; overload;
    procedure Insert(index: Int32; certificate: DNX509Certificate2); overload;
    function GetEnumerator: DNX509Certificate2Enumerator;
    procedure Remove(certificate: DNX509Certificate2); overload;
    procedure RemoveRange(certificates: TArray<DNX509Certificate2>); overload;
    procedure RemoveRange(certificates: DNX509Certificate2Collection); overload;
    function Find(findType: DNX509FindType; findValue: DDN.mscorlib.DNObject; validOnly: Boolean): DNX509Certificate2Collection;
    procedure Import(rawData: TArray<Byte>); overload;
    procedure Import(fileName: string); overload;
    function &Export(contentType: DDN.mscorlib.DNX509ContentType): TArray<Byte>; overload;
    function &Export(contentType: DDN.mscorlib.DNX509ContentType; password: string): TArray<Byte>; overload;
    procedure Import(rawData: TArray<Byte>; password: string; keyStorageFlags: DDN.mscorlib.DNX509KeyStorageFlags); overload;
    procedure Import(fileName: string; password: string; keyStorageFlags: DDN.mscorlib.DNX509KeyStorageFlags); overload;
    function Add(value: DDN.mscorlib.DNX509Certificate): Int32; overload;
    procedure AddRange(value: TArray<DDN.mscorlib.DNX509Certificate>); overload;
    procedure AddRange(value: DNX509CertificateCollection); overload;
    function &Contains(value: DDN.mscorlib.DNX509Certificate): Boolean; overload;
    procedure CopyTo(&array: TArray<DDN.mscorlib.DNX509Certificate>; index: Int32);
    function IndexOf(value: DDN.mscorlib.DNX509Certificate): Int32;
    procedure Insert(index: Int32; value: DDN.mscorlib.DNX509Certificate); overload;
    procedure Remove(value: DDN.mscorlib.DNX509Certificate); overload;
    function GetHashCode: Int32;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNX509Certificate2 read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNX509Certificate2Collection = class(TDNGenericImport<DNX509Certificate2CollectionClass, DNX509Certificate2Collection>) end;

  //-------------namespace: System.Collections.Concurrent----------------
  DNBlockingCollectionClass<T> = interface(DNObjectClass)
  ['{7D462F79-94FD-5BA0-9CFE-FE5ACD62DE62}']
  { constructors } 

    {class} function init: DNBlockingCollection<T>; overload;
    {class} function init(boundedCapacity: Int32): DNBlockingCollection<T>; overload;
    {class} function init(collection: DDN.mscorlib.DNIProducerConsumerCollection<T>; boundedCapacity: Int32): DNBlockingCollection<T>; overload;
    {class} function init(collection: DDN.mscorlib.DNIProducerConsumerCollection<T>): DNBlockingCollection<T>; overload;

  { static methods } 

    {class} function AddToAny(collections: TArray<DNBlockingCollection<T>>; item: T): Int32; overload;
    {class} function AddToAny(collections: TArray<DNBlockingCollection<T>>; item: T; cancellationToken: DDN.mscorlib.DNCancellationToken): Int32; overload;
    {class} function TryAddToAny(collections: TArray<DNBlockingCollection<T>>; item: T): Int32; overload;
    {class} function TryAddToAny(collections: TArray<DNBlockingCollection<T>>; item: T; timeout: DDN.mscorlib.DNTimeSpan): Int32; overload;
    {class} function TryAddToAny(collections: TArray<DNBlockingCollection<T>>; item: T; millisecondsTimeout: Int32): Int32; overload;
    {class} function TryAddToAny(collections: TArray<DNBlockingCollection<T>>; item: T; millisecondsTimeout: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): Int32; overload;
    {class} function TakeFromAny(collections: TArray<DNBlockingCollection<T>>; out item: T): Int32; overload;
    {class} function TakeFromAny(collections: TArray<DNBlockingCollection<T>>; out item: T; cancellationToken: DDN.mscorlib.DNCancellationToken): Int32; overload;
    {class} function TryTakeFromAny(collections: TArray<DNBlockingCollection<T>>; out item: T): Int32; overload;
    {class} function TryTakeFromAny(collections: TArray<DNBlockingCollection<T>>; out item: T; timeout: DDN.mscorlib.DNTimeSpan): Int32; overload;
    {class} function TryTakeFromAny(collections: TArray<DNBlockingCollection<T>>; out item: T; millisecondsTimeout: Int32): Int32; overload;
    {class} function TryTakeFromAny(collections: TArray<DNBlockingCollection<T>>; out item: T; millisecondsTimeout: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): Int32; overload;

  end;

  [DNTypeName('System.Collections.Concurrent.BlockingCollection`1')]
  DNBlockingCollection<T> = interface(DDN.mscorlib.DNIEnumerable<T>)
  ['{86DB2E61-1551-3AB2-B246-B2D37E7DB901}']
  { getters & setters } 

    function get_BoundedCapacity: Int32;
    function get_IsAddingCompleted: Boolean;
    function get_IsCompleted: Boolean;
    function get_Count: Int32;

  { methods } 

    procedure Add(item: T); overload;
    function GetConsumingEnumerable: DDN.mscorlib.DNIEnumerable<T>; overload;
    function GetConsumingEnumerable(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNIEnumerable<T>; overload;
    procedure Add(item: T; cancellationToken: DDN.mscorlib.DNCancellationToken); overload;
    function TryAdd(item: T): Boolean; overload;
    function TryAdd(item: T; timeout: DDN.mscorlib.DNTimeSpan): Boolean; overload;
    function TryAdd(item: T; millisecondsTimeout: Int32): Boolean; overload;
    function TryAdd(item: T; millisecondsTimeout: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): Boolean; overload;
    function Take: T; overload;
    function Take(cancellationToken: DDN.mscorlib.DNCancellationToken): T; overload;
    function TryTake(out item: T): Boolean; overload;
    function TryTake(out item: T; timeout: DDN.mscorlib.DNTimeSpan): Boolean; overload;
    function TryTake(out item: T; millisecondsTimeout: Int32): Boolean; overload;
    function TryTake(out item: T; millisecondsTimeout: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): Boolean; overload;
    procedure CompleteAdding;
    procedure Dispose;
    function ToArray: TArray<T>;
    procedure CopyTo(&array: TArray<T>; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BoundedCapacity: Int32 read get_BoundedCapacity;
    property IsAddingCompleted: Boolean read get_IsAddingCompleted;
    property IsCompleted: Boolean read get_IsCompleted;
    property Count: Int32 read get_Count;
  end;

  TDNBlockingCollection<T> = class(TDNGenericImport<DNBlockingCollectionClass<T>, DNBlockingCollection<T>>) end;

  //-------------namespace: System.Collections.Concurrent----------------
  DNConcurrentBagClass<T> = interface(DNObjectClass)
  ['{74B44460-15B8-51AE-B83A-6953922A78BF}']
  { constructors } 

    {class} function init: DNConcurrentBag<T>; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<T>): DNConcurrentBag<T>; overload;

  end;

  [DNTypeName('System.Collections.Concurrent.ConcurrentBag`1')]
  DNConcurrentBag<T> = interface(DDN.mscorlib.DNIProducerConsumerCollection<T>)
  ['{BC24BD31-9266-3B3C-A15C-D8B5D3191A0D}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsEmpty: Boolean;

  { methods } 

    procedure Add(item: T);
    function TryTake(out result: T): Boolean;
    function TryPeek(out result: T): Boolean;
    procedure CopyTo(&array: TArray<T>; index: Int32);
    function ToArray: TArray<T>;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<T>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNConcurrentBag<T> = class(TDNGenericImport<DNConcurrentBagClass<T>, DNConcurrentBag<T>>) end;

  //-------------namespace: System.Diagnostics----------------
  DNInstanceDataCollectionClass = interface(DDN.mscorlib.DNDictionaryBaseClass)
  ['{E6121BE2-027E-545B-A453-B8EF45E8E91D}']
  { constructors } 

    {class} function init(counterName: string): DNInstanceDataCollection;

  end;

  [DNTypeName('System.Diagnostics.InstanceDataCollection')]
  DNInstanceDataCollection = interface(DDN.mscorlib.DNDictionaryBase)
  ['{3ED10543-5842-342C-B32F-9C75F774FB26}']
  { getters & setters } 

    function get_CounterName: string;
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_Values: DDN.mscorlib.DNICollection;
    function get_Item(instanceName: string): DNInstanceData;
    function get_Count: Int32;

  { methods } 

    function &Contains(instanceName: string): Boolean;
    procedure CopyTo(instances: TArray<DNInstanceData>; index: Int32); overload;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIDictionaryEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CounterName: string read get_CounterName;
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    property Values: DDN.mscorlib.DNICollection read get_Values;
    property Item[instanceName: string]: DNInstanceData read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNInstanceDataCollection = class(TDNGenericImport<DNInstanceDataCollectionClass, DNInstanceDataCollection>) end;

  //-------------namespace: System.Diagnostics----------------
  DNInstanceDataCollectionCollectionClass = interface(DDN.mscorlib.DNDictionaryBaseClass)
  ['{05F07963-8A96-5303-BCA0-3DF223B5D66E}']
  { constructors } 

    {class} function init: DNInstanceDataCollectionCollection;

  end;

  [DNTypeName('System.Diagnostics.InstanceDataCollectionCollection')]
  DNInstanceDataCollectionCollection = interface(DDN.mscorlib.DNDictionaryBase)
  ['{654781D1-A3A1-3829-B54B-DEAEE1250035}']
  { getters & setters } 

    function get_Item(counterName: string): DNInstanceDataCollection;
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_Values: DDN.mscorlib.DNICollection;
    function get_Count: Int32;

  { methods } 

    function &Contains(counterName: string): Boolean;
    procedure CopyTo(counters: TArray<DNInstanceDataCollection>; index: Int32); overload;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIDictionaryEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[counterName: string]: DNInstanceDataCollection read get_Item; default;
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    property Values: DDN.mscorlib.DNICollection read get_Values;
    property Count: Int32 read get_Count;
  end;

  TDNInstanceDataCollectionCollection = class(TDNGenericImport<DNInstanceDataCollectionCollectionClass, DNInstanceDataCollectionCollection>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNLinkedListClass<T> = interface(DNObjectClass)
  ['{0D3426E0-F7B8-5C8A-8FCA-0DCE112F6BE8}']
  { constructors } 

    {class} function init: DNLinkedList<T>; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<T>): DNLinkedList<T>; overload;

  end;

  [DNTypeName('System.Collections.Generic.LinkedList`1')]
  DNLinkedList<T> = interface(DDN.mscorlib.DNICollection<T>)
  ['{60BE54A9-9AB8-3542-8FBA-29EB72753411}']
  { getters & setters } 

    function get_Count: Int32;
    function get_First: DNLinkedListNode<T>;
    function get_Last: DNLinkedListNode<T>;

  { methods } 

    procedure AddAfter(node: DNLinkedListNode<T>; newNode: DNLinkedListNode<T>); overload;
    function AddFirst(value: T): DNLinkedListNode<T>; overload;
    procedure AddFirst(node: DNLinkedListNode<T>); overload;
    function AddLast(value: T): DNLinkedListNode<T>; overload;
    procedure AddLast(node: DNLinkedListNode<T>); overload;
    function &Contains(value: T): Boolean;
    function Find(value: T): DNLinkedListNode<T>;
    function GetEnumerator: DNLinkedList_Enumerator<T>;
    procedure Remove(node: DNLinkedListNode<T>);
    procedure RemoveFirst;
    function AddAfter(node: DNLinkedListNode<T>; value: T): DNLinkedListNode<T>; overload;
    function AddBefore(node: DNLinkedListNode<T>; value: T): DNLinkedListNode<T>; overload;
    procedure AddBefore(node: DNLinkedListNode<T>; newNode: DNLinkedListNode<T>); overload;
    procedure CopyTo(&array: TArray<T>; index: Int32);
    function FindLast(value: T): DNLinkedListNode<T>;
    procedure RemoveLast;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property First: DNLinkedListNode<T> read get_First;
    property Last: DNLinkedListNode<T> read get_Last;
  end;

  TDNLinkedList<T> = class(TDNGenericImport<DNLinkedListClass<T>, DNLinkedList<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNLinkedListNodeClass<T> = interface(DDN.mscorlib.DNObjectClass)
  ['{A87918AF-479A-5E65-B95C-6394B3E9D5CA}']
  { constructors } 

    {class} function init(value: T): DNLinkedListNode<T>;

  end;

  [DNTypeName('System.Collections.Generic.LinkedListNode`1')]
  DNLinkedListNode<T> = interface(DDN.mscorlib.DNObject)
  ['{52F44F9F-F6BA-3852-964B-04880DDC9058}']
  { getters & setters } 

    function get_List: DNLinkedList<T>;
    function get_Next: DNLinkedListNode<T>;
    function get_Previous: DNLinkedListNode<T>;
    function get_Value: T;
    procedure set_Value(value: T);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property List: DNLinkedList<T> read get_List;
    property Next: DNLinkedListNode<T> read get_Next;
    property Previous: DNLinkedListNode<T> read get_Previous;
    property Value: T read get_Value write set_Value;
  end;

  TDNLinkedListNode<T> = class(TDNGenericImport<DNLinkedListNodeClass<T>, DNLinkedListNode<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNQueueClass<T> = interface(DNObjectClass)
  ['{49E93A4C-2670-55F9-83DC-DE6574591BFE}']
  { constructors } 

    {class} function init: DNQueue<T>; overload;
    {class} function init(capacity: Int32): DNQueue<T>; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<T>): DNQueue<T>; overload;

  end;

  [DNTypeName('System.Collections.Generic.Queue`1')]
  DNQueue<T> = interface(DDN.mscorlib.DNIEnumerable<T>)
  ['{A303B059-893A-3FF5-8B85-B75D605031F9}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure Clear;
    procedure Enqueue(item: T);
    function GetEnumerator: DNQueue_Enumerator<T>;
    function Dequeue: T;
    function Peek: T;
    function &Contains(item: T): Boolean;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32);
    function ToArray: TArray<T>;
    procedure TrimExcess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNQueue<T> = class(TDNGenericImport<DNQueueClass<T>, DNQueue<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedDictionaryClass<TKey, TValue> = interface(DNObjectClass)
  ['{0E1607F4-8F4D-56C3-83F3-B529629DF963}']
  { constructors } 

    {class} function init: DNSortedDictionary<TKey, TValue>; overload;
    {class} function init(dictionary: DDN.mscorlib.DNIDictionary<TKey, TValue>): DNSortedDictionary<TKey, TValue>; overload;
    {class} function init(dictionary: DDN.mscorlib.DNIDictionary<TKey, TValue>; comparer: DDN.mscorlib.DNIComparer<TKey>): DNSortedDictionary<TKey, TValue>; overload;
    {class} function init(comparer: DDN.mscorlib.DNIComparer<TKey>): DNSortedDictionary<TKey, TValue>; overload;

  end;

  [DNTypeName('System.Collections.Generic.SortedDictionary`2')]
  DNSortedDictionary<TKey, TValue> = interface(DDN.mscorlib.DNIDictionary<TKey, TValue>)
  ['{045C2DC6-9A77-344B-AA84-A14639105829}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Comparer: DDN.mscorlib.DNIComparer<TKey>;
    function get_Keys: DNSortedDictionary_KeyCollection<TKey, TValue>;
    function get_Values: DNSortedDictionary_ValueCollection<TKey, TValue>;

  { methods } 

    function ContainsKey(key: TKey): Boolean;
    function GetEnumerator: DNSortedDictionary_Enumerator<TKey, TValue>;
    function ContainsValue(value: TValue): Boolean;
    procedure CopyTo(&array: TArray<DDN.mscorlib.DNKeyValuePair<TKey, TValue>>; index: Int32);
    function TryGetValue(key: TKey; out value: TValue): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Comparer: DDN.mscorlib.DNIComparer<TKey> read get_Comparer;
    property Keys: DNSortedDictionary_KeyCollection<TKey, TValue> read get_Keys;
    property Values: DNSortedDictionary_ValueCollection<TKey, TValue> read get_Values;
  end;

  TDNSortedDictionary<TKey, TValue> = class(TDNGenericImport<DNSortedDictionaryClass<TKey, TValue>, DNSortedDictionary<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedDictionary_KeyCollectionClass<TKey, TValue> = interface(DNObjectClass)
  ['{F8828AE8-B4CB-5C19-BF4F-E5111ACF6528}']
  { constructors } 

    {class} function init(dictionary: DNSortedDictionary<TKey, TValue>): DNSortedDictionary_KeyCollection<TKey, TValue>;

  end;

  [DNTypeName('System.Collections.Generic.SortedDictionary`2+KeyCollection')]
  DNSortedDictionary_KeyCollection<TKey, TValue> = interface(DDN.mscorlib.DNICollection<TKey>)
  ['{2B1F1356-49A7-3058-B996-7B20FAC9E64C}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNSortedDictionary_KeyCollection_Enumerator<TKey, TValue>;
    procedure CopyTo(&array: TArray<TKey>; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNSortedDictionary_KeyCollection<TKey, TValue> = class(TDNGenericImport<DNSortedDictionary_KeyCollectionClass<TKey, TValue>, DNSortedDictionary_KeyCollection<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedDictionary_ValueCollectionClass<TKey, TValue> = interface(DNObjectClass)
  ['{4A733C95-EAE5-538B-8699-928190E89834}']
  { constructors } 

    {class} function init(dictionary: DNSortedDictionary<TKey, TValue>): DNSortedDictionary_ValueCollection<TKey, TValue>;

  end;

  [DNTypeName('System.Collections.Generic.SortedDictionary`2+ValueCollection')]
  DNSortedDictionary_ValueCollection<TKey, TValue> = interface(DDN.mscorlib.DNICollection<TValue>)
  ['{BE478310-E177-3179-B6F4-F7391CC335A1}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNSortedDictionary_ValueCollection_Enumerator<TKey, TValue>;
    procedure CopyTo(&array: TArray<TValue>; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNSortedDictionary_ValueCollection<TKey, TValue> = class(TDNGenericImport<DNSortedDictionary_ValueCollectionClass<TKey, TValue>, DNSortedDictionary_ValueCollection<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedListClass<TKey, TValue> = interface(DNObjectClass)
  ['{83405683-148B-57FC-8041-87F1F90BA752}']
  { constructors } 

    {class} function init: DNSortedList<TKey, TValue>; overload;
    {class} function init(capacity: Int32): DNSortedList<TKey, TValue>; overload;
    {class} function init(comparer: DDN.mscorlib.DNIComparer<TKey>): DNSortedList<TKey, TValue>; overload;
    {class} function init(capacity: Int32; comparer: DDN.mscorlib.DNIComparer<TKey>): DNSortedList<TKey, TValue>; overload;
    {class} function init(dictionary: DDN.mscorlib.DNIDictionary<TKey, TValue>): DNSortedList<TKey, TValue>; overload;
    {class} function init(dictionary: DDN.mscorlib.DNIDictionary<TKey, TValue>; comparer: DDN.mscorlib.DNIComparer<TKey>): DNSortedList<TKey, TValue>; overload;

  end;

  [DNTypeName('System.Collections.Generic.SortedList`2')]
  DNSortedList<TKey, TValue> = interface(DDN.mscorlib.DNIDictionary<TKey, TValue>)
  ['{18E13C00-B497-3D7F-A413-A774B0BF395F}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Comparer: DDN.mscorlib.DNIComparer<TKey>;
    function get_Count: Int32;
    function get_Keys: DDN.mscorlib.DNIList<TKey>;
    function get_Values: DDN.mscorlib.DNIList<TValue>;

  { methods } 

    function ContainsKey(key: TKey): Boolean;
    function IndexOfKey(key: TKey): Int32;
    function TryGetValue(key: TKey; out value: TValue): Boolean;
    procedure RemoveAt(index: Int32);
    function ContainsValue(value: TValue): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DDN.mscorlib.DNKeyValuePair<TKey, TValue>>;
    function IndexOfValue(value: TValue): Int32;
    procedure TrimExcess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Comparer: DDN.mscorlib.DNIComparer<TKey> read get_Comparer;
    property Count: Int32 read get_Count;
    property Keys: DDN.mscorlib.DNIList<TKey> read get_Keys;
    property Values: DDN.mscorlib.DNIList<TValue> read get_Values;
  end;

  TDNSortedList<TKey, TValue> = class(TDNGenericImport<DNSortedListClass<TKey, TValue>, DNSortedList<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedSetClass<T> = interface(DNObjectClass)
  ['{8EB0FFDC-E57E-5F60-8311-6962983AC07F}']
  { constructors } 

    {class} function init: DNSortedSet<T>; overload;
    {class} function init(comparer: DDN.mscorlib.DNIComparer<T>): DNSortedSet<T>; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<T>): DNSortedSet<T>; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<T>; comparer: DDN.mscorlib.DNIComparer<T>): DNSortedSet<T>; overload;

  { static methods } 

    {class} function CreateSetComparer: DDN.mscorlib.DNIEqualityComparer<DNSortedSet<T>>; overload;
    {class} function CreateSetComparer(memberEqualityComparer: DDN.mscorlib.DNIEqualityComparer<T>): DDN.mscorlib.DNIEqualityComparer<DNSortedSet<T>>; overload;

  end;

  [DNTypeName('System.Collections.Generic.SortedSet`1')]
  DNSortedSet<T> = interface(DNISet<T>)
  ['{C666BACA-10DD-3517-A7B3-833DFFE29312}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Comparer: DDN.mscorlib.DNIComparer<T>;
    function get_Min: T;
    function get_Max: T;

  { methods } 

    function GetEnumerator: DNSortedSet_Enumerator<T>;
    procedure Clear;
    function &Contains(item: T): Boolean;
    procedure CopyTo(&array: TArray<T>); overload;
    procedure CopyTo(&array: TArray<T>; index: Int32); overload;
    procedure CopyTo(&array: TArray<T>; index: Int32; count: Int32); overload;
    procedure UnionWith(other: DDN.mscorlib.DNIEnumerable<T>);
    procedure IntersectWith(other: DDN.mscorlib.DNIEnumerable<T>);
    procedure ExceptWith(other: DDN.mscorlib.DNIEnumerable<T>);
    procedure SymmetricExceptWith(other: DDN.mscorlib.DNIEnumerable<T>);
    function IsSubsetOf(other: DDN.mscorlib.DNIEnumerable<T>): Boolean;
    function IsProperSubsetOf(other: DDN.mscorlib.DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DDN.mscorlib.DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DDN.mscorlib.DNIEnumerable<T>): Boolean;
    function SetEquals(other: DDN.mscorlib.DNIEnumerable<T>): Boolean;
    function Overlaps(other: DDN.mscorlib.DNIEnumerable<T>): Boolean;
    function RemoveWhere(match: DDN.mscorlib.DNPredicate<T>): Int32;
    function Reverse: DDN.mscorlib.DNIEnumerable<T>;
    function GetViewBetween(lowerValue: T; upperValue: T): DNSortedSet<T>;
    function TryGetValue(equalValue: T; out actualValue: T): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Comparer: DDN.mscorlib.DNIComparer<T> read get_Comparer;
    property Min: T read get_Min;
    property Max: T read get_Max;
  end;

  TDNSortedSet<T> = class(TDNGenericImport<DNSortedSetClass<T>, DNSortedSet<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNStackClass<T> = interface(DNObjectClass)
  ['{548A1544-8731-5B71-A051-5FF27A0BE7D5}']
  { constructors } 

    {class} function init: DNStack<T>; overload;
    {class} function init(capacity: Int32): DNStack<T>; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<T>): DNStack<T>; overload;

  end;

  [DNTypeName('System.Collections.Generic.Stack`1')]
  DNStack<T> = interface(DDN.mscorlib.DNIEnumerable<T>)
  ['{F1732B6D-D78C-3192-A68E-BF2E6E342C24}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure Clear;
    function GetEnumerator: DNStack_Enumerator<T>;
    function Peek: T;
    function Pop: T;
    procedure Push(item: T);
    function ToArray: TArray<T>;
    function &Contains(item: T): Boolean;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32);
    procedure TrimExcess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNStack<T> = class(TDNGenericImport<DNStackClass<T>, DNStack<T>>) end;

  //-------------namespace: System.Net.Mail----------------
  DNAlternateViewCollectionClass = interface(DDN.mscorlib.DNCollectionClass<DNAlternateView>)
  ['{2E3B6AF4-D28E-5B19-9607-E56E278DE8E6}']
  end;

  [DNTypeName('System.Net.Mail.AlternateViewCollection')]
  DNAlternateViewCollection = interface(DDN.mscorlib.DNCollection<DNAlternateView>)
  ['{3FDAB570-2A5E-31EA-880E-66D074B34110}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure Dispose;
    procedure CopyTo(&array: TArray<DNAlternateView>; index: Int32);
    function &Contains(item: DNAlternateView): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNAlternateView>;
    function IndexOf(item: DNAlternateView): Int32;
    procedure RemoveAt(index: Int32);
    procedure Insert(index: Int32; item: DNAlternateView);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNAlternateViewCollection = class(TDNGenericImport<DNAlternateViewCollectionClass, DNAlternateViewCollection>) end;

  //-------------namespace: System.Net.Mail----------------
  DNAttachmentCollectionClass = interface(DDN.mscorlib.DNCollectionClass<DNAttachment>)
  ['{87F17EF2-BEE6-5374-81F3-2643DBBCD086}']
  end;

  [DNTypeName('System.Net.Mail.AttachmentCollection')]
  DNAttachmentCollection = interface(DDN.mscorlib.DNCollection<DNAttachment>)
  ['{D843223A-6DF4-3119-867B-86DA1A0DD502}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure Dispose;
    procedure CopyTo(&array: TArray<DNAttachment>; index: Int32);
    function &Contains(item: DNAttachment): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNAttachment>;
    function IndexOf(item: DNAttachment): Int32;
    procedure RemoveAt(index: Int32);
    procedure Insert(index: Int32; item: DNAttachment);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNAttachmentCollection = class(TDNGenericImport<DNAttachmentCollectionClass, DNAttachmentCollection>) end;

  //-------------namespace: System.Net.Mail----------------
  DNLinkedResourceCollectionClass = interface(DDN.mscorlib.DNCollectionClass<DNLinkedResource>)
  ['{D8161E1D-36DF-5221-8112-696F2B38F29B}']
  end;

  [DNTypeName('System.Net.Mail.LinkedResourceCollection')]
  DNLinkedResourceCollection = interface(DDN.mscorlib.DNCollection<DNLinkedResource>)
  ['{2474D586-4120-3B1A-8BE6-4E68866DE591}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure Dispose;
    procedure CopyTo(&array: TArray<DNLinkedResource>; index: Int32);
    function &Contains(item: DNLinkedResource): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNLinkedResource>;
    function IndexOf(item: DNLinkedResource): Int32;
    procedure RemoveAt(index: Int32);
    procedure Insert(index: Int32; item: DNLinkedResource);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNLinkedResourceCollection = class(TDNGenericImport<DNLinkedResourceCollectionClass, DNLinkedResourceCollection>) end;

  //-------------namespace: System.Net.Mail----------------
  DNMailAddressCollectionClass = interface(DDN.mscorlib.DNCollectionClass<DNMailAddress>)
  ['{F2DAC5E2-76D7-5EF7-A345-634ED38830C9}']
  { constructors } 

    {class} function init: DNMailAddressCollection;

  end;

  [DNTypeName('System.Net.Mail.MailAddressCollection')]
  DNMailAddressCollection = interface(DDN.mscorlib.DNCollection<DNMailAddress>)
  ['{80DF4223-2F23-340E-A10D-C18253463AD4}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure Add(addresses: string);
    function ToString: string;
    procedure CopyTo(&array: TArray<DNMailAddress>; index: Int32);
    function &Contains(item: DNMailAddress): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNMailAddress>;
    function IndexOf(item: DNMailAddress): Int32;
    procedure RemoveAt(index: Int32);
    procedure Insert(index: Int32; item: DNMailAddress);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNMailAddressCollection = class(TDNGenericImport<DNMailAddressCollectionClass, DNMailAddressCollection>) end;

  //-------------namespace: System.Collections.ObjectModel----------------
  DNObservableCollectionClass<T> = interface(DDN.mscorlib.DNCollectionClass<T>)
  ['{D62E2387-6B5E-5DE4-A8C8-2D3D9779D769}']
  { constructors } 

    {class} function init: DNObservableCollection<T>; overload;
    {class} function init(list: DDN.mscorlib.DNList<T>): DNObservableCollection<T>; overload;
    {class} function init(collection: DDN.mscorlib.DNIEnumerable<T>): DNObservableCollection<T>; overload;

  end;

  [DNTypeName('System.Collections.ObjectModel.ObservableCollection`1')]
  DNObservableCollection<T> = interface(DDN.mscorlib.DNCollection<T>)
  ['{EED6258A-E0B5-3222-9BFE-53563367BE16}']
  { getters & setters } 

    function get_Count: Int32;

  { events } 

    procedure add_CollectionChanged(value: DNNotifyCollectionChangedEventHandler);
    procedure remove_CollectionChanged(value: DNNotifyCollectionChangedEventHandler);

  { methods } 

    procedure Move(oldIndex: Int32; newIndex: Int32);
    procedure CopyTo(&array: TArray<T>; index: Int32);
    function &Contains(item: T): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<T>;
    function IndexOf(item: T): Int32;
    procedure Insert(index: Int32; item: T);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNObservableCollection<T> = class(TDNGenericImport<DNObservableCollectionClass<T>, DNObservableCollection<T>>) end;

  //-------------namespace: System.ComponentModel----------------
  DNBindingListClass<T> = interface(DDN.mscorlib.DNCollectionClass<T>)
  ['{77E15BE7-1C5E-5C24-B7FE-68DB2AECD078}']
  { constructors } 

    {class} function init: DNBindingList<T>; overload;
    {class} function init(list: DDN.mscorlib.DNIList<T>): DNBindingList<T>; overload;

  end;

  [DNTypeName('System.ComponentModel.BindingList`1')]
  DNBindingList<T> = interface(DDN.mscorlib.DNCollection<T>)
  ['{0974D3A7-7A59-3658-B24C-CE090BF2E742}']
  { getters & setters } 

    function get_RaiseListChangedEvents: Boolean;
    procedure set_RaiseListChangedEvents(value: Boolean);
    function get_AllowNew: Boolean;
    procedure set_AllowNew(value: Boolean);
    function get_AllowEdit: Boolean;
    procedure set_AllowEdit(value: Boolean);
    function get_AllowRemove: Boolean;
    procedure set_AllowRemove(value: Boolean);
    function get_Count: Int32;

  { events } 

    procedure add_AddingNew(value: DNAddingNewEventHandler);
    procedure remove_AddingNew(value: DNAddingNewEventHandler);
    procedure add_ListChanged(value: DNListChangedEventHandler);
    procedure remove_ListChanged(value: DNListChangedEventHandler);

  { methods } 

    procedure ResetBindings;
    procedure ResetItem(position: Int32);
    procedure CancelNew(itemIndex: Int32);
    procedure EndNew(itemIndex: Int32);
    function AddNew: T;
    procedure CopyTo(&array: TArray<T>; index: Int32);
    function &Contains(item: T): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<T>;
    function IndexOf(item: T): Int32;
    procedure Insert(index: Int32; item: T);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RaiseListChangedEvents: Boolean read get_RaiseListChangedEvents write set_RaiseListChangedEvents;
    property AllowNew: Boolean read get_AllowNew write set_AllowNew;
    property AllowEdit: Boolean read get_AllowEdit write set_AllowEdit;
    property AllowRemove: Boolean read get_AllowRemove write set_AllowRemove;
    property Count: Int32 read get_Count;
  end;

  TDNBindingList<T> = class(TDNGenericImport<DNBindingListClass<T>, DNBindingList<T>>) end;

  //-------------namespace: System.Collections.ObjectModel----------------
  DNReadOnlyObservableCollectionClass<T> = interface(DDN.mscorlib.DNReadOnlyCollectionClass<T>)
  ['{9B6DFDB3-0DD3-588B-AA75-40CB98A1F683}']
  { constructors } 

    {class} function init(list: DNObservableCollection<T>): DNReadOnlyObservableCollection<T>;

  end;

  [DNTypeName('System.Collections.ObjectModel.ReadOnlyObservableCollection`1')]
  DNReadOnlyObservableCollection<T> = interface(DDN.mscorlib.DNReadOnlyCollection<T>)
  ['{2804CA25-E921-35E3-AEC0-0CE8B50CFD7C}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function &Contains(value: T): Boolean;
    procedure CopyTo(&array: TArray<T>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<T>;
    function IndexOf(value: T): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNReadOnlyObservableCollection<T> = class(TDNGenericImport<DNReadOnlyObservableCollectionClass<T>, DNReadOnlyObservableCollection<T>>) end;

  //-------------namespace: System.ComponentModel----------------
  DNComponentCollectionClass = interface(DDN.mscorlib.DNReadOnlyCollectionBaseClass)
  ['{B7818FF0-6370-5A57-989D-24CCCEEE0165}']
  { constructors } 

    {class} function init(components: TArray<DNIComponent>): DNComponentCollection;

  end;

  [DNTypeName('System.ComponentModel.ComponentCollection')]
  DNComponentCollection = interface(DDN.mscorlib.DNReadOnlyCollectionBase)
  ['{9653003F-5A61-33CB-86E6-1BA38CED5DF8}']
  { getters & setters } 

    function get_Item(name: string): DNIComponent; overload;
    function get_Item(index: Int32): DNIComponent; overload;
    function get_Count: Int32;

  { methods } 

    procedure CopyTo(&array: TArray<DNIComponent>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNIComponent read get_Item; default;
    property Item[index: Int32]: DNIComponent read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNComponentCollection = class(TDNGenericImport<DNComponentCollectionClass, DNComponentCollection>) end;

  //-------------namespace: System.Diagnostics----------------
  DNProcessModuleCollectionClass = interface(DDN.mscorlib.DNReadOnlyCollectionBaseClass)
  ['{9B057933-DC64-53B1-B1B1-41925FFA679D}']
  { constructors } 

    {class} function init(processModules: TArray<DNProcessModule>): DNProcessModuleCollection;

  end;

  [DNTypeName('System.Diagnostics.ProcessModuleCollection')]
  DNProcessModuleCollection = interface(DDN.mscorlib.DNReadOnlyCollectionBase)
  ['{F91DAEC2-A8D9-328B-8746-C8AF6A7406AD}']
  { getters & setters } 

    function get_Item(index: Int32): DNProcessModule;
    function get_Count: Int32;

  { methods } 

    function IndexOf(module: DNProcessModule): Int32;
    function &Contains(module: DNProcessModule): Boolean;
    procedure CopyTo(&array: TArray<DNProcessModule>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNProcessModule read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNProcessModuleCollection = class(TDNGenericImport<DNProcessModuleCollectionClass, DNProcessModuleCollection>) end;

  //-------------namespace: System.Diagnostics----------------
  DNProcessThreadCollectionClass = interface(DDN.mscorlib.DNReadOnlyCollectionBaseClass)
  ['{E78AA122-C9E9-502C-9718-9E247068A22D}']
  { constructors } 

    {class} function init(processThreads: TArray<DNProcessThread>): DNProcessThreadCollection;

  end;

  [DNTypeName('System.Diagnostics.ProcessThreadCollection')]
  DNProcessThreadCollection = interface(DDN.mscorlib.DNReadOnlyCollectionBase)
  ['{0AEF2D86-9378-3A42-9B6F-A05641BDD36B}']
  { getters & setters } 

    function get_Item(index: Int32): DNProcessThread;
    function get_Count: Int32;

  { methods } 

    function Add(thread: DNProcessThread): Int32;
    procedure Insert(index: Int32; thread: DNProcessThread);
    function IndexOf(thread: DNProcessThread): Int32;
    function &Contains(thread: DNProcessThread): Boolean;
    procedure Remove(thread: DNProcessThread);
    procedure CopyTo(&array: TArray<DNProcessThread>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNProcessThread read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNProcessThreadCollection = class(TDNGenericImport<DNProcessThreadCollectionClass, DNProcessThreadCollection>) end;

  //-------------namespace: System.Security.Authentication.ExtendedProtection----------------
  DNServiceNameCollectionClass = interface(DDN.mscorlib.DNReadOnlyCollectionBaseClass)
  ['{ED41E9E9-281E-5F61-B2D7-0C863A3327F0}']
  { constructors } 

    {class} function init(items: DDN.mscorlib.DNICollection): DNServiceNameCollection;

  end;

  [DNTypeName('System.Security.Authentication.ExtendedProtection.ServiceNameCollection')]
  DNServiceNameCollection = interface(DDN.mscorlib.DNReadOnlyCollectionBase)
  ['{6E75F31C-582F-3F7A-A98F-12140CB07199}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function Merge(serviceName: string): DNServiceNameCollection; overload;
    function Merge(serviceNames: DDN.mscorlib.DNIEnumerable): DNServiceNameCollection; overload;
    function &Contains(searchServiceName: string): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNServiceNameCollection = class(TDNGenericImport<DNServiceNameCollectionClass, DNServiceNameCollection>) end;

  //-------------namespace: System.Collections.Specialized----------------
  DNCollectionsUtilClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D9BF7862-44F9-58BE-8771-762557917FE1}']
  { constructors } 

    {class} function init: DNCollectionsUtil;

  { static methods } 

    {class} function CreateCaseInsensitiveHashtable(capacity: Int32): DDN.mscorlib.DNHashtable; overload;
    {class} function CreateCaseInsensitiveHashtable: DDN.mscorlib.DNHashtable; overload;
    {class} function CreateCaseInsensitiveHashtable(d: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNHashtable; overload;
    {class} function CreateCaseInsensitiveSortedList: DDN.mscorlib.DNSortedList;

  end;

  [DNTypeName('System.Collections.Specialized.CollectionsUtil')]
  DNCollectionsUtil = interface(DDN.mscorlib.DNObject)
  ['{9FD1615B-AC8F-3ABC-8B00-1225E6E5875C}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCollectionsUtil = class(TDNGenericImport<DNCollectionsUtilClass, DNCollectionsUtil>) end;

  //-------------namespace: System.Collections.Specialized----------------
  DNHybridDictionaryClass = interface(DNObjectClass)
  ['{77AA9114-B4C9-58B8-8580-423D607D9350}']
  { constructors } 

    {class} function init: DNHybridDictionary; overload;
    {class} function init(initialSize: Int32): DNHybridDictionary; overload;
    {class} function init(caseInsensitive: Boolean): DNHybridDictionary; overload;
    {class} function init(initialSize: Int32; caseInsensitive: Boolean): DNHybridDictionary; overload;

  end;

  [DNTypeName('System.Collections.Specialized.HybridDictionary')]
  DNHybridDictionary = interface(DDN.mscorlib.DNIDictionary)
  ['{7CFFAFEA-4C46-3AFF-AE92-7AF85776D1A3}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Values: DDN.mscorlib.DNICollection;

  { methods } 

    function &Contains(key: DDN.mscorlib.DNObject): Boolean;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIDictionaryEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Values: DDN.mscorlib.DNICollection read get_Values;
  end;

  TDNHybridDictionary = class(TDNGenericImport<DNHybridDictionaryClass, DNHybridDictionary>) end;

  //-------------namespace: System.Collections.Specialized----------------
  DNListDictionaryClass = interface(DNObjectClass)
  ['{9ACA094D-AF77-5E22-9A1E-DFD44B359971}']
  { constructors } 

    {class} function init: DNListDictionary; overload;
    {class} function init(comparer: DDN.mscorlib.DNIComparer): DNListDictionary; overload;

  end;

  [DNTypeName('System.Collections.Specialized.ListDictionary')]
  DNListDictionary = interface(DDN.mscorlib.DNIDictionary)
  ['{93F01133-5D00-3162-B43D-BE33D8DC88FA}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Values: DDN.mscorlib.DNICollection;

  { methods } 

    function &Contains(key: DDN.mscorlib.DNObject): Boolean;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIDictionaryEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Values: DDN.mscorlib.DNICollection read get_Values;
  end;

  TDNListDictionary = class(TDNGenericImport<DNListDictionaryClass, DNListDictionary>) end;

  //-------------namespace: System.Collections.Specialized----------------
  DNNameObjectCollectionBaseClass = interface(DNObjectClass)
  ['{DF28AF99-3B58-535A-B2C3-A92C3E98AC62}']
  end;

  [DNTypeName('System.Collections.Specialized.NameObjectCollectionBase')]
  DNNameObjectCollectionBase = interface(DDN.mscorlib.DNICollection)
  ['{6F6A8BA1-E1A4-30B2-AF13-A4F09E9D54AA}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Keys: DNNameObjectCollectionBase_KeysCollection;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Keys: DNNameObjectCollectionBase_KeysCollection read get_Keys;
  end;

  TDNNameObjectCollectionBase = class(TDNGenericImport<DNNameObjectCollectionBaseClass, DNNameObjectCollectionBase>) end;

  //-------------namespace: System.Collections.Specialized----------------
  DNNameObjectCollectionBase_KeysCollectionClass = interface(DNObjectClass)
  ['{8056D97B-E35F-57D6-A66E-94C97EE8836D}']
  end;

  [DNTypeName('System.Collections.Specialized.NameObjectCollectionBase+KeysCollection')]
  DNNameObjectCollectionBase_KeysCollection = interface(DDN.mscorlib.DNICollection)
  ['{4F00D501-6A21-3AF8-8BE7-5B41DF6456A1}']
  { getters & setters } 

    function get_Item(index: Int32): string;
    function get_Count: Int32;

  { methods } 

    function Get(index: Int32): string;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: string read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNNameObjectCollectionBase_KeysCollection = class(TDNGenericImport<DNNameObjectCollectionBase_KeysCollectionClass, DNNameObjectCollectionBase_KeysCollection>) end;

  //-------------namespace: System.Collections.Specialized----------------
  DNNameValueCollectionClass = interface(DNNameObjectCollectionBaseClass)
  ['{8A48AC0E-4E01-5F5E-AB8C-561846E46221}']
  { constructors } 

    {class} function init: DNNameValueCollection; overload;
    {class} function init(col: DNNameValueCollection): DNNameValueCollection; overload;
    {class} function init(hashProvider: DDN.mscorlib.DNIHashCodeProvider; comparer: DDN.mscorlib.DNIComparer): DNNameValueCollection; overload;
    {class} function init(capacity: Int32): DNNameValueCollection; overload;
    {class} function init(equalityComparer: DDN.mscorlib.DNIEqualityComparer): DNNameValueCollection; overload;
    {class} function init(capacity: Int32; equalityComparer: DDN.mscorlib.DNIEqualityComparer): DNNameValueCollection; overload;
    {class} function init(capacity: Int32; col: DNNameValueCollection): DNNameValueCollection; overload;
    {class} function init(capacity: Int32; hashProvider: DDN.mscorlib.DNIHashCodeProvider; comparer: DDN.mscorlib.DNIComparer): DNNameValueCollection; overload;

  end;

  [DNTypeName('System.Collections.Specialized.NameValueCollection')]
  DNNameValueCollection = interface(DNNameObjectCollectionBase)
  ['{AA01B7E8-9A70-3252-B321-4D5D85FDEF2C}']
  { getters & setters } 

    function get_Item(name: string): string; overload;
    procedure set_Item(name: string; value: string);
    function get_Item(index: Int32): string; overload;
    function get_AllKeys: TArray<string>;
    function get_Count: Int32;
    function get_Keys: DNNameObjectCollectionBase_KeysCollection;

  { methods } 

    procedure Add(c: DNNameValueCollection); overload;
    procedure Clear;
    function HasKeys: Boolean;
    procedure Add(name: string; value: string); overload;
    function Get(name: string): string; overload;
    function GetValues(name: string): TArray<string>; overload;
    procedure &Set(name: string; value: string);
    procedure Remove(name: string);
    function Get(index: Int32): string; overload;
    function GetValues(index: Int32): TArray<string>; overload;
    function GetKey(index: Int32): string;
    procedure CopyTo(dest: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: string read get_Item write set_Item; default;
    property Item[index: Int32]: string read get_Item; default;
    property AllKeys: TArray<string> read get_AllKeys;
    property Count: Int32 read get_Count;
    property Keys: DNNameObjectCollectionBase_KeysCollection read get_Keys;
  end;

  TDNNameValueCollection = class(TDNGenericImport<DNNameValueCollectionClass, DNNameValueCollection>) end;

  //-------------namespace: System.Net----------------
  DNWebHeaderCollectionClass = interface(DNNameValueCollectionClass)
  ['{61575522-2A63-5D65-B1E7-524CA859D619}']
  { constructors } 

    {class} function init: DNWebHeaderCollection;

  { static methods } 

    {class} function IsRestricted(headerName: string): Boolean; overload;
    {class} function IsRestricted(headerName: string; response: Boolean): Boolean; overload;

  end;

  [DNTypeName('System.Net.WebHeaderCollection')]
  DNWebHeaderCollection = interface(DNNameValueCollection)
  ['{430D1273-C3E9-3632-9988-389C81849C00}']
  { getters & setters } 

    function get_Item(header: DNHttpRequestHeader): string; overload;
    procedure set_Item(header: DNHttpRequestHeader; value: string); overload;
    function get_Item(header: DNHttpResponseHeader): string; overload;
    procedure set_Item(header: DNHttpResponseHeader; value: string); overload;
    function get_Count: Int32;
    function get_Keys: DNNameObjectCollectionBase_KeysCollection;
    function get_AllKeys: TArray<string>;
    function get_Item(name: string): string; overload;
    procedure set_Item(name: string; value: string); overload;
    function get_Item(index: Int32): string; overload;

  { methods } 

    procedure Add(header: DNHttpRequestHeader; value: string); overload;
    procedure &Set(header: DNHttpRequestHeader; value: string); overload;
    procedure Remove(header: DNHttpRequestHeader); overload;
    procedure Remove(header: DNHttpResponseHeader); overload;
    procedure Remove(name: string); overload;
    function ToString: string;
    function ToByteArray: TArray<Byte>;
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    function Get(name: string): string; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Get(index: Int32): string; overload;
    function GetValues(index: Int32): TArray<string>; overload;
    function GetKey(index: Int32): string;
    procedure Clear;
    procedure Add(header: DNHttpResponseHeader; value: string); overload;
    procedure &Set(header: DNHttpResponseHeader; value: string); overload;
    procedure Add(name: string; value: string); overload;
    procedure Add(header: string); overload;
    procedure &Set(name: string; value: string); overload;
    function GetValues(header: string): TArray<string>; overload;
    procedure GetObjectData(serializationInfo: DDN.mscorlib.DNSerializationInfo; streamingContext: DDN.mscorlib.DNStreamingContext);
    procedure Add(c: DNNameValueCollection); overload;
    function HasKeys: Boolean;
    procedure CopyTo(dest: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[header: DNHttpRequestHeader]: string read get_Item write set_Item; default;
    property Item[header: DNHttpResponseHeader]: string read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property Keys: DNNameObjectCollectionBase_KeysCollection read get_Keys;
    property AllKeys: TArray<string> read get_AllKeys;
    property Item[name: string]: string read get_Item write set_Item; default;
    property Item[index: Int32]: string read get_Item; default;
  end;

  TDNWebHeaderCollection = class(TDNGenericImport<DNWebHeaderCollectionClass, DNWebHeaderCollection>) end;

  //-------------namespace: System.Collections.Specialized----------------
  DNOrderedDictionaryClass = interface(DNObjectClass)
  ['{F796CDD2-C547-54F0-9FF4-21B57BCBB9B7}']
  { constructors } 

    {class} function init: DNOrderedDictionary; overload;
    {class} function init(capacity: Int32): DNOrderedDictionary; overload;
    {class} function init(comparer: DDN.mscorlib.DNIEqualityComparer): DNOrderedDictionary; overload;
    {class} function init(capacity: Int32; comparer: DDN.mscorlib.DNIEqualityComparer): DNOrderedDictionary; overload;

  end;

  [DNTypeName('System.Collections.Specialized.OrderedDictionary')]
  DNOrderedDictionary = interface(DNIOrderedDictionary)
  ['{906D4060-7999-39E2-8065-881CAF510EB7}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_Values: DDN.mscorlib.DNICollection;

  { methods } 

    function AsReadOnly: DNOrderedDictionary;
    function &Contains(key: DDN.mscorlib.DNObject): Boolean;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    procedure Insert(index: Int32; key: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIDictionaryEnumerator;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    property Values: DDN.mscorlib.DNICollection read get_Values;
  end;

  TDNOrderedDictionary = class(TDNGenericImport<DNOrderedDictionaryClass, DNOrderedDictionary>) end;

  //-------------namespace: System.Collections.Specialized----------------
  DNStringCollectionClass = interface(DNObjectClass)
  ['{1965CB76-8D43-59C0-9731-2E68ADCF2BB8}']
  { constructors } 

    {class} function init: DNStringCollection;

  end;

  [DNTypeName('System.Collections.Specialized.StringCollection')]
  DNStringCollection = interface(DDN.mscorlib.DNIList)
  ['{CFA0C6EB-5176-38E7-95B7-D13D6677CEED}']
  { getters & setters } 

    function get_Item(index: Int32): string;
    procedure set_Item(index: Int32; value: string);
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function Add(value: string): Int32;
    procedure AddRange(value: TArray<string>);
    function &Contains(value: string): Boolean;
    procedure CopyTo(&array: TArray<string>; index: Int32);
    function GetEnumerator: DNStringEnumerator;
    function IndexOf(value: string): Int32;
    procedure Insert(index: Int32; value: string);
    procedure Remove(value: string);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: string read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNStringCollection = class(TDNGenericImport<DNStringCollectionClass, DNStringCollection>) end;

  //-------------namespace: System.Collections.Specialized----------------
  DNStringDictionaryClass = interface(DNObjectClass)
  ['{2D4F7547-A030-5E4B-970F-720C9E6FE128}']
  { constructors } 

    {class} function init: DNStringDictionary;

  end;

  [DNTypeName('System.Collections.Specialized.StringDictionary')]
  DNStringDictionary = interface(DDN.mscorlib.DNIEnumerable)
  ['{0851A3C2-AC75-3BB9-B353-5F0B3F42406C}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_Item(key: string): string;
    procedure set_Item(key: string; value: string);
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Values: DDN.mscorlib.DNICollection;

  { methods } 

    procedure Add(key: string; value: string);
    procedure Clear;
    function ContainsKey(key: string): Boolean;
    function ContainsValue(value: string): Boolean;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure Remove(key: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Item[key: string]: string read get_Item write set_Item; default;
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Values: DDN.mscorlib.DNICollection read get_Values;
  end;

  TDNStringDictionary = class(TDNGenericImport<DNStringDictionaryClass, DNStringDictionary>) end;

  //-------------namespace: System.Collections.Specialized----------------
  DNStringEnumeratorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{79BC84CF-8651-5043-9070-69C2FDB3F737}']
  end;

  [DNTypeName('System.Collections.Specialized.StringEnumerator')]
  DNStringEnumerator = interface(DDN.mscorlib.DNObject)
  ['{60E3B2B8-FF7D-3B3C-A540-E5A0DB767EBA}']
  { getters & setters } 

    function get_Current: string;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Current: string read get_Current;
  end;

  TDNStringEnumerator = class(TDNGenericImport<DNStringEnumeratorClass, DNStringEnumerator>) end;

  //-------------namespace: System.ComponentModel----------------
  DNAsyncOperationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CA5DAB8C-889D-57A5-807C-DF9BDF9A1E4A}']
  end;

  [DNTypeName('System.ComponentModel.AsyncOperation')]
  DNAsyncOperation = interface(DDN.mscorlib.DNObject)
  ['{48B086EC-EE02-3E0C-A11E-B3230F94B560}']
  { getters & setters } 

    function get_UserSuppliedState: DDN.mscorlib.DNObject;
    function get_SynchronizationContext: DDN.mscorlib.DNSynchronizationContext;

  { methods } 

    procedure Post(d: DDN.mscorlib.DNSendOrPostCallback; arg: DDN.mscorlib.DNObject);
    procedure PostOperationCompleted(d: DDN.mscorlib.DNSendOrPostCallback; arg: DDN.mscorlib.DNObject);
    procedure OperationCompleted;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UserSuppliedState: DDN.mscorlib.DNObject read get_UserSuppliedState;
    property SynchronizationContext: DDN.mscorlib.DNSynchronizationContext read get_SynchronizationContext;
  end;

  TDNAsyncOperation = class(TDNGenericImport<DNAsyncOperationClass, DNAsyncOperation>) end;

  //-------------namespace: System.ComponentModel----------------
  DNAsyncOperationManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F5DE7343-8CBC-5378-AE9E-E8E768A3BCC8}']
  { static getter & setter } 

    {class} function get_SynchronizationContext: DDN.mscorlib.DNSynchronizationContext;
    {class} procedure set_SynchronizationContext(value: DDN.mscorlib.DNSynchronizationContext);

  { static methods } 

    {class} function CreateOperation(userSuppliedState: DDN.mscorlib.DNObject): DNAsyncOperation;

  { static propertys } 

    {class} property SynchronizationContext: DDN.mscorlib.DNSynchronizationContext read get_SynchronizationContext write set_SynchronizationContext;
  end;

  [DNTypeName('System.ComponentModel.AsyncOperationManager')]
  DNAsyncOperationManager = interface(DDN.mscorlib.DNObject)
  ['{83E272C4-FAC1-348A-987A-10A816FA5B80}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAsyncOperationManager = class(TDNGenericImport<DNAsyncOperationManagerClass, DNAsyncOperationManager>) end;

  //-------------namespace: System.ComponentModel----------------
  DNAttributeCollectionClass = interface(DNObjectClass)
  ['{42F71F61-5B96-51C3-9E6F-72B8B480E2D7}']
  { constructors } 

    {class} function init(attributes: TArray<DDN.mscorlib.DNAttribute>): DNAttributeCollection;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNAttributeCollection;

  { static fields } 

    {class} property Empty: DNAttributeCollection read __fakeFieldGet_Empty;

  { static methods } 

    {class} function FromExisting(existing: DNAttributeCollection; newAttributes: TArray<DDN.mscorlib.DNAttribute>): DNAttributeCollection;

  end;

  [DNTypeName('System.ComponentModel.AttributeCollection')]
  DNAttributeCollection = interface(DDN.mscorlib.DNICollection)
  ['{4309D526-F739-3BE3-B89C-4F6DDE852C14}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DDN.mscorlib.DNAttribute; overload;
    function get_Item(attributeType: DDN.mscorlib.DNType): DDN.mscorlib.DNAttribute; overload;

  { methods } 

    function &Contains(attribute: DDN.mscorlib.DNAttribute): Boolean; overload;
    function &Contains(attributes: TArray<DDN.mscorlib.DNAttribute>): Boolean; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Matches(attribute: DDN.mscorlib.DNAttribute): Boolean; overload;
    function Matches(attributes: TArray<DDN.mscorlib.DNAttribute>): Boolean; overload;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DDN.mscorlib.DNAttribute read get_Item; default;
    property Item[attributeType: DDN.mscorlib.DNType]: DDN.mscorlib.DNAttribute read get_Item; default;
  end;

  TDNAttributeCollection = class(TDNGenericImport<DNAttributeCollectionClass, DNAttributeCollection>) end;

  //-------------namespace: System.ComponentModel----------------
  DNComponentEditorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E537A632-30BF-5D2C-8CAB-BEFC4D84965A}']
  end;

  [DNTypeName('System.ComponentModel.ComponentEditor')]
  DNComponentEditor = interface(DDN.mscorlib.DNObject)
  ['{D4E8CF66-09B8-34C3-BD33-B63F1B9C73A8}']
  { methods } 

    function EditComponent(component: DDN.mscorlib.DNObject): Boolean; overload;
    function EditComponent(context: DNITypeDescriptorContext; component: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNComponentEditor = class(TDNGenericImport<DNComponentEditorClass, DNComponentEditor>) end;

  //-------------namespace: System.ComponentModel----------------
  DNContainerClass = interface(DNObjectClass)
  ['{3A0C3D07-A3FC-5152-8E83-82E114988360}']
  { constructors } 

    {class} function init: DNContainer;

  end;

  [DNTypeName('System.ComponentModel.Container')]
  DNContainer = interface(DNIContainer)
  ['{4AE46A73-66C8-357C-850D-78DF77FDD482}']
  { getters & setters } 

    function get_Components: DNComponentCollection;

  { methods } 

    procedure Add(component: DNIComponent); overload;
    procedure Dispose;
    procedure Remove(component: DNIComponent);
    procedure Add(component: DNIComponent; name: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Components: DNComponentCollection read get_Components;
  end;

  TDNContainer = class(TDNGenericImport<DNContainerClass, DNContainer>) end;

  //-------------namespace: System.ComponentModel----------------
  DNNestedContainerClass = interface(DNContainerClass)
  ['{4BF859EA-C92B-5E04-8537-BE2D67C7A6C1}']
  { constructors } 

    {class} function init(owner: DNIComponent): DNNestedContainer;

  end;

  [DNTypeName('System.ComponentModel.NestedContainer')]
  DNNestedContainer = interface(DNContainer)
  ['{34773DEB-2D3D-333D-88DC-1EB01D6905FE}']
  { getters & setters } 

    function get_Owner: DNIComponent;
    function get_Components: DNComponentCollection;

  { methods } 

    procedure Add(component: DNIComponent); overload;
    procedure Dispose;
    procedure Remove(component: DNIComponent);
    procedure Add(component: DNIComponent; name: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Owner: DNIComponent read get_Owner;
    property Components: DNComponentCollection read get_Components;
  end;

  TDNNestedContainer = class(TDNGenericImport<DNNestedContainerClass, DNNestedContainer>) end;

  //-------------namespace: System.ComponentModel----------------
  DNContainerFilterServiceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{81F8D85B-CC01-5A13-9884-F39E7596AA0E}']
  end;

  [DNTypeName('System.ComponentModel.ContainerFilterService')]
  DNContainerFilterService = interface(DDN.mscorlib.DNObject)
  ['{130E0D2A-75B2-3857-ABD8-ADB30A2802EF}']
  { methods } 

    function FilterComponents(components: DNComponentCollection): DNComponentCollection;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNContainerFilterService = class(TDNGenericImport<DNContainerFilterServiceClass, DNContainerFilterService>) end;

  //-------------namespace: System.ComponentModel----------------
  DNCustomTypeDescriptorClass = interface(DNObjectClass)
  ['{0EA373ED-4117-5D8B-8BEA-AECD1BBF5962}']
  end;

  [DNTypeName('System.ComponentModel.CustomTypeDescriptor')]
  DNCustomTypeDescriptor = interface(DNICustomTypeDescriptor)
  ['{75D1054F-1D00-3508-8CFE-DD2B804BB621}']
  { methods } 

    function GetProperties(attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetAttributes: DNAttributeCollection;
    function GetClassName: string;
    function GetComponentName: string;
    function GetConverter: DNTypeConverter;
    function GetDefaultEvent: DNEventDescriptor;
    function GetDefaultProperty: DNPropertyDescriptor;
    function GetEditor(editorBaseType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function GetEvents: DNEventDescriptorCollection; overload;
    function GetEvents(attributes: TArray<DDN.mscorlib.DNAttribute>): DNEventDescriptorCollection; overload;
    function GetProperties: DNPropertyDescriptorCollection; overload;
    function GetPropertyOwner(pd: DNPropertyDescriptor): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCustomTypeDescriptor = class(TDNGenericImport<DNCustomTypeDescriptorClass, DNCustomTypeDescriptor>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNCommandIDClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6951D44D-DD82-5A49-A1BF-8280AAC913E8}']
  { constructors } 

    {class} function init(menuGroup: DDN.mscorlib.DNGuid; commandID: Int32): DNCommandID;

  end;

  [DNTypeName('System.ComponentModel.Design.CommandID')]
  DNCommandID = interface(DDN.mscorlib.DNObject)
  ['{E60178F7-1512-389F-9CA6-084DF14CF596}']
  { getters & setters } 

    function get_ID: Int32;
    function get_Guid: DDN.mscorlib.DNGuid;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ID: Int32 read get_ID;
    property Guid: DDN.mscorlib.DNGuid read get_Guid;
  end;

  TDNCommandID = class(TDNGenericImport<DNCommandIDClass, DNCommandID>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNDesignerCollectionClass = interface(DNObjectClass)
  ['{014885B2-C979-55FE-89BC-1ACD1C3C21A4}']
  { constructors } 

    {class} function init(designers: TArray<DNIDesignerHost>): DNDesignerCollection; overload;
    {class} function init(designers: DDN.mscorlib.DNIList): DNDesignerCollection; overload;

  end;

  [DNTypeName('System.ComponentModel.Design.DesignerCollection')]
  DNDesignerCollection = interface(DDN.mscorlib.DNICollection)
  ['{A00DAB71-D5C4-3A11-A662-0E83BC82C070}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNIDesignerHost;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNIDesignerHost read get_Item; default;
  end;

  TDNDesignerCollection = class(TDNGenericImport<DNDesignerCollectionClass, DNDesignerCollection>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNDesignerOptionServiceClass = interface(DNObjectClass)
  ['{4AC17E15-BB1B-56AD-862A-3623FDFBD3BE}']
  end;

  [DNTypeName('System.ComponentModel.Design.DesignerOptionService')]
  DNDesignerOptionService = interface(DNIDesignerOptionService)
  ['{8394D9E8-D8FB-39B7-A160-4C0DBE16E6FC}']
  { getters & setters } 

    function get_Options: DNDesignerOptionService_DesignerOptionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Options: DNDesignerOptionService_DesignerOptionCollection read get_Options;
  end;

  TDNDesignerOptionService = class(TDNGenericImport<DNDesignerOptionServiceClass, DNDesignerOptionService>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNDesignerOptionService_DesignerOptionCollectionClass = interface(DNObjectClass)
  ['{FE051D64-CF15-5B72-BA15-F0B3251881C2}']
  end;

  [DNTypeName('System.ComponentModel.Design.DesignerOptionService+DesignerOptionCollection')]
  DNDesignerOptionService_DesignerOptionCollection = interface(DDN.mscorlib.DNIList)
  ['{88BCC2BF-D1FC-3479-82CB-90A257CC52E0}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Name: string;
    function get_Parent: DNDesignerOptionService_DesignerOptionCollection;
    function get_Properties: DNPropertyDescriptorCollection;
    function get_Item(index: Int32): DNDesignerOptionService_DesignerOptionCollection; overload;
    function get_Item(name: string): DNDesignerOptionService_DesignerOptionCollection; overload;

  { methods } 

    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function IndexOf(value: DNDesignerOptionService_DesignerOptionCollection): Int32;
    function ShowDialog: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Name: string read get_Name;
    property Parent: DNDesignerOptionService_DesignerOptionCollection read get_Parent;
    property Properties: DNPropertyDescriptorCollection read get_Properties;
    property Item[index: Int32]: DNDesignerOptionService_DesignerOptionCollection read get_Item; default;
    property Item[name: string]: DNDesignerOptionService_DesignerOptionCollection read get_Item; default;
  end;

  TDNDesignerOptionService_DesignerOptionCollection = class(TDNGenericImport<DNDesignerOptionService_DesignerOptionCollectionClass, DNDesignerOptionService_DesignerOptionCollection>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNDesignerTransactionClass = interface(DNObjectClass)
  ['{090BB060-66C9-534C-B2DF-40902EC2DBDE}']
  end;

  [DNTypeName('System.ComponentModel.Design.DesignerTransaction')]
  DNDesignerTransaction = interface(DDN.mscorlib.DNIDisposable)
  ['{85FFD3BD-18AE-3588-9027-532C56B20026}']
  { getters & setters } 

    function get_Canceled: Boolean;
    function get_Committed: Boolean;
    function get_Description: string;

  { methods } 

    procedure Cancel;
    procedure Commit;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Canceled: Boolean read get_Canceled;
    property Committed: Boolean read get_Committed;
    property Description: string read get_Description;
  end;

  TDNDesignerTransaction = class(TDNGenericImport<DNDesignerTransactionClass, DNDesignerTransaction>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNDesigntimeLicenseContextSerializerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{180DFED8-E989-564B-8815-6FA809388F56}']
  { static methods } 

    {class} procedure Serialize(o: DDN.mscorlib.DNStream; cryptoKey: string; context: DNDesigntimeLicenseContext);

  end;

  [DNTypeName('System.ComponentModel.Design.DesigntimeLicenseContextSerializer')]
  DNDesigntimeLicenseContextSerializer = interface(DDN.mscorlib.DNObject)
  ['{919F2669-1649-3B5B-A4A3-51FDDF53D293}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDesigntimeLicenseContextSerializer = class(TDNGenericImport<DNDesigntimeLicenseContextSerializerClass, DNDesigntimeLicenseContextSerializer>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNMenuCommandClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C49D1EA9-3689-51FB-ACFD-046BE1B1C286}']
  { constructors } 

    {class} function init(handler: DDN.mscorlib.DNEventHandler; command: DNCommandID): DNMenuCommand;

  end;

  [DNTypeName('System.ComponentModel.Design.MenuCommand')]
  DNMenuCommand = interface(DDN.mscorlib.DNObject)
  ['{5C719461-3A18-33D0-B3E1-33F169085C21}']
  { getters & setters } 

    function get_Checked: Boolean;
    procedure set_Checked(value: Boolean);
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_Properties: DDN.mscorlib.DNIDictionary;
    function get_Supported: Boolean;
    procedure set_Supported(value: Boolean);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_CommandID: DNCommandID;
    function get_OleStatus: Int32;

  { events } 

    procedure add_CommandChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CommandChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Invoke; overload;
    procedure Invoke(arg: DDN.mscorlib.DNObject); overload;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Checked: Boolean read get_Checked write set_Checked;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property Properties: DDN.mscorlib.DNIDictionary read get_Properties;
    property Supported: Boolean read get_Supported write set_Supported;
    property Visible: Boolean read get_Visible write set_Visible;
    property CommandID: DNCommandID read get_CommandID;
    property OleStatus: Int32 read get_OleStatus;
  end;

  TDNMenuCommand = class(TDNGenericImport<DNMenuCommandClass, DNMenuCommand>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNDesignerVerbClass = interface(DNMenuCommandClass)
  ['{C5D30608-4AED-5759-BBC7-49F7DB88EDD2}']
  { constructors } 

    {class} function init(text: string; handler: DDN.mscorlib.DNEventHandler): DNDesignerVerb; overload;
    {class} function init(text: string; handler: DDN.mscorlib.DNEventHandler; startCommandID: DNCommandID): DNDesignerVerb; overload;

  end;

  [DNTypeName('System.ComponentModel.Design.DesignerVerb')]
  DNDesignerVerb = interface(DNMenuCommand)
  ['{5231CCD9-DABB-3FDE-AD29-8FD3D382C248}']
  { getters & setters } 

    function get_Description: string;
    procedure set_Description(value: string);
    function get_Text: string;
    function get_Checked: Boolean;
    procedure set_Checked(value: Boolean);
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_Properties: DDN.mscorlib.DNIDictionary;
    function get_Supported: Boolean;
    procedure set_Supported(value: Boolean);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_CommandID: DNCommandID;
    function get_OleStatus: Int32;

  { events } 

    procedure add_CommandChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CommandChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function ToString: string;
    procedure Invoke; overload;
    procedure Invoke(arg: DDN.mscorlib.DNObject); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Description: string read get_Description write set_Description;
    property Text: string read get_Text;
    property Checked: Boolean read get_Checked write set_Checked;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property Properties: DDN.mscorlib.DNIDictionary read get_Properties;
    property Supported: Boolean read get_Supported write set_Supported;
    property Visible: Boolean read get_Visible write set_Visible;
    property CommandID: DNCommandID read get_CommandID;
    property OleStatus: Int32 read get_OleStatus;
  end;

  TDNDesignerVerb = class(TDNGenericImport<DNDesignerVerbClass, DNDesignerVerb>) end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  DNComponentSerializationServiceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0BDC7C03-D9B9-5BC9-B851-DE168E4F14DF}']
  end;

  [DNTypeName('System.ComponentModel.Design.Serialization.ComponentSerializationService')]
  DNComponentSerializationService = interface(DDN.mscorlib.DNObject)
  ['{8F553624-5AC4-38B9-A4C4-C1C85AC66475}']
  { methods } 

    procedure DeserializeTo(store: DNSerializationStore; container: DNIContainer); overload;
    procedure DeserializeTo(store: DNSerializationStore; container: DNIContainer; validateRecycledTypes: Boolean); overload;
    function CreateStore: DNSerializationStore;
    function LoadStore(stream: DDN.mscorlib.DNStream): DNSerializationStore;
    procedure Serialize(store: DNSerializationStore; value: DDN.mscorlib.DNObject);
    procedure SerializeAbsolute(store: DNSerializationStore; value: DDN.mscorlib.DNObject);
    procedure SerializeMember(store: DNSerializationStore; owningObject: DDN.mscorlib.DNObject; member: DNMemberDescriptor);
    procedure SerializeMemberAbsolute(store: DNSerializationStore; owningObject: DDN.mscorlib.DNObject; member: DNMemberDescriptor);
    function Deserialize(store: DNSerializationStore): DDN.mscorlib.DNICollection; overload;
    function Deserialize(store: DNSerializationStore; container: DNIContainer): DDN.mscorlib.DNICollection; overload;
    procedure DeserializeTo(store: DNSerializationStore; container: DNIContainer; validateRecycledTypes: Boolean; applyDefaults: Boolean); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNComponentSerializationService = class(TDNGenericImport<DNComponentSerializationServiceClass, DNComponentSerializationService>) end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  DNContextStackClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9CA8E289-66A8-5456-9D0A-4B2D5C76DEAA}']
  { constructors } 

    {class} function init: DNContextStack;

  end;

  [DNTypeName('System.ComponentModel.Design.Serialization.ContextStack')]
  DNContextStack = interface(DDN.mscorlib.DNObject)
  ['{8E46772A-90B1-3C2E-807E-74C807CD13D2}']
  { getters & setters } 

    function get_Current: DDN.mscorlib.DNObject;
    function get_Item(level: Int32): DDN.mscorlib.DNObject; overload;
    function get_Item(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;

  { methods } 

    procedure Append(context: DDN.mscorlib.DNObject);
    function Pop: DDN.mscorlib.DNObject;
    procedure Push(context: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Current: DDN.mscorlib.DNObject read get_Current;
    property Item[level: Int32]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[&type: DDN.mscorlib.DNType]: DDN.mscorlib.DNObject read get_Item; default;
  end;

  TDNContextStack = class(TDNGenericImport<DNContextStackClass, DNContextStack>) end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  DNDesignerLoaderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A94200C6-64B9-5158-8C7F-5A754543C192}']
  end;

  [DNTypeName('System.ComponentModel.Design.Serialization.DesignerLoader')]
  DNDesignerLoader = interface(DDN.mscorlib.DNObject)
  ['{AD44E49C-2DED-33BD-83A6-9EB9C6C66F39}']
  { getters & setters } 

    function get_Loading: Boolean;

  { methods } 

    procedure Flush;
    procedure BeginLoad(host: DNIDesignerLoaderHost);
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Loading: Boolean read get_Loading;
  end;

  TDNDesignerLoader = class(TDNGenericImport<DNDesignerLoaderClass, DNDesignerLoader>) end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  DNInstanceDescriptorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{93840FD8-F4A4-5E2C-A602-37AE4F757BE0}']
  { constructors } 

    {class} function init(member: DDN.mscorlib.DNMemberInfo; arguments: DDN.mscorlib.DNICollection): DNInstanceDescriptor; overload;
    {class} function init(member: DDN.mscorlib.DNMemberInfo; arguments: DDN.mscorlib.DNICollection; isComplete: Boolean): DNInstanceDescriptor; overload;

  end;

  [DNTypeName('System.ComponentModel.Design.Serialization.InstanceDescriptor')]
  DNInstanceDescriptor = interface(DDN.mscorlib.DNObject)
  ['{D3BD5F3A-2677-3580-9BCE-C960CCFABAB6}']
  { getters & setters } 

    function get_Arguments: DDN.mscorlib.DNICollection;
    function get_IsComplete: Boolean;
    function get_MemberInfo: DDN.mscorlib.DNMemberInfo;

  { methods } 

    function Invoke: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Arguments: DDN.mscorlib.DNICollection read get_Arguments;
    property IsComplete: Boolean read get_IsComplete;
    property MemberInfo: DDN.mscorlib.DNMemberInfo read get_MemberInfo;
  end;

  TDNInstanceDescriptor = class(TDNGenericImport<DNInstanceDescriptorClass, DNInstanceDescriptor>) end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  DNMemberRelationshipServiceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{37CEB0F0-543B-53AE-AD29-A57206B5E141}']
  end;

  [DNTypeName('System.ComponentModel.Design.Serialization.MemberRelationshipService')]
  DNMemberRelationshipService = interface(DDN.mscorlib.DNObject)
  ['{8A3C1AD3-0E8F-3978-9DA6-C925DC5A897E}']
  { getters & setters } 

    function get_Item(source: DNMemberRelationship): DNMemberRelationship; overload;
    procedure set_Item(source: DNMemberRelationship; value: DNMemberRelationship); overload;
    function get_Item(sourceOwner: DDN.mscorlib.DNObject; sourceMember: DNMemberDescriptor): DNMemberRelationship; overload;
    procedure set_Item(sourceOwner: DDN.mscorlib.DNObject; sourceMember: DNMemberDescriptor; value: DNMemberRelationship); overload;

  { methods } 

    function SupportsRelationship(source: DNMemberRelationship; relationship: DNMemberRelationship): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[source: DNMemberRelationship]: DNMemberRelationship read get_Item write set_Item; default;
    property Item[sourceOwner: DDN.mscorlib.DNObject; sourceMember: DNMemberDescriptor]: DNMemberRelationship read get_Item write set_Item; default;
  end;

  TDNMemberRelationshipService = class(TDNGenericImport<DNMemberRelationshipServiceClass, DNMemberRelationshipService>) end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  DNSerializationStoreClass = interface(DNObjectClass)
  ['{A2B1D09A-B9B5-5BF2-AEEA-CD1FE4820733}']
  end;

  [DNTypeName('System.ComponentModel.Design.Serialization.SerializationStore')]
  DNSerializationStore = interface(DDN.mscorlib.DNIDisposable)
  ['{93F035A3-1E54-3F2A-9946-D8505E88FDC6}']
  { getters & setters } 

    function get_Errors: DDN.mscorlib.DNICollection;

  { methods } 

    procedure Close;
    procedure Save(stream: DDN.mscorlib.DNStream);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Errors: DDN.mscorlib.DNICollection read get_Errors;
  end;

  TDNSerializationStore = class(TDNGenericImport<DNSerializationStoreClass, DNSerializationStore>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNServiceContainerClass = interface(DNObjectClass)
  ['{74FAB6E2-E384-5266-9988-AB4039D48E97}']
  { constructors } 

    {class} function init: DNServiceContainer; overload;
    {class} function init(parentProvider: DDN.mscorlib.DNIServiceProvider): DNServiceContainer; overload;

  end;

  [DNTypeName('System.ComponentModel.Design.ServiceContainer')]
  DNServiceContainer = interface(DNIServiceContainer)
  ['{C46B78B2-F47F-38FA-8347-B9EBFA13F63F}']
  { methods } 

    procedure AddService(serviceType: DDN.mscorlib.DNType; serviceInstance: DDN.mscorlib.DNObject); overload;
    procedure AddService(serviceType: DDN.mscorlib.DNType; callback: DNServiceCreatorCallback); overload;
    procedure Dispose;
    procedure RemoveService(serviceType: DDN.mscorlib.DNType); overload;
    procedure AddService(serviceType: DDN.mscorlib.DNType; serviceInstance: DDN.mscorlib.DNObject; promote: Boolean); overload;
    procedure AddService(serviceType: DDN.mscorlib.DNType; callback: DNServiceCreatorCallback; promote: Boolean); overload;
    function GetService(serviceType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    procedure RemoveService(serviceType: DDN.mscorlib.DNType; promote: Boolean); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNServiceContainer = class(TDNGenericImport<DNServiceContainerClass, DNServiceContainer>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNStandardCommandsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1064506A-C376-5B6E-B308-83A0E01D8CC1}']
  { constructors } 

    {class} function init: DNStandardCommands;

  { static fields getter & setter } 

   function __fakeFieldGet_AlignBottom: DNCommandID;
   function __fakeFieldGet_AlignHorizontalCenters: DNCommandID;
   function __fakeFieldGet_AlignLeft: DNCommandID;
   function __fakeFieldGet_AlignRight: DNCommandID;
   function __fakeFieldGet_AlignToGrid: DNCommandID;
   function __fakeFieldGet_AlignTop: DNCommandID;
   function __fakeFieldGet_AlignVerticalCenters: DNCommandID;
   function __fakeFieldGet_ArrangeBottom: DNCommandID;
   function __fakeFieldGet_ArrangeRight: DNCommandID;
   function __fakeFieldGet_BringForward: DNCommandID;
   function __fakeFieldGet_BringToFront: DNCommandID;
   function __fakeFieldGet_CenterHorizontally: DNCommandID;
   function __fakeFieldGet_CenterVertically: DNCommandID;
   function __fakeFieldGet_ViewCode: DNCommandID;
   function __fakeFieldGet_DocumentOutline: DNCommandID;
   function __fakeFieldGet_Copy: DNCommandID;
   function __fakeFieldGet_Cut: DNCommandID;
   function __fakeFieldGet_Delete: DNCommandID;
   function __fakeFieldGet_Group: DNCommandID;
   function __fakeFieldGet_HorizSpaceConcatenate: DNCommandID;
   function __fakeFieldGet_HorizSpaceDecrease: DNCommandID;
   function __fakeFieldGet_HorizSpaceIncrease: DNCommandID;
   function __fakeFieldGet_HorizSpaceMakeEqual: DNCommandID;
   function __fakeFieldGet_Paste: DNCommandID;
   function __fakeFieldGet_Properties: DNCommandID;
   function __fakeFieldGet_Redo: DNCommandID;
   function __fakeFieldGet_MultiLevelRedo: DNCommandID;
   function __fakeFieldGet_SelectAll: DNCommandID;
   function __fakeFieldGet_SendBackward: DNCommandID;
   function __fakeFieldGet_SendToBack: DNCommandID;
   function __fakeFieldGet_SizeToControl: DNCommandID;
   function __fakeFieldGet_SizeToControlHeight: DNCommandID;
   function __fakeFieldGet_SizeToControlWidth: DNCommandID;
   function __fakeFieldGet_SizeToFit: DNCommandID;
   function __fakeFieldGet_SizeToGrid: DNCommandID;
   function __fakeFieldGet_SnapToGrid: DNCommandID;
   function __fakeFieldGet_TabOrder: DNCommandID;
   function __fakeFieldGet_Undo: DNCommandID;
   function __fakeFieldGet_MultiLevelUndo: DNCommandID;
   function __fakeFieldGet_Ungroup: DNCommandID;
   function __fakeFieldGet_VertSpaceConcatenate: DNCommandID;
   function __fakeFieldGet_VertSpaceDecrease: DNCommandID;
   function __fakeFieldGet_VertSpaceIncrease: DNCommandID;
   function __fakeFieldGet_VertSpaceMakeEqual: DNCommandID;
   function __fakeFieldGet_ShowGrid: DNCommandID;
   function __fakeFieldGet_ViewGrid: DNCommandID;
   function __fakeFieldGet_Replace: DNCommandID;
   function __fakeFieldGet_PropertiesWindow: DNCommandID;
   function __fakeFieldGet_LockControls: DNCommandID;
   function __fakeFieldGet_F1Help: DNCommandID;
   function __fakeFieldGet_ArrangeIcons: DNCommandID;
   function __fakeFieldGet_LineupIcons: DNCommandID;
   function __fakeFieldGet_ShowLargeIcons: DNCommandID;
   function __fakeFieldGet_VerbFirst: DNCommandID;
   function __fakeFieldGet_VerbLast: DNCommandID;

  { static fields } 

    {class} property AlignBottom: DNCommandID read __fakeFieldGet_AlignBottom;
    {class} property AlignHorizontalCenters: DNCommandID read __fakeFieldGet_AlignHorizontalCenters;
    {class} property AlignLeft: DNCommandID read __fakeFieldGet_AlignLeft;
    {class} property AlignRight: DNCommandID read __fakeFieldGet_AlignRight;
    {class} property AlignToGrid: DNCommandID read __fakeFieldGet_AlignToGrid;
    {class} property AlignTop: DNCommandID read __fakeFieldGet_AlignTop;
    {class} property AlignVerticalCenters: DNCommandID read __fakeFieldGet_AlignVerticalCenters;
    {class} property ArrangeBottom: DNCommandID read __fakeFieldGet_ArrangeBottom;
    {class} property ArrangeRight: DNCommandID read __fakeFieldGet_ArrangeRight;
    {class} property BringForward: DNCommandID read __fakeFieldGet_BringForward;
    {class} property BringToFront: DNCommandID read __fakeFieldGet_BringToFront;
    {class} property CenterHorizontally: DNCommandID read __fakeFieldGet_CenterHorizontally;
    {class} property CenterVertically: DNCommandID read __fakeFieldGet_CenterVertically;
    {class} property ViewCode: DNCommandID read __fakeFieldGet_ViewCode;
    {class} property DocumentOutline: DNCommandID read __fakeFieldGet_DocumentOutline;
    {class} property Copy: DNCommandID read __fakeFieldGet_Copy;
    {class} property Cut: DNCommandID read __fakeFieldGet_Cut;
    {class} property Delete: DNCommandID read __fakeFieldGet_Delete;
    {class} property Group: DNCommandID read __fakeFieldGet_Group;
    {class} property HorizSpaceConcatenate: DNCommandID read __fakeFieldGet_HorizSpaceConcatenate;
    {class} property HorizSpaceDecrease: DNCommandID read __fakeFieldGet_HorizSpaceDecrease;
    {class} property HorizSpaceIncrease: DNCommandID read __fakeFieldGet_HorizSpaceIncrease;
    {class} property HorizSpaceMakeEqual: DNCommandID read __fakeFieldGet_HorizSpaceMakeEqual;
    {class} property Paste: DNCommandID read __fakeFieldGet_Paste;
    {class} property Properties: DNCommandID read __fakeFieldGet_Properties;
    {class} property Redo: DNCommandID read __fakeFieldGet_Redo;
    {class} property MultiLevelRedo: DNCommandID read __fakeFieldGet_MultiLevelRedo;
    {class} property SelectAll: DNCommandID read __fakeFieldGet_SelectAll;
    {class} property SendBackward: DNCommandID read __fakeFieldGet_SendBackward;
    {class} property SendToBack: DNCommandID read __fakeFieldGet_SendToBack;
    {class} property SizeToControl: DNCommandID read __fakeFieldGet_SizeToControl;
    {class} property SizeToControlHeight: DNCommandID read __fakeFieldGet_SizeToControlHeight;
    {class} property SizeToControlWidth: DNCommandID read __fakeFieldGet_SizeToControlWidth;
    {class} property SizeToFit: DNCommandID read __fakeFieldGet_SizeToFit;
    {class} property SizeToGrid: DNCommandID read __fakeFieldGet_SizeToGrid;
    {class} property SnapToGrid: DNCommandID read __fakeFieldGet_SnapToGrid;
    {class} property TabOrder: DNCommandID read __fakeFieldGet_TabOrder;
    {class} property Undo: DNCommandID read __fakeFieldGet_Undo;
    {class} property MultiLevelUndo: DNCommandID read __fakeFieldGet_MultiLevelUndo;
    {class} property Ungroup: DNCommandID read __fakeFieldGet_Ungroup;
    {class} property VertSpaceConcatenate: DNCommandID read __fakeFieldGet_VertSpaceConcatenate;
    {class} property VertSpaceDecrease: DNCommandID read __fakeFieldGet_VertSpaceDecrease;
    {class} property VertSpaceIncrease: DNCommandID read __fakeFieldGet_VertSpaceIncrease;
    {class} property VertSpaceMakeEqual: DNCommandID read __fakeFieldGet_VertSpaceMakeEqual;
    {class} property ShowGrid: DNCommandID read __fakeFieldGet_ShowGrid;
    {class} property ViewGrid: DNCommandID read __fakeFieldGet_ViewGrid;
    {class} property Replace: DNCommandID read __fakeFieldGet_Replace;
    {class} property PropertiesWindow: DNCommandID read __fakeFieldGet_PropertiesWindow;
    {class} property LockControls: DNCommandID read __fakeFieldGet_LockControls;
    {class} property F1Help: DNCommandID read __fakeFieldGet_F1Help;
    {class} property ArrangeIcons: DNCommandID read __fakeFieldGet_ArrangeIcons;
    {class} property LineupIcons: DNCommandID read __fakeFieldGet_LineupIcons;
    {class} property ShowLargeIcons: DNCommandID read __fakeFieldGet_ShowLargeIcons;
    {class} property VerbFirst: DNCommandID read __fakeFieldGet_VerbFirst;
    {class} property VerbLast: DNCommandID read __fakeFieldGet_VerbLast;

  end;

  [DNTypeName('System.ComponentModel.Design.StandardCommands')]
  DNStandardCommands = interface(DDN.mscorlib.DNObject)
  ['{1988EA7A-312E-3B1D-82CF-4D854A4FB896}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNStandardCommands = class(TDNGenericImport<DNStandardCommandsClass, DNStandardCommands>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNStandardToolWindowsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{176F5669-16AC-55C7-BF10-E892B142907F}']
  { constructors } 

    {class} function init: DNStandardToolWindows;

  { static fields getter & setter } 

   function __fakeFieldGet_ObjectBrowser: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_OutputWindow: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_ProjectExplorer: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_PropertyBrowser: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_RelatedLinks: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_ServerExplorer: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_TaskList: DDN.mscorlib.DNGuid;
   function __fakeFieldGet_Toolbox: DDN.mscorlib.DNGuid;

  { static fields } 

    {class} property ObjectBrowser: DDN.mscorlib.DNGuid read __fakeFieldGet_ObjectBrowser;
    {class} property OutputWindow: DDN.mscorlib.DNGuid read __fakeFieldGet_OutputWindow;
    {class} property ProjectExplorer: DDN.mscorlib.DNGuid read __fakeFieldGet_ProjectExplorer;
    {class} property PropertyBrowser: DDN.mscorlib.DNGuid read __fakeFieldGet_PropertyBrowser;
    {class} property RelatedLinks: DDN.mscorlib.DNGuid read __fakeFieldGet_RelatedLinks;
    {class} property ServerExplorer: DDN.mscorlib.DNGuid read __fakeFieldGet_ServerExplorer;
    {class} property TaskList: DDN.mscorlib.DNGuid read __fakeFieldGet_TaskList;
    {class} property Toolbox: DDN.mscorlib.DNGuid read __fakeFieldGet_Toolbox;

  end;

  [DNTypeName('System.ComponentModel.Design.StandardToolWindows')]
  DNStandardToolWindows = interface(DDN.mscorlib.DNObject)
  ['{3C16C1BA-6703-36CD-8587-79DADFBE9289}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNStandardToolWindows = class(TDNGenericImport<DNStandardToolWindowsClass, DNStandardToolWindows>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNTypeDescriptionProviderServiceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{12762D68-C77A-5614-8E5A-18A7D3D5B5CC}']
  end;

  [DNTypeName('System.ComponentModel.Design.TypeDescriptionProviderService')]
  DNTypeDescriptionProviderService = interface(DDN.mscorlib.DNObject)
  ['{7A209003-F1E5-311D-8781-6048D77362F5}']
  { methods } 

    function GetProvider(instance: DDN.mscorlib.DNObject): DNTypeDescriptionProvider; overload;
    function GetProvider(&type: DDN.mscorlib.DNType): DNTypeDescriptionProvider; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeDescriptionProviderService = class(TDNGenericImport<DNTypeDescriptionProviderServiceClass, DNTypeDescriptionProviderService>) end;

  //-------------namespace: System.ComponentModel----------------
  DNEventDescriptorCollectionClass = interface(DNObjectClass)
  ['{9C3A765E-6797-5067-9AF4-9136EACF6FC9}']
  { constructors } 

    {class} function init(events: TArray<DNEventDescriptor>): DNEventDescriptorCollection; overload;
    {class} function init(events: TArray<DNEventDescriptor>; readOnly: Boolean): DNEventDescriptorCollection; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNEventDescriptorCollection;

  { static fields } 

    {class} property Empty: DNEventDescriptorCollection read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.ComponentModel.EventDescriptorCollection')]
  DNEventDescriptorCollection = interface(DDN.mscorlib.DNICollection)
  ['{C657A06C-7655-32F7-8CC8-9A3BDC803487}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNEventDescriptor; overload;
    function get_Item(name: string): DNEventDescriptor; overload;

  { methods } 

    function Add(value: DNEventDescriptor): Int32;
    procedure Clear;
    function Find(name: string; ignoreCase: Boolean): DNEventDescriptor;
    procedure Insert(index: Int32; value: DNEventDescriptor);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Sort: DNEventDescriptorCollection; overload;
    function Sort(names: TArray<string>): DNEventDescriptorCollection; overload;
    function Sort(names: TArray<string>; comparer: DDN.mscorlib.DNIComparer): DNEventDescriptorCollection; overload;
    function Sort(comparer: DDN.mscorlib.DNIComparer): DNEventDescriptorCollection; overload;
    function &Contains(value: DNEventDescriptor): Boolean;
    function IndexOf(value: DNEventDescriptor): Int32;
    procedure Remove(value: DNEventDescriptor);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNEventDescriptor read get_Item; default;
    property Item[name: string]: DNEventDescriptor read get_Item; default;
  end;

  TDNEventDescriptorCollection = class(TDNGenericImport<DNEventDescriptorCollectionClass, DNEventDescriptorCollection>) end;

  //-------------namespace: System.ComponentModel----------------
  DNEventHandlerListClass = interface(DNObjectClass)
  ['{626D2C47-79FB-59BF-9F59-56CA5C8EC739}']
  { constructors } 

    {class} function init: DNEventHandlerList;

  end;

  [DNTypeName('System.ComponentModel.EventHandlerList')]
  DNEventHandlerList = interface(DDN.mscorlib.DNIDisposable)
  ['{0FCB595F-41DF-3C95-BE47-5E13616E00B8}']
  { getters & setters } 

    function get_Item(key: DDN.mscorlib.DNObject): DDN.mscorlib.DNDelegate;
    procedure set_Item(key: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNDelegate);

  { methods } 

    procedure AddHandler(key: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNDelegate);
    procedure AddHandlers(listToAddFrom: DNEventHandlerList);
    procedure Dispose;
    procedure RemoveHandler(key: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNDelegate);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: DDN.mscorlib.DNObject]: DDN.mscorlib.DNDelegate read get_Item write set_Item; default;
  end;

  TDNEventHandlerList = class(TDNGenericImport<DNEventHandlerListClass, DNEventHandlerList>) end;

  //-------------namespace: System.ComponentModel----------------
  DNInstanceCreationEditorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{96B2B25A-E43A-5B45-9CF0-E87DE1FEB479}']
  end;

  [DNTypeName('System.ComponentModel.InstanceCreationEditor')]
  DNInstanceCreationEditor = interface(DDN.mscorlib.DNObject)
  ['{55B4A530-D334-3DC4-8376-6B9A7689770E}']
  { getters & setters } 

    function get_Text: string;

  { methods } 

    function CreateInstance(context: DNITypeDescriptorContext; instanceType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text;
  end;

  TDNInstanceCreationEditor = class(TDNGenericImport<DNInstanceCreationEditorClass, DNInstanceCreationEditor>) end;

  //-------------namespace: System.ComponentModel----------------
  DNLicenseClass = interface(DNObjectClass)
  ['{808A5708-8A36-5460-B58D-CA1DB0FD4D5B}']
  end;

  [DNTypeName('System.ComponentModel.License')]
  DNLicense = interface(DDN.mscorlib.DNIDisposable)
  ['{145FC786-86A8-3D19-A253-C8248C805222}']
  { getters & setters } 

    function get_LicenseKey: string;

  { methods } 

    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LicenseKey: string read get_LicenseKey;
  end;

  TDNLicense = class(TDNGenericImport<DNLicenseClass, DNLicense>) end;

  //-------------namespace: System.ComponentModel----------------
  DNLicenseContextClass = interface(DNObjectClass)
  ['{28ED242E-60B7-5AF7-A63A-BE908CE5D8A9}']
  { constructors } 

    {class} function init: DNLicenseContext;

  end;

  [DNTypeName('System.ComponentModel.LicenseContext')]
  DNLicenseContext = interface(DDN.mscorlib.DNIServiceProvider)
  ['{E77DBE19-0DE0-3D04-A941-8490820A9A7C}']
  { getters & setters } 

    function get_UsageMode: DNLicenseUsageMode;

  { methods } 

    function GetSavedLicenseKey(&type: DDN.mscorlib.DNType; resourceAssembly: DDN.mscorlib.DNAssembly): string;
    function GetService(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    procedure SetSavedLicenseKey(&type: DDN.mscorlib.DNType; key: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UsageMode: DNLicenseUsageMode read get_UsageMode;
  end;

  TDNLicenseContext = class(TDNGenericImport<DNLicenseContextClass, DNLicenseContext>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNDesigntimeLicenseContextClass = interface(DNLicenseContextClass)
  ['{F86F0EEE-4930-57AE-984E-181893DE2A33}']
  { constructors } 

    {class} function init: DNDesigntimeLicenseContext;

  end;

  [DNTypeName('System.ComponentModel.Design.DesigntimeLicenseContext')]
  DNDesigntimeLicenseContext = interface(DNLicenseContext)
  ['{A75EC851-BB40-3343-A1FA-55AC887F458E}']
  { getters & setters } 

    function get_UsageMode: DNLicenseUsageMode;

  { methods } 

    function GetSavedLicenseKey(&type: DDN.mscorlib.DNType; resourceAssembly: DDN.mscorlib.DNAssembly): string;
    procedure SetSavedLicenseKey(&type: DDN.mscorlib.DNType; key: string);
    function GetService(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UsageMode: DNLicenseUsageMode read get_UsageMode;
  end;

  TDNDesigntimeLicenseContext = class(TDNGenericImport<DNDesigntimeLicenseContextClass, DNDesigntimeLicenseContext>) end;

  //-------------namespace: System.ComponentModel----------------
  DNLicenseManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{28571E54-8CDD-591F-87CF-2C425B438324}']
  { static getter & setter } 

    {class} function get_CurrentContext: DNLicenseContext;
    {class} procedure set_CurrentContext(value: DNLicenseContext);
    {class} function get_UsageMode: DNLicenseUsageMode;

  { static methods } 

    {class} procedure LockContext(contextUser: DDN.mscorlib.DNObject);
    {class} function CreateWithContext(&type: DDN.mscorlib.DNType; creationContext: DNLicenseContext; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    {class} function IsLicensed(&type: DDN.mscorlib.DNType): Boolean;
    {class} function IsValid(&type: DDN.mscorlib.DNType): Boolean; overload;
    {class} function IsValid(&type: DDN.mscorlib.DNType; instance: DDN.mscorlib.DNObject; out license: DNLicense): Boolean; overload;
    {class} procedure UnlockContext(contextUser: DDN.mscorlib.DNObject);
    {class} procedure Validate(&type: DDN.mscorlib.DNType); overload;
    {class} function Validate(&type: DDN.mscorlib.DNType; instance: DDN.mscorlib.DNObject): DNLicense; overload;
    {class} function CreateWithContext(&type: DDN.mscorlib.DNType; creationContext: DNLicenseContext): DDN.mscorlib.DNObject; overload;

  { static propertys } 

    {class} property CurrentContext: DNLicenseContext read get_CurrentContext write set_CurrentContext;
    {class} property UsageMode: DNLicenseUsageMode read get_UsageMode;
  end;

  [DNTypeName('System.ComponentModel.LicenseManager')]
  DNLicenseManager = interface(DDN.mscorlib.DNObject)
  ['{ECAD46E4-8D03-398F-B4D4-B4B4F15949D3}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNLicenseManager = class(TDNGenericImport<DNLicenseManagerClass, DNLicenseManager>) end;

  //-------------namespace: System.ComponentModel----------------
  DNLicenseProviderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B8148B43-AE04-548C-9DF6-BC8178885533}']
  end;

  [DNTypeName('System.ComponentModel.LicenseProvider')]
  DNLicenseProvider = interface(DDN.mscorlib.DNObject)
  ['{75F16759-E26F-394A-B5DD-FFFB21FFB3C5}']
  { methods } 

    function GetLicense(context: DNLicenseContext; &type: DDN.mscorlib.DNType; instance: DDN.mscorlib.DNObject; allowExceptions: Boolean): DNLicense;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNLicenseProvider = class(TDNGenericImport<DNLicenseProviderClass, DNLicenseProvider>) end;

  //-------------namespace: System.ComponentModel----------------
  DNLicFileLicenseProviderClass = interface(DNLicenseProviderClass)
  ['{F8282C67-3F53-5E6D-A25F-7C9D6AD55E7E}']
  { constructors } 

    {class} function init: DNLicFileLicenseProvider;

  end;

  [DNTypeName('System.ComponentModel.LicFileLicenseProvider')]
  DNLicFileLicenseProvider = interface(DNLicenseProvider)
  ['{DBBC4A49-1921-3A72-A365-2E24EEB24D88}']
  { methods } 

    function GetLicense(context: DNLicenseContext; &type: DDN.mscorlib.DNType; instance: DDN.mscorlib.DNObject; allowExceptions: Boolean): DNLicense;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNLicFileLicenseProvider = class(TDNGenericImport<DNLicFileLicenseProviderClass, DNLicFileLicenseProvider>) end;

  //-------------namespace: System.ComponentModel----------------
  DNListSortDescriptionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{77660451-75C2-59C7-BA55-698F64DD78C7}']
  { constructors } 

    {class} function init(&property: DNPropertyDescriptor; direction: DNListSortDirection): DNListSortDescription;

  end;

  [DNTypeName('System.ComponentModel.ListSortDescription')]
  DNListSortDescription = interface(DDN.mscorlib.DNObject)
  ['{410D185F-8C3D-3D0D-A15A-E7162E7F9461}']
  { getters & setters } 

    function get_PropertyDescriptor: DNPropertyDescriptor;
    procedure set_PropertyDescriptor(value: DNPropertyDescriptor);
    function get_SortDirection: DNListSortDirection;
    procedure set_SortDirection(value: DNListSortDirection);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PropertyDescriptor: DNPropertyDescriptor read get_PropertyDescriptor write set_PropertyDescriptor;
    property SortDirection: DNListSortDirection read get_SortDirection write set_SortDirection;
  end;

  TDNListSortDescription = class(TDNGenericImport<DNListSortDescriptionClass, DNListSortDescription>) end;

  //-------------namespace: System.ComponentModel----------------
  DNListSortDescriptionCollectionClass = interface(DNObjectClass)
  ['{0030CF45-903F-5B9B-957F-7015CC793160}']
  { constructors } 

    {class} function init: DNListSortDescriptionCollection; overload;
    {class} function init(sorts: TArray<DNListSortDescription>): DNListSortDescriptionCollection; overload;

  end;

  [DNTypeName('System.ComponentModel.ListSortDescriptionCollection')]
  DNListSortDescriptionCollection = interface(DDN.mscorlib.DNIList)
  ['{8AFB95D3-33DB-3FCA-BB4B-E7C16857E913}']
  { getters & setters } 

    function get_Item(index: Int32): DNListSortDescription;
    procedure set_Item(index: Int32; value: DNListSortDescription);
    function get_Count: Int32;

  { methods } 

    function &Contains(value: DDN.mscorlib.DNObject): Boolean;
    function IndexOf(value: DDN.mscorlib.DNObject): Int32;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNListSortDescription read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNListSortDescriptionCollection = class(TDNGenericImport<DNListSortDescriptionCollectionClass, DNListSortDescriptionCollection>) end;

  //-------------namespace: System.ComponentModel----------------
  DNMarshalByValueComponentClass = interface(DNObjectClass)
  ['{BE76A8E8-7CEC-505B-B5EA-4A343BEEEE33}']
  { constructors } 

    {class} function init: DNMarshalByValueComponent;

  end;

  [DNTypeName('System.ComponentModel.MarshalByValueComponent')]
  DNMarshalByValueComponent = interface(DNIComponent)
  ['{F3FA95A9-C5F9-3EF9-80C6-91275015C770}']
  { getters & setters } 

    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Container: DNIContainer;
    function get_DesignMode: Boolean;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Dispose;
    function GetService(service: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Site: DNISite read get_Site write set_Site;
    property Container: DNIContainer read get_Container;
    property DesignMode: Boolean read get_DesignMode;
  end;

  TDNMarshalByValueComponent = class(TDNGenericImport<DNMarshalByValueComponentClass, DNMarshalByValueComponent>) end;

  //-------------namespace: System.ComponentModel----------------
  DNMaskedTextProviderClass = interface(DNObjectClass)
  ['{A091335B-7C40-50C7-ABCB-5ECF01303868}']
  { static getter & setter } 

    {class} function get_DefaultPasswordChar: Char;
    {class} function get_InvalidIndex: Int32;

  { constructors } 

    {class} function init(mask: string): DNMaskedTextProvider; overload;
    {class} function init(mask: string; restrictToAscii: Boolean): DNMaskedTextProvider; overload;
    {class} function init(mask: string; culture: DDN.mscorlib.DNCultureInfo): DNMaskedTextProvider; overload;
    {class} function init(mask: string; culture: DDN.mscorlib.DNCultureInfo; restrictToAscii: Boolean): DNMaskedTextProvider; overload;
    {class} function init(mask: string; passwordChar: Char; allowPromptAsInput: Boolean): DNMaskedTextProvider; overload;
    {class} function init(mask: string; culture: DDN.mscorlib.DNCultureInfo; passwordChar: Char; allowPromptAsInput: Boolean): DNMaskedTextProvider; overload;
    {class} function init(mask: string; culture: DDN.mscorlib.DNCultureInfo; allowPromptAsInput: Boolean; promptChar: Char; passwordChar: Char; restrictToAscii: Boolean): DNMaskedTextProvider; overload;

  { static methods } 

    {class} function GetOperationResultFromHint(hint: DNMaskedTextResultHint): Boolean;
    {class} function IsValidInputChar(c: Char): Boolean;
    {class} function IsValidMaskChar(c: Char): Boolean;
    {class} function IsValidPasswordChar(c: Char): Boolean;

  { static propertys } 

    {class} property DefaultPasswordChar: Char read get_DefaultPasswordChar;
    {class} property InvalidIndex: Int32 read get_InvalidIndex;
  end;

  [DNTypeName('System.ComponentModel.MaskedTextProvider')]
  DNMaskedTextProvider = interface(DDN.mscorlib.DNICloneable)
  ['{F5811A20-6531-3FFD-B2FB-4024DAA71FE6}']
  { getters & setters } 

    function get_AllowPromptAsInput: Boolean;
    function get_AssignedEditPositionCount: Int32;
    function get_AvailableEditPositionCount: Int32;
    function get_Culture: DDN.mscorlib.DNCultureInfo;
    function get_EditPositionCount: Int32;
    function get_EditPositions: DDN.mscorlib.DNIEnumerator;
    function get_IncludeLiterals: Boolean;
    procedure set_IncludeLiterals(value: Boolean);
    function get_IncludePrompt: Boolean;
    procedure set_IncludePrompt(value: Boolean);
    function get_AsciiOnly: Boolean;
    function get_IsPassword: Boolean;
    procedure set_IsPassword(value: Boolean);
    function get_LastAssignedPosition: Int32;
    function get_Length: Int32;
    function get_Mask: string;
    function get_MaskCompleted: Boolean;
    function get_MaskFull: Boolean;
    function get_PasswordChar: Char;
    procedure set_PasswordChar(value: Char);
    function get_PromptChar: Char;
    procedure set_PromptChar(value: Char);
    function get_ResetOnPrompt: Boolean;
    procedure set_ResetOnPrompt(value: Boolean);
    function get_ResetOnSpace: Boolean;
    procedure set_ResetOnSpace(value: Boolean);
    function get_SkipLiterals: Boolean;
    procedure set_SkipLiterals(value: Boolean);
    function get_Item(index: Int32): Char;

  { methods } 

    function Add(input: Char): Boolean; overload;
    function Add(input: Char; out testPosition: Int32; out resultHint: DNMaskedTextResultHint): Boolean; overload;
    function Add(input: string): Boolean; overload;
    function Add(input: string; out testPosition: Int32; out resultHint: DNMaskedTextResultHint): Boolean; overload;
    procedure Clear; overload;
    procedure Clear(out resultHint: DNMaskedTextResultHint); overload;
    function FindAssignedEditPositionFrom(position: Int32; direction: Boolean): Int32;
    function FindAssignedEditPositionInRange(startPosition: Int32; endPosition: Int32; direction: Boolean): Int32;
    function FindEditPositionFrom(position: Int32; direction: Boolean): Int32;
    function FindEditPositionInRange(startPosition: Int32; endPosition: Int32; direction: Boolean): Int32;
    function FindNonEditPositionFrom(position: Int32; direction: Boolean): Int32;
    function FindNonEditPositionInRange(startPosition: Int32; endPosition: Int32; direction: Boolean): Int32;
    function FindUnassignedEditPositionFrom(position: Int32; direction: Boolean): Int32;
    function FindUnassignedEditPositionInRange(startPosition: Int32; endPosition: Int32; direction: Boolean): Int32;
    function InsertAt(input: Char; position: Int32): Boolean; overload;
    function InsertAt(input: Char; position: Int32; out testPosition: Int32; out resultHint: DNMaskedTextResultHint): Boolean; overload;
    function InsertAt(input: string; position: Int32): Boolean; overload;
    function InsertAt(input: string; position: Int32; out testPosition: Int32; out resultHint: DNMaskedTextResultHint): Boolean; overload;
    function IsAvailablePosition(position: Int32): Boolean;
    function IsEditPosition(position: Int32): Boolean;
    function Remove: Boolean; overload;
    function Remove(out testPosition: Int32; out resultHint: DNMaskedTextResultHint): Boolean; overload;
    function RemoveAt(position: Int32): Boolean; overload;
    function RemoveAt(startPosition: Int32; endPosition: Int32): Boolean; overload;
    function RemoveAt(startPosition: Int32; endPosition: Int32; out testPosition: Int32; out resultHint: DNMaskedTextResultHint): Boolean; overload;
    function Replace(input: Char; position: Int32): Boolean; overload;
    function Replace(input: Char; position: Int32; out testPosition: Int32; out resultHint: DNMaskedTextResultHint): Boolean; overload;
    function Replace(input: Char; startPosition: Int32; endPosition: Int32; out testPosition: Int32; out resultHint: DNMaskedTextResultHint): Boolean; overload;
    function Replace(input: string; position: Int32): Boolean; overload;
    function Replace(input: string; position: Int32; out testPosition: Int32; out resultHint: DNMaskedTextResultHint): Boolean; overload;
    function Replace(input: string; startPosition: Int32; endPosition: Int32; out testPosition: Int32; out resultHint: DNMaskedTextResultHint): Boolean; overload;
    function &Set(input: string): Boolean; overload;
    function &Set(input: string; out testPosition: Int32; out resultHint: DNMaskedTextResultHint): Boolean; overload;
    function ToDisplayString: string;
    function ToString: string; overload;
    function ToString(ignorePasswordChar: Boolean): string; overload;
    function ToString(startPosition: Int32; length: Int32): string; overload;
    function ToString(ignorePasswordChar: Boolean; startPosition: Int32; length: Int32): string; overload;
    function ToString(includePrompt: Boolean; includeLiterals: Boolean): string; overload;
    function ToString(includePrompt: Boolean; includeLiterals: Boolean; startPosition: Int32; length: Int32): string; overload;
    function ToString(ignorePasswordChar: Boolean; includePrompt: Boolean; includeLiterals: Boolean; startPosition: Int32; length: Int32): string; overload;
    function VerifyChar(input: Char; position: Int32; out hint: DNMaskedTextResultHint): Boolean;
    function VerifyEscapeChar(input: Char; position: Int32): Boolean;
    function VerifyString(input: string): Boolean; overload;
    function VerifyString(input: string; out testPosition: Int32; out resultHint: DNMaskedTextResultHint): Boolean; overload;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AllowPromptAsInput: Boolean read get_AllowPromptAsInput;
    property AssignedEditPositionCount: Int32 read get_AssignedEditPositionCount;
    property AvailableEditPositionCount: Int32 read get_AvailableEditPositionCount;
    property Culture: DDN.mscorlib.DNCultureInfo read get_Culture;
    property EditPositionCount: Int32 read get_EditPositionCount;
    property EditPositions: DDN.mscorlib.DNIEnumerator read get_EditPositions;
    property IncludeLiterals: Boolean read get_IncludeLiterals write set_IncludeLiterals;
    property IncludePrompt: Boolean read get_IncludePrompt write set_IncludePrompt;
    property AsciiOnly: Boolean read get_AsciiOnly;
    property IsPassword: Boolean read get_IsPassword write set_IsPassword;
    property LastAssignedPosition: Int32 read get_LastAssignedPosition;
    property Length: Int32 read get_Length;
    property Mask: string read get_Mask;
    property MaskCompleted: Boolean read get_MaskCompleted;
    property MaskFull: Boolean read get_MaskFull;
    property PasswordChar: Char read get_PasswordChar write set_PasswordChar;
    property PromptChar: Char read get_PromptChar write set_PromptChar;
    property ResetOnPrompt: Boolean read get_ResetOnPrompt write set_ResetOnPrompt;
    property ResetOnSpace: Boolean read get_ResetOnSpace write set_ResetOnSpace;
    property SkipLiterals: Boolean read get_SkipLiterals write set_SkipLiterals;
    property Item[index: Int32]: Char read get_Item; default;
  end;

  TDNMaskedTextProvider = class(TDNGenericImport<DNMaskedTextProviderClass, DNMaskedTextProvider>) end;

  //-------------namespace: System.ComponentModel----------------
  DNMemberDescriptorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1CC9AF7B-5444-59A4-87AA-7D7FA1C0B664}']
  end;

  [DNTypeName('System.ComponentModel.MemberDescriptor')]
  DNMemberDescriptor = interface(DDN.mscorlib.DNObject)
  ['{670B0D04-DAD1-39A7-9043-B0B58CCB46E6}']
  { getters & setters } 

    function get_Attributes: DNAttributeCollection;
    function get_Category: string;
    function get_Description: string;
    function get_IsBrowsable: Boolean;
    function get_Name: string;
    function get_DesignTimeOnly: Boolean;
    function get_DisplayName: string;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Attributes: DNAttributeCollection read get_Attributes;
    property Category: string read get_Category;
    property Description: string read get_Description;
    property IsBrowsable: Boolean read get_IsBrowsable;
    property Name: string read get_Name;
    property DesignTimeOnly: Boolean read get_DesignTimeOnly;
    property DisplayName: string read get_DisplayName;
  end;

  TDNMemberDescriptor = class(TDNGenericImport<DNMemberDescriptorClass, DNMemberDescriptor>) end;

  //-------------namespace: System.ComponentModel----------------
  DNEventDescriptorClass = interface(DNMemberDescriptorClass)
  ['{83F0079B-A66F-5AC6-84C6-8F36F939815A}']
  end;

  [DNTypeName('System.ComponentModel.EventDescriptor')]
  DNEventDescriptor = interface(DNMemberDescriptor)
  ['{52964536-AFDA-35C2-8C8B-903C2519AD4E}']
  { getters & setters } 

    function get_ComponentType: DDN.mscorlib.DNType;
    function get_EventType: DDN.mscorlib.DNType;
    function get_IsMulticast: Boolean;
    function get_Attributes: DNAttributeCollection;
    function get_Category: string;
    function get_Description: string;
    function get_IsBrowsable: Boolean;
    function get_Name: string;
    function get_DesignTimeOnly: Boolean;
    function get_DisplayName: string;

  { methods } 

    procedure AddEventHandler(component: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNDelegate);
    procedure RemoveEventHandler(component: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNDelegate);
    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ComponentType: DDN.mscorlib.DNType read get_ComponentType;
    property EventType: DDN.mscorlib.DNType read get_EventType;
    property IsMulticast: Boolean read get_IsMulticast;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Category: string read get_Category;
    property Description: string read get_Description;
    property IsBrowsable: Boolean read get_IsBrowsable;
    property Name: string read get_Name;
    property DesignTimeOnly: Boolean read get_DesignTimeOnly;
    property DisplayName: string read get_DisplayName;
  end;

  TDNEventDescriptor = class(TDNGenericImport<DNEventDescriptorClass, DNEventDescriptor>) end;

  //-------------namespace: System.ComponentModel----------------
  DNPropertyDescriptorClass = interface(DNMemberDescriptorClass)
  ['{C9622A0A-D78E-5479-95DC-0988298ECD69}']
  end;

  [DNTypeName('System.ComponentModel.PropertyDescriptor')]
  DNPropertyDescriptor = interface(DNMemberDescriptor)
  ['{D40E4E6F-4692-3438-B4CC-7E423473B2C1}']
  { getters & setters } 

    function get_ComponentType: DDN.mscorlib.DNType;
    function get_Converter: DNTypeConverter;
    function get_IsLocalizable: Boolean;
    function get_IsReadOnly: Boolean;
    function get_SerializationVisibility: DNDesignerSerializationVisibility;
    function get_PropertyType: DDN.mscorlib.DNType;
    function get_SupportsChangeEvents: Boolean;
    function get_Attributes: DNAttributeCollection;
    function get_Category: string;
    function get_Description: string;
    function get_IsBrowsable: Boolean;
    function get_Name: string;
    function get_DesignTimeOnly: Boolean;
    function get_DisplayName: string;

  { methods } 

    procedure AddValueChanged(component: DDN.mscorlib.DNObject; handler: DDN.mscorlib.DNEventHandler);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetChildProperties: DNPropertyDescriptorCollection; overload;
    function GetChildProperties(filter: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetChildProperties(instance: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetChildProperties(instance: DDN.mscorlib.DNObject; filter: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetHashCode: Int32;
    procedure RemoveValueChanged(component: DDN.mscorlib.DNObject; handler: DDN.mscorlib.DNEventHandler);
    function CanResetValue(component: DDN.mscorlib.DNObject): Boolean;
    function GetEditor(editorBaseType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function GetValue(component: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    procedure ResetValue(component: DDN.mscorlib.DNObject);
    procedure SetValue(component: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);
    function ShouldSerializeValue(component: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ComponentType: DDN.mscorlib.DNType read get_ComponentType;
    property Converter: DNTypeConverter read get_Converter;
    property IsLocalizable: Boolean read get_IsLocalizable;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property SerializationVisibility: DNDesignerSerializationVisibility read get_SerializationVisibility;
    property PropertyType: DDN.mscorlib.DNType read get_PropertyType;
    property SupportsChangeEvents: Boolean read get_SupportsChangeEvents;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Category: string read get_Category;
    property Description: string read get_Description;
    property IsBrowsable: Boolean read get_IsBrowsable;
    property Name: string read get_Name;
    property DesignTimeOnly: Boolean read get_DesignTimeOnly;
    property DisplayName: string read get_DisplayName;
  end;

  TDNPropertyDescriptor = class(TDNGenericImport<DNPropertyDescriptorClass, DNPropertyDescriptor>) end;

  //-------------namespace: System.ComponentModel----------------
  DNPropertyDescriptorCollectionClass = interface(DNObjectClass)
  ['{400ECE6F-D862-52A4-AA27-E8F48F498369}']
  { constructors } 

    {class} function init(properties: TArray<DNPropertyDescriptor>): DNPropertyDescriptorCollection; overload;
    {class} function init(properties: TArray<DNPropertyDescriptor>; readOnly: Boolean): DNPropertyDescriptorCollection; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNPropertyDescriptorCollection;

  { static fields } 

    {class} property Empty: DNPropertyDescriptorCollection read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.ComponentModel.PropertyDescriptorCollection')]
  DNPropertyDescriptorCollection = interface(DDN.mscorlib.DNICollection)
  ['{36F242F1-65CA-36EB-9970-D7D97E88DA25}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNPropertyDescriptor; overload;
    function get_Item(name: string): DNPropertyDescriptor; overload;

  { methods } 

    function Add(value: DNPropertyDescriptor): Int32;
    procedure Clear;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Find(name: string; ignoreCase: Boolean): DNPropertyDescriptor;
    procedure Insert(index: Int32; value: DNPropertyDescriptor);
    procedure RemoveAt(index: Int32);
    function Sort: DNPropertyDescriptorCollection; overload;
    function Sort(names: TArray<string>): DNPropertyDescriptorCollection; overload;
    function Sort(names: TArray<string>; comparer: DDN.mscorlib.DNIComparer): DNPropertyDescriptorCollection; overload;
    function Sort(comparer: DDN.mscorlib.DNIComparer): DNPropertyDescriptorCollection; overload;
    function &Contains(value: DNPropertyDescriptor): Boolean;
    function IndexOf(value: DNPropertyDescriptor): Int32;
    procedure Remove(value: DNPropertyDescriptor);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNPropertyDescriptor read get_Item; default;
    property Item[name: string]: DNPropertyDescriptor read get_Item; default;
  end;

  TDNPropertyDescriptorCollection = class(TDNGenericImport<DNPropertyDescriptorCollectionClass, DNPropertyDescriptorCollection>) end;

  //-------------namespace: System.ComponentModel----------------
  DNSyntaxCheckClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4067DDFC-CF7F-518A-86A0-7EB053B0BBC9}']
  { static methods } 

    {class} function CheckMachineName(value: string): Boolean;
    {class} function CheckRootedPath(value: string): Boolean;
    {class} function CheckPath(value: string): Boolean;

  end;

  [DNTypeName('System.ComponentModel.SyntaxCheck')]
  DNSyntaxCheck = interface(DDN.mscorlib.DNObject)
  ['{630D975F-D1C3-3120-A265-B1B2E077AAE9}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSyntaxCheck = class(TDNGenericImport<DNSyntaxCheckClass, DNSyntaxCheck>) end;

  //-------------namespace: System.ComponentModel----------------
  DNTypeConverterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8D2BD4DC-2859-5F29-A55C-88C9804C1E73}']
  { constructors } 

    {class} function init: DNTypeConverter;

  end;

  [DNTypeName('System.ComponentModel.TypeConverter')]
  DNTypeConverter = interface(DDN.mscorlib.DNObject)
  ['{75992C48-BF7A-3B44-AC68-A946CFFDB2BF}']
  { methods } 

    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeConverter = class(TDNGenericImport<DNTypeConverterClass, DNTypeConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNTypeConverter_StandardValuesCollectionClass = interface(DNObjectClass)
  ['{6E92DC87-B137-5B6A-A9E1-3D63BC181DEF}']
  { constructors } 

    {class} function init(values: DDN.mscorlib.DNICollection): DNTypeConverter_StandardValuesCollection;

  end;

  [DNTypeName('System.ComponentModel.TypeConverter+StandardValuesCollection')]
  DNTypeConverter_StandardValuesCollection = interface(DDN.mscorlib.DNICollection)
  ['{1B3A67B8-8364-3317-BA09-4C7600D293ED}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DDN.mscorlib.DNObject;

  { methods } 

    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item; default;
  end;

  TDNTypeConverter_StandardValuesCollection = class(TDNGenericImport<DNTypeConverter_StandardValuesCollectionClass, DNTypeConverter_StandardValuesCollection>) end;

  //-------------namespace: System.ComponentModel----------------
  DNBaseNumberConverterClass = interface(DNTypeConverterClass)
  ['{3B6D87C1-F5FE-58DD-A38C-798545691FB6}']
  end;

  [DNTypeName('System.ComponentModel.BaseNumberConverter')]
  DNBaseNumberConverter = interface(DNTypeConverter)
  ['{C39E7F48-6FFC-35D2-AD95-03F5E34B45FB}']
  { methods } 

    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; t: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBaseNumberConverter = class(TDNGenericImport<DNBaseNumberConverterClass, DNBaseNumberConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNByteConverterClass = interface(DNBaseNumberConverterClass)
  ['{5CBF380B-5EA7-560C-801B-D59B189BDB39}']
  { constructors } 

    {class} function init: DNByteConverter;

  end;

  [DNTypeName('System.ComponentModel.ByteConverter')]
  DNByteConverter = interface(DNBaseNumberConverter)
  ['{03284252-831A-3355-90CA-C9C19E7C8E26}']
  { methods } 

    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; t: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNByteConverter = class(TDNGenericImport<DNByteConverterClass, DNByteConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDecimalConverterClass = interface(DNBaseNumberConverterClass)
  ['{FF386A94-89B9-50C7-8553-7D41A49D1D7F}']
  { constructors } 

    {class} function init: DNDecimalConverter;

  end;

  [DNTypeName('System.ComponentModel.DecimalConverter')]
  DNDecimalConverter = interface(DNBaseNumberConverter)
  ['{B90363D0-CB0F-33BA-97B1-84AA528EA617}']
  { methods } 

    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDecimalConverter = class(TDNGenericImport<DNDecimalConverterClass, DNDecimalConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDoubleConverterClass = interface(DNBaseNumberConverterClass)
  ['{EA12A28A-190F-5E7F-B9BB-C7B2EA9B01EF}']
  { constructors } 

    {class} function init: DNDoubleConverter;

  end;

  [DNTypeName('System.ComponentModel.DoubleConverter')]
  DNDoubleConverter = interface(DNBaseNumberConverter)
  ['{9C2D87A5-3FB5-3932-9918-74D335A73D4C}']
  { methods } 

    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; t: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDoubleConverter = class(TDNGenericImport<DNDoubleConverterClass, DNDoubleConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNInt16ConverterClass = interface(DNBaseNumberConverterClass)
  ['{32248AEB-8866-51A0-93E2-4D1525D7C8BC}']
  { constructors } 

    {class} function init: DNInt16Converter;

  end;

  [DNTypeName('System.ComponentModel.Int16Converter')]
  DNInt16Converter = interface(DNBaseNumberConverter)
  ['{9ED7E2BC-381B-3FBC-BB81-FC86E63BB352}']
  { methods } 

    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; t: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNInt16Converter = class(TDNGenericImport<DNInt16ConverterClass, DNInt16Converter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNInt32ConverterClass = interface(DNBaseNumberConverterClass)
  ['{C6CD9AC2-C023-51CF-A4AE-CD6387682389}']
  { constructors } 

    {class} function init: DNInt32Converter;

  end;

  [DNTypeName('System.ComponentModel.Int32Converter')]
  DNInt32Converter = interface(DNBaseNumberConverter)
  ['{C1336F54-F4A4-3620-99D5-61EEF7CB811F}']
  { methods } 

    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; t: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNInt32Converter = class(TDNGenericImport<DNInt32ConverterClass, DNInt32Converter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNInt64ConverterClass = interface(DNBaseNumberConverterClass)
  ['{FE9D4FEB-2A97-51AB-9F90-75C65AF277F2}']
  { constructors } 

    {class} function init: DNInt64Converter;

  end;

  [DNTypeName('System.ComponentModel.Int64Converter')]
  DNInt64Converter = interface(DNBaseNumberConverter)
  ['{BBAF84CF-AB82-3839-A043-7318B78734DF}']
  { methods } 

    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; t: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNInt64Converter = class(TDNGenericImport<DNInt64ConverterClass, DNInt64Converter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNSByteConverterClass = interface(DNBaseNumberConverterClass)
  ['{54582FB8-E242-58D0-9A33-6CE21655D93F}']
  { constructors } 

    {class} function init: DNSByteConverter;

  end;

  [DNTypeName('System.ComponentModel.SByteConverter')]
  DNSByteConverter = interface(DNBaseNumberConverter)
  ['{20EA0632-37DE-3A64-9EEB-0C30ECA89579}']
  { methods } 

    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; t: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSByteConverter = class(TDNGenericImport<DNSByteConverterClass, DNSByteConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNSingleConverterClass = interface(DNBaseNumberConverterClass)
  ['{89F87574-D649-5EEA-A811-01B4522ED3A9}']
  { constructors } 

    {class} function init: DNSingleConverter;

  end;

  [DNTypeName('System.ComponentModel.SingleConverter')]
  DNSingleConverter = interface(DNBaseNumberConverter)
  ['{49C21C00-5D3F-3C77-B6CF-E74FEF2A5A6E}']
  { methods } 

    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; t: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSingleConverter = class(TDNGenericImport<DNSingleConverterClass, DNSingleConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNUInt16ConverterClass = interface(DNBaseNumberConverterClass)
  ['{BA08390E-A016-5C38-A291-BD1D9107EAED}']
  { constructors } 

    {class} function init: DNUInt16Converter;

  end;

  [DNTypeName('System.ComponentModel.UInt16Converter')]
  DNUInt16Converter = interface(DNBaseNumberConverter)
  ['{1ED1E185-0791-3649-9D4E-C35DA28E6AC9}']
  { methods } 

    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; t: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNUInt16Converter = class(TDNGenericImport<DNUInt16ConverterClass, DNUInt16Converter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNUInt32ConverterClass = interface(DNBaseNumberConverterClass)
  ['{B0C24CDA-A05D-5254-9C10-EDAD9BD4DF7E}']
  { constructors } 

    {class} function init: DNUInt32Converter;

  end;

  [DNTypeName('System.ComponentModel.UInt32Converter')]
  DNUInt32Converter = interface(DNBaseNumberConverter)
  ['{6CC201E1-2438-327F-949A-22B65724C069}']
  { methods } 

    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; t: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNUInt32Converter = class(TDNGenericImport<DNUInt32ConverterClass, DNUInt32Converter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNUInt64ConverterClass = interface(DNBaseNumberConverterClass)
  ['{0BBC6DD3-FD25-57A2-8C5B-31D1819E0FCE}']
  { constructors } 

    {class} function init: DNUInt64Converter;

  end;

  [DNTypeName('System.ComponentModel.UInt64Converter')]
  DNUInt64Converter = interface(DNBaseNumberConverter)
  ['{A3E86658-6620-3C46-B2B2-D0FD600F1035}']
  { methods } 

    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; t: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNUInt64Converter = class(TDNGenericImport<DNUInt64ConverterClass, DNUInt64Converter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNBooleanConverterClass = interface(DNTypeConverterClass)
  ['{3CD8E036-5886-5A2B-A2A9-C4F3552384AA}']
  { constructors } 

    {class} function init: DNBooleanConverter;

  end;

  [DNTypeName('System.ComponentModel.BooleanConverter')]
  DNBooleanConverter = interface(DNTypeConverter)
  ['{809AEAE7-D3DC-3A2B-B83F-59A5D5E84BE2}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBooleanConverter = class(TDNGenericImport<DNBooleanConverterClass, DNBooleanConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNCharConverterClass = interface(DNTypeConverterClass)
  ['{509D85F7-CFB2-5F23-A4C6-FF9B979543B8}']
  { constructors } 

    {class} function init: DNCharConverter;

  end;

  [DNTypeName('System.ComponentModel.CharConverter')]
  DNCharConverter = interface(DNTypeConverter)
  ['{B0D11F66-696A-3298-926A-0C9CF778EF0D}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCharConverter = class(TDNGenericImport<DNCharConverterClass, DNCharConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNCollectionConverterClass = interface(DNTypeConverterClass)
  ['{6C8FEE35-95C5-5A89-9CA8-42785991F892}']
  { constructors } 

    {class} function init: DNCollectionConverter;

  end;

  [DNTypeName('System.ComponentModel.CollectionConverter')]
  DNCollectionConverter = interface(DNTypeConverter)
  ['{D35977EB-72DB-32AB-AE1D-935102C84E85}']
  { methods } 

    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCollectionConverter = class(TDNGenericImport<DNCollectionConverterClass, DNCollectionConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNArrayConverterClass = interface(DNCollectionConverterClass)
  ['{4DB959D1-F545-566D-8335-AC84465F9840}']
  { constructors } 

    {class} function init: DNArrayConverter;

  end;

  [DNTypeName('System.ComponentModel.ArrayConverter')]
  DNArrayConverter = interface(DNCollectionConverter)
  ['{7A2AF78D-0FC7-3D76-98B0-B560388A7B2C}']
  { methods } 

    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNArrayConverter = class(TDNGenericImport<DNArrayConverterClass, DNArrayConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNCultureInfoConverterClass = interface(DNTypeConverterClass)
  ['{AED96FC5-A6DB-551D-8B1F-CA42B82ABB3D}']
  { constructors } 

    {class} function init: DNCultureInfoConverter;

  end;

  [DNTypeName('System.ComponentModel.CultureInfoConverter')]
  DNCultureInfoConverter = interface(DNTypeConverter)
  ['{D164E3B5-377F-39AB-BFC1-6C2CB809CA4C}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCultureInfoConverter = class(TDNGenericImport<DNCultureInfoConverterClass, DNCultureInfoConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDateTimeConverterClass = interface(DNTypeConverterClass)
  ['{4E9B5903-F179-5100-AF73-1D8E523A7AC2}']
  { constructors } 

    {class} function init: DNDateTimeConverter;

  end;

  [DNTypeName('System.ComponentModel.DateTimeConverter')]
  DNDateTimeConverter = interface(DNTypeConverter)
  ['{082D4DD0-BF3C-33E3-91B3-594853E7A72D}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDateTimeConverter = class(TDNGenericImport<DNDateTimeConverterClass, DNDateTimeConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDateTimeOffsetConverterClass = interface(DNTypeConverterClass)
  ['{F4C416DA-3010-581C-9BD5-FB38ABEE2455}']
  { constructors } 

    {class} function init: DNDateTimeOffsetConverter;

  end;

  [DNTypeName('System.ComponentModel.DateTimeOffsetConverter')]
  DNDateTimeOffsetConverter = interface(DNTypeConverter)
  ['{E138E21F-EA70-345A-921D-81C0FAC715A0}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDateTimeOffsetConverter = class(TDNGenericImport<DNDateTimeOffsetConverterClass, DNDateTimeOffsetConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNEnumConverterClass = interface(DNTypeConverterClass)
  ['{566DDCB3-E03D-5A1B-9BB3-ED1C4AFA0C4E}']
  { constructors } 

    {class} function init(&type: DDN.mscorlib.DNType): DNEnumConverter;

  end;

  [DNTypeName('System.ComponentModel.EnumConverter')]
  DNEnumConverter = interface(DNTypeConverter)
  ['{5B38C558-8F73-3D8C-A8A0-573A2927ED27}']
  { methods } 

    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEnumConverter = class(TDNGenericImport<DNEnumConverterClass, DNEnumConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNExpandableObjectConverterClass = interface(DNTypeConverterClass)
  ['{77E31976-5482-594A-B472-58E03F8310F5}']
  { constructors } 

    {class} function init: DNExpandableObjectConverter;

  end;

  [DNTypeName('System.ComponentModel.ExpandableObjectConverter')]
  DNExpandableObjectConverter = interface(DNTypeConverter)
  ['{D125D908-FA6D-3DB2-8D73-6ACF0BE79672}']
  { methods } 

    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNExpandableObjectConverter = class(TDNGenericImport<DNExpandableObjectConverterClass, DNExpandableObjectConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNGuidConverterClass = interface(DNTypeConverterClass)
  ['{1DC67ACB-6CC7-5ED6-8FA4-16752CEE5CE4}']
  { constructors } 

    {class} function init: DNGuidConverter;

  end;

  [DNTypeName('System.ComponentModel.GuidConverter')]
  DNGuidConverter = interface(DNTypeConverter)
  ['{11F5F664-0E5F-36B4-A15A-36B42E3F3E28}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGuidConverter = class(TDNGenericImport<DNGuidConverterClass, DNGuidConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNMultilineStringConverterClass = interface(DNTypeConverterClass)
  ['{7AD59596-FB7C-5E27-9735-50415FEA3790}']
  { constructors } 

    {class} function init: DNMultilineStringConverter;

  end;

  [DNTypeName('System.ComponentModel.MultilineStringConverter')]
  DNMultilineStringConverter = interface(DNTypeConverter)
  ['{4B1E4064-4199-3E9F-99FD-38F114630F13}']
  { methods } 

    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMultilineStringConverter = class(TDNGenericImport<DNMultilineStringConverterClass, DNMultilineStringConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNNullableConverterClass = interface(DNTypeConverterClass)
  ['{B89F18EC-DD6E-529F-9B92-FB38F2A6DEF3}']
  { constructors } 

    {class} function init(&type: DDN.mscorlib.DNType): DNNullableConverter;

  end;

  [DNTypeName('System.ComponentModel.NullableConverter')]
  DNNullableConverter = interface(DNTypeConverter)
  ['{2022A220-0565-37C2-BC5E-A07176CD4829}']
  { getters & setters } 

    function get_NullableType: DDN.mscorlib.DNType;
    function get_UnderlyingType: DDN.mscorlib.DNType;
    function get_UnderlyingTypeConverter: DNTypeConverter;

  { methods } 

    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NullableType: DDN.mscorlib.DNType read get_NullableType;
    property UnderlyingType: DDN.mscorlib.DNType read get_UnderlyingType;
    property UnderlyingTypeConverter: DNTypeConverter read get_UnderlyingTypeConverter;
  end;

  TDNNullableConverter = class(TDNGenericImport<DNNullableConverterClass, DNNullableConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNReferenceConverterClass = interface(DNTypeConverterClass)
  ['{29D6BF97-BE63-53FB-971C-A3453E5182A3}']
  { constructors } 

    {class} function init(&type: DDN.mscorlib.DNType): DNReferenceConverter;

  end;

  [DNTypeName('System.ComponentModel.ReferenceConverter')]
  DNReferenceConverter = interface(DNTypeConverter)
  ['{24D874F6-37F5-3F36-BE90-2ECA656E3AF8}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNReferenceConverter = class(TDNGenericImport<DNReferenceConverterClass, DNReferenceConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNComponentConverterClass = interface(DNReferenceConverterClass)
  ['{A104BE8A-3854-5B7E-AFBB-89520063EE56}']
  { constructors } 

    {class} function init(&type: DDN.mscorlib.DNType): DNComponentConverter;

  end;

  [DNTypeName('System.ComponentModel.ComponentConverter')]
  DNComponentConverter = interface(DNReferenceConverter)
  ['{0F8A15DC-89A0-3C75-8F75-86ACA9F24CED}']
  { methods } 

    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNComponentConverter = class(TDNGenericImport<DNComponentConverterClass, DNComponentConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNStringConverterClass = interface(DNTypeConverterClass)
  ['{7266C33F-5423-55C9-96CE-1630712D8112}']
  { constructors } 

    {class} function init: DNStringConverter;

  end;

  [DNTypeName('System.ComponentModel.StringConverter')]
  DNStringConverter = interface(DNTypeConverter)
  ['{DD127DFC-8DDA-35BE-9F32-F9FC6C9185F8}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNStringConverter = class(TDNGenericImport<DNStringConverterClass, DNStringConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNTimeSpanConverterClass = interface(DNTypeConverterClass)
  ['{63FA8D19-6AA0-5D5B-8504-1FB25434BFBA}']
  { constructors } 

    {class} function init: DNTimeSpanConverter;

  end;

  [DNTypeName('System.ComponentModel.TimeSpanConverter')]
  DNTimeSpanConverter = interface(DNTypeConverter)
  ['{1C4D4ADC-9A43-3693-A7B7-397C6281B53C}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTimeSpanConverter = class(TDNGenericImport<DNTimeSpanConverterClass, DNTimeSpanConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNTypeListConverterClass = interface(DNTypeConverterClass)
  ['{5E5358C1-D011-5259-A627-2CD3AFDEC79C}']
  end;

  [DNTypeName('System.ComponentModel.TypeListConverter')]
  DNTypeListConverter = interface(DNTypeConverter)
  ['{025025FB-D875-33C3-902F-4D08760FDD2B}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeListConverter = class(TDNGenericImport<DNTypeListConverterClass, DNTypeListConverter>) end;

  //-------------namespace: System.Security.Authentication.ExtendedProtection----------------
  DNExtendedProtectionPolicyTypeConverterClass = interface(DNTypeConverterClass)
  ['{59C2A1EB-AD52-5B8F-91EE-4311A13D499B}']
  { constructors } 

    {class} function init: DNExtendedProtectionPolicyTypeConverter;

  end;

  [DNTypeName('System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter')]
  DNExtendedProtectionPolicyTypeConverter = interface(DNTypeConverter)
  ['{EC47A544-6227-380A-AE26-C556BCB5AF4D}']
  { methods } 

    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNExtendedProtectionPolicyTypeConverter = class(TDNGenericImport<DNExtendedProtectionPolicyTypeConverterClass, DNExtendedProtectionPolicyTypeConverter>) end;

  //-------------namespace: System----------------
  DNUriTypeConverterClass = interface(DNTypeConverterClass)
  ['{D856A7A3-4D18-501F-A117-A8C5560FCE98}']
  { constructors } 

    {class} function init: DNUriTypeConverter;

  end;

  [DNTypeName('System.UriTypeConverter')]
  DNUriTypeConverter = interface(DNTypeConverter)
  ['{31807BCD-FB2A-35B6-8280-961497BEDBD6}']
  { methods } 

    function CanConvertFrom(context: DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function IsValid(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function ConvertTo(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DNITypeDescriptorContext): DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNUriTypeConverter = class(TDNGenericImport<DNUriTypeConverterClass, DNUriTypeConverter>) end;

  //-------------namespace: System.ComponentModel----------------
  DNTypeDescriptionProviderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{13F672E8-27D5-5E5E-A6FF-427C750DE301}']
  end;

  [DNTypeName('System.ComponentModel.TypeDescriptionProvider')]
  DNTypeDescriptionProvider = interface(DDN.mscorlib.DNObject)
  ['{226CD8C0-9D13-3ED5-8FDC-30DFDFDA1661}']
  { methods } 

    function GetExtendedTypeDescriptor(instance: DDN.mscorlib.DNObject): DNICustomTypeDescriptor;
    function GetTypeDescriptor(objectType: DDN.mscorlib.DNType; instance: DDN.mscorlib.DNObject): DNICustomTypeDescriptor; overload;
    function CreateInstance(provider: DDN.mscorlib.DNIServiceProvider; objectType: DDN.mscorlib.DNType; argTypes: TArray<DDN.mscorlib.DNType>; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    function GetCache(instance: DDN.mscorlib.DNObject): DDN.mscorlib.DNIDictionary;
    function GetFullComponentName(component: DDN.mscorlib.DNObject): string;
    function GetReflectionType(objectType: DDN.mscorlib.DNType): DDN.mscorlib.DNType; overload;
    function GetReflectionType(instance: DDN.mscorlib.DNObject): DDN.mscorlib.DNType; overload;
    function GetReflectionType(objectType: DDN.mscorlib.DNType; instance: DDN.mscorlib.DNObject): DDN.mscorlib.DNType; overload;
    function GetRuntimeType(reflectionType: DDN.mscorlib.DNType): DDN.mscorlib.DNType;
    function GetTypeDescriptor(objectType: DDN.mscorlib.DNType): DNICustomTypeDescriptor; overload;
    function GetTypeDescriptor(instance: DDN.mscorlib.DNObject): DNICustomTypeDescriptor; overload;
    function IsSupportedType(&type: DDN.mscorlib.DNType): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeDescriptionProvider = class(TDNGenericImport<DNTypeDescriptionProviderClass, DNTypeDescriptionProvider>) end;

  //-------------namespace: System.ComponentModel----------------
  DNTypeDescriptorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B8693267-0D34-5BD2-ABEA-68840D16BED1}']
  { static getter & setter } 

    {class} function get_ComNativeDescriptorHandler: DNIComNativeDescriptorHandler;
    {class} procedure set_ComNativeDescriptorHandler(value: DNIComNativeDescriptorHandler);
    {class} function get_ComObjectType: DDN.mscorlib.DNType;
    {class} function get_InterfaceType: DDN.mscorlib.DNType;

  { static methods } 

    {class} function AddAttributes(&type: DDN.mscorlib.DNType; attributes: TArray<DDN.mscorlib.DNAttribute>): DNTypeDescriptionProvider; overload;
    {class} function AddAttributes(instance: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNTypeDescriptionProvider; overload;
    {class} procedure AddEditorTable(editorBaseType: DDN.mscorlib.DNType; table: DDN.mscorlib.DNHashtable);
    {class} procedure AddProvider(provider: DNTypeDescriptionProvider; &type: DDN.mscorlib.DNType); overload;
    {class} procedure AddProvider(provider: DNTypeDescriptionProvider; instance: DDN.mscorlib.DNObject); overload;
    {class} procedure AddProviderTransparent(provider: DNTypeDescriptionProvider; &type: DDN.mscorlib.DNType); overload;
    {class} procedure AddProviderTransparent(provider: DNTypeDescriptionProvider; instance: DDN.mscorlib.DNObject); overload;
    {class} procedure CreateAssociation(primary: DDN.mscorlib.DNObject; secondary: DDN.mscorlib.DNObject);
    {class} function CreateDesigner(component: DNIComponent; designerBaseType: DDN.mscorlib.DNType): DNIDesigner;
    {class} function CreateEvent(componentType: DDN.mscorlib.DNType; name: string; &type: DDN.mscorlib.DNType; attributes: TArray<DDN.mscorlib.DNAttribute>): DNEventDescriptor; overload;
    {class} function CreateEvent(componentType: DDN.mscorlib.DNType; oldEventDescriptor: DNEventDescriptor; attributes: TArray<DDN.mscorlib.DNAttribute>): DNEventDescriptor; overload;
    {class} function CreateInstance(provider: DDN.mscorlib.DNIServiceProvider; objectType: DDN.mscorlib.DNType; argTypes: TArray<DDN.mscorlib.DNType>; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    {class} function CreateProperty(componentType: DDN.mscorlib.DNType; name: string; &type: DDN.mscorlib.DNType; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptor; overload;
    {class} function CreateProperty(componentType: DDN.mscorlib.DNType; oldPropertyDescriptor: DNPropertyDescriptor; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptor; overload;
    {class} function GetAssociation(&type: DDN.mscorlib.DNType; primary: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    {class} function GetAttributes(component: DDN.mscorlib.DNObject): DNAttributeCollection; overload;
    {class} function GetClassName(component: DDN.mscorlib.DNObject): string; overload;
    {class} function GetClassName(component: DDN.mscorlib.DNObject; noCustomTypeDesc: Boolean): string; overload;
    {class} function GetComponentName(component: DDN.mscorlib.DNObject): string; overload;
    {class} function GetComponentName(component: DDN.mscorlib.DNObject; noCustomTypeDesc: Boolean): string; overload;
    {class} function GetConverter(component: DDN.mscorlib.DNObject): DNTypeConverter; overload;
    {class} function GetConverter(component: DDN.mscorlib.DNObject; noCustomTypeDesc: Boolean): DNTypeConverter; overload;
    {class} function GetDefaultEvent(component: DDN.mscorlib.DNObject): DNEventDescriptor; overload;
    {class} function GetDefaultEvent(component: DDN.mscorlib.DNObject; noCustomTypeDesc: Boolean): DNEventDescriptor; overload;
    {class} function GetDefaultProperty(component: DDN.mscorlib.DNObject): DNPropertyDescriptor; overload;
    {class} function GetDefaultProperty(component: DDN.mscorlib.DNObject; noCustomTypeDesc: Boolean): DNPropertyDescriptor; overload;
    {class} function GetEditor(component: DDN.mscorlib.DNObject; editorBaseType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    {class} function GetEditor(component: DDN.mscorlib.DNObject; editorBaseType: DDN.mscorlib.DNType; noCustomTypeDesc: Boolean): DDN.mscorlib.DNObject; overload;
    {class} function GetEvents(component: DDN.mscorlib.DNObject): DNEventDescriptorCollection; overload;
    {class} function GetEvents(component: DDN.mscorlib.DNObject; noCustomTypeDesc: Boolean): DNEventDescriptorCollection; overload;
    {class} function GetEvents(component: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNEventDescriptorCollection; overload;
    {class} function GetFullComponentName(component: DDN.mscorlib.DNObject): string;
    {class} function GetProperties(component: DDN.mscorlib.DNObject): DNPropertyDescriptorCollection; overload;
    {class} function GetProperties(component: DDN.mscorlib.DNObject; noCustomTypeDesc: Boolean): DNPropertyDescriptorCollection; overload;
    {class} function GetProperties(component: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    {class} function GetProperties(component: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>; noCustomTypeDesc: Boolean): DNPropertyDescriptorCollection; overload;
    {class} function GetProvider(&type: DDN.mscorlib.DNType): DNTypeDescriptionProvider; overload;
    {class} function GetProvider(instance: DDN.mscorlib.DNObject): DNTypeDescriptionProvider; overload;
    {class} function GetReflectionType(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNType; overload;
    {class} function GetReflectionType(instance: DDN.mscorlib.DNObject): DDN.mscorlib.DNType; overload;
    {class} procedure Refresh(component: DDN.mscorlib.DNObject); overload;
    {class} procedure Refresh(&type: DDN.mscorlib.DNType); overload;
    {class} procedure Refresh(module: DDN.mscorlib.DNModule); overload;
    {class} procedure Refresh(assembly: DDN.mscorlib.DNAssembly); overload;
    {class} procedure RemoveAssociation(primary: DDN.mscorlib.DNObject; secondary: DDN.mscorlib.DNObject);
    {class} procedure RemoveAssociations(primary: DDN.mscorlib.DNObject);
    {class} procedure RemoveProvider(provider: DNTypeDescriptionProvider; &type: DDN.mscorlib.DNType); overload;
    {class} procedure RemoveProvider(provider: DNTypeDescriptionProvider; instance: DDN.mscorlib.DNObject); overload;
    {class} procedure RemoveProviderTransparent(provider: DNTypeDescriptionProvider; &type: DDN.mscorlib.DNType); overload;
    {class} procedure RemoveProviderTransparent(provider: DNTypeDescriptionProvider; instance: DDN.mscorlib.DNObject); overload;
    {class} procedure SortDescriptorArray(infos: DDN.mscorlib.DNIList);
    {class} function GetClassName(componentType: DDN.mscorlib.DNType): string; overload;
    {class} function GetDefaultEvent(componentType: DDN.mscorlib.DNType): DNEventDescriptor; overload;
    {class} function GetDefaultProperty(componentType: DDN.mscorlib.DNType): DNPropertyDescriptor; overload;
    {class} function GetEditor(&type: DDN.mscorlib.DNType; editorBaseType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    {class} function GetEvents(componentType: DDN.mscorlib.DNType; attributes: TArray<DDN.mscorlib.DNAttribute>): DNEventDescriptorCollection; overload;
    {class} function GetEvents(component: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>; noCustomTypeDesc: Boolean): DNEventDescriptorCollection; overload;
    {class} function GetProperties(componentType: DDN.mscorlib.DNType; attributes: TArray<DDN.mscorlib.DNAttribute>): DNPropertyDescriptorCollection; overload;
    {class} function GetAttributes(componentType: DDN.mscorlib.DNType): DNAttributeCollection; overload;
    {class} function GetAttributes(component: DDN.mscorlib.DNObject; noCustomTypeDesc: Boolean): DNAttributeCollection; overload;
    {class} function GetConverter(&type: DDN.mscorlib.DNType): DNTypeConverter; overload;
    {class} function GetEvents(componentType: DDN.mscorlib.DNType): DNEventDescriptorCollection; overload;
    {class} function GetProperties(componentType: DDN.mscorlib.DNType): DNPropertyDescriptorCollection; overload;

  { static propertys } 

    {class} property ComNativeDescriptorHandler: DNIComNativeDescriptorHandler read get_ComNativeDescriptorHandler write set_ComNativeDescriptorHandler;
    {class} property ComObjectType: DDN.mscorlib.DNType read get_ComObjectType;
    {class} property InterfaceType: DDN.mscorlib.DNType read get_InterfaceType;
  end;

  [DNTypeName('System.ComponentModel.TypeDescriptor')]
  DNTypeDescriptor = interface(DDN.mscorlib.DNObject)
  ['{A0769D35-AB12-3F4B-9243-945A864B35AF}']
  { events } 

    {class} procedure add_Refreshed(value: DNRefreshEventHandler);
    {class} procedure remove_Refreshed(value: DNRefreshEventHandler);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeDescriptor = class(TDNGenericImport<DNTypeDescriptorClass, DNTypeDescriptor>) end;

  //-------------namespace: System.Diagnostics----------------
  DNCorrelationManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7B085FDF-6BDD-545C-9772-5D80ED7A8A0B}']
  end;

  [DNTypeName('System.Diagnostics.CorrelationManager')]
  DNCorrelationManager = interface(DDN.mscorlib.DNObject)
  ['{28EF8593-6A64-373B-A7A6-45CA4C8B514E}']
  { getters & setters } 

    function get_ActivityId: DDN.mscorlib.DNGuid;
    procedure set_ActivityId(value: DDN.mscorlib.DNGuid);
    function get_LogicalOperationStack: DDN.mscorlib.DNStack;

  { methods } 

    procedure StartLogicalOperation(operationId: DDN.mscorlib.DNObject); overload;
    procedure StartLogicalOperation; overload;
    procedure StopLogicalOperation;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ActivityId: DDN.mscorlib.DNGuid read get_ActivityId write set_ActivityId;
    property LogicalOperationStack: DDN.mscorlib.DNStack read get_LogicalOperationStack;
  end;

  TDNCorrelationManager = class(TDNGenericImport<DNCorrelationManagerClass, DNCorrelationManager>) end;

  //-------------namespace: System.Diagnostics----------------
  DNCounterCreationDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{21BD6CEB-A8CA-5A14-8E4C-BE96909DB034}']
  { constructors } 

    {class} function init: DNCounterCreationData; overload;
    {class} function init(counterName: string; counterHelp: string; counterType: DNPerformanceCounterType): DNCounterCreationData; overload;

  end;

  [DNTypeName('System.Diagnostics.CounterCreationData')]
  DNCounterCreationData = interface(DDN.mscorlib.DNObject)
  ['{E26D5A89-4D44-3858-8232-6A69D3A8BF70}']
  { getters & setters } 

    function get_CounterType: DNPerformanceCounterType;
    procedure set_CounterType(value: DNPerformanceCounterType);
    function get_CounterName: string;
    procedure set_CounterName(value: string);
    function get_CounterHelp: string;
    procedure set_CounterHelp(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CounterType: DNPerformanceCounterType read get_CounterType write set_CounterType;
    property CounterName: string read get_CounterName write set_CounterName;
    property CounterHelp: string read get_CounterHelp write set_CounterHelp;
  end;

  TDNCounterCreationData = class(TDNGenericImport<DNCounterCreationDataClass, DNCounterCreationData>) end;

  //-------------namespace: System.Diagnostics----------------
  DNCounterSampleCalculatorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CE15C79A-B852-5663-8C91-64F867EF8664}']
  { static methods } 

    {class} function ComputeCounterValue(newSample: DNCounterSample): Single; overload;
    {class} function ComputeCounterValue(oldSample: DNCounterSample; newSample: DNCounterSample): Single; overload;

  end;

  [DNTypeName('System.Diagnostics.CounterSampleCalculator')]
  DNCounterSampleCalculator = interface(DDN.mscorlib.DNObject)
  ['{0DF1E8ED-CB91-3FE1-BC16-C96215142457}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCounterSampleCalculator = class(TDNGenericImport<DNCounterSampleCalculatorClass, DNCounterSampleCalculator>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDebugClass = interface(DDN.mscorlib.DNObjectClass)
  ['{125F0A85-54A8-5124-91C5-9DE24D907D93}']
  { static getter & setter } 

    {class} function get_Listeners: DNTraceListenerCollection;
    {class} function get_AutoFlush: Boolean;
    {class} procedure set_AutoFlush(value: Boolean);
    {class} function get_IndentLevel: Int32;
    {class} procedure set_IndentLevel(value: Int32);
    {class} function get_IndentSize: Int32;
    {class} procedure set_IndentSize(value: Int32);

  { static methods } 

    {class} procedure Flush;
    {class} procedure Close;
    {class} procedure Assert(condition: Boolean); overload;
    {class} procedure Assert(condition: Boolean; message: string); overload;
    {class} procedure Assert(condition: Boolean; message: string; detailMessage: string); overload;
    {class} procedure Assert(condition: Boolean; message: string; detailMessageFormat: string; args: TArray<DDN.mscorlib.DNObject>); overload;
    {class} procedure Fail(message: string); overload;
    {class} procedure Fail(message: string; detailMessage: string); overload;
    {class} procedure Print(message: string); overload;
    {class} procedure Print(format: string; args: TArray<DDN.mscorlib.DNObject>); overload;
    {class} procedure Write(message: string); overload;
    {class} procedure Write(value: DDN.mscorlib.DNObject); overload;
    {class} procedure Write(message: string; category: string); overload;
    {class} procedure Write(value: DDN.mscorlib.DNObject; category: string); overload;
    {class} procedure WriteLine(message: string); overload;
    {class} procedure WriteLine(value: DDN.mscorlib.DNObject); overload;
    {class} procedure WriteLine(message: string; category: string); overload;
    {class} procedure WriteLine(value: DDN.mscorlib.DNObject; category: string); overload;
    {class} procedure WriteLine(format: string; args: TArray<DDN.mscorlib.DNObject>); overload;
    {class} procedure WriteIf(condition: Boolean; message: string); overload;
    {class} procedure WriteIf(condition: Boolean; value: DDN.mscorlib.DNObject); overload;
    {class} procedure WriteIf(condition: Boolean; message: string; category: string); overload;
    {class} procedure WriteIf(condition: Boolean; value: DDN.mscorlib.DNObject; category: string); overload;
    {class} procedure WriteLineIf(condition: Boolean; message: string); overload;
    {class} procedure WriteLineIf(condition: Boolean; value: DDN.mscorlib.DNObject); overload;
    {class} procedure WriteLineIf(condition: Boolean; message: string; category: string); overload;
    {class} procedure WriteLineIf(condition: Boolean; value: DDN.mscorlib.DNObject; category: string); overload;
    {class} procedure Indent;
    {class} procedure Unindent;

  { static propertys } 

    {class} property Listeners: DNTraceListenerCollection read get_Listeners;
    {class} property AutoFlush: Boolean read get_AutoFlush write set_AutoFlush;
    {class} property IndentLevel: Int32 read get_IndentLevel write set_IndentLevel;
    {class} property IndentSize: Int32 read get_IndentSize write set_IndentSize;
  end;

  [DNTypeName('System.Diagnostics.Debug')]
  DNDebug = interface(DDN.mscorlib.DNObject)
  ['{48FC5AFD-EFBB-3B14-9182-5F5DB723638D}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDebug = class(TDNGenericImport<DNDebugClass, DNDebug>) end;

  //-------------namespace: System.Diagnostics----------------
  DNEventInstanceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AC8FC813-971E-54B2-BF18-15277D88009C}']
  { constructors } 

    {class} function init(instanceId: Int64; categoryId: Int32): DNEventInstance; overload;
    {class} function init(instanceId: Int64; categoryId: Int32; entryType: DNEventLogEntryType): DNEventInstance; overload;

  end;

  [DNTypeName('System.Diagnostics.EventInstance')]
  DNEventInstance = interface(DDN.mscorlib.DNObject)
  ['{09CCCEBE-F7B9-3633-AB55-6C108A13770C}']
  { getters & setters } 

    function get_CategoryId: Int32;
    procedure set_CategoryId(value: Int32);
    function get_EntryType: DNEventLogEntryType;
    procedure set_EntryType(value: DNEventLogEntryType);
    function get_InstanceId: Int64;
    procedure set_InstanceId(value: Int64);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CategoryId: Int32 read get_CategoryId write set_CategoryId;
    property EntryType: DNEventLogEntryType read get_EntryType write set_EntryType;
    property InstanceId: Int64 read get_InstanceId write set_InstanceId;
  end;

  TDNEventInstance = class(TDNGenericImport<DNEventInstanceClass, DNEventInstance>) end;

  //-------------namespace: System.Diagnostics----------------
  DNEventLogEntryCollectionClass = interface(DNObjectClass)
  ['{D5446790-19C1-567C-8858-CD807D57D838}']
  end;

  [DNTypeName('System.Diagnostics.EventLogEntryCollection')]
  DNEventLogEntryCollection = interface(DDN.mscorlib.DNICollection)
  ['{D2B5BDD1-8C40-3472-ACA8-9964FCB98922}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNEventLogEntry;

  { methods } 

    procedure CopyTo(entries: TArray<DNEventLogEntry>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNEventLogEntry read get_Item; default;
  end;

  TDNEventLogEntryCollection = class(TDNGenericImport<DNEventLogEntryCollectionClass, DNEventLogEntryCollection>) end;

  //-------------namespace: System.Diagnostics----------------
  DNEventLogPermissionEntryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{002416C8-E4B5-5D3A-9CE7-C7C1C4AE161D}']
  { constructors } 

    {class} function init(permissionAccess: DNEventLogPermissionAccess; machineName: string): DNEventLogPermissionEntry;

  end;

  [DNTypeName('System.Diagnostics.EventLogPermissionEntry')]
  DNEventLogPermissionEntry = interface(DDN.mscorlib.DNObject)
  ['{82198034-E439-3AE3-A769-0FDE0EB15EAA}']
  { getters & setters } 

    function get_MachineName: string;
    function get_PermissionAccess: DNEventLogPermissionAccess;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MachineName: string read get_MachineName;
    property PermissionAccess: DNEventLogPermissionAccess read get_PermissionAccess;
  end;

  TDNEventLogPermissionEntry = class(TDNGenericImport<DNEventLogPermissionEntryClass, DNEventLogPermissionEntry>) end;

  //-------------namespace: System.Diagnostics----------------
  DNEventSourceCreationDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{996C9E12-F230-5AB4-950D-71C5EBA85FF9}']
  { constructors } 

    {class} function init(source: string; logName: string): DNEventSourceCreationData;

  end;

  [DNTypeName('System.Diagnostics.EventSourceCreationData')]
  DNEventSourceCreationData = interface(DDN.mscorlib.DNObject)
  ['{7DF461B6-2E4F-3DC3-A712-6F0B97B4ECFC}']
  { getters & setters } 

    function get_LogName: string;
    procedure set_LogName(value: string);
    function get_MachineName: string;
    procedure set_MachineName(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_MessageResourceFile: string;
    procedure set_MessageResourceFile(value: string);
    function get_ParameterResourceFile: string;
    procedure set_ParameterResourceFile(value: string);
    function get_CategoryResourceFile: string;
    procedure set_CategoryResourceFile(value: string);
    function get_CategoryCount: Int32;
    procedure set_CategoryCount(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LogName: string read get_LogName write set_LogName;
    property MachineName: string read get_MachineName write set_MachineName;
    property Source: string read get_Source write set_Source;
    property MessageResourceFile: string read get_MessageResourceFile write set_MessageResourceFile;
    property ParameterResourceFile: string read get_ParameterResourceFile write set_ParameterResourceFile;
    property CategoryResourceFile: string read get_CategoryResourceFile write set_CategoryResourceFile;
    property CategoryCount: Int32 read get_CategoryCount write set_CategoryCount;
  end;

  TDNEventSourceCreationData = class(TDNGenericImport<DNEventSourceCreationDataClass, DNEventSourceCreationData>) end;

  //-------------namespace: System.Diagnostics----------------
  DNFileVersionInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{21589A64-7E84-56B1-A903-39D64A30BB51}']
  { static methods } 

    {class} function GetVersionInfo(fileName: string): DNFileVersionInfo;

  end;

  [DNTypeName('System.Diagnostics.FileVersionInfo')]
  DNFileVersionInfo = interface(DDN.mscorlib.DNObject)
  ['{5B476486-C3C2-3507-9B68-10D8E4129EE1}']
  { getters & setters } 

    function get_Comments: string;
    function get_CompanyName: string;
    function get_FileBuildPart: Int32;
    function get_FileDescription: string;
    function get_FileMajorPart: Int32;
    function get_FileMinorPart: Int32;
    function get_FileName: string;
    function get_FilePrivatePart: Int32;
    function get_FileVersion: string;
    function get_InternalName: string;
    function get_IsDebug: Boolean;
    function get_IsPatched: Boolean;
    function get_IsPrivateBuild: Boolean;
    function get_IsPreRelease: Boolean;
    function get_IsSpecialBuild: Boolean;
    function get_Language: string;
    function get_LegalCopyright: string;
    function get_LegalTrademarks: string;
    function get_OriginalFilename: string;
    function get_PrivateBuild: string;
    function get_ProductBuildPart: Int32;
    function get_ProductMajorPart: Int32;
    function get_ProductMinorPart: Int32;
    function get_ProductName: string;
    function get_ProductPrivatePart: Int32;
    function get_ProductVersion: string;
    function get_SpecialBuild: string;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Comments: string read get_Comments;
    property CompanyName: string read get_CompanyName;
    property FileBuildPart: Int32 read get_FileBuildPart;
    property FileDescription: string read get_FileDescription;
    property FileMajorPart: Int32 read get_FileMajorPart;
    property FileMinorPart: Int32 read get_FileMinorPart;
    property FileName: string read get_FileName;
    property FilePrivatePart: Int32 read get_FilePrivatePart;
    property FileVersion: string read get_FileVersion;
    property InternalName: string read get_InternalName;
    property IsDebug: Boolean read get_IsDebug;
    property IsPatched: Boolean read get_IsPatched;
    property IsPrivateBuild: Boolean read get_IsPrivateBuild;
    property IsPreRelease: Boolean read get_IsPreRelease;
    property IsSpecialBuild: Boolean read get_IsSpecialBuild;
    property Language: string read get_Language;
    property LegalCopyright: string read get_LegalCopyright;
    property LegalTrademarks: string read get_LegalTrademarks;
    property OriginalFilename: string read get_OriginalFilename;
    property PrivateBuild: string read get_PrivateBuild;
    property ProductBuildPart: Int32 read get_ProductBuildPart;
    property ProductMajorPart: Int32 read get_ProductMajorPart;
    property ProductMinorPart: Int32 read get_ProductMinorPart;
    property ProductName: string read get_ProductName;
    property ProductPrivatePart: Int32 read get_ProductPrivatePart;
    property ProductVersion: string read get_ProductVersion;
    property SpecialBuild: string read get_SpecialBuild;
  end;

  TDNFileVersionInfo = class(TDNGenericImport<DNFileVersionInfoClass, DNFileVersionInfo>) end;

  //-------------namespace: System.Diagnostics----------------
  DNInstanceDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B03D2103-BBDE-5524-899E-DE85458E4372}']
  { constructors } 

    {class} function init(instanceName: string; sample: DNCounterSample): DNInstanceData;

  end;

  [DNTypeName('System.Diagnostics.InstanceData')]
  DNInstanceData = interface(DDN.mscorlib.DNObject)
  ['{21639E21-004C-3819-8059-084194CBBBC2}']
  { getters & setters } 

    function get_InstanceName: string;
    function get_Sample: DNCounterSample;
    function get_RawValue: Int64;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property InstanceName: string read get_InstanceName;
    property Sample: DNCounterSample read get_Sample;
    property RawValue: Int64 read get_RawValue;
  end;

  TDNInstanceData = class(TDNGenericImport<DNInstanceDataClass, DNInstanceData>) end;

  //-------------namespace: System.Diagnostics----------------
  DNPerformanceCounterCategoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3B6421FD-731A-5E64-9B08-9B6ECE4F366B}']
  { constructors } 

    {class} function init: DNPerformanceCounterCategory; overload;
    {class} function init(categoryName: string): DNPerformanceCounterCategory; overload;
    {class} function init(categoryName: string; machineName: string): DNPerformanceCounterCategory; overload;

  { static methods } 

    {class} function Create(categoryName: string; categoryHelp: string; counterData: DNCounterCreationDataCollection): DNPerformanceCounterCategory; overload;
    {class} function CounterExists(counterName: string; categoryName: string): Boolean; overload;
    {class} function CounterExists(counterName: string; categoryName: string; machineName: string): Boolean; overload;
    {class} function Create(categoryName: string; categoryHelp: string; counterName: string; counterHelp: string): DNPerformanceCounterCategory; overload;
    {class} function Create(categoryName: string; categoryHelp: string; categoryType: DNPerformanceCounterCategoryType; counterName: string; counterHelp: string): DNPerformanceCounterCategory; overload;
    {class} function Create(categoryName: string; categoryHelp: string; categoryType: DNPerformanceCounterCategoryType; counterData: DNCounterCreationDataCollection): DNPerformanceCounterCategory; overload;
    {class} procedure Delete(categoryName: string);
    {class} function Exists(categoryName: string): Boolean; overload;
    {class} function Exists(categoryName: string; machineName: string): Boolean; overload;
    {class} function GetCategories: TArray<DNPerformanceCounterCategory>; overload;
    {class} function GetCategories(machineName: string): TArray<DNPerformanceCounterCategory>; overload;
    {class} function InstanceExists(instanceName: string; categoryName: string): Boolean; overload;
    {class} function InstanceExists(instanceName: string; categoryName: string; machineName: string): Boolean; overload;

  end;

  [DNTypeName('System.Diagnostics.PerformanceCounterCategory')]
  DNPerformanceCounterCategory = interface(DDN.mscorlib.DNObject)
  ['{00804BB4-A27C-3BF3-90ED-6D150BA02A58}']
  { getters & setters } 

    function get_CategoryName: string;
    procedure set_CategoryName(value: string);
    function get_CategoryHelp: string;
    function get_CategoryType: DNPerformanceCounterCategoryType;
    function get_MachineName: string;
    procedure set_MachineName(value: string);

  { methods } 

    function CounterExists(counterName: string): Boolean; overload;
    function GetCounters: TArray<DNPerformanceCounter>; overload;
    function GetInstanceNames: TArray<string>;
    function InstanceExists(instanceName: string): Boolean; overload;
    function ReadCategory: DNInstanceDataCollectionCollection;
    function GetCounters(instanceName: string): TArray<DNPerformanceCounter>; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CategoryName: string read get_CategoryName write set_CategoryName;
    property CategoryHelp: string read get_CategoryHelp;
    property CategoryType: DNPerformanceCounterCategoryType read get_CategoryType;
    property MachineName: string read get_MachineName write set_MachineName;
  end;

  TDNPerformanceCounterCategory = class(TDNGenericImport<DNPerformanceCounterCategoryClass, DNPerformanceCounterCategory>) end;

  //-------------namespace: System.Diagnostics----------------
  DNPerformanceCounterManagerClass = interface(DNObjectClass)
  ['{75683662-CF3D-5E19-A7F1-14C4B3611EAD}']
  { constructors } 

    {class} function init: DNPerformanceCounterManager;

  end;

  [DNTypeName('System.Diagnostics.PerformanceCounterManager')]
  DNPerformanceCounterManager = interface(DNICollectData)
  ['{82840BE1-D273-11D2-B94A-00600893B17A}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPerformanceCounterManager = class(TDNGenericImport<DNPerformanceCounterManagerClass, DNPerformanceCounterManager>) end;

  //-------------namespace: System.Diagnostics----------------
  DNPerformanceCounterPermissionEntryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{60BF39D9-D89B-5E32-8B69-7D16187FCD19}']
  { constructors } 

    {class} function init(permissionAccess: DNPerformanceCounterPermissionAccess; machineName: string; categoryName: string): DNPerformanceCounterPermissionEntry;

  end;

  [DNTypeName('System.Diagnostics.PerformanceCounterPermissionEntry')]
  DNPerformanceCounterPermissionEntry = interface(DDN.mscorlib.DNObject)
  ['{05202FF0-CC63-3D38-A2F9-33ACF8BB9C6E}']
  { getters & setters } 

    function get_CategoryName: string;
    function get_MachineName: string;
    function get_PermissionAccess: DNPerformanceCounterPermissionAccess;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CategoryName: string read get_CategoryName;
    property MachineName: string read get_MachineName;
    property PermissionAccess: DNPerformanceCounterPermissionAccess read get_PermissionAccess;
  end;

  TDNPerformanceCounterPermissionEntry = class(TDNGenericImport<DNPerformanceCounterPermissionEntryClass, DNPerformanceCounterPermissionEntry>) end;

  //-------------namespace: System.Diagnostics----------------
  DNProcessStartInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{29ABB1F1-FCCD-5FD7-A5E9-0CDF78272EB3}']
  { constructors } 

    {class} function init: DNProcessStartInfo; overload;
    {class} function init(fileName: string): DNProcessStartInfo; overload;
    {class} function init(fileName: string; arguments: string): DNProcessStartInfo; overload;

  end;

  [DNTypeName('System.Diagnostics.ProcessStartInfo')]
  DNProcessStartInfo = interface(DDN.mscorlib.DNObject)
  ['{96B0A88B-27C1-37EA-BF14-2CBA5AFB40BE}']
  { getters & setters } 

    function get_Verb: string;
    procedure set_Verb(value: string);
    function get_Arguments: string;
    procedure set_Arguments(value: string);
    function get_CreateNoWindow: Boolean;
    procedure set_CreateNoWindow(value: Boolean);
    function get_EnvironmentVariables: DNStringDictionary;
    function get_Environment: DDN.mscorlib.DNIDictionary<string, string>;
    function get_RedirectStandardInput: Boolean;
    procedure set_RedirectStandardInput(value: Boolean);
    function get_RedirectStandardOutput: Boolean;
    procedure set_RedirectStandardOutput(value: Boolean);
    function get_RedirectStandardError: Boolean;
    procedure set_RedirectStandardError(value: Boolean);
    function get_StandardErrorEncoding: DDN.mscorlib.DNEncoding;
    procedure set_StandardErrorEncoding(value: DDN.mscorlib.DNEncoding);
    function get_StandardOutputEncoding: DDN.mscorlib.DNEncoding;
    procedure set_StandardOutputEncoding(value: DDN.mscorlib.DNEncoding);
    function get_UseShellExecute: Boolean;
    procedure set_UseShellExecute(value: Boolean);
    function get_Verbs: TArray<string>;
    function get_UserName: string;
    procedure set_UserName(value: string);
    function get_Password: DDN.mscorlib.DNSecureString;
    procedure set_Password(value: DDN.mscorlib.DNSecureString);
    function get_PasswordInClearText: string;
    procedure set_PasswordInClearText(value: string);
    function get_Domain: string;
    procedure set_Domain(value: string);
    function get_LoadUserProfile: Boolean;
    procedure set_LoadUserProfile(value: Boolean);
    function get_FileName: string;
    procedure set_FileName(value: string);
    function get_WorkingDirectory: string;
    procedure set_WorkingDirectory(value: string);
    function get_ErrorDialog: Boolean;
    procedure set_ErrorDialog(value: Boolean);
    function get_ErrorDialogParentHandle: IntPtr;
    procedure set_ErrorDialogParentHandle(value: IntPtr);
    function get_WindowStyle: DNProcessWindowStyle;
    procedure set_WindowStyle(value: DNProcessWindowStyle);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Verb: string read get_Verb write set_Verb;
    property Arguments: string read get_Arguments write set_Arguments;
    property CreateNoWindow: Boolean read get_CreateNoWindow write set_CreateNoWindow;
    property EnvironmentVariables: DNStringDictionary read get_EnvironmentVariables;
    property Environment: DDN.mscorlib.DNIDictionary<string, string> read get_Environment;
    property RedirectStandardInput: Boolean read get_RedirectStandardInput write set_RedirectStandardInput;
    property RedirectStandardOutput: Boolean read get_RedirectStandardOutput write set_RedirectStandardOutput;
    property RedirectStandardError: Boolean read get_RedirectStandardError write set_RedirectStandardError;
    property StandardErrorEncoding: DDN.mscorlib.DNEncoding read get_StandardErrorEncoding write set_StandardErrorEncoding;
    property StandardOutputEncoding: DDN.mscorlib.DNEncoding read get_StandardOutputEncoding write set_StandardOutputEncoding;
    property UseShellExecute: Boolean read get_UseShellExecute write set_UseShellExecute;
    property Verbs: TArray<string> read get_Verbs;
    property UserName: string read get_UserName write set_UserName;
    property Password: DDN.mscorlib.DNSecureString read get_Password write set_Password;
    property PasswordInClearText: string read get_PasswordInClearText write set_PasswordInClearText;
    property Domain: string read get_Domain write set_Domain;
    property LoadUserProfile: Boolean read get_LoadUserProfile write set_LoadUserProfile;
    property FileName: string read get_FileName write set_FileName;
    property WorkingDirectory: string read get_WorkingDirectory write set_WorkingDirectory;
    property ErrorDialog: Boolean read get_ErrorDialog write set_ErrorDialog;
    property ErrorDialogParentHandle: IntPtr read get_ErrorDialogParentHandle write set_ErrorDialogParentHandle;
    property WindowStyle: DNProcessWindowStyle read get_WindowStyle write set_WindowStyle;
  end;

  TDNProcessStartInfo = class(TDNGenericImport<DNProcessStartInfoClass, DNProcessStartInfo>) end;

  //-------------namespace: System.Diagnostics----------------
  DNStackFrameExtensionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8CB5B447-D954-547E-8E96-2D94A71BC53B}']
  { static methods } 

    {class} function HasNativeImage(stackFrame: DDN.mscorlib.DNStackFrame): Boolean;
    {class} function HasMethod(stackFrame: DDN.mscorlib.DNStackFrame): Boolean;
    {class} function HasILOffset(stackFrame: DDN.mscorlib.DNStackFrame): Boolean;
    {class} function HasSource(stackFrame: DDN.mscorlib.DNStackFrame): Boolean;
    {class} function GetNativeIP(stackFrame: DDN.mscorlib.DNStackFrame): IntPtr;
    {class} function GetNativeImageBase(stackFrame: DDN.mscorlib.DNStackFrame): IntPtr;

  end;

  [DNTypeName('System.Diagnostics.StackFrameExtensions')]
  DNStackFrameExtensions = interface(DDN.mscorlib.DNObject)
  ['{4FDFD72B-9433-3AAD-8081-0A8E51BEFBF1}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNStackFrameExtensions = class(TDNGenericImport<DNStackFrameExtensionsClass, DNStackFrameExtensions>) end;

  //-------------namespace: System.Diagnostics----------------
  DNStopwatchClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FE2B4747-3007-5773-A270-662CFEDF95FE}']
  { constructors } 

    {class} function init: DNStopwatch;

  { static fields getter & setter } 

   function __fakeFieldGet_Frequency: Int64;
   function __fakeFieldGet_IsHighResolution: Boolean;

  { static fields } 

    {class} property Frequency: Int64 read __fakeFieldGet_Frequency;
    {class} property IsHighResolution: Boolean read __fakeFieldGet_IsHighResolution;

  { static methods } 

    {class} function StartNew: DNStopwatch;
    {class} function GetTimestamp: Int64;

  end;

  [DNTypeName('System.Diagnostics.Stopwatch')]
  DNStopwatch = interface(DDN.mscorlib.DNObject)
  ['{BFB5EB13-C254-3745-B7DF-87DD054946DF}']
  { getters & setters } 

    function get_IsRunning: Boolean;
    function get_Elapsed: DDN.mscorlib.DNTimeSpan;
    function get_ElapsedMilliseconds: Int64;
    function get_ElapsedTicks: Int64;

  { methods } 

    procedure Start;
    procedure Stop;
    procedure Reset;
    procedure Restart;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsRunning: Boolean read get_IsRunning;
    property Elapsed: DDN.mscorlib.DNTimeSpan read get_Elapsed;
    property ElapsedMilliseconds: Int64 read get_ElapsedMilliseconds;
    property ElapsedTicks: Int64 read get_ElapsedTicks;
  end;

  TDNStopwatch = class(TDNGenericImport<DNStopwatchClass, DNStopwatch>) end;

  //-------------namespace: System.Diagnostics----------------
  DNSwitchClass = interface(DDN.mscorlib.DNObjectClass)
  ['{71A155A4-E80F-5174-8CF3-29E8417E18FD}']
  end;

  [DNTypeName('System.Diagnostics.Switch')]
  DNSwitch = interface(DDN.mscorlib.DNObject)
  ['{02E47DDD-E8E6-3A51-AEE7-7128281518B0}']
  { getters & setters } 

    function get_Attributes: DNStringDictionary;
    function get_DisplayName: string;
    function get_Description: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Attributes: DNStringDictionary read get_Attributes;
    property DisplayName: string read get_DisplayName;
    property Description: string read get_Description;
  end;

  TDNSwitch = class(TDNGenericImport<DNSwitchClass, DNSwitch>) end;

  //-------------namespace: System.Diagnostics----------------
  DNBooleanSwitchClass = interface(DNSwitchClass)
  ['{62BB106C-F1D4-5F17-BD6F-B6D650B3AE4E}']
  { constructors } 

    {class} function init(displayName: string; description: string): DNBooleanSwitch; overload;
    {class} function init(displayName: string; description: string; defaultSwitchValue: string): DNBooleanSwitch; overload;

  end;

  [DNTypeName('System.Diagnostics.BooleanSwitch')]
  DNBooleanSwitch = interface(DNSwitch)
  ['{9888AF34-6CCA-355F-A65C-4C8F1BFA422A}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_Attributes: DNStringDictionary;
    function get_DisplayName: string;
    function get_Description: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Enabled: Boolean read get_Enabled write set_Enabled;
    property Attributes: DNStringDictionary read get_Attributes;
    property DisplayName: string read get_DisplayName;
    property Description: string read get_Description;
  end;

  TDNBooleanSwitch = class(TDNGenericImport<DNBooleanSwitchClass, DNBooleanSwitch>) end;

  //-------------namespace: System.Diagnostics----------------
  DNSourceSwitchClass = interface(DNSwitchClass)
  ['{13847A0D-AE0B-5D74-9C9A-D767025F4160}']
  { constructors } 

    {class} function init(name: string): DNSourceSwitch; overload;
    {class} function init(displayName: string; defaultSwitchValue: string): DNSourceSwitch; overload;

  end;

  [DNTypeName('System.Diagnostics.SourceSwitch')]
  DNSourceSwitch = interface(DNSwitch)
  ['{2397357A-8D3A-3B9C-A999-7516D4F6A3E8}']
  { getters & setters } 

    function get_Level: DNSourceLevels;
    procedure set_Level(value: DNSourceLevels);
    function get_Attributes: DNStringDictionary;
    function get_DisplayName: string;
    function get_Description: string;

  { methods } 

    function ShouldTrace(eventType: DNTraceEventType): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Level: DNSourceLevels read get_Level write set_Level;
    property Attributes: DNStringDictionary read get_Attributes;
    property DisplayName: string read get_DisplayName;
    property Description: string read get_Description;
  end;

  TDNSourceSwitch = class(TDNGenericImport<DNSourceSwitchClass, DNSourceSwitch>) end;

  //-------------namespace: System.Diagnostics----------------
  DNTraceSwitchClass = interface(DNSwitchClass)
  ['{E74696F5-E5F4-57B6-912F-E17F185CAEB1}']
  { constructors } 

    {class} function init(displayName: string; description: string): DNTraceSwitch; overload;
    {class} function init(displayName: string; description: string; defaultSwitchValue: string): DNTraceSwitch; overload;

  end;

  [DNTypeName('System.Diagnostics.TraceSwitch')]
  DNTraceSwitch = interface(DNSwitch)
  ['{E63C291E-3BF5-37C3-991B-8821CF16B6AE}']
  { getters & setters } 

    function get_Level: DNTraceLevel;
    procedure set_Level(value: DNTraceLevel);
    function get_TraceError: Boolean;
    function get_TraceWarning: Boolean;
    function get_TraceInfo: Boolean;
    function get_TraceVerbose: Boolean;
    function get_Attributes: DNStringDictionary;
    function get_DisplayName: string;
    function get_Description: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Level: DNTraceLevel read get_Level write set_Level;
    property TraceError: Boolean read get_TraceError;
    property TraceWarning: Boolean read get_TraceWarning;
    property TraceInfo: Boolean read get_TraceInfo;
    property TraceVerbose: Boolean read get_TraceVerbose;
    property Attributes: DNStringDictionary read get_Attributes;
    property DisplayName: string read get_DisplayName;
    property Description: string read get_Description;
  end;

  TDNTraceSwitch = class(TDNGenericImport<DNTraceSwitchClass, DNTraceSwitch>) end;

  //-------------namespace: System.Diagnostics----------------
  DNTraceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5C731053-A5B4-56C8-A786-C5164F619207}']
  { static getter & setter } 

    {class} function get_Listeners: DNTraceListenerCollection;
    {class} function get_AutoFlush: Boolean;
    {class} procedure set_AutoFlush(value: Boolean);
    {class} function get_UseGlobalLock: Boolean;
    {class} procedure set_UseGlobalLock(value: Boolean);
    {class} function get_CorrelationManager: DNCorrelationManager;
    {class} function get_IndentLevel: Int32;
    {class} procedure set_IndentLevel(value: Int32);
    {class} function get_IndentSize: Int32;
    {class} procedure set_IndentSize(value: Int32);

  { static methods } 

    {class} procedure Flush;
    {class} procedure Close;
    {class} procedure Assert(condition: Boolean); overload;
    {class} procedure Assert(condition: Boolean; message: string); overload;
    {class} procedure Assert(condition: Boolean; message: string; detailMessage: string); overload;
    {class} procedure Fail(message: string); overload;
    {class} procedure Fail(message: string; detailMessage: string); overload;
    {class} procedure Refresh;
    {class} procedure TraceInformation(message: string); overload;
    {class} procedure TraceInformation(format: string; args: TArray<DDN.mscorlib.DNObject>); overload;
    {class} procedure TraceWarning(message: string); overload;
    {class} procedure TraceWarning(format: string; args: TArray<DDN.mscorlib.DNObject>); overload;
    {class} procedure TraceError(message: string); overload;
    {class} procedure TraceError(format: string; args: TArray<DDN.mscorlib.DNObject>); overload;
    {class} procedure Write(message: string); overload;
    {class} procedure Write(value: DDN.mscorlib.DNObject); overload;
    {class} procedure Write(message: string; category: string); overload;
    {class} procedure Write(value: DDN.mscorlib.DNObject; category: string); overload;
    {class} procedure WriteLine(message: string); overload;
    {class} procedure WriteLine(value: DDN.mscorlib.DNObject); overload;
    {class} procedure WriteLine(message: string; category: string); overload;
    {class} procedure WriteLine(value: DDN.mscorlib.DNObject; category: string); overload;
    {class} procedure WriteIf(condition: Boolean; message: string); overload;
    {class} procedure WriteIf(condition: Boolean; value: DDN.mscorlib.DNObject); overload;
    {class} procedure WriteIf(condition: Boolean; message: string; category: string); overload;
    {class} procedure WriteIf(condition: Boolean; value: DDN.mscorlib.DNObject; category: string); overload;
    {class} procedure WriteLineIf(condition: Boolean; message: string); overload;
    {class} procedure WriteLineIf(condition: Boolean; value: DDN.mscorlib.DNObject); overload;
    {class} procedure WriteLineIf(condition: Boolean; message: string; category: string); overload;
    {class} procedure WriteLineIf(condition: Boolean; value: DDN.mscorlib.DNObject; category: string); overload;
    {class} procedure Indent;
    {class} procedure Unindent;

  { static propertys } 

    {class} property Listeners: DNTraceListenerCollection read get_Listeners;
    {class} property AutoFlush: Boolean read get_AutoFlush write set_AutoFlush;
    {class} property UseGlobalLock: Boolean read get_UseGlobalLock write set_UseGlobalLock;
    {class} property CorrelationManager: DNCorrelationManager read get_CorrelationManager;
    {class} property IndentLevel: Int32 read get_IndentLevel write set_IndentLevel;
    {class} property IndentSize: Int32 read get_IndentSize write set_IndentSize;
  end;

  [DNTypeName('System.Diagnostics.Trace')]
  DNTrace = interface(DDN.mscorlib.DNObject)
  ['{392BB1BD-2EDF-39DE-A06B-E4FBC49B64CA}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTrace = class(TDNGenericImport<DNTraceClass, DNTrace>) end;

  //-------------namespace: System.Diagnostics----------------
  DNTraceEventCacheClass = interface(DDN.mscorlib.DNObjectClass)
  ['{93EF0C8A-B1EA-5C5A-852D-35436A929CD6}']
  { constructors } 

    {class} function init: DNTraceEventCache;

  end;

  [DNTypeName('System.Diagnostics.TraceEventCache')]
  DNTraceEventCache = interface(DDN.mscorlib.DNObject)
  ['{C6F4042C-71DB-31E2-9772-944FA3D67A6F}']
  { getters & setters } 

    function get_Callstack: string;
    function get_LogicalOperationStack: DDN.mscorlib.DNStack;
    function get_DateTime: DDN.mscorlib.DNDateTime;
    function get_ProcessId: Int32;
    function get_ThreadId: string;
    function get_Timestamp: Int64;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Callstack: string read get_Callstack;
    property LogicalOperationStack: DDN.mscorlib.DNStack read get_LogicalOperationStack;
    property DateTime: DDN.mscorlib.DNDateTime read get_DateTime;
    property ProcessId: Int32 read get_ProcessId;
    property ThreadId: string read get_ThreadId;
    property Timestamp: Int64 read get_Timestamp;
  end;

  TDNTraceEventCache = class(TDNGenericImport<DNTraceEventCacheClass, DNTraceEventCache>) end;

  //-------------namespace: System.Diagnostics----------------
  DNTraceFilterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5D6A2F58-92BF-5596-ADA3-5492634450C7}']
  end;

  [DNTypeName('System.Diagnostics.TraceFilter')]
  DNTraceFilter = interface(DDN.mscorlib.DNObject)
  ['{FA161A05-74E9-37AE-8D11-A5F0752482A6}']
  { methods } 

    function ShouldTrace(cache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; formatOrMessage: string; args: TArray<DDN.mscorlib.DNObject>; data1: DDN.mscorlib.DNObject; data: TArray<DDN.mscorlib.DNObject>): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTraceFilter = class(TDNGenericImport<DNTraceFilterClass, DNTraceFilter>) end;

  //-------------namespace: System.Diagnostics----------------
  DNEventTypeFilterClass = interface(DNTraceFilterClass)
  ['{A7839899-460F-5EA2-89E3-DDAE216601D4}']
  { constructors } 

    {class} function init(level: DNSourceLevels): DNEventTypeFilter;

  end;

  [DNTypeName('System.Diagnostics.EventTypeFilter')]
  DNEventTypeFilter = interface(DNTraceFilter)
  ['{62A9E30A-DD7F-3B2D-A2AE-A34235A3C5BB}']
  { getters & setters } 

    function get_EventType: DNSourceLevels;
    procedure set_EventType(value: DNSourceLevels);

  { methods } 

    function ShouldTrace(cache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; formatOrMessage: string; args: TArray<DDN.mscorlib.DNObject>; data1: DDN.mscorlib.DNObject; data: TArray<DDN.mscorlib.DNObject>): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EventType: DNSourceLevels read get_EventType write set_EventType;
  end;

  TDNEventTypeFilter = class(TDNGenericImport<DNEventTypeFilterClass, DNEventTypeFilter>) end;

  //-------------namespace: System.Diagnostics----------------
  DNSourceFilterClass = interface(DNTraceFilterClass)
  ['{84C84D17-CB7A-53CE-B56A-180E6F904BEA}']
  { constructors } 

    {class} function init(source: string): DNSourceFilter;

  end;

  [DNTypeName('System.Diagnostics.SourceFilter')]
  DNSourceFilter = interface(DNTraceFilter)
  ['{37454378-7CCB-3E43-8BC5-C79508A1F1E7}']
  { getters & setters } 

    function get_Source: string;
    procedure set_Source(value: string);

  { methods } 

    function ShouldTrace(cache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; formatOrMessage: string; args: TArray<DDN.mscorlib.DNObject>; data1: DDN.mscorlib.DNObject; data: TArray<DDN.mscorlib.DNObject>): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Source: string read get_Source write set_Source;
  end;

  TDNSourceFilter = class(TDNGenericImport<DNSourceFilterClass, DNSourceFilter>) end;

  //-------------namespace: System.Diagnostics----------------
  DNTraceListenerCollectionClass = interface(DNObjectClass)
  ['{AADB9B88-BF9A-5825-A1A8-6C115F49840E}']
  end;

  [DNTypeName('System.Diagnostics.TraceListenerCollection')]
  DNTraceListenerCollection = interface(DDN.mscorlib.DNIList)
  ['{A6FB1CEF-E670-370B-929F-9CB5B90064C6}']
  { getters & setters } 

    function get_Item(i: Int32): DNTraceListener; overload;
    procedure set_Item(i: Int32; value: DNTraceListener);
    function get_Item(name: string): DNTraceListener; overload;
    function get_Count: Int32;

  { methods } 

    function Add(listener: DNTraceListener): Int32;
    procedure AddRange(value: TArray<DNTraceListener>); overload;
    procedure AddRange(value: DNTraceListenerCollection); overload;
    function &Contains(listener: DNTraceListener): Boolean;
    procedure CopyTo(listeners: TArray<DNTraceListener>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function IndexOf(listener: DNTraceListener): Int32;
    procedure Insert(index: Int32; listener: DNTraceListener);
    procedure Remove(listener: DNTraceListener); overload;
    procedure Remove(name: string); overload;
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[i: Int32]: DNTraceListener read get_Item write set_Item; default;
    property Item[name: string]: DNTraceListener read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNTraceListenerCollection = class(TDNGenericImport<DNTraceListenerCollectionClass, DNTraceListenerCollection>) end;

  //-------------namespace: System.Diagnostics----------------
  DNTraceSourceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{17E543D5-7E9B-5C2A-9746-6642520CE4CD}']
  { constructors } 

    {class} function init(name: string): DNTraceSource; overload;
    {class} function init(name: string; defaultLevel: DNSourceLevels): DNTraceSource; overload;

  end;

  [DNTypeName('System.Diagnostics.TraceSource')]
  DNTraceSource = interface(DDN.mscorlib.DNObject)
  ['{13C8399A-109C-3950-84ED-13F791D8E158}']
  { getters & setters } 

    function get_Attributes: DNStringDictionary;
    function get_Name: string;
    function get_Listeners: DNTraceListenerCollection;
    function get_Switch: DNSourceSwitch;
    procedure set_Switch(value: DNSourceSwitch);

  { methods } 

    procedure Close;
    procedure Flush;
    procedure TraceEvent(eventType: DNTraceEventType; id: Int32); overload;
    procedure TraceEvent(eventType: DNTraceEventType; id: Int32; message: string); overload;
    procedure TraceEvent(eventType: DNTraceEventType; id: Int32; format: string; args: TArray<DDN.mscorlib.DNObject>); overload;
    procedure TraceData(eventType: DNTraceEventType; id: Int32; data: DDN.mscorlib.DNObject); overload;
    procedure TraceData(eventType: DNTraceEventType; id: Int32; data: TArray<DDN.mscorlib.DNObject>); overload;
    procedure TraceInformation(message: string); overload;
    procedure TraceInformation(format: string; args: TArray<DDN.mscorlib.DNObject>); overload;
    procedure TraceTransfer(id: Int32; message: string; relatedActivityId: DDN.mscorlib.DNGuid);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Attributes: DNStringDictionary read get_Attributes;
    property Name: string read get_Name;
    property Listeners: DNTraceListenerCollection read get_Listeners;
    property Switch: DNSourceSwitch read get_Switch write set_Switch;
  end;

  TDNTraceSource = class(TDNGenericImport<DNTraceSourceClass, DNTraceSource>) end;

  //-------------namespace: Microsoft.Win32----------------
  DNPowerModeChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{19DDFA3F-1EF9-558A-B6F5-CC090CD9F6EB}']
  { constructors } 

    {class} function init(mode: DNPowerModes): DNPowerModeChangedEventArgs;

  end;

  [DNTypeName('Microsoft.Win32.PowerModeChangedEventArgs')]
  DNPowerModeChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{1351872C-00F9-3AF1-BC67-C204D236010B}']
  { getters & setters } 

    function get_Mode: DNPowerModes;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Mode: DNPowerModes read get_Mode;
  end;

  TDNPowerModeChangedEventArgs = class(TDNGenericImport<DNPowerModeChangedEventArgsClass, DNPowerModeChangedEventArgs>) end;

  //-------------namespace: Microsoft.Win32----------------
  DNSessionEndedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{DF42A6B4-CA6F-5AA3-BB8D-0D37F15B183B}']
  { constructors } 

    {class} function init(reason: DNSessionEndReasons): DNSessionEndedEventArgs;

  end;

  [DNTypeName('Microsoft.Win32.SessionEndedEventArgs')]
  DNSessionEndedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{273FBA8B-BA39-34DF-9E7B-142E059298F2}']
  { getters & setters } 

    function get_Reason: DNSessionEndReasons;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Reason: DNSessionEndReasons read get_Reason;
  end;

  TDNSessionEndedEventArgs = class(TDNGenericImport<DNSessionEndedEventArgsClass, DNSessionEndedEventArgs>) end;

  //-------------namespace: Microsoft.Win32----------------
  DNSessionEndingEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{4316560F-673A-5BE6-9623-C5EE369CCDC8}']
  { constructors } 

    {class} function init(reason: DNSessionEndReasons): DNSessionEndingEventArgs;

  end;

  [DNTypeName('Microsoft.Win32.SessionEndingEventArgs')]
  DNSessionEndingEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{A6914BFC-4FDE-3EBB-8C6A-B9533923B35F}']
  { getters & setters } 

    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);
    function get_Reason: DNSessionEndReasons;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Cancel: Boolean read get_Cancel write set_Cancel;
    property Reason: DNSessionEndReasons read get_Reason;
  end;

  TDNSessionEndingEventArgs = class(TDNGenericImport<DNSessionEndingEventArgsClass, DNSessionEndingEventArgs>) end;

  //-------------namespace: Microsoft.Win32----------------
  DNSessionSwitchEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{BDD4DD0A-45BC-574B-BDB6-58F072ED93FD}']
  { constructors } 

    {class} function init(reason: DNSessionSwitchReason): DNSessionSwitchEventArgs;

  end;

  [DNTypeName('Microsoft.Win32.SessionSwitchEventArgs')]
  DNSessionSwitchEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{C7CC61E0-B77B-35EC-B7D0-0169B4660DCF}']
  { getters & setters } 

    function get_Reason: DNSessionSwitchReason;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Reason: DNSessionSwitchReason read get_Reason;
  end;

  TDNSessionSwitchEventArgs = class(TDNGenericImport<DNSessionSwitchEventArgsClass, DNSessionSwitchEventArgs>) end;

  //-------------namespace: Microsoft.Win32----------------
  DNTimerElapsedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{13E53CDB-4502-5F87-9D9A-AF10AEA10027}']
  { constructors } 

    {class} function init(timerId: IntPtr): DNTimerElapsedEventArgs;

  end;

  [DNTypeName('Microsoft.Win32.TimerElapsedEventArgs')]
  DNTimerElapsedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{8A26F433-DA4D-3708-941F-67F1B5BEF0A1}']
  { getters & setters } 

    function get_TimerId: IntPtr;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TimerId: IntPtr read get_TimerId;
  end;

  TDNTimerElapsedEventArgs = class(TDNGenericImport<DNTimerElapsedEventArgsClass, DNTimerElapsedEventArgs>) end;

  //-------------namespace: Microsoft.Win32----------------
  DNUserPreferenceChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{06BEB08E-707B-5FE2-8062-6D139C945067}']
  { constructors } 

    {class} function init(category: DNUserPreferenceCategory): DNUserPreferenceChangedEventArgs;

  end;

  [DNTypeName('Microsoft.Win32.UserPreferenceChangedEventArgs')]
  DNUserPreferenceChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{20CEADE5-5DA6-3C74-A8E1-05C5541F3621}']
  { getters & setters } 

    function get_Category: DNUserPreferenceCategory;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Category: DNUserPreferenceCategory read get_Category;
  end;

  TDNUserPreferenceChangedEventArgs = class(TDNGenericImport<DNUserPreferenceChangedEventArgsClass, DNUserPreferenceChangedEventArgs>) end;

  //-------------namespace: Microsoft.Win32----------------
  DNUserPreferenceChangingEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{7D9A0E61-CA9F-5B82-8343-8B30069B4CB1}']
  { constructors } 

    {class} function init(category: DNUserPreferenceCategory): DNUserPreferenceChangingEventArgs;

  end;

  [DNTypeName('Microsoft.Win32.UserPreferenceChangingEventArgs')]
  DNUserPreferenceChangingEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{26177A51-B201-3279-8CE4-678272B879B2}']
  { getters & setters } 

    function get_Category: DNUserPreferenceCategory;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Category: DNUserPreferenceCategory read get_Category;
  end;

  TDNUserPreferenceChangingEventArgs = class(TDNGenericImport<DNUserPreferenceChangingEventArgsClass, DNUserPreferenceChangingEventArgs>) end;

  //-------------namespace: System.Collections.Specialized----------------
  DNNotifyCollectionChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{DC4620D0-AFA7-56CA-8651-04E033E20D55}']
  { constructors } 

    {class} function init(action: DNNotifyCollectionChangedAction): DNNotifyCollectionChangedEventArgs; overload;
    {class} function init(action: DNNotifyCollectionChangedAction; changedItem: DDN.mscorlib.DNObject): DNNotifyCollectionChangedEventArgs; overload;
    {class} function init(action: DNNotifyCollectionChangedAction; changedItem: DDN.mscorlib.DNObject; index: Int32): DNNotifyCollectionChangedEventArgs; overload;
    {class} function init(action: DNNotifyCollectionChangedAction; changedItems: DDN.mscorlib.DNIList): DNNotifyCollectionChangedEventArgs; overload;
    {class} function init(action: DNNotifyCollectionChangedAction; changedItems: DDN.mscorlib.DNIList; startingIndex: Int32): DNNotifyCollectionChangedEventArgs; overload;
    {class} function init(action: DNNotifyCollectionChangedAction; newItem: DDN.mscorlib.DNObject; oldItem: DDN.mscorlib.DNObject): DNNotifyCollectionChangedEventArgs; overload;
    {class} function init(action: DNNotifyCollectionChangedAction; newItem: DDN.mscorlib.DNObject; oldItem: DDN.mscorlib.DNObject; index: Int32): DNNotifyCollectionChangedEventArgs; overload;
    {class} function init(action: DNNotifyCollectionChangedAction; newItems: DDN.mscorlib.DNIList; oldItems: DDN.mscorlib.DNIList): DNNotifyCollectionChangedEventArgs; overload;
    {class} function init(action: DNNotifyCollectionChangedAction; newItems: DDN.mscorlib.DNIList; oldItems: DDN.mscorlib.DNIList; startingIndex: Int32): DNNotifyCollectionChangedEventArgs; overload;
    {class} function init(action: DNNotifyCollectionChangedAction; changedItem: DDN.mscorlib.DNObject; index: Int32; oldIndex: Int32): DNNotifyCollectionChangedEventArgs; overload;
    {class} function init(action: DNNotifyCollectionChangedAction; changedItems: DDN.mscorlib.DNIList; index: Int32; oldIndex: Int32): DNNotifyCollectionChangedEventArgs; overload;

  end;

  [DNTypeName('System.Collections.Specialized.NotifyCollectionChangedEventArgs')]
  DNNotifyCollectionChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{A7C2374A-4911-3983-82F4-CF5111EAFDF0}']
  { getters & setters } 

    function get_Action: DNNotifyCollectionChangedAction;
    function get_NewItems: DDN.mscorlib.DNIList;
    function get_OldItems: DDN.mscorlib.DNIList;
    function get_NewStartingIndex: Int32;
    function get_OldStartingIndex: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Action: DNNotifyCollectionChangedAction read get_Action;
    property NewItems: DDN.mscorlib.DNIList read get_NewItems;
    property OldItems: DDN.mscorlib.DNIList read get_OldItems;
    property NewStartingIndex: Int32 read get_NewStartingIndex;
    property OldStartingIndex: Int32 read get_OldStartingIndex;
  end;

  TDNNotifyCollectionChangedEventArgs = class(TDNGenericImport<DNNotifyCollectionChangedEventArgsClass, DNNotifyCollectionChangedEventArgs>) end;

  //-------------namespace: System.ComponentModel----------------
  DNAddingNewEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{7AE474C3-0302-5E0F-A471-6462D78D5EA0}']
  { constructors } 

    {class} function init: DNAddingNewEventArgs; overload;
    {class} function init(newObject: DDN.mscorlib.DNObject): DNAddingNewEventArgs; overload;

  end;

  [DNTypeName('System.ComponentModel.AddingNewEventArgs')]
  DNAddingNewEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{B0BBCA33-C00B-3613-8B0C-6181D8D8A602}']
  { getters & setters } 

    function get_NewObject: DDN.mscorlib.DNObject;
    procedure set_NewObject(value: DDN.mscorlib.DNObject);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NewObject: DDN.mscorlib.DNObject read get_NewObject write set_NewObject;
  end;

  TDNAddingNewEventArgs = class(TDNGenericImport<DNAddingNewEventArgsClass, DNAddingNewEventArgs>) end;

  //-------------namespace: System.ComponentModel----------------
  DNAsyncCompletedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{29C3E9DB-2FD7-545F-ABE4-21181334839E}']
  { constructors } 

    {class} function init: DNAsyncCompletedEventArgs; overload;
    {class} function init(error: DDN.mscorlib.DNException; cancelled: Boolean; userState: DDN.mscorlib.DNObject): DNAsyncCompletedEventArgs; overload;

  end;

  [DNTypeName('System.ComponentModel.AsyncCompletedEventArgs')]
  DNAsyncCompletedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{FB7EF278-BA12-30FB-91BD-58C29E1FCE30}']
  { getters & setters } 

    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNAsyncCompletedEventArgs = class(TDNGenericImport<DNAsyncCompletedEventArgsClass, DNAsyncCompletedEventArgs>) end;

  //-------------namespace: System.ComponentModel----------------
  DNRunWorkerCompletedEventArgsClass = interface(DNAsyncCompletedEventArgsClass)
  ['{85B53220-7E78-5706-8624-592C67068D6D}']
  { constructors } 

    {class} function init(result: DDN.mscorlib.DNObject; error: DDN.mscorlib.DNException; cancelled: Boolean): DNRunWorkerCompletedEventArgs;

  end;

  [DNTypeName('System.ComponentModel.RunWorkerCompletedEventArgs')]
  DNRunWorkerCompletedEventArgs = interface(DNAsyncCompletedEventArgs)
  ['{5584A247-E5C6-3F25-ACD9-44B8A4121B04}']
  { getters & setters } 

    function get_Result: DDN.mscorlib.DNObject;
    function get_UserState: DDN.mscorlib.DNObject;
    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Result: DDN.mscorlib.DNObject read get_Result;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
  end;

  TDNRunWorkerCompletedEventArgs = class(TDNGenericImport<DNRunWorkerCompletedEventArgsClass, DNRunWorkerCompletedEventArgs>) end;

  //-------------namespace: System.Net----------------
  DNDownloadDataCompletedEventArgsClass = interface(DNAsyncCompletedEventArgsClass)
  ['{F6CBA64D-60E7-523F-A801-DFF091EF357E}']
  end;

  [DNTypeName('System.Net.DownloadDataCompletedEventArgs')]
  DNDownloadDataCompletedEventArgs = interface(DNAsyncCompletedEventArgs)
  ['{C166AE60-3F38-308B-8E10-1A94361868C3}']
  { getters & setters } 

    function get_Result: TArray<Byte>;
    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Result: TArray<Byte> read get_Result;
    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNDownloadDataCompletedEventArgs = class(TDNGenericImport<DNDownloadDataCompletedEventArgsClass, DNDownloadDataCompletedEventArgs>) end;

  //-------------namespace: System.Net----------------
  DNDownloadStringCompletedEventArgsClass = interface(DNAsyncCompletedEventArgsClass)
  ['{95F9565B-CFE2-5143-9A49-8595001D6633}']
  end;

  [DNTypeName('System.Net.DownloadStringCompletedEventArgs')]
  DNDownloadStringCompletedEventArgs = interface(DNAsyncCompletedEventArgs)
  ['{091449D7-9B16-3E1C-8BB3-9D5CA8C9A9F1}']
  { getters & setters } 

    function get_Result: string;
    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Result: string read get_Result;
    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNDownloadStringCompletedEventArgs = class(TDNGenericImport<DNDownloadStringCompletedEventArgsClass, DNDownloadStringCompletedEventArgs>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNPingCompletedEventArgsClass = interface(DNAsyncCompletedEventArgsClass)
  ['{6A2A6956-FACF-54EB-92C4-402EB5848128}']
  end;

  [DNTypeName('System.Net.NetworkInformation.PingCompletedEventArgs')]
  DNPingCompletedEventArgs = interface(DNAsyncCompletedEventArgs)
  ['{C6B59AEA-E02C-3D0E-933D-C939A7D056A2}']
  { getters & setters } 

    function get_Reply: DNPingReply;
    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Reply: DNPingReply read get_Reply;
    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNPingCompletedEventArgs = class(TDNGenericImport<DNPingCompletedEventArgsClass, DNPingCompletedEventArgs>) end;

  //-------------namespace: System.Net----------------
  DNOpenReadCompletedEventArgsClass = interface(DNAsyncCompletedEventArgsClass)
  ['{9BFA306B-1471-5623-AD78-BDFD0992FCDC}']
  end;

  [DNTypeName('System.Net.OpenReadCompletedEventArgs')]
  DNOpenReadCompletedEventArgs = interface(DNAsyncCompletedEventArgs)
  ['{127D79A3-7935-3D8D-A11C-D3737040D69F}']
  { getters & setters } 

    function get_Result: DDN.mscorlib.DNStream;
    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Result: DDN.mscorlib.DNStream read get_Result;
    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNOpenReadCompletedEventArgs = class(TDNGenericImport<DNOpenReadCompletedEventArgsClass, DNOpenReadCompletedEventArgs>) end;

  //-------------namespace: System.Net----------------
  DNOpenWriteCompletedEventArgsClass = interface(DNAsyncCompletedEventArgsClass)
  ['{65D0F605-4ECB-5FE3-BED2-32EEA7D625BC}']
  end;

  [DNTypeName('System.Net.OpenWriteCompletedEventArgs')]
  DNOpenWriteCompletedEventArgs = interface(DNAsyncCompletedEventArgs)
  ['{92C1FEBA-F7EA-3C1B-B6D9-97440783BFBF}']
  { getters & setters } 

    function get_Result: DDN.mscorlib.DNStream;
    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Result: DDN.mscorlib.DNStream read get_Result;
    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNOpenWriteCompletedEventArgs = class(TDNGenericImport<DNOpenWriteCompletedEventArgsClass, DNOpenWriteCompletedEventArgs>) end;

  //-------------namespace: System.Net----------------
  DNUploadDataCompletedEventArgsClass = interface(DNAsyncCompletedEventArgsClass)
  ['{1E0F6307-7FB6-522A-BACB-5A7BA4B1CCD0}']
  end;

  [DNTypeName('System.Net.UploadDataCompletedEventArgs')]
  DNUploadDataCompletedEventArgs = interface(DNAsyncCompletedEventArgs)
  ['{76A0AD2F-4CC2-3486-8199-0BF9222EB755}']
  { getters & setters } 

    function get_Result: TArray<Byte>;
    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Result: TArray<Byte> read get_Result;
    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNUploadDataCompletedEventArgs = class(TDNGenericImport<DNUploadDataCompletedEventArgsClass, DNUploadDataCompletedEventArgs>) end;

  //-------------namespace: System.Net----------------
  DNUploadFileCompletedEventArgsClass = interface(DNAsyncCompletedEventArgsClass)
  ['{29755642-F8C4-581C-B407-17366198598C}']
  end;

  [DNTypeName('System.Net.UploadFileCompletedEventArgs')]
  DNUploadFileCompletedEventArgs = interface(DNAsyncCompletedEventArgs)
  ['{A00C63C3-3E81-3F1F-9B32-CF50A1B24C42}']
  { getters & setters } 

    function get_Result: TArray<Byte>;
    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Result: TArray<Byte> read get_Result;
    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNUploadFileCompletedEventArgs = class(TDNGenericImport<DNUploadFileCompletedEventArgsClass, DNUploadFileCompletedEventArgs>) end;

  //-------------namespace: System.Net----------------
  DNUploadStringCompletedEventArgsClass = interface(DNAsyncCompletedEventArgsClass)
  ['{52456F84-9FA5-5124-8D56-B77C8E521BA5}']
  end;

  [DNTypeName('System.Net.UploadStringCompletedEventArgs')]
  DNUploadStringCompletedEventArgs = interface(DNAsyncCompletedEventArgs)
  ['{42078058-AEB6-3BF4-BBEC-F51CA2B55A2D}']
  { getters & setters } 

    function get_Result: string;
    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Result: string read get_Result;
    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNUploadStringCompletedEventArgs = class(TDNGenericImport<DNUploadStringCompletedEventArgsClass, DNUploadStringCompletedEventArgs>) end;

  //-------------namespace: System.Net----------------
  DNUploadValuesCompletedEventArgsClass = interface(DNAsyncCompletedEventArgsClass)
  ['{32684BDE-DAC1-5889-B0D2-EE15E00D3B62}']
  end;

  [DNTypeName('System.Net.UploadValuesCompletedEventArgs')]
  DNUploadValuesCompletedEventArgs = interface(DNAsyncCompletedEventArgs)
  ['{E4AA12D0-0923-33AB-ABB0-37B442D3DF6E}']
  { getters & setters } 

    function get_Result: TArray<Byte>;
    function get_Cancelled: Boolean;
    function get_Error: DDN.mscorlib.DNException;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Result: TArray<Byte> read get_Result;
    property Cancelled: Boolean read get_Cancelled;
    property Error: DDN.mscorlib.DNException read get_Error;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNUploadValuesCompletedEventArgs = class(TDNGenericImport<DNUploadValuesCompletedEventArgsClass, DNUploadValuesCompletedEventArgs>) end;

  //-------------namespace: System.ComponentModel----------------
  DNCancelEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{8211894D-5C55-5C18-B669-8A95DF532EB8}']
  { constructors } 

    {class} function init: DNCancelEventArgs; overload;
    {class} function init(cancel: Boolean): DNCancelEventArgs; overload;

  end;

  [DNTypeName('System.ComponentModel.CancelEventArgs')]
  DNCancelEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{FBD7DB18-1E00-3218-9BBE-23C28E3296EC}']
  { getters & setters } 

    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNCancelEventArgs = class(TDNGenericImport<DNCancelEventArgsClass, DNCancelEventArgs>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDoWorkEventArgsClass = interface(DNCancelEventArgsClass)
  ['{C414A079-D872-5A69-8275-473DCA035D01}']
  { constructors } 

    {class} function init(argument: DDN.mscorlib.DNObject): DNDoWorkEventArgs;

  end;

  [DNTypeName('System.ComponentModel.DoWorkEventArgs')]
  DNDoWorkEventArgs = interface(DNCancelEventArgs)
  ['{FCCD0183-1EFD-3385-90DE-09D635F90298}']
  { getters & setters } 

    function get_Argument: DDN.mscorlib.DNObject;
    function get_Result: DDN.mscorlib.DNObject;
    procedure set_Result(value: DDN.mscorlib.DNObject);
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Argument: DDN.mscorlib.DNObject read get_Argument;
    property Result: DDN.mscorlib.DNObject read get_Result write set_Result;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNDoWorkEventArgs = class(TDNGenericImport<DNDoWorkEventArgsClass, DNDoWorkEventArgs>) end;

  //-------------namespace: System.ComponentModel----------------
  DNCollectionChangeEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{8357C1F2-3E89-5864-8DDF-A18A399F0DA0}']
  { constructors } 

    {class} function init(action: DNCollectionChangeAction; element: DDN.mscorlib.DNObject): DNCollectionChangeEventArgs;

  end;

  [DNTypeName('System.ComponentModel.CollectionChangeEventArgs')]
  DNCollectionChangeEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{A3BE1873-8DD5-3F22-8BE0-BCFC56A6F5BC}']
  { getters & setters } 

    function get_Action: DNCollectionChangeAction;
    function get_Element: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Action: DNCollectionChangeAction read get_Action;
    property Element: DDN.mscorlib.DNObject read get_Element;
  end;

  TDNCollectionChangeEventArgs = class(TDNGenericImport<DNCollectionChangeEventArgsClass, DNCollectionChangeEventArgs>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDataErrorsChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{38291B9B-8862-5F31-991F-1AF34AAEDE0C}']
  { constructors } 

    {class} function init(propertyName: string): DNDataErrorsChangedEventArgs;

  end;

  [DNTypeName('System.ComponentModel.DataErrorsChangedEventArgs')]
  DNDataErrorsChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{5997C817-6F9B-3BE7-96BF-300059099792}']
  { getters & setters } 

    function get_PropertyName: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PropertyName: string read get_PropertyName;
  end;

  TDNDataErrorsChangedEventArgs = class(TDNGenericImport<DNDataErrorsChangedEventArgsClass, DNDataErrorsChangedEventArgs>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNActiveDesignerEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{C5A3AF76-912E-5B1B-A31F-E1D169E89FC7}']
  { constructors } 

    {class} function init(oldDesigner: DNIDesignerHost; newDesigner: DNIDesignerHost): DNActiveDesignerEventArgs;

  end;

  [DNTypeName('System.ComponentModel.Design.ActiveDesignerEventArgs')]
  DNActiveDesignerEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{0ADAFCD6-2FF9-3565-808C-CCA927384613}']
  { getters & setters } 

    function get_OldDesigner: DNIDesignerHost;
    function get_NewDesigner: DNIDesignerHost;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OldDesigner: DNIDesignerHost read get_OldDesigner;
    property NewDesigner: DNIDesignerHost read get_NewDesigner;
  end;

  TDNActiveDesignerEventArgs = class(TDNGenericImport<DNActiveDesignerEventArgsClass, DNActiveDesignerEventArgs>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNComponentChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{D4D8B6E9-3061-52A2-9645-839A9CAB7F1F}']
  { constructors } 

    {class} function init(component: DDN.mscorlib.DNObject; member: DNMemberDescriptor; oldValue: DDN.mscorlib.DNObject; newValue: DDN.mscorlib.DNObject): DNComponentChangedEventArgs;

  end;

  [DNTypeName('System.ComponentModel.Design.ComponentChangedEventArgs')]
  DNComponentChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{06CBA6E8-112A-32BA-A7BF-7DCFE0404931}']
  { getters & setters } 

    function get_Component: DDN.mscorlib.DNObject;
    function get_Member: DNMemberDescriptor;
    function get_NewValue: DDN.mscorlib.DNObject;
    function get_OldValue: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Component: DDN.mscorlib.DNObject read get_Component;
    property Member: DNMemberDescriptor read get_Member;
    property NewValue: DDN.mscorlib.DNObject read get_NewValue;
    property OldValue: DDN.mscorlib.DNObject read get_OldValue;
  end;

  TDNComponentChangedEventArgs = class(TDNGenericImport<DNComponentChangedEventArgsClass, DNComponentChangedEventArgs>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNComponentChangingEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{AF5941AA-6A2A-5E95-AA65-87418F23A596}']
  { constructors } 

    {class} function init(component: DDN.mscorlib.DNObject; member: DNMemberDescriptor): DNComponentChangingEventArgs;

  end;

  [DNTypeName('System.ComponentModel.Design.ComponentChangingEventArgs')]
  DNComponentChangingEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{834C5649-9074-33F5-AB36-716D4AE08E9E}']
  { getters & setters } 

    function get_Component: DDN.mscorlib.DNObject;
    function get_Member: DNMemberDescriptor;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Component: DDN.mscorlib.DNObject read get_Component;
    property Member: DNMemberDescriptor read get_Member;
  end;

  TDNComponentChangingEventArgs = class(TDNGenericImport<DNComponentChangingEventArgsClass, DNComponentChangingEventArgs>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNComponentEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{BE8E85A1-766D-5CFE-ABC6-D5BEFFC2748F}']
  { constructors } 

    {class} function init(component: DNIComponent): DNComponentEventArgs;

  end;

  [DNTypeName('System.ComponentModel.Design.ComponentEventArgs')]
  DNComponentEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{CB919E0F-1205-37EC-AC02-38B51390629F}']
  { getters & setters } 

    function get_Component: DNIComponent;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Component: DNIComponent read get_Component;
  end;

  TDNComponentEventArgs = class(TDNGenericImport<DNComponentEventArgsClass, DNComponentEventArgs>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNComponentRenameEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{049045D2-7367-54C1-9021-E9F8CF1F65A4}']
  { constructors } 

    {class} function init(component: DDN.mscorlib.DNObject; oldName: string; newName: string): DNComponentRenameEventArgs;

  end;

  [DNTypeName('System.ComponentModel.Design.ComponentRenameEventArgs')]
  DNComponentRenameEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{F41E1B27-1C7C-3620-9662-BF72882E3F7E}']
  { getters & setters } 

    function get_Component: DDN.mscorlib.DNObject;
    function get_OldName: string;
    function get_NewName: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Component: DDN.mscorlib.DNObject read get_Component;
    property OldName: string read get_OldName;
    property NewName: string read get_NewName;
  end;

  TDNComponentRenameEventArgs = class(TDNGenericImport<DNComponentRenameEventArgsClass, DNComponentRenameEventArgs>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNDesignerEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{C062340B-EBB8-559B-B800-145189D274EC}']
  { constructors } 

    {class} function init(host: DNIDesignerHost): DNDesignerEventArgs;

  end;

  [DNTypeName('System.ComponentModel.Design.DesignerEventArgs')]
  DNDesignerEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{51E4F226-A15E-3FDC-B8FC-8F38F196C94A}']
  { getters & setters } 

    function get_Designer: DNIDesignerHost;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Designer: DNIDesignerHost read get_Designer;
  end;

  TDNDesignerEventArgs = class(TDNGenericImport<DNDesignerEventArgsClass, DNDesignerEventArgs>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNDesignerTransactionCloseEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{C74D3B19-6F7A-59B9-BFA5-8387DD1A5BE3}']
  { constructors } 

    {class} function init(commit: Boolean): DNDesignerTransactionCloseEventArgs; overload;
    {class} function init(commit: Boolean; lastTransaction: Boolean): DNDesignerTransactionCloseEventArgs; overload;

  end;

  [DNTypeName('System.ComponentModel.Design.DesignerTransactionCloseEventArgs')]
  DNDesignerTransactionCloseEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{C5D1EAB9-E039-399E-A709-9A0A7107A610}']
  { getters & setters } 

    function get_TransactionCommitted: Boolean;
    function get_LastTransaction: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TransactionCommitted: Boolean read get_TransactionCommitted;
    property LastTransaction: Boolean read get_LastTransaction;
  end;

  TDNDesignerTransactionCloseEventArgs = class(TDNGenericImport<DNDesignerTransactionCloseEventArgsClass, DNDesignerTransactionCloseEventArgs>) end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  DNResolveNameEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{1B021F1C-F9BC-5B88-AEB8-E12EEF3C8CEF}']
  { constructors } 

    {class} function init(name: string): DNResolveNameEventArgs;

  end;

  [DNTypeName('System.ComponentModel.Design.Serialization.ResolveNameEventArgs')]
  DNResolveNameEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{A5BD6A87-2BC5-34F6-8345-08BB1CB84DB3}']
  { getters & setters } 

    function get_Name: string;
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
  end;

  TDNResolveNameEventArgs = class(TDNGenericImport<DNResolveNameEventArgsClass, DNResolveNameEventArgs>) end;

  //-------------namespace: System.ComponentModel----------------
  DNHandledEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{5EA8651F-6698-5CBA-A2A3-2A5549CBF893}']
  { constructors } 

    {class} function init: DNHandledEventArgs; overload;
    {class} function init(defaultHandledValue: Boolean): DNHandledEventArgs; overload;

  end;

  [DNTypeName('System.ComponentModel.HandledEventArgs')]
  DNHandledEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{709AF0DE-B3C9-31DB-9FCB-15C48D5F548F}']
  { getters & setters } 

    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNHandledEventArgs = class(TDNGenericImport<DNHandledEventArgsClass, DNHandledEventArgs>) end;

  //-------------namespace: System.ComponentModel----------------
  DNListChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{2CB56579-6023-53C8-9532-2ED3C07398A1}']
  { constructors } 

    {class} function init(listChangedType: DNListChangedType; newIndex: Int32): DNListChangedEventArgs; overload;
    {class} function init(listChangedType: DNListChangedType; newIndex: Int32; propDesc: DNPropertyDescriptor): DNListChangedEventArgs; overload;
    {class} function init(listChangedType: DNListChangedType; propDesc: DNPropertyDescriptor): DNListChangedEventArgs; overload;
    {class} function init(listChangedType: DNListChangedType; newIndex: Int32; oldIndex: Int32): DNListChangedEventArgs; overload;

  end;

  [DNTypeName('System.ComponentModel.ListChangedEventArgs')]
  DNListChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{C7AAB3F1-E25D-36A2-B1BC-9082B8E2E07B}']
  { getters & setters } 

    function get_ListChangedType: DNListChangedType;
    function get_NewIndex: Int32;
    function get_OldIndex: Int32;
    function get_PropertyDescriptor: DNPropertyDescriptor;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ListChangedType: DNListChangedType read get_ListChangedType;
    property NewIndex: Int32 read get_NewIndex;
    property OldIndex: Int32 read get_OldIndex;
    property PropertyDescriptor: DNPropertyDescriptor read get_PropertyDescriptor;
  end;

  TDNListChangedEventArgs = class(TDNGenericImport<DNListChangedEventArgsClass, DNListChangedEventArgs>) end;

  //-------------namespace: System.ComponentModel----------------
  DNProgressChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{554C6787-77E7-550B-ABF4-384941770769}']
  { constructors } 

    {class} function init(progressPercentage: Int32; userState: DDN.mscorlib.DNObject): DNProgressChangedEventArgs;

  end;

  [DNTypeName('System.ComponentModel.ProgressChangedEventArgs')]
  DNProgressChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{4BD125C8-1FDE-337C-9B5B-787C41620812}']
  { getters & setters } 

    function get_ProgressPercentage: Int32;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ProgressPercentage: Int32 read get_ProgressPercentage;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNProgressChangedEventArgs = class(TDNGenericImport<DNProgressChangedEventArgsClass, DNProgressChangedEventArgs>) end;

  //-------------namespace: System.Net----------------
  DNDownloadProgressChangedEventArgsClass = interface(DNProgressChangedEventArgsClass)
  ['{333F540E-FB51-5918-941B-2952C7859CA4}']
  end;

  [DNTypeName('System.Net.DownloadProgressChangedEventArgs')]
  DNDownloadProgressChangedEventArgs = interface(DNProgressChangedEventArgs)
  ['{7C55CF3F-7B74-3580-A216-ECEF1F502B13}']
  { getters & setters } 

    function get_BytesReceived: Int64;
    function get_TotalBytesToReceive: Int64;
    function get_ProgressPercentage: Int32;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BytesReceived: Int64 read get_BytesReceived;
    property TotalBytesToReceive: Int64 read get_TotalBytesToReceive;
    property ProgressPercentage: Int32 read get_ProgressPercentage;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNDownloadProgressChangedEventArgs = class(TDNGenericImport<DNDownloadProgressChangedEventArgsClass, DNDownloadProgressChangedEventArgs>) end;

  //-------------namespace: System.Net----------------
  DNUploadProgressChangedEventArgsClass = interface(DNProgressChangedEventArgsClass)
  ['{BDF94280-1D68-5771-AF04-CF60C9C6E260}']
  end;

  [DNTypeName('System.Net.UploadProgressChangedEventArgs')]
  DNUploadProgressChangedEventArgs = interface(DNProgressChangedEventArgs)
  ['{ECFB8D43-B58A-3352-A78F-5990717B330D}']
  { getters & setters } 

    function get_BytesReceived: Int64;
    function get_TotalBytesToReceive: Int64;
    function get_BytesSent: Int64;
    function get_TotalBytesToSend: Int64;
    function get_ProgressPercentage: Int32;
    function get_UserState: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BytesReceived: Int64 read get_BytesReceived;
    property TotalBytesToReceive: Int64 read get_TotalBytesToReceive;
    property BytesSent: Int64 read get_BytesSent;
    property TotalBytesToSend: Int64 read get_TotalBytesToSend;
    property ProgressPercentage: Int32 read get_ProgressPercentage;
    property UserState: DDN.mscorlib.DNObject read get_UserState;
  end;

  TDNUploadProgressChangedEventArgs = class(TDNGenericImport<DNUploadProgressChangedEventArgsClass, DNUploadProgressChangedEventArgs>) end;

  //-------------namespace: System.ComponentModel----------------
  DNPropertyChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{26C79417-0E71-504B-85B2-6E6F0CF902B6}']
  { constructors } 

    {class} function init(propertyName: string): DNPropertyChangedEventArgs;

  end;

  [DNTypeName('System.ComponentModel.PropertyChangedEventArgs')]
  DNPropertyChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{D3C091DF-E4B3-3743-95AF-7F39D21EBEF0}']
  { getters & setters } 

    function get_PropertyName: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PropertyName: string read get_PropertyName;
  end;

  TDNPropertyChangedEventArgs = class(TDNGenericImport<DNPropertyChangedEventArgsClass, DNPropertyChangedEventArgs>) end;

  //-------------namespace: System.ComponentModel----------------
  DNPropertyChangingEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{75539B7C-C064-58A7-AC7F-B060CA5E871E}']
  { constructors } 

    {class} function init(propertyName: string): DNPropertyChangingEventArgs;

  end;

  [DNTypeName('System.ComponentModel.PropertyChangingEventArgs')]
  DNPropertyChangingEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{478E8096-1979-3F2E-8241-CD958C59DF96}']
  { getters & setters } 

    function get_PropertyName: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PropertyName: string read get_PropertyName;
  end;

  TDNPropertyChangingEventArgs = class(TDNGenericImport<DNPropertyChangingEventArgsClass, DNPropertyChangingEventArgs>) end;

  //-------------namespace: System.ComponentModel----------------
  DNRefreshEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{6E9589A9-D0DC-5AB0-8A72-2E0E600E3D65}']
  { constructors } 

    {class} function init(componentChanged: DDN.mscorlib.DNObject): DNRefreshEventArgs; overload;
    {class} function init(typeChanged: DDN.mscorlib.DNType): DNRefreshEventArgs; overload;

  end;

  [DNTypeName('System.ComponentModel.RefreshEventArgs')]
  DNRefreshEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{EC38E934-9A40-3C19-A58B-FC159321683F}']
  { getters & setters } 

    function get_ComponentChanged: DDN.mscorlib.DNObject;
    function get_TypeChanged: DDN.mscorlib.DNType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ComponentChanged: DDN.mscorlib.DNObject read get_ComponentChanged;
    property TypeChanged: DDN.mscorlib.DNType read get_TypeChanged;
  end;

  TDNRefreshEventArgs = class(TDNGenericImport<DNRefreshEventArgsClass, DNRefreshEventArgs>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDataReceivedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{2966D560-E72C-5580-AFE4-1846C9B2D340}']
  end;

  [DNTypeName('System.Diagnostics.DataReceivedEventArgs')]
  DNDataReceivedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{59BECBF2-FC40-32EB-90F9-6AF6333E517A}']
  { getters & setters } 

    function get_Data: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Data: string read get_Data;
  end;

  TDNDataReceivedEventArgs = class(TDNGenericImport<DNDataReceivedEventArgsClass, DNDataReceivedEventArgs>) end;

  //-------------namespace: System.Diagnostics----------------
  DNEntryWrittenEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{A0B8FFFA-727B-566C-8288-D0F481A4FC01}']
  { constructors } 

    {class} function init: DNEntryWrittenEventArgs; overload;
    {class} function init(entry: DNEventLogEntry): DNEntryWrittenEventArgs; overload;

  end;

  [DNTypeName('System.Diagnostics.EntryWrittenEventArgs')]
  DNEntryWrittenEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{6495403C-1F7D-3F90-BDCF-D579BFEC455C}']
  { getters & setters } 

    function get_Entry: DNEventLogEntry;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Entry: DNEventLogEntry read get_Entry;
  end;

  TDNEntryWrittenEventArgs = class(TDNGenericImport<DNEntryWrittenEventArgsClass, DNEntryWrittenEventArgs>) end;

  //-------------namespace: System.IO----------------
  DNErrorEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{D0B120A2-BF87-53D7-9D1E-296889BA8B44}']
  { constructors } 

    {class} function init(exception: DDN.mscorlib.DNException): DNErrorEventArgs;

  end;

  [DNTypeName('System.IO.ErrorEventArgs')]
  DNErrorEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{1DD81C51-220B-3444-937C-12FAE9F3CE57}']
  { methods } 

    function GetException: DDN.mscorlib.DNException;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNErrorEventArgs = class(TDNGenericImport<DNErrorEventArgsClass, DNErrorEventArgs>) end;

  //-------------namespace: System.IO----------------
  DNFileSystemEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{EE512B25-EA8A-556E-831B-49E7E9CA1955}']
  { constructors } 

    {class} function init(changeType: DNWatcherChangeTypes; directory: string; name: string): DNFileSystemEventArgs;

  end;

  [DNTypeName('System.IO.FileSystemEventArgs')]
  DNFileSystemEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{6EDB998F-3E0E-324A-BC13-13B2A96F3E2F}']
  { getters & setters } 

    function get_ChangeType: DNWatcherChangeTypes;
    function get_FullPath: string;
    function get_Name: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ChangeType: DNWatcherChangeTypes read get_ChangeType;
    property FullPath: string read get_FullPath;
    property Name: string read get_Name;
  end;

  TDNFileSystemEventArgs = class(TDNGenericImport<DNFileSystemEventArgsClass, DNFileSystemEventArgs>) end;

  //-------------namespace: System.IO----------------
  DNRenamedEventArgsClass = interface(DNFileSystemEventArgsClass)
  ['{EE0F30D5-649D-5830-A8B7-54E6AC849753}']
  { constructors } 

    {class} function init(changeType: DNWatcherChangeTypes; directory: string; name: string; oldName: string): DNRenamedEventArgs;

  end;

  [DNTypeName('System.IO.RenamedEventArgs')]
  DNRenamedEventArgs = interface(DNFileSystemEventArgs)
  ['{2AB86772-9CEE-3802-A087-EE04037CA3E9}']
  { getters & setters } 

    function get_OldFullPath: string;
    function get_OldName: string;
    function get_ChangeType: DNWatcherChangeTypes;
    function get_FullPath: string;
    function get_Name: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OldFullPath: string read get_OldFullPath;
    property OldName: string read get_OldName;
    property ChangeType: DNWatcherChangeTypes read get_ChangeType;
    property FullPath: string read get_FullPath;
    property Name: string read get_Name;
  end;

  TDNRenamedEventArgs = class(TDNGenericImport<DNRenamedEventArgsClass, DNRenamedEventArgs>) end;

  //-------------namespace: System.IO.Ports----------------
  DNSerialDataReceivedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{86CA584C-5295-5A6B-AD45-4820F9FC7C61}']
  end;

  [DNTypeName('System.IO.Ports.SerialDataReceivedEventArgs')]
  DNSerialDataReceivedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{EFC417F1-A985-3AD1-984C-6E83335826EB}']
  { getters & setters } 

    function get_EventType: DNSerialData;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EventType: DNSerialData read get_EventType;
  end;

  TDNSerialDataReceivedEventArgs = class(TDNGenericImport<DNSerialDataReceivedEventArgsClass, DNSerialDataReceivedEventArgs>) end;

  //-------------namespace: System.IO.Ports----------------
  DNSerialErrorReceivedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{CA2EFF49-E356-5F0F-BF76-3DBDCD5BB1B0}']
  end;

  [DNTypeName('System.IO.Ports.SerialErrorReceivedEventArgs')]
  DNSerialErrorReceivedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{0D48D522-BEBD-3A92-BF7F-7815FC740D81}']
  { getters & setters } 

    function get_EventType: DNSerialError;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EventType: DNSerialError read get_EventType;
  end;

  TDNSerialErrorReceivedEventArgs = class(TDNGenericImport<DNSerialErrorReceivedEventArgsClass, DNSerialErrorReceivedEventArgs>) end;

  //-------------namespace: System.IO.Ports----------------
  DNSerialPinChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{36068224-B330-5B17-9F9E-3E2537BAD820}']
  end;

  [DNTypeName('System.IO.Ports.SerialPinChangedEventArgs')]
  DNSerialPinChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{42DB96E0-F45A-3BC6-AE9A-17A08846A7DA}']
  { getters & setters } 

    function get_EventType: DNSerialPinChange;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EventType: DNSerialPinChange read get_EventType;
  end;

  TDNSerialPinChangedEventArgs = class(TDNGenericImport<DNSerialPinChangedEventArgsClass, DNSerialPinChangedEventArgs>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNNetworkAvailabilityEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{ED5EA483-45E5-5F32-B056-C35E6819F2D9}']
  end;

  [DNTypeName('System.Net.NetworkInformation.NetworkAvailabilityEventArgs')]
  DNNetworkAvailabilityEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{B6906E9F-3C3C-36A6-8F89-7886823CB97E}']
  { getters & setters } 

    function get_IsAvailable: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsAvailable: Boolean read get_IsAvailable;
  end;

  TDNNetworkAvailabilityEventArgs = class(TDNGenericImport<DNNetworkAvailabilityEventArgsClass, DNNetworkAvailabilityEventArgs>) end;

  //-------------namespace: System.Net.Sockets----------------
  DNSocketAsyncEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{1DEEE548-BB66-55EA-BCCE-CB97CD6B5B7B}']
  { constructors } 

    {class} function init: DNSocketAsyncEventArgs;

  end;

  [DNTypeName('System.Net.Sockets.SocketAsyncEventArgs')]
  DNSocketAsyncEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{16AB9BC4-44B5-3DFE-811E-347901386670}']
  { getters & setters } 

    function get_SocketClientAccessPolicyProtocol: DNSocketClientAccessPolicyProtocol;
    procedure set_SocketClientAccessPolicyProtocol(value: DNSocketClientAccessPolicyProtocol);
    function get_AcceptSocket: DNSocket;
    procedure set_AcceptSocket(value: DNSocket);
    function get_ConnectSocket: DNSocket;
    function get_Buffer: TArray<Byte>;
    function get_Offset: Int32;
    function get_Count: Int32;
    function get_BufferList: DDN.mscorlib.DNIList<DDN.mscorlib.DNArraySegment<Byte>>;
    procedure set_BufferList(value: DDN.mscorlib.DNIList<DDN.mscorlib.DNArraySegment<Byte>>);
    function get_BytesTransferred: Int32;
    function get_DisconnectReuseSocket: Boolean;
    procedure set_DisconnectReuseSocket(value: Boolean);
    function get_LastOperation: DNSocketAsyncOperation;
    function get_ReceiveMessageFromPacketInfo: DNIPPacketInformation;
    function get_RemoteEndPoint: DNEndPoint;
    procedure set_RemoteEndPoint(value: DNEndPoint);
    function get_SendPacketsElements: TArray<DNSendPacketsElement>;
    procedure set_SendPacketsElements(value: TArray<DNSendPacketsElement>);
    function get_SendPacketsFlags: DNTransmitFileOptions;
    procedure set_SendPacketsFlags(value: DNTransmitFileOptions);
    function get_SendPacketsSendSize: Int32;
    procedure set_SendPacketsSendSize(value: Int32);
    function get_SocketError: DNSocketError;
    procedure set_SocketError(value: DNSocketError);
    function get_ConnectByNameError: DDN.mscorlib.DNException;
    function get_SocketFlags: DNSocketFlags;
    procedure set_SocketFlags(value: DNSocketFlags);
    function get_UserToken: DDN.mscorlib.DNObject;
    procedure set_UserToken(value: DDN.mscorlib.DNObject);

  { events } 

    procedure add_Completed(value: DDN.mscorlib.DNEventHandler<DNSocketAsyncEventArgs>);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler<DNSocketAsyncEventArgs>);

  { methods } 

    procedure SetBuffer(buffer: TArray<Byte>; offset: Int32; count: Int32); overload;
    procedure SetBuffer(offset: Int32; count: Int32); overload;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SocketClientAccessPolicyProtocol: DNSocketClientAccessPolicyProtocol read get_SocketClientAccessPolicyProtocol write set_SocketClientAccessPolicyProtocol;
    property AcceptSocket: DNSocket read get_AcceptSocket write set_AcceptSocket;
    property ConnectSocket: DNSocket read get_ConnectSocket;
    property Buffer: TArray<Byte> read get_Buffer;
    property Offset: Int32 read get_Offset;
    property Count: Int32 read get_Count;
    property BufferList: DDN.mscorlib.DNIList<DDN.mscorlib.DNArraySegment<Byte>> read get_BufferList write set_BufferList;
    property BytesTransferred: Int32 read get_BytesTransferred;
    property DisconnectReuseSocket: Boolean read get_DisconnectReuseSocket write set_DisconnectReuseSocket;
    property LastOperation: DNSocketAsyncOperation read get_LastOperation;
    property ReceiveMessageFromPacketInfo: DNIPPacketInformation read get_ReceiveMessageFromPacketInfo;
    property RemoteEndPoint: DNEndPoint read get_RemoteEndPoint write set_RemoteEndPoint;
    property SendPacketsElements: TArray<DNSendPacketsElement> read get_SendPacketsElements write set_SendPacketsElements;
    property SendPacketsFlags: DNTransmitFileOptions read get_SendPacketsFlags write set_SendPacketsFlags;
    property SendPacketsSendSize: Int32 read get_SendPacketsSendSize write set_SendPacketsSendSize;
    property SocketError: DNSocketError read get_SocketError write set_SocketError;
    property ConnectByNameError: DDN.mscorlib.DNException read get_ConnectByNameError;
    property SocketFlags: DNSocketFlags read get_SocketFlags write set_SocketFlags;
    property UserToken: DDN.mscorlib.DNObject read get_UserToken write set_UserToken;
  end;

  TDNSocketAsyncEventArgs = class(TDNGenericImport<DNSocketAsyncEventArgsClass, DNSocketAsyncEventArgs>) end;

  //-------------namespace: System.Net----------------
  DNWriteStreamClosedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{6B9E8E83-CFB2-565B-A625-176AB2FAE8BF}']
  { constructors } 

    {class} function init: DNWriteStreamClosedEventArgs;

  end;

  [DNTypeName('System.Net.WriteStreamClosedEventArgs')]
  DNWriteStreamClosedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{3B91AE25-BF91-35B6-97D3-F19EA91642F0}']
  { getters & setters } 

    function get_Error: DDN.mscorlib.DNException;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Error: DDN.mscorlib.DNException read get_Error;
  end;

  TDNWriteStreamClosedEventArgs = class(TDNGenericImport<DNWriteStreamClosedEventArgsClass, DNWriteStreamClosedEventArgs>) end;

  //-------------namespace: System.Threading----------------
  DNThreadExceptionEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{1761A90C-F7A4-518A-97A4-A81843352850}']
  { constructors } 

    {class} function init(t: DDN.mscorlib.DNException): DNThreadExceptionEventArgs;

  end;

  [DNTypeName('System.Threading.ThreadExceptionEventArgs')]
  DNThreadExceptionEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{5D24D2B3-D7A7-358C-9FDF-AC6C9C135A50}']
  { getters & setters } 

    function get_Exception: DDN.mscorlib.DNException;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Exception: DDN.mscorlib.DNException read get_Exception;
  end;

  TDNThreadExceptionEventArgs = class(TDNGenericImport<DNThreadExceptionEventArgsClass, DNThreadExceptionEventArgs>) end;

  //-------------namespace: System.Timers----------------
  DNElapsedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{862E8085-327B-52DC-A40B-6BD8A91E7307}']
  end;

  [DNTypeName('System.Timers.ElapsedEventArgs')]
  DNElapsedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{A6BEEB9E-3CEA-37CA-B106-560E3CB643B4}']
  { getters & setters } 

    function get_SignalTime: DDN.mscorlib.DNDateTime;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SignalTime: DDN.mscorlib.DNDateTime read get_SignalTime;
  end;

  TDNElapsedEventArgs = class(TDNGenericImport<DNElapsedEventArgsClass, DNElapsedEventArgs>) end;

  //-------------namespace: System.Net.Mail----------------
  DNSmtpExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{55B18E8E-CE07-552F-840B-353440A1FEFC}']
  { constructors } 

    {class} function init(statusCode: DNSmtpStatusCode): DNSmtpException; overload;
    {class} function init(statusCode: DNSmtpStatusCode; message: string): DNSmtpException; overload;
    {class} function init: DNSmtpException; overload;
    {class} function init(message: string): DNSmtpException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNSmtpException; overload;

  end;

  [DNTypeName('System.Net.Mail.SmtpException')]
  DNSmtpException = interface(DDN.mscorlib.DNException)
  ['{35915CB3-440F-3B9A-9BC8-A0692368DDE4}']
  { getters & setters } 

    function get_StatusCode: DNSmtpStatusCode;
    procedure set_StatusCode(value: DNSmtpStatusCode);
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(serializationInfo: DDN.mscorlib.DNSerializationInfo; streamingContext: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property StatusCode: DNSmtpStatusCode read get_StatusCode write set_StatusCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSmtpException = class(TDNGenericImport<DNSmtpExceptionClass, DNSmtpException>) end;

  //-------------namespace: System.Net.Mail----------------
  DNSmtpFailedRecipientExceptionClass = interface(DNSmtpExceptionClass)
  ['{DF7064C1-5997-55C3-8086-959FB2AADCE8}']
  { constructors } 

    {class} function init: DNSmtpFailedRecipientException; overload;
    {class} function init(message: string): DNSmtpFailedRecipientException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNSmtpFailedRecipientException; overload;
    {class} function init(statusCode: DNSmtpStatusCode; failedRecipient: string): DNSmtpFailedRecipientException; overload;
    {class} function init(statusCode: DNSmtpStatusCode; failedRecipient: string; serverResponse: string): DNSmtpFailedRecipientException; overload;
    {class} function init(message: string; failedRecipient: string; innerException: DDN.mscorlib.DNException): DNSmtpFailedRecipientException; overload;

  end;

  [DNTypeName('System.Net.Mail.SmtpFailedRecipientException')]
  DNSmtpFailedRecipientException = interface(DNSmtpException)
  ['{EB384164-4B23-3B55-A639-97FF39E8F8F2}']
  { getters & setters } 

    function get_FailedRecipient: string;
    function get_StatusCode: DNSmtpStatusCode;
    procedure set_StatusCode(value: DNSmtpStatusCode);
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(serializationInfo: DDN.mscorlib.DNSerializationInfo; streamingContext: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property FailedRecipient: string read get_FailedRecipient;
    property StatusCode: DNSmtpStatusCode read get_StatusCode write set_StatusCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSmtpFailedRecipientException = class(TDNGenericImport<DNSmtpFailedRecipientExceptionClass, DNSmtpFailedRecipientException>) end;

  //-------------namespace: System.Net.Mail----------------
  DNSmtpFailedRecipientsExceptionClass = interface(DNSmtpFailedRecipientExceptionClass)
  ['{C80327EE-8CF7-5ED1-B78A-4643A9034A81}']
  { constructors } 

    {class} function init: DNSmtpFailedRecipientsException; overload;
    {class} function init(message: string): DNSmtpFailedRecipientsException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNSmtpFailedRecipientsException; overload;
    {class} function init(message: string; innerExceptions: TArray<DNSmtpFailedRecipientException>): DNSmtpFailedRecipientsException; overload;

  end;

  [DNTypeName('System.Net.Mail.SmtpFailedRecipientsException')]
  DNSmtpFailedRecipientsException = interface(DNSmtpFailedRecipientException)
  ['{8FF1AD67-D751-391D-9AFD-E14903E6D9E5}']
  { getters & setters } 

    function get_InnerExceptions: TArray<DNSmtpFailedRecipientException>;
    function get_FailedRecipient: string;
    function get_StatusCode: DNSmtpStatusCode;
    procedure set_StatusCode(value: DNSmtpStatusCode);
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(serializationInfo: DDN.mscorlib.DNSerializationInfo; streamingContext: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property InnerExceptions: TArray<DNSmtpFailedRecipientException> read get_InnerExceptions;
    property FailedRecipient: string read get_FailedRecipient;
    property StatusCode: DNSmtpStatusCode read get_StatusCode write set_StatusCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSmtpFailedRecipientsException = class(TDNGenericImport<DNSmtpFailedRecipientsExceptionClass, DNSmtpFailedRecipientsException>) end;

  //-------------namespace: System.ComponentModel----------------
  DNInvalidAsynchronousStateExceptionClass = interface(DDN.mscorlib.DNArgumentExceptionClass)
  ['{B2BFDB90-525D-587A-96B0-9E72854782F8}']
  { constructors } 

    {class} function init: DNInvalidAsynchronousStateException; overload;
    {class} function init(message: string): DNInvalidAsynchronousStateException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNInvalidAsynchronousStateException; overload;

  end;

  [DNTypeName('System.ComponentModel.InvalidAsynchronousStateException')]
  DNInvalidAsynchronousStateException = interface(DDN.mscorlib.DNArgumentException)
  ['{60519677-7A6E-368A-92EA-584CDC7CCDEF}']
  { getters & setters } 

    function get_Message: string;
    function get_ParamName: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property ParamName: string read get_ParamName;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidAsynchronousStateException = class(TDNGenericImport<DNInvalidAsynchronousStateExceptionClass, DNInvalidAsynchronousStateException>) end;

  //-------------namespace: System.ComponentModel----------------
  DNInvalidEnumArgumentExceptionClass = interface(DDN.mscorlib.DNArgumentExceptionClass)
  ['{DD66E73A-1A06-5071-B69C-CBB61FF6E136}']
  { constructors } 

    {class} function init: DNInvalidEnumArgumentException; overload;
    {class} function init(message: string): DNInvalidEnumArgumentException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNInvalidEnumArgumentException; overload;
    {class} function init(argumentName: string; invalidValue: Int32; enumClass: DDN.mscorlib.DNType): DNInvalidEnumArgumentException; overload;

  end;

  [DNTypeName('System.ComponentModel.InvalidEnumArgumentException')]
  DNInvalidEnumArgumentException = interface(DDN.mscorlib.DNArgumentException)
  ['{3802E485-5013-3DDE-8720-59A445F4776B}']
  { getters & setters } 

    function get_Message: string;
    function get_ParamName: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property ParamName: string read get_ParamName;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidEnumArgumentException = class(TDNGenericImport<DNInvalidEnumArgumentExceptionClass, DNInvalidEnumArgumentException>) end;

  //-------------namespace: System.ComponentModel----------------
  DNLicenseExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{D9CBED8A-FD48-5B55-AAA5-6D699DBD98BA}']
  { constructors } 

    {class} function init(&type: DDN.mscorlib.DNType): DNLicenseException; overload;
    {class} function init(&type: DDN.mscorlib.DNType; instance: DDN.mscorlib.DNObject): DNLicenseException; overload;
    {class} function init(&type: DDN.mscorlib.DNType; instance: DDN.mscorlib.DNObject; message: string): DNLicenseException; overload;
    {class} function init(&type: DDN.mscorlib.DNType; instance: DDN.mscorlib.DNObject; message: string; innerException: DDN.mscorlib.DNException): DNLicenseException; overload;

  end;

  [DNTypeName('System.ComponentModel.LicenseException')]
  DNLicenseException = interface(DDN.mscorlib.DNSystemException)
  ['{BD7D8CD8-373C-3873-9D25-C180D03205DF}']
  { getters & setters } 

    function get_LicensedType: DDN.mscorlib.DNType;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property LicensedType: DDN.mscorlib.DNType read get_LicensedType;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNLicenseException = class(TDNGenericImport<DNLicenseExceptionClass, DNLicenseException>) end;

  //-------------namespace: System.ComponentModel----------------
  DNWarningExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{27B13706-4F8C-5F4D-8AA2-F7EE66633BAF}']
  { constructors } 

    {class} function init: DNWarningException; overload;
    {class} function init(message: string): DNWarningException; overload;
    {class} function init(message: string; helpUrl: string): DNWarningException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNWarningException; overload;
    {class} function init(message: string; helpUrl: string; helpTopic: string): DNWarningException; overload;

  end;

  [DNTypeName('System.ComponentModel.WarningException')]
  DNWarningException = interface(DDN.mscorlib.DNSystemException)
  ['{D45A29AF-DFE4-3928-B526-270406D86D47}']
  { getters & setters } 

    function get_HelpUrl: string;
    function get_HelpTopic: string;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property HelpUrl: string read get_HelpUrl;
    property HelpTopic: string read get_HelpTopic;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNWarningException = class(TDNGenericImport<DNWarningExceptionClass, DNWarningException>) end;

  //-------------namespace: System.Net----------------
  DNCookieExceptionClass = interface(DDN.mscorlib.DNFormatExceptionClass)
  ['{A311C8F5-1B63-5825-A056-687F9B799658}']
  { constructors } 

    {class} function init: DNCookieException;

  end;

  [DNTypeName('System.Net.CookieException')]
  DNCookieException = interface(DDN.mscorlib.DNFormatException)
  ['{16538EEA-F4ED-3AD7-9405-2B9B7B5E8C56}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(serializationInfo: DDN.mscorlib.DNSerializationInfo; streamingContext: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCookieException = class(TDNGenericImport<DNCookieExceptionClass, DNCookieException>) end;

  //-------------namespace: System----------------
  DNUriFormatExceptionClass = interface(DDN.mscorlib.DNFormatExceptionClass)
  ['{4EE860A3-2A06-5EFD-BD92-FC003F67634B}']
  { constructors } 

    {class} function init: DNUriFormatException; overload;
    {class} function init(textString: string): DNUriFormatException; overload;
    {class} function init(textString: string; e: DDN.mscorlib.DNException): DNUriFormatException; overload;

  end;

  [DNTypeName('System.UriFormatException')]
  DNUriFormatException = interface(DDN.mscorlib.DNFormatException)
  ['{6E166C25-C510-3721-B814-17D72AADC821}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNUriFormatException = class(TDNGenericImport<DNUriFormatExceptionClass, DNUriFormatException>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNPingExceptionClass = interface(DDN.mscorlib.DNInvalidOperationExceptionClass)
  ['{AD652CB8-F77A-5C87-AF0D-9E55B846E63B}']
  { constructors } 

    {class} function init(message: string): DNPingException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNPingException; overload;

  end;

  [DNTypeName('System.Net.NetworkInformation.PingException')]
  DNPingException = interface(DDN.mscorlib.DNInvalidOperationException)
  ['{96CAA3CD-CAB6-37FA-9D86-BF4BDBBCEED5}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPingException = class(TDNGenericImport<DNPingExceptionClass, DNPingException>) end;

  //-------------namespace: System.Net----------------
  DNProtocolViolationExceptionClass = interface(DDN.mscorlib.DNInvalidOperationExceptionClass)
  ['{5ADCB561-0D53-5372-8C0A-88EA150A115F}']
  { constructors } 

    {class} function init: DNProtocolViolationException; overload;
    {class} function init(message: string): DNProtocolViolationException; overload;

  end;

  [DNTypeName('System.Net.ProtocolViolationException')]
  DNProtocolViolationException = interface(DDN.mscorlib.DNInvalidOperationException)
  ['{3E0016DE-817D-3548-B64E-A0EE38854A4D}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(serializationInfo: DDN.mscorlib.DNSerializationInfo; streamingContext: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNProtocolViolationException = class(TDNGenericImport<DNProtocolViolationExceptionClass, DNProtocolViolationException>) end;

  //-------------namespace: System.Net----------------
  DNWebExceptionClass = interface(DDN.mscorlib.DNInvalidOperationExceptionClass)
  ['{5567AEF6-23E9-5446-9BF0-B3A07D4BB823}']
  { constructors } 

    {class} function init: DNWebException; overload;
    {class} function init(message: string): DNWebException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNWebException; overload;
    {class} function init(message: string; status: DNWebExceptionStatus): DNWebException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException; status: DNWebExceptionStatus; response: DNWebResponse): DNWebException; overload;

  end;

  [DNTypeName('System.Net.WebException')]
  DNWebException = interface(DDN.mscorlib.DNInvalidOperationException)
  ['{07BDB974-EE29-330E-9C5E-0E23E22C05B8}']
  { getters & setters } 

    function get_Status: DNWebExceptionStatus;
    function get_Response: DNWebResponse;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(serializationInfo: DDN.mscorlib.DNSerializationInfo; streamingContext: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Status: DNWebExceptionStatus read get_Status;
    property Response: DNWebResponse read get_Response;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNWebException = class(TDNGenericImport<DNWebExceptionClass, DNWebException>) end;

  //-------------namespace: System.IO----------------
  DNInternalBufferOverflowExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{837165D8-CC66-5F71-830D-92A7D4F6D9F4}']
  { constructors } 

    {class} function init: DNInternalBufferOverflowException; overload;
    {class} function init(message: string): DNInternalBufferOverflowException; overload;
    {class} function init(message: string; inner: DDN.mscorlib.DNException): DNInternalBufferOverflowException; overload;

  end;

  [DNTypeName('System.IO.InternalBufferOverflowException')]
  DNInternalBufferOverflowException = interface(DDN.mscorlib.DNSystemException)
  ['{DB65DDB4-F5EA-3428-BF23-33B871B0792A}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInternalBufferOverflowException = class(TDNGenericImport<DNInternalBufferOverflowExceptionClass, DNInternalBufferOverflowException>) end;

  //-------------namespace: System.IO----------------
  DNInvalidDataExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{F4203E9F-AF5D-5E57-B39B-089C4B0CBD1C}']
  { constructors } 

    {class} function init: DNInvalidDataException; overload;
    {class} function init(message: string): DNInvalidDataException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNInvalidDataException; overload;

  end;

  [DNTypeName('System.IO.InvalidDataException')]
  DNInvalidDataException = interface(DDN.mscorlib.DNSystemException)
  ['{1CDFE7D7-4AC8-327A-87AB-D2C30CFBB508}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidDataException = class(TDNGenericImport<DNInvalidDataExceptionClass, DNInvalidDataException>) end;

  //-------------namespace: System.ComponentModel.Design----------------
  DNCheckoutExceptionClass = interface(DDN.mscorlib.DNExternalExceptionClass)
  ['{A86FBF27-B22D-520B-976D-31C01E69AFCA}']
  { constructors } 

    {class} function init: DNCheckoutException; overload;
    {class} function init(message: string): DNCheckoutException; overload;
    {class} function init(message: string; errorCode: Int32): DNCheckoutException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNCheckoutException; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Canceled: DNCheckoutException;

  { static fields } 

    {class} property Canceled: DNCheckoutException read __fakeFieldGet_Canceled;

  end;

  [DNTypeName('System.ComponentModel.Design.CheckoutException')]
  DNCheckoutException = interface(DDN.mscorlib.DNExternalException)
  ['{01EA5EA2-1970-30A3-9F7B-7FC9416C9D1B}']
  { getters & setters } 

    function get_ErrorCode: Int32;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function ToString: string;
    function GetBaseException: DDN.mscorlib.DNException;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ErrorCode: Int32 read get_ErrorCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCheckoutException = class(TDNGenericImport<DNCheckoutExceptionClass, DNCheckoutException>) end;

  //-------------namespace: System.ComponentModel----------------
  DNWin32ExceptionClass = interface(DDN.mscorlib.DNExternalExceptionClass)
  ['{F70E9FCE-5340-50D2-BD57-263C12CA1ABE}']
  { constructors } 

    {class} function init: DNWin32Exception; overload;
    {class} function init(error: Int32): DNWin32Exception; overload;
    {class} function init(error: Int32; message: string): DNWin32Exception; overload;
    {class} function init(message: string): DNWin32Exception; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNWin32Exception; overload;

  end;

  [DNTypeName('System.ComponentModel.Win32Exception')]
  DNWin32Exception = interface(DDN.mscorlib.DNExternalException)
  ['{1821566F-9743-3145-8D4B-3FCB1C7819AE}']
  { getters & setters } 

    function get_NativeErrorCode: Int32;
    function get_ErrorCode: Int32;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function ToString: string;
    function GetBaseException: DDN.mscorlib.DNException;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property NativeErrorCode: Int32 read get_NativeErrorCode;
    property ErrorCode: Int32 read get_ErrorCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNWin32Exception = class(TDNGenericImport<DNWin32ExceptionClass, DNWin32Exception>) end;

  //-------------namespace: System.Net----------------
  DNHttpListenerExceptionClass = interface(DNWin32ExceptionClass)
  ['{8C01452C-7A44-5C5E-A531-9714F750594F}']
  { constructors } 

    {class} function init: DNHttpListenerException; overload;
    {class} function init(errorCode: Int32): DNHttpListenerException; overload;
    {class} function init(errorCode: Int32; message: string): DNHttpListenerException; overload;

  end;

  [DNTypeName('System.Net.HttpListenerException')]
  DNHttpListenerException = interface(DNWin32Exception)
  ['{0E8553AD-A71C-3C56-9EDF-583FA1A20108}']
  { getters & setters } 

    function get_ErrorCode: Int32;
    function get_NativeErrorCode: Int32;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function ToString: string;
    function GetBaseException: DDN.mscorlib.DNException;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ErrorCode: Int32 read get_ErrorCode;
    property NativeErrorCode: Int32 read get_NativeErrorCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNHttpListenerException = class(TDNGenericImport<DNHttpListenerExceptionClass, DNHttpListenerException>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNNetworkInformationExceptionClass = interface(DNWin32ExceptionClass)
  ['{F086D78A-D52A-52A4-B225-4B0E7C900095}']
  { constructors } 

    {class} function init: DNNetworkInformationException; overload;
    {class} function init(errorCode: Int32): DNNetworkInformationException; overload;

  end;

  [DNTypeName('System.Net.NetworkInformation.NetworkInformationException')]
  DNNetworkInformationException = interface(DNWin32Exception)
  ['{97149265-69CC-3143-80E6-355511E33048}']
  { getters & setters } 

    function get_ErrorCode: Int32;
    function get_NativeErrorCode: Int32;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function ToString: string;
    function GetBaseException: DDN.mscorlib.DNException;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ErrorCode: Int32 read get_ErrorCode;
    property NativeErrorCode: Int32 read get_NativeErrorCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNNetworkInformationException = class(TDNGenericImport<DNNetworkInformationExceptionClass, DNNetworkInformationException>) end;

  //-------------namespace: System.Net.Sockets----------------
  DNSocketExceptionClass = interface(DNWin32ExceptionClass)
  ['{A1E1080D-465B-59A5-89FE-847650D998FB}']
  { constructors } 

    {class} function init: DNSocketException; overload;
    {class} function init(errorCode: Int32): DNSocketException; overload;

  end;

  [DNTypeName('System.Net.Sockets.SocketException')]
  DNSocketException = interface(DNWin32Exception)
  ['{BF5ADA04-5849-3293-B7BE-4A2F4F221E90}']
  { getters & setters } 

    function get_ErrorCode: Int32;
    function get_Message: string;
    function get_SocketErrorCode: DNSocketError;
    function get_NativeErrorCode: Int32;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function ToString: string;
    function GetBaseException: DDN.mscorlib.DNException;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ErrorCode: Int32 read get_ErrorCode;
    property Message: string read get_Message;
    property SocketErrorCode: DNSocketError read get_SocketErrorCode;
    property NativeErrorCode: Int32 read get_NativeErrorCode;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSocketException = class(TDNGenericImport<DNSocketExceptionClass, DNSocketException>) end;

  //-------------namespace: System.Net.WebSockets----------------
  DNWebSocketExceptionClass = interface(DNWin32ExceptionClass)
  ['{A5004E08-00D4-57D5-831F-640BC0DB0946}']
  { constructors } 

    {class} function init: DNWebSocketException; overload;
    {class} function init(error: DNWebSocketError): DNWebSocketException; overload;
    {class} function init(error: DNWebSocketError; message: string): DNWebSocketException; overload;
    {class} function init(error: DNWebSocketError; innerException: DDN.mscorlib.DNException): DNWebSocketException; overload;
    {class} function init(error: DNWebSocketError; message: string; innerException: DDN.mscorlib.DNException): DNWebSocketException; overload;
    {class} function init(nativeError: Int32): DNWebSocketException; overload;
    {class} function init(nativeError: Int32; message: string): DNWebSocketException; overload;
    {class} function init(nativeError: Int32; innerException: DDN.mscorlib.DNException): DNWebSocketException; overload;
    {class} function init(error: DNWebSocketError; nativeError: Int32): DNWebSocketException; overload;
    {class} function init(error: DNWebSocketError; nativeError: Int32; message: string): DNWebSocketException; overload;
    {class} function init(error: DNWebSocketError; nativeError: Int32; innerException: DDN.mscorlib.DNException): DNWebSocketException; overload;
    {class} function init(error: DNWebSocketError; nativeError: Int32; message: string; innerException: DDN.mscorlib.DNException): DNWebSocketException; overload;
    {class} function init(message: string): DNWebSocketException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNWebSocketException; overload;

  end;

  [DNTypeName('System.Net.WebSockets.WebSocketException')]
  DNWebSocketException = interface(DNWin32Exception)
  ['{FDE16526-D64F-3F6C-A691-29A0496F5CDC}']
  { getters & setters } 

    function get_ErrorCode: Int32;
    function get_WebSocketErrorCode: DNWebSocketError;
    function get_NativeErrorCode: Int32;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function ToString: string;
    function GetBaseException: DDN.mscorlib.DNException;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ErrorCode: Int32 read get_ErrorCode;
    property WebSocketErrorCode: DNWebSocketError read get_WebSocketErrorCode;
    property NativeErrorCode: Int32 read get_NativeErrorCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNWebSocketException = class(TDNGenericImport<DNWebSocketExceptionClass, DNWebSocketException>) end;

  //-------------namespace: System.Security.Authentication----------------
  DNAuthenticationExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{448478EE-FCDC-5AF7-9364-E48A22EFC273}']
  { constructors } 

    {class} function init: DNAuthenticationException; overload;
    {class} function init(message: string): DNAuthenticationException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNAuthenticationException; overload;

  end;

  [DNTypeName('System.Security.Authentication.AuthenticationException')]
  DNAuthenticationException = interface(DDN.mscorlib.DNSystemException)
  ['{FE0538F3-FCB6-3915-88BF-86E02790A200}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNAuthenticationException = class(TDNGenericImport<DNAuthenticationExceptionClass, DNAuthenticationException>) end;

  //-------------namespace: System.Security.Authentication----------------
  DNInvalidCredentialExceptionClass = interface(DNAuthenticationExceptionClass)
  ['{12384665-CBBA-58B9-A906-5F91C489645B}']
  { constructors } 

    {class} function init: DNInvalidCredentialException; overload;
    {class} function init(message: string): DNInvalidCredentialException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNInvalidCredentialException; overload;

  end;

  [DNTypeName('System.Security.Authentication.InvalidCredentialException')]
  DNInvalidCredentialException = interface(DNAuthenticationException)
  ['{9EAD8C3F-869B-35CB-96F2-2808D752FE0C}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidCredentialException = class(TDNGenericImport<DNInvalidCredentialExceptionClass, DNInvalidCredentialException>) end;

  //-------------namespace: System.Text.RegularExpressions----------------
  DNRegexMatchTimeoutExceptionClass = interface(DDN.mscorlib.DNTimeoutExceptionClass)
  ['{21F04E57-40A3-5831-8B76-288192E4B4DA}']
  { constructors } 

    {class} function init(regexInput: string; regexPattern: string; matchTimeout: DDN.mscorlib.DNTimeSpan): DNRegexMatchTimeoutException; overload;
    {class} function init: DNRegexMatchTimeoutException; overload;
    {class} function init(message: string): DNRegexMatchTimeoutException; overload;
    {class} function init(message: string; inner: DDN.mscorlib.DNException): DNRegexMatchTimeoutException; overload;

  end;

  [DNTypeName('System.Text.RegularExpressions.RegexMatchTimeoutException')]
  DNRegexMatchTimeoutException = interface(DDN.mscorlib.DNTimeoutException)
  ['{B81F3DAA-01C2-3921-93F7-C0F11C20B91B}']
  { getters & setters } 

    function get_Pattern: string;
    function get_Input: string;
    function get_MatchTimeout: DDN.mscorlib.DNTimeSpan;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Pattern: string read get_Pattern;
    property Input: string read get_Input;
    property MatchTimeout: DDN.mscorlib.DNTimeSpan read get_MatchTimeout;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNRegexMatchTimeoutException = class(TDNGenericImport<DNRegexMatchTimeoutExceptionClass, DNRegexMatchTimeoutException>) end;

  //-------------namespace: System.Threading----------------
  DNBarrierPostPhaseExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{DDA5C5F8-36A8-56F2-B58F-1F5353F895F1}']
  { constructors } 

    {class} function init: DNBarrierPostPhaseException; overload;
    {class} function init(innerException: DDN.mscorlib.DNException): DNBarrierPostPhaseException; overload;
    {class} function init(message: string): DNBarrierPostPhaseException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNBarrierPostPhaseException; overload;

  end;

  [DNTypeName('System.Threading.BarrierPostPhaseException')]
  DNBarrierPostPhaseException = interface(DDN.mscorlib.DNException)
  ['{8290555E-BAE6-30D2-A529-B538D4700A2A}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNBarrierPostPhaseException = class(TDNGenericImport<DNBarrierPostPhaseExceptionClass, DNBarrierPostPhaseException>) end;

  //-------------namespace: System.ComponentModel----------------
  DNComponentClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{019C75F7-CEFA-5E62-8973-E3534E7E1A4A}']
  { constructors } 

    {class} function init: DNComponent;

  end;

  [DNTypeName('System.ComponentModel.Component')]
  DNComponent = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{B3B21824-D0F3-3815-847F-228660E2A20E}']
  { getters & setters } 

    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Container: DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Site: DNISite read get_Site write set_Site;
    property Container: DNIContainer read get_Container;
  end;

  TDNComponent = class(TDNGenericImport<DNComponentClass, DNComponent>) end;

  //-------------namespace: System.CodeDom.Compiler----------------
  DNCodeDomProviderClass = interface(DNComponentClass)
  ['{C908D219-F79F-533C-AE4C-FB7D641DC3FB}']
  { static methods } 

    {class} function CreateProvider(language: string; providerOptions: DDN.mscorlib.DNIDictionary<string, string>): DNCodeDomProvider; overload;
    {class} function IsDefinedExtension(extension: string): Boolean;
    {class} function GetAllCompilerInfo: TArray<DNCompilerInfo>;
    {class} function GetLanguageFromExtension(extension: string): string;
    {class} function GetCompilerInfo(language: string): DNCompilerInfo;
    {class} function CreateProvider(language: string): DNCodeDomProvider; overload;
    {class} function IsDefinedLanguage(language: string): Boolean;

  end;

  [DNTypeName('System.CodeDom.Compiler.CodeDomProvider')]
  DNCodeDomProvider = interface(DNComponent)
  ['{5FAD3639-1A4D-3BDC-A4A5-C59E36165F5B}']
  { getters & setters } 

    function get_FileExtension: string;
    function get_LanguageOptions: DNLanguageOptions;
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Container: DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CreateGenerator(output: DDN.mscorlib.DNTextWriter): DNICodeGenerator; overload;
    function CreateGenerator(fileName: string): DNICodeGenerator; overload;
    function CreateParser: DNICodeParser;
    function GetConverter(&type: DDN.mscorlib.DNType): DNTypeConverter;
    function CompileAssemblyFromDom(options: DNCompilerParameters; compilationUnits: TArray<DNCodeCompileUnit>): DNCompilerResults;
    function CompileAssemblyFromFile(options: DNCompilerParameters; fileNames: TArray<string>): DNCompilerResults;
    function CompileAssemblyFromSource(options: DNCompilerParameters; sources: TArray<string>): DNCompilerResults;
    function IsValidIdentifier(value: string): Boolean;
    function CreateEscapedIdentifier(value: string): string;
    function CreateValidIdentifier(value: string): string;
    function GetTypeOutput(&type: DNCodeTypeReference): string;
    function Supports(generatorSupport: DNGeneratorSupport): Boolean;
    procedure GenerateCodeFromExpression(expression: DNCodeExpression; writer: DDN.mscorlib.DNTextWriter; options: DNCodeGeneratorOptions);
    procedure GenerateCodeFromStatement(statement: DNCodeStatement; writer: DDN.mscorlib.DNTextWriter; options: DNCodeGeneratorOptions);
    procedure GenerateCodeFromNamespace(codeNamespace: DNCodeNamespace; writer: DDN.mscorlib.DNTextWriter; options: DNCodeGeneratorOptions);
    procedure GenerateCodeFromCompileUnit(compileUnit: DNCodeCompileUnit; writer: DDN.mscorlib.DNTextWriter; options: DNCodeGeneratorOptions);
    procedure GenerateCodeFromType(codeType: DNCodeTypeDeclaration; writer: DDN.mscorlib.DNTextWriter; options: DNCodeGeneratorOptions);
    procedure GenerateCodeFromMember(member: DNCodeTypeMember; writer: DDN.mscorlib.DNTextWriter; options: DNCodeGeneratorOptions);
    function Parse(codeStream: DDN.mscorlib.DNTextReader): DNCodeCompileUnit;
    function CreateGenerator: DNICodeGenerator; overload;
    function CreateCompiler: DNICodeCompiler;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property FileExtension: string read get_FileExtension;
    property LanguageOptions: DNLanguageOptions read get_LanguageOptions;
    property Site: DNISite read get_Site write set_Site;
    property Container: DNIContainer read get_Container;
  end;

  TDNCodeDomProvider = class(TDNGenericImport<DNCodeDomProviderClass, DNCodeDomProvider>) end;

  //-------------namespace: Microsoft.CSharp----------------
  DNCSharpCodeProviderClass = interface(DNCodeDomProviderClass)
  ['{573E8F66-CED1-565B-9D23-61BF44214986}']
  { constructors } 

    {class} function init: DNCSharpCodeProvider; overload;
    {class} function init(providerOptions: DDN.mscorlib.DNIDictionary<string, string>): DNCSharpCodeProvider; overload;

  end;

  [DNTypeName('Microsoft.CSharp.CSharpCodeProvider')]
  DNCSharpCodeProvider = interface(DNCodeDomProvider)
  ['{11538148-437C-3DB8-B2B9-C31894AF1725}']
  { getters & setters } 

    function get_FileExtension: string;
    function get_LanguageOptions: DNLanguageOptions;
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Container: DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CreateGenerator: DNICodeGenerator; overload;
    function CreateCompiler: DNICodeCompiler;
    function GetConverter(&type: DDN.mscorlib.DNType): DNTypeConverter;
    procedure GenerateCodeFromMember(member: DNCodeTypeMember; writer: DDN.mscorlib.DNTextWriter; options: DNCodeGeneratorOptions);
    function CreateGenerator(output: DDN.mscorlib.DNTextWriter): DNICodeGenerator; overload;
    function CreateGenerator(fileName: string): DNICodeGenerator; overload;
    function CreateParser: DNICodeParser;
    function CompileAssemblyFromDom(options: DNCompilerParameters; compilationUnits: TArray<DNCodeCompileUnit>): DNCompilerResults;
    function CompileAssemblyFromFile(options: DNCompilerParameters; fileNames: TArray<string>): DNCompilerResults;
    function CompileAssemblyFromSource(options: DNCompilerParameters; sources: TArray<string>): DNCompilerResults;
    function IsValidIdentifier(value: string): Boolean;
    function CreateEscapedIdentifier(value: string): string;
    function CreateValidIdentifier(value: string): string;
    function GetTypeOutput(&type: DNCodeTypeReference): string;
    function Supports(generatorSupport: DNGeneratorSupport): Boolean;
    procedure GenerateCodeFromExpression(expression: DNCodeExpression; writer: DDN.mscorlib.DNTextWriter; options: DNCodeGeneratorOptions);
    procedure GenerateCodeFromStatement(statement: DNCodeStatement; writer: DDN.mscorlib.DNTextWriter; options: DNCodeGeneratorOptions);
    procedure GenerateCodeFromNamespace(codeNamespace: DNCodeNamespace; writer: DDN.mscorlib.DNTextWriter; options: DNCodeGeneratorOptions);
    procedure GenerateCodeFromCompileUnit(compileUnit: DNCodeCompileUnit; writer: DDN.mscorlib.DNTextWriter; options: DNCodeGeneratorOptions);
    procedure GenerateCodeFromType(codeType: DNCodeTypeDeclaration; writer: DDN.mscorlib.DNTextWriter; options: DNCodeGeneratorOptions);
    function Parse(codeStream: DDN.mscorlib.DNTextReader): DNCodeCompileUnit;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property FileExtension: string read get_FileExtension;
    property LanguageOptions: DNLanguageOptions read get_LanguageOptions;
    property Site: DNISite read get_Site write set_Site;
    property Container: DNIContainer read get_Container;
  end;

  TDNCSharpCodeProvider = class(TDNGenericImport<DNCSharpCodeProviderClass, DNCSharpCodeProvider>) end;

  //-------------namespace: Microsoft.VisualBasic----------------
  DNVBCodeProviderClass = interface(DNCodeDomProviderClass)
  ['{FCCA718B-5549-501D-91EF-155D6EBE3544}']
  { constructors } 

    {class} function init: DNVBCodeProvider; overload;
    {class} function init(providerOptions: DDN.mscorlib.DNIDictionary<string, string>): DNVBCodeProvider; overload;

  end;

  [DNTypeName('Microsoft.VisualBasic.VBCodeProvider')]
  DNVBCodeProvider = interface(DNCodeDomProvider)
  ['{9953A0E7-42C6-3B00-9090-9884A5F4FD0F}']
  { getters & setters } 

    function get_FileExtension: string;
    function get_LanguageOptions: DNLanguageOptions;
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Container: DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CreateGenerator: DNICodeGenerator; overload;
    function CreateCompiler: DNICodeCompiler;
    function GetConverter(&type: DDN.mscorlib.DNType): DNTypeConverter;
    procedure GenerateCodeFromMember(member: DNCodeTypeMember; writer: DDN.mscorlib.DNTextWriter; options: DNCodeGeneratorOptions);
    function CreateGenerator(output: DDN.mscorlib.DNTextWriter): DNICodeGenerator; overload;
    function CreateGenerator(fileName: string): DNICodeGenerator; overload;
    function CreateParser: DNICodeParser;
    function CompileAssemblyFromDom(options: DNCompilerParameters; compilationUnits: TArray<DNCodeCompileUnit>): DNCompilerResults;
    function CompileAssemblyFromFile(options: DNCompilerParameters; fileNames: TArray<string>): DNCompilerResults;
    function CompileAssemblyFromSource(options: DNCompilerParameters; sources: TArray<string>): DNCompilerResults;
    function IsValidIdentifier(value: string): Boolean;
    function CreateEscapedIdentifier(value: string): string;
    function CreateValidIdentifier(value: string): string;
    function GetTypeOutput(&type: DNCodeTypeReference): string;
    function Supports(generatorSupport: DNGeneratorSupport): Boolean;
    procedure GenerateCodeFromExpression(expression: DNCodeExpression; writer: DDN.mscorlib.DNTextWriter; options: DNCodeGeneratorOptions);
    procedure GenerateCodeFromStatement(statement: DNCodeStatement; writer: DDN.mscorlib.DNTextWriter; options: DNCodeGeneratorOptions);
    procedure GenerateCodeFromNamespace(codeNamespace: DNCodeNamespace; writer: DDN.mscorlib.DNTextWriter; options: DNCodeGeneratorOptions);
    procedure GenerateCodeFromCompileUnit(compileUnit: DNCodeCompileUnit; writer: DDN.mscorlib.DNTextWriter; options: DNCodeGeneratorOptions);
    procedure GenerateCodeFromType(codeType: DNCodeTypeDeclaration; writer: DDN.mscorlib.DNTextWriter; options: DNCodeGeneratorOptions);
    function Parse(codeStream: DDN.mscorlib.DNTextReader): DNCodeCompileUnit;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property FileExtension: string read get_FileExtension;
    property LanguageOptions: DNLanguageOptions read get_LanguageOptions;
    property Site: DNISite read get_Site write set_Site;
    property Container: DNIContainer read get_Container;
  end;

  TDNVBCodeProvider = class(TDNGenericImport<DNVBCodeProviderClass, DNVBCodeProvider>) end;

  //-------------namespace: System.ComponentModel----------------
  DNBackgroundWorkerClass = interface(DNComponentClass)
  ['{F684FE7B-11A7-5599-A4FF-C1621490434D}']
  { constructors } 

    {class} function init: DNBackgroundWorker;

  end;

  [DNTypeName('System.ComponentModel.BackgroundWorker')]
  DNBackgroundWorker = interface(DNComponent)
  ['{5B0C457E-601D-38CF-A249-0D0340089A3A}']
  { getters & setters } 

    function get_CancellationPending: Boolean;
    function get_IsBusy: Boolean;
    function get_WorkerReportsProgress: Boolean;
    procedure set_WorkerReportsProgress(value: Boolean);
    function get_WorkerSupportsCancellation: Boolean;
    procedure set_WorkerSupportsCancellation(value: Boolean);
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Container: DNIContainer;

  { events } 

    procedure add_DoWork(value: DNDoWorkEventHandler);
    procedure remove_DoWork(value: DNDoWorkEventHandler);
    procedure add_ProgressChanged(value: DNProgressChangedEventHandler);
    procedure remove_ProgressChanged(value: DNProgressChangedEventHandler);
    procedure add_RunWorkerCompleted(value: DNRunWorkerCompletedEventHandler);
    procedure remove_RunWorkerCompleted(value: DNRunWorkerCompletedEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure CancelAsync;
    procedure RunWorkerAsync; overload;
    procedure RunWorkerAsync(argument: DDN.mscorlib.DNObject); overload;
    procedure ReportProgress(percentProgress: Int32); overload;
    procedure ReportProgress(percentProgress: Int32; userState: DDN.mscorlib.DNObject); overload;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property CancellationPending: Boolean read get_CancellationPending;
    property IsBusy: Boolean read get_IsBusy;
    property WorkerReportsProgress: Boolean read get_WorkerReportsProgress write set_WorkerReportsProgress;
    property WorkerSupportsCancellation: Boolean read get_WorkerSupportsCancellation write set_WorkerSupportsCancellation;
    property Site: DNISite read get_Site write set_Site;
    property Container: DNIContainer read get_Container;
  end;

  TDNBackgroundWorker = class(TDNGenericImport<DNBackgroundWorkerClass, DNBackgroundWorker>) end;

  //-------------namespace: System.Diagnostics----------------
  DNEventLogClass = interface(DNComponentClass)
  ['{FEE502AE-033F-57BA-9062-842FA973EFB2}']
  { constructors } 

    {class} function init: DNEventLog; overload;
    {class} function init(logName: string): DNEventLog; overload;
    {class} function init(logName: string; machineName: string): DNEventLog; overload;
    {class} function init(logName: string; machineName: string; source: string): DNEventLog; overload;

  { static methods } 

    {class} procedure CreateEventSource(source: string; logName: string; machineName: string); overload;
    {class} function SourceExists(source: string; machineName: string): Boolean; overload;
    {class} function LogNameFromSourceName(source: string; machineName: string): string;
    {class} procedure WriteEntry(source: string; message: string); overload;
    {class} procedure WriteEntry(source: string; message: string; &type: DNEventLogEntryType); overload;
    {class} procedure WriteEntry(source: string; message: string; &type: DNEventLogEntryType; eventID: Int32); overload;
    {class} procedure WriteEntry(source: string; message: string; &type: DNEventLogEntryType; eventID: Int32; category: Int16); overload;
    {class} procedure CreateEventSource(source: string; logName: string); overload;
    {class} procedure CreateEventSource(sourceData: DNEventSourceCreationData); overload;
    {class} procedure Delete(logName: string); overload;
    {class} procedure Delete(logName: string; machineName: string); overload;
    {class} procedure DeleteEventSource(source: string); overload;
    {class} procedure DeleteEventSource(source: string; machineName: string); overload;
    {class} function Exists(logName: string): Boolean; overload;
    {class} function Exists(logName: string; machineName: string): Boolean; overload;
    {class} function GetEventLogs: TArray<DNEventLog>; overload;
    {class} function GetEventLogs(machineName: string): TArray<DNEventLog>; overload;
    {class} function SourceExists(source: string): Boolean; overload;
    {class} procedure WriteEntry(source: string; message: string; &type: DNEventLogEntryType; eventID: Int32; category: Int16; rawData: TArray<Byte>); overload;
    {class} procedure WriteEvent(source: string; instance: DNEventInstance; values: TArray<DDN.mscorlib.DNObject>); overload;
    {class} procedure WriteEvent(source: string; instance: DNEventInstance; data: TArray<Byte>; values: TArray<DDN.mscorlib.DNObject>); overload;

  end;

  [DNTypeName('System.Diagnostics.EventLog')]
  DNEventLog = interface(DNComponent)
  ['{19D9421A-2219-34B6-8849-9B51F9A555CE}']
  { getters & setters } 

    function get_Entries: DNEventLogEntryCollection;
    function get_LogDisplayName: string;
    function get_Log: string;
    procedure set_Log(value: string);
    function get_MachineName: string;
    procedure set_MachineName(value: string);
    function get_MaximumKilobytes: Int64;
    procedure set_MaximumKilobytes(value: Int64);
    function get_OverflowAction: DNOverflowAction;
    function get_MinimumRetentionDays: Int32;
    function get_EnableRaisingEvents: Boolean;
    procedure set_EnableRaisingEvents(value: Boolean);
    function get_SynchronizingObject: DNISynchronizeInvoke;
    procedure set_SynchronizingObject(value: DNISynchronizeInvoke);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Container: DNIContainer;

  { events } 

    procedure add_EntryWritten(value: DNEntryWrittenEventHandler);
    procedure remove_EntryWritten(value: DNEntryWrittenEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure BeginInit;
    procedure EndInit;
    procedure Clear;
    procedure Close;
    procedure ModifyOverflowPolicy(action: DNOverflowAction; retentionDays: Int32);
    procedure RegisterDisplayName(resourceFile: string; resourceId: Int64);
    procedure WriteEntry(message: string); overload;
    procedure WriteEntry(message: string; &type: DNEventLogEntryType); overload;
    procedure WriteEntry(message: string; &type: DNEventLogEntryType; eventID: Int32); overload;
    procedure WriteEntry(message: string; &type: DNEventLogEntryType; eventID: Int32; category: Int16); overload;
    procedure WriteEntry(message: string; &type: DNEventLogEntryType; eventID: Int32; category: Int16; rawData: TArray<Byte>); overload;
    procedure WriteEvent(instance: DNEventInstance; values: TArray<DDN.mscorlib.DNObject>); overload;
    procedure WriteEvent(instance: DNEventInstance; data: TArray<Byte>; values: TArray<DDN.mscorlib.DNObject>); overload;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Entries: DNEventLogEntryCollection read get_Entries;
    property LogDisplayName: string read get_LogDisplayName;
    property Log: string read get_Log write set_Log;
    property MachineName: string read get_MachineName write set_MachineName;
    property MaximumKilobytes: Int64 read get_MaximumKilobytes write set_MaximumKilobytes;
    property OverflowAction: DNOverflowAction read get_OverflowAction;
    property MinimumRetentionDays: Int32 read get_MinimumRetentionDays;
    property EnableRaisingEvents: Boolean read get_EnableRaisingEvents write set_EnableRaisingEvents;
    property SynchronizingObject: DNISynchronizeInvoke read get_SynchronizingObject write set_SynchronizingObject;
    property Source: string read get_Source write set_Source;
    property Site: DNISite read get_Site write set_Site;
    property Container: DNIContainer read get_Container;
  end;

  TDNEventLog = class(TDNGenericImport<DNEventLogClass, DNEventLog>) end;

  //-------------namespace: System.Diagnostics----------------
  DNEventLogEntryClass = interface(DNComponentClass)
  ['{62E0273C-2568-595D-ABE6-1D09ABD98976}']
  end;

  [DNTypeName('System.Diagnostics.EventLogEntry')]
  DNEventLogEntry = interface(DNComponent)
  ['{CFC5F039-D439-3E3E-BC07-506AA9482848}']
  { getters & setters } 

    function get_MachineName: string;
    function get_Data: TArray<Byte>;
    function get_Index: Int32;
    function get_Category: string;
    function get_CategoryNumber: Int16;
    function get_EventID: Int32;
    function get_EntryType: DNEventLogEntryType;
    function get_Message: string;
    function get_Source: string;
    function get_ReplacementStrings: TArray<string>;
    function get_InstanceId: Int64;
    function get_TimeGenerated: DDN.mscorlib.DNDateTime;
    function get_TimeWritten: DDN.mscorlib.DNDateTime;
    function get_UserName: string;
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Container: DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Equals(otherEntry: DNEventLogEntry): Boolean; overload;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property MachineName: string read get_MachineName;
    property Data: TArray<Byte> read get_Data;
    property Index: Int32 read get_Index;
    property Category: string read get_Category;
    property CategoryNumber: Int16 read get_CategoryNumber;
    property EventID: Int32 read get_EventID;
    property EntryType: DNEventLogEntryType read get_EntryType;
    property Message: string read get_Message;
    property Source: string read get_Source;
    property ReplacementStrings: TArray<string> read get_ReplacementStrings;
    property InstanceId: Int64 read get_InstanceId;
    property TimeGenerated: DDN.mscorlib.DNDateTime read get_TimeGenerated;
    property TimeWritten: DDN.mscorlib.DNDateTime read get_TimeWritten;
    property UserName: string read get_UserName;
    property Site: DNISite read get_Site write set_Site;
    property Container: DNIContainer read get_Container;
  end;

  TDNEventLogEntry = class(TDNGenericImport<DNEventLogEntryClass, DNEventLogEntry>) end;

  //-------------namespace: System.Diagnostics----------------
  DNPerformanceCounterClass = interface(DNComponentClass)
  ['{E4847434-763B-5C14-AF6B-2D83B0EE2451}']
  { constructors } 

    {class} function init: DNPerformanceCounter; overload;
    {class} function init(categoryName: string; counterName: string; instanceName: string; machineName: string): DNPerformanceCounter; overload;
    {class} function init(categoryName: string; counterName: string; instanceName: string): DNPerformanceCounter; overload;
    {class} function init(categoryName: string; counterName: string; instanceName: string; readOnly: Boolean): DNPerformanceCounter; overload;
    {class} function init(categoryName: string; counterName: string): DNPerformanceCounter; overload;
    {class} function init(categoryName: string; counterName: string; readOnly: Boolean): DNPerformanceCounter; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_DefaultFileMappingSize: Int32;

  { static fields } 

    {class} property DefaultFileMappingSize: Int32 read __fakeFieldGet_DefaultFileMappingSize;

  { static methods } 

    {class} procedure CloseSharedResources;

  end;

  [DNTypeName('System.Diagnostics.PerformanceCounter')]
  DNPerformanceCounter = interface(DNComponent)
  ['{68704FE9-04DA-3248-957A-7C6173B7E9B0}']
  { getters & setters } 

    function get_CategoryName: string;
    procedure set_CategoryName(value: string);
    function get_CounterHelp: string;
    function get_CounterName: string;
    procedure set_CounterName(value: string);
    function get_CounterType: DNPerformanceCounterType;
    function get_InstanceLifetime: DNPerformanceCounterInstanceLifetime;
    procedure set_InstanceLifetime(value: DNPerformanceCounterInstanceLifetime);
    function get_InstanceName: string;
    procedure set_InstanceName(value: string);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_MachineName: string;
    procedure set_MachineName(value: string);
    function get_RawValue: Int64;
    procedure set_RawValue(value: Int64);
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Container: DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Decrement: Int64;
    function Increment: Int64;
    procedure BeginInit;
    procedure EndInit;
    procedure Close;
    function IncrementBy(value: Int64): Int64;
    function NextSample: DNCounterSample;
    function NextValue: Single;
    procedure RemoveInstance;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property CategoryName: string read get_CategoryName write set_CategoryName;
    property CounterHelp: string read get_CounterHelp;
    property CounterName: string read get_CounterName write set_CounterName;
    property CounterType: DNPerformanceCounterType read get_CounterType;
    property InstanceLifetime: DNPerformanceCounterInstanceLifetime read get_InstanceLifetime write set_InstanceLifetime;
    property InstanceName: string read get_InstanceName write set_InstanceName;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property MachineName: string read get_MachineName write set_MachineName;
    property RawValue: Int64 read get_RawValue write set_RawValue;
    property Site: DNISite read get_Site write set_Site;
    property Container: DNIContainer read get_Container;
  end;

  TDNPerformanceCounter = class(TDNGenericImport<DNPerformanceCounterClass, DNPerformanceCounter>) end;

  //-------------namespace: System.Diagnostics----------------
  DNProcessClass = interface(DNComponentClass)
  ['{22F52278-E8CE-5969-AE68-DE13034CC406}']
  { constructors } 

    {class} function init: DNProcess;

  { static methods } 

    {class} function Start(fileName: string; userName: string; password: DDN.mscorlib.DNSecureString; domain: string): DNProcess; overload;
    {class} function Start(fileName: string; arguments: string; userName: string; password: DDN.mscorlib.DNSecureString; domain: string): DNProcess; overload;
    {class} function Start(fileName: string): DNProcess; overload;
    {class} function Start(fileName: string; arguments: string): DNProcess; overload;
    {class} function Start(startInfo: DNProcessStartInfo): DNProcess; overload;
    {class} procedure EnterDebugMode;
    {class} procedure LeaveDebugMode;
    {class} function GetProcessById(processId: Int32; machineName: string): DNProcess; overload;
    {class} function GetProcessById(processId: Int32): DNProcess; overload;
    {class} function GetProcesses: TArray<DNProcess>; overload;
    {class} function GetProcessesByName(processName: string): TArray<DNProcess>; overload;
    {class} function GetProcessesByName(processName: string; machineName: string): TArray<DNProcess>; overload;
    {class} function GetProcesses(machineName: string): TArray<DNProcess>; overload;
    {class} function GetCurrentProcess: DNProcess;

  end;

  [DNTypeName('System.Diagnostics.Process')]
  DNProcess = interface(DNComponent)
  ['{30FEDECB-A5D0-3893-B60C-A79B38EFD145}']
  { getters & setters } 

    function get_BasePriority: Int32;
    function get_ExitCode: Int32;
    function get_HasExited: Boolean;
    function get_ExitTime: DDN.mscorlib.DNDateTime;
    function get_Handle: IntPtr;
    function get_SafeHandle: DNSafeProcessHandle;
    function get_HandleCount: Int32;
    function get_Id: Int32;
    function get_MachineName: string;
    function get_MainWindowHandle: IntPtr;
    function get_MainWindowTitle: string;
    function get_MainModule: DNProcessModule;
    function get_MaxWorkingSet: IntPtr;
    procedure set_MaxWorkingSet(value: IntPtr);
    function get_MinWorkingSet: IntPtr;
    procedure set_MinWorkingSet(value: IntPtr);
    function get_Modules: DNProcessModuleCollection;
    function get_NonpagedSystemMemorySize: Int32;
    function get_NonpagedSystemMemorySize64: Int64;
    function get_PagedMemorySize: Int32;
    function get_PagedMemorySize64: Int64;
    function get_PagedSystemMemorySize: Int32;
    function get_PagedSystemMemorySize64: Int64;
    function get_PeakPagedMemorySize: Int32;
    function get_PeakPagedMemorySize64: Int64;
    function get_PeakWorkingSet: Int32;
    function get_PeakWorkingSet64: Int64;
    function get_PeakVirtualMemorySize: Int32;
    function get_PeakVirtualMemorySize64: Int64;
    function get_PriorityBoostEnabled: Boolean;
    procedure set_PriorityBoostEnabled(value: Boolean);
    function get_PriorityClass: DNProcessPriorityClass;
    procedure set_PriorityClass(value: DNProcessPriorityClass);
    function get_PrivateMemorySize: Int32;
    function get_PrivateMemorySize64: Int64;
    function get_PrivilegedProcessorTime: DDN.mscorlib.DNTimeSpan;
    function get_ProcessName: string;
    function get_ProcessorAffinity: IntPtr;
    procedure set_ProcessorAffinity(value: IntPtr);
    function get_Responding: Boolean;
    function get_SessionId: Int32;
    function get_StartInfo: DNProcessStartInfo;
    procedure set_StartInfo(value: DNProcessStartInfo);
    function get_StartTime: DDN.mscorlib.DNDateTime;
    function get_SynchronizingObject: DNISynchronizeInvoke;
    procedure set_SynchronizingObject(value: DNISynchronizeInvoke);
    function get_Threads: DNProcessThreadCollection;
    function get_TotalProcessorTime: DDN.mscorlib.DNTimeSpan;
    function get_UserProcessorTime: DDN.mscorlib.DNTimeSpan;
    function get_VirtualMemorySize: Int32;
    function get_VirtualMemorySize64: Int64;
    function get_EnableRaisingEvents: Boolean;
    procedure set_EnableRaisingEvents(value: Boolean);
    function get_StandardInput: DDN.mscorlib.DNStreamWriter;
    function get_StandardOutput: DDN.mscorlib.DNStreamReader;
    function get_StandardError: DDN.mscorlib.DNStreamReader;
    function get_WorkingSet: Int32;
    function get_WorkingSet64: Int64;
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Container: DNIContainer;

  { events } 

    procedure add_OutputDataReceived(value: DNDataReceivedEventHandler);
    procedure remove_OutputDataReceived(value: DNDataReceivedEventHandler);
    procedure add_ErrorDataReceived(value: DNDataReceivedEventHandler);
    procedure remove_ErrorDataReceived(value: DNDataReceivedEventHandler);
    procedure add_Exited(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Exited(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CloseMainWindow: Boolean;
    procedure Close;
    procedure Refresh;
    function Start: Boolean; overload;
    procedure Kill;
    function ToString: string;
    function WaitForExit(milliseconds: Int32): Boolean; overload;
    procedure WaitForExit; overload;
    function WaitForInputIdle(milliseconds: Int32): Boolean; overload;
    function WaitForInputIdle: Boolean; overload;
    procedure BeginOutputReadLine;
    procedure BeginErrorReadLine;
    procedure CancelOutputRead;
    procedure CancelErrorRead;
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property BasePriority: Int32 read get_BasePriority;
    property ExitCode: Int32 read get_ExitCode;
    property HasExited: Boolean read get_HasExited;
    property ExitTime: DDN.mscorlib.DNDateTime read get_ExitTime;
    property Handle: IntPtr read get_Handle;
    property SafeHandle: DNSafeProcessHandle read get_SafeHandle;
    property HandleCount: Int32 read get_HandleCount;
    property Id: Int32 read get_Id;
    property MachineName: string read get_MachineName;
    property MainWindowHandle: IntPtr read get_MainWindowHandle;
    property MainWindowTitle: string read get_MainWindowTitle;
    property MainModule: DNProcessModule read get_MainModule;
    property MaxWorkingSet: IntPtr read get_MaxWorkingSet write set_MaxWorkingSet;
    property MinWorkingSet: IntPtr read get_MinWorkingSet write set_MinWorkingSet;
    property Modules: DNProcessModuleCollection read get_Modules;
    property NonpagedSystemMemorySize: Int32 read get_NonpagedSystemMemorySize;
    property NonpagedSystemMemorySize64: Int64 read get_NonpagedSystemMemorySize64;
    property PagedMemorySize: Int32 read get_PagedMemorySize;
    property PagedMemorySize64: Int64 read get_PagedMemorySize64;
    property PagedSystemMemorySize: Int32 read get_PagedSystemMemorySize;
    property PagedSystemMemorySize64: Int64 read get_PagedSystemMemorySize64;
    property PeakPagedMemorySize: Int32 read get_PeakPagedMemorySize;
    property PeakPagedMemorySize64: Int64 read get_PeakPagedMemorySize64;
    property PeakWorkingSet: Int32 read get_PeakWorkingSet;
    property PeakWorkingSet64: Int64 read get_PeakWorkingSet64;
    property PeakVirtualMemorySize: Int32 read get_PeakVirtualMemorySize;
    property PeakVirtualMemorySize64: Int64 read get_PeakVirtualMemorySize64;
    property PriorityBoostEnabled: Boolean read get_PriorityBoostEnabled write set_PriorityBoostEnabled;
    property PriorityClass: DNProcessPriorityClass read get_PriorityClass write set_PriorityClass;
    property PrivateMemorySize: Int32 read get_PrivateMemorySize;
    property PrivateMemorySize64: Int64 read get_PrivateMemorySize64;
    property PrivilegedProcessorTime: DDN.mscorlib.DNTimeSpan read get_PrivilegedProcessorTime;
    property ProcessName: string read get_ProcessName;
    property ProcessorAffinity: IntPtr read get_ProcessorAffinity write set_ProcessorAffinity;
    property Responding: Boolean read get_Responding;
    property SessionId: Int32 read get_SessionId;
    property StartInfo: DNProcessStartInfo read get_StartInfo write set_StartInfo;
    property StartTime: DDN.mscorlib.DNDateTime read get_StartTime;
    property SynchronizingObject: DNISynchronizeInvoke read get_SynchronizingObject write set_SynchronizingObject;
    property Threads: DNProcessThreadCollection read get_Threads;
    property TotalProcessorTime: DDN.mscorlib.DNTimeSpan read get_TotalProcessorTime;
    property UserProcessorTime: DDN.mscorlib.DNTimeSpan read get_UserProcessorTime;
    property VirtualMemorySize: Int32 read get_VirtualMemorySize;
    property VirtualMemorySize64: Int64 read get_VirtualMemorySize64;
    property EnableRaisingEvents: Boolean read get_EnableRaisingEvents write set_EnableRaisingEvents;
    property StandardInput: DDN.mscorlib.DNStreamWriter read get_StandardInput;
    property StandardOutput: DDN.mscorlib.DNStreamReader read get_StandardOutput;
    property StandardError: DDN.mscorlib.DNStreamReader read get_StandardError;
    property WorkingSet: Int32 read get_WorkingSet;
    property WorkingSet64: Int64 read get_WorkingSet64;
    property Site: DNISite read get_Site write set_Site;
    property Container: DNIContainer read get_Container;
  end;

  TDNProcess = class(TDNGenericImport<DNProcessClass, DNProcess>) end;

  //-------------namespace: System.Diagnostics----------------
  DNProcessModuleClass = interface(DNComponentClass)
  ['{A5EF05FF-0200-5EC6-8E10-774320BF6030}']
  end;

  [DNTypeName('System.Diagnostics.ProcessModule')]
  DNProcessModule = interface(DNComponent)
  ['{F9626892-7A78-3199-ABD2-97BBCE96297B}']
  { getters & setters } 

    function get_ModuleName: string;
    function get_FileName: string;
    function get_BaseAddress: IntPtr;
    function get_ModuleMemorySize: Int32;
    function get_EntryPointAddress: IntPtr;
    function get_FileVersionInfo: DNFileVersionInfo;
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Container: DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function ToString: string;
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ModuleName: string read get_ModuleName;
    property FileName: string read get_FileName;
    property BaseAddress: IntPtr read get_BaseAddress;
    property ModuleMemorySize: Int32 read get_ModuleMemorySize;
    property EntryPointAddress: IntPtr read get_EntryPointAddress;
    property FileVersionInfo: DNFileVersionInfo read get_FileVersionInfo;
    property Site: DNISite read get_Site write set_Site;
    property Container: DNIContainer read get_Container;
  end;

  TDNProcessModule = class(TDNGenericImport<DNProcessModuleClass, DNProcessModule>) end;

  //-------------namespace: System.Diagnostics----------------
  DNProcessThreadClass = interface(DNComponentClass)
  ['{3682B670-E83E-5323-B040-E13EA8D3CBA9}']
  { static getter & setter } 

    procedure set_IdealProcessor(value: Int32);
    procedure set_ProcessorAffinity(value: IntPtr);

  { static propertys } 

    {class} property IdealProcessor: Int32 write set_IdealProcessor;
    {class} property ProcessorAffinity: IntPtr write set_ProcessorAffinity;
  end;

  [DNTypeName('System.Diagnostics.ProcessThread')]
  DNProcessThread = interface(DNComponent)
  ['{EC76FADA-E8EB-3E0A-8F5A-EDF7CA560DC0}']
  { getters & setters } 

    function get_BasePriority: Int32;
    function get_CurrentPriority: Int32;
    function get_Id: Int32;
    procedure set_IdealProcessor(value: Int32);
    function get_PriorityBoostEnabled: Boolean;
    procedure set_PriorityBoostEnabled(value: Boolean);
    function get_PriorityLevel: DNThreadPriorityLevel;
    procedure set_PriorityLevel(value: DNThreadPriorityLevel);
    function get_PrivilegedProcessorTime: DDN.mscorlib.DNTimeSpan;
    function get_StartAddress: IntPtr;
    function get_StartTime: DDN.mscorlib.DNDateTime;
    function get_ThreadState: DNThreadState;
    function get_TotalProcessorTime: DDN.mscorlib.DNTimeSpan;
    function get_UserProcessorTime: DDN.mscorlib.DNTimeSpan;
    function get_WaitReason: DNThreadWaitReason;
    procedure set_ProcessorAffinity(value: IntPtr);
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Container: DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ResetIdealProcessor;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property BasePriority: Int32 read get_BasePriority;
    property CurrentPriority: Int32 read get_CurrentPriority;
    property Id: Int32 read get_Id;
    property IdealProcessor: Int32 write set_IdealProcessor;
    property PriorityBoostEnabled: Boolean read get_PriorityBoostEnabled write set_PriorityBoostEnabled;
    property PriorityLevel: DNThreadPriorityLevel read get_PriorityLevel write set_PriorityLevel;
    property PrivilegedProcessorTime: DDN.mscorlib.DNTimeSpan read get_PrivilegedProcessorTime;
    property StartAddress: IntPtr read get_StartAddress;
    property StartTime: DDN.mscorlib.DNDateTime read get_StartTime;
    property ThreadState: DNThreadState read get_ThreadState;
    property TotalProcessorTime: DDN.mscorlib.DNTimeSpan read get_TotalProcessorTime;
    property UserProcessorTime: DDN.mscorlib.DNTimeSpan read get_UserProcessorTime;
    property WaitReason: DNThreadWaitReason read get_WaitReason;
    property ProcessorAffinity: IntPtr write set_ProcessorAffinity;
    property Site: DNISite read get_Site write set_Site;
    property Container: DNIContainer read get_Container;
  end;

  TDNProcessThread = class(TDNGenericImport<DNProcessThreadClass, DNProcessThread>) end;

  //-------------namespace: System.IO----------------
  DNFileSystemWatcherClass = interface(DNComponentClass)
  ['{1CAB0A03-ACF7-5ECF-9B4D-C0D898E8E6F4}']
  { constructors } 

    {class} function init: DNFileSystemWatcher; overload;
    {class} function init(path: string): DNFileSystemWatcher; overload;
    {class} function init(path: string; filter: string): DNFileSystemWatcher; overload;

  end;

  [DNTypeName('System.IO.FileSystemWatcher')]
  DNFileSystemWatcher = interface(DNComponent)
  ['{047E6FF9-A2A2-3EA5-B6CB-4D947AEF9A8B}']
  { getters & setters } 

    function get_NotifyFilter: DNNotifyFilters;
    procedure set_NotifyFilter(value: DNNotifyFilters);
    function get_EnableRaisingEvents: Boolean;
    procedure set_EnableRaisingEvents(value: Boolean);
    function get_Filter: string;
    procedure set_Filter(value: string);
    function get_IncludeSubdirectories: Boolean;
    procedure set_IncludeSubdirectories(value: Boolean);
    function get_InternalBufferSize: Int32;
    procedure set_InternalBufferSize(value: Int32);
    function get_Path: string;
    procedure set_Path(value: string);
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_SynchronizingObject: DNISynchronizeInvoke;
    procedure set_SynchronizingObject(value: DNISynchronizeInvoke);
    function get_Container: DNIContainer;

  { events } 

    procedure add_Changed(value: DNFileSystemEventHandler);
    procedure remove_Changed(value: DNFileSystemEventHandler);
    procedure add_Created(value: DNFileSystemEventHandler);
    procedure remove_Created(value: DNFileSystemEventHandler);
    procedure add_Deleted(value: DNFileSystemEventHandler);
    procedure remove_Deleted(value: DNFileSystemEventHandler);
    procedure add_Error(value: DNErrorEventHandler);
    procedure remove_Error(value: DNErrorEventHandler);
    procedure add_Renamed(value: DNRenamedEventHandler);
    procedure remove_Renamed(value: DNRenamedEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure BeginInit;
    procedure EndInit;
    function WaitForChanged(changeType: DNWatcherChangeTypes): DNWaitForChangedResult; overload;
    function WaitForChanged(changeType: DNWatcherChangeTypes; timeout: Int32): DNWaitForChangedResult; overload;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property NotifyFilter: DNNotifyFilters read get_NotifyFilter write set_NotifyFilter;
    property EnableRaisingEvents: Boolean read get_EnableRaisingEvents write set_EnableRaisingEvents;
    property Filter: string read get_Filter write set_Filter;
    property IncludeSubdirectories: Boolean read get_IncludeSubdirectories write set_IncludeSubdirectories;
    property InternalBufferSize: Int32 read get_InternalBufferSize write set_InternalBufferSize;
    property Path: string read get_Path write set_Path;
    property Site: DNISite read get_Site write set_Site;
    property SynchronizingObject: DNISynchronizeInvoke read get_SynchronizingObject write set_SynchronizingObject;
    property Container: DNIContainer read get_Container;
  end;

  TDNFileSystemWatcher = class(TDNGenericImport<DNFileSystemWatcherClass, DNFileSystemWatcher>) end;

  //-------------namespace: System.IO.Ports----------------
  DNSerialPortClass = interface(DNComponentClass)
  ['{E7BA700B-3D8B-57BE-8D8F-16E1DBF83DFA}']
  { constructors } 

    {class} function init(container: DNIContainer): DNSerialPort; overload;
    {class} function init: DNSerialPort; overload;
    {class} function init(portName: string): DNSerialPort; overload;
    {class} function init(portName: string; baudRate: Int32): DNSerialPort; overload;
    {class} function init(portName: string; baudRate: Int32; parity: DNParity): DNSerialPort; overload;
    {class} function init(portName: string; baudRate: Int32; parity: DNParity; dataBits: Int32): DNSerialPort; overload;
    {class} function init(portName: string; baudRate: Int32; parity: DNParity; dataBits: Int32; stopBits: DNStopBits): DNSerialPort; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_InfiniteTimeout: Int32;

  { static fields } 

    {class} property InfiniteTimeout: Int32 read __fakeFieldGet_InfiniteTimeout;

  { static methods } 

    {class} function GetPortNames: TArray<string>;

  end;

  [DNTypeName('System.IO.Ports.SerialPort')]
  DNSerialPort = interface(DNComponent)
  ['{FAA3DDE3-6CE1-36D2-BA66-988FCF757435}']
  { getters & setters } 

    function get_BaseStream: DDN.mscorlib.DNStream;
    function get_BaudRate: Int32;
    procedure set_BaudRate(value: Int32);
    function get_BreakState: Boolean;
    procedure set_BreakState(value: Boolean);
    function get_BytesToWrite: Int32;
    function get_BytesToRead: Int32;
    function get_CDHolding: Boolean;
    function get_CtsHolding: Boolean;
    function get_DataBits: Int32;
    procedure set_DataBits(value: Int32);
    function get_DiscardNull: Boolean;
    procedure set_DiscardNull(value: Boolean);
    function get_DsrHolding: Boolean;
    function get_DtrEnable: Boolean;
    procedure set_DtrEnable(value: Boolean);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_Handshake: DNHandshake;
    procedure set_Handshake(value: DNHandshake);
    function get_IsOpen: Boolean;
    function get_NewLine: string;
    procedure set_NewLine(value: string);
    function get_Parity: DNParity;
    procedure set_Parity(value: DNParity);
    function get_ParityReplace: Byte;
    procedure set_ParityReplace(value: Byte);
    function get_PortName: string;
    procedure set_PortName(value: string);
    function get_ReadBufferSize: Int32;
    procedure set_ReadBufferSize(value: Int32);
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_ReceivedBytesThreshold: Int32;
    procedure set_ReceivedBytesThreshold(value: Int32);
    function get_RtsEnable: Boolean;
    procedure set_RtsEnable(value: Boolean);
    function get_StopBits: DNStopBits;
    procedure set_StopBits(value: DNStopBits);
    function get_WriteBufferSize: Int32;
    procedure set_WriteBufferSize(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Container: DNIContainer;

  { events } 

    procedure add_ErrorReceived(value: DNSerialErrorReceivedEventHandler);
    procedure remove_ErrorReceived(value: DNSerialErrorReceivedEventHandler);
    procedure add_PinChanged(value: DNSerialPinChangedEventHandler);
    procedure remove_PinChanged(value: DNSerialPinChangedEventHandler);
    procedure add_DataReceived(value: DNSerialDataReceivedEventHandler);
    procedure remove_DataReceived(value: DNSerialDataReceivedEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Close;
    procedure DiscardInBuffer;
    procedure DiscardOutBuffer;
    procedure Open;
    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32; overload;
    function ReadChar: Int32;
    function Read(buffer: TArray<Char>; offset: Int32; count: Int32): Int32; overload;
    function ReadByte: Int32;
    function ReadExisting: string;
    function ReadLine: string;
    function ReadTo(value: string): string;
    procedure Write(text: string); overload;
    procedure Write(buffer: TArray<Char>; offset: Int32; count: Int32); overload;
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32); overload;
    procedure WriteLine(text: string);
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property BaseStream: DDN.mscorlib.DNStream read get_BaseStream;
    property BaudRate: Int32 read get_BaudRate write set_BaudRate;
    property BreakState: Boolean read get_BreakState write set_BreakState;
    property BytesToWrite: Int32 read get_BytesToWrite;
    property BytesToRead: Int32 read get_BytesToRead;
    property CDHolding: Boolean read get_CDHolding;
    property CtsHolding: Boolean read get_CtsHolding;
    property DataBits: Int32 read get_DataBits write set_DataBits;
    property DiscardNull: Boolean read get_DiscardNull write set_DiscardNull;
    property DsrHolding: Boolean read get_DsrHolding;
    property DtrEnable: Boolean read get_DtrEnable write set_DtrEnable;
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    property Handshake: DNHandshake read get_Handshake write set_Handshake;
    property IsOpen: Boolean read get_IsOpen;
    property NewLine: string read get_NewLine write set_NewLine;
    property Parity: DNParity read get_Parity write set_Parity;
    property ParityReplace: Byte read get_ParityReplace write set_ParityReplace;
    property PortName: string read get_PortName write set_PortName;
    property ReadBufferSize: Int32 read get_ReadBufferSize write set_ReadBufferSize;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property ReceivedBytesThreshold: Int32 read get_ReceivedBytesThreshold write set_ReceivedBytesThreshold;
    property RtsEnable: Boolean read get_RtsEnable write set_RtsEnable;
    property StopBits: DNStopBits read get_StopBits write set_StopBits;
    property WriteBufferSize: Int32 read get_WriteBufferSize write set_WriteBufferSize;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
    property Site: DNISite read get_Site write set_Site;
    property Container: DNIContainer read get_Container;
  end;

  TDNSerialPort = class(TDNGenericImport<DNSerialPortClass, DNSerialPort>)
  public const
   InfiniteTimeout = -1;
  end;

  //-------------namespace: System.Media----------------
  DNSoundPlayerClass = interface(DNComponentClass)
  ['{DE07E51E-DD2A-552A-ABA9-B346C1F9B421}']
  { constructors } 

    {class} function init: DNSoundPlayer; overload;
    {class} function init(soundLocation: string): DNSoundPlayer; overload;
    {class} function init(stream: DDN.mscorlib.DNStream): DNSoundPlayer; overload;

  end;

  [DNTypeName('System.Media.SoundPlayer')]
  DNSoundPlayer = interface(DNComponent)
  ['{3AB4E86E-D5FC-38A3-B3E2-6B3A82664E78}']
  { getters & setters } 

    function get_LoadTimeout: Int32;
    procedure set_LoadTimeout(value: Int32);
    function get_SoundLocation: string;
    procedure set_SoundLocation(value: string);
    function get_Stream: DDN.mscorlib.DNStream;
    procedure set_Stream(value: DDN.mscorlib.DNStream);
    function get_IsLoadCompleted: Boolean;
    function get_Tag: DDN.mscorlib.DNObject;
    procedure set_Tag(value: DDN.mscorlib.DNObject);
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Container: DNIContainer;

  { events } 

    procedure add_LoadCompleted(value: DNAsyncCompletedEventHandler);
    procedure remove_LoadCompleted(value: DNAsyncCompletedEventHandler);
    procedure add_SoundLocationChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_SoundLocationChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_StreamChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_StreamChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure LoadAsync;
    procedure Load;
    procedure Play;
    procedure PlaySync;
    procedure PlayLooping;
    procedure Stop;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property LoadTimeout: Int32 read get_LoadTimeout write set_LoadTimeout;
    property SoundLocation: string read get_SoundLocation write set_SoundLocation;
    property Stream: DDN.mscorlib.DNStream read get_Stream write set_Stream;
    property IsLoadCompleted: Boolean read get_IsLoadCompleted;
    property Tag: DDN.mscorlib.DNObject read get_Tag write set_Tag;
    property Site: DNISite read get_Site write set_Site;
    property Container: DNIContainer read get_Container;
  end;

  TDNSoundPlayer = class(TDNGenericImport<DNSoundPlayerClass, DNSoundPlayer>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNPingClass = interface(DNComponentClass)
  ['{97F64E44-E2BD-5CCB-B477-666B92E8D4E2}']
  { constructors } 

    {class} function init: DNPing;

  end;

  [DNTypeName('System.Net.NetworkInformation.Ping')]
  DNPing = interface(DNComponent)
  ['{074BB38C-31C3-3AE8-A2BC-4B27796015D2}']
  { getters & setters } 

    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Container: DNIContainer;

  { events } 

    procedure add_PingCompleted(value: DNPingCompletedEventHandler);
    procedure remove_PingCompleted(value: DNPingCompletedEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure SendAsyncCancel;
    function Send(hostNameOrAddress: string): DNPingReply; overload;
    function Send(hostNameOrAddress: string; timeout: Int32): DNPingReply; overload;
    function Send(address: DNIPAddress): DNPingReply; overload;
    function Send(address: DNIPAddress; timeout: Int32): DNPingReply; overload;
    function Send(hostNameOrAddress: string; timeout: Int32; buffer: TArray<Byte>): DNPingReply; overload;
    function Send(address: DNIPAddress; timeout: Int32; buffer: TArray<Byte>): DNPingReply; overload;
    function Send(hostNameOrAddress: string; timeout: Int32; buffer: TArray<Byte>; options: DNPingOptions): DNPingReply; overload;
    function Send(address: DNIPAddress; timeout: Int32; buffer: TArray<Byte>; options: DNPingOptions): DNPingReply; overload;
    procedure SendAsync(hostNameOrAddress: string; userToken: DDN.mscorlib.DNObject); overload;
    procedure SendAsync(hostNameOrAddress: string; timeout: Int32; userToken: DDN.mscorlib.DNObject); overload;
    procedure SendAsync(address: DNIPAddress; userToken: DDN.mscorlib.DNObject); overload;
    procedure SendAsync(address: DNIPAddress; timeout: Int32; userToken: DDN.mscorlib.DNObject); overload;
    procedure SendAsync(hostNameOrAddress: string; timeout: Int32; buffer: TArray<Byte>; userToken: DDN.mscorlib.DNObject); overload;
    procedure SendAsync(address: DNIPAddress; timeout: Int32; buffer: TArray<Byte>; userToken: DDN.mscorlib.DNObject); overload;
    procedure SendAsync(hostNameOrAddress: string; timeout: Int32; buffer: TArray<Byte>; options: DNPingOptions; userToken: DDN.mscorlib.DNObject); overload;
    procedure SendAsync(address: DNIPAddress; timeout: Int32; buffer: TArray<Byte>; options: DNPingOptions; userToken: DDN.mscorlib.DNObject); overload;
    function SendPingAsync(address: DNIPAddress): DDN.mscorlib.DNTask<DNPingReply>; overload;
    function SendPingAsync(hostNameOrAddress: string): DDN.mscorlib.DNTask<DNPingReply>; overload;
    function SendPingAsync(address: DNIPAddress; timeout: Int32): DDN.mscorlib.DNTask<DNPingReply>; overload;
    function SendPingAsync(hostNameOrAddress: string; timeout: Int32): DDN.mscorlib.DNTask<DNPingReply>; overload;
    function SendPingAsync(address: DNIPAddress; timeout: Int32; buffer: TArray<Byte>): DDN.mscorlib.DNTask<DNPingReply>; overload;
    function SendPingAsync(hostNameOrAddress: string; timeout: Int32; buffer: TArray<Byte>): DDN.mscorlib.DNTask<DNPingReply>; overload;
    function SendPingAsync(address: DNIPAddress; timeout: Int32; buffer: TArray<Byte>; options: DNPingOptions): DDN.mscorlib.DNTask<DNPingReply>; overload;
    function SendPingAsync(hostNameOrAddress: string; timeout: Int32; buffer: TArray<Byte>; options: DNPingOptions): DDN.mscorlib.DNTask<DNPingReply>; overload;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Site: DNISite read get_Site write set_Site;
    property Container: DNIContainer read get_Container;
  end;

  TDNPing = class(TDNGenericImport<DNPingClass, DNPing>) end;

  //-------------namespace: System.Net----------------
  DNWebClientClass = interface(DNComponentClass)
  ['{1229FC0F-5DE6-5617-8FFF-B0212F5F7D6C}']
  { constructors } 

    {class} function init: DNWebClient;

  end;

  [DNTypeName('System.Net.WebClient')]
  DNWebClient = interface(DNComponent)
  ['{7D458845-B4B8-30CB-B2AD-FC4960FCDF81}']
  { getters & setters } 

    function get_AllowReadStreamBuffering: Boolean;
    procedure set_AllowReadStreamBuffering(value: Boolean);
    function get_AllowWriteStreamBuffering: Boolean;
    procedure set_AllowWriteStreamBuffering(value: Boolean);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_BaseAddress: string;
    procedure set_BaseAddress(value: string);
    function get_Credentials: DNICredentials;
    procedure set_Credentials(value: DNICredentials);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_Headers: DNWebHeaderCollection;
    procedure set_Headers(value: DNWebHeaderCollection);
    function get_QueryString: DNNameValueCollection;
    procedure set_QueryString(value: DNNameValueCollection);
    function get_ResponseHeaders: DNWebHeaderCollection;
    function get_Proxy: DNIWebProxy;
    procedure set_Proxy(value: DNIWebProxy);
    function get_CachePolicy: DNRequestCachePolicy;
    procedure set_CachePolicy(value: DNRequestCachePolicy);
    function get_IsBusy: Boolean;
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_Container: DNIContainer;

  { events } 

    procedure add_WriteStreamClosed(value: DNWriteStreamClosedEventHandler);
    procedure remove_WriteStreamClosed(value: DNWriteStreamClosedEventHandler);
    procedure add_OpenReadCompleted(value: DNOpenReadCompletedEventHandler);
    procedure remove_OpenReadCompleted(value: DNOpenReadCompletedEventHandler);
    procedure add_OpenWriteCompleted(value: DNOpenWriteCompletedEventHandler);
    procedure remove_OpenWriteCompleted(value: DNOpenWriteCompletedEventHandler);
    procedure add_DownloadStringCompleted(value: DNDownloadStringCompletedEventHandler);
    procedure remove_DownloadStringCompleted(value: DNDownloadStringCompletedEventHandler);
    procedure add_DownloadDataCompleted(value: DNDownloadDataCompletedEventHandler);
    procedure remove_DownloadDataCompleted(value: DNDownloadDataCompletedEventHandler);
    procedure add_DownloadFileCompleted(value: DNAsyncCompletedEventHandler);
    procedure remove_DownloadFileCompleted(value: DNAsyncCompletedEventHandler);
    procedure add_UploadStringCompleted(value: DNUploadStringCompletedEventHandler);
    procedure remove_UploadStringCompleted(value: DNUploadStringCompletedEventHandler);
    procedure add_UploadDataCompleted(value: DNUploadDataCompletedEventHandler);
    procedure remove_UploadDataCompleted(value: DNUploadDataCompletedEventHandler);
    procedure add_UploadFileCompleted(value: DNUploadFileCompletedEventHandler);
    procedure remove_UploadFileCompleted(value: DNUploadFileCompletedEventHandler);
    procedure add_UploadValuesCompleted(value: DNUploadValuesCompletedEventHandler);
    procedure remove_UploadValuesCompleted(value: DNUploadValuesCompletedEventHandler);
    procedure add_DownloadProgressChanged(value: DNDownloadProgressChangedEventHandler);
    procedure remove_DownloadProgressChanged(value: DNDownloadProgressChangedEventHandler);
    procedure add_UploadProgressChanged(value: DNUploadProgressChangedEventHandler);
    procedure remove_UploadProgressChanged(value: DNUploadProgressChangedEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function DownloadData(address: string): TArray<Byte>; overload;
    function DownloadData(address: DNUri): TArray<Byte>; overload;
    procedure DownloadFile(address: string; fileName: string); overload;
    procedure DownloadFile(address: DNUri; fileName: string); overload;
    function OpenRead(address: string): DDN.mscorlib.DNStream; overload;
    function OpenRead(address: DNUri): DDN.mscorlib.DNStream; overload;
    function OpenWrite(address: string): DDN.mscorlib.DNStream; overload;
    function OpenWrite(address: DNUri): DDN.mscorlib.DNStream; overload;
    function OpenWrite(address: string; method: string): DDN.mscorlib.DNStream; overload;
    function OpenWrite(address: DNUri; method: string): DDN.mscorlib.DNStream; overload;
    function UploadData(address: string; data: TArray<Byte>): TArray<Byte>; overload;
    function UploadData(address: DNUri; data: TArray<Byte>): TArray<Byte>; overload;
    function UploadData(address: string; method: string; data: TArray<Byte>): TArray<Byte>; overload;
    function UploadData(address: DNUri; method: string; data: TArray<Byte>): TArray<Byte>; overload;
    function UploadFile(address: string; fileName: string): TArray<Byte>; overload;
    function UploadFile(address: DNUri; fileName: string): TArray<Byte>; overload;
    function UploadFile(address: string; method: string; fileName: string): TArray<Byte>; overload;
    function UploadFile(address: DNUri; method: string; fileName: string): TArray<Byte>; overload;
    function UploadValues(address: string; data: DNNameValueCollection): TArray<Byte>; overload;
    function UploadValues(address: DNUri; data: DNNameValueCollection): TArray<Byte>; overload;
    function UploadValues(address: string; method: string; data: DNNameValueCollection): TArray<Byte>; overload;
    function UploadValues(address: DNUri; method: string; data: DNNameValueCollection): TArray<Byte>; overload;
    function UploadString(address: string; data: string): string; overload;
    function UploadString(address: DNUri; data: string): string; overload;
    function UploadString(address: string; method: string; data: string): string; overload;
    function UploadString(address: DNUri; method: string; data: string): string; overload;
    function DownloadString(address: string): string; overload;
    function DownloadString(address: DNUri): string; overload;
    procedure OpenReadAsync(address: DNUri); overload;
    procedure OpenReadAsync(address: DNUri; userToken: DDN.mscorlib.DNObject); overload;
    procedure OpenWriteAsync(address: DNUri); overload;
    procedure OpenWriteAsync(address: DNUri; method: string); overload;
    procedure OpenWriteAsync(address: DNUri; method: string; userToken: DDN.mscorlib.DNObject); overload;
    procedure DownloadStringAsync(address: DNUri); overload;
    procedure DownloadStringAsync(address: DNUri; userToken: DDN.mscorlib.DNObject); overload;
    procedure DownloadDataAsync(address: DNUri); overload;
    procedure DownloadDataAsync(address: DNUri; userToken: DDN.mscorlib.DNObject); overload;
    procedure DownloadFileAsync(address: DNUri; fileName: string); overload;
    procedure DownloadFileAsync(address: DNUri; fileName: string; userToken: DDN.mscorlib.DNObject); overload;
    procedure UploadStringAsync(address: DNUri; data: string); overload;
    procedure UploadStringAsync(address: DNUri; method: string; data: string); overload;
    procedure UploadStringAsync(address: DNUri; method: string; data: string; userToken: DDN.mscorlib.DNObject); overload;
    procedure UploadDataAsync(address: DNUri; data: TArray<Byte>); overload;
    procedure UploadDataAsync(address: DNUri; method: string; data: TArray<Byte>); overload;
    procedure UploadDataAsync(address: DNUri; method: string; data: TArray<Byte>; userToken: DDN.mscorlib.DNObject); overload;
    procedure UploadFileAsync(address: DNUri; fileName: string); overload;
    procedure UploadFileAsync(address: DNUri; method: string; fileName: string); overload;
    procedure UploadFileAsync(address: DNUri; method: string; fileName: string; userToken: DDN.mscorlib.DNObject); overload;
    procedure UploadValuesAsync(address: DNUri; data: DNNameValueCollection); overload;
    procedure UploadValuesAsync(address: DNUri; method: string; data: DNNameValueCollection); overload;
    procedure UploadValuesAsync(address: DNUri; method: string; data: DNNameValueCollection; userToken: DDN.mscorlib.DNObject); overload;
    procedure CancelAsync;
    function DownloadStringTaskAsync(address: string): DDN.mscorlib.DNTask<string>; overload;
    function DownloadStringTaskAsync(address: DNUri): DDN.mscorlib.DNTask<string>; overload;
    function OpenReadTaskAsync(address: string): DDN.mscorlib.DNTask<DDN.mscorlib.DNStream>; overload;
    function OpenReadTaskAsync(address: DNUri): DDN.mscorlib.DNTask<DDN.mscorlib.DNStream>; overload;
    function OpenWriteTaskAsync(address: string): DDN.mscorlib.DNTask<DDN.mscorlib.DNStream>; overload;
    function OpenWriteTaskAsync(address: DNUri): DDN.mscorlib.DNTask<DDN.mscorlib.DNStream>; overload;
    function OpenWriteTaskAsync(address: string; method: string): DDN.mscorlib.DNTask<DDN.mscorlib.DNStream>; overload;
    function OpenWriteTaskAsync(address: DNUri; method: string): DDN.mscorlib.DNTask<DDN.mscorlib.DNStream>; overload;
    function UploadStringTaskAsync(address: string; data: string): DDN.mscorlib.DNTask<string>; overload;
    function UploadStringTaskAsync(address: DNUri; data: string): DDN.mscorlib.DNTask<string>; overload;
    function UploadStringTaskAsync(address: string; method: string; data: string): DDN.mscorlib.DNTask<string>; overload;
    function UploadStringTaskAsync(address: DNUri; method: string; data: string): DDN.mscorlib.DNTask<string>; overload;
    function DownloadDataTaskAsync(address: string): DDN.mscorlib.DNTask<TArray<Byte>>; overload;
    function DownloadDataTaskAsync(address: DNUri): DDN.mscorlib.DNTask<TArray<Byte>>; overload;
    function DownloadFileTaskAsync(address: string; fileName: string): DDN.mscorlib.DNTask; overload;
    function DownloadFileTaskAsync(address: DNUri; fileName: string): DDN.mscorlib.DNTask; overload;
    function UploadDataTaskAsync(address: string; data: TArray<Byte>): DDN.mscorlib.DNTask<TArray<Byte>>; overload;
    function UploadDataTaskAsync(address: DNUri; data: TArray<Byte>): DDN.mscorlib.DNTask<TArray<Byte>>; overload;
    function UploadDataTaskAsync(address: string; method: string; data: TArray<Byte>): DDN.mscorlib.DNTask<TArray<Byte>>; overload;
    function UploadDataTaskAsync(address: DNUri; method: string; data: TArray<Byte>): DDN.mscorlib.DNTask<TArray<Byte>>; overload;
    function UploadFileTaskAsync(address: string; fileName: string): DDN.mscorlib.DNTask<TArray<Byte>>; overload;
    function UploadFileTaskAsync(address: DNUri; fileName: string): DDN.mscorlib.DNTask<TArray<Byte>>; overload;
    function UploadFileTaskAsync(address: string; method: string; fileName: string): DDN.mscorlib.DNTask<TArray<Byte>>; overload;
    function UploadFileTaskAsync(address: DNUri; method: string; fileName: string): DDN.mscorlib.DNTask<TArray<Byte>>; overload;
    function UploadValuesTaskAsync(address: string; data: DNNameValueCollection): DDN.mscorlib.DNTask<TArray<Byte>>; overload;
    function UploadValuesTaskAsync(address: string; method: string; data: DNNameValueCollection): DDN.mscorlib.DNTask<TArray<Byte>>; overload;
    function UploadValuesTaskAsync(address: DNUri; data: DNNameValueCollection): DDN.mscorlib.DNTask<TArray<Byte>>; overload;
    function UploadValuesTaskAsync(address: DNUri; method: string; data: DNNameValueCollection): DDN.mscorlib.DNTask<TArray<Byte>>; overload;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AllowReadStreamBuffering: Boolean read get_AllowReadStreamBuffering write set_AllowReadStreamBuffering;
    property AllowWriteStreamBuffering: Boolean read get_AllowWriteStreamBuffering write set_AllowWriteStreamBuffering;
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    property BaseAddress: string read get_BaseAddress write set_BaseAddress;
    property Credentials: DNICredentials read get_Credentials write set_Credentials;
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property Headers: DNWebHeaderCollection read get_Headers write set_Headers;
    property QueryString: DNNameValueCollection read get_QueryString write set_QueryString;
    property ResponseHeaders: DNWebHeaderCollection read get_ResponseHeaders;
    property Proxy: DNIWebProxy read get_Proxy write set_Proxy;
    property CachePolicy: DNRequestCachePolicy read get_CachePolicy write set_CachePolicy;
    property IsBusy: Boolean read get_IsBusy;
    property Site: DNISite read get_Site write set_Site;
    property Container: DNIContainer read get_Container;
  end;

  TDNWebClient = class(TDNGenericImport<DNWebClientClass, DNWebClient>) end;

  //-------------namespace: System.Timers----------------
  DNTimerClass = interface(DNComponentClass)
  ['{A9CF4F0C-951E-55D5-883C-FC07AF1B8E59}']
  { constructors } 

    {class} function init: DNTimer; overload;
    {class} function init(interval: Double): DNTimer; overload;

  end;

  [DNTypeName('System.Timers.Timer')]
  DNTimer = interface(DNComponent)
  ['{7C0A0C3F-8539-377F-A212-DB092D26FFF5}']
  { getters & setters } 

    function get_AutoReset: Boolean;
    procedure set_AutoReset(value: Boolean);
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_Interval: Double;
    procedure set_Interval(value: Double);
    function get_Site: DNISite;
    procedure set_Site(value: DNISite);
    function get_SynchronizingObject: DNISynchronizeInvoke;
    procedure set_SynchronizingObject(value: DNISynchronizeInvoke);
    function get_Container: DNIContainer;

  { events } 

    procedure add_Elapsed(value: DNElapsedEventHandler);
    procedure remove_Elapsed(value: DNElapsedEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure BeginInit;
    procedure EndInit;
    procedure Close;
    procedure Start;
    procedure Stop;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AutoReset: Boolean read get_AutoReset write set_AutoReset;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property Interval: Double read get_Interval write set_Interval;
    property Site: DNISite read get_Site write set_Site;
    property SynchronizingObject: DNISynchronizeInvoke read get_SynchronizingObject write set_SynchronizingObject;
    property Container: DNIContainer read get_Container;
  end;

  TDNTimer = class(TDNGenericImport<DNTimerClass, DNTimer>) end;

  //-------------namespace: System.Diagnostics----------------
  DNTraceListenerClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{5CFED9B0-9178-5C60-8028-FAA10265258E}']
  end;

  [DNTypeName('System.Diagnostics.TraceListener')]
  DNTraceListener = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{14BD87DC-745A-312F-9A11-09E1F3F455A7}']
  { getters & setters } 

    function get_Attributes: DNStringDictionary;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsThreadSafe: Boolean;
    function get_IndentLevel: Int32;
    procedure set_IndentLevel(value: Int32);
    function get_IndentSize: Int32;
    procedure set_IndentSize(value: Int32);
    function get_Filter: DNTraceFilter;
    procedure set_Filter(value: DNTraceFilter);
    function get_TraceOutputOptions: DNTraceOptions;
    procedure set_TraceOutputOptions(value: DNTraceOptions);

  { methods } 

    procedure Dispose;
    procedure Close;
    procedure Flush;
    procedure Fail(message: string); overload;
    procedure Write(o: DDN.mscorlib.DNObject); overload;
    procedure Write(o: DDN.mscorlib.DNObject; category: string); overload;
    procedure WriteLine(o: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(o: DDN.mscorlib.DNObject; category: string); overload;
    procedure TraceData(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; data: DDN.mscorlib.DNObject); overload;
    procedure TraceEvent(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32); overload;
    procedure TraceEvent(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; message: string); overload;
    procedure TraceEvent(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; format: string; args: TArray<DDN.mscorlib.DNObject>); overload;
    procedure Fail(message: string; detailMessage: string); overload;
    procedure Write(message: string); overload;
    procedure Write(message: string; category: string); overload;
    procedure WriteLine(message: string); overload;
    procedure WriteLine(message: string; category: string); overload;
    procedure TraceData(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; data: TArray<DDN.mscorlib.DNObject>); overload;
    procedure TraceTransfer(eventCache: DNTraceEventCache; source: string; id: Int32; message: string; relatedActivityId: DDN.mscorlib.DNGuid);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Attributes: DNStringDictionary read get_Attributes;
    property Name: string read get_Name write set_Name;
    property IsThreadSafe: Boolean read get_IsThreadSafe;
    property IndentLevel: Int32 read get_IndentLevel write set_IndentLevel;
    property IndentSize: Int32 read get_IndentSize write set_IndentSize;
    property Filter: DNTraceFilter read get_Filter write set_Filter;
    property TraceOutputOptions: DNTraceOptions read get_TraceOutputOptions write set_TraceOutputOptions;
  end;

  TDNTraceListener = class(TDNGenericImport<DNTraceListenerClass, DNTraceListener>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDefaultTraceListenerClass = interface(DNTraceListenerClass)
  ['{AFCFB233-8F19-595A-9974-2620308864E1}']
  { constructors } 

    {class} function init: DNDefaultTraceListener;

  end;

  [DNTypeName('System.Diagnostics.DefaultTraceListener')]
  DNDefaultTraceListener = interface(DNTraceListener)
  ['{4077F5BB-29DE-3FE2-AB1A-D249D99B9F7E}']
  { getters & setters } 

    function get_AssertUiEnabled: Boolean;
    procedure set_AssertUiEnabled(value: Boolean);
    function get_LogFileName: string;
    procedure set_LogFileName(value: string);
    function get_Attributes: DNStringDictionary;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsThreadSafe: Boolean;
    function get_IndentLevel: Int32;
    procedure set_IndentLevel(value: Int32);
    function get_IndentSize: Int32;
    procedure set_IndentSize(value: Int32);
    function get_Filter: DNTraceFilter;
    procedure set_Filter(value: DNTraceFilter);
    function get_TraceOutputOptions: DNTraceOptions;
    procedure set_TraceOutputOptions(value: DNTraceOptions);

  { methods } 

    procedure Fail(message: string); overload;
    procedure Fail(message: string; detailMessage: string); overload;
    procedure Write(message: string); overload;
    procedure WriteLine(message: string); overload;
    procedure Dispose;
    procedure Close;
    procedure Flush;
    procedure Write(o: DDN.mscorlib.DNObject); overload;
    procedure Write(o: DDN.mscorlib.DNObject; category: string); overload;
    procedure WriteLine(o: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(o: DDN.mscorlib.DNObject; category: string); overload;
    procedure TraceData(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; data: DDN.mscorlib.DNObject); overload;
    procedure TraceEvent(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32); overload;
    procedure TraceEvent(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; message: string); overload;
    procedure TraceEvent(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; format: string; args: TArray<DDN.mscorlib.DNObject>); overload;
    procedure Write(message: string; category: string); overload;
    procedure WriteLine(message: string; category: string); overload;
    procedure TraceData(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; data: TArray<DDN.mscorlib.DNObject>); overload;
    procedure TraceTransfer(eventCache: DNTraceEventCache; source: string; id: Int32; message: string; relatedActivityId: DDN.mscorlib.DNGuid);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AssertUiEnabled: Boolean read get_AssertUiEnabled write set_AssertUiEnabled;
    property LogFileName: string read get_LogFileName write set_LogFileName;
    property Attributes: DNStringDictionary read get_Attributes;
    property Name: string read get_Name write set_Name;
    property IsThreadSafe: Boolean read get_IsThreadSafe;
    property IndentLevel: Int32 read get_IndentLevel write set_IndentLevel;
    property IndentSize: Int32 read get_IndentSize write set_IndentSize;
    property Filter: DNTraceFilter read get_Filter write set_Filter;
    property TraceOutputOptions: DNTraceOptions read get_TraceOutputOptions write set_TraceOutputOptions;
  end;

  TDNDefaultTraceListener = class(TDNGenericImport<DNDefaultTraceListenerClass, DNDefaultTraceListener>) end;

  //-------------namespace: System.Diagnostics----------------
  DNEventLogTraceListenerClass = interface(DNTraceListenerClass)
  ['{F3A73F3C-773A-54F8-AE4A-2ADC7E77D594}']
  { constructors } 

    {class} function init: DNEventLogTraceListener; overload;
    {class} function init(eventLog: DNEventLog): DNEventLogTraceListener; overload;
    {class} function init(source: string): DNEventLogTraceListener; overload;

  end;

  [DNTypeName('System.Diagnostics.EventLogTraceListener')]
  DNEventLogTraceListener = interface(DNTraceListener)
  ['{9F5E7EC0-0231-36DA-8C5C-C2EF2A1FF897}']
  { getters & setters } 

    function get_EventLog: DNEventLog;
    procedure set_EventLog(value: DNEventLog);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Attributes: DNStringDictionary;
    function get_IsThreadSafe: Boolean;
    function get_IndentLevel: Int32;
    procedure set_IndentLevel(value: Int32);
    function get_IndentSize: Int32;
    procedure set_IndentSize(value: Int32);
    function get_Filter: DNTraceFilter;
    procedure set_Filter(value: DNTraceFilter);
    function get_TraceOutputOptions: DNTraceOptions;
    procedure set_TraceOutputOptions(value: DNTraceOptions);

  { methods } 

    procedure Close;
    procedure Write(message: string); overload;
    procedure WriteLine(message: string); overload;
    procedure TraceEvent(eventCache: DNTraceEventCache; source: string; severity: DNTraceEventType; id: Int32; format: string; args: TArray<DDN.mscorlib.DNObject>); overload;
    procedure TraceEvent(eventCache: DNTraceEventCache; source: string; severity: DNTraceEventType; id: Int32; message: string); overload;
    procedure TraceData(eventCache: DNTraceEventCache; source: string; severity: DNTraceEventType; id: Int32; data: DDN.mscorlib.DNObject); overload;
    procedure TraceData(eventCache: DNTraceEventCache; source: string; severity: DNTraceEventType; id: Int32; data: TArray<DDN.mscorlib.DNObject>); overload;
    procedure Dispose;
    procedure Flush;
    procedure Fail(message: string); overload;
    procedure Write(o: DDN.mscorlib.DNObject); overload;
    procedure Write(o: DDN.mscorlib.DNObject; category: string); overload;
    procedure WriteLine(o: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(o: DDN.mscorlib.DNObject; category: string); overload;
    procedure TraceEvent(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32); overload;
    procedure Fail(message: string; detailMessage: string); overload;
    procedure Write(message: string; category: string); overload;
    procedure WriteLine(message: string; category: string); overload;
    procedure TraceTransfer(eventCache: DNTraceEventCache; source: string; id: Int32; message: string; relatedActivityId: DDN.mscorlib.DNGuid);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EventLog: DNEventLog read get_EventLog write set_EventLog;
    property Name: string read get_Name write set_Name;
    property Attributes: DNStringDictionary read get_Attributes;
    property IsThreadSafe: Boolean read get_IsThreadSafe;
    property IndentLevel: Int32 read get_IndentLevel write set_IndentLevel;
    property IndentSize: Int32 read get_IndentSize write set_IndentSize;
    property Filter: DNTraceFilter read get_Filter write set_Filter;
    property TraceOutputOptions: DNTraceOptions read get_TraceOutputOptions write set_TraceOutputOptions;
  end;

  TDNEventLogTraceListener = class(TDNGenericImport<DNEventLogTraceListenerClass, DNEventLogTraceListener>) end;

  //-------------namespace: System.Diagnostics----------------
  DNTextWriterTraceListenerClass = interface(DNTraceListenerClass)
  ['{59889524-4923-55C6-A4B6-9258ED67B81D}']
  { constructors } 

    {class} function init: DNTextWriterTraceListener; overload;
    {class} function init(stream: DDN.mscorlib.DNStream): DNTextWriterTraceListener; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; name: string): DNTextWriterTraceListener; overload;
    {class} function init(writer: DDN.mscorlib.DNTextWriter): DNTextWriterTraceListener; overload;
    {class} function init(writer: DDN.mscorlib.DNTextWriter; name: string): DNTextWriterTraceListener; overload;
    {class} function init(fileName: string): DNTextWriterTraceListener; overload;
    {class} function init(fileName: string; name: string): DNTextWriterTraceListener; overload;

  end;

  [DNTypeName('System.Diagnostics.TextWriterTraceListener')]
  DNTextWriterTraceListener = interface(DNTraceListener)
  ['{03C11BC2-8B1F-3F2F-936A-2B1B0356F84F}']
  { getters & setters } 

    function get_Writer: DDN.mscorlib.DNTextWriter;
    procedure set_Writer(value: DDN.mscorlib.DNTextWriter);
    function get_Attributes: DNStringDictionary;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsThreadSafe: Boolean;
    function get_IndentLevel: Int32;
    procedure set_IndentLevel(value: Int32);
    function get_IndentSize: Int32;
    procedure set_IndentSize(value: Int32);
    function get_Filter: DNTraceFilter;
    procedure set_Filter(value: DNTraceFilter);
    function get_TraceOutputOptions: DNTraceOptions;
    procedure set_TraceOutputOptions(value: DNTraceOptions);

  { methods } 

    procedure Close;
    procedure Flush;
    procedure Write(message: string); overload;
    procedure WriteLine(message: string); overload;
    procedure Dispose;
    procedure Fail(message: string); overload;
    procedure Write(o: DDN.mscorlib.DNObject); overload;
    procedure Write(o: DDN.mscorlib.DNObject; category: string); overload;
    procedure WriteLine(o: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(o: DDN.mscorlib.DNObject; category: string); overload;
    procedure TraceData(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; data: DDN.mscorlib.DNObject); overload;
    procedure TraceEvent(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32); overload;
    procedure TraceEvent(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; message: string); overload;
    procedure TraceEvent(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; format: string; args: TArray<DDN.mscorlib.DNObject>); overload;
    procedure Fail(message: string; detailMessage: string); overload;
    procedure Write(message: string; category: string); overload;
    procedure WriteLine(message: string; category: string); overload;
    procedure TraceData(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; data: TArray<DDN.mscorlib.DNObject>); overload;
    procedure TraceTransfer(eventCache: DNTraceEventCache; source: string; id: Int32; message: string; relatedActivityId: DDN.mscorlib.DNGuid);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Writer: DDN.mscorlib.DNTextWriter read get_Writer write set_Writer;
    property Attributes: DNStringDictionary read get_Attributes;
    property Name: string read get_Name write set_Name;
    property IsThreadSafe: Boolean read get_IsThreadSafe;
    property IndentLevel: Int32 read get_IndentLevel write set_IndentLevel;
    property IndentSize: Int32 read get_IndentSize write set_IndentSize;
    property Filter: DNTraceFilter read get_Filter write set_Filter;
    property TraceOutputOptions: DNTraceOptions read get_TraceOutputOptions write set_TraceOutputOptions;
  end;

  TDNTextWriterTraceListener = class(TDNGenericImport<DNTextWriterTraceListenerClass, DNTextWriterTraceListener>) end;

  //-------------namespace: System.Diagnostics----------------
  DNConsoleTraceListenerClass = interface(DNTextWriterTraceListenerClass)
  ['{45EFE34E-A923-5E1C-980C-1EA42BE8758D}']
  { constructors } 

    {class} function init: DNConsoleTraceListener; overload;
    {class} function init(useErrorStream: Boolean): DNConsoleTraceListener; overload;

  end;

  [DNTypeName('System.Diagnostics.ConsoleTraceListener')]
  DNConsoleTraceListener = interface(DNTextWriterTraceListener)
  ['{87BB00B4-2C34-3F3C-9942-654800343DFD}']
  { getters & setters } 

    function get_Writer: DDN.mscorlib.DNTextWriter;
    procedure set_Writer(value: DDN.mscorlib.DNTextWriter);
    function get_Attributes: DNStringDictionary;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsThreadSafe: Boolean;
    function get_IndentLevel: Int32;
    procedure set_IndentLevel(value: Int32);
    function get_IndentSize: Int32;
    procedure set_IndentSize(value: Int32);
    function get_Filter: DNTraceFilter;
    procedure set_Filter(value: DNTraceFilter);
    function get_TraceOutputOptions: DNTraceOptions;
    procedure set_TraceOutputOptions(value: DNTraceOptions);

  { methods } 

    procedure Close;
    procedure Flush;
    procedure Write(message: string); overload;
    procedure WriteLine(message: string); overload;
    procedure Dispose;
    procedure Fail(message: string); overload;
    procedure Write(o: DDN.mscorlib.DNObject); overload;
    procedure Write(o: DDN.mscorlib.DNObject; category: string); overload;
    procedure WriteLine(o: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(o: DDN.mscorlib.DNObject; category: string); overload;
    procedure TraceData(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; data: DDN.mscorlib.DNObject); overload;
    procedure TraceEvent(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32); overload;
    procedure TraceEvent(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; message: string); overload;
    procedure TraceEvent(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; format: string; args: TArray<DDN.mscorlib.DNObject>); overload;
    procedure Fail(message: string; detailMessage: string); overload;
    procedure Write(message: string; category: string); overload;
    procedure WriteLine(message: string; category: string); overload;
    procedure TraceData(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; data: TArray<DDN.mscorlib.DNObject>); overload;
    procedure TraceTransfer(eventCache: DNTraceEventCache; source: string; id: Int32; message: string; relatedActivityId: DDN.mscorlib.DNGuid);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Writer: DDN.mscorlib.DNTextWriter read get_Writer write set_Writer;
    property Attributes: DNStringDictionary read get_Attributes;
    property Name: string read get_Name write set_Name;
    property IsThreadSafe: Boolean read get_IsThreadSafe;
    property IndentLevel: Int32 read get_IndentLevel write set_IndentLevel;
    property IndentSize: Int32 read get_IndentSize write set_IndentSize;
    property Filter: DNTraceFilter read get_Filter write set_Filter;
    property TraceOutputOptions: DNTraceOptions read get_TraceOutputOptions write set_TraceOutputOptions;
  end;

  TDNConsoleTraceListener = class(TDNGenericImport<DNConsoleTraceListenerClass, DNConsoleTraceListener>) end;

  //-------------namespace: System.Diagnostics----------------
  DNDelimitedListTraceListenerClass = interface(DNTextWriterTraceListenerClass)
  ['{825535D7-3753-5D2C-AC55-25621784864E}']
  { constructors } 

    {class} function init(stream: DDN.mscorlib.DNStream): DNDelimitedListTraceListener; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; name: string): DNDelimitedListTraceListener; overload;
    {class} function init(writer: DDN.mscorlib.DNTextWriter): DNDelimitedListTraceListener; overload;
    {class} function init(writer: DDN.mscorlib.DNTextWriter; name: string): DNDelimitedListTraceListener; overload;
    {class} function init(fileName: string): DNDelimitedListTraceListener; overload;
    {class} function init(fileName: string; name: string): DNDelimitedListTraceListener; overload;

  end;

  [DNTypeName('System.Diagnostics.DelimitedListTraceListener')]
  DNDelimitedListTraceListener = interface(DNTextWriterTraceListener)
  ['{BE45AB5C-87B4-354F-B40B-95F1C8C5F50A}']
  { getters & setters } 

    function get_Delimiter: string;
    procedure set_Delimiter(value: string);
    function get_Writer: DDN.mscorlib.DNTextWriter;
    procedure set_Writer(value: DDN.mscorlib.DNTextWriter);
    function get_Attributes: DNStringDictionary;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsThreadSafe: Boolean;
    function get_IndentLevel: Int32;
    procedure set_IndentLevel(value: Int32);
    function get_IndentSize: Int32;
    procedure set_IndentSize(value: Int32);
    function get_Filter: DNTraceFilter;
    procedure set_Filter(value: DNTraceFilter);
    function get_TraceOutputOptions: DNTraceOptions;
    procedure set_TraceOutputOptions(value: DNTraceOptions);

  { methods } 

    procedure TraceEvent(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; format: string; args: TArray<DDN.mscorlib.DNObject>); overload;
    procedure TraceEvent(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; message: string); overload;
    procedure TraceData(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; data: DDN.mscorlib.DNObject); overload;
    procedure TraceData(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; data: TArray<DDN.mscorlib.DNObject>); overload;
    procedure Close;
    procedure Flush;
    procedure Write(message: string); overload;
    procedure WriteLine(message: string); overload;
    procedure Dispose;
    procedure Fail(message: string); overload;
    procedure Write(o: DDN.mscorlib.DNObject); overload;
    procedure Write(o: DDN.mscorlib.DNObject; category: string); overload;
    procedure WriteLine(o: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(o: DDN.mscorlib.DNObject; category: string); overload;
    procedure TraceEvent(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32); overload;
    procedure Fail(message: string; detailMessage: string); overload;
    procedure Write(message: string; category: string); overload;
    procedure WriteLine(message: string; category: string); overload;
    procedure TraceTransfer(eventCache: DNTraceEventCache; source: string; id: Int32; message: string; relatedActivityId: DDN.mscorlib.DNGuid);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Delimiter: string read get_Delimiter write set_Delimiter;
    property Writer: DDN.mscorlib.DNTextWriter read get_Writer write set_Writer;
    property Attributes: DNStringDictionary read get_Attributes;
    property Name: string read get_Name write set_Name;
    property IsThreadSafe: Boolean read get_IsThreadSafe;
    property IndentLevel: Int32 read get_IndentLevel write set_IndentLevel;
    property IndentSize: Int32 read get_IndentSize write set_IndentSize;
    property Filter: DNTraceFilter read get_Filter write set_Filter;
    property TraceOutputOptions: DNTraceOptions read get_TraceOutputOptions write set_TraceOutputOptions;
  end;

  TDNDelimitedListTraceListener = class(TDNGenericImport<DNDelimitedListTraceListenerClass, DNDelimitedListTraceListener>) end;

  //-------------namespace: System.Diagnostics----------------
  DNXmlWriterTraceListenerClass = interface(DNTextWriterTraceListenerClass)
  ['{6170FE3B-1800-502D-93D7-FB416C1D27DA}']
  { constructors } 

    {class} function init(stream: DDN.mscorlib.DNStream): DNXmlWriterTraceListener; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; name: string): DNXmlWriterTraceListener; overload;
    {class} function init(writer: DDN.mscorlib.DNTextWriter): DNXmlWriterTraceListener; overload;
    {class} function init(writer: DDN.mscorlib.DNTextWriter; name: string): DNXmlWriterTraceListener; overload;
    {class} function init(filename: string): DNXmlWriterTraceListener; overload;
    {class} function init(filename: string; name: string): DNXmlWriterTraceListener; overload;

  end;

  [DNTypeName('System.Diagnostics.XmlWriterTraceListener')]
  DNXmlWriterTraceListener = interface(DNTextWriterTraceListener)
  ['{4481B1EB-314E-3D91-907F-2E40358AA8FA}']
  { getters & setters } 

    function get_Writer: DDN.mscorlib.DNTextWriter;
    procedure set_Writer(value: DDN.mscorlib.DNTextWriter);
    function get_Attributes: DNStringDictionary;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsThreadSafe: Boolean;
    function get_IndentLevel: Int32;
    procedure set_IndentLevel(value: Int32);
    function get_IndentSize: Int32;
    procedure set_IndentSize(value: Int32);
    function get_Filter: DNTraceFilter;
    procedure set_Filter(value: DNTraceFilter);
    function get_TraceOutputOptions: DNTraceOptions;
    procedure set_TraceOutputOptions(value: DNTraceOptions);

  { methods } 

    procedure Write(message: string); overload;
    procedure TraceEvent(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; format: string; args: TArray<DDN.mscorlib.DNObject>); overload;
    procedure TraceEvent(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; message: string); overload;
    procedure TraceTransfer(eventCache: DNTraceEventCache; source: string; id: Int32; message: string; relatedActivityId: DDN.mscorlib.DNGuid);
    procedure WriteLine(message: string); overload;
    procedure Fail(message: string; detailMessage: string); overload;
    procedure TraceData(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; data: DDN.mscorlib.DNObject); overload;
    procedure TraceData(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32; data: TArray<DDN.mscorlib.DNObject>); overload;
    procedure Close;
    procedure Flush;
    procedure Dispose;
    procedure Fail(message: string); overload;
    procedure Write(o: DDN.mscorlib.DNObject); overload;
    procedure Write(o: DDN.mscorlib.DNObject; category: string); overload;
    procedure WriteLine(o: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(o: DDN.mscorlib.DNObject; category: string); overload;
    procedure TraceEvent(eventCache: DNTraceEventCache; source: string; eventType: DNTraceEventType; id: Int32); overload;
    procedure Write(message: string; category: string); overload;
    procedure WriteLine(message: string; category: string); overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Writer: DDN.mscorlib.DNTextWriter read get_Writer write set_Writer;
    property Attributes: DNStringDictionary read get_Attributes;
    property Name: string read get_Name write set_Name;
    property IsThreadSafe: Boolean read get_IsThreadSafe;
    property IndentLevel: Int32 read get_IndentLevel write set_IndentLevel;
    property IndentSize: Int32 read get_IndentSize write set_IndentSize;
    property Filter: DNTraceFilter read get_Filter write set_Filter;
    property TraceOutputOptions: DNTraceOptions read get_TraceOutputOptions write set_TraceOutputOptions;
  end;

  TDNXmlWriterTraceListener = class(TDNGenericImport<DNXmlWriterTraceListenerClass, DNXmlWriterTraceListener>) end;

  //-------------namespace: System.IO.Compression----------------
  DNDeflateStreamClass = interface(DDN.mscorlib.DNStreamClass)
  ['{E46C5179-DA1A-5B25-82CE-39064B1637F8}']
  { constructors } 

    {class} function init(stream: DDN.mscorlib.DNStream; mode: DNCompressionMode): DNDeflateStream; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; mode: DNCompressionMode; leaveOpen: Boolean): DNDeflateStream; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; compressionLevel: DNCompressionLevel): DNDeflateStream; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; compressionLevel: DNCompressionLevel; leaveOpen: Boolean): DNDeflateStream; overload;

  end;

  [DNTypeName('System.IO.Compression.DeflateStream')]
  DNDeflateStream = interface(DDN.mscorlib.DNStream)
  ['{6AE75E8C-8BE2-3CF9-91E0-FD497A8893EE}']
  { getters & setters } 

    function get_BaseStream: DDN.mscorlib.DNStream;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_CanSeek: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    procedure Flush;
    function Seek(offset: Int64; origin: DDN.mscorlib.DNSeekOrigin): Int64;
    procedure SetLength(value: Int64);
    function Read(&array: TArray<Byte>; offset: Int32; count: Int32): Int32;
    function BeginRead(&array: TArray<Byte>; offset: Int32; count: Int32; asyncCallback: DDN.mscorlib.DNAsyncCallback; asyncState: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndRead(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32;
    procedure Write(&array: TArray<Byte>; offset: Int32; count: Int32);
    function BeginWrite(&array: TArray<Byte>; offset: Int32; count: Int32; asyncCallback: DDN.mscorlib.DNAsyncCallback; asyncState: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    procedure EndWrite(asyncResult: DDN.mscorlib.DNIAsyncResult);
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Close;
    procedure Dispose;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadByte: Int32;
    procedure WriteByte(value: Byte);
    function CopyToAsync(destination: DDN.mscorlib.DNStream): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32): DDN.mscorlib.DNTask; overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream); overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream; bufferSize: Int32); overload;
    function FlushAsync: DDN.mscorlib.DNTask; overload;
    function FlushAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BaseStream: DDN.mscorlib.DNStream read get_BaseStream;
    property CanRead: Boolean read get_CanRead;
    property CanWrite: Boolean read get_CanWrite;
    property CanSeek: Boolean read get_CanSeek;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position write set_Position;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNDeflateStream = class(TDNGenericImport<DNDeflateStreamClass, DNDeflateStream>) end;

  //-------------namespace: System.IO.Compression----------------
  DNGZipStreamClass = interface(DDN.mscorlib.DNStreamClass)
  ['{07B0E8A0-AAA1-5343-BF24-04FCAAD1E7B8}']
  { constructors } 

    {class} function init(stream: DDN.mscorlib.DNStream; mode: DNCompressionMode): DNGZipStream; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; mode: DNCompressionMode; leaveOpen: Boolean): DNGZipStream; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; compressionLevel: DNCompressionLevel): DNGZipStream; overload;
    {class} function init(stream: DDN.mscorlib.DNStream; compressionLevel: DNCompressionLevel; leaveOpen: Boolean): DNGZipStream; overload;

  end;

  [DNTypeName('System.IO.Compression.GZipStream')]
  DNGZipStream = interface(DDN.mscorlib.DNStream)
  ['{1EDD289D-F4F9-3CFA-BD0C-EC17F5083E5E}']
  { getters & setters } 

    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_CanSeek: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_BaseStream: DDN.mscorlib.DNStream;
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    procedure Flush;
    function Seek(offset: Int64; origin: DDN.mscorlib.DNSeekOrigin): Int64;
    procedure SetLength(value: Int64);
    function BeginRead(&array: TArray<Byte>; offset: Int32; count: Int32; asyncCallback: DDN.mscorlib.DNAsyncCallback; asyncState: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndRead(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32;
    function BeginWrite(&array: TArray<Byte>; offset: Int32; count: Int32; asyncCallback: DDN.mscorlib.DNAsyncCallback; asyncState: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    procedure EndWrite(asyncResult: DDN.mscorlib.DNIAsyncResult);
    function Read(&array: TArray<Byte>; offset: Int32; count: Int32): Int32;
    procedure Write(&array: TArray<Byte>; offset: Int32; count: Int32);
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Close;
    procedure Dispose;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadByte: Int32;
    procedure WriteByte(value: Byte);
    function CopyToAsync(destination: DDN.mscorlib.DNStream): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32): DDN.mscorlib.DNTask; overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream); overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream; bufferSize: Int32); overload;
    function FlushAsync: DDN.mscorlib.DNTask; overload;
    function FlushAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CanRead: Boolean read get_CanRead;
    property CanWrite: Boolean read get_CanWrite;
    property CanSeek: Boolean read get_CanSeek;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position write set_Position;
    property BaseStream: DDN.mscorlib.DNStream read get_BaseStream;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNGZipStream = class(TDNGenericImport<DNGZipStreamClass, DNGZipStream>) end;

  //-------------namespace: System.Net.Security----------------
  DNAuthenticatedStreamClass = interface(DDN.mscorlib.DNStreamClass)
  ['{A0CC66EF-154F-5BD9-AEA4-BA55DC5295BE}']
  end;

  [DNTypeName('System.Net.Security.AuthenticatedStream')]
  DNAuthenticatedStream = interface(DDN.mscorlib.DNStream)
  ['{1E7D8A83-BE53-397B-A247-20430257DEE0}']
  { getters & setters } 

    function get_LeaveInnerStreamOpen: Boolean;
    function get_IsAuthenticated: Boolean;
    function get_IsMutuallyAuthenticated: Boolean;
    function get_IsEncrypted: Boolean;
    function get_IsSigned: Boolean;
    function get_IsServer: Boolean;
    function get_CanRead: Boolean;
    function get_CanSeek: Boolean;
    function get_CanTimeout: Boolean;
    function get_CanWrite: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Close;
    procedure Dispose;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndRead(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    procedure EndWrite(asyncResult: DDN.mscorlib.DNIAsyncResult);
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadByte: Int32;
    procedure WriteByte(value: Byte);
    function CopyToAsync(destination: DDN.mscorlib.DNStream): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32): DDN.mscorlib.DNTask; overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream); overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream; bufferSize: Int32); overload;
    procedure Flush;
    function FlushAsync: DDN.mscorlib.DNTask; overload;
    function FlushAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function Seek(offset: Int64; origin: DDN.mscorlib.DNSeekOrigin): Int64;
    procedure SetLength(value: Int64);
    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32;
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LeaveInnerStreamOpen: Boolean read get_LeaveInnerStreamOpen;
    property IsAuthenticated: Boolean read get_IsAuthenticated;
    property IsMutuallyAuthenticated: Boolean read get_IsMutuallyAuthenticated;
    property IsEncrypted: Boolean read get_IsEncrypted;
    property IsSigned: Boolean read get_IsSigned;
    property IsServer: Boolean read get_IsServer;
    property CanRead: Boolean read get_CanRead;
    property CanSeek: Boolean read get_CanSeek;
    property CanTimeout: Boolean read get_CanTimeout;
    property CanWrite: Boolean read get_CanWrite;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position write set_Position;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNAuthenticatedStream = class(TDNGenericImport<DNAuthenticatedStreamClass, DNAuthenticatedStream>) end;

  //-------------namespace: System.Net.Security----------------
  DNNegotiateStreamClass = interface(DNAuthenticatedStreamClass)
  ['{24F86B46-C8DD-56F0-9D8C-1ED195739E81}']
  { constructors } 

    {class} function init(innerStream: DDN.mscorlib.DNStream): DNNegotiateStream; overload;
    {class} function init(innerStream: DDN.mscorlib.DNStream; leaveInnerStreamOpen: Boolean): DNNegotiateStream; overload;

  end;

  [DNTypeName('System.Net.Security.NegotiateStream')]
  DNNegotiateStream = interface(DNAuthenticatedStream)
  ['{5713EFF6-CC9D-3FEE-BE84-EDFF5A36E43E}']
  { getters & setters } 

    function get_IsAuthenticated: Boolean;
    function get_IsMutuallyAuthenticated: Boolean;
    function get_IsEncrypted: Boolean;
    function get_IsSigned: Boolean;
    function get_IsServer: Boolean;
    function get_ImpersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel;
    function get_RemoteIdentity: DDN.mscorlib.DNIIdentity;
    function get_CanSeek: Boolean;
    function get_CanRead: Boolean;
    function get_CanTimeout: Boolean;
    function get_CanWrite: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_LeaveInnerStreamOpen: Boolean;

  { methods } 

    procedure AuthenticateAsClient; overload;
    procedure AuthenticateAsClient(credential: DNNetworkCredential; targetName: string); overload;
    procedure AuthenticateAsClient(credential: DNNetworkCredential; binding: DNChannelBinding; targetName: string); overload;
    procedure AuthenticateAsClient(credential: DNNetworkCredential; targetName: string; requiredProtectionLevel: DNProtectionLevel; allowedImpersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel); overload;
    procedure AuthenticateAsClient(credential: DNNetworkCredential; binding: DNChannelBinding; targetName: string; requiredProtectionLevel: DNProtectionLevel; allowedImpersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel); overload;
    function BeginAuthenticateAsClient(asyncCallback: DDN.mscorlib.DNAsyncCallback; asyncState: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function BeginAuthenticateAsClient(credential: DNNetworkCredential; targetName: string; asyncCallback: DDN.mscorlib.DNAsyncCallback; asyncState: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function BeginAuthenticateAsClient(credential: DNNetworkCredential; binding: DNChannelBinding; targetName: string; asyncCallback: DDN.mscorlib.DNAsyncCallback; asyncState: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function BeginAuthenticateAsClient(credential: DNNetworkCredential; targetName: string; requiredProtectionLevel: DNProtectionLevel; allowedImpersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel; asyncCallback: DDN.mscorlib.DNAsyncCallback; asyncState: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function BeginAuthenticateAsClient(credential: DNNetworkCredential; binding: DNChannelBinding; targetName: string; requiredProtectionLevel: DNProtectionLevel; allowedImpersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel; asyncCallback: DDN.mscorlib.DNAsyncCallback; asyncState: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    procedure EndAuthenticateAsClient(asyncResult: DDN.mscorlib.DNIAsyncResult);
    procedure AuthenticateAsServer; overload;
    procedure AuthenticateAsServer(policy: DNExtendedProtectionPolicy); overload;
    procedure AuthenticateAsServer(credential: DNNetworkCredential; requiredProtectionLevel: DNProtectionLevel; requiredImpersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel); overload;
    procedure AuthenticateAsServer(credential: DNNetworkCredential; policy: DNExtendedProtectionPolicy; requiredProtectionLevel: DNProtectionLevel; requiredImpersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel); overload;
    function BeginAuthenticateAsServer(asyncCallback: DDN.mscorlib.DNAsyncCallback; asyncState: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function BeginAuthenticateAsServer(policy: DNExtendedProtectionPolicy; asyncCallback: DDN.mscorlib.DNAsyncCallback; asyncState: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function BeginAuthenticateAsServer(credential: DNNetworkCredential; requiredProtectionLevel: DNProtectionLevel; requiredImpersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel; asyncCallback: DDN.mscorlib.DNAsyncCallback; asyncState: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function BeginAuthenticateAsServer(credential: DNNetworkCredential; policy: DNExtendedProtectionPolicy; requiredProtectionLevel: DNProtectionLevel; requiredImpersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel; asyncCallback: DDN.mscorlib.DNAsyncCallback; asyncState: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    procedure EndAuthenticateAsServer(asyncResult: DDN.mscorlib.DNIAsyncResult);
    procedure SetLength(value: Int64);
    function Seek(offset: Int64; origin: DDN.mscorlib.DNSeekOrigin): Int64;
    procedure Flush;
    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32;
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; asyncCallback: DDN.mscorlib.DNAsyncCallback; asyncState: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; asyncCallback: DDN.mscorlib.DNAsyncCallback; asyncState: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function AuthenticateAsClientAsync: DDN.mscorlib.DNTask; overload;
    function AuthenticateAsClientAsync(credential: DNNetworkCredential; targetName: string): DDN.mscorlib.DNTask; overload;
    function AuthenticateAsClientAsync(credential: DNNetworkCredential; targetName: string; requiredProtectionLevel: DNProtectionLevel; allowedImpersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel): DDN.mscorlib.DNTask; overload;
    function AuthenticateAsClientAsync(credential: DNNetworkCredential; binding: DNChannelBinding; targetName: string): DDN.mscorlib.DNTask; overload;
    function AuthenticateAsClientAsync(credential: DNNetworkCredential; binding: DNChannelBinding; targetName: string; requiredProtectionLevel: DNProtectionLevel; allowedImpersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel): DDN.mscorlib.DNTask; overload;
    function AuthenticateAsServerAsync: DDN.mscorlib.DNTask; overload;
    function AuthenticateAsServerAsync(policy: DNExtendedProtectionPolicy): DDN.mscorlib.DNTask; overload;
    function AuthenticateAsServerAsync(credential: DNNetworkCredential; requiredProtectionLevel: DNProtectionLevel; requiredImpersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel): DDN.mscorlib.DNTask; overload;
    function AuthenticateAsServerAsync(credential: DNNetworkCredential; policy: DNExtendedProtectionPolicy; requiredProtectionLevel: DNProtectionLevel; requiredImpersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel): DDN.mscorlib.DNTask; overload;
    function EndRead(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32;
    procedure EndWrite(asyncResult: DDN.mscorlib.DNIAsyncResult);
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Close;
    procedure Dispose;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadByte: Int32;
    procedure WriteByte(value: Byte);
    function CopyToAsync(destination: DDN.mscorlib.DNStream): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32): DDN.mscorlib.DNTask; overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream); overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream; bufferSize: Int32); overload;
    function FlushAsync: DDN.mscorlib.DNTask; overload;
    function FlushAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsAuthenticated: Boolean read get_IsAuthenticated;
    property IsMutuallyAuthenticated: Boolean read get_IsMutuallyAuthenticated;
    property IsEncrypted: Boolean read get_IsEncrypted;
    property IsSigned: Boolean read get_IsSigned;
    property IsServer: Boolean read get_IsServer;
    property ImpersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel read get_ImpersonationLevel;
    property RemoteIdentity: DDN.mscorlib.DNIIdentity read get_RemoteIdentity;
    property CanSeek: Boolean read get_CanSeek;
    property CanRead: Boolean read get_CanRead;
    property CanTimeout: Boolean read get_CanTimeout;
    property CanWrite: Boolean read get_CanWrite;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position write set_Position;
    property LeaveInnerStreamOpen: Boolean read get_LeaveInnerStreamOpen;
  end;

  TDNNegotiateStream = class(TDNGenericImport<DNNegotiateStreamClass, DNNegotiateStream>) end;

  //-------------namespace: System.Net.Security----------------
  DNSslStreamClass = interface(DNAuthenticatedStreamClass)
  ['{18B3688B-9C92-5CC3-B0B3-7D61D98BE5A5}']
  { constructors } 

    {class} function init(innerStream: DDN.mscorlib.DNStream): DNSslStream; overload;
    {class} function init(innerStream: DDN.mscorlib.DNStream; leaveInnerStreamOpen: Boolean): DNSslStream; overload;
    {class} function init(innerStream: DDN.mscorlib.DNStream; leaveInnerStreamOpen: Boolean; userCertificateValidationCallback: DNRemoteCertificateValidationCallback): DNSslStream; overload;
    {class} function init(innerStream: DDN.mscorlib.DNStream; leaveInnerStreamOpen: Boolean; userCertificateValidationCallback: DNRemoteCertificateValidationCallback; userCertificateSelectionCallback: DNLocalCertificateSelectionCallback): DNSslStream; overload;
    {class} function init(innerStream: DDN.mscorlib.DNStream; leaveInnerStreamOpen: Boolean; userCertificateValidationCallback: DNRemoteCertificateValidationCallback; userCertificateSelectionCallback: DNLocalCertificateSelectionCallback; encryptionPolicy: DNEncryptionPolicy): DNSslStream; overload;

  end;

  [DNTypeName('System.Net.Security.SslStream')]
  DNSslStream = interface(DNAuthenticatedStream)
  ['{67983CE3-3BED-3EFE-A48B-ACE716A9D19D}']
  { getters & setters } 

    function get_TransportContext: DNTransportContext;
    function get_IsAuthenticated: Boolean;
    function get_IsMutuallyAuthenticated: Boolean;
    function get_IsEncrypted: Boolean;
    function get_IsSigned: Boolean;
    function get_IsServer: Boolean;
    function get_SslProtocol: DNSslProtocols;
    function get_CheckCertRevocationStatus: Boolean;
    function get_LocalCertificate: DDN.mscorlib.DNX509Certificate;
    function get_RemoteCertificate: DDN.mscorlib.DNX509Certificate;
    function get_CipherAlgorithm: DNCipherAlgorithmType;
    function get_CipherStrength: Int32;
    function get_HashAlgorithm: DNHashAlgorithmType;
    function get_HashStrength: Int32;
    function get_KeyExchangeAlgorithm: DNExchangeAlgorithmType;
    function get_KeyExchangeStrength: Int32;
    function get_CanSeek: Boolean;
    function get_CanRead: Boolean;
    function get_CanTimeout: Boolean;
    function get_CanWrite: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_LeaveInnerStreamOpen: Boolean;

  { methods } 

    procedure AuthenticateAsClient(targetHost: string; clientCertificates: DNX509CertificateCollection; enabledSslProtocols: DNSslProtocols; checkCertificateRevocation: Boolean); overload;
    procedure AuthenticateAsClient(targetHost: string); overload;
    function BeginAuthenticateAsClient(targetHost: string; asyncCallback: DDN.mscorlib.DNAsyncCallback; asyncState: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function BeginAuthenticateAsClient(targetHost: string; clientCertificates: DNX509CertificateCollection; checkCertificateRevocation: Boolean; asyncCallback: DDN.mscorlib.DNAsyncCallback; asyncState: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function BeginAuthenticateAsClient(targetHost: string; clientCertificates: DNX509CertificateCollection; enabledSslProtocols: DNSslProtocols; checkCertificateRevocation: Boolean; asyncCallback: DDN.mscorlib.DNAsyncCallback; asyncState: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    procedure EndAuthenticateAsClient(asyncResult: DDN.mscorlib.DNIAsyncResult);
    procedure AuthenticateAsServer(serverCertificate: DDN.mscorlib.DNX509Certificate); overload;
    procedure AuthenticateAsServer(serverCertificate: DDN.mscorlib.DNX509Certificate; clientCertificateRequired: Boolean; checkCertificateRevocation: Boolean); overload;
    procedure AuthenticateAsServer(serverCertificate: DDN.mscorlib.DNX509Certificate; clientCertificateRequired: Boolean; enabledSslProtocols: DNSslProtocols; checkCertificateRevocation: Boolean); overload;
    function BeginAuthenticateAsServer(serverCertificate: DDN.mscorlib.DNX509Certificate; asyncCallback: DDN.mscorlib.DNAsyncCallback; asyncState: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function BeginAuthenticateAsServer(serverCertificate: DDN.mscorlib.DNX509Certificate; clientCertificateRequired: Boolean; checkCertificateRevocation: Boolean; asyncCallback: DDN.mscorlib.DNAsyncCallback; asyncState: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function BeginAuthenticateAsServer(serverCertificate: DDN.mscorlib.DNX509Certificate; clientCertificateRequired: Boolean; enabledSslProtocols: DNSslProtocols; checkCertificateRevocation: Boolean; asyncCallback: DDN.mscorlib.DNAsyncCallback; asyncState: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    procedure EndAuthenticateAsServer(asyncResult: DDN.mscorlib.DNIAsyncResult);
    function AuthenticateAsClientAsync(targetHost: string; clientCertificates: DNX509CertificateCollection; checkCertificateRevocation: Boolean): DDN.mscorlib.DNTask; overload;
    function AuthenticateAsServerAsync(serverCertificate: DDN.mscorlib.DNX509Certificate; clientCertificateRequired: Boolean; checkCertificateRevocation: Boolean): DDN.mscorlib.DNTask; overload;
    procedure SetLength(value: Int64);
    function Seek(offset: Int64; origin: DDN.mscorlib.DNSeekOrigin): Int64;
    procedure Flush;
    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32;
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32); overload;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; asyncCallback: DDN.mscorlib.DNAsyncCallback; asyncState: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndRead(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32;
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; asyncCallback: DDN.mscorlib.DNAsyncCallback; asyncState: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    procedure EndWrite(asyncResult: DDN.mscorlib.DNIAsyncResult);
    procedure AuthenticateAsClient(targetHost: string; clientCertificates: DNX509CertificateCollection; checkCertificateRevocation: Boolean); overload;
    function AuthenticateAsClientAsync(targetHost: string): DDN.mscorlib.DNTask; overload;
    function AuthenticateAsClientAsync(targetHost: string; clientCertificates: DNX509CertificateCollection; enabledSslProtocols: DNSslProtocols; checkCertificateRevocation: Boolean): DDN.mscorlib.DNTask; overload;
    function AuthenticateAsServerAsync(serverCertificate: DDN.mscorlib.DNX509Certificate): DDN.mscorlib.DNTask; overload;
    function AuthenticateAsServerAsync(serverCertificate: DDN.mscorlib.DNX509Certificate; clientCertificateRequired: Boolean; enabledSslProtocols: DNSslProtocols; checkCertificateRevocation: Boolean): DDN.mscorlib.DNTask; overload;
    function ShutdownAsync: DDN.mscorlib.DNTask;
    procedure Write(buffer: TArray<Byte>); overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Close;
    procedure Dispose;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadByte: Int32;
    procedure WriteByte(value: Byte);
    function CopyToAsync(destination: DDN.mscorlib.DNStream): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32): DDN.mscorlib.DNTask; overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream); overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream; bufferSize: Int32); overload;
    function FlushAsync: DDN.mscorlib.DNTask; overload;
    function FlushAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TransportContext: DNTransportContext read get_TransportContext;
    property IsAuthenticated: Boolean read get_IsAuthenticated;
    property IsMutuallyAuthenticated: Boolean read get_IsMutuallyAuthenticated;
    property IsEncrypted: Boolean read get_IsEncrypted;
    property IsSigned: Boolean read get_IsSigned;
    property IsServer: Boolean read get_IsServer;
    property SslProtocol: DNSslProtocols read get_SslProtocol;
    property CheckCertRevocationStatus: Boolean read get_CheckCertRevocationStatus;
    property LocalCertificate: DDN.mscorlib.DNX509Certificate read get_LocalCertificate;
    property RemoteCertificate: DDN.mscorlib.DNX509Certificate read get_RemoteCertificate;
    property CipherAlgorithm: DNCipherAlgorithmType read get_CipherAlgorithm;
    property CipherStrength: Int32 read get_CipherStrength;
    property HashAlgorithm: DNHashAlgorithmType read get_HashAlgorithm;
    property HashStrength: Int32 read get_HashStrength;
    property KeyExchangeAlgorithm: DNExchangeAlgorithmType read get_KeyExchangeAlgorithm;
    property KeyExchangeStrength: Int32 read get_KeyExchangeStrength;
    property CanSeek: Boolean read get_CanSeek;
    property CanRead: Boolean read get_CanRead;
    property CanTimeout: Boolean read get_CanTimeout;
    property CanWrite: Boolean read get_CanWrite;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position write set_Position;
    property LeaveInnerStreamOpen: Boolean read get_LeaveInnerStreamOpen;
  end;

  TDNSslStream = class(TDNGenericImport<DNSslStreamClass, DNSslStream>) end;

  //-------------namespace: System.Net.Sockets----------------
  DNNetworkStreamClass = interface(DDN.mscorlib.DNStreamClass)
  ['{38330EFC-C1B6-5B5D-A51F-DB232DA1CF99}']
  { constructors } 

    {class} function init(socket: DNSocket): DNNetworkStream; overload;
    {class} function init(socket: DNSocket; ownsSocket: Boolean): DNNetworkStream; overload;
    {class} function init(socket: DNSocket; access: DDN.mscorlib.DNFileAccess): DNNetworkStream; overload;
    {class} function init(socket: DNSocket; access: DDN.mscorlib.DNFileAccess; ownsSocket: Boolean): DNNetworkStream; overload;

  end;

  [DNTypeName('System.Net.Sockets.NetworkStream')]
  DNNetworkStream = interface(DDN.mscorlib.DNStream)
  ['{7EE10C6D-2167-3C57-990F-D875B626E272}']
  { getters & setters } 

    function get_CanRead: Boolean;
    function get_CanSeek: Boolean;
    function get_CanWrite: Boolean;
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);
    function get_DataAvailable: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);

  { methods } 

    function Read(buffer: TArray<Byte>; offset: Int32; size: Int32): Int32;
    procedure Write(buffer: TArray<Byte>; offset: Int32; size: Int32);
    procedure Close(timeout: Int32); overload;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; size: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndRead(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32;
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; size: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    procedure EndWrite(asyncResult: DDN.mscorlib.DNIAsyncResult);
    function Seek(offset: Int64; origin: DDN.mscorlib.DNSeekOrigin): Int64;
    procedure Flush;
    function FlushAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure SetLength(value: Int64);
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Close; overload;
    procedure Dispose;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadByte: Int32;
    procedure WriteByte(value: Byte);
    function CopyToAsync(destination: DDN.mscorlib.DNStream): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32): DDN.mscorlib.DNTask; overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream); overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream; bufferSize: Int32); overload;
    function FlushAsync: DDN.mscorlib.DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CanRead: Boolean read get_CanRead;
    property CanSeek: Boolean read get_CanSeek;
    property CanWrite: Boolean read get_CanWrite;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
    property DataAvailable: Boolean read get_DataAvailable;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position write set_Position;
  end;

  TDNNetworkStream = class(TDNGenericImport<DNNetworkStreamClass, DNNetworkStream>) end;

  //-------------namespace: System.CodeDom.Compiler----------------
  DNIndentedTextWriterClass = interface(DDN.mscorlib.DNTextWriterClass)
  ['{49656D4C-5722-5447-9DA4-0CD41757D4BB}']
  { constructors } 

    {class} function init(writer: DDN.mscorlib.DNTextWriter): DNIndentedTextWriter; overload;
    {class} function init(writer: DDN.mscorlib.DNTextWriter; tabString: string): DNIndentedTextWriter; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_DefaultTabString: string;

  { static fields } 

    {class} property DefaultTabString: string read __fakeFieldGet_DefaultTabString;

  end;

  [DNTypeName('System.CodeDom.Compiler.IndentedTextWriter')]
  DNIndentedTextWriter = interface(DDN.mscorlib.DNTextWriter)
  ['{F1561EE8-2064-3024-A765-EA5313683C2D}']
  { getters & setters } 

    function get_Encoding: DDN.mscorlib.DNEncoding;
    function get_NewLine: string;
    procedure set_NewLine(value: string);
    function get_Indent: Int32;
    procedure set_Indent(value: Int32);
    function get_InnerWriter: DDN.mscorlib.DNTextWriter;
    function get_FormatProvider: DDN.mscorlib.DNIFormatProvider;

  { methods } 

    procedure Close;
    procedure Flush;
    procedure Write(s: string); overload;
    procedure Write(value: Boolean); overload;
    procedure Write(value: Char); overload;
    procedure Write(buffer: TArray<Char>); overload;
    procedure Write(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure Write(value: Double); overload;
    procedure Write(value: Single); overload;
    procedure Write(value: Int32); overload;
    procedure Write(value: Int64); overload;
    procedure Write(value: DDN.mscorlib.DNObject); overload;
    procedure Write(format: string; arg0: DDN.mscorlib.DNObject); overload;
    procedure Write(format: string; arg0: DDN.mscorlib.DNObject; arg1: DDN.mscorlib.DNObject); overload;
    procedure Write(format: string; arg: TArray<DDN.mscorlib.DNObject>); overload;
    procedure WriteLine(s: string); overload;
    procedure WriteLine; overload;
    procedure WriteLine(value: Boolean); overload;
    procedure WriteLine(value: Char); overload;
    procedure WriteLine(buffer: TArray<Char>); overload;
    procedure WriteLine(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteLine(value: Double); overload;
    procedure WriteLine(value: Single); overload;
    procedure WriteLine(value: Int32); overload;
    procedure WriteLine(value: Int64); overload;
    procedure WriteLine(value: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(format: string; arg0: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(format: string; arg0: DDN.mscorlib.DNObject; arg1: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(format: string; arg: TArray<DDN.mscorlib.DNObject>); overload;
    procedure WriteLine(value: UInt32); overload;
    procedure WriteLineNoTabs(s: string);
    procedure Dispose;
    procedure Write(value: UInt32); overload;
    procedure Write(value: UInt64); overload;
    procedure Write(value: DDN.mscorlib.DNDecimal); overload;
    procedure Write(format: string; arg0: DDN.mscorlib.DNObject; arg1: DDN.mscorlib.DNObject; arg2: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(value: UInt64); overload;
    procedure WriteLine(value: DDN.mscorlib.DNDecimal); overload;
    procedure WriteLine(format: string; arg0: DDN.mscorlib.DNObject; arg1: DDN.mscorlib.DNObject; arg2: DDN.mscorlib.DNObject); overload;
    function WriteAsync(value: Char): DDN.mscorlib.DNTask; overload;
    function WriteAsync(value: string): DDN.mscorlib.DNTask; overload;
    function WriteAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync(value: Char): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync(value: string): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync: DDN.mscorlib.DNTask; overload;
    function FlushAsync: DDN.mscorlib.DNTask;
    function WriteAsync(buffer: TArray<Char>): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>): DDN.mscorlib.DNTask; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding;
    property NewLine: string read get_NewLine write set_NewLine;
    property Indent: Int32 read get_Indent write set_Indent;
    property InnerWriter: DDN.mscorlib.DNTextWriter read get_InnerWriter;
    property FormatProvider: DDN.mscorlib.DNIFormatProvider read get_FormatProvider;
  end;

  TDNIndentedTextWriter = class(TDNGenericImport<DNIndentedTextWriterClass, DNIndentedTextWriter>)
  public const
   DefaultTabString = '    ';
  end;

  //-------------namespace: System.Net----------------
  DNWebRequestClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{A893EED0-681F-5C7D-867A-C623F651184B}']
  { static getter & setter } 

    {class} function get_DefaultCachePolicy: DNRequestCachePolicy;
    {class} procedure set_DefaultCachePolicy(value: DNRequestCachePolicy);
    {class} function get_DefaultWebProxy: DNIWebProxy;
    {class} procedure set_DefaultWebProxy(value: DNIWebProxy);

  { static methods } 

    {class} procedure RegisterPortableWebRequestCreator(creator: DNIWebRequestCreate);
    {class} function Create(requestUriString: string): DNWebRequest; overload;
    {class} function Create(requestUri: DNUri): DNWebRequest; overload;
    {class} function CreateDefault(requestUri: DNUri): DNWebRequest;
    {class} function CreateHttp(requestUriString: string): DNHttpWebRequest; overload;
    {class} function CreateHttp(requestUri: DNUri): DNHttpWebRequest; overload;
    {class} function RegisterPrefix(prefix: string; creator: DNIWebRequestCreate): Boolean;
    {class} function GetSystemWebProxy: DNIWebProxy;

  { static propertys } 

    {class} property DefaultCachePolicy: DNRequestCachePolicy read get_DefaultCachePolicy write set_DefaultCachePolicy;
    {class} property DefaultWebProxy: DNIWebProxy read get_DefaultWebProxy write set_DefaultWebProxy;
  end;

  [DNTypeName('System.Net.WebRequest')]
  DNWebRequest = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{B27539AB-FAD9-3CB2-BAB5-BC9F492C5C2F}']
  { getters & setters } 

    function get_CreatorInstance: DNIWebRequestCreate;
    function get_CachePolicy: DNRequestCachePolicy;
    procedure set_CachePolicy(value: DNRequestCachePolicy);
    function get_Method: string;
    procedure set_Method(value: string);
    function get_RequestUri: DNUri;
    function get_ConnectionGroupName: string;
    procedure set_ConnectionGroupName(value: string);
    function get_Headers: DNWebHeaderCollection;
    procedure set_Headers(value: DNWebHeaderCollection);
    function get_ContentLength: Int64;
    procedure set_ContentLength(value: Int64);
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_Credentials: DNICredentials;
    procedure set_Credentials(value: DNICredentials);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_Proxy: DNIWebProxy;
    procedure set_Proxy(value: DNIWebProxy);
    function get_PreAuthenticate: Boolean;
    procedure set_PreAuthenticate(value: Boolean);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_AuthenticationLevel: DNAuthenticationLevel;
    procedure set_AuthenticationLevel(value: DNAuthenticationLevel);
    function get_ImpersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel;
    procedure set_ImpersonationLevel(value: DDN.mscorlib.DNTokenImpersonationLevel);

  { methods } 

    function GetRequestStream: DDN.mscorlib.DNStream;
    function GetResponse: DNWebResponse;
    function BeginGetResponse(callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndGetResponse(asyncResult: DDN.mscorlib.DNIAsyncResult): DNWebResponse;
    function BeginGetRequestStream(callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndGetRequestStream(asyncResult: DDN.mscorlib.DNIAsyncResult): DDN.mscorlib.DNStream;
    procedure &Abort;
    function GetRequestStreamAsync: DDN.mscorlib.DNTask<DDN.mscorlib.DNStream>;
    function GetResponseAsync: DDN.mscorlib.DNTask<DNWebResponse>;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CreatorInstance: DNIWebRequestCreate read get_CreatorInstance;
    property CachePolicy: DNRequestCachePolicy read get_CachePolicy write set_CachePolicy;
    property Method: string read get_Method write set_Method;
    property RequestUri: DNUri read get_RequestUri;
    property ConnectionGroupName: string read get_ConnectionGroupName write set_ConnectionGroupName;
    property Headers: DNWebHeaderCollection read get_Headers write set_Headers;
    property ContentLength: Int64 read get_ContentLength write set_ContentLength;
    property ContentType: string read get_ContentType write set_ContentType;
    property Credentials: DNICredentials read get_Credentials write set_Credentials;
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property Proxy: DNIWebProxy read get_Proxy write set_Proxy;
    property PreAuthenticate: Boolean read get_PreAuthenticate write set_PreAuthenticate;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property AuthenticationLevel: DNAuthenticationLevel read get_AuthenticationLevel write set_AuthenticationLevel;
    property ImpersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel read get_ImpersonationLevel write set_ImpersonationLevel;
  end;

  TDNWebRequest = class(TDNGenericImport<DNWebRequestClass, DNWebRequest>) end;

  //-------------namespace: System.Net----------------
  DNFileWebRequestClass = interface(DNWebRequestClass)
  ['{76E9B940-D4FE-50C2-9BF0-C82A874A2C25}']
  end;

  [DNTypeName('System.Net.FileWebRequest')]
  DNFileWebRequest = interface(DNWebRequest)
  ['{BC57000E-EE56-3B06-931B-B5922963B5FC}']
  { getters & setters } 

    function get_ConnectionGroupName: string;
    procedure set_ConnectionGroupName(value: string);
    function get_ContentLength: Int64;
    procedure set_ContentLength(value: Int64);
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_Credentials: DNICredentials;
    procedure set_Credentials(value: DNICredentials);
    function get_Headers: DNWebHeaderCollection;
    function get_Method: string;
    procedure set_Method(value: string);
    function get_PreAuthenticate: Boolean;
    procedure set_PreAuthenticate(value: Boolean);
    function get_Proxy: DNIWebProxy;
    procedure set_Proxy(value: DNIWebProxy);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_RequestUri: DNUri;
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_CreatorInstance: DNIWebRequestCreate;
    function get_CachePolicy: DNRequestCachePolicy;
    procedure set_CachePolicy(value: DNRequestCachePolicy);
    function get_AuthenticationLevel: DNAuthenticationLevel;
    procedure set_AuthenticationLevel(value: DNAuthenticationLevel);
    function get_ImpersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel;
    procedure set_ImpersonationLevel(value: DDN.mscorlib.DNTokenImpersonationLevel);

  { methods } 

    function BeginGetResponse(callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndGetResponse(asyncResult: DDN.mscorlib.DNIAsyncResult): DNWebResponse;
    function GetResponse: DNWebResponse;
    function BeginGetRequestStream(callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndGetRequestStream(asyncResult: DDN.mscorlib.DNIAsyncResult): DDN.mscorlib.DNStream;
    function GetRequestStream: DDN.mscorlib.DNStream;
    procedure &Abort;
    function GetRequestStreamAsync: DDN.mscorlib.DNTask<DDN.mscorlib.DNStream>;
    function GetResponseAsync: DDN.mscorlib.DNTask<DNWebResponse>;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ConnectionGroupName: string read get_ConnectionGroupName write set_ConnectionGroupName;
    property ContentLength: Int64 read get_ContentLength write set_ContentLength;
    property ContentType: string read get_ContentType write set_ContentType;
    property Credentials: DNICredentials read get_Credentials write set_Credentials;
    property Headers: DNWebHeaderCollection read get_Headers;
    property Method: string read get_Method write set_Method;
    property PreAuthenticate: Boolean read get_PreAuthenticate write set_PreAuthenticate;
    property Proxy: DNIWebProxy read get_Proxy write set_Proxy;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property RequestUri: DNUri read get_RequestUri;
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property CreatorInstance: DNIWebRequestCreate read get_CreatorInstance;
    property CachePolicy: DNRequestCachePolicy read get_CachePolicy write set_CachePolicy;
    property AuthenticationLevel: DNAuthenticationLevel read get_AuthenticationLevel write set_AuthenticationLevel;
    property ImpersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel read get_ImpersonationLevel write set_ImpersonationLevel;
  end;

  TDNFileWebRequest = class(TDNGenericImport<DNFileWebRequestClass, DNFileWebRequest>) end;

  //-------------namespace: System.Net----------------
  DNFtpWebRequestClass = interface(DNWebRequestClass)
  ['{AE536A24-C339-588A-BD7B-9281E1AD4235}']
  { static getter & setter } 

    {class} function get_DefaultCachePolicy: DNRequestCachePolicy;
    {class} procedure set_DefaultCachePolicy(value: DNRequestCachePolicy);

  { static propertys } 

    {class} property DefaultCachePolicy: DNRequestCachePolicy read get_DefaultCachePolicy write set_DefaultCachePolicy;
  end;

  [DNTypeName('System.Net.FtpWebRequest')]
  DNFtpWebRequest = interface(DNWebRequest)
  ['{28F8A220-BA0E-3895-9AB7-8FE2FFA1E1E2}']
  { getters & setters } 

    function get_Method: string;
    procedure set_Method(value: string);
    function get_RenameTo: string;
    procedure set_RenameTo(value: string);
    function get_Credentials: DNICredentials;
    procedure set_Credentials(value: DNICredentials);
    function get_RequestUri: DNUri;
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_ReadWriteTimeout: Int32;
    procedure set_ReadWriteTimeout(value: Int32);
    function get_ContentOffset: Int64;
    procedure set_ContentOffset(value: Int64);
    function get_ContentLength: Int64;
    procedure set_ContentLength(value: Int64);
    function get_Proxy: DNIWebProxy;
    procedure set_Proxy(value: DNIWebProxy);
    function get_ConnectionGroupName: string;
    procedure set_ConnectionGroupName(value: string);
    function get_ServicePoint: DNServicePoint;
    function get_KeepAlive: Boolean;
    procedure set_KeepAlive(value: Boolean);
    function get_UseBinary: Boolean;
    procedure set_UseBinary(value: Boolean);
    function get_UsePassive: Boolean;
    procedure set_UsePassive(value: Boolean);
    function get_ClientCertificates: DNX509CertificateCollection;
    procedure set_ClientCertificates(value: DNX509CertificateCollection);
    function get_EnableSsl: Boolean;
    procedure set_EnableSsl(value: Boolean);
    function get_Headers: DNWebHeaderCollection;
    procedure set_Headers(value: DNWebHeaderCollection);
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_PreAuthenticate: Boolean;
    procedure set_PreAuthenticate(value: Boolean);
    function get_CreatorInstance: DNIWebRequestCreate;
    function get_CachePolicy: DNRequestCachePolicy;
    procedure set_CachePolicy(value: DNRequestCachePolicy);
    function get_AuthenticationLevel: DNAuthenticationLevel;
    procedure set_AuthenticationLevel(value: DNAuthenticationLevel);
    function get_ImpersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel;
    procedure set_ImpersonationLevel(value: DDN.mscorlib.DNTokenImpersonationLevel);

  { methods } 

    function GetResponse: DNWebResponse;
    function BeginGetResponse(callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndGetResponse(asyncResult: DDN.mscorlib.DNIAsyncResult): DNWebResponse;
    function GetRequestStream: DDN.mscorlib.DNStream;
    function BeginGetRequestStream(callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndGetRequestStream(asyncResult: DDN.mscorlib.DNIAsyncResult): DDN.mscorlib.DNStream;
    procedure &Abort;
    function GetRequestStreamAsync: DDN.mscorlib.DNTask<DDN.mscorlib.DNStream>;
    function GetResponseAsync: DDN.mscorlib.DNTask<DNWebResponse>;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Method: string read get_Method write set_Method;
    property RenameTo: string read get_RenameTo write set_RenameTo;
    property Credentials: DNICredentials read get_Credentials write set_Credentials;
    property RequestUri: DNUri read get_RequestUri;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property ReadWriteTimeout: Int32 read get_ReadWriteTimeout write set_ReadWriteTimeout;
    property ContentOffset: Int64 read get_ContentOffset write set_ContentOffset;
    property ContentLength: Int64 read get_ContentLength write set_ContentLength;
    property Proxy: DNIWebProxy read get_Proxy write set_Proxy;
    property ConnectionGroupName: string read get_ConnectionGroupName write set_ConnectionGroupName;
    property ServicePoint: DNServicePoint read get_ServicePoint;
    property KeepAlive: Boolean read get_KeepAlive write set_KeepAlive;
    property UseBinary: Boolean read get_UseBinary write set_UseBinary;
    property UsePassive: Boolean read get_UsePassive write set_UsePassive;
    property ClientCertificates: DNX509CertificateCollection read get_ClientCertificates write set_ClientCertificates;
    property EnableSsl: Boolean read get_EnableSsl write set_EnableSsl;
    property Headers: DNWebHeaderCollection read get_Headers write set_Headers;
    property ContentType: string read get_ContentType write set_ContentType;
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property PreAuthenticate: Boolean read get_PreAuthenticate write set_PreAuthenticate;
    property CreatorInstance: DNIWebRequestCreate read get_CreatorInstance;
    property CachePolicy: DNRequestCachePolicy read get_CachePolicy write set_CachePolicy;
    property AuthenticationLevel: DNAuthenticationLevel read get_AuthenticationLevel write set_AuthenticationLevel;
    property ImpersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel read get_ImpersonationLevel write set_ImpersonationLevel;
  end;

  TDNFtpWebRequest = class(TDNGenericImport<DNFtpWebRequestClass, DNFtpWebRequest>) end;

  //-------------namespace: System.Net----------------
  DNHttpWebRequestClass = interface(DNWebRequestClass)
  ['{68C3FA13-49E0-58F1-9BB2-51D94BE799D0}']
  { static getter & setter } 

    {class} function get_DefaultCachePolicy: DNRequestCachePolicy;
    {class} procedure set_DefaultCachePolicy(value: DNRequestCachePolicy);
    {class} function get_DefaultMaximumResponseHeadersLength: Int32;
    {class} procedure set_DefaultMaximumResponseHeadersLength(value: Int32);
    {class} function get_DefaultMaximumErrorResponseLength: Int32;
    {class} procedure set_DefaultMaximumErrorResponseLength(value: Int32);

  { constructors } 

    {class} function init: DNHttpWebRequest;

  { static propertys } 

    {class} property DefaultCachePolicy: DNRequestCachePolicy read get_DefaultCachePolicy write set_DefaultCachePolicy;
    {class} property DefaultMaximumResponseHeadersLength: Int32 read get_DefaultMaximumResponseHeadersLength write set_DefaultMaximumResponseHeadersLength;
    {class} property DefaultMaximumErrorResponseLength: Int32 read get_DefaultMaximumErrorResponseLength write set_DefaultMaximumErrorResponseLength;
  end;

  [DNTypeName('System.Net.HttpWebRequest')]
  DNHttpWebRequest = interface(DNWebRequest)
  ['{4191AC1F-317E-354B-8F40-AE1227375046}']
  { getters & setters } 

    function get_AllowAutoRedirect: Boolean;
    procedure set_AllowAutoRedirect(value: Boolean);
    function get_AllowWriteStreamBuffering: Boolean;
    procedure set_AllowWriteStreamBuffering(value: Boolean);
    function get_AllowReadStreamBuffering: Boolean;
    procedure set_AllowReadStreamBuffering(value: Boolean);
    function get_HaveResponse: Boolean;
    function get_KeepAlive: Boolean;
    procedure set_KeepAlive(value: Boolean);
    function get_Pipelined: Boolean;
    procedure set_Pipelined(value: Boolean);
    function get_PreAuthenticate: Boolean;
    procedure set_PreAuthenticate(value: Boolean);
    function get_UnsafeAuthenticatedConnectionSharing: Boolean;
    procedure set_UnsafeAuthenticatedConnectionSharing(value: Boolean);
    function get_SendChunked: Boolean;
    procedure set_SendChunked(value: Boolean);
    function get_AutomaticDecompression: DNDecompressionMethods;
    procedure set_AutomaticDecompression(value: DNDecompressionMethods);
    function get_MaximumResponseHeadersLength: Int32;
    procedure set_MaximumResponseHeadersLength(value: Int32);
    function get_ClientCertificates: DNX509CertificateCollection;
    procedure set_ClientCertificates(value: DNX509CertificateCollection);
    function get_CookieContainer: DNCookieContainer;
    procedure set_CookieContainer(value: DNCookieContainer);
    function get_SupportsCookieContainer: Boolean;
    function get_RequestUri: DNUri;
    function get_ContentLength: Int64;
    procedure set_ContentLength(value: Int64);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_ReadWriteTimeout: Int32;
    procedure set_ReadWriteTimeout(value: Int32);
    function get_ContinueTimeout: Int32;
    procedure set_ContinueTimeout(value: Int32);
    function get_Address: DNUri;
    function get_ContinueDelegate: DNHttpContinueDelegate;
    procedure set_ContinueDelegate(value: DNHttpContinueDelegate);
    function get_ServicePoint: DNServicePoint;
    function get_Host: string;
    procedure set_Host(value: string);
    function get_MaximumAutomaticRedirections: Int32;
    procedure set_MaximumAutomaticRedirections(value: Int32);
    function get_Method: string;
    procedure set_Method(value: string);
    function get_Credentials: DNICredentials;
    procedure set_Credentials(value: DNICredentials);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_ConnectionGroupName: string;
    procedure set_ConnectionGroupName(value: string);
    function get_Headers: DNWebHeaderCollection;
    procedure set_Headers(value: DNWebHeaderCollection);
    function get_Proxy: DNIWebProxy;
    procedure set_Proxy(value: DNIWebProxy);
    function get_ProtocolVersion: DDN.mscorlib.DNVersion;
    procedure set_ProtocolVersion(value: DDN.mscorlib.DNVersion);
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_MediaType: string;
    procedure set_MediaType(value: string);
    function get_TransferEncoding: string;
    procedure set_TransferEncoding(value: string);
    function get_Connection: string;
    procedure set_Connection(value: string);
    function get_Accept: string;
    procedure set_Accept(value: string);
    function get_Referer: string;
    procedure set_Referer(value: string);
    function get_UserAgent: string;
    procedure set_UserAgent(value: string);
    function get_Expect: string;
    procedure set_Expect(value: string);
    function get_IfModifiedSince: DDN.mscorlib.DNDateTime;
    procedure set_IfModifiedSince(value: DDN.mscorlib.DNDateTime);
    function get_Date: DDN.mscorlib.DNDateTime;
    procedure set_Date(value: DDN.mscorlib.DNDateTime);
    function get_ServerCertificateValidationCallback: DNRemoteCertificateValidationCallback;
    procedure set_ServerCertificateValidationCallback(value: DNRemoteCertificateValidationCallback);
    function get_CreatorInstance: DNIWebRequestCreate;
    function get_CachePolicy: DNRequestCachePolicy;
    procedure set_CachePolicy(value: DNRequestCachePolicy);
    function get_AuthenticationLevel: DNAuthenticationLevel;
    procedure set_AuthenticationLevel(value: DNAuthenticationLevel);
    function get_ImpersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel;
    procedure set_ImpersonationLevel(value: DDN.mscorlib.DNTokenImpersonationLevel);

  { methods } 

    function EndGetRequestStream(asyncResult: DDN.mscorlib.DNIAsyncResult): DDN.mscorlib.DNStream; overload;
    function GetRequestStream: DDN.mscorlib.DNStream; overload;
    procedure &Abort;
    function BeginGetRequestStream(callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndGetRequestStream(asyncResult: DDN.mscorlib.DNIAsyncResult; out context: DNTransportContext): DDN.mscorlib.DNStream; overload;
    function GetRequestStream(out context: DNTransportContext): DDN.mscorlib.DNStream; overload;
    function BeginGetResponse(callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndGetResponse(asyncResult: DDN.mscorlib.DNIAsyncResult): DNWebResponse;
    function GetResponse: DNWebResponse;
    procedure AddRange(from: Int32; &to: Int32); overload;
    procedure AddRange(from: Int64; &to: Int64); overload;
    procedure AddRange(range: Int32); overload;
    procedure AddRange(range: Int64); overload;
    procedure AddRange(rangeSpecifier: string; from: Int32; &to: Int32); overload;
    procedure AddRange(rangeSpecifier: string; from: Int64; &to: Int64); overload;
    procedure AddRange(rangeSpecifier: string; range: Int32); overload;
    procedure AddRange(rangeSpecifier: string; range: Int64); overload;
    function GetRequestStreamAsync: DDN.mscorlib.DNTask<DDN.mscorlib.DNStream>;
    function GetResponseAsync: DDN.mscorlib.DNTask<DNWebResponse>;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowAutoRedirect: Boolean read get_AllowAutoRedirect write set_AllowAutoRedirect;
    property AllowWriteStreamBuffering: Boolean read get_AllowWriteStreamBuffering write set_AllowWriteStreamBuffering;
    property AllowReadStreamBuffering: Boolean read get_AllowReadStreamBuffering write set_AllowReadStreamBuffering;
    property HaveResponse: Boolean read get_HaveResponse;
    property KeepAlive: Boolean read get_KeepAlive write set_KeepAlive;
    property Pipelined: Boolean read get_Pipelined write set_Pipelined;
    property PreAuthenticate: Boolean read get_PreAuthenticate write set_PreAuthenticate;
    property UnsafeAuthenticatedConnectionSharing: Boolean read get_UnsafeAuthenticatedConnectionSharing write set_UnsafeAuthenticatedConnectionSharing;
    property SendChunked: Boolean read get_SendChunked write set_SendChunked;
    property AutomaticDecompression: DNDecompressionMethods read get_AutomaticDecompression write set_AutomaticDecompression;
    property MaximumResponseHeadersLength: Int32 read get_MaximumResponseHeadersLength write set_MaximumResponseHeadersLength;
    property ClientCertificates: DNX509CertificateCollection read get_ClientCertificates write set_ClientCertificates;
    property CookieContainer: DNCookieContainer read get_CookieContainer write set_CookieContainer;
    property SupportsCookieContainer: Boolean read get_SupportsCookieContainer;
    property RequestUri: DNUri read get_RequestUri;
    property ContentLength: Int64 read get_ContentLength write set_ContentLength;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property ReadWriteTimeout: Int32 read get_ReadWriteTimeout write set_ReadWriteTimeout;
    property ContinueTimeout: Int32 read get_ContinueTimeout write set_ContinueTimeout;
    property Address: DNUri read get_Address;
    property ContinueDelegate: DNHttpContinueDelegate read get_ContinueDelegate write set_ContinueDelegate;
    property ServicePoint: DNServicePoint read get_ServicePoint;
    property Host: string read get_Host write set_Host;
    property MaximumAutomaticRedirections: Int32 read get_MaximumAutomaticRedirections write set_MaximumAutomaticRedirections;
    property Method: string read get_Method write set_Method;
    property Credentials: DNICredentials read get_Credentials write set_Credentials;
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property ConnectionGroupName: string read get_ConnectionGroupName write set_ConnectionGroupName;
    property Headers: DNWebHeaderCollection read get_Headers write set_Headers;
    property Proxy: DNIWebProxy read get_Proxy write set_Proxy;
    property ProtocolVersion: DDN.mscorlib.DNVersion read get_ProtocolVersion write set_ProtocolVersion;
    property ContentType: string read get_ContentType write set_ContentType;
    property MediaType: string read get_MediaType write set_MediaType;
    property TransferEncoding: string read get_TransferEncoding write set_TransferEncoding;
    property Connection: string read get_Connection write set_Connection;
    property Accept: string read get_Accept write set_Accept;
    property Referer: string read get_Referer write set_Referer;
    property UserAgent: string read get_UserAgent write set_UserAgent;
    property Expect: string read get_Expect write set_Expect;
    property IfModifiedSince: DDN.mscorlib.DNDateTime read get_IfModifiedSince write set_IfModifiedSince;
    property Date: DDN.mscorlib.DNDateTime read get_Date write set_Date;
    property ServerCertificateValidationCallback: DNRemoteCertificateValidationCallback read get_ServerCertificateValidationCallback write set_ServerCertificateValidationCallback;
    property CreatorInstance: DNIWebRequestCreate read get_CreatorInstance;
    property CachePolicy: DNRequestCachePolicy read get_CachePolicy write set_CachePolicy;
    property AuthenticationLevel: DNAuthenticationLevel read get_AuthenticationLevel write set_AuthenticationLevel;
    property ImpersonationLevel: DDN.mscorlib.DNTokenImpersonationLevel read get_ImpersonationLevel write set_ImpersonationLevel;
  end;

  TDNHttpWebRequest = class(TDNGenericImport<DNHttpWebRequestClass, DNHttpWebRequest>) end;

  //-------------namespace: System.Net----------------
  DNWebResponseClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{4EA54D4F-59E9-527A-A392-AC66D8305327}']
  end;

  [DNTypeName('System.Net.WebResponse')]
  DNWebResponse = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{8469B5E5-2E45-37FE-AF2B-9E809F690087}']
  { getters & setters } 

    function get_IsFromCache: Boolean;
    function get_IsMutuallyAuthenticated: Boolean;
    function get_ContentLength: Int64;
    procedure set_ContentLength(value: Int64);
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_ResponseUri: DNUri;
    function get_Headers: DNWebHeaderCollection;
    function get_SupportsHeaders: Boolean;

  { methods } 

    procedure Close;
    procedure Dispose;
    function GetResponseStream: DDN.mscorlib.DNStream;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsFromCache: Boolean read get_IsFromCache;
    property IsMutuallyAuthenticated: Boolean read get_IsMutuallyAuthenticated;
    property ContentLength: Int64 read get_ContentLength write set_ContentLength;
    property ContentType: string read get_ContentType write set_ContentType;
    property ResponseUri: DNUri read get_ResponseUri;
    property Headers: DNWebHeaderCollection read get_Headers;
    property SupportsHeaders: Boolean read get_SupportsHeaders;
  end;

  TDNWebResponse = class(TDNGenericImport<DNWebResponseClass, DNWebResponse>) end;

  //-------------namespace: System.Net----------------
  DNFileWebResponseClass = interface(DNWebResponseClass)
  ['{759FFA15-EE91-5B0C-8FC8-0106059B78F5}']
  end;

  [DNTypeName('System.Net.FileWebResponse')]
  DNFileWebResponse = interface(DNWebResponse)
  ['{9761F330-DDDB-3F49-B670-ECEE6C918930}']
  { getters & setters } 

    function get_ContentLength: Int64;
    function get_ContentType: string;
    function get_Headers: DNWebHeaderCollection;
    function get_SupportsHeaders: Boolean;
    function get_ResponseUri: DNUri;
    function get_IsFromCache: Boolean;
    function get_IsMutuallyAuthenticated: Boolean;

  { methods } 

    procedure Close;
    function GetResponseStream: DDN.mscorlib.DNStream;
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ContentLength: Int64 read get_ContentLength;
    property ContentType: string read get_ContentType;
    property Headers: DNWebHeaderCollection read get_Headers;
    property SupportsHeaders: Boolean read get_SupportsHeaders;
    property ResponseUri: DNUri read get_ResponseUri;
    property IsFromCache: Boolean read get_IsFromCache;
    property IsMutuallyAuthenticated: Boolean read get_IsMutuallyAuthenticated;
  end;

  TDNFileWebResponse = class(TDNGenericImport<DNFileWebResponseClass, DNFileWebResponse>) end;

  //-------------namespace: System.Net----------------
  DNFtpWebResponseClass = interface(DNWebResponseClass)
  ['{59FA5267-3C56-51BA-A276-25C4140EC982}']
  end;

  [DNTypeName('System.Net.FtpWebResponse')]
  DNFtpWebResponse = interface(DNWebResponse)
  ['{853548A3-AD57-3922-B922-69D6D1305928}']
  { getters & setters } 

    function get_ContentLength: Int64;
    function get_Headers: DNWebHeaderCollection;
    function get_SupportsHeaders: Boolean;
    function get_ResponseUri: DNUri;
    function get_StatusCode: DNFtpStatusCode;
    function get_StatusDescription: string;
    function get_LastModified: DDN.mscorlib.DNDateTime;
    function get_BannerMessage: string;
    function get_WelcomeMessage: string;
    function get_ExitMessage: string;
    function get_IsFromCache: Boolean;
    function get_IsMutuallyAuthenticated: Boolean;
    function get_ContentType: string;
    procedure set_ContentType(value: string);

  { methods } 

    function GetResponseStream: DDN.mscorlib.DNStream;
    procedure Close;
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ContentLength: Int64 read get_ContentLength;
    property Headers: DNWebHeaderCollection read get_Headers;
    property SupportsHeaders: Boolean read get_SupportsHeaders;
    property ResponseUri: DNUri read get_ResponseUri;
    property StatusCode: DNFtpStatusCode read get_StatusCode;
    property StatusDescription: string read get_StatusDescription;
    property LastModified: DDN.mscorlib.DNDateTime read get_LastModified;
    property BannerMessage: string read get_BannerMessage;
    property WelcomeMessage: string read get_WelcomeMessage;
    property ExitMessage: string read get_ExitMessage;
    property IsFromCache: Boolean read get_IsFromCache;
    property IsMutuallyAuthenticated: Boolean read get_IsMutuallyAuthenticated;
    property ContentType: string read get_ContentType write set_ContentType;
  end;

  TDNFtpWebResponse = class(TDNGenericImport<DNFtpWebResponseClass, DNFtpWebResponse>) end;

  //-------------namespace: System.Net----------------
  DNHttpWebResponseClass = interface(DNWebResponseClass)
  ['{5DBBF52F-33F3-5C02-83B4-D01817C3094F}']
  { constructors } 

    {class} function init: DNHttpWebResponse;

  end;

  [DNTypeName('System.Net.HttpWebResponse')]
  DNHttpWebResponse = interface(DNWebResponse)
  ['{404FEABE-19E9-3D3C-923F-C2554B25492E}']
  { getters & setters } 

    function get_IsMutuallyAuthenticated: Boolean;
    function get_Cookies: DNCookieCollection;
    procedure set_Cookies(value: DNCookieCollection);
    function get_Headers: DNWebHeaderCollection;
    function get_SupportsHeaders: Boolean;
    function get_ContentLength: Int64;
    function get_ContentEncoding: string;
    function get_ContentType: string;
    function get_CharacterSet: string;
    function get_Server: string;
    function get_LastModified: DDN.mscorlib.DNDateTime;
    function get_StatusCode: DNHttpStatusCode;
    function get_StatusDescription: string;
    function get_ProtocolVersion: DDN.mscorlib.DNVersion;
    function get_ResponseUri: DNUri;
    function get_Method: string;
    function get_IsFromCache: Boolean;

  { methods } 

    function GetResponseStream: DDN.mscorlib.DNStream;
    procedure Close;
    function GetResponseHeader(headerName: string): string;
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsMutuallyAuthenticated: Boolean read get_IsMutuallyAuthenticated;
    property Cookies: DNCookieCollection read get_Cookies write set_Cookies;
    property Headers: DNWebHeaderCollection read get_Headers;
    property SupportsHeaders: Boolean read get_SupportsHeaders;
    property ContentLength: Int64 read get_ContentLength;
    property ContentEncoding: string read get_ContentEncoding;
    property ContentType: string read get_ContentType;
    property CharacterSet: string read get_CharacterSet;
    property Server: string read get_Server;
    property LastModified: DDN.mscorlib.DNDateTime read get_LastModified;
    property StatusCode: DNHttpStatusCode read get_StatusCode;
    property StatusDescription: string read get_StatusDescription;
    property ProtocolVersion: DDN.mscorlib.DNVersion read get_ProtocolVersion;
    property ResponseUri: DNUri read get_ResponseUri;
    property Method: string read get_Method;
    property IsFromCache: Boolean read get_IsFromCache;
  end;

  TDNHttpWebResponse = class(TDNGenericImport<DNHttpWebResponseClass, DNHttpWebResponse>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNStandardOleMarshalObjectClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{4B04E9B2-2342-544E-BD7A-4DBD8D30C8C9}']
  end;

  [DNTypeName('System.Runtime.InteropServices.StandardOleMarshalObject')]
  DNStandardOleMarshalObject = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{0EF62602-E19F-3DF5-BE17-A43AAF6BA008}']
  { methods } 

    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNStandardOleMarshalObject = class(TDNGenericImport<DNStandardOleMarshalObjectClass, DNStandardOleMarshalObject>) end;

  //-------------namespace: System.Threading----------------
  DNSemaphoreClass = interface(DDN.mscorlib.DNWaitHandleClass)
  ['{59BFCBF8-056E-5680-8609-FB59A1D0C1BD}']
  { constructors } 

    {class} function init(initialCount: Int32; maximumCount: Int32): DNSemaphore; overload;
    {class} function init(initialCount: Int32; maximumCount: Int32; name: string): DNSemaphore; overload;
    {class} function init(initialCount: Int32; maximumCount: Int32; name: string; out createdNew: Boolean): DNSemaphore; overload;
    {class} function init(initialCount: Int32; maximumCount: Int32; name: string; out createdNew: Boolean; semaphoreSecurity: DNSemaphoreSecurity): DNSemaphore; overload;

  { static methods } 

    {class} function OpenExisting(name: string): DNSemaphore; overload;
    {class} function TryOpenExisting(name: string; out result: DNSemaphore): Boolean; overload;
    {class} function TryOpenExisting(name: string; rights: DNSemaphoreRights; out result: DNSemaphore): Boolean; overload;
    {class} function OpenExisting(name: string; rights: DNSemaphoreRights): DNSemaphore; overload;

  end;

  [DNTypeName('System.Threading.Semaphore')]
  DNSemaphore = interface(DDN.mscorlib.DNWaitHandle)
  ['{62E787E6-98A5-342C-B20B-D324E5AC9F2C}']
  { getters & setters } 

    function get_Handle: IntPtr;
    procedure set_Handle(value: IntPtr);
    function get_SafeWaitHandle: DDN.mscorlib.DNSafeWaitHandle;
    procedure set_SafeWaitHandle(value: DDN.mscorlib.DNSafeWaitHandle);

  { methods } 

    function Release: Int32; overload;
    function Release(releaseCount: Int32): Int32; overload;
    function GetAccessControl: DNSemaphoreSecurity;
    procedure SetAccessControl(semaphoreSecurity: DNSemaphoreSecurity);
    function WaitOne(millisecondsTimeout: Int32; exitContext: Boolean): Boolean; overload;
    function WaitOne(timeout: DDN.mscorlib.DNTimeSpan; exitContext: Boolean): Boolean; overload;
    function WaitOne: Boolean; overload;
    function WaitOne(millisecondsTimeout: Int32): Boolean; overload;
    function WaitOne(timeout: DDN.mscorlib.DNTimeSpan): Boolean; overload;
    procedure Close;
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Handle: IntPtr read get_Handle write set_Handle;
    property SafeWaitHandle: DDN.mscorlib.DNSafeWaitHandle read get_SafeWaitHandle write set_SafeWaitHandle;
  end;

  TDNSemaphore = class(TDNGenericImport<DNSemaphoreClass, DNSemaphore>) end;

  //-------------namespace: System.Media----------------
  DNSystemSoundClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5D3B0A93-0E13-506E-859E-9FAF290C1523}']
  end;

  [DNTypeName('System.Media.SystemSound')]
  DNSystemSound = interface(DDN.mscorlib.DNObject)
  ['{CB5B19EF-ADD5-353E-9848-7046FF550F9A}']
  { methods } 

    procedure Play;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSystemSound = class(TDNGenericImport<DNSystemSoundClass, DNSystemSound>) end;

  //-------------namespace: System.Media----------------
  DNSystemSoundsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2FE25D36-9C41-5C50-BEA5-7CAE4454F695}']
  { static getter & setter } 

    {class} function get_Asterisk: DNSystemSound;
    {class} function get_Beep: DNSystemSound;
    {class} function get_Exclamation: DNSystemSound;
    {class} function get_Hand: DNSystemSound;
    {class} function get_Question: DNSystemSound;

  { static propertys } 

    {class} property Asterisk: DNSystemSound read get_Asterisk;
    {class} property Beep: DNSystemSound read get_Beep;
    {class} property Exclamation: DNSystemSound read get_Exclamation;
    {class} property Hand: DNSystemSound read get_Hand;
    {class} property Question: DNSystemSound read get_Question;
  end;

  [DNTypeName('System.Media.SystemSounds')]
  DNSystemSounds = interface(DDN.mscorlib.DNObject)
  ['{10711F9F-62AA-3D9A-95B5-89F0C0A8F2C9}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSystemSounds = class(TDNGenericImport<DNSystemSoundsClass, DNSystemSounds>) end;

  //-------------namespace: System.Net----------------
  DNAuthenticationManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0F74B66F-D0A4-5168-A26F-BFFF391FE89D}']
  { static getter & setter } 

    {class} function get_CredentialPolicy: DNICredentialPolicy;
    {class} procedure set_CredentialPolicy(value: DNICredentialPolicy);
    {class} function get_CustomTargetNameDictionary: DNStringDictionary;
    {class} function get_RegisteredModules: DDN.mscorlib.DNIEnumerator;

  { static methods } 

    {class} function Authenticate(challenge: string; request: DNWebRequest; credentials: DNICredentials): DNAuthorization;
    {class} function PreAuthenticate(request: DNWebRequest; credentials: DNICredentials): DNAuthorization;
    {class} procedure &Register(authenticationModule: DNIAuthenticationModule);
    {class} procedure Unregister(authenticationModule: DNIAuthenticationModule); overload;
    {class} procedure Unregister(authenticationScheme: string); overload;

  { static propertys } 

    {class} property CredentialPolicy: DNICredentialPolicy read get_CredentialPolicy write set_CredentialPolicy;
    {class} property CustomTargetNameDictionary: DNStringDictionary read get_CustomTargetNameDictionary;
    {class} property RegisteredModules: DDN.mscorlib.DNIEnumerator read get_RegisteredModules;
  end;

  [DNTypeName('System.Net.AuthenticationManager')]
  DNAuthenticationManager = interface(DDN.mscorlib.DNObject)
  ['{F35539A9-B024-3AFC-97B8-FD333B97B24E}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAuthenticationManager = class(TDNGenericImport<DNAuthenticationManagerClass, DNAuthenticationManager>) end;

  //-------------namespace: System.Net----------------
  DNAuthorizationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3A4972E5-5208-54D1-865B-204DDC552D3B}']
  { constructors } 

    {class} function init(token: string): DNAuthorization; overload;
    {class} function init(token: string; finished: Boolean): DNAuthorization; overload;
    {class} function init(token: string; finished: Boolean; connectionGroupId: string): DNAuthorization; overload;

  end;

  [DNTypeName('System.Net.Authorization')]
  DNAuthorization = interface(DDN.mscorlib.DNObject)
  ['{01143F23-B1CB-34B0-9541-10627658BF97}']
  { getters & setters } 

    function get_Message: string;
    function get_ConnectionGroupId: string;
    function get_Complete: Boolean;
    function get_ProtectionRealm: TArray<string>;
    procedure set_ProtectionRealm(value: TArray<string>);
    function get_MutuallyAuthenticated: Boolean;
    procedure set_MutuallyAuthenticated(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Message: string read get_Message;
    property ConnectionGroupId: string read get_ConnectionGroupId;
    property Complete: Boolean read get_Complete;
    property ProtectionRealm: TArray<string> read get_ProtectionRealm write set_ProtectionRealm;
    property MutuallyAuthenticated: Boolean read get_MutuallyAuthenticated write set_MutuallyAuthenticated;
  end;

  TDNAuthorization = class(TDNGenericImport<DNAuthorizationClass, DNAuthorization>) end;

  //-------------namespace: System.Net.Cache----------------
  DNRequestCachePolicyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F0AE4B8B-B8E8-51D6-93E9-ED2F8613E04A}']
  { constructors } 

    {class} function init: DNRequestCachePolicy; overload;
    {class} function init(level: DNRequestCacheLevel): DNRequestCachePolicy; overload;

  end;

  [DNTypeName('System.Net.Cache.RequestCachePolicy')]
  DNRequestCachePolicy = interface(DDN.mscorlib.DNObject)
  ['{3B5DCC72-7FC6-3142-AD95-44284F8DF7FC}']
  { getters & setters } 

    function get_Level: DNRequestCacheLevel;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Level: DNRequestCacheLevel read get_Level;
  end;

  TDNRequestCachePolicy = class(TDNGenericImport<DNRequestCachePolicyClass, DNRequestCachePolicy>) end;

  //-------------namespace: System.Net.Cache----------------
  DNHttpRequestCachePolicyClass = interface(DNRequestCachePolicyClass)
  ['{4AA1E54D-648C-561F-9AA8-9D422812F28F}']
  { constructors } 

    {class} function init: DNHttpRequestCachePolicy; overload;
    {class} function init(level: DNHttpRequestCacheLevel): DNHttpRequestCachePolicy; overload;
    {class} function init(cacheAgeControl: DNHttpCacheAgeControl; ageOrFreshOrStale: DDN.mscorlib.DNTimeSpan): DNHttpRequestCachePolicy; overload;
    {class} function init(cacheAgeControl: DNHttpCacheAgeControl; maxAge: DDN.mscorlib.DNTimeSpan; freshOrStale: DDN.mscorlib.DNTimeSpan): DNHttpRequestCachePolicy; overload;
    {class} function init(cacheSyncDate: DDN.mscorlib.DNDateTime): DNHttpRequestCachePolicy; overload;
    {class} function init(cacheAgeControl: DNHttpCacheAgeControl; maxAge: DDN.mscorlib.DNTimeSpan; freshOrStale: DDN.mscorlib.DNTimeSpan; cacheSyncDate: DDN.mscorlib.DNDateTime): DNHttpRequestCachePolicy; overload;

  end;

  [DNTypeName('System.Net.Cache.HttpRequestCachePolicy')]
  DNHttpRequestCachePolicy = interface(DNRequestCachePolicy)
  ['{E802B983-5065-3A5C-B5BB-CCF06A078ECA}']
  { getters & setters } 

    function get_Level: DNHttpRequestCacheLevel;
    function get_CacheSyncDate: DDN.mscorlib.DNDateTime;
    function get_MaxAge: DDN.mscorlib.DNTimeSpan;
    function get_MinFresh: DDN.mscorlib.DNTimeSpan;
    function get_MaxStale: DDN.mscorlib.DNTimeSpan;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Level: DNHttpRequestCacheLevel read get_Level;
    property CacheSyncDate: DDN.mscorlib.DNDateTime read get_CacheSyncDate;
    property MaxAge: DDN.mscorlib.DNTimeSpan read get_MaxAge;
    property MinFresh: DDN.mscorlib.DNTimeSpan read get_MinFresh;
    property MaxStale: DDN.mscorlib.DNTimeSpan read get_MaxStale;
  end;

  TDNHttpRequestCachePolicy = class(TDNGenericImport<DNHttpRequestCachePolicyClass, DNHttpRequestCachePolicy>) end;

  //-------------namespace: System.Net----------------
  DNCookieClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6F2B2C1D-FD9A-505D-B28A-02DD5418646C}']
  { constructors } 

    {class} function init: DNCookie; overload;
    {class} function init(name: string; value: string): DNCookie; overload;
    {class} function init(name: string; value: string; path: string): DNCookie; overload;
    {class} function init(name: string; value: string; path: string; domain: string): DNCookie; overload;

  end;

  [DNTypeName('System.Net.Cookie')]
  DNCookie = interface(DDN.mscorlib.DNObject)
  ['{44CE4218-5EA4-34B0-9BAA-07EB434BFC16}']
  { getters & setters } 

    function get_Comment: string;
    procedure set_Comment(value: string);
    function get_CommentUri: DNUri;
    procedure set_CommentUri(value: DNUri);
    function get_HttpOnly: Boolean;
    procedure set_HttpOnly(value: Boolean);
    function get_Discard: Boolean;
    procedure set_Discard(value: Boolean);
    function get_Domain: string;
    procedure set_Domain(value: string);
    function get_Expired: Boolean;
    procedure set_Expired(value: Boolean);
    function get_Expires: DDN.mscorlib.DNDateTime;
    procedure set_Expires(value: DDN.mscorlib.DNDateTime);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Path: string;
    procedure set_Path(value: string);
    function get_Port: string;
    procedure set_Port(value: string);
    function get_Secure: Boolean;
    procedure set_Secure(value: Boolean);
    function get_TimeStamp: DDN.mscorlib.DNDateTime;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_Version: Int32;
    procedure set_Version(value: Int32);

  { methods } 

    function Equals(comparand: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Comment: string read get_Comment write set_Comment;
    property CommentUri: DNUri read get_CommentUri write set_CommentUri;
    property HttpOnly: Boolean read get_HttpOnly write set_HttpOnly;
    property Discard: Boolean read get_Discard write set_Discard;
    property Domain: string read get_Domain write set_Domain;
    property Expired: Boolean read get_Expired write set_Expired;
    property Expires: DDN.mscorlib.DNDateTime read get_Expires write set_Expires;
    property Name: string read get_Name write set_Name;
    property Path: string read get_Path write set_Path;
    property Port: string read get_Port write set_Port;
    property Secure: Boolean read get_Secure write set_Secure;
    property TimeStamp: DDN.mscorlib.DNDateTime read get_TimeStamp;
    property Value: string read get_Value write set_Value;
    property Version: Int32 read get_Version write set_Version;
  end;

  TDNCookie = class(TDNGenericImport<DNCookieClass, DNCookie>) end;

  //-------------namespace: System.Net----------------
  DNCookieCollectionClass = interface(DNObjectClass)
  ['{DAD5CD48-00CC-5F3B-9B76-D2F5DFC2810A}']
  { constructors } 

    {class} function init: DNCookieCollection;

  end;

  [DNTypeName('System.Net.CookieCollection')]
  DNCookieCollection = interface(DDN.mscorlib.DNICollection)
  ['{99F5373A-997D-36D4-A225-D970B8B1B9F8}']
  { getters & setters } 

    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNCookie; overload;
    function get_Item(name: string): DNCookie; overload;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    procedure Add(cookie: DNCookie); overload;
    procedure Add(cookies: DNCookieCollection); overload;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    procedure CopyTo(&array: TArray<DNCookie>; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNCookie read get_Item; default;
    property Item[name: string]: DNCookie read get_Item; default;
    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNCookieCollection = class(TDNGenericImport<DNCookieCollectionClass, DNCookieCollection>) end;

  //-------------namespace: System.Net----------------
  DNCookieContainerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A16EBFC3-2024-530A-B79C-91300C176C6A}']
  { constructors } 

    {class} function init: DNCookieContainer; overload;
    {class} function init(capacity: Int32): DNCookieContainer; overload;
    {class} function init(capacity: Int32; perDomainCapacity: Int32; maxCookieSize: Int32): DNCookieContainer; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_DefaultCookieLimit: Int32;
   function __fakeFieldGet_DefaultPerDomainCookieLimit: Int32;
   function __fakeFieldGet_DefaultCookieLengthLimit: Int32;

  { static fields } 

    {class} property DefaultCookieLimit: Int32 read __fakeFieldGet_DefaultCookieLimit;
    {class} property DefaultPerDomainCookieLimit: Int32 read __fakeFieldGet_DefaultPerDomainCookieLimit;
    {class} property DefaultCookieLengthLimit: Int32 read __fakeFieldGet_DefaultCookieLengthLimit;

  end;

  [DNTypeName('System.Net.CookieContainer')]
  DNCookieContainer = interface(DDN.mscorlib.DNObject)
  ['{D9BC3BB7-A863-3793-93A2-445D8B806A67}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;
    function get_MaxCookieSize: Int32;
    procedure set_MaxCookieSize(value: Int32);
    function get_PerDomainCapacity: Int32;
    procedure set_PerDomainCapacity(value: Int32);

  { methods } 

    procedure Add(cookies: DNCookieCollection); overload;
    procedure Add(uri: DNUri; cookie: DNCookie); overload;
    procedure Add(uri: DNUri; cookies: DNCookieCollection); overload;
    function GetCookies(uri: DNUri): DNCookieCollection;
    function GetCookieHeader(uri: DNUri): string;
    procedure SetCookies(uri: DNUri; cookieHeader: string);
    procedure Add(cookie: DNCookie); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
    property MaxCookieSize: Int32 read get_MaxCookieSize write set_MaxCookieSize;
    property PerDomainCapacity: Int32 read get_PerDomainCapacity write set_PerDomainCapacity;
  end;

  TDNCookieContainer = class(TDNGenericImport<DNCookieContainerClass, DNCookieContainer>)
  public const
   DefaultCookieLimit = 300;
   DefaultPerDomainCookieLimit = 20;
   DefaultCookieLengthLimit = 4096;
  end;

  //-------------namespace: System.Net----------------
  DNCredentialCacheClass = interface(DNObjectClass)
  ['{E3761242-5235-5097-989E-028DDD241EA4}']
  { static getter & setter } 

    {class} function get_DefaultCredentials: DNICredentials;
    {class} function get_DefaultNetworkCredentials: DNNetworkCredential;

  { constructors } 

    {class} function init: DNCredentialCache;

  { static propertys } 

    {class} property DefaultCredentials: DNICredentials read get_DefaultCredentials;
    {class} property DefaultNetworkCredentials: DNNetworkCredential read get_DefaultNetworkCredentials;
  end;

  [DNTypeName('System.Net.CredentialCache')]
  DNCredentialCache = interface(DNICredentials)
  ['{E4967E62-62F2-374B-8CC2-10E1B8BC198F}']
  { methods } 

    procedure Remove(uriPrefix: DNUri; authType: string); overload;
    procedure Remove(host: string; port: Int32; authenticationType: string); overload;
    function GetCredential(uriPrefix: DNUri; authType: string): DNNetworkCredential; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure Add(uriPrefix: DNUri; authType: string; cred: DNNetworkCredential); overload;
    procedure Add(host: string; port: Int32; authenticationType: string; credential: DNNetworkCredential); overload;
    function GetCredential(host: string; port: Int32; authenticationType: string): DNNetworkCredential; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCredentialCache = class(TDNGenericImport<DNCredentialCacheClass, DNCredentialCache>) end;

  //-------------namespace: System.Net----------------
  DNDnsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{45198B72-3C19-5B3E-8F1E-0AE2148D9409}']
  { static methods } 

    {class} function GetHostByName(hostName: string): DNIPHostEntry;
    {class} function GetHostName: string;
    {class} function GetHostByAddress(address: string): DNIPHostEntry; overload;
    {class} function GetHostByAddress(address: DNIPAddress): DNIPHostEntry; overload;
    {class} function Resolve(hostName: string): DNIPHostEntry;
    {class} function BeginGetHostByName(hostName: string; requestCallback: DDN.mscorlib.DNAsyncCallback; stateObject: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    {class} function EndGetHostByName(asyncResult: DDN.mscorlib.DNIAsyncResult): DNIPHostEntry;
    {class} function GetHostEntry(address: DNIPAddress): DNIPHostEntry; overload;
    {class} function GetHostAddresses(hostNameOrAddress: string): TArray<DNIPAddress>;
    {class} function BeginGetHostEntry(hostNameOrAddress: string; requestCallback: DDN.mscorlib.DNAsyncCallback; stateObject: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    {class} function BeginGetHostEntry(address: DNIPAddress; requestCallback: DDN.mscorlib.DNAsyncCallback; stateObject: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    {class} function EndGetHostEntry(asyncResult: DDN.mscorlib.DNIAsyncResult): DNIPHostEntry;
    {class} function BeginGetHostAddresses(hostNameOrAddress: string; requestCallback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    {class} function EndGetHostAddresses(asyncResult: DDN.mscorlib.DNIAsyncResult): TArray<DNIPAddress>;
    {class} function BeginResolve(hostName: string; requestCallback: DDN.mscorlib.DNAsyncCallback; stateObject: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    {class} function EndResolve(asyncResult: DDN.mscorlib.DNIAsyncResult): DNIPHostEntry;
    {class} function GetHostAddressesAsync(hostNameOrAddress: string): DDN.mscorlib.DNTask<TArray<DNIPAddress>>;
    {class} function GetHostEntryAsync(address: DNIPAddress): DDN.mscorlib.DNTask<DNIPHostEntry>; overload;
    {class} function GetHostEntryAsync(hostNameOrAddress: string): DDN.mscorlib.DNTask<DNIPHostEntry>; overload;
    {class} function GetHostEntry(hostNameOrAddress: string): DNIPHostEntry; overload;

  end;

  [DNTypeName('System.Net.Dns')]
  DNDns = interface(DDN.mscorlib.DNObject)
  ['{BBA687AB-DF82-3C65-AFC8-2EFBB290792E}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDns = class(TDNGenericImport<DNDnsClass, DNDns>) end;

  //-------------namespace: System.Net----------------
  DNEndPointClass = interface(DDN.mscorlib.DNObjectClass)
  ['{83E2E65B-4EF4-5755-B4A0-C880BBE2B407}']
  end;

  [DNTypeName('System.Net.EndPoint')]
  DNEndPoint = interface(DDN.mscorlib.DNObject)
  ['{985B72DD-F078-3EC2-81C4-F56A7238779C}']
  { getters & setters } 

    function get_AddressFamily: DNAddressFamily;

  { methods } 

    function Serialize: DNSocketAddress;
    function Create(socketAddress: DNSocketAddress): DNEndPoint;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AddressFamily: DNAddressFamily read get_AddressFamily;
  end;

  TDNEndPoint = class(TDNGenericImport<DNEndPointClass, DNEndPoint>) end;

  //-------------namespace: System.Net----------------
  DNDnsEndPointClass = interface(DNEndPointClass)
  ['{F77C1513-6CB1-5484-92E7-4DBE37CFA82A}']
  { constructors } 

    {class} function init(host: string; port: Int32): DNDnsEndPoint; overload;
    {class} function init(host: string; port: Int32; addressFamily: DNAddressFamily): DNDnsEndPoint; overload;

  end;

  [DNTypeName('System.Net.DnsEndPoint')]
  DNDnsEndPoint = interface(DNEndPoint)
  ['{D46F7C82-2318-3C24-BD8F-828DB2604B1D}']
  { getters & setters } 

    function get_Host: string;
    function get_AddressFamily: DNAddressFamily;
    function get_Port: Int32;

  { methods } 

    function Equals(comparand: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function Serialize: DNSocketAddress;
    function Create(socketAddress: DNSocketAddress): DNEndPoint;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Host: string read get_Host;
    property AddressFamily: DNAddressFamily read get_AddressFamily;
    property Port: Int32 read get_Port;
  end;

  TDNDnsEndPoint = class(TDNGenericImport<DNDnsEndPointClass, DNDnsEndPoint>) end;

  //-------------namespace: System.Net----------------
  DNIPEndPointClass = interface(DNEndPointClass)
  ['{8B9076A5-2291-51C3-A625-06ED598ACB86}']
  { constructors } 

    {class} function init(address: Int64; port: Int32): DNIPEndPoint; overload;
    {class} function init(address: DNIPAddress; port: Int32): DNIPEndPoint; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_MinPort: Int32;
   function __fakeFieldGet_MaxPort: Int32;

  { static fields } 

    {class} property MinPort: Int32 read __fakeFieldGet_MinPort;
    {class} property MaxPort: Int32 read __fakeFieldGet_MaxPort;

  end;

  [DNTypeName('System.Net.IPEndPoint')]
  DNIPEndPoint = interface(DNEndPoint)
  ['{9098BC74-D7BA-3701-8B7C-C10E894A7394}']
  { getters & setters } 

    function get_AddressFamily: DNAddressFamily;
    function get_Address: DNIPAddress;
    procedure set_Address(value: DNIPAddress);
    function get_Port: Int32;
    procedure set_Port(value: Int32);

  { methods } 

    function Serialize: DNSocketAddress;
    function Equals(comparand: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function Create(socketAddress: DNSocketAddress): DNEndPoint;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AddressFamily: DNAddressFamily read get_AddressFamily;
    property Address: DNIPAddress read get_Address write set_Address;
    property Port: Int32 read get_Port write set_Port;
  end;

  TDNIPEndPoint = class(TDNGenericImport<DNIPEndPointClass, DNIPEndPoint>)
  public const
   MinPort = 0;
   MaxPort = 65535;
  end;

  //-------------namespace: System.Net----------------
  DNEndpointPermissionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BC5D1E34-C3AC-5795-9D74-EFDA77F42D98}']
  end;

  [DNTypeName('System.Net.EndpointPermission')]
  DNEndpointPermission = interface(DDN.mscorlib.DNObject)
  ['{FC55E7F8-DA40-32FE-9F8E-BBB9697F6230}']
  { getters & setters } 

    function get_Hostname: string;
    function get_Transport: DNTransportType;
    function get_Port: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Hostname: string read get_Hostname;
    property Transport: DNTransportType read get_Transport;
    property Port: Int32 read get_Port;
  end;

  TDNEndpointPermission = class(TDNGenericImport<DNEndpointPermissionClass, DNEndpointPermission>) end;

  //-------------namespace: System.Net----------------
  DNGlobalProxySelectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2A44CD9E-E924-548D-90B3-74293EBFA013}']
  { static getter & setter } 

    {class} function get_Select: DNIWebProxy;
    {class} procedure set_Select(value: DNIWebProxy);

  { constructors } 

    {class} function init: DNGlobalProxySelection;

  { static methods } 

    {class} function GetEmptyWebProxy: DNIWebProxy;

  { static propertys } 

    {class} property Select: DNIWebProxy read get_Select write set_Select;
  end;

  [DNTypeName('System.Net.GlobalProxySelection')]
  DNGlobalProxySelection = interface(DDN.mscorlib.DNObject)
  ['{6E3A5DB5-787D-3D01-B093-5B2ECA263CB2}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGlobalProxySelection = class(TDNGenericImport<DNGlobalProxySelectionClass, DNGlobalProxySelection>) end;

  //-------------namespace: System.Net----------------
  DNHttpListenerClass = interface(DNObjectClass)
  ['{092B587D-0780-5361-A13F-E13D6DC85E80}']
  { static getter & setter } 

    {class} function get_IsSupported: Boolean;

  { constructors } 

    {class} function init: DNHttpListener;

  { static propertys } 

    {class} property IsSupported: Boolean read get_IsSupported;
  end;

  [DNTypeName('System.Net.HttpListener')]
  DNHttpListener = interface(DDN.mscorlib.DNIDisposable)
  ['{A21618B5-F78C-3AD0-8C85-38DF71E458D7}']
  { getters & setters } 

    function get_AuthenticationSchemeSelectorDelegate: DNAuthenticationSchemeSelector;
    procedure set_AuthenticationSchemeSelectorDelegate(value: DNAuthenticationSchemeSelector);
    function get_ExtendedProtectionSelectorDelegate: DNHttpListener_ExtendedProtectionSelector;
    procedure set_ExtendedProtectionSelectorDelegate(value: DNHttpListener_ExtendedProtectionSelector);
    function get_AuthenticationSchemes: DNAuthenticationSchemes;
    procedure set_AuthenticationSchemes(value: DNAuthenticationSchemes);
    function get_ExtendedProtectionPolicy: DNExtendedProtectionPolicy;
    procedure set_ExtendedProtectionPolicy(value: DNExtendedProtectionPolicy);
    function get_DefaultServiceNames: DNServiceNameCollection;
    function get_Realm: string;
    procedure set_Realm(value: string);
    function get_TimeoutManager: DNHttpListenerTimeoutManager;
    function get_IsListening: Boolean;
    function get_IgnoreWriteExceptions: Boolean;
    procedure set_IgnoreWriteExceptions(value: Boolean);
    function get_UnsafeConnectionNtlmAuthentication: Boolean;
    procedure set_UnsafeConnectionNtlmAuthentication(value: Boolean);
    function get_Prefixes: DNHttpListenerPrefixCollection;

  { methods } 

    procedure Start;
    procedure Stop;
    procedure &Abort;
    procedure Close;
    function GetContext: DNHttpListenerContext;
    function BeginGetContext(callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndGetContext(asyncResult: DDN.mscorlib.DNIAsyncResult): DNHttpListenerContext;
    function GetContextAsync: DDN.mscorlib.DNTask<DNHttpListenerContext>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AuthenticationSchemeSelectorDelegate: DNAuthenticationSchemeSelector read get_AuthenticationSchemeSelectorDelegate write set_AuthenticationSchemeSelectorDelegate;
    property ExtendedProtectionSelectorDelegate: DNHttpListener_ExtendedProtectionSelector read get_ExtendedProtectionSelectorDelegate write set_ExtendedProtectionSelectorDelegate;
    property AuthenticationSchemes: DNAuthenticationSchemes read get_AuthenticationSchemes write set_AuthenticationSchemes;
    property ExtendedProtectionPolicy: DNExtendedProtectionPolicy read get_ExtendedProtectionPolicy write set_ExtendedProtectionPolicy;
    property DefaultServiceNames: DNServiceNameCollection read get_DefaultServiceNames;
    property Realm: string read get_Realm write set_Realm;
    property TimeoutManager: DNHttpListenerTimeoutManager read get_TimeoutManager;
    property IsListening: Boolean read get_IsListening;
    property IgnoreWriteExceptions: Boolean read get_IgnoreWriteExceptions write set_IgnoreWriteExceptions;
    property UnsafeConnectionNtlmAuthentication: Boolean read get_UnsafeConnectionNtlmAuthentication write set_UnsafeConnectionNtlmAuthentication;
    property Prefixes: DNHttpListenerPrefixCollection read get_Prefixes;
  end;

  TDNHttpListener = class(TDNGenericImport<DNHttpListenerClass, DNHttpListener>) end;

  //-------------namespace: System.Net----------------
  DNHttpListenerContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8ABCBB53-76D1-5533-97CA-C3FAE2712A43}']
  end;

  [DNTypeName('System.Net.HttpListenerContext')]
  DNHttpListenerContext = interface(DDN.mscorlib.DNObject)
  ['{C8E75E4A-15EB-31F2-B8D4-7C5480DE0C8B}']
  { getters & setters } 

    function get_Request: DNHttpListenerRequest;
    function get_Response: DNHttpListenerResponse;
    function get_User: DDN.mscorlib.DNIPrincipal;

  { methods } 

    function AcceptWebSocketAsync(subProtocol: string): DDN.mscorlib.DNTask<DNHttpListenerWebSocketContext>; overload;
    function AcceptWebSocketAsync(subProtocol: string; keepAliveInterval: DDN.mscorlib.DNTimeSpan): DDN.mscorlib.DNTask<DNHttpListenerWebSocketContext>; overload;
    function AcceptWebSocketAsync(subProtocol: string; receiveBufferSize: Int32; keepAliveInterval: DDN.mscorlib.DNTimeSpan): DDN.mscorlib.DNTask<DNHttpListenerWebSocketContext>; overload;
    function AcceptWebSocketAsync(subProtocol: string; receiveBufferSize: Int32; keepAliveInterval: DDN.mscorlib.DNTimeSpan; internalBuffer: DDN.mscorlib.DNArraySegment<Byte>): DDN.mscorlib.DNTask<DNHttpListenerWebSocketContext>; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Request: DNHttpListenerRequest read get_Request;
    property Response: DNHttpListenerResponse read get_Response;
    property User: DDN.mscorlib.DNIPrincipal read get_User;
  end;

  TDNHttpListenerContext = class(TDNGenericImport<DNHttpListenerContextClass, DNHttpListenerContext>) end;

  //-------------namespace: System.Net----------------
  DNHttpListenerPrefixCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{88321411-0B78-527F-8B1F-0C9090D279F9}']
  end;

  [DNTypeName('System.Net.HttpListenerPrefixCollection')]
  DNHttpListenerPrefixCollection = interface(DDN.mscorlib.DNObject)
  ['{E17E8B66-2832-3882-9417-A57BC677DDE2}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_IsReadOnly: Boolean;

  { methods } 

    procedure CopyTo(&array: DDN.mscorlib.DNArray; offset: Int32); overload;
    procedure CopyTo(&array: TArray<string>; offset: Int32); overload;
    function &Contains(uriPrefix: string): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNHttpListenerPrefixCollection = class(TDNGenericImport<DNHttpListenerPrefixCollectionClass, DNHttpListenerPrefixCollection>) end;

  //-------------namespace: System.Net----------------
  DNHttpListenerRequestClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2FD9F0C8-E4A6-5C03-9C69-A6D9D106C574}']
  end;

  [DNTypeName('System.Net.HttpListenerRequest')]
  DNHttpListenerRequest = interface(DDN.mscorlib.DNObject)
  ['{B4A0FEDF-0354-3A2E-B599-0A109DDA54E6}']
  { getters & setters } 

    function get_RequestTraceIdentifier: DDN.mscorlib.DNGuid;
    function get_AcceptTypes: TArray<string>;
    function get_ContentEncoding: DDN.mscorlib.DNEncoding;
    function get_ContentLength64: Int64;
    function get_ContentType: string;
    function get_Headers: DNNameValueCollection;
    function get_HttpMethod: string;
    function get_InputStream: DDN.mscorlib.DNStream;
    function get_IsAuthenticated: Boolean;
    function get_IsLocal: Boolean;
    function get_IsSecureConnection: Boolean;
    function get_IsWebSocketRequest: Boolean;
    function get_QueryString: DNNameValueCollection;
    function get_RawUrl: string;
    function get_ServiceName: string;
    function get_Url: DNUri;
    function get_UrlReferrer: DNUri;
    function get_UserAgent: string;
    function get_UserHostAddress: string;
    function get_UserHostName: string;
    function get_UserLanguages: TArray<string>;
    function get_ClientCertificateError: Int32;
    function get_TransportContext: DNTransportContext;
    function get_Cookies: DNCookieCollection;
    function get_ProtocolVersion: DDN.mscorlib.DNVersion;
    function get_HasEntityBody: Boolean;
    function get_KeepAlive: Boolean;
    function get_RemoteEndPoint: DNIPEndPoint;
    function get_LocalEndPoint: DNIPEndPoint;

  { methods } 

    function GetClientCertificate: DNX509Certificate2;
    function BeginGetClientCertificate(requestCallback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndGetClientCertificate(asyncResult: DDN.mscorlib.DNIAsyncResult): DNX509Certificate2;
    function GetClientCertificateAsync: DDN.mscorlib.DNTask<DNX509Certificate2>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RequestTraceIdentifier: DDN.mscorlib.DNGuid read get_RequestTraceIdentifier;
    property AcceptTypes: TArray<string> read get_AcceptTypes;
    property ContentEncoding: DDN.mscorlib.DNEncoding read get_ContentEncoding;
    property ContentLength64: Int64 read get_ContentLength64;
    property ContentType: string read get_ContentType;
    property Headers: DNNameValueCollection read get_Headers;
    property HttpMethod: string read get_HttpMethod;
    property InputStream: DDN.mscorlib.DNStream read get_InputStream;
    property IsAuthenticated: Boolean read get_IsAuthenticated;
    property IsLocal: Boolean read get_IsLocal;
    property IsSecureConnection: Boolean read get_IsSecureConnection;
    property IsWebSocketRequest: Boolean read get_IsWebSocketRequest;
    property QueryString: DNNameValueCollection read get_QueryString;
    property RawUrl: string read get_RawUrl;
    property ServiceName: string read get_ServiceName;
    property Url: DNUri read get_Url;
    property UrlReferrer: DNUri read get_UrlReferrer;
    property UserAgent: string read get_UserAgent;
    property UserHostAddress: string read get_UserHostAddress;
    property UserHostName: string read get_UserHostName;
    property UserLanguages: TArray<string> read get_UserLanguages;
    property ClientCertificateError: Int32 read get_ClientCertificateError;
    property TransportContext: DNTransportContext read get_TransportContext;
    property Cookies: DNCookieCollection read get_Cookies;
    property ProtocolVersion: DDN.mscorlib.DNVersion read get_ProtocolVersion;
    property HasEntityBody: Boolean read get_HasEntityBody;
    property KeepAlive: Boolean read get_KeepAlive;
    property RemoteEndPoint: DNIPEndPoint read get_RemoteEndPoint;
    property LocalEndPoint: DNIPEndPoint read get_LocalEndPoint;
  end;

  TDNHttpListenerRequest = class(TDNGenericImport<DNHttpListenerRequestClass, DNHttpListenerRequest>) end;

  //-------------namespace: System.Net----------------
  DNHttpListenerResponseClass = interface(DNObjectClass)
  ['{DFADA334-AE04-52FA-8A99-A69A19267F6B}']
  end;

  [DNTypeName('System.Net.HttpListenerResponse')]
  DNHttpListenerResponse = interface(DDN.mscorlib.DNIDisposable)
  ['{E0AF1A6A-C672-3039-BCC9-A679A31F2BD0}']
  { getters & setters } 

    function get_ContentEncoding: DDN.mscorlib.DNEncoding;
    procedure set_ContentEncoding(value: DDN.mscorlib.DNEncoding);
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_OutputStream: DDN.mscorlib.DNStream;
    function get_RedirectLocation: string;
    procedure set_RedirectLocation(value: string);
    function get_StatusCode: Int32;
    procedure set_StatusCode(value: Int32);
    function get_StatusDescription: string;
    procedure set_StatusDescription(value: string);
    function get_Cookies: DNCookieCollection;
    procedure set_Cookies(value: DNCookieCollection);
    function get_SendChunked: Boolean;
    procedure set_SendChunked(value: Boolean);
    function get_KeepAlive: Boolean;
    procedure set_KeepAlive(value: Boolean);
    function get_Headers: DNWebHeaderCollection;
    procedure set_Headers(value: DNWebHeaderCollection);
    function get_ContentLength64: Int64;
    procedure set_ContentLength64(value: Int64);
    function get_ProtocolVersion: DDN.mscorlib.DNVersion;
    procedure set_ProtocolVersion(value: DDN.mscorlib.DNVersion);

  { methods } 

    procedure CopyFrom(templateResponse: DNHttpListenerResponse);
    procedure AddHeader(name: string; value: string);
    procedure AppendHeader(name: string; value: string);
    procedure Redirect(url: string);
    procedure AppendCookie(cookie: DNCookie);
    procedure SetCookie(cookie: DNCookie);
    procedure &Abort;
    procedure Close(responseEntity: TArray<Byte>; willBlock: Boolean); overload;
    procedure Close; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ContentEncoding: DDN.mscorlib.DNEncoding read get_ContentEncoding write set_ContentEncoding;
    property ContentType: string read get_ContentType write set_ContentType;
    property OutputStream: DDN.mscorlib.DNStream read get_OutputStream;
    property RedirectLocation: string read get_RedirectLocation write set_RedirectLocation;
    property StatusCode: Int32 read get_StatusCode write set_StatusCode;
    property StatusDescription: string read get_StatusDescription write set_StatusDescription;
    property Cookies: DNCookieCollection read get_Cookies write set_Cookies;
    property SendChunked: Boolean read get_SendChunked write set_SendChunked;
    property KeepAlive: Boolean read get_KeepAlive write set_KeepAlive;
    property Headers: DNWebHeaderCollection read get_Headers write set_Headers;
    property ContentLength64: Int64 read get_ContentLength64 write set_ContentLength64;
    property ProtocolVersion: DDN.mscorlib.DNVersion read get_ProtocolVersion write set_ProtocolVersion;
  end;

  TDNHttpListenerResponse = class(TDNGenericImport<DNHttpListenerResponseClass, DNHttpListenerResponse>) end;

  //-------------namespace: System.Net----------------
  DNHttpListenerTimeoutManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0E21F7AF-6BB1-5571-BEAB-E99810ADD411}']
  end;

  [DNTypeName('System.Net.HttpListenerTimeoutManager')]
  DNHttpListenerTimeoutManager = interface(DDN.mscorlib.DNObject)
  ['{D4EC68DA-62BD-3D21-9D56-58BC1A91CA87}']
  { getters & setters } 

    function get_EntityBody: DDN.mscorlib.DNTimeSpan;
    procedure set_EntityBody(value: DDN.mscorlib.DNTimeSpan);
    function get_DrainEntityBody: DDN.mscorlib.DNTimeSpan;
    procedure set_DrainEntityBody(value: DDN.mscorlib.DNTimeSpan);
    function get_RequestQueue: DDN.mscorlib.DNTimeSpan;
    procedure set_RequestQueue(value: DDN.mscorlib.DNTimeSpan);
    function get_IdleConnection: DDN.mscorlib.DNTimeSpan;
    procedure set_IdleConnection(value: DDN.mscorlib.DNTimeSpan);
    function get_HeaderWait: DDN.mscorlib.DNTimeSpan;
    procedure set_HeaderWait(value: DDN.mscorlib.DNTimeSpan);
    function get_MinSendBytesPerSecond: Int64;
    procedure set_MinSendBytesPerSecond(value: Int64);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EntityBody: DDN.mscorlib.DNTimeSpan read get_EntityBody write set_EntityBody;
    property DrainEntityBody: DDN.mscorlib.DNTimeSpan read get_DrainEntityBody write set_DrainEntityBody;
    property RequestQueue: DDN.mscorlib.DNTimeSpan read get_RequestQueue write set_RequestQueue;
    property IdleConnection: DDN.mscorlib.DNTimeSpan read get_IdleConnection write set_IdleConnection;
    property HeaderWait: DDN.mscorlib.DNTimeSpan read get_HeaderWait write set_HeaderWait;
    property MinSendBytesPerSecond: Int64 read get_MinSendBytesPerSecond write set_MinSendBytesPerSecond;
  end;

  TDNHttpListenerTimeoutManager = class(TDNGenericImport<DNHttpListenerTimeoutManagerClass, DNHttpListenerTimeoutManager>) end;

  //-------------namespace: System.Net----------------
  DNHttpVersionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B544CEE8-DFC7-5C7F-87E8-6FBD197D6794}']
  { constructors } 

    {class} function init: DNHttpVersion;

  { static fields getter & setter } 

   function __fakeFieldGet_Version10: DDN.mscorlib.DNVersion;
   function __fakeFieldGet_Version11: DDN.mscorlib.DNVersion;

  { static fields } 

    {class} property Version10: DDN.mscorlib.DNVersion read __fakeFieldGet_Version10;
    {class} property Version11: DDN.mscorlib.DNVersion read __fakeFieldGet_Version11;

  end;

  [DNTypeName('System.Net.HttpVersion')]
  DNHttpVersion = interface(DDN.mscorlib.DNObject)
  ['{70E18A37-E754-3A8D-8F47-40C6123D3BEB}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHttpVersion = class(TDNGenericImport<DNHttpVersionClass, DNHttpVersion>) end;

  //-------------namespace: System.Net----------------
  DNIPAddressClass = interface(DDN.mscorlib.DNObjectClass)
  ['{32A4CD45-0016-5A0E-984D-093DDCB18C22}']
  { constructors } 

    {class} function init(newAddress: Int64): DNIPAddress; overload;
    {class} function init(address: TArray<Byte>; scopeid: Int64): DNIPAddress; overload;
    {class} function init(address: TArray<Byte>): DNIPAddress; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Any: DNIPAddress;
   function __fakeFieldGet_Loopback: DNIPAddress;
   function __fakeFieldGet_Broadcast: DNIPAddress;
   function __fakeFieldGet_None: DNIPAddress;
   function __fakeFieldGet_IPv6Any: DNIPAddress;
   function __fakeFieldGet_IPv6Loopback: DNIPAddress;
   function __fakeFieldGet_IPv6None: DNIPAddress;

  { static fields } 

    {class} property Any: DNIPAddress read __fakeFieldGet_Any;
    {class} property Loopback: DNIPAddress read __fakeFieldGet_Loopback;
    {class} property Broadcast: DNIPAddress read __fakeFieldGet_Broadcast;
    {class} property None: DNIPAddress read __fakeFieldGet_None;
    {class} property IPv6Any: DNIPAddress read __fakeFieldGet_IPv6Any;
    {class} property IPv6Loopback: DNIPAddress read __fakeFieldGet_IPv6Loopback;
    {class} property IPv6None: DNIPAddress read __fakeFieldGet_IPv6None;

  { static methods } 

    {class} function TryParse(ipString: string; out address: DNIPAddress): Boolean;
    {class} function Parse(ipString: string): DNIPAddress;
    {class} function HostToNetworkOrder(host: Int64): Int64; overload;
    {class} function HostToNetworkOrder(host: Int32): Int32; overload;
    {class} function HostToNetworkOrder(host: Int16): Int16; overload;
    {class} function NetworkToHostOrder(network: Int64): Int64; overload;
    {class} function NetworkToHostOrder(network: Int32): Int32; overload;
    {class} function NetworkToHostOrder(network: Int16): Int16; overload;
    {class} function IsLoopback(address: DNIPAddress): Boolean;

  end;

  [DNTypeName('System.Net.IPAddress')]
  DNIPAddress = interface(DDN.mscorlib.DNObject)
  ['{D0990270-41DE-397C-B2A9-279558E173BF}']
  { getters & setters } 

    function get_Address: Int64;
    procedure set_Address(value: Int64);
    function get_AddressFamily: DNAddressFamily;
    function get_ScopeId: Int64;
    procedure set_ScopeId(value: Int64);
    function get_IsIPv6Multicast: Boolean;
    function get_IsIPv6LinkLocal: Boolean;
    function get_IsIPv6SiteLocal: Boolean;
    function get_IsIPv6Teredo: Boolean;
    function get_IsIPv4MappedToIPv6: Boolean;

  { methods } 

    function Equals(comparand: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function MapToIPv4: DNIPAddress;
    function ToString: string;
    function MapToIPv6: DNIPAddress;
    function GetAddressBytes: TArray<Byte>;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Address: Int64 read get_Address write set_Address;
    property AddressFamily: DNAddressFamily read get_AddressFamily;
    property ScopeId: Int64 read get_ScopeId write set_ScopeId;
    property IsIPv6Multicast: Boolean read get_IsIPv6Multicast;
    property IsIPv6LinkLocal: Boolean read get_IsIPv6LinkLocal;
    property IsIPv6SiteLocal: Boolean read get_IsIPv6SiteLocal;
    property IsIPv6Teredo: Boolean read get_IsIPv6Teredo;
    property IsIPv4MappedToIPv6: Boolean read get_IsIPv4MappedToIPv6;
  end;

  TDNIPAddress = class(TDNGenericImport<DNIPAddressClass, DNIPAddress>) end;

  //-------------namespace: System.Net----------------
  DNIPHostEntryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{95BB9E88-0915-5504-B874-B83A0516B5BA}']
  { constructors } 

    {class} function init: DNIPHostEntry;

  end;

  [DNTypeName('System.Net.IPHostEntry')]
  DNIPHostEntry = interface(DDN.mscorlib.DNObject)
  ['{22F0E3DC-010F-38BA-BCE2-D77270E9E66A}']
  { getters & setters } 

    function get_HostName: string;
    procedure set_HostName(value: string);
    function get_Aliases: TArray<string>;
    procedure set_Aliases(value: TArray<string>);
    function get_AddressList: TArray<DNIPAddress>;
    procedure set_AddressList(value: TArray<DNIPAddress>);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HostName: string read get_HostName write set_HostName;
    property Aliases: TArray<string> read get_Aliases write set_Aliases;
    property AddressList: TArray<DNIPAddress> read get_AddressList write set_AddressList;
  end;

  TDNIPHostEntry = class(TDNGenericImport<DNIPHostEntryClass, DNIPHostEntry>) end;

  //-------------namespace: System.Net.Mail----------------
  DNAttachmentBaseClass = interface(DNObjectClass)
  ['{475AC59A-80DA-596D-BB1F-06FBD3D34F9F}']
  end;

  [DNTypeName('System.Net.Mail.AttachmentBase')]
  DNAttachmentBase = interface(DDN.mscorlib.DNIDisposable)
  ['{1C4790B5-90A8-32C9-8B47-A068CEA667DF}']
  { getters & setters } 

    function get_ContentStream: DDN.mscorlib.DNStream;
    function get_ContentId: string;
    procedure set_ContentId(value: string);
    function get_ContentType: DNContentType;
    procedure set_ContentType(value: DNContentType);
    function get_TransferEncoding: DNTransferEncoding;
    procedure set_TransferEncoding(value: DNTransferEncoding);

  { methods } 

    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ContentStream: DDN.mscorlib.DNStream read get_ContentStream;
    property ContentId: string read get_ContentId write set_ContentId;
    property ContentType: DNContentType read get_ContentType write set_ContentType;
    property TransferEncoding: DNTransferEncoding read get_TransferEncoding write set_TransferEncoding;
  end;

  TDNAttachmentBase = class(TDNGenericImport<DNAttachmentBaseClass, DNAttachmentBase>) end;

  //-------------namespace: System.Net.Mail----------------
  DNAlternateViewClass = interface(DNAttachmentBaseClass)
  ['{A7D4A788-1407-51DB-974D-544E32047874}']
  { constructors } 

    {class} function init(fileName: string): DNAlternateView; overload;
    {class} function init(fileName: string; mediaType: string): DNAlternateView; overload;
    {class} function init(fileName: string; contentType: DNContentType): DNAlternateView; overload;
    {class} function init(contentStream: DDN.mscorlib.DNStream): DNAlternateView; overload;
    {class} function init(contentStream: DDN.mscorlib.DNStream; mediaType: string): DNAlternateView; overload;
    {class} function init(contentStream: DDN.mscorlib.DNStream; contentType: DNContentType): DNAlternateView; overload;

  { static methods } 

    {class} function CreateAlternateViewFromString(content: string): DNAlternateView; overload;
    {class} function CreateAlternateViewFromString(content: string; contentEncoding: DDN.mscorlib.DNEncoding; mediaType: string): DNAlternateView; overload;
    {class} function CreateAlternateViewFromString(content: string; contentType: DNContentType): DNAlternateView; overload;

  end;

  [DNTypeName('System.Net.Mail.AlternateView')]
  DNAlternateView = interface(DNAttachmentBase)
  ['{8BCF8E61-19A9-36CD-AA69-64A3390F5C6A}']
  { getters & setters } 

    function get_LinkedResources: DNLinkedResourceCollection;
    function get_BaseUri: DNUri;
    procedure set_BaseUri(value: DNUri);
    function get_ContentStream: DDN.mscorlib.DNStream;
    function get_ContentId: string;
    procedure set_ContentId(value: string);
    function get_ContentType: DNContentType;
    procedure set_ContentType(value: DNContentType);
    function get_TransferEncoding: DNTransferEncoding;
    procedure set_TransferEncoding(value: DNTransferEncoding);

  { methods } 

    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LinkedResources: DNLinkedResourceCollection read get_LinkedResources;
    property BaseUri: DNUri read get_BaseUri write set_BaseUri;
    property ContentStream: DDN.mscorlib.DNStream read get_ContentStream;
    property ContentId: string read get_ContentId write set_ContentId;
    property ContentType: DNContentType read get_ContentType write set_ContentType;
    property TransferEncoding: DNTransferEncoding read get_TransferEncoding write set_TransferEncoding;
  end;

  TDNAlternateView = class(TDNGenericImport<DNAlternateViewClass, DNAlternateView>) end;

  //-------------namespace: System.Net.Mail----------------
  DNAttachmentClass = interface(DNAttachmentBaseClass)
  ['{A72A7769-27E2-586F-9AAC-DC7BCB0B4CB4}']
  { constructors } 

    {class} function init(fileName: string): DNAttachment; overload;
    {class} function init(fileName: string; mediaType: string): DNAttachment; overload;
    {class} function init(fileName: string; contentType: DNContentType): DNAttachment; overload;
    {class} function init(contentStream: DDN.mscorlib.DNStream; name: string): DNAttachment; overload;
    {class} function init(contentStream: DDN.mscorlib.DNStream; name: string; mediaType: string): DNAttachment; overload;
    {class} function init(contentStream: DDN.mscorlib.DNStream; contentType: DNContentType): DNAttachment; overload;

  { static methods } 

    {class} function CreateAttachmentFromString(content: string; name: string): DNAttachment; overload;
    {class} function CreateAttachmentFromString(content: string; name: string; contentEncoding: DDN.mscorlib.DNEncoding; mediaType: string): DNAttachment; overload;
    {class} function CreateAttachmentFromString(content: string; contentType: DNContentType): DNAttachment; overload;

  end;

  [DNTypeName('System.Net.Mail.Attachment')]
  DNAttachment = interface(DNAttachmentBase)
  ['{D99C8212-A3E8-32D8-8139-A5302BA857A2}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_NameEncoding: DDN.mscorlib.DNEncoding;
    procedure set_NameEncoding(value: DDN.mscorlib.DNEncoding);
    function get_ContentDisposition: DNContentDisposition;
    function get_ContentStream: DDN.mscorlib.DNStream;
    function get_ContentId: string;
    procedure set_ContentId(value: string);
    function get_ContentType: DNContentType;
    procedure set_ContentType(value: DNContentType);
    function get_TransferEncoding: DNTransferEncoding;
    procedure set_TransferEncoding(value: DNTransferEncoding);

  { methods } 

    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property NameEncoding: DDN.mscorlib.DNEncoding read get_NameEncoding write set_NameEncoding;
    property ContentDisposition: DNContentDisposition read get_ContentDisposition;
    property ContentStream: DDN.mscorlib.DNStream read get_ContentStream;
    property ContentId: string read get_ContentId write set_ContentId;
    property ContentType: DNContentType read get_ContentType write set_ContentType;
    property TransferEncoding: DNTransferEncoding read get_TransferEncoding write set_TransferEncoding;
  end;

  TDNAttachment = class(TDNGenericImport<DNAttachmentClass, DNAttachment>) end;

  //-------------namespace: System.Net.Mail----------------
  DNLinkedResourceClass = interface(DNAttachmentBaseClass)
  ['{89A86282-C646-55BB-B9F0-0DB028BC2381}']
  { constructors } 

    {class} function init(fileName: string): DNLinkedResource; overload;
    {class} function init(fileName: string; mediaType: string): DNLinkedResource; overload;
    {class} function init(fileName: string; contentType: DNContentType): DNLinkedResource; overload;
    {class} function init(contentStream: DDN.mscorlib.DNStream): DNLinkedResource; overload;
    {class} function init(contentStream: DDN.mscorlib.DNStream; mediaType: string): DNLinkedResource; overload;
    {class} function init(contentStream: DDN.mscorlib.DNStream; contentType: DNContentType): DNLinkedResource; overload;

  { static methods } 

    {class} function CreateLinkedResourceFromString(content: string): DNLinkedResource; overload;
    {class} function CreateLinkedResourceFromString(content: string; contentEncoding: DDN.mscorlib.DNEncoding; mediaType: string): DNLinkedResource; overload;
    {class} function CreateLinkedResourceFromString(content: string; contentType: DNContentType): DNLinkedResource; overload;

  end;

  [DNTypeName('System.Net.Mail.LinkedResource')]
  DNLinkedResource = interface(DNAttachmentBase)
  ['{10F07BCA-F466-3708-8758-84062AAE8D0C}']
  { getters & setters } 

    function get_ContentLink: DNUri;
    procedure set_ContentLink(value: DNUri);
    function get_ContentStream: DDN.mscorlib.DNStream;
    function get_ContentId: string;
    procedure set_ContentId(value: string);
    function get_ContentType: DNContentType;
    procedure set_ContentType(value: DNContentType);
    function get_TransferEncoding: DNTransferEncoding;
    procedure set_TransferEncoding(value: DNTransferEncoding);

  { methods } 

    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ContentLink: DNUri read get_ContentLink write set_ContentLink;
    property ContentStream: DDN.mscorlib.DNStream read get_ContentStream;
    property ContentId: string read get_ContentId write set_ContentId;
    property ContentType: DNContentType read get_ContentType write set_ContentType;
    property TransferEncoding: DNTransferEncoding read get_TransferEncoding write set_TransferEncoding;
  end;

  TDNLinkedResource = class(TDNGenericImport<DNLinkedResourceClass, DNLinkedResource>) end;

  //-------------namespace: System.Net.Mail----------------
  DNMailAddressClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AB9A6C55-3EB2-537D-849B-4B35DD4B6471}']
  { constructors } 

    {class} function init(address: string): DNMailAddress; overload;
    {class} function init(address: string; displayName: string): DNMailAddress; overload;
    {class} function init(address: string; displayName: string; displayNameEncoding: DDN.mscorlib.DNEncoding): DNMailAddress; overload;

  end;

  [DNTypeName('System.Net.Mail.MailAddress')]
  DNMailAddress = interface(DDN.mscorlib.DNObject)
  ['{5BBA3431-8AE5-3F48-BEED-C08D1CBF8FFA}']
  { getters & setters } 

    function get_DisplayName: string;
    function get_User: string;
    function get_Host: string;
    function get_Address: string;

  { methods } 

    function Equals(value: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DisplayName: string read get_DisplayName;
    property User: string read get_User;
    property Host: string read get_Host;
    property Address: string read get_Address;
  end;

  TDNMailAddress = class(TDNGenericImport<DNMailAddressClass, DNMailAddress>) end;

  //-------------namespace: System.Net.Mail----------------
  DNMailMessageClass = interface(DNObjectClass)
  ['{6169625C-A28D-5CC9-8781-17844DC618A8}']
  { constructors } 

    {class} function init: DNMailMessage; overload;
    {class} function init(from: string; &to: string): DNMailMessage; overload;
    {class} function init(from: string; &to: string; subject: string; body: string): DNMailMessage; overload;
    {class} function init(from: DNMailAddress; &to: DNMailAddress): DNMailMessage; overload;

  end;

  [DNTypeName('System.Net.Mail.MailMessage')]
  DNMailMessage = interface(DDN.mscorlib.DNIDisposable)
  ['{14CA7746-9790-3DD6-B427-EA926A14E640}']
  { getters & setters } 

    function get_From: DNMailAddress;
    procedure set_From(value: DNMailAddress);
    function get_Sender: DNMailAddress;
    procedure set_Sender(value: DNMailAddress);
    function get_ReplyTo: DNMailAddress;
    procedure set_ReplyTo(value: DNMailAddress);
    function get_ReplyToList: DNMailAddressCollection;
    function get_To: DNMailAddressCollection;
    function get_Bcc: DNMailAddressCollection;
    function get_CC: DNMailAddressCollection;
    function get_Priority: DNMailPriority;
    procedure set_Priority(value: DNMailPriority);
    function get_DeliveryNotificationOptions: DNDeliveryNotificationOptions;
    procedure set_DeliveryNotificationOptions(value: DNDeliveryNotificationOptions);
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_SubjectEncoding: DDN.mscorlib.DNEncoding;
    procedure set_SubjectEncoding(value: DDN.mscorlib.DNEncoding);
    function get_Headers: DNNameValueCollection;
    function get_HeadersEncoding: DDN.mscorlib.DNEncoding;
    procedure set_HeadersEncoding(value: DDN.mscorlib.DNEncoding);
    function get_Body: string;
    procedure set_Body(value: string);
    function get_BodyEncoding: DDN.mscorlib.DNEncoding;
    procedure set_BodyEncoding(value: DDN.mscorlib.DNEncoding);
    function get_BodyTransferEncoding: DNTransferEncoding;
    procedure set_BodyTransferEncoding(value: DNTransferEncoding);
    function get_IsBodyHtml: Boolean;
    procedure set_IsBodyHtml(value: Boolean);
    function get_Attachments: DNAttachmentCollection;
    function get_AlternateViews: DNAlternateViewCollection;

  { methods } 

    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property From: DNMailAddress read get_From write set_From;
    property Sender: DNMailAddress read get_Sender write set_Sender;
    property ReplyTo: DNMailAddress read get_ReplyTo write set_ReplyTo;
    property ReplyToList: DNMailAddressCollection read get_ReplyToList;
    property &To: DNMailAddressCollection read get_To;
    property Bcc: DNMailAddressCollection read get_Bcc;
    property CC: DNMailAddressCollection read get_CC;
    property Priority: DNMailPriority read get_Priority write set_Priority;
    property DeliveryNotificationOptions: DNDeliveryNotificationOptions read get_DeliveryNotificationOptions write set_DeliveryNotificationOptions;
    property Subject: string read get_Subject write set_Subject;
    property SubjectEncoding: DDN.mscorlib.DNEncoding read get_SubjectEncoding write set_SubjectEncoding;
    property Headers: DNNameValueCollection read get_Headers;
    property HeadersEncoding: DDN.mscorlib.DNEncoding read get_HeadersEncoding write set_HeadersEncoding;
    property Body: string read get_Body write set_Body;
    property BodyEncoding: DDN.mscorlib.DNEncoding read get_BodyEncoding write set_BodyEncoding;
    property BodyTransferEncoding: DNTransferEncoding read get_BodyTransferEncoding write set_BodyTransferEncoding;
    property IsBodyHtml: Boolean read get_IsBodyHtml write set_IsBodyHtml;
    property Attachments: DNAttachmentCollection read get_Attachments;
    property AlternateViews: DNAlternateViewCollection read get_AlternateViews;
  end;

  TDNMailMessage = class(TDNGenericImport<DNMailMessageClass, DNMailMessage>) end;

  //-------------namespace: System.Net.Mail----------------
  DNSmtpClientClass = interface(DNObjectClass)
  ['{1C70C104-45BD-5861-AF5A-90E48C3E9D92}']
  { constructors } 

    {class} function init: DNSmtpClient; overload;
    {class} function init(host: string): DNSmtpClient; overload;
    {class} function init(host: string; port: Int32): DNSmtpClient; overload;

  end;

  [DNTypeName('System.Net.Mail.SmtpClient')]
  DNSmtpClient = interface(DDN.mscorlib.DNIDisposable)
  ['{20487B20-BDC4-38F6-A38F-E2448B4AF4F3}']
  { getters & setters } 

    function get_Host: string;
    procedure set_Host(value: string);
    function get_Port: Int32;
    procedure set_Port(value: Int32);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_Credentials: DNICredentialsByHost;
    procedure set_Credentials(value: DNICredentialsByHost);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_ServicePoint: DNServicePoint;
    function get_DeliveryMethod: DNSmtpDeliveryMethod;
    procedure set_DeliveryMethod(value: DNSmtpDeliveryMethod);
    function get_DeliveryFormat: DNSmtpDeliveryFormat;
    procedure set_DeliveryFormat(value: DNSmtpDeliveryFormat);
    function get_PickupDirectoryLocation: string;
    procedure set_PickupDirectoryLocation(value: string);
    function get_EnableSsl: Boolean;
    procedure set_EnableSsl(value: Boolean);
    function get_ClientCertificates: DNX509CertificateCollection;
    function get_TargetName: string;
    procedure set_TargetName(value: string);

  { events } 

    procedure add_SendCompleted(value: DNSendCompletedEventHandler);
    procedure remove_SendCompleted(value: DNSendCompletedEventHandler);

  { methods } 

    procedure Send(from: string; recipients: string; subject: string; body: string); overload;
    procedure SendAsync(from: string; recipients: string; subject: string; body: string; userToken: DDN.mscorlib.DNObject); overload;
    function SendMailAsync(from: string; recipients: string; subject: string; body: string): DDN.mscorlib.DNTask; overload;
    procedure Dispose;
    procedure Send(message: DNMailMessage); overload;
    procedure SendAsync(message: DNMailMessage; userToken: DDN.mscorlib.DNObject); overload;
    procedure SendAsyncCancel;
    function SendMailAsync(message: DNMailMessage): DDN.mscorlib.DNTask; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Host: string read get_Host write set_Host;
    property Port: Int32 read get_Port write set_Port;
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property Credentials: DNICredentialsByHost read get_Credentials write set_Credentials;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property ServicePoint: DNServicePoint read get_ServicePoint;
    property DeliveryMethod: DNSmtpDeliveryMethod read get_DeliveryMethod write set_DeliveryMethod;
    property DeliveryFormat: DNSmtpDeliveryFormat read get_DeliveryFormat write set_DeliveryFormat;
    property PickupDirectoryLocation: string read get_PickupDirectoryLocation write set_PickupDirectoryLocation;
    property EnableSsl: Boolean read get_EnableSsl write set_EnableSsl;
    property ClientCertificates: DNX509CertificateCollection read get_ClientCertificates;
    property TargetName: string read get_TargetName write set_TargetName;
  end;

  TDNSmtpClient = class(TDNGenericImport<DNSmtpClientClass, DNSmtpClient>) end;

  //-------------namespace: System.Net.Mime----------------
  DNContentDispositionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B04FA043-18D7-556A-B52D-E33D6D86A2B1}']
  { constructors } 

    {class} function init: DNContentDisposition; overload;
    {class} function init(disposition: string): DNContentDisposition; overload;

  end;

  [DNTypeName('System.Net.Mime.ContentDisposition')]
  DNContentDisposition = interface(DDN.mscorlib.DNObject)
  ['{6C6C7CBC-FA8D-39B2-A4C9-509BCFB3BF58}']
  { getters & setters } 

    function get_DispositionType: string;
    procedure set_DispositionType(value: string);
    function get_Parameters: DNStringDictionary;
    function get_FileName: string;
    procedure set_FileName(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    procedure set_CreationDate(value: DDN.mscorlib.DNDateTime);
    function get_ModificationDate: DDN.mscorlib.DNDateTime;
    procedure set_ModificationDate(value: DDN.mscorlib.DNDateTime);
    function get_Inline: Boolean;
    procedure set_Inline(value: Boolean);
    function get_ReadDate: DDN.mscorlib.DNDateTime;
    procedure set_ReadDate(value: DDN.mscorlib.DNDateTime);
    function get_Size: Int64;
    procedure set_Size(value: Int64);

  { methods } 

    function ToString: string;
    function Equals(rparam: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DispositionType: string read get_DispositionType write set_DispositionType;
    property Parameters: DNStringDictionary read get_Parameters;
    property FileName: string read get_FileName write set_FileName;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate write set_CreationDate;
    property ModificationDate: DDN.mscorlib.DNDateTime read get_ModificationDate write set_ModificationDate;
    property &Inline: Boolean read get_Inline write set_Inline;
    property ReadDate: DDN.mscorlib.DNDateTime read get_ReadDate write set_ReadDate;
    property Size: Int64 read get_Size write set_Size;
  end;

  TDNContentDisposition = class(TDNGenericImport<DNContentDispositionClass, DNContentDisposition>) end;

  //-------------namespace: System.Net.Mime----------------
  DNContentTypeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C3376E77-F308-597C-909E-9EEFE089DBE4}']
  { constructors } 

    {class} function init: DNContentType; overload;
    {class} function init(contentType: string): DNContentType; overload;

  end;

  [DNTypeName('System.Net.Mime.ContentType')]
  DNContentType = interface(DDN.mscorlib.DNObject)
  ['{0DDFF564-0504-358A-B4C4-C06C661BEB0A}']
  { getters & setters } 

    function get_Boundary: string;
    procedure set_Boundary(value: string);
    function get_CharSet: string;
    procedure set_CharSet(value: string);
    function get_MediaType: string;
    procedure set_MediaType(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Parameters: DNStringDictionary;

  { methods } 

    function ToString: string;
    function Equals(rparam: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Boundary: string read get_Boundary write set_Boundary;
    property CharSet: string read get_CharSet write set_CharSet;
    property MediaType: string read get_MediaType write set_MediaType;
    property Name: string read get_Name write set_Name;
    property Parameters: DNStringDictionary read get_Parameters;
  end;

  TDNContentType = class(TDNGenericImport<DNContentTypeClass, DNContentType>) end;

  //-------------namespace: System.Net.Mime----------------
  DNDispositionTypeNamesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{98DD2F6E-F3C2-5BF1-8CF0-A0DAD10BE248}']
  { static fields getter & setter } 

   function __fakeFieldGet_Inline: string;
   function __fakeFieldGet_Attachment: string;

  { static fields } 

    {class} property &Inline: string read __fakeFieldGet_Inline;
    {class} property Attachment: string read __fakeFieldGet_Attachment;

  end;

  [DNTypeName('System.Net.Mime.DispositionTypeNames')]
  DNDispositionTypeNames = interface(DDN.mscorlib.DNObject)
  ['{ACDE4FEB-90A3-3410-970C-A97218B80609}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDispositionTypeNames = class(TDNGenericImport<DNDispositionTypeNamesClass, DNDispositionTypeNames>)
  public const
   Inline_ = 'inline';
   Attachment = 'attachment';
  end;

  //-------------namespace: System.Net.Mime----------------
  DNMediaTypeNamesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{666A157D-D468-51C6-8341-1F9F2C387D87}']
  end;

  [DNTypeName('System.Net.Mime.MediaTypeNames')]
  DNMediaTypeNames = interface(DDN.mscorlib.DNObject)
  ['{85219313-B00A-30C7-B331-E896A72962C8}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMediaTypeNames = class(TDNGenericImport<DNMediaTypeNamesClass, DNMediaTypeNames>) end;

  //-------------namespace: System.Net.Mime----------------
  DNMediaTypeNames_ApplicationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C4D33B5E-B22A-50C2-B077-0488F8617AAF}']
  { static fields getter & setter } 

   function __fakeFieldGet_Soap: string;
   function __fakeFieldGet_Octet: string;
   function __fakeFieldGet_Rtf: string;
   function __fakeFieldGet_Pdf: string;
   function __fakeFieldGet_Zip: string;

  { static fields } 

    {class} property Soap: string read __fakeFieldGet_Soap;
    {class} property Octet: string read __fakeFieldGet_Octet;
    {class} property Rtf: string read __fakeFieldGet_Rtf;
    {class} property Pdf: string read __fakeFieldGet_Pdf;
    {class} property Zip: string read __fakeFieldGet_Zip;

  end;

  [DNTypeName('System.Net.Mime.MediaTypeNames+Application')]
  DNMediaTypeNames_Application = interface(DDN.mscorlib.DNObject)
  ['{CD22F087-214D-31B4-9FEE-B7C212DFF948}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMediaTypeNames_Application = class(TDNGenericImport<DNMediaTypeNames_ApplicationClass, DNMediaTypeNames_Application>)
  public const
   Soap = 'application/soap+xml';
   Octet = 'application/octet-stream';
   Rtf = 'application/rtf';
   Pdf = 'application/pdf';
   Zip = 'application/zip';
  end;

  //-------------namespace: System.Net.Mime----------------
  DNMediaTypeNames_ImageClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1F687A20-20D0-5032-A605-1178BEE1F7BD}']
  { static fields getter & setter } 

   function __fakeFieldGet_Gif: string;
   function __fakeFieldGet_Tiff: string;
   function __fakeFieldGet_Jpeg: string;

  { static fields } 

    {class} property Gif: string read __fakeFieldGet_Gif;
    {class} property Tiff: string read __fakeFieldGet_Tiff;
    {class} property Jpeg: string read __fakeFieldGet_Jpeg;

  end;

  [DNTypeName('System.Net.Mime.MediaTypeNames+Image')]
  DNMediaTypeNames_Image = interface(DDN.mscorlib.DNObject)
  ['{85129AE4-F1AF-3B23-A000-27DE57A77DC0}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMediaTypeNames_Image = class(TDNGenericImport<DNMediaTypeNames_ImageClass, DNMediaTypeNames_Image>)
  public const
   Gif = 'image/gif';
   Tiff = 'image/tiff';
   Jpeg = 'image/jpeg';
  end;

  //-------------namespace: System.Net.Mime----------------
  DNMediaTypeNames_TextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D27F0072-93C7-5C3E-B728-1906EBEC545F}']
  { static fields getter & setter } 

   function __fakeFieldGet_Plain: string;
   function __fakeFieldGet_Html: string;
   function __fakeFieldGet_Xml: string;
   function __fakeFieldGet_RichText: string;

  { static fields } 

    {class} property Plain: string read __fakeFieldGet_Plain;
    {class} property Html: string read __fakeFieldGet_Html;
    {class} property Xml: string read __fakeFieldGet_Xml;
    {class} property RichText: string read __fakeFieldGet_RichText;

  end;

  [DNTypeName('System.Net.Mime.MediaTypeNames+Text')]
  DNMediaTypeNames_Text = interface(DDN.mscorlib.DNObject)
  ['{3248AE65-F4A0-3E0E-814B-BA8B0A1FC28B}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMediaTypeNames_Text = class(TDNGenericImport<DNMediaTypeNames_TextClass, DNMediaTypeNames_Text>)
  public const
   Plain = 'text/plain';
   Html = 'text/html';
   Xml = 'text/xml';
   RichText = 'text/richtext';
  end;

  //-------------namespace: System.Net----------------
  DNNetworkCredentialClass = interface(DNObjectClass)
  ['{D309109D-58F6-59FE-8F05-EE7DD87BBE6A}']
  { constructors } 

    {class} function init: DNNetworkCredential; overload;
    {class} function init(userName: string; password: string): DNNetworkCredential; overload;
    {class} function init(userName: string; password: DDN.mscorlib.DNSecureString): DNNetworkCredential; overload;
    {class} function init(userName: string; password: string; domain: string): DNNetworkCredential; overload;
    {class} function init(userName: string; password: DDN.mscorlib.DNSecureString; domain: string): DNNetworkCredential; overload;

  end;

  [DNTypeName('System.Net.NetworkCredential')]
  DNNetworkCredential = interface(DNICredentials)
  ['{860A775E-72AE-3B0A-B4B3-3B299B650D80}']
  { getters & setters } 

    function get_UserName: string;
    procedure set_UserName(value: string);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_SecurePassword: DDN.mscorlib.DNSecureString;
    procedure set_SecurePassword(value: DDN.mscorlib.DNSecureString);
    function get_Domain: string;
    procedure set_Domain(value: string);

  { methods } 

    function GetCredential(uri: DNUri; authType: string): DNNetworkCredential; overload;
    function GetCredential(host: string; port: Int32; authenticationType: string): DNNetworkCredential; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UserName: string read get_UserName write set_UserName;
    property Password: string read get_Password write set_Password;
    property SecurePassword: DDN.mscorlib.DNSecureString read get_SecurePassword write set_SecurePassword;
    property Domain: string read get_Domain write set_Domain;
  end;

  TDNNetworkCredential = class(TDNGenericImport<DNNetworkCredentialClass, DNNetworkCredential>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNGatewayIPAddressInformationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F4D3682D-8D16-5199-9790-9F17FE31586E}']
  end;

  [DNTypeName('System.Net.NetworkInformation.GatewayIPAddressInformation')]
  DNGatewayIPAddressInformation = interface(DDN.mscorlib.DNObject)
  ['{C61B7AFE-9895-3C9B-AF2B-B7CF8FE51C70}']
  { getters & setters } 

    function get_Address: DNIPAddress;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Address: DNIPAddress read get_Address;
  end;

  TDNGatewayIPAddressInformation = class(TDNGenericImport<DNGatewayIPAddressInformationClass, DNGatewayIPAddressInformation>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNGatewayIPAddressInformationCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B18421A4-08E9-5225-856C-3F58D7F82EEE}']
  end;

  [DNTypeName('System.Net.NetworkInformation.GatewayIPAddressInformationCollection')]
  DNGatewayIPAddressInformationCollection = interface(DDN.mscorlib.DNObject)
  ['{4AE003BC-1917-3728-8474-30CD76D40111}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNGatewayIPAddressInformation;

  { methods } 

    procedure CopyTo(&array: TArray<DNGatewayIPAddressInformation>; offset: Int32);
    procedure Add(address: DNGatewayIPAddressInformation);
    function &Contains(address: DNGatewayIPAddressInformation): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNGatewayIPAddressInformation>;
    function Remove(address: DNGatewayIPAddressInformation): Boolean;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNGatewayIPAddressInformation read get_Item; default;
  end;

  TDNGatewayIPAddressInformationCollection = class(TDNGenericImport<DNGatewayIPAddressInformationCollectionClass, DNGatewayIPAddressInformationCollection>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNIcmpV4StatisticsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A8D07CB7-3FFA-5964-847E-906E8218588C}']
  end;

  [DNTypeName('System.Net.NetworkInformation.IcmpV4Statistics')]
  DNIcmpV4Statistics = interface(DDN.mscorlib.DNObject)
  ['{AFCBE718-1AF5-3120-8E53-8D13E8D0EB26}']
  { getters & setters } 

    function get_AddressMaskRepliesReceived: Int64;
    function get_AddressMaskRepliesSent: Int64;
    function get_AddressMaskRequestsReceived: Int64;
    function get_AddressMaskRequestsSent: Int64;
    function get_DestinationUnreachableMessagesReceived: Int64;
    function get_DestinationUnreachableMessagesSent: Int64;
    function get_EchoRepliesReceived: Int64;
    function get_EchoRepliesSent: Int64;
    function get_EchoRequestsReceived: Int64;
    function get_EchoRequestsSent: Int64;
    function get_ErrorsReceived: Int64;
    function get_ErrorsSent: Int64;
    function get_MessagesReceived: Int64;
    function get_MessagesSent: Int64;
    function get_ParameterProblemsReceived: Int64;
    function get_ParameterProblemsSent: Int64;
    function get_RedirectsReceived: Int64;
    function get_RedirectsSent: Int64;
    function get_SourceQuenchesReceived: Int64;
    function get_SourceQuenchesSent: Int64;
    function get_TimeExceededMessagesReceived: Int64;
    function get_TimeExceededMessagesSent: Int64;
    function get_TimestampRepliesReceived: Int64;
    function get_TimestampRepliesSent: Int64;
    function get_TimestampRequestsReceived: Int64;
    function get_TimestampRequestsSent: Int64;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AddressMaskRepliesReceived: Int64 read get_AddressMaskRepliesReceived;
    property AddressMaskRepliesSent: Int64 read get_AddressMaskRepliesSent;
    property AddressMaskRequestsReceived: Int64 read get_AddressMaskRequestsReceived;
    property AddressMaskRequestsSent: Int64 read get_AddressMaskRequestsSent;
    property DestinationUnreachableMessagesReceived: Int64 read get_DestinationUnreachableMessagesReceived;
    property DestinationUnreachableMessagesSent: Int64 read get_DestinationUnreachableMessagesSent;
    property EchoRepliesReceived: Int64 read get_EchoRepliesReceived;
    property EchoRepliesSent: Int64 read get_EchoRepliesSent;
    property EchoRequestsReceived: Int64 read get_EchoRequestsReceived;
    property EchoRequestsSent: Int64 read get_EchoRequestsSent;
    property ErrorsReceived: Int64 read get_ErrorsReceived;
    property ErrorsSent: Int64 read get_ErrorsSent;
    property MessagesReceived: Int64 read get_MessagesReceived;
    property MessagesSent: Int64 read get_MessagesSent;
    property ParameterProblemsReceived: Int64 read get_ParameterProblemsReceived;
    property ParameterProblemsSent: Int64 read get_ParameterProblemsSent;
    property RedirectsReceived: Int64 read get_RedirectsReceived;
    property RedirectsSent: Int64 read get_RedirectsSent;
    property SourceQuenchesReceived: Int64 read get_SourceQuenchesReceived;
    property SourceQuenchesSent: Int64 read get_SourceQuenchesSent;
    property TimeExceededMessagesReceived: Int64 read get_TimeExceededMessagesReceived;
    property TimeExceededMessagesSent: Int64 read get_TimeExceededMessagesSent;
    property TimestampRepliesReceived: Int64 read get_TimestampRepliesReceived;
    property TimestampRepliesSent: Int64 read get_TimestampRepliesSent;
    property TimestampRequestsReceived: Int64 read get_TimestampRequestsReceived;
    property TimestampRequestsSent: Int64 read get_TimestampRequestsSent;
  end;

  TDNIcmpV4Statistics = class(TDNGenericImport<DNIcmpV4StatisticsClass, DNIcmpV4Statistics>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNIcmpV6StatisticsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FDBA97B3-81FC-5FB8-9BD0-DDB7BF0995AA}']
  end;

  [DNTypeName('System.Net.NetworkInformation.IcmpV6Statistics')]
  DNIcmpV6Statistics = interface(DDN.mscorlib.DNObject)
  ['{39EE66C3-4233-3B91-BE83-3C78138447C6}']
  { getters & setters } 

    function get_DestinationUnreachableMessagesReceived: Int64;
    function get_DestinationUnreachableMessagesSent: Int64;
    function get_EchoRepliesReceived: Int64;
    function get_EchoRepliesSent: Int64;
    function get_EchoRequestsReceived: Int64;
    function get_EchoRequestsSent: Int64;
    function get_ErrorsReceived: Int64;
    function get_ErrorsSent: Int64;
    function get_MembershipQueriesReceived: Int64;
    function get_MembershipQueriesSent: Int64;
    function get_MembershipReductionsReceived: Int64;
    function get_MembershipReductionsSent: Int64;
    function get_MembershipReportsReceived: Int64;
    function get_MembershipReportsSent: Int64;
    function get_MessagesReceived: Int64;
    function get_MessagesSent: Int64;
    function get_NeighborAdvertisementsReceived: Int64;
    function get_NeighborAdvertisementsSent: Int64;
    function get_NeighborSolicitsReceived: Int64;
    function get_NeighborSolicitsSent: Int64;
    function get_PacketTooBigMessagesReceived: Int64;
    function get_PacketTooBigMessagesSent: Int64;
    function get_ParameterProblemsReceived: Int64;
    function get_ParameterProblemsSent: Int64;
    function get_RedirectsReceived: Int64;
    function get_RedirectsSent: Int64;
    function get_RouterAdvertisementsReceived: Int64;
    function get_RouterAdvertisementsSent: Int64;
    function get_RouterSolicitsReceived: Int64;
    function get_RouterSolicitsSent: Int64;
    function get_TimeExceededMessagesReceived: Int64;
    function get_TimeExceededMessagesSent: Int64;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DestinationUnreachableMessagesReceived: Int64 read get_DestinationUnreachableMessagesReceived;
    property DestinationUnreachableMessagesSent: Int64 read get_DestinationUnreachableMessagesSent;
    property EchoRepliesReceived: Int64 read get_EchoRepliesReceived;
    property EchoRepliesSent: Int64 read get_EchoRepliesSent;
    property EchoRequestsReceived: Int64 read get_EchoRequestsReceived;
    property EchoRequestsSent: Int64 read get_EchoRequestsSent;
    property ErrorsReceived: Int64 read get_ErrorsReceived;
    property ErrorsSent: Int64 read get_ErrorsSent;
    property MembershipQueriesReceived: Int64 read get_MembershipQueriesReceived;
    property MembershipQueriesSent: Int64 read get_MembershipQueriesSent;
    property MembershipReductionsReceived: Int64 read get_MembershipReductionsReceived;
    property MembershipReductionsSent: Int64 read get_MembershipReductionsSent;
    property MembershipReportsReceived: Int64 read get_MembershipReportsReceived;
    property MembershipReportsSent: Int64 read get_MembershipReportsSent;
    property MessagesReceived: Int64 read get_MessagesReceived;
    property MessagesSent: Int64 read get_MessagesSent;
    property NeighborAdvertisementsReceived: Int64 read get_NeighborAdvertisementsReceived;
    property NeighborAdvertisementsSent: Int64 read get_NeighborAdvertisementsSent;
    property NeighborSolicitsReceived: Int64 read get_NeighborSolicitsReceived;
    property NeighborSolicitsSent: Int64 read get_NeighborSolicitsSent;
    property PacketTooBigMessagesReceived: Int64 read get_PacketTooBigMessagesReceived;
    property PacketTooBigMessagesSent: Int64 read get_PacketTooBigMessagesSent;
    property ParameterProblemsReceived: Int64 read get_ParameterProblemsReceived;
    property ParameterProblemsSent: Int64 read get_ParameterProblemsSent;
    property RedirectsReceived: Int64 read get_RedirectsReceived;
    property RedirectsSent: Int64 read get_RedirectsSent;
    property RouterAdvertisementsReceived: Int64 read get_RouterAdvertisementsReceived;
    property RouterAdvertisementsSent: Int64 read get_RouterAdvertisementsSent;
    property RouterSolicitsReceived: Int64 read get_RouterSolicitsReceived;
    property RouterSolicitsSent: Int64 read get_RouterSolicitsSent;
    property TimeExceededMessagesReceived: Int64 read get_TimeExceededMessagesReceived;
    property TimeExceededMessagesSent: Int64 read get_TimeExceededMessagesSent;
  end;

  TDNIcmpV6Statistics = class(TDNGenericImport<DNIcmpV6StatisticsClass, DNIcmpV6Statistics>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNIPAddressCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3AEC7DF3-FCB6-5D1C-A350-917C97223818}']
  end;

  [DNTypeName('System.Net.NetworkInformation.IPAddressCollection')]
  DNIPAddressCollection = interface(DDN.mscorlib.DNObject)
  ['{F60B6931-FD4A-370E-8821-8F68C70259C0}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNIPAddress;

  { methods } 

    procedure CopyTo(&array: TArray<DNIPAddress>; offset: Int32);
    procedure Add(address: DNIPAddress);
    function &Contains(address: DNIPAddress): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIPAddress>;
    function Remove(address: DNIPAddress): Boolean;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNIPAddress read get_Item; default;
  end;

  TDNIPAddressCollection = class(TDNGenericImport<DNIPAddressCollectionClass, DNIPAddressCollection>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNIPAddressInformationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{73E3D6E0-5B27-5559-8DD8-6DE6B28BB783}']
  end;

  [DNTypeName('System.Net.NetworkInformation.IPAddressInformation')]
  DNIPAddressInformation = interface(DDN.mscorlib.DNObject)
  ['{58E1B54F-A69E-3DD1-A325-6B1302BDD6AB}']
  { getters & setters } 

    function get_Address: DNIPAddress;
    function get_IsDnsEligible: Boolean;
    function get_IsTransient: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Address: DNIPAddress read get_Address;
    property IsDnsEligible: Boolean read get_IsDnsEligible;
    property IsTransient: Boolean read get_IsTransient;
  end;

  TDNIPAddressInformation = class(TDNGenericImport<DNIPAddressInformationClass, DNIPAddressInformation>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNMulticastIPAddressInformationClass = interface(DNIPAddressInformationClass)
  ['{F2E0B94E-4F2A-54B3-91CA-FD1BE01856D9}']
  end;

  [DNTypeName('System.Net.NetworkInformation.MulticastIPAddressInformation')]
  DNMulticastIPAddressInformation = interface(DNIPAddressInformation)
  ['{B3A43AF8-C411-3D81-909B-7DE9E506F183}']
  { getters & setters } 

    function get_AddressPreferredLifetime: Int64;
    function get_AddressValidLifetime: Int64;
    function get_DhcpLeaseLifetime: Int64;
    function get_DuplicateAddressDetectionState: DNDuplicateAddressDetectionState;
    function get_PrefixOrigin: DNPrefixOrigin;
    function get_SuffixOrigin: DNSuffixOrigin;
    function get_Address: DNIPAddress;
    function get_IsDnsEligible: Boolean;
    function get_IsTransient: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AddressPreferredLifetime: Int64 read get_AddressPreferredLifetime;
    property AddressValidLifetime: Int64 read get_AddressValidLifetime;
    property DhcpLeaseLifetime: Int64 read get_DhcpLeaseLifetime;
    property DuplicateAddressDetectionState: DNDuplicateAddressDetectionState read get_DuplicateAddressDetectionState;
    property PrefixOrigin: DNPrefixOrigin read get_PrefixOrigin;
    property SuffixOrigin: DNSuffixOrigin read get_SuffixOrigin;
    property Address: DNIPAddress read get_Address;
    property IsDnsEligible: Boolean read get_IsDnsEligible;
    property IsTransient: Boolean read get_IsTransient;
  end;

  TDNMulticastIPAddressInformation = class(TDNGenericImport<DNMulticastIPAddressInformationClass, DNMulticastIPAddressInformation>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNUnicastIPAddressInformationClass = interface(DNIPAddressInformationClass)
  ['{6DCA3CD8-2381-5CA0-BA88-1DBC9C25FC49}']
  end;

  [DNTypeName('System.Net.NetworkInformation.UnicastIPAddressInformation')]
  DNUnicastIPAddressInformation = interface(DNIPAddressInformation)
  ['{D4DA0222-509A-3EA3-A23F-79CF37AE3D6D}']
  { getters & setters } 

    function get_AddressPreferredLifetime: Int64;
    function get_AddressValidLifetime: Int64;
    function get_DhcpLeaseLifetime: Int64;
    function get_DuplicateAddressDetectionState: DNDuplicateAddressDetectionState;
    function get_PrefixOrigin: DNPrefixOrigin;
    function get_SuffixOrigin: DNSuffixOrigin;
    function get_IPv4Mask: DNIPAddress;
    function get_PrefixLength: Int32;
    function get_Address: DNIPAddress;
    function get_IsDnsEligible: Boolean;
    function get_IsTransient: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AddressPreferredLifetime: Int64 read get_AddressPreferredLifetime;
    property AddressValidLifetime: Int64 read get_AddressValidLifetime;
    property DhcpLeaseLifetime: Int64 read get_DhcpLeaseLifetime;
    property DuplicateAddressDetectionState: DNDuplicateAddressDetectionState read get_DuplicateAddressDetectionState;
    property PrefixOrigin: DNPrefixOrigin read get_PrefixOrigin;
    property SuffixOrigin: DNSuffixOrigin read get_SuffixOrigin;
    property IPv4Mask: DNIPAddress read get_IPv4Mask;
    property PrefixLength: Int32 read get_PrefixLength;
    property Address: DNIPAddress read get_Address;
    property IsDnsEligible: Boolean read get_IsDnsEligible;
    property IsTransient: Boolean read get_IsTransient;
  end;

  TDNUnicastIPAddressInformation = class(TDNGenericImport<DNUnicastIPAddressInformationClass, DNUnicastIPAddressInformation>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNIPAddressInformationCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6CCBA2B1-5A21-5F43-9241-100EDB895752}']
  end;

  [DNTypeName('System.Net.NetworkInformation.IPAddressInformationCollection')]
  DNIPAddressInformationCollection = interface(DDN.mscorlib.DNObject)
  ['{76A749E7-615A-30E5-8DCF-CED0D5A9D757}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNIPAddressInformation;

  { methods } 

    procedure CopyTo(&array: TArray<DNIPAddressInformation>; offset: Int32);
    procedure Add(address: DNIPAddressInformation);
    function &Contains(address: DNIPAddressInformation): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIPAddressInformation>;
    function Remove(address: DNIPAddressInformation): Boolean;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNIPAddressInformation read get_Item; default;
  end;

  TDNIPAddressInformationCollection = class(TDNGenericImport<DNIPAddressInformationCollectionClass, DNIPAddressInformationCollection>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNIPGlobalPropertiesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{92C815A2-D719-5720-8C2F-2C8B6382794B}']
  { static methods } 

    {class} function GetIPGlobalProperties: DNIPGlobalProperties;

  end;

  [DNTypeName('System.Net.NetworkInformation.IPGlobalProperties')]
  DNIPGlobalProperties = interface(DDN.mscorlib.DNObject)
  ['{C1EEFDF1-1B35-3300-9836-9348EF3C7620}']
  { getters & setters } 

    function get_DhcpScopeName: string;
    function get_DomainName: string;
    function get_HostName: string;
    function get_IsWinsProxy: Boolean;
    function get_NodeType: DNNetBiosNodeType;

  { methods } 

    function GetUnicastAddresses: DNUnicastIPAddressInformationCollection;
    function BeginGetUnicastAddresses(callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndGetUnicastAddresses(asyncResult: DDN.mscorlib.DNIAsyncResult): DNUnicastIPAddressInformationCollection;
    function GetActiveUdpListeners: TArray<DNIPEndPoint>;
    function GetActiveTcpListeners: TArray<DNIPEndPoint>;
    function GetActiveTcpConnections: TArray<DNTcpConnectionInformation>;
    function GetTcpIPv4Statistics: DNTcpStatistics;
    function GetTcpIPv6Statistics: DNTcpStatistics;
    function GetUdpIPv4Statistics: DNUdpStatistics;
    function GetUdpIPv6Statistics: DNUdpStatistics;
    function GetIcmpV4Statistics: DNIcmpV4Statistics;
    function GetIcmpV6Statistics: DNIcmpV6Statistics;
    function GetIPv4GlobalStatistics: DNIPGlobalStatistics;
    function GetIPv6GlobalStatistics: DNIPGlobalStatistics;
    function GetUnicastAddressesAsync: DDN.mscorlib.DNTask<DNUnicastIPAddressInformationCollection>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DhcpScopeName: string read get_DhcpScopeName;
    property DomainName: string read get_DomainName;
    property HostName: string read get_HostName;
    property IsWinsProxy: Boolean read get_IsWinsProxy;
    property NodeType: DNNetBiosNodeType read get_NodeType;
  end;

  TDNIPGlobalProperties = class(TDNGenericImport<DNIPGlobalPropertiesClass, DNIPGlobalProperties>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNIPGlobalStatisticsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{536A4F8B-5A75-5C59-BF1A-F15F26373CD6}']
  end;

  [DNTypeName('System.Net.NetworkInformation.IPGlobalStatistics')]
  DNIPGlobalStatistics = interface(DDN.mscorlib.DNObject)
  ['{CC5A194D-ADF8-3E40-B2BB-50D1838A2392}']
  { getters & setters } 

    function get_DefaultTtl: Int32;
    function get_ForwardingEnabled: Boolean;
    function get_NumberOfInterfaces: Int32;
    function get_NumberOfIPAddresses: Int32;
    function get_OutputPacketRequests: Int64;
    function get_OutputPacketRoutingDiscards: Int64;
    function get_OutputPacketsDiscarded: Int64;
    function get_OutputPacketsWithNoRoute: Int64;
    function get_PacketFragmentFailures: Int64;
    function get_PacketReassembliesRequired: Int64;
    function get_PacketReassemblyFailures: Int64;
    function get_PacketReassemblyTimeout: Int64;
    function get_PacketsFragmented: Int64;
    function get_PacketsReassembled: Int64;
    function get_ReceivedPackets: Int64;
    function get_ReceivedPacketsDelivered: Int64;
    function get_ReceivedPacketsDiscarded: Int64;
    function get_ReceivedPacketsForwarded: Int64;
    function get_ReceivedPacketsWithAddressErrors: Int64;
    function get_ReceivedPacketsWithHeadersErrors: Int64;
    function get_ReceivedPacketsWithUnknownProtocol: Int64;
    function get_NumberOfRoutes: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DefaultTtl: Int32 read get_DefaultTtl;
    property ForwardingEnabled: Boolean read get_ForwardingEnabled;
    property NumberOfInterfaces: Int32 read get_NumberOfInterfaces;
    property NumberOfIPAddresses: Int32 read get_NumberOfIPAddresses;
    property OutputPacketRequests: Int64 read get_OutputPacketRequests;
    property OutputPacketRoutingDiscards: Int64 read get_OutputPacketRoutingDiscards;
    property OutputPacketsDiscarded: Int64 read get_OutputPacketsDiscarded;
    property OutputPacketsWithNoRoute: Int64 read get_OutputPacketsWithNoRoute;
    property PacketFragmentFailures: Int64 read get_PacketFragmentFailures;
    property PacketReassembliesRequired: Int64 read get_PacketReassembliesRequired;
    property PacketReassemblyFailures: Int64 read get_PacketReassemblyFailures;
    property PacketReassemblyTimeout: Int64 read get_PacketReassemblyTimeout;
    property PacketsFragmented: Int64 read get_PacketsFragmented;
    property PacketsReassembled: Int64 read get_PacketsReassembled;
    property ReceivedPackets: Int64 read get_ReceivedPackets;
    property ReceivedPacketsDelivered: Int64 read get_ReceivedPacketsDelivered;
    property ReceivedPacketsDiscarded: Int64 read get_ReceivedPacketsDiscarded;
    property ReceivedPacketsForwarded: Int64 read get_ReceivedPacketsForwarded;
    property ReceivedPacketsWithAddressErrors: Int64 read get_ReceivedPacketsWithAddressErrors;
    property ReceivedPacketsWithHeadersErrors: Int64 read get_ReceivedPacketsWithHeadersErrors;
    property ReceivedPacketsWithUnknownProtocol: Int64 read get_ReceivedPacketsWithUnknownProtocol;
    property NumberOfRoutes: Int32 read get_NumberOfRoutes;
  end;

  TDNIPGlobalStatistics = class(TDNGenericImport<DNIPGlobalStatisticsClass, DNIPGlobalStatistics>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNIPInterfacePropertiesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{06029FF2-3FF3-5B24-9F72-8FEF4A67AEC2}']
  end;

  [DNTypeName('System.Net.NetworkInformation.IPInterfaceProperties')]
  DNIPInterfaceProperties = interface(DDN.mscorlib.DNObject)
  ['{D82AE024-22FF-3753-8435-F14DF62300A4}']
  { getters & setters } 

    function get_IsDnsEnabled: Boolean;
    function get_DnsSuffix: string;
    function get_IsDynamicDnsEnabled: Boolean;
    function get_UnicastAddresses: DNUnicastIPAddressInformationCollection;
    function get_MulticastAddresses: DNMulticastIPAddressInformationCollection;
    function get_AnycastAddresses: DNIPAddressInformationCollection;
    function get_DnsAddresses: DNIPAddressCollection;
    function get_GatewayAddresses: DNGatewayIPAddressInformationCollection;
    function get_DhcpServerAddresses: DNIPAddressCollection;
    function get_WinsServersAddresses: DNIPAddressCollection;

  { methods } 

    function GetIPv4Properties: DNIPv4InterfaceProperties;
    function GetIPv6Properties: DNIPv6InterfaceProperties;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsDnsEnabled: Boolean read get_IsDnsEnabled;
    property DnsSuffix: string read get_DnsSuffix;
    property IsDynamicDnsEnabled: Boolean read get_IsDynamicDnsEnabled;
    property UnicastAddresses: DNUnicastIPAddressInformationCollection read get_UnicastAddresses;
    property MulticastAddresses: DNMulticastIPAddressInformationCollection read get_MulticastAddresses;
    property AnycastAddresses: DNIPAddressInformationCollection read get_AnycastAddresses;
    property DnsAddresses: DNIPAddressCollection read get_DnsAddresses;
    property GatewayAddresses: DNGatewayIPAddressInformationCollection read get_GatewayAddresses;
    property DhcpServerAddresses: DNIPAddressCollection read get_DhcpServerAddresses;
    property WinsServersAddresses: DNIPAddressCollection read get_WinsServersAddresses;
  end;

  TDNIPInterfaceProperties = class(TDNGenericImport<DNIPInterfacePropertiesClass, DNIPInterfaceProperties>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNIPInterfaceStatisticsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3C32BE33-9EA4-5B16-BE10-42AF4478F06C}']
  end;

  [DNTypeName('System.Net.NetworkInformation.IPInterfaceStatistics')]
  DNIPInterfaceStatistics = interface(DDN.mscorlib.DNObject)
  ['{0A97CE3E-ABA4-3C5F-B1F3-2FA040860B8E}']
  { getters & setters } 

    function get_BytesReceived: Int64;
    function get_BytesSent: Int64;
    function get_IncomingPacketsDiscarded: Int64;
    function get_IncomingPacketsWithErrors: Int64;
    function get_IncomingUnknownProtocolPackets: Int64;
    function get_NonUnicastPacketsReceived: Int64;
    function get_NonUnicastPacketsSent: Int64;
    function get_OutgoingPacketsDiscarded: Int64;
    function get_OutgoingPacketsWithErrors: Int64;
    function get_OutputQueueLength: Int64;
    function get_UnicastPacketsReceived: Int64;
    function get_UnicastPacketsSent: Int64;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BytesReceived: Int64 read get_BytesReceived;
    property BytesSent: Int64 read get_BytesSent;
    property IncomingPacketsDiscarded: Int64 read get_IncomingPacketsDiscarded;
    property IncomingPacketsWithErrors: Int64 read get_IncomingPacketsWithErrors;
    property IncomingUnknownProtocolPackets: Int64 read get_IncomingUnknownProtocolPackets;
    property NonUnicastPacketsReceived: Int64 read get_NonUnicastPacketsReceived;
    property NonUnicastPacketsSent: Int64 read get_NonUnicastPacketsSent;
    property OutgoingPacketsDiscarded: Int64 read get_OutgoingPacketsDiscarded;
    property OutgoingPacketsWithErrors: Int64 read get_OutgoingPacketsWithErrors;
    property OutputQueueLength: Int64 read get_OutputQueueLength;
    property UnicastPacketsReceived: Int64 read get_UnicastPacketsReceived;
    property UnicastPacketsSent: Int64 read get_UnicastPacketsSent;
  end;

  TDNIPInterfaceStatistics = class(TDNGenericImport<DNIPInterfaceStatisticsClass, DNIPInterfaceStatistics>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNIPv4InterfacePropertiesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F0C84A2B-AA6A-5A7D-8141-089F73ED2CBE}']
  end;

  [DNTypeName('System.Net.NetworkInformation.IPv4InterfaceProperties')]
  DNIPv4InterfaceProperties = interface(DDN.mscorlib.DNObject)
  ['{8BBF3C7A-F255-3D1B-8F56-4121A2560417}']
  { getters & setters } 

    function get_UsesWins: Boolean;
    function get_IsDhcpEnabled: Boolean;
    function get_IsAutomaticPrivateAddressingActive: Boolean;
    function get_IsAutomaticPrivateAddressingEnabled: Boolean;
    function get_Index: Int32;
    function get_IsForwardingEnabled: Boolean;
    function get_Mtu: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UsesWins: Boolean read get_UsesWins;
    property IsDhcpEnabled: Boolean read get_IsDhcpEnabled;
    property IsAutomaticPrivateAddressingActive: Boolean read get_IsAutomaticPrivateAddressingActive;
    property IsAutomaticPrivateAddressingEnabled: Boolean read get_IsAutomaticPrivateAddressingEnabled;
    property Index: Int32 read get_Index;
    property IsForwardingEnabled: Boolean read get_IsForwardingEnabled;
    property Mtu: Int32 read get_Mtu;
  end;

  TDNIPv4InterfaceProperties = class(TDNGenericImport<DNIPv4InterfacePropertiesClass, DNIPv4InterfaceProperties>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNIPv4InterfaceStatisticsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{48350400-E829-5091-BD4F-474A1710AA8E}']
  end;

  [DNTypeName('System.Net.NetworkInformation.IPv4InterfaceStatistics')]
  DNIPv4InterfaceStatistics = interface(DDN.mscorlib.DNObject)
  ['{901A7A05-0E2C-3BDC-9901-CC17056F8765}']
  { getters & setters } 

    function get_BytesReceived: Int64;
    function get_BytesSent: Int64;
    function get_IncomingPacketsDiscarded: Int64;
    function get_IncomingPacketsWithErrors: Int64;
    function get_IncomingUnknownProtocolPackets: Int64;
    function get_NonUnicastPacketsReceived: Int64;
    function get_NonUnicastPacketsSent: Int64;
    function get_OutgoingPacketsDiscarded: Int64;
    function get_OutgoingPacketsWithErrors: Int64;
    function get_OutputQueueLength: Int64;
    function get_UnicastPacketsReceived: Int64;
    function get_UnicastPacketsSent: Int64;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BytesReceived: Int64 read get_BytesReceived;
    property BytesSent: Int64 read get_BytesSent;
    property IncomingPacketsDiscarded: Int64 read get_IncomingPacketsDiscarded;
    property IncomingPacketsWithErrors: Int64 read get_IncomingPacketsWithErrors;
    property IncomingUnknownProtocolPackets: Int64 read get_IncomingUnknownProtocolPackets;
    property NonUnicastPacketsReceived: Int64 read get_NonUnicastPacketsReceived;
    property NonUnicastPacketsSent: Int64 read get_NonUnicastPacketsSent;
    property OutgoingPacketsDiscarded: Int64 read get_OutgoingPacketsDiscarded;
    property OutgoingPacketsWithErrors: Int64 read get_OutgoingPacketsWithErrors;
    property OutputQueueLength: Int64 read get_OutputQueueLength;
    property UnicastPacketsReceived: Int64 read get_UnicastPacketsReceived;
    property UnicastPacketsSent: Int64 read get_UnicastPacketsSent;
  end;

  TDNIPv4InterfaceStatistics = class(TDNGenericImport<DNIPv4InterfaceStatisticsClass, DNIPv4InterfaceStatistics>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNIPv6InterfacePropertiesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FD3689F5-1CEC-507D-8E0D-0D608D4CDDE2}']
  end;

  [DNTypeName('System.Net.NetworkInformation.IPv6InterfaceProperties')]
  DNIPv6InterfaceProperties = interface(DDN.mscorlib.DNObject)
  ['{700C04CF-5F5A-36E5-9FB6-2DD41E2B1EE4}']
  { getters & setters } 

    function get_Index: Int32;
    function get_Mtu: Int32;

  { methods } 

    function GetScopeId(scopeLevel: DNScopeLevel): Int64;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Index: Int32 read get_Index;
    property Mtu: Int32 read get_Mtu;
  end;

  TDNIPv6InterfaceProperties = class(TDNGenericImport<DNIPv6InterfacePropertiesClass, DNIPv6InterfaceProperties>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNMulticastIPAddressInformationCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B9782F0B-AF7F-597A-8625-A3CA11B7A8C7}']
  end;

  [DNTypeName('System.Net.NetworkInformation.MulticastIPAddressInformationCollection')]
  DNMulticastIPAddressInformationCollection = interface(DDN.mscorlib.DNObject)
  ['{121394AA-6DD3-3B0F-B246-34223179C271}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNMulticastIPAddressInformation;

  { methods } 

    procedure CopyTo(&array: TArray<DNMulticastIPAddressInformation>; offset: Int32);
    procedure Add(address: DNMulticastIPAddressInformation);
    function &Contains(address: DNMulticastIPAddressInformation): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNMulticastIPAddressInformation>;
    function Remove(address: DNMulticastIPAddressInformation): Boolean;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNMulticastIPAddressInformation read get_Item; default;
  end;

  TDNMulticastIPAddressInformationCollection = class(TDNGenericImport<DNMulticastIPAddressInformationCollectionClass, DNMulticastIPAddressInformationCollection>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNNetworkChangeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A211C19B-71F8-569A-B8DA-E779B6DF5404}']
  { constructors } 

    {class} function init: DNNetworkChange;

  { static methods } 

    {class} procedure RegisterNetworkChange(nc: DNNetworkChange);

  end;

  [DNTypeName('System.Net.NetworkInformation.NetworkChange')]
  DNNetworkChange = interface(DDN.mscorlib.DNObject)
  ['{09E78BF1-434A-3C25-8595-CDBDC9F6B18B}']
  { events } 

    {class} procedure add_NetworkAvailabilityChanged(value: DNNetworkAvailabilityChangedEventHandler);
    {class} procedure remove_NetworkAvailabilityChanged(value: DNNetworkAvailabilityChangedEventHandler);
    {class} procedure add_NetworkAddressChanged(value: DNNetworkAddressChangedEventHandler);
    {class} procedure remove_NetworkAddressChanged(value: DNNetworkAddressChangedEventHandler);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNNetworkChange = class(TDNGenericImport<DNNetworkChangeClass, DNNetworkChange>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNNetworkInterfaceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EC48D1B7-A635-5D7F-8E2C-60513A83099F}']
  { static getter & setter } 

    {class} function get_LoopbackInterfaceIndex: Int32;
    {class} function get_IPv6LoopbackInterfaceIndex: Int32;

  { static methods } 

    {class} function GetAllNetworkInterfaces: TArray<DNNetworkInterface>;
    {class} function GetIsNetworkAvailable: Boolean;

  { static propertys } 

    {class} property LoopbackInterfaceIndex: Int32 read get_LoopbackInterfaceIndex;
    {class} property IPv6LoopbackInterfaceIndex: Int32 read get_IPv6LoopbackInterfaceIndex;
  end;

  [DNTypeName('System.Net.NetworkInformation.NetworkInterface')]
  DNNetworkInterface = interface(DDN.mscorlib.DNObject)
  ['{334320EF-03D3-3CB0-B21D-9DF953E677F9}']
  { getters & setters } 

    function get_Id: string;
    function get_Name: string;
    function get_Description: string;
    function get_OperationalStatus: DNOperationalStatus;
    function get_Speed: Int64;
    function get_IsReceiveOnly: Boolean;
    function get_SupportsMulticast: Boolean;
    function get_NetworkInterfaceType: DNNetworkInterfaceType;

  { methods } 

    function GetIPProperties: DNIPInterfaceProperties;
    function GetIPv4Statistics: DNIPv4InterfaceStatistics;
    function GetIPStatistics: DNIPInterfaceStatistics;
    function GetPhysicalAddress: DNPhysicalAddress;
    function Supports(networkInterfaceComponent: DNNetworkInterfaceComponent): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Id: string read get_Id;
    property Name: string read get_Name;
    property Description: string read get_Description;
    property OperationalStatus: DNOperationalStatus read get_OperationalStatus;
    property Speed: Int64 read get_Speed;
    property IsReceiveOnly: Boolean read get_IsReceiveOnly;
    property SupportsMulticast: Boolean read get_SupportsMulticast;
    property NetworkInterfaceType: DNNetworkInterfaceType read get_NetworkInterfaceType;
  end;

  TDNNetworkInterface = class(TDNGenericImport<DNNetworkInterfaceClass, DNNetworkInterface>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNPhysicalAddressClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CBC7CE88-80FE-593C-ACD3-F3180D171D0F}']
  { constructors } 

    {class} function init(address: TArray<Byte>): DNPhysicalAddress;

  { static fields getter & setter } 

   function __fakeFieldGet_None: DNPhysicalAddress;

  { static fields } 

    {class} property None: DNPhysicalAddress read __fakeFieldGet_None;

  { static methods } 

    {class} function Parse(address: string): DNPhysicalAddress;

  end;

  [DNTypeName('System.Net.NetworkInformation.PhysicalAddress')]
  DNPhysicalAddress = interface(DDN.mscorlib.DNObject)
  ['{9FD869D8-689A-3735-8FFB-03AE0C49EEA1}']
  { methods } 

    function GetHashCode: Int32;
    function Equals(comparand: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetAddressBytes: TArray<Byte>;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNPhysicalAddress = class(TDNGenericImport<DNPhysicalAddressClass, DNPhysicalAddress>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNPingOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1E60AC5B-437C-5DA6-AFED-226872CB467E}']
  { constructors } 

    {class} function init(ttl: Int32; dontFragment: Boolean): DNPingOptions; overload;
    {class} function init: DNPingOptions; overload;

  end;

  [DNTypeName('System.Net.NetworkInformation.PingOptions')]
  DNPingOptions = interface(DDN.mscorlib.DNObject)
  ['{CE9799C8-F8D8-3C14-89B7-39F577AC2633}']
  { getters & setters } 

    function get_Ttl: Int32;
    procedure set_Ttl(value: Int32);
    function get_DontFragment: Boolean;
    procedure set_DontFragment(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Ttl: Int32 read get_Ttl write set_Ttl;
    property DontFragment: Boolean read get_DontFragment write set_DontFragment;
  end;

  TDNPingOptions = class(TDNGenericImport<DNPingOptionsClass, DNPingOptions>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNPingReplyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{671738AB-97A1-5BFF-AC73-66A3A95A8B8B}']
  end;

  [DNTypeName('System.Net.NetworkInformation.PingReply')]
  DNPingReply = interface(DDN.mscorlib.DNObject)
  ['{4CA0A73B-670C-3FA6-AC7C-D7D5EDFB8237}']
  { getters & setters } 

    function get_Status: DNIPStatus;
    function get_Address: DNIPAddress;
    function get_RoundtripTime: Int64;
    function get_Options: DNPingOptions;
    function get_Buffer: TArray<Byte>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Status: DNIPStatus read get_Status;
    property Address: DNIPAddress read get_Address;
    property RoundtripTime: Int64 read get_RoundtripTime;
    property Options: DNPingOptions read get_Options;
    property Buffer: TArray<Byte> read get_Buffer;
  end;

  TDNPingReply = class(TDNGenericImport<DNPingReplyClass, DNPingReply>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNTcpConnectionInformationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E4A00477-46CF-55F1-90F7-1F75AA9A9747}']
  end;

  [DNTypeName('System.Net.NetworkInformation.TcpConnectionInformation')]
  DNTcpConnectionInformation = interface(DDN.mscorlib.DNObject)
  ['{E182D25B-A6A8-3C07-ACAC-3D4614A453C4}']
  { getters & setters } 

    function get_LocalEndPoint: DNIPEndPoint;
    function get_RemoteEndPoint: DNIPEndPoint;
    function get_State: DNTcpState;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LocalEndPoint: DNIPEndPoint read get_LocalEndPoint;
    property RemoteEndPoint: DNIPEndPoint read get_RemoteEndPoint;
    property State: DNTcpState read get_State;
  end;

  TDNTcpConnectionInformation = class(TDNGenericImport<DNTcpConnectionInformationClass, DNTcpConnectionInformation>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNTcpStatisticsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DA8A49D6-B4D2-5EDB-9096-C5115809C417}']
  end;

  [DNTypeName('System.Net.NetworkInformation.TcpStatistics')]
  DNTcpStatistics = interface(DDN.mscorlib.DNObject)
  ['{2739F91E-D56E-3645-B0CF-A50CCB03F08E}']
  { getters & setters } 

    function get_ConnectionsAccepted: Int64;
    function get_ConnectionsInitiated: Int64;
    function get_CumulativeConnections: Int64;
    function get_CurrentConnections: Int64;
    function get_ErrorsReceived: Int64;
    function get_FailedConnectionAttempts: Int64;
    function get_MaximumConnections: Int64;
    function get_MaximumTransmissionTimeout: Int64;
    function get_MinimumTransmissionTimeout: Int64;
    function get_ResetConnections: Int64;
    function get_SegmentsReceived: Int64;
    function get_SegmentsResent: Int64;
    function get_SegmentsSent: Int64;
    function get_ResetsSent: Int64;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ConnectionsAccepted: Int64 read get_ConnectionsAccepted;
    property ConnectionsInitiated: Int64 read get_ConnectionsInitiated;
    property CumulativeConnections: Int64 read get_CumulativeConnections;
    property CurrentConnections: Int64 read get_CurrentConnections;
    property ErrorsReceived: Int64 read get_ErrorsReceived;
    property FailedConnectionAttempts: Int64 read get_FailedConnectionAttempts;
    property MaximumConnections: Int64 read get_MaximumConnections;
    property MaximumTransmissionTimeout: Int64 read get_MaximumTransmissionTimeout;
    property MinimumTransmissionTimeout: Int64 read get_MinimumTransmissionTimeout;
    property ResetConnections: Int64 read get_ResetConnections;
    property SegmentsReceived: Int64 read get_SegmentsReceived;
    property SegmentsResent: Int64 read get_SegmentsResent;
    property SegmentsSent: Int64 read get_SegmentsSent;
    property ResetsSent: Int64 read get_ResetsSent;
  end;

  TDNTcpStatistics = class(TDNGenericImport<DNTcpStatisticsClass, DNTcpStatistics>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNUdpStatisticsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7E0B8E0D-01C8-5CFE-B74C-B67500F39196}']
  end;

  [DNTypeName('System.Net.NetworkInformation.UdpStatistics')]
  DNUdpStatistics = interface(DDN.mscorlib.DNObject)
  ['{27C749E1-B244-350B-A914-60F6E059FA59}']
  { getters & setters } 

    function get_DatagramsReceived: Int64;
    function get_DatagramsSent: Int64;
    function get_IncomingDatagramsDiscarded: Int64;
    function get_IncomingDatagramsWithErrors: Int64;
    function get_UdpListeners: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DatagramsReceived: Int64 read get_DatagramsReceived;
    property DatagramsSent: Int64 read get_DatagramsSent;
    property IncomingDatagramsDiscarded: Int64 read get_IncomingDatagramsDiscarded;
    property IncomingDatagramsWithErrors: Int64 read get_IncomingDatagramsWithErrors;
    property UdpListeners: Int32 read get_UdpListeners;
  end;

  TDNUdpStatistics = class(TDNGenericImport<DNUdpStatisticsClass, DNUdpStatistics>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNUnicastIPAddressInformationCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{914AC2B4-1F9E-5E1B-8C8E-7569D50CE227}']
  end;

  [DNTypeName('System.Net.NetworkInformation.UnicastIPAddressInformationCollection')]
  DNUnicastIPAddressInformationCollection = interface(DDN.mscorlib.DNObject)
  ['{661FFBC0-CD9D-32A8-A590-3D6DA0034FBA}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNUnicastIPAddressInformation;

  { methods } 

    procedure CopyTo(&array: TArray<DNUnicastIPAddressInformation>; offset: Int32);
    procedure Add(address: DNUnicastIPAddressInformation);
    function &Contains(address: DNUnicastIPAddressInformation): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNUnicastIPAddressInformation>;
    function Remove(address: DNUnicastIPAddressInformation): Boolean;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNUnicastIPAddressInformation read get_Item; default;
  end;

  TDNUnicastIPAddressInformationCollection = class(TDNGenericImport<DNUnicastIPAddressInformationCollectionClass, DNUnicastIPAddressInformationCollection>) end;

  //-------------namespace: System.Net----------------
  DNServicePointClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D6019723-CF9B-5A89-8DC4-B48E117B46B0}']
  end;

  [DNTypeName('System.Net.ServicePoint')]
  DNServicePoint = interface(DDN.mscorlib.DNObject)
  ['{9D66BFBD-8384-3EED-9B04-C306D3EA175A}']
  { getters & setters } 

    function get_BindIPEndPointDelegate: DNBindIPEndPoint;
    procedure set_BindIPEndPointDelegate(value: DNBindIPEndPoint);
    function get_ConnectionLeaseTimeout: Int32;
    procedure set_ConnectionLeaseTimeout(value: Int32);
    function get_Address: DNUri;
    function get_MaxIdleTime: Int32;
    procedure set_MaxIdleTime(value: Int32);
    function get_UseNagleAlgorithm: Boolean;
    procedure set_UseNagleAlgorithm(value: Boolean);
    function get_ReceiveBufferSize: Int32;
    procedure set_ReceiveBufferSize(value: Int32);
    function get_Expect100Continue: Boolean;
    procedure set_Expect100Continue(value: Boolean);
    function get_IdleSince: DDN.mscorlib.DNDateTime;
    function get_ProtocolVersion: DDN.mscorlib.DNVersion;
    function get_ConnectionName: string;
    function get_ConnectionLimit: Int32;
    procedure set_ConnectionLimit(value: Int32);
    function get_CurrentConnections: Int32;
    function get_Certificate: DDN.mscorlib.DNX509Certificate;
    function get_ClientCertificate: DDN.mscorlib.DNX509Certificate;
    function get_SupportsPipelining: Boolean;

  { methods } 

    procedure SetTcpKeepAlive(enabled: Boolean; keepAliveTime: Int32; keepAliveInterval: Int32);
    function CloseConnectionGroup(connectionGroupName: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BindIPEndPointDelegate: DNBindIPEndPoint read get_BindIPEndPointDelegate write set_BindIPEndPointDelegate;
    property ConnectionLeaseTimeout: Int32 read get_ConnectionLeaseTimeout write set_ConnectionLeaseTimeout;
    property Address: DNUri read get_Address;
    property MaxIdleTime: Int32 read get_MaxIdleTime write set_MaxIdleTime;
    property UseNagleAlgorithm: Boolean read get_UseNagleAlgorithm write set_UseNagleAlgorithm;
    property ReceiveBufferSize: Int32 read get_ReceiveBufferSize write set_ReceiveBufferSize;
    property Expect100Continue: Boolean read get_Expect100Continue write set_Expect100Continue;
    property IdleSince: DDN.mscorlib.DNDateTime read get_IdleSince;
    property ProtocolVersion: DDN.mscorlib.DNVersion read get_ProtocolVersion;
    property ConnectionName: string read get_ConnectionName;
    property ConnectionLimit: Int32 read get_ConnectionLimit write set_ConnectionLimit;
    property CurrentConnections: Int32 read get_CurrentConnections;
    property Certificate: DDN.mscorlib.DNX509Certificate read get_Certificate;
    property ClientCertificate: DDN.mscorlib.DNX509Certificate read get_ClientCertificate;
    property SupportsPipelining: Boolean read get_SupportsPipelining;
  end;

  TDNServicePoint = class(TDNGenericImport<DNServicePointClass, DNServicePoint>) end;

  //-------------namespace: System.Net----------------
  DNServicePointManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DCAA5694-EA22-502B-929D-5CDF1E8E526A}']
  { static getter & setter } 

    {class} function get_SecurityProtocol: DNSecurityProtocolType;
    {class} procedure set_SecurityProtocol(value: DNSecurityProtocolType);
    {class} function get_MaxServicePoints: Int32;
    {class} procedure set_MaxServicePoints(value: Int32);
    {class} function get_DefaultConnectionLimit: Int32;
    {class} procedure set_DefaultConnectionLimit(value: Int32);
    {class} function get_MaxServicePointIdleTime: Int32;
    {class} procedure set_MaxServicePointIdleTime(value: Int32);
    {class} function get_UseNagleAlgorithm: Boolean;
    {class} procedure set_UseNagleAlgorithm(value: Boolean);
    {class} function get_Expect100Continue: Boolean;
    {class} procedure set_Expect100Continue(value: Boolean);
    {class} function get_EnableDnsRoundRobin: Boolean;
    {class} procedure set_EnableDnsRoundRobin(value: Boolean);
    {class} function get_DnsRefreshTimeout: Int32;
    {class} procedure set_DnsRefreshTimeout(value: Int32);
    {class} function get_CertificatePolicy: DNICertificatePolicy;
    {class} procedure set_CertificatePolicy(value: DNICertificatePolicy);
    {class} function get_ServerCertificateValidationCallback: DNRemoteCertificateValidationCallback;
    {class} procedure set_ServerCertificateValidationCallback(value: DNRemoteCertificateValidationCallback);
    {class} function get_ReusePort: Boolean;
    {class} procedure set_ReusePort(value: Boolean);
    {class} function get_CheckCertificateRevocationList: Boolean;
    {class} procedure set_CheckCertificateRevocationList(value: Boolean);
    {class} function get_EncryptionPolicy: DNEncryptionPolicy;

  { static fields getter & setter } 

   function __fakeFieldGet_DefaultNonPersistentConnectionLimit: Int32;
   function __fakeFieldGet_DefaultPersistentConnectionLimit: Int32;

  { static fields } 

    {class} property DefaultNonPersistentConnectionLimit: Int32 read __fakeFieldGet_DefaultNonPersistentConnectionLimit;
    {class} property DefaultPersistentConnectionLimit: Int32 read __fakeFieldGet_DefaultPersistentConnectionLimit;

  { static methods } 

    {class} function FindServicePoint(address: DNUri): DNServicePoint; overload;
    {class} function FindServicePoint(uriString: string; proxy: DNIWebProxy): DNServicePoint; overload;
    {class} function FindServicePoint(address: DNUri; proxy: DNIWebProxy): DNServicePoint; overload;
    {class} procedure SetTcpKeepAlive(enabled: Boolean; keepAliveTime: Int32; keepAliveInterval: Int32);

  { static propertys } 

    {class} property SecurityProtocol: DNSecurityProtocolType read get_SecurityProtocol write set_SecurityProtocol;
    {class} property MaxServicePoints: Int32 read get_MaxServicePoints write set_MaxServicePoints;
    {class} property DefaultConnectionLimit: Int32 read get_DefaultConnectionLimit write set_DefaultConnectionLimit;
    {class} property MaxServicePointIdleTime: Int32 read get_MaxServicePointIdleTime write set_MaxServicePointIdleTime;
    {class} property UseNagleAlgorithm: Boolean read get_UseNagleAlgorithm write set_UseNagleAlgorithm;
    {class} property Expect100Continue: Boolean read get_Expect100Continue write set_Expect100Continue;
    {class} property EnableDnsRoundRobin: Boolean read get_EnableDnsRoundRobin write set_EnableDnsRoundRobin;
    {class} property DnsRefreshTimeout: Int32 read get_DnsRefreshTimeout write set_DnsRefreshTimeout;
    {class} property CertificatePolicy: DNICertificatePolicy read get_CertificatePolicy write set_CertificatePolicy;
    {class} property ServerCertificateValidationCallback: DNRemoteCertificateValidationCallback read get_ServerCertificateValidationCallback write set_ServerCertificateValidationCallback;
    {class} property ReusePort: Boolean read get_ReusePort write set_ReusePort;
    {class} property CheckCertificateRevocationList: Boolean read get_CheckCertificateRevocationList write set_CheckCertificateRevocationList;
    {class} property EncryptionPolicy: DNEncryptionPolicy read get_EncryptionPolicy;
  end;

  [DNTypeName('System.Net.ServicePointManager')]
  DNServicePointManager = interface(DDN.mscorlib.DNObject)
  ['{9DD89D21-E4C1-3940-866D-0D2F6BD9B7A4}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNServicePointManager = class(TDNGenericImport<DNServicePointManagerClass, DNServicePointManager>)
  public const
   DefaultNonPersistentConnectionLimit = 4;
   DefaultPersistentConnectionLimit = 2;
  end;

  //-------------namespace: System.Net----------------
  DNSocketAddressClass = interface(DDN.mscorlib.DNObjectClass)
  ['{752649D6-117D-5D33-9D44-A754A8C7D309}']
  { constructors } 

    {class} function init(family: DNAddressFamily): DNSocketAddress; overload;
    {class} function init(family: DNAddressFamily; size: Int32): DNSocketAddress; overload;

  end;

  [DNTypeName('System.Net.SocketAddress')]
  DNSocketAddress = interface(DDN.mscorlib.DNObject)
  ['{8C199D32-6C81-3342-A5E9-2C4A6387DA71}']
  { getters & setters } 

    function get_Family: DNAddressFamily;
    function get_Size: Int32;
    function get_Item(offset: Int32): Byte;
    procedure set_Item(offset: Int32; value: Byte);

  { methods } 

    function Equals(comparand: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Family: DNAddressFamily read get_Family;
    property Size: Int32 read get_Size;
    property Item[offset: Int32]: Byte read get_Item write set_Item; default;
  end;

  TDNSocketAddress = class(TDNGenericImport<DNSocketAddressClass, DNSocketAddress>) end;

  //-------------namespace: System.Net.Sockets----------------
  DNIPv6MulticastOptionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{61DD8D4C-5EE9-544F-B320-46EEF8CEFD9F}']
  { constructors } 

    {class} function init(group: DNIPAddress; ifindex: Int64): DNIPv6MulticastOption; overload;
    {class} function init(group: DNIPAddress): DNIPv6MulticastOption; overload;

  end;

  [DNTypeName('System.Net.Sockets.IPv6MulticastOption')]
  DNIPv6MulticastOption = interface(DDN.mscorlib.DNObject)
  ['{C621DB13-3BA6-3131-8F0D-728FF914499B}']
  { getters & setters } 

    function get_Group: DNIPAddress;
    procedure set_Group(value: DNIPAddress);
    function get_InterfaceIndex: Int64;
    procedure set_InterfaceIndex(value: Int64);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Group: DNIPAddress read get_Group write set_Group;
    property InterfaceIndex: Int64 read get_InterfaceIndex write set_InterfaceIndex;
  end;

  TDNIPv6MulticastOption = class(TDNGenericImport<DNIPv6MulticastOptionClass, DNIPv6MulticastOption>) end;

  //-------------namespace: System.Net.Sockets----------------
  DNLingerOptionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{93C75C46-81A4-5E71-9104-9E6AC2A4B3E6}']
  { constructors } 

    {class} function init(enable: Boolean; seconds: Int32): DNLingerOption;

  end;

  [DNTypeName('System.Net.Sockets.LingerOption')]
  DNLingerOption = interface(DDN.mscorlib.DNObject)
  ['{AADBB027-C29F-3D4D-9DE4-EBEAA884943A}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_LingerTime: Int32;
    procedure set_LingerTime(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Enabled: Boolean read get_Enabled write set_Enabled;
    property LingerTime: Int32 read get_LingerTime write set_LingerTime;
  end;

  TDNLingerOption = class(TDNGenericImport<DNLingerOptionClass, DNLingerOption>) end;

  //-------------namespace: System.Net.Sockets----------------
  DNMulticastOptionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8C64AC30-6CB5-52AB-8102-97A64A5DF302}']
  { constructors } 

    {class} function init(group: DNIPAddress; mcint: DNIPAddress): DNMulticastOption; overload;
    {class} function init(group: DNIPAddress; interfaceIndex: Int32): DNMulticastOption; overload;
    {class} function init(group: DNIPAddress): DNMulticastOption; overload;

  end;

  [DNTypeName('System.Net.Sockets.MulticastOption')]
  DNMulticastOption = interface(DDN.mscorlib.DNObject)
  ['{E24AF5EC-D79A-3055-84B7-A2B125C71D86}']
  { getters & setters } 

    function get_Group: DNIPAddress;
    procedure set_Group(value: DNIPAddress);
    function get_LocalAddress: DNIPAddress;
    procedure set_LocalAddress(value: DNIPAddress);
    function get_InterfaceIndex: Int32;
    procedure set_InterfaceIndex(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Group: DNIPAddress read get_Group write set_Group;
    property LocalAddress: DNIPAddress read get_LocalAddress write set_LocalAddress;
    property InterfaceIndex: Int32 read get_InterfaceIndex write set_InterfaceIndex;
  end;

  TDNMulticastOption = class(TDNGenericImport<DNMulticastOptionClass, DNMulticastOption>) end;

  //-------------namespace: System.Net.Sockets----------------
  DNSendPacketsElementClass = interface(DDN.mscorlib.DNObjectClass)
  ['{09E9F073-EC2C-5CF7-8EF6-8DDC6F3F03F4}']
  { constructors } 

    {class} function init(filepath: string): DNSendPacketsElement; overload;
    {class} function init(filepath: string; offset: Int32; count: Int32): DNSendPacketsElement; overload;
    {class} function init(filepath: string; offset: Int32; count: Int32; endOfPacket: Boolean): DNSendPacketsElement; overload;
    {class} function init(buffer: TArray<Byte>): DNSendPacketsElement; overload;
    {class} function init(buffer: TArray<Byte>; offset: Int32; count: Int32): DNSendPacketsElement; overload;
    {class} function init(buffer: TArray<Byte>; offset: Int32; count: Int32; endOfPacket: Boolean): DNSendPacketsElement; overload;

  end;

  [DNTypeName('System.Net.Sockets.SendPacketsElement')]
  DNSendPacketsElement = interface(DDN.mscorlib.DNObject)
  ['{D8DCC7C0-99EC-338B-B652-2EABA7BBA408}']
  { getters & setters } 

    function get_FilePath: string;
    function get_Buffer: TArray<Byte>;
    function get_Count: Int32;
    function get_Offset: Int32;
    function get_EndOfPacket: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FilePath: string read get_FilePath;
    property Buffer: TArray<Byte> read get_Buffer;
    property Count: Int32 read get_Count;
    property Offset: Int32 read get_Offset;
    property EndOfPacket: Boolean read get_EndOfPacket;
  end;

  TDNSendPacketsElement = class(TDNGenericImport<DNSendPacketsElementClass, DNSendPacketsElement>) end;

  //-------------namespace: System.Net.Sockets----------------
  DNSocketClass = interface(DNObjectClass)
  ['{73319925-5737-5F8E-8F98-F24624AC7BB8}']
  { static getter & setter } 

    {class} function get_SupportsIPv4: Boolean;
    {class} function get_OSSupportsIPv4: Boolean;
    {class} function get_SupportsIPv6: Boolean;
    {class} function get_OSSupportsIPv6: Boolean;

  { constructors } 

    {class} function init(socketType: DNSocketType; protocolType: DNProtocolType): DNSocket; overload;
    {class} function init(addressFamily: DNAddressFamily; socketType: DNSocketType; protocolType: DNProtocolType): DNSocket; overload;
    {class} function init(socketInformation: DNSocketInformation): DNSocket; overload;

  { static methods } 

    {class} procedure CancelConnectAsync(e: DNSocketAsyncEventArgs);
    {class} procedure Select(checkRead: DDN.mscorlib.DNIList; checkWrite: DDN.mscorlib.DNIList; checkError: DDN.mscorlib.DNIList; microSeconds: Int32);
    {class} function ConnectAsync(socketType: DNSocketType; protocolType: DNProtocolType; e: DNSocketAsyncEventArgs): Boolean; overload;

  { static propertys } 

    {class} property SupportsIPv4: Boolean read get_SupportsIPv4;
    {class} property OSSupportsIPv4: Boolean read get_OSSupportsIPv4;
    {class} property SupportsIPv6: Boolean read get_SupportsIPv6;
    {class} property OSSupportsIPv6: Boolean read get_OSSupportsIPv6;
  end;

  [DNTypeName('System.Net.Sockets.Socket')]
  DNSocket = interface(DDN.mscorlib.DNIDisposable)
  ['{35BA3552-EF39-3CF4-8C18-62D3056FF50A}']
  { getters & setters } 

    function get_Available: Int32;
    function get_LocalEndPoint: DNEndPoint;
    function get_RemoteEndPoint: DNEndPoint;
    function get_Handle: IntPtr;
    function get_Blocking: Boolean;
    procedure set_Blocking(value: Boolean);
    function get_UseOnlyOverlappedIO: Boolean;
    procedure set_UseOnlyOverlappedIO(value: Boolean);
    function get_Connected: Boolean;
    function get_AddressFamily: DNAddressFamily;
    function get_SocketType: DNSocketType;
    function get_ProtocolType: DNProtocolType;
    function get_IsBound: Boolean;
    function get_ExclusiveAddressUse: Boolean;
    procedure set_ExclusiveAddressUse(value: Boolean);
    function get_ReceiveBufferSize: Int32;
    procedure set_ReceiveBufferSize(value: Int32);
    function get_SendBufferSize: Int32;
    procedure set_SendBufferSize(value: Int32);
    function get_ReceiveTimeout: Int32;
    procedure set_ReceiveTimeout(value: Int32);
    function get_SendTimeout: Int32;
    procedure set_SendTimeout(value: Int32);
    function get_LingerState: DNLingerOption;
    procedure set_LingerState(value: DNLingerOption);
    function get_NoDelay: Boolean;
    procedure set_NoDelay(value: Boolean);
    function get_Ttl: Int16;
    procedure set_Ttl(value: Int16);
    function get_DontFragment: Boolean;
    procedure set_DontFragment(value: Boolean);
    function get_MulticastLoopback: Boolean;
    procedure set_MulticastLoopback(value: Boolean);
    function get_EnableBroadcast: Boolean;
    procedure set_EnableBroadcast(value: Boolean);
    function get_DualMode: Boolean;
    procedure set_DualMode(value: Boolean);

  { methods } 

    procedure Connect(remoteEP: DNEndPoint); overload;
    procedure Close(timeout: Int32); overload;
    function Send(buffer: TArray<Byte>; size: Int32; socketFlags: DNSocketFlags): Int32; overload;
    function Send(buffer: TArray<Byte>; socketFlags: DNSocketFlags): Int32; overload;
    function Send(buffer: TArray<Byte>): Int32; overload;
    function Send(buffers: DDN.mscorlib.DNIList<DDN.mscorlib.DNArraySegment<Byte>>): Int32; overload;
    function Send(buffers: DDN.mscorlib.DNIList<DDN.mscorlib.DNArraySegment<Byte>>; socketFlags: DNSocketFlags): Int32; overload;
    procedure SendFile(fileName: string); overload;
    function Send(buffer: TArray<Byte>; offset: Int32; size: Int32; socketFlags: DNSocketFlags): Int32; overload;
    function SendTo(buffer: TArray<Byte>; size: Int32; socketFlags: DNSocketFlags; remoteEP: DNEndPoint): Int32; overload;
    function SendTo(buffer: TArray<Byte>; socketFlags: DNSocketFlags; remoteEP: DNEndPoint): Int32; overload;
    function SendTo(buffer: TArray<Byte>; remoteEP: DNEndPoint): Int32; overload;
    function Receive(buffer: TArray<Byte>; size: Int32; socketFlags: DNSocketFlags): Int32; overload;
    function Receive(buffer: TArray<Byte>; socketFlags: DNSocketFlags): Int32; overload;
    function Receive(buffer: TArray<Byte>): Int32; overload;
    function Receive(buffer: TArray<Byte>; offset: Int32; size: Int32; socketFlags: DNSocketFlags): Int32; overload;
    function Receive(buffers: DDN.mscorlib.DNIList<DDN.mscorlib.DNArraySegment<Byte>>): Int32; overload;
    function Receive(buffers: DDN.mscorlib.DNIList<DDN.mscorlib.DNArraySegment<Byte>>; socketFlags: DNSocketFlags): Int32; overload;
    function ReceiveFrom(buffer: TArray<Byte>; size: Int32; socketFlags: DNSocketFlags; out remoteEP: DNEndPoint): Int32; overload;
    function ReceiveFrom(buffer: TArray<Byte>; socketFlags: DNSocketFlags; out remoteEP: DNEndPoint): Int32; overload;
    function ReceiveFrom(buffer: TArray<Byte>; out remoteEP: DNEndPoint): Int32; overload;
    function IOControl(ioControlCode: DNIOControlCode; optionInValue: TArray<Byte>; optionOutValue: TArray<Byte>): Int32; overload;
    procedure SetIPProtectionLevel(level: DNIPProtectionLevel);
    procedure SetSocketOption(optionLevel: DNSocketOptionLevel; optionName: DNSocketOptionName; optionValue: Int32); overload;
    procedure SetSocketOption(optionLevel: DNSocketOptionLevel; optionName: DNSocketOptionName; optionValue: Boolean); overload;
    function BeginSendFile(fileName: string; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function BeginDisconnect(reuseSocket: Boolean; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function BeginSend(buffer: TArray<Byte>; offset: Int32; size: Int32; socketFlags: DNSocketFlags; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function BeginSendFile(fileName: string; preBuffer: TArray<Byte>; postBuffer: TArray<Byte>; flags: DNTransmitFileOptions; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function BeginSend(buffers: DDN.mscorlib.DNIList<DDN.mscorlib.DNArraySegment<Byte>>; socketFlags: DNSocketFlags; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function EndSend(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32; overload;
    function BeginReceive(buffer: TArray<Byte>; offset: Int32; size: Int32; socketFlags: DNSocketFlags; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function BeginReceive(buffers: DDN.mscorlib.DNIList<DDN.mscorlib.DNArraySegment<Byte>>; socketFlags: DNSocketFlags; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function EndReceive(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32; overload;
    function BeginAccept(receiveSize: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    procedure Dispose;
    procedure Connect(address: DNIPAddress; port: Int32); overload;
    procedure Connect(host: string; port: Int32); overload;
    procedure Connect(addresses: TArray<DNIPAddress>; port: Int32); overload;
    function Send(buffers: DDN.mscorlib.DNIList<DDN.mscorlib.DNArraySegment<Byte>>; socketFlags: DNSocketFlags; out errorCode: DNSocketError): Int32; overload;
    procedure SendFile(fileName: string; preBuffer: TArray<Byte>; postBuffer: TArray<Byte>; flags: DNTransmitFileOptions); overload;
    function SendTo(buffer: TArray<Byte>; offset: Int32; size: Int32; socketFlags: DNSocketFlags; remoteEP: DNEndPoint): Int32; overload;
    function Receive(buffers: DDN.mscorlib.DNIList<DDN.mscorlib.DNArraySegment<Byte>>; socketFlags: DNSocketFlags; out errorCode: DNSocketError): Int32; overload;
    function ReceiveMessageFrom(buffer: TArray<Byte>; offset: Int32; size: Int32; out socketFlags: DNSocketFlags; out remoteEP: DNEndPoint; out ipPacketInformation: DNIPPacketInformation): Int32;
    function ReceiveFrom(buffer: TArray<Byte>; offset: Int32; size: Int32; socketFlags: DNSocketFlags; out remoteEP: DNEndPoint): Int32; overload;
    function IOControl(ioControlCode: Int32; optionInValue: TArray<Byte>; optionOutValue: TArray<Byte>): Int32; overload;
    procedure SetSocketOption(optionLevel: DNSocketOptionLevel; optionName: DNSocketOptionName; optionValue: TArray<Byte>); overload;
    procedure SetSocketOption(optionLevel: DNSocketOptionLevel; optionName: DNSocketOptionName; optionValue: DDN.mscorlib.DNObject); overload;
    function GetSocketOption(optionLevel: DNSocketOptionLevel; optionName: DNSocketOptionName): DDN.mscorlib.DNObject; overload;
    procedure GetSocketOption(optionLevel: DNSocketOptionLevel; optionName: DNSocketOptionName; optionValue: TArray<Byte>); overload;
    function GetSocketOption(optionLevel: DNSocketOptionLevel; optionName: DNSocketOptionName; optionLength: Int32): TArray<Byte>; overload;
    function BeginConnect(remoteEP: DNEndPoint; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function DuplicateAndClose(targetProcessId: Int32): DNSocketInformation;
    function BeginConnect(host: string; port: Int32; requestCallback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function BeginConnect(address: DNIPAddress; port: Int32; requestCallback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function BeginConnect(addresses: TArray<DNIPAddress>; port: Int32; requestCallback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    procedure Disconnect(reuseSocket: Boolean);
    procedure EndDisconnect(asyncResult: DDN.mscorlib.DNIAsyncResult);
    function BeginSend(buffers: DDN.mscorlib.DNIList<DDN.mscorlib.DNArraySegment<Byte>>; socketFlags: DNSocketFlags; out errorCode: DNSocketError; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    procedure EndSendFile(asyncResult: DDN.mscorlib.DNIAsyncResult);
    function BeginSendTo(buffer: TArray<Byte>; offset: Int32; size: Int32; socketFlags: DNSocketFlags; remoteEP: DNEndPoint; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndSendTo(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32;
    function BeginReceive(buffers: DDN.mscorlib.DNIList<DDN.mscorlib.DNArraySegment<Byte>>; socketFlags: DNSocketFlags; out errorCode: DNSocketError; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function BeginReceiveMessageFrom(buffer: TArray<Byte>; offset: Int32; size: Int32; socketFlags: DNSocketFlags; out remoteEP: DNEndPoint; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndReceiveMessageFrom(asyncResult: DDN.mscorlib.DNIAsyncResult; out socketFlags: DNSocketFlags; out endPoint: DNEndPoint; out ipPacketInformation: DNIPPacketInformation): Int32;
    function BeginReceiveFrom(buffer: TArray<Byte>; offset: Int32; size: Int32; socketFlags: DNSocketFlags; out remoteEP: DNEndPoint; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndReceiveFrom(asyncResult: DDN.mscorlib.DNIAsyncResult; out endPoint: DNEndPoint): Int32;
    function BeginAccept(callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function BeginAccept(acceptSocket: DNSocket; receiveSize: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function EndAccept(asyncResult: DDN.mscorlib.DNIAsyncResult): DNSocket; overload;
    function EndAccept(out buffer: TArray<Byte>; asyncResult: DDN.mscorlib.DNIAsyncResult): DNSocket; overload;
    function EndAccept(out buffer: TArray<Byte>; out bytesTransferred: Int32; asyncResult: DDN.mscorlib.DNIAsyncResult): DNSocket; overload;
    procedure Shutdown(how: DNSocketShutdown);
    function AcceptAsync(e: DNSocketAsyncEventArgs): Boolean;
    function ConnectAsync(e: DNSocketAsyncEventArgs): Boolean; overload;
    function DisconnectAsync(e: DNSocketAsyncEventArgs): Boolean;
    function ReceiveAsync(e: DNSocketAsyncEventArgs): Boolean;
    function ReceiveFromAsync(e: DNSocketAsyncEventArgs): Boolean;
    function ReceiveMessageFromAsync(e: DNSocketAsyncEventArgs): Boolean;
    function SendAsync(e: DNSocketAsyncEventArgs): Boolean;
    function SendPacketsAsync(e: DNSocketAsyncEventArgs): Boolean;
    function SendToAsync(e: DNSocketAsyncEventArgs): Boolean;
    procedure Bind(localEP: DNEndPoint);
    procedure Close; overload;
    procedure Listen(backlog: Int32);
    function Accept: DNSocket;
    function Send(buffer: TArray<Byte>; offset: Int32; size: Int32; socketFlags: DNSocketFlags; out errorCode: DNSocketError): Int32; overload;
    function Receive(buffer: TArray<Byte>; offset: Int32; size: Int32; socketFlags: DNSocketFlags; out errorCode: DNSocketError): Int32; overload;
    function Poll(microSeconds: Int32; mode: DNSelectMode): Boolean;
    procedure EndConnect(asyncResult: DDN.mscorlib.DNIAsyncResult);
    function BeginSend(buffer: TArray<Byte>; offset: Int32; size: Int32; socketFlags: DNSocketFlags; out errorCode: DNSocketError; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function EndSend(asyncResult: DDN.mscorlib.DNIAsyncResult; out errorCode: DNSocketError): Int32; overload;
    function BeginReceive(buffer: TArray<Byte>; offset: Int32; size: Int32; socketFlags: DNSocketFlags; out errorCode: DNSocketError; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function EndReceive(asyncResult: DDN.mscorlib.DNIAsyncResult; out errorCode: DNSocketError): Int32; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Available: Int32 read get_Available;
    property LocalEndPoint: DNEndPoint read get_LocalEndPoint;
    property RemoteEndPoint: DNEndPoint read get_RemoteEndPoint;
    property Handle: IntPtr read get_Handle;
    property Blocking: Boolean read get_Blocking write set_Blocking;
    property UseOnlyOverlappedIO: Boolean read get_UseOnlyOverlappedIO write set_UseOnlyOverlappedIO;
    property Connected: Boolean read get_Connected;
    property AddressFamily: DNAddressFamily read get_AddressFamily;
    property SocketType: DNSocketType read get_SocketType;
    property ProtocolType: DNProtocolType read get_ProtocolType;
    property IsBound: Boolean read get_IsBound;
    property ExclusiveAddressUse: Boolean read get_ExclusiveAddressUse write set_ExclusiveAddressUse;
    property ReceiveBufferSize: Int32 read get_ReceiveBufferSize write set_ReceiveBufferSize;
    property SendBufferSize: Int32 read get_SendBufferSize write set_SendBufferSize;
    property ReceiveTimeout: Int32 read get_ReceiveTimeout write set_ReceiveTimeout;
    property SendTimeout: Int32 read get_SendTimeout write set_SendTimeout;
    property LingerState: DNLingerOption read get_LingerState write set_LingerState;
    property NoDelay: Boolean read get_NoDelay write set_NoDelay;
    property Ttl: Int16 read get_Ttl write set_Ttl;
    property DontFragment: Boolean read get_DontFragment write set_DontFragment;
    property MulticastLoopback: Boolean read get_MulticastLoopback write set_MulticastLoopback;
    property EnableBroadcast: Boolean read get_EnableBroadcast write set_EnableBroadcast;
    property DualMode: Boolean read get_DualMode write set_DualMode;
  end;

  TDNSocket = class(TDNGenericImport<DNSocketClass, DNSocket>) end;

  //-------------namespace: System.Net.Sockets----------------
  DNSocketTaskExtensionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9362A6B5-22D8-556A-BF44-1C82DBCC1BE4}']
  { static methods } 

    {class} function AcceptAsync(socket: DNSocket): DDN.mscorlib.DNTask<DNSocket>; overload;
    {class} function AcceptAsync(socket: DNSocket; acceptSocket: DNSocket): DDN.mscorlib.DNTask<DNSocket>; overload;
    {class} function ConnectAsync(socket: DNSocket; remoteEP: DNEndPoint): DDN.mscorlib.DNTask; overload;
    {class} function ConnectAsync(socket: DNSocket; address: DNIPAddress; port: Int32): DDN.mscorlib.DNTask; overload;
    {class} function ConnectAsync(socket: DNSocket; addresses: TArray<DNIPAddress>; port: Int32): DDN.mscorlib.DNTask; overload;
    {class} function ConnectAsync(socket: DNSocket; host: string; port: Int32): DDN.mscorlib.DNTask; overload;
    {class} function ReceiveAsync(socket: DNSocket; buffers: DDN.mscorlib.DNIList<DDN.mscorlib.DNArraySegment<Byte>>; socketFlags: DNSocketFlags): DDN.mscorlib.DNTask<Int32>; overload;
    {class} function SendAsync(socket: DNSocket; buffers: DDN.mscorlib.DNIList<DDN.mscorlib.DNArraySegment<Byte>>; socketFlags: DNSocketFlags): DDN.mscorlib.DNTask<Int32>; overload;
    {class} function ReceiveAsync(socket: DNSocket; buffer: DDN.mscorlib.DNArraySegment<Byte>; socketFlags: DNSocketFlags): DDN.mscorlib.DNTask<Int32>; overload;
    {class} function ReceiveFromAsync(socket: DNSocket; buffer: DDN.mscorlib.DNArraySegment<Byte>; socketFlags: DNSocketFlags; remoteEndPoint: DNEndPoint): DDN.mscorlib.DNTask<DNSocketReceiveFromResult>;
    {class} function ReceiveMessageFromAsync(socket: DNSocket; buffer: DDN.mscorlib.DNArraySegment<Byte>; socketFlags: DNSocketFlags; remoteEndPoint: DNEndPoint): DDN.mscorlib.DNTask<DNSocketReceiveMessageFromResult>;
    {class} function SendAsync(socket: DNSocket; buffer: DDN.mscorlib.DNArraySegment<Byte>; socketFlags: DNSocketFlags): DDN.mscorlib.DNTask<Int32>; overload;
    {class} function SendToAsync(socket: DNSocket; buffer: DDN.mscorlib.DNArraySegment<Byte>; socketFlags: DNSocketFlags; remoteEP: DNEndPoint): DDN.mscorlib.DNTask<Int32>;

  end;

  [DNTypeName('System.Net.Sockets.SocketTaskExtensions')]
  DNSocketTaskExtensions = interface(DDN.mscorlib.DNObject)
  ['{FC16B9EC-870D-34D6-9F85-2094ACA7D525}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSocketTaskExtensions = class(TDNGenericImport<DNSocketTaskExtensionsClass, DNSocketTaskExtensions>) end;

  //-------------namespace: System.Net.Sockets----------------
  DNTcpClientClass = interface(DNObjectClass)
  ['{D8A50890-1619-5C12-A207-F39493FD2BB7}']
  { constructors } 

    {class} function init(localEP: DNIPEndPoint): DNTcpClient; overload;
    {class} function init: DNTcpClient; overload;
    {class} function init(family: DNAddressFamily): DNTcpClient; overload;
    {class} function init(hostname: string; port: Int32): DNTcpClient; overload;

  end;

  [DNTypeName('System.Net.Sockets.TcpClient')]
  DNTcpClient = interface(DDN.mscorlib.DNIDisposable)
  ['{39CC7C9B-D82B-3CA0-B1BC-46CD90BF264F}']
  { getters & setters } 

    function get_Client: DNSocket;
    procedure set_Client(value: DNSocket);
    function get_Available: Int32;
    function get_Connected: Boolean;
    function get_ExclusiveAddressUse: Boolean;
    procedure set_ExclusiveAddressUse(value: Boolean);
    function get_ReceiveBufferSize: Int32;
    procedure set_ReceiveBufferSize(value: Int32);
    function get_SendBufferSize: Int32;
    procedure set_SendBufferSize(value: Int32);
    function get_ReceiveTimeout: Int32;
    procedure set_ReceiveTimeout(value: Int32);
    function get_SendTimeout: Int32;
    procedure set_SendTimeout(value: Int32);
    function get_LingerState: DNLingerOption;
    procedure set_LingerState(value: DNLingerOption);
    function get_NoDelay: Boolean;
    procedure set_NoDelay(value: Boolean);

  { methods } 

    procedure Dispose;
    procedure Connect(hostname: string; port: Int32); overload;
    procedure Connect(address: DNIPAddress; port: Int32); overload;
    procedure Connect(remoteEP: DNIPEndPoint); overload;
    procedure Connect(ipAddresses: TArray<DNIPAddress>; port: Int32); overload;
    function BeginConnect(host: string; port: Int32; requestCallback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function BeginConnect(address: DNIPAddress; port: Int32; requestCallback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function BeginConnect(addresses: TArray<DNIPAddress>; port: Int32; requestCallback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    procedure EndConnect(asyncResult: DDN.mscorlib.DNIAsyncResult);
    function ConnectAsync(address: DNIPAddress; port: Int32): DDN.mscorlib.DNTask; overload;
    function ConnectAsync(host: string; port: Int32): DDN.mscorlib.DNTask; overload;
    function ConnectAsync(addresses: TArray<DNIPAddress>; port: Int32): DDN.mscorlib.DNTask; overload;
    function GetStream: DNNetworkStream;
    procedure Close;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Client: DNSocket read get_Client write set_Client;
    property Available: Int32 read get_Available;
    property Connected: Boolean read get_Connected;
    property ExclusiveAddressUse: Boolean read get_ExclusiveAddressUse write set_ExclusiveAddressUse;
    property ReceiveBufferSize: Int32 read get_ReceiveBufferSize write set_ReceiveBufferSize;
    property SendBufferSize: Int32 read get_SendBufferSize write set_SendBufferSize;
    property ReceiveTimeout: Int32 read get_ReceiveTimeout write set_ReceiveTimeout;
    property SendTimeout: Int32 read get_SendTimeout write set_SendTimeout;
    property LingerState: DNLingerOption read get_LingerState write set_LingerState;
    property NoDelay: Boolean read get_NoDelay write set_NoDelay;
  end;

  TDNTcpClient = class(TDNGenericImport<DNTcpClientClass, DNTcpClient>) end;

  //-------------namespace: System.Net.Sockets----------------
  DNTcpListenerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A12CB85C-999E-51C2-8A30-E791F59D427E}']
  { constructors } 

    {class} function init(localEP: DNIPEndPoint): DNTcpListener; overload;
    {class} function init(localaddr: DNIPAddress; port: Int32): DNTcpListener; overload;
    {class} function init(port: Int32): DNTcpListener; overload;

  { static methods } 

    {class} function Create(port: Int32): DNTcpListener;

  end;

  [DNTypeName('System.Net.Sockets.TcpListener')]
  DNTcpListener = interface(DDN.mscorlib.DNObject)
  ['{2AFC5AC6-8C88-30F7-99B5-365E26686AB6}']
  { getters & setters } 

    function get_Server: DNSocket;
    function get_LocalEndpoint: DNEndPoint;
    function get_ExclusiveAddressUse: Boolean;
    procedure set_ExclusiveAddressUse(value: Boolean);

  { methods } 

    procedure AllowNatTraversal(allowed: Boolean);
    procedure Start; overload;
    function Pending: Boolean;
    procedure Start(backlog: Int32); overload;
    procedure Stop;
    function AcceptSocket: DNSocket;
    function AcceptTcpClient: DNTcpClient;
    function BeginAcceptSocket(callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndAcceptSocket(asyncResult: DDN.mscorlib.DNIAsyncResult): DNSocket;
    function BeginAcceptTcpClient(callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndAcceptTcpClient(asyncResult: DDN.mscorlib.DNIAsyncResult): DNTcpClient;
    function AcceptSocketAsync: DDN.mscorlib.DNTask<DNSocket>;
    function AcceptTcpClientAsync: DDN.mscorlib.DNTask<DNTcpClient>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Server: DNSocket read get_Server;
    property LocalEndpoint: DNEndPoint read get_LocalEndpoint;
    property ExclusiveAddressUse: Boolean read get_ExclusiveAddressUse write set_ExclusiveAddressUse;
  end;

  TDNTcpListener = class(TDNGenericImport<DNTcpListenerClass, DNTcpListener>) end;

  //-------------namespace: System.Net.Sockets----------------
  DNUdpClientClass = interface(DNObjectClass)
  ['{750E4F12-0A8D-5AF3-9072-47EC16F86685}']
  { constructors } 

    {class} function init: DNUdpClient; overload;
    {class} function init(family: DNAddressFamily): DNUdpClient; overload;
    {class} function init(port: Int32): DNUdpClient; overload;
    {class} function init(port: Int32; family: DNAddressFamily): DNUdpClient; overload;
    {class} function init(localEP: DNIPEndPoint): DNUdpClient; overload;
    {class} function init(hostname: string; port: Int32): DNUdpClient; overload;

  end;

  [DNTypeName('System.Net.Sockets.UdpClient')]
  DNUdpClient = interface(DDN.mscorlib.DNIDisposable)
  ['{31DEB024-4ED5-35CF-93B8-326459F1157D}']
  { getters & setters } 

    function get_Client: DNSocket;
    procedure set_Client(value: DNSocket);
    function get_Available: Int32;
    function get_Ttl: Int16;
    procedure set_Ttl(value: Int16);
    function get_DontFragment: Boolean;
    procedure set_DontFragment(value: Boolean);
    function get_MulticastLoopback: Boolean;
    procedure set_MulticastLoopback(value: Boolean);
    function get_EnableBroadcast: Boolean;
    procedure set_EnableBroadcast(value: Boolean);
    function get_ExclusiveAddressUse: Boolean;
    procedure set_ExclusiveAddressUse(value: Boolean);

  { methods } 

    procedure AllowNatTraversal(allowed: Boolean);
    procedure Close;
    procedure Dispose;
    procedure Connect(hostname: string; port: Int32); overload;
    procedure Connect(addr: DNIPAddress; port: Int32); overload;
    procedure Connect(endPoint: DNIPEndPoint); overload;
    function Send(dgram: TArray<Byte>; bytes: Int32; endPoint: DNIPEndPoint): Int32; overload;
    function Send(dgram: TArray<Byte>; bytes: Int32; hostname: string; port: Int32): Int32; overload;
    function Send(dgram: TArray<Byte>; bytes: Int32): Int32; overload;
    function BeginSend(datagram: TArray<Byte>; bytes: Int32; endPoint: DNIPEndPoint; requestCallback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function BeginSend(datagram: TArray<Byte>; bytes: Int32; hostname: string; port: Int32; requestCallback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function BeginSend(datagram: TArray<Byte>; bytes: Int32; requestCallback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult; overload;
    function EndSend(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32;
    function BeginReceive(requestCallback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    procedure JoinMulticastGroup(multicastAddr: DNIPAddress; localAddress: DNIPAddress); overload;
    procedure JoinMulticastGroup(ifindex: Int32; multicastAddr: DNIPAddress); overload;
    procedure JoinMulticastGroup(multicastAddr: DNIPAddress; timeToLive: Int32); overload;
    procedure DropMulticastGroup(multicastAddr: DNIPAddress; ifindex: Int32); overload;
    function Receive(out remoteEP: DNIPEndPoint): TArray<Byte>;
    function EndReceive(asyncResult: DDN.mscorlib.DNIAsyncResult; out remoteEP: DNIPEndPoint): TArray<Byte>;
    procedure JoinMulticastGroup(multicastAddr: DNIPAddress); overload;
    procedure DropMulticastGroup(multicastAddr: DNIPAddress); overload;
    function SendAsync(datagram: TArray<Byte>; bytes: Int32): DDN.mscorlib.DNTask<Int32>; overload;
    function SendAsync(datagram: TArray<Byte>; bytes: Int32; endPoint: DNIPEndPoint): DDN.mscorlib.DNTask<Int32>; overload;
    function SendAsync(datagram: TArray<Byte>; bytes: Int32; hostname: string; port: Int32): DDN.mscorlib.DNTask<Int32>; overload;
    function ReceiveAsync: DDN.mscorlib.DNTask<DNUdpReceiveResult>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Client: DNSocket read get_Client write set_Client;
    property Available: Int32 read get_Available;
    property Ttl: Int16 read get_Ttl write set_Ttl;
    property DontFragment: Boolean read get_DontFragment write set_DontFragment;
    property MulticastLoopback: Boolean read get_MulticastLoopback write set_MulticastLoopback;
    property EnableBroadcast: Boolean read get_EnableBroadcast write set_EnableBroadcast;
    property ExclusiveAddressUse: Boolean read get_ExclusiveAddressUse write set_ExclusiveAddressUse;
  end;

  TDNUdpClient = class(TDNGenericImport<DNUdpClientClass, DNUdpClient>) end;

  //-------------namespace: System.Net----------------
  DNTransportContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{22EC3759-9004-5B32-BA20-B68D797E8E75}']
  end;

  [DNTypeName('System.Net.TransportContext')]
  DNTransportContext = interface(DDN.mscorlib.DNObject)
  ['{1F864FAF-64F8-32A4-9EA7-200E0AFA2775}']
  { methods } 

    function GetTlsTokenBindings: DDN.mscorlib.DNIEnumerable<DNTokenBinding>;
    function GetChannelBinding(kind: DNChannelBindingKind): DNChannelBinding;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTransportContext = class(TDNGenericImport<DNTransportContextClass, DNTransportContext>) end;

  //-------------namespace: System.Net----------------
  DNWebProxyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B4A18B9B-7BD9-5666-8462-F489138E3EB9}']
  { constructors } 

    {class} function init: DNWebProxy; overload;
    {class} function init(Address: DNUri): DNWebProxy; overload;
    {class} function init(Address: DNUri; BypassOnLocal: Boolean): DNWebProxy; overload;
    {class} function init(Address: DNUri; BypassOnLocal: Boolean; BypassList: TArray<string>): DNWebProxy; overload;
    {class} function init(Address: DNUri; BypassOnLocal: Boolean; BypassList: TArray<string>; Credentials: DNICredentials): DNWebProxy; overload;
    {class} function init(Host: string; Port: Int32): DNWebProxy; overload;
    {class} function init(Address: string): DNWebProxy; overload;
    {class} function init(Address: string; BypassOnLocal: Boolean): DNWebProxy; overload;
    {class} function init(Address: string; BypassOnLocal: Boolean; BypassList: TArray<string>): DNWebProxy; overload;
    {class} function init(Address: string; BypassOnLocal: Boolean; BypassList: TArray<string>; Credentials: DNICredentials): DNWebProxy; overload;

  { static methods } 

    {class} function GetDefaultProxy: DNWebProxy;

  end;

  [DNTypeName('System.Net.WebProxy')]
  DNWebProxy = interface(DDN.mscorlib.DNObject)
  ['{183ADAF1-6F64-306C-AE0A-E0AD13192010}']
  { getters & setters } 

    function get_Address: DNUri;
    procedure set_Address(value: DNUri);
    function get_BypassProxyOnLocal: Boolean;
    procedure set_BypassProxyOnLocal(value: Boolean);
    function get_BypassList: TArray<string>;
    procedure set_BypassList(value: TArray<string>);
    function get_Credentials: DNICredentials;
    procedure set_Credentials(value: DNICredentials);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_BypassArrayList: DDN.mscorlib.DNArrayList;

  { methods } 

    function GetProxy(destination: DNUri): DNUri;
    function IsBypassed(host: DNUri): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Address: DNUri read get_Address write set_Address;
    property BypassProxyOnLocal: Boolean read get_BypassProxyOnLocal write set_BypassProxyOnLocal;
    property BypassList: TArray<string> read get_BypassList write set_BypassList;
    property Credentials: DNICredentials read get_Credentials write set_Credentials;
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property BypassArrayList: DDN.mscorlib.DNArrayList read get_BypassArrayList;
  end;

  TDNWebProxy = class(TDNGenericImport<DNWebProxyClass, DNWebProxy>) end;

  //-------------namespace: System.Net----------------
  DNWebRequestMethodsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{610C88F8-E125-5866-999B-D59768C7FA4A}']
  end;

  [DNTypeName('System.Net.WebRequestMethods')]
  DNWebRequestMethods = interface(DDN.mscorlib.DNObject)
  ['{4F7F2932-5184-3C79-8D5B-4B937B5FE757}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNWebRequestMethods = class(TDNGenericImport<DNWebRequestMethodsClass, DNWebRequestMethods>) end;

  //-------------namespace: System.Net----------------
  DNWebRequestMethods_FileClass = interface(DDN.mscorlib.DNObjectClass)
  ['{51F14061-C23A-5E38-B1F7-EFFA9A8ED125}']
  { static fields getter & setter } 

   function __fakeFieldGet_DownloadFile: string;
   function __fakeFieldGet_UploadFile: string;

  { static fields } 

    {class} property DownloadFile: string read __fakeFieldGet_DownloadFile;
    {class} property UploadFile: string read __fakeFieldGet_UploadFile;

  end;

  [DNTypeName('System.Net.WebRequestMethods+File')]
  DNWebRequestMethods_File = interface(DDN.mscorlib.DNObject)
  ['{8F3A966B-D4BF-380B-A3D5-806508DF4D75}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNWebRequestMethods_File = class(TDNGenericImport<DNWebRequestMethods_FileClass, DNWebRequestMethods_File>)
  public const
   DownloadFile = 'GET';
   UploadFile = 'PUT';
  end;

  //-------------namespace: System.Net----------------
  DNWebRequestMethods_FtpClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A40EB55B-40B2-5573-8B00-18E842B33F7C}']
  { static fields getter & setter } 

   function __fakeFieldGet_DownloadFile: string;
   function __fakeFieldGet_ListDirectory: string;
   function __fakeFieldGet_UploadFile: string;
   function __fakeFieldGet_DeleteFile: string;
   function __fakeFieldGet_AppendFile: string;
   function __fakeFieldGet_GetFileSize: string;
   function __fakeFieldGet_UploadFileWithUniqueName: string;
   function __fakeFieldGet_MakeDirectory: string;
   function __fakeFieldGet_RemoveDirectory: string;
   function __fakeFieldGet_ListDirectoryDetails: string;
   function __fakeFieldGet_GetDateTimestamp: string;
   function __fakeFieldGet_PrintWorkingDirectory: string;
   function __fakeFieldGet_Rename: string;

  { static fields } 

    {class} property DownloadFile: string read __fakeFieldGet_DownloadFile;
    {class} property ListDirectory: string read __fakeFieldGet_ListDirectory;
    {class} property UploadFile: string read __fakeFieldGet_UploadFile;
    {class} property DeleteFile: string read __fakeFieldGet_DeleteFile;
    {class} property AppendFile: string read __fakeFieldGet_AppendFile;
    {class} property GetFileSize: string read __fakeFieldGet_GetFileSize;
    {class} property UploadFileWithUniqueName: string read __fakeFieldGet_UploadFileWithUniqueName;
    {class} property MakeDirectory: string read __fakeFieldGet_MakeDirectory;
    {class} property RemoveDirectory: string read __fakeFieldGet_RemoveDirectory;
    {class} property ListDirectoryDetails: string read __fakeFieldGet_ListDirectoryDetails;
    {class} property GetDateTimestamp: string read __fakeFieldGet_GetDateTimestamp;
    {class} property PrintWorkingDirectory: string read __fakeFieldGet_PrintWorkingDirectory;
    {class} property Rename: string read __fakeFieldGet_Rename;

  end;

  [DNTypeName('System.Net.WebRequestMethods+Ftp')]
  DNWebRequestMethods_Ftp = interface(DDN.mscorlib.DNObject)
  ['{D7473223-9F0E-3F68-BE6C-B1EF69D73033}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNWebRequestMethods_Ftp = class(TDNGenericImport<DNWebRequestMethods_FtpClass, DNWebRequestMethods_Ftp>)
  public const
   DownloadFile = 'RETR';
   ListDirectory = 'NLST';
   UploadFile = 'STOR';
   DeleteFile = 'DELE';
   AppendFile = 'APPE';
   GetFileSize = 'SIZE';
   UploadFileWithUniqueName = 'STOU';
   MakeDirectory = 'MKD';
   RemoveDirectory = 'RMD';
   ListDirectoryDetails = 'LIST';
   GetDateTimestamp = 'MDTM';
   PrintWorkingDirectory = 'PWD';
   Rename = 'RENAME';
  end;

  //-------------namespace: System.Net----------------
  DNWebRequestMethods_HttpClass = interface(DDN.mscorlib.DNObjectClass)
  ['{76AE797E-B8D7-51DB-866E-04C1F4B663C9}']
  { static fields getter & setter } 

   function __fakeFieldGet_Get: string;
   function __fakeFieldGet_Connect: string;
   function __fakeFieldGet_Head: string;
   function __fakeFieldGet_Put: string;
   function __fakeFieldGet_Post: string;
   function __fakeFieldGet_MkCol: string;

  { static fields } 

    {class} property Get: string read __fakeFieldGet_Get;
    {class} property Connect: string read __fakeFieldGet_Connect;
    {class} property Head: string read __fakeFieldGet_Head;
    {class} property Put: string read __fakeFieldGet_Put;
    {class} property Post: string read __fakeFieldGet_Post;
    {class} property MkCol: string read __fakeFieldGet_MkCol;

  end;

  [DNTypeName('System.Net.WebRequestMethods+Http')]
  DNWebRequestMethods_Http = interface(DDN.mscorlib.DNObject)
  ['{87AF5EA3-AA26-3551-A37B-4E4B0D3312A2}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNWebRequestMethods_Http = class(TDNGenericImport<DNWebRequestMethods_HttpClass, DNWebRequestMethods_Http>)
  public const
   Get = 'GET';
   Connect = 'CONNECT';
   Head = 'HEAD';
   Put = 'PUT';
   Post = 'POST';
   MkCol = 'MKCOL';
  end;

  //-------------namespace: System.Net.WebSockets----------------
  DNClientWebSocketOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{505D620A-C262-5819-A760-AEBBFABF27A5}']
  end;

  [DNTypeName('System.Net.WebSockets.ClientWebSocketOptions')]
  DNClientWebSocketOptions = interface(DDN.mscorlib.DNObject)
  ['{ACBFE3C1-BCE8-3E43-9F68-4ABC522D7DDB}']
  { getters & setters } 

    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_Credentials: DNICredentials;
    procedure set_Credentials(value: DNICredentials);
    function get_Proxy: DNIWebProxy;
    procedure set_Proxy(value: DNIWebProxy);
    function get_ClientCertificates: DNX509CertificateCollection;
    procedure set_ClientCertificates(value: DNX509CertificateCollection);
    function get_Cookies: DNCookieContainer;
    procedure set_Cookies(value: DNCookieContainer);
    function get_KeepAliveInterval: DDN.mscorlib.DNTimeSpan;
    procedure set_KeepAliveInterval(value: DDN.mscorlib.DNTimeSpan);

  { methods } 

    procedure SetRequestHeader(headerName: string; headerValue: string);
    procedure SetBuffer(receiveBufferSize: Int32; sendBufferSize: Int32); overload;
    procedure SetBuffer(receiveBufferSize: Int32; sendBufferSize: Int32; buffer: DDN.mscorlib.DNArraySegment<Byte>); overload;
    procedure AddSubProtocol(subProtocol: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property Credentials: DNICredentials read get_Credentials write set_Credentials;
    property Proxy: DNIWebProxy read get_Proxy write set_Proxy;
    property ClientCertificates: DNX509CertificateCollection read get_ClientCertificates write set_ClientCertificates;
    property Cookies: DNCookieContainer read get_Cookies write set_Cookies;
    property KeepAliveInterval: DDN.mscorlib.DNTimeSpan read get_KeepAliveInterval write set_KeepAliveInterval;
  end;

  TDNClientWebSocketOptions = class(TDNGenericImport<DNClientWebSocketOptionsClass, DNClientWebSocketOptions>) end;

  //-------------namespace: System.Net.WebSockets----------------
  DNWebSocketClass = interface(DNObjectClass)
  ['{E8E8E073-D541-53EA-9E0C-91FEC040AEA4}']
  { static getter & setter } 

    {class} function get_DefaultKeepAliveInterval: DDN.mscorlib.DNTimeSpan;

  { static methods } 

    {class} function IsApplicationTargeting45: Boolean;
    {class} function CreateClientBuffer(receiveBufferSize: Int32; sendBufferSize: Int32): DDN.mscorlib.DNArraySegment<Byte>;
    {class} function CreateServerBuffer(receiveBufferSize: Int32): DDN.mscorlib.DNArraySegment<Byte>;
    {class} function CreateClientWebSocket(innerStream: DDN.mscorlib.DNStream; subProtocol: string; receiveBufferSize: Int32; sendBufferSize: Int32; keepAliveInterval: DDN.mscorlib.DNTimeSpan; useZeroMaskingKey: Boolean; internalBuffer: DDN.mscorlib.DNArraySegment<Byte>): DNWebSocket;
    {class} procedure RegisterPrefixes;

  { static propertys } 

    {class} property DefaultKeepAliveInterval: DDN.mscorlib.DNTimeSpan read get_DefaultKeepAliveInterval;
  end;

  [DNTypeName('System.Net.WebSockets.WebSocket')]
  DNWebSocket = interface(DDN.mscorlib.DNIDisposable)
  ['{01C4C4FE-5452-3F66-9D20-3BE3CD62F509}']
  { getters & setters } 

    function get_CloseStatus: DDN.mscorlib.DNNullable<DNWebSocketCloseStatus>;
    function get_CloseStatusDescription: string;
    function get_SubProtocol: string;
    function get_State: DNWebSocketState;

  { methods } 

    procedure &Abort;
    function CloseAsync(closeStatus: DNWebSocketCloseStatus; statusDescription: string; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask;
    function CloseOutputAsync(closeStatus: DNWebSocketCloseStatus; statusDescription: string; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask;
    procedure Dispose;
    function ReceiveAsync(buffer: DDN.mscorlib.DNArraySegment<Byte>; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<DNWebSocketReceiveResult>;
    function SendAsync(buffer: DDN.mscorlib.DNArraySegment<Byte>; messageType: DNWebSocketMessageType; endOfMessage: Boolean; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CloseStatus: DDN.mscorlib.DNNullable<DNWebSocketCloseStatus> read get_CloseStatus;
    property CloseStatusDescription: string read get_CloseStatusDescription;
    property SubProtocol: string read get_SubProtocol;
    property State: DNWebSocketState read get_State;
  end;

  TDNWebSocket = class(TDNGenericImport<DNWebSocketClass, DNWebSocket>) end;

  //-------------namespace: System.Net.WebSockets----------------
  DNClientWebSocketClass = interface(DNWebSocketClass)
  ['{3E1FD324-B56F-5B93-97A8-0ADB837264E3}']
  { constructors } 

    {class} function init: DNClientWebSocket;

  end;

  [DNTypeName('System.Net.WebSockets.ClientWebSocket')]
  DNClientWebSocket = interface(DNWebSocket)
  ['{0C04C9E1-90E9-3867-806E-47675F7AB1CC}']
  { getters & setters } 

    function get_Options: DNClientWebSocketOptions;
    function get_CloseStatus: DDN.mscorlib.DNNullable<DNWebSocketCloseStatus>;
    function get_CloseStatusDescription: string;
    function get_SubProtocol: string;
    function get_State: DNWebSocketState;

  { methods } 

    function ConnectAsync(uri: DNUri; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask;
    function CloseAsync(closeStatus: DNWebSocketCloseStatus; statusDescription: string; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask;
    function CloseOutputAsync(closeStatus: DNWebSocketCloseStatus; statusDescription: string; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask;
    procedure &Abort;
    procedure Dispose;
    function SendAsync(buffer: DDN.mscorlib.DNArraySegment<Byte>; messageType: DNWebSocketMessageType; endOfMessage: Boolean; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask;
    function ReceiveAsync(buffer: DDN.mscorlib.DNArraySegment<Byte>; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<DNWebSocketReceiveResult>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Options: DNClientWebSocketOptions read get_Options;
    property CloseStatus: DDN.mscorlib.DNNullable<DNWebSocketCloseStatus> read get_CloseStatus;
    property CloseStatusDescription: string read get_CloseStatusDescription;
    property SubProtocol: string read get_SubProtocol;
    property State: DNWebSocketState read get_State;
  end;

  TDNClientWebSocket = class(TDNGenericImport<DNClientWebSocketClass, DNClientWebSocket>) end;

  //-------------namespace: System.Net.WebSockets----------------
  DNWebSocketContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{16B190B3-099C-595B-9953-81708710131B}']
  end;

  [DNTypeName('System.Net.WebSockets.WebSocketContext')]
  DNWebSocketContext = interface(DDN.mscorlib.DNObject)
  ['{B8EFC93E-38BE-362E-A2E0-B397A0E9BF4F}']
  { getters & setters } 

    function get_RequestUri: DNUri;
    function get_Headers: DNNameValueCollection;
    function get_Origin: string;
    function get_SecWebSocketProtocols: DDN.mscorlib.DNIEnumerable<string>;
    function get_SecWebSocketVersion: string;
    function get_SecWebSocketKey: string;
    function get_CookieCollection: DNCookieCollection;
    function get_User: DDN.mscorlib.DNIPrincipal;
    function get_IsAuthenticated: Boolean;
    function get_IsLocal: Boolean;
    function get_IsSecureConnection: Boolean;
    function get_WebSocket: DNWebSocket;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RequestUri: DNUri read get_RequestUri;
    property Headers: DNNameValueCollection read get_Headers;
    property Origin: string read get_Origin;
    property SecWebSocketProtocols: DDN.mscorlib.DNIEnumerable<string> read get_SecWebSocketProtocols;
    property SecWebSocketVersion: string read get_SecWebSocketVersion;
    property SecWebSocketKey: string read get_SecWebSocketKey;
    property CookieCollection: DNCookieCollection read get_CookieCollection;
    property User: DDN.mscorlib.DNIPrincipal read get_User;
    property IsAuthenticated: Boolean read get_IsAuthenticated;
    property IsLocal: Boolean read get_IsLocal;
    property IsSecureConnection: Boolean read get_IsSecureConnection;
    property WebSocket: DNWebSocket read get_WebSocket;
  end;

  TDNWebSocketContext = class(TDNGenericImport<DNWebSocketContextClass, DNWebSocketContext>) end;

  //-------------namespace: System.Net.WebSockets----------------
  DNHttpListenerWebSocketContextClass = interface(DNWebSocketContextClass)
  ['{D2499119-821C-51F9-8CF8-61F79A7CDAF2}']
  end;

  [DNTypeName('System.Net.WebSockets.HttpListenerWebSocketContext')]
  DNHttpListenerWebSocketContext = interface(DNWebSocketContext)
  ['{63B04C18-7C0D-32D7-BA7C-2E635EB0E431}']
  { getters & setters } 

    function get_RequestUri: DNUri;
    function get_Headers: DNNameValueCollection;
    function get_Origin: string;
    function get_SecWebSocketProtocols: DDN.mscorlib.DNIEnumerable<string>;
    function get_SecWebSocketVersion: string;
    function get_SecWebSocketKey: string;
    function get_CookieCollection: DNCookieCollection;
    function get_User: DDN.mscorlib.DNIPrincipal;
    function get_IsAuthenticated: Boolean;
    function get_IsLocal: Boolean;
    function get_IsSecureConnection: Boolean;
    function get_WebSocket: DNWebSocket;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RequestUri: DNUri read get_RequestUri;
    property Headers: DNNameValueCollection read get_Headers;
    property Origin: string read get_Origin;
    property SecWebSocketProtocols: DDN.mscorlib.DNIEnumerable<string> read get_SecWebSocketProtocols;
    property SecWebSocketVersion: string read get_SecWebSocketVersion;
    property SecWebSocketKey: string read get_SecWebSocketKey;
    property CookieCollection: DNCookieCollection read get_CookieCollection;
    property User: DDN.mscorlib.DNIPrincipal read get_User;
    property IsAuthenticated: Boolean read get_IsAuthenticated;
    property IsLocal: Boolean read get_IsLocal;
    property IsSecureConnection: Boolean read get_IsSecureConnection;
    property WebSocket: DNWebSocket read get_WebSocket;
  end;

  TDNHttpListenerWebSocketContext = class(TDNGenericImport<DNHttpListenerWebSocketContextClass, DNHttpListenerWebSocketContext>) end;

  //-------------namespace: System.Net.WebSockets----------------
  DNWebSocketReceiveResultClass = interface(DDN.mscorlib.DNObjectClass)
  ['{90EB861D-4B2F-5108-8A42-AFBE67603617}']
  { constructors } 

    {class} function init(count: Int32; messageType: DNWebSocketMessageType; endOfMessage: Boolean): DNWebSocketReceiveResult; overload;
    {class} function init(count: Int32; messageType: DNWebSocketMessageType; endOfMessage: Boolean; closeStatus: DDN.mscorlib.DNNullable<DNWebSocketCloseStatus>; closeStatusDescription: string): DNWebSocketReceiveResult; overload;

  end;

  [DNTypeName('System.Net.WebSockets.WebSocketReceiveResult')]
  DNWebSocketReceiveResult = interface(DDN.mscorlib.DNObject)
  ['{116931E2-9378-37BD-93CD-56B7246E1324}']
  { getters & setters } 

    function get_Count: Int32;
    function get_EndOfMessage: Boolean;
    function get_MessageType: DNWebSocketMessageType;
    function get_CloseStatus: DDN.mscorlib.DNNullable<DNWebSocketCloseStatus>;
    function get_CloseStatusDescription: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property EndOfMessage: Boolean read get_EndOfMessage;
    property MessageType: DNWebSocketMessageType read get_MessageType;
    property CloseStatus: DDN.mscorlib.DNNullable<DNWebSocketCloseStatus> read get_CloseStatus;
    property CloseStatusDescription: string read get_CloseStatusDescription;
  end;

  TDNWebSocketReceiveResult = class(TDNGenericImport<DNWebSocketReceiveResultClass, DNWebSocketReceiveResult>) end;

  //-------------namespace: System.Net----------------
  DNWebUtilityClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F025BC6E-026E-5160-9637-E0643F90D417}']
  { static methods } 

    {class} function HtmlEncode(value: string): string; overload;
    {class} function HtmlDecode(value: string): string; overload;
    {class} procedure HtmlEncode(value: string; output: DDN.mscorlib.DNTextWriter); overload;
    {class} procedure HtmlDecode(value: string; output: DDN.mscorlib.DNTextWriter); overload;
    {class} function UrlEncode(value: string): string;
    {class} function UrlDecode(encodedValue: string): string;
    {class} function UrlDecodeToBytes(encodedValue: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>;
    {class} function UrlEncodeToBytes(value: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>;

  end;

  [DNTypeName('System.Net.WebUtility')]
  DNWebUtility = interface(DDN.mscorlib.DNObject)
  ['{9D870BF3-658E-3B25-BBA2-7E1E3253AA86}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNWebUtility = class(TDNGenericImport<DNWebUtilityClass, DNWebUtility>) end;

  //-------------namespace: System.ComponentModel----------------
  DNComponentResourceManagerClass = interface(DDN.mscorlib.DNResourceManagerClass)
  ['{C8026ECC-5572-586E-BAC6-8091029943AA}']
  { constructors } 

    {class} function init: DNComponentResourceManager; overload;
    {class} function init(t: DDN.mscorlib.DNType): DNComponentResourceManager; overload;

  end;

  [DNTypeName('System.ComponentModel.ComponentResourceManager')]
  DNComponentResourceManager = interface(DDN.mscorlib.DNResourceManager)
  ['{EADDB29E-C888-3C37-973C-794969319D8C}']
  { getters & setters } 

    function get_BaseName: string;
    function get_IgnoreCase: Boolean;
    procedure set_IgnoreCase(value: Boolean);
    function get_ResourceSetType: DDN.mscorlib.DNType;

  { methods } 

    procedure ApplyResources(value: DDN.mscorlib.DNObject; objectName: string); overload;
    procedure ApplyResources(value: DDN.mscorlib.DNObject; objectName: string; culture: DDN.mscorlib.DNCultureInfo); overload;
    procedure ReleaseAllResources;
    function GetResourceSet(culture: DDN.mscorlib.DNCultureInfo; createIfNotExists: Boolean; tryParents: Boolean): DDN.mscorlib.DNResourceSet;
    function GetString(name: string): string; overload;
    function GetString(name: string; culture: DDN.mscorlib.DNCultureInfo): string; overload;
    function GetObject(name: string): DDN.mscorlib.DNObject; overload;
    function GetObject(name: string; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject; overload;
    function GetStream(name: string): DDN.mscorlib.DNUnmanagedMemoryStream; overload;
    function GetStream(name: string; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNUnmanagedMemoryStream; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BaseName: string read get_BaseName;
    property IgnoreCase: Boolean read get_IgnoreCase write set_IgnoreCase;
    property ResourceSetType: DDN.mscorlib.DNType read get_ResourceSetType;
  end;

  TDNComponentResourceManager = class(TDNGenericImport<DNComponentResourceManagerClass, DNComponentResourceManager>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeProcessHandleClass = interface(DDN.mscorlib.DNSafeHandleZeroOrMinusOneIsInvalidClass)
  ['{50285903-DD89-5807-A074-0FC7884CFF53}']
  { constructors } 

    {class} function init(existingHandle: IntPtr; ownsHandle: Boolean): DNSafeProcessHandle;

  end;

  [DNTypeName('Microsoft.Win32.SafeHandles.SafeProcessHandle')]
  DNSafeProcessHandle = interface(DDN.mscorlib.DNSafeHandleZeroOrMinusOneIsInvalid)
  ['{DE0284C5-043E-3C9C-9BE1-435CF7D36790}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeProcessHandle = class(TDNGenericImport<DNSafeProcessHandleClass, DNSafeProcessHandle>) end;

  //-------------namespace: Microsoft.Win32.SafeHandles----------------
  DNSafeX509ChainHandleClass = interface(DDN.mscorlib.DNSafeHandleZeroOrMinusOneIsInvalidClass)
  ['{96A1E1C1-9546-55C1-BD1E-D27AFE013507}']
  end;

  [DNTypeName('Microsoft.Win32.SafeHandles.SafeX509ChainHandle')]
  DNSafeX509ChainHandle = interface(DDN.mscorlib.DNSafeHandleZeroOrMinusOneIsInvalid)
  ['{B6180C13-A62E-39BA-B7A1-9EA91CFBC3A7}']
  { getters & setters } 

    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNSafeX509ChainHandle = class(TDNGenericImport<DNSafeX509ChainHandleClass, DNSafeX509ChainHandle>) end;

  //-------------namespace: System.Security.Authentication.ExtendedProtection----------------
  DNChannelBindingClass = interface(DDN.mscorlib.DNSafeHandleZeroOrMinusOneIsInvalidClass)
  ['{5D76701B-1FD2-53F0-9264-ADF75E1A6685}']
  end;

  [DNTypeName('System.Security.Authentication.ExtendedProtection.ChannelBinding')]
  DNChannelBinding = interface(DDN.mscorlib.DNSafeHandleZeroOrMinusOneIsInvalid)
  ['{8E6DBC05-A506-3E26-A004-7103E8CA8A8B}']
  { getters & setters } 

    function get_Size: Int32;
    function get_IsInvalid: Boolean;
    function get_IsClosed: Boolean;

  { methods } 

    function DangerousGetHandle: IntPtr;
    procedure Close;
    procedure Dispose;
    procedure SetHandleAsInvalid;
    procedure DangerousAddRef(out success: Boolean);
    procedure DangerousRelease;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Size: Int32 read get_Size;
    property IsInvalid: Boolean read get_IsInvalid;
    property IsClosed: Boolean read get_IsClosed;
  end;

  TDNChannelBinding = class(TDNGenericImport<DNChannelBindingClass, DNChannelBinding>) end;

  //-------------namespace: System.Runtime.InteropServices----------------
  DNHandleCollectorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5DC5F511-2DC8-5915-ABF3-12740DA2BE2E}']
  { constructors } 

    {class} function init(name: string; initialThreshold: Int32): DNHandleCollector; overload;
    {class} function init(name: string; initialThreshold: Int32; maximumThreshold: Int32): DNHandleCollector; overload;

  end;

  [DNTypeName('System.Runtime.InteropServices.HandleCollector')]
  DNHandleCollector = interface(DDN.mscorlib.DNObject)
  ['{548C90F4-10F5-38B9-9C37-FAE2AA9E257A}']
  { getters & setters } 

    function get_Count: Int32;
    function get_InitialThreshold: Int32;
    function get_MaximumThreshold: Int32;
    function get_Name: string;

  { methods } 

    procedure Add;
    procedure Remove;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property InitialThreshold: Int32 read get_InitialThreshold;
    property MaximumThreshold: Int32 read get_MaximumThreshold;
    property Name: string read get_Name;
  end;

  TDNHandleCollector = class(TDNGenericImport<DNHandleCollectorClass, DNHandleCollector>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNFrameworkNameClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DACFE325-96FA-5FEE-8665-021F12739DA2}']
  { constructors } 

    {class} function init(identifier: string; version: DDN.mscorlib.DNVersion): DNFrameworkName; overload;
    {class} function init(identifier: string; version: DDN.mscorlib.DNVersion; profile: string): DNFrameworkName; overload;
    {class} function init(frameworkName: string): DNFrameworkName; overload;

  end;

  [DNTypeName('System.Runtime.Versioning.FrameworkName')]
  DNFrameworkName = interface(DDN.mscorlib.DNObject)
  ['{80B9C665-1969-3BA7-9E64-BCED9A56B36E}']
  { getters & setters } 

    function get_Identifier: string;
    function get_Version: DDN.mscorlib.DNVersion;
    function get_Profile: string;
    function get_FullName: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(other: DNFrameworkName): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Identifier: string read get_Identifier;
    property Version: DDN.mscorlib.DNVersion read get_Version;
    property Profile: string read get_Profile;
    property FullName: string read get_FullName;
  end;

  TDNFrameworkName = class(TDNGenericImport<DNFrameworkNameClass, DNFrameworkName>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNSemaphoreAccessRuleClass = interface(DDN.mscorlib.DNAccessRuleClass)
  ['{B9E2774D-6886-5235-B2B8-394C16F234BB}']
  { constructors } 

    {class} function init(identity: DDN.mscorlib.DNIdentityReference; eventRights: DNSemaphoreRights; &type: DDN.mscorlib.DNAccessControlType): DNSemaphoreAccessRule; overload;
    {class} function init(identity: string; eventRights: DNSemaphoreRights; &type: DDN.mscorlib.DNAccessControlType): DNSemaphoreAccessRule; overload;

  end;

  [DNTypeName('System.Security.AccessControl.SemaphoreAccessRule')]
  DNSemaphoreAccessRule = interface(DDN.mscorlib.DNAccessRule)
  ['{41C2A202-8369-3D19-B530-EF05E876DD76}']
  { getters & setters } 

    function get_SemaphoreRights: DNSemaphoreRights;
    function get_AccessControlType: DDN.mscorlib.DNAccessControlType;
    function get_IdentityReference: DDN.mscorlib.DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DDN.mscorlib.DNInheritanceFlags;
    function get_PropagationFlags: DDN.mscorlib.DNPropagationFlags;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SemaphoreRights: DNSemaphoreRights read get_SemaphoreRights;
    property AccessControlType: DDN.mscorlib.DNAccessControlType read get_AccessControlType;
    property IdentityReference: DDN.mscorlib.DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DDN.mscorlib.DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DDN.mscorlib.DNPropagationFlags read get_PropagationFlags;
  end;

  TDNSemaphoreAccessRule = class(TDNGenericImport<DNSemaphoreAccessRuleClass, DNSemaphoreAccessRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNSemaphoreAuditRuleClass = interface(DDN.mscorlib.DNAuditRuleClass)
  ['{28FB8AF2-A037-5BEC-B8EB-593097033F98}']
  { constructors } 

    {class} function init(identity: DDN.mscorlib.DNIdentityReference; eventRights: DNSemaphoreRights; flags: DDN.mscorlib.DNAuditFlags): DNSemaphoreAuditRule;

  end;

  [DNTypeName('System.Security.AccessControl.SemaphoreAuditRule')]
  DNSemaphoreAuditRule = interface(DDN.mscorlib.DNAuditRule)
  ['{0B2C948C-EE86-38DB-8D80-BE102FEF7278}']
  { getters & setters } 

    function get_SemaphoreRights: DNSemaphoreRights;
    function get_AuditFlags: DDN.mscorlib.DNAuditFlags;
    function get_IdentityReference: DDN.mscorlib.DNIdentityReference;
    function get_IsInherited: Boolean;
    function get_InheritanceFlags: DDN.mscorlib.DNInheritanceFlags;
    function get_PropagationFlags: DDN.mscorlib.DNPropagationFlags;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SemaphoreRights: DNSemaphoreRights read get_SemaphoreRights;
    property AuditFlags: DDN.mscorlib.DNAuditFlags read get_AuditFlags;
    property IdentityReference: DDN.mscorlib.DNIdentityReference read get_IdentityReference;
    property IsInherited: Boolean read get_IsInherited;
    property InheritanceFlags: DDN.mscorlib.DNInheritanceFlags read get_InheritanceFlags;
    property PropagationFlags: DDN.mscorlib.DNPropagationFlags read get_PropagationFlags;
  end;

  TDNSemaphoreAuditRule = class(TDNGenericImport<DNSemaphoreAuditRuleClass, DNSemaphoreAuditRule>) end;

  //-------------namespace: System.Security.AccessControl----------------
  DNSemaphoreSecurityClass = interface(DDN.mscorlib.DNNativeObjectSecurityClass)
  ['{958C2499-EABA-528A-AA75-B8B6B55FD37A}']
  { constructors } 

    {class} function init: DNSemaphoreSecurity; overload;
    {class} function init(name: string; includeSections: DDN.mscorlib.DNAccessControlSections): DNSemaphoreSecurity; overload;

  end;

  [DNTypeName('System.Security.AccessControl.SemaphoreSecurity')]
  DNSemaphoreSecurity = interface(DDN.mscorlib.DNNativeObjectSecurity)
  ['{1F4A78A8-06E5-34CC-BFB4-FCA7F889E4F2}']
  { getters & setters } 

    function get_AccessRightType: DDN.mscorlib.DNType;
    function get_AccessRuleType: DDN.mscorlib.DNType;
    function get_AuditRuleType: DDN.mscorlib.DNType;
    function get_AreAccessRulesProtected: Boolean;
    function get_AreAuditRulesProtected: Boolean;
    function get_AreAccessRulesCanonical: Boolean;
    function get_AreAuditRulesCanonical: Boolean;

  { methods } 

    function AccessRuleFactory(identityReference: DDN.mscorlib.DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DDN.mscorlib.DNInheritanceFlags; propagationFlags: DDN.mscorlib.DNPropagationFlags; &type: DDN.mscorlib.DNAccessControlType): DDN.mscorlib.DNAccessRule;
    function AuditRuleFactory(identityReference: DDN.mscorlib.DNIdentityReference; accessMask: Int32; isInherited: Boolean; inheritanceFlags: DDN.mscorlib.DNInheritanceFlags; propagationFlags: DDN.mscorlib.DNPropagationFlags; flags: DDN.mscorlib.DNAuditFlags): DDN.mscorlib.DNAuditRule;
    procedure AddAccessRule(rule: DNSemaphoreAccessRule);
    procedure SetAccessRule(rule: DNSemaphoreAccessRule);
    procedure ResetAccessRule(rule: DNSemaphoreAccessRule);
    function RemoveAccessRule(rule: DNSemaphoreAccessRule): Boolean;
    procedure RemoveAccessRuleAll(rule: DNSemaphoreAccessRule);
    procedure RemoveAccessRuleSpecific(rule: DNSemaphoreAccessRule);
    procedure AddAuditRule(rule: DNSemaphoreAuditRule);
    procedure SetAuditRule(rule: DNSemaphoreAuditRule);
    function RemoveAuditRule(rule: DNSemaphoreAuditRule): Boolean;
    procedure RemoveAuditRuleAll(rule: DNSemaphoreAuditRule);
    procedure RemoveAuditRuleSpecific(rule: DNSemaphoreAuditRule);
    function GetAccessRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DDN.mscorlib.DNType): DDN.mscorlib.DNAuthorizationRuleCollection;
    function GetAuditRules(includeExplicit: Boolean; includeInherited: Boolean; targetType: DDN.mscorlib.DNType): DDN.mscorlib.DNAuthorizationRuleCollection;
    function GetOwner(targetType: DDN.mscorlib.DNType): DDN.mscorlib.DNIdentityReference;
    procedure SetOwner(identity: DDN.mscorlib.DNIdentityReference);
    function GetGroup(targetType: DDN.mscorlib.DNType): DDN.mscorlib.DNIdentityReference;
    procedure SetGroup(identity: DDN.mscorlib.DNIdentityReference);
    procedure PurgeAccessRules(identity: DDN.mscorlib.DNIdentityReference);
    procedure PurgeAuditRules(identity: DDN.mscorlib.DNIdentityReference);
    procedure SetAccessRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    procedure SetAuditRuleProtection(isProtected: Boolean; preserveInheritance: Boolean);
    function GetSecurityDescriptorSddlForm(includeSections: DDN.mscorlib.DNAccessControlSections): string;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string); overload;
    procedure SetSecurityDescriptorSddlForm(sddlForm: string; includeSections: DDN.mscorlib.DNAccessControlSections); overload;
    function GetSecurityDescriptorBinaryForm: TArray<Byte>;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>); overload;
    procedure SetSecurityDescriptorBinaryForm(binaryForm: TArray<Byte>; includeSections: DDN.mscorlib.DNAccessControlSections); overload;
    function ModifyAccessRule(modification: DDN.mscorlib.DNAccessControlModification; rule: DDN.mscorlib.DNAccessRule; out modified: Boolean): Boolean;
    function ModifyAuditRule(modification: DDN.mscorlib.DNAccessControlModification; rule: DDN.mscorlib.DNAuditRule; out modified: Boolean): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AccessRightType: DDN.mscorlib.DNType read get_AccessRightType;
    property AccessRuleType: DDN.mscorlib.DNType read get_AccessRuleType;
    property AuditRuleType: DDN.mscorlib.DNType read get_AuditRuleType;
    property AreAccessRulesProtected: Boolean read get_AreAccessRulesProtected;
    property AreAuditRulesProtected: Boolean read get_AreAuditRulesProtected;
    property AreAccessRulesCanonical: Boolean read get_AreAccessRulesCanonical;
    property AreAuditRulesCanonical: Boolean read get_AreAuditRulesCanonical;
  end;

  TDNSemaphoreSecurity = class(TDNGenericImport<DNSemaphoreSecurityClass, DNSemaphoreSecurity>) end;

  //-------------namespace: System.Security.Authentication.ExtendedProtection----------------
  DNExtendedProtectionPolicyClass = interface(DNObjectClass)
  ['{A1770989-4610-5C5F-B07F-3CACC257CF73}']
  { static getter & setter } 

    {class} function get_OSSupportsExtendedProtection: Boolean;

  { constructors } 

    {class} function init(policyEnforcement: DNPolicyEnforcement; protectionScenario: DNProtectionScenario; customServiceNames: DNServiceNameCollection): DNExtendedProtectionPolicy; overload;
    {class} function init(policyEnforcement: DNPolicyEnforcement; protectionScenario: DNProtectionScenario; customServiceNames: DDN.mscorlib.DNICollection): DNExtendedProtectionPolicy; overload;
    {class} function init(policyEnforcement: DNPolicyEnforcement; customChannelBinding: DNChannelBinding): DNExtendedProtectionPolicy; overload;
    {class} function init(policyEnforcement: DNPolicyEnforcement): DNExtendedProtectionPolicy; overload;

  { static propertys } 

    {class} property OSSupportsExtendedProtection: Boolean read get_OSSupportsExtendedProtection;
  end;

  [DNTypeName('System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy')]
  DNExtendedProtectionPolicy = interface(DDN.mscorlib.DNISerializable)
  ['{4C0941DD-9168-3ACA-89A4-36386C4D2281}']
  { getters & setters } 

    function get_CustomServiceNames: DNServiceNameCollection;
    function get_PolicyEnforcement: DNPolicyEnforcement;
    function get_ProtectionScenario: DNProtectionScenario;
    function get_CustomChannelBinding: DNChannelBinding;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property CustomServiceNames: DNServiceNameCollection read get_CustomServiceNames;
    property PolicyEnforcement: DNPolicyEnforcement read get_PolicyEnforcement;
    property ProtectionScenario: DNProtectionScenario read get_ProtectionScenario;
    property CustomChannelBinding: DNChannelBinding read get_CustomChannelBinding;
  end;

  TDNExtendedProtectionPolicy = class(TDNGenericImport<DNExtendedProtectionPolicyClass, DNExtendedProtectionPolicy>) end;

  //-------------namespace: System.Security.Authentication.ExtendedProtection----------------
  DNTokenBindingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1B8228F7-8067-5C99-AE44-DD47B671F5AC}']
  end;

  [DNTypeName('System.Security.Authentication.ExtendedProtection.TokenBinding')]
  DNTokenBinding = interface(DDN.mscorlib.DNObject)
  ['{1682F1E3-342B-39DC-9DBF-63988669CF82}']
  { getters & setters } 

    function get_BindingType: DNTokenBindingType;

  { methods } 

    function GetRawTokenBindingId: TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BindingType: DNTokenBindingType read get_BindingType;
  end;

  TDNTokenBinding = class(TDNGenericImport<DNTokenBindingClass, DNTokenBinding>) end;

  //-------------namespace: System.Net----------------
  DNHttpListenerBasicIdentityClass = interface(DDN.mscorlib.DNGenericIdentityClass)
  ['{4B4F4D46-99EC-57EF-94B6-BE4C27CEDE6E}']
  { constructors } 

    {class} function init(username: string; password: string): DNHttpListenerBasicIdentity;

  end;

  [DNTypeName('System.Net.HttpListenerBasicIdentity')]
  DNHttpListenerBasicIdentity = interface(DDN.mscorlib.DNGenericIdentity)
  ['{2872BA3B-E4C7-341A-A505-37A1FDB7E1BD}']
  { getters & setters } 

    function get_Password: string;
    function get_Claims: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNClaim>;
    function get_Name: string;
    function get_AuthenticationType: string;
    function get_IsAuthenticated: Boolean;
    function get_Actor: DDN.mscorlib.DNClaimsIdentity;
    procedure set_Actor(value: DDN.mscorlib.DNClaimsIdentity);
    function get_BootstrapContext: DDN.mscorlib.DNObject;
    procedure set_BootstrapContext(value: DDN.mscorlib.DNObject);
    function get_Label: string;
    procedure set_Label(value: string);
    function get_NameClaimType: string;
    function get_RoleClaimType: string;

  { methods } 

    function Clone: DDN.mscorlib.DNClaimsIdentity;
    procedure AddClaim(claim: DDN.mscorlib.DNClaim);
    procedure AddClaims(claims: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNClaim>);
    function TryRemoveClaim(claim: DDN.mscorlib.DNClaim): Boolean;
    procedure RemoveClaim(claim: DDN.mscorlib.DNClaim);
    function FindAll(match: DDN.mscorlib.DNPredicate<DDN.mscorlib.DNClaim>): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNClaim>; overload;
    function FindAll(&type: string): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNClaim>; overload;
    function HasClaim(match: DDN.mscorlib.DNPredicate<DDN.mscorlib.DNClaim>): Boolean; overload;
    function HasClaim(&type: string; value: string): Boolean; overload;
    function FindFirst(match: DDN.mscorlib.DNPredicate<DDN.mscorlib.DNClaim>): DDN.mscorlib.DNClaim; overload;
    function FindFirst(&type: string): DDN.mscorlib.DNClaim; overload;
    procedure WriteTo(writer: DDN.mscorlib.DNBinaryWriter);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Password: string read get_Password;
    property Claims: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNClaim> read get_Claims;
    property Name: string read get_Name;
    property AuthenticationType: string read get_AuthenticationType;
    property IsAuthenticated: Boolean read get_IsAuthenticated;
    property Actor: DDN.mscorlib.DNClaimsIdentity read get_Actor write set_Actor;
    property BootstrapContext: DDN.mscorlib.DNObject read get_BootstrapContext write set_BootstrapContext;
    property &Label: string read get_Label write set_Label;
    property NameClaimType: string read get_NameClaimType;
    property RoleClaimType: string read get_RoleClaimType;
  end;

  TDNHttpListenerBasicIdentity = class(TDNGenericImport<DNHttpListenerBasicIdentityClass, DNHttpListenerBasicIdentity>) end;

  //-------------namespace: System.Security.Claims----------------
  DNDynamicRoleClaimProviderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{971EB20C-3CBB-5A3E-9562-50D99FD9EF4E}']
  { static methods } 

    {class} procedure AddDynamicRoleClaims(claimsIdentity: DDN.mscorlib.DNClaimsIdentity; claims: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNClaim>);

  end;

  [DNTypeName('System.Security.Claims.DynamicRoleClaimProvider')]
  DNDynamicRoleClaimProvider = interface(DDN.mscorlib.DNObject)
  ['{616DA315-DD06-34DC-BCB9-17C1B302E09A}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDynamicRoleClaimProvider = class(TDNGenericImport<DNDynamicRoleClaimProviderClass, DNDynamicRoleClaimProvider>) end;

  //-------------namespace: System.Net----------------
  DNDnsPermissionClass = interface(DDN.mscorlib.DNCodeAccessPermissionClass)
  ['{170E0787-FDED-5292-9D34-95601B49AAE1}']
  { constructors } 

    {class} function init(state: DDN.mscorlib.DNPermissionState): DNDnsPermission;

  end;

  [DNTypeName('System.Net.DnsPermission')]
  DNDnsPermission = interface(DDN.mscorlib.DNCodeAccessPermission)
  ['{0F604450-276F-3D75-90BC-A748AB48F8A1}']
  { methods } 

    function IsUnrestricted: Boolean;
    function Copy: DDN.mscorlib.DNIPermission;
    function Union(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    procedure FromXml(securityElement: DDN.mscorlib.DNSecurityElement);
    function ToXml: DDN.mscorlib.DNSecurityElement;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNDnsPermission = class(TDNGenericImport<DNDnsPermissionClass, DNDnsPermission>) end;

  //-------------namespace: System.Net.Mail----------------
  DNSmtpPermissionClass = interface(DDN.mscorlib.DNCodeAccessPermissionClass)
  ['{03BFA315-4F20-5293-AFAA-FBABEC44497D}']
  { constructors } 

    {class} function init(state: DDN.mscorlib.DNPermissionState): DNSmtpPermission; overload;
    {class} function init(unrestricted: Boolean): DNSmtpPermission; overload;
    {class} function init(access: DNSmtpAccess): DNSmtpPermission; overload;

  end;

  [DNTypeName('System.Net.Mail.SmtpPermission')]
  DNSmtpPermission = interface(DDN.mscorlib.DNCodeAccessPermission)
  ['{28CFC45A-0176-331C-99B9-E3604FE2F852}']
  { getters & setters } 

    function get_Access: DNSmtpAccess;

  { methods } 

    procedure AddPermission(access: DNSmtpAccess);
    function IsUnrestricted: Boolean;
    function Copy: DDN.mscorlib.DNIPermission;
    function Union(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    procedure FromXml(securityElement: DDN.mscorlib.DNSecurityElement);
    function ToXml: DDN.mscorlib.DNSecurityElement;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Access: DNSmtpAccess read get_Access;
  end;

  TDNSmtpPermission = class(TDNGenericImport<DNSmtpPermissionClass, DNSmtpPermission>) end;

  //-------------namespace: System.Net.NetworkInformation----------------
  DNNetworkInformationPermissionClass = interface(DDN.mscorlib.DNCodeAccessPermissionClass)
  ['{F231C382-728C-5A1D-8AAC-366B6C35FBFF}']
  { constructors } 

    {class} function init(state: DDN.mscorlib.DNPermissionState): DNNetworkInformationPermission; overload;
    {class} function init(access: DNNetworkInformationAccess): DNNetworkInformationPermission; overload;

  end;

  [DNTypeName('System.Net.NetworkInformation.NetworkInformationPermission')]
  DNNetworkInformationPermission = interface(DDN.mscorlib.DNCodeAccessPermission)
  ['{A8DC0AEE-3256-363B-9D3A-9A9FD6C668B3}']
  { getters & setters } 

    function get_Access: DNNetworkInformationAccess;

  { methods } 

    procedure AddPermission(access: DNNetworkInformationAccess);
    function IsUnrestricted: Boolean;
    function Copy: DDN.mscorlib.DNIPermission;
    function Union(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    procedure FromXml(securityElement: DDN.mscorlib.DNSecurityElement);
    function ToXml: DDN.mscorlib.DNSecurityElement;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Access: DNNetworkInformationAccess read get_Access;
  end;

  TDNNetworkInformationPermission = class(TDNGenericImport<DNNetworkInformationPermissionClass, DNNetworkInformationPermission>) end;

  //-------------namespace: System.Net----------------
  DNSocketPermissionClass = interface(DDN.mscorlib.DNCodeAccessPermissionClass)
  ['{D1BE7A65-372C-507F-A89F-4F0E370BCC23}']
  { constructors } 

    {class} function init(state: DDN.mscorlib.DNPermissionState): DNSocketPermission; overload;
    {class} function init(access: DNNetworkAccess; transport: DNTransportType; hostName: string; portNumber: Int32): DNSocketPermission; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_AllPorts: Int32;

  { static fields } 

    {class} property AllPorts: Int32 read __fakeFieldGet_AllPorts;

  end;

  [DNTypeName('System.Net.SocketPermission')]
  DNSocketPermission = interface(DDN.mscorlib.DNCodeAccessPermission)
  ['{FA158227-1E87-3C57-90A8-8B0401E08BD5}']
  { getters & setters } 

    function get_ConnectList: DDN.mscorlib.DNIEnumerator;
    function get_AcceptList: DDN.mscorlib.DNIEnumerator;

  { methods } 

    procedure AddPermission(access: DNNetworkAccess; transport: DNTransportType; hostName: string; portNumber: Int32);
    function IsUnrestricted: Boolean;
    function Copy: DDN.mscorlib.DNIPermission;
    function Union(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    procedure FromXml(securityElement: DDN.mscorlib.DNSecurityElement);
    function ToXml: DDN.mscorlib.DNSecurityElement;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ConnectList: DDN.mscorlib.DNIEnumerator read get_ConnectList;
    property AcceptList: DDN.mscorlib.DNIEnumerator read get_AcceptList;
  end;

  TDNSocketPermission = class(TDNGenericImport<DNSocketPermissionClass, DNSocketPermission>)
  public const
   AllPorts = -1;
  end;

  //-------------namespace: System.Net----------------
  DNWebPermissionClass = interface(DDN.mscorlib.DNCodeAccessPermissionClass)
  ['{ADD888D1-A58F-52AF-9A51-A047FCDAEA35}']
  { constructors } 

    {class} function init(state: DDN.mscorlib.DNPermissionState): DNWebPermission; overload;
    {class} function init: DNWebPermission; overload;
    {class} function init(access: DNNetworkAccess; uriRegex: DNRegex): DNWebPermission; overload;
    {class} function init(access: DNNetworkAccess; uriString: string): DNWebPermission; overload;

  end;

  [DNTypeName('System.Net.WebPermission')]
  DNWebPermission = interface(DDN.mscorlib.DNCodeAccessPermission)
  ['{61C11A2D-2EC2-3C5B-8F8F-F40A450F57DA}']
  { getters & setters } 

    function get_ConnectList: DDN.mscorlib.DNIEnumerator;
    function get_AcceptList: DDN.mscorlib.DNIEnumerator;

  { methods } 

    procedure AddPermission(access: DNNetworkAccess; uriString: string); overload;
    function IsUnrestricted: Boolean;
    function Copy: DDN.mscorlib.DNIPermission;
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    function Union(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    procedure AddPermission(access: DNNetworkAccess; uriRegex: DNRegex); overload;
    procedure FromXml(securityElement: DDN.mscorlib.DNSecurityElement);
    function ToXml: DDN.mscorlib.DNSecurityElement;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ConnectList: DDN.mscorlib.DNIEnumerator read get_ConnectList;
    property AcceptList: DDN.mscorlib.DNIEnumerator read get_AcceptList;
  end;

  TDNWebPermission = class(TDNGenericImport<DNWebPermissionClass, DNWebPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNResourcePermissionBaseClass = interface(DDN.mscorlib.DNCodeAccessPermissionClass)
  ['{9A23B893-2A39-5444-AE24-2EB93B74A7C7}']
  { static fields getter & setter } 

   function __fakeFieldGet_Any: string;
   function __fakeFieldGet_Local: string;

  { static fields } 

    {class} property Any: string read __fakeFieldGet_Any;
    {class} property Local: string read __fakeFieldGet_Local;

  end;

  [DNTypeName('System.Security.Permissions.ResourcePermissionBase')]
  DNResourcePermissionBase = interface(DDN.mscorlib.DNCodeAccessPermission)
  ['{0F492FB2-4437-3DB0-8CEB-F90A4F76BB22}']
  { methods } 

    procedure FromXml(securityElement: DDN.mscorlib.DNSecurityElement);
    function Copy: DDN.mscorlib.DNIPermission;
    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    function IsUnrestricted: Boolean;
    function Union(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    function ToXml: DDN.mscorlib.DNSecurityElement;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNResourcePermissionBase = class(TDNGenericImport<DNResourcePermissionBaseClass, DNResourcePermissionBase>)
  public const
   Any = '*';
   Local = '.';
  end;

  //-------------namespace: System.Diagnostics----------------
  DNEventLogPermissionClass = interface(DNResourcePermissionBaseClass)
  ['{2063DB1B-1C87-5075-B484-12D8514B8475}']
  { constructors } 

    {class} function init: DNEventLogPermission; overload;
    {class} function init(state: DDN.mscorlib.DNPermissionState): DNEventLogPermission; overload;
    {class} function init(permissionAccess: DNEventLogPermissionAccess; machineName: string): DNEventLogPermission; overload;
    {class} function init(permissionAccessEntries: TArray<DNEventLogPermissionEntry>): DNEventLogPermission; overload;

  end;

  [DNTypeName('System.Diagnostics.EventLogPermission')]
  DNEventLogPermission = interface(DNResourcePermissionBase)
  ['{55EBA4C3-D73E-3173-9198-C187FD31564E}']
  { getters & setters } 

    function get_PermissionEntries: DNEventLogPermissionEntryCollection;

  { methods } 

    procedure FromXml(securityElement: DDN.mscorlib.DNSecurityElement);
    function Copy: DDN.mscorlib.DNIPermission;
    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    function IsUnrestricted: Boolean;
    function Union(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    function ToXml: DDN.mscorlib.DNSecurityElement;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property PermissionEntries: DNEventLogPermissionEntryCollection read get_PermissionEntries;
  end;

  TDNEventLogPermission = class(TDNGenericImport<DNEventLogPermissionClass, DNEventLogPermission>) end;

  //-------------namespace: System.Diagnostics----------------
  DNPerformanceCounterPermissionClass = interface(DNResourcePermissionBaseClass)
  ['{A68FCAFC-45C1-5006-A51D-50EBB9F1D3F7}']
  { constructors } 

    {class} function init: DNPerformanceCounterPermission; overload;
    {class} function init(state: DDN.mscorlib.DNPermissionState): DNPerformanceCounterPermission; overload;
    {class} function init(permissionAccess: DNPerformanceCounterPermissionAccess; machineName: string; categoryName: string): DNPerformanceCounterPermission; overload;
    {class} function init(permissionAccessEntries: TArray<DNPerformanceCounterPermissionEntry>): DNPerformanceCounterPermission; overload;

  end;

  [DNTypeName('System.Diagnostics.PerformanceCounterPermission')]
  DNPerformanceCounterPermission = interface(DNResourcePermissionBase)
  ['{0931B1ED-F245-3B40-877A-4D1ABF365FB1}']
  { getters & setters } 

    function get_PermissionEntries: DNPerformanceCounterPermissionEntryCollection;

  { methods } 

    procedure FromXml(securityElement: DDN.mscorlib.DNSecurityElement);
    function Copy: DDN.mscorlib.DNIPermission;
    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    function IsUnrestricted: Boolean;
    function Union(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    function ToXml: DDN.mscorlib.DNSecurityElement;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property PermissionEntries: DNPerformanceCounterPermissionEntryCollection read get_PermissionEntries;
  end;

  TDNPerformanceCounterPermission = class(TDNGenericImport<DNPerformanceCounterPermissionClass, DNPerformanceCounterPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNStorePermissionClass = interface(DDN.mscorlib.DNCodeAccessPermissionClass)
  ['{037C4231-1B3A-5D1B-B590-D356FC87865E}']
  { constructors } 

    {class} function init(state: DDN.mscorlib.DNPermissionState): DNStorePermission; overload;
    {class} function init(flag: DNStorePermissionFlags): DNStorePermission; overload;

  end;

  [DNTypeName('System.Security.Permissions.StorePermission')]
  DNStorePermission = interface(DDN.mscorlib.DNCodeAccessPermission)
  ['{177182E3-907D-3E3C-A3C2-E726717B3E35}']
  { getters & setters } 

    function get_Flags: DNStorePermissionFlags;
    procedure set_Flags(value: DNStorePermissionFlags);

  { methods } 

    function IsUnrestricted: Boolean;
    function Copy: DDN.mscorlib.DNIPermission;
    function Union(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    function ToXml: DDN.mscorlib.DNSecurityElement;
    procedure FromXml(securityElement: DDN.mscorlib.DNSecurityElement);
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Flags: DNStorePermissionFlags read get_Flags write set_Flags;
  end;

  TDNStorePermission = class(TDNGenericImport<DNStorePermissionClass, DNStorePermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNTypeDescriptorPermissionClass = interface(DDN.mscorlib.DNCodeAccessPermissionClass)
  ['{1EE41C04-884A-5677-916A-093A2795BCF4}']
  { constructors } 

    {class} function init(state: DDN.mscorlib.DNPermissionState): DNTypeDescriptorPermission; overload;
    {class} function init(flag: DNTypeDescriptorPermissionFlags): DNTypeDescriptorPermission; overload;

  end;

  [DNTypeName('System.Security.Permissions.TypeDescriptorPermission')]
  DNTypeDescriptorPermission = interface(DDN.mscorlib.DNCodeAccessPermission)
  ['{14300D95-54B0-3CA0-B9A9-EC06ECC72151}']
  { getters & setters } 

    function get_Flags: DNTypeDescriptorPermissionFlags;
    procedure set_Flags(value: DNTypeDescriptorPermissionFlags);

  { methods } 

    function IsUnrestricted: Boolean;
    function Copy: DDN.mscorlib.DNIPermission;
    function Union(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    function ToXml: DDN.mscorlib.DNSecurityElement;
    procedure FromXml(securityElement: DDN.mscorlib.DNSecurityElement);
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Flags: DNTypeDescriptorPermissionFlags read get_Flags write set_Flags;
  end;

  TDNTypeDescriptorPermission = class(TDNGenericImport<DNTypeDescriptorPermissionClass, DNTypeDescriptorPermission>) end;

  //-------------namespace: System.Web----------------
  DNAspNetHostingPermissionClass = interface(DDN.mscorlib.DNCodeAccessPermissionClass)
  ['{362D3E4E-0832-5196-8446-BE991A2A5736}']
  { constructors } 

    {class} function init(state: DDN.mscorlib.DNPermissionState): DNAspNetHostingPermission; overload;
    {class} function init(level: DNAspNetHostingPermissionLevel): DNAspNetHostingPermission; overload;

  end;

  [DNTypeName('System.Web.AspNetHostingPermission')]
  DNAspNetHostingPermission = interface(DDN.mscorlib.DNCodeAccessPermission)
  ['{935ED3CD-FF9C-3973-ABD1-C03865891642}']
  { getters & setters } 

    function get_Level: DNAspNetHostingPermissionLevel;
    procedure set_Level(value: DNAspNetHostingPermissionLevel);

  { methods } 

    function IsUnrestricted: Boolean;
    function Copy: DDN.mscorlib.DNIPermission;
    function Union(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    procedure FromXml(securityElement: DDN.mscorlib.DNSecurityElement);
    function ToXml: DDN.mscorlib.DNSecurityElement;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Level: DNAspNetHostingPermissionLevel read get_Level write set_Level;
  end;

  TDNAspNetHostingPermission = class(TDNGenericImport<DNAspNetHostingPermissionClass, DNAspNetHostingPermission>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNAsnEncodedDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{41451666-DB2E-5A86-9C12-61A4BC90CE3B}']
  { constructors } 

    {class} function init(rawData: TArray<Byte>): DNAsnEncodedData; overload;
    {class} function init(oid: string; rawData: TArray<Byte>): DNAsnEncodedData; overload;
    {class} function init(oid: DNOid; rawData: TArray<Byte>): DNAsnEncodedData; overload;
    {class} function init(asnEncodedData: DNAsnEncodedData): DNAsnEncodedData; overload;

  end;

  [DNTypeName('System.Security.Cryptography.AsnEncodedData')]
  DNAsnEncodedData = interface(DDN.mscorlib.DNObject)
  ['{F78F76FC-8396-30E9-A49D-9D3B379319BB}']
  { getters & setters } 

    function get_Oid: DNOid;
    procedure set_Oid(value: DNOid);
    function get_RawData: TArray<Byte>;
    procedure set_RawData(value: TArray<Byte>);

  { methods } 

    procedure CopyFrom(asnEncodedData: DNAsnEncodedData);
    function Format(multiLine: Boolean): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Oid: DNOid read get_Oid write set_Oid;
    property RawData: TArray<Byte> read get_RawData write set_RawData;
  end;

  TDNAsnEncodedData = class(TDNGenericImport<DNAsnEncodedDataClass, DNAsnEncodedData>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX500DistinguishedNameClass = interface(DNAsnEncodedDataClass)
  ['{6296CDAD-6038-561E-A108-F2593A667CF4}']
  { constructors } 

    {class} function init(encodedDistinguishedName: TArray<Byte>): DNX500DistinguishedName; overload;
    {class} function init(encodedDistinguishedName: DNAsnEncodedData): DNX500DistinguishedName; overload;
    {class} function init(distinguishedName: DNX500DistinguishedName): DNX500DistinguishedName; overload;
    {class} function init(distinguishedName: string): DNX500DistinguishedName; overload;
    {class} function init(distinguishedName: string; flag: DNX500DistinguishedNameFlags): DNX500DistinguishedName; overload;

  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.X500DistinguishedName')]
  DNX500DistinguishedName = interface(DNAsnEncodedData)
  ['{1DE530D9-F5EE-3160-AF35-0D439B03D544}']
  { getters & setters } 

    function get_Name: string;
    function get_Oid: DNOid;
    procedure set_Oid(value: DNOid);
    function get_RawData: TArray<Byte>;
    procedure set_RawData(value: TArray<Byte>);

  { methods } 

    function Decode(flag: DNX500DistinguishedNameFlags): string;
    function Format(multiLine: Boolean): string;
    procedure CopyFrom(asnEncodedData: DNAsnEncodedData);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Oid: DNOid read get_Oid write set_Oid;
    property RawData: TArray<Byte> read get_RawData write set_RawData;
  end;

  TDNX500DistinguishedName = class(TDNGenericImport<DNX500DistinguishedNameClass, DNX500DistinguishedName>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX509ExtensionClass = interface(DNAsnEncodedDataClass)
  ['{82D67389-E798-59CB-AA5E-CA081B16A10E}']
  { constructors } 

    {class} function init(oid: string; rawData: TArray<Byte>; critical: Boolean): DNX509Extension; overload;
    {class} function init(encodedExtension: DNAsnEncodedData; critical: Boolean): DNX509Extension; overload;
    {class} function init(oid: DNOid; rawData: TArray<Byte>; critical: Boolean): DNX509Extension; overload;

  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.X509Extension')]
  DNX509Extension = interface(DNAsnEncodedData)
  ['{1ACEAF95-7F84-35EE-9C83-3CE83E3FAD92}']
  { getters & setters } 

    function get_Critical: Boolean;
    procedure set_Critical(value: Boolean);
    function get_Oid: DNOid;
    procedure set_Oid(value: DNOid);
    function get_RawData: TArray<Byte>;
    procedure set_RawData(value: TArray<Byte>);

  { methods } 

    procedure CopyFrom(asnEncodedData: DNAsnEncodedData);
    function Format(multiLine: Boolean): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Critical: Boolean read get_Critical write set_Critical;
    property Oid: DNOid read get_Oid write set_Oid;
    property RawData: TArray<Byte> read get_RawData write set_RawData;
  end;

  TDNX509Extension = class(TDNGenericImport<DNX509ExtensionClass, DNX509Extension>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX509BasicConstraintsExtensionClass = interface(DNX509ExtensionClass)
  ['{C1529A8A-7BCB-535F-9495-A11002BBA840}']
  { constructors } 

    {class} function init: DNX509BasicConstraintsExtension; overload;
    {class} function init(certificateAuthority: Boolean; hasPathLengthConstraint: Boolean; pathLengthConstraint: Int32; critical: Boolean): DNX509BasicConstraintsExtension; overload;
    {class} function init(encodedBasicConstraints: DNAsnEncodedData; critical: Boolean): DNX509BasicConstraintsExtension; overload;

  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension')]
  DNX509BasicConstraintsExtension = interface(DNX509Extension)
  ['{91A67381-A9C2-3D07-A6EC-217C8B64FAE9}']
  { getters & setters } 

    function get_CertificateAuthority: Boolean;
    function get_HasPathLengthConstraint: Boolean;
    function get_PathLengthConstraint: Int32;
    function get_Critical: Boolean;
    procedure set_Critical(value: Boolean);
    function get_Oid: DNOid;
    procedure set_Oid(value: DNOid);
    function get_RawData: TArray<Byte>;
    procedure set_RawData(value: TArray<Byte>);

  { methods } 

    procedure CopyFrom(asnEncodedData: DNAsnEncodedData);
    function Format(multiLine: Boolean): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CertificateAuthority: Boolean read get_CertificateAuthority;
    property HasPathLengthConstraint: Boolean read get_HasPathLengthConstraint;
    property PathLengthConstraint: Int32 read get_PathLengthConstraint;
    property Critical: Boolean read get_Critical write set_Critical;
    property Oid: DNOid read get_Oid write set_Oid;
    property RawData: TArray<Byte> read get_RawData write set_RawData;
  end;

  TDNX509BasicConstraintsExtension = class(TDNGenericImport<DNX509BasicConstraintsExtensionClass, DNX509BasicConstraintsExtension>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX509EnhancedKeyUsageExtensionClass = interface(DNX509ExtensionClass)
  ['{23D19E5E-460C-5FAE-91CB-214C3F637B6A}']
  { constructors } 

    {class} function init: DNX509EnhancedKeyUsageExtension; overload;
    {class} function init(enhancedKeyUsages: DNOidCollection; critical: Boolean): DNX509EnhancedKeyUsageExtension; overload;
    {class} function init(encodedEnhancedKeyUsages: DNAsnEncodedData; critical: Boolean): DNX509EnhancedKeyUsageExtension; overload;

  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension')]
  DNX509EnhancedKeyUsageExtension = interface(DNX509Extension)
  ['{2E800CB1-8B0A-3266-8A94-A22315F4D64C}']
  { getters & setters } 

    function get_EnhancedKeyUsages: DNOidCollection;
    function get_Critical: Boolean;
    procedure set_Critical(value: Boolean);
    function get_Oid: DNOid;
    procedure set_Oid(value: DNOid);
    function get_RawData: TArray<Byte>;
    procedure set_RawData(value: TArray<Byte>);

  { methods } 

    procedure CopyFrom(asnEncodedData: DNAsnEncodedData);
    function Format(multiLine: Boolean): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EnhancedKeyUsages: DNOidCollection read get_EnhancedKeyUsages;
    property Critical: Boolean read get_Critical write set_Critical;
    property Oid: DNOid read get_Oid write set_Oid;
    property RawData: TArray<Byte> read get_RawData write set_RawData;
  end;

  TDNX509EnhancedKeyUsageExtension = class(TDNGenericImport<DNX509EnhancedKeyUsageExtensionClass, DNX509EnhancedKeyUsageExtension>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX509KeyUsageExtensionClass = interface(DNX509ExtensionClass)
  ['{91A2A2A6-7B3E-53AB-AEFD-9902F73D894D}']
  { constructors } 

    {class} function init: DNX509KeyUsageExtension; overload;
    {class} function init(keyUsages: DNX509KeyUsageFlags; critical: Boolean): DNX509KeyUsageExtension; overload;
    {class} function init(encodedKeyUsage: DNAsnEncodedData; critical: Boolean): DNX509KeyUsageExtension; overload;

  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.X509KeyUsageExtension')]
  DNX509KeyUsageExtension = interface(DNX509Extension)
  ['{93B391A3-88F1-35DB-BAD7-356D5658F089}']
  { getters & setters } 

    function get_KeyUsages: DNX509KeyUsageFlags;
    function get_Critical: Boolean;
    procedure set_Critical(value: Boolean);
    function get_Oid: DNOid;
    procedure set_Oid(value: DNOid);
    function get_RawData: TArray<Byte>;
    procedure set_RawData(value: TArray<Byte>);

  { methods } 

    procedure CopyFrom(asnEncodedData: DNAsnEncodedData);
    function Format(multiLine: Boolean): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property KeyUsages: DNX509KeyUsageFlags read get_KeyUsages;
    property Critical: Boolean read get_Critical write set_Critical;
    property Oid: DNOid read get_Oid write set_Oid;
    property RawData: TArray<Byte> read get_RawData write set_RawData;
  end;

  TDNX509KeyUsageExtension = class(TDNGenericImport<DNX509KeyUsageExtensionClass, DNX509KeyUsageExtension>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX509SubjectKeyIdentifierExtensionClass = interface(DNX509ExtensionClass)
  ['{7B253247-7183-5B05-962D-EAFD88990686}']
  { constructors } 

    {class} function init: DNX509SubjectKeyIdentifierExtension; overload;
    {class} function init(subjectKeyIdentifier: string; critical: Boolean): DNX509SubjectKeyIdentifierExtension; overload;
    {class} function init(subjectKeyIdentifier: TArray<Byte>; critical: Boolean): DNX509SubjectKeyIdentifierExtension; overload;
    {class} function init(encodedSubjectKeyIdentifier: DNAsnEncodedData; critical: Boolean): DNX509SubjectKeyIdentifierExtension; overload;
    {class} function init(key: DNPublicKey; critical: Boolean): DNX509SubjectKeyIdentifierExtension; overload;
    {class} function init(key: DNPublicKey; algorithm: DNX509SubjectKeyIdentifierHashAlgorithm; critical: Boolean): DNX509SubjectKeyIdentifierExtension; overload;

  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension')]
  DNX509SubjectKeyIdentifierExtension = interface(DNX509Extension)
  ['{8D6F35EF-9625-3D16-ABBD-D3781FD1D87B}']
  { getters & setters } 

    function get_SubjectKeyIdentifier: string;
    function get_Critical: Boolean;
    procedure set_Critical(value: Boolean);
    function get_Oid: DNOid;
    procedure set_Oid(value: DNOid);
    function get_RawData: TArray<Byte>;
    procedure set_RawData(value: TArray<Byte>);

  { methods } 

    procedure CopyFrom(asnEncodedData: DNAsnEncodedData);
    function Format(multiLine: Boolean): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SubjectKeyIdentifier: string read get_SubjectKeyIdentifier;
    property Critical: Boolean read get_Critical write set_Critical;
    property Oid: DNOid read get_Oid write set_Oid;
    property RawData: TArray<Byte> read get_RawData write set_RawData;
  end;

  TDNX509SubjectKeyIdentifierExtension = class(TDNGenericImport<DNX509SubjectKeyIdentifierExtensionClass, DNX509SubjectKeyIdentifierExtension>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNAsnEncodedDataCollectionClass = interface(DNObjectClass)
  ['{D8363FB6-FAE1-5E0C-9F08-E1A67050492C}']
  { constructors } 

    {class} function init: DNAsnEncodedDataCollection; overload;
    {class} function init(asnEncodedData: DNAsnEncodedData): DNAsnEncodedDataCollection; overload;

  end;

  [DNTypeName('System.Security.Cryptography.AsnEncodedDataCollection')]
  DNAsnEncodedDataCollection = interface(DDN.mscorlib.DNICollection)
  ['{6748F587-01CF-368E-B42C-F9695826B509}']
  { getters & setters } 

    function get_Item(index: Int32): DNAsnEncodedData;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function Add(asnEncodedData: DNAsnEncodedData): Int32;
    procedure Remove(asnEncodedData: DNAsnEncodedData);
    function GetEnumerator: DNAsnEncodedDataEnumerator;
    procedure CopyTo(&array: TArray<DNAsnEncodedData>; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNAsnEncodedData read get_Item; default;
    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNAsnEncodedDataCollection = class(TDNGenericImport<DNAsnEncodedDataCollectionClass, DNAsnEncodedDataCollection>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNAsnEncodedDataEnumeratorClass = interface(DNObjectClass)
  ['{22324484-EB3D-5B5C-82E7-4759E516AFF1}']
  end;

  [DNTypeName('System.Security.Cryptography.AsnEncodedDataEnumerator')]
  DNAsnEncodedDataEnumerator = interface(DDN.mscorlib.DNIEnumerator)
  ['{7B78290C-E4D7-3985-9F09-5D77CD6001C7}']
  { getters & setters } 

    function get_Current: DNAsnEncodedData;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Current: DNAsnEncodedData read get_Current;
  end;

  TDNAsnEncodedDataEnumerator = class(TDNGenericImport<DNAsnEncodedDataEnumeratorClass, DNAsnEncodedDataEnumerator>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNOidClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EBCFA3FB-50C2-5442-B3BC-9B99835071E1}']
  { constructors } 

    {class} function init: DNOid; overload;
    {class} function init(oid: string): DNOid; overload;
    {class} function init(value: string; friendlyName: string): DNOid; overload;
    {class} function init(oid: DNOid): DNOid; overload;

  { static methods } 

    {class} function FromFriendlyName(friendlyName: string; group: DNOidGroup): DNOid;
    {class} function FromOidValue(oidValue: string; group: DNOidGroup): DNOid;

  end;

  [DNTypeName('System.Security.Cryptography.Oid')]
  DNOid = interface(DDN.mscorlib.DNObject)
  ['{81EAF203-F3FC-38F7-BE2A-362C688F00D4}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_FriendlyName: string;
    procedure set_FriendlyName(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property FriendlyName: string read get_FriendlyName write set_FriendlyName;
  end;

  TDNOid = class(TDNGenericImport<DNOidClass, DNOid>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNOidCollectionClass = interface(DNObjectClass)
  ['{EAEC307D-C588-5BAE-A1CE-B24243FBF315}']
  { constructors } 

    {class} function init: DNOidCollection;

  end;

  [DNTypeName('System.Security.Cryptography.OidCollection')]
  DNOidCollection = interface(DDN.mscorlib.DNICollection)
  ['{4CF91AFD-9F78-3FF7-9525-6B3093CF1F06}']
  { getters & setters } 

    function get_Item(index: Int32): DNOid; overload;
    function get_Item(oid: string): DNOid; overload;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function Add(oid: DNOid): Int32;
    function GetEnumerator: DNOidEnumerator;
    procedure CopyTo(&array: TArray<DNOid>; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNOid read get_Item; default;
    property Item[oid: string]: DNOid read get_Item; default;
    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNOidCollection = class(TDNGenericImport<DNOidCollectionClass, DNOidCollection>) end;

  //-------------namespace: System.Security.Cryptography----------------
  DNOidEnumeratorClass = interface(DNObjectClass)
  ['{376C78A0-6C08-5E1B-8001-AC50ACA9712A}']
  end;

  [DNTypeName('System.Security.Cryptography.OidEnumerator')]
  DNOidEnumerator = interface(DDN.mscorlib.DNIEnumerator)
  ['{66550507-F2C5-3734-B31E-EC61311D8443}']
  { getters & setters } 

    function get_Current: DNOid;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Current: DNOid read get_Current;
  end;

  TDNOidEnumerator = class(TDNGenericImport<DNOidEnumeratorClass, DNOidEnumerator>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNPublicKeyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BA39CD61-0AC7-50B0-AD9C-774340294948}']
  { constructors } 

    {class} function init(oid: DNOid; parameters: DNAsnEncodedData; keyValue: DNAsnEncodedData): DNPublicKey;

  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.PublicKey')]
  DNPublicKey = interface(DDN.mscorlib.DNObject)
  ['{2A7A636D-9899-3125-B718-112336E792CE}']
  { getters & setters } 

    function get_Key: DDN.mscorlib.DNAsymmetricAlgorithm;
    function get_Oid: DNOid;
    function get_EncodedKeyValue: DNAsnEncodedData;
    function get_EncodedParameters: DNAsnEncodedData;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Key: DDN.mscorlib.DNAsymmetricAlgorithm read get_Key;
    property Oid: DNOid read get_Oid;
    property EncodedKeyValue: DNAsnEncodedData read get_EncodedKeyValue;
    property EncodedParameters: DNAsnEncodedData read get_EncodedParameters;
  end;

  TDNPublicKey = class(TDNGenericImport<DNPublicKeyClass, DNPublicKey>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX509Certificate2Class = interface(DDN.mscorlib.DNX509CertificateClass)
  ['{086CAB9B-490C-572B-86F5-43B7B4CAC04E}']
  { constructors } 

    {class} function init: DNX509Certificate2; overload;
    {class} function init(rawData: TArray<Byte>): DNX509Certificate2; overload;
    {class} function init(rawData: TArray<Byte>; password: string): DNX509Certificate2; overload;
    {class} function init(rawData: TArray<Byte>; password: DDN.mscorlib.DNSecureString): DNX509Certificate2; overload;
    {class} function init(rawData: TArray<Byte>; password: string; keyStorageFlags: DDN.mscorlib.DNX509KeyStorageFlags): DNX509Certificate2; overload;
    {class} function init(rawData: TArray<Byte>; password: DDN.mscorlib.DNSecureString; keyStorageFlags: DDN.mscorlib.DNX509KeyStorageFlags): DNX509Certificate2; overload;
    {class} function init(fileName: string): DNX509Certificate2; overload;
    {class} function init(fileName: string; password: string): DNX509Certificate2; overload;
    {class} function init(fileName: string; password: DDN.mscorlib.DNSecureString): DNX509Certificate2; overload;
    {class} function init(fileName: string; password: string; keyStorageFlags: DDN.mscorlib.DNX509KeyStorageFlags): DNX509Certificate2; overload;
    {class} function init(fileName: string; password: DDN.mscorlib.DNSecureString; keyStorageFlags: DDN.mscorlib.DNX509KeyStorageFlags): DNX509Certificate2; overload;
    {class} function init(handle: IntPtr): DNX509Certificate2; overload;
    {class} function init(certificate: DDN.mscorlib.DNX509Certificate): DNX509Certificate2; overload;

  { static methods } 

    {class} function GetCertContentType(rawData: TArray<Byte>): DDN.mscorlib.DNX509ContentType; overload;
    {class} function GetCertContentType(fileName: string): DDN.mscorlib.DNX509ContentType; overload;

  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.X509Certificate2')]
  DNX509Certificate2 = interface(DDN.mscorlib.DNX509Certificate)
  ['{28F5AFA0-F1A6-3B97-97F9-876CAC10CAFB}']
  { getters & setters } 

    function get_Archived: Boolean;
    procedure set_Archived(value: Boolean);
    function get_Extensions: DNX509ExtensionCollection;
    function get_FriendlyName: string;
    procedure set_FriendlyName(value: string);
    function get_IssuerName: DNX500DistinguishedName;
    function get_NotAfter: DDN.mscorlib.DNDateTime;
    function get_NotBefore: DDN.mscorlib.DNDateTime;
    function get_HasPrivateKey: Boolean;
    function get_PrivateKey: DDN.mscorlib.DNAsymmetricAlgorithm;
    procedure set_PrivateKey(value: DDN.mscorlib.DNAsymmetricAlgorithm);
    function get_PublicKey: DNPublicKey;
    function get_RawData: TArray<Byte>;
    function get_SerialNumber: string;
    function get_SubjectName: DNX500DistinguishedName;
    function get_SignatureAlgorithm: DNOid;
    function get_Thumbprint: string;
    function get_Version: Int32;
    function get_Handle: IntPtr;
    function get_Issuer: string;
    function get_Subject: string;

  { methods } 

    function ToString: string; overload;
    procedure Import(rawData: TArray<Byte>); overload;
    procedure Import(rawData: TArray<Byte>; password: string; keyStorageFlags: DDN.mscorlib.DNX509KeyStorageFlags); overload;
    procedure Import(rawData: TArray<Byte>; password: DDN.mscorlib.DNSecureString; keyStorageFlags: DDN.mscorlib.DNX509KeyStorageFlags); overload;
    procedure Import(fileName: string); overload;
    procedure Import(fileName: string; password: string; keyStorageFlags: DDN.mscorlib.DNX509KeyStorageFlags); overload;
    procedure Import(fileName: string; password: DDN.mscorlib.DNSecureString; keyStorageFlags: DDN.mscorlib.DNX509KeyStorageFlags); overload;
    procedure Reset;
    function Verify: Boolean;
    function ToString(verbose: Boolean): string; overload;
    function GetNameInfo(nameType: DNX509NameType; forIssuer: Boolean): string;
    function GetRawCertData: TArray<Byte>;
    function GetName: string;
    function GetIssuerName: string;
    function GetSerialNumber: TArray<Byte>;
    function GetSerialNumberString: string;
    function GetKeyAlgorithmParameters: TArray<Byte>;
    function GetKeyAlgorithmParametersString: string;
    function GetKeyAlgorithm: string;
    function GetPublicKey: TArray<Byte>;
    function GetPublicKeyString: string;
    function GetRawCertDataString: string;
    function GetCertHash: TArray<Byte>; overload;
    function GetCertHash(hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): TArray<Byte>; overload;
    function GetCertHashString: string; overload;
    function GetCertHashString(hashAlgorithm: DDN.mscorlib.DNHashAlgorithmName): string; overload;
    function GetEffectiveDateString: string;
    function GetExpirationDateString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(other: DDN.mscorlib.DNX509Certificate): Boolean; overload;
    function GetHashCode: Int32;
    function &Export(contentType: DDN.mscorlib.DNX509ContentType): TArray<Byte>; overload;
    function &Export(contentType: DDN.mscorlib.DNX509ContentType; password: string): TArray<Byte>; overload;
    function &Export(contentType: DDN.mscorlib.DNX509ContentType; password: DDN.mscorlib.DNSecureString): TArray<Byte>; overload;
    procedure Dispose;
    function GetFormat: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Archived: Boolean read get_Archived write set_Archived;
    property Extensions: DNX509ExtensionCollection read get_Extensions;
    property FriendlyName: string read get_FriendlyName write set_FriendlyName;
    property IssuerName: DNX500DistinguishedName read get_IssuerName;
    property NotAfter: DDN.mscorlib.DNDateTime read get_NotAfter;
    property NotBefore: DDN.mscorlib.DNDateTime read get_NotBefore;
    property HasPrivateKey: Boolean read get_HasPrivateKey;
    property PrivateKey: DDN.mscorlib.DNAsymmetricAlgorithm read get_PrivateKey write set_PrivateKey;
    property PublicKey: DNPublicKey read get_PublicKey;
    property RawData: TArray<Byte> read get_RawData;
    property SerialNumber: string read get_SerialNumber;
    property SubjectName: DNX500DistinguishedName read get_SubjectName;
    property SignatureAlgorithm: DNOid read get_SignatureAlgorithm;
    property Thumbprint: string read get_Thumbprint;
    property Version: Int32 read get_Version;
    property Handle: IntPtr read get_Handle;
    property Issuer: string read get_Issuer;
    property Subject: string read get_Subject;
  end;

  TDNX509Certificate2 = class(TDNGenericImport<DNX509Certificate2Class, DNX509Certificate2>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX509Certificate2EnumeratorClass = interface(DNObjectClass)
  ['{D0F1F4F6-25E2-54EB-9625-E928859027FF}']
  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator')]
  DNX509Certificate2Enumerator = interface(DDN.mscorlib.DNIEnumerator)
  ['{3A1B3EF8-4AF1-33F8-80CA-74B43AF65B22}']
  { getters & setters } 

    function get_Current: DNX509Certificate2;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Current: DNX509Certificate2 read get_Current;
  end;

  TDNX509Certificate2Enumerator = class(TDNGenericImport<DNX509Certificate2EnumeratorClass, DNX509Certificate2Enumerator>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX509CertificateCollection_X509CertificateEnumeratorClass = interface(DNObjectClass)
  ['{303E6666-29EC-5ED0-BE14-F06FB7560376}']
  { constructors } 

    {class} function init(mappings: DNX509CertificateCollection): DNX509CertificateCollection_X509CertificateEnumerator;

  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.X509CertificateCollection+X509CertificateEnumerator')]
  DNX509CertificateCollection_X509CertificateEnumerator = interface(DDN.mscorlib.DNIEnumerator)
  ['{D8D12C69-3B6B-3983-8A5A-063CCC94D061}']
  { getters & setters } 

    function get_Current: DDN.mscorlib.DNX509Certificate;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Current: DDN.mscorlib.DNX509Certificate read get_Current;
  end;

  TDNX509CertificateCollection_X509CertificateEnumerator = class(TDNGenericImport<DNX509CertificateCollection_X509CertificateEnumeratorClass, DNX509CertificateCollection_X509CertificateEnumerator>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX509ChainClass = interface(DNObjectClass)
  ['{896F2DDC-0F4A-5487-BC01-C5521CA05EA7}']
  { constructors } 

    {class} function init: DNX509Chain; overload;
    {class} function init(useMachineContext: Boolean): DNX509Chain; overload;
    {class} function init(chainContext: IntPtr): DNX509Chain; overload;

  { static methods } 

    {class} function Create: DNX509Chain;

  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.X509Chain')]
  DNX509Chain = interface(DDN.mscorlib.DNIDisposable)
  ['{E7547572-505D-39B6-8C1A-9213662B7E5C}']
  { getters & setters } 

    function get_ChainContext: IntPtr;
    function get_SafeHandle: DNSafeX509ChainHandle;
    function get_ChainPolicy: DNX509ChainPolicy;
    procedure set_ChainPolicy(value: DNX509ChainPolicy);
    function get_ChainStatus: TArray<DNX509ChainStatus>;
    function get_ChainElements: DNX509ChainElementCollection;

  { methods } 

    function Build(certificate: DNX509Certificate2): Boolean;
    procedure Reset;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ChainContext: IntPtr read get_ChainContext;
    property SafeHandle: DNSafeX509ChainHandle read get_SafeHandle;
    property ChainPolicy: DNX509ChainPolicy read get_ChainPolicy write set_ChainPolicy;
    property ChainStatus: TArray<DNX509ChainStatus> read get_ChainStatus;
    property ChainElements: DNX509ChainElementCollection read get_ChainElements;
  end;

  TDNX509Chain = class(TDNGenericImport<DNX509ChainClass, DNX509Chain>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX509ChainElementClass = interface(DDN.mscorlib.DNObjectClass)
  ['{085F06FB-1CE7-5647-A0FB-B627DB560993}']
  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.X509ChainElement')]
  DNX509ChainElement = interface(DDN.mscorlib.DNObject)
  ['{267048A8-886F-367E-B655-F1F8E7712AE6}']
  { getters & setters } 

    function get_Certificate: DNX509Certificate2;
    function get_ChainElementStatus: TArray<DNX509ChainStatus>;
    function get_Information: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Certificate: DNX509Certificate2 read get_Certificate;
    property ChainElementStatus: TArray<DNX509ChainStatus> read get_ChainElementStatus;
    property Information: string read get_Information;
  end;

  TDNX509ChainElement = class(TDNGenericImport<DNX509ChainElementClass, DNX509ChainElement>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX509ChainElementCollectionClass = interface(DNObjectClass)
  ['{40F8099D-B9B1-5815-9BA6-FF14C0F71EA9}']
  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.X509ChainElementCollection')]
  DNX509ChainElementCollection = interface(DDN.mscorlib.DNICollection)
  ['{55F856A0-4D42-3A62-BA34-1DF2B210B9A9}']
  { getters & setters } 

    function get_Item(index: Int32): DNX509ChainElement;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function GetEnumerator: DNX509ChainElementEnumerator;
    procedure CopyTo(&array: TArray<DNX509ChainElement>; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNX509ChainElement read get_Item; default;
    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNX509ChainElementCollection = class(TDNGenericImport<DNX509ChainElementCollectionClass, DNX509ChainElementCollection>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX509ChainElementEnumeratorClass = interface(DNObjectClass)
  ['{8D6CE12B-6AF1-5DBA-A1B0-EFE0E049A30F}']
  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator')]
  DNX509ChainElementEnumerator = interface(DDN.mscorlib.DNIEnumerator)
  ['{394699B3-1D30-39B6-9D6B-DDDF8B4A56C9}']
  { getters & setters } 

    function get_Current: DNX509ChainElement;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Current: DNX509ChainElement read get_Current;
  end;

  TDNX509ChainElementEnumerator = class(TDNGenericImport<DNX509ChainElementEnumeratorClass, DNX509ChainElementEnumerator>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX509ChainPolicyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0A3A293A-10C9-5C54-B5FA-6412D2A02BCF}']
  { constructors } 

    {class} function init: DNX509ChainPolicy;

  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.X509ChainPolicy')]
  DNX509ChainPolicy = interface(DDN.mscorlib.DNObject)
  ['{A2813C9D-032C-3581-810C-1621ABB6D727}']
  { getters & setters } 

    function get_ApplicationPolicy: DNOidCollection;
    function get_CertificatePolicy: DNOidCollection;
    function get_RevocationMode: DNX509RevocationMode;
    procedure set_RevocationMode(value: DNX509RevocationMode);
    function get_RevocationFlag: DNX509RevocationFlag;
    procedure set_RevocationFlag(value: DNX509RevocationFlag);
    function get_VerificationFlags: DNX509VerificationFlags;
    procedure set_VerificationFlags(value: DNX509VerificationFlags);
    function get_VerificationTime: DDN.mscorlib.DNDateTime;
    procedure set_VerificationTime(value: DDN.mscorlib.DNDateTime);
    function get_UrlRetrievalTimeout: DDN.mscorlib.DNTimeSpan;
    procedure set_UrlRetrievalTimeout(value: DDN.mscorlib.DNTimeSpan);
    function get_ExtraStore: DNX509Certificate2Collection;

  { methods } 

    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ApplicationPolicy: DNOidCollection read get_ApplicationPolicy;
    property CertificatePolicy: DNOidCollection read get_CertificatePolicy;
    property RevocationMode: DNX509RevocationMode read get_RevocationMode write set_RevocationMode;
    property RevocationFlag: DNX509RevocationFlag read get_RevocationFlag write set_RevocationFlag;
    property VerificationFlags: DNX509VerificationFlags read get_VerificationFlags write set_VerificationFlags;
    property VerificationTime: DDN.mscorlib.DNDateTime read get_VerificationTime write set_VerificationTime;
    property UrlRetrievalTimeout: DDN.mscorlib.DNTimeSpan read get_UrlRetrievalTimeout write set_UrlRetrievalTimeout;
    property ExtraStore: DNX509Certificate2Collection read get_ExtraStore;
  end;

  TDNX509ChainPolicy = class(TDNGenericImport<DNX509ChainPolicyClass, DNX509ChainPolicy>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX509ExtensionCollectionClass = interface(DNObjectClass)
  ['{EA98EE65-52CE-570C-814F-D13053C5D00F}']
  { constructors } 

    {class} function init: DNX509ExtensionCollection;

  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.X509ExtensionCollection')]
  DNX509ExtensionCollection = interface(DDN.mscorlib.DNICollection)
  ['{7BCBA6CA-8C50-3744-B293-14F2E74B46FB}']
  { getters & setters } 

    function get_Item(index: Int32): DNX509Extension; overload;
    function get_Item(oid: string): DNX509Extension; overload;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    function Add(extension: DNX509Extension): Int32;
    function GetEnumerator: DNX509ExtensionEnumerator;
    procedure CopyTo(&array: TArray<DNX509Extension>; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNX509Extension read get_Item; default;
    property Item[oid: string]: DNX509Extension read get_Item; default;
    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNX509ExtensionCollection = class(TDNGenericImport<DNX509ExtensionCollectionClass, DNX509ExtensionCollection>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX509ExtensionEnumeratorClass = interface(DNObjectClass)
  ['{1B57856F-9F64-5B86-94FA-94C907EC92DF}']
  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.X509ExtensionEnumerator')]
  DNX509ExtensionEnumerator = interface(DDN.mscorlib.DNIEnumerator)
  ['{A8EDF69E-BAB6-3929-A676-2F2F26B85642}']
  { getters & setters } 

    function get_Current: DNX509Extension;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Current: DNX509Extension read get_Current;
  end;

  TDNX509ExtensionEnumerator = class(TDNGenericImport<DNX509ExtensionEnumeratorClass, DNX509ExtensionEnumerator>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX509StoreClass = interface(DNObjectClass)
  ['{BF3D6426-C295-5392-897E-F022F2CC364C}']
  { constructors } 

    {class} function init: DNX509Store; overload;
    {class} function init(storeName: string): DNX509Store; overload;
    {class} function init(storeName: DNStoreName): DNX509Store; overload;
    {class} function init(storeLocation: DNStoreLocation): DNX509Store; overload;
    {class} function init(storeName: DNStoreName; storeLocation: DNStoreLocation): DNX509Store; overload;
    {class} function init(storeName: string; storeLocation: DNStoreLocation): DNX509Store; overload;
    {class} function init(storeHandle: IntPtr): DNX509Store; overload;

  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.X509Store')]
  DNX509Store = interface(DDN.mscorlib.DNIDisposable)
  ['{34AEC75D-93E1-3D59-B721-CC8A1696ABDF}']
  { getters & setters } 

    function get_StoreHandle: IntPtr;
    function get_Location: DNStoreLocation;
    function get_Name: string;
    function get_Certificates: DNX509Certificate2Collection;

  { methods } 

    procedure Dispose;
    procedure Close;
    procedure Add(certificate: DNX509Certificate2);
    procedure AddRange(certificates: DNX509Certificate2Collection);
    procedure Remove(certificate: DNX509Certificate2);
    procedure RemoveRange(certificates: DNX509Certificate2Collection);
    procedure Open(flags: DNOpenFlags);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StoreHandle: IntPtr read get_StoreHandle;
    property Location: DNStoreLocation read get_Location;
    property Name: string read get_Name;
    property Certificates: DNX509Certificate2Collection read get_Certificates;
  end;

  TDNX509Store = class(TDNGenericImport<DNX509StoreClass, DNX509Store>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNResourcePermissionBaseEntryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AA6F2C00-07D0-5FD0-AB52-22852EEFF0A4}']
  { constructors } 

    {class} function init: DNResourcePermissionBaseEntry; overload;
    {class} function init(permissionAccess: Int32; permissionAccessPath: TArray<string>): DNResourcePermissionBaseEntry; overload;

  end;

  [DNTypeName('System.Security.Permissions.ResourcePermissionBaseEntry')]
  DNResourcePermissionBaseEntry = interface(DDN.mscorlib.DNObject)
  ['{DB9E698D-EF5D-3891-BF0F-FCEBCFC80ED5}']
  { getters & setters } 

    function get_PermissionAccess: Int32;
    function get_PermissionAccessPath: TArray<string>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PermissionAccess: Int32 read get_PermissionAccess;
    property PermissionAccessPath: TArray<string> read get_PermissionAccessPath;
  end;

  TDNResourcePermissionBaseEntry = class(TDNGenericImport<DNResourcePermissionBaseEntryClass, DNResourcePermissionBaseEntry>) end;

  //-------------namespace: System.Security----------------
  DNSecureStringMarshalClass = interface(DDN.mscorlib.DNObjectClass)
  ['{881970F0-2F21-5381-A02E-AB38B95B7FFF}']
  { static methods } 

    {class} function SecureStringToCoTaskMemAnsi(s: DDN.mscorlib.DNSecureString): IntPtr;
    {class} function SecureStringToGlobalAllocAnsi(s: DDN.mscorlib.DNSecureString): IntPtr;
    {class} function SecureStringToCoTaskMemUnicode(s: DDN.mscorlib.DNSecureString): IntPtr;
    {class} function SecureStringToGlobalAllocUnicode(s: DDN.mscorlib.DNSecureString): IntPtr;

  end;

  [DNTypeName('System.Security.SecureStringMarshal')]
  DNSecureStringMarshal = interface(DDN.mscorlib.DNObject)
  ['{22466ED6-3162-36D8-92B9-5091EB256F29}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSecureStringMarshal = class(TDNGenericImport<DNSecureStringMarshalClass, DNSecureStringMarshal>) end;

  //-------------namespace: System----------------
  DNStringNormalizationExtensionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BD0FC4A8-D1BA-5D99-AE94-D699C866C9CF}']
  { static methods } 

    {class} function IsNormalized(value: string): Boolean; overload;
    {class} function IsNormalized(value: string; normalizationForm: DDN.mscorlib.DNNormalizationForm): Boolean; overload;
    {class} function Normalize(value: string): string; overload;
    {class} function Normalize(value: string; normalizationForm: DDN.mscorlib.DNNormalizationForm): string; overload;

  end;

  [DNTypeName('System.StringNormalizationExtensions')]
  DNStringNormalizationExtensions = interface(DDN.mscorlib.DNObject)
  ['{7627DCB0-6162-372D-9A64-18626A39B77F}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNStringNormalizationExtensions = class(TDNGenericImport<DNStringNormalizationExtensionsClass, DNStringNormalizationExtensions>) end;

  //-------------namespace: System.Text.RegularExpressions----------------
  DNCaptureClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6447B385-DE57-550C-ADB8-FA9D57C25615}']
  end;

  [DNTypeName('System.Text.RegularExpressions.Capture')]
  DNCapture = interface(DDN.mscorlib.DNObject)
  ['{C5B3368E-F014-3427-8532-D4D397E5107A}']
  { getters & setters } 

    function get_Index: Int32;
    function get_Length: Int32;
    function get_Value: string;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index;
    property Length: Int32 read get_Length;
    property Value: string read get_Value;
  end;

  TDNCapture = class(TDNGenericImport<DNCaptureClass, DNCapture>) end;

  //-------------namespace: System.Text.RegularExpressions----------------
  DNGroupClass = interface(DNCaptureClass)
  ['{73AA6FF1-9CB8-55A0-B7E2-1BD3962F01D6}']
  { static methods } 

    {class} function Synchronized(inner: DNGroup): DNGroup;

  end;

  [DNTypeName('System.Text.RegularExpressions.Group')]
  DNGroup = interface(DNCapture)
  ['{1E9A393D-BD3B-3C2C-A845-74118A2B6B9A}']
  { getters & setters } 

    function get_Success: Boolean;
    function get_Name: string;
    function get_Captures: DNCaptureCollection;
    function get_Index: Int32;
    function get_Length: Int32;
    function get_Value: string;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Success: Boolean read get_Success;
    property Name: string read get_Name;
    property Captures: DNCaptureCollection read get_Captures;
    property Index: Int32 read get_Index;
    property Length: Int32 read get_Length;
    property Value: string read get_Value;
  end;

  TDNGroup = class(TDNGenericImport<DNGroupClass, DNGroup>) end;

  //-------------namespace: System.Text.RegularExpressions----------------
  DNMatchClass = interface(DNGroupClass)
  ['{3FC91B26-8F26-58FE-8439-D51E368D3C51}']
  { static getter & setter } 

    {class} function get_Empty: DNMatch;

  { static methods } 

    {class} function Synchronized(inner: DNMatch): DNMatch;

  { static propertys } 

    {class} property Empty: DNMatch read get_Empty;
  end;

  [DNTypeName('System.Text.RegularExpressions.Match')]
  DNMatch = interface(DNGroup)
  ['{B15E17CE-1B1B-3F7D-92E6-42DB24D15691}']
  { getters & setters } 

    function get_Groups: DNGroupCollection;
    function get_Success: Boolean;
    function get_Name: string;
    function get_Captures: DNCaptureCollection;
    function get_Index: Int32;
    function get_Length: Int32;
    function get_Value: string;

  { methods } 

    function NextMatch: DNMatch;
    function Result(replacement: string): string;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Groups: DNGroupCollection read get_Groups;
    property Success: Boolean read get_Success;
    property Name: string read get_Name;
    property Captures: DNCaptureCollection read get_Captures;
    property Index: Int32 read get_Index;
    property Length: Int32 read get_Length;
    property Value: string read get_Value;
  end;

  TDNMatch = class(TDNGenericImport<DNMatchClass, DNMatch>) end;

  //-------------namespace: System.Text.RegularExpressions----------------
  DNCaptureCollectionClass = interface(DNObjectClass)
  ['{C869FD2D-8A87-55E2-AF30-F10AA6BF723A}']
  end;

  [DNTypeName('System.Text.RegularExpressions.CaptureCollection')]
  DNCaptureCollection = interface(DDN.mscorlib.DNICollection)
  ['{92749BF7-5B97-3F55-898D-4C0D02C40853}']
  { getters & setters } 

    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsSynchronized: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Count: Int32;
    function get_Item(i: Int32): DNCapture;

  { methods } 

    procedure CopyTo(&array: DDN.mscorlib.DNArray; arrayIndex: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Count: Int32 read get_Count;
    property Item[i: Int32]: DNCapture read get_Item; default;
  end;

  TDNCaptureCollection = class(TDNGenericImport<DNCaptureCollectionClass, DNCaptureCollection>) end;

  //-------------namespace: System.Text.RegularExpressions----------------
  DNGroupCollectionClass = interface(DNObjectClass)
  ['{C49451AE-01D3-565B-9AE6-861D9A637BFA}']
  end;

  [DNTypeName('System.Text.RegularExpressions.GroupCollection')]
  DNGroupCollection = interface(DDN.mscorlib.DNICollection)
  ['{09082951-8A94-3F78-8263-D4F109713015}']
  { getters & setters } 

    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsSynchronized: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Count: Int32;
    function get_Item(groupnum: Int32): DNGroup; overload;
    function get_Item(groupname: string): DNGroup; overload;

  { methods } 

    procedure CopyTo(&array: DDN.mscorlib.DNArray; arrayIndex: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Count: Int32 read get_Count;
    property Item[groupnum: Int32]: DNGroup read get_Item; default;
    property Item[groupname: string]: DNGroup read get_Item; default;
  end;

  TDNGroupCollection = class(TDNGenericImport<DNGroupCollectionClass, DNGroupCollection>) end;

  //-------------namespace: System.Text.RegularExpressions----------------
  DNMatchCollectionClass = interface(DNObjectClass)
  ['{395BB284-00CE-590B-B3D7-28C7111CEC96}']
  end;

  [DNTypeName('System.Text.RegularExpressions.MatchCollection')]
  DNMatchCollection = interface(DDN.mscorlib.DNICollection)
  ['{35995322-5214-328A-B426-C6B6A22003A7}']
  { getters & setters } 

    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsSynchronized: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(i: Int32): DNMatch;

  { methods } 

    procedure CopyTo(&array: DDN.mscorlib.DNArray; arrayIndex: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[i: Int32]: DNMatch read get_Item; default;
  end;

  TDNMatchCollection = class(TDNGenericImport<DNMatchCollectionClass, DNMatchCollection>) end;

  //-------------namespace: System.Text.RegularExpressions----------------
  DNRegexClass = interface(DNObjectClass)
  ['{0C7333C2-8977-5B3F-AFD1-13908A678EFA}']
  { static getter & setter } 

    {class} function get_CacheSize: Int32;
    {class} procedure set_CacheSize(value: Int32);

  { constructors } 

    {class} function init(pattern: string): DNRegex; overload;
    {class} function init(pattern: string; options: DNRegexOptions): DNRegex; overload;
    {class} function init(pattern: string; options: DNRegexOptions; matchTimeout: DDN.mscorlib.DNTimeSpan): DNRegex; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_InfiniteMatchTimeout: DDN.mscorlib.DNTimeSpan;

  { static fields } 

    {class} property InfiniteMatchTimeout: DDN.mscorlib.DNTimeSpan read __fakeFieldGet_InfiniteMatchTimeout;

  { static methods } 

    {class} function Escape(str: string): string;
    {class} function Unescape(str: string): string;
    {class} function IsMatch(input: string; pattern: string; options: DNRegexOptions; matchTimeout: DDN.mscorlib.DNTimeSpan): Boolean; overload;
    {class} function Match(input: string; pattern: string; options: DNRegexOptions): DNMatch; overload;
    {class} function Match(input: string; pattern: string; options: DNRegexOptions; matchTimeout: DDN.mscorlib.DNTimeSpan): DNMatch; overload;
    {class} function Matches(input: string; pattern: string; options: DNRegexOptions): DNMatchCollection; overload;
    {class} function Matches(input: string; pattern: string; options: DNRegexOptions; matchTimeout: DDN.mscorlib.DNTimeSpan): DNMatchCollection; overload;
    {class} function Replace(input: string; pattern: string; replacement: string): string; overload;
    {class} function Replace(input: string; pattern: string; replacement: string; options: DNRegexOptions): string; overload;
    {class} function Replace(input: string; pattern: string; replacement: string; options: DNRegexOptions; matchTimeout: DDN.mscorlib.DNTimeSpan): string; overload;
    {class} function Replace(input: string; pattern: string; evaluator: DNMatchEvaluator): string; overload;
    {class} function Replace(input: string; pattern: string; evaluator: DNMatchEvaluator; options: DNRegexOptions): string; overload;
    {class} function Replace(input: string; pattern: string; evaluator: DNMatchEvaluator; options: DNRegexOptions; matchTimeout: DDN.mscorlib.DNTimeSpan): string; overload;
    {class} function Split(input: string; pattern: string): TArray<string>; overload;
    {class} function Split(input: string; pattern: string; options: DNRegexOptions): TArray<string>; overload;
    {class} function Split(input: string; pattern: string; options: DNRegexOptions; matchTimeout: DDN.mscorlib.DNTimeSpan): TArray<string>; overload;
    {class} procedure CompileToAssembly(regexinfos: TArray<DNRegexCompilationInfo>; assemblyname: DDN.mscorlib.DNAssemblyName); overload;
    {class} procedure CompileToAssembly(regexinfos: TArray<DNRegexCompilationInfo>; assemblyname: DDN.mscorlib.DNAssemblyName; attributes: TArray<DDN.mscorlib.DNCustomAttributeBuilder>); overload;
    {class} procedure CompileToAssembly(regexinfos: TArray<DNRegexCompilationInfo>; assemblyname: DDN.mscorlib.DNAssemblyName; attributes: TArray<DDN.mscorlib.DNCustomAttributeBuilder>; resourceFile: string); overload;
    {class} function IsMatch(input: string; pattern: string): Boolean; overload;
    {class} function IsMatch(input: string; pattern: string; options: DNRegexOptions): Boolean; overload;
    {class} function Match(input: string; pattern: string): DNMatch; overload;
    {class} function Matches(input: string; pattern: string): DNMatchCollection; overload;

  { static propertys } 

    {class} property CacheSize: Int32 read get_CacheSize write set_CacheSize;
  end;

  [DNTypeName('System.Text.RegularExpressions.Regex')]
  DNRegex = interface(DDN.mscorlib.DNISerializable)
  ['{AE42B213-8A8A-3F1B-B732-897A942B9585}']
  { getters & setters } 

    function get_Options: DNRegexOptions;
    function get_MatchTimeout: DDN.mscorlib.DNTimeSpan;
    function get_RightToLeft: Boolean;

  { methods } 

    function ToString: string;
    function GroupNameFromNumber(i: Int32): string;
    function GroupNumberFromName(name: string): Int32;
    function IsMatch(input: string): Boolean; overload;
    function IsMatch(input: string; startat: Int32): Boolean; overload;
    function Match(input: string): DNMatch; overload;
    function Match(input: string; startat: Int32): DNMatch; overload;
    function Match(input: string; beginning: Int32; length: Int32): DNMatch; overload;
    function Matches(input: string): DNMatchCollection; overload;
    function Matches(input: string; startat: Int32): DNMatchCollection; overload;
    function Replace(input: string; replacement: string): string; overload;
    function Replace(input: string; replacement: string; count: Int32): string; overload;
    function Replace(input: string; replacement: string; count: Int32; startat: Int32): string; overload;
    function Replace(input: string; evaluator: DNMatchEvaluator): string; overload;
    function Replace(input: string; evaluator: DNMatchEvaluator; count: Int32): string; overload;
    function Replace(input: string; evaluator: DNMatchEvaluator; count: Int32; startat: Int32): string; overload;
    function Split(input: string): TArray<string>; overload;
    function Split(input: string; count: Int32): TArray<string>; overload;
    function Split(input: string; count: Int32; startat: Int32): TArray<string>; overload;
    function GetGroupNumbers: TArray<Int32>;
    function GetGroupNames: TArray<string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Options: DNRegexOptions read get_Options;
    property MatchTimeout: DDN.mscorlib.DNTimeSpan read get_MatchTimeout;
    property RightToLeft: Boolean read get_RightToLeft;
  end;

  TDNRegex = class(TDNGenericImport<DNRegexClass, DNRegex>) end;

  //-------------namespace: System.Text.RegularExpressions----------------
  DNRegexCompilationInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{669EB60A-1FDF-52D3-AF5A-A54941E4D782}']
  { constructors } 

    {class} function init(pattern: string; options: DNRegexOptions; name: string; fullnamespace: string; ispublic: Boolean): DNRegexCompilationInfo; overload;
    {class} function init(pattern: string; options: DNRegexOptions; name: string; fullnamespace: string; ispublic: Boolean; matchTimeout: DDN.mscorlib.DNTimeSpan): DNRegexCompilationInfo; overload;

  end;

  [DNTypeName('System.Text.RegularExpressions.RegexCompilationInfo')]
  DNRegexCompilationInfo = interface(DDN.mscorlib.DNObject)
  ['{85776C7E-AA0A-37C2-A85F-E9AE1A691217}']
  { getters & setters } 

    function get_Pattern: string;
    procedure set_Pattern(value: string);
    function get_Options: DNRegexOptions;
    procedure set_Options(value: DNRegexOptions);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_IsPublic: Boolean;
    procedure set_IsPublic(value: Boolean);
    function get_MatchTimeout: DDN.mscorlib.DNTimeSpan;
    procedure set_MatchTimeout(value: DDN.mscorlib.DNTimeSpan);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Pattern: string read get_Pattern write set_Pattern;
    property Options: DNRegexOptions read get_Options write set_Options;
    property Name: string read get_Name write set_Name;
    property Namespace: string read get_Namespace write set_Namespace;
    property IsPublic: Boolean read get_IsPublic write set_IsPublic;
    property MatchTimeout: DDN.mscorlib.DNTimeSpan read get_MatchTimeout write set_MatchTimeout;
  end;

  TDNRegexCompilationInfo = class(TDNGenericImport<DNRegexCompilationInfoClass, DNRegexCompilationInfo>) end;

  //-------------namespace: System.Text.RegularExpressions----------------
  DNRegexRunnerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C25AFB5A-73C7-537C-9FFD-C4B0C3B93701}']
  end;

  [DNTypeName('System.Text.RegularExpressions.RegexRunner')]
  DNRegexRunner = interface(DDN.mscorlib.DNObject)
  ['{E495FD0F-8F8B-30D0-81E7-2E190A4FEAEA}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRegexRunner = class(TDNGenericImport<DNRegexRunnerClass, DNRegexRunner>) end;

  //-------------namespace: System.Text.RegularExpressions----------------
  DNRegexRunnerFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{31FE0ED4-D692-5D6E-B085-12BA505B87A6}']
  end;

  [DNTypeName('System.Text.RegularExpressions.RegexRunnerFactory')]
  DNRegexRunnerFactory = interface(DDN.mscorlib.DNObject)
  ['{8E960613-0357-3AC6-B7D8-B1B00923C24D}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRegexRunnerFactory = class(TDNGenericImport<DNRegexRunnerFactoryClass, DNRegexRunnerFactory>) end;

  //-------------namespace: System.Threading----------------
  DNBarrierClass = interface(DNObjectClass)
  ['{6A556D92-A762-54ED-BF48-247B109B3225}']
  { constructors } 

    {class} function init(participantCount: Int32): DNBarrier; overload;
    {class} function init(participantCount: Int32; postPhaseAction: DDN.mscorlib.DNAction<DNBarrier>): DNBarrier; overload;

  end;

  [DNTypeName('System.Threading.Barrier')]
  DNBarrier = interface(DDN.mscorlib.DNIDisposable)
  ['{05A6E5D4-A5EE-3D98-92FB-79C6DDEF62D8}']
  { getters & setters } 

    function get_ParticipantsRemaining: Int32;
    function get_ParticipantCount: Int32;
    function get_CurrentPhaseNumber: Int64;

  { methods } 

    function AddParticipant: Int64;
    function AddParticipants(participantCount: Int32): Int64;
    procedure RemoveParticipant;
    procedure RemoveParticipants(participantCount: Int32);
    procedure SignalAndWait; overload;
    procedure SignalAndWait(cancellationToken: DDN.mscorlib.DNCancellationToken); overload;
    function SignalAndWait(timeout: DDN.mscorlib.DNTimeSpan): Boolean; overload;
    function SignalAndWait(timeout: DDN.mscorlib.DNTimeSpan; cancellationToken: DDN.mscorlib.DNCancellationToken): Boolean; overload;
    function SignalAndWait(millisecondsTimeout: Int32): Boolean; overload;
    function SignalAndWait(millisecondsTimeout: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): Boolean; overload;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ParticipantsRemaining: Int32 read get_ParticipantsRemaining;
    property ParticipantCount: Int32 read get_ParticipantCount;
    property CurrentPhaseNumber: Int64 read get_CurrentPhaseNumber;
  end;

  TDNBarrier = class(TDNGenericImport<DNBarrierClass, DNBarrier>) end;

  //-------------namespace: System----------------
  DNUriClass = interface(DNObjectClass)
  ['{8A027B3B-A57B-527D-952E-7A148425AE4A}']
  { constructors } 

    {class} function init(uriString: string): DNUri; overload;
    {class} function init(uriString: string; dontEscape: Boolean): DNUri; overload;
    {class} function init(baseUri: DNUri; relativeUri: string; dontEscape: Boolean): DNUri; overload;
    {class} function init(uriString: string; uriKind: DNUriKind): DNUri; overload;
    {class} function init(baseUri: DNUri; relativeUri: string): DNUri; overload;
    {class} function init(baseUri: DNUri; relativeUri: DNUri): DNUri; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_UriSchemeFile: string;
   function __fakeFieldGet_UriSchemeFtp: string;
   function __fakeFieldGet_UriSchemeGopher: string;
   function __fakeFieldGet_UriSchemeHttp: string;
   function __fakeFieldGet_UriSchemeHttps: string;
   function __fakeFieldGet_UriSchemeMailto: string;
   function __fakeFieldGet_UriSchemeNews: string;
   function __fakeFieldGet_UriSchemeNntp: string;
   function __fakeFieldGet_UriSchemeNetTcp: string;
   function __fakeFieldGet_UriSchemeNetPipe: string;
   function __fakeFieldGet_SchemeDelimiter: string;

  { static fields } 

    {class} property UriSchemeFile: string read __fakeFieldGet_UriSchemeFile;
    {class} property UriSchemeFtp: string read __fakeFieldGet_UriSchemeFtp;
    {class} property UriSchemeGopher: string read __fakeFieldGet_UriSchemeGopher;
    {class} property UriSchemeHttp: string read __fakeFieldGet_UriSchemeHttp;
    {class} property UriSchemeHttps: string read __fakeFieldGet_UriSchemeHttps;
    {class} property UriSchemeMailto: string read __fakeFieldGet_UriSchemeMailto;
    {class} property UriSchemeNews: string read __fakeFieldGet_UriSchemeNews;
    {class} property UriSchemeNntp: string read __fakeFieldGet_UriSchemeNntp;
    {class} property UriSchemeNetTcp: string read __fakeFieldGet_UriSchemeNetTcp;
    {class} property UriSchemeNetPipe: string read __fakeFieldGet_UriSchemeNetPipe;
    {class} property SchemeDelimiter: string read __fakeFieldGet_SchemeDelimiter;

  { static methods } 

    {class} function HexUnescape(pattern: string; out index: Int32): Char;
    {class} function IsHexEncoding(pattern: string; index: Int32): Boolean;
    {class} function CheckSchemeName(schemeName: string): Boolean;
    {class} function IsHexDigit(character: Char): Boolean;
    {class} function FromHex(digit: Char): Int32;
    {class} function TryCreate(uriString: string; uriKind: DNUriKind; out result: DNUri): Boolean; overload;
    {class} function TryCreate(baseUri: DNUri; relativeUri: string; out result: DNUri): Boolean; overload;
    {class} function TryCreate(baseUri: DNUri; relativeUri: DNUri; out result: DNUri): Boolean; overload;
    {class} function Compare(uri1: DNUri; uri2: DNUri; partsToCompare: DNUriComponents; compareFormat: DNUriFormat; comparisonType: DDN.mscorlib.DNStringComparison): Int32;
    {class} function IsWellFormedUriString(uriString: string; uriKind: DNUriKind): Boolean;
    {class} function EscapeUriString(stringToEscape: string): string;
    {class} function EscapeDataString(stringToEscape: string): string;
    {class} function CheckHostName(name: string): DNUriHostNameType;
    {class} function HexEscape(character: Char): string;
    {class} function UnescapeDataString(stringToUnescape: string): string;

  end;

  [DNTypeName('System.Uri')]
  DNUri = interface(DDN.mscorlib.DNISerializable)
  ['{9BB92499-99AB-3AE5-93D2-0F41F92018D0}']
  { getters & setters } 

    function get_AbsolutePath: string;
    function get_AbsoluteUri: string;
    function get_LocalPath: string;
    function get_Authority: string;
    function get_HostNameType: DNUriHostNameType;
    function get_IsDefaultPort: Boolean;
    function get_IsFile: Boolean;
    function get_IsLoopback: Boolean;
    function get_PathAndQuery: string;
    function get_Segments: TArray<string>;
    function get_IsUnc: Boolean;
    function get_Host: string;
    function get_Port: Int32;
    function get_Query: string;
    function get_Fragment: string;
    function get_Scheme: string;
    function get_OriginalString: string;
    function get_DnsSafeHost: string;
    function get_IdnHost: string;
    function get_IsAbsoluteUri: Boolean;
    function get_UserEscaped: Boolean;
    function get_UserInfo: string;

  { methods } 

    function GetLeftPart(part: DNUriPartial): string;
    function GetHashCode: Int32;
    function ToString: string;
    function Equals(comparand: DDN.mscorlib.DNObject): Boolean;
    function MakeRelative(toUri: DNUri): string;
    function GetComponents(components: DNUriComponents; format: DNUriFormat): string;
    function IsWellFormedOriginalString: Boolean;
    function IsBaseOf(uri: DNUri): Boolean;
    function MakeRelativeUri(uri: DNUri): DNUri;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AbsolutePath: string read get_AbsolutePath;
    property AbsoluteUri: string read get_AbsoluteUri;
    property LocalPath: string read get_LocalPath;
    property Authority: string read get_Authority;
    property HostNameType: DNUriHostNameType read get_HostNameType;
    property IsDefaultPort: Boolean read get_IsDefaultPort;
    property IsFile: Boolean read get_IsFile;
    property IsLoopback: Boolean read get_IsLoopback;
    property PathAndQuery: string read get_PathAndQuery;
    property Segments: TArray<string> read get_Segments;
    property IsUnc: Boolean read get_IsUnc;
    property Host: string read get_Host;
    property Port: Int32 read get_Port;
    property Query: string read get_Query;
    property Fragment: string read get_Fragment;
    property Scheme: string read get_Scheme;
    property OriginalString: string read get_OriginalString;
    property DnsSafeHost: string read get_DnsSafeHost;
    property IdnHost: string read get_IdnHost;
    property IsAbsoluteUri: Boolean read get_IsAbsoluteUri;
    property UserEscaped: Boolean read get_UserEscaped;
    property UserInfo: string read get_UserInfo;
  end;

  TDNUri = class(TDNGenericImport<DNUriClass, DNUri>) end;

  //-------------namespace: System----------------
  DNUriBuilderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F5FACB15-1B09-5ABD-942C-EA80AA3F6E5E}']
  { constructors } 

    {class} function init: DNUriBuilder; overload;
    {class} function init(uri: string): DNUriBuilder; overload;
    {class} function init(uri: DNUri): DNUriBuilder; overload;
    {class} function init(schemeName: string; hostName: string): DNUriBuilder; overload;
    {class} function init(scheme: string; host: string; portNumber: Int32): DNUriBuilder; overload;
    {class} function init(scheme: string; host: string; port: Int32; pathValue: string): DNUriBuilder; overload;
    {class} function init(scheme: string; host: string; port: Int32; path: string; extraValue: string): DNUriBuilder; overload;

  end;

  [DNTypeName('System.UriBuilder')]
  DNUriBuilder = interface(DDN.mscorlib.DNObject)
  ['{478762A2-B2AE-34AF-B9BE-91B0727637FE}']
  { getters & setters } 

    function get_Fragment: string;
    procedure set_Fragment(value: string);
    function get_Host: string;
    procedure set_Host(value: string);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_Path: string;
    procedure set_Path(value: string);
    function get_Port: Int32;
    procedure set_Port(value: Int32);
    function get_Query: string;
    procedure set_Query(value: string);
    function get_Scheme: string;
    procedure set_Scheme(value: string);
    function get_Uri: DNUri;
    function get_UserName: string;
    procedure set_UserName(value: string);

  { methods } 

    function Equals(rparam: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Fragment: string read get_Fragment write set_Fragment;
    property Host: string read get_Host write set_Host;
    property Password: string read get_Password write set_Password;
    property Path: string read get_Path write set_Path;
    property Port: Int32 read get_Port write set_Port;
    property Query: string read get_Query write set_Query;
    property Scheme: string read get_Scheme write set_Scheme;
    property Uri: DNUri read get_Uri;
    property UserName: string read get_UserName write set_UserName;
  end;

  TDNUriBuilder = class(TDNGenericImport<DNUriBuilderClass, DNUriBuilder>) end;

  //-------------namespace: System----------------
  DNUriParserClass = interface(DDN.mscorlib.DNObjectClass)
  ['{493C7564-3514-561E-9FEB-834221906F6B}']
  { static methods } 

    {class} procedure &Register(uriParser: DNUriParser; schemeName: string; defaultPort: Int32);
    {class} function IsKnownScheme(schemeName: string): Boolean;

  end;

  [DNTypeName('System.UriParser')]
  DNUriParser = interface(DDN.mscorlib.DNObject)
  ['{006A4A0B-17F6-30F8-A9A6-F45FDC31AA31}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNUriParser = class(TDNGenericImport<DNUriParserClass, DNUriParser>) end;

  //-------------namespace: System----------------
  DNFileStyleUriParserClass = interface(DNUriParserClass)
  ['{5CAC7EC2-B2C9-56BF-94C5-2AF8F0074778}']
  { constructors } 

    {class} function init: DNFileStyleUriParser;

  end;

  [DNTypeName('System.FileStyleUriParser')]
  DNFileStyleUriParser = interface(DNUriParser)
  ['{D499D41A-7F3A-3763-A128-BAFF41C3F9C1}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFileStyleUriParser = class(TDNGenericImport<DNFileStyleUriParserClass, DNFileStyleUriParser>) end;

  //-------------namespace: System----------------
  DNFtpStyleUriParserClass = interface(DNUriParserClass)
  ['{4C7EC982-4096-5FA6-8978-2FD9CB61C053}']
  { constructors } 

    {class} function init: DNFtpStyleUriParser;

  end;

  [DNTypeName('System.FtpStyleUriParser')]
  DNFtpStyleUriParser = interface(DNUriParser)
  ['{2E3CC4C7-96EC-3B30-A4EB-F6C5BDE754A3}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFtpStyleUriParser = class(TDNGenericImport<DNFtpStyleUriParserClass, DNFtpStyleUriParser>) end;

  //-------------namespace: System----------------
  DNGenericUriParserClass = interface(DNUriParserClass)
  ['{581586F3-E7B7-51F9-858F-3B67D6D3CB10}']
  { constructors } 

    {class} function init(options: DNGenericUriParserOptions): DNGenericUriParser;

  end;

  [DNTypeName('System.GenericUriParser')]
  DNGenericUriParser = interface(DNUriParser)
  ['{5375CDAF-842B-32F3-8340-484E7E87F237}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGenericUriParser = class(TDNGenericImport<DNGenericUriParserClass, DNGenericUriParser>) end;

  //-------------namespace: System----------------
  DNGopherStyleUriParserClass = interface(DNUriParserClass)
  ['{AE14E2D3-6CCF-5C34-9959-5BE53C245367}']
  { constructors } 

    {class} function init: DNGopherStyleUriParser;

  end;

  [DNTypeName('System.GopherStyleUriParser')]
  DNGopherStyleUriParser = interface(DNUriParser)
  ['{6742421E-67C2-35CF-8CF1-B2C140AF6BD0}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGopherStyleUriParser = class(TDNGenericImport<DNGopherStyleUriParserClass, DNGopherStyleUriParser>) end;

  //-------------namespace: System----------------
  DNHttpStyleUriParserClass = interface(DNUriParserClass)
  ['{834C6B96-F529-5384-AFA9-A0C56AFC6CE7}']
  { constructors } 

    {class} function init: DNHttpStyleUriParser;

  end;

  [DNTypeName('System.HttpStyleUriParser')]
  DNHttpStyleUriParser = interface(DNUriParser)
  ['{89D7141F-0A2F-335C-B098-D1F5155D52D4}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHttpStyleUriParser = class(TDNGenericImport<DNHttpStyleUriParserClass, DNHttpStyleUriParser>) end;

  //-------------namespace: System----------------
  DNLdapStyleUriParserClass = interface(DNUriParserClass)
  ['{D75514BF-3FB1-5E27-974D-DF827E07A015}']
  { constructors } 

    {class} function init: DNLdapStyleUriParser;

  end;

  [DNTypeName('System.LdapStyleUriParser')]
  DNLdapStyleUriParser = interface(DNUriParser)
  ['{75B6965D-49BC-3293-8DA2-2257CC953315}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNLdapStyleUriParser = class(TDNGenericImport<DNLdapStyleUriParserClass, DNLdapStyleUriParser>) end;

  //-------------namespace: System----------------
  DNNetPipeStyleUriParserClass = interface(DNUriParserClass)
  ['{EB92D43A-74BB-5C16-AD28-F37762E02804}']
  { constructors } 

    {class} function init: DNNetPipeStyleUriParser;

  end;

  [DNTypeName('System.NetPipeStyleUriParser')]
  DNNetPipeStyleUriParser = interface(DNUriParser)
  ['{7E2477D5-7DCB-38AB-ADD1-095AA2906BC1}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNNetPipeStyleUriParser = class(TDNGenericImport<DNNetPipeStyleUriParserClass, DNNetPipeStyleUriParser>) end;

  //-------------namespace: System----------------
  DNNetTcpStyleUriParserClass = interface(DNUriParserClass)
  ['{A3A07FBB-F6EF-5A10-B8F8-B1A44D4FA999}']
  { constructors } 

    {class} function init: DNNetTcpStyleUriParser;

  end;

  [DNTypeName('System.NetTcpStyleUriParser')]
  DNNetTcpStyleUriParser = interface(DNUriParser)
  ['{38F7613D-93D1-3866-A5AA-F7AE8C9DC79A}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNNetTcpStyleUriParser = class(TDNGenericImport<DNNetTcpStyleUriParserClass, DNNetTcpStyleUriParser>) end;

  //-------------namespace: System----------------
  DNNewsStyleUriParserClass = interface(DNUriParserClass)
  ['{2C8A054A-DD14-5219-A046-3D4250567C34}']
  { constructors } 

    {class} function init: DNNewsStyleUriParser;

  end;

  [DNTypeName('System.NewsStyleUriParser')]
  DNNewsStyleUriParser = interface(DNUriParser)
  ['{E1D6D93B-257B-366E-9177-5A870937E2BF}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNNewsStyleUriParser = class(TDNGenericImport<DNNewsStyleUriParserClass, DNNewsStyleUriParser>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNLinkedList_EnumeratorClass<T> = interface(DDN.mscorlib.DNValueTypeClass)
  ['{B5D04948-326C-533E-86F0-1433FA70E098}']
  end;

  [DNTypeName('System.Collections.Generic.LinkedList`1+Enumerator')]
  DNLinkedList_Enumerator<T> = interface(DDN.mscorlib.DNValueType)
  ['{60581276-8E8C-35EA-8878-DF49E256BCE0}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    function MoveNext: Boolean;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNLinkedList_Enumerator<T> = class(TDNGenericImport<DNLinkedList_EnumeratorClass<T>, DNLinkedList_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNQueue_EnumeratorClass<T> = interface(DDN.mscorlib.DNValueTypeClass)
  ['{EB7F70D7-A808-5C5E-A141-4FD87DC60E27}']
  end;

  [DNTypeName('System.Collections.Generic.Queue`1+Enumerator')]
  DNQueue_Enumerator<T> = interface(DDN.mscorlib.DNValueType)
  ['{EEDAF195-EADF-3187-81F1-A2AF1B55D7BD}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNQueue_Enumerator<T> = class(TDNGenericImport<DNQueue_EnumeratorClass<T>, DNQueue_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedDictionary_EnumeratorClass<TKey, TValue> = interface(DDN.mscorlib.DNValueTypeClass)
  ['{F99261F6-DFCC-5F28-8129-B50EF731910C}']
  end;

  [DNTypeName('System.Collections.Generic.SortedDictionary`2+Enumerator')]
  DNSortedDictionary_Enumerator<TKey, TValue> = interface(DDN.mscorlib.DNValueType)
  ['{B8145712-5726-387C-95D2-0D67DEACE303}']
  { getters & setters } 

    function get_Current: DDN.mscorlib.DNKeyValuePair<TKey, TValue>;

  { methods } 

    function MoveNext: Boolean;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: DDN.mscorlib.DNKeyValuePair<TKey, TValue> read get_Current;
  end;

  TDNSortedDictionary_Enumerator<TKey, TValue> = class(TDNGenericImport<DNSortedDictionary_EnumeratorClass<TKey, TValue>, DNSortedDictionary_Enumerator<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedDictionary_KeyCollection_EnumeratorClass<TKey, TValue> = interface(DDN.mscorlib.DNValueTypeClass)
  ['{BA6E6405-697C-562C-A80B-A348E0F3DB34}']
  end;

  [DNTypeName('System.Collections.Generic.SortedDictionary`2+KeyCollection+Enumerator')]
  DNSortedDictionary_KeyCollection_Enumerator<TKey, TValue> = interface(DDN.mscorlib.DNValueType)
  ['{6688F04B-C032-345C-80DB-DAF00ADF21E9}']
  { getters & setters } 

    function get_Current: TKey;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: TKey read get_Current;
  end;

  TDNSortedDictionary_KeyCollection_Enumerator<TKey, TValue> = class(TDNGenericImport<DNSortedDictionary_KeyCollection_EnumeratorClass<TKey, TValue>, DNSortedDictionary_KeyCollection_Enumerator<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedDictionary_ValueCollection_EnumeratorClass<TKey, TValue> = interface(DDN.mscorlib.DNValueTypeClass)
  ['{92159866-1262-50E6-A816-6EFBB82C3F39}']
  end;

  [DNTypeName('System.Collections.Generic.SortedDictionary`2+ValueCollection+Enumerator')]
  DNSortedDictionary_ValueCollection_Enumerator<TKey, TValue> = interface(DDN.mscorlib.DNValueType)
  ['{6ACC44BD-EF63-37D5-AEB1-58844C521679}']
  { getters & setters } 

    function get_Current: TValue;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: TValue read get_Current;
  end;

  TDNSortedDictionary_ValueCollection_Enumerator<TKey, TValue> = class(TDNGenericImport<DNSortedDictionary_ValueCollection_EnumeratorClass<TKey, TValue>, DNSortedDictionary_ValueCollection_Enumerator<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNSortedSet_EnumeratorClass<T> = interface(DDN.mscorlib.DNValueTypeClass)
  ['{A9A9CB05-5C62-5C47-8DED-3DBFFC0A84E7}']
  end;

  [DNTypeName('System.Collections.Generic.SortedSet`1+Enumerator')]
  DNSortedSet_Enumerator<T> = interface(DDN.mscorlib.DNValueType)
  ['{7A8AE9A8-7003-3B18-BFBB-0003A9B6D292}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    function MoveNext: Boolean;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNSortedSet_Enumerator<T> = class(TDNGenericImport<DNSortedSet_EnumeratorClass<T>, DNSortedSet_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Generic----------------
  DNStack_EnumeratorClass<T> = interface(DDN.mscorlib.DNValueTypeClass)
  ['{61C7921D-5CFD-5342-906D-1F86362833E4}']
  end;

  [DNTypeName('System.Collections.Generic.Stack`1+Enumerator')]
  DNStack_Enumerator<T> = interface(DDN.mscorlib.DNValueType)
  ['{FFAED1ED-DC8A-37BA-B386-488A4CD2AD4A}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNStack_Enumerator<T> = class(TDNGenericImport<DNStack_EnumeratorClass<T>, DNStack_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Specialized----------------
  DNBitVector32Class = interface(DDN.mscorlib.DNValueTypeClass)
  ['{6888548E-D8CF-523E-ADD4-82172E4D0DF5}']
  { constructors } 

    {class} function init(data: Int32): DNBitVector32; overload;
    {class} function init(value: DNBitVector32): DNBitVector32; overload;

  { static methods } 

    {class} function CreateMask: Int32; overload;
    {class} function CreateMask(previous: Int32): Int32; overload;
    {class} function CreateSection(maxValue: Int16): DNBitVector32_Section; overload;
    {class} function CreateSection(maxValue: Int16; previous: DNBitVector32_Section): DNBitVector32_Section; overload;
    {class} function ToString(value: DNBitVector32): string; overload;

  end;

  [DNTypeName('System.Collections.Specialized.BitVector32')]
  DNBitVector32 = interface(DDN.mscorlib.DNValueType)
  ['{A819A98C-9845-399D-8E2F-ACC380B5A919}']
  { getters & setters } 

    function get_Item(bit: Int32): Boolean; overload;
    procedure set_Item(bit: Int32; value: Boolean); overload;
    function get_Item(section: DNBitVector32_Section): Int32; overload;
    procedure set_Item(section: DNBitVector32_Section; value: Int32); overload;
    function get_Data: Int32;

  { methods } 

    function Equals(o: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[bit: Int32]: Boolean read get_Item write set_Item; default;
    property Item[section: DNBitVector32_Section]: Int32 read get_Item write set_Item; default;
    property Data: Int32 read get_Data;
  end;

  TDNBitVector32 = class(TDNGenericImport<DNBitVector32Class, DNBitVector32>) end;

  //-------------namespace: System.Collections.Specialized----------------
  DNBitVector32_SectionClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{858E9ACE-25B3-5D92-9C09-9DE3C0B6791C}']
  { static methods } 

    {class} function ToString(value: DNBitVector32_Section): string; overload;

  end;

  [DNTypeName('System.Collections.Specialized.BitVector32+Section')]
  DNBitVector32_Section = interface(DDN.mscorlib.DNValueType)
  ['{1CEB3BE9-A840-342A-A978-716F9D70D771}']
  { getters & setters } 

    function get_Mask: Int16;
    function get_Offset: Int16;

  { methods } 

    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(obj: DNBitVector32_Section): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Mask: Int16 read get_Mask;
    property Offset: Int16 read get_Offset;
  end;

  TDNBitVector32_Section = class(TDNGenericImport<DNBitVector32_SectionClass, DNBitVector32_Section>) end;

  //-------------namespace: System.ComponentModel.Design.Serialization----------------
  DNMemberRelationshipClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{665EF6AE-E74F-5705-BBCE-5FE1DFA3E9F9}']
  { constructors } 

    {class} function init(owner: DDN.mscorlib.DNObject; member: DNMemberDescriptor): DNMemberRelationship;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNMemberRelationship;

  { static fields } 

    {class} property Empty: DNMemberRelationship read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.ComponentModel.Design.Serialization.MemberRelationship')]
  DNMemberRelationship = interface(DDN.mscorlib.DNValueType)
  ['{0C678A53-63AB-389B-A2EF-37F61087A287}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_Member: DNMemberDescriptor;
    function get_Owner: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
    property Member: DNMemberDescriptor read get_Member;
    property Owner: DDN.mscorlib.DNObject read get_Owner;
  end;

  TDNMemberRelationship = class(TDNGenericImport<DNMemberRelationshipClass, DNMemberRelationship>) end;

  //-------------namespace: System.Diagnostics----------------
  DNCounterSampleClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{108251C6-C210-58F6-8741-66190C446AEF}']
  { constructors } 

    {class} function init(rawValue: Int64; baseValue: Int64; counterFrequency: Int64; systemFrequency: Int64; timeStamp: Int64; timeStamp100nSec: Int64; counterType: DNPerformanceCounterType): DNCounterSample; overload;
    {class} function init(rawValue: Int64; baseValue: Int64; counterFrequency: Int64; systemFrequency: Int64; timeStamp: Int64; timeStamp100nSec: Int64; counterType: DNPerformanceCounterType; counterTimeStamp: Int64): DNCounterSample; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNCounterSample;

  { static fields } 

    {class} property Empty: DNCounterSample read __fakeFieldGet_Empty;

  { static methods } 

    {class} function Calculate(counterSample: DNCounterSample): Single; overload;
    {class} function Calculate(counterSample: DNCounterSample; nextCounterSample: DNCounterSample): Single; overload;

  end;

  [DNTypeName('System.Diagnostics.CounterSample')]
  DNCounterSample = interface(DDN.mscorlib.DNValueType)
  ['{55576C07-79AB-3036-99A2-B45790D48688}']
  { getters & setters } 

    function get_RawValue: Int64;
    function get_BaseValue: Int64;
    function get_SystemFrequency: Int64;
    function get_CounterFrequency: Int64;
    function get_CounterTimeStamp: Int64;
    function get_TimeStamp: Int64;
    function get_TimeStamp100nSec: Int64;
    function get_CounterType: DNPerformanceCounterType;

  { methods } 

    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(sample: DNCounterSample): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property RawValue: Int64 read get_RawValue;
    property BaseValue: Int64 read get_BaseValue;
    property SystemFrequency: Int64 read get_SystemFrequency;
    property CounterFrequency: Int64 read get_CounterFrequency;
    property CounterTimeStamp: Int64 read get_CounterTimeStamp;
    property TimeStamp: Int64 read get_TimeStamp;
    property TimeStamp100nSec: Int64 read get_TimeStamp100nSec;
    property CounterType: DNPerformanceCounterType read get_CounterType;
  end;

  TDNCounterSample = class(TDNGenericImport<DNCounterSampleClass, DNCounterSample>) end;

  //-------------namespace: System.IO----------------
  DNWaitForChangedResultClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{352C31F8-77B2-51FB-BD62-81CAA7F35D57}']
  end;

  [DNTypeName('System.IO.WaitForChangedResult')]
  DNWaitForChangedResult = interface(DDN.mscorlib.DNValueType)
  ['{E688B450-42DC-34CE-A6DD-DDEDF44102FD}']
  { getters & setters } 

    function get_ChangeType: DNWatcherChangeTypes;
    procedure set_ChangeType(value: DNWatcherChangeTypes);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_OldName: string;
    procedure set_OldName(value: string);
    function get_TimedOut: Boolean;
    procedure set_TimedOut(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ChangeType: DNWatcherChangeTypes read get_ChangeType write set_ChangeType;
    property Name: string read get_Name write set_Name;
    property OldName: string read get_OldName write set_OldName;
    property TimedOut: Boolean read get_TimedOut write set_TimedOut;
  end;

  TDNWaitForChangedResult = class(TDNGenericImport<DNWaitForChangedResultClass, DNWaitForChangedResult>) end;

  //-------------namespace: System.Net.Sockets----------------
  DNIPPacketInformationClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{43703820-1388-577C-A969-6E79EED173A6}']
  end;

  [DNTypeName('System.Net.Sockets.IPPacketInformation')]
  DNIPPacketInformation = interface(DDN.mscorlib.DNValueType)
  ['{24FBA26B-40E1-3442-A4F2-94BA570C4134}']
  { getters & setters } 

    function get_Address: DNIPAddress;
    function get_Interface: Int32;

  { methods } 

    function Equals(comparand: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Address: DNIPAddress read get_Address;
    property &Interface: Int32 read get_Interface;
  end;

  TDNIPPacketInformation = class(TDNGenericImport<DNIPPacketInformationClass, DNIPPacketInformation>) end;

  //-------------namespace: System.Net.Sockets----------------
  DNSocketInformationClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{2CF134BC-4AA3-5287-888E-8D309A9B8C60}']
  end;

  [DNTypeName('System.Net.Sockets.SocketInformation')]
  DNSocketInformation = interface(DDN.mscorlib.DNValueType)
  ['{A2812910-B10D-3F80-B420-05D7358A406B}']
  { getters & setters } 

    function get_ProtocolInformation: TArray<Byte>;
    procedure set_ProtocolInformation(value: TArray<Byte>);
    function get_Options: DNSocketInformationOptions;
    procedure set_Options(value: DNSocketInformationOptions);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ProtocolInformation: TArray<Byte> read get_ProtocolInformation write set_ProtocolInformation;
    property Options: DNSocketInformationOptions read get_Options write set_Options;
  end;

  TDNSocketInformation = class(TDNGenericImport<DNSocketInformationClass, DNSocketInformation>) end;

  //-------------namespace: System.Net.Sockets----------------
  DNSocketReceiveFromResultClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{46EE174F-CC12-565A-A9A7-9E0A22474760}']
  end;

  [DNTypeName('System.Net.Sockets.SocketReceiveFromResult')]
  DNSocketReceiveFromResult = interface(DDN.mscorlib.DNValueType)
  ['{9A06975C-2683-338B-A529-5474DC36E777}']
  { fields getter & setter } 

   function __fakeFieldGet_ReceivedBytes: Int32;
   procedure __fakeFieldSet_ReceivedBytes(value: Int32);
   function __fakeFieldGet_RemoteEndPoint: DNEndPoint;
   procedure __fakeFieldSet_RemoteEndPoint(value: DNEndPoint);

  { fields } 

   property ReceivedBytes: Int32 read __fakeFieldGet_ReceivedBytes write __fakeFieldSet_ReceivedBytes;
   property RemoteEndPoint: DNEndPoint read __fakeFieldGet_RemoteEndPoint write __fakeFieldSet_RemoteEndPoint;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNSocketReceiveFromResult = class(TDNGenericImport<DNSocketReceiveFromResultClass, DNSocketReceiveFromResult>) end;

  //-------------namespace: System.Net.Sockets----------------
  DNSocketReceiveMessageFromResultClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{2CE161A5-FCE4-5E2F-B1A7-40ABDF3D1C74}']
  end;

  [DNTypeName('System.Net.Sockets.SocketReceiveMessageFromResult')]
  DNSocketReceiveMessageFromResult = interface(DDN.mscorlib.DNValueType)
  ['{024A676D-CA77-3179-940E-D56C4ED6B3FC}']
  { fields getter & setter } 

   function __fakeFieldGet_ReceivedBytes: Int32;
   procedure __fakeFieldSet_ReceivedBytes(value: Int32);
   function __fakeFieldGet_SocketFlags: DNSocketFlags;
   procedure __fakeFieldSet_SocketFlags(value: DNSocketFlags);
   function __fakeFieldGet_RemoteEndPoint: DNEndPoint;
   procedure __fakeFieldSet_RemoteEndPoint(value: DNEndPoint);
   function __fakeFieldGet_PacketInformation: DNIPPacketInformation;
   procedure __fakeFieldSet_PacketInformation(value: DNIPPacketInformation);

  { fields } 

   property ReceivedBytes: Int32 read __fakeFieldGet_ReceivedBytes write __fakeFieldSet_ReceivedBytes;
   property SocketFlags: DNSocketFlags read __fakeFieldGet_SocketFlags write __fakeFieldSet_SocketFlags;
   property RemoteEndPoint: DNEndPoint read __fakeFieldGet_RemoteEndPoint write __fakeFieldSet_RemoteEndPoint;
   property PacketInformation: DNIPPacketInformation read __fakeFieldGet_PacketInformation write __fakeFieldSet_PacketInformation;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNSocketReceiveMessageFromResult = class(TDNGenericImport<DNSocketReceiveMessageFromResultClass, DNSocketReceiveMessageFromResult>) end;

  //-------------namespace: System.Net.Sockets----------------
  DNUdpReceiveResultClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{F733ECF1-4FF7-54F3-9CD2-94B56594B897}']
  { constructors } 

    {class} function init(buffer: TArray<Byte>; remoteEndPoint: DNIPEndPoint): DNUdpReceiveResult;

  end;

  [DNTypeName('System.Net.Sockets.UdpReceiveResult')]
  DNUdpReceiveResult = interface(DDN.mscorlib.DNValueType)
  ['{FF2F8C77-37B0-3844-95D3-9E0555AD0010}']
  { getters & setters } 

    function get_Buffer: TArray<Byte>;
    function get_RemoteEndPoint: DNIPEndPoint;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function Equals(other: DNUdpReceiveResult): Boolean; overload;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Buffer: TArray<Byte> read get_Buffer;
    property RemoteEndPoint: DNIPEndPoint read get_RemoteEndPoint;
  end;

  TDNUdpReceiveResult = class(TDNGenericImport<DNUdpReceiveResultClass, DNUdpReceiveResult>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNFORMATETCClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{655EF9D1-6772-506E-AA71-0460CAB9A761}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.FORMATETC')]
  DNFORMATETC = interface(DDN.mscorlib.DNValueType)
  ['{FA416EAE-FFCC-37CC-9D5C-5EFC76D5CAA7}']
  { fields getter & setter } 

   function __fakeFieldGet_cfFormat: Int16;
   procedure __fakeFieldSet_cfFormat(value: Int16);
   function __fakeFieldGet_ptd: IntPtr;
   procedure __fakeFieldSet_ptd(value: IntPtr);
   function __fakeFieldGet_dwAspect: DNDVASPECT;
   procedure __fakeFieldSet_dwAspect(value: DNDVASPECT);
   function __fakeFieldGet_lindex: Int32;
   procedure __fakeFieldSet_lindex(value: Int32);
   function __fakeFieldGet_tymed: DNTYMED;
   procedure __fakeFieldSet_tymed(value: DNTYMED);

  { fields } 

   property cfFormat: Int16 read __fakeFieldGet_cfFormat write __fakeFieldSet_cfFormat;
   property ptd: IntPtr read __fakeFieldGet_ptd write __fakeFieldSet_ptd;
   property dwAspect: DNDVASPECT read __fakeFieldGet_dwAspect write __fakeFieldSet_dwAspect;
   property lindex: Int32 read __fakeFieldGet_lindex write __fakeFieldSet_lindex;
   property tymed: DNTYMED read __fakeFieldGet_tymed write __fakeFieldSet_tymed;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNFORMATETC = class(TDNGenericImport<DNFORMATETCClass, DNFORMATETC>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNSTATDATAClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{6353B081-EFB7-5A69-BFD0-9EB9408C5709}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.STATDATA')]
  DNSTATDATA = interface(DDN.mscorlib.DNValueType)
  ['{F52D1D74-E4EF-31FA-9A2A-14581829BAE2}']
  { fields getter & setter } 

   function __fakeFieldGet_formatetc: DNFORMATETC;
   procedure __fakeFieldSet_formatetc(value: DNFORMATETC);
   function __fakeFieldGet_advf: DNADVF;
   procedure __fakeFieldSet_advf(value: DNADVF);
   function __fakeFieldGet_advSink: DNIAdviseSink;
   procedure __fakeFieldSet_advSink(value: DNIAdviseSink);
   function __fakeFieldGet_connection: Int32;
   procedure __fakeFieldSet_connection(value: Int32);

  { fields } 

   property formatetc: DNFORMATETC read __fakeFieldGet_formatetc write __fakeFieldSet_formatetc;
   property advf: DNADVF read __fakeFieldGet_advf write __fakeFieldSet_advf;
   property advSink: DNIAdviseSink read __fakeFieldGet_advSink write __fakeFieldSet_advSink;
   property connection: Int32 read __fakeFieldGet_connection write __fakeFieldSet_connection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNSTATDATA = class(TDNGenericImport<DNSTATDATAClass, DNSTATDATA>) end;

  //-------------namespace: System.Runtime.InteropServices.ComTypes----------------
  DNSTGMEDIUMClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{95E919F4-C3A5-5F87-A626-AE43820F9D80}']
  end;

  [DNTypeName('System.Runtime.InteropServices.ComTypes.STGMEDIUM')]
  DNSTGMEDIUM = interface(DDN.mscorlib.DNValueType)
  ['{D13D03EF-8C26-375D-BF49-D9ACCC0A15EF}']
  { fields getter & setter } 

   function __fakeFieldGet_tymed: DNTYMED;
   procedure __fakeFieldSet_tymed(value: DNTYMED);
   function __fakeFieldGet_unionmember: IntPtr;
   procedure __fakeFieldSet_unionmember(value: IntPtr);
   function __fakeFieldGet_pUnkForRelease: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_pUnkForRelease(value: DDN.mscorlib.DNObject);

  { fields } 

   property tymed: DNTYMED read __fakeFieldGet_tymed write __fakeFieldSet_tymed;
   property unionmember: IntPtr read __fakeFieldGet_unionmember write __fakeFieldSet_unionmember;
   property pUnkForRelease: DDN.mscorlib.DNObject read __fakeFieldGet_pUnkForRelease write __fakeFieldSet_pUnkForRelease;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNSTGMEDIUM = class(TDNGenericImport<DNSTGMEDIUMClass, DNSTGMEDIUM>) end;

  //-------------namespace: System.Security.Cryptography.X509Certificates----------------
  DNX509ChainStatusClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{0DF5344A-E8E2-5F16-8B88-9B85AD22D392}']
  end;

  [DNTypeName('System.Security.Cryptography.X509Certificates.X509ChainStatus')]
  DNX509ChainStatus = interface(DDN.mscorlib.DNValueType)
  ['{790BD057-D340-3A95-92FC-7C748F6D823D}']
  { getters & setters } 

    function get_Status: DNX509ChainStatusFlags;
    procedure set_Status(value: DNX509ChainStatusFlags);
    function get_StatusInformation: string;
    procedure set_StatusInformation(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Status: DNX509ChainStatusFlags read get_Status write set_Status;
    property StatusInformation: string read get_StatusInformation write set_StatusInformation;
  end;

  TDNX509ChainStatus = class(TDNGenericImport<DNX509ChainStatusClass, DNX509ChainStatus>) end;


implementation


initialization
  LoadAssemblyModule('System.dll', True);

finalization

end.
