//----------------------------------------------------------------------------
//  System.Net.Mail.dll: System.Net.Mail, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 3.1.18
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.Net.Mail
//  Author: ying32
//----------------------------------------------------------------------------

{$IFNDEF DDNCSYSTEMNETMAIL}
unit DDNC.System.Net.Mail;
{$ENDIF}

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.System.Private.CoreLib,
  DDNC.System.ComponentModel.EventBasedAsync,
  DDNC.System.Private.Uri,
  DDNC.System.Collections.Specialized,
  DDNC.System.Net.Primitives,
  DDNC.System.Net.ServicePoint,
  DDNC.System.Security.Cryptography.X509Certificates;

type

{ enums }

  //-------------namespace: System.Net.Mail----------------
  [DNTypeName('System.Net.Mail.DeliveryNotificationOptions')]
  DNDeliveryNotificationOptions = type Integer;
  DNDeliveryNotificationOptionsHelper = record helper for DNDeliveryNotificationOptions
  public const
    None = 0;
    OnSuccess = 1;
    OnFailure = 2;
    Delay = 4;
    Never = 134217728;
  end;


  //-------------namespace: System.Net.Mail----------------
  [DNTypeName('System.Net.Mail.MailPriority')]
  DNMailPriority = type Integer;
  DNMailPriorityHelper = record helper for DNMailPriority
  public const
    Normal = 0;
    Low = 1;
    High = 2;
  end;


  //-------------namespace: System.Net.Mail----------------
  [DNTypeName('System.Net.Mail.SmtpDeliveryFormat')]
  DNSmtpDeliveryFormat = type Integer;
  DNSmtpDeliveryFormatHelper = record helper for DNSmtpDeliveryFormat
  public const
    SevenBit = 0;
    International = 1;
  end;


  //-------------namespace: System.Net.Mail----------------
  [DNTypeName('System.Net.Mail.SmtpDeliveryMethod')]
  DNSmtpDeliveryMethod = type Integer;
  DNSmtpDeliveryMethodHelper = record helper for DNSmtpDeliveryMethod
  public const
    Network = 0;
    SpecifiedPickupDirectory = 1;
    PickupDirectoryFromIis = 2;
  end;


  //-------------namespace: System.Net.Mail----------------
  [DNTypeName('System.Net.Mail.SmtpStatusCode')]
  DNSmtpStatusCode = type Integer;
  DNSmtpStatusCodeHelper = record helper for DNSmtpStatusCode
  public const
    SystemStatus = 211;
    HelpMessage = 214;
    ServiceReady = 220;
    ServiceClosingTransmissionChannel = 221;
    Ok = 250;
    UserNotLocalWillForward = 251;
    CannotVerifyUserWillAttemptDelivery = 252;
    StartMailInput = 354;
    ServiceNotAvailable = 421;
    MailboxBusy = 450;
    LocalErrorInProcessing = 451;
    InsufficientStorage = 452;
    ClientNotPermitted = 454;
    CommandUnrecognized = 500;
    SyntaxError = 501;
    CommandNotImplemented = 502;
    BadCommandSequence = 503;
    CommandParameterNotImplemented = 504;
    MustIssueStartTlsFirst = 530;
    MailboxUnavailable = 550;
    UserNotLocalTryAlternatePath = 551;
    ExceededStorageAllocation = 552;
    MailboxNameNotAllowed = 553;
    TransactionFailed = 554;
    GeneralFailure = -1;
  end;


  //-------------namespace: System.Net.Mime----------------
  [DNTypeName('System.Net.Mime.TransferEncoding')]
  DNTransferEncoding = type Integer;
  DNTransferEncodingHelper = record helper for DNTransferEncoding
  public const
    QuotedPrintable = 0;
    Base64 = 1;
    SevenBit = 2;
    EightBit = 3;
    Unknown = -1;
  end;




type


{ declares }

  DNAlternateViewCollection = interface; // type: System.Net.Mail.AlternateViewCollection, namespace: System.Net.Mail
  DNAttachmentCollection = interface; // type: System.Net.Mail.AttachmentCollection, namespace: System.Net.Mail
  DNLinkedResourceCollection = interface; // type: System.Net.Mail.LinkedResourceCollection, namespace: System.Net.Mail
  DNMailAddressCollection = interface; // type: System.Net.Mail.MailAddressCollection, namespace: System.Net.Mail
  DNSmtpException = interface; // type: System.Net.Mail.SmtpException, namespace: System.Net.Mail
  DNSmtpFailedRecipientException = interface; // type: System.Net.Mail.SmtpFailedRecipientException, namespace: System.Net.Mail
  DNSmtpFailedRecipientsException = interface; // type: System.Net.Mail.SmtpFailedRecipientsException, namespace: System.Net.Mail
  DNAttachmentBase = interface; // type: System.Net.Mail.AttachmentBase, namespace: System.Net.Mail
  DNAlternateView = interface; // type: System.Net.Mail.AlternateView, namespace: System.Net.Mail
  DNAttachment = interface; // type: System.Net.Mail.Attachment, namespace: System.Net.Mail
  DNLinkedResource = interface; // type: System.Net.Mail.LinkedResource, namespace: System.Net.Mail
  DNMailAddress = interface; // type: System.Net.Mail.MailAddress, namespace: System.Net.Mail
  DNMailMessage = interface; // type: System.Net.Mail.MailMessage, namespace: System.Net.Mail
  DNSmtpClient = interface; // type: System.Net.Mail.SmtpClient, namespace: System.Net.Mail
  DNContentDisposition = interface; // type: System.Net.Mime.ContentDisposition, namespace: System.Net.Mime
  DNContentType = interface; // type: System.Net.Mime.ContentType, namespace: System.Net.Mime
  DNDispositionTypeNames = interface; // type: System.Net.Mime.DispositionTypeNames, namespace: System.Net.Mime
  DNMediaTypeNames = interface; // type: System.Net.Mime.MediaTypeNames, namespace: System.Net.Mime
  DNMediaTypeNames_Application = interface; // type: System.Net.Mime.MediaTypeNames+Application, namespace: System.Net.Mime
  DNMediaTypeNames_Image = interface; // type: System.Net.Mime.MediaTypeNames+Image, namespace: System.Net.Mime
  DNMediaTypeNames_Text = interface; // type: System.Net.Mime.MediaTypeNames+Text, namespace: System.Net.Mime

{ delegates }

  [DNTypeName('System.Net.Mail.SendCompletedEventHandler')]
  DNSendCompletedEventHandler = procedure(sender: DDNC.System.Private.CoreLib.DNObject; e: DDNC.System.ComponentModel.EventBasedAsync.DNAsyncCompletedEventArgs) of object;




{ objects }

  //-------------namespace: System.Net.Mail----------------
  DNAlternateViewCollectionClass = interface(DDNC.System.Private.CoreLib.DNCollectionClass<DNAlternateView>)
  ['{30532FF1-6AA8-5909-907B-ED1B62890E3F}']
  end;

  [DNTypeName('System.Net.Mail.AlternateViewCollection')]
  DNAlternateViewCollection = interface(DDNC.System.Private.CoreLib.DNCollection<DNAlternateView>)
  ['{BDDF43D4-AC56-3A3C-A2A5-433FBC5B489A}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure Dispose;
    procedure CopyTo(&array: TArray<DNAlternateView>; index: Int32);
    function &Contains(item: DNAlternateView): Boolean;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<DNAlternateView>;
    function IndexOf(item: DNAlternateView): Int32;
    procedure Insert(index: Int32; item: DNAlternateView);
    procedure RemoveAt(index: Int32);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNAlternateViewCollection = class(TDNGenericImport<DNAlternateViewCollectionClass, DNAlternateViewCollection>) end;

  //-------------namespace: System.Net.Mail----------------
  DNAttachmentCollectionClass = interface(DDNC.System.Private.CoreLib.DNCollectionClass<DNAttachment>)
  ['{FD10FAEF-03C5-588E-A7A8-19160A47E240}']
  end;

  [DNTypeName('System.Net.Mail.AttachmentCollection')]
  DNAttachmentCollection = interface(DDNC.System.Private.CoreLib.DNCollection<DNAttachment>)
  ['{36F09213-B084-3433-A37E-5DCC487A9C7D}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure Dispose;
    procedure CopyTo(&array: TArray<DNAttachment>; index: Int32);
    function &Contains(item: DNAttachment): Boolean;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<DNAttachment>;
    function IndexOf(item: DNAttachment): Int32;
    procedure Insert(index: Int32; item: DNAttachment);
    procedure RemoveAt(index: Int32);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNAttachmentCollection = class(TDNGenericImport<DNAttachmentCollectionClass, DNAttachmentCollection>) end;

  //-------------namespace: System.Net.Mail----------------
  DNLinkedResourceCollectionClass = interface(DDNC.System.Private.CoreLib.DNCollectionClass<DNLinkedResource>)
  ['{277D5E67-E6A3-5C74-A761-16C43A52944B}']
  end;

  [DNTypeName('System.Net.Mail.LinkedResourceCollection')]
  DNLinkedResourceCollection = interface(DDNC.System.Private.CoreLib.DNCollection<DNLinkedResource>)
  ['{7343CA4E-B209-3458-80A0-CBA18BFF758A}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure Dispose;
    procedure CopyTo(&array: TArray<DNLinkedResource>; index: Int32);
    function &Contains(item: DNLinkedResource): Boolean;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<DNLinkedResource>;
    function IndexOf(item: DNLinkedResource): Int32;
    procedure Insert(index: Int32; item: DNLinkedResource);
    procedure RemoveAt(index: Int32);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNLinkedResourceCollection = class(TDNGenericImport<DNLinkedResourceCollectionClass, DNLinkedResourceCollection>) end;

  //-------------namespace: System.Net.Mail----------------
  DNMailAddressCollectionClass = interface(DDNC.System.Private.CoreLib.DNCollectionClass<DNMailAddress>)
  ['{1F76835D-BF8E-524E-AF77-8D80AF2F77E1}']
  { constructors } 

    {class} function init: DNMailAddressCollection;

  end;

  [DNTypeName('System.Net.Mail.MailAddressCollection')]
  DNMailAddressCollection = interface(DDNC.System.Private.CoreLib.DNCollection<DNMailAddress>)
  ['{5B846B0A-FE87-34D2-AD22-E138FE1EFE3B}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure Add(addresses: string);
    function ToString: string;
    procedure CopyTo(&array: TArray<DNMailAddress>; index: Int32);
    function &Contains(item: DNMailAddress): Boolean;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<DNMailAddress>;
    function IndexOf(item: DNMailAddress): Int32;
    procedure Insert(index: Int32; item: DNMailAddress);
    procedure RemoveAt(index: Int32);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNMailAddressCollection = class(TDNGenericImport<DNMailAddressCollectionClass, DNMailAddressCollection>) end;

  //-------------namespace: System.Net.Mail----------------
  DNSmtpExceptionClass = interface(DDNC.System.Private.CoreLib.DNExceptionClass)
  ['{3C9176E7-038F-5B43-8AF9-39307099E322}']
  { constructors } 

    {class} function init(statusCode: DNSmtpStatusCode): DNSmtpException; overload;
    {class} function init(statusCode: DNSmtpStatusCode; message: string): DNSmtpException; overload;
    {class} function init: DNSmtpException; overload;
    {class} function init(message: string): DNSmtpException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNSmtpException; overload;

  end;

  [DNTypeName('System.Net.Mail.SmtpException')]
  DNSmtpException = interface(DDNC.System.Private.CoreLib.DNException)
  ['{76704343-4E08-3890-B9AC-7ABAD6B49F28}']
  { getters & setters } 

    function get_StatusCode: DNSmtpStatusCode;
    procedure set_StatusCode(value: DNSmtpStatusCode);
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(serializationInfo: DDNC.System.Private.CoreLib.DNSerializationInfo; streamingContext: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property StatusCode: DNSmtpStatusCode read get_StatusCode write set_StatusCode;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNSmtpException = class(TDNGenericImport<DNSmtpExceptionClass, DNSmtpException>) end;

  //-------------namespace: System.Net.Mail----------------
  DNSmtpFailedRecipientExceptionClass = interface(DNSmtpExceptionClass)
  ['{061C0E47-33CF-5AC8-BD57-AF1F8B8D35C7}']
  { constructors } 

    {class} function init: DNSmtpFailedRecipientException; overload;
    {class} function init(message: string): DNSmtpFailedRecipientException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNSmtpFailedRecipientException; overload;
    {class} function init(statusCode: DNSmtpStatusCode; failedRecipient: string): DNSmtpFailedRecipientException; overload;
    {class} function init(statusCode: DNSmtpStatusCode; failedRecipient: string; serverResponse: string): DNSmtpFailedRecipientException; overload;
    {class} function init(message: string; failedRecipient: string; innerException: DDNC.System.Private.CoreLib.DNException): DNSmtpFailedRecipientException; overload;

  end;

  [DNTypeName('System.Net.Mail.SmtpFailedRecipientException')]
  DNSmtpFailedRecipientException = interface(DNSmtpException)
  ['{060E66ED-A200-324D-8C10-A22B34B98908}']
  { getters & setters } 

    function get_FailedRecipient: string;
    function get_StatusCode: DNSmtpStatusCode;
    procedure set_StatusCode(value: DNSmtpStatusCode);
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(serializationInfo: DDNC.System.Private.CoreLib.DNSerializationInfo; streamingContext: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property FailedRecipient: string read get_FailedRecipient;
    property StatusCode: DNSmtpStatusCode read get_StatusCode write set_StatusCode;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNSmtpFailedRecipientException = class(TDNGenericImport<DNSmtpFailedRecipientExceptionClass, DNSmtpFailedRecipientException>) end;

  //-------------namespace: System.Net.Mail----------------
  DNSmtpFailedRecipientsExceptionClass = interface(DNSmtpFailedRecipientExceptionClass)
  ['{CA5A07A9-19AF-5E01-8B9D-2FC665A82E48}']
  { constructors } 

    {class} function init: DNSmtpFailedRecipientsException; overload;
    {class} function init(message: string): DNSmtpFailedRecipientsException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNSmtpFailedRecipientsException; overload;
    {class} function init(message: string; innerExceptions: TArray<DNSmtpFailedRecipientException>): DNSmtpFailedRecipientsException; overload;

  end;

  [DNTypeName('System.Net.Mail.SmtpFailedRecipientsException')]
  DNSmtpFailedRecipientsException = interface(DNSmtpFailedRecipientException)
  ['{B965988E-B0F5-3BD1-9124-9649705430E3}']
  { getters & setters } 

    function get_InnerExceptions: TArray<DNSmtpFailedRecipientException>;
    function get_FailedRecipient: string;
    function get_StatusCode: DNSmtpStatusCode;
    procedure set_StatusCode(value: DNSmtpStatusCode);
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(serializationInfo: DDNC.System.Private.CoreLib.DNSerializationInfo; streamingContext: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property InnerExceptions: TArray<DNSmtpFailedRecipientException> read get_InnerExceptions;
    property FailedRecipient: string read get_FailedRecipient;
    property StatusCode: DNSmtpStatusCode read get_StatusCode write set_StatusCode;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNSmtpFailedRecipientsException = class(TDNGenericImport<DNSmtpFailedRecipientsExceptionClass, DNSmtpFailedRecipientsException>) end;

  //-------------namespace: System.Net.Mail----------------
  DNAttachmentBaseClass = interface(DNObjectClass)
  ['{64F6A79C-15AC-54E8-9AA8-C442590BB543}']
  end;

  [DNTypeName('System.Net.Mail.AttachmentBase')]
  DNAttachmentBase = interface(DDNC.System.Private.CoreLib.DNIDisposable)
  ['{5F0066EB-6E53-3E59-A39D-D5384B5C29C3}']
  { getters & setters } 

    function get_ContentStream: DDNC.System.Private.CoreLib.DNStream;
    function get_ContentId: string;
    procedure set_ContentId(value: string);
    function get_ContentType: DNContentType;
    procedure set_ContentType(value: DNContentType);
    function get_TransferEncoding: DNTransferEncoding;
    procedure set_TransferEncoding(value: DNTransferEncoding);

  { methods } 

    procedure Dispose;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ContentStream: DDNC.System.Private.CoreLib.DNStream read get_ContentStream;
    property ContentId: string read get_ContentId write set_ContentId;
    property ContentType: DNContentType read get_ContentType write set_ContentType;
    property TransferEncoding: DNTransferEncoding read get_TransferEncoding write set_TransferEncoding;
  end;

  TDNAttachmentBase = class(TDNGenericImport<DNAttachmentBaseClass, DNAttachmentBase>) end;

  //-------------namespace: System.Net.Mail----------------
  DNAlternateViewClass = interface(DNAttachmentBaseClass)
  ['{FBD3CF10-D3C2-5B8F-97E8-BCB4752E4798}']
  { constructors } 

    {class} function init(fileName: string): DNAlternateView; overload;
    {class} function init(fileName: string; mediaType: string): DNAlternateView; overload;
    {class} function init(fileName: string; contentType: DNContentType): DNAlternateView; overload;
    {class} function init(contentStream: DDNC.System.Private.CoreLib.DNStream): DNAlternateView; overload;
    {class} function init(contentStream: DDNC.System.Private.CoreLib.DNStream; mediaType: string): DNAlternateView; overload;
    {class} function init(contentStream: DDNC.System.Private.CoreLib.DNStream; contentType: DNContentType): DNAlternateView; overload;

  { static methods } 

    {class} function CreateAlternateViewFromString(content: string): DNAlternateView; overload;
    {class} function CreateAlternateViewFromString(content: string; contentEncoding: DDNC.System.Private.CoreLib.DNEncoding; mediaType: string): DNAlternateView; overload;
    {class} function CreateAlternateViewFromString(content: string; contentType: DNContentType): DNAlternateView; overload;

  end;

  [DNTypeName('System.Net.Mail.AlternateView')]
  DNAlternateView = interface(DNAttachmentBase)
  ['{7E9497C7-21F6-3A82-AAFF-40F95EA5F69C}']
  { getters & setters } 

    function get_LinkedResources: DNLinkedResourceCollection;
    function get_BaseUri: DDNC.System.Private.Uri.DNUri;
    procedure set_BaseUri(value: DDNC.System.Private.Uri.DNUri);
    function get_ContentStream: DDNC.System.Private.CoreLib.DNStream;
    function get_ContentId: string;
    procedure set_ContentId(value: string);
    function get_ContentType: DNContentType;
    procedure set_ContentType(value: DNContentType);
    function get_TransferEncoding: DNTransferEncoding;
    procedure set_TransferEncoding(value: DNTransferEncoding);

  { methods } 

    procedure Dispose;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property LinkedResources: DNLinkedResourceCollection read get_LinkedResources;
    property BaseUri: DDNC.System.Private.Uri.DNUri read get_BaseUri write set_BaseUri;
    property ContentStream: DDNC.System.Private.CoreLib.DNStream read get_ContentStream;
    property ContentId: string read get_ContentId write set_ContentId;
    property ContentType: DNContentType read get_ContentType write set_ContentType;
    property TransferEncoding: DNTransferEncoding read get_TransferEncoding write set_TransferEncoding;
  end;

  TDNAlternateView = class(TDNGenericImport<DNAlternateViewClass, DNAlternateView>) end;

  //-------------namespace: System.Net.Mail----------------
  DNAttachmentClass = interface(DNAttachmentBaseClass)
  ['{4ACA273D-2C1A-5F80-897E-1F2246582690}']
  { constructors } 

    {class} function init(fileName: string): DNAttachment; overload;
    {class} function init(fileName: string; mediaType: string): DNAttachment; overload;
    {class} function init(fileName: string; contentType: DNContentType): DNAttachment; overload;
    {class} function init(contentStream: DDNC.System.Private.CoreLib.DNStream; name: string): DNAttachment; overload;
    {class} function init(contentStream: DDNC.System.Private.CoreLib.DNStream; name: string; mediaType: string): DNAttachment; overload;
    {class} function init(contentStream: DDNC.System.Private.CoreLib.DNStream; contentType: DNContentType): DNAttachment; overload;

  { static methods } 

    {class} function CreateAttachmentFromString(content: string; name: string): DNAttachment; overload;
    {class} function CreateAttachmentFromString(content: string; name: string; contentEncoding: DDNC.System.Private.CoreLib.DNEncoding; mediaType: string): DNAttachment; overload;
    {class} function CreateAttachmentFromString(content: string; contentType: DNContentType): DNAttachment; overload;

  end;

  [DNTypeName('System.Net.Mail.Attachment')]
  DNAttachment = interface(DNAttachmentBase)
  ['{47933A33-0165-3EDD-8A6F-51C7C7CA6A71}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_NameEncoding: DDNC.System.Private.CoreLib.DNEncoding;
    procedure set_NameEncoding(value: DDNC.System.Private.CoreLib.DNEncoding);
    function get_ContentDisposition: DNContentDisposition;
    function get_ContentStream: DDNC.System.Private.CoreLib.DNStream;
    function get_ContentId: string;
    procedure set_ContentId(value: string);
    function get_ContentType: DNContentType;
    procedure set_ContentType(value: DNContentType);
    function get_TransferEncoding: DNTransferEncoding;
    procedure set_TransferEncoding(value: DNTransferEncoding);

  { methods } 

    procedure Dispose;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property NameEncoding: DDNC.System.Private.CoreLib.DNEncoding read get_NameEncoding write set_NameEncoding;
    property ContentDisposition: DNContentDisposition read get_ContentDisposition;
    property ContentStream: DDNC.System.Private.CoreLib.DNStream read get_ContentStream;
    property ContentId: string read get_ContentId write set_ContentId;
    property ContentType: DNContentType read get_ContentType write set_ContentType;
    property TransferEncoding: DNTransferEncoding read get_TransferEncoding write set_TransferEncoding;
  end;

  TDNAttachment = class(TDNGenericImport<DNAttachmentClass, DNAttachment>) end;

  //-------------namespace: System.Net.Mail----------------
  DNLinkedResourceClass = interface(DNAttachmentBaseClass)
  ['{1B410D4C-E70C-5140-B853-0AC5B30BC2AB}']
  { constructors } 

    {class} function init(fileName: string): DNLinkedResource; overload;
    {class} function init(fileName: string; mediaType: string): DNLinkedResource; overload;
    {class} function init(fileName: string; contentType: DNContentType): DNLinkedResource; overload;
    {class} function init(contentStream: DDNC.System.Private.CoreLib.DNStream): DNLinkedResource; overload;
    {class} function init(contentStream: DDNC.System.Private.CoreLib.DNStream; mediaType: string): DNLinkedResource; overload;
    {class} function init(contentStream: DDNC.System.Private.CoreLib.DNStream; contentType: DNContentType): DNLinkedResource; overload;

  { static methods } 

    {class} function CreateLinkedResourceFromString(content: string): DNLinkedResource; overload;
    {class} function CreateLinkedResourceFromString(content: string; contentEncoding: DDNC.System.Private.CoreLib.DNEncoding; mediaType: string): DNLinkedResource; overload;
    {class} function CreateLinkedResourceFromString(content: string; contentType: DNContentType): DNLinkedResource; overload;

  end;

  [DNTypeName('System.Net.Mail.LinkedResource')]
  DNLinkedResource = interface(DNAttachmentBase)
  ['{052975A0-E13A-3F10-97C6-EE6878D5A29C}']
  { getters & setters } 

    function get_ContentLink: DDNC.System.Private.Uri.DNUri;
    procedure set_ContentLink(value: DDNC.System.Private.Uri.DNUri);
    function get_ContentStream: DDNC.System.Private.CoreLib.DNStream;
    function get_ContentId: string;
    procedure set_ContentId(value: string);
    function get_ContentType: DNContentType;
    procedure set_ContentType(value: DNContentType);
    function get_TransferEncoding: DNTransferEncoding;
    procedure set_TransferEncoding(value: DNTransferEncoding);

  { methods } 

    procedure Dispose;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ContentLink: DDNC.System.Private.Uri.DNUri read get_ContentLink write set_ContentLink;
    property ContentStream: DDNC.System.Private.CoreLib.DNStream read get_ContentStream;
    property ContentId: string read get_ContentId write set_ContentId;
    property ContentType: DNContentType read get_ContentType write set_ContentType;
    property TransferEncoding: DNTransferEncoding read get_TransferEncoding write set_TransferEncoding;
  end;

  TDNLinkedResource = class(TDNGenericImport<DNLinkedResourceClass, DNLinkedResource>) end;

  //-------------namespace: System.Net.Mail----------------
  DNMailAddressClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{1C484F91-BAE2-50C2-8F7B-0E4112BFA875}']
  { constructors } 

    {class} function init(address: string): DNMailAddress; overload;
    {class} function init(address: string; displayName: string): DNMailAddress; overload;
    {class} function init(address: string; displayName: string; displayNameEncoding: DDNC.System.Private.CoreLib.DNEncoding): DNMailAddress; overload;

  end;

  [DNTypeName('System.Net.Mail.MailAddress')]
  DNMailAddress = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{E0F41384-054B-3D49-A933-DB3617E81BED}']
  { getters & setters } 

    function get_DisplayName: string;
    function get_User: string;
    function get_Host: string;
    function get_Address: string;

  { methods } 

    function ToString: string;
    function Equals(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property DisplayName: string read get_DisplayName;
    property User: string read get_User;
    property Host: string read get_Host;
    property Address: string read get_Address;
  end;

  TDNMailAddress = class(TDNGenericImport<DNMailAddressClass, DNMailAddress>) end;

  //-------------namespace: System.Net.Mail----------------
  DNMailMessageClass = interface(DNObjectClass)
  ['{17231B43-AC7E-5585-ABCF-48F697132A75}']
  { constructors } 

    {class} function init: DNMailMessage; overload;
    {class} function init(from: string; &to: string): DNMailMessage; overload;
    {class} function init(from: string; &to: string; subject: string; body: string): DNMailMessage; overload;
    {class} function init(from: DNMailAddress; &to: DNMailAddress): DNMailMessage; overload;

  end;

  [DNTypeName('System.Net.Mail.MailMessage')]
  DNMailMessage = interface(DDNC.System.Private.CoreLib.DNIDisposable)
  ['{BBDA1AF1-9BC5-395C-A307-EADED73FDB43}']
  { getters & setters } 

    function get_From: DNMailAddress;
    procedure set_From(value: DNMailAddress);
    function get_Sender: DNMailAddress;
    procedure set_Sender(value: DNMailAddress);
    function get_ReplyTo: DNMailAddress;
    procedure set_ReplyTo(value: DNMailAddress);
    function get_ReplyToList: DNMailAddressCollection;
    function get_To: DNMailAddressCollection;
    function get_Bcc: DNMailAddressCollection;
    function get_CC: DNMailAddressCollection;
    function get_Priority: DNMailPriority;
    procedure set_Priority(value: DNMailPriority);
    function get_DeliveryNotificationOptions: DNDeliveryNotificationOptions;
    procedure set_DeliveryNotificationOptions(value: DNDeliveryNotificationOptions);
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_SubjectEncoding: DDNC.System.Private.CoreLib.DNEncoding;
    procedure set_SubjectEncoding(value: DDNC.System.Private.CoreLib.DNEncoding);
    function get_Headers: DDNC.System.Collections.Specialized.DNNameValueCollection;
    function get_HeadersEncoding: DDNC.System.Private.CoreLib.DNEncoding;
    procedure set_HeadersEncoding(value: DDNC.System.Private.CoreLib.DNEncoding);
    function get_Body: string;
    procedure set_Body(value: string);
    function get_BodyEncoding: DDNC.System.Private.CoreLib.DNEncoding;
    procedure set_BodyEncoding(value: DDNC.System.Private.CoreLib.DNEncoding);
    function get_BodyTransferEncoding: DNTransferEncoding;
    procedure set_BodyTransferEncoding(value: DNTransferEncoding);
    function get_IsBodyHtml: Boolean;
    procedure set_IsBodyHtml(value: Boolean);
    function get_Attachments: DNAttachmentCollection;
    function get_AlternateViews: DNAlternateViewCollection;

  { methods } 

    procedure Dispose;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property From: DNMailAddress read get_From write set_From;
    property Sender: DNMailAddress read get_Sender write set_Sender;
    property ReplyTo: DNMailAddress read get_ReplyTo write set_ReplyTo;
    property ReplyToList: DNMailAddressCollection read get_ReplyToList;
    property &To: DNMailAddressCollection read get_To;
    property Bcc: DNMailAddressCollection read get_Bcc;
    property CC: DNMailAddressCollection read get_CC;
    property Priority: DNMailPriority read get_Priority write set_Priority;
    property DeliveryNotificationOptions: DNDeliveryNotificationOptions read get_DeliveryNotificationOptions write set_DeliveryNotificationOptions;
    property Subject: string read get_Subject write set_Subject;
    property SubjectEncoding: DDNC.System.Private.CoreLib.DNEncoding read get_SubjectEncoding write set_SubjectEncoding;
    property Headers: DDNC.System.Collections.Specialized.DNNameValueCollection read get_Headers;
    property HeadersEncoding: DDNC.System.Private.CoreLib.DNEncoding read get_HeadersEncoding write set_HeadersEncoding;
    property Body: string read get_Body write set_Body;
    property BodyEncoding: DDNC.System.Private.CoreLib.DNEncoding read get_BodyEncoding write set_BodyEncoding;
    property BodyTransferEncoding: DNTransferEncoding read get_BodyTransferEncoding write set_BodyTransferEncoding;
    property IsBodyHtml: Boolean read get_IsBodyHtml write set_IsBodyHtml;
    property Attachments: DNAttachmentCollection read get_Attachments;
    property AlternateViews: DNAlternateViewCollection read get_AlternateViews;
  end;

  TDNMailMessage = class(TDNGenericImport<DNMailMessageClass, DNMailMessage>) end;

  //-------------namespace: System.Net.Mail----------------
  DNSmtpClientClass = interface(DNObjectClass)
  ['{551E1C6D-8DCF-5F00-BBE6-381BBA680D0E}']
  { constructors } 

    {class} function init: DNSmtpClient; overload;
    {class} function init(host: string): DNSmtpClient; overload;
    {class} function init(host: string; port: Int32): DNSmtpClient; overload;

  end;

  [DNTypeName('System.Net.Mail.SmtpClient')]
  DNSmtpClient = interface(DDNC.System.Private.CoreLib.DNIDisposable)
  ['{F3E825A5-AB43-3542-A273-7FB2D9C6C02B}']
  { getters & setters } 

    function get_Host: string;
    procedure set_Host(value: string);
    function get_Port: Int32;
    procedure set_Port(value: Int32);
    function get_UseDefaultCredentials: Boolean;
    procedure set_UseDefaultCredentials(value: Boolean);
    function get_Credentials: DDNC.System.Net.Primitives.DNICredentialsByHost;
    procedure set_Credentials(value: DDNC.System.Net.Primitives.DNICredentialsByHost);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_ServicePoint: DDNC.System.Net.ServicePoint.DNServicePoint;
    function get_DeliveryMethod: DNSmtpDeliveryMethod;
    procedure set_DeliveryMethod(value: DNSmtpDeliveryMethod);
    function get_DeliveryFormat: DNSmtpDeliveryFormat;
    procedure set_DeliveryFormat(value: DNSmtpDeliveryFormat);
    function get_PickupDirectoryLocation: string;
    procedure set_PickupDirectoryLocation(value: string);
    function get_EnableSsl: Boolean;
    procedure set_EnableSsl(value: Boolean);
    function get_ClientCertificates: DDNC.System.Security.Cryptography.X509Certificates.DNX509CertificateCollection;
    function get_TargetName: string;
    procedure set_TargetName(value: string);

  { events } 

    procedure add_SendCompleted(value: DNSendCompletedEventHandler);
    procedure remove_SendCompleted(value: DNSendCompletedEventHandler);

  { methods } 

    procedure Send(from: string; recipients: string; subject: string; body: string); overload;
    procedure Send(message: DNMailMessage); overload;
    procedure SendAsync(from: string; recipients: string; subject: string; body: string; userToken: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure SendAsync(message: DNMailMessage; userToken: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure SendAsyncCancel;
    function SendMailAsync(from: string; recipients: string; subject: string; body: string): DDNC.System.Private.CoreLib.DNTask; overload;
    function SendMailAsync(message: DNMailMessage): DDNC.System.Private.CoreLib.DNTask; overload;
    procedure Dispose;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Host: string read get_Host write set_Host;
    property Port: Int32 read get_Port write set_Port;
    property UseDefaultCredentials: Boolean read get_UseDefaultCredentials write set_UseDefaultCredentials;
    property Credentials: DDNC.System.Net.Primitives.DNICredentialsByHost read get_Credentials write set_Credentials;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property ServicePoint: DDNC.System.Net.ServicePoint.DNServicePoint read get_ServicePoint;
    property DeliveryMethod: DNSmtpDeliveryMethod read get_DeliveryMethod write set_DeliveryMethod;
    property DeliveryFormat: DNSmtpDeliveryFormat read get_DeliveryFormat write set_DeliveryFormat;
    property PickupDirectoryLocation: string read get_PickupDirectoryLocation write set_PickupDirectoryLocation;
    property EnableSsl: Boolean read get_EnableSsl write set_EnableSsl;
    property ClientCertificates: DDNC.System.Security.Cryptography.X509Certificates.DNX509CertificateCollection read get_ClientCertificates;
    property TargetName: string read get_TargetName write set_TargetName;
  end;

  TDNSmtpClient = class(TDNGenericImport<DNSmtpClientClass, DNSmtpClient>) end;

  //-------------namespace: System.Net.Mime----------------
  DNContentDispositionClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{C9093452-9408-56A0-B301-48166B4E26C5}']
  { constructors } 

    {class} function init: DNContentDisposition; overload;
    {class} function init(disposition: string): DNContentDisposition; overload;

  end;

  [DNTypeName('System.Net.Mime.ContentDisposition')]
  DNContentDisposition = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{3E763C08-D68A-36A5-8AB7-9301913D6561}']
  { getters & setters } 

    function get_DispositionType: string;
    procedure set_DispositionType(value: string);
    function get_Parameters: DDNC.System.Collections.Specialized.DNStringDictionary;
    function get_FileName: string;
    procedure set_FileName(value: string);
    function get_CreationDate: DDNC.System.Private.CoreLib.DNDateTime;
    procedure set_CreationDate(value: DDNC.System.Private.CoreLib.DNDateTime);
    function get_ModificationDate: DDNC.System.Private.CoreLib.DNDateTime;
    procedure set_ModificationDate(value: DDNC.System.Private.CoreLib.DNDateTime);
    function get_Inline: Boolean;
    procedure set_Inline(value: Boolean);
    function get_ReadDate: DDNC.System.Private.CoreLib.DNDateTime;
    procedure set_ReadDate(value: DDNC.System.Private.CoreLib.DNDateTime);
    function get_Size: Int64;
    procedure set_Size(value: Int64);

  { methods } 

    function ToString: string;
    function Equals(rparam: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property DispositionType: string read get_DispositionType write set_DispositionType;
    property Parameters: DDNC.System.Collections.Specialized.DNStringDictionary read get_Parameters;
    property FileName: string read get_FileName write set_FileName;
    property CreationDate: DDNC.System.Private.CoreLib.DNDateTime read get_CreationDate write set_CreationDate;
    property ModificationDate: DDNC.System.Private.CoreLib.DNDateTime read get_ModificationDate write set_ModificationDate;
    property &Inline: Boolean read get_Inline write set_Inline;
    property ReadDate: DDNC.System.Private.CoreLib.DNDateTime read get_ReadDate write set_ReadDate;
    property Size: Int64 read get_Size write set_Size;
  end;

  TDNContentDisposition = class(TDNGenericImport<DNContentDispositionClass, DNContentDisposition>) end;

  //-------------namespace: System.Net.Mime----------------
  DNContentTypeClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{F3B3752B-C7F1-5A2D-9A98-89934AE77845}']
  { constructors } 

    {class} function init: DNContentType; overload;
    {class} function init(contentType: string): DNContentType; overload;

  end;

  [DNTypeName('System.Net.Mime.ContentType')]
  DNContentType = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{27A59E83-22C7-3A52-B823-FFA80F4ED3B2}']
  { getters & setters } 

    function get_Boundary: string;
    procedure set_Boundary(value: string);
    function get_CharSet: string;
    procedure set_CharSet(value: string);
    function get_MediaType: string;
    procedure set_MediaType(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Parameters: DDNC.System.Collections.Specialized.DNStringDictionary;

  { methods } 

    function ToString: string;
    function Equals(rparam: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Boundary: string read get_Boundary write set_Boundary;
    property CharSet: string read get_CharSet write set_CharSet;
    property MediaType: string read get_MediaType write set_MediaType;
    property Name: string read get_Name write set_Name;
    property Parameters: DDNC.System.Collections.Specialized.DNStringDictionary read get_Parameters;
  end;

  TDNContentType = class(TDNGenericImport<DNContentTypeClass, DNContentType>) end;

  //-------------namespace: System.Net.Mime----------------
  DNDispositionTypeNamesClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{7B2A51B7-FDA5-5EAF-82AF-1230F8573906}']
  end;

  [DNTypeName('System.Net.Mime.DispositionTypeNames')]
  DNDispositionTypeNames = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{CD3CB883-8E30-3D34-961F-1C0678B99D7E}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNDispositionTypeNames = class(TDNGenericImport<DNDispositionTypeNamesClass, DNDispositionTypeNames>)
  public const
   Inline_ = 'inline';
   Attachment = 'attachment';
  end;

  //-------------namespace: System.Net.Mime----------------
  DNMediaTypeNamesClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{D115172A-83D0-58C8-8460-03B1FCC024FC}']
  end;

  [DNTypeName('System.Net.Mime.MediaTypeNames')]
  DNMediaTypeNames = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{D017152F-5D9E-30C2-8873-51279D1E95DC}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNMediaTypeNames = class(TDNGenericImport<DNMediaTypeNamesClass, DNMediaTypeNames>) end;

  //-------------namespace: System.Net.Mime----------------
  DNMediaTypeNames_ApplicationClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{A181CEB8-6682-5F19-8412-FF9A1B3AEFC6}']
  end;

  [DNTypeName('System.Net.Mime.MediaTypeNames+Application')]
  DNMediaTypeNames_Application = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{1242020B-9A85-3499-93A7-74BD6337A844}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNMediaTypeNames_Application = class(TDNGenericImport<DNMediaTypeNames_ApplicationClass, DNMediaTypeNames_Application>)
  public const
   Soap = 'application/soap+xml';
   Octet = 'application/octet-stream';
   Rtf = 'application/rtf';
   Pdf = 'application/pdf';
   Zip = 'application/zip';
   Json = 'application/json';
   Xml = 'application/xml';
  end;

  //-------------namespace: System.Net.Mime----------------
  DNMediaTypeNames_ImageClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{BAFB9C61-92AE-5795-B976-2BEBCCC6D166}']
  end;

  [DNTypeName('System.Net.Mime.MediaTypeNames+Image')]
  DNMediaTypeNames_Image = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{C6BE3FF2-ED0F-3651-AF05-34B99986FD8D}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNMediaTypeNames_Image = class(TDNGenericImport<DNMediaTypeNames_ImageClass, DNMediaTypeNames_Image>)
  public const
   Gif = 'image/gif';
   Tiff = 'image/tiff';
   Jpeg = 'image/jpeg';
  end;

  //-------------namespace: System.Net.Mime----------------
  DNMediaTypeNames_TextClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{9AE16CB7-CBE9-5C4A-8061-5F1A7D7671EE}']
  end;

  [DNTypeName('System.Net.Mime.MediaTypeNames+Text')]
  DNMediaTypeNames_Text = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{A90EA417-D051-3D89-BD20-EBE1C3C1F8B7}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNMediaTypeNames_Text = class(TDNGenericImport<DNMediaTypeNames_TextClass, DNMediaTypeNames_Text>)
  public const
   Plain = 'text/plain';
   Html = 'text/html';
   Xml = 'text/xml';
   RichText = 'text/richtext';
  end;


implementation


initialization
  LoadAssemblyModule('System.Net.Mail.dll', True, 'System.Net.Mail, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51');

finalization

end.
