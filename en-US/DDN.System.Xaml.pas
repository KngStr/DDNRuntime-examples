//----------------------------------------------------------------------------
//  System.Xaml.dll: System.Xaml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.Xaml
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.Xaml;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System,
  DDN.System.Xml;

type

{ enums }

  //-------------namespace: System.Xaml.Schema----------------
  ///<summary>Specifies the syntax restrictions enforced on a property when it is set in XAML, as reported by a <see cref="T:System.Xaml.XamlDirective" />
  ///  .</summary>
  [DNTypeName('System.Xaml.Schema.AllowedMemberLocations')]
  DNAllowedMemberLocations = type Integer;
  DNAllowedMemberLocationsHelper = record helper for DNAllowedMemberLocations
  public const
    ///<summary>Property cannot be set in XAML at all. This is the default.</summary>
    None = 0;
    ///<summary>Property can be set in XAML attribute syntax.</summary>
    Attribute = 1;
    ///<summary>Property can be set in XAML property element syntax.</summary>
    MemberElement = 2;
    ///<summary>Property can be set in either <see cref="F:System.Xaml.Schema.AllowedMemberLocations.Attribute" />
    ///  or <see cref="F:System.Xaml.Schema.AllowedMemberLocations.MemberElement" />
    ///  location. (This enumeration member is defined as the combination of those values.)</summary>
    Any = 3;
  end;


  //-------------namespace: System.Xaml.Schema----------------
  ///<summary>Defines serialization behavior as reported by a <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
  ///  .</summary>
  [DNTypeName('System.Xaml.Schema.ShouldSerializeResult')]
  DNShouldSerializeResult = type Integer;
  DNShouldSerializeResultHelper = record helper for DNShouldSerializeResult
  public const
    ///<summary>Unknown, defer to the type of the member.</summary>
    Default_ = 0;
    ///<summary>Serialize the result.</summary>
    True = 1;
    ///<summary>Do not serialize the result.</summary>
    False = 2;
  end;


  //-------------namespace: System.Xaml.Schema----------------
  ///<summary>Describes the collection metaphor (if any) used by a XAML member.</summary>
  [DNTypeName('System.Xaml.Schema.XamlCollectionKind')]
  DNXamlCollectionKind = type Integer;
  DNXamlCollectionKindHelper = record helper for DNXamlCollectionKind
  public const
    ///<summary>XAML member does not support a collection.</summary>
    None = 0;
    ///<summary>XAML member supports a list or a collection.</summary>
    Collection = 1;
    ///<summary>XAML member supports a dictionary (key-value pairs).</summary>
    Dictionary = 2;
    ///<summary>XAML member supports an array collection.</summary>
    Array_ = 3;
  end;


  //-------------namespace: System.Xaml----------------
  ///<summary>Describes the type of the node that is currently being processed by a XAML reader.</summary>
  [DNTypeName('System.Xaml.XamlNodeType')]
  DNXamlNodeType = type Integer;
  DNXamlNodeTypeHelper = record helper for DNXamlNodeType
  public const
    ///<summary>The reader is not positioned at a true node (for example, the reader might be at end-of-file).</summary>
    None = 0;
    ///<summary>The reader is at the start of an object node.</summary>
    StartObject = 1;
    ///<summary>The reader is within an object node and writing a default or implicit value, instead of being a specified object value.</summary>
    GetObject = 2;
    ///<summary>The reader is at the end of an object node.</summary>
    EndObject = 3;
    ///<summary>The reader is at the start of a member node.</summary>
    StartMember = 4;
    ///<summary>The reader is at the end of a member node.</summary>
    EndMember = 5;
    ///<summary>The reader is within a node and processing a value.</summary>
    Value = 6;
    ///<summary>The reader is within an XML namespace declaration.</summary>
    NamespaceDeclaration = 7;
  end;




type


{ declares }

  DNIValueSerializerContext = interface; // type: System.Windows.Markup.IValueSerializerContext, namespace: System.Windows.Markup
  DNIComponentConnector = interface; // type: System.Windows.Markup.IComponentConnector, namespace: System.Windows.Markup
  DNINameScope = interface; // type: System.Windows.Markup.INameScope, namespace: System.Windows.Markup
  DNINameScopeDictionary = interface; // type: System.Windows.Markup.INameScopeDictionary, namespace: System.Windows.Markup
  DNIProvideValueTarget = interface; // type: System.Windows.Markup.IProvideValueTarget, namespace: System.Windows.Markup
  DNIQueryAmbient = interface; // type: System.Windows.Markup.IQueryAmbient, namespace: System.Windows.Markup
  DNIUriContext = interface; // type: System.Windows.Markup.IUriContext, namespace: System.Windows.Markup
  DNIXamlTypeResolver = interface; // type: System.Windows.Markup.IXamlTypeResolver, namespace: System.Windows.Markup
  DNIAmbientProvider = interface; // type: System.Xaml.IAmbientProvider, namespace: System.Xaml
  DNIAttachedPropertyStore = interface; // type: System.Xaml.IAttachedPropertyStore, namespace: System.Xaml
  DNIDestinationTypeProvider = interface; // type: System.Xaml.IDestinationTypeProvider, namespace: System.Xaml
  DNINamespacePrefixLookup = interface; // type: System.Xaml.INamespacePrefixLookup, namespace: System.Xaml
  DNIRootObjectProvider = interface; // type: System.Xaml.IRootObjectProvider, namespace: System.Xaml
  DNIXamlIndexingReader = interface; // type: System.Xaml.IXamlIndexingReader, namespace: System.Xaml
  DNIXamlLineInfo = interface; // type: System.Xaml.IXamlLineInfo, namespace: System.Xaml
  DNIXamlLineInfoConsumer = interface; // type: System.Xaml.IXamlLineInfoConsumer, namespace: System.Xaml
  DNIXamlNameProvider = interface; // type: System.Xaml.IXamlNameProvider, namespace: System.Xaml
  DNIXamlNameResolver = interface; // type: System.Xaml.IXamlNameResolver, namespace: System.Xaml
  DNIXamlNamespaceResolver = interface; // type: System.Xaml.IXamlNamespaceResolver, namespace: System.Xaml
  DNIXamlObjectWriterFactory = interface; // type: System.Xaml.IXamlObjectWriterFactory, namespace: System.Xaml
  DNIXamlSchemaContextProvider = interface; // type: System.Xaml.IXamlSchemaContextProvider, namespace: System.Xaml
  DNAcceptedMarkupExtensionExpressionTypeAttribute = interface; // type: System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute, namespace: System.Windows.Markup
  DNAmbientAttribute = interface; // type: System.Windows.Markup.AmbientAttribute, namespace: System.Windows.Markup
  DNConstructorArgumentAttribute = interface; // type: System.Windows.Markup.ConstructorArgumentAttribute, namespace: System.Windows.Markup
  DNContentPropertyAttribute = interface; // type: System.Windows.Markup.ContentPropertyAttribute, namespace: System.Windows.Markup
  DNContentWrapperAttribute = interface; // type: System.Windows.Markup.ContentWrapperAttribute, namespace: System.Windows.Markup
  DNDependsOnAttribute = interface; // type: System.Windows.Markup.DependsOnAttribute, namespace: System.Windows.Markup
  DNDictionaryKeyPropertyAttribute = interface; // type: System.Windows.Markup.DictionaryKeyPropertyAttribute, namespace: System.Windows.Markup
  DNMarkupExtensionBracketCharactersAttribute = interface; // type: System.Windows.Markup.MarkupExtensionBracketCharactersAttribute, namespace: System.Windows.Markup
  DNMarkupExtensionReturnTypeAttribute = interface; // type: System.Windows.Markup.MarkupExtensionReturnTypeAttribute, namespace: System.Windows.Markup
  DNNameScopePropertyAttribute = interface; // type: System.Windows.Markup.NameScopePropertyAttribute, namespace: System.Windows.Markup
  DNRootNamespaceAttribute = interface; // type: System.Windows.Markup.RootNamespaceAttribute, namespace: System.Windows.Markup
  DNRuntimeNamePropertyAttribute = interface; // type: System.Windows.Markup.RuntimeNamePropertyAttribute, namespace: System.Windows.Markup
  DNTrimSurroundingWhitespaceAttribute = interface; // type: System.Windows.Markup.TrimSurroundingWhitespaceAttribute, namespace: System.Windows.Markup
  DNUidPropertyAttribute = interface; // type: System.Windows.Markup.UidPropertyAttribute, namespace: System.Windows.Markup
  DNUsableDuringInitializationAttribute = interface; // type: System.Windows.Markup.UsableDuringInitializationAttribute, namespace: System.Windows.Markup
  DNWhitespaceSignificantCollectionAttribute = interface; // type: System.Windows.Markup.WhitespaceSignificantCollectionAttribute, namespace: System.Windows.Markup
  DNXamlDeferLoadAttribute = interface; // type: System.Windows.Markup.XamlDeferLoadAttribute, namespace: System.Windows.Markup
  DNXamlSetMarkupExtensionAttribute = interface; // type: System.Windows.Markup.XamlSetMarkupExtensionAttribute, namespace: System.Windows.Markup
  DNXamlSetTypeConverterAttribute = interface; // type: System.Windows.Markup.XamlSetTypeConverterAttribute, namespace: System.Windows.Markup
  DNXmlLangPropertyAttribute = interface; // type: System.Windows.Markup.XmlLangPropertyAttribute, namespace: System.Windows.Markup
  DNXmlnsCompatibleWithAttribute = interface; // type: System.Windows.Markup.XmlnsCompatibleWithAttribute, namespace: System.Windows.Markup
  DNXmlnsDefinitionAttribute = interface; // type: System.Windows.Markup.XmlnsDefinitionAttribute, namespace: System.Windows.Markup
  DNXmlnsPrefixAttribute = interface; // type: System.Windows.Markup.XmlnsPrefixAttribute, namespace: System.Windows.Markup
  DNNameReferenceConverter = interface; // type: System.Windows.Markup.NameReferenceConverter, namespace: System.Windows.Markup
  DNXamlTypeTypeConverter = interface; // type: System.Xaml.Schema.XamlTypeTypeConverter, namespace: System.Xaml.Schema
  DNXamlSetValueEventArgs = interface; // type: System.Windows.Markup.XamlSetValueEventArgs, namespace: System.Windows.Markup
  DNXamlSetMarkupExtensionEventArgs = interface; // type: System.Windows.Markup.XamlSetMarkupExtensionEventArgs, namespace: System.Windows.Markup
  DNXamlSetTypeConverterEventArgs = interface; // type: System.Windows.Markup.XamlSetTypeConverterEventArgs, namespace: System.Windows.Markup
  DNXamlObjectEventArgs = interface; // type: System.Xaml.XamlObjectEventArgs, namespace: System.Xaml
  DNXamlException = interface; // type: System.Xaml.XamlException, namespace: System.Xaml
  DNXamlDuplicateMemberException = interface; // type: System.Xaml.XamlDuplicateMemberException, namespace: System.Xaml
  DNXamlInternalException = interface; // type: System.Xaml.XamlInternalException, namespace: System.Xaml
  DNXamlObjectReaderException = interface; // type: System.Xaml.XamlObjectReaderException, namespace: System.Xaml
  DNXamlObjectWriterException = interface; // type: System.Xaml.XamlObjectWriterException, namespace: System.Xaml
  DNXamlParseException = interface; // type: System.Xaml.XamlParseException, namespace: System.Xaml
  DNXamlSchemaException = interface; // type: System.Xaml.XamlSchemaException, namespace: System.Xaml
  DNXamlXmlWriterException = interface; // type: System.Xaml.XamlXmlWriterException, namespace: System.Xaml
  DNXamlLoadPermission = interface; // type: System.Xaml.Permissions.XamlLoadPermission, namespace: System.Xaml.Permissions
  DNMarkupExtension = interface; // type: System.Windows.Markup.MarkupExtension, namespace: System.Windows.Markup
  DNArrayExtension = interface; // type: System.Windows.Markup.ArrayExtension, namespace: System.Windows.Markup
  DNNullExtension = interface; // type: System.Windows.Markup.NullExtension, namespace: System.Windows.Markup
  DNReference = interface; // type: System.Windows.Markup.Reference, namespace: System.Windows.Markup
  DNStaticExtension = interface; // type: System.Windows.Markup.StaticExtension, namespace: System.Windows.Markup
  DNTypeExtension = interface; // type: System.Windows.Markup.TypeExtension, namespace: System.Windows.Markup
  DNMemberDefinition = interface; // type: System.Windows.Markup.MemberDefinition, namespace: System.Windows.Markup
  DNPropertyDefinition = interface; // type: System.Windows.Markup.PropertyDefinition, namespace: System.Windows.Markup
  DNValueSerializer = interface; // type: System.Windows.Markup.ValueSerializer, namespace: System.Windows.Markup
  DNDateTimeValueSerializer = interface; // type: System.Windows.Markup.DateTimeValueSerializer, namespace: System.Windows.Markup
  DNXData = interface; // type: System.Windows.Markup.XData, namespace: System.Windows.Markup
  DNAmbientPropertyValue = interface; // type: System.Xaml.AmbientPropertyValue, namespace: System.Xaml
  DNAttachableMemberIdentifier = interface; // type: System.Xaml.AttachableMemberIdentifier, namespace: System.Xaml
  DNAttachablePropertyServices = interface; // type: System.Xaml.AttachablePropertyServices, namespace: System.Xaml
  DNNamespaceDeclaration = interface; // type: System.Xaml.NamespaceDeclaration, namespace: System.Xaml
  DNXamlAccessLevel = interface; // type: System.Xaml.Permissions.XamlAccessLevel, namespace: System.Xaml.Permissions
  DNXamlMemberInvoker = interface; // type: System.Xaml.Schema.XamlMemberInvoker, namespace: System.Xaml.Schema
  DNXamlTypeInvoker = interface; // type: System.Xaml.Schema.XamlTypeInvoker, namespace: System.Xaml.Schema
  DNXamlTypeName = interface; // type: System.Xaml.Schema.XamlTypeName, namespace: System.Xaml.Schema
  DNXamlValueConverter<TConverterBase> = interface; // type: System.Xaml.Schema.XamlValueConverter`1, namespace: System.Xaml.Schema
  DNXamlDeferringLoader = interface; // type: System.Xaml.XamlDeferringLoader, namespace: System.Xaml
  DNXamlLanguage = interface; // type: System.Xaml.XamlLanguage, namespace: System.Xaml
  DNXamlMember = interface; // type: System.Xaml.XamlMember, namespace: System.Xaml
  DNXamlDirective = interface; // type: System.Xaml.XamlDirective, namespace: System.Xaml
  DNXamlNodeList = interface; // type: System.Xaml.XamlNodeList, namespace: System.Xaml
  DNXamlNodeQueue = interface; // type: System.Xaml.XamlNodeQueue, namespace: System.Xaml
  DNXamlReader = interface; // type: System.Xaml.XamlReader, namespace: System.Xaml
  DNXamlBackgroundReader = interface; // type: System.Xaml.XamlBackgroundReader, namespace: System.Xaml
  DNXamlObjectReader = interface; // type: System.Xaml.XamlObjectReader, namespace: System.Xaml
  DNXamlXmlReader = interface; // type: System.Xaml.XamlXmlReader, namespace: System.Xaml
  DNXamlReaderSettings = interface; // type: System.Xaml.XamlReaderSettings, namespace: System.Xaml
  DNXamlObjectReaderSettings = interface; // type: System.Xaml.XamlObjectReaderSettings, namespace: System.Xaml
  DNXamlXmlReaderSettings = interface; // type: System.Xaml.XamlXmlReaderSettings, namespace: System.Xaml
  DNXamlSchemaContext = interface; // type: System.Xaml.XamlSchemaContext, namespace: System.Xaml
  DNXamlSchemaContextSettings = interface; // type: System.Xaml.XamlSchemaContextSettings, namespace: System.Xaml
  DNXamlServices = interface; // type: System.Xaml.XamlServices, namespace: System.Xaml
  DNXamlType = interface; // type: System.Xaml.XamlType, namespace: System.Xaml
  DNXamlWriter = interface; // type: System.Xaml.XamlWriter, namespace: System.Xaml
  DNXamlObjectWriter = interface; // type: System.Xaml.XamlObjectWriter, namespace: System.Xaml
  DNXamlXmlWriter = interface; // type: System.Xaml.XamlXmlWriter, namespace: System.Xaml
  DNXamlWriterSettings = interface; // type: System.Xaml.XamlWriterSettings, namespace: System.Xaml
  DNXamlObjectWriterSettings = interface; // type: System.Xaml.XamlObjectWriterSettings, namespace: System.Xaml
  DNXamlXmlWriterSettings = interface; // type: System.Xaml.XamlXmlWriterSettings, namespace: System.Xaml


{ objects }

  //-------------namespace: System.Windows.Markup----------------
  ///<summary>Defines a context that is provided to a <see cref="T:System.Windows.Markup.ValueSerializer" />
  ///  . The context can be used to enable special cases of serialization or different modes of serialization.</summary>
  [DNTypeName('System.Windows.Markup.IValueSerializerContext')]
  DNIValueSerializerContext = interface(DDN.System.DNITypeDescriptorContext)
  ['{8304769D-A06C-3C84-98F6-6690BC5727C4}']
  { methods } 

    ///<summary>Gets the <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  associated with the specified type.</summary>
    ///  <param name="type">The type of the value being converted.</param>
    ///<returns>A <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  capable of serializing the specified type.</returns>
    function GetValueSerializerFor(&type: DDN.mscorlib.DNType): DNValueSerializer; overload;
    ///<summary>Gets a <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  for the given property descriptor.</summary>
    ///  <param name="descriptor">The descriptor of the property being converted.</param>
    ///<returns>A <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  capable of serializing the specified property.</returns>
    function GetValueSerializerFor(descriptor: DDN.System.DNPropertyDescriptor): DNValueSerializer; overload;

  end;

  //-------------namespace: System.Windows.Markup----------------
  ///<summary>Provides markup compile and tools support for named XAML elements and for attaching event handlers to them.</summary>
  [DNTypeName('System.Windows.Markup.IComponentConnector')]
  DNIComponentConnector = interface(DDN.mscorlib.DNObject)
  ['{0ED59497-2EB0-352E-9F49-BD380F12EB62}']
  { methods } 

    ///<summary>Attaches events and names to compiled content. </summary>
    ///  <param name="connectionId">An identifier token to distinguish calls.</param>
    ///  <param name="target">The target to connect events and names to.</param>
    procedure Connect(connectionId: Int32; target: DDN.mscorlib.DNObject);
    ///<summary>Loads the compiled page of a component.</summary>
    procedure InitializeComponent;

  end;

  //-------------namespace: System.Windows.Markup----------------
  ///<summary>Defines a contract for how names of elements should be accessed within a particular XAML namescope, and how to enforce uniqueness of names within that XAML namescope. </summary>
  [DNTypeName('System.Windows.Markup.INameScope')]
  DNINameScope = interface(DDN.mscorlib.DNObject)
  ['{2302495C-8AFF-3D56-B199-CC3E825247EF}']
  { methods } 

    ///<summary>Registers the provided name into the current XAML namescope. </summary>
    ///  <param name="name">The name to register.</param>
    ///  <param name="scopedElement">The specific element that the provided <paramref name="name" />
    ///  refers to.</param>
    procedure RegisterName(name: string; scopedElement: DDN.mscorlib.DNObject);
    ///<summary>Unregisters the provided name from the current XAML namescope. </summary>
    ///  <param name="name">The name to unregister.</param>
    procedure UnregisterName(name: string);
    ///<summary>Returns an object that has the provided identifying name. </summary>
    ///  <param name="name">The name identifier for the object being requested.</param>
    ///<returns>The object, if found. Returns <see langword="null" />
    ///  if no object of that name was found.</returns>
    function FindName(name: string): DDN.mscorlib.DNObject;

  end;

  //-------------namespace: System.Windows.Markup----------------
  ///<summary>Unifies enumerable, collection, and dictionary support that are useful for exposing a dictionary of names in a XAML namescope.</summary>
  [DNTypeName('System.Windows.Markup.INameScopeDictionary')]
  DNINameScopeDictionary = interface(DNINameScope)
  ['{0A135675-CCC1-3883-8BC7-DE455C166C6E}']
  end;

  //-------------namespace: System.Windows.Markup----------------
  ///<summary>Represents a service that reports situational object-property relationships for markup extension evaluation.</summary>
  [DNTypeName('System.Windows.Markup.IProvideValueTarget')]
  DNIProvideValueTarget = interface(DDN.mscorlib.DNObject)
  ['{C702B659-BC6B-360F-A405-5E97AAFD7018}']
  { getters & setters } 

    function get_TargetObject: DDN.mscorlib.DNObject;
    function get_TargetProperty: DDN.mscorlib.DNObject;

  { propertys } 

    ///<summary>Gets the target object being reported.</summary>
    ///<returns>The target object being reported.</returns>
    property TargetObject: DDN.mscorlib.DNObject read get_TargetObject;
    ///<summary>Gets an identifier for the target property being reported.</summary>
    ///<returns>An identifier for the target property being reported.</returns>
    property TargetProperty: DDN.mscorlib.DNObject read get_TargetProperty;
  end;

  //-------------namespace: System.Windows.Markup----------------
  ///<summary>Queries for whether a specified property should be treated as ambient in the current scope.</summary>
  [DNTypeName('System.Windows.Markup.IQueryAmbient')]
  DNIQueryAmbient = interface(DDN.mscorlib.DNObject)
  ['{2CD1EF90-10D1-3B19-88E4-F37D6E110359}']
  { methods } 

    ///<summary>Queries for whether a specified named property can be considered ambient in the current scope.</summary>
    ///  <param name="propertyName">The name of the property to check for ambience state.</param>
    ///<returns><see langword="true" />
    ///  if the requested property can be considered ambient; otherwise, <see langword="false" />
    ///  .</returns>
    function IsAmbientPropertyAvailable(propertyName: string): Boolean;

  end;

  //-------------namespace: System.Windows.Markup----------------
  ///<summary>Represents a service that can use application context to resolve a provided relative URI to an absolute URI.</summary>
  [DNTypeName('System.Windows.Markup.IUriContext')]
  DNIUriContext = interface(DDN.mscorlib.DNObject)
  ['{D1DFA023-9E55-3C49-88C9-406911354C48}']
  { getters & setters } 

    function get_BaseUri: DDN.System.DNUri;
    procedure set_BaseUri(value: DDN.System.DNUri);

  { propertys } 

    ///<summary>Gets or sets the base URI of the current application context. </summary>
    ///<returns>The base URI of the application context.</returns>
    property BaseUri: DDN.System.DNUri read get_BaseUri write set_BaseUri;
  end;

  //-------------namespace: System.Windows.Markup----------------
  ///<summary>Represents a service that resolves from named elements in XAML markup to the appropriate CLR type.</summary>
  [DNTypeName('System.Windows.Markup.IXamlTypeResolver')]
  DNIXamlTypeResolver = interface(DDN.mscorlib.DNObject)
  ['{77F75146-A83F-3929-ACEB-7F623F555CC3}']
  { methods } 

    ///<summary>Resolves a named XAML type to the corresponding CLR <see cref="T:System.Type" />
    ///  .</summary>
    ///  <param name="qualifiedTypeName">The XAML type name to resolve. The type name is optionally qualified by the prefix for a XML namespace. Otherwise the current default XML namespace is assumed.</param>
    ///<returns>The <see cref="T:System.Type" />
    ///  that <paramref name="qualifiedTypeName" />
    ///  resolves to </returns>
    function Resolve(qualifiedTypeName: string): DDN.mscorlib.DNType;

  end;

  //-------------namespace: System.Xaml----------------
  ///<summary>Represents a service that can return information items about ambient properties or ambient types to type converters and markup extensions.</summary>
  [DNTypeName('System.Xaml.IAmbientProvider')]
  DNIAmbientProvider = interface(DDN.mscorlib.DNObject)
  ['{56B9C37F-8025-3048-B3AD-F55A05CCA21B}']
  { methods } 

    function GetFirstAmbientValue(ceilingTypes: DDN.mscorlib.DNIEnumerable<DNXamlType>; properties: TArray<DNXamlMember>): DNAmbientPropertyValue; overload;
    ///<summary>Returns the first matching object that is a possible ambient type for the requested types.</summary>
    ///  <param name="types">The set of types from which to retrieve ambient type information.</param>
    ///<returns>The first result object for the requested set.</returns>
    function GetFirstAmbientValue(types: TArray<DNXamlType>): DDN.mscorlib.DNObject; overload;
    function GetAllAmbientValues(ceilingTypes: DDN.mscorlib.DNIEnumerable<DNXamlType>; properties: TArray<DNXamlMember>): DDN.mscorlib.DNIEnumerable<DNAmbientPropertyValue>; overload;
    ///<summary>Returns an enumerable set of object instances of possible ambient types for the requested types.</summary>
    ///  <param name="types">The set of types from which to retrieve ambient type information.</param>
    ///<returns>An enumerable set of objects that represent the values for the requested set of <see cref="T:System.Xaml.XamlType" />
    ///  identifiers.</returns>
    function GetAllAmbientValues(types: TArray<DNXamlType>): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNObject>; overload;
    function GetAllAmbientValues(ceilingTypes: DDN.mscorlib.DNIEnumerable<DNXamlType>; searchLiveStackOnly: Boolean; types: DDN.mscorlib.DNIEnumerable<DNXamlType>; properties: TArray<DNXamlMember>): DDN.mscorlib.DNIEnumerable<DNAmbientPropertyValue>; overload;

  end;

  //-------------namespace: System.Xaml----------------
  ///<summary>Represents an attachable member store for an object where attachable members are set. This attachable member store can then be referenced with <see cref="T:System.Xaml.AttachablePropertyServices" />
  ///  .</summary>
  [DNTypeName('System.Xaml.IAttachedPropertyStore')]
  DNIAttachedPropertyStore = interface(DDN.mscorlib.DNObject)
  ['{E6EAA35F-4FAE-3110-B9D1-ACF9C49C256D}']
  { getters & setters } 

    function get_PropertyCount: Int32;

  { methods } 

    procedure CopyPropertiesTo(&array: TArray<DDN.mscorlib.DNKeyValuePair<DNAttachableMemberIdentifier, DDN.mscorlib.DNObject>>; index: Int32);
    ///<summary>Removes the entry for the specified attachable member from this attachable member store.</summary>
    ///  <param name="attachableMemberIdentifier">The XAML type system identifier for the attachable member entry to remove.</param>
    ///<returns><see langword="true" />
    ///  if an attachable member entry for <paramref name="attachableMemberIdentifier" />
    ///  was found in the store and removed; otherwise, <see langword="false" />
    ///  .</returns>
    function RemoveProperty(attachableMemberIdentifier: DNAttachableMemberIdentifier): Boolean;
    ///<summary>Sets a value for the specified attachable member in the specified store.</summary>
    ///  <param name="attachableMemberIdentifier">The XAML type system identifier for the attachable member entry to set.</param>
    ///  <param name="value">The value to set.</param>
    procedure SetProperty(attachableMemberIdentifier: DNAttachableMemberIdentifier; value: DDN.mscorlib.DNObject);
    function TryGetProperty(attachableMemberIdentifier: DNAttachableMemberIdentifier; out value: DDN.mscorlib.DNObject): Boolean;

  { propertys } 

    ///<summary>Gets the count of the attachable member entries in this attachable member store.</summary>
    ///<returns>The integer count of entries in the store.</returns>
    property PropertyCount: Int32 read get_PropertyCount;
  end;

  //-------------namespace: System.Xaml----------------
  ///<summary>Represents a service that can return a CLR type system identifier for the destination type. The destination type is relevant when the destination type for a property-setting operation is indirectly reported by reflection or other mechanisms.</summary>
  [DNTypeName('System.Xaml.IDestinationTypeProvider')]
  DNIDestinationTypeProvider = interface(DDN.mscorlib.DNObject)
  ['{930DD1DE-CD98-3308-8B99-A1C4B8DF3E5B}']
  { methods } 

    ///<summary>Returns the CLR <see cref="T:System.Type" />
    ///  that identifies the destination type for the relevant type converter or markup extension.</summary>
    ///<returns>A CLR <see cref="T:System.Type" />
    ///  value for the destination type.</returns>
    function GetDestinationType: DDN.mscorlib.DNType;

  end;

  //-------------namespace: System.Xaml----------------
  ///<summary>Represents a service that can return the recommended prefix for a XAML namespace mapping to consumers. Consumers might include design environments or serializers.</summary>
  [DNTypeName('System.Xaml.INamespacePrefixLookup')]
  DNINamespacePrefixLookup = interface(DDN.mscorlib.DNObject)
  ['{8DE00F54-F37C-3432-BCCB-F0FB4FCDF5A7}']
  { methods } 

    ///<summary>Returns the recommended prefix for a specified XAML namespace identifier.</summary>
    ///  <param name="ns">The XAML namespace identifier string for which to obtain a prefix.</param>
    ///<returns>The recommended prefix.</returns>
    function LookupPrefix(ns: string): string;

  end;

  //-------------namespace: System.Xaml----------------
  ///<summary>Describes a service that can return the root object of markup being parsed.</summary>
  [DNTypeName('System.Xaml.IRootObjectProvider')]
  DNIRootObjectProvider = interface(DDN.mscorlib.DNObject)
  ['{379E5C3B-82CF-35A0-8211-CC0947F989AC}']
  { getters & setters } 

    function get_RootObject: DDN.mscorlib.DNObject;

  { propertys } 

    ///<summary>Gets the root object from markup or from an object graph.</summary>
    ///<returns>The root object.</returns>
    property RootObject: DDN.mscorlib.DNObject read get_RootObject;
  end;

  //-------------namespace: System.Xaml----------------
  ///<summary>Provides a service that represents indexed node control for a simple implementation of a node-based XAML reader.</summary>
  [DNTypeName('System.Xaml.IXamlIndexingReader')]
  DNIXamlIndexingReader = interface(DDN.mscorlib.DNObject)
  ['{A39E4ACA-0A4C-38B8-BC2B-8222A771B8AE}']
  { getters & setters } 

    function get_Count: Int32;
    function get_CurrentIndex: Int32;
    procedure set_CurrentIndex(value: Int32);

  { propertys } 

    ///<summary>Gets the number of nodes in the current external node set.</summary>
    ///<returns>The number of nodes in the current external node set.</returns>
    property Count: Int32 read get_Count;
    ///<summary>Gets or sets the index number of the current reader position for the indexed list view of XAML nodes.</summary>
    ///<returns>The index number of the current reader position.</returns>
    property CurrentIndex: Int32 read get_CurrentIndex write set_CurrentIndex;
  end;

  //-------------namespace: System.Xaml----------------
  ///<summary>Describes a service for reporting text line information in XAML reader implementations.</summary>
  [DNTypeName('System.Xaml.IXamlLineInfo')]
  DNIXamlLineInfo = interface(DDN.mscorlib.DNObject)
  ['{86EFA016-F065-321A-92C8-5E9DC6D15118}']
  { getters & setters } 

    function get_HasLineInfo: Boolean;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;

  { propertys } 

    ///<summary>Gets a value that specifies whether line information is available.</summary>
    ///<returns><see langword="true" />
    ///  if line information is available; otherwise, <see langword="false" />
    ///  .</returns>
    property HasLineInfo: Boolean read get_HasLineInfo;
    ///<summary>Gets the line number to report.</summary>
    ///<returns>The line number to report.</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>Gets the line position to report.</summary>
    ///<returns>The line position to report.</returns>
    property LinePosition: Int32 read get_LinePosition;
  end;

  //-------------namespace: System.Xaml----------------
  ///<summary>Describes a service where a XAML writer can use reported line information and then include the information in the output.</summary>
  [DNTypeName('System.Xaml.IXamlLineInfoConsumer')]
  DNIXamlLineInfoConsumer = interface(DDN.mscorlib.DNObject)
  ['{79FADA26-2043-3B43-89C9-568038A21A77}']
  { getters & setters } 

    function get_ShouldProvideLineInfo: Boolean;

  { methods } 

    ///<summary>Collects line information.</summary>
    ///  <param name="lineNumber">The line number to use in the output.</param>
    ///  <param name="linePosition">The line position to use in the output.</param>
    procedure SetLineInfo(lineNumber: Int32; linePosition: Int32);

  { propertys } 

    ///<summary>Gets a value that determines whether a line information service should provide values and therefore, should also call <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" />
    ///  when relevant.</summary>
    ///<returns><see langword="true" />
    ///  if line information is used by the implementation; otherwise, <see langword="false" />
    ///  .</returns>
    property ShouldProvideLineInfo: Boolean read get_ShouldProvideLineInfo;
  end;

  //-------------namespace: System.Xaml----------------
  ///<summary>Provides a service that is used during save and write operations to input an object and return a XAML name.</summary>
  [DNTypeName('System.Xaml.IXamlNameProvider')]
  DNIXamlNameProvider = interface(DDN.mscorlib.DNObject)
  ['{12721D30-EFC7-35C6-8C77-BD63C5288BC7}']
  { methods } 

    ///<summary>Retrieves the XAML name of the specified object.</summary>
    ///  <param name="value">The object to get the name for.</param>
    ///<returns>The XAML name value of the requested object.</returns>
    function GetName(value: DDN.mscorlib.DNObject): string;

  end;

  //-------------namespace: System.Xaml----------------
  ///<summary>Describes a service that can return objects that are specified by XAML name, or alternatively, returns a token that defers name resolution. The service can also return an enumerable set of all named objects that are in the XAML namescope.</summary>
  [DNTypeName('System.Xaml.IXamlNameResolver')]
  DNIXamlNameResolver = interface(DDN.mscorlib.DNObject)
  ['{B5A81687-32FF-35AA-B88E-FEF1F475E29C}']
  { getters & setters } 

    function get_IsFixupTokenAvailable: Boolean;

  { events } 

    procedure add_OnNameScopeInitializationComplete(value: DDN.mscorlib.DNEventHandler);
    procedure remove_OnNameScopeInitializationComplete(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>Resolves an object from a name reference.</summary>
    ///  <param name="name">The name reference to resolve.</param>
    ///<returns>The resolved object; or null.</returns>
    function Resolve(name: string): DDN.mscorlib.DNObject; overload;
    function Resolve(name: string; out isFullyInitialized: Boolean): DDN.mscorlib.DNObject; overload;
    function GetFixupToken(names: DDN.mscorlib.DNIEnumerable<string>): DDN.mscorlib.DNObject; overload;
    function GetFixupToken(names: DDN.mscorlib.DNIEnumerable<string>; canAssignDirectly: Boolean): DDN.mscorlib.DNObject; overload;
    ///<summary>Returns an enumerable set of all named objects in the XAML namescope.</summary>
    ///<returns>An enumerable set of <see cref="T:System.Collections.Generic.KeyValuePair`2" />
    ///  objects. For each <see cref="T:System.Collections.Generic.KeyValuePair`2" />
    ///  , the <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" />
    ///  component is a string, and the <see cref="P:System.Collections.Generic.KeyValuePair`2.Value" />
    ///  component is the object that uses the <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" />
    ///  name in the XAML namescope.</returns>
    function GetAllNamesAndValuesInScope: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNKeyValuePair<string, DDN.mscorlib.DNObject>>;

  { propertys } 

    ///<summary>Gets a value that determines whether calling <see cref="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)" />
    ///  is available in order to resolve a name into a token for forward resolution.</summary>
    ///<returns><see langword="true" />
    ///  if <see cref="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)" />
    ///  is available as an implementation that returns a useful token for forward resolution; otherwise, <see langword="false" />
    ///  .</returns>
    property IsFixupTokenAvailable: Boolean read get_IsFixupTokenAvailable;
  end;

  //-------------namespace: System.Xaml----------------
  ///<summary>Describes a service that can return a XAML namespace that is based on its prefix as it is mapped in XAML markup.</summary>
  [DNTypeName('System.Xaml.IXamlNamespaceResolver')]
  DNIXamlNamespaceResolver = interface(DDN.mscorlib.DNObject)
  ['{8147246D-027D-3EE4-B99A-44D48F453083}']
  { methods } 

    ///<summary>Retrieves a XAML namespace identifier for the specified prefix string.</summary>
    ///  <param name="prefix">The prefix for which to retrieve the XAML namespace information.</param>
    ///<returns>The requested XAML namespace identifier, as a string.</returns>
    function GetNamespace(prefix: string): string;
    ///<summary>Returns all the possible prefix-to-XAML namespace mappings (<see cref="T:System.Xaml.NamespaceDeclaration" />
    ///  values) that are available in the active XAML schema context.</summary>
    ///<returns>An enumerable set of <see cref="T:System.Xaml.NamespaceDeclaration" />
    ///  values. To get all the prefix strings, get the <see cref="P:System.Xaml.NamespaceDeclaration.Prefix" />
    ///  value from each value in the returned set. To get prefixes for specific XAML namespaces, process any return value that has the desired <see cref="P:System.Xaml.NamespaceDeclaration.Namespace" />
    ///  value.</returns>
    function GetNamespacePrefixes: DDN.mscorlib.DNIEnumerable<DNNamespaceDeclaration>;

  end;

  //-------------namespace: System.Xaml----------------
  ///<summary>Represents a service that generates a <see cref="T:System.Xaml.XamlObjectWriter" />
  ///  that is based on the current internal parser context.</summary>
  [DNTypeName('System.Xaml.IXamlObjectWriterFactory')]
  DNIXamlObjectWriterFactory = interface(DDN.mscorlib.DNObject)
  ['{224A5889-0333-3775-BFBD-DD2DE1D311FF}']
  { methods } 

    ///<summary>Returns the <see cref="T:System.Xaml.XamlObjectWriterSettings" />
    ///  from the original internal parser context.</summary>
    ///<returns>The settings from the original internal parser context.</returns>
    function GetParentSettings: DNXamlObjectWriterSettings;
    ///<summary>Returns a <see cref="T:System.Xaml.XamlObjectWriter" />
    ///  that is based on active XAML schema context.</summary>
    ///  <param name="settings">The settings to use for construction and initialization of the <see cref="T:System.Xaml.XamlObjectWriter" />
    ///  .</param>
    ///<returns>A <see cref="T:System.Xaml.XamlObjectWriter" />
    ///  that has the specified settings.</returns>
    function GetXamlObjectWriter(settings: DNXamlObjectWriterSettings): DNXamlObjectWriter;

  end;

  //-------------namespace: System.Xaml----------------
  ///<summary>Represents a service that provides XAML schema context information to type converters and markup extensions.</summary>
  [DNTypeName('System.Xaml.IXamlSchemaContextProvider')]
  DNIXamlSchemaContextProvider = interface(DDN.mscorlib.DNObject)
  ['{12451320-4140-38DE-B693-2057FF0E7C83}']
  { getters & setters } 

    function get_SchemaContext: DNXamlSchemaContext;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  that is reported by the service context.</summary>
    ///<returns>The XAML schema context that is reported by the service context.</returns>
    property SchemaContext: DNXamlSchemaContext read get_SchemaContext;
  end;

  //-------------namespace: System.Windows.Markup----------------
  DNAcceptedMarkupExtensionExpressionTypeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{E4D2C753-2E5C-57D8-B7D2-6E8BB14F4CED}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute" />
    ///  class. </summary>
    ///  <param name="type">The return type that this attribute reports. </param>
    {class} function init(&type: DDN.mscorlib.DNType): DNAcceptedMarkupExtensionExpressionTypeAttribute;

  end;

  ///<summary>Notates types for legacy reporting of XAML markup extension characteristics.</summary>
  [DNTypeName('System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute')]
  DNAcceptedMarkupExtensionExpressionTypeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{1A290C4F-ACAA-3B25-99A4-1025F52BA4F6}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the return type that this attribute reports. </summary>
    ///<returns>The return type that this attribute reports. </returns>
    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNAcceptedMarkupExtensionExpressionTypeAttribute = class(TDNGenericImport<DNAcceptedMarkupExtensionExpressionTypeAttributeClass, DNAcceptedMarkupExtensionExpressionTypeAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNAmbientAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{8BD25265-8136-53F2-83E6-1F171A3B4D73}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.AmbientAttribute" />
    ///  class.</summary>
    {class} function init: DNAmbientAttribute;

  end;

  ///<summary>Specifies that a property or type should be treated as ambient. The ambient concept relates to how XAML processors determine type owners of members.</summary>
  [DNTypeName('System.Windows.Markup.AmbientAttribute')]
  DNAmbientAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{31B49D75-82BA-35F2-9CEB-E655EE24CF0D}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNAmbientAttribute = class(TDNGenericImport<DNAmbientAttributeClass, DNAmbientAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNConstructorArgumentAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{F34E588D-83D2-5158-AD5D-34EDF518DA0D}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ConstructorArgumentAttribute" />
    ///  class.</summary>
    ///  <param name="argumentName">The name of the constructor that will initialize the associated property.</param>
    {class} function init(argumentName: string): DNConstructorArgumentAttribute;

  end;

  ///<summary>Specifies that an object can be initialized by using a non-default constructor syntax, and that a property of the specified name supplies construction information.  This information is primarily for XAML serialization.</summary>
  [DNTypeName('System.Windows.Markup.ConstructorArgumentAttribute')]
  DNConstructorArgumentAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{1C774710-301C-3948-A1E4-89F1AB279F17}']
  { getters & setters } 

    function get_ArgumentName: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the name parameter of the constructor that will initialize the associated property.</summary>
    ///<returns>The name of the constructor. Assuming CLR backing, this corresponds to the <see cref="P:System.Reflection.ParameterInfo.Name" />
    ///  of the relevant constructor parameter.</returns>
    property ArgumentName: string read get_ArgumentName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNConstructorArgumentAttribute = class(TDNGenericImport<DNConstructorArgumentAttributeClass, DNConstructorArgumentAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNContentPropertyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{7ED8AC6A-51FF-559F-961F-10B297C73B59}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ContentPropertyAttribute" />
    ///  class.</summary>
    {class} function init: DNContentPropertyAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ContentPropertyAttribute" />
    ///  class, by using the specified name.</summary>
    ///  <param name="name">The property name for the property that is the content property.</param>
    {class} function init(name: string): DNContentPropertyAttribute; overload;

  end;

  ///<summary>Indicates which property of a type is the XAML content property. A XAML processor uses this information when processing XAML child elements of XAML representations of the attributed type.</summary>
  [DNTypeName('System.Windows.Markup.ContentPropertyAttribute')]
  DNContentPropertyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{29329CB8-7909-3A4B-A4D1-98088BE1E7CA}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the name of the property that is the content property.</summary>
    ///<returns>The name of the property that is the content property.</returns>
    property Name: string read get_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNContentPropertyAttribute = class(TDNGenericImport<DNContentPropertyAttributeClass, DNContentPropertyAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNContentWrapperAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{1B90DE00-E897-5A5E-992B-D4041BCD5EAF}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ContentWrapperAttribute" />
    ///  class. </summary>
    ///  <param name="contentWrapper">The <see cref="T:System.Type" />
    ///  that is declared as a content wrapper for the collection type.</param>
    {class} function init(contentWrapper: DDN.mscorlib.DNType): DNContentWrapperAttribute;

  end;

  ///<summary>Specifies one or more types on the associated collection type that will be used to wrap foreign content.</summary>
  [DNTypeName('System.Windows.Markup.ContentWrapperAttribute')]
  DNContentWrapperAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{5F3ADAC3-8042-3DD6-896F-13E3AAE3AAE5}']
  { getters & setters } 

    function get_ContentWrapper: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Determines whether the specified <see cref="T:System.Windows.Markup.ContentWrapperAttribute" />
    ///  is equivalent this <see cref="T:System.Windows.Markup.ContentWrapperAttribute" />
    ///  by comparing the <see cref="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper" />
    ///  properties.</summary>
    ///  <param name="obj">The <see cref="T:System.Windows.Markup.ContentWrapperAttribute" />
    ///  to compare.</param>
    ///<returns><see langword="true" />
    ///  if the <see cref="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper" />
    ///  properties are equal; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>Gets a hash code for this instance.</summary>
    ///<returns>An integer hash code</returns>
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the type that is declared as a content wrapper for the collection type associated with this attribute.</summary>
    ///<returns>The type that is declared as a content wrapper for the collection type.</returns>
    property ContentWrapper: DDN.mscorlib.DNType read get_ContentWrapper;
    ///<summary>Gets a unique identifier for this attribute. </summary>
    ///<returns>A unique identifier for the attribute.</returns>
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNContentWrapperAttribute = class(TDNGenericImport<DNContentWrapperAttributeClass, DNContentWrapperAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNDependsOnAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{FA0DFA4F-B616-561B-BF72-49EE8A90B41E}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.DependsOnAttribute" />
    ///  class.</summary>
    ///  <param name="name">The property that the property associated with this <see cref="T:System.Windows.Markup.DependsOnAttribute" />
    ///  depends on.</param>
    {class} function init(name: string): DNDependsOnAttribute;

  end;

  ///<summary>Indicates that the attributed property is dependent on the value of another property.</summary>
  [DNTypeName('System.Windows.Markup.DependsOnAttribute')]
  DNDependsOnAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{D60A48B7-0228-389B-9CBF-3901C89A64BC}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;
    function get_Name: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a unique identifier for this <see cref="T:System.Windows.Markup.DependsOnAttribute" />
    ///  . </summary>
    ///<returns>The unique identifier.</returns>
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
    ///<summary>Gets the name of the related property declared in this <see cref="T:System.Windows.Markup.DependsOnAttribute" />
    ///  .</summary>
    ///<returns>The name of the related property.</returns>
    property Name: string read get_Name;
  end;

  TDNDependsOnAttribute = class(TDNGenericImport<DNDependsOnAttributeClass, DNDependsOnAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNDictionaryKeyPropertyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{B2C13DF0-09C2-5C38-AE51-E58B4B8FC15D}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.DictionaryKeyPropertyAttribute" />
    ///  class.</summary>
    ///  <param name="name">The name of the property that provides the implicit key value.</param>
    {class} function init(name: string): DNDictionaryKeyPropertyAttribute;

  end;

  ///<summary>Specifies a property of the associated class that provides the implicit key value. Implicit keys are used for keys rather than explicit <see langword="x:Key" />
  ///  attributes defined in XAML for an item in <see cref="T:System.Collections.IDictionary" />
  ///  collections.</summary>
  [DNTypeName('System.Windows.Markup.DictionaryKeyPropertyAttribute')]
  DNDictionaryKeyPropertyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{369461F5-D6DF-31C3-981C-83B3391F2375}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the name of the property that provides the implicit key value.</summary>
    ///<returns>The name of the property that provides the implicit key value.</returns>
    property Name: string read get_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDictionaryKeyPropertyAttribute = class(TDNGenericImport<DNDictionaryKeyPropertyAttributeClass, DNDictionaryKeyPropertyAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNMarkupExtensionBracketCharactersAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{8128516C-33EC-5213-9E3A-87D1A904F636}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute" />
    ///  class using the provided characters.</summary>
    ///  <param name="openingBracket">A <see cref="T:System.Char" />
    ///  that defines the opening bracket character.</param>
    ///  <param name="closingBracket">A <see cref="T:System.Char" />
    ///  that defines the closing bracket character.</param>
    {class} function init(openingBracket: Char; closingBracket: Char): DNMarkupExtensionBracketCharactersAttribute;

  end;

  ///<summary>Reports the bracket characters that a markup extension can return.</summary>
  [DNTypeName('System.Windows.Markup.MarkupExtensionBracketCharactersAttribute')]
  DNMarkupExtensionBracketCharactersAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{A562778A-E1FB-3E0B-BD9B-C09BD74B5038}']
  { getters & setters } 

    function get_OpeningBracket: Char;
    function get_ClosingBracket: Char;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Specifies the character to be used as the opening delimiter in a <see cref="T:System.Windows.Markup.MarkupExtension" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Char" />
    ///  representing the character.</returns>
    property OpeningBracket: Char read get_OpeningBracket;
    ///<summary>Specifies the character to be used as the closing delimiter in a <see cref="T:System.Windows.Markup.MarkupExtension" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Char" />
    ///  representing the character.</returns>
    property ClosingBracket: Char read get_ClosingBracket;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNMarkupExtensionBracketCharactersAttribute = class(TDNGenericImport<DNMarkupExtensionBracketCharactersAttributeClass, DNMarkupExtensionBracketCharactersAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNMarkupExtensionReturnTypeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{452F9BD9-2376-5491-81FC-3BBB175BCBF8}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" />
    ///  class using the provided <see cref="T:System.Type" />
    ///  .</summary>
    ///  <param name="returnType">The return type that this Â .NET Framework attribute reports.</param>
    {class} function init(returnType: DDN.mscorlib.DNType): DNMarkupExtensionReturnTypeAttribute; overload;
    ///<summary>Do not use, see Remarks.</summary>
    ///  <param name="returnType">The return type that this Â .NET Framework attribute reports.</param>
    ///  <param name="expressionType">Do not use; see Remarks.</param>
    {class} function init(returnType: DDN.mscorlib.DNType; expressionType: DDN.mscorlib.DNType): DNMarkupExtensionReturnTypeAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" />
    ///  class.</summary>
    {class} function init: DNMarkupExtensionReturnTypeAttribute; overload;

  end;

  ///<summary>Reports the type that a markup extension can return.</summary>
  [DNTypeName('System.Windows.Markup.MarkupExtensionReturnTypeAttribute')]
  DNMarkupExtensionReturnTypeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{F46A4DBA-49E6-37D0-A560-A6B391F2C4E5}']
  { getters & setters } 

    function get_ReturnType: DDN.mscorlib.DNType;
    function get_ExpressionType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Windows.Markup.MarkupExtension" />
    ///  return type that thisÂ .NET Framework attribute reports.</summary>
    ///<returns>The type-safe return type of the specific <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
    ///  implementation of the markup extension where the <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" />
    ///  .NET Framework attribute is applied.</returns>
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    ///<summary>Do not use; see Remarks.</summary>
    ///<returns>Do not use; see Remarks.</returns>
    property ExpressionType: DDN.mscorlib.DNType read get_ExpressionType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNMarkupExtensionReturnTypeAttribute = class(TDNGenericImport<DNMarkupExtensionReturnTypeAttributeClass, DNMarkupExtensionReturnTypeAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNNameScopePropertyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{3465DA8A-1DB5-53B8-B09E-C2EA64CF3702}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.NameScopePropertyAttribute" />
    ///  class with the specified name.</summary>
    ///  <param name="name">The name of the property on the attributed type that provides the XAML namescope.</param>
    {class} function init(name: string): DNNameScopePropertyAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.NameScopePropertyAttribute" />
    ///  class with the specified name and type.</summary>
    ///  <param name="name">The name of the attachable member that provides the XAML name scope.</param>
    ///  <param name="type">The owner type of the attachable member that provides the XAML name scope.</param>
    {class} function init(name: string; &type: DDN.mscorlib.DNType): DNNameScopePropertyAttribute; overload;

  end;

  ///<summary>Specifies a property of the associated class that provides the XAML namescope value.</summary>
  [DNTypeName('System.Windows.Markup.NameScopePropertyAttribute')]
  DNNameScopePropertyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{43B319BB-0085-3E90-9795-E18E468B183A}']
  { getters & setters } 

    function get_Name: string;
    function get_Type: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the name of the property that provides the XAML namescope.</summary>
    ///<returns>A string value that is the name of the property that provides the XAML namescope.</returns>
    property Name: string read get_Name;
    ///<summary>Gets the owner type of the attached property that provides the XAML namescope support.</summary>
    ///<returns>A <see cref="T:System.Type" />
    ///  value that is the owner type of the attached property that provides the XAML namescope support, or <see langword="null" />
    ///  . See Remarks.</returns>
    property &Type: DDN.mscorlib.DNType read get_Type;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNNameScopePropertyAttribute = class(TDNGenericImport<DNNameScopePropertyAttributeClass, DNNameScopePropertyAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNRootNamespaceAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{848A86A9-2B83-555D-A3B5-10210AF58E11}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.RootNamespaceAttribute" />
    ///  class.</summary>
    ///  <param name="nameSpace">The root namespace value.</param>
    {class} function init(nameSpace: string): DNRootNamespaceAttribute;

  end;

  ///<summary>Represents an assembly level attribute that is used to identify the value of the <see langword="RootNamespace" />
  ///  property in a Visual StudioÂ project file.</summary>
  [DNTypeName('System.Windows.Markup.RootNamespaceAttribute')]
  DNRootNamespaceAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{D5775BE3-F9FE-384D-A945-959B04ED3633}']
  { getters & setters } 

    function get_Namespace: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the string that corresponds to the value of the <see langword="RootNamespace" />
    ///  property in a Visual Studio project file.</summary>
    ///<returns>The string that corresponds to the value of the <see langword="RootNamespace" />
    ///  property in a Visual Studio project file.</returns>
    property Namespace: string read get_Namespace;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNRootNamespaceAttribute = class(TDNGenericImport<DNRootNamespaceAttributeClass, DNRootNamespaceAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNRuntimeNamePropertyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{CC9423B4-78CA-5FF0-A1DC-8B3C6886930A}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.RuntimeNamePropertyAttribute" />
    ///  class.</summary>
    ///  <param name="name">The name of the property to use as the <see langword="x:Name" />
    ///  equivalent of the class.</param>
    {class} function init(name: string): DNRuntimeNamePropertyAttribute;

  end;

  ///<summary>Represents a type-level attribute that reports which property of the type maps to the XAMLÂ x:Name attribute.</summary>
  [DNTypeName('System.Windows.Markup.RuntimeNamePropertyAttribute')]
  DNRuntimeNamePropertyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{573C662B-B16C-3E5A-B2C7-ACB1B7AF1782}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the name of the runtime name property that is specified by this <see cref="T:System.Windows.Markup.RuntimeNamePropertyAttribute" />
    ///  .</summary>
    ///<returns>The name of the property.</returns>
    property Name: string read get_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNRuntimeNamePropertyAttribute = class(TDNGenericImport<DNRuntimeNamePropertyAttributeClass, DNRuntimeNamePropertyAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNTrimSurroundingWhitespaceAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{81B81F65-9BB6-51DF-ABBE-38898CFE32C0}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.TrimSurroundingWhitespaceAttribute" />
    ///  class.</summary>
    {class} function init: DNTrimSurroundingWhitespaceAttribute;

  end;

  ///<summary>Indicates to XAML processors that the whitespace surrounding elements of the type in markup should be trimmed when serializing.</summary>
  [DNTypeName('System.Windows.Markup.TrimSurroundingWhitespaceAttribute')]
  DNTrimSurroundingWhitespaceAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{BB36049D-290E-3202-BB75-67F087A1D1B4}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNTrimSurroundingWhitespaceAttribute = class(TDNGenericImport<DNTrimSurroundingWhitespaceAttributeClass, DNTrimSurroundingWhitespaceAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNUidPropertyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{17C86148-D6F1-55AE-854F-44F81F0609E2}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.UidPropertyAttribute" />
    ///  class.</summary>
    ///  <param name="name">The name of the property that provides the <see langword="x:Uid" />
    ///  value.</param>
    {class} function init(name: string): DNUidPropertyAttribute;

  end;

  ///<summary>Indicates the CLR property of a class that provides the x:Uid Directive value.</summary>
  [DNTypeName('System.Windows.Markup.UidPropertyAttribute')]
  DNUidPropertyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{D6A2E8FF-A9D8-340E-AF3E-E8863C2AF6E9}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the name of the CLR property that represents the x:Uid Directive value.</summary>
    ///<returns>The name of the CLR property that represents x:Uid Directive.</returns>
    property Name: string read get_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNUidPropertyAttribute = class(TDNGenericImport<DNUidPropertyAttributeClass, DNUidPropertyAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNUsableDuringInitializationAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{82B79E03-28CF-5423-A81B-89ED354B76ED}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.UsableDuringInitializationAttribute" />
    ///  class.</summary>
    ///  <param name="usable">Defines whether the associated class is usable during initialization.</param>
    {class} function init(usable: Boolean): DNUsableDuringInitializationAttribute;

  end;

  ///<summary>Indicates whether this type is built top-down during XAML object graph creation.</summary>
  [DNTypeName('System.Windows.Markup.UsableDuringInitializationAttribute')]
  DNUsableDuringInitializationAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{8EB3776B-6D81-32D4-8AC7-0879116BCACC}']
  { getters & setters } 

    function get_Usable: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value that indicates whether the associated class is usable during initialization.</summary>
    ///<returns><see langword="true" />
    ///  if the associated class is usable during initialization; otherwise, <see langword="false" />
    ///  .</returns>
    property Usable: Boolean read get_Usable;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNUsableDuringInitializationAttribute = class(TDNGenericImport<DNUsableDuringInitializationAttributeClass, DNUsableDuringInitializationAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNWhitespaceSignificantCollectionAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{F37A3270-7363-5BB9-98F8-753B24339AF2}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.WhitespaceSignificantCollectionAttribute" />
    ///  class.</summary>
    {class} function init: DNWhitespaceSignificantCollectionAttribute;

  end;

  ///<summary>Indicates that a collection type should be processed as being whitespace significant by a XAML processor.</summary>
  [DNTypeName('System.Windows.Markup.WhitespaceSignificantCollectionAttribute')]
  DNWhitespaceSignificantCollectionAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{11CE8B95-3098-36C7-8BA1-3F0A9E223A2B}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNWhitespaceSignificantCollectionAttribute = class(TDNGenericImport<DNWhitespaceSignificantCollectionAttributeClass, DNWhitespaceSignificantCollectionAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNXamlDeferLoadAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{570A6EC7-ED27-55D1-8529-E2DC1E3768A0}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlDeferLoadAttribute" />
    ///  class, using CLR <see cref="T:System.Type" />
    ///  values. </summary>
    ///  <param name="loaderType">The CLR <see cref="T:System.Type" />
    ///  value for the implementation to use for the defer load behavior.</param>
    ///  <param name="contentType">The CLR <see cref="T:System.Type" />
    ///  value for the destination/content type of the defer load behavior.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="loaderType" />
    ///  or <paramref name="contentType" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(loaderType: DDN.mscorlib.DNType; contentType: DDN.mscorlib.DNType): DNXamlDeferLoadAttribute; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlDeferLoadAttribute" />
    ///  class, using string names of types. </summary>
    ///  <param name="loaderType">The string name of the type for the implementation to use for the defer load behavior.</param>
    ///  <param name="contentType">The string name of the type for the destination/content type of the defer load behavior.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="loaderType" />
    ///  or <paramref name="contentType" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(loaderType: string; contentType: string): DNXamlDeferLoadAttribute; overload;

  end;

  ///<summary>Indicates that a class or property has a deferred load usage for XAML (such as a template behavior), and reports the class that enables the deferring behavior and its destination/content type.</summary>
  [DNTypeName('System.Windows.Markup.XamlDeferLoadAttribute')]
  DNXamlDeferLoadAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{BD82683E-BAEB-3E79-AA00-197EE7ED9E82}']
  { getters & setters } 

    function get_LoaderTypeName: string;
    function get_ContentTypeName: string;
    function get_LoaderType: DDN.mscorlib.DNType;
    function get_ContentType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the string name of the type for the destination/content type of the defer load behavior.</summary>
    ///<returns>The string name of the type for the destination/content type of the defer load behavior.</returns>
    property LoaderTypeName: string read get_LoaderTypeName;
    ///<summary>Gets the string name of the type for the implementation to use for the defer load behavior.</summary>
    ///<returns>The string name of the type for the converter to use for the defer load behavior.</returns>
    property ContentTypeName: string read get_ContentTypeName;
    ///<summary>Gets the CLR <see cref="T:System.Type" />
    ///  value for the implementation to use for the defer load behavior.</summary>
    ///<returns>The CLR <see cref="T:System.Type" />
    ///  value for the implementation to use for the defer load behavior.</returns>
    property LoaderType: DDN.mscorlib.DNType read get_LoaderType;
    ///<summary>Gets the CLR <see cref="T:System.Type" />
    ///  value for the destination/content type of the defer load behavior.</summary>
    ///<returns>The CLR <see cref="T:System.Type" />
    ///  value for the destination/content type of the defer load behavior.</returns>
    property ContentType: DDN.mscorlib.DNType read get_ContentType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXamlDeferLoadAttribute = class(TDNGenericImport<DNXamlDeferLoadAttributeClass, DNXamlDeferLoadAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNXamlSetMarkupExtensionAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{6DDC05BE-5EB6-5B66-A06F-666D8790CD11}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionAttribute" />
    ///  class. </summary>
    ///  <param name="xamlSetMarkupExtensionHandler">The name of the handler to use for markup extension set operations.</param>
    {class} function init(xamlSetMarkupExtensionHandler: string): DNXamlSetMarkupExtensionAttribute;

  end;

  ///<summary>Indicates that a class can use a markup extension to provide a value, and references a handler to use for markup extension set operations.</summary>
  [DNTypeName('System.Windows.Markup.XamlSetMarkupExtensionAttribute')]
  DNXamlSetMarkupExtensionAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{CF25DFB5-FA36-38C2-BC37-A08D76B29F37}']
  { getters & setters } 

    function get_XamlSetMarkupExtensionHandler: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the name of the handler to use for markup extension set operations.</summary>
    ///<returns>The name of the handler to use for markup extension set operations.</returns>
    property XamlSetMarkupExtensionHandler: string read get_XamlSetMarkupExtensionHandler;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXamlSetMarkupExtensionAttribute = class(TDNGenericImport<DNXamlSetMarkupExtensionAttributeClass, DNXamlSetMarkupExtensionAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNXamlSetTypeConverterAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{FF3EDFBB-9BE9-5B3E-9674-4CFA5D25CDC4}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" />
    ///  class.</summary>
    ///  <param name="xamlSetTypeConverterHandler">The name of the handler to use for type converter setting operations.</param>
    {class} function init(xamlSetTypeConverterHandler: string): DNXamlSetTypeConverterAttribute;

  end;

  ///<summary>Indicates that a class can use a type converter to provide a value, and references a handler to use for type converter setting cases.</summary>
  [DNTypeName('System.Windows.Markup.XamlSetTypeConverterAttribute')]
  DNXamlSetTypeConverterAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{C4FFCC04-7569-33EC-A8AE-06FEDE6DF425}']
  { getters & setters } 

    function get_XamlSetTypeConverterHandler: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <paramref name="xamlSetTypeConverterHandler" />
    ///  initialization value (the handler name) specified in the <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" />
    ///  .</summary>
    ///<returns>The <paramref name="xamlSetTypeConverterHandler" />
    ///  value specified in the <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" />
    ///  .</returns>
    property XamlSetTypeConverterHandler: string read get_XamlSetTypeConverterHandler;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXamlSetTypeConverterAttribute = class(TDNGenericImport<DNXamlSetTypeConverterAttributeClass, DNXamlSetTypeConverterAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNXmlLangPropertyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{7F81136E-26F4-53AB-BDC4-D220ECA10B23}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XmlLangPropertyAttribute" />
    ///  class.</summary>
    ///  <param name="name">The property name to associate with the <see langword="xml:lang" />
    ///  attribute.</param>
    {class} function init(name: string): DNXmlLangPropertyAttribute;

  end;

  ///<summary>Identifies the property to associate with the xml:lang attribute.</summary>
  [DNTypeName('System.Windows.Markup.XmlLangPropertyAttribute')]
  DNXmlLangPropertyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{83EBB703-ED09-3A72-ADF8-517DA5070003}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the name of the property that is specified in this attribute.</summary>
    ///<returns>The name of the property.</returns>
    property Name: string read get_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlLangPropertyAttribute = class(TDNGenericImport<DNXmlLangPropertyAttributeClass, DNXmlLangPropertyAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNXmlnsCompatibleWithAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{849566EE-41AE-5CF3-93C4-4C1434EE3AA4}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XmlnsCompatibleWithAttribute" />
    ///  class.</summary>
    ///  <param name="oldNamespace">The reference XAML namespace identifier.</param>
    ///  <param name="newNamespace">The subsuming XAML namespace identifier.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="oldNamespace" />
    ///  or <paramref name="newNamespace" />
    ///  are <see langword="null" />
    ///  .</exception>
    {class} function init(oldNamespace: string; newNamespace: string): DNXmlnsCompatibleWithAttribute;

  end;

  ///<summary>Specifies that a XAML namespace can be subsumed by another XAML namespace. Typically, the subsuming XAML namespace is indicated in a previously defined <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute" />
  ///  .</summary>
  [DNTypeName('System.Windows.Markup.XmlnsCompatibleWithAttribute')]
  DNXmlnsCompatibleWithAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{75127560-85EE-3891-ABA8-D8FEB189D96F}']
  { getters & setters } 

    function get_OldNamespace: string;
    function get_NewNamespace: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the reference namespace identifier reported by this attribute.</summary>
    ///<returns>The reference namespace identifier.</returns>
    property OldNamespace: string read get_OldNamespace;
    ///<summary>Gets the subsuming namespace identifier reported by this attribute.</summary>
    ///<returns>The subsuming namespace identifier reported in the attribute.</returns>
    property NewNamespace: string read get_NewNamespace;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlnsCompatibleWithAttribute = class(TDNGenericImport<DNXmlnsCompatibleWithAttributeClass, DNXmlnsCompatibleWithAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNXmlnsDefinitionAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{7557980F-8EEC-5D04-9756-5C29D05932EB}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute" />
    ///  class.</summary>
    ///  <param name="xmlNamespace">The XAML namespace identifier.</param>
    ///  <param name="clrNamespace">A string that references a CLR namespace name.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xmlNamespace" />
    ///  or <paramref name="clrNamespace" />
    ///  are <see langword="null" />
    ///  .</exception>
    {class} function init(xmlNamespace: string; clrNamespace: string): DNXmlnsDefinitionAttribute;

  end;

  ///<summary>Specifies a mapping on a per-assembly basis between a XAML namespace and a CLR namespace, which is then used for type resolution by a XAML object writer or XAML schema context.</summary>
  [DNTypeName('System.Windows.Markup.XmlnsDefinitionAttribute')]
  DNXmlnsDefinitionAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{C1706FB1-EB9A-3A6F-AE0D-50BA6CAE1903}']
  { getters & setters } 

    function get_XmlNamespace: string;
    function get_ClrNamespace: string;
    function get_AssemblyName: string;
    procedure set_AssemblyName(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the XAML namespace identifier specified in this attribute.</summary>
    ///<returns>The XAML namespace identifier.</returns>
    property XmlNamespace: string read get_XmlNamespace;
    ///<summary>Gets the string name of the CLR namespace specified in this attributeÂ </summary>
    ///<returns>The CLR namespace, specified as a string.</returns>
    property ClrNamespace: string read get_ClrNamespace;
    ///<summary>Gets or sets the name of the assembly associated with the attribute. </summary>
    ///<returns>The assembly name.</returns>
    property AssemblyName: string read get_AssemblyName write set_AssemblyName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlnsDefinitionAttribute = class(TDNGenericImport<DNXmlnsDefinitionAttributeClass, DNXmlnsDefinitionAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNXmlnsPrefixAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{81E6C187-E467-59F2-BBFE-0B9CB30C2F69}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XmlnsPrefixAttribute" />
    ///  class.</summary>
    ///  <param name="xmlNamespace">The XAML namespace indentifier.</param>
    ///  <param name="prefix">The recommended prefix string.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xmlNamespace" />
    ///  or <paramref name="prefix" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(xmlNamespace: string; prefix: string): DNXmlnsPrefixAttribute;

  end;

  ///<summary>Identifies a recommended prefix to associate with a XAML namespace for XAML usage, when writing elements and attributes in a XAML file (serialization) or when interacting with a design environment that has XAML editing features.</summary>
  [DNTypeName('System.Windows.Markup.XmlnsPrefixAttribute')]
  DNXmlnsPrefixAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{4F28D351-7E09-3CF7-B92E-AD7B7112830B}']
  { getters & setters } 

    function get_XmlNamespace: string;
    function get_Prefix: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the XAML namespace identifier associated with this attribute.</summary>
    ///<returns>The XAML namespace identifier. </returns>
    property XmlNamespace: string read get_XmlNamespace;
    ///<summary>Gets the recommended prefix associated with this attribute.</summary>
    ///<returns>The recommended prefix string.</returns>
    property Prefix: string read get_Prefix;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlnsPrefixAttribute = class(TDNGenericImport<DNXmlnsPrefixAttributeClass, DNXmlnsPrefixAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNNameReferenceConverterClass = interface(DNObjectClass)
  ['{38CB52C7-363D-557C-9AF6-E1301B99633A}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.NameReferenceConverter" />
    ///  class.</summary>
    {class} function init: DNNameReferenceConverter;

  end;

  ///<summary>Provides type conversion to convert a string name into an object reference to the object with that name, or to return the name of an object from the object graph.</summary>
  [DNTypeName('System.Windows.Markup.NameReferenceConverter')]
  DNNameReferenceConverter = interface(DNObject)
  ['{EE0B9D76-557A-3524-B43B-34B412677CF9}']
  { methods } 

    ///<summary>Returns whether this converter can convert an object of one type to another object. </summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that provides a format context. </param>
    ///  <param name="sourceType">A <see cref="T:System.Type" />
    ///  that represents the type you want to convert from. </param>
    ///<returns><see langword="true" />
    ///  if this converter can perform the conversion; otherwise, <see langword="false" />
    ///  . </returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Returns a value that indicates whether the converter can convert an object to the specified destination type. </summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that provides a format context. </param>
    ///  <param name="destinationType">The type to convert to.</param>
    ///<returns><see langword="true" />
    ///  if the converter can perform the conversion; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Converts an object to the specified type. This is intended to return XAML reference names for objects in an object graph.</summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that provides a format context. </param>
    ///  <param name="culture">The <see cref="T:System.Globalization.CultureInfo" />
    ///  to use as the current culture.</param>
    ///  <param name="value">The object to retrieve the reference name for.</param>
    ///  <param name="destinationType">The type to return. You should always reference the <see cref="T:System.String" />
    ///  type.</param>
    ///<returns>The reference name of the input <paramref name="value" />
    ///  object.</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xaml.IXamlNameProvider" />
    ///  service is missing or invalid.</exception><exception cref="T:System.ArgumentNullException"><paramref name="context" />
    ///  is <see langword="null" />
    ///  .</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>Converts the provided object to another object, using the specified context and culture information. </summary>
    ///  <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  that provides a format context. </param>
    ///  <param name="culture">The <see cref="T:System.Globalization.CultureInfo" />
    ///  to use as the current culture.</param>
    ///  <param name="value">The reference name string to convert.</param>
    ///<returns>The returned object, which is potentially any object that is type-mapped in the relevant backing assemblies and capable of being declared in XAML with a XAML name reference.</returns>
    ///<exception cref="T:System.InvalidOperationException"><paramref name="value" />
    ///  is a null string or empty string.-or-
    ///<see cref="T:System.Xaml.IXamlNameResolver" />
    ///  service is missing or invalid.</exception><exception cref="T:System.ArgumentNullException"><paramref name="context" />
    ///  is <see langword="null" />
    ///  .</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNNameReferenceConverter = class(TDNGenericImport<DNNameReferenceConverterClass, DNNameReferenceConverter>) end;

  //-------------namespace: System.Xaml.Schema----------------
  DNXamlTypeTypeConverterClass = interface(DNObjectClass)
  ['{4426ED83-3E2B-5E7F-85E2-279855CA1B56}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeTypeConverter" />
    ///  class.</summary>
    {class} function init: DNXamlTypeTypeConverter;

  end;

  ///<summary>Converts a <see cref="T:System.Xaml.XamlType" />
  ///  object to and from a string that represents the type name. This functionality is used for XAML extensibility by markup definitions, via <see cref="T:System.Windows.Markup.PropertyDefinition" />
  ///  .</summary>
  [DNTypeName('System.Xaml.Schema.XamlTypeTypeConverter')]
  DNXamlTypeTypeConverter = interface(DNObject)
  ['{468EBDE9-D13D-3B29-8009-DFC8246162B1}']
  { methods } 

    ///<summary>Determines whether an object of the specified type can be converted to an instance of <see cref="T:System.Xaml.XamlType" />
    ///  , using the specified context.</summary>
    ///  <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
    ///  <param name="sourceType">The type being evaluated for conversion.</param>
    ///<returns><see langword="true" />
    ///  if this converter can perform the operation; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Attempts to convert the specified object to a <see cref="T:System.Xaml.XamlType" />
    ///  , using the specified context.</summary>
    ///  <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
    ///  <param name="culture">Culture specific information.</param>
    ///  <param name="value">The object to convert.</param>
    ///<returns>The converted object.</returns>
    ///<exception cref="T:System.NotSupportedException"><paramref name="value" />
    ///  cannot be converted.</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>Determines whether an instance of <see cref="T:System.Xaml.XamlType" />
    ///  can be converted to the specified type, using the specified context.</summary>
    ///  <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
    ///  <param name="destinationType">The type being evaluated for conversion.</param>
    ///<returns><see langword="true" />
    ///  if this converter can perform the operation; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>Attempts to convert a <see cref="T:System.Xaml.XamlType" />
    ///  to the specified type, using the specified context.</summary>
    ///  <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
    ///  <param name="culture">Culture specific information.</param>
    ///  <param name="value">The object to convert.</param>
    ///  <param name="destinationType">The type to convert the object to.</param>
    ///<returns>The converted object.</returns>
    ///<exception cref="T:System.NotSupportedException"><paramref name="value" />
    ///  cannot be converted.</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXamlTypeTypeConverter = class(TDNGenericImport<DNXamlTypeTypeConverterClass, DNXamlTypeTypeConverter>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNXamlSetValueEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{28989EA9-FA6C-5B6C-9750-CF1434BDCD30}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />
    ///  class. </summary>
    ///  <param name="member">XAML type system / schema information for the member being set.</param>
    ///  <param name="value">The value to provide for the member.</param>
    {class} function init(member: DNXamlMember; value: DDN.mscorlib.DNObject): DNXamlSetValueEventArgs;

  end;

  ///<summary>Provides data for callbacks that are invoked when a <see cref="T:System.Xaml.XamlObjectWriter" />
  ///  sets certain values.</summary>
  [DNTypeName('System.Windows.Markup.XamlSetValueEventArgs')]
  DNXamlSetValueEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{32F3A0E9-B315-3BFC-9E17-D57E7E46F11C}']
  { getters & setters } 

    function get_Member: DNXamlMember;
    function get_Value: DDN.mscorlib.DNObject;
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    ///<summary>When overridden in a derived class, provides a way to invoke a <see langword="SetValue" />
    ///  callback as defined on a base class of the current acting type.</summary>
    procedure CallBase;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets XAML type system and XAML schema information for the member being set.</summary>
    ///<returns>XAML type system and XAML schema information for the member being set.</returns>
    property Member: DNXamlMember read get_Member;
    ///<summary>Gets the value to provide for the member being set.</summary>
    ///<returns>The value to provide for the member being set.</returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
    ///<summary>Gets or sets a value that determines whether a caller that is using the <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />
    ///  can use the values without having to call <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" />
    ///  .</summary>
    ///<returns><see langword="true" />
    ///  if the values were useful and calling <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" />
    ///  is not necessary; otherwise, <see langword="false" />
    ///  .</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNXamlSetValueEventArgs = class(TDNGenericImport<DNXamlSetValueEventArgsClass, DNXamlSetValueEventArgs>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNXamlSetMarkupExtensionEventArgsClass = interface(DNXamlSetValueEventArgsClass)
  ['{E828B8DB-375A-50A6-8530-78B58030D618}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" />
    ///  class. </summary>
    ///  <param name="member">XAML type system / schema information for the member being set.</param>
    ///  <param name="value">The markup extension reference to provide for the member being set.</param>
    ///  <param name="serviceProvider">Service provider information passed to the markup extension.</param>
    {class} function init(member: DNXamlMember; value: DNMarkupExtension; serviceProvider: DDN.mscorlib.DNIServiceProvider): DNXamlSetMarkupExtensionEventArgs;

  end;

  ///<summary>Provides data for callbacks that are invoked when a XAML object writer sets a value using a markup extension.</summary>
  [DNTypeName('System.Windows.Markup.XamlSetMarkupExtensionEventArgs')]
  DNXamlSetMarkupExtensionEventArgs = interface(DNXamlSetValueEventArgs)
  ['{B635BFE2-E4BE-33DB-9ECB-BC4BBC4070F9}']
  { getters & setters } 

    function get_MarkupExtension: DNMarkupExtension;
    function get_ServiceProvider: DDN.mscorlib.DNIServiceProvider;
    function get_Member: DNXamlMember;
    function get_Value: DDN.mscorlib.DNObject;
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    ///<summary>Provides a way to invoke a callback as defined on a base class of the current acting type.</summary>
    procedure CallBase;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Windows.Markup.MarkupExtension" />
    ///  reference that is relevant to this <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" />
    ///  .</summary>
    ///<returns>The markup extension reference that is relevant to this <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" />
    ///  .</returns>
    property MarkupExtension: DNMarkupExtension read get_MarkupExtension;
    ///<summary>Gets service provider information that was passed to the markup extension.</summary>
    ///<returns>Service provider information that was passed to the markup extension.</returns>
    property ServiceProvider: DDN.mscorlib.DNIServiceProvider read get_ServiceProvider;
    ///<summary>Gets XAML type system and XAML schema information for the member being set.</summary>
    ///<returns>XAML type system and XAML schema information for the member being set.</returns>
    property Member: DNXamlMember read get_Member;
    ///<summary>Gets the value to provide for the member being set.</summary>
    ///<returns>The value to provide for the member being set.</returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
    ///<summary>Gets or sets a value that determines whether a caller that is using the <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />
    ///  can use the values without having to call <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" />
    ///  .</summary>
    ///<returns><see langword="true" />
    ///  if the values were useful and calling <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" />
    ///  is not necessary; otherwise, <see langword="false" />
    ///  .</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNXamlSetMarkupExtensionEventArgs = class(TDNGenericImport<DNXamlSetMarkupExtensionEventArgsClass, DNXamlSetMarkupExtensionEventArgs>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNXamlSetTypeConverterEventArgsClass = interface(DNXamlSetValueEventArgsClass)
  ['{C36468DD-E6CF-52C4-9C0E-60ABBD6E8011}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlSetTypeConverterEventArgs" />
    ///  class. </summary>
    ///  <param name="member">XAML type system / schema information for the member being set.</param>
    ///  <param name="typeConverter">The specific type converter instance being invoked.</param>
    ///  <param name="value">The value to provide for the member being set.</param>
    ///  <param name="serviceProvider">Service provider information that can be used by the <paramref name="typeConverter" />
    ///  class.</param>
    ///  <param name="cultureInfo">Culture information that can be used by the <paramref name="typeConverter" />
    ///  class when calling <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
    ///  and other methods.</param>
    {class} function init(member: DNXamlMember; typeConverter: DDN.System.DNTypeConverter; value: DDN.mscorlib.DNObject; serviceProvider: DDN.System.DNITypeDescriptorContext; cultureInfo: DDN.mscorlib.DNCultureInfo): DNXamlSetTypeConverterEventArgs;

  end;

  ///<summary>Provides data for callbacks that are invoked when a XAML writer sets a value using a type converter call.</summary>
  [DNTypeName('System.Windows.Markup.XamlSetTypeConverterEventArgs')]
  DNXamlSetTypeConverterEventArgs = interface(DNXamlSetValueEventArgs)
  ['{C92E4D80-049A-3501-911F-A93C2F79F802}']
  { getters & setters } 

    function get_TypeConverter: DDN.System.DNTypeConverter;
    function get_ServiceProvider: DDN.System.DNITypeDescriptorContext;
    function get_CultureInfo: DDN.mscorlib.DNCultureInfo;
    function get_Member: DNXamlMember;
    function get_Value: DDN.mscorlib.DNObject;
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    ///<summary>Provides a way to invoke a callback as defined on a base class of the current acting type.</summary>
    procedure CallBase;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.ComponentModel.TypeConverter" />
    ///  instance that is invoked and provides type conversion behavior.</summary>
    ///<returns>The type converter that provides type conversion behavior.</returns>
    property TypeConverter: DDN.System.DNTypeConverter read get_TypeConverter;
    ///<summary>Gets <see cref="T:System.IServiceProvider" />
    ///  information that can be used by the type converter class.</summary>
    ///<returns>Service provider information that can be used by the <paramref name="typeConverter" />
    ///  class.</returns>
    property ServiceProvider: DDN.System.DNITypeDescriptorContext read get_ServiceProvider;
    ///<summary>Gets <see cref="T:System.Globalization.CultureInfo" />
    ///  information that can be used by the type converter class when calling <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
    ///  and other methods.</summary>
    ///<returns>Culture information that can be used by the type converter class </returns>
    property CultureInfo: DDN.mscorlib.DNCultureInfo read get_CultureInfo;
    ///<summary>Gets XAML type system and XAML schema information for the member being set.</summary>
    ///<returns>XAML type system and XAML schema information for the member being set.</returns>
    property Member: DNXamlMember read get_Member;
    ///<summary>Gets the value to provide for the member being set.</summary>
    ///<returns>The value to provide for the member being set.</returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
    ///<summary>Gets or sets a value that determines whether a caller that is using the <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />
    ///  can use the values without having to call <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" />
    ///  .</summary>
    ///<returns><see langword="true" />
    ///  if the values were useful and calling <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" />
    ///  is not necessary; otherwise, <see langword="false" />
    ///  .</returns>
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNXamlSetTypeConverterEventArgs = class(TDNGenericImport<DNXamlSetTypeConverterEventArgsClass, DNXamlSetTypeConverterEventArgs>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlObjectEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{D6340497-B007-56B0-BF54-6ED2AD17478A}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectEventArgs" />
    ///  class. </summary>
    ///  <param name="instance">The object instance that is relevant to the event data.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="instance" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(instance: DDN.mscorlib.DNObject): DNXamlObjectEventArgs;

  end;

  ///<summary>Provides data for callbacks that can be inserted in the sequence for object initialization and property setting. This influences the object graph that is produced by <see cref="T:System.Xaml.XamlObjectWriter" />
  ///  .</summary>
  [DNTypeName('System.Xaml.XamlObjectEventArgs')]
  DNXamlObjectEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{0C76CAEF-0578-3C06-BA49-EA1E3F1D9F64}']
  { getters & setters } 

    function get_Instance: DDN.mscorlib.DNObject;
    function get_SourceBamlUri: DDN.System.DNUri;
    function get_ElementLineNumber: Int32;
    function get_ElementLinePosition: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the object instance that is relevant to the event data.</summary>
    ///<returns>The object instance that is relevant to the event data.</returns>
    property Instance: DDN.mscorlib.DNObject read get_Instance;
    ///<summary>Gets or sets the BAML URI of the relevant object instance.</summary>
    ///<returns>The BAML URI of the relevant object instance.</returns>
    property SourceBamlUri: DDN.System.DNUri read get_SourceBamlUri;
    ///<summary>Gets or sets the line number of the relevant object instance.</summary>
    ///<returns>The line number of the element.</returns>
    property ElementLineNumber: Int32 read get_ElementLineNumber;
    ///<summary>Gets or sets the position in the line of the relevant object instance.</summary>
    ///<returns>The position in the line of the element.</returns>
    property ElementLinePosition: Int32 read get_ElementLinePosition;
  end;

  TDNXamlObjectEventArgs = class(TDNGenericImport<DNXamlObjectEventArgsClass, DNXamlObjectEventArgs>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{C73A8FE6-F3CC-5296-92A0-7558D0E13494}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlException" />
    ///  class. The instance contains a specified error message, inner exception, and line information.</summary>
    ///  <param name="message">The message that describes the exception. The caller of this constructor must make sure that this string has been localized for the current system culture. </param>
    ///  <param name="innerException">The exception that is the cause of the current exception. </param>
    ///  <param name="lineNumber">The line number to report to debugging or to line information consumers.</param>
    ///  <param name="linePosition">The line position to report to debugging or line information consumers.</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException; lineNumber: Int32; linePosition: Int32): DNXamlException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlException" />
    ///  class. The instance contains a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
    ///  <param name="message">The message that describes the exception. The caller of this constructor must make sure that this string has been localized for the current system culture. </param>
    ///  <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" />
    ///  parameter is not <see langword="null" />
    ///  , the current exception is raised in a <see langword="catch" />
    ///  block that handles the inner exception. </param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXamlException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlException" />
    ///  class. The instance contains a system-supplied message that describes the error.</summary>
    {class} function init: DNXamlException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlException" />
    ///  class. The instance contains a specified message that describes the error.</summary>
    ///  <param name="message">The message that describes the exception. The caller of this constructor must make sure that this string has been localized for the current system culture.</param>
    {class} function init(message: string): DNXamlException; overload;

  end;

  ///<summary>The exception that is thrown for a general XAML reader or XAML writer exception. See Remarks.</summary>
  [DNTypeName('System.Xaml.XamlException')]
  DNXamlException = interface(DDN.mscorlib.DNException)
  ['{43A4DBFB-7F6B-39C5-ABBE-DC7078821B2F}']
  { getters & setters } 

    function get_Message: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    ///  and provides serialization support for the line information data.</summary>
    ///  <param name="info">The object that holds the serialized object data. </param>
    ///  <param name="context">The contextual information about the source or destination. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="info" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets the exception message, and if line information is available, appends the line information to the message.</summary>
    ///<returns>The exception message that includes the appended line information.</returns>
    property Message: string read get_Message;
    ///<summary>Gets or sets the line number component of XAML text line information that the exception reports.</summary>
    ///<returns>The line number component of the XAML text line information.</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>Gets or sets the line position component of XAML text line information that the exception reports.</summary>
    ///<returns>The line position component of XAML text line information.</returns>
    property LinePosition: Int32 read get_LinePosition;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXamlException = class(TDNGenericImport<DNXamlExceptionClass, DNXamlException>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlDuplicateMemberExceptionClass = interface(DNXamlExceptionClass)
  ['{8A5D2E4A-D513-5E4C-972A-6B3EDB2FA025}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlDuplicateMemberException" />
    ///  class with a system-supplied message that describes the error.</summary>
    {class} function init: DNXamlDuplicateMemberException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlDuplicateMemberException" />
    ///  class with the relevant member and type information to report.</summary>
    ///  <param name="member">The XAML member identifier to report.</param>
    ///  <param name="type">The XAML type identifier to report as the parent type.</param>
    {class} function init(member: DNXamlMember; &type: DNXamlType): DNXamlDuplicateMemberException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlDuplicateMemberException" />
    ///  class with a specified message that describes the error.</summary>
    ///  <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    {class} function init(message: string): DNXamlDuplicateMemberException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlDuplicateMemberException" />
    ///  class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
    ///  <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
    ///  <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" />
    ///  parameter is not <see langword="null" />
    ///  , the current exception is raised in a <see langword="catch" />
    ///  block that handles the inner exception. </param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXamlDuplicateMemberException; overload;

  end;

  ///<summary>The exception that is thrown when a XAML writer attempts to write a value for a duplicate member into the same object node. </summary>
  [DNTypeName('System.Xaml.XamlDuplicateMemberException')]
  DNXamlDuplicateMemberException = interface(DNXamlException)
  ['{83511200-1CB5-3B38-8C35-3007DE6B9F69}']
  { getters & setters } 

    function get_DuplicateMember: DNXamlMember;
    procedure set_DuplicateMember(value: DNXamlMember);
    function get_ParentType: DNXamlType;
    procedure set_ParentType(value: DNXamlType);
    function get_Message: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlDuplicateMemberException" />
    ///  class with serialized data.</summary>
    ///  <param name="info">The object that holds the serialized object data. </param>
    ///  <param name="context">The contextual information about the source or destination. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="info" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets the XAML member identifier for the property to report as a duplicate.</summary>
    ///<returns>The <see cref="T:System.Xaml.XamlMember" />
    ///  object (XAML member identifier) to report.</returns>
    property DuplicateMember: DNXamlMember read get_DuplicateMember write set_DuplicateMember;
    ///<summary>Gets or sets the XAML type identifier to report as the parent type.</summary>
    ///<returns>The <see cref="T:System.Xaml.XamlType" />
    ///  object (XAML type identifier) to report as the parent type.</returns>
    property ParentType: DNXamlType read get_ParentType write set_ParentType;
    ///<summary>Gets or sets the exception message, and if line information is available, appends the line information to the message.</summary>
    ///<returns>The exception message that includes the appended line information.</returns>
    property Message: string read get_Message;
    ///<summary>Gets or sets the line number component of XAML text line information that the exception reports.</summary>
    ///<returns>The line number component of the XAML text line information.</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>Gets or sets the line position component of XAML text line information that the exception reports.</summary>
    ///<returns>The line position component of XAML text line information.</returns>
    property LinePosition: Int32 read get_LinePosition;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXamlDuplicateMemberException = class(TDNGenericImport<DNXamlDuplicateMemberExceptionClass, DNXamlDuplicateMemberException>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlInternalExceptionClass = interface(DNXamlExceptionClass)
  ['{35ECB897-F488-577A-B6F2-15C0F2967D8C}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlInternalException" />
    ///  class with a system-supplied message that describes the error.</summary>
    {class} function init: DNXamlInternalException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlInternalException" />
    ///  class with a specified message that describes the error.</summary>
    ///  <param name="message">The message that describes the exception. </param>
    {class} function init(message: string): DNXamlInternalException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlInternalException" />
    ///  class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
    ///  <param name="message">The message that describes the exception. </param>
    ///  <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" />
    ///  parameter is not <see langword="null" />
    ///  , the current exception is raised in a <see langword="catch" />
    ///  block that handles the inner exception. </param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXamlInternalException; overload;

  end;

  ///<summary>The exception that is thrown for internal inconsistencies that occur during XAML reading and XAML writing. </summary>
  [DNTypeName('System.Xaml.XamlInternalException')]
  DNXamlInternalException = interface(DNXamlException)
  ['{4E0218E8-4700-3FBB-A44A-86E9E13CB429}']
  { getters & setters } 

    function get_Message: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    ///  and provides serialization support for the line information data.</summary>
    ///  <param name="info">The object that holds the serialized object data. </param>
    ///  <param name="context">The contextual information about the source or destination. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="info" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets the exception message, and if line information is available, appends the line information to the message.</summary>
    ///<returns>The exception message that includes the appended line information.</returns>
    property Message: string read get_Message;
    ///<summary>Gets or sets the line number component of XAML text line information that the exception reports.</summary>
    ///<returns>The line number component of the XAML text line information.</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>Gets or sets the line position component of XAML text line information that the exception reports.</summary>
    ///<returns>The line position component of XAML text line information.</returns>
    property LinePosition: Int32 read get_LinePosition;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXamlInternalException = class(TDNGenericImport<DNXamlInternalExceptionClass, DNXamlInternalException>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlObjectReaderExceptionClass = interface(DNXamlExceptionClass)
  ['{0CCD2BCC-5159-5607-B8BC-BDDCDD164395}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectReaderException" />
    ///  class with a system-supplied message that describes the error.</summary>
    {class} function init: DNXamlObjectReaderException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectReaderException" />
    ///  class with a specified message that describes the error.</summary>
    ///  <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    {class} function init(message: string): DNXamlObjectReaderException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectReaderException" />
    ///  class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
    ///  <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
    ///  <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" />
    ///  parameter is not <see langword="null" />
    ///  , the current exception is raised in a <see langword="catch" />
    ///  block that handles the inner exception. </param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXamlObjectReaderException; overload;

  end;

  ///<summary>The exception that is thrown by several <see cref="T:System.Xaml.XamlObjectReader" />
  ///  internal helper APIs. </summary>
  [DNTypeName('System.Xaml.XamlObjectReaderException')]
  DNXamlObjectReaderException = interface(DNXamlException)
  ['{A666A348-0184-348D-B769-0D277CFCB036}']
  { getters & setters } 

    function get_Message: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    ///  and provides serialization support for the line information data.</summary>
    ///  <param name="info">The object that holds the serialized object data. </param>
    ///  <param name="context">The contextual information about the source or destination. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="info" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets the exception message, and if line information is available, appends the line information to the message.</summary>
    ///<returns>The exception message that includes the appended line information.</returns>
    property Message: string read get_Message;
    ///<summary>Gets or sets the line number component of XAML text line information that the exception reports.</summary>
    ///<returns>The line number component of the XAML text line information.</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>Gets or sets the line position component of XAML text line information that the exception reports.</summary>
    ///<returns>The line position component of XAML text line information.</returns>
    property LinePosition: Int32 read get_LinePosition;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXamlObjectReaderException = class(TDNGenericImport<DNXamlObjectReaderExceptionClass, DNXamlObjectReaderException>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlObjectWriterExceptionClass = interface(DNXamlExceptionClass)
  ['{7101B890-F60E-5B51-8EAD-B5962F87444B}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriterException" />
    ///  class with a system-supplied message that describes the error.</summary>
    {class} function init: DNXamlObjectWriterException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriterException" />
    ///  class with a specified message that describes the error.</summary>
    ///  <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    {class} function init(message: string): DNXamlObjectWriterException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriterException" />
    ///  class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
    ///  <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
    ///  <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" />
    ///  parameter is not <see langword="null" />
    ///  , the current exception is raised in a <see langword="catch" />
    ///  block that handles the inner exception. </param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXamlObjectWriterException; overload;

  end;

  ///<summary>The exception that is thrown when a XAML writer (such as the <see cref="T:System.Xaml.XamlObjectWriter" />
  ///  class) encounters an error while attempting to produce object graphs from a XAML node stream. </summary>
  [DNTypeName('System.Xaml.XamlObjectWriterException')]
  DNXamlObjectWriterException = interface(DNXamlException)
  ['{ECC04FF2-71DB-37DA-B773-6F79805C8960}']
  { getters & setters } 

    function get_Message: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    ///  and provides serialization support for the line information data.</summary>
    ///  <param name="info">The object that holds the serialized object data. </param>
    ///  <param name="context">The contextual information about the source or destination. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="info" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets the exception message, and if line information is available, appends the line information to the message.</summary>
    ///<returns>The exception message that includes the appended line information.</returns>
    property Message: string read get_Message;
    ///<summary>Gets or sets the line number component of XAML text line information that the exception reports.</summary>
    ///<returns>The line number component of the XAML text line information.</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>Gets or sets the line position component of XAML text line information that the exception reports.</summary>
    ///<returns>The line position component of XAML text line information.</returns>
    property LinePosition: Int32 read get_LinePosition;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXamlObjectWriterException = class(TDNGenericImport<DNXamlObjectWriterExceptionClass, DNXamlObjectWriterException>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlParseExceptionClass = interface(DNXamlExceptionClass)
  ['{CEC09144-A12E-5A74-B5C2-265506BFAF92}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlParseException" />
    ///  class with a system-supplied message that describes the error.</summary>
    {class} function init: DNXamlParseException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlParseException" />
    ///  class with a specified message that describes the error.</summary>
    ///  <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    {class} function init(message: string): DNXamlParseException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlParseException" />
    ///  class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
    ///  <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
    ///  <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" />
    ///  parameter is not <see langword="null" />
    ///  , the current exception is raised in a <see langword="catch" />
    ///  block that handles the inner exception. </param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXamlParseException; overload;

  end;

  ///<summary>The exception that is thrown when a XAML reader cannot process elements of the XAML reader source into a XAML node stream.</summary>
  [DNTypeName('System.Xaml.XamlParseException')]
  DNXamlParseException = interface(DNXamlException)
  ['{70F42D6A-02CD-3A1C-90B2-1DF8FE2E7418}']
  { getters & setters } 

    function get_Message: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    ///  and provides serialization support for the line information data.</summary>
    ///  <param name="info">The object that holds the serialized object data. </param>
    ///  <param name="context">The contextual information about the source or destination. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="info" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets the exception message, and if line information is available, appends the line information to the message.</summary>
    ///<returns>The exception message that includes the appended line information.</returns>
    property Message: string read get_Message;
    ///<summary>Gets or sets the line number component of XAML text line information that the exception reports.</summary>
    ///<returns>The line number component of the XAML text line information.</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>Gets or sets the line position component of XAML text line information that the exception reports.</summary>
    ///<returns>The line position component of XAML text line information.</returns>
    property LinePosition: Int32 read get_LinePosition;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXamlParseException = class(TDNGenericImport<DNXamlParseExceptionClass, DNXamlParseException>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlSchemaExceptionClass = interface(DNXamlExceptionClass)
  ['{0396F94A-BEED-5542-9CCA-9019701DD111}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaException" />
    ///  class with a system-supplied message that describes the error.</summary>
    {class} function init: DNXamlSchemaException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaException" />
    ///  class with a specified message that describes the error.</summary>
    ///  <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    {class} function init(message: string): DNXamlSchemaException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaException" />
    ///  class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
    ///  <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
    ///  <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" />
    ///  parameter is not <see langword="null" />
    ///  , the current exception is raised in a <see langword="catch" />
    ///  block that handles the inner exception. </param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXamlSchemaException; overload;

  end;

  ///<summary>The exception that is thrown when a binding system or another schema representation system for XAML reports an exception to the schema context.</summary>
  [DNTypeName('System.Xaml.XamlSchemaException')]
  DNXamlSchemaException = interface(DNXamlException)
  ['{41395F55-98B5-362E-8F21-065EB5035409}']
  { getters & setters } 

    function get_Message: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    ///  and provides serialization support for the line information data.</summary>
    ///  <param name="info">The object that holds the serialized object data. </param>
    ///  <param name="context">The contextual information about the source or destination. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="info" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets the exception message, and if line information is available, appends the line information to the message.</summary>
    ///<returns>The exception message that includes the appended line information.</returns>
    property Message: string read get_Message;
    ///<summary>Gets or sets the line number component of XAML text line information that the exception reports.</summary>
    ///<returns>The line number component of the XAML text line information.</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>Gets or sets the line position component of XAML text line information that the exception reports.</summary>
    ///<returns>The line position component of XAML text line information.</returns>
    property LinePosition: Int32 read get_LinePosition;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXamlSchemaException = class(TDNGenericImport<DNXamlSchemaExceptionClass, DNXamlSchemaException>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlXmlWriterExceptionClass = interface(DNXamlExceptionClass)
  ['{5B48CC7E-FB1E-5A11-9E1D-D51642C49B6B}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriterException" />
    ///  class with a system-supplied message that describes the error.</summary>
    {class} function init: DNXamlXmlWriterException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriterException" />
    ///  class with a specified message that describes the error.</summary>
    ///  <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    {class} function init(message: string): DNXamlXmlWriterException; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriterException" />
    ///  class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
    ///  <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
    ///  <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" />
    ///  parameter is not <see langword="null" />
    ///  , the current exception is raised in a <see langword="catch" />
    ///  block that handles the inner exception. </param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXamlXmlWriterException; overload;

  end;

  ///<summary>The exception that is thrown by certain <see cref="T:System.Xaml.XamlXmlWriter" />
  ///  APIs. </summary>
  [DNTypeName('System.Xaml.XamlXmlWriterException')]
  DNXamlXmlWriterException = interface(DNXamlException)
  ['{4066FB76-074D-3E7B-9D72-9DA6A091CBC5}']
  { getters & setters } 

    function get_Message: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
    ///  and provides serialization support for the line information data.</summary>
    ///  <param name="info">The object that holds the serialized object data. </param>
    ///  <param name="context">The contextual information about the source or destination. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="info" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets the exception message, and if line information is available, appends the line information to the message.</summary>
    ///<returns>The exception message that includes the appended line information.</returns>
    property Message: string read get_Message;
    ///<summary>Gets or sets the line number component of XAML text line information that the exception reports.</summary>
    ///<returns>The line number component of the XAML text line information.</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>Gets or sets the line position component of XAML text line information that the exception reports.</summary>
    ///<returns>The line position component of XAML text line information.</returns>
    property LinePosition: Int32 read get_LinePosition;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXamlXmlWriterException = class(TDNGenericImport<DNXamlXmlWriterExceptionClass, DNXamlXmlWriterException>) end;

  //-------------namespace: System.Xaml.Permissions----------------
  DNXamlLoadPermissionClass = interface(DDN.mscorlib.DNCodeAccessPermissionClass)
  ['{B8ECF0D4-BD7E-55C6-9AA5-0C71AE86E137}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  class, using existing permissions.</summary>
    ///  <param name="state">A <see cref="T:System.Security.Permissions.PermissionState" />
    ///  enumeration value.</param>
    {class} function init(state: DDN.mscorlib.DNPermissionState): DNXamlLoadPermission; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  class, using a single <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  value.</summary>
    ///  <param name="allowedAccess">The defining <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  value.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="allowedAccess" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(allowedAccess: DNXamlAccessLevel): DNXamlLoadPermission; overload;
    {class} function init(allowedAccess: DDN.mscorlib.DNIEnumerable<DNXamlAccessLevel>): DNXamlLoadPermission; overload;

  end;

  ///<summary>Declares permissions for loading types from assemblies that are used by a XAML reader or writer.</summary>
  [DNTypeName('System.Xaml.Permissions.XamlLoadPermission')]
  DNXamlLoadPermission = interface(DDN.mscorlib.DNCodeAccessPermission)
  ['{7EBD4F09-CC8C-3859-A997-4194F90BFDF8}']
  { getters & setters } 

    function get_AllowedAccess: DDN.mscorlib.DNIList<DNXamlAccessLevel>;

  { methods } 

    ///<summary>Determines whether the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  is a subset of the specified permission.</summary>
    ///  <param name="target">A permission that is to be tested for the subset relationship. Can be <see langword="null" />
    ///  .</param>
    ///<returns><see langword="true" />
    ///  if the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  is a subset of the specified permission; otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="target" />
    ///  is not <see langword="null" />
    ///  or is not a <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  .</exception>
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    ///<summary>Creates and returns an identical copy of the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  .</summary>
    ///<returns>A copy of the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  .</returns>
    function Copy: DDN.mscorlib.DNIPermission;
    ///<summary>Returns whether this <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  includes a specified <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  in its <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" />
    ///  list.</summary>
    ///  <param name="requestedAccess">The specific <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  to check for.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="requestedAccess" />
    ///  exists as an item in the <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" />
    ///  list of the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  . Otherwise, <see langword="false" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="requestedAccess" />
    ///  is null.</exception>
    function Includes(requestedAccess: DNXamlAccessLevel): Boolean;
    ///<summary>Returns whether this <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  denotes unrestricted permissions.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  denotes unrestricted permissions. <see langword="false" />
    ///  if this <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  has specific access level restrictions in <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" />
    ///  , or has no permissions. </returns>
    function IsUnrestricted: Boolean;
    ///<summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
    ///  <param name="elem">The XML encoding to use to reconstruct the security object. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="elem" />
    ///  is <see langword="null" />
    ///  . </exception><exception cref="T:System.ArgumentException"><paramref name="elem" />
    ///  does not contain the XML encoding for a <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  .-or- The version attribute within <paramref name="elem" />
    ///  is not supported. </exception>
    procedure FromXml(elem: DDN.mscorlib.DNSecurityElement);
    ///<summary>Creates and returns a <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  that is the intersection of the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  and the specified permission.</summary>
    ///  <param name="target">A <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  to intersect with the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  . Can be <see langword="null" />
    ///  .</param>
    ///<returns>A new permission that represents the intersection of the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  and the specified <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  . This new permission is <see langword="null" />
    ///  if the intersection is empty.</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="target" />
    ///  is not <see langword="null" />
    ///  or is not a <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  .</exception>
    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    ///<summary>Creates an XML encoding of this <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  and its current state.</summary>
    ///<returns>An XML encoding of this <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  , including any state information.</returns>
    function ToXml: DDN.mscorlib.DNSecurityElement;
    ///<summary>Creates a permission that is the union of the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  and the specified permission.</summary>
    ///  <param name="other">A <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  to combine with the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  . Can be <see langword="null" />
    ///  .</param>
    ///<returns>A new <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  that represents the union of the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  and the specified <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="other" />
    ///  is not <see langword="null" />
    ///  or is not a <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  .</exception>
    function Union(other: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the list of all <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  values that this <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />
    ///  represents.</summary>
    ///<returns>A read-only list of <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  values, or <see langword="null" />
    ///  . See Remarks.</returns>
    property AllowedAccess: DDN.mscorlib.DNIList<DNXamlAccessLevel> read get_AllowedAccess;
  end;

  TDNXamlLoadPermission = class(TDNGenericImport<DNXamlLoadPermissionClass, DNXamlLoadPermission>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNMarkupExtensionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{41E50566-121C-50B1-B772-AF07E7E8A0EF}']
  end;

  ///<summary>Provides a base class for XAML markup extension implementations that can be supported by .NET Framework XAML Services and other XAML readers and XAML writers.</summary>
  [DNTypeName('System.Windows.Markup.MarkupExtension')]
  DNMarkupExtension = interface(DDN.mscorlib.DNObject)
  ['{87E32420-AB32-3866-B242-57CCC12169C8}']
  { methods } 

    ///<summary>When implemented in a derived class, returns an object that is provided as the value of the target property for this markup extension. </summary>
    ///  <param name="serviceProvider">A service provider helper that can provide services for the markup extension.</param>
    ///<returns>The object value to set on the property where the extension is applied. </returns>
    function ProvideValue(serviceProvider: DDN.mscorlib.DNIServiceProvider): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMarkupExtension = class(TDNGenericImport<DNMarkupExtensionClass, DNMarkupExtension>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNArrayExtensionClass = interface(DNMarkupExtensionClass)
  ['{A3DF18EB-E3CE-5DA2-8A44-78CF8A0FA937}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ArrayExtension" />
    ///  class. This creates an empty array. </summary>
    {class} function init: DNArrayExtension; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ArrayExtension" />
    ///  class and initializes the type of the array. </summary>
    ///  <param name="arrayType">The object type of the new array.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="arrayType" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(arrayType: DDN.mscorlib.DNType): DNArrayExtension; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ArrayExtension" />
    ///  class based on the provided raw array.</summary>
    ///  <param name="elements">The array content that populates the created array.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="elements" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(elements: DDN.mscorlib.DNArray): DNArrayExtension; overload;

  end;

  ///<summary>Implements <see langword="x:Array" />
  ///  support for .NET Framework XAML Services</summary>
  [DNTypeName('System.Windows.Markup.ArrayExtension')]
  DNArrayExtension = interface(DNMarkupExtension)
  ['{CD64C2CA-8E94-341B-980A-DCD7FE37B778}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_Items: DDN.mscorlib.DNIList;

  { methods } 

    ///<summary>Returns an array that is sized to the number of objects supplied in the <see cref="P:System.Windows.Markup.ArrayExtension.Items" />
    ///  values. </summary>
    ///  <param name="serviceProvider">An object that can provide services for the markup extension.</param>
    ///<returns>The created array, or null.</returns>
    ///<exception cref="T:System.InvalidOperationException">Processed an array that did not provide a valid <see cref="P:System.Windows.Markup.ArrayExtension.Type" />
    ///  .-or-There is a type mismatch between the declared <see cref="P:System.Windows.Markup.ArrayExtension.Type" />
    ///  of the array and one or more of its <see cref="P:System.Windows.Markup.ArrayExtension.Items" />
    ///  values. </exception>
    function ProvideValue(serviceProvider: DDN.mscorlib.DNIServiceProvider): DDN.mscorlib.DNObject;
    ///<summary>Appends the supplied object to the end of the array. </summary>
    ///  <param name="value">The object to add to the end of the array.</param>
    procedure AddChild(value: DDN.mscorlib.DNObject);
    ///<summary>Adds a text node as a new array item.</summary>
    ///  <param name="text">The text to add to the end of the array.</param>
    procedure AddText(text: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the type of array to be created when calling <see cref="M:System.Windows.Markup.ArrayExtension.ProvideValue(System.IServiceProvider)" />
    ///  .</summary>
    ///<returns>The type of the array.</returns>
    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    ///<summary>Gets the contents of the array. Settable in XAML through XAML collection syntax.</summary>
    ///<returns>The array contents.</returns>
    property Items: DDN.mscorlib.DNIList read get_Items;
  end;

  TDNArrayExtension = class(TDNGenericImport<DNArrayExtensionClass, DNArrayExtension>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNNullExtensionClass = interface(DNMarkupExtensionClass)
  ['{569E0884-D3F5-5A9D-94F7-BCD04F4875C7}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.NullExtension" />
    ///  class. </summary>
    {class} function init: DNNullExtension;

  end;

  ///<summary>Implements a XAML markup extension in order to return a null object, which you can use to explicitly set values to null in XAML. </summary>
  [DNTypeName('System.Windows.Markup.NullExtension')]
  DNNullExtension = interface(DNMarkupExtension)
  ['{36662D3E-87E0-3749-BC08-61E0CBD94D75}']
  { methods } 

    ///<summary>Provides <see langword="null" />
    ///  to use as a value as the output of this markup extension. </summary>
    ///  <param name="serviceProvider">An object that can provide services for the markup extension implementation.</param>
    ///<returns>A null reference.</returns>
    function ProvideValue(serviceProvider: DDN.mscorlib.DNIServiceProvider): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNNullExtension = class(TDNGenericImport<DNNullExtensionClass, DNNullExtension>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNReferenceClass = interface(DNMarkupExtensionClass)
  ['{7C564FB1-C7EC-54F1-B074-A786F6C83190}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.Reference" />
    ///  class.</summary>
    {class} function init: DNReference; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.Reference" />
    ///  class with the <paramref name="name" />
    ///  argument.</summary>
    ///  <param name="name">The XAML name of the element to reference.</param>
    {class} function init(name: string): DNReference; overload;

  end;

  ///<summary>Implements the {x:Reference} markup extension.</summary>
  [DNTypeName('System.Windows.Markup.Reference')]
  DNReference = interface(DNMarkupExtension)
  ['{B005AD8E-55B4-35BA-834C-0B95219D617E}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);

  { methods } 

    ///<summary>Returns an object that is the value of the target property. For the <see cref="T:System.Windows.Markup.Reference" />
    ///  type, this is the object that the provided <see cref="P:System.Windows.Markup.Reference.Name" />
    ///  references.</summary>
    ///  <param name="serviceProvider">A class that implements the <see cref="T:System.Xaml.IXamlNameResolver" />
    ///  service.</param>
    ///<returns>The value of the target property. This is potentially any object that is type-mapped in the relevant backing assemblies.</returns>
    ///<exception cref="T:System.InvalidOperationException"><paramref name="serviceProvider" />
    ///  value does not implement the <see cref="T:System.Xaml.IXamlNameResolver" />
    ///  service.-or-
    ///<see cref="P:System.Windows.Markup.Reference.Name" />
    ///  value has not been set through construction or positional usage.</exception><exception cref="T:System.ArgumentNullException"><paramref name="serviceProvider" />
    ///  is <see langword="null" />
    ///  .</exception>
    function ProvideValue(serviceProvider: DDN.mscorlib.DNIServiceProvider): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the XAML name to obtain the reference for.</summary>
    ///<returns>The XAML name of the element to obtain the reference for.</returns>
    property Name: string read get_Name write set_Name;
  end;

  TDNReference = class(TDNGenericImport<DNReferenceClass, DNReference>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNStaticExtensionClass = interface(DNMarkupExtensionClass)
  ['{20206F51-6F9F-5D5D-AD73-FC3C9A02F6AD}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.StaticExtension" />
    ///  class.</summary>
    {class} function init: DNStaticExtension; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.StaticExtension" />
    ///  class using the provided <paramref name="member" />
    ///  string.</summary>
    ///  <param name="member">A string that identifies the member to make a reference to. This string uses the format prefix:typeName.fieldOrPropertyName.Â prefix is the mapping prefix for a XAML namespace, and is only required to reference static values that are not mapped to the default XAML namespace.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="member" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(member: string): DNStaticExtension; overload;

  end;

  ///<summary>Implements a markup extension that returns static field and property references. </summary>
  [DNTypeName('System.Windows.Markup.StaticExtension')]
  DNStaticExtension = interface(DNMarkupExtension)
  ['{96C5E7FD-819F-3E66-9313-B7E150A788E7}']
  { getters & setters } 

    function get_Member: string;
    procedure set_Member(value: string);
    function get_MemberType: DDN.mscorlib.DNType;
    procedure set_MemberType(value: DDN.mscorlib.DNType);

  { methods } 

    ///<summary>Returns an object value to set on the property where you apply this extension. For <see cref="T:System.Windows.Markup.StaticExtension" />
    ///  , the return value is the static value that is evaluated for the requested static member.</summary>
    ///  <param name="serviceProvider">An object that can provide services for the markup extension. The service provider is expected to provide a service that implements a type resolver (<see cref="T:System.Windows.Markup.IXamlTypeResolver" />
    ///  ).</param>
    ///<returns>The static value to set on the property where the extension is applied. </returns>
    ///<exception cref="T:System.InvalidOperationException">The <paramref name="member" />
    ///  value for the extension is <see langword="null" />
    ///  at the time of evaluation.</exception><exception cref="T:System.ArgumentException">Some part of the <paramref name="member" />
    ///  string did not parse properly-or-
    ///  <paramref name="serviceProvider" />
    ///  did not provide a service for <see cref="T:System.Windows.Markup.IXamlTypeResolver" />
    ///  -or-
    ///  <paramref name="member" />
    ///  value did not resolve to a static member.</exception><exception cref="T:System.ArgumentNullException"><paramref name="serviceProvider" />
    ///  is <see langword="null" />
    ///  .</exception>
    function ProvideValue(serviceProvider: DDN.mscorlib.DNIServiceProvider): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a member name string that is used to resolve a static field or property based on the service-provided type resolver.</summary>
    ///<returns>A string that identifies the member to make a reference to. See Remarks.</returns>
    ///<exception cref="T:System.ArgumentNullException">Attempted to set <see cref="P:System.Windows.Markup.StaticExtension.Member" />
    ///  to <see langword="null" />
    ///  .</exception>
    property Member: string read get_Member write set_Member;
    ///<summary>Gets or sets the <see cref="T:System.Type" />
    ///  that defines the static member to return.</summary>
    ///<returns>The <see cref="T:System.Type" />
    ///  that defines the static member to return.</returns>
    ///<exception cref="T:System.ArgumentNullException">Attempted to set <see cref="P:System.Windows.Markup.StaticExtension.MemberType" />
    ///  to <see langword="null" />
    ///  .</exception>
    property MemberType: DDN.mscorlib.DNType read get_MemberType write set_MemberType;
  end;

  TDNStaticExtension = class(TDNGenericImport<DNStaticExtensionClass, DNStaticExtension>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNTypeExtensionClass = interface(DNMarkupExtensionClass)
  ['{2A472BB4-DFF6-51BC-8BA9-ECF7650F0433}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.TypeExtension" />
    ///  class.</summary>
    {class} function init: DNTypeExtension; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.TypeExtension" />
    ///  class, initializing the <see cref="P:System.Windows.Markup.TypeExtension.TypeName" />
    ///  value based on the provided <paramref name="typeName" />
    ///  string.</summary>
    ///  <param name="typeName">A string that identifies the type to make a reference to. This string uses the format prefix:className.Â prefix is the mapping prefix for a XAML namespace, and is only required to reference types that are not mapped to the default XAML namespace.</param>
    ///<exception cref="T:System.ArgumentNullException">Attempted to specify <paramref name="typeName" />
    ///  as <see langword="null" />
    ///  .</exception>
    {class} function init(typeName: string): DNTypeExtension; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.TypeExtension" />
    ///  class, declaring the type directly.</summary>
    ///  <param name="type">The type to be represented by this <see cref="T:System.Windows.Markup.TypeExtension" />
    ///  .</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="type" />
    ///  is <see langword="null" />
    ///</exception>
    {class} function init(&type: DDN.mscorlib.DNType): DNTypeExtension; overload;

  end;

  ///<summary>Implements a markup extension that returns a <see cref="T:System.Type" />
  ///  based on a string input. </summary>
  [DNTypeName('System.Windows.Markup.TypeExtension')]
  DNTypeExtension = interface(DNMarkupExtension)
  ['{D751D40C-67BB-3869-BECC-7B006E7AD2B4}']
  { getters & setters } 

    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);

  { methods } 

    ///<summary>Returns an object that should be set on the property where this extension is applied. For <see cref="T:System.Windows.Markup.TypeExtension" />
    ///  , this is the <see cref="T:System.Type" />
    ///  value as evaluated for the requested type name.</summary>
    ///  <param name="serviceProvider">Object that can provide services for the markup extension. The provider is expected to provide a service for <see cref="T:System.Windows.Markup.IXamlTypeResolver" />
    ///  .</param>
    ///<returns>The <see cref="T:System.Type" />
    ///  to set on the property where the extension is applied. </returns>
    ///<exception cref="T:System.InvalidOperationException"><paramref name="member" />
    ///  value for the extension is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException">Some part of the <paramref name="typeName" />
    ///  string did not parse properly.-or-
    ///  <paramref name="serviceProvider" />
    ///  did not provide a service for <see cref="T:System.Windows.Markup.IXamlTypeResolver" />
    ///  -or-
    ///  <paramref name="typeName" />
    ///  value did not resolve to a type.</exception><exception cref="T:System.ArgumentNullException"><paramref name="serviceProvider" />
    ///  is <see langword="null" />
    ///</exception>
    function ProvideValue(serviceProvider: DDN.mscorlib.DNIServiceProvider): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the type name represented by this markup extension.</summary>
    ///<returns>A string that identifies the type. This string uses the format prefix:className.Â (prefix is the mapping prefix for an XML namespace, and is only required to reference types that are not mapped to the default XML namespace for WPF (http://schemas.microsoft.com/winfx/2006/xaml/presentation).</returns>
    ///<exception cref="T:System.ArgumentNullException">Attempted to set to <see langword="null" />
    ///  .</exception>
    property TypeName: string read get_TypeName write set_TypeName;
    ///<summary>Gets or sets the type information for this extension.</summary>
    ///<returns>The established type. For runtime purposes, this may be <see langword="null" />
    ///  for get access, but cannot be set to <see langword="null" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException">Attempted to set to <see langword="null" />
    ///  .</exception>
    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
  end;

  TDNTypeExtension = class(TDNGenericImport<DNTypeExtensionClass, DNTypeExtension>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNMemberDefinitionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FF9DFBC9-A517-5F83-B0A1-146A835CF5AF}']
  end;

  ///<summary>Provides the base class that is used for a markup technique of defining members of a class in declarative XAML.</summary>
  [DNTypeName('System.Windows.Markup.MemberDefinition')]
  DNMemberDefinition = interface(DDN.mscorlib.DNObject)
  ['{7AB296A1-8AC5-3DE5-9F79-7A0E49BEE80D}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>When implemented in a derived class, gets or sets the name of the member to define.</summary>
    ///<returns>The name of the member to define.</returns>
    property Name: string read get_Name write set_Name;
  end;

  TDNMemberDefinition = class(TDNGenericImport<DNMemberDefinitionClass, DNMemberDefinition>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNPropertyDefinitionClass = interface(DNMemberDefinitionClass)
  ['{BA119EA4-6097-52DE-B312-751E8257BF0C}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.PropertyDefinition" />
    ///  class. </summary>
    {class} function init: DNPropertyDefinition;

  end;

  ///<summary>Supports a markup technique of defining properties of a class in declarative XAML.</summary>
  [DNTypeName('System.Windows.Markup.PropertyDefinition')]
  DNPropertyDefinition = interface(DNMemberDefinition)
  ['{B27F4960-CF96-3228-9B22-D0E6DD3F115D}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: DNXamlType;
    procedure set_Type(value: DNXamlType);
    function get_Modifier: string;
    procedure set_Modifier(value: string);
    function get_Attributes: DDN.mscorlib.DNIList<DDN.mscorlib.DNAttribute>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the name of the property to define.</summary>
    ///<returns>The name of the property to define.</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>Gets or sets the <see cref="T:System.Xaml.XamlType" />
    ///  of the property to define.</summary>
    ///<returns>The XAML type identifier of the property to define.</returns>
    property &Type: DNXamlType read get_Type write set_Type;
    ///<summary>Gets or sets the access level of the defined property.</summary>
    ///<returns>The access level of the defined property, as a string.</returns>
    property Modifier: string read get_Modifier write set_Modifier;
    ///<summary>Gets a list of associated CLR attributes.</summary>
    ///<returns>A list of associated attributes.</returns>
    property Attributes: DDN.mscorlib.DNIList<DDN.mscorlib.DNAttribute> read get_Attributes;
  end;

  TDNPropertyDefinition = class(TDNGenericImport<DNPropertyDefinitionClass, DNPropertyDefinition>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNValueSerializerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{330A51B7-7BA3-53A5-B5D9-9464822AB01D}']
  { static methods } 

    ///<summary>Gets the <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  declared for the specified type.</summary>
    ///  <param name="type">The type to get the <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  for.</param>
    ///<returns>The serializer associated with the specified type. May return <see langword="null" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="type" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function GetSerializerFor(&type: DDN.mscorlib.DNType): DNValueSerializer; overload;
    ///<summary>Gets the <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  declared for a property, by passing a CLR property descriptor for the property.</summary>
    ///  <param name="descriptor">The CLR property descriptor for the property to be serialized.</param>
    ///<returns>The serializer associated with the specified property. May return <see langword="null" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="descriptor" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function GetSerializerFor(descriptor: DDN.System.DNPropertyDescriptor): DNValueSerializer; overload;
    ///<summary>Gets the <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  declared for the specified type, using the specified context.</summary>
    ///  <param name="type">The type to get the <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  for.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns>The serializer associated with the specified type.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="type" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function GetSerializerFor(&type: DDN.mscorlib.DNType; context: DNIValueSerializerContext): DNValueSerializer; overload;
    ///<summary>Gets the <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  declared for the specified property, using the specified context.</summary>
    ///  <param name="descriptor">Descriptor for the property to be serialized.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns>The serializer associated with the specified property.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="descriptor" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function GetSerializerFor(descriptor: DDN.System.DNPropertyDescriptor; context: DNIValueSerializerContext): DNValueSerializer; overload;

  end;

  ///<summary>Abstract class that defines conversion behavior for serialization from an object representation.</summary>
  [DNTypeName('System.Windows.Markup.ValueSerializer')]
  DNValueSerializer = interface(DDN.mscorlib.DNObject)
  ['{40FFD90D-F735-37EA-9FB9-A1908D07CE0E}']
  { methods } 

    ///<summary>When overridden in a derived class, determines whether the specified object can be converted into a <see cref="T:System.String" />
    ///  .</summary>
    ///  <param name="value">The object to evaluate for conversion.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns><see langword="true" />
    ///  if the <paramref name="value" />
    ///  can be converted into a <see cref="T:System.String" />
    ///  ; otherwise, <see langword="false." />
    ///</returns>
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DNIValueSerializerContext): Boolean;
    ///<summary>When overridden in a derived class, determines whether the specified <see cref="T:System.String" />
    ///  can be converted to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  supports.</summary>
    ///  <param name="value">The string to evaluate for conversion.</param>
    ///  <param name="context">Context information that is used for conversion. </param>
    ///<returns><see langword="true" />
    ///  if the value can be converted; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertFromString(value: string; context: DNIValueSerializerContext): Boolean;
    ///<summary>When overridden in a derived class, converts the specified object to a <see cref="T:System.String" />
    ///  .</summary>
    ///  <param name="value">The object to convert into a string.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns>A string representation of the specified object.</returns>
    ///<exception cref="T:System.NotSupportedException"><paramref name="value" />
    ///  cannot be converted.</exception>
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DNIValueSerializerContext): string;
    ///<summary>When overridden in a derived class, converts a <see cref="T:System.String" />
    ///  to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  supports.</summary>
    ///  <param name="value">The string to convert.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns>A new instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  supports based on the supplied <paramref name="value" />
    ///  .</returns>
    ///<exception cref="T:System.NotSupportedException"><paramref name="value" />
    ///  cannot be converted.</exception>
    function ConvertFromString(value: string; context: DNIValueSerializerContext): DDN.mscorlib.DNObject;
    ///<summary>Gets an enumeration of the types referenced by the <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  .</summary>
    ///  <param name="value">The value being serialized.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns>The types converted by this serializer.</returns>
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNValueSerializer = class(TDNGenericImport<DNValueSerializerClass, DNValueSerializer>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNDateTimeValueSerializerClass = interface(DNValueSerializerClass)
  ['{E0B8C472-9F2E-5806-8269-30AD87B375E6}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.DateTimeValueSerializer" />
    ///  class.</summary>
    {class} function init: DNDateTimeValueSerializer;

  end;

  ///<summary>Converts instances of <see cref="T:System.String" />
  ///  to and from instances of <see cref="T:System.DateTime" />
  ///  .</summary>
  [DNTypeName('System.Windows.Markup.DateTimeValueSerializer')]
  DNDateTimeValueSerializer = interface(DNValueSerializer)
  ['{C020EC74-6C4E-3F61-9DFB-DEACCF490A6E}']
  { methods } 

    ///<summary>Determines if the specified <see cref="T:System.String" />
    ///  can be convert to an instance of <see cref="T:System.DateTime" />
    ///  .</summary>
    ///  <param name="value">The string to evaluate for conversion.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns><see langword="true" />
    ///  if the value can be converted; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertFromString(value: string; context: DNIValueSerializerContext): Boolean;
    ///<summary>Determines if the specified object can be converted to a <see cref="T:System.String" />
    ///  .</summary>
    ///  <param name="value">The object to evaluate for conversion.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="value" />
    ///  can be converted into a <see cref="T:System.String" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DNIValueSerializerContext): Boolean;
    ///<summary>Converts a <see cref="T:System.String" />
    ///  into a <see cref="T:System.DateTime" />
    ///  .</summary>
    ///  <param name="value">The string to convert into a <see cref="T:System.DateTime" />
    ///  .</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns>A new instance of <see cref="T:System.DateTime" />
    ///  based on the supplied <paramref name="value" />
    ///  .</returns>
    ///<exception cref="T:System.NotSupportedException"><paramref name="value" />
    ///  is <see langword="null" />
    ///  .</exception>
    function ConvertFromString(value: string; context: DNIValueSerializerContext): DDN.mscorlib.DNObject;
    ///<summary>Converts an instance of <see cref="T:System.DateTime" />
    ///  to a <see cref="T:System.String" />
    ///  .</summary>
    ///  <param name="value">The object to convert into a string.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns>A string representation of the specified <see cref="T:System.DateTime" />
    ///  .</returns>
    ///<exception cref="T:System.NotSupportedException"><paramref name="value" />
    ///  is not a <see cref="T:System.DateTime" />
    ///  or is <see langword="null" />
    ///  .</exception>
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DNIValueSerializerContext): string;
    ///<summary>Gets an enumeration of the types referenced by the <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  .</summary>
    ///  <param name="value">The value being serialized.</param>
    ///  <param name="context">Context information that is used for conversion.</param>
    ///<returns>The types converted by this serializer.</returns>
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDateTimeValueSerializer = class(TDNGenericImport<DNDateTimeValueSerializerClass, DNDateTimeValueSerializer>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNXDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{772F29F6-525F-5E56-9AA4-D6CA843F953F}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XData" />
    ///  class. </summary>
    {class} function init: DNXData;

  end;

  ///<summary>Represents literal data that can appear as the value for a <see langword="Value" />
  ///  node.</summary>
  [DNTypeName('System.Windows.Markup.XData')]
  DNXData = interface(DDN.mscorlib.DNObject)
  ['{C679A72D-F214-3EF5-831E-5F2EE5DE7BEF}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_XmlReader: DDN.mscorlib.DNObject;
    procedure set_XmlReader(value: DDN.mscorlib.DNObject);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the literal value string that this <see cref="T:System.Windows.Markup.XData" />
    ///  wraps.</summary>
    ///<returns>The literal value string.</returns>
    property Text: string read get_Text write set_Text;
    ///<summary>Gets or sets a reader for the literal data.</summary>
    ///<returns>A reader for the literal data.</returns>
    property XmlReader: DDN.mscorlib.DNObject read get_XmlReader write set_XmlReader;
  end;

  TDNXData = class(TDNGenericImport<DNXDataClass, DNXData>) end;

  //-------------namespace: System.Xaml----------------
  DNAmbientPropertyValueClass = interface(DDN.mscorlib.DNObjectClass)
  ['{923BFB58-74AF-5465-AA91-CDCC77148FE7}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.AmbientPropertyValue" />
    ///  class.</summary>
    ///  <param name="property">The identifier that represents the ambient property.</param>
    ///  <param name="value">The value to report.</param>
    {class} function init(&property: DNXamlMember; value: DDN.mscorlib.DNObject): DNAmbientPropertyValue;

  end;

  ///<summary>Reports information about an ambient property, as part of an <see cref="T:System.Xaml.IAmbientProvider" />
  ///  implementation.</summary>
  [DNTypeName('System.Xaml.AmbientPropertyValue')]
  DNAmbientPropertyValue = interface(DDN.mscorlib.DNObject)
  ['{2A7FEEE4-C30F-3242-9908-6A0EA4457C75}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    function get_RetrievedProperty: DNXamlMember;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the value of the ambient property.</summary>
    ///<returns>The value of the ambient property.</returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
    ///<summary>Gets the XAML type system identifier (<see cref="T:System.Xaml.XamlMember" />
    ///  ) that represents the ambient property.</summary>
    ///<returns>The identifier that represents the ambient property.</returns>
    property RetrievedProperty: DNXamlMember read get_RetrievedProperty;
  end;

  TDNAmbientPropertyValue = class(TDNGenericImport<DNAmbientPropertyValueClass, DNAmbientPropertyValue>) end;

  //-------------namespace: System.Xaml----------------
  DNAttachableMemberIdentifierClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6DD5C379-7654-5280-8973-8A9FFCAD753C}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.AttachableMemberIdentifier" />
    ///  class.</summary>
    ///  <param name="declaringType">The <paramref name="declaringType" />
    ///  component of the identifier, which should match the name of the declaring <see cref="P:System.Xaml.XamlMember.Type" />
    ///  .</param>
    ///  <param name="memberName">The <paramref name="memberName" />
    ///  component of the identifier, which should match the <see cref="P:System.Xaml.XamlMember.Name" />
    ///  .</param>
    {class} function init(declaringType: DDN.mscorlib.DNType; memberName: string): DNAttachableMemberIdentifier;

  end;

  ///<summary>Provides a XAML type system identifier representation for attachable members. The identifier structure parallels the <paramref name="declaringType" />
  ///<see langword="." />
  ///  <paramref name="memberName" />
  ///  string form for attachable member usage.</summary>
  [DNTypeName('System.Xaml.AttachableMemberIdentifier')]
  DNAttachableMemberIdentifier = interface(DDN.mscorlib.DNObject)
  ['{C0DAF3A8-584E-3445-9766-0384339BFF45}']
  { getters & setters } 

    function get_MemberName: string;
    function get_DeclaringType: DDN.mscorlib.DNType;

  { methods } 

    ///<summary>Determines whether this instance of <see cref="T:System.Xaml.AttachableMemberIdentifier" />
    ///  and a specified object have the same value.</summary>
    ///  <param name="obj">The object to compare with the current <see cref="T:System.Xaml.AttachableMemberIdentifier" />
    ///  . </param>
    ///<returns><see langword="true" />
    ///  if <paramref name="obj" />
    ///  is an <see cref="T:System.Xaml.AttachableMemberIdentifier" />
    ///  and if its value is the same as this instance; otherwise, <see langword="false" />
    ///  . </returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>Determines whether this instance and another specified <see cref="T:System.Xaml.AttachableMemberIdentifier" />
    ///  object have the same value.</summary>
    ///  <param name="other">The <see cref="T:System.Xaml.AttachableMemberIdentifier" />
    ///  to compare with the current <see cref="T:System.Xaml.AttachableMemberIdentifier" />
    ///  . </param>
    ///<returns><see langword="true" />
    ///  if the objects have the same value; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(other: DNAttachableMemberIdentifier): Boolean; overload;
    ///<summary>Returns the hash code for this <see cref="T:System.Xaml.AttachableMemberIdentifier" />
    ///  . </summary>
    ///<returns>An integer hash code. </returns>
    function GetHashCode: Int32;
    ///<summary>Returns a <see cref="T:System.String" />
    ///  that represents the current <see cref="T:System.Xaml.AttachableMemberIdentifier" />
    ///  . </summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents the current <see cref="T:System.Xaml.AttachableMemberIdentifier" />
    ///  . </returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets or sets the <paramref name="memberName" />
    ///  component value of the <see cref="T:System.Xaml.AttachableMemberIdentifier" />
    ///  .</summary>
    ///<returns>The <paramref name="memberName" />
    ///  component value of the <see cref="T:System.Xaml.AttachableMemberIdentifier" />
    ///  .</returns>
    property MemberName: string read get_MemberName;
    ///<summary>Gets or sets the <paramref name="declaringType" />
    ///  component value of the <see cref="T:System.Xaml.AttachableMemberIdentifier" />
    ///  .</summary>
    ///<returns>The <paramref name="declaringType" />
    ///  component value of the <see cref="T:System.Xaml.AttachableMemberIdentifier" />
    ///  .</returns>
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
  end;

  TDNAttachableMemberIdentifier = class(TDNGenericImport<DNAttachableMemberIdentifierClass, DNAttachableMemberIdentifier>) end;

  //-------------namespace: System.Xaml----------------
  DNAttachablePropertyServicesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AE64A6CE-C4E8-5573-A219-B5C244A35C9F}']
  { static methods } 

    ///<summary>Sets a value for the specified attachable property in the specified store.</summary>
    ///  <param name="instance">A specific attachable property store that implements <see cref="T:System.Xaml.IAttachedPropertyStore" />
    ///  ; or any non-null object to use a static default attachable property store.</param>
    ///  <param name="name">The identifier of the attachable property entry for which to set a value.</param>
    ///  <param name="value">The value to set.</param>
    ///<exception cref="T:System.InvalidOperationException">A value could not be set in the store. </exception><exception cref="T:System.ArgumentNullException"><paramref name="name" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} procedure SetProperty(instance: DDN.mscorlib.DNObject; name: DNAttachableMemberIdentifier; value: DDN.mscorlib.DNObject);
    ///<summary>Returns the count of the attachable property entries that are in the specified store.</summary>
    ///  <param name="instance">A specific attachable property store that implements <see cref="T:System.Xaml.IAttachedPropertyStore" />
    ///  ; or any non-null object to access a static default attachable property store.</param>
    ///<returns>The integer count of entries in the store.</returns>
    {class} function GetAttachedPropertyCount(instance: DDN.mscorlib.DNObject): Int32;
    {class} procedure CopyPropertiesTo(instance: DDN.mscorlib.DNObject; &array: TArray<DDN.mscorlib.DNKeyValuePair<DNAttachableMemberIdentifier, DDN.mscorlib.DNObject>>; index: Int32);
    ///<summary>Removes the entry for the specified attachable property from the specified store.</summary>
    ///  <param name="instance">A specific attachable property store that implements <see cref="T:System.Xaml.IAttachedPropertyStore" />
    ///  ; or any non-null object to access a static default attachable property store.</param>
    ///  <param name="name">The identifier for the attachable property entry to remove from the store.</param>
    ///<returns><see langword="true" />
    ///  if an attachable property entry for <paramref name="name" />
    ///  was found in the store and removed from it; otherwise, <see langword="false" />
    ///  .</returns>
    {class} function RemoveProperty(instance: DDN.mscorlib.DNObject; name: DNAttachableMemberIdentifier): Boolean;
    {class} function TryGetProperty(instance: DDN.mscorlib.DNObject; name: DNAttachableMemberIdentifier; out value: DDN.mscorlib.DNObject): Boolean; overload;

  end;

  ///<summary>Provides static helper methods that obtain values and accessor method information from an attachable property and that work with an attached property store.</summary>
  [DNTypeName('System.Xaml.AttachablePropertyServices')]
  DNAttachablePropertyServices = interface(DDN.mscorlib.DNObject)
  ['{9C8581FE-F788-3F1E-9494-D0EC52237462}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAttachablePropertyServices = class(TDNGenericImport<DNAttachablePropertyServicesClass, DNAttachablePropertyServices>) end;

  //-------------namespace: System.Xaml----------------
  DNNamespaceDeclarationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{82442CBC-3F03-5CB1-8AE8-69DD8F660A18}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.NamespaceDeclaration" />
    ///  class using initial property values.</summary>
    ///  <param name="ns">The XAML namespace identifier, as a string. </param>
    ///  <param name="prefix">The string prefix that is used for the namespace in prefix mappings.</param>
    {class} function init(ns: string; prefix: string): DNNamespaceDeclaration;

  end;

  ///<summary>Declares the identifier and the prefix of a XAML namespace by storing these string values as separate properties.</summary>
  [DNTypeName('System.Xaml.NamespaceDeclaration')]
  DNNamespaceDeclaration = interface(DDN.mscorlib.DNObject)
  ['{9D436953-0ABA-3DF2-A4C6-A07578CE137D}']
  { getters & setters } 

    function get_Prefix: string;
    function get_Namespace: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the prefix that is used as the XAML namespace mapping prefix for a <see cref="T:System.Xaml.NamespaceDeclaration" />
    ///  .</summary>
    ///<returns>The prefix string for this <see cref="T:System.Xaml.NamespaceDeclaration" />
    ///  .</returns>
    property Prefix: string read get_Prefix;
    ///<summary>Gets the identifier component of a <see cref="T:System.Xaml.NamespaceDeclaration" />
    ///  .</summary>
    ///<returns>The identifier of the XAML namespace declaration.</returns>
    property Namespace: string read get_Namespace;
  end;

  TDNNamespaceDeclaration = class(TDNGenericImport<DNNamespaceDeclarationClass, DNNamespaceDeclaration>) end;

  //-------------namespace: System.Xaml.Permissions----------------
  DNXamlAccessLevelClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3DC4B356-3D0A-5828-807A-1EDB1A1036F9}']
  { static methods } 

    ///<summary>Returns a <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  instance based on an assembly requested by <see cref="T:System.Reflection.Assembly" />
    ///  .</summary>
    ///  <param name="assembly">The assembly for the request.</param>
    ///<returns>A <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  instance, with the <paramref name="assembly" />
    ///  value used as source information for <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" />
    ///  . </returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="assembly" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function AssemblyAccessTo(assembly: DDN.mscorlib.DNAssembly): DNXamlAccessLevel; overload;
    ///<summary>Returns a <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  instance based on a specific type specified by <see cref="T:System.Type" />
    ///  .</summary>
    ///  <param name="type">The <see cref="T:System.Type" />
    ///  to request access for.</param>
    ///<returns>A <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  instance, with the <paramref name="type" />
    ///  value used as source information for <see cref="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName" />
    ///  and <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" />
    ///  determined by reflection on the type. </returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="type" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function PrivateAccessTo(&type: DDN.mscorlib.DNType): DNXamlAccessLevel; overload;
    ///<summary>Returns a <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  instance based on an assembly requested by <see cref="T:System.Reflection.AssemblyName" />
    ///  .</summary>
    ///  <param name="assemblyName">The assembly name for the request.</param>
    ///<returns>A <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  instance, with the <paramref name="assemblyName" />
    ///  value used as source information for <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" />
    ///  . </returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="assemblyName" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="assemblyName" />
    ///  is not a valid fully qualified assembly name.</exception>
    {class} function AssemblyAccessTo(assemblyName: DDN.mscorlib.DNAssemblyName): DNXamlAccessLevel; overload;
    ///<summary>Returns a <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  instance based on a specific type specified by its qualified name.</summary>
    ///  <param name="assemblyQualifiedTypeName">A string that is parsed as an assembly-qualified type name.</param>
    ///<returns>A <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  instance, with the <paramref name="assemblyQualifiedTypeName" />
    ///  value used as source information for <see cref="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName" />
    ///  and <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" />
    ///  determined by reflection on the type. </returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="assemblyQualifiedTypeName" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="assemblyQualifiedTypeName" />
    ///  is not a valid assembly-qualified type name.-or-Assembly name within <paramref name="assemblyQualifiedTypeName" />
    ///  is not a valid assembly name.</exception>
    {class} function PrivateAccessTo(assemblyQualifiedTypeName: string): DNXamlAccessLevel; overload;

  end;

  ///<summary>Defines access control to assemblies and types for purposes of XAML loading.</summary>
  [DNTypeName('System.Xaml.Permissions.XamlAccessLevel')]
  DNXamlAccessLevel = interface(DDN.mscorlib.DNObject)
  ['{D1B913BC-E645-3A72-8357-B2A35F3173F2}']
  { getters & setters } 

    function get_AssemblyAccessToAssemblyName: DDN.mscorlib.DNAssemblyName;
    function get_PrivateAccessToTypeName: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Reflection.AssemblyName" />
    ///  of the assembly for which this <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  determines permissions.</summary>
    ///<returns>The <see cref="T:System.Reflection.AssemblyName" />
    ///  of the assembly for which this <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  determines permissions.</returns>
    property AssemblyAccessToAssemblyName: DDN.mscorlib.DNAssemblyName read get_AssemblyAccessToAssemblyName;
    ///<summary>Gets the unqualified string name of the type for which this <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  determines permissions.</summary>
    ///<returns>The unqualified string name of the type for which this <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  determines permissions.</returns>
    property PrivateAccessToTypeName: string read get_PrivateAccessToTypeName;
  end;

  TDNXamlAccessLevel = class(TDNGenericImport<DNXamlAccessLevelClass, DNXamlAccessLevel>) end;

  //-------------namespace: System.Xaml.Schema----------------
  DNXamlMemberInvokerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{08AD460A-FE67-512E-97AE-3D002D09A43F}']
  { static getter & setter } 

    {class} function get_UnknownInvoker: DNXamlMemberInvoker;

  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  class, based on a provided <see cref="T:System.Xaml.XamlMember" />
    ///  .</summary>
    ///  <param name="member">The <see cref="T:System.Xaml.XamlMember" />
    ///  value for the specific XAML member relevant to this <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  .</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="member" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(member: DNXamlMember): DNXamlMemberInvoker;

  { static propertys } 

    ///<summary>Provides a static value that represents an unknown, not fully implemented <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  .</summary>
    ///<returns>A static value that represents an unknown, not fully implemented <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  .</returns>
    {class} property UnknownInvoker: DNXamlMemberInvoker read get_UnknownInvoker;
  end;

  ///<summary>Provides an extension point that can access member characteristics of a XAML member through techniques other than reflection.</summary>
  [DNTypeName('System.Xaml.Schema.XamlMemberInvoker')]
  DNXamlMemberInvoker = interface(DDN.mscorlib.DNObject)
  ['{83F3DA3B-7461-3EFB-91FE-3A53749175A9}']
  { getters & setters } 

    function get_UnderlyingGetter: DDN.mscorlib.DNMethodInfo;
    function get_UnderlyingSetter: DDN.mscorlib.DNMethodInfo;

  { methods } 

    ///<summary>Gets a value of the relevant property from an instance.</summary>
    ///  <param name="instance">An instance of the owner type for the member.</param>
    ///<returns>The requested property value.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="instance" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.NotSupportedException">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  that is based on an unknown <see cref="T:System.Xaml.XamlMember" />
    ///  .
    ///  -or-
    ///  Invoked this method on a write-only member.
    ///  -or-
    ///<see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" />
    ///  is <see langword="null" />
    ///  .</exception>
    function GetValue(instance: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    ///<summary>Sets a value of the relevant property on an instance.</summary>
    ///  <param name="instance">An instance of the owner type for the member.</param>
    ///  <param name="value">The property value to set.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="instance" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.NotSupportedException">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  that is based on an unknown <see cref="T:System.Xaml.XamlMember" />
    ///  .
    ///  -or-
    ///  Invoked this method on a read-only member.
    ///  -or-
    ///<see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure SetValue(instance: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);
    ///<summary>Indicates whether the value needs to be persisted by serialization processes.</summary>
    ///  <param name="instance">The instance with the property to be examined for persistence.</param>
    ///<returns>A value of the enumeration.</returns>
    function ShouldSerializeValue(instance: DDN.mscorlib.DNObject): DNShouldSerializeResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Reflection.MethodInfo" />
    ///  for the CLR method that gets values for the property that is relevant for this <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Reflection.MethodInfo" />
    ///  for the CLR method that gets values for the property that is relevant for this <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  , or <see langword="null" />
    ///  .</returns>
    property UnderlyingGetter: DDN.mscorlib.DNMethodInfo read get_UnderlyingGetter;
    ///<summary>Gets the <see cref="T:System.Reflection.MethodInfo" />
    ///  for the CLR method that sets values for the property that is relevant for this <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Reflection.MethodInfo" />
    ///  for the CLR method that sets values for the property that is relevant for this <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  , or <see langword="null" />
    ///  .</returns>
    property UnderlyingSetter: DDN.mscorlib.DNMethodInfo read get_UnderlyingSetter;
  end;

  TDNXamlMemberInvoker = class(TDNGenericImport<DNXamlMemberInvokerClass, DNXamlMemberInvoker>) end;

  //-------------namespace: System.Xaml.Schema----------------
  DNXamlTypeInvokerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0E2E0EE1-43FF-5DB4-ACDC-519485EDB4D4}']
  { static getter & setter } 

    {class} function get_UnknownInvoker: DNXamlTypeInvoker;

  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  class, based on a provided <see cref="T:System.Xaml.XamlType" />
    ///  .</summary>
    ///  <param name="type">The <see cref="T:System.Xaml.XamlType" />
    ///  value for the specific XAML type relevant to this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  .</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="type" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(&type: DNXamlType): DNXamlTypeInvoker;

  { static propertys } 

    ///<summary>Provides a static value that represents an unknown, not fully implemented <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  .</summary>
    ///<returns>A static value that represents an unknown, not fully implemented <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  .</returns>
    {class} property UnknownInvoker: DNXamlTypeInvoker read get_UnknownInvoker;
  end;

  ///<summary>Provides an extension point that can construct instances of a XAML type through techniques other than reflection and constructors.</summary>
  [DNTypeName('System.Xaml.Schema.XamlTypeInvoker')]
  DNXamlTypeInvoker = interface(DDN.mscorlib.DNObject)
  ['{82598C63-EA8E-33B2-8EF2-9769CDCAC20D}']
  { getters & setters } 

    function get_SetMarkupExtensionHandler: DDN.mscorlib.DNEventHandler<DNXamlSetMarkupExtensionEventArgs>;
    function get_SetTypeConverterHandler: DDN.mscorlib.DNEventHandler<DNXamlSetTypeConverterEventArgs>;

  { methods } 

    ///<summary>Adds the provided item to an instance of the type that is relevant to this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  . </summary>
    ///  <param name="instance">An instance of the type specified by the <see cref="T:System.Xaml.XamlType" />
    ///  used for constructing this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  .</param>
    ///  <param name="item">The item to add.</param>
    ///<exception cref="T:System.NotSupportedException">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  that is based on an unknown <see cref="T:System.Xaml.XamlType" />
    ///  .
    ///  -or-
    ///  Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  where the relevant type is not a collection.</exception><exception cref="T:System.ArgumentNullException"><paramref name="instance" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.Xaml.XamlSchemaException"><see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />
    ///  for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  returns <see langword="null" />
    ///  .</exception>
    procedure AddToCollection(instance: DDN.mscorlib.DNObject; item: DDN.mscorlib.DNObject);
    ///<summary>Adds the provided key and item value to an instance of the type that is relevant to this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  . </summary>
    ///  <param name="instance">An instance of the type specified by the <see cref="T:System.Xaml.XamlType" />
    ///  used for constructing this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  .</param>
    ///  <param name="key">Dictionary key for the item to add.</param>
    ///  <param name="item">The item value to add.</param>
    ///<exception cref="T:System.NotSupportedException">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  that is based on an unknown <see cref="T:System.Xaml.XamlType" />
    ///  .
    ///  -or-
    ///  Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  where the relevant type is not a dictionary.</exception><exception cref="T:System.ArgumentNullException"><paramref name="instance" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.Xaml.XamlSchemaException"><see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />
    ///  for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  returns <see langword="null" />
    ///  .</exception>
    procedure AddToDictionary(instance: DDN.mscorlib.DNObject; key: DDN.mscorlib.DNObject; item: DDN.mscorlib.DNObject);
    ///<summary>Creates an object instance based on the construction-initiated <see cref="T:System.Xaml.XamlType" />
    ///  for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  .</summary>
    ///  <param name="arguments">An array of objects that supply the <see langword="x:ConstructorArgs" />
    ///  for the instance. May be <see langword="null" />
    ///  for types that do not require or use <see langword="x:ConstructorArgs" />
    ///  .</param>
    ///<returns>The created instance based on the construction-initiated <see cref="T:System.Xaml.XamlType" />
    ///  for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  .</returns>
    ///<exception cref="T:System.MissingMethodException">Could not resolve a constructor.</exception>
    function CreateInstance(arguments: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    ///<summary>Returns an object representing a method that can enumerate over items.</summary>
    ///<returns><see cref="T:System.Reflection.MethodInfo" />
    ///  for an enumerator method, or <see langword="null" />
    ///  .</returns>
    function GetEnumeratorMethod: DDN.mscorlib.DNMethodInfo;
    ///<summary>Returns an <see cref="T:System.Collections.IEnumerator" />
    ///  object representing the set of items.</summary>
    ///  <param name="instance">An instance of the type specified by the <see cref="T:System.Xaml.XamlType" />
    ///  used for constructing this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  .</param>
    ///<returns>An <see cref="T:System.Collections.IEnumerator" />
    ///  object, or <see langword="null" />
    ///  .</returns>
    ///<exception cref="T:System.NotSupportedException">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  that is based on an unknown <see cref="T:System.Xaml.XamlType" />
    ///  .
    ///  -or-
    ///  Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  where the relevant type is not a collection or dictionary.</exception><exception cref="T:System.ArgumentNullException"><paramref name="instance" />
    ///  is <see langword="null" />
    ///  .</exception>
    function GetItems(instance: DDN.mscorlib.DNObject): DDN.mscorlib.DNIEnumerator;
    ///<summary>Returns the relevant <see langword="Add" />
    ///  method for a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  that is relevant to a collection or dictionary. </summary>
    ///  <param name="contentType"><see cref="T:System.Xaml.XamlType" />
    ///  for the item type that is used by the <see langword="Add" />
    ///  method.</param>
    ///<returns>CLRÂ <see cref="T:System.Reflection.MethodInfo" />
    ///  information for the <see langword="Add" />
    ///  method, or null.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="contentType" />
    ///  is <see langword="null" />
    ///  .</exception>
    function GetAddMethod(contentType: DNXamlType): DDN.mscorlib.DNMethodInfo;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the handler to use when a <see cref="T:System.Xaml.XamlObjectWriter" />
    ///  calls into an implemented <see cref="T:System.Windows.Markup.MarkupExtension" />
    ///  .</summary>
    ///<returns>A handler implementation that handles this case.</returns>
    property SetMarkupExtensionHandler: DDN.mscorlib.DNEventHandler<DNXamlSetMarkupExtensionEventArgs> read get_SetMarkupExtensionHandler;
    ///<summary>Gets the handler to use when a <see cref="T:System.Xaml.XamlObjectWriter" />
    ///  calls into a CLR-implemented <see cref="T:System.ComponentModel.TypeConverter" />
    ///  .</summary>
    ///<returns>A handler implementation that handles this case.</returns>
    property SetTypeConverterHandler: DDN.mscorlib.DNEventHandler<DNXamlSetTypeConverterEventArgs> read get_SetTypeConverterHandler;
  end;

  TDNXamlTypeInvoker = class(TDNGenericImport<DNXamlTypeInvokerClass, DNXamlTypeInvoker>) end;

  //-------------namespace: System.Xaml.Schema----------------
  DNXamlTypeNameClass = interface(DDN.mscorlib.DNObjectClass)
  ['{426D86FB-D101-54F1-BAF8-BBCC8D8BD4EB}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  class.</summary>
    {class} function init: DNXamlTypeName; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  class, based on name and namespace strings.</summary>
    ///  <param name="xamlNamespace">The XAML namespace that contains name.</param>
    ///  <param name="name">The name of the type to create a <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  for.</param>
    {class} function init(xamlNamespace: string; name: string): DNXamlTypeName; overload;
    {class} function init(xamlNamespace: string; name: string; typeArguments: DDN.mscorlib.DNIEnumerable<DNXamlTypeName>): DNXamlTypeName; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  class, based on an existing <see cref="T:System.Xaml.XamlType" />
    ///  .</summary>
    ///  <param name="xamlType">An existing <see cref="T:System.Xaml.XamlType" />
    ///  .</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xamlType" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(xamlType: DNXamlType): DNXamlTypeName; overload;

  { static methods } 

    ///<summary>Provides a <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  value based on a type name and an object that can resolve a markup prefix into a namespace.</summary>
    ///  <param name="typeName">The type name to create a <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  value for.</param>
    ///  <param name="namespaceResolver">An object or service provider that implements <see cref="T:System.Xaml.IXamlNamespaceResolver" />
    ///  .</param>
    ///<returns>The created <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="typeName" />
    ///  or <paramref name="namespaceResolver" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.FormatException">String cannot be parsed.</exception>
    {class} function Parse(typeName: string; namespaceResolver: DNIXamlNamespaceResolver): DNXamlTypeName;
    {class} function TryParse(typeName: string; namespaceResolver: DNIXamlNamespaceResolver; out result: DNXamlTypeName): Boolean;
    {class} function ToString(typeNameList: DDN.mscorlib.DNIList<DNXamlTypeName>; prefixLookup: DNINamespacePrefixLookup): string; overload;
    ///<summary>Provides a <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  value based on a string that can specify multiple type names, and an object that can resolve a markup prefix into a namespace.</summary>
    ///  <param name="typeNameList">A string that contains multiple types. See Remarks. </param>
    ///  <param name="namespaceResolver">An object or service provider that implements <see cref="T:System.Xaml.IXamlNamespaceResolver" />
    ///  .</param>
    ///<returns>The created <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="typeNameList" />
    ///  or <paramref name="namespaceResolver" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.FormatException">String cannot be parsed.</exception>
    {class} function ParseList(typeNameList: string; namespaceResolver: DNIXamlNamespaceResolver): DDN.mscorlib.DNIList<DNXamlTypeName>;
    {class} function TryParseList(typeNameList: string; namespaceResolver: DNIXamlNamespaceResolver; out result: DDN.mscorlib.DNIList<DNXamlTypeName>): Boolean;

  end;

  ///<summary>Provides a means to specify a XAML type in terms of name and namespace.</summary>
  [DNTypeName('System.Xaml.Schema.XamlTypeName')]
  DNXamlTypeName = interface(DDN.mscorlib.DNObject)
  ['{E74FA3C9-0215-3DC4-AB6B-7A5512A1E625}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_TypeArguments: DDN.mscorlib.DNIList<DNXamlTypeName>;

  { methods } 

    ///<summary>Converts the value of this <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  to its equivalent string representation.</summary>
    ///<returns>The equivalent string representation of this <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  .</returns>
    function ToString: string; overload;
    ///<summary>Converts the value of this <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  to its equivalent string representation, which can be used in markup syntax for an object element usage of a type.</summary>
    ///  <param name="prefixLookup">A service reference for prefix lookup.</param>
    ///<returns>A prefixed usage string.</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" />
    ///  for this <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  is <see langword="null" />
    ///  .-or-
    ///<see cref="P:System.Xaml.Schema.XamlTypeName.Name" />
    ///  is not valid.-or-Could not look up the prefix.</exception>
    function ToString(prefixLookup: DNINamespacePrefixLookup): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the name used to construct this <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  .</summary>
    ///<returns>The name of the type.</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>Gets the XAML namespace identifier used to construct this <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  .</summary>
    ///<returns>The XAML namespace identifier.</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>Gets the type arguments used to construct this <see cref="T:System.Xaml.Schema.XamlTypeName" />
    ///  .</summary>
    ///<returns>The type arguments, if any. May be null.</returns>
    property TypeArguments: DDN.mscorlib.DNIList<DNXamlTypeName> read get_TypeArguments;
  end;

  TDNXamlTypeName = class(TDNGenericImport<DNXamlTypeNameClass, DNXamlTypeName>) end;

  //-------------namespace: System.Xaml.Schema----------------
  DNXamlValueConverterClass<TConverterBase> = interface(DNObjectClass)
  ['{C7EE263E-1813-5862-9C55-06D5C8C13F0D}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  class, based on a converter implementing <see cref="T:System.Type" />
    ///  and the target/destination type of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  .</summary>
    ///  <param name="converterType">The <see cref="T:System.Type" />
    ///  that implements the converter behavior.</param>
    ///  <param name="targetType">The target/destination <see cref="T:System.Xaml.XamlType" />
    ///  of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  .</param>
    {class} function init(converterType: DDN.mscorlib.DNType; targetType: DNXamlType): DNXamlValueConverter<TConverterBase>; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  class, based on a converter implementing <see cref="T:System.Type" />
    ///  the target/destination type of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  , and a string name.</summary>
    ///  <param name="converterType">The <see cref="T:System.Type" />
    ///  that implements the converter behavior.</param>
    ///  <param name="targetType">The target/destination <see cref="T:System.Xaml.XamlType" />
    ///  of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  .</param>
    ///  <param name="name">The string name.</param>
    ///<exception cref="T:System.ArgumentException">All three parameters are <see langword="null" />
    ///  (at least one is required to be non-null).</exception>
    {class} function init(converterType: DDN.mscorlib.DNType; targetType: DNXamlType; name: string): DNXamlValueConverter<TConverterBase>; overload;

  end;

  ///<summary>Provides a common API surface for techniques that generate initialization or serialization values for XAML based on input other than the eventual destination type. This includes markup extensions and type converters.</summary>
  ///<typeparam name="TConverterBase">The CLR base class for the particular converter that this <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
  ///  represents. Typically this is one of the following: <see cref="T:System.ComponentModel.TypeConverter" />
  ///  ; <see cref="T:System.Windows.Markup.MarkupExtension" />
  ///  ; <see cref="T:System.Windows.Markup.ValueSerializer" />
  ///  ; </typeparam>
  [DNTypeName('System.Xaml.Schema.XamlValueConverter`1')]
  DNXamlValueConverter<TConverterBase> = interface(DNObject)
  ['{CAE37EAC-CD32-36FA-95B8-01E04F36E442}']
  { getters & setters } 

    function get_Name: string;
    function get_ConverterType: DDN.mscorlib.DNType;
    function get_TargetType: DNXamlType;
    function get_ConverterInstance: TConverterBase;

  { methods } 

    ///<summary>Returns a <see cref="T:System.String" />
    ///  that represents this <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  . </summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents this <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  . </returns>
    function ToString: string;
    ///<summary>Determines whether this instance of <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  and a specified object, which must also be a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  object, have the same value.</summary>
    ///  <param name="obj">The object to compare.</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="obj" />
    ///  is a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  and its value is the same as this instance; otherwise, <see langword="false" />
    ///  . </returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>Returns the hash code for this <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  . </summary>
    ///<returns>An integer hash code. </returns>
    function GetHashCode: Int32;
    function Equals(other: DNXamlValueConverter<TConverterBase>): Boolean; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets a string name for this <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  .</summary>
    ///<returns>A string name for this <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  .</returns>
    property Name: string read get_Name;
    ///<summary>Gets the <see cref="T:System.Type" />
    ///  for the class that implements the converter behavior.</summary>
    ///<returns>The <see cref="T:System.Type" />
    ///  for the class that implements the converter behavior.</returns>
    property ConverterType: DDN.mscorlib.DNType read get_ConverterType;
    ///<summary>Gets the target/destination <see cref="T:System.Xaml.XamlType" />
    ///  of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  .</summary>
    ///<returns>The target/destination <see cref="T:System.Xaml.XamlType" />
    ///  of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  .</returns>
    property TargetType: DNXamlType read get_TargetType;
    ///<summary>Gets a created instance of the converter implementation.</summary>
    ///<returns>A created instance of the converter implementation, or <see langword="null" />
    ///  .</returns>
    property ConverterInstance: TConverterBase read get_ConverterInstance;
  end;

  TDNXamlValueConverter<TConverterBase> = class(TDNGenericImport<DNXamlValueConverterClass<TConverterBase>, DNXamlValueConverter<TConverterBase>>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlDeferringLoaderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0572E41E-649A-56BF-AAAE-3BB70C54BBAB}']
  end;

  ///<summary>Represents a XAML reader behavior that loads and returns deferred content.</summary>
  [DNTypeName('System.Xaml.XamlDeferringLoader')]
  DNXamlDeferringLoader = interface(DDN.mscorlib.DNObject)
  ['{E9306312-9761-3EAB-902B-5EB6D1E041BC}']
  { methods } 

    ///<summary>Loads XAML content in a deferred mode, which is based on a <see cref="T:System.Xaml.XamlReader" />
    ///  and certain required services from a service provider.</summary>
    ///  <param name="xamlReader">The initiating reader that is returned on calls to <see cref="M:System.Xaml.XamlDeferringLoader.Save(System.Object,System.IServiceProvider)" />
    ///  .</param>
    ///  <param name="serviceProvider">The service provider for the required services.</param>
    ///<returns>The root object that is produced by the input <see cref="T:System.Xaml.XamlReader" />
    ///  .</returns>
    function Load(xamlReader: DNXamlReader; serviceProvider: DDN.mscorlib.DNIServiceProvider): DDN.mscorlib.DNObject;
    ///<summary>Commits a value for deferred loading.</summary>
    ///  <param name="value">The input value to commit for deferred loading.</param>
    ///  <param name="serviceProvider">The service provider for the required services.</param>
    ///<returns>A XAML reader that can be used to obtain the deferred value as XAML node information.</returns>
    function Save(value: DDN.mscorlib.DNObject; serviceProvider: DDN.mscorlib.DNIServiceProvider): DNXamlReader;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXamlDeferringLoader = class(TDNGenericImport<DNXamlDeferringLoaderClass, DNXamlDeferringLoader>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlLanguageClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4AE3AE3E-29B5-55E4-8837-DAF95F24117D}']
  { static getter & setter } 

    {class} function get_XamlNamespaces: DDN.mscorlib.DNIList<string>;
    {class} function get_XmlNamespaces: DDN.mscorlib.DNIList<string>;
    {class} function get_Array: DNXamlType;
    {class} function get_Member: DNXamlType;
    {class} function get_Null: DNXamlType;
    {class} function get_Property: DNXamlType;
    {class} function get_Reference: DNXamlType;
    {class} function get_Static: DNXamlType;
    {class} function get_Type: DNXamlType;
    {class} function get_String: DNXamlType;
    {class} function get_Double: DNXamlType;
    {class} function get_Int32: DNXamlType;
    {class} function get_Boolean: DNXamlType;
    {class} function get_XData: DNXamlType;
    {class} function get_Object: DNXamlType;
    {class} function get_Char: DNXamlType;
    {class} function get_Single: DNXamlType;
    {class} function get_Byte: DNXamlType;
    {class} function get_Int16: DNXamlType;
    {class} function get_Int64: DNXamlType;
    {class} function get_Decimal: DNXamlType;
    {class} function get_Uri: DNXamlType;
    {class} function get_TimeSpan: DNXamlType;
    {class} function get_AllTypes: DDN.mscorlib.DNReadOnlyCollection<DNXamlType>;
    {class} function get_Arguments: DNXamlDirective;
    {class} function get_AsyncRecords: DNXamlDirective;
    {class} function get_Class: DNXamlDirective;
    {class} function get_ClassModifier: DNXamlDirective;
    {class} function get_Code: DNXamlDirective;
    {class} function get_ConnectionId: DNXamlDirective;
    {class} function get_FactoryMethod: DNXamlDirective;
    {class} function get_FieldModifier: DNXamlDirective;
    {class} function get_Items: DNXamlDirective;
    {class} function get_Initialization: DNXamlDirective;
    {class} function get_Key: DNXamlDirective;
    {class} function get_Members: DNXamlDirective;
    {class} function get_ClassAttributes: DNXamlDirective;
    {class} function get_Name: DNXamlDirective;
    {class} function get_PositionalParameters: DNXamlDirective;
    {class} function get_Shared: DNXamlDirective;
    {class} function get_Subclass: DNXamlDirective;
    {class} function get_SynchronousMode: DNXamlDirective;
    {class} function get_TypeArguments: DNXamlDirective;
    {class} function get_Uid: DNXamlDirective;
    {class} function get_UnknownContent: DNXamlDirective;
    {class} function get_Base: DNXamlDirective;
    {class} function get_Lang: DNXamlDirective;
    {class} function get_Space: DNXamlDirective;
    {class} function get_AllDirectives: DDN.mscorlib.DNReadOnlyCollection<DNXamlDirective>;

  { static fields getter & setter } 

   function __fakeFieldGet_Xaml2006Namespace: string;
   function __fakeFieldGet_Xml1998Namespace: string;

  { static fields } 

    ///<summary>Gets a string value for the string that identifies the XAML (2006) language namespace. That namespace corresponds to the XAML (2006) "x" prefixed namespace as defined in [MS-XAML] Section 5.1.1.</summary>
    {class} property Xaml2006Namespace: string read __fakeFieldGet_Xaml2006Namespace;
    ///<summary>Gets a string value for the string that identifies the XML (1998) language namespace. That namespace corresponds to the XML "xml" prefixed namespace as referenced in [MS-XAML] Section 5.1.2.</summary>
    {class} property Xml1998Namespace: string read __fakeFieldGet_Xml1998Namespace;

  { static propertys } 

    ///<summary>Gets a collection of the namespace identifiers for XAML.</summary>
    ///<returns>A collection of the namespace identifiers for XAML.</returns>
    {class} property XamlNamespaces: DDN.mscorlib.DNIList<string> read get_XamlNamespaces;
    ///<summary>Gets a collection of the namespace identifiers for XML.</summary>
    ///<returns>A collection of the namespace identifiers for XML.</returns>
    {class} property XmlNamespaces: DDN.mscorlib.DNIList<string> read get_XmlNamespaces;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Array" />
    ///  XAML language intrinsic.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Array" />
    ///  XAML language intrinsic.</returns>
    {class} property &Array: DNXamlType read get_Array;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlType" />
    ///  for the type that is the item type of <see cref="P:System.Xaml.XamlLanguage.Members" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlType" />
    ///  for the type that is the item type of <see cref="P:System.Xaml.XamlLanguage.Members" />
    ///  .</returns>
    {class} property Member: DNXamlType read get_Member;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Null" />
    ///  or <see langword="NullExtension" />
    ///  XAML language intrinsic.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Null" />
    ///  /<see langword="NullExtension" />
    ///  XAML language intrinsic.</returns>
    {class} property Null: DNXamlType read get_Null;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Property" />
    ///  concept in XAML.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Property" />
    ///  concept in XAML.</returns>
    {class} property &Property: DNXamlType read get_Property;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlType" />
    ///  that represents a <see langword="Reference" />
    ///  for XAML.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlType" />
    ///  that represents a <see langword="Reference" />
    ///  for XAML.</returns>
    {class} property Reference: DNXamlType read get_Reference;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Static" />
    ///  /<see langword="StaticExtension" />
    ///  XAML language intrinsic.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Static" />
    ///  /<see langword="StaticExtension" />
    ///  XAML language intrinsic.</returns>
    {class} property &Static: DNXamlType read get_Static;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Type" />
    ///  /<see langword="TypeExtension" />
    ///  XAML language intrinsic.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Type" />
    ///  /<see langword="TypeExtension" />
    ///  XAML language intrinsic.</returns>
    {class} property &Type: DNXamlType read get_Type;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="String" />
    ///  XAML language intrinsic.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="String" />
    ///  XAML language intrinsic.</returns>
    {class} property &String: DNXamlType read get_String;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Double" />
    ///  XAML language intrinsic.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Double" />
    ///  XAML language intrinsic.</returns>
    {class} property Double: DNXamlType read get_Double;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Int32" />
    ///  XAML language intrinsic.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Int32" />
    ///  XAML language intrinsic.</returns>
    {class} property Int32: DNXamlType read get_Int32;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Boolean" />
    ///  XAML language intrinsic.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Boolean" />
    ///  XAML language intrinsic.</returns>
    {class} property Boolean: DNXamlType read get_Boolean;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlType" />
    ///  for the XAML type that backs an <see langword="XData" />
    ///  block in XAML. </summary>
    ///<returns>The <see cref="T:System.Xaml.XamlType" />
    ///  for the XAML type that backs an <see langword="XData" />
    ///  block. See [MS-XAML] Section 5.2.23.</returns>
    {class} property XData: DNXamlType read get_XData;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Object" />
    ///  XAML language concept.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Object" />
    ///  XAML language concept.</returns>
    {class} property &Object: DNXamlType read get_Object;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Char" />
    ///  XAML language intrinsic.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Char" />
    ///  XAML language intrinsic.</returns>
    {class} property Char: DNXamlType read get_Char;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Single" />
    ///  XAML language intrinsic.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Single" />
    ///  XAML language intrinsic.</returns>
    {class} property Single: DNXamlType read get_Single;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Byte" />
    ///  XAML language intrinsic.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Byte" />
    ///  XAML language intrinsic.</returns>
    {class} property Byte: DNXamlType read get_Byte;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Int16" />
    ///  XAML language intrinsic.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Int16" />
    ///  XAML language intrinsic.</returns>
    {class} property Int16: DNXamlType read get_Int16;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Int64" />
    ///  XAML language intrinsic.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Int64" />
    ///  XAML language intrinsic.</returns>
    {class} property Int64: DNXamlType read get_Int64;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Decimal" />
    ///  XAML language intrinsic.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Decimal" />
    ///  XAML language intrinsic.</returns>
    {class} property Decimal: DNXamlType read get_Decimal;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Uri" />
    ///  XAML language concept.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="Uri" />
    ///  XAML language concept.</returns>
    {class} property Uri: DNXamlType read get_Uri;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="TimeSpan" />
    ///  concept in XAML language.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlType" />
    ///  for the <see langword="TimeSpan" />
    ///  XAML language concept.</returns>
    {class} property TimeSpan: DNXamlType read get_TimeSpan;
    ///<summary>Gets a read-only generic collection of individual <see cref="T:System.Xaml.XamlType" />
    ///  values that match, or alias, a XAML language intrinsic that is defined by .NET Framework XAML Services.</summary>
    ///<returns>A read-only generic collection of each <see cref="T:System.Xaml.XamlType" />
    ///  that matches a XAML language intrinsic.</returns>
    {class} property AllTypes: DDN.mscorlib.DNReadOnlyCollection<DNXamlType> read get_AllTypes;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="Arguments" />
    ///  of a factory method or a generic usage.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="Arguments" />
    ///  of a factory method or generic usage.</returns>
    {class} property Arguments: DNXamlDirective read get_Arguments;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="AsyncRecords" />
    ///  pseudomember.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="AsyncRecords" />
    ///  pseudomember.</returns>
    {class} property AsyncRecords: DNXamlDirective read get_AsyncRecords;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="Class" />
    ///  directive from XAML.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="Class" />
    ///  directive from XAML.</returns>
    {class} property &Class: DNXamlDirective read get_Class;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="ClassModifier" />
    ///  directive from XAML.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="ClassModifier" />
    ///  directive from XAML.</returns>
    {class} property ClassModifier: DNXamlDirective read get_ClassModifier;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlDirective" />
    ///  for <see langword="Code" />
    ///  as detailed in [MS-XAML].</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlDirective" />
    ///  for <see langword="Code" />
    ///  as detailed in [MS-XAML].</returns>
    {class} property Code: DNXamlDirective read get_Code;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlDirective" />
    ///  that identifies a connection point for wiring events to handlers.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlDirective" />
    ///  that identifies a connection point for wiring events to handlers.</returns>
    {class} property ConnectionId: DNXamlDirective read get_ConnectionId;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlDirective" />
    ///  that identifies a factory method for XAML.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlDirective" />
    ///  that identifies a factory method for XAML.</returns>
    {class} property FactoryMethod: DNXamlDirective read get_FactoryMethod;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="FieldModifier" />
    ///  directive from XAML.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="FieldModifier" />
    ///  directive from XAML.</returns>
    {class} property FieldModifier: DNXamlDirective read get_FieldModifier;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="Items" />
    ///  directive from XAML.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="Items" />
    ///  directive from XAML.</returns>
    {class} property Items: DNXamlDirective read get_Items;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="Initialization" />
    ///  directive from XAML.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="Initialization" />
    ///  directive from XAML.</returns>
    {class} property &Initialization: DNXamlDirective read get_Initialization;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="Key" />
    ///  directive from XAML.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="Key" />
    ///  directive from XAML.</returns>
    {class} property Key: DNXamlDirective read get_Key;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="Members" />
    ///  concept in XAML.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="Members" />
    ///  concept in XAML.</returns>
    {class} property Members: DNXamlDirective read get_Members;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="ClassAttributes" />
    ///  directive from XAML.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="ClassAttributes" />
    ///  directive from XAML.</returns>
    {class} property ClassAttributes: DNXamlDirective read get_ClassAttributes;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="Name" />
    ///  directive from XAML.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="Name" />
    ///  directive from XAML.</returns>
    {class} property Name: DNXamlDirective read get_Name;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="PositionalParameters" />
    ///  directive from XAML.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="PositionalParameters" />
    ///  directive from XAML.</returns>
    {class} property PositionalParameters: DNXamlDirective read get_PositionalParameters;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="Shared" />
    ///  directive for XAML.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="Shared" />
    ///  directive for XAML.</returns>
    {class} property Shared: DNXamlDirective read get_Shared;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="Subclass" />
    ///  directive from XAML.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="Subclass" />
    ///  directive from XAML.</returns>
    {class} property Subclass: DNXamlDirective read get_Subclass;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlDirective" />
    ///  that enables loading XAML asynchronously if the XAML processor supports such a mode.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlDirective" />
    ///  that enables loading XAML asynchronously.</returns>
    {class} property SynchronousMode: DNXamlDirective read get_SynchronousMode;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="TypeArguments" />
    ///  directive from XAML.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="TypeArguments" />
    ///  directive from XAML.</returns>
    {class} property TypeArguments: DNXamlDirective read get_TypeArguments;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="Uid" />
    ///  directive from XAML.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="Uid" />
    ///  directive from XAML.</returns>
    {class} property Uid: DNXamlDirective read get_Uid;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="UnknownContent" />
    ///  directive from XAML.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="UnknownContent" />
    ///  directive from XAML.</returns>
    {class} property UnknownContent: DNXamlDirective read get_UnknownContent;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="base" />
    ///  directive from XML.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="base" />
    ///  directive from XML.</returns>
    {class} property Base: DNXamlDirective read get_Base;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="lang" />
    ///  directive from XML.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="lang" />
    ///  directive from XML.</returns>
    {class} property Lang: DNXamlDirective read get_Lang;
    ///<summary>Gets a <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="space" />
    ///  directive from XML.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlDirective" />
    ///  for the <see langword="space" />
    ///  directive from XML.</returns>
    {class} property Space: DNXamlDirective read get_Space;
    ///<summary>Gets a read-only generic collection of each <see cref="T:System.Xaml.XamlDirective" />
    ///  identifier that is defined by .NET Framework XAML Services.</summary>
    ///<returns>A read-only generic collection of each <see cref="T:System.Xaml.XamlDirective" />
    ///  identifier that is defined by .NET Framework XAML Services.</returns>
    {class} property AllDirectives: DDN.mscorlib.DNReadOnlyCollection<DNXamlDirective> read get_AllDirectives;
  end;

  ///<summary>Defines constants that provide strings or objects that are useful for XAML markup or for programming with XAML types. These strings or objects are relevant to XAML language concepts, to the implementation of XAML language concepts in .NET Framework XAML Services, or to both.</summary>
  [DNTypeName('System.Xaml.XamlLanguage')]
  DNXamlLanguage = interface(DDN.mscorlib.DNObject)
  ['{B70AAB97-D391-3FD3-9CC8-8F237D25D6C2}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXamlLanguage = class(TDNGenericImport<DNXamlLanguageClass, DNXamlLanguage>)
  public const
    ///<summary>Gets a string value for the string that identifies the XAML (2006) language namespace. That namespace corresponds to the XAML (2006) "x" prefixed namespace as defined in [MS-XAML] Section 5.1.1.</summary>
   Xaml2006Namespace = 'http://schemas.microsoft.com/winfx/2006/xaml';
    ///<summary>Gets a string value for the string that identifies the XML (1998) language namespace. That namespace corresponds to the XML "xml" prefixed namespace as referenced in [MS-XAML] Section 5.1.2.</summary>
   Xml1998Namespace = 'http://www.w3.org/XML/1998/namespace';
  end;

  //-------------namespace: System.Xaml----------------
  DNXamlMemberClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EEA9FABC-D37C-56CA-A392-41F4C2BB369F}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" />
    ///  class using a string name and declaring <see cref="T:System.Xaml.XamlType" />
    ///  information. A <see cref="T:System.Xaml.XamlMember" />
    ///  that is constructed with this signature has significant limitations; see Remarks.</summary>
    ///  <param name="name">The string name of the member.</param>
    ///  <param name="declaringType">The <see cref="T:System.Xaml.XamlType" />
    ///  information for the declaring type.</param>
    ///  <param name="isAttachable"><see langword="true" />
    ///  to indicate that the member is attachable; otherwise, <see langword="false" />
    ///  .</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="name" />
    ///  or <paramref name="declaringType" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(name: string; declaringType: DNXamlType; isAttachable: Boolean): DNXamlMember; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" />
    ///  class using CLR type system <see cref="T:System.Reflection.PropertyInfo" />
    ///  and a <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  .</summary>
    ///  <param name="propertyInfo">The CLR type system <see cref="T:System.Reflection.PropertyInfo" />
    ///  that represents the property member.</param>
    ///  <param name="schemaContext">The <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  context that qualifies the member.</param>
    {class} function init(propertyInfo: DDN.mscorlib.DNPropertyInfo; schemaContext: DNXamlSchemaContext): DNXamlMember; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" />
    ///  class using reflection <see cref="T:System.Reflection.PropertyInfo" />
    ///  and a <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  , including <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  information.</summary>
    ///  <param name="propertyInfo">The CLR type system <see cref="T:System.Reflection.PropertyInfo" />
    ///  that represents the property member.</param>
    ///  <param name="schemaContext">The <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  context that qualifies the member.</param>
    ///  <param name="invoker">The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  implementation that handles run-time invocation calls against the <see cref="T:System.Xaml.XamlMember" />
    ///  .</param>
    {class} function init(propertyInfo: DDN.mscorlib.DNPropertyInfo; schemaContext: DNXamlSchemaContext; invoker: DNXamlMemberInvoker): DNXamlMember; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" />
    ///  class using CLR type system <see cref="T:System.Reflection.EventInfo" />
    ///  and a <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  .</summary>
    ///  <param name="eventInfo">The CLR type system <see cref="T:System.Reflection.EventInfo" />
    ///  that represents the event member.</param>
    ///  <param name="schemaContext">The <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  context that qualifies the member.</param>
    {class} function init(eventInfo: DDN.mscorlib.DNEventInfo; schemaContext: DNXamlSchemaContext): DNXamlMember; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" />
    ///  class using CLR type system <see cref="T:System.Reflection.EventInfo" />
    ///  and a <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  , including <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  information.</summary>
    ///  <param name="eventInfo">The CLR type system <see cref="T:System.Reflection.EventInfo" />
    ///  that represents the event member.</param>
    ///  <param name="schemaContext">The <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  context that qualifies the member.</param>
    ///  <param name="invoker">The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  implementation that handles run-time reflection calls against the <see cref="T:System.Xaml.XamlMember" />
    ///  .</param>
    {class} function init(eventInfo: DDN.mscorlib.DNEventInfo; schemaContext: DNXamlSchemaContext; invoker: DNXamlMemberInvoker): DNXamlMember; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" />
    ///  class for a <see cref="T:System.Xaml.XamlMember" />
    ///  that represents an attachable property.</summary>
    ///  <param name="attachablePropertyName">The string name of the attachable property.</param>
    ///  <param name="getter">The CLR type system <see cref="T:System.Reflection.MethodInfo" />
    ///  for the <see langword="get" />
    ///  accessor of the attachable member's backing implementation.</param>
    ///  <param name="setter">The CLR type system <see cref="T:System.Reflection.MethodInfo" />
    ///  for the <see langword="set" />
    ///  accessor of the attachable member's backing implementation.</param>
    ///  <param name="schemaContext">The <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  context that qualifies the member.</param>
    {class} function init(attachablePropertyName: string; getter: DDN.mscorlib.DNMethodInfo; setter: DDN.mscorlib.DNMethodInfo; schemaContext: DNXamlSchemaContext): DNXamlMember; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" />
    ///  class for a <see cref="T:System.Xaml.XamlMember" />
    ///  that represents an attachable property, including <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  information.</summary>
    ///  <param name="attachablePropertyName">The string name of the attachable property.</param>
    ///  <param name="getter">The CLR type system <see cref="T:System.Reflection.MethodInfo" />
    ///  for the <see langword="get" />
    ///  accessor of the attachable member's backing implementation.</param>
    ///  <param name="setter">The CLR type system <see cref="T:System.Reflection.MethodInfo" />
    ///  for the <see langword="set" />
    ///  accessor of the attachable member's backing implementation.</param>
    ///  <param name="schemaContext">The <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  context that qualifies the member.</param>
    ///  <param name="invoker">The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  implementation that handles run-time invocation calls against the <see cref="T:System.Xaml.XamlMember" />
    ///  .</param>
    {class} function init(attachablePropertyName: string; getter: DDN.mscorlib.DNMethodInfo; setter: DDN.mscorlib.DNMethodInfo; schemaContext: DNXamlSchemaContext; invoker: DNXamlMemberInvoker): DNXamlMember; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" />
    ///  class for a <see cref="T:System.Xaml.XamlMember" />
    ///  that represents an attachable event.</summary>
    ///  <param name="attachableEventName">The string name of the attachable event.</param>
    ///  <param name="adder">The CLR type system <see cref="T:System.Reflection.MethodInfo" />
    ///  for the handler <see langword="Add" />
    ///  method of the attachable member's backing implementation.</param>
    ///  <param name="schemaContext">The <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  context that qualifies the member.</param>
    {class} function init(attachableEventName: string; adder: DDN.mscorlib.DNMethodInfo; schemaContext: DNXamlSchemaContext): DNXamlMember; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" />
    ///  class for a <see cref="T:System.Xaml.XamlMember" />
    ///  that represents an attachable event, including <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  information.</summary>
    ///  <param name="attachableEventName">The string name of the attachable event.</param>
    ///  <param name="adder">The CLR type system <see cref="T:System.Reflection.MethodInfo" />
    ///  for the handler <see langword="Add" />
    ///  method of the attachable member's backing implementation.</param>
    ///  <param name="schemaContext">The <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  context that qualifies the member.</param>
    ///  <param name="invoker">The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  implementation that handles run-time invocation calls against the <see cref="T:System.Xaml.XamlMember" />
    ///  .</param>
    {class} function init(attachableEventName: string; adder: DDN.mscorlib.DNMethodInfo; schemaContext: DNXamlSchemaContext; invoker: DNXamlMemberInvoker): DNXamlMember; overload;

  end;

  ///<summary>Provides the XAML type system identifier for members of XAML types. The identifier is used by XAML readers and XAML writers during processing of member nodes (when the XAML reader is positioned on a <see cref="F:System.Xaml.XamlNodeType.StartMember" />
  ///  ) and also for general XAML type system logic.</summary>
  [DNTypeName('System.Xaml.XamlMember')]
  DNXamlMember = interface(DDN.mscorlib.DNObject)
  ['{5D1A3423-D8C4-32EA-BA89-2DE77E98692C}']
  { getters & setters } 

    function get_DeclaringType: DNXamlType;
    function get_Invoker: DNXamlMemberInvoker;
    function get_IsUnknown: Boolean;
    function get_IsReadPublic: Boolean;
    function get_IsWritePublic: Boolean;
    function get_Name: string;
    function get_IsNameValid: Boolean;
    function get_PreferredXamlNamespace: string;
    function get_TargetType: DNXamlType;
    function get_Type: DNXamlType;
    function get_TypeConverter: DNXamlValueConverter<DDN.System.DNTypeConverter>;
    function get_ValueSerializer: DNXamlValueConverter<DNValueSerializer>;
    function get_DeferringLoader: DNXamlValueConverter<DNXamlDeferringLoader>;
    function get_UnderlyingMember: DDN.mscorlib.DNMemberInfo;
    function get_IsReadOnly: Boolean;
    function get_IsWriteOnly: Boolean;
    function get_IsAttachable: Boolean;
    function get_IsEvent: Boolean;
    function get_IsDirective: Boolean;
    function get_DependsOn: DDN.mscorlib.DNIList<DNXamlMember>;
    function get_IsAmbient: Boolean;
    function get_SerializationVisibility: DDN.System.DNDesignerSerializationVisibility;
    function get_MarkupExtensionBracketCharacters: DDN.mscorlib.DNIReadOnlyDictionary<Char, Char>;

  { methods } 

    ///<summary>Returns a list of XAML namespaces where this XAML member can exist. </summary>
    ///<returns>A list of XAML namespace identifiers as strings. </returns>
    function GetXamlNamespaces: DDN.mscorlib.DNIList<string>;
    ///<summary>Indicates whether the current object is equal to another object.</summary>
    ///  <param name="obj">The object to compare with this object.</param>
    ///<returns><see langword="true" />
    ///  if the current object is equal to the <paramref name="obj" />
    ///  parameter; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>Returns the hash code for this object.</summary>
    ///<returns>An integer hash code.</returns>
    function GetHashCode: Int32;
    ///<summary>Indicates whether the current object is equal to another object of the same type.</summary>
    ///  <param name="other">An object to compare with this object.</param>
    ///<returns><see langword="true" />
    ///  if the current object is equal to the <paramref name="other" />
    ///  parameter; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(other: DNXamlMember): Boolean; overload;
    ///<summary>Returns a string representation of this <see cref="T:System.Xaml.XamlMember" />
    ///  .</summary>
    ///<returns>A string representation of this <see cref="T:System.Xaml.XamlMember" />
    ///  .</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Xaml.XamlType" />
    ///  for the type that declares the member that is associated with this <see cref="T:System.Xaml.XamlMember" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Xaml.XamlType" />
    ///  for the type that declares the member that is associated with this <see cref="T:System.Xaml.XamlMember" />
    ///  .</returns>
    property DeclaringType: DNXamlType read get_DeclaringType;
    ///<summary>Gets the <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  implementation that is associated with this <see cref="T:System.Xaml.XamlMember" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  implementation that is associated with this <see cref="T:System.Xaml.XamlMember" />
    ///  .</returns>
    property Invoker: DNXamlMemberInvoker read get_Invoker;
    ///<summary>Gets a value that indicates whether the member is not resolvable by the backing system that is used for type and member resolution.</summary>
    ///<returns><see langword="true" />
    ///  if the member is not resolvable; <see langword="false" />
    ///  if the member is resolvable.</returns>
    property IsUnknown: Boolean read get_IsUnknown;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" />
    ///  represents a member with a callable public <see langword="get" />
    ///  accessor.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlMember" />
    ///  represents a callable public <see langword="get" />
    ///  accessor; otherwise, <see langword="false" />
    ///  .</returns>
    property IsReadPublic: Boolean read get_IsReadPublic;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" />
    ///  represents a member that has a callable public <see langword="set" />
    ///  accessor.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlMember" />
    ///  represents a callable public <see langword="set" />
    ///  accessor; otherwise, <see langword="false" />
    ///  .</returns>
    property IsWritePublic: Boolean read get_IsWritePublic;
    ///<summary>Gets the <see langword="xamlName" />
    ///  name string that declares this <see cref="T:System.Xaml.XamlMember" />
    ///  .</summary>
    ///<returns>The <see langword="xamlName" />
    ///  name string that declares this <see cref="T:System.Xaml.XamlMember" />
    ///  .</returns>
    property Name: string read get_Name;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" />
    ///  is initialized with a valid <see langword="xamlName" />
    ///  string as its <see cref="P:System.Xaml.XamlMember.Name" />
    ///  .</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlMember" />
    ///  is initialized with a valid <see langword="xamlName" />
    ///  string; otherwise, <see langword="false" />
    ///  .</returns>
    property IsNameValid: Boolean read get_IsNameValid;
    ///<summary>Gets the single XAML namespace URI that identifies the primary XAML namespace for this <see cref="T:System.Xaml.XamlMember" />
    ///  . </summary>
    ///<returns>The identifier for the primary XAML namespace for this <see cref="T:System.Xaml.XamlMember" />
    ///  , as a string.</returns>
    property PreferredXamlNamespace: string read get_PreferredXamlNamespace;
    ///<summary>Gets the <see cref="T:System.Xaml.XamlType" />
    ///  of the type where the <see cref="T:System.Xaml.XamlMember" />
    ///  can exist.</summary>
    ///<returns>The type where the <see cref="T:System.Xaml.XamlMember" />
    ///  can exist. See Remarks.</returns>
    property TargetType: DNXamlType read get_TargetType;
    ///<summary>Gets the <see cref="T:System.Xaml.XamlType" />
    ///  of the type that is used by the member.</summary>
    ///<returns>The <see cref="T:System.Xaml.XamlType" />
    ///  of the type that is used by the member. See Remarks.</returns>
    property &Type: DNXamlType read get_Type;
    ///<summary>Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  object, which can be used for type conversion construction of XAML declared objects.</summary>
    ///<returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  value, with a <see cref="T:System.ComponentModel.TypeConverter" />
    ///  constraint on the generic. See Remarks.</returns>
    property TypeConverter: DNXamlValueConverter<DDN.System.DNTypeConverter> read get_TypeConverter;
    ///<summary>Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  object, which is used for value serialization of XAML declared objects.</summary>
    ///<returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  with <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  constraint on the generic.</returns>
    property ValueSerializer: DNXamlValueConverter<DNValueSerializer> read get_ValueSerializer;
    ///<summary>Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  object, which is used for deferred loading of XAML declared objects.</summary>
    ///<returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  with <see cref="T:System.Xaml.XamlDeferringLoader" />
    ///  constraint on the generic.</returns>
    property DeferringLoader: DNXamlValueConverter<DNXamlDeferringLoader> read get_DeferringLoader;
    ///<summary>Gets the CLR type system <see cref="T:System.Reflection.MemberInfo" />
    ///  that is available for a member that is constructed by <see cref="T:System.Reflection.PropertyInfo" />
    ///  , <see cref="T:System.Reflection.MethodInfo" />
    ///  , or <see cref="T:System.Reflection.EventInfo" />
    ///  .</summary>
    ///<returns>CLR type system <see cref="T:System.Reflection.MemberInfo" />
    ///  information, as cast from the initial constructor parameters. A <see cref="T:System.Xaml.XamlMember" />
    ///  that is constructed with the <see cref="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" />
    ///  signature returns <see langword="null" />
    ///  .</returns>
    property UnderlyingMember: DDN.mscorlib.DNMemberInfo read get_UnderlyingMember;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" />
    ///  represents a read-only member.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlMember" />
    ///  represents a read-only member; otherwise, <see langword="false" />
    ///  .</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" />
    ///  represents a write-only member.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlMember" />
    ///  represents a write-only member; otherwise, <see langword="false" />
    ///  .</returns>
    property IsWriteOnly: Boolean read get_IsWriteOnly;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" />
    ///  is an attachable member.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlMember" />
    ///  is an attachable member; otherwise, <see langword="false" />
    ///  .</returns>
    property IsAttachable: Boolean read get_IsAttachable;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" />
    ///  represents an event member.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlMember" />
    ///  represents an event; otherwise, <see langword="false" />
    ///  .</returns>
    property IsEvent: Boolean read get_IsEvent;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" />
    ///  is a XAML directive.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlMember" />
    ///  is a XAML directive; otherwise, <see langword="false" />
    ///  .</returns>
    property IsDirective: Boolean read get_IsDirective;
    ///<summary>Gets a list of <see cref="T:System.Xaml.XamlMember" />
    ///  objects. These report the members where dependency relationships for initialization order exist relative to this <see cref="T:System.Xaml.XamlMember" />
    ///  .</summary>
    ///<returns>A list of <see cref="T:System.Xaml.XamlMember" />
    ///  objects.</returns>
    property DependsOn: DDN.mscorlib.DNIList<DNXamlMember> read get_DependsOn;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" />
    ///  is reported as an ambient property.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlMember" />
    ///  is reported as an ambient property; otherwise, <see langword="false" />
    ///  .</returns>
    property IsAmbient: Boolean read get_IsAmbient;
    ///<summary>Gets a <see cref="T:System.ComponentModel.DesignerSerializationVisibility" />
    ///  value, which indicates how a visual designer should process the member.</summary>
    ///<returns>A value of the <see cref="T:System.ComponentModel.DesignerSerializationVisibility" />
    ///  enumeration. The default is <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" />
    ///  .</returns>
    property SerializationVisibility: DDN.System.DNDesignerSerializationVisibility read get_SerializationVisibility;
    ///<summary>Defines the opening and closing bracket characters for a markup extension.</summary>
    ///<returns>A collection containing the opening and closing bracket characters.</returns>
    property MarkupExtensionBracketCharacters: DDN.mscorlib.DNIReadOnlyDictionary<Char, Char> read get_MarkupExtensionBracketCharacters;
  end;

  TDNXamlMember = class(TDNGenericImport<DNXamlMemberClass, DNXamlMember>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlDirectiveClass = interface(DNXamlMemberClass)
  ['{4B0CEBD8-AC7B-5AFD-8151-527105FD920B}']
  { constructors } 

    {class} function init(xamlNamespaces: DDN.mscorlib.DNIEnumerable<string>; name: string; xamlType: DNXamlType; typeConverter: DNXamlValueConverter<DDN.System.DNTypeConverter>; allowedLocation: DNAllowedMemberLocations): DNXamlDirective; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlDirective" />
    ///  class, specifying values for a name and a single XAML namespace. Use this signature only when you want or expect <see cref="P:System.Xaml.XamlMember.IsUnknown" />
    ///  to report <see langword="true" />
    ///  for the directive.</summary>
    ///  <param name="xamlNamespace">The primary XAML namespace where this <see cref="T:System.Xaml.XamlDirective" />
    ///  can exist.</param>
    ///  <param name="name">The identifying name of the <see cref="T:System.Xaml.XamlDirective" />
    ///  .</param>
    {class} function init(xamlNamespace: string; name: string): DNXamlDirective; overload;

  end;

  ///<summary>Provides the XAML type system identifier for a member if the member is also a XAML directive. XAML readers and XAML writers use the <see cref="T:System.Xaml.XamlDirective" />
  ///  identifier during processing of member nodes. The identifier is used when the XAML reader is positioned on a <see cref="F:System.Xaml.XamlNodeType.StartMember" />
  ///  and <see cref="P:System.Xaml.XamlMember.IsDirective" />
  ///  is <see langword="true" />
  ///  .</summary>
  [DNTypeName('System.Xaml.XamlDirective')]
  DNXamlDirective = interface(DNXamlMember)
  ['{83725DB4-8B3E-32D2-A38A-48B51EF05432}']
  { getters & setters } 

    function get_AllowedLocation: DNAllowedMemberLocations;
    function get_DeclaringType: DNXamlType;
    function get_Invoker: DNXamlMemberInvoker;
    function get_IsUnknown: Boolean;
    function get_IsReadPublic: Boolean;
    function get_IsWritePublic: Boolean;
    function get_Name: string;
    function get_IsNameValid: Boolean;
    function get_PreferredXamlNamespace: string;
    function get_TargetType: DNXamlType;
    function get_Type: DNXamlType;
    function get_TypeConverter: DNXamlValueConverter<DDN.System.DNTypeConverter>;
    function get_ValueSerializer: DNXamlValueConverter<DNValueSerializer>;
    function get_DeferringLoader: DNXamlValueConverter<DNXamlDeferringLoader>;
    function get_UnderlyingMember: DDN.mscorlib.DNMemberInfo;
    function get_IsReadOnly: Boolean;
    function get_IsWriteOnly: Boolean;
    function get_IsAttachable: Boolean;
    function get_IsEvent: Boolean;
    function get_IsDirective: Boolean;
    function get_DependsOn: DDN.mscorlib.DNIList<DNXamlMember>;
    function get_IsAmbient: Boolean;
    function get_SerializationVisibility: DDN.System.DNDesignerSerializationVisibility;
    function get_MarkupExtensionBracketCharacters: DDN.mscorlib.DNIReadOnlyDictionary<Char, Char>;

  { methods } 

    ///<summary>Returns the hash code for this object.</summary>
    ///<returns>An integer hash code.</returns>
    function GetHashCode: Int32;
    ///<summary>Returns a list of XAML namespaces where this XAML member can exist. </summary>
    ///<returns>A list of XAML namespace identifiers, as strings.</returns>
    function GetXamlNamespaces: DDN.mscorlib.DNIList<string>;
    ///<summary>Returns a string representation of this <see cref="T:System.Xaml.XamlDirective" />
    ///  .</summary>
    ///<returns>A string representation of this <see cref="T:System.Xaml.XamlDirective" />
    ///  .</returns>
    function ToString: string;
    ///<summary>Indicates whether the current object is equal to another object.</summary>
    ///  <param name="obj">The object to compare with this object.</param>
    ///<returns><see langword="true" />
    ///  if the current object is equal to the <paramref name="obj" />
    ///  parameter; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>Indicates whether the current object is equal to another object of the same type.</summary>
    ///  <param name="other">An object to compare with this object.</param>
    ///<returns><see langword="true" />
    ///  if the current object is equal to the <paramref name="other" />
    ///  parameter; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(other: DNXamlMember): Boolean; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets a value that specifies the XAML node types where the directive can be specified.</summary>
    ///<returns>A value of the enumeration. The default is the enumeration default, which is <see cref="F:System.Xaml.Schema.AllowedMemberLocations.None" />
    ///  .</returns>
    property AllowedLocation: DNAllowedMemberLocations read get_AllowedLocation;
    ///<summary>Gets the <see cref="T:System.Xaml.XamlType" />
    ///  for the type that declares the member that is associated with this <see cref="T:System.Xaml.XamlMember" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Xaml.XamlType" />
    ///  for the type that declares the member that is associated with this <see cref="T:System.Xaml.XamlMember" />
    ///  .</returns>
    property DeclaringType: DNXamlType read get_DeclaringType;
    ///<summary>Gets the <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  implementation that is associated with this <see cref="T:System.Xaml.XamlMember" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />
    ///  implementation that is associated with this <see cref="T:System.Xaml.XamlMember" />
    ///  .</returns>
    property Invoker: DNXamlMemberInvoker read get_Invoker;
    ///<summary>Gets a value that indicates whether the member is not resolvable by the backing system that is used for type and member resolution.</summary>
    ///<returns><see langword="true" />
    ///  if the member is not resolvable; <see langword="false" />
    ///  if the member is resolvable.</returns>
    property IsUnknown: Boolean read get_IsUnknown;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" />
    ///  represents a member with a callable public <see langword="get" />
    ///  accessor.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlMember" />
    ///  represents a callable public <see langword="get" />
    ///  accessor; otherwise, <see langword="false" />
    ///  .</returns>
    property IsReadPublic: Boolean read get_IsReadPublic;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" />
    ///  represents a member that has a callable public <see langword="set" />
    ///  accessor.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlMember" />
    ///  represents a callable public <see langword="set" />
    ///  accessor; otherwise, <see langword="false" />
    ///  .</returns>
    property IsWritePublic: Boolean read get_IsWritePublic;
    ///<summary>Gets the <see langword="xamlName" />
    ///  name string that declares this <see cref="T:System.Xaml.XamlMember" />
    ///  .</summary>
    ///<returns>The <see langword="xamlName" />
    ///  name string that declares this <see cref="T:System.Xaml.XamlMember" />
    ///  .</returns>
    property Name: string read get_Name;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" />
    ///  is initialized with a valid <see langword="xamlName" />
    ///  string as its <see cref="P:System.Xaml.XamlMember.Name" />
    ///  .</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlMember" />
    ///  is initialized with a valid <see langword="xamlName" />
    ///  string; otherwise, <see langword="false" />
    ///  .</returns>
    property IsNameValid: Boolean read get_IsNameValid;
    ///<summary>Gets the single XAML namespace URI that identifies the primary XAML namespace for this <see cref="T:System.Xaml.XamlMember" />
    ///  . </summary>
    ///<returns>The identifier for the primary XAML namespace for this <see cref="T:System.Xaml.XamlMember" />
    ///  , as a string.</returns>
    property PreferredXamlNamespace: string read get_PreferredXamlNamespace;
    ///<summary>Gets the <see cref="T:System.Xaml.XamlType" />
    ///  of the type where the <see cref="T:System.Xaml.XamlMember" />
    ///  can exist.</summary>
    ///<returns>The type where the <see cref="T:System.Xaml.XamlMember" />
    ///  can exist. See Remarks.</returns>
    property TargetType: DNXamlType read get_TargetType;
    ///<summary>Gets the <see cref="T:System.Xaml.XamlType" />
    ///  of the type that is used by the member.</summary>
    ///<returns>The <see cref="T:System.Xaml.XamlType" />
    ///  of the type that is used by the member. See Remarks.</returns>
    property &Type: DNXamlType read get_Type;
    ///<summary>Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  object, which can be used for type conversion construction of XAML declared objects.</summary>
    ///<returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  value, with a <see cref="T:System.ComponentModel.TypeConverter" />
    ///  constraint on the generic. See Remarks.</returns>
    property TypeConverter: DNXamlValueConverter<DDN.System.DNTypeConverter> read get_TypeConverter;
    ///<summary>Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  object, which is used for value serialization of XAML declared objects.</summary>
    ///<returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  with <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  constraint on the generic.</returns>
    property ValueSerializer: DNXamlValueConverter<DNValueSerializer> read get_ValueSerializer;
    ///<summary>Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  object, which is used for deferred loading of XAML declared objects.</summary>
    ///<returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  with <see cref="T:System.Xaml.XamlDeferringLoader" />
    ///  constraint on the generic.</returns>
    property DeferringLoader: DNXamlValueConverter<DNXamlDeferringLoader> read get_DeferringLoader;
    ///<summary>Gets the CLR type system <see cref="T:System.Reflection.MemberInfo" />
    ///  that is available for a member that is constructed by <see cref="T:System.Reflection.PropertyInfo" />
    ///  , <see cref="T:System.Reflection.MethodInfo" />
    ///  , or <see cref="T:System.Reflection.EventInfo" />
    ///  .</summary>
    ///<returns>CLR type system <see cref="T:System.Reflection.MemberInfo" />
    ///  information, as cast from the initial constructor parameters. A <see cref="T:System.Xaml.XamlMember" />
    ///  that is constructed with the <see cref="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" />
    ///  signature returns <see langword="null" />
    ///  .</returns>
    property UnderlyingMember: DDN.mscorlib.DNMemberInfo read get_UnderlyingMember;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" />
    ///  represents a read-only member.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlMember" />
    ///  represents a read-only member; otherwise, <see langword="false" />
    ///  .</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" />
    ///  represents a write-only member.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlMember" />
    ///  represents a write-only member; otherwise, <see langword="false" />
    ///  .</returns>
    property IsWriteOnly: Boolean read get_IsWriteOnly;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" />
    ///  is an attachable member.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlMember" />
    ///  is an attachable member; otherwise, <see langword="false" />
    ///  .</returns>
    property IsAttachable: Boolean read get_IsAttachable;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" />
    ///  represents an event member.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlMember" />
    ///  represents an event; otherwise, <see langword="false" />
    ///  .</returns>
    property IsEvent: Boolean read get_IsEvent;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" />
    ///  is a XAML directive.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlMember" />
    ///  is a XAML directive; otherwise, <see langword="false" />
    ///  .</returns>
    property IsDirective: Boolean read get_IsDirective;
    ///<summary>Gets a list of <see cref="T:System.Xaml.XamlMember" />
    ///  objects. These report the members where dependency relationships for initialization order exist relative to this <see cref="T:System.Xaml.XamlMember" />
    ///  .</summary>
    ///<returns>A list of <see cref="T:System.Xaml.XamlMember" />
    ///  objects.</returns>
    property DependsOn: DDN.mscorlib.DNIList<DNXamlMember> read get_DependsOn;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" />
    ///  is reported as an ambient property.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlMember" />
    ///  is reported as an ambient property; otherwise, <see langword="false" />
    ///  .</returns>
    property IsAmbient: Boolean read get_IsAmbient;
    ///<summary>Gets a <see cref="T:System.ComponentModel.DesignerSerializationVisibility" />
    ///  value, which indicates how a visual designer should process the member.</summary>
    ///<returns>A value of the <see cref="T:System.ComponentModel.DesignerSerializationVisibility" />
    ///  enumeration. The default is <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" />
    ///  .</returns>
    property SerializationVisibility: DDN.System.DNDesignerSerializationVisibility read get_SerializationVisibility;
    ///<summary>Defines the opening and closing bracket characters for a markup extension.</summary>
    ///<returns>A collection containing the opening and closing bracket characters.</returns>
    property MarkupExtensionBracketCharacters: DDN.mscorlib.DNIReadOnlyDictionary<Char, Char> read get_MarkupExtensionBracketCharacters;
  end;

  TDNXamlDirective = class(TDNGenericImport<DNXamlDirectiveClass, DNXamlDirective>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlNodeListClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A81007FE-5522-560C-881E-E338DF9A49C7}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlNodeList" />
    ///  class, using a provided schema context.</summary>
    ///  <param name="schemaContext">The schema context to use for node operations.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="schemaContext" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(schemaContext: DNXamlSchemaContext): DNXamlNodeList; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlNodeList" />
    ///  class, using a provided schema context and list size.</summary>
    ///  <param name="schemaContext">The schema context to use for node operations.</param>
    ///  <param name="size">The intended item count of the list.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="schemaContext" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(schemaContext: DNXamlSchemaContext; size: Int32): DNXamlNodeList; overload;

  end;

  ///<summary>Provides a list of XAML nodes, which can be used for scenarios such as writing XAML nodes in a deferred manner.</summary>
  [DNTypeName('System.Xaml.XamlNodeList')]
  DNXamlNodeList = interface(DDN.mscorlib.DNObject)
  ['{57AD4E03-3C01-37D3-84FF-238445CFA5FF}']
  { getters & setters } 

    function get_Writer: DNXamlWriter;
    function get_Count: Int32;

  { methods } 

    ///<summary>Returns a XAML reader implementation delegate.</summary>
    ///<returns>A XAML reader implementation delegate.</returns>
    ///<exception cref="T:System.Xaml.XamlException">The <see cref="T:System.Xaml.XamlNodeList" />
    ///  is still in Write mode.-or-The writer that is used for the node list has no schema context.</exception>
    function GetReader: DNXamlReader;
    ///<summary>Clears the items in this list.</summary>
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the associated XAML writer.</summary>
    ///<returns>The associated XAML writer. </returns>
    property Writer: DNXamlWriter read get_Writer;
    ///<summary>Gets the number of nodes in this <see cref="T:System.Xaml.XamlNodeList" />
    ///  .</summary>
    ///<returns>The number of nodes in this <see cref="T:System.Xaml.XamlNodeList" />
    ///  .</returns>
    property Count: Int32 read get_Count;
  end;

  TDNXamlNodeList = class(TDNGenericImport<DNXamlNodeListClass, DNXamlNodeList>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlNodeQueueClass = interface(DDN.mscorlib.DNObjectClass)
  ['{722489F3-B31D-5A40-8B18-38ABA7FEB53B}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlNodeQueue" />
    ///  class using a provided XAML schema context.</summary>
    ///  <param name="schemaContext">The schema context to use for node operations.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xamlSchemaContext" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(schemaContext: DNXamlSchemaContext): DNXamlNodeQueue;

  end;

  ///<summary>Provides a buffer for writing nodes and reading them again.</summary>
  [DNTypeName('System.Xaml.XamlNodeQueue')]
  DNXamlNodeQueue = interface(DDN.mscorlib.DNObject)
  ['{5BE541F6-77F4-34C1-AA30-714831F0CE04}']
  { getters & setters } 

    function get_Reader: DNXamlReader;
    function get_Writer: DNXamlWriter;
    function get_IsEmpty: Boolean;
    function get_Count: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a XAML reader implementation delegate.</summary>
    ///<returns>A XAML reader implementation delegate.</returns>
    ///<exception cref="T:System.Xaml.XamlException">The XAML writer that is used for the node list has no valid XAML schema context.</exception>
    property Reader: DNXamlReader read get_Reader;
    ///<summary>Gets the associated XAML writer.</summary>
    ///<returns>The associated XAML writer. </returns>
    property Writer: DNXamlWriter read get_Writer;
    ///<summary>Gets a value that determines whether this <see cref="T:System.Xaml.XamlNodeQueue" />
    ///  does not contain nodes.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlNodeQueue" />
    ///  does not contain nodes; <see langword="false" />
    ///  if this <see cref="T:System.Xaml.XamlNodeQueue" />
    ///  contains nodes.</returns>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>Gets the number of nodes in the <see cref="T:System.Xaml.XamlNodeQueue" />
    ///  .</summary>
    ///<returns>The number of nodes in the <see cref="T:System.Xaml.XamlNodeQueue" />
    ///  .</returns>
    property Count: Int32 read get_Count;
  end;

  TDNXamlNodeQueue = class(TDNGenericImport<DNXamlNodeQueueClass, DNXamlNodeQueue>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlReaderClass = interface(DNObjectClass)
  ['{AE9A8B7B-76ED-535F-9863-EC49E8867C9D}']
  end;

  ///<summary>Provides base definitions for classes that consume XAML input and produce XAML node streams.</summary>
  [DNTypeName('System.Xaml.XamlReader')]
  DNXamlReader = interface(DDN.mscorlib.DNIDisposable)
  ['{47C9699D-57F2-324C-B570-B6E83626FBEB}']
  { getters & setters } 

    function get_NodeType: DNXamlNodeType;
    function get_IsEof: Boolean;
    function get_Namespace: DNNamespaceDeclaration;
    function get_Type: DNXamlType;
    function get_Value: DDN.mscorlib.DNObject;
    function get_Member: DNXamlMember;
    function get_SchemaContext: DNXamlSchemaContext;

  { methods } 

    ///<summary>Skips the current node and advances the reader position to the next node.</summary>
    procedure Skip;
    ///<summary>Closes the XAML node stream.</summary>
    procedure Close;
    ///<summary>Returns a <see cref="T:System.Xaml.XamlReader" />
    ///  that is based on the current <see cref="T:System.Xaml.XamlReader" />
    ///  , where the returned <see cref="T:System.Xaml.XamlReader" />
    ///  is used to iterate through a subtree of the XAML node structure.</summary>
    ///<returns>A new XAML reader instance for the subtree.</returns>
    function ReadSubtree: DNXamlReader;
    ///<summary>When implemented in a derived class, provides the next XAML node from the source, if a node is available. </summary>
    ///<returns><see langword="true" />
    ///  if a node is available; otherwise, <see langword="false" />
    ///  .</returns>
    function Read: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>When implemented in a derived class, gets the type of the current node.</summary>
    ///<returns>A value of the <see cref="T:System.Xaml.XamlNodeType" />
    ///  enumeration.</returns>
    property NodeType: DNXamlNodeType read get_NodeType;
    ///<summary>When implemented in a derived class, gets a value that reports whether the reader position is at end-of-file.</summary>
    ///<returns><see langword="true" />
    ///  if the position is at the conceptual end-of-file of the XAML node stream; otherwise, <see langword="false" />
    ///  .</returns>
    property IsEof: Boolean read get_IsEof;
    ///<summary>When implemented in a derived class, gets the XAML namespace information from the current node.</summary>
    ///<returns>The XAML namespace information, if it is available; otherwise, <see langword="null" />
    ///  .</returns>
    property Namespace: DNNamespaceDeclaration read get_Namespace;
    ///<summary>When implemented in a derived class, gets the <see cref="T:System.Xaml.XamlType" />
    ///  of the current node.</summary>
    ///<returns>The <see cref="T:System.Xaml.XamlType" />
    ///  of the current node; or <see langword="null" />
    ///  , if the current reader position is not on an object.</returns>
    property &Type: DNXamlType read get_Type;
    ///<summary>When implemented in a derived class, gets the value of the current node.</summary>
    ///<returns>The value of the current node; or <see langword="null" />
    ///  , if the current reader position is not on a <see cref="F:System.Xaml.XamlNodeType.Value" />
    ///  node type.</returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
    ///<summary>When implemented in a derived class, gets the current member at the reader position, if the reader position is on a <see cref="F:System.Xaml.XamlNodeType.StartMember" />
    ///  .</summary>
    ///<returns>The current member; or <see langword="null" />
    ///  , if the reader position is not on a member.</returns>
    property Member: DNXamlMember read get_Member;
    ///<summary>When implemented in a derived class, gets an object that provides XAML schema context information for the information set.</summary>
    ///<returns>An object that provides XAML schema context information for the information set.</returns>
    property SchemaContext: DNXamlSchemaContext read get_SchemaContext;
  end;

  TDNXamlReader = class(TDNGenericImport<DNXamlReaderClass, DNXamlReader>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlBackgroundReaderClass = interface(DNXamlReaderClass)
  ['{8E7B9F41-845D-5403-8DB4-E6DBAB8F399A}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlBackgroundReader" />
    ///  class. </summary>
    ///  <param name="wrappedReader">The <see cref="T:System.Xaml.XamlReader" />
    ///  that this <see cref="T:System.Xaml.XamlBackgroundReader" />
    ///  is based on. </param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="wrappedReader" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(wrappedReader: DNXamlReader): DNXamlBackgroundReader;

  end;

  ///<summary>Implements a double-buffered <see cref="T:System.Xaml.XamlReader" />
  ///  that can split reading and writing to different threads.</summary>
  [DNTypeName('System.Xaml.XamlBackgroundReader')]
  DNXamlBackgroundReader = interface(DNXamlReader)
  ['{5987C369-819D-31D7-94F4-A71168467412}']
  { getters & setters } 

    function get_NodeType: DNXamlNodeType;
    function get_IsEof: Boolean;
    function get_Namespace: DNNamespaceDeclaration;
    function get_Type: DNXamlType;
    function get_Value: DDN.mscorlib.DNObject;
    function get_Member: DNXamlMember;
    function get_SchemaContext: DNXamlSchemaContext;
    function get_HasLineInfo: Boolean;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;

  { methods } 

    ///<summary>Provides the next XAML node from the source, if a node is available. </summary>
    ///<returns><see langword="true" />
    ///  if a node is available; otherwise, <see langword="false" />
    ///  .</returns>
    function Read: Boolean;
    ///<summary>Creates and starts a new <see cref="T:System.Threading.Thread" />
    ///  (constructed from <see cref="T:System.Threading.ParameterizedThreadStart" />
    ///  ) that handles a named thread for the <see cref="T:System.Xaml.XamlReader" />
    ///  .</summary>
    ///<exception cref="T:System.InvalidOperationException">The thread is already started.</exception>
    procedure StartThread; overload;
    ///<summary>Creates and starts a new <see cref="T:System.Threading.Thread" />
    ///  (constructed from <see cref="T:System.Threading.ParameterizedThreadStart" />
    ///  ) that handles a named thread for the <see cref="T:System.Xaml.XamlReader" />
    ///  . You specify the thread name as a parameter.</summary>
    ///  <param name="threadName">The name for the thread.</param>
    ///<exception cref="T:System.InvalidOperationException">The thread is already started.</exception>
    procedure StartThread(threadName: string); overload;
    ///<summary>Skips the current node and advances the reader position to the next node.</summary>
    procedure Skip;
    ///<summary>Closes the XAML node stream.</summary>
    procedure Close;
    ///<summary>Returns a <see cref="T:System.Xaml.XamlReader" />
    ///  that is based on the current <see cref="T:System.Xaml.XamlReader" />
    ///  , where the returned <see cref="T:System.Xaml.XamlReader" />
    ///  is used to iterate through a subtree of the XAML node structure.</summary>
    ///<returns>A new XAML reader instance for the subtree.</returns>
    function ReadSubtree: DNXamlReader;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the type of the current node.</summary>
    ///<returns>A value of the <see cref="T:System.Xaml.XamlNodeType" />
    ///  enumeration.</returns>
    property NodeType: DNXamlNodeType read get_NodeType;
    ///<summary>Gets a value that reports whether the reader position is at end-of-file.</summary>
    ///<returns><see langword="true" />
    ///  if the position is at end-of-file; otherwise, <see langword="false" />
    ///  .</returns>
    property IsEof: Boolean read get_IsEof;
    ///<summary>Gets the XAML namespace from the current node.</summary>
    ///<returns>The XAML namespace, if it is available; otherwise, <see langword="null" />
    ///  .</returns>
    property Namespace: DNNamespaceDeclaration read get_Namespace;
    ///<summary>Gets the <see cref="T:System.Xaml.XamlType" />
    ///  of the current node.</summary>
    ///<returns>The <see cref="T:System.Xaml.XamlType" />
    ///  of the current node; or <see langword="null" />
    ///  , if the current reader position is not on an object.</returns>
    property &Type: DNXamlType read get_Type;
    ///<summary>Gets the value of the current node.</summary>
    ///<returns>The value of the current node; or <see langword="null" />
    ///  , if the current reader position is not on a <see cref="F:System.Xaml.XamlNodeType.Value" />
    ///  node type.</returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
    ///<summary>Gets the current member at the reader position, if the reader position is on a <see cref="F:System.Xaml.XamlNodeType.StartMember" />
    ///  .</summary>
    ///<returns>The current member; or <see langword="null" />
    ///  , if the position is not on a member.</returns>
    property Member: DNXamlMember read get_Member;
    ///<summary>Gets an object that provides schema context information for the information set.</summary>
    ///<returns>An object that provides schema context information for the information set.</returns>
    property SchemaContext: DNXamlSchemaContext read get_SchemaContext;
    ///<summary>Gets a value that specifies whether line information is available.</summary>
    ///<returns><see langword="true" />
    ///  if line information is available; otherwise, <see langword="false" />
    ///  .</returns>
    property HasLineInfo: Boolean read get_HasLineInfo;
    ///<summary>Gets the line number to report.</summary>
    ///<returns>The line number to report.</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>Gets the line position to report.</summary>
    ///<returns>The line position to report.</returns>
    property LinePosition: Int32 read get_LinePosition;
  end;

  TDNXamlBackgroundReader = class(TDNGenericImport<DNXamlBackgroundReaderClass, DNXamlBackgroundReader>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlObjectReaderClass = interface(DNXamlReaderClass)
  ['{F582809A-2D97-5528-B906-A029D30852A6}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectReader" />
    ///  class.</summary>
    ///  <param name="instance">The root of the object tree / object graph to read.</param>
    {class} function init(instance: DDN.mscorlib.DNObject): DNXamlObjectReader; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectReader" />
    ///  class with the specified reader settings.</summary>
    ///  <param name="instance">The root of the object tree to read.</param>
    ///  <param name="settings">A settings object.</param>
    {class} function init(instance: DDN.mscorlib.DNObject; settings: DNXamlObjectReaderSettings): DNXamlObjectReader; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectReader" />
    ///  class with the specified schema context.</summary>
    ///  <param name="instance">The root of the object tree to read.</param>
    ///  <param name="schemaContext">The schema context for the reader to use.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="schemaContext" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(instance: DDN.mscorlib.DNObject; schemaContext: DNXamlSchemaContext): DNXamlObjectReader; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectReader" />
    ///  class with the specified schema context and reader settings.</summary>
    ///  <param name="instance">The root of the object tree to read.</param>
    ///  <param name="schemaContext">The schema context for the reader to use.</param>
    ///  <param name="settings">A settings object.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="schemaContext" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(instance: DDN.mscorlib.DNObject; schemaContext: DNXamlSchemaContext; settings: DNXamlObjectReaderSettings): DNXamlObjectReader; overload;

  end;

  ///<summary>Provides a <see cref="T:System.Xaml.XamlReader" />
  ///  implementation that reads object graphs and generates a XAML node stream.</summary>
  [DNTypeName('System.Xaml.XamlObjectReader')]
  DNXamlObjectReader = interface(DNXamlReader)
  ['{FE76E107-BD1F-343F-BE38-3376343D33F2}']
  { getters & setters } 

    function get_NodeType: DNXamlNodeType;
    function get_Namespace: DNNamespaceDeclaration;
    function get_Type: DNXamlType;
    function get_Member: DNXamlMember;
    function get_Value: DDN.mscorlib.DNObject;
    function get_SchemaContext: DNXamlSchemaContext;
    function get_IsEof: Boolean;
    function get_Instance: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>Provides the next XAML node from the source object graph, if a node is available. </summary>
    ///<returns><see langword="true" />
    ///  if a node is available; otherwise, <see langword="false" />
    ///  .</returns>
    function Read: Boolean;
    ///<summary>Skips the current node and advances the reader position to the next node.</summary>
    procedure Skip;
    ///<summary>Closes the XAML node stream.</summary>
    procedure Close;
    ///<summary>Returns a <see cref="T:System.Xaml.XamlReader" />
    ///  that is based on the current <see cref="T:System.Xaml.XamlReader" />
    ///  , where the returned <see cref="T:System.Xaml.XamlReader" />
    ///  is used to iterate through a subtree of the XAML node structure.</summary>
    ///<returns>A new XAML reader instance for the subtree.</returns>
    function ReadSubtree: DNXamlReader;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the type of the current node.</summary>
    ///<returns>The type of the current node.</returns>
    property NodeType: DNXamlNodeType read get_NodeType;
    ///<summary>Gets the XAML namespace declaration from the current reader position.</summary>
    ///<returns>The XAML namespace declaration if the reader is positioned on a <see cref="F:System.Xaml.XamlNodeType.NamespaceDeclaration" />
    ///  ; otherwise, <see langword="null" />
    ///  .</returns>
    property Namespace: DNNamespaceDeclaration read get_Namespace;
    ///<summary>Gets the <see cref="T:System.Xaml.XamlType" />
    ///  of the object at the current reader position.</summary>
    ///<returns>The <see cref="T:System.Xaml.XamlType" />
    ///  of the object at the current reader position; or <see langword="null" />
    ///  if the position is not on an object.</returns>
    property &Type: DNXamlType read get_Type;
    ///<summary>Gets the current <see cref="T:System.Xaml.XamlMember" />
    ///  at the reader position, if the reader position is on a <see cref="F:System.Xaml.XamlNodeType.StartMember" />
    ///  .</summary>
    ///<returns>The current member; or <see langword="null" />
    ///  if the reader position is not on a member.</returns>
    property Member: DNXamlMember read get_Member;
    ///<summary>Gets the value of the node at the current reader position.</summary>
    ///<returns>The value of the current node; or <see langword="null" />
    ///  , if the reader position is not on a <see cref="F:System.Xaml.XamlNodeType.Value" />
    ///  node type.</returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
    ///<summary>Gets an object that provides schema information for the information set.</summary>
    ///<returns>An object that provides schema information for the information set.</returns>
    property SchemaContext: DNXamlSchemaContext read get_SchemaContext;
    ///<summary>Gets a value that reports whether the reader position is at the end of the file.</summary>
    ///<returns><see langword="true" />
    ///  if the reader position is at the end of the file; otherwise, <see langword="false" />
    ///  .</returns>
    property IsEof: Boolean read get_IsEof;
    ///<summary>Gets the object instance that is available at the current reader position.</summary>
    ///<returns>The object instance at the current reader position; or <see langword="null" />
    ///  if the reader position is not on an object.</returns>
    property Instance: DDN.mscorlib.DNObject read get_Instance;
  end;

  TDNXamlObjectReader = class(TDNGenericImport<DNXamlObjectReaderClass, DNXamlObjectReader>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlXmlReaderClass = interface(DNXamlReaderClass)
  ['{9E44B2AE-D257-5459-A870-9D5A6FE96FD2}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" />
    ///  class using the provided <see cref="T:System.Xml.XmlReader" />
    ///  .</summary>
    ///  <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" />
    ///  to use as the intermediary XML processor.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xmlReader" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(xmlReader: DDN.System.Xml.DNXmlReader): DNXamlXmlReader; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" />
    ///  class, using the provided <see cref="T:System.Xml.XmlReader" />
    ///  and reader settings.</summary>
    ///  <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" />
    ///  to use as the intermediary XML processor.</param>
    ///  <param name="settings">The specific XAML reader settings.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xmlReader" />
    ///  or <paramref name="schemaContext" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(xmlReader: DDN.System.Xml.DNXmlReader; settings: DNXamlXmlReaderSettings): DNXamlXmlReader; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" />
    ///  class using the provided <see cref="T:System.Xml.XmlReader" />
    ///  and schema context.</summary>
    ///  <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" />
    ///  to use as the intermediary XML processor.</param>
    ///  <param name="schemaContext">The XAML schema context for XAML processing.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xmlReader" />
    ///  or <paramref name="schemaContext" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(xmlReader: DDN.System.Xml.DNXmlReader; schemaContext: DNXamlSchemaContext): DNXamlXmlReader; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" />
    ///  class using the provided <see cref="T:System.Xml.XmlReader" />
    ///  , schema context, and reader settings.</summary>
    ///  <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" />
    ///  to use as the intermediary XML processor.</param>
    ///  <param name="schemaContext">The XAML schema context for XAML processing.</param>
    ///  <param name="settings">The specific XAML reader settings.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xmlReader" />
    ///  or <paramref name="schemaContext" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(xmlReader: DDN.System.Xml.DNXmlReader; schemaContext: DNXamlSchemaContext; settings: DNXamlXmlReaderSettings): DNXamlXmlReader; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" />
    ///  class, based on a file name of a file to load into a default XML reader.</summary>
    ///  <param name="fileName">The name of the XML file to load.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="fileName" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(fileName: string): DNXamlXmlReader; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" />
    ///  class, based on the file name of a file to load into a default XML reader, and using XAML-specific reader settings.</summary>
    ///  <param name="fileName">The name of the XML file to load.</param>
    ///  <param name="settings">The specific reader settings.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="fileName" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(fileName: string; settings: DNXamlXmlReaderSettings): DNXamlXmlReader; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" />
    ///  class, based on the file name of a file to load into a default XML reader, with a supplied XAML schema context.</summary>
    ///  <param name="fileName">The name of the file to load.</param>
    ///  <param name="schemaContext">The XAML schema context for XAML processing.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="fileName" />
    ///  or <paramref name="schemaContext" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(fileName: string; schemaContext: DNXamlSchemaContext): DNXamlXmlReader; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" />
    ///  class, based on the file name of a file to load into a default XML reader, and using a supplied XAML schema context and XAML-specific reader settings.</summary>
    ///  <param name="fileName">The name of the XML file to load.</param>
    ///  <param name="schemaContext">The XAML schema context for XAML processing.</param>
    ///  <param name="settings">The specific reader settings.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="fileName" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="schemaContext" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(fileName: string; schemaContext: DNXamlSchemaContext; settings: DNXamlXmlReaderSettings): DNXamlXmlReader; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" />
    ///  class, based on a stream.</summary>
    ///  <param name="stream">The initial stream to load into the reader.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(stream: DDN.mscorlib.DNStream): DNXamlXmlReader; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" />
    ///  class, based on a stream, with XAML-specific settings.</summary>
    ///  <param name="stream">The initial stream to load into the reader.</param>
    ///  <param name="settings">The specific reader settings.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(stream: DDN.mscorlib.DNStream; settings: DNXamlXmlReaderSettings): DNXamlXmlReader; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" />
    ///  class, based on a stream, and using a supplied XAML schema context.</summary>
    ///  <param name="stream">The initial stream to load into the reader.</param>
    ///  <param name="schemaContext">The XAML schema context for XAML processing.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  or <paramref name="schemaContext" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(stream: DDN.mscorlib.DNStream; schemaContext: DNXamlSchemaContext): DNXamlXmlReader; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" />
    ///  class, based on a stream, with a supplied XAML schema context and XAML-specific settings.</summary>
    ///  <param name="stream">The initial stream to load into the reader.</param>
    ///  <param name="schemaContext">The XAML schema context for XAML processing.</param>
    ///  <param name="settings">The specific reader settings.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  or <paramref name="schemaContext" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(stream: DDN.mscorlib.DNStream; schemaContext: DNXamlSchemaContext; settings: DNXamlXmlReaderSettings): DNXamlXmlReader; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" />
    ///  class, based on a <see cref="T:System.IO.TextReader" />
    ///  .</summary>
    ///  <param name="textReader">The <see cref="T:System.IO.TextReader" />
    ///  to use for initialization.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="textReader" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(textReader: DDN.mscorlib.DNTextReader): DNXamlXmlReader; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" />
    ///  class, based on a <see cref="T:System.IO.TextReader" />
    ///  , and using XAML-specific settings.</summary>
    ///  <param name="textReader">The <see cref="T:System.IO.TextReader" />
    ///  to use for initialization.</param>
    ///  <param name="settings">The specific reader settings.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="textReader" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(textReader: DDN.mscorlib.DNTextReader; settings: DNXamlXmlReaderSettings): DNXamlXmlReader; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" />
    ///  class, based on a <see cref="T:System.IO.TextReader" />
    ///  , with a supplied schema context and XAML-specific settings.</summary>
    ///  <param name="textReader">The <see cref="T:System.IO.TextReader" />
    ///  to use for initialization.</param>
    ///  <param name="schemaContext">The XAML schema context for XAML processing.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="textReader" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="schemaContext" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(textReader: DDN.mscorlib.DNTextReader; schemaContext: DNXamlSchemaContext): DNXamlXmlReader; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" />
    ///  class, based on a <see cref="T:System.IO.TextReader" />
    ///  , and using a supplied schema context and XAML-specific settings.</summary>
    ///  <param name="textReader">The <see cref="T:System.IO.TextReader" />
    ///  to use for initialization.</param>
    ///  <param name="schemaContext">The XAML schema context for XAML processing.</param>
    ///  <param name="settings">The specific reader settings.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="textReader" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="schemaContext" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(textReader: DDN.mscorlib.DNTextReader; schemaContext: DNXamlSchemaContext; settings: DNXamlXmlReaderSettings): DNXamlXmlReader; overload;

  end;

  ///<summary>Processes XAML markup from XML files by using an <see cref="T:System.Xml.XmlReader" />
  ///  intermediary, and produces a XAML node stream.</summary>
  [DNTypeName('System.Xaml.XamlXmlReader')]
  DNXamlXmlReader = interface(DNXamlReader)
  ['{43B26558-9486-31DD-8FD4-DAAC0C4B958A}']
  { getters & setters } 

    function get_NodeType: DNXamlNodeType;
    function get_IsEof: Boolean;
    function get_Namespace: DNNamespaceDeclaration;
    function get_Type: DNXamlType;
    function get_Value: DDN.mscorlib.DNObject;
    function get_Member: DNXamlMember;
    function get_SchemaContext: DNXamlSchemaContext;
    function get_HasLineInfo: Boolean;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;

  { methods } 

    ///<summary>Provides the next XAML node from the loaded source, if a XAML node is available. </summary>
    ///<returns><see langword="true" />
    ///  if a node is available; otherwise, <see langword="false" />
    ///  .</returns>
    function Read: Boolean;
    ///<summary>Skips the current node and advances the reader position to the next node.</summary>
    procedure Skip;
    ///<summary>Closes the XAML node stream.</summary>
    procedure Close;
    ///<summary>Returns a <see cref="T:System.Xaml.XamlReader" />
    ///  that is based on the current <see cref="T:System.Xaml.XamlReader" />
    ///  , where the returned <see cref="T:System.Xaml.XamlReader" />
    ///  is used to iterate through a subtree of the XAML node structure.</summary>
    ///<returns>A new XAML reader instance for the subtree.</returns>
    function ReadSubtree: DNXamlReader;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the type of the current node.</summary>
    ///<returns>A value of the <see cref="T:System.Xaml.XamlNodeType" />
    ///  enumeration.</returns>
    property NodeType: DNXamlNodeType read get_NodeType;
    ///<summary>Gets a value that reports whether the reader position in the XAML node stream is at end-of-file.</summary>
    ///<returns><see langword="true" />
    ///  if the position is at the conceptual end-of-file in the node stream; otherwise, <see langword="false" />
    ///  .</returns>
    property IsEof: Boolean read get_IsEof;
    ///<summary>Gets the XAML namespace from the current node.</summary>
    ///<returns>The XAML namespace from the current node, if it is available; otherwise, <see langword="null" />
    ///  .</returns>
    property Namespace: DNNamespaceDeclaration read get_Namespace;
    ///<summary>Gets the <see cref="T:System.Xaml.XamlType" />
    ///  of the current node.</summary>
    ///<returns>The <see cref="T:System.Xaml.XamlType" />
    ///  of the current node; or <see langword="null" />
    ///  , if the position is not on an object.</returns>
    property &Type: DNXamlType read get_Type;
    ///<summary>Gets the value of the current node.</summary>
    ///<returns>The value of the current node; or <see langword="null" />
    ///  , if the position is not on a <see cref="F:System.Xaml.XamlNodeType.Value" />
    ///  node type.</returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
    ///<summary>Gets the current member at the reader position, if the current reader position is on a <see cref="F:System.Xaml.XamlNodeType.StartMember" />
    ///  .</summary>
    ///<returns>The current member; or <see langword="null" />
    ///  , if the current reader position is not on a member.</returns>
    property Member: DNXamlMember read get_Member;
    ///<summary>Gets an object that provides schema information for the information set.</summary>
    ///<returns>An object that provides schema information for the information set.</returns>
    property SchemaContext: DNXamlSchemaContext read get_SchemaContext;
    ///<summary>Gets a value that specifies whether line information is available.</summary>
    ///<returns><see langword="true" />
    ///  if line information is available; otherwise, <see langword="false" />
    ///  .</returns>
    property HasLineInfo: Boolean read get_HasLineInfo;
    ///<summary>Gets the line number to report.</summary>
    ///<returns>The line number to report.</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>Gets the line position to report.</summary>
    ///<returns>The line position to report.</returns>
    property LinePosition: Int32 read get_LinePosition;
  end;

  TDNXamlXmlReader = class(TDNGenericImport<DNXamlXmlReaderClass, DNXamlXmlReader>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlReaderSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D3036E3F-D484-5D60-8A76-18A94F0BF7A5}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlReaderSettings" />
    ///  class.</summary>
    {class} function init: DNXamlReaderSettings; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlReaderSettings" />
    ///  class based on values in another <see cref="T:System.Xaml.XamlReaderSettings" />
    ///  object.</summary>
    ///  <param name="settings">An existing <see cref="T:System.Xaml.XamlReaderSettings" />
    ///  object.</param>
    {class} function init(settings: DNXamlReaderSettings): DNXamlReaderSettings; overload;

  end;

  ///<summary>Specifies processing rules or option settings for a <see cref="T:System.Xaml.XamlReader" />
  ///  implementation.</summary>
  [DNTypeName('System.Xaml.XamlReaderSettings')]
  DNXamlReaderSettings = interface(DDN.mscorlib.DNObject)
  ['{379121B9-5032-32DC-A4CD-E0AC7EBDDD1C}']
  { getters & setters } 

    function get_AllowProtectedMembersOnRoot: Boolean;
    procedure set_AllowProtectedMembersOnRoot(value: Boolean);
    function get_ProvideLineInfo: Boolean;
    procedure set_ProvideLineInfo(value: Boolean);
    function get_BaseUri: DDN.System.DNUri;
    procedure set_BaseUri(value: DDN.System.DNUri);
    function get_LocalAssembly: DDN.mscorlib.DNAssembly;
    procedure set_LocalAssembly(value: DDN.mscorlib.DNAssembly);
    function get_IgnoreUidsOnPropertyElements: Boolean;
    procedure set_IgnoreUidsOnPropertyElements(value: Boolean);
    function get_ValuesMustBeString: Boolean;
    procedure set_ValuesMustBeString(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a value that indicates whether the root object may include members that have a protected code access model when it reports the XAML type representation.</summary>
    ///<returns><see langword="true" />
    ///  if the root object may include members that have a protected code access model; otherwise, <see langword="false" />
    ///  .</returns>
    property AllowProtectedMembersOnRoot: Boolean read get_AllowProtectedMembersOnRoot write set_AllowProtectedMembersOnRoot;
    ///<summary>Gets or sets a value that specifies whether the reader can provide line number and position.</summary>
    ///<returns><see langword="true" />
    ///  if the reader can provide line number and position information; otherwise, <see langword="false" />
    ///  .</returns>
    property ProvideLineInfo: Boolean read get_ProvideLineInfo write set_ProvideLineInfo;
    ///<summary>Gets or sets the base URI that is used to resolve relative paths.</summary>
    ///<returns>The base URI to use. The default is <see langword="null" />
    ///  .</returns>
    property BaseUri: DDN.System.DNUri read get_BaseUri write set_BaseUri;
    ///<summary>Gets or sets the object that represents the current local assembly for processing. This assembly information is used for calls to helper APIs such as <see cref="M:System.Xaml.XamlType.GetAllMembers" />
    ///  .</summary>
    ///<returns>A CLR reflection <see cref="T:System.Reflection.Assembly" />
    ///  object.</returns>
    property LocalAssembly: DDN.mscorlib.DNAssembly read get_LocalAssembly write set_LocalAssembly;
    ///<summary>Gets or sets a value that specifies whether the XAML reader should ignore values for <see langword="x:Uid" />
    ///  attributes that exist on property elements.</summary>
    ///<returns><see langword="true" />
    ///  if the reader should ignore values for <see langword="x:Uid" />
    ///  attributes on property elements. <see langword="false" />
    ///  if the reader should process <see langword="x:Uid" />
    ///  attributes on property elements. The default is <see langword="false" />
    ///  .</returns>
    property IgnoreUidsOnPropertyElements: Boolean read get_IgnoreUidsOnPropertyElements write set_IgnoreUidsOnPropertyElements;
    ///<summary>Gets or sets a value that specifies whether the reader enforces that all <see langword="Value" />
    ///  nodes are processed as a <see langword="String" />
    ///  type.</summary>
    ///<returns><see langword="true" />
    ///  if the reader enforces that only <see langword="String" />
    ///  is contained in <see langword="Value" />
    ///  nodes; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property ValuesMustBeString: Boolean read get_ValuesMustBeString write set_ValuesMustBeString;
  end;

  TDNXamlReaderSettings = class(TDNGenericImport<DNXamlReaderSettingsClass, DNXamlReaderSettings>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlObjectReaderSettingsClass = interface(DNXamlReaderSettingsClass)
  ['{2080708A-E06F-5DA2-B92A-21C33A3DE22F}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectReaderSettings" />
    ///  class.</summary>
    {class} function init: DNXamlObjectReaderSettings;

  end;

  ///<summary>Specifies processing rules or option settings for a <see cref="T:System.Xaml.XamlObjectReader" />
  ///  .</summary>
  [DNTypeName('System.Xaml.XamlObjectReaderSettings')]
  DNXamlObjectReaderSettings = interface(DNXamlReaderSettings)
  ['{86AFFD22-A947-3A58-874E-BBABAE6261CA}']
  { getters & setters } 

    function get_RequireExplicitContentVisibility: Boolean;
    procedure set_RequireExplicitContentVisibility(value: Boolean);
    function get_AllowProtectedMembersOnRoot: Boolean;
    procedure set_AllowProtectedMembersOnRoot(value: Boolean);
    function get_ProvideLineInfo: Boolean;
    procedure set_ProvideLineInfo(value: Boolean);
    function get_BaseUri: DDN.System.DNUri;
    procedure set_BaseUri(value: DDN.System.DNUri);
    function get_LocalAssembly: DDN.mscorlib.DNAssembly;
    procedure set_LocalAssembly(value: DDN.mscorlib.DNAssembly);
    function get_IgnoreUidsOnPropertyElements: Boolean;
    procedure set_IgnoreUidsOnPropertyElements(value: Boolean);
    function get_ValuesMustBeString: Boolean;
    procedure set_ValuesMustBeString(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a value that determines whether writers that use the associated <see cref="T:System.Xaml.XamlObjectReader" />
    ///  for context should use designer settings for writing content explicitly.</summary>
    ///<returns><see langword="true" />
    ///  to specify that writers that use this context should use designer settings for writing any output content in cases where <see cref="P:System.Xaml.XamlMember.IsWritePublic" />
    ///  reports <see langword="false" />
    ///  ; <see langword="false" />
    ///  if designer settings should be ignored.</returns>
    property RequireExplicitContentVisibility: Boolean read get_RequireExplicitContentVisibility write set_RequireExplicitContentVisibility;
    ///<summary>Gets or sets a value that indicates whether the root object may include members that have a protected code access model when it reports the XAML type representation.</summary>
    ///<returns><see langword="true" />
    ///  if the root object may include members that have a protected code access model; otherwise, <see langword="false" />
    ///  .</returns>
    property AllowProtectedMembersOnRoot: Boolean read get_AllowProtectedMembersOnRoot write set_AllowProtectedMembersOnRoot;
    ///<summary>Gets or sets a value that specifies whether the reader can provide line number and position.</summary>
    ///<returns><see langword="true" />
    ///  if the reader can provide line number and position information; otherwise, <see langword="false" />
    ///  .</returns>
    property ProvideLineInfo: Boolean read get_ProvideLineInfo write set_ProvideLineInfo;
    ///<summary>Gets or sets the base URI that is used to resolve relative paths.</summary>
    ///<returns>The base URI to use. The default is <see langword="null" />
    ///  .</returns>
    property BaseUri: DDN.System.DNUri read get_BaseUri write set_BaseUri;
    ///<summary>Gets or sets the object that represents the current local assembly for processing. This assembly information is used for calls to helper APIs such as <see cref="M:System.Xaml.XamlType.GetAllMembers" />
    ///  .</summary>
    ///<returns>A CLR reflection <see cref="T:System.Reflection.Assembly" />
    ///  object.</returns>
    property LocalAssembly: DDN.mscorlib.DNAssembly read get_LocalAssembly write set_LocalAssembly;
    ///<summary>Gets or sets a value that specifies whether the XAML reader should ignore values for <see langword="x:Uid" />
    ///  attributes that exist on property elements.</summary>
    ///<returns><see langword="true" />
    ///  if the reader should ignore values for <see langword="x:Uid" />
    ///  attributes on property elements. <see langword="false" />
    ///  if the reader should process <see langword="x:Uid" />
    ///  attributes on property elements. The default is <see langword="false" />
    ///  .</returns>
    property IgnoreUidsOnPropertyElements: Boolean read get_IgnoreUidsOnPropertyElements write set_IgnoreUidsOnPropertyElements;
    ///<summary>Gets or sets a value that specifies whether the reader enforces that all <see langword="Value" />
    ///  nodes are processed as a <see langword="String" />
    ///  type.</summary>
    ///<returns><see langword="true" />
    ///  if the reader enforces that only <see langword="String" />
    ///  is contained in <see langword="Value" />
    ///  nodes; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property ValuesMustBeString: Boolean read get_ValuesMustBeString write set_ValuesMustBeString;
  end;

  TDNXamlObjectReaderSettings = class(TDNGenericImport<DNXamlObjectReaderSettingsClass, DNXamlObjectReaderSettings>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlXmlReaderSettingsClass = interface(DNXamlReaderSettingsClass)
  ['{7BAA6A32-5CE0-595A-9C7D-961AF96D5165}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReaderSettings" />
    ///  class.</summary>
    {class} function init: DNXamlXmlReaderSettings; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReaderSettings" />
    ///  class by copying settings from an existing <see cref="T:System.Xaml.XamlXmlReaderSettings" />
    ///  object.</summary>
    ///  <param name="settings">The existing <see cref="T:System.Xaml.XamlXmlReaderSettings" />
    ///  object to copy.</param>
    {class} function init(settings: DNXamlXmlReaderSettings): DNXamlXmlReaderSettings; overload;

  end;

  ///<summary>Specifies processing rules or option settings for the <see cref="T:System.Xaml.XamlXmlReader" />
  ///  XAML reader implementation.</summary>
  [DNTypeName('System.Xaml.XamlXmlReaderSettings')]
  DNXamlXmlReaderSettings = interface(DNXamlReaderSettings)
  ['{0B2C0A03-DCAE-38AB-A1A8-5A05C6EB18E2}']
  { getters & setters } 

    function get_XmlLang: string;
    procedure set_XmlLang(value: string);
    function get_XmlSpacePreserve: Boolean;
    procedure set_XmlSpacePreserve(value: Boolean);
    function get_SkipXmlCompatibilityProcessing: Boolean;
    procedure set_SkipXmlCompatibilityProcessing(value: Boolean);
    function get_CloseInput: Boolean;
    procedure set_CloseInput(value: Boolean);
    function get_AllowProtectedMembersOnRoot: Boolean;
    procedure set_AllowProtectedMembersOnRoot(value: Boolean);
    function get_ProvideLineInfo: Boolean;
    procedure set_ProvideLineInfo(value: Boolean);
    function get_BaseUri: DDN.System.DNUri;
    procedure set_BaseUri(value: DDN.System.DNUri);
    function get_LocalAssembly: DDN.mscorlib.DNAssembly;
    procedure set_LocalAssembly(value: DDN.mscorlib.DNAssembly);
    function get_IgnoreUidsOnPropertyElements: Boolean;
    procedure set_IgnoreUidsOnPropertyElements(value: Boolean);
    function get_ValuesMustBeString: Boolean;
    procedure set_ValuesMustBeString(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets the language setting value that the reader may promote to writers that write <see langword="xml:lang" />
    ///  attributes in nodes.</summary>
    ///<returns>The string to use for possible <see langword="xml:lang" />
    ///  output that is based on the reader.</returns>
    property XmlLang: string read get_XmlLang write set_XmlLang;
    ///<summary>Gets or sets a value that determines whether the XAML reader instructs any XAML writers to write <see langword="xml:space" />
    ///  attributes in nodes. If that behavior is desired, this information is passed through shared XAML schema context.</summary>
    ///<returns><see langword="true" />
    ///  if writers that are processing the XAML node stream can write xml:space="preserve" in output; <see langword="false" />
    ///  if <see langword="xml:space" />
    ///  attributes cannot be written in nodes.</returns>
    property XmlSpacePreserve: Boolean read get_XmlSpacePreserve write set_XmlSpacePreserve;
    ///<summary>Gets or sets a value that determines whether the reader should differ from the default <see cref="T:System.Xaml.XamlXmlReader" />
    ///  behavior of how markup compatibility content is processed.</summary>
    ///<returns><see langword="true" />
    ///  if the initiating reader is directly used, which means that XML compatibility markup is processed as part of the main stream and compatibility is not considered. <see langword="false" />
    ///  if the default behavior is used, which processes XML compatibility separately. The default is <see langword="false" />
    ///  .</returns>
    property SkipXmlCompatibilityProcessing: Boolean read get_SkipXmlCompatibilityProcessing write set_SkipXmlCompatibilityProcessing;
    ///<summary>Gets or sets a value that indicates whether the underlying stream or text reader should be closed when the <see cref="T:System.Xaml.XamlXmlReader" />
    ///  is closed.</summary>
    ///<returns><see langword="true" />
    ///  if the underlying stream or reader should be closed when the <see cref="T:System.Xaml.XamlXmlReader" />
    ///  is closed; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property CloseInput: Boolean read get_CloseInput write set_CloseInput;
    ///<summary>Gets or sets a value that indicates whether the root object may include members that have a protected code access model when it reports the XAML type representation.</summary>
    ///<returns><see langword="true" />
    ///  if the root object may include members that have a protected code access model; otherwise, <see langword="false" />
    ///  .</returns>
    property AllowProtectedMembersOnRoot: Boolean read get_AllowProtectedMembersOnRoot write set_AllowProtectedMembersOnRoot;
    ///<summary>Gets or sets a value that specifies whether the reader can provide line number and position.</summary>
    ///<returns><see langword="true" />
    ///  if the reader can provide line number and position information; otherwise, <see langword="false" />
    ///  .</returns>
    property ProvideLineInfo: Boolean read get_ProvideLineInfo write set_ProvideLineInfo;
    ///<summary>Gets or sets the base URI that is used to resolve relative paths.</summary>
    ///<returns>The base URI to use. The default is <see langword="null" />
    ///  .</returns>
    property BaseUri: DDN.System.DNUri read get_BaseUri write set_BaseUri;
    ///<summary>Gets or sets the object that represents the current local assembly for processing. This assembly information is used for calls to helper APIs such as <see cref="M:System.Xaml.XamlType.GetAllMembers" />
    ///  .</summary>
    ///<returns>A CLR reflection <see cref="T:System.Reflection.Assembly" />
    ///  object.</returns>
    property LocalAssembly: DDN.mscorlib.DNAssembly read get_LocalAssembly write set_LocalAssembly;
    ///<summary>Gets or sets a value that specifies whether the XAML reader should ignore values for <see langword="x:Uid" />
    ///  attributes that exist on property elements.</summary>
    ///<returns><see langword="true" />
    ///  if the reader should ignore values for <see langword="x:Uid" />
    ///  attributes on property elements. <see langword="false" />
    ///  if the reader should process <see langword="x:Uid" />
    ///  attributes on property elements. The default is <see langword="false" />
    ///  .</returns>
    property IgnoreUidsOnPropertyElements: Boolean read get_IgnoreUidsOnPropertyElements write set_IgnoreUidsOnPropertyElements;
    ///<summary>Gets or sets a value that specifies whether the reader enforces that all <see langword="Value" />
    ///  nodes are processed as a <see langword="String" />
    ///  type.</summary>
    ///<returns><see langword="true" />
    ///  if the reader enforces that only <see langword="String" />
    ///  is contained in <see langword="Value" />
    ///  nodes; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property ValuesMustBeString: Boolean read get_ValuesMustBeString write set_ValuesMustBeString;
  end;

  TDNXamlXmlReaderSettings = class(TDNGenericImport<DNXamlXmlReaderSettingsClass, DNXamlXmlReaderSettings>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlSchemaContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2157F060-949B-567D-91DC-530889852589}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  class.</summary>
    {class} function init: DNXamlSchemaContext; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  class, based on a settings object.</summary>
    ///  <param name="settings">The settings object to use to construct the <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  .</param>
    {class} function init(settings: DNXamlSchemaContextSettings): DNXamlSchemaContext; overload;
    {class} function init(referenceAssemblies: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNAssembly>): DNXamlSchemaContext; overload;
    {class} function init(referenceAssemblies: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNAssembly>; settings: DNXamlSchemaContextSettings): DNXamlSchemaContext; overload;

  end;

  ///<summary>Defines a reusable context for interpreting or mapping XAML types, and the types in the assemblies that underlie them.</summary>
  [DNTypeName('System.Xaml.XamlSchemaContext')]
  DNXamlSchemaContext = interface(DDN.mscorlib.DNObject)
  ['{A0025357-31C0-3357-957A-ECE7D49018B7}']
  { getters & setters } 

    function get_SupportMarkupExtensionsWithDuplicateArity: Boolean;
    function get_FullyQualifyAssemblyNamesInClrNamespaces: Boolean;
    function get_ReferenceAssemblies: DDN.mscorlib.DNIList<DDN.mscorlib.DNAssembly>;

  { methods } 

    ///<summary>Returns a <see cref="T:System.Xaml.XamlType" />
    ///  that is based on a XAML system type name.</summary>
    ///  <param name="xamlTypeName">The XAML type name to get a <see cref="T:System.Xaml.XamlType" />
    ///  for.</param>
    ///<returns>The <see cref="T:System.Xaml.XamlType" />
    ///  that matches the input <paramref name="xamlTypeName" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentException">A component of <paramref name="xamlTypeName" />
    ///  (<see cref="P:System.Xaml.Schema.XamlTypeName.Name" />
    ///  or <see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" />
    ///  ) is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentNullException"><paramref name="xamlTypeName" />
    ///  is <see langword="null" />
    ///  .</exception>
    function GetXamlType(xamlTypeName: DNXamlTypeName): DNXamlType; overload;
    ///<summary>Searches the assemblies that are held by this <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  and returns a set of types from the specified XAML namespace. </summary>
    ///  <param name="xamlNamespace">The XAML namespace to return types for.</param>
    ///<returns>An enumerable set of XAML types. Each XAML type in the set is represented by a <see cref="T:System.Xaml.XamlType" />
    ///  object.</returns>
    function GetAllXamlTypes(xamlNamespace: string): DDN.mscorlib.DNICollection<DNXamlType>;
    ///<summary>Returns a <see cref="T:System.Xaml.XamlDirective" />
    ///  value that represents a directive, either for the XAML language or for a particular implementation.</summary>
    ///  <param name="xamlNamespace">The XAML namespace that contains the named directive.</param>
    ///  <param name="name">The name of the directive to obtain.</param>
    ///<returns>A <see cref="T:System.Xaml.XamlDirective" />
    ///  object that represents the requested directive.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xamlNamespace" />
    ///  or <paramref name="name" />
    ///  is <see langword="null" />
    ///  .</exception>
    function GetXamlDirective(xamlNamespace: string; name: string): DNXamlDirective;
    function TryGetCompatibleXamlNamespace(xamlNamespace: string; out compatibleNamespace: string): Boolean;
    ///<summary>Returns a <see cref="T:System.Xaml.XamlType" />
    ///  that is based on a CLR type identifier.</summary>
    ///  <param name="type">The type to get a <see cref="T:System.Xaml.XamlType" />
    ///  for.</param>
    ///<returns>The <see cref="T:System.Xaml.XamlType" />
    ///  that matches the input <paramref name="type" />
    ///  .</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="type" />
    ///  is <see langword="null" />
    ///  .</exception>
    function GetXamlType(&type: DDN.mscorlib.DNType): DNXamlType; overload;
    ///<summary>Searches the assemblies that are held by this <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  and returns a set of namespaces. </summary>
    ///<returns>An enumerable set of namespace identifiers. These identifiers are provided as strings.</returns>
    function GetAllXamlNamespaces: DDN.mscorlib.DNIEnumerable<string>;
    ///<summary>Gets a string that is reported as the preferred prefix for consumers to use when they map the specified XAML namespace.</summary>
    ///  <param name="xmlns">The XAML namespace to get the preferred prefix for.</param>
    ///<returns>A string that consumers should use when they map the specified XAML namespace for markup use.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xmlns" />
    ///  is null.</exception>
    function GetPreferredPrefix(xmlns: string): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets a value that specifies whether a XAML schema and its context support markup extensions that have two constructors with the same arity (number of input parameters).</summary>
    ///<returns><see langword="true" />
    ///  if the schema context permits markup extensions that have duplicate arity; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property SupportMarkupExtensionsWithDuplicateArity: Boolean read get_SupportMarkupExtensionsWithDuplicateArity;
    ///<summary>Gets a value that specifies whether a XAML schema and its context use fully qualified assembly names in the values that are returned by the lookup API.</summary>
    ///<returns><see langword="true" />
    ///  if a XAML schema and its context use fully qualified assembly names in the values that are returned by the lookup APIs; otherwise, <see langword="false" />
    ///  .</returns>
    property FullyQualifyAssemblyNamesInClrNamespaces: Boolean read get_FullyQualifyAssemblyNamesInClrNamespaces;
    ///<summary>Gets an enumerable set of reference assemblies for the XAML schema context.</summary>
    ///<returns>An enumerable set of reference assemblies for the schema context. Each assembly information item is specified by an <see cref="T:System.Reflection.Assembly" />
    ///  value.</returns>
    property ReferenceAssemblies: DDN.mscorlib.DNIList<DDN.mscorlib.DNAssembly> read get_ReferenceAssemblies;
  end;

  TDNXamlSchemaContext = class(TDNGenericImport<DNXamlSchemaContextClass, DNXamlSchemaContext>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlSchemaContextSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{99FAD804-039C-5551-84D3-DA5C5E2F1177}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaContextSettings" />
    ///  class.</summary>
    {class} function init: DNXamlSchemaContextSettings; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaContextSettings" />
    ///  class by copying the values of an existing <see cref="T:System.Xaml.XamlSchemaContextSettings" />
    ///  instance.</summary>
    ///  <param name="settings">An existing <see cref="T:System.Xaml.XamlSchemaContextSettings" />
    ///  . </param>
    {class} function init(settings: DNXamlSchemaContextSettings): DNXamlSchemaContextSettings; overload;

  end;

  ///<summary>Provides optional settings for a <see cref="T:System.Xaml.XamlSchemaContext" />
  ///  .</summary>
  [DNTypeName('System.Xaml.XamlSchemaContextSettings')]
  DNXamlSchemaContextSettings = interface(DDN.mscorlib.DNObject)
  ['{C0C0DDE8-EF5D-3975-81C0-CB7686CACC71}']
  { getters & setters } 

    function get_SupportMarkupExtensionsWithDuplicateArity: Boolean;
    procedure set_SupportMarkupExtensionsWithDuplicateArity(value: Boolean);
    function get_FullyQualifyAssemblyNamesInClrNamespaces: Boolean;
    procedure set_FullyQualifyAssemblyNamesInClrNamespaces(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a value that specifies whether a XAML schema context allows for markup extensions that have two constructors with the same arity (number of input parameters).</summary>
    ///<returns><see langword="true" />
    ///  if the schema context allows for markup extensions that have duplicate arity; otherwise, <see langword="false" />
    ///  .</returns>
    property SupportMarkupExtensionsWithDuplicateArity: Boolean read get_SupportMarkupExtensionsWithDuplicateArity write set_SupportMarkupExtensionsWithDuplicateArity;
    ///<summary>Gets or sets a value that specifies whether a XAML schema and its context use fully qualified assembly names in the values that are returned by the lookup API.</summary>
    ///<returns><see langword="true" />
    ///  if a XAML schema and its context use fully qualified assembly names in the values that are returned by the lookup APIs; otherwise, <see langword="false" />
    ///  .</returns>
    property FullyQualifyAssemblyNamesInClrNamespaces: Boolean read get_FullyQualifyAssemblyNamesInClrNamespaces write set_FullyQualifyAssemblyNamesInClrNamespaces;
  end;

  TDNXamlSchemaContextSettings = class(TDNGenericImport<DNXamlSchemaContextSettingsClass, DNXamlSchemaContextSettings>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlServicesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{61D87373-793E-5B13-966F-408DB00E571E}']
  { static methods } 

    ///<summary>Loads a specific XAML reader implementation and returns an object graph.</summary>
    ///  <param name="xamlReader">The XAML reader implementation to use as the reader for this <see langword="Load" />
    ///  operation.</param>
    ///<returns>The object graph that is returned.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xamlReader" />
    ///  input is <see langword="null" />
    ///  .</exception>
    {class} function Load(xamlReader: DNXamlReader): DDN.mscorlib.DNObject; overload;
    ///<summary>Connects a <see cref="T:System.Xaml.XamlReader" />
    ///  and a <see cref="T:System.Xaml.XamlWriter" />
    ///  to use a common XAML node set intermediary. Potentially transforms the content, depending on the types of readers and writers that are provided.</summary>
    ///  <param name="xamlReader">The <see cref="T:System.Xaml.XamlReader" />
    ///  implementation to use.</param>
    ///  <param name="xamlWriter">The <see cref="T:System.Xaml.XamlWriter" />
    ///  to use.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xamlReader" />
    ///  or <paramref name="xamlWriter" />
    ///  input is <see langword="null" />
    ///  .</exception><exception cref="T:System.Xaml.XamlException">The XAML schema context does not match between the provided <paramref name="xamlReader" />
    ///  and <paramref name="xamlWriter" />
    ///  .</exception>
    {class} procedure Transform(xamlReader: DNXamlReader; xamlWriter: DNXamlWriter); overload;
    ///<summary>Connects a <see cref="T:System.Xaml.XamlReader" />
    ///  and a <see cref="T:System.Xaml.XamlWriter" />
    ///  to use a common XAML node set intermediary. Potentially transforms the content, depending on the types of readers and writers that are provided. Provides a parameter for specifying whether to close the writer after the call is completed.</summary>
    ///  <param name="xamlReader">The <see cref="T:System.Xaml.XamlReader" />
    ///  implementation to use.</param>
    ///  <param name="xamlWriter">The <see cref="T:System.Xaml.XamlWriter" />
    ///  to use.</param>
    ///  <param name="closeWriter"><see langword="true" />
    ///  to close the writer after the call is complete; <see langword="false" />
    ///  to leave the writer active at the last written position.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xamlReader" />
    ///  or <paramref name="xamlWriter" />
    ///  input is <see langword="null" />
    ///  .</exception><exception cref="T:System.Xaml.XamlException">The XAML schema context does not match between the provided <paramref name="xamlReader" />
    ///  and <paramref name="xamlWriter" />
    ///  .</exception>
    {class} procedure Transform(xamlReader: DNXamlReader; xamlWriter: DNXamlWriter; closeWriter: Boolean); overload;
    ///<summary>Loads a specific XML reader implementation and returns an object graph.</summary>
    ///  <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" />
    ///  implementation to use as the reader for this <see langword="Load" />
    ///  operation.</param>
    ///<returns>The output object graph.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xamlReader" />
    ///  input is <see langword="null" />
    ///  .</exception>
    {class} function Load(xmlReader: DDN.System.Xml.DNXmlReader): DDN.mscorlib.DNObject; overload;
    ///<summary>Processes a provided object graph into a XAML node representation and then writes it to the provided <see cref="T:System.Xml.XmlWriter" />
    ///  .</summary>
    ///  <param name="writer">The <see cref="T:System.Xml.XmlWriter" />
    ///  implementation to use.</param>
    ///  <param name="instance">The root of the object graph to process.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="writer" />
    ///  input is <see langword="null" />
    ///  .</exception>
    {class} procedure Save(writer: DDN.System.Xml.DNXmlWriter; instance: DDN.mscorlib.DNObject); overload;
    ///<summary>Processes a provided object graph into a XAML node representation and then writes it to the provided XAML writer.</summary>
    ///  <param name="writer">The <see cref="T:System.Xaml.XamlWriter" />
    ///  implementation to use.</param>
    ///  <param name="instance">The root of the object graph to process.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="writer" />
    ///  input is <see langword="null" />
    ///  .</exception>
    {class} procedure Save(writer: DNXamlWriter; instance: DDN.mscorlib.DNObject); overload;
    ///<summary>Reads XAML as string output and returns an object graph.</summary>
    ///  <param name="xaml">The XAML string input to parse.</param>
    ///<returns>The object graph that is returned.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xaml" />
    ///  input is <see langword="null" />
    ///  .</exception>
    {class} function Parse(xaml: string): DDN.mscorlib.DNObject;
    ///<summary>Loads a <see cref="T:System.IO.Stream" />
    ///  source for a XAML reader and returns an object graph.</summary>
    ///  <param name="fileName">The file name to load and use as source.</param>
    ///<returns>The object graph that is returned.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="fileName" />
    ///  input is <see langword="null" />
    ///  .</exception>
    {class} function Load(fileName: string): DDN.mscorlib.DNObject; overload;
    ///<summary>Loads a <see cref="T:System.IO.Stream" />
    ///  source for a XAML reader and writes its output as an object graph.</summary>
    ///  <param name="stream">The stream to load as input.</param>
    ///<returns>The object graph that is written as output.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function Load(stream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject; overload;
    ///<summary>Creates a XAML reader from a <see cref="T:System.IO.TextReader" />
    ///  , and returns an object graph.</summary>
    ///  <param name="textReader">The <see cref="T:System.IO.TextReader" />
    ///  to use as the basis for the created <see cref="T:System.Xml.XmlReader" />
    ///  .</param>
    ///<returns>The object graph that is returned.</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="textReader" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function Load(textReader: DDN.mscorlib.DNTextReader): DDN.mscorlib.DNObject; overload;
    ///<summary>Processes a provided object tree into a XAML node representation, and returns a string representation of the output XAML.</summary>
    ///  <param name="instance">The root of the object graph to process.</param>
    ///<returns>The XAML markup output as a string. </returns>
    {class} function Save(instance: DDN.mscorlib.DNObject): string; overload;
    ///<summary>Processes a provided object graph into a XAML node representation and then writes it to an output file at a provided location.</summary>
    ///  <param name="fileName">The name and location of the file to write the output to.</param>
    ///  <param name="instance">The root of the object graph to process.</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="fileName" />
    ///  is an empty string.</exception><exception cref="T:System.ArgumentNullException"><paramref name="fileName" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} procedure Save(fileName: string; instance: DDN.mscorlib.DNObject); overload;
    ///<summary>Processes a provided object graph into a XAML node representation and then into an output stream for serialization.</summary>
    ///  <param name="stream">The destination stream.</param>
    ///  <param name="instance">The root of the object graph to process.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  input is <see langword="null" />
    ///  .</exception>
    {class} procedure Save(stream: DDN.mscorlib.DNStream; instance: DDN.mscorlib.DNObject); overload;
    ///<summary>Processes a provided object graph into a XAML node representation and then into an output that goes to the provided <see cref="T:System.IO.TextWriter" />
    ///  .</summary>
    ///  <param name="writer">The <see cref="T:System.IO.TextWriter" />
    ///  that writes the output.</param>
    ///  <param name="instance">The root of the object graph to process.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="writer" />
    ///  input is <see langword="null" />
    ///  .</exception>
    {class} procedure Save(writer: DDN.mscorlib.DNTextWriter; instance: DDN.mscorlib.DNObject); overload;

  end;

  ///<summary>Provides higher-level services (static methods) for the common XAML tasks of reading XAML and writing an object graph; or reading an object graph and writing XAML file output for serialization purposes.</summary>
  [DNTypeName('System.Xaml.XamlServices')]
  DNXamlServices = interface(DDN.mscorlib.DNObject)
  ['{255333F4-C269-34DC-A876-95F89A228F7A}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXamlServices = class(TDNGenericImport<DNXamlServicesClass, DNXamlServices>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlTypeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DC196BB2-CAB4-5371-A9AC-83789196654A}']
  { constructors } 

    {class} function init(unknownTypeNamespace: string; unknownTypeName: string; typeArguments: DDN.mscorlib.DNIList<DNXamlType>; schemaContext: DNXamlSchemaContext): DNXamlType; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlType" />
    ///  class based on the underlying CLR type information.</summary>
    ///  <param name="underlyingType">The underlying CLRÂ <see cref="T:System.Type" />
    ///  for the XAML type to construct.</param>
    ///  <param name="schemaContext">XAML schema context for XAML readers or XAML writers.</param>
    ///<exception cref="T:System.ArgumentNullException">One or more of <paramref name="underlyingType" />
    ///  or <paramref name="schemaContext" />
    ///  are <see langword="null" />
    ///  .</exception>
    {class} function init(underlyingType: DDN.mscorlib.DNType; schemaContext: DNXamlSchemaContext): DNXamlType; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlType" />
    ///  class based on underlying type information and a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  implementation.</summary>
    ///  <param name="underlyingType">The underlying type for the XAML type to construct.</param>
    ///  <param name="schemaContext">XAML schema context for the XAML reader.</param>
    ///  <param name="invoker">The <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  implementation that handles run-time reflection calls against the <see cref="T:System.Xaml.XamlType" />
    ///  .</param>
    ///<exception cref="T:System.ArgumentNullException">One or more of <paramref name="underlyingType" />
    ///  or <paramref name="schemaContext" />
    ///  are <see langword="null" />
    ///  .</exception>
    {class} function init(underlyingType: DDN.mscorlib.DNType; schemaContext: DNXamlSchemaContext; invoker: DNXamlTypeInvoker): DNXamlType; overload;

  end;

  ///<summary>Reports information about XAML types as part of the overall XAML system that is implemented in .NET Framework XAML Services.</summary>
  [DNTypeName('System.Xaml.XamlType')]
  DNXamlType = interface(DDN.mscorlib.DNObject)
  ['{C9020E0A-FE08-3394-B87C-A15699678950}']
  { getters & setters } 

    function get_BaseType: DNXamlType;
    function get_Invoker: DNXamlTypeInvoker;
    function get_IsNameValid: Boolean;
    function get_IsUnknown: Boolean;
    function get_Name: string;
    function get_PreferredXamlNamespace: string;
    function get_TypeArguments: DDN.mscorlib.DNIList<DNXamlType>;
    function get_UnderlyingType: DDN.mscorlib.DNType;
    function get_ConstructionRequiresArguments: Boolean;
    function get_IsArray: Boolean;
    function get_IsCollection: Boolean;
    function get_IsConstructible: Boolean;
    function get_IsDictionary: Boolean;
    function get_IsGeneric: Boolean;
    function get_IsMarkupExtension: Boolean;
    function get_IsNameScope: Boolean;
    function get_IsNullable: Boolean;
    function get_IsPublic: Boolean;
    function get_IsUsableDuringInitialization: Boolean;
    function get_IsWhitespaceSignificantCollection: Boolean;
    function get_IsXData: Boolean;
    function get_TrimSurroundingWhitespace: Boolean;
    function get_IsAmbient: Boolean;
    function get_KeyType: DNXamlType;
    function get_ItemType: DNXamlType;
    function get_AllowedContentTypes: DDN.mscorlib.DNIList<DNXamlType>;
    function get_ContentWrappers: DDN.mscorlib.DNIList<DNXamlType>;
    function get_TypeConverter: DNXamlValueConverter<DDN.System.DNTypeConverter>;
    function get_ValueSerializer: DNXamlValueConverter<DNValueSerializer>;
    function get_ContentProperty: DNXamlMember;
    function get_DeferringLoader: DNXamlValueConverter<DNXamlDeferringLoader>;
    function get_MarkupExtensionReturnType: DNXamlType;
    function get_SchemaContext: DNXamlSchemaContext;

  { methods } 

    ///<summary>Returns the XAML member that is aliased to a XAML directive by this <see cref="T:System.Xaml.XamlType" />
    ///  .</summary>
    ///  <param name="directive">The directive for which to find the aliased member.</param>
    ///<returns>The aliased member, if found; otherwise, <see langword="null" />
    ///  .</returns>
    function GetAliasedProperty(directive: DNXamlDirective): DNXamlMember;
    ///<summary>Returns a list of string identifiers for XAML namespaces that the type is included in.</summary>
    ///<returns>A list of string values, where each string is the URI identifier for a XAML namespace.</returns>
    function GetXamlNamespaces: DDN.mscorlib.DNIList<string>;
    ///<summary>Returns a <see cref="T:System.Xaml.XamlMember" />
    ///  for a specific named member from this <see cref="T:System.Xaml.XamlType" />
    ///  .</summary>
    ///  <param name="name">The name of the member to get (as a string).</param>
    ///<returns>The <see cref="T:System.Xaml.XamlMember" />
    ///  information for the member, if such a member was found; otherwise, <see langword="null" />
    ///  .</returns>
    function GetMember(name: string): DNXamlMember;
    ///<summary>Returns a <see cref="T:System.Xaml.XamlMember" />
    ///  representing a specific named attachable member of this <see cref="T:System.Xaml.XamlType" />
    ///  .</summary>
    ///  <param name="name">The name of the attachable member to get, in ownerTypeName.MemberName form.</param>
    ///<returns>A <see cref="T:System.Xaml.XamlMember" />
    ///  object for the requested attachable member; otherwise, <see langword="null" />
    ///  , if no attachable member by that name exists.</returns>
    function GetAttachableMember(name: string): DNXamlMember;
    ///<summary>For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this <see cref="T:System.Xaml.XamlType" />
    ///  .</summary>
    ///  <param name="parameterCount">The count (arity) of the particular syntax or constructor mode that you want information about.</param>
    ///<returns>A list of <see cref="T:System.Xaml.XamlType" />
    ///  values, where each <see cref="T:System.Xaml.XamlType" />
    ///  is the type for that position in the syntax. You must specify the types in the same order when you supply markup input for the markup extension.</returns>
    function GetPositionalParameters(parameterCount: Int32): DDN.mscorlib.DNIList<DNXamlType>;
    ///<summary>Returns a value that indicates whether an instance of this <see cref="T:System.Xaml.XamlType" />
    ///  has the specified <see cref="T:System.Xaml.XamlType" />
    ///  in its list of assignable types.</summary>
    ///  <param name="xamlType">The type to check against the current <see cref="T:System.Xaml.XamlType" />
    ///  .</param>
    ///<returns><see langword="true" />
    ///  if <paramref name="xamlType" />
    ///  is in the assignable types list; otherwise, <see langword="false" />
    ///  .</returns>
    function CanAssignTo(xamlType: DNXamlType): Boolean;
    ///<summary>Returns a string representation of this <see cref="T:System.Xaml.XamlType" />
    ///  .</summary>
    ///<returns>A string representation of this <see cref="T:System.Xaml.XamlType" />
    ///  .</returns>
    function ToString: string;
    ///<summary>Indicates whether the current object is equal to another object.</summary>
    ///  <param name="obj">The object to compare with this object.</param>
    ///<returns><see langword="true" />
    ///  if the current object is equal to the <paramref name="obj" />
    ///  parameter; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>Returns the hash code for this object.</summary>
    ///<returns>An integer hash code.</returns>
    function GetHashCode: Int32;
    ///<summary>Indicates whether the current object is equal to another object of the same type.</summary>
    ///  <param name="other">An object to compare with this object.</param>
    ///<returns><see langword="true" />
    ///  if the current object is equal to the <paramref name="other" />
    ///  parameter; otherwise, <see langword="false" />
    ///  .</returns>
    function Equals(other: DNXamlType): Boolean; overload;
    ///<summary>Returns a collection that contains all the members that are exposed by this <see cref="T:System.Xaml.XamlType" />
    ///  .</summary>
    ///<returns>A collection that contains zero or more <see cref="T:System.Xaml.XamlMember" />
    ///  values.</returns>
    function GetAllMembers: DDN.mscorlib.DNICollection<DNXamlMember>;
    ///<summary>Returns a collection that contains all the attachable properties that are exposed by this <see cref="T:System.Xaml.XamlType" />
    ///  .</summary>
    ///<returns>A collection that contains zero or more <see cref="T:System.Xaml.XamlMember" />
    ///  values.</returns>
    function GetAllAttachableMembers: DDN.mscorlib.DNICollection<DNXamlMember>;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Xaml.XamlType" />
    ///  for the immediate base type of this XAML type. Determination of this value is based on the underlying type of this <see cref="T:System.Xaml.XamlType" />
    ///  and schema context.</summary>
    ///<returns>The <see cref="T:System.Xaml.XamlType" />
    ///  for the immediate base type of this XAML type.</returns>
    property BaseType: DNXamlType read get_BaseType;
    ///<summary>Gets the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  implementation that is associated with this <see cref="T:System.Xaml.XamlType" />
    ///  .</summary>
    ///<returns>The <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />
    ///  implementation that is associated with this <see cref="T:System.Xaml.XamlType" />
    ///  .</returns>
    property Invoker: DNXamlTypeInvoker read get_Invoker;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" />
    ///  is initialized by using a valid <see langword="xamlName" />
    ///  string as its <see cref="P:System.Xaml.XamlType.Name" />
    ///  .</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlType" />
    ///  is initialized by using a valid <see langword="xamlName" />
    ///  string; otherwise, <see langword="false" />
    ///  .</returns>
    property IsNameValid: Boolean read get_IsNameValid;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" />
    ///  represents a type that cannot be resolved in the underlying type system.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlType" />
    ///  represents an unresolvable type; otherwise, <see langword="false" />
    ///  .</returns>
    property IsUnknown: Boolean read get_IsUnknown;
    ///<summary>Gets the string name of the type that this <see cref="T:System.Xaml.XamlType" />
    ///  represents.</summary>
    ///<returns>The string name of this XAML type.</returns>
    property Name: string read get_Name;
    ///<summary>Gets the single XAML namespace that is the primary XAML namespace for this <see cref="T:System.Xaml.XamlType" />
    ///  . </summary>
    ///<returns>The identifier, as a string, of the primary XAML namespace for this XAML type.</returns>
    property PreferredXamlNamespace: string read get_PreferredXamlNamespace;
    ///<summary>Gets a list of type arguments for cases where this <see cref="T:System.Xaml.XamlType" />
    ///  represents a generic.</summary>
    ///<returns>A list of type argument types; otherwise, <see langword="null" />
    ///  , if this <see cref="T:System.Xaml.XamlType" />
    ///  does not represent a generic.</returns>
    property TypeArguments: DDN.mscorlib.DNIList<DNXamlType> read get_TypeArguments;
    ///<summary>Gets the CLR <see cref="T:System.Type" />
    ///  that underlies this <see cref="T:System.Xaml.XamlType" />
    ///  .</summary>
    ///<returns>The CLR <see cref="T:System.Type" />
    ///  that underlies this <see cref="T:System.Xaml.XamlType" />
    ///  .</returns>
    property UnderlyingType: DDN.mscorlib.DNType read get_UnderlyingType;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" />
    ///  must have arguments (generic constraints through <see langword="x:TypeArguments" />
    ///  , initialization text, or other XAML techniques) to construct a valid instance of the type.</summary>
    ///<returns><see langword="true" />
    ///  if construction of an instance requires some argument value; otherwise, <see langword="false" />
    ///  . </returns>
    property ConstructionRequiresArguments: Boolean read get_ConstructionRequiresArguments;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" />
    ///  represents an array.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlType" />
    ///  represents an array; otherwise, <see langword="false" />
    ///  .</returns>
    property IsArray: Boolean read get_IsArray;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" />
    ///  represents a collection.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlType" />
    ///  represents a collection; otherwise, <see langword="false" />
    ///  .</returns>
    property IsCollection: Boolean read get_IsCollection;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" />
    ///  represents a constructible type, as per the XAML definition.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlType" />
    ///  represents a constructible type; otherwise, <see langword="false" />
    ///  .</returns>
    property IsConstructible: Boolean read get_IsConstructible;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" />
    ///  represents a dictionary, as per the XAML definition.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlType" />
    ///  represents a dictionary; otherwise, <see langword="false" />
    ///  .</returns>
    property IsDictionary: Boolean read get_IsDictionary;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" />
    ///  represents a generic type.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlType" />
    ///  represents a generic type; otherwise, <see langword="false" />
    ///  .</returns>
    property IsGeneric: Boolean read get_IsGeneric;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" />
    ///  represents a markup extension.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlType" />
    ///  represents a markup extension; otherwise, <see langword="false" />
    ///  .</returns>
    property IsMarkupExtension: Boolean read get_IsMarkupExtension;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" />
    ///  represents a XAML namescope, as per the XAML definition.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlType" />
    ///  represents a XAML namescope; otherwise, <see langword="false" />
    ///  .</returns>
    property IsNameScope: Boolean read get_IsNameScope;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" />
    ///  represents a nullable type, as per the XAML definition.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlType" />
    ///  represents a nullable type; otherwise, <see langword="false" />
    ///  .</returns>
    property IsNullable: Boolean read get_IsNullable;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" />
    ///  represents a public type in the relevant type system.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlType" />
    ///  represents a public type; otherwise, <see langword="false" />
    ///  .</returns>
    property IsPublic: Boolean read get_IsPublic;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" />
    ///  is built top-down during XAML initialization.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlType" />
    ///  is built top-down during XAML initialization; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property IsUsableDuringInitialization: Boolean read get_IsUsableDuringInitialization;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" />
    ///  represents a whitespace significant collection, as per the XML definition.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlType" />
    ///  represents a whitespace significant collection; otherwise, <see langword="false" />
    ///  .</returns>
    property IsWhitespaceSignificantCollection: Boolean read get_IsWhitespaceSignificantCollection;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" />
    ///  represents XML <see langword="XDATA" />
    ///  , as per the XAML definition.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlType" />
    ///  represents <see langword="XDATA" />
    ///  ; otherwise, <see langword="false" />
    ///  .</returns>
    property IsXData: Boolean read get_IsXData;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" />
    ///  has whitespace handling behavior for serialization that trims the surrounding whitespace in its content.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlType" />
    ///  represents a type that uses whitespace trimming; otherwise, <see langword="false" />
    ///  .</returns>
    property TrimSurroundingWhitespace: Boolean read get_TrimSurroundingWhitespace;
    ///<summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" />
    ///  represents an ambient type, as per the XAML definition.</summary>
    ///<returns><see langword="true" />
    ///  if this <see cref="T:System.Xaml.XamlType" />
    ///  represents an ambient type; otherwise, <see langword="false" />
    ///  .</returns>
    property IsAmbient: Boolean read get_IsAmbient;
    ///<summary>Gets a value that provides the type information for the key property of this <see cref="T:System.Xaml.XamlType" />
    ///  , if the <see cref="T:System.Xaml.XamlType" />
    ///  represents a dictionary.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlType" />
    ///  object for the type of the key for dictionary usage, otherwise, <see langword="null" />
    ///  , if this <see cref="T:System.Xaml.XamlType" />
    ///  does not represent a dictionary.</returns>
    property KeyType: DNXamlType read get_KeyType;
    ///<summary>Gets a value that provides the type information for the <see langword="Items" />
    ///  property of this <see cref="T:System.Xaml.XamlType" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlType" />
    ///  object for the type of the items in the collection; otherwise, <see langword="null" />
    ///  , if this <see cref="T:System.Xaml.XamlType" />
    ///  does not represent a collection.</returns>
    property ItemType: DNXamlType read get_ItemType;
    ///<summary>Gets a read-only collection of the types that are usable as the <see cref="P:System.Xaml.XamlType.ContentProperty" />
    ///  value for this <see cref="T:System.Xaml.XamlType" />
    ///  .</summary>
    ///<returns>A read-only collection of possible content types.</returns>
    property AllowedContentTypes: DDN.mscorlib.DNIList<DNXamlType> read get_AllowedContentTypes;
    ///<summary>Gets the types that are used to wrap content for a content property when it is not a strict type match, such as strings in a strongly typed <see langword="Collection&lt;T&gt;" />
    ///  .</summary>
    ///<returns>A read-only collection of possible content wrapper types; otherwise, <see langword="null" />
    ///  . See Remarks.</returns>
    property ContentWrappers: DDN.mscorlib.DNIList<DNXamlType> read get_ContentWrappers;
    ///<summary>Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  with <see cref="T:System.ComponentModel.TypeConverter" />
    ///  constraint that represents type conversion behavior for values of this <see cref="T:System.Xaml.XamlType" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  with <see cref="T:System.ComponentModel.TypeConverter" />
    ///  constraint that represents type conversion behavior for values of this <see cref="T:System.Xaml.XamlType" />
    ///  .</returns>
    property TypeConverter: DNXamlValueConverter<DDN.System.DNTypeConverter> read get_TypeConverter;
    ///<summary>Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  with <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  constraint that represents value serialization behavior for values of this <see cref="T:System.Xaml.XamlType" />
    ///  .</summary>
    ///<returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  with <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  constraint that represents value serialization behavior for values of this <see cref="T:System.Xaml.XamlType" />
    ///  ; otherwise, <see langword="null" />
    ///  .</returns>
    property ValueSerializer: DNXamlValueConverter<DNValueSerializer> read get_ValueSerializer;
    ///<summary>Gets the <see cref="T:System.Xaml.XamlMember" />
    ///  information for the content property of this <see cref="T:System.Xaml.XamlType" />
    ///  .</summary>
    ///<returns><see cref="T:System.Xaml.XamlMember" />
    ///  information for the content property of this <see cref="T:System.Xaml.XamlType" />
    ///  . May be <see langword="null" />
    ///  if no content property exists.</returns>
    property ContentProperty: DNXamlMember read get_ContentProperty;
    ///<summary>Gets the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  that represents the deferred loading conversion behavior for this type.</summary>
    ///<returns>The <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />
    ///  with <see cref="T:System.Xaml.XamlDeferringLoader" />
    ///  constraint that represents the deferred loading behavior for this type.</returns>
    property DeferringLoader: DNXamlValueConverter<DNXamlDeferringLoader> read get_DeferringLoader;
    ///<summary>Gets a value that provides the type information for the returned <see langword="ProvideValue" />
    ///  of this <see cref="T:System.Xaml.XamlType" />
    ///  , if it represents a markup extension.</summary>
    ///<returns>A <see cref="T:System.Xaml.XamlType" />
    ///  object for the return type for markup extension usage; otherwise, <see langword="null" />
    ///  , if this <see cref="T:System.Xaml.XamlType" />
    ///  does not represent a markup extension.</returns>
    property MarkupExtensionReturnType: DNXamlType read get_MarkupExtensionReturnType;
    ///<summary>Gets the active <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  for processing this <see cref="T:System.Xaml.XamlType" />
    ///  .</summary>
    ///<returns>The active <see cref="T:System.Xaml.XamlSchemaContext" />
    ///  for processing this <see cref="T:System.Xaml.XamlType" />
    ///  .</returns>
    property SchemaContext: DNXamlSchemaContext read get_SchemaContext;
  end;

  TDNXamlType = class(TDNGenericImport<DNXamlTypeClass, DNXamlType>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlWriterClass = interface(DNObjectClass)
  ['{663F5CFE-A8F9-5878-A078-13E01A5CD08F}']
  end;

  ///<summary>Provides default implementation and base class definitions for a XAML writer. This is not a working default XAML writer; you must either derive from <see cref="T:System.Xaml.XamlWriter" />
  ///  and implement its abstract members, or use an existing <see cref="T:System.Xaml.XamlWriter" />
  ///  derived class.</summary>
  [DNTypeName('System.Xaml.XamlWriter')]
  DNXamlWriter = interface(DDN.mscorlib.DNIDisposable)
  ['{CFB694F7-CF05-3294-BC32-CE04F8110DA1}']
  { getters & setters } 

    function get_SchemaContext: DNXamlSchemaContext;

  { methods } 

    ///<summary>Performs switching based on node type from the XAML reader (<see cref="P:System.Xaml.XamlReader.NodeType" />
    ///  ) and calls the relevant <see langword="Write" />
    ///  method for the writer implementation.</summary>
    ///  <param name="reader">The reader to use for node determination.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="reader" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.NotImplementedException">The default implementation encountered a <see cref="T:System.Xaml.XamlNodeType" />
    ///  that is not in the default enumeration.</exception>
    procedure WriteNode(reader: DNXamlReader);
    ///<summary>Closes the XAML writer object.</summary>
    procedure Close;
    ///<summary>When implemented in a derived class, produces an object for cases where the object is a default or implicit value of the property being set, instead of being specified as a discrete object value in the input XAML node set.</summary>
    procedure WriteGetObject;
    ///<summary>When implemented in a derived class, writes the representation of a start object node.</summary>
    ///  <param name="type">The XAML type of the object to write.</param>
    procedure WriteStartObject(&type: DNXamlType);
    ///<summary>When implemented in a derived class, produces the representation of an end object node.</summary>
    procedure WriteEndObject;
    ///<summary>When implemented in a derived class, writes the representation of a start member node.</summary>
    ///  <param name="xamlMember">The member node to write.</param>
    procedure WriteStartMember(xamlMember: DNXamlMember);
    ///<summary>When implemented in a derived class, produces the representation of an end member node.</summary>
    procedure WriteEndMember;
    ///<summary>When implemented in a derived class, writes a value node.</summary>
    ///  <param name="value">The value to write.</param>
    procedure WriteValue(value: DDN.mscorlib.DNObject);
    ///<summary>When implemented in a derived class, writes a XAML namespace declaration node.</summary>
    ///  <param name="namespaceDeclaration">The namespace declaration to write.</param>
    procedure WriteNamespace(namespaceDeclaration: DNNamespaceDeclaration);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>When implemented in a derived class, gets the active XAML schema context.</summary>
    ///<returns>The active XAML schema context.</returns>
    property SchemaContext: DNXamlSchemaContext read get_SchemaContext;
  end;

  TDNXamlWriter = class(TDNGenericImport<DNXamlWriterClass, DNXamlWriter>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlObjectWriterClass = interface(DNXamlWriterClass)
  ['{C0EF8255-9C0C-52AF-9C93-9DF62E9B0A42}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriter" />
    ///  class using  the XAML schema context that is used by a <see cref="T:System.Xaml.XamlReader" />
    ///  .</summary>
    ///  <param name="schemaContext">A XAML schema context that is shared with the XAML reader that provides nodes for writing.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="schemaContext" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(schemaContext: DNXamlSchemaContext): DNXamlObjectWriter; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriter" />
    ///  class using the context that is used by a <see cref="T:System.Xaml.XamlReader" />
    ///  and its settings.</summary>
    ///  <param name="schemaContext">A XAML schema context that is shared with the XAML reader that provides nodes for writing.</param>
    ///  <param name="settings">A settings object that specifies certain options for <see cref="T:System.Xaml.XamlObjectWriter" />
    ///  behavior and output.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="schemaContext" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(schemaContext: DNXamlSchemaContext; settings: DNXamlObjectWriterSettings): DNXamlObjectWriter; overload;

  end;

  ///<summary>Creates an object graph from a source XAML node stream.</summary>
  [DNTypeName('System.Xaml.XamlObjectWriter')]
  DNXamlObjectWriter = interface(DNXamlWriter)
  ['{0BDDD3BA-B361-336E-BEEA-1DB10B8BC6F1}']
  { getters & setters } 

    function get_RootNameScope: DNINameScope;
    function get_Result: DDN.mscorlib.DNObject;
    function get_SchemaContext: DNXamlSchemaContext;
    function get_ShouldProvideLineInfo: Boolean;

  { methods } 

    ///<summary>Resets all possible frames and clears the object graph.</summary>
    procedure Clear;
    ///<summary>Writes the conceptual <see langword="StartObject" />
    ///  into the object graph when the specified object is a default or implicit value of the parent property. The implicit value comes from information that is obtained from the XAML schema context and backing type information, instead of being specified as an object value in the input XAML node set.</summary>
    procedure WriteGetObject;
    ///<summary>Writes an object node into the current scope, and sets the scope to a new object scope.</summary>
    ///  <param name="xamlType">The type to write. Typically you obtain this value from a XAML reader.</param>
    ///<exception cref="T:System.Xaml.XamlObjectWriterException">Processing an <see cref="P:System.Xaml.XamlType.IsUnknown" />
    ///  type and cannot create an object.-or-Attempted to write a start object in an invalid scope.</exception><exception cref="T:System.Xaml.XamlParseException">Attempted to write a root object when the root object was already provided in the settings. </exception><exception cref="T:System.ArgumentNullException"><paramref name="xamlType" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure WriteStartObject(xamlType: DNXamlType);
    ///<summary>Closes the current object scope in the writer. The new object scope becomes the parent member scope.</summary>
    procedure WriteEndObject;
    ///<summary>Writes a new member node into the current object scope, and the scope becomes a new member scope.</summary>
    ///  <param name="property">The XAML property to write. Typically you obtain this value from a XAML reader through the XAML node stream intermediate.</param>
    ///<exception cref="T:System.Xaml.XamlObjectWriterException"><paramref name="property" />
    ///  has <see cref="P:System.Xaml.XamlMember.IsUnknown" />
    ///  set to <see langword="true" />
    ///  .-or-
    ///<see cref="P:System.Xaml.XamlLanguage.UnknownContent" />
    ///  passed, which indicates that the XAML node stream contained content for an object that does not support content.-or-Attempted to write a start member in an invalid scope.</exception><exception cref="T:System.Xaml.XamlDuplicateMemberException"><paramref name="property" />
    ///  specifies a property that is already explicitly set in the parent object scope.</exception><exception cref="T:System.ArgumentNullException"><paramref name="property" />
    ///  is <see langword="null" />
    ///  .</exception>
    procedure WriteStartMember(&property: DNXamlMember);
    ///<summary>Closes the current member scope, and may write the value of the member scope while it closes. The new scope becomes the parent object scope of the member.</summary>
    ///<exception cref="T:System.Xaml.XamlObjectWriterException">Failed to create member value from a value node that is encountered between this call and a previous <see langword="StartMember" />
    ///  .</exception>
    procedure WriteEndMember;
    ///<summary>Writes a value to the current member scope. If the current scope is inside a collection, dictionary, or array object, the value should be added to the collection, dictionary, or array.</summary>
    ///  <param name="value">The value to write.</param>
    ///<exception cref="T:System.Xaml.XamlObjectWriterException">Attempted to write a value in an invalid scope.</exception>
    procedure WriteValue(value: DDN.mscorlib.DNObject);
    ///<summary>Defines a namespace declaration that applies to the next object scope or member scope.</summary>
    ///  <param name="namespaceDeclaration">The namespace declaration to write.</param>
    ///<exception cref="T:System.ArgumentNullException">The <paramref name="namespaceDeclaration" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException">A component of <paramref name="namespaceDeclaration" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.Xaml.XamlObjectReaderException">Tried to write a XAML namespace node in an invalid scope.</exception>
    procedure WriteNamespace(namespaceDeclaration: DNNamespaceDeclaration);
    ///<summary>Implements <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" />
    ///  and provides line information for exceptions.</summary>
    ///  <param name="lineNumber">The line number from the reader.</param>
    ///  <param name="linePosition">The line position from the reader.</param>
    procedure SetLineInfo(lineNumber: Int32; linePosition: Int32);
    ///<summary>Performs switching based on node type from the XAML reader (<see cref="P:System.Xaml.XamlReader.NodeType" />
    ///  ) and calls the relevant <see langword="Write" />
    ///  method for the writer implementation.</summary>
    ///  <param name="reader">The reader to use for node determination.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="reader" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.NotImplementedException">The default implementation encountered a <see cref="T:System.Xaml.XamlNodeType" />
    ///  that is not in the default enumeration.</exception>
    procedure WriteNode(reader: DNXamlReader);
    ///<summary>Closes the XAML writer object.</summary>
    procedure Close;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the <see cref="T:System.Windows.Markup.INameScope" />
    ///  service that maintains the XAML namescope for the absolute node root of the XAML object writer.</summary>
    ///<returns>The <see cref="T:System.Windows.Markup.INameScope" />
    ///  service that maintains the XAML namescope for the current root of the object writer.</returns>
    property RootNameScope: DNINameScope read get_RootNameScope;
    ///<summary>Gets the last object that was written. Typically only called when the node stream is at its end and the object graph is complete.</summary>
    ///<returns>The last object written, or <see langword="null" />
    ///  . See Remarks.</returns>
    property Result: DDN.mscorlib.DNObject read get_Result;
    ///<summary>Gets the active XAML schema context.</summary>
    ///<returns>The XAML schema context.</returns>
    property SchemaContext: DNXamlSchemaContext read get_SchemaContext;
    ///<summary>Gets a value that reports whether a line information service should provide values and therefore, should also call the <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" />
    ///  method when it is relevant.</summary>
    ///<returns><see langword="true" />
    ///  if line information is used by the writer; otherwise, <see langword="false" />
    ///  .</returns>
    property ShouldProvideLineInfo: Boolean read get_ShouldProvideLineInfo;
  end;

  TDNXamlObjectWriter = class(TDNGenericImport<DNXamlObjectWriterClass, DNXamlObjectWriter>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlXmlWriterClass = interface(DNXamlWriterClass)
  ['{00B27133-C013-57B3-BCF0-ED25F404BC3E}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  class from a stream.</summary>
    ///  <param name="stream">The stream to write.</param>
    ///  <param name="schemaContext">The XAML schema context for the XAML writer.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  is <see langword="null" />
    ///  .-or-
    ///  <paramref name="schemaContext" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(stream: DDN.mscorlib.DNStream; schemaContext: DNXamlSchemaContext): DNXamlXmlWriter; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  class from a stream using a writer settings object.</summary>
    ///  <param name="stream">The stream to write.</param>
    ///  <param name="schemaContext">The XAML schema context for the XAML writer.</param>
    ///  <param name="settings">An instance of <see cref="T:System.Xaml.XamlXmlWriterSettings" />
    ///  , which typically has specific non-default settings.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  or <paramref name="schemaContext" />
    ///  is <see langword="null" />
    ///</exception>
    {class} function init(stream: DDN.mscorlib.DNStream; schemaContext: DNXamlSchemaContext; settings: DNXamlXmlWriterSettings): DNXamlXmlWriter; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  class from a <see cref="T:System.IO.TextWriter" />
    ///  basis.</summary>
    ///  <param name="textWriter">The <see cref="T:System.IO.TextWriter" />
    ///  that writes the output.</param>
    ///  <param name="schemaContext">The XAML schema context for the XAML writer.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="textWriter" />
    ///  or <paramref name="schemaContext" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(textWriter: DDN.mscorlib.DNTextWriter; schemaContext: DNXamlSchemaContext): DNXamlXmlWriter; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  class from a <see cref="T:System.IO.TextWriter" />
    ///  basis using a settings object.</summary>
    ///  <param name="textWriter">The <see cref="T:System.IO.TextWriter" />
    ///  that writes the output.</param>
    ///  <param name="schemaContext">The XAML schema context for the XAML writer.</param>
    ///  <param name="settings">An instance of <see cref="T:System.Xaml.XamlXmlWriterSettings" />
    ///  , which typically has specific non-default settings.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="textWriter" />
    ///  or <paramref name="schemaContext" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(textWriter: DDN.mscorlib.DNTextWriter; schemaContext: DNXamlSchemaContext; settings: DNXamlXmlWriterSettings): DNXamlXmlWriter; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  class from a <see cref="T:System.Xml.XmlWriter" />
    ///  basis.</summary>
    ///  <param name="xmlWriter">The <see cref="T:System.Xml.XmlWriter" />
    ///  that writes the output.</param>
    ///  <param name="schemaContext">The XAML schema context for the XAML writer.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xmlWriter" />
    ///  or <paramref name="schemaContext" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(xmlWriter: DDN.System.Xml.DNXmlWriter; schemaContext: DNXamlSchemaContext): DNXamlXmlWriter; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  class from a <see cref="T:System.Xml.XmlWriter" />
    ///  basis using a settings object.</summary>
    ///  <param name="xmlWriter">The <see cref="T:System.Xml.XmlWriter" />
    ///  that writes the output.</param>
    ///  <param name="schemaContext">The XAML schema context for the XAML writer.</param>
    ///  <param name="settings">An instance of <see cref="T:System.Xaml.XamlXmlWriterSettings" />
    ///  , which typically has specific non-default settings.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="xmlWriter" />
    ///  or <paramref name="schemaContext" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(xmlWriter: DDN.System.Xml.DNXmlWriter; schemaContext: DNXamlSchemaContext; settings: DNXamlXmlWriterSettings): DNXamlXmlWriter; overload;

  end;

  ///<summary>Uses a <see cref="T:System.IO.TextWriter" />
  ///  or <see cref="T:System.Xml.XmlWriter" />
  ///  support class to write a XAML node stream to a text or markup serialized form.</summary>
  [DNTypeName('System.Xaml.XamlXmlWriter')]
  DNXamlXmlWriter = interface(DNXamlWriter)
  ['{274FA15D-5982-365B-BAE2-4898D9C1F225}']
  { getters & setters } 

    function get_Settings: DNXamlXmlWriterSettings;
    function get_SchemaContext: DNXamlSchemaContext;

  { methods } 

    ///<summary>Writes an object for cases where the specified object is a default or implicit value of the property that is being written, instead of being specified as an object value in the input XAML node set.</summary>
    procedure WriteGetObject;
    ///<summary>Writes a XAML end object node to the underlying <see cref="T:System.Xml.XmlWriter" />
    ///  or <see cref="T:System.IO.TextWriter" />
    ///  . Throws an exception if the current position of the XAML node stream that is being processed is incompatible with writing an end object.</summary>
    ///<exception cref="T:System.InvalidOperationException">The current position of the XAML node stream is not in a scope where an end member can be written.</exception><exception cref="T:System.Xaml.XamlXmlWriterException">The current writer state does not support writing an end object.</exception>
    procedure WriteEndObject;
    ///<summary>Writes a XAML end member node to the underlying <see cref="T:System.Xml.XmlWriter" />
    ///  or <see cref="T:System.IO.TextWriter" />
    ///  . Throws an exception if the current position of the XAML node stream is not within a member, or if the internal writer state does not support writing to an end member.</summary>
    ///<exception cref="T:System.InvalidOperationException">The current position of the XAML node stream is not within a member.</exception><exception cref="T:System.Xaml.XamlXmlWriterException">The current writer state does not support writing an end member.</exception>
    procedure WriteEndMember;
    ///<summary>Writes a XAML value node to the underlying <see cref="T:System.Xml.XmlWriter" />
    ///  or <see cref="T:System.IO.TextWriter" />
    ///  . Throws an exception if the current position of the XAML node stream is invalid for writing a value, or the writer is in a state where a value cannot be written.</summary>
    ///  <param name="value">The value information to write.</param>
    ///<exception cref="T:System.InvalidOperationException">The current position of the XAML node stream is not valid for writing a value.</exception><exception cref="T:System.Xaml.XamlXmlWriterException">The XAML writer state does not support the writing of a value node.</exception><exception cref="T:System.ArgumentException"><paramref name="value" />
    ///  specifies a value that is not null or a string.</exception>
    procedure WriteValue(value: DDN.mscorlib.DNObject);
    ///<summary>Calls the <see langword="Flush" />
    ///  method of the underlying <see cref="T:System.Xml.XmlWriter" />
    ///  or <see cref="T:System.IO.TextWriter" />
    ///  , which writes anything that is currently in the buffer, and then closes the writer.</summary>
    procedure Flush;
    ///<summary>Writes a XAML start object node to the underlying <see cref="T:System.Xml.XmlWriter" />
    ///  or <see cref="T:System.IO.TextWriter" />
    ///  . Throws an exception if the current position of the XAML node stream is not in a scope where a start object can be written, or if the writer is not in a state that can write a start object.</summary>
    ///  <param name="type">The <see cref="T:System.Xaml.XamlType" />
    ///  (XAML type identifier) for the object to write.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="type" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="type" />
    ///  is not a valid <see cref="T:System.Xaml.XamlType" />
    ///  .</exception><exception cref="T:System.InvalidOperationException">The current position of the XAML node stream is not valid for writing a new start object.</exception><exception cref="T:System.Xaml.XamlXmlWriterException">The state of the XAML writer is not valid for writing a new start object.</exception>
    procedure WriteStartObject(&type: DNXamlType);
    ///<summary>Writes a XAML start member node to the underlying <see cref="T:System.Xml.XmlWriter" />
    ///  or <see cref="T:System.IO.TextWriter" />
    ///  . Throws an exception if the current position of the XAML node stream is within another member, or if it is not in a scope or writer state where a start member can be written.</summary>
    ///  <param name="property">The XAML member identifier for the member to write.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="property" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="property" />
    ///  is not a valid <see cref="T:System.Xaml.XamlMember" />
    ///  .</exception><exception cref="T:System.InvalidOperationException">The current position of the XAML node stream is invalid for writing a start member.</exception><exception cref="T:System.Xaml.XamlXmlWriterException">The writer state is not valid for writing a start member.-or-The XAML writer attempted to write a duplicate member. This exception may have a more precise inner exception.</exception>
    procedure WriteStartMember(&property: DNXamlMember);
    ///<summary>Writes namespace information to the underlying <see cref="T:System.Xml.XmlWriter" />
    ///  or <see cref="T:System.IO.TextWriter" />
    ///  . May throw an exception for certain states; however, may instead defer writing the namespace information until the writer and the XAML node stream that is being processed reaches a position where a XAML namespace declaration can be inserted.</summary>
    ///  <param name="namespaceDeclaration">The XAML namespace declaration to write.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="namespaceDeclaration" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.ArgumentException"><paramref name="namespaceDeclaration" />
    ///  is not a valid XAML namespace declaration (has a null prefix or null identifier component).</exception><exception cref="T:System.Xaml.XamlXmlWriterException">The current writer state does not support writing a XAML namespace declaration.</exception>
    procedure WriteNamespace(namespaceDeclaration: DNNamespaceDeclaration);
    ///<summary>Performs switching based on node type from the XAML reader (<see cref="P:System.Xaml.XamlReader.NodeType" />
    ///  ) and calls the relevant <see langword="Write" />
    ///  method for the writer implementation.</summary>
    ///  <param name="reader">The reader to use for node determination.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="reader" />
    ///  is <see langword="null" />
    ///  .</exception><exception cref="T:System.NotImplementedException">The default implementation encountered a <see cref="T:System.Xaml.XamlNodeType" />
    ///  that is not in the default enumeration.</exception>
    procedure WriteNode(reader: DNXamlReader);
    ///<summary>Closes the XAML writer object.</summary>
    procedure Close;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets the writer settings that this <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  uses for XAML processing.</summary>
    ///<returns>The writer settings that this <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  uses for XAML processing.</returns>
    property Settings: DNXamlXmlWriterSettings read get_Settings;
    ///<summary>Gets the XAML schema context that this <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  uses for processing.</summary>
    ///<returns>The XAML schema context that this <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  uses for XAML processing.</returns>
    property SchemaContext: DNXamlSchemaContext read get_SchemaContext;
  end;

  TDNXamlXmlWriter = class(TDNGenericImport<DNXamlXmlWriterClass, DNXamlXmlWriter>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlWriterSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0D33BADD-D785-56B8-8C04-1B4D00F63180}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlWriterSettings" />
    ///  class.</summary>
    {class} function init: DNXamlWriterSettings; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlWriterSettings" />
    ///  class using another existing settings instance.</summary>
    ///  <param name="settings">An existing <see cref="T:System.Xaml.XamlWriterSettings" />
    ///  object.</param>
    {class} function init(settings: DNXamlWriterSettings): DNXamlWriterSettings; overload;

  end;

  ///<summary>Provides initialization settings for a <see cref="T:System.Xaml.XamlWriter" />
  ///  implementation.</summary>
  [DNTypeName('System.Xaml.XamlWriterSettings')]
  DNXamlWriterSettings = interface(DDN.mscorlib.DNObject)
  ['{6413231A-9218-3612-B923-09B825F9AEB7}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXamlWriterSettings = class(TDNGenericImport<DNXamlWriterSettingsClass, DNXamlWriterSettings>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlObjectWriterSettingsClass = interface(DNXamlWriterSettingsClass)
  ['{4573DBFA-186E-5C7B-BCB4-BA8BC54B9842}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriterSettings" />
    ///  class.</summary>
    {class} function init: DNXamlObjectWriterSettings; overload;
    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriterSettings" />
    ///  class that is based on the copy of an existing instance.</summary>
    ///  <param name="settings">The settings instance to copy.</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="settings" />
    ///  is <see langword="null" />
    ///  .</exception>
    {class} function init(settings: DNXamlObjectWriterSettings): DNXamlObjectWriterSettings; overload;

  end;

  ///<summary>Provides specific XAML writer settings for <see cref="T:System.Xaml.XamlObjectWriter" />
  ///  .</summary>
  [DNTypeName('System.Xaml.XamlObjectWriterSettings')]
  DNXamlObjectWriterSettings = interface(DNXamlWriterSettings)
  ['{221B47B2-750C-3648-9A7F-094F672D9919}']
  { getters & setters } 

    function get_AfterBeginInitHandler: DDN.mscorlib.DNEventHandler<DNXamlObjectEventArgs>;
    procedure set_AfterBeginInitHandler(value: DDN.mscorlib.DNEventHandler<DNXamlObjectEventArgs>);
    function get_BeforePropertiesHandler: DDN.mscorlib.DNEventHandler<DNXamlObjectEventArgs>;
    procedure set_BeforePropertiesHandler(value: DDN.mscorlib.DNEventHandler<DNXamlObjectEventArgs>);
    function get_AfterPropertiesHandler: DDN.mscorlib.DNEventHandler<DNXamlObjectEventArgs>;
    procedure set_AfterPropertiesHandler(value: DDN.mscorlib.DNEventHandler<DNXamlObjectEventArgs>);
    function get_AfterEndInitHandler: DDN.mscorlib.DNEventHandler<DNXamlObjectEventArgs>;
    procedure set_AfterEndInitHandler(value: DDN.mscorlib.DNEventHandler<DNXamlObjectEventArgs>);
    function get_XamlSetValueHandler: DDN.mscorlib.DNEventHandler<DNXamlSetValueEventArgs>;
    procedure set_XamlSetValueHandler(value: DDN.mscorlib.DNEventHandler<DNXamlSetValueEventArgs>);
    function get_RootObjectInstance: DDN.mscorlib.DNObject;
    procedure set_RootObjectInstance(value: DDN.mscorlib.DNObject);
    function get_IgnoreCanConvert: Boolean;
    procedure set_IgnoreCanConvert(value: Boolean);
    function get_ExternalNameScope: DNINameScope;
    procedure set_ExternalNameScope(value: DNINameScope);
    function get_SkipDuplicatePropertyCheck: Boolean;
    procedure set_SkipDuplicatePropertyCheck(value: Boolean);
    function get_RegisterNamesOnExternalNamescope: Boolean;
    procedure set_RegisterNamesOnExternalNamescope(value: Boolean);
    function get_SkipProvideValueOnRoot: Boolean;
    procedure set_SkipProvideValueOnRoot(value: Boolean);
    function get_PreferUnconvertedDictionaryKeys: Boolean;
    procedure set_PreferUnconvertedDictionaryKeys(value: Boolean);
    function get_SourceBamlUri: DDN.System.DNUri;
    procedure set_SourceBamlUri(value: DDN.System.DNUri);
    function get_AccessLevel: DNXamlAccessLevel;
    procedure set_AccessLevel(value: DNXamlAccessLevel);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a reference to a callback that is invoked by the XAML writer at the <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" />
    ///  phase of the object lifetime for each created object.</summary>
    ///<returns>A callback that is invoked by the XAML writer at the <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" />
    ///  phase of object lifetime.</returns>
    property AfterBeginInitHandler: DDN.mscorlib.DNEventHandler<DNXamlObjectEventArgs> read get_AfterBeginInitHandler write set_AfterBeginInitHandler;
    ///<summary>Gets or sets a reference to a callback that is invoked by the XAML writer at the pre-member-write phase of the object lifetime for each created object.</summary>
    ///<returns>A callback that is invoked by the XAML writer at the pre-member-write phase of object lifetime.</returns>
    property BeforePropertiesHandler: DDN.mscorlib.DNEventHandler<DNXamlObjectEventArgs> read get_BeforePropertiesHandler write set_BeforePropertiesHandler;
    ///<summary>Gets or sets a reference to a callback that is invoked by the XAML writer at the post-member-write phase of the object lifetime for each created object.</summary>
    ///<returns>A callback that is invoked by the XAML writer at the post-member-write phase of object lifetime.</returns>
    property AfterPropertiesHandler: DDN.mscorlib.DNEventHandler<DNXamlObjectEventArgs> read get_AfterPropertiesHandler write set_AfterPropertiesHandler;
    ///<summary>Gets or sets a reference to a callback that is invoked by the XAML writer at the <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" />
    ///  phase of the object lifetime for each created object.</summary>
    ///<returns>A callback that is invoked by the XAML writer at the <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" />
    ///  phase of object lifetime.</returns>
    property AfterEndInitHandler: DDN.mscorlib.DNEventHandler<DNXamlObjectEventArgs> read get_AfterEndInitHandler write set_AfterEndInitHandler;
    ///<summary>Gets or sets the handler to use when the object writer calls into a CLR-implemented <see langword="SetValue" />
    ///  for dependency properties.</summary>
    ///<returns>A handler implementation that handles this case.</returns>
    property XamlSetValueHandler: DDN.mscorlib.DNEventHandler<DNXamlSetValueEventArgs> read get_XamlSetValueHandler write set_XamlSetValueHandler;
    ///<summary>Gets or sets a preexisting root object for <see cref="T:System.Xaml.XamlObjectWriter" />
    ///  operations.</summary>
    ///<returns>A preexisting root object for <see cref="T:System.Xaml.XamlObjectWriter" />
    ///  operations.</returns>
    property RootObjectInstance: DDN.mscorlib.DNObject read get_RootObjectInstance write set_RootObjectInstance;
    ///<summary>Gets or sets a value that specifies whether the XAML writer should ignore (not call) <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
    ///  implementations on a <see cref="T:System.ComponentModel.TypeConverter" />
    ///  in type-converter situations.</summary>
    ///<returns><see langword="true" />
    ///  if the XAML writer ignores <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
    ///  implementations; otherwise, <see langword="false" />
    ///  . The default is <see langword="false" />
    ///  .</returns>
    property IgnoreCanConvert: Boolean read get_IgnoreCanConvert write set_IgnoreCanConvert;
    ///<summary>Gets or sets the XAML namescope to use for registering names from the XAML writer if <see cref="P:System.Xaml.XamlObjectWriterSettings.RegisterNamesOnExternalNamescope" />
    ///  is <see langword="true" />
    ///  .</summary>
    ///<returns>The XAML namescope to use for registering names. The default is <see langword="null" />
    ///  .</returns>
    property ExternalNameScope: DNINameScope read get_ExternalNameScope write set_ExternalNameScope;
    ///<summary>Gets or sets a value that determines whether the XAML writer omits to check for the code path that checks for duplicate properties. </summary>
    ///<returns><see langword="true" />
    ///  if the duplicate property check should be omitted; otherwise, <see langword="false" />
    ///  .</returns>
    property SkipDuplicatePropertyCheck: Boolean read get_SkipDuplicatePropertyCheck write set_SkipDuplicatePropertyCheck;
    ///<summary>Gets or sets a value that determines whether name registration should occur against the specified <see cref="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope" />
    ///  .</summary>
    ///<returns><see langword="true" />
    ///  if name registration should occur against the <see cref="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope" />
    ///  ; <see langword="false" />
    ///  if name registration should occur into the parent XAML namescope. The default is <see langword="false" />
    ///  .</returns>
    property RegisterNamesOnExternalNamescope: Boolean read get_RegisterNamesOnExternalNamescope write set_RegisterNamesOnExternalNamescope;
    ///<summary>Gets or sets a value that indicates whether the <see cref="T:System.Xaml.XamlObjectWriter" />
    ///  should omit to call <see langword="ProvideValue" />
    ///  on a markup extension, which is relevant when the markup extension represents the root of an object graph. </summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Xaml.XamlObjectWriter" />
    ///  should omit to call <see langword="ProvideValue" />
    ///  on a markup extension; otherwise, <see langword="false" />
    ///  .</returns>
    property SkipProvideValueOnRoot: Boolean read get_SkipProvideValueOnRoot write set_SkipProvideValueOnRoot;
    ///<summary>Gets or sets a value that determines whether to disable a default <see cref="T:System.Xaml.XamlObjectWriter" />
    ///  feature that runs type conversion on the <paramref name="K" />
    ///  component of a <see cref="T:System.Collections.Generic.Dictionary`2" />
    ///  before writing the object graph representation.</summary>
    ///<returns><see langword="true" />
    ///  if <paramref name="K" />
    ///  type conversion for a <see cref="T:System.Collections.Generic.Dictionary`2" />
    ///  object should be disabled. <see langword="false" />
    ///  if performing <paramref name="K" />
    ///  type conversion for a <see cref="T:System.Collections.Generic.Dictionary`2" />
    ///  object applies. The default is <see langword="false" />
    ///  .</returns>
    property PreferUnconvertedDictionaryKeys: Boolean read get_PreferUnconvertedDictionaryKeys write set_PreferUnconvertedDictionaryKeys;
    ///<summary>Used in the <see langword="BeginInitHandler" />
    ///  in place of the actual <see langword="BaseUri" />
    ///  . </summary>
    ///<returns>A <see cref="T:System.Uri" />
    ///  to be used in place of the actual <see langword="BaseUri" />
    ///  .</returns>
    property SourceBamlUri: DDN.System.DNUri read get_SourceBamlUri write set_SourceBamlUri;
    ///<summary>Gets or sets <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  permissions that the XAML writer observes.</summary>
    ///<returns>The <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />
    ///  permissions.</returns>
    property AccessLevel: DNXamlAccessLevel read get_AccessLevel write set_AccessLevel;
  end;

  TDNXamlObjectWriterSettings = class(TDNGenericImport<DNXamlObjectWriterSettingsClass, DNXamlObjectWriterSettings>) end;

  //-------------namespace: System.Xaml----------------
  DNXamlXmlWriterSettingsClass = interface(DNXamlWriterSettingsClass)
  ['{CC133E05-1216-56A1-85E9-3A51D4A8E89C}']
  { constructors } 

    ///<summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriterSettings" />
    ///  class.</summary>
    {class} function init: DNXamlXmlWriterSettings;

  end;

  ///<summary>Provides initialization settings for the <see cref="T:System.Xaml.XamlXmlWriter" />
  ///  XAML writer implementation.</summary>
  [DNTypeName('System.Xaml.XamlXmlWriterSettings')]
  DNXamlXmlWriterSettings = interface(DNXamlWriterSettings)
  ['{72A78C6A-1283-3DF5-B892-A3AF188BEAFA}']
  { getters & setters } 

    function get_AssumeValidInput: Boolean;
    procedure set_AssumeValidInput(value: Boolean);
    function get_CloseOutput: Boolean;
    procedure set_CloseOutput(value: Boolean);

  { methods } 

    ///<summary>Returns a copy of this <see cref="T:System.Xaml.XamlXmlWriterSettings" />
    ///  instance.</summary>
    ///<returns>The returned copy.</returns>
    function Copy: DNXamlXmlWriterSettings;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>Gets or sets a value that specifies whether the <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  should always assume valid XAML input for purposes of duplicate resolution or other error checking.</summary>
    ///<returns><see langword="true" />
    ///  if the <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  skips certain validation or error checks, such as throwing exceptions on duplicate members. <see langword="false" />
    ///  if the <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  throws exceptions when invalid XAML is encountered. The default is <see langword="false" />
    ///  .</returns>
    property AssumeValidInput: Boolean read get_AssumeValidInput write set_AssumeValidInput;
    ///<summary>Gets or sets a value that specifies whether the <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  should close immediately on <see langword="Dispose" />
    ///  or other operations, or whether the XAML writer should instead write the buffer output before closing. Use this setting with caution; closing immediately can result in invalid XAML that cannot be loaded again.</summary>
    ///<returns><see langword="true" />
    ///  if <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  immediately closes on a <see langword="Dispose" />
    ///  or similar operations. <see langword="false" />
    ///  if the remaining buffer output is written before the <see cref="T:System.Xaml.XamlXmlWriter" />
    ///  is released. The default is <see langword="false" />
    ///  .</returns>
    property CloseOutput: Boolean read get_CloseOutput write set_CloseOutput;
  end;

  TDNXamlXmlWriterSettings = class(TDNGenericImport<DNXamlXmlWriterSettingsClass, DNXamlXmlWriterSettings>) end;


implementation


initialization
  LoadAssemblyModule('System.Xaml.dll', True);

finalization

end.
