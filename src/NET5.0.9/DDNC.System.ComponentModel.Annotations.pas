//----------------------------------------------------------------------------
//  System.ComponentModel.Annotations.dll: System.ComponentModel.Annotations, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 5.0.9
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.ComponentModel.Annotations
//  Author: ying32
//----------------------------------------------------------------------------

unit DDNC.System.ComponentModel.Annotations;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.System.Private.CoreLib,
  DDNC.System.ComponentModel,
  DDNC.System.ComponentModel.TypeConverter;

type

{ enums }

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  [DNTypeName('System.ComponentModel.DataAnnotations.DataType')]
  DNDataType = type Integer;
  DNDataTypeHelper = record helper for DNDataType
  public const
    Custom = 0;
    DateTime = 1;
    Date = 2;
    Time = 3;
    Duration = 4;
    PhoneNumber = 5;
    Currency = 6;
    Text = 7;
    Html = 8;
    MultilineText = 9;
    EmailAddress = 10;
    Password = 11;
    Url = 12;
    ImageUrl = 13;
    CreditCard = 14;
    PostalCode = 15;
    Upload = 16;
  end;


  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption')]
  DNDatabaseGeneratedOption = type Integer;
  DNDatabaseGeneratedOptionHelper = record helper for DNDatabaseGeneratedOption
  public const
    None = 0;
    Identity = 1;
    Computed = 2;
  end;




type


{ declares }

  DNIValidatableObject = interface; // type: System.ComponentModel.DataAnnotations.IValidatableObject, namespace: System.ComponentModel.DataAnnotations
  DNAssociationAttribute = interface; // type: System.ComponentModel.DataAnnotations.AssociationAttribute, namespace: System.ComponentModel.DataAnnotations
  DNConcurrencyCheckAttribute = interface; // type: System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute, namespace: System.ComponentModel.DataAnnotations
  DNDisplayAttribute = interface; // type: System.ComponentModel.DataAnnotations.DisplayAttribute, namespace: System.ComponentModel.DataAnnotations
  DNDisplayColumnAttribute = interface; // type: System.ComponentModel.DataAnnotations.DisplayColumnAttribute, namespace: System.ComponentModel.DataAnnotations
  DNDisplayFormatAttribute = interface; // type: System.ComponentModel.DataAnnotations.DisplayFormatAttribute, namespace: System.ComponentModel.DataAnnotations
  DNEditableAttribute = interface; // type: System.ComponentModel.DataAnnotations.EditableAttribute, namespace: System.ComponentModel.DataAnnotations
  DNFilterUIHintAttribute = interface; // type: System.ComponentModel.DataAnnotations.FilterUIHintAttribute, namespace: System.ComponentModel.DataAnnotations
  DNKeyAttribute = interface; // type: System.ComponentModel.DataAnnotations.KeyAttribute, namespace: System.ComponentModel.DataAnnotations
  DNMetadataTypeAttribute = interface; // type: System.ComponentModel.DataAnnotations.MetadataTypeAttribute, namespace: System.ComponentModel.DataAnnotations
  DNScaffoldColumnAttribute = interface; // type: System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute, namespace: System.ComponentModel.DataAnnotations
  DNColumnAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.ColumnAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNComplexTypeAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNDatabaseGeneratedAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNForeignKeyAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNInversePropertyAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNNotMappedAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNTableAttribute = interface; // type: System.ComponentModel.DataAnnotations.Schema.TableAttribute, namespace: System.ComponentModel.DataAnnotations.Schema
  DNTimestampAttribute = interface; // type: System.ComponentModel.DataAnnotations.TimestampAttribute, namespace: System.ComponentModel.DataAnnotations
  DNUIHintAttribute = interface; // type: System.ComponentModel.DataAnnotations.UIHintAttribute, namespace: System.ComponentModel.DataAnnotations
  DNValidationAttribute = interface; // type: System.ComponentModel.DataAnnotations.ValidationAttribute, namespace: System.ComponentModel.DataAnnotations
  DNCompareAttribute = interface; // type: System.ComponentModel.DataAnnotations.CompareAttribute, namespace: System.ComponentModel.DataAnnotations
  DNCustomValidationAttribute = interface; // type: System.ComponentModel.DataAnnotations.CustomValidationAttribute, namespace: System.ComponentModel.DataAnnotations
  DNDataTypeAttribute = interface; // type: System.ComponentModel.DataAnnotations.DataTypeAttribute, namespace: System.ComponentModel.DataAnnotations
  DNCreditCardAttribute = interface; // type: System.ComponentModel.DataAnnotations.CreditCardAttribute, namespace: System.ComponentModel.DataAnnotations
  DNEmailAddressAttribute = interface; // type: System.ComponentModel.DataAnnotations.EmailAddressAttribute, namespace: System.ComponentModel.DataAnnotations
  DNEnumDataTypeAttribute = interface; // type: System.ComponentModel.DataAnnotations.EnumDataTypeAttribute, namespace: System.ComponentModel.DataAnnotations
  DNFileExtensionsAttribute = interface; // type: System.ComponentModel.DataAnnotations.FileExtensionsAttribute, namespace: System.ComponentModel.DataAnnotations
  DNPhoneAttribute = interface; // type: System.ComponentModel.DataAnnotations.PhoneAttribute, namespace: System.ComponentModel.DataAnnotations
  DNUrlAttribute = interface; // type: System.ComponentModel.DataAnnotations.UrlAttribute, namespace: System.ComponentModel.DataAnnotations
  DNMaxLengthAttribute = interface; // type: System.ComponentModel.DataAnnotations.MaxLengthAttribute, namespace: System.ComponentModel.DataAnnotations
  DNMinLengthAttribute = interface; // type: System.ComponentModel.DataAnnotations.MinLengthAttribute, namespace: System.ComponentModel.DataAnnotations
  DNRangeAttribute = interface; // type: System.ComponentModel.DataAnnotations.RangeAttribute, namespace: System.ComponentModel.DataAnnotations
  DNRegularExpressionAttribute = interface; // type: System.ComponentModel.DataAnnotations.RegularExpressionAttribute, namespace: System.ComponentModel.DataAnnotations
  DNRequiredAttribute = interface; // type: System.ComponentModel.DataAnnotations.RequiredAttribute, namespace: System.ComponentModel.DataAnnotations
  DNStringLengthAttribute = interface; // type: System.ComponentModel.DataAnnotations.StringLengthAttribute, namespace: System.ComponentModel.DataAnnotations
  DNValidationContext = interface; // type: System.ComponentModel.DataAnnotations.ValidationContext, namespace: System.ComponentModel.DataAnnotations
  DNValidationResult = interface; // type: System.ComponentModel.DataAnnotations.ValidationResult, namespace: System.ComponentModel.DataAnnotations
  DNValidator = interface; // type: System.ComponentModel.DataAnnotations.Validator, namespace: System.ComponentModel.DataAnnotations
  DNAssociatedMetadataTypeTypeDescriptionProvider = interface; // type: System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider, namespace: System.ComponentModel.DataAnnotations
  DNValidationException = interface; // type: System.ComponentModel.DataAnnotations.ValidationException, namespace: System.ComponentModel.DataAnnotations


{ objects }

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  [DNTypeName('System.ComponentModel.DataAnnotations.IValidatableObject')]
  DNIValidatableObject = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{FEC73482-FAD1-339F-AEAF-FB7C715B7D08}']
  { methods } 

    function Validate(validationContext: DNValidationContext): DDNC.System.Private.CoreLib.DNIEnumerable<DNValidationResult>;

  end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNAssociationAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{CC0BE1C9-0404-5303-AEE4-86EF715BC150}']
  { constructors } 

    {class} function init(name: string; thisKey: string; otherKey: string): DNAssociationAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.AssociationAttribute')]
  DNAssociationAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{8EFC9426-BC5F-3C32-8EEC-9946EB6098D5}']
  { getters & setters } 

    function get_Name: string;
    function get_ThisKey: string;
    function get_OtherKey: string;
    function get_IsForeignKey: Boolean;
    procedure set_IsForeignKey(value: Boolean);
    function get_ThisKeyMembers: DDNC.System.Private.CoreLib.DNIEnumerable<string>;
    function get_OtherKeyMembers: DDNC.System.Private.CoreLib.DNIEnumerable<string>;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property ThisKey: string read get_ThisKey;
    property OtherKey: string read get_OtherKey;
    property IsForeignKey: Boolean read get_IsForeignKey write set_IsForeignKey;
    property ThisKeyMembers: DDNC.System.Private.CoreLib.DNIEnumerable<string> read get_ThisKeyMembers;
    property OtherKeyMembers: DDNC.System.Private.CoreLib.DNIEnumerable<string> read get_OtherKeyMembers;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNAssociationAttribute = class(TDNGenericImport<DNAssociationAttributeClass, DNAssociationAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNConcurrencyCheckAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{C3D59F3C-EB5C-5A3F-820C-DC95C7380379}']
  { constructors } 

    {class} function init: DNConcurrencyCheckAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute')]
  DNConcurrencyCheckAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{9A5FCCC2-B9D0-35B3-AEC1-86C42AA63F49}']
  { getters & setters } 

    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNConcurrencyCheckAttribute = class(TDNGenericImport<DNConcurrencyCheckAttributeClass, DNConcurrencyCheckAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNDisplayAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{9E4F8EAC-BE77-5574-950C-21B4050E4921}']
  { constructors } 

    {class} function init: DNDisplayAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.DisplayAttribute')]
  DNDisplayAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{7750B156-147B-32EF-A534-D390F18262D4}']
  { getters & setters } 

    function get_ShortName: string;
    procedure set_ShortName(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Description: string;
    procedure set_Description(value: string);
    function get_Prompt: string;
    procedure set_Prompt(value: string);
    function get_GroupName: string;
    procedure set_GroupName(value: string);
    function get_ResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_AutoGenerateField: Boolean;
    procedure set_AutoGenerateField(value: Boolean);
    function get_AutoGenerateFilter: Boolean;
    procedure set_AutoGenerateFilter(value: Boolean);
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function GetShortName: string;
    function GetName: string;
    function GetDescription: string;
    function GetPrompt: string;
    function GetGroupName: string;
    function GetAutoGenerateField: DDNC.System.Private.CoreLib.DNNullable<Boolean>;
    function GetAutoGenerateFilter: DDNC.System.Private.CoreLib.DNNullable<Boolean>;
    function GetOrder: DDNC.System.Private.CoreLib.DNNullable<Int32>;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property ShortName: string read get_ShortName write set_ShortName;
    property Name: string read get_Name write set_Name;
    property Description: string read get_Description write set_Description;
    property Prompt: string read get_Prompt write set_Prompt;
    property GroupName: string read get_GroupName write set_GroupName;
    property ResourceType: DDNC.System.Private.CoreLib.DNType read get_ResourceType write set_ResourceType;
    property AutoGenerateField: Boolean read get_AutoGenerateField write set_AutoGenerateField;
    property AutoGenerateFilter: Boolean read get_AutoGenerateFilter write set_AutoGenerateFilter;
    property Order: Int32 read get_Order write set_Order;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDisplayAttribute = class(TDNGenericImport<DNDisplayAttributeClass, DNDisplayAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNDisplayColumnAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{85944985-E5F1-5F97-9D04-A357FE07260C}']
  { constructors } 

    {class} function init(displayColumn: string): DNDisplayColumnAttribute; overload;
    {class} function init(displayColumn: string; sortColumn: string): DNDisplayColumnAttribute; overload;
    {class} function init(displayColumn: string; sortColumn: string; sortDescending: Boolean): DNDisplayColumnAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.DisplayColumnAttribute')]
  DNDisplayColumnAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{89B18ADD-EC42-36D2-BDAA-1A49E56744FB}']
  { getters & setters } 

    function get_DisplayColumn: string;
    function get_SortColumn: string;
    function get_SortDescending: Boolean;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property DisplayColumn: string read get_DisplayColumn;
    property SortColumn: string read get_SortColumn;
    property SortDescending: Boolean read get_SortDescending;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDisplayColumnAttribute = class(TDNGenericImport<DNDisplayColumnAttributeClass, DNDisplayColumnAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNDisplayFormatAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{F0F8C56C-265A-531A-AF8C-5B8FDCABBB70}']
  { constructors } 

    {class} function init: DNDisplayFormatAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.DisplayFormatAttribute')]
  DNDisplayFormatAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{ED9E861F-157F-377B-AD14-4B7EA79C0AE0}']
  { getters & setters } 

    function get_DataFormatString: string;
    procedure set_DataFormatString(value: string);
    function get_NullDisplayText: string;
    procedure set_NullDisplayText(value: string);
    function get_ConvertEmptyStringToNull: Boolean;
    procedure set_ConvertEmptyStringToNull(value: Boolean);
    function get_ApplyFormatInEditMode: Boolean;
    procedure set_ApplyFormatInEditMode(value: Boolean);
    function get_HtmlEncode: Boolean;
    procedure set_HtmlEncode(value: Boolean);
    function get_NullDisplayTextResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_NullDisplayTextResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function GetNullDisplayText: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property DataFormatString: string read get_DataFormatString write set_DataFormatString;
    property NullDisplayText: string read get_NullDisplayText write set_NullDisplayText;
    property ConvertEmptyStringToNull: Boolean read get_ConvertEmptyStringToNull write set_ConvertEmptyStringToNull;
    property ApplyFormatInEditMode: Boolean read get_ApplyFormatInEditMode write set_ApplyFormatInEditMode;
    property HtmlEncode: Boolean read get_HtmlEncode write set_HtmlEncode;
    property NullDisplayTextResourceType: DDNC.System.Private.CoreLib.DNType read get_NullDisplayTextResourceType write set_NullDisplayTextResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDisplayFormatAttribute = class(TDNGenericImport<DNDisplayFormatAttributeClass, DNDisplayFormatAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNEditableAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{C70680CB-0FB2-538B-9C15-9761BD4C79AA}']
  { constructors } 

    {class} function init(allowEdit: Boolean): DNEditableAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.EditableAttribute')]
  DNEditableAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{D84622EF-3899-3847-9E4E-3C9EF6CB9A3F}']
  { getters & setters } 

    function get_AllowEdit: Boolean;
    function get_AllowInitialValue: Boolean;
    procedure set_AllowInitialValue(value: Boolean);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property AllowEdit: Boolean read get_AllowEdit;
    property AllowInitialValue: Boolean read get_AllowInitialValue write set_AllowInitialValue;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNEditableAttribute = class(TDNGenericImport<DNEditableAttributeClass, DNEditableAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNFilterUIHintAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{7B5A0964-E180-5414-88E1-89D6CC167A89}']
  { constructors } 

    {class} function init(filterUIHint: string): DNFilterUIHintAttribute; overload;
    {class} function init(filterUIHint: string; presentationLayer: string): DNFilterUIHintAttribute; overload;
    {class} function init(filterUIHint: string; presentationLayer: string; controlParameters: TArray<DDNC.System.Private.CoreLib.DNObject>): DNFilterUIHintAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.FilterUIHintAttribute')]
  DNFilterUIHintAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{9CFEFE57-DE06-34D1-9DC1-E6C7919C33A0}']
  { getters & setters } 

    function get_FilterUIHint: string;
    function get_PresentationLayer: string;
    function get_ControlParameters: DDNC.System.Private.CoreLib.DNIDictionary<string, DDNC.System.Private.CoreLib.DNObject>;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property FilterUIHint: string read get_FilterUIHint;
    property PresentationLayer: string read get_PresentationLayer;
    property ControlParameters: DDNC.System.Private.CoreLib.DNIDictionary<string, DDNC.System.Private.CoreLib.DNObject> read get_ControlParameters;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNFilterUIHintAttribute = class(TDNGenericImport<DNFilterUIHintAttributeClass, DNFilterUIHintAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNKeyAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{B10C7BBE-DBF7-55F1-BDBA-3603B334E29F}']
  { constructors } 

    {class} function init: DNKeyAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.KeyAttribute')]
  DNKeyAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{B1C71DF9-9489-315E-87CB-6CCE208E0775}']
  { getters & setters } 

    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNKeyAttribute = class(TDNGenericImport<DNKeyAttributeClass, DNKeyAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNMetadataTypeAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{F90F6933-BBAF-5837-8AC3-0442289400D4}']
  { constructors } 

    {class} function init(metadataClassType: DDNC.System.Private.CoreLib.DNType): DNMetadataTypeAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.MetadataTypeAttribute')]
  DNMetadataTypeAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{3ED32589-0596-32F8-9924-EF80389D1F73}']
  { getters & setters } 

    function get_MetadataClassType: DDNC.System.Private.CoreLib.DNType;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property MetadataClassType: DDNC.System.Private.CoreLib.DNType read get_MetadataClassType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNMetadataTypeAttribute = class(TDNGenericImport<DNMetadataTypeAttributeClass, DNMetadataTypeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNScaffoldColumnAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{06336A34-E7EE-5176-85A3-90B60D488F60}']
  { constructors } 

    {class} function init(scaffold: Boolean): DNScaffoldColumnAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.ScaffoldColumnAttribute')]
  DNScaffoldColumnAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{3DFD39FB-30FB-3DCA-B5A9-7CAABBD0954E}']
  { getters & setters } 

    function get_Scaffold: Boolean;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Scaffold: Boolean read get_Scaffold;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNScaffoldColumnAttribute = class(TDNGenericImport<DNScaffoldColumnAttributeClass, DNScaffoldColumnAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNColumnAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{3CAD8B9E-8C8C-5894-9A71-DBD97634AABD}']
  { constructors } 

    {class} function init: DNColumnAttribute; overload;
    {class} function init(name: string): DNColumnAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.ColumnAttribute')]
  DNColumnAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{B686F2A3-0AE4-3DC1-95AF-2683F6B71DCA}']
  { getters & setters } 

    function get_Name: string;
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Order: Int32 read get_Order write set_Order;
    property TypeName: string read get_TypeName write set_TypeName;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNColumnAttribute = class(TDNGenericImport<DNColumnAttributeClass, DNColumnAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNComplexTypeAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{53167FB7-8E2D-52A5-8AF7-825782BFEA15}']
  { constructors } 

    {class} function init: DNComplexTypeAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute')]
  DNComplexTypeAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{51161248-25CD-376E-BB14-9045BB59DC32}']
  { getters & setters } 

    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNComplexTypeAttribute = class(TDNGenericImport<DNComplexTypeAttributeClass, DNComplexTypeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNDatabaseGeneratedAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{ABF0E9DB-7095-5615-A1E2-2D9C7337C5D4}']
  { constructors } 

    {class} function init(databaseGeneratedOption: DNDatabaseGeneratedOption): DNDatabaseGeneratedAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute')]
  DNDatabaseGeneratedAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{A73DACBF-3015-39F0-9899-768BBCE856BC}']
  { getters & setters } 

    function get_DatabaseGeneratedOption: DNDatabaseGeneratedOption;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property DatabaseGeneratedOption: DNDatabaseGeneratedOption read get_DatabaseGeneratedOption;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDatabaseGeneratedAttribute = class(TDNGenericImport<DNDatabaseGeneratedAttributeClass, DNDatabaseGeneratedAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNForeignKeyAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{825C7106-DA6E-572A-B224-D705A7CD89FE}']
  { constructors } 

    {class} function init(name: string): DNForeignKeyAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute')]
  DNForeignKeyAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{1273AE7D-8C10-35C1-975D-A542B4518A74}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNForeignKeyAttribute = class(TDNGenericImport<DNForeignKeyAttributeClass, DNForeignKeyAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNInversePropertyAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{7E13A9BB-A68B-5865-BA78-F56CFE0B37A7}']
  { constructors } 

    {class} function init(&property: string): DNInversePropertyAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute')]
  DNInversePropertyAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{CABEF955-EE68-3B46-B784-F8F925074E57}']
  { getters & setters } 

    function get_Property: string;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property &Property: string read get_Property;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNInversePropertyAttribute = class(TDNGenericImport<DNInversePropertyAttributeClass, DNInversePropertyAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNNotMappedAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{BFF4EB78-4D18-59F3-B712-E039955AAB1C}']
  { constructors } 

    {class} function init: DNNotMappedAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute')]
  DNNotMappedAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{955C687B-3D0B-36C7-951D-1C5A0BD4B3C4}']
  { getters & setters } 

    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNNotMappedAttribute = class(TDNGenericImport<DNNotMappedAttributeClass, DNNotMappedAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations.Schema----------------
  DNTableAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{C773970E-B488-5171-A595-7FEB52FDEE23}']
  { constructors } 

    {class} function init(name: string): DNTableAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Schema.TableAttribute')]
  DNTableAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{3572116C-F327-387E-A534-9FDE81B50465}']
  { getters & setters } 

    function get_Name: string;
    function get_Schema: string;
    procedure set_Schema(value: string);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Schema: string read get_Schema write set_Schema;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNTableAttribute = class(TDNGenericImport<DNTableAttributeClass, DNTableAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNTimestampAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{5335CBFC-8618-5AB3-9C6B-3FBFF3D964CF}']
  { constructors } 

    {class} function init: DNTimestampAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.TimestampAttribute')]
  DNTimestampAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{39AD5A67-8455-3EB0-BD1D-CBE1B48301BA}']
  { getters & setters } 

    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNTimestampAttribute = class(TDNGenericImport<DNTimestampAttributeClass, DNTimestampAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNUIHintAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{8A2FCFCA-8983-5E2D-8B28-3596A658E3CB}']
  { constructors } 

    {class} function init(uiHint: string): DNUIHintAttribute; overload;
    {class} function init(uiHint: string; presentationLayer: string): DNUIHintAttribute; overload;
    {class} function init(uiHint: string; presentationLayer: string; controlParameters: TArray<DDNC.System.Private.CoreLib.DNObject>): DNUIHintAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.UIHintAttribute')]
  DNUIHintAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{7D49F54A-D9F8-3789-997A-08D7325209A5}']
  { getters & setters } 

    function get_UIHint: string;
    function get_PresentationLayer: string;
    function get_ControlParameters: DDNC.System.Private.CoreLib.DNIDictionary<string, DDNC.System.Private.CoreLib.DNObject>;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property UIHint: string read get_UIHint;
    property PresentationLayer: string read get_PresentationLayer;
    property ControlParameters: DDNC.System.Private.CoreLib.DNIDictionary<string, DDNC.System.Private.CoreLib.DNObject> read get_ControlParameters;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNUIHintAttribute = class(TDNGenericImport<DNUIHintAttributeClass, DNUIHintAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNValidationAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{2232E9B5-D16E-5594-BBB9-0F898672813A}']
  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.ValidationAttribute')]
  DNValidationAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{E177ECDA-CE4D-35C6-AC4B-E48EE6601B93}']
  { getters & setters } 

    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function FormatErrorMessage(name: string): string;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNValidationAttribute = class(TDNGenericImport<DNValidationAttributeClass, DNValidationAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNCompareAttributeClass = interface(DNValidationAttributeClass)
  ['{C6AE0093-27CF-5227-9353-4E11161BF1AB}']
  { constructors } 

    {class} function init(otherProperty: string): DNCompareAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.CompareAttribute')]
  DNCompareAttribute = interface(DNValidationAttribute)
  ['{FBB7DCD7-94F3-3BA7-B1EB-6C0DB6135C41}']
  { getters & setters } 

    function get_OtherProperty: string;
    function get_OtherPropertyDisplayName: string;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function FormatErrorMessage(name: string): string;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property OtherProperty: string read get_OtherProperty;
    property OtherPropertyDisplayName: string read get_OtherPropertyDisplayName;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNCompareAttribute = class(TDNGenericImport<DNCompareAttributeClass, DNCompareAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNCustomValidationAttributeClass = interface(DNValidationAttributeClass)
  ['{9DDA08B6-217C-5BA5-8102-FE3BB4FECA18}']
  { constructors } 

    {class} function init(validatorType: DDNC.System.Private.CoreLib.DNType; method: string): DNCustomValidationAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.CustomValidationAttribute')]
  DNCustomValidationAttribute = interface(DNValidationAttribute)
  ['{ADF67D71-EAC2-3A56-AEF2-A0635B4854E8}']
  { getters & setters } 

    function get_ValidatorType: DDNC.System.Private.CoreLib.DNType;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;
    function get_Method: string;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);

  { methods } 

    function FormatErrorMessage(name: string): string;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property ValidatorType: DDNC.System.Private.CoreLib.DNType read get_ValidatorType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
    property Method: string read get_Method;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
  end;

  TDNCustomValidationAttribute = class(TDNGenericImport<DNCustomValidationAttributeClass, DNCustomValidationAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNDataTypeAttributeClass = interface(DNValidationAttributeClass)
  ['{368C4767-0373-5DCD-9CC9-571DE2963CFC}']
  { constructors } 

    {class} function init(dataType: DNDataType): DNDataTypeAttribute; overload;
    {class} function init(customDataType: string): DNDataTypeAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.DataTypeAttribute')]
  DNDataTypeAttribute = interface(DNValidationAttribute)
  ['{10C43A4C-48B5-3ED1-96C0-94D5F253C710}']
  { getters & setters } 

    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function GetDataTypeName: string;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property DataType: DNDataType read get_DataType;
    property CustomDataType: string read get_CustomDataType;
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNDataTypeAttribute = class(TDNGenericImport<DNDataTypeAttributeClass, DNDataTypeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNCreditCardAttributeClass = interface(DNDataTypeAttributeClass)
  ['{AD475C46-F96B-52E1-BAB0-0854F5603CDE}']
  { constructors } 

    {class} function init: DNCreditCardAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.CreditCardAttribute')]
  DNCreditCardAttribute = interface(DNDataTypeAttribute)
  ['{9163B355-CA26-3A0F-AFA7-6A51994A05AC}']
  { getters & setters } 

    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetDataTypeName: string;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property DataType: DNDataType read get_DataType;
    property CustomDataType: string read get_CustomDataType;
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNCreditCardAttribute = class(TDNGenericImport<DNCreditCardAttributeClass, DNCreditCardAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNEmailAddressAttributeClass = interface(DNDataTypeAttributeClass)
  ['{C881E325-6E9D-5879-85B7-38ABF9FC39D8}']
  { constructors } 

    {class} function init: DNEmailAddressAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.EmailAddressAttribute')]
  DNEmailAddressAttribute = interface(DNDataTypeAttribute)
  ['{BE1479EB-8722-3068-9D39-3AEDE2307449}']
  { getters & setters } 

    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetDataTypeName: string;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property DataType: DNDataType read get_DataType;
    property CustomDataType: string read get_CustomDataType;
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNEmailAddressAttribute = class(TDNGenericImport<DNEmailAddressAttributeClass, DNEmailAddressAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNEnumDataTypeAttributeClass = interface(DNDataTypeAttributeClass)
  ['{DAA05370-8047-5A8E-8B98-D85D751B9A29}']
  { constructors } 

    {class} function init(enumType: DDNC.System.Private.CoreLib.DNType): DNEnumDataTypeAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.EnumDataTypeAttribute')]
  DNEnumDataTypeAttribute = interface(DNDataTypeAttribute)
  ['{CE4CDF3E-107C-3B10-A930-7EEE3990A1F7}']
  { getters & setters } 

    function get_EnumType: DDNC.System.Private.CoreLib.DNType;
    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetDataTypeName: string;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property EnumType: DDNC.System.Private.CoreLib.DNType read get_EnumType;
    property DataType: DNDataType read get_DataType;
    property CustomDataType: string read get_CustomDataType;
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNEnumDataTypeAttribute = class(TDNGenericImport<DNEnumDataTypeAttributeClass, DNEnumDataTypeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNFileExtensionsAttributeClass = interface(DNDataTypeAttributeClass)
  ['{91770738-E262-5A52-A8AE-DE222132BDD6}']
  { constructors } 

    {class} function init: DNFileExtensionsAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.FileExtensionsAttribute')]
  DNFileExtensionsAttribute = interface(DNDataTypeAttribute)
  ['{8976301C-BEC0-3767-8950-96A8C49C755A}']
  { getters & setters } 

    function get_Extensions: string;
    procedure set_Extensions(value: string);
    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function FormatErrorMessage(name: string): string;
    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetDataTypeName: string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Extensions: string read get_Extensions write set_Extensions;
    property DataType: DNDataType read get_DataType;
    property CustomDataType: string read get_CustomDataType;
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNFileExtensionsAttribute = class(TDNGenericImport<DNFileExtensionsAttributeClass, DNFileExtensionsAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNPhoneAttributeClass = interface(DNDataTypeAttributeClass)
  ['{8FAB3DB5-BB6F-5F2C-B58D-8F09D05CA676}']
  { constructors } 

    {class} function init: DNPhoneAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.PhoneAttribute')]
  DNPhoneAttribute = interface(DNDataTypeAttribute)
  ['{93DA4BCE-404F-37C2-B9B3-B42E5E278300}']
  { getters & setters } 

    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetDataTypeName: string;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property DataType: DNDataType read get_DataType;
    property CustomDataType: string read get_CustomDataType;
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNPhoneAttribute = class(TDNGenericImport<DNPhoneAttributeClass, DNPhoneAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNUrlAttributeClass = interface(DNDataTypeAttributeClass)
  ['{E0F4700A-6267-581E-87DD-9D3EDD2F5D3D}']
  { constructors } 

    {class} function init: DNUrlAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.UrlAttribute')]
  DNUrlAttribute = interface(DNDataTypeAttribute)
  ['{50CE5545-CF26-3BE2-8936-2A0D94BFBE13}']
  { getters & setters } 

    function get_DataType: DNDataType;
    function get_CustomDataType: string;
    function get_DisplayFormat: DNDisplayFormatAttribute;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetDataTypeName: string;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property DataType: DNDataType read get_DataType;
    property CustomDataType: string read get_CustomDataType;
    property DisplayFormat: DNDisplayFormatAttribute read get_DisplayFormat;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNUrlAttribute = class(TDNGenericImport<DNUrlAttributeClass, DNUrlAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNMaxLengthAttributeClass = interface(DNValidationAttributeClass)
  ['{961F92F4-2E78-53EF-920E-B4A610482CBE}']
  { constructors } 

    {class} function init(length: Int32): DNMaxLengthAttribute; overload;
    {class} function init: DNMaxLengthAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.MaxLengthAttribute')]
  DNMaxLengthAttribute = interface(DNValidationAttribute)
  ['{16EDAE6C-ABC7-3B2C-AC2A-130BE9A53F63}']
  { getters & setters } 

    function get_Length: Int32;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Length: Int32 read get_Length;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNMaxLengthAttribute = class(TDNGenericImport<DNMaxLengthAttributeClass, DNMaxLengthAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNMinLengthAttributeClass = interface(DNValidationAttributeClass)
  ['{0FB95B8E-8118-55DA-9DF9-FC896D8612DB}']
  { constructors } 

    {class} function init(length: Int32): DNMinLengthAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.MinLengthAttribute')]
  DNMinLengthAttribute = interface(DNValidationAttribute)
  ['{35BB6440-153A-3BFF-BAA9-52405BADDAE0}']
  { getters & setters } 

    function get_Length: Int32;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Length: Int32 read get_Length;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNMinLengthAttribute = class(TDNGenericImport<DNMinLengthAttributeClass, DNMinLengthAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNRangeAttributeClass = interface(DNValidationAttributeClass)
  ['{895131CC-991C-5D60-8DB3-9105513C536A}']
  { constructors } 

    {class} function init(minimum: Int32; maximum: Int32): DNRangeAttribute; overload;
    {class} function init(minimum: Double; maximum: Double): DNRangeAttribute; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType; minimum: string; maximum: string): DNRangeAttribute; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.RangeAttribute')]
  DNRangeAttribute = interface(DNValidationAttribute)
  ['{5B805118-0D5F-3720-97EB-6D46499553D9}']
  { getters & setters } 

    function get_Minimum: DDNC.System.Private.CoreLib.DNObject;
    function get_Maximum: DDNC.System.Private.CoreLib.DNObject;
    function get_OperandType: DDNC.System.Private.CoreLib.DNType;
    function get_ParseLimitsInInvariantCulture: Boolean;
    procedure set_ParseLimitsInInvariantCulture(value: Boolean);
    function get_ConvertValueInInvariantCulture: Boolean;
    procedure set_ConvertValueInInvariantCulture(value: Boolean);
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Minimum: DDNC.System.Private.CoreLib.DNObject read get_Minimum;
    property Maximum: DDNC.System.Private.CoreLib.DNObject read get_Maximum;
    property OperandType: DDNC.System.Private.CoreLib.DNType read get_OperandType;
    property ParseLimitsInInvariantCulture: Boolean read get_ParseLimitsInInvariantCulture write set_ParseLimitsInInvariantCulture;
    property ConvertValueInInvariantCulture: Boolean read get_ConvertValueInInvariantCulture write set_ConvertValueInInvariantCulture;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNRangeAttribute = class(TDNGenericImport<DNRangeAttributeClass, DNRangeAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNRegularExpressionAttributeClass = interface(DNValidationAttributeClass)
  ['{1D39466B-6F18-526C-B78E-81D23EED2F20}']
  { constructors } 

    {class} function init(pattern: string): DNRegularExpressionAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.RegularExpressionAttribute')]
  DNRegularExpressionAttribute = interface(DNValidationAttribute)
  ['{F2677301-EF41-3851-9ABD-276EAB7AF186}']
  { getters & setters } 

    function get_MatchTimeoutInMilliseconds: Int32;
    procedure set_MatchTimeoutInMilliseconds(value: Int32);
    function get_Pattern: string;
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property MatchTimeoutInMilliseconds: Int32 read get_MatchTimeoutInMilliseconds write set_MatchTimeoutInMilliseconds;
    property Pattern: string read get_Pattern;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNRegularExpressionAttribute = class(TDNGenericImport<DNRegularExpressionAttributeClass, DNRegularExpressionAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNRequiredAttributeClass = interface(DNValidationAttributeClass)
  ['{02089B2B-507B-53FF-B171-7C40B53E0F78}']
  { constructors } 

    {class} function init: DNRequiredAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.RequiredAttribute')]
  DNRequiredAttribute = interface(DNValidationAttribute)
  ['{16FD9BD8-D92F-3045-B61F-4C71D52B5A39}']
  { getters & setters } 

    function get_AllowEmptyStrings: Boolean;
    procedure set_AllowEmptyStrings(value: Boolean);
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property AllowEmptyStrings: Boolean read get_AllowEmptyStrings write set_AllowEmptyStrings;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNRequiredAttribute = class(TDNGenericImport<DNRequiredAttributeClass, DNRequiredAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNStringLengthAttributeClass = interface(DNValidationAttributeClass)
  ['{D9227161-295E-5665-AE30-4F16F6B40FE2}']
  { constructors } 

    {class} function init(maximumLength: Int32): DNStringLengthAttribute;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.StringLengthAttribute')]
  DNStringLengthAttribute = interface(DNValidationAttribute)
  ['{3F765EE3-05C8-32F4-82D7-A26D4A0443E2}']
  { getters & setters } 

    function get_MaximumLength: Int32;
    function get_MinimumLength: Int32;
    procedure set_MinimumLength(value: Int32);
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType;
    procedure set_ErrorMessageResourceType(value: DDNC.System.Private.CoreLib.DNType);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function IsValid(value: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function FormatErrorMessage(name: string): string;
    function GetValidationResult(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext): DNValidationResult;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; name: string); overload;
    procedure Validate(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property MaximumLength: Int32 read get_MaximumLength;
    property MinimumLength: Int32 read get_MinimumLength write set_MinimumLength;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDNC.System.Private.CoreLib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNStringLengthAttribute = class(TDNGenericImport<DNStringLengthAttributeClass, DNStringLengthAttribute>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNValidationContextClass = interface(DNObjectClass)
  ['{469D9D5F-09CF-5989-B13C-D9FA5A416C86}']
  { constructors } 

    {class} function init(instance: DDNC.System.Private.CoreLib.DNObject): DNValidationContext; overload;
    {class} function init(instance: DDNC.System.Private.CoreLib.DNObject; items: DDNC.System.Private.CoreLib.DNIDictionary<DDNC.System.Private.CoreLib.DNObject, DDNC.System.Private.CoreLib.DNObject>): DNValidationContext; overload;
    {class} function init(instance: DDNC.System.Private.CoreLib.DNObject; serviceProvider: DDNC.System.ComponentModel.DNIServiceProvider; items: DDNC.System.Private.CoreLib.DNIDictionary<DDNC.System.Private.CoreLib.DNObject, DDNC.System.Private.CoreLib.DNObject>): DNValidationContext; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.ValidationContext')]
  DNValidationContext = interface(DDNC.System.ComponentModel.DNIServiceProvider)
  ['{DB60EDED-4AB6-35CC-B57D-FAA0D27432B4}']
  { getters & setters } 

    function get_ObjectInstance: DDNC.System.Private.CoreLib.DNObject;
    function get_ObjectType: DDNC.System.Private.CoreLib.DNType;
    function get_DisplayName: string;
    procedure set_DisplayName(value: string);
    function get_MemberName: string;
    procedure set_MemberName(value: string);
    function get_Items: DDNC.System.Private.CoreLib.DNIDictionary<DDNC.System.Private.CoreLib.DNObject, DDNC.System.Private.CoreLib.DNObject>;

  { methods } 

    procedure InitializeServiceProvider(serviceProvider: DDNC.System.Private.CoreLib.DNFunc<DDNC.System.Private.CoreLib.DNType, DDNC.System.Private.CoreLib.DNObject>);
    function GetService(serviceType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ObjectInstance: DDNC.System.Private.CoreLib.DNObject read get_ObjectInstance;
    property ObjectType: DDNC.System.Private.CoreLib.DNType read get_ObjectType;
    property DisplayName: string read get_DisplayName write set_DisplayName;
    property MemberName: string read get_MemberName write set_MemberName;
    property Items: DDNC.System.Private.CoreLib.DNIDictionary<DDNC.System.Private.CoreLib.DNObject, DDNC.System.Private.CoreLib.DNObject> read get_Items;
  end;

  TDNValidationContext = class(TDNGenericImport<DNValidationContextClass, DNValidationContext>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNValidationResultClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{5F10D0D4-6938-51FB-8623-E40CFC8166E7}']
  { constructors } 

    {class} function init(errorMessage: string): DNValidationResult; overload;
    {class} function init(errorMessage: string; memberNames: DDNC.System.Private.CoreLib.DNIEnumerable<string>): DNValidationResult; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Success: DNValidationResult;

  { static fields } 

    {class} property Success: DNValidationResult read __fakeFieldGet_Success;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.ValidationResult')]
  DNValidationResult = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{D2EC34E2-AAD5-3BB1-B299-CA28C53BDACF}']
  { getters & setters } 

    function get_MemberNames: DDNC.System.Private.CoreLib.DNIEnumerable<string>;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);

  { methods } 

    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property MemberNames: DDNC.System.Private.CoreLib.DNIEnumerable<string> read get_MemberNames;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
  end;

  TDNValidationResult = class(TDNGenericImport<DNValidationResultClass, DNValidationResult>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNValidatorClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{6B57838C-04D4-55A7-A0AA-78F754AF9D87}']
  { static methods } 

    {class} function TryValidateProperty(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext; validationResults: DDNC.System.Private.CoreLib.DNICollection<DNValidationResult>): Boolean;
    {class} function TryValidateObject(instance: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext; validationResults: DDNC.System.Private.CoreLib.DNICollection<DNValidationResult>): Boolean; overload;
    {class} function TryValidateObject(instance: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext; validationResults: DDNC.System.Private.CoreLib.DNICollection<DNValidationResult>; validateAllProperties: Boolean): Boolean; overload;
    {class} function TryValidateValue(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext; validationResults: DDNC.System.Private.CoreLib.DNICollection<DNValidationResult>; validationAttributes: DDNC.System.Private.CoreLib.DNIEnumerable<DNValidationAttribute>): Boolean;
    {class} procedure ValidateProperty(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext);
    {class} procedure ValidateObject(instance: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext); overload;
    {class} procedure ValidateObject(instance: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext; validateAllProperties: Boolean); overload;
    {class} procedure ValidateValue(value: DDNC.System.Private.CoreLib.DNObject; validationContext: DNValidationContext; validationAttributes: DDNC.System.Private.CoreLib.DNIEnumerable<DNValidationAttribute>);

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.Validator')]
  DNValidator = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{F581A136-826E-3165-9A5E-B3E56C0E227A}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNValidator = class(TDNGenericImport<DNValidatorClass, DNValidator>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNAssociatedMetadataTypeTypeDescriptionProviderClass = interface(DNObjectClass)
  ['{5C8A1FBC-CE3B-5E8D-A82F-26F250AE93AC}']
  { constructors } 

    {class} function init(&type: DDNC.System.Private.CoreLib.DNType): DNAssociatedMetadataTypeTypeDescriptionProvider; overload;
    {class} function init(&type: DDNC.System.Private.CoreLib.DNType; associatedMetadataType: DDNC.System.Private.CoreLib.DNType): DNAssociatedMetadataTypeTypeDescriptionProvider; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.AssociatedMetadataTypeTypeDescriptionProvider')]
  DNAssociatedMetadataTypeTypeDescriptionProvider = interface(DNObject)
  ['{E14E2397-05E4-3D34-BBAC-BC6EA7E2055C}']
  { methods } 

    function GetTypeDescriptor(objectType: DDNC.System.Private.CoreLib.DNType; instance: DDNC.System.Private.CoreLib.DNObject): DDNC.System.ComponentModel.TypeConverter.DNICustomTypeDescriptor; overload;
    function CreateInstance(provider: DDNC.System.ComponentModel.DNIServiceProvider; objectType: DDNC.System.Private.CoreLib.DNType; argTypes: TArray<DDNC.System.Private.CoreLib.DNType>; args: TArray<DDNC.System.Private.CoreLib.DNObject>): DDNC.System.Private.CoreLib.DNObject;
    function GetCache(instance: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNIDictionary;
    function GetExtendedTypeDescriptor(instance: DDNC.System.Private.CoreLib.DNObject): DDNC.System.ComponentModel.TypeConverter.DNICustomTypeDescriptor;
    function GetFullComponentName(component: DDNC.System.Private.CoreLib.DNObject): string;
    function GetReflectionType(objectType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNType; overload;
    function GetReflectionType(instance: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNType; overload;
    function GetReflectionType(objectType: DDNC.System.Private.CoreLib.DNType; instance: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNType; overload;
    function GetRuntimeType(reflectionType: DDNC.System.Private.CoreLib.DNType): DDNC.System.Private.CoreLib.DNType;
    function GetTypeDescriptor(objectType: DDNC.System.Private.CoreLib.DNType): DDNC.System.ComponentModel.TypeConverter.DNICustomTypeDescriptor; overload;
    function GetTypeDescriptor(instance: DDNC.System.Private.CoreLib.DNObject): DDNC.System.ComponentModel.TypeConverter.DNICustomTypeDescriptor; overload;
    function IsSupportedType(&type: DDNC.System.Private.CoreLib.DNType): Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNAssociatedMetadataTypeTypeDescriptionProvider = class(TDNGenericImport<DNAssociatedMetadataTypeTypeDescriptionProviderClass, DNAssociatedMetadataTypeTypeDescriptionProvider>) end;

  //-------------namespace: System.ComponentModel.DataAnnotations----------------
  DNValidationExceptionClass = interface(DDNC.System.Private.CoreLib.DNExceptionClass)
  ['{1CB8F5F7-E3B2-5E67-8286-2FAAF8C3E4B7}']
  { constructors } 

    {class} function init(validationResult: DNValidationResult; validatingAttribute: DNValidationAttribute; value: DDNC.System.Private.CoreLib.DNObject): DNValidationException; overload;
    {class} function init(errorMessage: string; validatingAttribute: DNValidationAttribute; value: DDNC.System.Private.CoreLib.DNObject): DNValidationException; overload;
    {class} function init: DNValidationException; overload;
    {class} function init(message: string): DNValidationException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNValidationException; overload;

  end;

  [DNTypeName('System.ComponentModel.DataAnnotations.ValidationException')]
  DNValidationException = interface(DDNC.System.Private.CoreLib.DNException)
  ['{73531CA5-A495-3183-9E1E-F988BA02AD4B}']
  { getters & setters } 

    function get_ValidationAttribute: DNValidationAttribute;
    function get_ValidationResult: DNValidationResult;
    function get_Value: DDNC.System.Private.CoreLib.DNObject;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property ValidationAttribute: DNValidationAttribute read get_ValidationAttribute;
    property ValidationResult: DNValidationResult read get_ValidationResult;
    property Value: DDNC.System.Private.CoreLib.DNObject read get_Value;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNValidationException = class(TDNGenericImport<DNValidationExceptionClass, DNValidationException>) end;


implementation


initialization
  InternalTryLoadAssemblyModule('System.ComponentModel.Annotations, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a');

finalization

end.
