//----------------------------------------------------------------------------
//  System.Web.ApplicationServices.dll: System.Web.ApplicationServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.Web.ApplicationServices
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.Web.ApplicationServices;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes feature，fpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System.Configuration,
  DDN.System;

type

{ enums }

  //-------------namespace: System.Web.Configuration----------------
  ///<summary>
  ///  枚举 ASP.NET 成员资格的密码兼容性模式。
  ///</summary>
  [DNTypeName('System.Web.Configuration.MembershipPasswordCompatibilityMode')]
  DNMembershipPasswordCompatibilityMode = type Integer;
  DNMembershipPasswordCompatibilityModeHelper = record helper for DNMembershipPasswordCompatibilityMode
  public const
    ///<summary>
    ///  密码是在 ASP.NET 2.0 模式下。
    ///</summary>
    Framework20 = 0;
    ///<summary>
    ///  密码是在 ASP.NET 4 模式下。
    ///</summary>
    Framework40 = 1;
  end;


  //-------------namespace: System.Web.Security----------------
  ///<summary>
  ///  描述 <see cref="M:System.Web.Security.Membership.CreateUser(System.String,System.String)" />
  ///  操作的结果。
  ///</summary>
  [DNTypeName('System.Web.Security.MembershipCreateStatus')]
  DNMembershipCreateStatus = type Integer;
  DNMembershipCreateStatusHelper = record helper for DNMembershipCreateStatus
  public const
    ///<summary>
    ///  已成功创建该用户。
    ///</summary>
    Success = 0;
    ///<summary>
    ///  在数据库中找不到该用户名。
    ///</summary>
    InvalidUserName = 1;
    ///<summary>
    ///  密码的格式不正确。
    ///</summary>
    InvalidPassword = 2;
    ///<summary>
    ///  密码问题的格式不正确。
    ///</summary>
    InvalidQuestion = 3;
    ///<summary>
    ///  密码问题答案的格式不正确。
    ///</summary>
    InvalidAnswer = 4;
    ///<summary>
    ///  电子邮件地址的格式不正确。
    ///</summary>
    InvalidEmail = 5;
    ///<summary>
    ///  应用程序的数据库中已存在该用户名。
    ///</summary>
    DuplicateUserName = 6;
    ///<summary>
    ///  应用程序的数据库中已存在该电子邮件地址。
    ///</summary>
    DuplicateEmail = 7;
    ///<summary>
    ///  由于提供程序定义的某个原因，未创建该用户。
    ///</summary>
    UserRejected = 8;
    ///<summary>
    ///  提供程序用户密钥的类型或格式无效。
    ///</summary>
    InvalidProviderUserKey = 9;
    ///<summary>
    ///  应用程序的数据库中已存在该提供程序的用户键。
    ///</summary>
    DuplicateProviderUserKey = 10;
    ///<summary>
    ///  提供程序返回一个错误，该错误不由其他 <see cref="T:System.Web.Security.MembershipCreateStatus" />
    ///  枚举值描述。
    ///</summary>
    ProviderError = 11;
  end;


  //-------------namespace: System.Web.Security----------------
  ///<summary>
  ///  描述用于存储成员身份用户密码的加密格式。
  ///</summary>
  [DNTypeName('System.Web.Security.MembershipPasswordFormat')]
  DNMembershipPasswordFormat = type Integer;
  DNMembershipPasswordFormatHelper = record helper for DNMembershipPasswordFormat
  public const
    ///<summary>
    ///  不安全，请勿使用。
    ///  密码未加密。
    ///</summary>
    Clear = 0;
    ///<summary>
    ///  使用 SHA1 哈希算法对密码进行单向加密。
    ///</summary>
    Hashed = 1;
    ///<summary>
    ///  不安全，请勿使用。
    ///  使用由 machineKey 元素（ASP.NET 设置架构）的元素配置确定的加密设置对密码进行加密。
    ///</summary>
    Encrypted = 2;
  end;




type


{ declares }

  DNCustomLoaderAttribute = interface; // type: System.Web.Hosting.CustomLoaderAttribute, namespace: System.Web.Hosting
  DNMembershipProvider = interface; // type: System.Web.Security.MembershipProvider, namespace: System.Web.Security
  DNRoleProvider = interface; // type: System.Web.Security.RoleProvider, namespace: System.Web.Security
  DNMembershipProviderCollection = interface; // type: System.Web.Security.MembershipProviderCollection, namespace: System.Web.Security
  DNValidatePasswordEventArgs = interface; // type: System.Web.Security.ValidatePasswordEventArgs, namespace: System.Web.Security
  DNMembershipCreateUserException = interface; // type: System.Web.Security.MembershipCreateUserException, namespace: System.Web.Security
  DNMembershipPasswordException = interface; // type: System.Web.Security.MembershipPasswordException, namespace: System.Web.Security
  DNMembershipUser = interface; // type: System.Web.Security.MembershipUser, namespace: System.Web.Security
  DNMembershipUserCollection = interface; // type: System.Web.Security.MembershipUserCollection, namespace: System.Web.Security

{ delegates }

  ///<summary>
  ///  表示将处理 <see cref="T:System.Web.Security.MembershipProvider" />
  ///  类的 <see cref="E:System.Web.Security.MembershipProvider.ValidatingPassword" />
  ///  事件的方法。
  ///</summary>
  ///  <param name="sender">
  ///  引发 <see cref="E:System.Web.Security.MembershipProvider.ValidatingPassword" />
  ///  事件的 <see cref="T:System.Web.Security.MembershipProvider" />
  ///  。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Web.Security.ValidatePasswordEventArgs" />
  ///  对象。
  ///</param>
  [DNTypeName('System.Web.Security.MembershipValidatePasswordEventHandler')]
  DNMembershipValidatePasswordEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNValidatePasswordEventArgs) of object;




{ objects }

  //-------------namespace: System.Web.Hosting----------------
  DNCustomLoaderAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{049BD94B-0A35-51D8-B1EA-EB0422E81D62}']
  { constructors } 

    ///<summary>
    ///  [在 .NET Framework 4.5.1 和更高版本中受支持]
    ///  初始化 <see cref="T:System.Web.Hosting.CustomLoaderAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init(customLoaderType: DDN.mscorlib.DNType): DNCustomLoaderAttribute;

  end;

  ///<summary>
  ///  [在 .NET Framework 4.5.1 和更高版本中受支持]
  ///  为 ASP.NET 提供自定义加载程序，以便应用程序可以提供自己的宿主环境的实现。
  ///</summary>
  [DNTypeName('System.Web.Hosting.CustomLoaderAttribute')]
  DNCustomLoaderAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{77E9C4C7-B069-391C-BEA9-E577892583DE}']
  { getters & setters } 

    function get_CustomLoaderType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  [在 .NET Framework 4.5.1 和更高版本中受支持]
    ///  获取自定义加载程序的类型。
    ///</summary>
    ///<returns>
    ///  自定义加载程序的类型。
    ///</returns>
    property CustomLoaderType: DDN.mscorlib.DNType read get_CustomLoaderType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNCustomLoaderAttribute = class(TDNGenericImport<DNCustomLoaderAttributeClass, DNCustomLoaderAttribute>) end;

  //-------------namespace: System.Web.Security----------------
  DNMembershipProviderClass = interface(DNObjectClass)
  ['{5EF06F7E-D1D6-52DD-9B3A-7F9C0893E5B8}']
  end;

  ///<summary>
  ///  定义 ASP.NET 为使用自定义成员资格提供程序提供成员资格服务而实现的协定。
  ///</summary>
  [DNTypeName('System.Web.Security.MembershipProvider')]
  DNMembershipProvider = interface(DNObject)
  ['{51D5FA24-9734-30CE-A84D-A3C7272D84AC}']
  { getters & setters } 

    function get_EnablePasswordRetrieval: Boolean;
    function get_EnablePasswordReset: Boolean;
    function get_RequiresQuestionAndAnswer: Boolean;
    function get_ApplicationName: string;
    procedure set_ApplicationName(value: string);
    function get_MaxInvalidPasswordAttempts: Int32;
    function get_PasswordAttemptWindow: Int32;
    function get_RequiresUniqueEmail: Boolean;
    function get_PasswordFormat: DNMembershipPasswordFormat;
    function get_MinRequiredPasswordLength: Int32;
    function get_MinRequiredNonAlphanumericCharacters: Int32;
    function get_PasswordStrengthRegularExpression: string;
    function get_Name: string;
    function get_Description: string;

  { events } 

    procedure add_ValidatingPassword(value: DNMembershipValidatePasswordEventHandler);
    procedure remove_ValidatingPassword(value: DNMembershipValidatePasswordEventHandler);

  { methods } 

    function CreateUser(username: string; password: string; email: string; passwordQuestion: string; passwordAnswer: string; isApproved: Boolean; providerUserKey: DDN.mscorlib.DNObject; out status: DNMembershipCreateStatus): DNMembershipUser;
    ///<summary>
    ///  处理更新成员资格用户的密码提示问题和答案的请求。
    ///</summary>
    ///  <param name="username">
    ///  要为其更改密码提示问题和答案的用户。
    ///</param>
    ///  <param name="password">
    ///  指定的用户的密码。
    ///</param>
    ///  <param name="newPasswordQuestion">
    ///  指定的用户的新密码提示问题。
    ///</param>
    ///  <param name="newPasswordAnswer">
    ///  指定的用户的新密码提示问题答案。
    ///</param>
    ///<returns>
    ///  如果成功更新密码提示问题和答案，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function ChangePasswordQuestionAndAnswer(username: string; password: string; newPasswordQuestion: string; newPasswordAnswer: string): Boolean;
    ///<summary>
    ///  从数据源获取指定用户名所对应的密码。
    ///</summary>
    ///  <param name="username">
    ///  要为其检索密码的用户。
    ///</param>
    ///  <param name="answer">
    ///  用户的密码提示问题答案。
    ///</param>
    ///<returns>
    ///  指定用户名所对应的密码。
    ///</returns>
    function GetPassword(username: string; answer: string): string;
    ///<summary>
    ///  处理更新成员资格用户密码的请求。
    ///</summary>
    ///  <param name="username">
    ///  要为其更新密码的用户。
    ///</param>
    ///  <param name="oldPassword">
    ///  指定的用户的当前密码。
    ///</param>
    ///  <param name="newPassword">
    ///  指定的用户的新密码。
    ///</param>
    ///<returns>
    ///  如果密码更新成功，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function ChangePassword(username: string; oldPassword: string; newPassword: string): Boolean;
    ///<summary>
    ///  将用户密码重置为自动生成的新密码。
    ///</summary>
    ///  <param name="username">
    ///  要为其重置密码的用户。
    ///</param>
    ///  <param name="answer">
    ///  指定的用户的密码提示问题答案。
    ///</param>
    ///<returns>
    ///  指定的用户的新密码。
    ///</returns>
    function ResetPassword(username: string; answer: string): string;
    ///<summary>
    ///  更新数据源中有关用户的信息。
    ///</summary>
    ///  <param name="user">
    ///  一个 <see cref="T:System.Web.Security.MembershipUser" />
    ///  对象，表示要更新的用户及其更新信息。
    ///</param>
    procedure UpdateUser(user: DNMembershipUser);
    ///<summary>
    ///  验证数据源中是否存在指定的用户名和密码。
    ///</summary>
    ///  <param name="username">
    ///  要验证的用户的名称。
    ///</param>
    ///  <param name="password">
    ///  指定的用户的密码。
    ///</param>
    ///<returns>
    ///  如果指定的用户名和密码有效，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function ValidateUser(username: string; password: string): Boolean;
    ///<summary>
    ///  清除锁定，以便验证成员资格用户。
    ///</summary>
    ///  <param name="userName">
    ///  要清除其锁定状态的成员资格用户。
    ///</param>
    ///<returns>
    ///  如果成功解除成员资格用户的锁定，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function UnlockUser(userName: string): Boolean;
    ///<summary>
    ///  根据成员资格用户的唯一标识符从数据源中获取用户信息。
    ///  提供一个选项用于更新用户的上一次活动日期/时间戳。
    ///</summary>
    ///  <param name="providerUserKey">
    ///  要获取其信息的成员资格用户的唯一标识符。
    ///</param>
    ///  <param name="userIsOnline">
    ///  如果更新用户的上一次活动日期/时间戳，则为 <see langword="true" />
    ///  ；如果返回用户信息而未更新用户的上一次活动日期/时间戳，则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  使用来自数据源的指定用户信息进行填充的 <see cref="T:System.Web.Security.MembershipUser" />
    ///  对象。
    ///</returns>
    function GetUser(providerUserKey: DDN.mscorlib.DNObject; userIsOnline: Boolean): DNMembershipUser; overload;
    ///<summary>
    ///  从数据源为用户获取信息。
    ///  提供一个选项用于更新用户的上一次活动日期/时间戳。
    ///</summary>
    ///  <param name="username">
    ///  要为其获取信息的用户的名称。
    ///</param>
    ///  <param name="userIsOnline">
    ///  如果更新用户的上一次活动日期/时间戳，则为 <see langword="true" />
    ///  ；如果返回用户信息而未更新用户的上一次活动日期/时间戳，则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  使用来自数据源的指定用户信息进行填充的 <see cref="T:System.Web.Security.MembershipUser" />
    ///  对象。
    ///</returns>
    function GetUser(username: string; userIsOnline: Boolean): DNMembershipUser; overload;
    ///<summary>
    ///  获取与指定的电子邮件地址相关联的用户名。
    ///</summary>
    ///  <param name="email">
    ///  要搜索的电子邮件地址。
    ///</param>
    ///<returns>
    ///  与指定的电子邮件地址相关联的用户名。
    ///  如果不找到任何匹配项，则返回 <see langword="null" />
    ///  。
    ///</returns>
    function GetUserNameByEmail(email: string): string;
    ///<summary>
    ///  从成员资格数据源中删除用户。
    ///</summary>
    ///  <param name="username">
    ///  要删除的用户的名称。
    ///</param>
    ///  <param name="deleteAllRelatedData">
    ///  如果要从数据库中删除与用户相关的数据，则为 <see langword="true" />
    ///  ；如果要在数据库中保留与用户相关的数据，则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  若已成功删除此用户，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function DeleteUser(username: string; deleteAllRelatedData: Boolean): Boolean;
    function GetAllUsers(pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DNMembershipUserCollection;
    ///<summary>
    ///  获取当前正在访问应用程序的用户数。
    ///</summary>
    ///<returns>
    ///  当前正在访问应用程序的用户数。
    ///</returns>
    function GetNumberOfUsersOnline: Int32;
    function FindUsersByName(usernameToMatch: string; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DNMembershipUserCollection;
    function FindUsersByEmail(emailToMatch: string; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DNMembershipUserCollection;
    procedure Initialize(name: string; config: DDN.System.DNNameValueCollection);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  指示成员资格提供程序是否配置为允许用户检索其密码。
    ///</summary>
    ///<returns>
    ///  如果成员资格提供程序配置为支持密码检索，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property EnablePasswordRetrieval: Boolean read get_EnablePasswordRetrieval;
    ///<summary>
    ///  指示成员资格提供程序是否被配置为允许用户重置其密码。
    ///</summary>
    ///<returns>
    ///  如果成员资格提供程序支持密码重置，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property EnablePasswordReset: Boolean read get_EnablePasswordReset;
    ///<summary>
    ///  获取一个值，该值指示成员资格提供程序是否配置为要求用户在进行密码重置和检索时回答密码提示问题。
    ///</summary>
    ///<returns>
    ///  如果密码重置和检索需要提供密码提示问题答案，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property RequiresQuestionAndAnswer: Boolean read get_RequiresQuestionAndAnswer;
    ///<summary>
    ///  使用自定义成员资格提供程序的应用程序的名称。
    ///</summary>
    ///<returns>
    ///  使用自定义成员资格提供程序的应用程序的名称。
    ///</returns>
    property ApplicationName: string read get_ApplicationName write set_ApplicationName;
    ///<summary>
    ///  获取在锁定成员资格用户之前允许的无效密码或密码答案尝试次数。
    ///</summary>
    ///<returns>
    ///  锁定成员资格用户之前允许的无效密码或密码答案尝试次数。
    ///</returns>
    property MaxInvalidPasswordAttempts: Int32 read get_MaxInvalidPasswordAttempts;
    ///<summary>
    ///  获取在锁定成员资格用户之前允许的最大无效密码或无效密码提示问题答案尝试次数的分钟数。
    ///</summary>
    ///<returns>
    ///  在锁定成员资格用户之前允许的最大无效密码或无效密码提示问题答案尝试次数的分钟数。
    ///</returns>
    property PasswordAttemptWindow: Int32 read get_PasswordAttemptWindow;
    ///<summary>
    ///  获取一个值，该值指示成员资格提供程序是否配置为要求每一用户名使用唯一的电子邮件地址。
    ///</summary>
    ///<returns>
    ///  如果成员资格提供程序要求使用唯一的电子邮件地址，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property RequiresUniqueEmail: Boolean read get_RequiresUniqueEmail;
    ///<summary>
    ///  获取一个值，该值指示成员资格数据存储中存储密码的格式。
    ///</summary>
    ///<returns><see cref="T:System.Web.Security.MembershipPasswordFormat" />
    ///  值之一，它指示数据存储中存储密码的格式。
    ///</returns>
    property PasswordFormat: DNMembershipPasswordFormat read get_PasswordFormat;
    ///<summary>
    ///  获取密码所需的最小长度。
    ///</summary>
    ///<returns>
    ///  密码所需的最小长度。
    ///</returns>
    property MinRequiredPasswordLength: Int32 read get_MinRequiredPasswordLength;
    ///<summary>
    ///  获取有效密码中必须包含的最少特殊字符数。
    ///</summary>
    ///<returns>
    ///  有效密码中必须包含的最少特殊字符数。
    ///</returns>
    property MinRequiredNonAlphanumericCharacters: Int32 read get_MinRequiredNonAlphanumericCharacters;
    ///<summary>
    ///  获取用于计算密码的正则表达式。
    ///</summary>
    ///<returns>
    ///  用于计算密码的正则表达式。
    ///</returns>
    property PasswordStrengthRegularExpression: string read get_PasswordStrengthRegularExpression;
    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNMembershipProvider = class(TDNGenericImport<DNMembershipProviderClass, DNMembershipProvider>) end;

  //-------------namespace: System.Web.Security----------------
  DNRoleProviderClass = interface(DNObjectClass)
  ['{1211F1E5-6F8D-54C9-B892-501D6A2F27D3}']
  end;

  ///<summary>
  ///  定义 ASP.NET 为使用自定义角色提供程序提供角色管理服务而实现的协定。
  ///</summary>
  [DNTypeName('System.Web.Security.RoleProvider')]
  DNRoleProvider = interface(DNObject)
  ['{5AE6C6A1-359B-3F21-8F37-E61F45DA5D38}']
  { getters & setters } 

    function get_ApplicationName: string;
    procedure set_ApplicationName(value: string);
    function get_Name: string;
    function get_Description: string;

  { methods } 

    ///<summary>
    ///  获取一个值，该值指示指定用户是否属于已配置的 <see langword="applicationName" />
    ///  的指定角色。
    ///</summary>
    ///  <param name="username">
    ///  要搜索的用户名。
    ///</param>
    ///  <param name="roleName">
    ///  作为搜索范围的角色。
    ///</param>
    ///<returns>
    ///  如果指定用户属于已配置的 <see langword="applicationName" />
    ///  的指定角色，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsUserInRole(username: string; roleName: string): Boolean;
    ///<summary>
    ///  获取已配置的 <see langword="applicationName" />
    ///  中指定用户所属的角色的列表。
    ///</summary>
    ///  <param name="username">
    ///  要为其返回角色列表的用户。
    ///</param>
    ///<returns>
    ///  一个字符串数组，其中包含已配置的 <see langword="applicationName" />
    ///  中指定用户所属的所有角色的名称。
    ///</returns>
    function GetRolesForUser(username: string): TArray<string>;
    ///<summary>
    ///  针对已配置的 <see langword="applicationName" />
    ///  ，将一个新角色添加到数据源。
    ///</summary>
    ///  <param name="roleName">
    ///  要创建的角色的名称。
    ///</param>
    procedure CreateRole(roleName: string);
    ///<summary>
    ///  从数据源中删除已配置的 <see langword="applicationName" />
    ///  的一个角色。
    ///</summary>
    ///  <param name="roleName">
    ///  要删除的角色的名称。
    ///</param>
    ///  <param name="throwOnPopulatedRole">
    ///  若为 <see langword="true" />
    ///  ，则在 <paramref name="roleName" />
    ///  具有一个或多个成员时引发异常，且不删除 <paramref name="roleName" />
    ///  。
    ///</param>
    ///<returns>
    ///  若已成功删除此角色，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function DeleteRole(roleName: string; throwOnPopulatedRole: Boolean): Boolean;
    ///<summary>
    ///  获取一个值，该值指示配置后的 <see langword="applicationName" />
    ///  的角色数据源中是否已存在指定的角色名。
    ///</summary>
    ///  <param name="roleName">
    ///  要在数据源中搜索的角色名。
    ///</param>
    ///<returns>
    ///  如果配置后的 <see langword="applicationName" />
    ///  的数据源中已存在角色名，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function RoleExists(roleName: string): Boolean;
    ///<summary>
    ///  向配置的 <see langword="applicationName" />
    ///  的指定角色添加指定的用户名。
    ///</summary>
    ///  <param name="usernames">
    ///  要添加到指定的角色的用户名的字符串数组。
    ///</param>
    ///  <param name="roleNames">
    ///  要添加指定的用户名的角色名称的字符串数组。
    ///</param>
    procedure AddUsersToRoles(usernames: TArray<string>; roleNames: TArray<string>);
    ///<summary>
    ///  从适用于配置的 <see langword="applicationName" />
    ///  的指定的角色移除指定的用户名。
    ///</summary>
    ///  <param name="usernames">
    ///  一个字符串数组，其中包含要从指定的角色移除的用户名。
    ///</param>
    ///  <param name="roleNames">
    ///  一个字符串数组，其中包含要将指定的用户名从中移除的角色的名称。
    ///</param>
    procedure RemoveUsersFromRoles(usernames: TArray<string>; roleNames: TArray<string>);
    ///<summary>
    ///  获取属于已配置 <see langword="applicationName" />
    ///  的指定角色的用户的列表。
    ///</summary>
    ///  <param name="roleName">
    ///  要获取其用户列表的角色的名称。
    ///</param>
    ///<returns>
    ///  一个字符串数组，其中包含属于已配置 <see langword="applicationName" />
    ///  的指定角色的成员的所有用户名。
    ///</returns>
    function GetUsersInRole(roleName: string): TArray<string>;
    ///<summary>
    ///  获取已配置的 <see langword="applicationName" />
    ///  的全部角色列表。
    ///</summary>
    ///<returns>
    ///  一个字符串数组，它包含已配置的 <see langword="applicationName" />
    ///  的数据源中所存储的全部角色的名称。
    ///</returns>
    function GetAllRoles: TArray<string>;
    ///<summary>
    ///  获取属于某个角色且与指定的用户名相匹配的用户名的数组。
    ///</summary>
    ///  <param name="roleName">
    ///  作为搜索范围的角色。
    ///</param>
    ///  <param name="usernameToMatch">
    ///  要搜索的用户名。
    ///</param>
    ///<returns>
    ///  一个字符串数组，包含用户名与 <paramref name="usernameToMatch" />
    ///  匹配且用户是指定角色的成员的所有用户的名称。
    ///</returns>
    function FindUsersInRole(roleName: string; usernameToMatch: string): TArray<string>;
    procedure Initialize(name: string; config: DDN.System.DNNameValueCollection);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置要存储和检索其角色信息的应用程序的名称。
    ///</summary>
    ///<returns>
    ///  要存储和检索其角色信息的应用程序的名称。
    ///</returns>
    property ApplicationName: string read get_ApplicationName write set_ApplicationName;
    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNRoleProvider = class(TDNGenericImport<DNRoleProviderClass, DNRoleProvider>) end;

  //-------------namespace: System.Web.Security----------------
  DNMembershipProviderCollectionClass = interface(DNObjectClass)
  ['{55B69265-C696-572B-9076-C814A66EFFC5}']
  { constructors } 

    ///<summary>
    ///  创建一个新的空成员资格提供程序集合。
    ///</summary>
    {class} function init: DNMembershipProviderCollection;

  end;

  ///<summary>
  ///  继承 <see cref="T:System.Web.Security.MembershipProvider" />
  ///  抽象类的对象的集合。
  ///</summary>
  [DNTypeName('System.Web.Security.MembershipProviderCollection')]
  DNMembershipProviderCollection = interface(DNObject)
  ['{BAAE0D37-587F-31BA-B985-6915A9A25E93}']
  { getters & setters } 

    function get_Item(name: string): DNMembershipProvider;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  向集合添加成员资格提供程序。
    ///</summary>
    ///  <param name="provider">
    ///  要添加到集合中的成员资格提供程序。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="provider" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="provider" />
    ///  的类型不是继承 <see cref="T:System.Web.Security.MembershipProvider" />
    ///  抽象类的类型。
    ///</exception>
    procedure Add(provider: DDN.System.Configuration.DNProviderBase);
    ///<summary>
    ///  将成员资格提供程序集合复制到一维数组。
    ///</summary>
    ///  <param name="array">
    ///  一维数组，它是从 <see cref="T:System.Web.Security.MembershipProviderCollection" />
    ///  复制的元素的目标。
    ///  该数组的索引必须从零开始。
    ///</param>
    ///  <param name="index"><paramref name="array" />
    ///  中从零开始的索引，从此处开始复制。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  小于零。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="array" />
    ///  是多维的。
    ///  - 或 -
    ///  源数组中的元素个数大于目标 <paramref name="array" />
    ///  从 <paramref name="index" />
    ///  到末尾的可用空间。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  无法自动将源数组的类型强制转换为目标 <paramref name="array" />
    ///  的类型。
    ///</exception>
    procedure CopyTo(&array: TArray<DNMembershipProvider>; index: Int32); overload;
    procedure Remove(name: string);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure SetReadOnly;
    procedure Clear;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNProviderBase>; index: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNMembershipProvider read get_Item; default;
    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNMembershipProviderCollection = class(TDNGenericImport<DNMembershipProviderCollectionClass, DNMembershipProviderCollection>) end;

  //-------------namespace: System.Web.Security----------------
  DNValidatePasswordEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{BFBBB6AB-F398-579C-AA60-3F56033AFEB3}']
  { constructors } 

    ///<summary>
    ///  创建 <see cref="T:System.Web.Security.ValidatePasswordEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="userName">
    ///  当前创建用户、更改密码或重置密码操作的成员资格用户名。
    ///</param>
    ///  <param name="password">
    ///  指定的成员资格用户的新密码。
    ///</param>
    ///  <param name="isNewUser">
    ///  如果创建新用户时发生该事件，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(userName: string; password: string; isNewUser: Boolean): DNValidatePasswordEventArgs;

  end;

  ///<summary>
  ///  提供事件数据供 <see cref="E:System.Web.Security.MembershipProvider.ValidatingPassword" />
  ///  事件 <see cref="T:System.Web.Security.MembershipProvider" />
  ///  类。
  ///</summary>
  [DNTypeName('System.Web.Security.ValidatePasswordEventArgs')]
  DNValidatePasswordEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{B5D6612F-9D39-38AC-AD25-01ED85FEF6EF}']
  { getters & setters } 

    function get_UserName: string;
    function get_Password: string;
    function get_IsNewUser: Boolean;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);
    function get_FailureInformation: DDN.mscorlib.DNException;
    procedure set_FailureInformation(value: DDN.mscorlib.DNException);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取当前创建用户、更改密码或重置密码操作的成员资格用户名。
    ///</summary>
    ///<returns>
    ///  当前创建用户、更改密码或重置密码操作的成员资格用户名。
    ///</returns>
    property UserName: string read get_UserName;
    ///<summary>
    ///  获取当前创建用户、密码更改或重置密码操作的密码。
    ///</summary>
    ///<returns>
    ///  当前创建用户、密码更改或重置密码操作的密码。
    ///</returns>
    property Password: string read get_Password;
    ///<summary>
    ///  获取一个值，该值指示调用 <see cref="M:System.Web.Security.MembershipProvider.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)" />
    ///  方法的过程中是否引发 <see cref="E:System.Web.Security.MembershipProvider.ValidatingPassword" />
    ///  事件。
    ///</summary>
    ///<returns>
    ///  如果调用 <see cref="M:System.Web.Security.MembershipProvider.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)" />
    ///  方法的过程中引发了 <see cref="E:System.Web.Security.MembershipProvider.ValidatingPassword" />
    ///  事件，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNewUser: Boolean read get_IsNewUser;
    ///<summary>
    ///  获取或设置一个值，该值指示是否将取消当前的创建用户、更改密码或重置密码操作。
    ///</summary>
    ///<returns>
    ///  如果将取消当前的创建用户、更改密码或重置密码操作，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Cancel: Boolean read get_Cancel write set_Cancel;
    ///<summary>
    ///  获取或设置描述密码验证失败的原因的异常。
    ///</summary>
    ///<returns>
    ///  描述密码验证失败的原因的 <see cref="T:System.Exception" />
    ///  。
    ///</returns>
    property FailureInformation: DDN.mscorlib.DNException read get_FailureInformation write set_FailureInformation;
  end;

  TDNValidatePasswordEventArgs = class(TDNGenericImport<DNValidatePasswordEventArgsClass, DNValidatePasswordEventArgs>) end;

  //-------------namespace: System.Web.Security----------------
  DNMembershipCreateUserExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{7914EDC9-0E6F-5C5D-9C3E-23D7FBAC956A}']
  { constructors } 

    ///<summary>
    ///  使用指定的 <see cref="P:System.Web.Security.MembershipCreateUserException.StatusCode" />
    ///  值初始化 <see cref="T:System.Web.Security.MembershipCreateUserException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="statusCode">
    ///  一个 <see cref="T:System.Web.Security.MembershipCreateStatus" />
    ///  枚举值，该值描述异常的原因。
    ///</param>
    {class} function init(statusCode: DNMembershipCreateStatus): DNMembershipCreateUserException; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Web.Security.MembershipCreateUserException" />
    ///  类的新实例，并将 <see cref="P:System.Exception.Message" />
    ///  属性设置为所提供的 <paramref name="message" />
    ///  参数值。
    ///</summary>
    ///  <param name="message">
    ///  对异常原因的描述。
    ///</param>
    {class} function init(message: string): DNMembershipCreateUserException; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Web.Security.MembershipCreateUserException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNMembershipCreateUserException; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Web.Security.MembershipCreateUserException" />
    ///  类的新实例，并将 <see cref="P:System.Exception.Message" />
    ///  属性设置为提供的 <paramref name="message" />
    ///  ，将 <see cref="P:System.Exception.InnerException" />
    ///  属性设置为提供的 <paramref name="innerException" />
    ///  。
    ///</summary>
    ///  <param name="message">
    ///  对异常原因的描述。
    ///</param>
    ///  <param name="innerException">
    ///  导致 <see cref="T:System.Web.Security.MembershipCreateUserException" />
    ///  的异常。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNMembershipCreateUserException; overload;

  end;

  ///<summary>
  ///  当成员资格提供程序未能成功创建用户时引发的异常。
  ///</summary>
  [DNTypeName('System.Web.Security.MembershipCreateUserException')]
  DNMembershipCreateUserException = interface(DDN.mscorlib.DNException)
  ['{90504B9A-DD00-3E9C-B397-D6AF57035533}']
  { getters & setters } 

    function get_StatusCode: DNMembershipCreateStatus;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  使用将目标对象序列化所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  。
    ///</summary>
    ///  <param name="info">
    ///  要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  。
    ///</param>
    ///  <param name="context">
    ///  用于指定该序列化的目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  。
    ///</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取对异常原因的描述。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Web.Security.MembershipCreateStatus" />
    ///  枚举值，该值描述异常的原因。
    ///</returns>
    property StatusCode: DNMembershipCreateStatus read get_StatusCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMembershipCreateUserException = class(TDNGenericImport<DNMembershipCreateUserExceptionClass, DNMembershipCreateUserException>) end;

  //-------------namespace: System.Web.Security----------------
  DNMembershipPasswordExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{8F691606-7172-5BCF-846E-C7502F65C3B6}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Web.Security.MembershipPasswordException" />
    ///  类的新实例，并将 <see cref="P:System.Exception.Message" />
    ///  属性设置为所提供的 <paramref name="message" />
    ///  。
    ///</summary>
    ///  <param name="message">
    ///  对异常原因的描述。
    ///</param>
    {class} function init(message: string): DNMembershipPasswordException; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Web.Security.MembershipPasswordException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNMembershipPasswordException; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Web.Security.MembershipPasswordException" />
    ///  类的新实例，并将 <see cref="P:System.Exception.Message" />
    ///  属性设置为提供的 <paramref name="message" />
    ///  ，将 <see cref="P:System.Exception.InnerException" />
    ///  属性设置为提供的 <paramref name="innerException" />
    ///  。
    ///</summary>
    ///  <param name="message">
    ///  对异常原因的描述。
    ///</param>
    ///  <param name="innerException">
    ///  导致 <see cref="T:System.Web.Security.MembershipPasswordException" />
    ///  的异常。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNMembershipPasswordException; overload;

  end;

  ///<summary>
  ///  当无法从密码存储区检索密码时引发的异常。
  ///</summary>
  [DNTypeName('System.Web.Security.MembershipPasswordException')]
  DNMembershipPasswordException = interface(DDN.mscorlib.DNException)
  ['{1DA3370B-2D1F-328F-8F5D-8CA18CF13D62}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNMembershipPasswordException = class(TDNGenericImport<DNMembershipPasswordExceptionClass, DNMembershipPasswordException>) end;

  //-------------namespace: System.Web.Security----------------
  DNMembershipUserClass = interface(DDN.mscorlib.DNObjectClass)
  ['{810378B9-69C0-5671-9875-5D1255F27A5B}']
  { constructors } 

    ///<summary>
    ///  使用指定的属性值创建新的成员资格用户对象。
    ///</summary>
    ///  <param name="providerName">
    ///  成员资格用户的 <see cref="P:System.Web.Security.MembershipUser.ProviderName" />
    ///  字符串。
    ///</param>
    ///  <param name="name">
    ///  成员资格用户的 <see cref="P:System.Web.Security.MembershipUser.UserName" />
    ///  字符串。
    ///</param>
    ///  <param name="providerUserKey">
    ///  成员资格用户的 <see cref="P:System.Web.Security.MembershipUser.ProviderUserKey" />
    ///  标识符。
    ///</param>
    ///  <param name="email">
    ///  成员资格用户的 <see cref="P:System.Web.Security.MembershipUser.Email" />
    ///  字符串。
    ///</param>
    ///  <param name="passwordQuestion">
    ///  成员资格用户的 <see cref="P:System.Web.Security.MembershipUser.PasswordQuestion" />
    ///  字符串。
    ///</param>
    ///  <param name="comment">
    ///  成员资格用户的 <see cref="P:System.Web.Security.MembershipUser.Comment" />
    ///  字符串。
    ///</param>
    ///  <param name="isApproved">
    ///  成员资格用户的 <see cref="P:System.Web.Security.MembershipUser.IsApproved" />
    ///  值。
    ///</param>
    ///  <param name="isLockedOut">
    ///  如果锁定成员资格用户，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="creationDate">
    ///  成员资格用户的 <see cref="P:System.Web.Security.MembershipUser.CreationDate" />
    ///<see cref="T:System.DateTime" />
    ///  对象。
    ///</param>
    ///  <param name="lastLoginDate">
    ///  成员资格用户的 <see cref="P:System.Web.Security.MembershipUser.LastLoginDate" />
    ///<see cref="T:System.DateTime" />
    ///  对象。
    ///</param>
    ///  <param name="lastActivityDate">
    ///  成员资格用户的 <see cref="P:System.Web.Security.MembershipUser.LastActivityDate" />
    ///<see cref="T:System.DateTime" />
    ///  对象。
    ///</param>
    ///  <param name="lastPasswordChangedDate">
    ///  成员资格用户的 <see cref="P:System.Web.Security.MembershipUser.LastPasswordChangedDate" />
    ///<see cref="T:System.DateTime" />
    ///  对象。
    ///</param>
    ///  <param name="lastLockoutDate">
    ///  成员资格用户的 <see cref="P:System.Web.Security.MembershipUser.LastLockoutDate" />
    ///<see cref="T:System.DateTime" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="providerName" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  在 <paramref name="providerName" />
    ///  集合中找不到 <see cref="P:System.Web.Security.Membership.Providers" />
    ///  。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  构造函数不可用。
    ///  如果应用程序以 .NET Framework 4 Client Profile 为目标，则会发生这种情况。
    ///  要避免此异常，请从此类型派生类，然后调用默认受保护的构造函数，或者将应用程序更改为针对 .NET Framework 的完整版本进行编译。
    ///</exception>
    {class} function init(providerName: string; name: string; providerUserKey: DDN.mscorlib.DNObject; email: string; passwordQuestion: string; comment: string; isApproved: Boolean; isLockedOut: Boolean; creationDate: DDN.mscorlib.DNDateTime; lastLoginDate: DDN.mscorlib.DNDateTime; lastActivityDate: DDN.mscorlib.DNDateTime; lastPasswordChangedDate: DDN.mscorlib.DNDateTime; lastLockoutDate: DDN.mscorlib.DNDateTime): DNMembershipUser;

  end;

  ///<summary>
  ///  公开和更新成员资格数据存储中的成员资格用户信息。
  ///</summary>
  [DNTypeName('System.Web.Security.MembershipUser')]
  DNMembershipUser = interface(DDN.mscorlib.DNObject)
  ['{D116FD6C-9F44-34B1-B050-3CF193B8F0DC}']
  { getters & setters } 

    function get_UserName: string;
    function get_ProviderUserKey: DDN.mscorlib.DNObject;
    function get_Email: string;
    procedure set_Email(value: string);
    function get_PasswordQuestion: string;
    function get_Comment: string;
    procedure set_Comment(value: string);
    function get_IsApproved: Boolean;
    procedure set_IsApproved(value: Boolean);
    function get_IsLockedOut: Boolean;
    function get_LastLockoutDate: DDN.mscorlib.DNDateTime;
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_LastLoginDate: DDN.mscorlib.DNDateTime;
    procedure set_LastLoginDate(value: DDN.mscorlib.DNDateTime);
    function get_LastActivityDate: DDN.mscorlib.DNDateTime;
    procedure set_LastActivityDate(value: DDN.mscorlib.DNDateTime);
    function get_LastPasswordChangedDate: DDN.mscorlib.DNDateTime;
    function get_IsOnline: Boolean;
    function get_ProviderName: string;

  { methods } 

    ///<summary>
    ///  返回成员资格用户的用户名。
    ///</summary>
    ///<returns>
    ///  成员资格用户的 <see cref="P:System.Web.Security.MembershipUser.UserName" />
    ///  。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  将用户密码重置为自动生成的新密码。
    ///</summary>
    ///<returns>
    ///  成员资格用户的新密码。
    ///</returns>
    ///<exception cref="T:System.PlatformNotSupportedException">
    ///  此方法不可用。
    ///  如果应用程序以 .NET Framework 4 Client Profile 为目标，则会发生这种情况。
    ///  若要避免此异常，请重写该方法，或将应用程序更改为面向 .NET Framework 的完整版本。
    ///</exception>
    function ResetPassword: string; overload;
    ///<summary>
    ///  从成员资格数据存储中获取成员资格用户的密码。
    ///</summary>
    ///<returns>
    ///  成员资格用户的密码。
    ///</returns>
    ///<exception cref="T:System.PlatformNotSupportedException">
    ///  此方法不可用。
    ///  如果应用程序以 .NET Framework 4 Client Profile 为目标，则会发生这种情况。
    ///  若要避免此异常，请重写该方法，或将应用程序更改为面向 .NET Framework 的完整版本。
    ///</exception>
    function GetPassword: string; overload;
    ///<summary>
    ///  从成员资格数据存储中获取成员资格用户的密码。
    ///</summary>
    ///  <param name="passwordAnswer">
    ///  成员资格用户的密码答案。
    ///</param>
    ///<returns>
    ///  成员资格用户的密码。
    ///</returns>
    ///<exception cref="T:System.PlatformNotSupportedException">
    ///  此方法不可用。
    ///  如果应用程序以 .NET Framework 4 Client Profile 为目标，则会发生这种情况。
    ///  若要避免此异常，请重写该方法，或将应用程序更改为面向 .NET Framework 的完整版本。
    ///</exception>
    function GetPassword(passwordAnswer: string): string; overload;
    ///<summary>
    ///  在成员资格数据存储中更新成员资格用户的密码。
    ///</summary>
    ///  <param name="oldPassword">
    ///  成员资格用户的当前密码。
    ///</param>
    ///  <param name="newPassword">
    ///  成员资格用户的新密码。
    ///</param>
    ///<returns>
    ///  如果更新操作成功，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="oldPassword" />
    ///  是一个空字符串。
    ///  - 或 -
    ///  <paramref name="newPassword" />
    ///  是一个空字符串。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="oldPassword" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="newPassword" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  此方法不可用。
    ///  如果应用程序以 .NET Framework 4 Client Profile 为目标，则会发生这种情况。
    ///  若要避免此异常，请重写该方法，或将应用程序更改为面向 .NET Framework 的完整版本。
    ///</exception>
    function ChangePassword(oldPassword: string; newPassword: string): Boolean;
    ///<summary>
    ///  为成员资格数据存储中的成员资格用户更新密码问题和答案。
    ///</summary>
    ///  <param name="password">
    ///  成员资格用户的当前密码。
    ///</param>
    ///  <param name="newPasswordQuestion">
    ///  成员资格用户的新密码问题值。
    ///</param>
    ///  <param name="newPasswordAnswer">
    ///  成员资格用户的新密码答案值。
    ///</param>
    ///<returns>
    ///  如果更新操作成功，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="password" />
    ///  是一个空字符串。
    ///  - 或 -
    ///  <paramref name="newPasswordQuestion" />
    ///  是一个空字符串。
    ///  - 或 -
    ///  <paramref name="newPasswordAnswer" />
    ///  是一个空字符串。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="password" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  此方法不可用。
    ///  如果应用程序以 .NET Framework 4 Client Profile 为目标，则会发生这种情况。
    ///  若要避免此异常，请重写该方法，或将应用程序更改为面向 .NET Framework 的完整版本。
    ///</exception>
    function ChangePasswordQuestionAndAnswer(password: string; newPasswordQuestion: string; newPasswordAnswer: string): Boolean;
    ///<summary>
    ///  将用户密码重置为自动生成的新密码。
    ///</summary>
    ///  <param name="passwordAnswer">
    ///  成员资格用户的密码答案。
    ///</param>
    ///<returns>
    ///  成员资格用户的新密码。
    ///</returns>
    ///<exception cref="T:System.PlatformNotSupportedException">
    ///  此方法不可用。
    ///  如果应用程序以 .NET Framework 4 Client Profile 为目标，则会发生这种情况。
    ///  若要避免此异常，请重写该方法，或将应用程序更改为面向 .NET Framework 的完整版本。
    ///</exception>
    function ResetPassword(passwordAnswer: string): string; overload;
    ///<summary>
    ///  清除用户锁定状态，以便验证成员资格用户。
    ///</summary>
    ///<returns>
    ///  如果成功解除成员资格用户的锁定，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.PlatformNotSupportedException">
    ///  此方法不可用。
    ///  如果应用程序以 .NET Framework 4 Client Profile 为目标，则会发生这种情况。
    ///  若要避免此异常，请重写该方法，或将应用程序更改为面向 .NET Framework 的完整版本。
    ///</exception>
    function UnlockUser: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取成员身份用户的登录名。
    ///</summary>
    ///<returns>
    ///  成员身份用户的登录名。
    ///</returns>
    property UserName: string read get_UserName;
    ///<summary>
    ///  从用户的成员身份数据源中获取用户标识符。
    ///</summary>
    ///<returns>
    ///  用户的成员身份数据源中的用户标识符。
    ///</returns>
    property ProviderUserKey: DDN.mscorlib.DNObject read get_ProviderUserKey;
    ///<summary>
    ///  获取或设置成员资格用户的电子邮件地址。
    ///</summary>
    ///<returns>
    ///  成员资格用户的电子邮件地址。
    ///</returns>
    property Email: string read get_Email write set_Email;
    ///<summary>
    ///  获取成员资格用户的密码问题。
    ///</summary>
    ///<returns>
    ///  成员资格用户的密码问题。
    ///</returns>
    property PasswordQuestion: string read get_PasswordQuestion;
    ///<summary>
    ///  获取或设置成员资格用户的应用程序特定信息。
    ///</summary>
    ///<returns>
    ///  成员资格用户的应用程序特定信息。
    ///</returns>
    property Comment: string read get_Comment write set_Comment;
    ///<summary>
    ///  获取或设置一个值，该值指示是否可以对成员资格用户进行身份验证。
    ///</summary>
    ///<returns>
    ///  如果可以对用户进行身份验证，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsApproved: Boolean read get_IsApproved write set_IsApproved;
    ///<summary>
    ///  获取一个值，该值指示成员资格用户是否已锁定而无法验证。
    ///</summary>
    ///<returns>
    ///  如果成员资格用户已锁定而无法验证，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsLockedOut: Boolean read get_IsLockedOut;
    ///<summary>
    ///  获取成员资格用户被锁定的最新日期和时间。
    ///</summary>
    ///<returns>
    ///  表示成员资格用户被锁定的最新日期和时间的 <see cref="T:System.DateTime" />
    ///  对象。
    ///</returns>
    property LastLockoutDate: DDN.mscorlib.DNDateTime read get_LastLockoutDate;
    ///<summary>
    ///  获取将用户添加到成员资格数据存储的日期和时间。
    ///</summary>
    ///<returns>
    ///  将用户添加到成员资格数据存储的日期和时间。
    ///</returns>
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    ///<summary>
    ///  获取或设置用户上次进行身份验证的日期和时间。
    ///</summary>
    ///<returns>
    ///  用户上次进行身份验证的日期和时间。
    ///</returns>
    property LastLoginDate: DDN.mscorlib.DNDateTime read get_LastLoginDate write set_LastLoginDate;
    ///<summary>
    ///  获取或设置成员资格用户上次进行身份验证或访问应用程序的日期和时间。
    ///</summary>
    ///<returns>
    ///  成员资格用户上次进行身份验证或访问应用程序的日期和时间。
    ///</returns>
    property LastActivityDate: DDN.mscorlib.DNDateTime read get_LastActivityDate write set_LastActivityDate;
    ///<summary>
    ///  获取成员资格用户密码的上次更新日期和时间。
    ///</summary>
    ///<returns>
    ///  成员资格用户密码的上次更新日期和时间。
    ///</returns>
    property LastPasswordChangedDate: DDN.mscorlib.DNDateTime read get_LastPasswordChangedDate;
    ///<summary>
    ///  获取用户当前是否处于联机状态。
    ///</summary>
    ///<returns>
    ///  如果用户处于联机状态，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.PlatformNotSupportedException">
    ///  此方法不可用。
    ///  如果应用程序以 .NET Framework 4 Client Profile 为目标，则会发生这种情况。
    ///  若要避免此异常，请重写该方法，或将应用程序更改为面向 .NET Framework 的完整版本。
    ///</exception>
    property IsOnline: Boolean read get_IsOnline;
    ///<summary>
    ///  获取成员资格提供程序的名称，该提供程序存储并检索成员资格用户的用户信息。
    ///</summary>
    ///<returns>
    ///  成员资格提供程序的名称，该提供程序存储并检索成员资格用户的用户信息。
    ///</returns>
    property ProviderName: string read get_ProviderName;
  end;

  TDNMembershipUser = class(TDNGenericImport<DNMembershipUserClass, DNMembershipUser>) end;

  //-------------namespace: System.Web.Security----------------
  DNMembershipUserCollectionClass = interface(DNObjectClass)
  ['{E4E65B87-4ED5-5B1F-AE87-AFBA5B8F68E5}']
  { constructors } 

    ///<summary>
    ///  创建一个新的空成员资格用户集合。
    ///</summary>
    {class} function init: DNMembershipUserCollection;

  end;

  ///<summary><see cref="T:System.Web.Security.MembershipUser" />
  ///  对象的集合。
  ///</summary>
  [DNTypeName('System.Web.Security.MembershipUserCollection')]
  DNMembershipUserCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{BCFB2F51-17F0-3E90-B24F-5E9A13AABD22}']
  { getters & setters } 

    function get_Item(name: string): DNMembershipUser;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  将指定成员资格用户添加到该集合。
    ///</summary>
    ///  <param name="user">
    ///  要添加到集合的 <see cref="T:System.Web.Security.MembershipUser" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.NotSupportedException">
    ///  该集合是只读的。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="user" />
    ///  的 <see cref="P:System.Web.Security.MembershipUser.UserName" />
    ///  为 null。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  集合中已存在与 <paramref name="user" />
    ///  具有相同的 <see cref="P:System.Web.Security.MembershipUser.UserName" />
    ///  值的 <see cref="T:System.Web.Security.MembershipUser" />
    ///  对象。
    ///</exception>
    procedure Add(user: DNMembershipUser);
    ///<summary>
    ///  从集合中删除具有指定用户名的成员资格用户对象。
    ///</summary>
    ///  <param name="name">
    ///  要从集合中删除的 <see cref="T:System.Web.Security.MembershipUser" />
    ///  对象的用户名。
    ///</param>
    ///<exception cref="T:System.NotSupportedException">
    ///  该集合是只读的。
    ///</exception>
    procedure Remove(name: string);
    ///<summary>
    ///  获取可循环访问成员资格用户集合的枚举器。
    ///</summary>
    ///<returns>
    ///  用于整个 <see cref="T:System.Web.Security.MembershipUserCollection" />
    ///  的 <see cref="T:System.Collections.IEnumerator" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  将成员资格用户集合的内容设为只读。
    ///</summary>
    procedure SetReadOnly;
    ///<summary>
    ///  从集合中删除所有成员资格用户对象。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  将成员资格用户集合复制到一维数组。
    ///</summary>
    ///  <param name="array">
    ///  类型 <see cref="T:System.Web.Security.MembershipUser" />
    ///  的一维数组，它是从 <see cref="T:System.Web.Security.MembershipUserCollection" />
    ///  复制的元素的目标集合。
    ///  该数组的索引必须从零开始。
    ///</param>
    ///  <param name="index">
    ///  数组中开始复制的位置的索引（从零开始）。
    ///</param>
    procedure CopyTo(&array: TArray<DNMembershipUser>; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNMembershipUser read get_Item; default;
    ///<summary>
    ///  获取集合中成员资格用户对象的数目。
    ///</summary>
    ///<returns>
    ///  集合中 <see cref="T:System.Web.Security.MembershipUser" />
    ///  对象的数目。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取一个值，它指示成员资格用户集合是否线程安全。
    ///</summary>
    ///<returns>
    ///  始终为 <see langword="false" />
    ///  ，因为不支持线程安全的成员资格用户集合。
    ///</returns>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  获取同步根。
    ///</summary>
    ///<returns>
    ///  始终 <see langword="this" />
    ///  ，因为不支持成员资格用户集合同步。
    ///</returns>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNMembershipUserCollection = class(TDNGenericImport<DNMembershipUserCollectionClass, DNMembershipUserCollection>) end;


implementation


initialization
  LoadAssemblyModule('System.Web.ApplicationServices.dll', True);

finalization

end.
