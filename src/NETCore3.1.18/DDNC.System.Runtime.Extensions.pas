//----------------------------------------------------------------------------
//  System.Runtime.Extensions.dll: System.Runtime.Extensions, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 3.1.18
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.Runtime.Extensions
//  Author: ying32
//----------------------------------------------------------------------------

unit DDNC.System.Runtime.Extensions;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.System.Private.CoreLib;

type

{ enums }

  //-------------namespace: System----------------
  [DNTypeName('System.LoaderOptimization')]
  DNLoaderOptimization = type Integer;
  DNLoaderOptimizationHelper = record helper for DNLoaderOptimization
  public const
    NotSpecified = 0;
    SingleDomain = 1;
    MultiDomain = 2;
    DomainMask = 3;
    MultiDomainHost = 3;
    DisallowBindings = 4;
  end;


  //-------------namespace: System.Runtime.Versioning----------------
  [DNTypeName('System.Runtime.Versioning.ComponentGuaranteesOptions')]
  DNComponentGuaranteesOptions = type Integer;
  DNComponentGuaranteesOptionsHelper = record helper for DNComponentGuaranteesOptions
  public const
    None = 0;
    Exchange = 1;
    Stable = 2;
    SideBySide = 4;
  end;


  //-------------namespace: System.Runtime.Versioning----------------
  [DNTypeName('System.Runtime.Versioning.ResourceScope')]
  DNResourceScope = type Integer;
  DNResourceScopeHelper = record helper for DNResourceScope
  public const
    None = 0;
    Machine = 1;
    Process = 2;
    AppDomain = 4;
    Library_ = 8;
    Private_ = 16;
    Assembly = 32;
  end;


  //-------------namespace: System.Security.Permissions----------------
  [DNTypeName('System.Security.Permissions.SecurityAction')]
  DNSecurityAction = type Integer;
  DNSecurityActionHelper = record helper for DNSecurityAction
  public const
    Demand = 2;
    Assert = 3;
    Deny = 4;
    PermitOnly = 5;
    LinkDemand = 6;
    InheritanceDemand = 7;
    RequestMinimum = 8;
    RequestOptional = 9;
    RequestRefuse = 10;
  end;


  //-------------namespace: System.Security.Permissions----------------
  [DNTypeName('System.Security.Permissions.SecurityPermissionFlag')]
  DNSecurityPermissionFlag = type Integer;
  DNSecurityPermissionFlagHelper = record helper for DNSecurityPermissionFlag
  public const
    NoFlags = 0;
    Assertion = 1;
    UnmanagedCode = 2;
    SkipVerification = 4;
    Execution = 8;
    ControlThread = 16;
    ControlEvidence = 32;
    ControlPolicy = 64;
    SerializationFormatter = 128;
    ControlDomainPolicy = 256;
    ControlPrincipal = 512;
    ControlAppDomain = 1024;
    RemotingConfiguration = 2048;
    Infrastructure = 4096;
    BindingRedirects = 8192;
    AllFlags = 16383;
  end;




type


{ declares }

  DNApplicationId = interface; // type: System.ApplicationId, namespace: System
  DNContextStaticAttribute = interface; // type: System.ContextStaticAttribute, namespace: System
  DNLoaderOptimizationAttribute = interface; // type: System.LoaderOptimizationAttribute, namespace: System
  DNComponentGuaranteesAttribute = interface; // type: System.Runtime.Versioning.ComponentGuaranteesAttribute, namespace: System.Runtime.Versioning
  DNResourceConsumptionAttribute = interface; // type: System.Runtime.Versioning.ResourceConsumptionAttribute, namespace: System.Runtime.Versioning
  DNResourceExposureAttribute = interface; // type: System.Runtime.Versioning.ResourceExposureAttribute, namespace: System.Runtime.Versioning
  DNSecurityAttribute = interface; // type: System.Security.Permissions.SecurityAttribute, namespace: System.Security.Permissions
  DNCodeAccessSecurityAttribute = interface; // type: System.Security.Permissions.CodeAccessSecurityAttribute, namespace: System.Security.Permissions
  DNSecurityPermissionAttribute = interface; // type: System.Security.Permissions.SecurityPermissionAttribute, namespace: System.Security.Permissions
  DNStopwatch = interface; // type: System.Diagnostics.Stopwatch, namespace: System.Diagnostics
  DNAppDomainUnloadedException = interface; // type: System.AppDomainUnloadedException, namespace: System
  DNContextMarshalException = interface; // type: System.ContextMarshalException, namespace: System
  DNSwitchExpressionException = interface; // type: System.Runtime.CompilerServices.SwitchExpressionException, namespace: System.Runtime.CompilerServices
  DNInvalidDataException = interface; // type: System.IO.InvalidDataException, namespace: System.IO
  DNContextBoundObject = interface; // type: System.ContextBoundObject, namespace: System
  DNBufferedStream = interface; // type: System.IO.BufferedStream, namespace: System.IO
  DNStringReader = interface; // type: System.IO.StringReader, namespace: System.IO
  DNIndentedTextWriter = interface; // type: System.CodeDom.Compiler.IndentedTextWriter, namespace: System.CodeDom.Compiler
  DNStringWriter = interface; // type: System.IO.StringWriter, namespace: System.IO
  DNAssemblyNameProxy = interface; // type: System.Reflection.AssemblyNameProxy, namespace: System.Reflection
  DNWebUtility = interface; // type: System.Net.WebUtility, namespace: System.Net
  DNProfileOptimization = interface; // type: System.Runtime.ProfileOptimization, namespace: System.Runtime
  DNFrameworkName = interface; // type: System.Runtime.Versioning.FrameworkName, namespace: System.Runtime.Versioning
  DNVersioningHelper = interface; // type: System.Runtime.Versioning.VersioningHelper, namespace: System.Runtime.Versioning
  DNStringNormalizationExtensions = interface; // type: System.StringNormalizationExtensions, namespace: System


{ objects }

  //-------------namespace: System----------------
  DNApplicationIdClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{C41015CE-E7F2-5EF6-9E54-8A667B474312}']
  { constructors } 

    {class} function init(publicKeyToken: TArray<Byte>; name: string; version: DDNC.System.Private.CoreLib.DNVersion; processorArchitecture: string; culture: string): DNApplicationId;

  end;

  [DNTypeName('System.ApplicationId')]
  DNApplicationId = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{AADF7ACA-5AEA-3662-B336-BC4A6CA02703}']
  { getters & setters } 

    function get_Culture: string;
    function get_Name: string;
    function get_ProcessorArchitecture: string;
    function get_Version: DDNC.System.Private.CoreLib.DNVersion;
    function get_PublicKeyToken: TArray<Byte>;

  { methods } 

    function Copy: DNApplicationId;
    function ToString: string;
    function Equals(o: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Culture: string read get_Culture;
    property Name: string read get_Name;
    property ProcessorArchitecture: string read get_ProcessorArchitecture;
    property Version: DDNC.System.Private.CoreLib.DNVersion read get_Version;
    property PublicKeyToken: TArray<Byte> read get_PublicKeyToken;
  end;

  TDNApplicationId = class(TDNGenericImport<DNApplicationIdClass, DNApplicationId>) end;

  //-------------namespace: System----------------
  DNContextStaticAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{BC1419BD-71A7-5FAE-A376-5E814D82AE25}']
  { constructors } 

    {class} function init: DNContextStaticAttribute;

  end;

  [DNTypeName('System.ContextStaticAttribute')]
  DNContextStaticAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{8FBD4E03-D3A4-33CB-9268-2CFDE8D904A1}']
  { getters & setters } 

    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNContextStaticAttribute = class(TDNGenericImport<DNContextStaticAttributeClass, DNContextStaticAttribute>) end;

  //-------------namespace: System----------------
  DNLoaderOptimizationAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{714461B7-51A4-5F18-85B4-CC35BEB0E6AC}']
  { constructors } 

    {class} function init(value: Byte): DNLoaderOptimizationAttribute; overload;
    {class} function init(value: DNLoaderOptimization): DNLoaderOptimizationAttribute; overload;

  end;

  [DNTypeName('System.LoaderOptimizationAttribute')]
  DNLoaderOptimizationAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{A0597C3C-7A55-3B0B-9B55-133DF9C8D64F}']
  { getters & setters } 

    function get_Value: DNLoaderOptimization;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Value: DNLoaderOptimization read get_Value;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNLoaderOptimizationAttribute = class(TDNGenericImport<DNLoaderOptimizationAttributeClass, DNLoaderOptimizationAttribute>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNComponentGuaranteesAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{D88DBF09-B095-5A56-A19A-E433724599A4}']
  { constructors } 

    {class} function init(guarantees: DNComponentGuaranteesOptions): DNComponentGuaranteesAttribute;

  end;

  [DNTypeName('System.Runtime.Versioning.ComponentGuaranteesAttribute')]
  DNComponentGuaranteesAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{E5CBA1E2-88CA-332B-BB1E-571B87807882}']
  { getters & setters } 

    function get_Guarantees: DNComponentGuaranteesOptions;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Guarantees: DNComponentGuaranteesOptions read get_Guarantees;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNComponentGuaranteesAttribute = class(TDNGenericImport<DNComponentGuaranteesAttributeClass, DNComponentGuaranteesAttribute>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNResourceConsumptionAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{7CA2766E-8B1C-5F11-BB84-437631D1B9E0}']
  { constructors } 

    {class} function init(resourceScope: DNResourceScope): DNResourceConsumptionAttribute; overload;
    {class} function init(resourceScope: DNResourceScope; consumptionScope: DNResourceScope): DNResourceConsumptionAttribute; overload;

  end;

  [DNTypeName('System.Runtime.Versioning.ResourceConsumptionAttribute')]
  DNResourceConsumptionAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{573A1CDE-5068-384C-B2C9-9403D863A44A}']
  { getters & setters } 

    function get_ResourceScope: DNResourceScope;
    function get_ConsumptionScope: DNResourceScope;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property ResourceScope: DNResourceScope read get_ResourceScope;
    property ConsumptionScope: DNResourceScope read get_ConsumptionScope;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNResourceConsumptionAttribute = class(TDNGenericImport<DNResourceConsumptionAttributeClass, DNResourceConsumptionAttribute>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNResourceExposureAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{F0FBE26D-11D2-56A7-83F3-BC9E41711872}']
  { constructors } 

    {class} function init(exposureLevel: DNResourceScope): DNResourceExposureAttribute;

  end;

  [DNTypeName('System.Runtime.Versioning.ResourceExposureAttribute')]
  DNResourceExposureAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{060D41FE-AD48-3697-A34B-4A0415852EA6}']
  { getters & setters } 

    function get_ResourceExposureLevel: DNResourceScope;
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property ResourceExposureLevel: DNResourceScope read get_ResourceExposureLevel;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNResourceExposureAttribute = class(TDNGenericImport<DNResourceExposureAttributeClass, DNResourceExposureAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNSecurityAttributeClass = interface(DDNC.System.Private.CoreLib.DNAttributeClass)
  ['{FE7F74B8-AE72-52CF-A31C-3288D017AC3A}']
  end;

  [DNTypeName('System.Security.Permissions.SecurityAttribute')]
  DNSecurityAttribute = interface(DDNC.System.Private.CoreLib.DNAttribute)
  ['{75826829-A992-37FF-9281-7AC4E7B32E34}']
  { getters & setters } 

    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function CreatePermission: DDNC.System.Private.CoreLib.DNIPermission;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNSecurityAttribute = class(TDNGenericImport<DNSecurityAttributeClass, DNSecurityAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNCodeAccessSecurityAttributeClass = interface(DNSecurityAttributeClass)
  ['{158019A4-3EF4-5257-907A-9F62E8E7CB61}']
  end;

  [DNTypeName('System.Security.Permissions.CodeAccessSecurityAttribute')]
  DNCodeAccessSecurityAttribute = interface(DNSecurityAttribute)
  ['{69AF8C07-25F7-3EB4-96D9-E2D85037193B}']
  { getters & setters } 

    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function CreatePermission: DDNC.System.Private.CoreLib.DNIPermission;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNCodeAccessSecurityAttribute = class(TDNGenericImport<DNCodeAccessSecurityAttributeClass, DNCodeAccessSecurityAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNSecurityPermissionAttributeClass = interface(DNCodeAccessSecurityAttributeClass)
  ['{612C3810-4B71-570B-B414-48CEF08F65A8}']
  { constructors } 

    {class} function init(action: DNSecurityAction): DNSecurityPermissionAttribute;

  end;

  [DNTypeName('System.Security.Permissions.SecurityPermissionAttribute')]
  DNSecurityPermissionAttribute = interface(DNCodeAccessSecurityAttribute)
  ['{3B762560-7460-31F6-AE00-CBEC6DAD8D85}']
  { getters & setters } 

    function get_Assertion: Boolean;
    procedure set_Assertion(value: Boolean);
    function get_BindingRedirects: Boolean;
    procedure set_BindingRedirects(value: Boolean);
    function get_ControlAppDomain: Boolean;
    procedure set_ControlAppDomain(value: Boolean);
    function get_ControlDomainPolicy: Boolean;
    procedure set_ControlDomainPolicy(value: Boolean);
    function get_ControlEvidence: Boolean;
    procedure set_ControlEvidence(value: Boolean);
    function get_ControlPolicy: Boolean;
    procedure set_ControlPolicy(value: Boolean);
    function get_ControlPrincipal: Boolean;
    procedure set_ControlPrincipal(value: Boolean);
    function get_ControlThread: Boolean;
    procedure set_ControlThread(value: Boolean);
    function get_Execution: Boolean;
    procedure set_Execution(value: Boolean);
    function get_Flags: DNSecurityPermissionFlag;
    procedure set_Flags(value: DNSecurityPermissionFlag);
    function get_Infrastructure: Boolean;
    procedure set_Infrastructure(value: Boolean);
    function get_RemotingConfiguration: Boolean;
    procedure set_RemotingConfiguration(value: Boolean);
    function get_SerializationFormatter: Boolean;
    procedure set_SerializationFormatter(value: Boolean);
    function get_SkipVerification: Boolean;
    procedure set_SkipVerification(value: Boolean);
    function get_UnmanagedCode: Boolean;
    procedure set_UnmanagedCode(value: Boolean);
    function get_Action: DNSecurityAction;
    procedure set_Action(value: DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function CreatePermission: DDNC.System.Private.CoreLib.DNIPermission;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;

  { propertys } 

    property Assertion: Boolean read get_Assertion write set_Assertion;
    property BindingRedirects: Boolean read get_BindingRedirects write set_BindingRedirects;
    property ControlAppDomain: Boolean read get_ControlAppDomain write set_ControlAppDomain;
    property ControlDomainPolicy: Boolean read get_ControlDomainPolicy write set_ControlDomainPolicy;
    property ControlEvidence: Boolean read get_ControlEvidence write set_ControlEvidence;
    property ControlPolicy: Boolean read get_ControlPolicy write set_ControlPolicy;
    property ControlPrincipal: Boolean read get_ControlPrincipal write set_ControlPrincipal;
    property ControlThread: Boolean read get_ControlThread write set_ControlThread;
    property Execution: Boolean read get_Execution write set_Execution;
    property Flags: DNSecurityPermissionFlag read get_Flags write set_Flags;
    property Infrastructure: Boolean read get_Infrastructure write set_Infrastructure;
    property RemotingConfiguration: Boolean read get_RemotingConfiguration write set_RemotingConfiguration;
    property SerializationFormatter: Boolean read get_SerializationFormatter write set_SerializationFormatter;
    property SkipVerification: Boolean read get_SkipVerification write set_SkipVerification;
    property UnmanagedCode: Boolean read get_UnmanagedCode write set_UnmanagedCode;
    property Action: DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDNC.System.Private.CoreLib.DNObject read get_TypeId;
  end;

  TDNSecurityPermissionAttribute = class(TDNGenericImport<DNSecurityPermissionAttributeClass, DNSecurityPermissionAttribute>) end;

  //-------------namespace: System.Diagnostics----------------
  DNStopwatchClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{A72BC404-CA03-55B6-A86E-118BE8B2A5F2}']
  { constructors } 

    {class} function init: DNStopwatch;

  { static fields getter & setter } 

   function __fakeFieldGet_Frequency: Int64;
   function __fakeFieldGet_IsHighResolution: Boolean;

  { static fields } 

    {class} property Frequency: Int64 read __fakeFieldGet_Frequency;
    {class} property IsHighResolution: Boolean read __fakeFieldGet_IsHighResolution;

  { static methods } 

    {class} function StartNew: DNStopwatch;
    {class} function GetTimestamp: Int64;

  end;

  [DNTypeName('System.Diagnostics.Stopwatch')]
  DNStopwatch = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{76E735C2-0531-3792-A844-64DD787B0C00}']
  { getters & setters } 

    function get_IsRunning: Boolean;
    function get_Elapsed: DDNC.System.Private.CoreLib.DNTimeSpan;
    function get_ElapsedMilliseconds: Int64;
    function get_ElapsedTicks: Int64;

  { methods } 

    procedure Start;
    procedure Stop;
    procedure Reset;
    procedure Restart;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property IsRunning: Boolean read get_IsRunning;
    property Elapsed: DDNC.System.Private.CoreLib.DNTimeSpan read get_Elapsed;
    property ElapsedMilliseconds: Int64 read get_ElapsedMilliseconds;
    property ElapsedTicks: Int64 read get_ElapsedTicks;
  end;

  TDNStopwatch = class(TDNGenericImport<DNStopwatchClass, DNStopwatch>) end;

  //-------------namespace: System----------------
  DNAppDomainUnloadedExceptionClass = interface(DDNC.System.Private.CoreLib.DNSystemExceptionClass)
  ['{62247629-7D4E-5F81-8556-B2B938DAC0E9}']
  { constructors } 

    {class} function init: DNAppDomainUnloadedException; overload;
    {class} function init(message: string): DNAppDomainUnloadedException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNAppDomainUnloadedException; overload;

  end;

  [DNTypeName('System.AppDomainUnloadedException')]
  DNAppDomainUnloadedException = interface(DDNC.System.Private.CoreLib.DNSystemException)
  ['{7BEF9DEE-82A1-39CE-AAA4-15019E6E43F8}']
  { getters & setters } 

    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNAppDomainUnloadedException = class(TDNGenericImport<DNAppDomainUnloadedExceptionClass, DNAppDomainUnloadedException>) end;

  //-------------namespace: System----------------
  DNContextMarshalExceptionClass = interface(DDNC.System.Private.CoreLib.DNSystemExceptionClass)
  ['{732F0C57-AAE2-5499-8255-307E400B3463}']
  { constructors } 

    {class} function init: DNContextMarshalException; overload;
    {class} function init(message: string): DNContextMarshalException; overload;
    {class} function init(message: string; inner: DDNC.System.Private.CoreLib.DNException): DNContextMarshalException; overload;

  end;

  [DNTypeName('System.ContextMarshalException')]
  DNContextMarshalException = interface(DDNC.System.Private.CoreLib.DNSystemException)
  ['{61BAE908-EBCA-3127-958A-9D9A510F78B8}']
  { getters & setters } 

    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNContextMarshalException = class(TDNGenericImport<DNContextMarshalExceptionClass, DNContextMarshalException>) end;

  //-------------namespace: System.Runtime.CompilerServices----------------
  DNSwitchExpressionExceptionClass = interface(DDNC.System.Private.CoreLib.DNInvalidOperationExceptionClass)
  ['{5548CA86-7BB0-5B6F-83CD-870F6AE13994}']
  { constructors } 

    {class} function init: DNSwitchExpressionException; overload;
    {class} function init(innerException: DDNC.System.Private.CoreLib.DNException): DNSwitchExpressionException; overload;
    {class} function init(unmatchedValue: DDNC.System.Private.CoreLib.DNObject): DNSwitchExpressionException; overload;
    {class} function init(message: string): DNSwitchExpressionException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNSwitchExpressionException; overload;

  end;

  [DNTypeName('System.Runtime.CompilerServices.SwitchExpressionException')]
  DNSwitchExpressionException = interface(DDNC.System.Private.CoreLib.DNInvalidOperationException)
  ['{8D5BBF85-BF2C-32D4-ABF0-75322FD2A29C}']
  { getters & setters } 

    function get_UnmatchedValue: DDNC.System.Private.CoreLib.DNObject;
    function get_Message: string;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property UnmatchedValue: DDNC.System.Private.CoreLib.DNObject read get_UnmatchedValue;
    property Message: string read get_Message;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNSwitchExpressionException = class(TDNGenericImport<DNSwitchExpressionExceptionClass, DNSwitchExpressionException>) end;

  //-------------namespace: System.IO----------------
  DNInvalidDataExceptionClass = interface(DDNC.System.Private.CoreLib.DNSystemExceptionClass)
  ['{49FD2E63-44D2-574C-B608-F50D0C2623DB}']
  { constructors } 

    {class} function init: DNInvalidDataException; overload;
    {class} function init(message: string): DNInvalidDataException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNInvalidDataException; overload;

  end;

  [DNTypeName('System.IO.InvalidDataException')]
  DNInvalidDataException = interface(DDNC.System.Private.CoreLib.DNSystemException)
  ['{8FDE0427-95FB-32AC-99F8-150D594B4A26}']
  { getters & setters } 

    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;
    procedure set_HResult(value: Int32);

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult write set_HResult;
  end;

  TDNInvalidDataException = class(TDNGenericImport<DNInvalidDataExceptionClass, DNInvalidDataException>) end;

  //-------------namespace: System----------------
  DNContextBoundObjectClass = interface(DDNC.System.Private.CoreLib.DNMarshalByRefObjectClass)
  ['{70E289C0-8107-5E8D-83E5-6116ABC19977}']
  end;

  [DNTypeName('System.ContextBoundObject')]
  DNContextBoundObject = interface(DDNC.System.Private.CoreLib.DNMarshalByRefObject)
  ['{3692ABD2-7930-31D1-B65C-061A10879463}']
  { methods } 

    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNContextBoundObject = class(TDNGenericImport<DNContextBoundObjectClass, DNContextBoundObject>) end;

  //-------------namespace: System.IO----------------
  DNBufferedStreamClass = interface(DDNC.System.Private.CoreLib.DNStreamClass)
  ['{B00BA2C3-B866-56EB-BCB5-92483B87AECF}']
  { constructors } 

    {class} function init(stream: DDNC.System.Private.CoreLib.DNStream): DNBufferedStream; overload;
    {class} function init(stream: DDNC.System.Private.CoreLib.DNStream; bufferSize: Int32): DNBufferedStream; overload;

  end;

  [DNTypeName('System.IO.BufferedStream')]
  DNBufferedStream = interface(DDNC.System.Private.CoreLib.DNStream)
  ['{AF5EB9DF-D605-3BEE-BFE0-A0EB287E43F0}']
  { getters & setters } 

    function get_UnderlyingStream: DDNC.System.Private.CoreLib.DNStream;
    function get_BufferSize: Int32;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_CanSeek: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    function DisposeAsync: DDNC.System.Private.CoreLib.DNValueTask;
    procedure Flush;
    function FlushAsync(cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    function Read(&array: TArray<Byte>; offset: Int32; count: Int32): Int32; overload;
    function Read(destination: DDNC.System.Private.CoreLib.DNSpan<Byte>): Int32; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask<Int32>; overload;
    function ReadAsync(buffer: DDNC.System.Private.CoreLib.DNMemory<Byte>; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNValueTask<Int32>; overload;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDNC.System.Private.CoreLib.DNAsyncCallback; state: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNIAsyncResult;
    function EndRead(asyncResult: DDNC.System.Private.CoreLib.DNIAsyncResult): Int32;
    function ReadByte: Int32;
    procedure Write(&array: TArray<Byte>; offset: Int32; count: Int32); overload;
    procedure Write(buffer: DDNC.System.Private.CoreLib.DNReadOnlySpan<Byte>); overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteAsync(buffer: DDNC.System.Private.CoreLib.DNReadOnlyMemory<Byte>; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNValueTask; overload;
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDNC.System.Private.CoreLib.DNAsyncCallback; state: DDNC.System.Private.CoreLib.DNObject): DDNC.System.Private.CoreLib.DNIAsyncResult;
    procedure EndWrite(asyncResult: DDNC.System.Private.CoreLib.DNIAsyncResult);
    procedure WriteByte(value: Byte);
    function Seek(offset: Int64; origin: DDNC.System.Private.CoreLib.DNSeekOrigin): Int64;
    procedure SetLength(value: Int64);
    procedure CopyTo(destination: DDNC.System.Private.CoreLib.DNStream; bufferSize: Int32); overload;
    function CopyToAsync(destination: DDNC.System.Private.CoreLib.DNStream; bufferSize: Int32; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    function CopyToAsync(destination: DDNC.System.Private.CoreLib.DNStream): DDNC.System.Private.CoreLib.DNTask; overload;
    function CopyToAsync(destination: DDNC.System.Private.CoreLib.DNStream; bufferSize: Int32): DDNC.System.Private.CoreLib.DNTask; overload;
    function CopyToAsync(destination: DDNC.System.Private.CoreLib.DNStream; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    procedure CopyTo(destination: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure Close;
    procedure Dispose;
    function FlushAsync: DDNC.System.Private.CoreLib.DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask; overload;
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property UnderlyingStream: DDNC.System.Private.CoreLib.DNStream read get_UnderlyingStream;
    property BufferSize: Int32 read get_BufferSize;
    property CanRead: Boolean read get_CanRead;
    property CanWrite: Boolean read get_CanWrite;
    property CanSeek: Boolean read get_CanSeek;
    property Length: Int64 read get_Length;
    property Position: Int64 read get_Position write set_Position;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNBufferedStream = class(TDNGenericImport<DNBufferedStreamClass, DNBufferedStream>) end;

  //-------------namespace: System.IO----------------
  DNStringReaderClass = interface(DDNC.System.Private.CoreLib.DNTextReaderClass)
  ['{F36C695C-2B33-5DB7-8121-565F0059BF55}']
  { constructors } 

    {class} function init(s: string): DNStringReader;

  end;

  [DNTypeName('System.IO.StringReader')]
  DNStringReader = interface(DDNC.System.Private.CoreLib.DNTextReader)
  ['{27483AE8-25D8-3C96-AAE0-298703EA89D8}']
  { methods } 

    procedure Close;
    function Peek: Int32;
    function Read: Int32; overload;
    function Read(buffer: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function Read(buffer: DDNC.System.Private.CoreLib.DNSpan<Char>): Int32; overload;
    function ReadBlock(buffer: DDNC.System.Private.CoreLib.DNSpan<Char>): Int32; overload;
    function ReadToEnd: string;
    function ReadLine: string;
    function ReadLineAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadToEndAsync: DDNC.System.Private.CoreLib.DNTask<string>;
    function ReadBlockAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>; overload;
    function ReadBlockAsync(buffer: DDNC.System.Private.CoreLib.DNMemory<Char>; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNValueTask<Int32>; overload;
    function ReadAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask<Int32>; overload;
    function ReadAsync(buffer: DDNC.System.Private.CoreLib.DNMemory<Char>; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNValueTask<Int32>; overload;
    procedure Dispose;
    function ReadBlock(buffer: TArray<Char>; index: Int32; count: Int32): Int32; overload;
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNStringReader = class(TDNGenericImport<DNStringReaderClass, DNStringReader>) end;

  //-------------namespace: System.CodeDom.Compiler----------------
  DNIndentedTextWriterClass = interface(DDNC.System.Private.CoreLib.DNTextWriterClass)
  ['{B878411B-411C-51C8-B5D4-15AFCAAA3BBF}']
  { constructors } 

    {class} function init(writer: DDNC.System.Private.CoreLib.DNTextWriter): DNIndentedTextWriter; overload;
    {class} function init(writer: DDNC.System.Private.CoreLib.DNTextWriter; tabString: string): DNIndentedTextWriter; overload;

  end;

  [DNTypeName('System.CodeDom.Compiler.IndentedTextWriter')]
  DNIndentedTextWriter = interface(DDNC.System.Private.CoreLib.DNTextWriter)
  ['{2C11B822-29FB-3697-8D65-7B46110781D6}']
  { getters & setters } 

    function get_Encoding: DDNC.System.Private.CoreLib.DNEncoding;
    function get_NewLine: string;
    procedure set_NewLine(value: string);
    function get_Indent: Int32;
    procedure set_Indent(value: Int32);
    function get_InnerWriter: DDNC.System.Private.CoreLib.DNTextWriter;
    function get_FormatProvider: DDNC.System.Private.CoreLib.DNIFormatProvider;

  { methods } 

    procedure Close;
    procedure Flush;
    procedure Write(s: string); overload;
    procedure Write(value: Boolean); overload;
    procedure Write(value: Char); overload;
    procedure Write(buffer: TArray<Char>); overload;
    procedure Write(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure Write(value: Double); overload;
    procedure Write(value: Single); overload;
    procedure Write(value: Int32); overload;
    procedure Write(value: Int64); overload;
    procedure Write(value: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Write(format: string; arg0: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Write(format: string; arg0: DDNC.System.Private.CoreLib.DNObject; arg1: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Write(format: string; arg: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    procedure WriteLineNoTabs(s: string);
    procedure WriteLine(s: string); overload;
    procedure WriteLine; overload;
    procedure WriteLine(value: Boolean); overload;
    procedure WriteLine(value: Char); overload;
    procedure WriteLine(buffer: TArray<Char>); overload;
    procedure WriteLine(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteLine(value: Double); overload;
    procedure WriteLine(value: Single); overload;
    procedure WriteLine(value: Int32); overload;
    procedure WriteLine(value: Int64); overload;
    procedure WriteLine(value: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure WriteLine(format: string; arg0: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure WriteLine(format: string; arg0: DDNC.System.Private.CoreLib.DNObject; arg1: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure WriteLine(format: string; arg: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    procedure WriteLine(value: UInt32); overload;
    procedure Dispose;
    function DisposeAsync: DDNC.System.Private.CoreLib.DNValueTask;
    procedure Write(buffer: DDNC.System.Private.CoreLib.DNReadOnlySpan<Char>); overload;
    procedure Write(value: UInt32); overload;
    procedure Write(value: UInt64); overload;
    procedure Write(value: DDNC.System.Private.CoreLib.DNDecimal); overload;
    procedure Write(value: DDNC.System.Private.CoreLib.DNStringBuilder); overload;
    procedure Write(format: string; arg0: DDNC.System.Private.CoreLib.DNObject; arg1: DDNC.System.Private.CoreLib.DNObject; arg2: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure WriteLine(buffer: DDNC.System.Private.CoreLib.DNReadOnlySpan<Char>); overload;
    procedure WriteLine(value: UInt64); overload;
    procedure WriteLine(value: DDNC.System.Private.CoreLib.DNDecimal); overload;
    procedure WriteLine(value: DDNC.System.Private.CoreLib.DNStringBuilder); overload;
    procedure WriteLine(format: string; arg0: DDNC.System.Private.CoreLib.DNObject; arg1: DDNC.System.Private.CoreLib.DNObject; arg2: DDNC.System.Private.CoreLib.DNObject); overload;
    function WriteAsync(value: Char): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteAsync(value: string): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteAsync(value: DDNC.System.Private.CoreLib.DNStringBuilder; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteAsync(buffer: TArray<Char>): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteAsync(buffer: DDNC.System.Private.CoreLib.DNReadOnlyMemory<Char>; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteLineAsync(value: Char): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteLineAsync(value: string): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteLineAsync(value: DDNC.System.Private.CoreLib.DNStringBuilder; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteLineAsync(buffer: DDNC.System.Private.CoreLib.DNReadOnlyMemory<Char>; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteLineAsync: DDNC.System.Private.CoreLib.DNTask; overload;
    function FlushAsync: DDNC.System.Private.CoreLib.DNTask;
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Encoding: DDNC.System.Private.CoreLib.DNEncoding read get_Encoding;
    property NewLine: string read get_NewLine write set_NewLine;
    property Indent: Int32 read get_Indent write set_Indent;
    property InnerWriter: DDNC.System.Private.CoreLib.DNTextWriter read get_InnerWriter;
    property FormatProvider: DDNC.System.Private.CoreLib.DNIFormatProvider read get_FormatProvider;
  end;

  TDNIndentedTextWriter = class(TDNGenericImport<DNIndentedTextWriterClass, DNIndentedTextWriter>)
  public const
   DefaultTabString = '    ';
  end;

  //-------------namespace: System.IO----------------
  DNStringWriterClass = interface(DDNC.System.Private.CoreLib.DNTextWriterClass)
  ['{E505BEFE-8BED-5A1F-B526-D82B8904B641}']
  { constructors } 

    {class} function init: DNStringWriter; overload;
    {class} function init(formatProvider: DDNC.System.Private.CoreLib.DNIFormatProvider): DNStringWriter; overload;
    {class} function init(sb: DDNC.System.Private.CoreLib.DNStringBuilder): DNStringWriter; overload;
    {class} function init(sb: DDNC.System.Private.CoreLib.DNStringBuilder; formatProvider: DDNC.System.Private.CoreLib.DNIFormatProvider): DNStringWriter; overload;

  end;

  [DNTypeName('System.IO.StringWriter')]
  DNStringWriter = interface(DDNC.System.Private.CoreLib.DNTextWriter)
  ['{8CBE3592-1980-337F-AC41-721330C5E84E}']
  { getters & setters } 

    function get_Encoding: DDNC.System.Private.CoreLib.DNEncoding;
    function get_FormatProvider: DDNC.System.Private.CoreLib.DNIFormatProvider;
    function get_NewLine: string;
    procedure set_NewLine(value: string);

  { methods } 

    procedure Close;
    function GetStringBuilder: DDNC.System.Private.CoreLib.DNStringBuilder;
    procedure Write(value: Char); overload;
    procedure Write(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure Write(buffer: DDNC.System.Private.CoreLib.DNReadOnlySpan<Char>); overload;
    procedure Write(value: string); overload;
    procedure Write(value: DDNC.System.Private.CoreLib.DNStringBuilder); overload;
    procedure WriteLine(buffer: DDNC.System.Private.CoreLib.DNReadOnlySpan<Char>); overload;
    procedure WriteLine(value: DDNC.System.Private.CoreLib.DNStringBuilder); overload;
    function WriteAsync(value: Char): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteAsync(value: string): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteAsync(buffer: DDNC.System.Private.CoreLib.DNReadOnlyMemory<Char>; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteAsync(value: DDNC.System.Private.CoreLib.DNStringBuilder; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteLineAsync(value: Char): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteLineAsync(value: string): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteLineAsync(value: DDNC.System.Private.CoreLib.DNStringBuilder; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteLineAsync(buffer: DDNC.System.Private.CoreLib.DNReadOnlyMemory<Char>; cancellationToken: DDNC.System.Private.CoreLib.DNCancellationToken): DDNC.System.Private.CoreLib.DNTask; overload;
    function FlushAsync: DDNC.System.Private.CoreLib.DNTask;
    function ToString: string;
    procedure Dispose;
    function DisposeAsync: DDNC.System.Private.CoreLib.DNValueTask;
    procedure Flush;
    procedure Write(buffer: TArray<Char>); overload;
    procedure Write(value: Boolean); overload;
    procedure Write(value: Int32); overload;
    procedure Write(value: UInt32); overload;
    procedure Write(value: Int64); overload;
    procedure Write(value: UInt64); overload;
    procedure Write(value: Single); overload;
    procedure Write(value: Double); overload;
    procedure Write(value: DDNC.System.Private.CoreLib.DNDecimal); overload;
    procedure Write(value: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Write(format: string; arg0: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Write(format: string; arg0: DDNC.System.Private.CoreLib.DNObject; arg1: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Write(format: string; arg0: DDNC.System.Private.CoreLib.DNObject; arg1: DDNC.System.Private.CoreLib.DNObject; arg2: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure Write(format: string; arg: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    procedure WriteLine; overload;
    procedure WriteLine(value: Char); overload;
    procedure WriteLine(buffer: TArray<Char>); overload;
    procedure WriteLine(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteLine(value: Boolean); overload;
    procedure WriteLine(value: Int32); overload;
    procedure WriteLine(value: UInt32); overload;
    procedure WriteLine(value: Int64); overload;
    procedure WriteLine(value: UInt64); overload;
    procedure WriteLine(value: Single); overload;
    procedure WriteLine(value: Double); overload;
    procedure WriteLine(value: DDNC.System.Private.CoreLib.DNDecimal); overload;
    procedure WriteLine(value: string); overload;
    procedure WriteLine(value: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure WriteLine(format: string; arg0: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure WriteLine(format: string; arg0: DDNC.System.Private.CoreLib.DNObject; arg1: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure WriteLine(format: string; arg0: DDNC.System.Private.CoreLib.DNObject; arg1: DDNC.System.Private.CoreLib.DNObject; arg2: DDNC.System.Private.CoreLib.DNObject); overload;
    procedure WriteLine(format: string; arg: TArray<DDNC.System.Private.CoreLib.DNObject>); overload;
    function WriteAsync(buffer: TArray<Char>): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>): DDNC.System.Private.CoreLib.DNTask; overload;
    function WriteLineAsync: DDNC.System.Private.CoreLib.DNTask; overload;
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Encoding: DDNC.System.Private.CoreLib.DNEncoding read get_Encoding;
    property FormatProvider: DDNC.System.Private.CoreLib.DNIFormatProvider read get_FormatProvider;
    property NewLine: string read get_NewLine write set_NewLine;
  end;

  TDNStringWriter = class(TDNGenericImport<DNStringWriterClass, DNStringWriter>) end;

  //-------------namespace: System.Reflection----------------
  DNAssemblyNameProxyClass = interface(DDNC.System.Private.CoreLib.DNMarshalByRefObjectClass)
  ['{9D12DB5F-3AC1-59E6-8A42-54EC472903EF}']
  { constructors } 

    {class} function init: DNAssemblyNameProxy;

  end;

  [DNTypeName('System.Reflection.AssemblyNameProxy')]
  DNAssemblyNameProxy = interface(DDNC.System.Private.CoreLib.DNMarshalByRefObject)
  ['{9BAA9800-1BEF-35EC-862C-85606F8F8463}']
  { methods } 

    function GetAssemblyName(assemblyFile: string): DDNC.System.Private.CoreLib.DNAssemblyName;
    function GetLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function InitializeLifetimeService: DDNC.System.Private.CoreLib.DNObject;
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNAssemblyNameProxy = class(TDNGenericImport<DNAssemblyNameProxyClass, DNAssemblyNameProxy>) end;

  //-------------namespace: System.Net----------------
  DNWebUtilityClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{024821A5-E20D-5F6C-9FA5-9A23B57CA533}']
  { static methods } 

    {class} function HtmlEncode(value: string): string; overload;
    {class} procedure HtmlEncode(value: string; output: DDNC.System.Private.CoreLib.DNTextWriter); overload;
    {class} function HtmlDecode(value: string): string; overload;
    {class} procedure HtmlDecode(value: string; output: DDNC.System.Private.CoreLib.DNTextWriter); overload;
    {class} function UrlEncode(value: string): string;
    {class} function UrlEncodeToBytes(value: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>;
    {class} function UrlDecode(encodedValue: string): string;
    {class} function UrlDecodeToBytes(encodedValue: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>;

  end;

  [DNTypeName('System.Net.WebUtility')]
  DNWebUtility = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{4F3FE74B-77A3-33F6-8F06-59FA9E7B2C2A}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNWebUtility = class(TDNGenericImport<DNWebUtilityClass, DNWebUtility>) end;

  //-------------namespace: System.Runtime----------------
  DNProfileOptimizationClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{E7061802-4AF4-5845-A8F0-0B50991B370F}']
  { static methods } 

    {class} procedure SetProfileRoot(directoryPath: string);
    {class} procedure StartProfile(profile: string);

  end;

  [DNTypeName('System.Runtime.ProfileOptimization')]
  DNProfileOptimization = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{7C671C32-676D-3726-9133-8721803B881C}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNProfileOptimization = class(TDNGenericImport<DNProfileOptimizationClass, DNProfileOptimization>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNFrameworkNameClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{AD18D156-8634-5E38-A712-1CD5901D687C}']
  { constructors } 

    {class} function init(identifier: string; version: DDNC.System.Private.CoreLib.DNVersion): DNFrameworkName; overload;
    {class} function init(identifier: string; version: DDNC.System.Private.CoreLib.DNVersion; profile: string): DNFrameworkName; overload;
    {class} function init(frameworkName: string): DNFrameworkName; overload;

  end;

  [DNTypeName('System.Runtime.Versioning.FrameworkName')]
  DNFrameworkName = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{F07ED099-A0CD-3C58-A2A3-2E5D31A750A3}']
  { getters & setters } 

    function get_Identifier: string;
    function get_Version: DDNC.System.Private.CoreLib.DNVersion;
    function get_Profile: string;
    function get_FullName: string;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNFrameworkName): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Identifier: string read get_Identifier;
    property Version: DDNC.System.Private.CoreLib.DNVersion read get_Version;
    property Profile: string read get_Profile;
    property FullName: string read get_FullName;
  end;

  TDNFrameworkName = class(TDNGenericImport<DNFrameworkNameClass, DNFrameworkName>) end;

  //-------------namespace: System.Runtime.Versioning----------------
  DNVersioningHelperClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{BB019F32-E16A-53EF-8926-505E0C4AEF7F}']
  { static methods } 

    {class} function MakeVersionSafeName(name: string; from: DNResourceScope; &to: DNResourceScope): string; overload;
    {class} function MakeVersionSafeName(name: string; from: DNResourceScope; &to: DNResourceScope; &type: DDNC.System.Private.CoreLib.DNType): string; overload;

  end;

  [DNTypeName('System.Runtime.Versioning.VersioningHelper')]
  DNVersioningHelper = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{5D14B600-FB5E-33E4-BEC3-3AB2CD396449}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNVersioningHelper = class(TDNGenericImport<DNVersioningHelperClass, DNVersioningHelper>) end;

  //-------------namespace: System----------------
  DNStringNormalizationExtensionsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{EDA3E3B2-E050-5DCD-A936-F5E9361005AF}']
  { static methods } 

    {class} function IsNormalized(strInput: string): Boolean; overload;
    {class} function IsNormalized(strInput: string; normalizationForm: DDNC.System.Private.CoreLib.DNNormalizationForm): Boolean; overload;
    {class} function Normalize(strInput: string): string; overload;
    {class} function Normalize(strInput: string; normalizationForm: DDNC.System.Private.CoreLib.DNNormalizationForm): string; overload;

  end;

  [DNTypeName('System.StringNormalizationExtensions')]
  DNStringNormalizationExtensions = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{C6A1BC62-5B5A-38FB-BBB7-B79178565655}']
  { methods } 

    function GetType: DDNC.System.Private.CoreLib.DNType;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  end;

  TDNStringNormalizationExtensions = class(TDNGenericImport<DNStringNormalizationExtensionsClass, DNStringNormalizationExtensions>) end;


implementation


initialization
  LoadAssemblyModule('System.Runtime.Extensions, Version=4.2.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a');

finalization

end.
