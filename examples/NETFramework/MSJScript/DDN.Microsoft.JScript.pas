//----------------------------------------------------------------------------
//  Microsoft.JScript.dll: Microsoft.JScript, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.Microsoft.JScript
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.Microsoft.JScript;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes feature，fpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System;

type

{ enums }

  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  指定运行命令行编译器 jsc.exe 时出现的错误。
  ///  此枚举用于创建<see cref="T:Microsoft.JScript.CmdLineException" />
  ///  对象。
  ///</summary>
  [DNTypeName('Microsoft.JScript.CmdLineError')]
  DNCmdLineError = type Integer;
  DNCmdLineErrorHelper = record helper for DNCmdLineError
  public const
    ///<summary>
    ///  任何错误。
    ///  这是默认值。
    ///</summary>
    NoError = 0;
    ///<summary>
    ///  找不到引用的程序集"{0}"。
    ///</summary>
    AssemblyNotFound = 2001;
    ///<summary>
    ///  无法创建 JScript 引擎。
    ///</summary>
    CannotCreateEngine = 2002;
    ///<summary>
    ///  无法更改的编译器常量"{0}"的值。
    ///</summary>
    CompilerConstant = 2003;
    ///<summary>
    ///  重复的文件名称:"{0}"源文件和导入的程序集将作为列出。
    ///</summary>
    DuplicateFileAsSourceAndAssembly = 2004;
    ///<summary>
    ///  资源文件"{0}"引用不止一次。
    ///</summary>
    DuplicateResourceFile = 2005;
    ///<summary>
    ///  资源名称"{0}"不是唯一的。
    ///</summary>
    DuplicateResourceName = 2006;
    ///<summary>
    ///  重复的文件名称:"{0}"被列为源文件不止一次。
    ///</summary>
    DuplicateSourceFile = 2007;
    ///<summary>
    ///  错误保存编译状态时: {0}。
    ///</summary>
    ErrorSavingCompiledState = 2008;
    ///<summary>
    ///  "{0}"不是有效的程序集。
    ///</summary>
    InvalidAssembly = 2009;
    ///<summary>
    ///  代码页"{0}"是无效或未安装。
    ///</summary>
    InvalidCodePage = 2010;
    ///<summary>
    ///  定义"{0}"必须将分配一个布尔值或整数值。
    ///</summary>
    InvalidDefinition = 2011;
    ///<summary>
    ///  区域设置 ID"{0}"是无效或未安装。
    ///</summary>
    InvalidLocaleID = 2012;
    ///<summary>
    ///  目标"{0}"无效。
    ///  指定 exe 或库。
    ///</summary>
    InvalidTarget = 2013;
    ///<summary>
    ///  “{0}”不是有效的源文件。
    ///</summary>
    InvalidSourceFile = 2014;
    ///<summary>
    ///  使用选项"{0}"指定了无效的警告级别。
    ///</summary>
    InvalidWarningLevel = 2015;
    ///<summary>
    ///  指定多个输出文件名称。
    ///</summary>
    MultipleOutputNames = 2016;
    ///<summary>
    ///  指定的多个目标。
    ///</summary>
    MultipleTargets = 2017;
    ///<summary>
    ///  缺少标识符的定义: 命令行选项。
    ///</summary>
    MissingDefineArgument = 2018;
    ///<summary>
    ///  缺少"{0}"的文件扩展名。
    ///</summary>
    MissingExtension = 2019;
    ///<summary>
    ///  缺少文件规范-lib: 命令行选项。
    ///</summary>
    MissingLibArgument = 2020;
    ///<summary>
    ///  -Assembly.version 选项中缺少的版本信息。
    ///</summary>
    MissingVersionInfo = 2021;
    ///<summary>
    ///  找不到托管的资源"{0}"。
    ///</summary>
    ManagedResourceNotFound = 2022;
    ///<summary>
    ///  无法处理嵌套的响应文件。
    ///</summary>
    NestedResponseFiles = 2023;
    ///<summary>
    ///  指定了选项"{0}"，没有代码页。
    ///</summary>
    NoCodePage = 2024;
    ///<summary>
    ///  使用选项"{0}"指定任何文件名。
    ///</summary>
    NoFileName = 2025;
    ///<summary>
    ///  未指定输入源。
    ///</summary>
    NoInputSourcesSpecified = 2026;
    ///<summary>
    ///  使用选项"{0}"不指定任何区域设置 ID。
    ///</summary>
    NoLocaleID = 2027;
    ///<summary>
    ///  没有使用选项"{0}"指定的警告级别。
    ///</summary>
    NoWarningLevel = 2028;
    ///<summary>
    ///  找不到"{0}"的 Win32 资源。
    ///</summary>
    ResourceNotFound = 2029;
    ///<summary>
    ///  未知的选项"{0}"。
    ///</summary>
    UnknownOption = 2030;
    ///<summary>
    ///  "{0}"不是有效的版本字符串。
    ///</summary>
    InvalidVersion = 2031;
    ///<summary>
    ///  源文件太大。
    ///</summary>
    SourceFileTooBig = 2032;
    ///<summary>
    ///  不能指定多个 Win32 资源文件。
    ///</summary>
    MultipleWin32Resources = 2033;
    ///<summary>
    ///  缺少自变量列表"{0}"中的引用。
    ///</summary>
    MissingReference = 2034;
    ///<summary>
    ///  找不到源文件"{0}"。
    ///</summary>
    SourceNotFound = 2035;
    ///<summary>
    ///  文件名称"{0}"包含无效字符 （不支持通配符）。
    ///</summary>
    InvalidCharacters = 2036;
    ///<summary>
    ///  "{0}"不允许在 CompilerOptions 字段中。
    ///</summary>
    InvalidForCompilerOptions = 2037;
    ///<summary>
    ///  值<see cref="P:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable" />
    ///  属性不兼容与目标类型"{0}"。
    ///</summary>
    IncompatibleTargets = 2038;
    ///<summary>
    ///  平台"{0}"无效。
    ///  指定 x86、 Itanium、 x64 或 anycpu。
    ///</summary>
    InvalidPlatform = 2039;
    ///<summary>
    ///  一个包含相同的值的最后一个 （最高） 分配的枚举值的占位符枚举成员。
    ///</summary>
    LAST = 2039;
    ///<summary>
    ///  未指定的错误。
    ///</summary>
    Unspecified = 2999;
  end;


  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  指定 JScript 错误类型。
  ///</summary>
  [DNTypeName('Microsoft.JScript.ErrorType')]
  DNErrorType = type Integer;
  DNErrorTypeHelper = record helper for DNErrorType
  public const
    ///<summary>
    ///  以外的其他错误类型的其他任何错误。
    ///  这是默认值。
    ///</summary>
    OtherError = 0;
    ///<summary>
    ///  Eval 方法 (Visual Studio-JScript) 错误。
    ///  对应于 <see cref="T:Microsoft.JScript.EvalErrorObject" />
    ///  对象。
    ///</summary>
    EvalError = 1;
    ///<summary>
    ///  范围错误。
    ///  对应于 <see cref="T:Microsoft.JScript.RangeErrorObject" />
    ///  对象。
    ///</summary>
    RangeError = 2;
    ///<summary>
    ///  引用错误。
    ///  对应于 <see cref="T:Microsoft.JScript.ReferenceErrorObject" />
    ///  对象。
    ///</summary>
    ReferenceError = 3;
    ///<summary>
    ///  出现语法错误。
    ///  对应于 <see cref="T:Microsoft.JScript.SyntaxErrorObject" />
    ///  对象。
    ///</summary>
    SyntaxError = 4;
    ///<summary>
    ///  类型错误。
    ///  对应于 <see cref="T:Microsoft.JScript.TypeErrorObject" />
    ///  对象。
    ///</summary>
    TypeError = 5;
    ///<summary>
    ///  统一资源标识符 (URI) 时出错。
    ///  对应于 <see cref="T:Microsoft.JScript.URIErrorObject" />
    ///  对象。
    ///</summary>
    URIError = 6;
  end;


  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  指定的内置的 JScript 函数。
  ///  这些函数对应于内部函数的 JScript 对象的静态方法。
  ///  此枚举的成员用于创建<see cref="T:Microsoft.JScript.JSFunctionAttribute" />
  ///  对象。
  ///</summary>
  [DNTypeName('Microsoft.JScript.JSBuiltin')]
  DNJSBuiltin = type Integer;
  DNJSBuiltinHelper = record helper for DNJSBuiltin
  public const
    ///<summary>
    ///  任何方法。
    ///  这是默认值。
    ///</summary>
    None = 0;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.ArrayPrototype.concat(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object[])" />
    ///  方法<see cref="T:Microsoft.JScript.ArrayPrototype" />
    ///  类。
    ///</summary>
    Array_concat = 1;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.ArrayPrototype.join(System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.ArrayPrototype" />
    ///  类。
    ///</summary>
    Array_join = 2;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.ArrayPrototype.pop(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.ArrayPrototype" />
    ///  类。
    ///</summary>
    Array_pop = 3;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.ArrayPrototype.push(System.Object,System.Object[])" />
    ///  方法<see cref="T:Microsoft.JScript.ArrayPrototype" />
    ///  类。
    ///</summary>
    Array_push = 4;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.ArrayPrototype.reverse(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.ArrayPrototype" />
    ///  类。
    ///</summary>
    Array_reverse = 5;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.ArrayPrototype.shift(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.ArrayPrototype" />
    ///  类。
    ///</summary>
    Array_shift = 6;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.ArrayPrototype.slice(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Double,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.ArrayPrototype" />
    ///  类。
    ///</summary>
    Array_slice = 7;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.ArrayPrototype.sort(System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.ArrayPrototype" />
    ///  类。
    ///</summary>
    Array_sort = 8;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.ArrayPrototype.splice(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Double,System.Double,System.Object[])" />
    ///  方法<see cref="T:Microsoft.JScript.ArrayPrototype" />
    ///  类。
    ///</summary>
    Array_splice = 9;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.ArrayPrototype.toLocaleString(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.ArrayPrototype" />
    ///  类。
    ///</summary>
    Array_toLocaleString = 10;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.ArrayPrototype.toString(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.ArrayPrototype" />
    ///  类。
    ///</summary>
    Array_toString = 11;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.ArrayPrototype.unshift(System.Object,System.Object[])" />
    ///  方法<see cref="T:Microsoft.JScript.ArrayPrototype" />
    ///  类。
    ///</summary>
    Array_unshift = 12;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.BooleanPrototype.toString(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.BooleanPrototype" />
    ///  类。
    ///</summary>
    Boolean_toString = 13;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.BooleanPrototype.valueOf(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.BooleanPrototype" />
    ///  类。
    ///</summary>
    Boolean_valueOf = 14;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.getDate(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_getDate = 15;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.getDay(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_getDay = 16;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.getFullYear(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_getFullYear = 17;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.getHours(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_getHours = 18;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.getMilliseconds(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_getMilliseconds = 19;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.getMinutes(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_getMinutes = 20;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.getMonth(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_getMonth = 21;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.getSeconds(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_getSeconds = 22;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.getTime(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_getTime = 23;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.getTimezoneOffset(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_getTimezoneOffset = 24;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.getUTCDate(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_getUTCDate = 25;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.getUTCDay(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_getUTCDay = 26;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.getUTCFullYear(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_getUTCFullYear = 27;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.getUTCHours(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_getUTCHours = 28;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.getUTCMilliseconds(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_getUTCMilliseconds = 29;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.getUTCMinutes(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_getUTCMinutes = 30;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.getUTCMonth(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_getUTCMonth = 31;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.getUTCSeconds(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_getUTCSeconds = 32;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.getVarDate(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_getVarDate = 33;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.getYear(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_getYear = 34;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DateConstructor.parse(System.String)" />
    ///  方法<see cref="T:Microsoft.JScript.DateConstructor" />
    ///  类。
    ///</summary>
    Date_parse = 35;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.setDate(System.Object,System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_setDate = 36;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.setFullYear(System.Object,System.Double,System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_setFullYear = 37;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.setHours(System.Object,System.Double,System.Object,System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_setHours = 38;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.setMinutes(System.Object,System.Double,System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_setMinutes = 39;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.setMilliseconds(System.Object,System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_setMilliseconds = 40;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.setMonth(System.Object,System.Double,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_setMonth = 41;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.setSeconds(System.Object,System.Double,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_setSeconds = 42;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.setTime(System.Object,System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_setTime = 43;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.setUTCDate(System.Object,System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_setUTCDate = 44;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.setUTCFullYear(System.Object,System.Double,System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_setUTCFullYear = 45;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.setUTCHours(System.Object,System.Double,System.Object,System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_setUTCHours = 46;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.setUTCMinutes(System.Object,System.Double,System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_setUTCMinutes = 47;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.setUTCMilliseconds(System.Object,System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_setUTCMilliseconds = 48;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.setUTCMonth(System.Object,System.Double,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_setUTCMonth = 49;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.setUTCSeconds(System.Object,System.Double,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_setUTCSeconds = 50;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.setYear(System.Object,System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_setYear = 51;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.toDateString(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_toDateString = 52;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.toGMTString(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_toGMTString = 53;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.toLocaleDateString(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_toLocaleDateString = 54;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.toLocaleString(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_toLocaleString = 55;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.toLocaleTimeString(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_toLocaleTimeString = 56;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.toString(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_toString = 57;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.toTimeString(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_toTimeString = 58;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.toUTCString(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_toUTCString = 59;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DateConstructor.UTC(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DateConstructor" />
    ///  类。
    ///</summary>
    Date_UTC = 60;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.DatePrototype.valueOf(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
    Date_valueOf = 61;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.EnumeratorPrototype.atEnd(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.EnumeratorPrototype" />
    ///  类。
    ///</summary>
    Enumerator_atEnd = 62;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.EnumeratorPrototype.item(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.EnumeratorPrototype" />
    ///  类。
    ///</summary>
    Enumerator_item = 63;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.EnumeratorPrototype.moveFirst(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.EnumeratorPrototype" />
    ///  类。
    ///</summary>
    Enumerator_moveFirst = 64;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.EnumeratorPrototype.moveNext(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.EnumeratorPrototype" />
    ///  类。
    ///</summary>
    Enumerator_moveNext = 65;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.ErrorPrototype.toString(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.ErrorPrototype" />
    ///  类。
    ///</summary>
    Error_toString = 66;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.FunctionPrototype.apply(System.Object,System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.FunctionPrototype" />
    ///  类。
    ///</summary>
    Function_apply = 67;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.FunctionPrototype.call(System.Object,System.Object,System.Object[])" />
    ///  方法<see cref="T:Microsoft.JScript.FunctionPrototype" />
    ///  类。
    ///</summary>
    Function_call = 68;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.FunctionPrototype.toString(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.FunctionPrototype" />
    ///  类。
    ///</summary>
    Function_toString = 69;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.GlobalObject.CollectGarbage" />
    ///  方法<see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
    Global_CollectGarbage = 70;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.GlobalObject.decodeURI(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
    Global_decodeURI = 71;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.GlobalObject.decodeURIComponent(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
    Global_decodeURIComponent = 72;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.GlobalObject.encodeURI(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
    Global_encodeURI = 73;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.GlobalObject.encodeURIComponent(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
    Global_encodeURIComponent = 74;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.GlobalObject.escape(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
    Global_escape = 75;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.GlobalObject.eval(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
    Global_eval = 76;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.GlobalObject.GetObject(System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
    Global_GetObject = 77;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.GlobalObject.isNaN(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
    Global_isNaN = 78;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.GlobalObject.isFinite(System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
    Global_isFinite = 79;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.GlobalObject.parseFloat(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
    Global_parseFloat = 80;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.GlobalObject.parseInt(System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
    Global_parseInt = 81;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.GlobalObject.ScriptEngine" />
    ///  方法<see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
    Global_ScriptEngine = 82;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.GlobalObject.ScriptEngineBuildVersion" />
    ///  方法<see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
    Global_ScriptEngineBuildVersion = 83;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.GlobalObject.ScriptEngineMajorVersion" />
    ///  方法<see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
    Global_ScriptEngineMajorVersion = 84;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.GlobalObject.ScriptEngineMinorVersion" />
    ///  方法<see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
    Global_ScriptEngineMinorVersion = 85;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.GlobalObject.unescape(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
    Global_unescape = 86;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.MathObject.abs(System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
    Math_abs = 87;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.MathObject.acos(System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
    Math_acos = 88;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.MathObject.asin(System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
    Math_asin = 89;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.MathObject.atan(System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
    Math_atan = 90;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.MathObject.atan2(System.Double,System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
    Math_atan2 = 91;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.MathObject.ceil(System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
    Math_ceil = 92;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.MathObject.cos(System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
    Math_cos = 93;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.MathObject.exp(System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
    Math_exp = 94;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.MathObject.floor(System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
    Math_floor = 95;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.MathObject.log(System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
    Math_log = 96;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.MathObject.max(System.Object,System.Object,System.Object[])" />
    ///  方法<see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
    Math_max = 97;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.MathObject.min(System.Object,System.Object,System.Object[])" />
    ///  方法<see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
    Math_min = 98;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.MathObject.pow(System.Double,System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
    Math_pow = 99;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.MathObject.random" />
    ///  方法<see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
    Math_random = 100;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.MathObject.round(System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
    Math_round = 101;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.MathObject.sin(System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
    Math_sin = 102;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.MathObject.sqrt(System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
    Math_sqrt = 103;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.MathObject.tan(System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
    Math_tan = 104;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.NumberPrototype.toExponential(System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.NumberPrototype" />
    ///  类。
    ///</summary>
    Number_toExponential = 105;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.NumberPrototype.toFixed(System.Object,System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.NumberPrototype" />
    ///  类。
    ///</summary>
    Number_toFixed = 106;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.NumberPrototype.toLocaleString(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.NumberPrototype" />
    ///  类。
    ///</summary>
    Number_toLocaleString = 107;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.NumberPrototype.toPrecision(System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.NumberPrototype" />
    ///  类。
    ///</summary>
    Number_toPrecision = 108;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.NumberPrototype.toString(System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.NumberPrototype" />
    ///  类。
    ///</summary>
    Number_toString = 109;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.NumberPrototype.valueOf(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.NumberPrototype" />
    ///  类。
    ///</summary>
    Number_valueOf = 110;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.ObjectPrototype.hasOwnProperty(System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.ObjectPrototype" />
    ///  类。
    ///</summary>
    Object_hasOwnProperty = 111;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.ObjectPrototype.isPrototypeOf(System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.ObjectPrototype" />
    ///  类。
    ///</summary>
    Object_isPrototypeOf = 112;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.ObjectPrototype.propertyIsEnumerable(System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.ObjectPrototype" />
    ///  类。
    ///</summary>
    Object_propertyIsEnumerable = 113;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.ObjectPrototype.toLocaleString(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.ObjectPrototype" />
    ///  类。
    ///</summary>
    Object_toLocaleString = 114;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.ObjectPrototype.toString(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.ObjectPrototype" />
    ///  类。
    ///</summary>
    Object_toString = 115;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.ObjectPrototype.valueOf(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.ObjectPrototype" />
    ///  类。
    ///</summary>
    Object_valueOf = 116;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.RegExpPrototype.compile(System.Object,System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.RegExpPrototype" />
    ///  类。
    ///</summary>
    RegExp_compile = 117;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.RegExpPrototype.exec(System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.RegExpPrototype" />
    ///  类。
    ///</summary>
    RegExp_exec = 118;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.RegExpPrototype.test(System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.RegExpPrototype" />
    ///  类。
    ///</summary>
    RegExp_test = 119;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.RegExpPrototype.toString(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.RegExpPrototype" />
    ///  类。
    ///</summary>
    RegExp_toString = 120;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.anchor(System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_anchor = 121;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.big(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_big = 122;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.blink(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_blink = 123;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.bold(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_bold = 124;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.charAt(System.Object,System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_charAt = 125;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.charCodeAt(System.Object,System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_charCodeAt = 126;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.concat(System.Object,System.Object[])" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_concat = 127;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.fixed(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_fixed = 128;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.fontcolor(System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_fontcolor = 129;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.fontsize(System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_fontsize = 130;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringConstructor.fromCharCode(System.Object[])" />
    ///  方法<see cref="T:Microsoft.JScript.StringConstructor" />
    ///  类。
    ///</summary>
    String_fromCharCode = 131;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.indexOf(System.Object,System.Object,System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_indexOf = 132;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.italics(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_italics = 133;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.lastIndexOf(System.Object,System.Object,System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_lastIndexOf = 134;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.link(System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_link = 135;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.localeCompare(System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_localeCompare = 136;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.match(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_match = 137;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.replace(System.Object,System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_replace = 138;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.search(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_search = 139;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.slice(System.Object,System.Double,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_slice = 140;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.small(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_small = 141;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.split(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_split = 142;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.strike(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_strike = 143;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.sub(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_sub = 144;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.substr(System.Object,System.Double,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_substr = 145;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.substring(System.Object,System.Double,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_substring = 146;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.sup(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_sup = 147;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.toLocaleLowerCase(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_toLocaleLowerCase = 148;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.toLocaleUpperCase(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_toLocaleUpperCase = 149;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.toLowerCase(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_toLowerCase = 150;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.toString(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_toString = 151;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.toUpperCase(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_toUpperCase = 152;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.StringPrototype.valueOf(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
    String_valueOf = 153;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.VBArrayPrototype.dimensions(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.VBArrayPrototype" />
    ///  类。
    ///</summary>
    VBArray_dimensions = 154;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.VBArrayPrototype.getItem(System.Object,System.Object[])" />
    ///  方法<see cref="T:Microsoft.JScript.VBArrayPrototype" />
    ///  类。
    ///</summary>
    VBArray_getItem = 155;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.VBArrayPrototype.lbound(System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.VBArrayPrototype" />
    ///  类。
    ///</summary>
    VBArray_lbound = 156;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.VBArrayPrototype.toArray(System.Object,Microsoft.JScript.Vsa.VsaEngine)" />
    ///  方法<see cref="T:Microsoft.JScript.VBArrayPrototype" />
    ///  类。
    ///</summary>
    VBArray_toArray = 157;
    ///<summary>
    ///  静态<see cref="M:Microsoft.JScript.VBArrayPrototype.ubound(System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.VBArrayPrototype" />
    ///  类。
    ///</summary>
    VBArray_ubound = 158;
  end;


  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  指定 JScript 错误消息。
  ///  此类所属的编译和运行时状态类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.JSError')]
  DNJSError = type Integer;
  DNJSErrorHelper = record helper for DNJSError
  public const
    ///<summary>
    ///  任何错误。
    ///  这是枚举的默认值 (0) 值。
    ///</summary>
    NoError = 0;
    ///<summary>
    ///  无效的过程调用或自变量。
    ///</summary>
    InvalidCall = 5;
    ///<summary>
    ///  内存不足。
    ///</summary>
    OutOfMemory = 7;
    ///<summary>
    ///  类型不匹配。
    ///</summary>
    TypeMismatch = 13;
    ///<summary>
    ///  堆栈空间不足。
    ///</summary>
    OutOfStack = 28;
    ///<summary>
    ///  已引发内部错误。
    ///</summary>
    InternalError = 51;
    ///<summary>
    ///  未找到文件。
    ///</summary>
    FileNotFound = 53;
    ///<summary>
    ///  一个对象是必需的。
    ///</summary>
    NeedObject = 424;
    ///<summary>
    ///  无法创建对象。
    ///</summary>
    CantCreateObject = 429;
    ///<summary>
    ///  对象不支持此属性或方法。
    ///</summary>
    OLENoPropOrMethod = 438;
    ///<summary>
    ///  对象不支持此操作。
    ///</summary>
    ActionNotSupported = 445;
    ///<summary>
    ///  此对象不是一个集合。
    ///</summary>
    NotCollection = 451;
    ///<summary>
    ///  发现语法错误。
    ///</summary>
    SyntaxError = 1002;
    ///<summary>
    ///  预期":"。
    ///</summary>
    NoColon = 1003;
    ///<summary>
    ///  预期";"。
    ///</summary>
    NoSemicolon = 1004;
    ///<summary>
    ///  预期"(".
    ///</summary>
    NoLeftParen = 1005;
    ///<summary>
    ///  预期")"。
    ///</summary>
    NoRightParen = 1006;
    ///<summary>
    ///  预期"]"。
    ///</summary>
    NoRightBracket = 1007;
    ///<summary>
    ///  预期"{"。
    ///</summary>
    NoLeftCurly = 1008;
    ///<summary>
    ///  预期"}"。
    ///</summary>
    NoRightCurly = 1009;
    ///<summary>
    ///  应为标识符。
    ///</summary>
    NoIdentifier = 1010;
    ///<summary>
    ///  预期"="。
    ///</summary>
    NoEqual = 1011;
    ///<summary>
    ///  无效的字符。
    ///</summary>
    IllegalChar = 1014;
    ///<summary>
    ///  未终止的字符串常量。
    ///</summary>
    UnterminatedString = 1015;
    ///<summary>
    ///  未终止的注释。
    ///</summary>
    NoCommentEnd = 1016;
    ///<summary>
    ///  返回语句不能出现在函数的外部。
    ///</summary>
    BadReturn = 1018;
    ///<summary>
    ///  不能具有<see langword="break" />
    ///  循环外部。
    ///</summary>
    BadBreak = 1019;
    ///<summary>
    ///  不能具有<see langword="continue" />
    ///  循环外部。
    ///</summary>
    BadContinue = 1020;
    ///<summary>
    ///  应为十六进制数字。
    ///</summary>
    BadHexDigit = 1023;
    ///<summary>
    ///  预期<see langword="while" />
    ///  。
    ///</summary>
    NoWhile = 1024;
    ///<summary>
    ///  已存在具有该名称的标签。
    ///</summary>
    BadLabel = 1025;
    ///<summary>
    ///  找不到的标签。
    ///</summary>
    NoLabel = 1026;
    ///<summary><see langword="default" />
    ///  中只能出现一次<see langword="switch" />
    ///  语句。
    ///</summary>
    DupDefault = 1027;
    ///<summary>
    ///  应为标识符或<see langword="string" />
    ///  。
    ///</summary>
    NoMemberIdentifier = 1028;
    ///<summary>
    ///  预期<see langword="@end" />
    ///  。
    ///</summary>
    NoCcEnd = 1029;
    ///<summary>
    ///  条件编译已关闭。
    ///</summary>
    CcOff = 1030;
    ///<summary>
    ///  应为常量。
    ///</summary>
    NotConst = 1031;
    ///<summary>
    ///  预期<see langword="@" />
    ///  。
    ///</summary>
    NoAt = 1032;
    ///<summary>
    ///  预期<see langword="catch" />
    ///  。
    ///</summary>
    NoCatch = 1033;
    ///<summary>
    ///  不匹配<see langword="else" />
    ///  ; 未<see langword="if" />
    ///  定义。
    ///</summary>
    InvalidElse = 1034;
    ///<summary>
    ///  预期"，"。
    ///</summary>
    NoComma = 1100;
    ///<summary>
    ///  已定义的可见性修饰符。
    ///</summary>
    DupVisibility = 1101;
    ///<summary>
    ///  无效的可见性修饰符。
    ///</summary>
    IllegalVisibility = 1102;
    ///<summary>
    ///  缺少<see langword="case" />
    ///  或<see langword="default" />
    ///  语句。
    ///</summary>
    BadSwitch = 1103;
    ///<summary>
    ///  不匹配<see langword="@end" />
    ///  ; 未<see langword="@if" />
    ///  定义。
    ///</summary>
    CcInvalidEnd = 1104;
    ///<summary>
    ///  不匹配<see langword="@else" />
    ///  ; 未<see langword="@if" />
    ///  定义。
    ///</summary>
    CcInvalidElse = 1105;
    ///<summary>
    ///  不匹配<see langword="@elif" />
    ///  ; 未<see langword="@if" />
    ///  定义。
    ///</summary>
    CcInvalidElif = 1106;
    ///<summary>
    ///  需要更多的源字符。
    ///</summary>
    ErrEOF = 1107;
    ///<summary>
    ///  不兼容的可见性修饰符。
    ///</summary>
    IncompatibleVisibility = 1108;
    ///<summary>
    ///  不允许在此上下文中的类定义。
    ///</summary>
    ClassNotAllowed = 1109;
    ///<summary>
    ///  表达式必须是编译时常量。
    ///</summary>
    NeedCompileTimeConstant = 1110;
    ///<summary>
    ///  已在使用的标识符。
    ///</summary>
    DuplicateName = 1111;
    ///<summary>
    ///  应为类型名称。
    ///</summary>
    NeedType = 1112;
    ///<summary>
    ///  仅在类定义中有效。
    ///</summary>
    NotInsideClass = 1113;
    ///<summary>
    ///  发现一个未知的位置指令。
    ///</summary>
    InvalidPositionDirective = 1114;
    ///<summary>
    ///  指令不能跟在同一行上的其他代码。
    ///</summary>
    MustBeEOL = 1115;
    ///<summary>
    ///  错误调试器指令或指令的位置错误。
    ///</summary>
    WrongDirective = 1118;
    ///<summary>
    ///  可以启动一个新之前，必须结束位置指令。
    ///</summary>
    CannotNestPositionDirective = 1119;
    ///<summary>
    ///  循环定义。
    ///</summary>
    CircularDefinition = 1120;
    ///<summary>
    ///  指定的类型已弃用。
    ///</summary>
    Deprecated = 1121;
    ///<summary>
    ///  它不是有效使用<see langword="this" />
    ///  当前上下文中。
    ///</summary>
    IllegalUseOfThis = 1122;
    ///<summary>
    ///  不能从此作用域访问的对象或成员。
    ///</summary>
    NotAccessible = 1123;
    ///<summary>
    ///  只有构造函数可以具有与它将出现在类相同的名称。
    ///</summary>
    CannotUseNameOfClass = 1124;
    ///<summary>
    ///  类必须提供方法的实现。
    ///</summary>
    MustImplementMethod = 1128;
    ///<summary>
    ///  预计接口名称。
    ///</summary>
    NeedInterface = 1129;
    ///<summary>
    ///  Catch 子句将永远无法达到。
    ///</summary>
    UnreachableCatch = 1133;
    ///<summary>
    ///  类型不能扩展。
    ///</summary>
    TypeCannotBeExtended = 1134;
    ///<summary>
    ///  尚未声明变量。
    ///</summary>
    UndeclaredVariable = 1135;
    ///<summary>
    ///  未初始化的变量是危险和使用起来很慢。
    ///  你打算将它未初始化的吗？
    ///</summary>
    VariableLeftUninitialized = 1136;
    ///<summary>
    ///  保留的字不能用作标识符。
    ///</summary>
    KeywordUsedAsIdentifier = 1137;
    ///<summary>
    ///  对基类构造函数的调用中不允许对象或成员。
    ///</summary>
    NotAllowedInSuperConstructorCall = 1140;
    ///<summary>
    ///  不能直接调用此方法。
    ///  如果可能，请改为使用属性访问器。
    ///</summary>
    NotMeantToBeCalledDirectly = 1141;
    ///<summary><see langword="get" />
    ///  和<see langword="set" />
    ///  相互的此属性的方法不匹配。
    ///</summary>
    GetAndSetAreInconsistent = 1142;
    ///<summary>
    ///  自定义特性类必须派生自<see cref="T:System.Attribute" />
    ///  。
    ///</summary>
    InvalidCustomAttribute = 1143;
    ///<summary>
    ///  只有基元类型才允许自定义特性构造函数自变量列表中。
    ///</summary>
    InvalidCustomAttributeArgument = 1144;
    ///<summary>
    ///  未知的自定义特性类或构造函数。
    ///</summary>
    InvalidCustomAttributeClassOrCtor = 1146;
    ///<summary>
    ///  有太多的实际参数。
    ///  将忽略多余的参数。
    ///</summary>
    TooManyParameters = 1148;
    ///<summary><see cref="T:Microsoft.JScript.With" />
    ///  语句使此名称的使用不明确。
    ///</summary>
    AmbiguousBindingBecauseOfWith = 1149;
    ///<summary>
    ///  是否存在<see cref="T:Microsoft.JScript.Eval" />
    ///  使此名称的使用不明确。
    ///</summary>
    AmbiguousBindingBecauseOfEval = 1150;
    ///<summary>
    ///  此类型的对象不具有此类成员。
    ///</summary>
    NoSuchMember = 1151;
    ///<summary>
    ///  不能定义属性项<see cref="T:Microsoft.JScript.Expando" />
    ///  类。
    ///  此项保留为<see cref="T:Microsoft.JScript.Expando" />
    ///  字段。
    ///</summary>
    ItemNotAllowedOnExpandoClass = 1152;
    ///<summary>
    ///  不能定义名为的属性Item上<see cref="T:Microsoft.JScript.Expando" />
    ///  类。
    ///</summary>
    MethodNotAllowedOnExpandoClass = 1153;
    ///<summary>
    ///  无法创建<see cref="T:Microsoft.JScript.Expando" />
    ///  类，因为属性名为Item已在类层次结构中定义。
    ///</summary>
    MethodClashOnExpandoSuperClass = 1155;
    ///<summary>
    ///  已标记的基类<see cref="T:Microsoft.JScript.Expando" />
    ///  ; 当前规范将被忽略。
    ///</summary>
    BaseClassIsExpandoAlready = 1156;
    ///<summary>
    ///  一个抽象方法不能为私有。
    ///</summary>
    AbstractCannotBePrivate = 1157;
    ///<summary>
    ///  此类型的对象是不可建立索引。
    ///</summary>
    NotIndexable = 1158;
    ///<summary>
    ///  静态初始值设定项必须指定<see langword="static" />
    ///  关键字。
    ///</summary>
    StaticMissingInStaticInit = 1159;
    ///<summary>
    ///  属性的列表不适用于当前上下文。
    ///</summary>
    MissingConstructForAttributes = 1160;
    ///<summary>
    ///  只允许使用类内<see langword="package" />
    ///  。
    ///</summary>
    OnlyClassesAllowed = 1161;
    ///<summary><see cref="T:Microsoft.JScript.Expando" />
    ///  类不应实现<see cref="T:System.Collections.IEnumerable" />
    ///  。
    ///  接口隐式定义上<see cref="T:Microsoft.JScript.Expando" />
    ///  类。
    ///</summary>
    ExpandoClassShouldNotImpleEnumerable = 1162;
    ///<summary>
    ///  指定的成员不符合 CLS。
    ///</summary>
    NonCLSCompliantMember = 1163;
    ///<summary>
    ///  无法删除该对象或成员。
    ///</summary>
    NotDeletable = 1164;
    ///<summary>
    ///  应为包名称。
    ///</summary>
    PackageExpected = 1165;
    ///<summary>
    ///  表达式不起作用。
    ///</summary>
    UselessExpression = 1169;
    ///<summary><see langword="base" />
    ///  类已包含同名的成员。
    ///</summary>
    HidesParentMember = 1170;
    ///<summary>
    ///  无法更改基方法的可见性规范。
    ///</summary>
    CannotChangeVisibility = 1171;
    ///<summary>
    ///  方法隐藏<see langword="abstract" />
    ///  中<see langword="base" />
    ///  类。
    ///</summary>
    HidesAbstractInBase = 1172;
    ///<summary>
    ///  一种方法在基类中的一个方法相匹配。
    ///  必须指定<see langword="override" />
    ///  或<see langword="hide" />
    ///  。
    ///</summary>
    NewNotSpecifiedInMethodDeclaration = 1173;
    ///<summary>
    ///  中的基本类的方法<see langword="final" />
    ///  或不<see langword="virtual" />
    ///<see langword="override" />
    ///  将被忽略。
    ///  指定 <see langword="hide" />
    ///  。
    ///</summary>
    MethodInBaseIsNotVirtual = 1174;
    ///<summary>
    ///  到基类中没有任何成员<see langword="hide" />
    ///  。
    ///</summary>
    NoMethodInBaseToNew = 1175;
    ///<summary>
    ///  基类中的方法具有不同的返回类型。
    ///</summary>
    DifferentReturnTypeFromBase = 1176;
    ///<summary>
    ///  字段冲突的名称与属性的名称。
    ///</summary>
    ClashWithProperty = 1177;
    ///<summary>
    ///  不能使用<see langword="override" />
    ///  和<see langword="hide" />
    ///  成员声明中合并在一起。
    ///</summary>
    OverrideAndHideUsedTogether = 1178;
    ///<summary>
    ///  必须指定"快速"或"versionSafe"语言选项。
    ///</summary>
    InvalidLanguageOption = 1179;
    ///<summary>
    ///  到基类中没有任何成员<see langword="override" />
    ///  。
    ///</summary>
    NoMethodInBaseToOverride = 1180;
    ///<summary>
    ///  无效的构造函数。
    ///</summary>
    NotValidForConstructor = 1181;
    ///<summary>
    ///  无法从 void 的函数或构造函数返回值。
    ///</summary>
    CannotReturnValueFromVoidFunction = 1182;
    ///<summary>
    ///  多个方法或属性与此参数列表。
    ///</summary>
    AmbiguousMatch = 1183;
    ///<summary>
    ///  多个构造函数与此参数列表匹配。
    ///</summary>
    AmbiguousConstructorCall = 1184;
    ///<summary>
    ///  基类构造函数不能从此作用域访问。
    ///</summary>
    SuperClassConstructorNotAccessible = 1185;
    ///<summary>
    ///  八进制文本被否决。
    ///</summary>
    OctalLiteralsAreDeprecated = 1186;
    ///<summary>
    ///  可能未初始化变量。
    ///</summary>
    VariableMightBeUnitialized = 1187;
    ///<summary>
    ///  不能用来从该位置中调用基类构造函数。
    ///</summary>
    NotOKToCallSuper = 1188;
    ///<summary>
    ///  不能用来在这种方式中使用的基类。
    ///</summary>
    IllegalUseOfSuper = 1189;
    ///<summary>
    ///  它速度慢且可能导致混乱<see langword="finally" />
    ///  阻止这种方式。
    ///</summary>
    BadWayToLeaveFinally = 1190;
    ///<summary>
    ///  预期"，"或无效的类型声明;write "&lt;Identifier&gt; : &lt;Type&gt;" not "&lt;Type&gt; &lt;Identifier&gt;".&lt;/Identifier&gt;&lt;/Type&gt;&lt;/Type&gt;&lt;/Identifier&gt;
    ///</summary>
    NoCommaOrTypeDefinitionError = 1191;
    ///<summary>
    ///  一个抽象的函数不能有一个正文。
    ///</summary>
    AbstractWithBody = 1192;
    ///<summary>
    ///  预期"，")"。
    ///</summary>
    NoRightParenOrComma = 1193;
    ///<summary>
    ///  预期"，"或"]"。
    ///</summary>
    NoRightBracketOrComma = 1194;
    ///<summary>
    ///  应为表达式。
    ///</summary>
    ExpressionExpected = 1195;
    ///<summary>
    ///  意外";"。
    ///</summary>
    UnexpectedSemicolon = 1196;
    ///<summary>
    ///  太多错误。
    ///  该文件可能不是 JScript 文件。
    ///</summary>
    TooManyTokensSkipped = 1197;
    ///<summary>
    ///  可能存在无效的变量声明，<see langword="var" />
    ///  缺失，或无法识别的语法错误。
    ///</summary>
    BadVariableDeclaration = 1198;
    ///<summary>
    ///  可能存在无效的函数声明、 缺少函数，或无法识别的语法错误。
    ///</summary>
    BadFunctionDeclaration = 1199;
    ///<summary>
    ///  无效的属性声明。
    ///<see langword="get" />
    ///  访问器必须没有自变量和<see langword="set" />
    ///  访问器必须具有一个自变量。
    ///</summary>
    BadPropertyDeclaration = 1200;
    ///<summary>
    ///  表达式不具有一个地址。
    ///</summary>
    DoesNotHaveAnAddress = 1203;
    ///<summary>
    ///  并非所有所需在提供参数。
    ///</summary>
    TooFewParameters = 1204;
    ///<summary>
    ///  赋值创建<see cref="T:Microsoft.JScript.Expando" />
    ///  立即被丢弃的属性。
    ///</summary>
    UselessAssignment = 1205;
    ///<summary><see langword="If" />
    ///  条件不能包含赋值。
    ///</summary>
    SuspectAssignment = 1206;
    ///<summary>
    ///  空语句位于<see langword="if" />
    ///  语句。
    ///</summary>
    SuspectSemicolon = 1207;
    ///<summary>
    ///  指定的转换或强制不可能。
    ///</summary>
    ImpossibleConversion = 1208;
    ///<summary><see langword="final" />
    ///  和<see langword="abstract" />
    ///  不能一起使用。
    ///</summary>
    FinalPrecludesAbstract = 1209;
    ///<summary>
    ///  应为实例。
    ///</summary>
    NeedInstance = 1210;
    ///<summary>
    ///  不能是抽象的除非类标记为抽象。
    ///</summary>
    CannotBeAbstract = 1212;
    ///<summary><see langword="enum" />
    ///  基类型必须为基元整型类型。
    ///</summary>
    InvalidBaseTypeForEnum = 1213;
    ///<summary>
    ///  不能构造抽象类的实例。
    ///</summary>
    CannotInstantiateAbstractClass = 1214;
    ///<summary>
    ///  分配到的 JScript 数组<see cref="T:System.Array" />
    ///  可能会导致要复制的数组。
    ///</summary>
    ArrayMayBeCopied = 1215;
    ///<summary>
    ///  静态方法不能是抽象的。
    ///</summary>
    AbstractCannotBeStatic = 1216;
    ///<summary>
    ///  静态方法不能是<see langword="final" />
    ///  。
    ///</summary>
    StaticIsAlreadyFinal = 1217;
    ///<summary>
    ///  静态方法不能重写基类方法。
    ///</summary>
    StaticMethodsCannotOverride = 1218;
    ///<summary>
    ///  静态方法不能隐藏基类方法。
    ///</summary>
    StaticMethodsCannotHide = 1219;
    ///<summary><see cref="T:Microsoft.JScript.Expando" />
    ///  方法不能重写基类方法。
    ///</summary>
    ExpandoPrecludesOverride = 1220;
    ///<summary>
    ///  变量自变量列表必须是数组类型。
    ///</summary>
    IllegalParamArrayAttribute = 1221;
    ///<summary><see cref="T:Microsoft.JScript.Expando" />
    ///  方法不能是抽象的。
    ///</summary>
    ExpandoPrecludesAbstract = 1222;
    ///<summary>
    ///  但不包括正文函数应为<see langword="abstract" />
    ///  。
    ///</summary>
    ShouldBeAbstract = 1223;
    ///<summary>
    ///  此修饰符不能使用在接口成员上。
    ///</summary>
    BadModifierInInterface = 1224;
    ///<summary>
    ///  不能在接口中声明变量。
    ///</summary>
    VarIllegalInInterface = 1226;
    ///<summary>
    ///  无法在声明为接口<see langword="interface" />
    ///  。
    ///</summary>
    InterfaceIllegalInInterface = 1227;
    ///<summary><see langword="enum" />
    ///  成员声明不应使用<see langword="var" />
    ///  关键字。
    ///</summary>
    NoVarInEnum = 1228;
    ///<summary><see langword="import" />
    ///  语句不在此上下文中有效。
    ///</summary>
    InvalidImport = 1229;
    ///<summary><see langword="enum" />
    ///  不允许在此上下文中的定义。
    ///</summary>
    EnumNotAllowed = 1230;
    ///<summary>
    ///  此属性对于此类型的声明无效。
    ///</summary>
    InvalidCustomAttributeTarget = 1231;
    ///<summary>
    ///  此上下文中不允许包定义。
    ///</summary>
    PackageInWrongContext = 1232;
    ///<summary>
    ///  构造函数不能有返回类型。
    ///</summary>
    ConstructorMayNotHaveReturnType = 1233;
    ///<summary>
    ///  只有类和包允许在库中。
    ///</summary>
    OnlyClassesAndPackagesAllowed = 1234;
    ///<summary>
    ///  无效的调试指令。
    ///</summary>
    InvalidDebugDirective = 1235;
    ///<summary>
    ///  这种类型必须是属性的唯一的。
    ///</summary>
    CustomAttributeUsedMoreThanOnce = 1236;
    ///<summary>
    ///  可以仅通过嵌套同一类中的非静态类型扩展非静态的嵌套的类型。
    ///</summary>
    NestedInstanceTypeCannotBeExtendedByStatic = 1237;
    ///<summary>
    ///  必须上指定以属性为目标的特性<see langword="get" />
    ///  访问器，如果<see langword="get" />
    ///  访问器已存在。
    ///</summary>
    PropertyLevelAttributesMustBeOnGetter = 1238;
    ///<summary>
    ///  A<see langword="throw" />
    ///  语句必须具有的自变量，除非它包含在<see langword="catch" />
    ///  块<see langword="try" />
    ///  语句。
    ///</summary>
    BadThrow = 1239;
    ///<summary>
    ///  变量自变量列表必须是最后一个参数。
    ///</summary>
    ParamListNotLast = 1240;
    ///<summary>
    ///  找不到类型。
    ///  程序集引用可能已丢失。
    ///</summary>
    NoSuchType = 1241;
    ///<summary>
    ///  按十进制文本格式不正确的八进制文本处理。
    ///</summary>
    BadOctalLiteral = 1242;
    ///<summary>
    ///  非静态成员不能从访问<see langword="static" />
    ///  作用域。
    ///</summary>
    InstanceNotAccessibleFromStatic = 1243;
    ///<summary>
    ///  必须按类名访问静态成员。
    ///</summary>
    StaticRequiresTypeName = 1244;
    ///<summary>
    ///  不能与类名称访问非静态成员。
    ///</summary>
    NonStaticWithTypeName = 1245;
    ///<summary>
    ///  类型不具有此类<see langword="static" />
    ///  成员。
    ///</summary>
    NoSuchStaticMember = 1246;
    ///<summary>
    ///  循环条件不能包含函数调用。
    ///</summary>
    SuspectLoopCondition = 1247;
    ///<summary>
    ///  应为程序集。
    ///</summary>
    ExpectedAssembly = 1248;
    ///<summary>
    ///  程序集自定义特性不能是另一构造的一部分。
    ///</summary>
    AssemblyAttributesMustBeGlobal = 1249;
    ///<summary><see cref="T:Microsoft.JScript.Expando" />
    ///  方法不能是静态的。
    ///</summary>
    ExpandoPrecludesStatic = 1250;
    ///<summary>
    ///  此方法在此类中的另一方法具有相同名称、 参数类型和返回类型。
    ///</summary>
    DuplicateMethod = 1251;
    ///<summary>
    ///  类成员构造函数应标记为用作<see cref="T:Microsoft.JScript.Expando" />
    ///  函数。
    ///</summary>
    NotAnExpandoFunction = 1252;
    ///<summary>
    ///  不是有效的版本字符串。
    ///</summary>
    NotValidVersionString = 1253;
    ///<summary>
    ///  可执行文件不能进行本地化;<see cref="P:System.Reflection.AssemblyCultureAttribute.Culture" />
    ///  应始终为空。
    ///</summary>
    ExecutablesCannotBeLocalized = 1254;
    ///<summary>
    ///  加号运算符是较慢的方法来连接字符串。
    ///  请考虑改用 <see cref="T:System.Text.StringBuilder" />
    ///  。
    ///</summary>
    StringConcatIsSlow = 1255;
    ///<summary>
    ///  不能在调试器中使用条件编译指令和变量。
    ///</summary>
    CcInvalidInDebugger = 1256;
    ///<summary><see cref="T:Microsoft.JScript.Expando" />
    ///  方法必须是公共的。
    ///</summary>
    ExpandoMustBePublic = 1257;
    ///<summary>
    ///  委托不应显式构造;只需使用的方法名称。
    ///</summary>
    DelegatesShouldNotBeExplicitlyConstructed = 1258;
    ///<summary>
    ///  引用的程序集依赖于另一个未被引用或无法找到的程序集。
    ///</summary>
    ImplicitlyReferencedAssemblyNotFound = 1259;
    ///<summary>
    ///  此转换可能在运行时失败。
    ///</summary>
    PossibleBadConversion = 1260;
    ///<summary>
    ///  将字符串转换为数字或布尔值很慢，并且在运行时可能会失败。
    ///</summary>
    PossibleBadConversionFromString = 1261;
    ///<summary>
    ///  这不是有效的.resources 文件。
    ///</summary>
    InvalidResource = 1262;
    ///<summary>
    ///  仅在自变量列表中，可以使用运算符的地址。
    ///</summary>
    WrongUseOfAddressOf = 1263;
    ///<summary>
    ///  指定的类型不符合 CLS。
    ///</summary>
    NonCLSCompliantType = 1264;
    ///<summary>
    ///  类成员不能被标记为公共语言规范 (CLS)，因为类不标记为符合 CLS。
    ///</summary>
    MemberTypeCLSCompliantMismatch = 1265;
    ///<summary>
    ///  类型不能被标记为符合 CLS，因为该程序集未标记为符合 CLS。
    ///</summary>
    TypeAssemblyCLSCompliantMismatch = 1266;
    ///<summary>
    ///  引用的程序集不兼容。
    ///</summary>
    IncompatibleAssemblyReference = 1267;
    ///<summary>
    ///  已使用无效的程序集密钥文件。
    ///</summary>
    InvalidAssemblyKeyFile = 1268;
    ///<summary>
    ///  完全限定的类型名称过长。
    ///  它必须小于 1024 个字符。
    ///</summary>
    TypeNameTooLong = 1269;
    ///<summary>
    ///  成员初始值设定项不能包含函数表达式。
    ///</summary>
    MemberInitializerCannotContainFuncExpr = 1270;
    ///<summary>
    ///  无法将分配到<see langword="this" />
    ///  。
    ///</summary>
    CantAssignThis = 5000;
    ///<summary>
    ///  应为数字。
    ///</summary>
    NumberExpected = 5001;
    ///<summary>
    ///  应为某个函数。
    ///</summary>
    FunctionExpected = 5002;
    ///<summary>
    ///  无法给函数结果赋值。
    ///</summary>
    CannotAssignToFunctionResult = 5003;
    ///<summary>
    ///  应为字符串。
    ///</summary>
    StringExpected = 5005;
    ///<summary>
    ///  缺少日期对象。
    ///</summary>
    DateExpected = 5006;
    ///<summary>
    ///  应为对象。
    ///</summary>
    ObjectExpected = 5007;
    ///<summary>
    ///  无效的赋值。
    ///</summary>
    IllegalAssignment = 5008;
    ///<summary>
    ///  未定义的标识符。
    ///</summary>
    UndefinedIdentifier = 5009;
    ///<summary>
    ///  没有找到的布尔值。
    ///</summary>
    BooleanExpected = 5010;
    ///<summary>
    ///  VBArray 被预期。
    ///</summary>
    VBArrayExpected = 5013;
    ///<summary>
    ///  缺少枚举器对象。
    ///</summary>
    EnumeratorExpected = 5015;
    ///<summary><see cref="T:Microsoft.JScript.RegExpObject" />
    ///  缺少的对象。
    ///</summary>
    RegExpExpected = 5016;
    ///<summary>
    ///  正则表达式中出现语法错误。
    ///</summary>
    RegExpSyntax = 5017;
    ///<summary>
    ///  引发了异常且未被捕获。
    ///</summary>
    UncaughtException = 5022;
    ///<summary>
    ///  此函数没有有效的原型对象。
    ///</summary>
    InvalidPrototype = 5023;
    ///<summary>
    ///  要编码的 URI 包含无效字符。
    ///</summary>
    URIEncodeError = 5024;
    ///<summary>
    ///  要解码的 URI 不有效的编码。
    ///</summary>
    URIDecodeError = 5025;
    ///<summary>
    ///  小数位数超出了范围。
    ///</summary>
    FractionOutOfRange = 5026;
    ///<summary>
    ///  精度超出范围。
    ///</summary>
    PrecisionOutOfRange = 5027;
    ///<summary>
    ///  数组长度必须为有限正整数。
    ///</summary>
    ArrayLengthConstructIncorrect = 5029;
    ///<summary>
    ///  数组长度必须赋值为有限正数。
    ///</summary>
    ArrayLengthAssignIncorrect = 5030;
    ///<summary>
    ///  一个"|"不是一个数组对象。
    ///  缺少数组对象。
    ///</summary>
    NeedArrayObject = 5031;
    ///<summary>
    ///  没有此类的构造函数。
    ///</summary>
    NoConstructor = 5032;
    ///<summary><see cref="T:Microsoft.JScript.Eval" />
    ///  不能由别名调用。
    ///</summary>
    IllegalEval = 5033;
    ///<summary>
    ///  尚未实现。
    ///</summary>
    NotYetImplemented = 5034;
    ///<summary>
    ///  不能提供 null 或为空的命名的参数名称。
    ///</summary>
    MustProvideNameForNamedParameter = 5035;
    ///<summary>
    ///  重复的命名参数。
    ///</summary>
    DuplicateNamedParameter = 5036;
    ///<summary>
    ///  指定的命名的参数名称不是正式参数之一。
    ///</summary>
    MissingNameParameter = 5037;
    ///<summary>
    ///  指定的参数太少。
    ///  命名的参数名称的数量不能超过中传递的参数的数目。
    ///</summary>
    MoreNamedParametersThanArguments = 5038;
    ///<summary>
    ///  无法在调试器中计算表达式。
    ///</summary>
    NonSupportedInDebugger = 5039;
    ///<summary>
    ///  不能将分配到只读字段或属性。
    ///</summary>
    AssignmentToReadOnly = 5040;
    ///<summary>
    ///  属性是只写。
    ///</summary>
    WriteOnlyProperty = 5041;
    ///<summary>
    ///  索引数与数组的维数不匹配。
    ///</summary>
    IncorrectNumberOfIndices = 5042;
    ///<summary>
    ///  方法与<see langword="ref" />
    ///  不在调试器中调用参数。
    ///</summary>
    RefParamsNonSupportedInDebugger = 5043;
    ///<summary><see cref="M:System.Security.CodeAccessPermission.Deny" />
    ///  ， <see cref="M:System.Security.CodeAccessPermission.PermitOnly" />
    ///  ，和<see cref="M:System.Security.CodeAccessPermission.Assert" />
    ///  安全方法不能调用使用后期绑定。
    ///</summary>
    CannotCallSecurityMethodLateBound = 5044;
    ///<summary>
    ///  JScript 不支持静态安全属性。
    ///</summary>
    CannotUseStaticSecurityAttribute = 5045;
    ///<summary>
    ///  目标引发了不符合 CLS 异常。
    ///</summary>
    NonClsException = 5046;
    ///<summary>
    ///  函数计算已中止。
    ///</summary>
    FuncEvalAborted = 6000;
    ///<summary>
    ///  函数计算超时。
    ///</summary>
    FuncEvalTimedout = 6001;
    ///<summary>
    ///  函数求值失败。
    ///  挂起线程。
    ///</summary>
    FuncEvalThreadSuspended = 6002;
    ///<summary>
    ///  函数求值失败。
    ///  线程处于睡眠、 等待对象，或等待另一个线程完成。
    ///</summary>
    FuncEvalThreadSleepWaitJoin = 6003;
    ///<summary>
    ///  函数求值失败。
    ///  线程可以包含不正确的数据。
    ///</summary>
    FuncEvalBadThreadState = 6004;
    ///<summary>
    ///  函数求值失败，并且该线程尚未启动。
    ///</summary>
    FuncEvalBadThreadNotStarted = 6005;
    ///<summary>
    ///  中止函数求值。
    ///  若要启用属性求值，请单击选项上工具菜单，然后选择调试树视图中。
    ///</summary>
    NoFuncEvalAllowed = 6006;
    ///<summary>
    ///  当在程序中此点处停止，则不能完成函数求值。
    ///</summary>
    FuncEvalBadLocation = 6007;
    ///<summary>
    ///  不能在调试器中调用 Web 方法。
    ///</summary>
    FuncEvalWebMethod = 6008;
    ///<summary>
    ///  静态变量不可用。
    ///</summary>
    StaticVarNotAvailable = 6009;
    ///<summary>
    ///  此类型的类型对象不可用。
    ///</summary>
    TypeObjectNotAvailable = 6010;
    ///<summary>
    ///  异常来自 HRESULT。
    ///</summary>
    ExceptionFromHResult = 6011;
    ///<summary>
    ///  表达式可导致副作用，将不评估。
    ///</summary>
    SideEffectsDisallowed = 6012;
  end;


  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  指定由 JScript 编译器生成的函数的调用约定。
  ///  与使用<see cref="T:Microsoft.JScript.JSFunctionAttribute" />
  ///  自定义属性。
  ///</summary>
  [DNTypeName('Microsoft.JScript.JSFunctionAttributeEnum')]
  DNJSFunctionAttributeEnum = type Integer;
  DNJSFunctionAttributeEnumHelper = record helper for DNJSFunctionAttributeEnum
  public const
    ///<summary>
    ///  具有任何特殊的调用约定指定常规.NET Framework 方法。
    ///  通常不使用如下所示不发出 JSFunctionAttribute 这种情况。
    ///</summary>
    None = 0;
    ///<summary>
    ///  指定函数的第三个参数的类型<see langword="Object" />
    ///  。
    ///  调用方应在实现 JScript arguments 对象，通常的实例的对象中传递<see cref="T:Microsoft.JScript.ArgumentsObject" />
    ///  。
    ///  JScript 运行时假定，如果<see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasArguments" />
    ///  设置，则<see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasStackFrame" />
    ///  和<see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject" />
    ///  也都设置。
    ///</summary>
    HasArguments = 1;
    ///<summary>
    ///  指定函数的第一个参数的类型<see langword="Object" />
    ///  和通常名为<paramref name="thisob" />
    ///  。
    ///  调用方应传入函数处理的对象的实例。
    ///</summary>
    HasThisObject = 2;
    ///<summary>
    ///  指定该函数嵌套在另一个 JScript 函数。
    ///</summary>
    IsNested = 4;
    ///<summary>
    ///  指定该函数将其本地变量复制到对外调用之前是由 JScript 运行时的堆栈帧对象。
    ///  它当控制权返回给该函数时，会将变量复制的堆栈帧对象从其局部变量中。
    ///  在包含访问父函数的局部变量的嵌套的函数的函数上设置此标志。
    ///</summary>
    HasStackFrame = 8;
    ///<summary>
    ///  指定该函数采用数目可变的参数。
    ///  最后一个参数是对类型数组的<see langword="Object" />
    ///  ，它保存显式指定任何参数。
    ///</summary>
    HasVarArgs = 16;
    ///<summary>
    ///  指定函数的第二个参数的类型<see cref="T:Microsoft.JScript.Vsa.VsaEngine" />
    ///  。
    ///  调用方应传递的实例中<see cref="T:Microsoft.JScript.Vsa.VsaEngine" />
    ///  函数可从中检索运行时基础结构。
    ///  JScript 运行时假定，如果<see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasEngine" />
    ///  设置则<see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject" />
    ///  也将设置。
    ///</summary>
    HasEngine = 32;
    ///<summary>
    ///  指定的聚合<see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasArguments" />
    ///  ， <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasEngine" />
    ///  ，和<see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasThisObject" />
    ///  。
    ///</summary>
    ClassicFunction = 35;
    ///<summary>
    ///  指定的聚合<see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasStackFrame" />
    ///  ， <see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.IsNested" />
    ///  ，和<see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.HasEngine" />
    ///  。
    ///</summary>
    NestedFunction = 44;
    ///<summary>
    ///  指定的聚合<see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.ClassicFunction" />
    ///  和<see cref="F:Microsoft.JScript.JSFunctionAttributeEnum.NestedFunction" />
    ///  。
    ///</summary>
    ClassicNestedFunction = 47;
    ///<summary>
    ///  指定该函数是基于原型的对象的构造函数。
    ///  有关详细信息，请参阅基于原型的对象和expando 修饰符。
    ///</summary>
    IsExpandoMethod = 64;
    ///<summary>
    ///  指定该函数是嵌套的实例类的构造函数。
    ///  一个父类的实例的函数的第一个参数。
    ///</summary>
    IsInstanceNestedClassConstructor = 128;
  end;


  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  指定的代码中，单个单位或令牌，构成 JScript 语言。
  ///</summary>
  [DNTypeName('Microsoft.JScript.JSToken')]
  DNJSToken = type Integer;
  DNJSTokenHelper = record helper for DNJSToken
  public const
    ///<summary>
    ///  正被扫描或者分析文件的末尾。
    ///  这是默认值。
    ///</summary>
    EndOfFile = 0;
    ///<summary>
    ///  if语句。
    ///</summary>
    If_ = 1;
    ///<summary>
    ///  for语句。
    ///</summary>
    For_ = 2;
    ///<summary>
    ///  do语句。
    ///</summary>
    Do_ = 3;
    ///<summary>
    ///  while语句。
    ///</summary>
    While_ = 4;
    ///<summary>
    ///  continue语句。
    ///</summary>
    Continue_ = 5;
    ///<summary>
    ///  break语句。
    ///</summary>
    Break = 6;
    ///<summary>
    ///  return语句。
    ///</summary>
    Return = 7;
    ///<summary>
    ///  import语句。
    ///</summary>
    Import = 8;
    ///<summary>
    ///  with语句。
    ///</summary>
    With_ = 9;
    ///<summary>
    ///  switch语句。
    ///</summary>
    Switch = 10;
    ///<summary>
    ///  throw语句。
    ///</summary>
    Throw = 11;
    ///<summary>
    ///  try语句。
    ///</summary>
    Try_ = 12;
    ///<summary>
    ///  package语句。
    ///</summary>
    Package_ = 13;
    ///<summary>
    ///  internal修饰符。
    ///</summary>
    Internal = 14;
    ///<summary>
    ///  abstract修饰符。
    ///</summary>
    Abstract_ = 15;
    ///<summary>
    ///  public修饰符。
    ///</summary>
    Public_ = 16;
    ///<summary>
    ///  static修饰符。
    ///</summary>
    Static_ = 17;
    ///<summary>
    ///  private修饰符。
    ///</summary>
    Private_ = 18;
    ///<summary>
    ///  protected修饰符。
    ///</summary>
    Protected_ = 19;
    ///<summary>
    ///  final修饰符。
    ///</summary>
    Final_ = 20;
    ///<summary>
    ///  event保留字。
    ///</summary>
    Event = 21;
    ///<summary>
    ///  var语句。
    ///</summary>
    Var_ = 22;
    ///<summary>
    ///  const语句。
    ///</summary>
    Const_ = 23;
    ///<summary>
    ///  class语句。
    ///</summary>
    Class_ = 24;
    ///<summary>
    ///  function语句。
    ///</summary>
    Function_ = 25;
    ///<summary>
    ///  {符号。
    ///</summary>
    LeftCurly = 26;
    ///<summary>
    ///  ;符号。
    ///</summary>
    Semicolon = 27;
    ///<summary>
    ///  null文本。
    ///</summary>
    Null = 28;
    ///<summary>
    ///  true文本。
    ///</summary>
    True = 29;
    ///<summary>
    ///  false文本。
    ///</summary>
    False = 30;
    ///<summary>
    ///  this语句。
    ///</summary>
    This = 31;
    ///<summary>
    ///  标识符。
    ///</summary>
    Identifier = 32;
    ///<summary>
    ///  数值。
    ///</summary>
    StringLiteral = 33;
    ///<summary>
    ///  整数文本。
    ///</summary>
    IntegerLiteral = 34;
    ///<summary>
    ///  数值。
    ///</summary>
    NumericLiteral = 35;
    ///<summary>
    ///  (符号。
    ///</summary>
    LeftParen = 36;
    ///<summary>
    ///  [符号。
    ///</summary>
    LeftBracket = 37;
    ///<summary>
    ///  .字段访问器符号。
    ///</summary>
    AccessField = 38;
    ///<summary>
    ///  一个占位符枚举成员，如使比较if JSToken.FirstOp &lt;= token &amp;&amp; token &lt;= JSToken.LastOp then...
    ///</summary>
    FirstOp = 39;
    ///<summary>
    ///  !逻辑 NOT 运算符。
    ///</summary>
    LogicalNot = 39;
    ///<summary>
    ///  ~按位 NOT 运算符。
    ///</summary>
    BitwiseNot = 40;
    ///<summary>
    ///  delete 运算符。
    ///</summary>
    Delete = 41;
    ///<summary>
    ///  void 运算符。
    ///</summary>
    Void = 42;
    ///<summary>
    ///  typeof 运算符。
    ///</summary>
    Typeof = 43;
    ///<summary>
    ///  ++递增运算符。
    ///</summary>
    Increment = 44;
    ///<summary>
    ///  --递减运算符。
    ///</summary>
    Decrement = 45;
    ///<summary>
    ///  +加法运算符。
    ///</summary>
    Plus = 46;
    ///<summary>
    ///  一个占位符枚举成员，如使比较if JSToken.FirstBinaryOp &lt;= token &amp;&amp; token &lt;= JSToken.LastBinaryOp then...
    ///</summary>
    FirstBinaryOp = 46;
    ///<summary>
    ///  -减法运算符。
    ///</summary>
    Minus = 47;
    ///<summary>
    ///  ||逻辑 OR 运算符。
    ///</summary>
    LogicalOr = 48;
    ///<summary>
    ///  &amp;&amp;逻辑 AND 运算符。
    ///</summary>
    LogicalAnd = 49;
    ///<summary>
    ///  |按位 OR 运算符。
    ///</summary>
    BitwiseOr = 50;
    ///<summary>
    ///  ^按位异或运算符。
    ///</summary>
    BitwiseXor = 51;
    ///<summary>
    ///  &amp;按位 AND 运算符。
    ///</summary>
    BitwiseAnd = 52;
    ///<summary>
    ///  ==相等比较运算符。
    ///</summary>
    Equal = 53;
    ///<summary>
    ///  !=是否不相等比较运算符。
    ///</summary>
    NotEqual = 54;
    ///<summary>
    ///  ===标识比较运算符。
    ///</summary>
    StrictEqual = 55;
    ///<summary>
    ///  !==标识比较运算符。
    ///</summary>
    StrictNotEqual = 56;
    ///<summary>
    ///  &gt;关系比较运算符。
    ///</summary>
    GreaterThan = 57;
    ///<summary>
    ///  &lt;关系比较运算符。
    ///</summary>
    LessThan = 58;
    ///<summary>
    ///  &lt;=关系比较运算符。
    ///</summary>
    LessThanEqual = 59;
    ///<summary>
    ///  &gt;=关系比较运算符。
    ///</summary>
    GreaterThanEqual = 60;
    ///<summary>
    ///  &lt;&lt;按位左的移运算符。
    ///</summary>
    LeftShift = 61;
    ///<summary>
    ///  &gt;&gt;按位右移运算符。
    ///</summary>
    RightShift = 62;
    ///<summary>
    ///  &gt;&gt;&gt;无符号右移位运算符。
    ///</summary>
    UnsignedRightShift = 63;
    ///<summary>
    ///  *乘法运算符。
    ///</summary>
    Multiply = 64;
    ///<summary>
    ///  /除法运算符。
    ///</summary>
    Divide = 65;
    ///<summary>
    ///  一个占位符枚举成员，如使比较if JSToken.FirstBinaryOp &lt;= token &amp;&amp; token &lt;= JSToken.LastPPOperator then...等是可以预先处理的操作。
    ///</summary>
    LastPPOperator = 66;
    ///<summary>
    ///  %取模运算符。
    ///</summary>
    Modulo = 66;
    ///<summary>
    ///  instanceof 运算符。
    ///</summary>
    Instanceof = 67;
    ///<summary>
    ///  in 运算符。
    ///</summary>
    In_ = 68;
    ///<summary>
    ///  =赋值运算符。
    ///</summary>
    Assign = 69;
    ///<summary>
    ///  +=加法赋值运算符。
    ///</summary>
    PlusAssign = 70;
    ///<summary>
    ///  -=减法赋值运算符。
    ///</summary>
    MinusAssign = 71;
    ///<summary>
    ///  *=乘法赋值运算符。
    ///</summary>
    MultiplyAssign = 72;
    ///<summary>
    ///  /=除法赋值运算符。
    ///</summary>
    DivideAssign = 73;
    ///<summary>
    ///  &amp;=按位 AND 赋值运算符。
    ///</summary>
    BitwiseAndAssign = 74;
    ///<summary>
    ///  |=按位 OR 赋值运算符。
    ///</summary>
    BitwiseOrAssign = 75;
    ///<summary>
    ///  ^=按位异或赋值运算符。
    ///</summary>
    BitwiseXorAssign = 76;
    ///<summary>
    ///  %=取模赋值运算符。
    ///</summary>
    ModuloAssign = 77;
    ///<summary>
    ///  &lt;&lt;=左的移赋值运算符。
    ///</summary>
    LeftShiftAssign = 78;
    ///<summary>
    ///  &gt;&gt;=右移位赋值运算符。
    ///</summary>
    RightShiftAssign = 79;
    ///<summary>
    ///  一个占位符枚举成员，如使比较if JSToken.FirstBinaryOp &lt;= token &amp;&amp; token &lt;= JSToken.LastBinaryOp then...
    ///</summary>
    LastBinaryOp = 80;
    ///<summary>
    ///  &gt;&gt;&gt;=无符号右移位赋值运算符。
    ///</summary>
    UnsignedRightShiftAssign = 80;
    ///<summary>
    ///  一个占位符枚举成员，如使比较if JSToken.Assign &lt;= token &amp;&amp; token &lt;= JSToken.LastAssign then...
    ///</summary>
    LastAssign = 80;
    ///<summary>
    ///  ?三元运算符。
    ///</summary>
    ConditionalIf = 81;
    ///<summary>
    ///  :三元运算符。
    ///</summary>
    Colon = 82;
    ///<summary>
    ///  ,逗号运算符。
    ///</summary>
    Comma = 83;
    ///<summary>
    ///  一个占位符枚举成员，如使比较if JSToken.FirstBinaryOp &lt;= token &amp;&amp; token &lt;= JSToken.LastOp then...
    ///</summary>
    LastOp = 83;
    ///<summary>
    ///  case关键字switch语句。
    ///</summary>
    Case_ = 84;
    ///<summary>
    ///  catch关键字try语句。
    ///</summary>
    Catch = 85;
    ///<summary>
    ///  debugger语句。
    ///</summary>
    Debugger = 86;
    ///<summary>
    ///  default关键字switch语句。
    ///</summary>
    Default_ = 87;
    ///<summary>
    ///  else关键字if语句。
    ///</summary>
    Else_ = 88;
    ///<summary>
    ///  export保留字。
    ///</summary>
    Export_ = 89;
    ///<summary>
    ///  extends关键字class语句。
    ///</summary>
    Extends = 90;
    ///<summary>
    ///  finally关键字try语句。
    ///</summary>
    Finally_ = 91;
    ///<summary>
    ///  get关键字function get语句。
    ///</summary>
    Get = 92;
    ///<summary>
    ///  implements关键字class或interface语句。
    ///</summary>
    Implements_ = 93;
    ///<summary>
    ///  interface语句。
    ///</summary>
    Interface_ = 94;
    ///<summary>
    ///  new 运算符。
    ///</summary>
    New = 95;
    ///<summary>
    ///  set关键字function set语句。
    ///</summary>
    Set_ = 96;
    ///<summary>
    ///  super语句。
    ///</summary>
    Super = 97;
    ///<summary>
    ///  )符号。
    ///</summary>
    RightParen = 98;
    ///<summary>
    ///  }符号。
    ///</summary>
    RightCurly = 99;
    ///<summary>
    ///  ]符号。
    ///</summary>
    RightBracket = 100;
    ///<summary>
    ///  预处理器常量。
    ///</summary>
    PreProcessorConstant = 101;
    ///<summary>
    ///  注释文本。
    ///</summary>
    Comment = 102;
    ///<summary>
    ///  未终止的注释。
    ///</summary>
    UnterminatedComment = 103;
    ///<summary>
    ///  assert保留字。
    ///</summary>
    Assert = 104;
    ///<summary>
    ///  boolean数据类型。
    ///</summary>
    Boolean = 105;
    ///<summary>
    ///  byte数据类型。
    ///</summary>
    Byte = 106;
    ///<summary>
    ///  char数据类型。
    ///</summary>
    Char = 107;
    ///<summary>
    ///  decimal数据类型。
    ///</summary>
    Decimal = 108;
    ///<summary>
    ///  double数据类型。
    ///</summary>
    Double = 109;
    ///<summary>
    ///  ::保留字。
    ///</summary>
    DoubleColon = 110;
    ///<summary>
    ///  enum语句。
    ///</summary>
    Enum = 111;
    ///<summary>
    ///  ensure保留字。
    ///</summary>
    Ensure = 112;
    ///<summary>
    ///  float数据类型。
    ///</summary>
    Float = 113;
    ///<summary>
    ///  goto保留字。
    ///</summary>
    Goto_ = 114;
    ///<summary>
    ///  int数据类型。
    ///</summary>
    Int = 115;
    ///<summary>
    ///  invariant保留字。
    ///</summary>
    Invariant = 116;
    ///<summary>
    ///  long数据类型。
    ///</summary>
    Long = 117;
    ///<summary>
    ///  namespace保留字。
    ///</summary>
    Namespace = 118;
    ///<summary>
    ///  native保留字。
    ///</summary>
    Native = 119;
    ///<summary>
    ///  require保留字。
    ///</summary>
    Require = 120;
    ///<summary>
    ///  sbyte数据类型。
    ///</summary>
    Sbyte = 121;
    ///<summary>
    ///  short数据类型。
    ///</summary>
    Short = 122;
    ///<summary>
    ///  synchronized保留字。
    ///</summary>
    Synchronized = 123;
    ///<summary>
    ///  transient保留字。
    ///</summary>
    Transient = 124;
    ///<summary>
    ///  throws保留字。
    ///</summary>
    Throws = 125;
    ///<summary>
    ///  ...保留字。
    ///</summary>
    ParamArray = 126;
    ///<summary>
    ///  volatile保留字。
    ///</summary>
    Volatile = 127;
    ///<summary>
    ///  ushort数据类型。
    ///</summary>
    Ushort = 128;
    ///<summary>
    ///  uint数据类型。
    ///</summary>
    Uint = 129;
    ///<summary>
    ///  ulong数据类型。
    ///</summary>
    Ulong = 130;
    ///<summary>
    ///  use保留字。
    ///</summary>
    Use = 131;
    ///<summary>
    ///  正在分析的行的末尾。
    ///</summary>
    EndOfLine = 132;
    ///<summary>
    ///  预处理器指令。
    ///</summary>
    PreProcessDirective = 133;
    ///<summary>
    ///  没有标记。
    ///  例如之前扫描任何标记，, 或在错误情况下。
    ///</summary>
    None = -1;
  end;


  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  指定源代码文本的状态。
  ///  此类是与其他类提供信息以用颜色在编辑器中的 JScript 代码一起使用。
  ///</summary>
  [DNTypeName('Microsoft.JScript.SourceState')]
  DNSourceState = type Integer;
  DNSourceStateHelper = record helper for DNSourceState
  public const
    ///<summary>
    ///  普通文本。
    ///</summary>
    STATE_COLOR_NORMAL = 0;
    ///<summary>
    ///  注释文本。
    ///</summary>
    STATE_COLOR_COMMENT = 1;
    ///<summary>
    ///  字符串文本。
    ///</summary>
    STATE_COLOR_STRING = 2;
  end;


  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  指定对文本着色在编辑器中时，应具有单个代码单元的颜色。
  ///  通过使用此枚举的成员 <see cref="P:Microsoft.JScript.ITokenColorInfo.Color" />
  ///  属性 <see cref="T:Microsoft.JScript.ITokenColorInfo" />
  ///  对象。
  ///</summary>
  [DNTypeName('Microsoft.JScript.TokenColor')]
  DNTokenColor = type Integer;
  DNTokenColorHelper = record helper for DNTokenColor
  public const
    ///<summary>
    ///  表示文本的代码单元的颜色。
    ///  这是默认值。
    ///</summary>
    COLOR_TEXT = 0;
    ///<summary>
    ///  表示一个标识符的代码单元的颜色。
    ///</summary>
    COLOR_IDENTIFIER = 1;
    ///<summary>
    ///  表示一个关键字的代码单元的颜色。
    ///</summary>
    COLOR_KEYWORD = 2;
    ///<summary>
    ///  表示一个注释的代码单元的颜色。
    ///</summary>
    COLOR_COMMENT = 3;
    ///<summary>
    ///  表示一个运算符的代码单元的颜色。
    ///</summary>
    COLOR_OPERATOR = 4;
    ///<summary>
    ///  表示数字文字的代码单元的颜色。
    ///</summary>
    COLOR_NUMBER = 5;
    ///<summary>
    ///  表示字符串文字的代码单元的颜色。
    ///</summary>
    COLOR_STRING = 6;
    ///<summary>
    ///  未使用。
    ///</summary>
    COLOR_CONDITIONAL_COMP = 7;
  end;


  //-------------namespace: Microsoft.JScript.Vsa----------------
  ///<summary>
  ///  定义可由 .NET 脚本引擎引发的异常集。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Vsa.JSVsaError')]
  DNJSVsaError = type Integer;
  DNJSVsaErrorHelper = record helper for DNJSVsaError
  public const
    ///<summary>
    ///  值：0x80133000
    ///</summary>
    AppDomainCannotBeSet = -2146226176;
    ///<summary>
    ///  值：0x80133001
    ///</summary>
    AppDomainInvalid = -2146226175;
    ///<summary>
    ///  值：0x80133002
    ///</summary>
    ApplicationBaseCannotBeSet = -2146226174;
    ///<summary>
    ///  值：0x80133003
    ///</summary>
    ApplicationBaseInvalid = -2146226173;
    ///<summary>
    ///  值：0x80133004
    ///</summary>
    AssemblyExpected = -2146226172;
    ///<summary>
    ///  值：0x80133005
    ///</summary>
    AssemblyNameInvalid = -2146226171;
    ///<summary>
    ///  值：0x80133006
    ///</summary>
    BadAssembly = -2146226170;
    ///<summary>
    ///  值：0x80133007
    ///</summary>
    CachedAssemblyInvalid = -2146226169;
    ///<summary>
    ///  值：0x80133008
    ///</summary>
    CallbackUnexpected = -2146226168;
    ///<summary>
    ///  值：0x80133009
    ///</summary>
    CodeDOMNotAvailable = -2146226167;
    ///<summary>
    ///  值：0x8013300A
    ///</summary>
    CompiledStateNotFound = -2146226166;
    ///<summary>
    ///  值：0x8013300B
    ///</summary>
    DebugInfoNotSupported = -2146226165;
    ///<summary>
    ///  值：0x8013300C
    ///</summary>
    ElementNameInvalid = -2146226164;
    ///<summary>
    ///  值：0x8013300D
    ///</summary>
    ElementNotFound = -2146226163;
    ///<summary>
    ///  值：0x8013300E
    ///</summary>
    EngineBusy = -2146226162;
    ///<summary>
    ///  值：0x8013300F
    ///</summary>
    EngineCannotClose = -2146226161;
    ///<summary>
    ///  值：0x80133010
    ///</summary>
    EngineCannotReset = -2146226160;
    ///<summary>
    ///  值：0x80133011
    ///</summary>
    EngineClosed = -2146226159;
    ///<summary>
    ///  值：0x80133012
    ///</summary>
    EngineEmpty = -2146226159;
    ///<summary>
    ///  值：0x80133013
    ///</summary>
    EngineInitialized = -2146226157;
    ///<summary>
    ///  值：0x80133014
    ///</summary>
    EngineNameInUse = -2146226156;
    ///<summary>
    ///  值：0x80133015
    ///</summary>
    EngineNotCompiled = -2146226155;
    ///<summary>
    ///  值：0x80133016
    ///</summary>
    EngineNotInitialized = -2146226154;
    ///<summary>
    ///  值：0x80133017
    ///</summary>
    EngineNotRunning = -2146226153;
    ///<summary>
    ///  值：0x80133018
    ///</summary>
    EngineRunning = -2146226152;
    ///<summary>
    ///  值：0x80133019
    ///</summary>
    EventSourceInvalid = -2146226151;
    ///<summary>
    ///  值：0x8013301A
    ///</summary>
    EventSourceNameInUse = -2146226150;
    ///<summary>
    ///  值：0x8013301B
    ///</summary>
    EventSourceNameInvalid = -2146226149;
    ///<summary>
    ///  值：0x8013301C
    ///</summary>
    EventSourceNotFound = -2146226148;
    ///<summary>
    ///  值：0x8013301D
    ///</summary>
    EventSourceTypeInvalid = -2146226147;
    ///<summary>
    ///  值：0x8013301E
    ///</summary>
    GetCompiledStateFailed = -2146226146;
    ///<summary>
    ///  值：0x8013301F
    ///</summary>
    GlobalInstanceInvalid = -2146226145;
    ///<summary>
    ///  值：0x80133020
    ///</summary>
    GlobalInstanceTypeInvalid = -2146226144;
    ///<summary>
    ///  值：0x80133021
    ///</summary>
    InternalCompilerError = -2146226143;
    ///<summary>
    ///  值：0x80133022
    ///</summary>
    ItemCannotBeRemoved = -2146226142;
    ///<summary>
    ///  值：0x80133023
    ///</summary>
    ItemFlagNotSupported = -2146226141;
    ///<summary>
    ///  值：0x80133024
    ///</summary>
    ItemNameInUse = -2146226140;
    ///<summary>
    ///  值：0x80133025
    ///</summary>
    ItemNameInvalid = -2146226139;
    ///<summary>
    ///  值：0x80133026
    ///</summary>
    ItemNotFound = -2146226138;
    ///<summary>
    ///  值：0x80133027
    ///</summary>
    ItemTypeNotSupported = -2146226137;
    ///<summary>
    ///  值：0x80133028
    ///</summary>
    LCIDNotSupported = -2146226136;
    ///<summary>
    ///  值：0x80133029
    ///</summary>
    LoadElementFailed = -2146226135;
    ///<summary>
    ///  值：0x8013302A
    ///</summary>
    NotificationInvalid = -2146226134;
    ///<summary>
    ///  值：0x8013302B
    ///</summary>
    OptionInvalid = -2146226133;
    ///<summary>
    ///  值：0x8013302C
    ///</summary>
    OptionNotSupported = -2146226132;
    ///<summary>
    ///  值：0x8013302D
    ///</summary>
    RevokeFailed = -2146226131;
    ///<summary>
    ///  值：0x8013302E
    ///</summary>
    RootMonikerAlreadySet = -2146226130;
    ///<summary>
    ///  值：0x8013302F
    ///</summary>
    RootMonikerInUse = -2146226129;
    ///<summary>
    ///  值：0x80133030
    ///</summary>
    RootMonikerInvalid = -2146226128;
    ///<summary>
    ///  值：0x80133031
    ///</summary>
    RootMonikerNotSet = -2146226127;
    ///<summary>
    ///  值：0x80133032
    ///</summary>
    RootMonikerProtocolInvalid = -2146226126;
    ///<summary>
    ///  值：0x80133033
    ///</summary>
    RootNamespaceInvalid = -2146226125;
    ///<summary>
    ///  值：0x80133034
    ///</summary>
    RootNamespaceNotSet = -2146226124;
    ///<summary>
    ///  值：0x80133035
    ///</summary>
    SaveCompiledStateFailed = -2146226123;
    ///<summary>
    ///  值：0x80133036
    ///</summary>
    SaveElementFailed = -2146226122;
    ///<summary>
    ///  值：0x80133037
    ///</summary>
    SiteAlreadySet = -2146226121;
    ///<summary>
    ///  值：0x80133038
    ///</summary>
    SiteInvalid = -2146226120;
    ///<summary>
    ///  值：0x80133039
    ///</summary>
    SiteNotSet = -2146226119;
    ///<summary>
    ///  值：0x8013303A
    ///</summary>
    SourceItemNotAvailable = -2146226118;
    ///<summary>
    ///  值：0x8013303B
    ///</summary>
    SourceMonikerNotAvailable = -2146226117;
    ///<summary>
    ///  值：0x8013303C
    ///</summary>
    URLInvalid = -2146226116;
    ///<summary>
    ///  值：0x8013303D
    ///</summary>
    BrowserNotExist = -2146226115;
    ///<summary>
    ///  值：0x8013303E
    ///</summary>
    DebuggeeNotStarted = -2146226114;
    ///<summary>
    ///  值：0x8013303F
    ///</summary>
    EngineNameInvalid = -2146226113;
    ///<summary>
    ///  值：0x80133040
    ///</summary>
    EngineNotExist = -2146226112;
    ///<summary>
    ///  值：0x80133041
    ///</summary>
    FileFormatUnsupported = -2146226111;
    ///<summary>
    ///  值：0x80133042
    ///</summary>
    FileTypeUnknown = -2146226110;
    ///<summary>
    ///  值：0x80133043
    ///</summary>
    ItemCannotBeRenamed = -2146226109;
    ///<summary>
    ///  值：0x80133044
    ///</summary>
    MissingSource = -2146226108;
    ///<summary>
    ///  值：0x80133045
    ///</summary>
    NotInitCompleted = -2146226107;
    ///<summary>
    ///  值：0x80133046
    ///</summary>
    NameTooLong = -2146226106;
    ///<summary>
    ///  值：0x80133047
    ///</summary>
    ProcNameInUse = -2146226105;
    ///<summary>
    ///  值：0x80133048
    ///</summary>
    ProcNameInvalid = -2146226104;
    ///<summary>
    ///  值：0x80133049
    ///</summary>
    VsaServerDown = -2146226103;
    ///<summary>
    ///  值：0x8013304A
    ///</summary>
    MissingPdb = -2146226102;
    ///<summary>
    ///  值：0x8013304B
    ///</summary>
    NotClientSideAndNoUrl = -2146226101;
    ///<summary>
    ///  值：0x8013304C
    ///</summary>
    CannotAttachToWebServer = -2146226100;
    ///<summary>
    ///  值：0x8013303F
    ///</summary>
    EngineNameNotSet = -2146226099;
    ///<summary>
    ///  值：0x801330FF
    ///</summary>
    UnknownError = -2146225921;
  end;


  //-------------namespace: Microsoft.JScript.Vsa----------------
  ///<summary>
  ///  将代码项的类型标识为“类”、“模块”或“无”。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Vsa.JSVsaItemFlag')]
  DNJSVsaItemFlag = type Integer;
  DNJSVsaItemFlagHelper = record helper for DNJSVsaItemFlag
  public const
    ///<summary>
    ///  在代码项是一个类时使用。
    ///</summary>
    None = 0;
    ///<summary>
    ///  在代码项是一个模块时使用。
    ///</summary>
    Module = 1;
    ///<summary>
    ///  使用代码项是泛型或时的项类型不接受标志。
    ///  在这种情况下，任何特殊标志不需要创建的项。
    ///</summary>
    Class_ = 2;
  end;


  //-------------namespace: Microsoft.JScript.Vsa----------------
  ///<summary>
  ///  表示的项的类型。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Vsa.JSVsaItemType')]
  DNJSVsaItemType = type Integer;
  DNJSVsaItemTypeHelper = record helper for DNJSVsaItemType
  public const
    ///<summary>
    ///  用于添加对一个外部.NET 程序集，它然后可以从代码中引用的引用。
    ///  此类型用于创建 IJSVsaReferenceItem 对象
    ///</summary>
    Reference = 0;
    ///<summary>
    ///  用于将全局对象添加到.NET 脚本引擎。
    ///  此类型用于创建 IJSVsaGlobalItem 对象。
    ///</summary>
    AppGlobal = 1;
    ///<summary>
    ///  用于创建代码项，以存储.NET 脚本引擎的源代码。
    ///</summary>
    Code = 2;
  end;


  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  扩展 <see cref="T:Microsoft.Vsa.VsaItemType" />
  ///  枚举。
  ///  提供程序 IActiveScript 宿主所需的额外功能。
  ///</summary>
  [DNTypeName('Microsoft.JScript.VSAITEMTYPE2')]
  DNVSAITEMTYPE2 = type Integer;
  DNVSAITEMTYPE2Helper = record helper for DNVSAITEMTYPE2
  public const
    ///<summary>
    ///  指定 none。
    ///  这是默认值。
    ///</summary>
    None = 0;
    ///<summary>
    ///  指定虚拟主机对象。
    ///</summary>
    HOSTOBJECT = 16;
    ///<summary>
    ///  指定范围。
    ///</summary>
    HOSTSCOPE = 17;
    ///<summary>
    ///  指定的范围，该对象。
    ///</summary>
    HOSTSCOPEANDOBJECT = 18;
    ///<summary>
    ///  指定的脚本作用域。
    ///</summary>
    SCRIPTSCOPE = 19;
    ///<summary>
    ///  指定脚本块。
    ///  这适用于 <see cref="T:Microsoft.JScript.IVsaScriptCodeItem" />
    ///  。
    ///</summary>
    SCRIPTBLOCK = 20;
    ///<summary>
    ///  指定的单个语句。
    ///  这适用于 <see cref="T:Microsoft.JScript.IVsaScriptCodeItem" />
    ///  。
    ///</summary>
    STATEMENT = 21;
    ///<summary>
    ///  指定一个表达式。
    ///  这适用于 <see cref="T:Microsoft.JScript.IVsaScriptCodeItem" />
    ///  。
    ///</summary>
    EXPRESSION = 22;
  end;




type


{ declares }

  DNCOMMemberInfo = interface; // type: Microsoft.JScript.COMMemberInfo, namespace: Microsoft.JScript
  DNIActivationObject = interface; // type: Microsoft.JScript.IActivationObject, namespace: Microsoft.JScript
  DNIAuthorServices = interface; // type: Microsoft.JScript.IAuthorServices, namespace: Microsoft.JScript
  DNIColorizeText = interface; // type: Microsoft.JScript.IColorizeText, namespace: Microsoft.JScript
  DNIDebugConvert = interface; // type: Microsoft.JScript.IDebugConvert, namespace: Microsoft.JScript
  DNIDebugConvert2 = interface; // type: Microsoft.JScript.IDebugConvert2, namespace: Microsoft.JScript
  DNIDebuggerObject = interface; // type: Microsoft.JScript.IDebuggerObject, namespace: Microsoft.JScript
  DNIDebugScriptScope = interface; // type: Microsoft.JScript.IDebugScriptScope, namespace: Microsoft.JScript
  DNIDebugType = interface; // type: Microsoft.JScript.IDebugType, namespace: Microsoft.JScript
  DNIDebugVsaScriptCodeItem = interface; // type: Microsoft.JScript.IDebugVsaScriptCodeItem, namespace: Microsoft.JScript
  DNIDefineEvent = interface; // type: Microsoft.JScript.IDefineEvent, namespace: Microsoft.JScript
  DNIEngine2 = interface; // type: Microsoft.JScript.IEngine2, namespace: Microsoft.JScript
  DNIErrorHandler = interface; // type: Microsoft.JScript.IErrorHandler, namespace: Microsoft.JScript
  DNIMessageReceiver = interface; // type: Microsoft.JScript.IMessageReceiver, namespace: Microsoft.JScript
  DNIMethodsCompletionInfo = interface; // type: Microsoft.JScript.IMethodsCompletionInfo, namespace: Microsoft.JScript
  DNINeedEngine = interface; // type: Microsoft.JScript.INeedEngine, namespace: Microsoft.JScript
  DNIObjectCompletionInfo = interface; // type: Microsoft.JScript.IObjectCompletionInfo, namespace: Microsoft.JScript
  DNIParseText = interface; // type: Microsoft.JScript.IParseText, namespace: Microsoft.JScript
  DNIRedirectOutput = interface; // type: Microsoft.JScript.IRedirectOutput, namespace: Microsoft.JScript
  DNISite2 = interface; // type: Microsoft.JScript.ISite2, namespace: Microsoft.JScript
  DNITokenColorInfo = interface; // type: Microsoft.JScript.ITokenColorInfo, namespace: Microsoft.JScript
  DNITokenEnumerator = interface; // type: Microsoft.JScript.ITokenEnumerator, namespace: Microsoft.JScript
  DNIWrappedMember = interface; // type: Microsoft.JScript.IWrappedMember, namespace: Microsoft.JScript
  DNMemberInfoInitializer = interface; // type: Microsoft.JScript.MemberInfoInitializer, namespace: Microsoft.JScript
  DNIJSVsaEngine = interface; // type: Microsoft.JScript.Vsa.IJSVsaEngine, namespace: Microsoft.JScript.Vsa
  DNIJSVsaError = interface; // type: Microsoft.JScript.Vsa.IJSVsaError, namespace: Microsoft.JScript.Vsa
  DNIVsaFullErrorInfo = interface; // type: Microsoft.JScript.IVsaFullErrorInfo, namespace: Microsoft.JScript
  DNIJSVsaItem = interface; // type: Microsoft.JScript.Vsa.IJSVsaItem, namespace: Microsoft.JScript.Vsa
  DNIVsaScriptScope = interface; // type: Microsoft.JScript.IVsaScriptScope, namespace: Microsoft.JScript
  DNIJSVsaCodeItem = interface; // type: Microsoft.JScript.Vsa.IJSVsaCodeItem, namespace: Microsoft.JScript.Vsa
  DNIVsaScriptCodeItem = interface; // type: Microsoft.JScript.IVsaScriptCodeItem, namespace: Microsoft.JScript
  DNIJSVsaGlobalItem = interface; // type: Microsoft.JScript.Vsa.IJSVsaGlobalItem, namespace: Microsoft.JScript.Vsa
  DNIJSVsaReferenceItem = interface; // type: Microsoft.JScript.Vsa.IJSVsaReferenceItem, namespace: Microsoft.JScript.Vsa
  DNIJSVsaPersistSite = interface; // type: Microsoft.JScript.Vsa.IJSVsaPersistSite, namespace: Microsoft.JScript.Vsa
  DNIJSVsaSite = interface; // type: Microsoft.JScript.Vsa.IJSVsaSite, namespace: Microsoft.JScript.Vsa
  DNIJSVsaItems = interface; // type: Microsoft.JScript.Vsa.IJSVsaItems, namespace: Microsoft.JScript.Vsa
  DNAST = interface; // type: Microsoft.JScript.AST, namespace: Microsoft.JScript
  DNArrayLiteral = interface; // type: Microsoft.JScript.ArrayLiteral, namespace: Microsoft.JScript
  DNAssemblyCustomAttributeList = interface; // type: Microsoft.JScript.AssemblyCustomAttributeList, namespace: Microsoft.JScript
  DNASTList = interface; // type: Microsoft.JScript.ASTList, namespace: Microsoft.JScript
  DNBinaryOp = interface; // type: Microsoft.JScript.BinaryOp, namespace: Microsoft.JScript
  DNBitwiseBinary = interface; // type: Microsoft.JScript.BitwiseBinary, namespace: Microsoft.JScript
  DNEquality = interface; // type: Microsoft.JScript.Equality, namespace: Microsoft.JScript
  DNIn = interface; // type: Microsoft.JScript.In, namespace: Microsoft.JScript
  DNInstanceof = interface; // type: Microsoft.JScript.Instanceof, namespace: Microsoft.JScript
  DNNumericBinary = interface; // type: Microsoft.JScript.NumericBinary, namespace: Microsoft.JScript
  DNPlus = interface; // type: Microsoft.JScript.Plus, namespace: Microsoft.JScript
  DNRelational = interface; // type: Microsoft.JScript.Relational, namespace: Microsoft.JScript
  DNStrictEquality = interface; // type: Microsoft.JScript.StrictEquality, namespace: Microsoft.JScript
  DNBinding = interface; // type: Microsoft.JScript.Binding, namespace: Microsoft.JScript
  DNBlock = interface; // type: Microsoft.JScript.Block, namespace: Microsoft.JScript
  DNDebugBreak = interface; // type: Microsoft.JScript.DebugBreak, namespace: Microsoft.JScript
  DNEval = interface; // type: Microsoft.JScript.Eval, namespace: Microsoft.JScript
  DNForIn = interface; // type: Microsoft.JScript.ForIn, namespace: Microsoft.JScript
  DNFunctionDeclaration = interface; // type: Microsoft.JScript.FunctionDeclaration, namespace: Microsoft.JScript
  DNFunctionExpression = interface; // type: Microsoft.JScript.FunctionExpression, namespace: Microsoft.JScript
  DNImport = interface; // type: Microsoft.JScript.Import, namespace: Microsoft.JScript
  DNPackage = interface; // type: Microsoft.JScript.Package, namespace: Microsoft.JScript
  DNScriptBlock = interface; // type: Microsoft.JScript.ScriptBlock, namespace: Microsoft.JScript
  DNThrow = interface; // type: Microsoft.JScript.Throw, namespace: Microsoft.JScript
  DNTry = interface; // type: Microsoft.JScript.Try, namespace: Microsoft.JScript
  DNUnaryOp = interface; // type: Microsoft.JScript.UnaryOp, namespace: Microsoft.JScript
  DNNumericUnary = interface; // type: Microsoft.JScript.NumericUnary, namespace: Microsoft.JScript
  DNPostOrPrefixOperator = interface; // type: Microsoft.JScript.PostOrPrefixOperator, namespace: Microsoft.JScript
  DNTypeof = interface; // type: Microsoft.JScript.Typeof, namespace: Microsoft.JScript
  DNWith = interface; // type: Microsoft.JScript.With, namespace: Microsoft.JScript
  DNCmdLineOptionParser = interface; // type: Microsoft.JScript.CmdLineOptionParser, namespace: Microsoft.JScript
  DNContext = interface; // type: Microsoft.JScript.Context, namespace: Microsoft.JScript
  DNConvert = interface; // type: Microsoft.JScript.Convert, namespace: Microsoft.JScript
  DNDebugConvert = interface; // type: Microsoft.JScript.DebugConvert, namespace: Microsoft.JScript
  DNDocumentContext = interface; // type: Microsoft.JScript.DocumentContext, namespace: Microsoft.JScript
  DNDynamicFieldInfo = interface; // type: Microsoft.JScript.DynamicFieldInfo, namespace: Microsoft.JScript
  DNEmpty = interface; // type: Microsoft.JScript.Empty, namespace: Microsoft.JScript
  DNFieldAccessor = interface; // type: Microsoft.JScript.FieldAccessor, namespace: Microsoft.JScript
  DNGlobalObject = interface; // type: Microsoft.JScript.GlobalObject, namespace: Microsoft.JScript
  DNLenientGlobalObject = interface; // type: Microsoft.JScript.LenientGlobalObject, namespace: Microsoft.JScript
  DNGlobals = interface; // type: Microsoft.JScript.Globals, namespace: Microsoft.JScript
  DNJSAuthor = interface; // type: Microsoft.JScript.JSAuthor, namespace: Microsoft.JScript
  DNJSParser = interface; // type: Microsoft.JScript.JSParser, namespace: Microsoft.JScript
  DNJSScanner = interface; // type: Microsoft.JScript.JSScanner, namespace: Microsoft.JScript
  DNLateBinding = interface; // type: Microsoft.JScript.LateBinding, namespace: Microsoft.JScript
  DNMemberInfoList = interface; // type: Microsoft.JScript.MemberInfoList, namespace: Microsoft.JScript
  DNMethodInvoker = interface; // type: Microsoft.JScript.MethodInvoker, namespace: Microsoft.JScript
  DNMissing = interface; // type: Microsoft.JScript.Missing, namespace: Microsoft.JScript
  DNNamespace = interface; // type: Microsoft.JScript.Namespace, namespace: Microsoft.JScript
  DNRuntime = interface; // type: Microsoft.JScript.Runtime, namespace: Microsoft.JScript
  DNScriptObject = interface; // type: Microsoft.JScript.ScriptObject, namespace: Microsoft.JScript
  DNActivationObject = interface; // type: Microsoft.JScript.ActivationObject, namespace: Microsoft.JScript
  DNBlockScope = interface; // type: Microsoft.JScript.BlockScope, namespace: Microsoft.JScript
  DNGlobalScope = interface; // type: Microsoft.JScript.GlobalScope, namespace: Microsoft.JScript
  DNJSObject = interface; // type: Microsoft.JScript.JSObject, namespace: Microsoft.JScript
  DNArgumentsObject = interface; // type: Microsoft.JScript.ArgumentsObject, namespace: Microsoft.JScript
  DNArrayObject = interface; // type: Microsoft.JScript.ArrayObject, namespace: Microsoft.JScript
  DNArrayPrototype = interface; // type: Microsoft.JScript.ArrayPrototype, namespace: Microsoft.JScript
  DNLenientArrayPrototype = interface; // type: Microsoft.JScript.LenientArrayPrototype, namespace: Microsoft.JScript
  DNArrayWrapper = interface; // type: Microsoft.JScript.ArrayWrapper, namespace: Microsoft.JScript
  DNRegExpMatch = interface; // type: Microsoft.JScript.RegExpMatch, namespace: Microsoft.JScript
  DNBooleanObject = interface; // type: Microsoft.JScript.BooleanObject, namespace: Microsoft.JScript
  DNBooleanPrototype = interface; // type: Microsoft.JScript.BooleanPrototype, namespace: Microsoft.JScript
  DNLenientBooleanPrototype = interface; // type: Microsoft.JScript.LenientBooleanPrototype, namespace: Microsoft.JScript
  DNDateObject = interface; // type: Microsoft.JScript.DateObject, namespace: Microsoft.JScript
  DNDatePrototype = interface; // type: Microsoft.JScript.DatePrototype, namespace: Microsoft.JScript
  DNLenientDatePrototype = interface; // type: Microsoft.JScript.LenientDatePrototype, namespace: Microsoft.JScript
  DNEnumeratorObject = interface; // type: Microsoft.JScript.EnumeratorObject, namespace: Microsoft.JScript
  DNEnumeratorPrototype = interface; // type: Microsoft.JScript.EnumeratorPrototype, namespace: Microsoft.JScript
  DNLenientEnumeratorPrototype = interface; // type: Microsoft.JScript.LenientEnumeratorPrototype, namespace: Microsoft.JScript
  DNErrorObject = interface; // type: Microsoft.JScript.ErrorObject, namespace: Microsoft.JScript
  DNEvalErrorObject = interface; // type: Microsoft.JScript.EvalErrorObject, namespace: Microsoft.JScript
  DNRangeErrorObject = interface; // type: Microsoft.JScript.RangeErrorObject, namespace: Microsoft.JScript
  DNReferenceErrorObject = interface; // type: Microsoft.JScript.ReferenceErrorObject, namespace: Microsoft.JScript
  DNSyntaxErrorObject = interface; // type: Microsoft.JScript.SyntaxErrorObject, namespace: Microsoft.JScript
  DNTypeErrorObject = interface; // type: Microsoft.JScript.TypeErrorObject, namespace: Microsoft.JScript
  DNURIErrorObject = interface; // type: Microsoft.JScript.URIErrorObject, namespace: Microsoft.JScript
  DNErrorPrototype = interface; // type: Microsoft.JScript.ErrorPrototype, namespace: Microsoft.JScript
  DNLenientErrorPrototype = interface; // type: Microsoft.JScript.LenientErrorPrototype, namespace: Microsoft.JScript
  DNJSPrototypeObject = interface; // type: Microsoft.JScript.JSPrototypeObject, namespace: Microsoft.JScript
  DNMathObject = interface; // type: Microsoft.JScript.MathObject, namespace: Microsoft.JScript
  DNLenientMathObject = interface; // type: Microsoft.JScript.LenientMathObject, namespace: Microsoft.JScript
  DNNumberObject = interface; // type: Microsoft.JScript.NumberObject, namespace: Microsoft.JScript
  DNNumberPrototype = interface; // type: Microsoft.JScript.NumberPrototype, namespace: Microsoft.JScript
  DNLenientNumberPrototype = interface; // type: Microsoft.JScript.LenientNumberPrototype, namespace: Microsoft.JScript
  DNObjectPrototype = interface; // type: Microsoft.JScript.ObjectPrototype, namespace: Microsoft.JScript
  DNLenientObjectPrototype = interface; // type: Microsoft.JScript.LenientObjectPrototype, namespace: Microsoft.JScript
  DNRegExpObject = interface; // type: Microsoft.JScript.RegExpObject, namespace: Microsoft.JScript
  DNRegExpPrototype = interface; // type: Microsoft.JScript.RegExpPrototype, namespace: Microsoft.JScript
  DNLenientRegExpPrototype = interface; // type: Microsoft.JScript.LenientRegExpPrototype, namespace: Microsoft.JScript
  DNScriptFunction = interface; // type: Microsoft.JScript.ScriptFunction, namespace: Microsoft.JScript
  DNActiveXObjectConstructor = interface; // type: Microsoft.JScript.ActiveXObjectConstructor, namespace: Microsoft.JScript
  DNArrayConstructor = interface; // type: Microsoft.JScript.ArrayConstructor, namespace: Microsoft.JScript
  DNBooleanConstructor = interface; // type: Microsoft.JScript.BooleanConstructor, namespace: Microsoft.JScript
  DNClosure = interface; // type: Microsoft.JScript.Closure, namespace: Microsoft.JScript
  DNDateConstructor = interface; // type: Microsoft.JScript.DateConstructor, namespace: Microsoft.JScript
  DNLenientDateConstructor = interface; // type: Microsoft.JScript.LenientDateConstructor, namespace: Microsoft.JScript
  DNEnumeratorConstructor = interface; // type: Microsoft.JScript.EnumeratorConstructor, namespace: Microsoft.JScript
  DNErrorConstructor = interface; // type: Microsoft.JScript.ErrorConstructor, namespace: Microsoft.JScript
  DNFunctionConstructor = interface; // type: Microsoft.JScript.FunctionConstructor, namespace: Microsoft.JScript
  DNFunctionObject = interface; // type: Microsoft.JScript.FunctionObject, namespace: Microsoft.JScript
  DNFunctionPrototype = interface; // type: Microsoft.JScript.FunctionPrototype, namespace: Microsoft.JScript
  DNLenientFunctionPrototype = interface; // type: Microsoft.JScript.LenientFunctionPrototype, namespace: Microsoft.JScript
  DNFunctionWrapper = interface; // type: Microsoft.JScript.FunctionWrapper, namespace: Microsoft.JScript
  DNNumberConstructor = interface; // type: Microsoft.JScript.NumberConstructor, namespace: Microsoft.JScript
  DNObjectConstructor = interface; // type: Microsoft.JScript.ObjectConstructor, namespace: Microsoft.JScript
  DNRegExpConstructor = interface; // type: Microsoft.JScript.RegExpConstructor, namespace: Microsoft.JScript
  DNStringConstructor = interface; // type: Microsoft.JScript.StringConstructor, namespace: Microsoft.JScript
  DNLenientStringConstructor = interface; // type: Microsoft.JScript.LenientStringConstructor, namespace: Microsoft.JScript
  DNVBArrayConstructor = interface; // type: Microsoft.JScript.VBArrayConstructor, namespace: Microsoft.JScript
  DNStringObject = interface; // type: Microsoft.JScript.StringObject, namespace: Microsoft.JScript
  DNStringPrototype = interface; // type: Microsoft.JScript.StringPrototype, namespace: Microsoft.JScript
  DNLenientStringPrototype = interface; // type: Microsoft.JScript.LenientStringPrototype, namespace: Microsoft.JScript
  DNVBArrayObject = interface; // type: Microsoft.JScript.VBArrayObject, namespace: Microsoft.JScript
  DNVBArrayPrototype = interface; // type: Microsoft.JScript.VBArrayPrototype, namespace: Microsoft.JScript
  DNLenientVBArrayPrototype = interface; // type: Microsoft.JScript.LenientVBArrayPrototype, namespace: Microsoft.JScript
  DNStackFrame = interface; // type: Microsoft.JScript.StackFrame, namespace: Microsoft.JScript
  DNTypeReflector = interface; // type: Microsoft.JScript.TypeReflector, namespace: Microsoft.JScript
  DNScriptStream = interface; // type: Microsoft.JScript.ScriptStream, namespace: Microsoft.JScript
  DNSimpleHashtable = interface; // type: Microsoft.JScript.SimpleHashtable, namespace: Microsoft.JScript
  DNSuperTypeMembersSorter = interface; // type: Microsoft.JScript.SuperTypeMembersSorter, namespace: Microsoft.JScript
  DNTypedArray = interface; // type: Microsoft.JScript.TypedArray, namespace: Microsoft.JScript
  DNBaseVsaEngine = interface; // type: Microsoft.JScript.Vsa.BaseVsaEngine, namespace: Microsoft.JScript.Vsa
  DNVsaEngine = interface; // type: Microsoft.JScript.Vsa.VsaEngine, namespace: Microsoft.JScript.Vsa
  DNBaseVsaSite = interface; // type: Microsoft.JScript.Vsa.BaseVsaSite, namespace: Microsoft.JScript.Vsa
  DNBaseVsaStartup = interface; // type: Microsoft.JScript.Vsa.BaseVsaStartup, namespace: Microsoft.JScript.Vsa
  DNResInfo = interface; // type: Microsoft.JScript.Vsa.ResInfo, namespace: Microsoft.JScript.Vsa
  DNVsaItem = interface; // type: Microsoft.JScript.VsaItem, namespace: Microsoft.JScript
  DNVsaItems = interface; // type: Microsoft.JScript.VsaItems, namespace: Microsoft.JScript
  DNExpando = interface; // type: Microsoft.JScript.Expando, namespace: Microsoft.JScript
  DNHide = interface; // type: Microsoft.JScript.Hide, namespace: Microsoft.JScript
  DNJSFunctionAttribute = interface; // type: Microsoft.JScript.JSFunctionAttribute, namespace: Microsoft.JScript
  DNNotRecommended = interface; // type: Microsoft.JScript.NotRecommended, namespace: Microsoft.JScript
  DNOverride = interface; // type: Microsoft.JScript.Override, namespace: Microsoft.JScript
  DNReferenceAttribute = interface; // type: Microsoft.JScript.ReferenceAttribute, namespace: Microsoft.JScript
  DNCmdLineException = interface; // type: Microsoft.JScript.CmdLineException, namespace: Microsoft.JScript
  DNParserException = interface; // type: Microsoft.JScript.ParserException, namespace: Microsoft.JScript
  DNEndOfFile = interface; // type: Microsoft.JScript.EndOfFile, namespace: Microsoft.JScript
  DNBreakOutOfFinally = interface; // type: Microsoft.JScript.BreakOutOfFinally, namespace: Microsoft.JScript
  DNContinueOutOfFinally = interface; // type: Microsoft.JScript.ContinueOutOfFinally, namespace: Microsoft.JScript
  DNJScriptException = interface; // type: Microsoft.JScript.JScriptException, namespace: Microsoft.JScript
  DNNoContextException = interface; // type: Microsoft.JScript.NoContextException, namespace: Microsoft.JScript
  DNReturnOutOfFinally = interface; // type: Microsoft.JScript.ReturnOutOfFinally, namespace: Microsoft.JScript
  DNJSVsaException = interface; // type: Microsoft.JScript.Vsa.JSVsaException, namespace: Microsoft.JScript.Vsa
  DNJScriptCodeProvider = interface; // type: Microsoft.JScript.JScriptCodeProvider, namespace: Microsoft.JScript
  DNCOMCharStream = interface; // type: Microsoft.JScript.COMCharStream, namespace: Microsoft.JScript
  DNCOMFieldInfo = interface; // type: Microsoft.JScript.COMFieldInfo, namespace: Microsoft.JScript
  DNJSField = interface; // type: Microsoft.JScript.JSField, namespace: Microsoft.JScript
  DNJSVariableField = interface; // type: Microsoft.JScript.JSVariableField, namespace: Microsoft.JScript
  DNJSLocalField = interface; // type: Microsoft.JScript.JSLocalField, namespace: Microsoft.JScript
  DNJSFieldInfo = interface; // type: Microsoft.JScript.JSFieldInfo, namespace: Microsoft.JScript
  DNJSConstructor = interface; // type: Microsoft.JScript.JSConstructor, namespace: Microsoft.JScript
  DNJSMethod = interface; // type: Microsoft.JScript.JSMethod, namespace: Microsoft.JScript
  DNCOMMethodInfo = interface; // type: Microsoft.JScript.COMMethodInfo, namespace: Microsoft.JScript
  DNJSMethodInfo = interface; // type: Microsoft.JScript.JSMethodInfo, namespace: Microsoft.JScript
  DNCOMPropertyInfo = interface; // type: Microsoft.JScript.COMPropertyInfo, namespace: Microsoft.JScript


{ objects }

  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  定义启用 JScript 与外部 COM 成员进行通信的方法。
  ///  外部 COM 实现使用此接口公开其对象向 JScript，因为 JScript 需要托管<see cref="T:System.Reflection.MemberInfo" />
  ///  将绑定到外部对象。
  ///</summary>
  [DNTypeName('Microsoft.JScript.COMMemberInfo')]
  DNCOMMemberInfo = interface(DDN.mscorlib.DNObject)
  ['{84BCEB62-16EB-4E1C-975C-FCB40D331043}']
  { methods } 

    ///<summary>
    ///  类中实现时，使 JScript 能够调用外部 COM 成员。
    ///  使用指定的绑定信息。
    ///</summary>
    ///  <param name="invokeAttr">
    ///  控制绑定枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  执行从实参类型到形参类型的类型转换的对象。
    ///</param>
    ///  <param name="arguments">
    ///  要传递给外部 COM 成员的自变量列表。
    ///</param>
    ///  <param name="culture">
    ///  提供有关特定区域性或区域设置来正确地设置数字、 日期和字符串的格式信息。
    ///</param>
    ///<returns>
    ///  对外部 COM 成员的调用的值。
    ///</returns>
    function Call(invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; arguments: TArray<DDN.mscorlib.DNObject>; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject;
    ///<summary>
    ///  一个类中实现时，使 JScript 能够获取使用指定的绑定信息的外部 COM 成员的值。
    ///</summary>
    ///  <param name="invokeAttr">
    ///  用于控制绑定的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="index">
    ///  要传递给外部 COM 成员的参数列表。
    ///</param>
    ///  <param name="culture">
    ///  提供有关特定区域性或区域设置来正确地设置数字、 日期和字符串的格式信息。
    ///</param>
    ///<returns>
    ///  外部 COM 成员的值。
    ///</returns>
    function GetValue(invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; index: TArray<DDN.mscorlib.DNObject>; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject;
    ///<summary>
    ///  一个类中实现时，启用 JScript 将外部 COM 成员的值设置为指定的新值，使用指定的绑定信息。
    ///</summary>
    ///  <param name="value">
    ///  外部 COM 成员的新值。
    ///</param>
    ///  <param name="invokeAttr">
    ///  用于控制绑定的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="index">
    ///  要传递给外部 COM 成员的参数列表。
    ///</param>
    ///  <param name="culture">
    ///  提供有关特定区域性或区域设置来正确地设置数字、 日期和字符串的格式信息。
    ///</param>
    procedure SetValue(value: DDN.mscorlib.DNObject; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; index: TArray<DDN.mscorlib.DNObject>; culture: DDN.mscorlib.DNCultureInfo);

  end;

  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  定义用于解析范围的方法。
  ///  此接口实现由参与到作用域层次结构中的所有对象。
  ///</summary>
  [DNTypeName('Microsoft.JScript.IActivationObject')]
  DNIActivationObject = interface(DDN.mscorlib.DNObject)
  ['{5C6688A9-074E-3EEB-8387-769B635082E4}']
  { methods } 

    ///<summary>
    ///  一个类中实现时，获取当前的默认作用域。
    ///  包含的对象 <see langword="with" />
    ///  语句范围或全局范围。
    ///</summary>
    ///<returns>
    ///  当前的默认作用域。
    ///</returns>
    function GetDefaultThisObject: DDN.mscorlib.DNObject;
    ///<summary>
    ///  类中实现时，获取通过搜索作用域层次结构，直到它找到一个范围，包括静态变量，例如，模块作用域的全局作用域。
    ///</summary>
    ///<returns>
    ///  全局作用域。
    ///</returns>
    function GetGlobalScope: DNGlobalScope;
    ///<summary>
    ///  一个类中实现时，获取具有指定的名称的字段的局部声明。
    ///  这用于编译时错误检查。
    ///</summary>
    ///  <param name="name">
    ///  字段的名称。
    ///</param>
    ///<returns>
    ///  本地字段的声明。
    ///</returns>
    function GetLocalField(name: string): DDN.mscorlib.DNFieldInfo;
    ///<summary>
    ///  一个类中实现时，通过搜索作用域层次结构中获取指定成员的值。
    ///  此方法搜索的词法级别指定的作用域。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员的名称。
    ///</param>
    ///  <param name="lexlevel">
    ///  要搜索的词法级别。
    ///</param>
    ///<returns>
    ///  成员值 <paramref name="name" />
    ///  。
    ///</returns>
    function GetMemberValue(name: string; lexlevel: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  一个类中实现时，返回通过搜索作用域层次结构中具有指定的名称的字段。
    ///  此方法搜索的词法级别指定的作用域。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的字段的名称。
    ///</param>
    ///  <param name="lexLevel">
    ///  要搜索的词法级别。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Reflection.FieldInfo" />
    ///  具有指定的名称的对象。
    ///</returns>
    function GetField(name: string; lexLevel: Int32): DDN.mscorlib.DNFieldInfo;

  end;

  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  定义了用于创作 JScript 代码在编辑器中的服务。
  ///</summary>
  [DNTypeName('Microsoft.JScript.IAuthorServices')]
  DNIAuthorServices = interface(DDN.mscorlib.DNObject)
  ['{9E2B453C-6EAA-4329-A619-62E4889C8C8A}']
  { methods } 

    ///<summary>
    ///  一个类中实现时，获取一个对象，用于在编辑器中创作 JScript 代码时为文本着色。
    ///</summary>
    ///<returns>
    ///  一个对象，用于为文本着色。
    ///</returns>
    function GetColorizer: DNIColorizeText;
    ///<summary>
    ///  一个类中实现时，获取一个对象，用于将 IntelliSense 添加到文本编辑器中创作 JScript 代码时。
    ///</summary>
    ///<returns>
    ///  一个对象，用于将 IntelliSense 添加为文本。
    ///</returns>
    function GetCodeSense: DNIParseText;

  end;

  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  定义服务着色文本并在编辑器中创作 JScript 代码时。
  ///</summary>
  [DNTypeName('Microsoft.JScript.IColorizeText')]
  DNIColorizeText = interface(DDN.mscorlib.DNObject)
  ['{DB283E60-7ADB-4CF6-9758-2931893A12FC}']
  { methods } 

    ///<summary>
    ///  类中实现时，代码的各个单元的扫描指定的源代码，并识别颜色，每个应包含。
    ///</summary>
    ///  <param name="sourceCode">
    ///  要为着色的源代码。
    ///</param>
    ///  <param name="state">
    ///  对源代码的当前状态 （正常、 注释、 字符串）。
    ///</param>
    ///<returns>
    ///  枚举<see cref="T:Microsoft.JScript.ITokenColorInfo" />
    ///  表示的代码的单元要着色的对象。
    ///</returns>
    function Colorize(sourceCode: string; state: DNSourceState): DNITokenEnumerator;
    ///<summary>
    ///  一个类中实现时，将扫描单个代码单元指定的源代码并标识指定的代码的状态 （正常、 注释、 字符串）。
    ///</summary>
    ///  <param name="sourceCode">
    ///  要分析的源代码。
    ///</param>
    ///  <param name="currentState">
    ///  对源代码的当前状态 （正常、 注释、 字符串）。
    ///</param>
    ///<returns>
    ///  对源代码的状态。
    ///</returns>
    function GetStateForText(sourceCode: string; currentState: DNSourceState): DNSourceState;

  end;

  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  定义一组实用工具方法，用于将数据从一种类型转换为另一个。
  ///  包含方法将值转换为 <see cref="T:System.String" />
  ///  对象，以便它们可以显示由调试器。
  ///</summary>
  [DNTypeName('Microsoft.JScript.IDebugConvert')]
  DNIDebugConvert = interface(DDN.mscorlib.DNObject)
  ['{AA51516D-C0F2-49FE-9D38-61D20456904C}']
  { methods } 

    ///<summary>
    ///  一个类中实现时，将指定的值转换为指定 <see cref="T:System.TypeCode" />
    ///  , ，还可以选择允许丢失数据。
    ///</summary>
    ///  <param name="value">
    ///  要转换为新类型的值。
    ///</param>
    ///  <param name="typeCode">
    ///  要转换的类型 <paramref name="value" />
    ///  到。
    ///</param>
    ///  <param name="truncationPermitted"><see langword="true" />
    ///  若要允许的数据丢失。否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns><paramref name="value" />
    ///  转换为 <paramref name="typeCode" />
    ///  类型。
    ///</returns>
    function ToPrimitive(value: DDN.mscorlib.DNObject; typeCode: DDN.mscorlib.DNTypeCode; truncationPermitted: Boolean): DDN.mscorlib.DNObject;
    ///<summary>
    ///  类中实现时，将转换指定<see cref="T:System.Byte" />
    ///  值赋给<see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///  <param name="radix">
    ///  返回值的基数。
    ///  基类必须是 2、 8、 10 或 16。
    ///</param>
    ///<returns>
    ///  以 <paramref name="value" />
    ///  为基数的 <paramref name="radix" />
    ///  的字符串表示形式。
    ///</returns>
    function ByteToString(value: Byte; radix: Int32): string;
    ///<summary>
    ///  一个类中实现时，将指定 <see cref="T:System.SByte" />
    ///  值赋给 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///  <param name="radix">
    ///  返回的值的基数。
    ///  基类必须是 2、 8、 10 或 16。
    ///</param>
    ///<returns>
    ///  以 <paramref name="value" />
    ///  为基数的 <paramref name="radix" />
    ///  的字符串表示形式。
    ///</returns>
    function SByteToString(value: SByte; radix: Int32): string;
    ///<summary>
    ///  一个类中实现时，将指定 <see cref="T:System.Int16" />
    ///  值赋给 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///  <param name="radix">
    ///  返回的值的基数。
    ///  基类必须是 2、 8、 10 或 16。
    ///</param>
    ///<returns>
    ///  以 <paramref name="value" />
    ///  为基数的 <paramref name="radix" />
    ///  的字符串表示形式。
    ///</returns>
    function Int16ToString(value: Int16; radix: Int32): string;
    ///<summary>
    ///  一个类中实现时，将指定 <see cref="T:System.UInt16" />
    ///  值赋给 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///  <param name="radix">
    ///  返回的值的基数。
    ///  基类必须是 2、 8、 10 或 16。
    ///</param>
    ///<returns>
    ///  以 <paramref name="value" />
    ///  为基数的 <paramref name="radix" />
    ///  的字符串表示形式。
    ///</returns>
    function UInt16ToString(value: UInt16; radix: Int32): string;
    ///<summary>
    ///  一个类中实现时，将指定 <see cref="T:System.Int32" />
    ///  值赋给 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///  <param name="radix">
    ///  返回的值的基数。
    ///  基类必须是 2、 8、 10 或 16。
    ///</param>
    ///<returns>
    ///  以 <paramref name="value" />
    ///  为基数的 <paramref name="radix" />
    ///  的字符串表示形式。
    ///</returns>
    function Int32ToString(value: Int32; radix: Int32): string;
    ///<summary>
    ///  一个类中实现时，将指定 <see cref="T:System.UInt32" />
    ///  值赋给 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///  <param name="radix">
    ///  返回的值的基数。
    ///  基类必须是 2、 8、 10 或 16。
    ///</param>
    ///<returns>
    ///  以 <paramref name="value" />
    ///  为基数的 <paramref name="radix" />
    ///  的字符串表示形式。
    ///</returns>
    function UInt32ToString(value: UInt32; radix: Int32): string;
    ///<summary>
    ///  一个类中实现时，将指定 <see cref="T:System.Int64" />
    ///  值赋给 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///  <param name="radix">
    ///  返回的值的基数。
    ///  基类必须是 2、 8、 10 或 16。
    ///</param>
    ///<returns>
    ///  以 <paramref name="value" />
    ///  为基数的 <paramref name="radix" />
    ///  的字符串表示形式。
    ///</returns>
    function Int64ToString(value: Int64; radix: Int32): string;
    ///<summary>
    ///  一个类中实现时，将指定 <see cref="T:System.UInt64" />
    ///  值赋给 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///  <param name="radix">
    ///  返回的值的基数。
    ///  基类必须是 2、 8、 10 或 16。
    ///</param>
    ///<returns>
    ///  以 <paramref name="value" />
    ///  为基数的 <paramref name="radix" />
    ///  的字符串表示形式。
    ///</returns>
    function UInt64ToString(value: UInt64; radix: Int32): string;
    ///<summary>
    ///  一个类中实现时，将指定 <see cref="T:System.Single" />
    ///  值赋给 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns><paramref name="value" />
    ///  的字符串表示形式。
    ///</returns>
    function SingleToString(value: Single): string;
    ///<summary>
    ///  一个类中实现时，将指定 <see cref="T:System.Double" />
    ///  值赋给 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns><paramref name="value" />
    ///  的字符串表示形式。
    ///</returns>
    function DoubleToString(value: Double): string;
    ///<summary>
    ///  类中实现时，将转换指定<see cref="T:System.Boolean" />
    ///  值赋给<see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns>
    ///  文字字符串"true"或文字字符串"false"。
    ///</returns>
    function BooleanToString(value: Boolean): string;
    ///<summary>
    ///  一个类中实现时，创建的字符串表示形式指定 <see cref="T:System.Double" />
    ///  。
    ///  字符串表示形式包含在一周、 月份、 日期、 时间、 时区和年的某一天。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns><paramref name="value" />
    ///  的字符串表示形式。
    ///</returns>
    function DoubleToDateString(value: Double): string;
    ///<summary>
    ///  一个类中实现时，指定正则表达式将信息转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="source">
    ///  要匹配的正则表达式模式。
    ///</param>
    ///  <param name="ignoreCase"><see langword="true" />
    ///  若要使用不区分大小写匹配;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="global"><see langword="true" />
    ///  若要使用全局匹配项，则否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="multiline"><see langword="true" />
    ///  若要使用多行匹配项，则否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  字符串表示形式的正则表达式的信息。
    ///</returns>
    function RegexpToString(source: string; ignoreCase: Boolean; global: Boolean; multiline: Boolean): string;
    ///<summary>
    ///  一个类中实现时，将指定 <see cref="T:System.String" />
    ///  到 <see cref="T:System.String" />
    ///  包含不可打印的字符的转义符。
    ///</summary>
    ///  <param name="source">
    ///  要转换的值。
    ///</param>
    ///<returns>
    ///  字符串表示形式 <paramref name="source" />
    ///  包含转义字符。
    ///</returns>
    function StringToPrintable(source: string): string;
    ///<summary>
    ///  一个类中实现时，创建具有指定的基元值的托管的对象。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns><paramref name="value" />
    ///  转换为托管 <see cref="T:System.Object" />
    ///  。
    ///</returns>
    function GetManagedObject(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    ///<summary>
    ///  一个类中实现时，创建具有指定的基元一个托管的对象 <see cref="T:System.Int64" />
    ///  值。
    ///</summary>
    ///  <param name="i">
    ///  要转换的值。
    ///</param>
    ///<returns><paramref name="i" />
    ///  转换为 <see cref="T:System.Object" />
    ///  。
    ///</returns>
    function GetManagedInt64Object(i: Int64): DDN.mscorlib.DNObject;
    ///<summary>
    ///  一个类中实现时，创建具有指定的基元一个托管的对象 <see cref="T:System.UInt64" />
    ///  值。
    ///</summary>
    ///  <param name="i">
    ///  要转换的值。
    ///</param>
    ///<returns><paramref name="i" />
    ///  转换为 <see cref="T:System.Object" />
    ///  。
    ///</returns>
    function GetManagedUInt64Object(i: UInt64): DDN.mscorlib.DNObject;
    ///<summary>
    ///  一个类中实现时，创建具有指定的基元一个托管的对象 <see cref="T:System.Char" />
    ///  值。
    ///</summary>
    ///  <param name="i">
    ///  要转换的值。
    ///</param>
    ///<returns><paramref name="i" />
    ///  转换为 <see cref="T:System.Char" />
    ///  然后 <see cref="T:System.Object" />
    ///  。
    ///</returns>
    function GetManagedCharObject(i: UInt16): DDN.mscorlib.DNObject;
    ///<summary>
    ///  获取错误消息，它是一个类中实现时，创建从指定 <see cref="P:System.Exception.HResult" />
    ///  和 <see cref="T:System.Globalization.CultureInfo" />
    ///  指定 <see cref="T:Microsoft.JScript.Vsa.IJSVsaEngine" />
    ///  。
    ///</summary>
    ///  <param name="hr">
    ///  HRESULT 错误代码。
    ///</param>
    ///  <param name="engine">
    ///  对脚本引擎的引用。
    ///</param>
    ///<returns>
    ///  包含有关错误的信息的本地化的字符串。
    ///</returns>
    function GetErrorMessageForHR(hr: Int32; engine: DNIJSVsaEngine): string;

  end;

  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  定义用于将数据从一种类型转换为另一个实用程序方法。
  ///  包含方法将值转换为 <see cref="T:System.String" />
  ///  对象，以便它们可以显示由调试器。
  ///</summary>
  [DNTypeName('Microsoft.JScript.IDebugConvert2')]
  DNIDebugConvert2 = interface(DDN.mscorlib.DNObject)
  ['{B370D709-72BD-4696-9825-C4EBADBF98CB}']
  { methods } 

    ///<summary>
    ///  一个类中实现时，将指定 <see cref="T:System.Decimal" />
    ///  值赋给 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns><paramref name="value" />
    ///  的字符串表示形式。
    ///</returns>
    function DecimalToString(value: DDN.mscorlib.DNDecimal): string;

  end;

  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  定义提供有关调试器对象信息的方法。
  ///  此接口实现由所有 <see cref="T:System.Reflection.IReflect" />
  ///  由调试器实现的对象。
  ///  目前，此接口可用于仅用于标记这些对象在这种对脚本引擎。
  ///</summary>
  [DNTypeName('Microsoft.JScript.IDebuggerObject')]
  DNIDebuggerObject = interface(DDN.mscorlib.DNObject)
  ['{8E93D770-6168-4B68-B896-A71B74C7076A}']
  { methods } 

    ///<summary>
    ///  一个类中实现时，确定当前对象是真正的 COM 对象或一个托管对象的代理。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果当前对象是 COM 对象; <see langword="false" />
    ///  如果当前对象的托管对象的代理。
    ///</returns>
    function IsCOMObject: Boolean;
    ///<summary>
    ///  一个类中实现时，确定当前对象是否等于指定的对象。
    ///</summary>
    ///  <param name="o">
    ///  要测试相等的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  表示当前对象是否相同 <paramref name="o" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsEqual(o: DNIDebuggerObject): Boolean;
    ///<summary>
    ///  类中实现时，确定当前对象是否具有具有指定的名称，并且这是可枚举的成员。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员名称。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果当前对象具有名为的可枚举成员<paramref name="name" />
    ///  ; 否则为<see langword="false" />
    ///  。
    ///</returns>
    function HasEnumerableMember(name: string): Boolean;
    ///<summary>
    ///  一个类中实现时，确定当前对象是否为托管的 JScript 函数的代理。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果当前对象是托管的 JScript 函数; 的代理否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsScriptFunction: Boolean;
    ///<summary>
    ///  一个类中实现时，确定当前对象是否为托管的 JScript 对象的代理。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果当前对象的代理托管的 JScript 对象;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsScriptObject: Boolean;

  end;

  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  定义设置的方法 <see langword="this" />
  ///  具有全局作用域相关联的值。
  ///  使用 <see cref="T:Microsoft.JScript.Vsa.VsaEngine" />
  ///  。
  ///</summary>
  [DNTypeName('Microsoft.JScript.IDebugScriptScope')]
  DNIDebugScriptScope = interface(DDN.mscorlib.DNObject)
  ['{59447635-3E26-4873-BF26-05F173B80F5E}']
  { methods } 

    ///<summary>
    ///  一个类中实现时，设置 <see langword="this" />
    ///  具有全局作用域相关联的值。
    ///</summary>
    ///  <param name="thisValue">
    ///  该值将用作 <see langword="this" />
    ///  全局作用域的对象。
    ///</param>
    procedure SetThisValue(thisValue: DDN.mscorlib.DNObject);

  end;

  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  定义提供有关调试器对象信息的方法。
  ///  此接口由调试器对象，后者表示调试器目标中的类型实现。
  ///</summary>
  [DNTypeName('Microsoft.JScript.IDebugType')]
  DNIDebugType = interface(DDN.mscorlib.DNObject)
  ['{613CC05D-05F4-4969-B369-5AEEF56E32D0}']
  { methods } 

    ///<summary>
    ///  类中实现时，确定指定的对象是否是当前类型的实例。
    ///</summary>
    ///  <param name="o">
    ///  要测试的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果<paramref name="o" />
    ///  是当前类型的实例; 否则为<see langword="false" />
    ///  。
    ///</returns>
    function HasInstance(o: DDN.mscorlib.DNObject): Boolean;

  end;

  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  定义对表达式求值和分析字符串的方法。
  ///  由一个对象，表示代码块中，通常实现此接口，它通常由调试器调用。
  ///  此接口提供由 IActiveScript 主机所需的额外功能。
  ///</summary>
  [DNTypeName('Microsoft.JScript.IDebugVsaScriptCodeItem')]
  DNIDebugVsaScriptCodeItem = interface(DDN.mscorlib.DNObject)
  ['{6DFE759A-CB8B-4CA0-A973-1D04E0BF0B53}']
  { methods } 

    ///<summary>
    ///  一个类中实现时，计算块、 表达式或代码项目所表示的语句并返回的值。
    ///  它通常会调用由调试器计算的表达式 （在监视窗口中，例如） 所需。
    ///  对于表达式，则这是该表达式的结果。
    ///  对于块和语句中，所得到的表达式是通过代码块或语句的最后一个表达式。
    ///</summary>
    ///<returns>
    ///  返回一个值，表示语句、 表达式或块的计算。
    ///</returns>
    function Evaluate: DDN.mscorlib.DNObject;
    function ParseNamedBreakPoint(input: string; out functionName: string; out nargs: Int32; out arguments: string; out returnType: string; out offset: UInt64): Boolean;

  end;

  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  定义所需的活动脚本宿主的额外功能。
  ///</summary>
  [DNTypeName('Microsoft.JScript.IDefineEvent')]
  DNIDefineEvent = interface(DDN.mscorlib.DNObject)
  ['{D1A19408-BB6B-43EB-BB6F-E7CF6AF047D7}']
  { methods } 

    ///<summary>
    ///  由活动脚本宿主用于定义事件。
    ///</summary>
    ///  <param name="code">
    ///  包含事件的代码。
    ///</param>
    ///  <param name="startLine">
    ///  此代码开始所在行号。
    ///</param>
    ///<returns>
    ///  该事件，如果它已成功添加。
    ///</returns>
    function AddEvent(code: string; startLine: Int32): DDN.mscorlib.DNObject;

  end;

  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  定义由 IActiveScript 主机所需的额外功能。
  ///  实现的 <see cref="T:Microsoft.JScript.Vsa.VsaEngine" />
  ///  引擎。
  ///</summary>
  [DNTypeName('Microsoft.JScript.IEngine2')]
  DNIEngine2 = interface(DDN.mscorlib.DNObject)
  ['{BFF6C97F-0705-4394-88B8-A03A4B8B4CD7}']
  { methods } 

    ///<summary>
    ///  一个类中实现时，获取编译的程序集生成的编译步骤。
    ///</summary>
    ///<returns>
    ///  编译的程序集。
    ///</returns>
    function GetAssembly: DDN.mscorlib.DNAssembly;
    ///<summary>
    ///  一个类中实现时，指定的应用程序域中运行的已编译的代码。
    ///  这是未实现在 JScript 中因为托管的引擎不支持用户提供应用程序域中运行的代码。
    ///</summary>
    ///  <param name="domain">
    ///  在其上运行的已编译的代码的应用程序域。
    ///</param>
    procedure Run(domain: DDN.mscorlib.DNAppDomain);
    ///<summary>
    ///  当类中实现，就会触发编译的当前在引擎中的所有状态。
    ///  所有引用、 代码项、 主机项和资源都将通过编译器执行。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果编译成功，否则， <see langword="false" />
    ///  。
    ///</returns>
    function CompileEmpty: Boolean;
    ///<summary>
    ///  一个类中实现时，在当前运行的已编译的代码 <see cref="T:System.AppDomain" />
    ///  。
    ///</summary>
    procedure RunEmpty;
    ///<summary>
    ///  一个类中实现时，指示引擎解除挂钩事件处理程序从事件源。
    ///  这不是在 JScript 中实现的。
    ///</summary>
    procedure DisconnectEvents;
    ///<summary>
    ///  类中实现时，应该通知引擎，它可以连接具有事件写入任何全局事件处理程序的任何已注册的事件源。
    ///  这不是在 JScript 中实现的。
    ///</summary>
    procedure ConnectEvents;
    ///<summary>
    ///  一个类中实现时，作为事件源，指定为标记的项的名称，以便 <see cref="M:Microsoft.JScript.IEngine2.ConnectEvents" />
    ///  方法可以确定要连接的事件。
    ///  这不是在 JScript 中实现的。
    ///</summary>
    ///  <param name="name">
    ///  提供事件的添加项的名称。
    ///</param>
    procedure RegisterEventSource(name: string);
    ///<summary>
    ///  一个类中实现时，调用 <see cref="M:System.Threading.Thread.Abort" />
    ///  正在运行的脚本代码的线程上。
    ///</summary>
    procedure Interrupt;
    ///<summary>
    ///  一个类中实现时，初始化 <see cref="T:Microsoft.JScript.Vsa.VsaEngine" />
    ///  。
    ///</summary>
    ///  <param name="rootMoniker">
    ///  脚本引擎的根名字对象。
    ///  有关详细信息，请参阅<see cref="P:Microsoft.Vsa.IVsaEngine.RootMoniker" />
    ///  。
    ///</param>
    ///  <param name="site">
    ///  由宿主实现 <see cref="T:Microsoft.Vsa.IVsaSite" />
    ///  脚本引擎用于与主机通信的对象。
    ///  有关详细信息，请参阅<see cref="P:Microsoft.Vsa.IVsaEngine.Site" />
    ///  。
    ///</param>
    procedure InitVsaEngine(rootMoniker: string; site: DNIJSVsaSite);
    ///<summary>
    ///  一个类中实现时，获取全局作用域对象。
    ///</summary>
    ///<returns>
    ///  全局作用域对象中。
    ///</returns>
    function GetGlobalScope: DNIVsaScriptScope;
    ///<summary>
    ///  一个类中实现时，从编译的程序集获取的代码模块。
    ///</summary>
    ///<returns>
    ///  从编译的程序集代码模块。
    ///</returns>
    function GetModule: DDN.mscorlib.DNModule;
    ///<summary>
    ///  类中实现时，创建一个新的相同引擎，具有相同的编译的状态和已命名的项的新的应用程序域中运行。
    ///  这不是在 JScript 中实现的。
    ///</summary>
    ///  <param name="domain">
    ///  要在其中创建新的引擎应用程序域。
    ///</param>
    ///<returns>
    ///  新的引擎。
    ///</returns>
    function Clone(domain: DDN.mscorlib.DNAppDomain): DNIJSVsaEngine;
    ///<summary>
    ///  一个类中实现时，在其引擎重置为干净状态在计算一个新的表达式之前由调试器调用此方法。
    ///  该方法将返回到其原始状态重置添加的项和全局作用域。
    ///</summary>
    procedure Restart;

  end;

  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  定义用于处理在分析代码时出现的错误的方法。
  ///</summary>
  [DNTypeName('Microsoft.JScript.IErrorHandler')]
  DNIErrorHandler = interface(DDN.mscorlib.DNObject)
  ['{E93D012C-56BB-4F32-864F-7C75EDA17B14}']
  { methods } 

    ///<summary>
    ///  一个类中实现时，确定如何处理发生在分析代码时的错误。
    ///</summary>
    ///  <param name="error">
    ///  包含有关错误的信息的对象。
    ///</param>
    ///<returns><see langword="false" />
    ///  若要处理错误; <see langword="true" />
    ///  忽略错误并继续进行分析。
    ///</returns>
    function OnCompilerError(error: DNIVsaFullErrorInfo): Boolean;

  end;

  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  定义从脚本引擎接收输出的方法。
  ///  此接口作为回调对象，用于捕获的输出，否则会转到控制台。
  ///</summary>
  [DNTypeName('Microsoft.JScript.IMessageReceiver')]
  DNIMessageReceiver = interface(DDN.mscorlib.DNObject)
  ['{F062C7FB-53BF-4F0D-B0F6-D66C5948E63F}']
  { methods } 

    ///<summary>
    ///  一个类中实现时，捕获指定的输出。
    ///</summary>
    ///  <param name="strValue">
    ///  要捕获的输出。
    ///</param>
    procedure Message(strValue: string);

  end;

  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  这是一种标记接口，没有任何方法。
  ///</summary>
  [DNTypeName('Microsoft.JScript.IMethodsCompletionInfo')]
  DNIMethodsCompletionInfo = interface(DDN.mscorlib.DNObject)
  ['{E0BCF37B-1C24-451C-AC43-40FF86839117}']
  end;

  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  定义 get 和 set 对脚本引擎的引用的方法。
  ///</summary>
  [DNTypeName('Microsoft.JScript.INeedEngine')]
  DNINeedEngine = interface(DDN.mscorlib.DNObject)
  ['{417C17B7-8FE8-3830-B6AE-41BB355B4FD3}']
  { methods } 

    ///<summary>
    ///  一个类中实现时，获取对脚本引擎的引用。
    ///</summary>
    ///<returns>
    ///  对脚本引擎的引用。
    ///</returns>
    function GetEngine: DNVsaEngine;
    ///<summary>
    ///  一个类中实现时，设置对脚本引擎的引用。
    ///</summary>
    ///  <param name="engine">
    ///  对脚本引擎的引用。
    ///</param>
    procedure SetEngine(engine: DNVsaEngine);

  end;

  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  这是一种标记接口，没有任何方法。
  ///</summary>
  [DNTypeName('Microsoft.JScript.IObjectCompletionInfo')]
  DNIObjectCompletionInfo = interface(DDN.mscorlib.DNObject)
  ['{052019B5-704B-4B99-AEF8-25A11A922B2E}']
  end;

  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  定义用于分析的文本在编辑器中创作 JScript 代码时的方法。
  ///</summary>
  [DNTypeName('Microsoft.JScript.IParseText')]
  DNIParseText = interface(DDN.mscorlib.DNObject)
  ['{C1468187-3DA1-49DF-ADF8-5F8600E59EA8}']
  { methods } 

    ///<summary>
    ///  一个类中实现时，将会分析指定的源代码。
    ///</summary>
    ///  <param name="code">
    ///  要分析的源代码。
    ///</param>
    ///  <param name="error">
    ///  一个对象，包含有关发生的错误的信息时 <paramref name="code" />
    ///  正在分析。
    ///</param>
    procedure Parse(code: string; error: DNIErrorHandler);

  end;

  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  否则会转到控制台该捕获输出定义的方法。
  ///  此接口由实现 <see cref="T:Microsoft.JScript.Vsa.VsaEngine" />
  ///  。
  ///</summary>
  [DNTypeName('Microsoft.JScript.IRedirectOutput')]
  DNIRedirectOutput = interface(DDN.mscorlib.DNObject)
  ['{5B807FA1-00CD-46EE-A493-FD80AC944715}']
  { methods } 

    ///<summary>
    ///  一个类中实现时，将指定的输出流重定向到新的流或数据存储。
    ///</summary>
    ///  <param name="output">
    ///  要重定向的输出。
    ///</param>
    procedure SetOutputStream(output: DNIMessageReceiver);

  end;

  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  定义使用的方法， <see cref="T:Microsoft.JScript.Vsa.VsaEngine" />
  ///  来进行名称解析。
  ///  提供程序 IActiveScript 宿主所需的额外功能。
  ///</summary>
  [DNTypeName('Microsoft.JScript.ISite2')]
  DNISite2 = interface(DDN.mscorlib.DNObject)
  ['{BFF6C980-0705-4394-88B8-A03A4B8B4CD7}']
  { methods } 

    ///<summary>
    ///  一个类中实现时，获取父对象层次结构中指定的对象。
    ///</summary>
    ///  <param name="obj"><see cref="T:System.Reflection.IReflect" />
    ///  要获取的父层次结构对象。
    ///</param>
    ///<returns>
    ///  包含的父对象的数组 <paramref name="obj" />
    ///  。
    ///</returns>
    function GetParentChain(obj: DDN.mscorlib.DNObject): TArray<DDN.mscorlib.DNObject>;

  end;

  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  定义用于着色的代码的特定单元属性。
  ///</summary>
  [DNTypeName('Microsoft.JScript.ITokenColorInfo')]
  DNITokenColorInfo = interface(DDN.mscorlib.DNObject)
  ['{0F20D5C8-CBDB-4B64-AB7F-10B158407323}']
  { getters & setters } 

    function get_StartPosition: Int32;
    function get_EndPosition: Int32;
    function get_Color: DNTokenColor;

  { propertys } 

    ///<summary>
    ///  一个类中实现时，获取代码单元的开始处的位置。
    ///</summary>
    ///<returns>
    ///  其中的代码的单元开始的位置。
    ///</returns>
    property StartPosition: Int32 read get_StartPosition;
    ///<summary>
    ///  一个类中实现时，获取代码单元的结尾处的位置。
    ///</summary>
    ///<returns>
    ///  代码单元的结束位置。
    ///</returns>
    property EndPosition: Int32 read get_EndPosition;
    ///<summary>
    ///  类中实现时，获取用于显示的代码单元的颜色。
    ///</summary>
    ///<returns>
    ///  应该用于显示的代码单元的颜色。
    ///</returns>
    property Color: DNTokenColor read get_Color;
  end;

  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  定义用于循环访问集合的方法 <see cref="T:Microsoft.JScript.ITokenColorInfo" />
  ///  对象。
  ///</summary>
  [DNTypeName('Microsoft.JScript.ITokenEnumerator')]
  DNITokenEnumerator = interface(DDN.mscorlib.DNObject)
  ['{556BA9E0-BD6A-4837-89F0-C79B14759181}']
  { methods } 

    ///<summary>
    ///  一个类中实现时，返回的集合中的下一项 <see cref="T:Microsoft.JScript.ITokenColorInfo" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  集合中的下一个项。
    ///</returns>
    function GetNext: DNITokenColorInfo;
    ///<summary>
    ///  一个类中实现时，将枚举数设置为集合中的第一项之前其初始位置 <see cref="T:Microsoft.JScript.ITokenColorInfo" />
    ///  对象。
    ///</summary>
    procedure Reset;

  end;

  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  定义用于访问的成员定义的对象的方法。
  ///</summary>
  [DNTypeName('Microsoft.JScript.IWrappedMember')]
  DNIWrappedMember = interface(DDN.mscorlib.DNObject)
  ['{AB38C29A-014A-36C6-9C6E-CCF3ABA6D041}']
  { methods } 

    ///<summary>
    ///  一个类中实现时，返回的成员定义的对象。
    ///</summary>
    ///<returns>
    ///  成员定义的对象。
    ///</returns>
    function GetWrappedObject: DDN.mscorlib.DNObject;

  end;

  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  定义外部 COM 对象必须实现的方法。
  ///  外部 COM 实现使用此接口来公开其对象与 JScript，因为 JScript 需要托管 <see cref="T:System.Reflection.MemberInfo" />
  ///  要绑定到外部对象。
  ///  此接口由实现 <see cref="T:Microsoft.JScript.COMFieldInfo" />
  ///  , ，<see cref="T:Microsoft.JScript.COMMethodInfo" />
  ///  , ，和 <see cref="T:Microsoft.JScript.COMPropertyInfo" />
  ///  。
  ///</summary>
  [DNTypeName('Microsoft.JScript.MemberInfoInitializer')]
  DNMemberInfoInitializer = interface(DDN.mscorlib.DNObject)
  ['{98A3BF0A-1B56-4F32-ACE0-594FEB27EC48}']
  { methods } 

    ///<summary>
    ///  一个类中实现时，初始化使 JScript 与指定的外部 COM 成员进行通信的信息。
    ///</summary>
    ///  <param name="name">
    ///  外部 COM 成员的名称。
    ///</param>
    ///  <param name="dispatch">
    ///  使 JScript 能够调用时，信息获取，并设置外部 COM 成员。
    ///</param>
    procedure Initialize(name: string; dispatch: DNCOMMemberInfo);
    ///<summary>
    ///  一个类中实现时，获取支持 JScript 与外部 COM 成员进行通信的托管的对象。
    ///</summary>
    ///<returns>
    ///  支持 JScript 与外部 COM 成员进行通信的托管的对象。
    ///</returns>
    function GetCOMMemberInfo: DNCOMMemberInfo;

  end;

  //-------------namespace: Microsoft.JScript.Vsa----------------
  ///<summary>
  ///  定义脚本引擎必须支持的方法和属性，并提供对脚本引擎的编程访问。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Vsa.IJSVsaEngine')]
  DNIJSVsaEngine = interface(DDN.mscorlib.DNObject)
  ['{8FA2C97B-47E4-4A31-A7F5-FF39D1195CD9}']
  { getters & setters } 

    function get_Site: DNIJSVsaSite;
    procedure set_Site(value: DNIJSVsaSite);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RootMoniker: string;
    procedure set_RootMoniker(value: string);
    function get_RootNamespace: string;
    procedure set_RootNamespace(value: string);
    function get_LCID: Int32;
    procedure set_LCID(value: Int32);
    function get_GenerateDebugInfo: Boolean;
    procedure set_GenerateDebugInfo(value: Boolean);
    function get_Evidence: DDN.mscorlib.DNEvidence;
    procedure set_Evidence(value: DDN.mscorlib.DNEvidence);
    function get_Items: DNIJSVsaItems;
    function get_IsDirty: Boolean;
    function get_Language: string;
    function get_Version: string;
    function get_IsRunning: Boolean;
    function get_IsCompiled: Boolean;
    function get_Assembly: DDN.mscorlib.DNAssembly;

  { methods } 

    ///<summary>
    ///  获取引擎特定于实现的选项。
    ///</summary>
    ///  <param name="name">
    ///  要获取的选项的名称。
    ///</param>
    ///<returns>
    ///  选项的值。
    ///</returns>
    function GetOption(name: string): DDN.mscorlib.DNObject;
    ///<summary>
    ///  设置脚本引擎特定于实现的选项。
    ///</summary>
    ///  <param name="name">
    ///  要设置的选项的名称。
    ///</param>
    ///  <param name="value">
    ///  所设置的选项的值。
    ///</param>
    procedure SetOption(name: string; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  将使引擎编译现有的源状态。
    ///</summary>
    ///<returns><see langword="true" />
    ///  在成功编译;否则为<see langword="false" />
    ///  。
    ///</returns>
    function Compile: Boolean;
    ///<summary>
    ///  启动脚本引擎中已编译代码的执行，并绑定所有事件处理程序。
    ///</summary>
    procedure Run;
    ///<summary>
    ///  从运行状态中移除脚本引擎，并自动断开与绑定事件处理程序的连接。
    ///</summary>
    procedure Reset;
    ///<summary>
    ///  关闭该引擎。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  使无效的引擎，其根名字对象由指定的缓存程序集。
    ///</summary>
    procedure RevokeCache;
    ///<summary>
    ///  指示脚本引擎来持久保存其源状态。
    ///</summary>
    ///  <param name="site">
    ///  状态保存到数据集的源站点。
    ///</param>
    procedure SaveSourceState(site: DNIJSVsaPersistSite);
    ///<summary>
    ///  指示引擎从持久性提供主机的对象由指定点加载源项。
    ///</summary>
    ///  <param name="site">
    ///  从中加载指定源项的站点。
    ///</param>
    procedure LoadSourceState(site: DNIJSVsaPersistSite);
    procedure SaveCompiledState(out pe: TArray<Byte>; out pdb: TArray<Byte>);
    ///<summary>
    ///  提供初始化阶段已完成的通知。
    ///</summary>
    procedure InitNew;
    ///<summary>
    ///  检查提供的标识符是否对引擎有效。
    ///</summary>
    ///  <param name="identifier">
    ///  作为标识符提供的字符串值。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果标识符有效，则为否则，它将返回 <see langword="false" />
    ///  。
    ///</returns>
    function IsValidIdentifier(identifier: string): Boolean;

  { propertys } 

    ///<summary>
    ///  设置或获取脚本引擎用于与主机通信的主机实现 IJSVsaSite 对象。
    ///</summary>
    ///<returns>
    ///  宿主实现的对象。
    ///</returns>
    property Site: DNIJSVsaSite read get_Site write set_Site;
    ///<summary>
    ///  设置或获取脚本引擎的显示名称。
    ///</summary>
    ///<returns>
    ///  引擎的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  设置或获取脚本引擎的根名字对象。
    ///</summary>
    ///<returns>
    ///  引擎的根名字对象。
    ///</returns>
    property RootMoniker: string read get_RootMoniker write set_RootMoniker;
    ///<summary>
    ///  设置或获取脚本引擎使用的根命名空间。
    ///</summary>
    ///<returns>
    ///  引擎的命名空间。
    ///</returns>
    property RootNamespace: string read get_RootNamespace write set_RootNamespace;
    ///<summary>
    ///  获取或设置在报告异常消息时所使用的地理区域设置和语言。
    ///</summary>
    ///<returns>
    ///  一个整数值表示内的异常的消息都要报告的区域设置。
    ///</returns>
    property LCID: Int32 read get_LCID write set_LCID;
    ///<summary>
    ///  设置或获取一个布尔值，表示调用编译方法时，脚本引擎是否生成调试信息。
    ///</summary>
    ///<returns><see langword="true" />
    ///  生成调试信息;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property GenerateDebugInfo: Boolean read get_GenerateDebugInfo write set_GenerateDebugInfo;
    ///<summary>
    ///  提供用于验证当前对象的标识的证据。
    ///</summary>
    ///<returns>
    ///  返回对 Evidence 对象的引用。
    ///</returns>
    property Evidence: DDN.mscorlib.DNEvidence read get_Evidence write set_Evidence;
    ///<summary>
    ///  获取 IJSVsaItem 对象，它表示添加到脚本引擎的所有项的集合。
    ///</summary>
    ///<returns>
    ///  项的集合。
    ///</returns>
    property Items: DNIJSVsaItems read get_Items;
    ///<summary>
    ///  获取或设置一个值，该值指示该项的当前内存中表示是否从保留的表示形式不同。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果内存中表示不同于保留的表示形式;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsDirty: Boolean read get_IsDirty;
    ///<summary>
    ///  获取脚本引擎支持的编程语言的名称。
    ///</summary>
    ///<returns>
    ///  编程语言的名称。
    ///</returns>
    property Language: string read get_Language;
    ///<summary>
    ///  获取脚本引擎支持的语言编译器的当前版本，以 Major.Minor.Revision.Build 形式表示。
    ///</summary>
    ///<returns>
    ///  最新版本。
    ///</returns>
    property Version: string read get_Version;
    ///<summary>
    ///  获取一个布尔值，该值报告脚本引擎当前是否处于运行模式。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果引擎处于运行模式下;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsRunning: Boolean read get_IsRunning;
    ///<summary>
    ///  获取或设置一个值，指示源是否被编译。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果源被编译;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsCompiled: Boolean read get_IsCompiled;
    ///<summary>
    ///  获取对运行方法生成的正在运行的程序集的引用。
    ///</summary>
    ///<returns>
    ///  对当前正在运行的程序集的引用。
    ///</returns>
    property Assembly: DDN.mscorlib.DNAssembly read get_Assembly;
  end;

  //-------------namespace: Microsoft.JScript.Vsa----------------
  ///<summary>
  ///  提供在执行过程中遇到的编译错误的访问。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Vsa.IJSVsaError')]
  DNIJSVsaError = interface(DDN.mscorlib.DNObject)
  ['{425EA439-6417-4F3E-BCC9-1AFAC79E3F66}']
  { getters & setters } 

    function get_Line: Int32;
    function get_Severity: Int32;
    function get_Description: string;
    function get_LineText: string;
    function get_SourceItem: DNIJSVsaItem;
    function get_EndColumn: Int32;
    function get_StartColumn: Int32;
    function get_Number: Int32;
    function get_SourceMoniker: string;

  { propertys } 

    ///<summary>
    ///  获取发生错误的行号。
    ///</summary>
    ///<returns>
    ///  返回发生错误的行号。
    ///</returns>
    property Line: Int32 read get_Line;
    ///<summary>
    ///  设置错误严重级别。
    ///</summary>
    ///<returns>
    ///  返回表示错误严重级别的整数 (0-4)。
    ///</returns>
    property Severity: Int32 read get_Severity;
    ///<summary>
    ///  获取对错误的简短说明，在某些情况下会返回对源代码中引起错误的标记的引用。
    ///</summary>
    ///<returns>
    ///  返回错误的字符串说明。
    ///</returns>
    property Description: string read get_Description;
    ///<summary>
    ///  从引起错误的行获取源代码文本。
    ///</summary>
    ///<returns>
    ///  从引起错误的行返回字符串源代码。
    ///</returns>
    property LineText: string read get_LineText;
    ///<summary>
    ///  获取对 IVsaItem 生成错误的对象。
    ///</summary>
    ///<returns>
    ///  返回对生成错误的对象的引用。
    ///</returns>
    property SourceItem: DNIJSVsaItem read get_SourceItem;
    ///<summary>
    ///  获取引发错误的源文本的结束列号（如果可用）。
    ///</summary>
    ///<returns>
    ///  返回引发错误的源文本的结束列号（如果可用）。
    ///</returns>
    property EndColumn: Int32 read get_EndColumn;
    ///<summary>
    ///  获取引发错误的源文本的起始列号（如果可用）。
    ///</summary>
    ///<returns>
    ///  返回引发错误的源文本的起始列号（如果可用）。
    ///</returns>
    property StartColumn: Int32 read get_StartColumn;
    ///<summary>
    ///  获取唯一标识错误的编号。
    ///</summary>
    ///<returns>
    ///  返回唯一标识错误的编号。
    ///</returns>
    property Number: Int32 read get_Number;
    ///<summary>
    ///  获取包含错误的源项的完全限定名，采用脚本引擎可以识别的格式。
    ///</summary>
    ///<returns>
    ///  返回包含错误的源项的完全限定名。
    ///</returns>
    property SourceMoniker: string read get_SourceMoniker;
  end;

  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  定义属性以获取有关错误的信息。
  ///  此接口提供由 IActiveScript 主机所需的额外功能。
  ///</summary>
  [DNTypeName('Microsoft.JScript.IVsaFullErrorInfo')]
  DNIVsaFullErrorInfo = interface(DNIJSVsaError)
  ['{DC3691BC-F188-4B67-8338-326671E0F3F6}']
  { getters & setters } 

    function get_EndLine: Int32;

  { propertys } 

    ///<summary>
    ///  一个类中实现时，获取的代码时出错的结束行。
    ///</summary>
    ///<returns>
    ///  出现错误代码的结束行。
    ///</returns>
    property EndLine: Int32 read get_EndLine;
  end;

  //-------------namespace: Microsoft.JScript.Vsa----------------
  ///<summary>
  ///  为所有添加到 .NET 脚本引擎的项定义一个接口，包括代码项、引用项和全局项。
  ///  它定义应用于该引擎识别的所有项类型的泛型属性和方法。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Vsa.IJSVsaItem')]
  DNIJSVsaItem = interface(DDN.mscorlib.DNObject)
  ['{1F2377AC-8A09-417B-89DC-D146769F0B45}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_ItemType: DNJSVsaItemType;
    function get_IsDirty: Boolean;

  { methods } 

    ///<summary>
    ///  获取脚本引擎实现特定的选项。
    ///</summary>
    ///  <param name="name">
    ///  要检索的选项的名称。
    ///</param>
    ///<returns>
    ///  返回指定选项的值。
    ///</returns>
    function GetOption(name: string): DDN.mscorlib.DNObject;
    ///<summary>
    ///  设置脚本引擎特定于实现的选项。
    ///</summary>
    ///  <param name="name">
    ///  要设置的选项的名称。
    ///</param>
    ///  <param name="value">
    ///  选项的新值。
    ///</param>
    procedure SetOption(name: string; value: DDN.mscorlib.DNObject);

  { propertys } 

    ///<summary>
    ///  获取或设置项的名称。
    ///</summary>
    ///<returns>
    ///  返回项的字符串名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取指定对象的类型（如 <see cref="M:Microsoft.JScript.Vsa.IJSVsaItems.CreateItem(System.String,Microsoft.JScript.Vsa.JSVsaItemType,Microsoft.JScript.Vsa.JSVsaItemFlag)" />
    ///  方法所确定的那样）。
    ///</summary>
    ///<returns><see cref="T:Microsoft.JScript.Vsa.JSVsaItemType" />
    ///  枚举所枚举的类型。
    ///</returns>
    property ItemType: DNJSVsaItemType read get_ItemType;
    ///<summary>
    ///  返回一个值，它指示该项的当前内存中表示形式是否与保留的表示形式不同。
    ///</summary>
    ///<returns>
    ///  如果该项已更新并因而需要保存，则返回 <see langword="true" />
    ///  ；如果该项未更新，则返回 <see langword="false" />
    ///  。
    ///</returns>
    property IsDirty: Boolean read get_IsDirty;
  end;

  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  定义用于解析范围的方法。
  ///  全局作用域对象 <see cref="T:Microsoft.JScript.Vsa.VsaEngine" />
  ///  实现此接口。
  ///</summary>
  [DNTypeName('Microsoft.JScript.IVsaScriptScope')]
  DNIVsaScriptScope = interface(DNIJSVsaItem)
  ['{ED4BAE22-2F3C-419A-B487-CF869E716B95}']
  { getters & setters } 

    function get_Parent: DNIVsaScriptScope;

  { methods } 

    ///<summary>
    ///  类中实现时，将项添加到作用域。
    ///</summary>
    ///  <param name="itemName">
    ///  项的名称。
    ///</param>
    ///  <param name="type">
    ///  枚举值之一。
    ///  指定要添加的项的类型。
    ///</param>
    ///<returns>
    ///  新的项中，如果成功添加。
    ///</returns>
    function AddItem(itemName: string; &type: DNJSVsaItemType): DNIJSVsaItem;
    ///<summary>
    ///  一个类中实现时，从指定的名称由指定的作用域中获取的项。
    ///</summary>
    ///  <param name="itemName">
    ///  要获取的项的名称。
    ///</param>
    ///<returns>
    ///  项名为 <paramref name="itemName" />
    ///  。
    ///</returns>
    function GetItem(itemName: string): DNIJSVsaItem;
    ///<summary>
    ///  一个类中实现时，移除由指定的名称范围从指定的项。
    ///</summary>
    ///  <param name="itemName">
    ///  要移除的项的名称。
    ///</param>
    procedure RemoveItem(itemName: string); overload;
    ///<summary>
    ///  一个类中实现时中, 移除指定 <see cref="T:Microsoft.JScript.Vsa.IJSVsaItem" />
    ///  从作用域的对象。
    ///</summary>
    ///  <param name="item">
    ///  要移除的项。
    ///</param>
    procedure RemoveItem(item: DNIJSVsaItem); overload;
    ///<summary>
    ///  一个类中实现时，获取范围内的项的数目。
    ///</summary>
    ///<returns>
    ///  作用域中的项的数目。
    ///</returns>
    function GetItemCount: Int32;
    ///<summary>
    ///  一个类中实现时，从指定的索引值指定的作用域中获取的项。
    ///</summary>
    ///  <param name="index">
    ///  要获取的项的索引。
    ///</param>
    ///<returns>
    ///  处的项 <paramref name="index" />
    ///  。
    ///</returns>
    function GetItemAtIndex(index: Int32): DNIJSVsaItem;
    ///<summary>
    ///  一个类中实现时，移除由指定的索引值的范围中指定的项。
    ///</summary>
    ///  <param name="index">
    ///  要移除的项的索引。
    ///</param>
    procedure RemoveItemAtIndex(index: Int32);
    ///<summary>
    ///  一个类中实现时，获取对全局作用域的引用。
    ///</summary>
    ///<returns>
    ///  对全局作用域的引用。
    ///</returns>
    function GetObject: DDN.mscorlib.DNObject;
    ///<summary>
    ///  类中实现时，将项添加到作用域。
    ///<see cref="T:Microsoft.JScript.Vsa.VsaEngine" />
    ///  必须运行才能使用此方法。
    ///</summary>
    ///  <param name="itemName">
    ///  项的名称。
    ///</param>
    ///  <param name="type">
    ///  枚举值之一。
    ///  指定要添加的项的类型。
    ///</param>
    ///<returns>
    ///  新的项中，如果成功添加。
    ///</returns>
    function CreateDynamicItem(itemName: string; &type: DNJSVsaItemType): DNIJSVsaItem;

  { propertys } 

    ///<summary>
    ///  一个类中实现时，获取对父对象的引用。
    ///</summary>
    ///<returns>
    ///  父作用域。
    ///</returns>
    property Parent: DNIVsaScriptScope read get_Parent;
  end;

  //-------------namespace: Microsoft.JScript.Vsa----------------
  ///<summary>
  ///  表示要通过脚本引擎编译的代码项。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Vsa.IJSVsaCodeItem')]
  DNIJSVsaCodeItem = interface(DNIJSVsaItem)
  ['{528BBC87-CCDC-4F07-B29C-9B10575DEB2F}']
  { getters & setters } 

    function get_SourceText: string;
    procedure set_SourceText(value: string);
    function get_CodeDOM: DDN.System.DNCodeObject;

  { methods } 

    ///<summary>
    ///  将指定的文本追加到代码项尾部。
    ///</summary>
    ///  <param name="text">
    ///  要追加到代码项的文本。
    ///</param>
    procedure AppendSourceText(text: string);
    ///<summary>
    ///  将事件源添加到代码项中。
    ///  代码项通过调用 IVsaSite.GetEventSourceInstance 方法（由宿主实现），使用事件源将事件挂钩到命名事件源。
    ///</summary>
    ///  <param name="eventSourceName">
    ///  事件源的编程名称。
    ///</param>
    ///  <param name="eventSourceType">
    ///  事件源的类型名称。
    ///</param>
    procedure AddEventSource(eventSourceName: string; eventSourceType: string);
    ///<summary>
    ///  从代码项中移除指定的事件源。
    ///</summary>
    ///  <param name="eventSourceName">
    ///  要移除的事件源的编程名称。
    ///</param>
    procedure RemoveEventSource(eventSourceName: string);

  { propertys } 

    ///<summary>
    ///  设置或获取指定的代码项的文本，包括自动生成的代码（如果有）。
    ///</summary>
    ///<returns>
    ///  返回代码项的源文本。
    ///</returns>
    property SourceText: string read get_SourceText write set_SourceText;
    ///<summary>
    ///  获取在代码项中表示的代码文档对象模型 (CodeDOM)。
    ///</summary>
    ///<returns>
    ///  返回代码项的 CodeDOM。
    ///</returns>
    property CodeDOM: DDN.System.DNCodeObject read get_CodeDOM;
  end;

  //-------------namespace: Microsoft.JScript----------------
  ///<summary>
  ///  定义由 IActiveScript 主机所需的额外功能。
  ///</summary>
  [DNTypeName('Microsoft.JScript.IVsaScriptCodeItem')]
  DNIVsaScriptCodeItem = interface(DNIJSVsaCodeItem)
  ['{E0C0FFE8-7EEA-4EE5-B7E4-0080C7EB0B74}']
  { getters & setters } 

    function get_StartLine: Int32;
    procedure set_StartLine(value: Int32);
    function get_StartColumn: Int32;
    procedure set_StartColumn(value: Int32);

  { methods } 

    ///<summary>
    ///  一个类中实现时，将编译并运行此代码。
    ///</summary>
    ///<returns>
    ///  从运行该代码，如果存在任何; 返回的值否则，为 null。
    ///</returns>
    function Execute: DDN.mscorlib.DNObject;

  { propertys } 

    ///<summary>
    ///  一个类中实现时，获取或设置此代码开始所在的行号。
    ///</summary>
    ///<returns>
    ///  此代码的开始位置的行号。
    ///</returns>
    property StartLine: Int32 read get_StartLine write set_StartLine;
    ///<summary>
    ///  一个类中实现时，获取或设置此代码开始所在行中的列号。
    ///</summary>
    ///<returns>
    ///  此代码开始所在的列号。
    ///</returns>
    property StartColumn: Int32 read get_StartColumn write set_StartColumn;
  end;

  //-------------namespace: Microsoft.JScript.Vsa----------------
  ///<summary>
  ///  介绍添加到脚本引擎中的全局对象。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Vsa.IJSVsaGlobalItem')]
  DNIJSVsaGlobalItem = interface(DNIJSVsaItem)
  ['{15B2CCE5-D1EA-4EB9-9E06-8729C72D631B}']
  { getters & setters } 

    procedure set_TypeString(value: string);
    function get_ExposeMembers: Boolean;
    procedure set_ExposeMembers(value: Boolean);

  { propertys } 

    ///<summary>
    ///  获取或设置全局项的类型。
    ///</summary>
    ///<returns>
    ///  返回全局项的项类型。
    ///</returns>
    property TypeString: string write set_TypeString;
    ///<summary>
    ///  设置一个值，该值指示是否应当使全局对象的成员对脚本引擎可用。
    ///  [目前尚不支持。]
    ///</summary>
    ///<returns>
    ///  如果全局对象的公共成员无需限定即可供脚本引擎使用，就如同它们是全局命名空间的一部分，则返回 TRUE。
    ///  如果必须用对象名称限定全局对象的成员，则返回 FALSE。
    ///</returns>
    property ExposeMembers: Boolean read get_ExposeMembers write set_ExposeMembers;
  end;

  //-------------namespace: Microsoft.JScript.Vsa----------------
  ///<summary>
  ///  描述一个添加到脚本引擎的引用。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Vsa.IJSVsaReferenceItem')]
  DNIJSVsaReferenceItem = interface(DNIJSVsaItem)
  ['{8EFD265B-677A-4B09-A471-E086787AA727}']
  { getters & setters } 

    function get_AssemblyName: string;
    procedure set_AssemblyName(value: string);

  { propertys } 

    ///<summary>
    ///  获取或设置被引用程序集的名称。
    ///</summary>
    ///<returns>
    ///  返回被引用程序集的字符串名称。
    ///</returns>
    property AssemblyName: string read get_AssemblyName write set_AssemblyName;
  end;

  //-------------namespace: Microsoft.JScript.Vsa----------------
  ///<summary>
  ///  对项目持久性进行管理，并对使用由宿主实现的保存和加载操作的代码和其他项进行存储和检索。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Vsa.IJSVsaPersistSite')]
  DNIJSVsaPersistSite = interface(DDN.mscorlib.DNObject)
  ['{F901A1FF-8EBA-4C38-B6E0-E7E52606D325}']
  { methods } 

    ///<summary>
    ///  使用给定名称参数保存任意源字符串，然后可在调用 <see cref="M:Microsoft.JScript.Vsa.IJSVsaPersistSite.LoadElement(System.String)" />
    ///  方法时使用以便重载该字符串。
    ///</summary>
    ///  <param name="name">
    ///  要与指定的源项关联的名称。
    ///  保存项目文件时，此名称可以是空引用。
    ///</param>
    ///  <param name="source">
    ///  项的源字符串。
    ///</param>
    procedure SaveElement(name: string; source: string);
    ///<summary>
    ///  获取以前使用 <see cref="M:Microsoft.JScript.Vsa.IJSVsaPersistSite.SaveElement(System.String,System.String)" />
    ///  方法保存的源字符串。
    ///</summary>
    ///  <param name="name">
    ///  要加载的代码项的名称。
    ///  加载项目文件时，此名称可以是空引用。
    ///</param>
    ///<returns>
    ///  返回与名称参数关联的源代码元素的内容。
    ///</returns>
    function LoadElement(name: string): string;

  end;

  //-------------namespace: Microsoft.JScript.Vsa----------------
  ///<summary>
  ///  启用主机与脚本引擎之间的通信。
  ///  该接口由主机实现。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Vsa.IJSVsaSite')]
  DNIJSVsaSite = interface(DDN.mscorlib.DNObject)
  ['{605A62B5-3BA8-49E0-A056-0A6A7A5846A3}']
  { methods } 

    procedure GetCompiledState(out pe: TArray<Byte>; out debugInfo: TArray<Byte>);
    ///<summary>
    ///  通知主机如何对脚本引擎遇到的编译器错误作出响应。
    ///</summary>
    ///  <param name="error">
    ///  表示有害错误的 <see cref="T:Microsoft.JScript.Vsa.IJSVsaError" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  如果指示编译器继续向 <see cref="T:Microsoft.JScript.Vsa.IJSVsaSite" />
    ///  对象报告进一步的错误，则返回 TRUE。
    ///  如果指示编译器停止向 <see langword="IVsaSite" />
    ///  对象报告进一步的错误，则返回 FALSE。
    ///</returns>
    function OnCompilerError(error: DNIJSVsaError): Boolean;
    ///<summary>
    ///  获取对全局项的引用，例如主机提供的应用程序对象。
    ///</summary>
    ///  <param name="name">
    ///  获取对全局项的引用，例如主机提供的应用程序对象。
    ///</param>
    ///<returns>
    ///  返回对全局对象的引用。
    ///</returns>
    function GetGlobalInstance(name: string): DDN.mscorlib.DNObject;
    ///<summary>
    ///  获取对先前使用 <see cref="M:Microsoft.JScript.Vsa.IJSVsaCodeItem.AddEventSource(System.String,System.String)" />
    ///  方法添加到脚本引擎中的事件源的引用。
    ///</summary>
    ///  <param name="itemName">
    ///  指定的项名称。
    ///</param>
    ///  <param name="eventSourceName">
    ///  指定的事件源名称。
    ///</param>
    ///<returns>
    ///  将事件源返回到引擎。
    ///</returns>
    function GetEventSourceInstance(itemName: string; eventSourceName: string): DDN.mscorlib.DNObject;
    ///<summary>
    ///  通知主机有关由 .NET 脚本引擎生成的事件。
    ///</summary>
    ///  <param name="notify">
    ///  通知主机有关由 .NET 脚本引擎生成的事件。
    ///</param>
    ///  <param name="info">
    ///  通知主机有关由 .NET 脚本引擎生成的事件。
    ///</param>
    procedure Notify(notify: string; info: DDN.mscorlib.DNObject);

  end;

  //-------------namespace: Microsoft.JScript.Vsa----------------
  ///<summary>
  ///  定义 <see cref="T:Microsoft.JScript.Vsa.IJSVsaItem" />
  ///  对象集合的接口，可通过名称或索引对其进行定位。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Vsa.IJSVsaItems')]
  DNIJSVsaItems = interface(DDN.mscorlib.DNIEnumerable)
  ['{172341E0-9B0D-43E6-9EFF-75E030A46461}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(name: string): DNIJSVsaItem; overload;
    function get_Item(index: Int32): DNIJSVsaItem; overload;

  { methods } 

    ///<summary>
    ///  按照 <see cref="T:Microsoft.JScript.Vsa.JSVsaItemType" />
    ///  枚举中的定义，创建其中一个<see cref="T:Microsoft.JScript.Vsa.IJSVsaItem" />
    ///  类型的新实例。
    ///</summary>
    ///  <param name="name">
    ///  要与新项关联的名称。
    ///  项是引用项类型时，名称参数必须与被引用程序集的名称（使用 <see cref="P:Microsoft.JScript.Vsa.IJSVsaReferenceItem.AssemblyName" />
    ///  属性设置）完全相同。
    ///  但是，在 JScript 中，如果不指定 AssemblyName，则 JScript 会将 ItemName 用作程序集的名称。
    ///</param>
    ///  <param name="itemType">
    ///  在 <see cref="T:Microsoft.JScript.Vsa.JSVsaItemType" />
    ///  枚举中定义的所创建的项类型。
    ///</param>
    ///  <param name="itemFlag">
    ///  用于指定代码项初始内容的可选标志。
    ///</param>
    ///<returns>
    ///  返回对创建的 <see cref="T:Microsoft.JScript.Vsa.IJSVsaItem" />
    ///  对象的引用。
    ///</returns>
    function CreateItem(name: string; itemType: DNJSVsaItemType; itemFlag: DNJSVsaItemFlag): DNIJSVsaItem;
    ///<summary>
    ///  从集合中移除按照项的名称指定的项。
    ///</summary>
    ///  <param name="name">
    ///  要从集合中移除的项的名称。
    ///</param>
    procedure Remove(name: string); overload;
    ///<summary>
    ///  从集合中移除按照项的索引值指定的项。
    ///</summary>
    ///  <param name="index">
    ///  要移除的项的索引值。
    ///</param>
    procedure Remove(index: Int32); overload;

  { propertys } 

    ///<summary>
    ///  获取指定集合的项数。
    ///</summary>
    ///<returns>
    ///  返回表示集合中的项数的整数值。
    ///</returns>
    property Count: Int32 read get_Count;
    property Item[name: string]: DNIJSVsaItem read get_Item; default;
    property Item[index: Int32]: DNIJSVsaItem read get_Item; default;
  end;

  //-------------namespace: Microsoft.JScript----------------
  DNASTClass = interface(DDN.mscorlib.DNObjectClass)
  ['{860E66BB-C46D-5E09-8D09-592AFFE7086A}']
  end;

  ///<summary>
  ///  表示用于将 JScript 代码分析的抽象语法树。
  ///</summary>
  [DNTypeName('Microsoft.JScript.AST')]
  DNAST = interface(DDN.mscorlib.DNObject)
  ['{D8C79A49-E892-30B2-A09B-B866AE209B7B}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAST = class(TDNGenericImport<DNASTClass, DNAST>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNArrayLiteralClass = interface(DNASTClass)
  ['{6FFEF924-B471-52B8-A7C2-A3BDE1FE5B43}']
  { constructors } 

    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.JScript.ArrayLiteral" />
    ///  类，指定的上下文和元素。
    ///</summary>
    ///  <param name="context">
    ///  当前文档上下文中。
    ///</param>
    ///  <param name="elements">
    ///  数组的元素。
    ///</param>
    {class} function init(context: DNContext; elements: DNASTList): DNArrayLiteral;

  end;

  ///<summary>
  ///  此类是 JScript 分析器用于表示文本的数组。
  ///</summary>
  [DNTypeName('Microsoft.JScript.ArrayLiteral')]
  DNArrayLiteral = interface(DNAST)
  ['{736607EA-CD6A-3674-AA8C-7DE3D1E52725}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNArrayLiteral = class(TDNGenericImport<DNArrayLiteralClass, DNArrayLiteral>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNAssemblyCustomAttributeListClass = interface(DNASTClass)
  ['{6EF6C9E3-80BE-55C1-A9A5-9AF385AF0284}']
  end;

  ///<summary>
  ///  此类是 JScript 分析器用于存储分配给程序集的属性。
  ///</summary>
  [DNTypeName('Microsoft.JScript.AssemblyCustomAttributeList')]
  DNAssemblyCustomAttributeList = interface(DNAST)
  ['{1143116F-3E10-3F98-8536-BFE04FBD5B83}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAssemblyCustomAttributeList = class(TDNGenericImport<DNAssemblyCustomAttributeListClass, DNAssemblyCustomAttributeList>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNASTListClass = interface(DNASTClass)
  ['{500464A0-ECF4-58A9-8ADA-BBB3572BBC75}']
  end;

  ///<summary>
  ///  维护的列表<see cref="T:Microsoft.JScript.AST" />
  ///  元素。
  ///  此类所属的抽象语法树类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.ASTList')]
  DNASTList = interface(DNAST)
  ['{84A4A97F-815C-3DA1-BA68-350C27C6CFFA}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNASTList = class(TDNGenericImport<DNASTListClass, DNASTList>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNBinaryOpClass = interface(DNASTClass)
  ['{C8F4845C-32E5-505A-8692-8E8915654B9F}']
  end;

  ///<summary>
  ///  表示执行两个操作数的操作，如类的基类<see cref="T:Microsoft.JScript.Plus" />
  ///  ， <see cref="T:Microsoft.JScript.Equality" />
  ///  ，和<see cref="T:Microsoft.JScript.Relational" />
  ///  。
  ///  此类所属的抽象语法树类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.BinaryOp')]
  DNBinaryOp = interface(DNAST)
  ['{C95F2E40-1973-3D51-AA38-A63EDAC939BE}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBinaryOp = class(TDNGenericImport<DNBinaryOpClass, DNBinaryOp>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNBitwiseBinaryClass = interface(DNBinaryOpClass)
  ['{1C14197F-73AB-5203-AEE6-D7DD666BE9AC}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.BitwiseBinary" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="operatorTok"><see cref="T:Microsoft.JScript.JSToken" />
    ///  枚举值之一。
    ///  指定要执行的操作。
    ///</param>
    {class} function init(operatorTok: Int32): DNBitwiseBinary;

  end;

  ///<summary>
  ///  执行按位二元运算。
  ///  此类所属的抽象语法树类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.BitwiseBinary')]
  DNBitwiseBinary = interface(DNBinaryOp)
  ['{EDC4933C-FFBE-3AC8-B4B8-FEF5B08111EE}']
  { methods } 

    ///<summary>
    ///  执行按位二元运算。
    ///</summary>
    ///  <param name="v1">
    ///  第一个操作数。
    ///</param>
    ///  <param name="v2">
    ///  第二个操作数。
    ///</param>
    ///<returns>
    ///  操作的结果。
    ///</returns>
    function EvaluateBitwiseBinary(v1: DDN.mscorlib.DNObject; v2: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBitwiseBinary = class(TDNGenericImport<DNBitwiseBinaryClass, DNBitwiseBinary>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNEqualityClass = interface(DNBinaryOpClass)
  ['{6815852C-B4F5-56AF-B169-2E01B7514AB6}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.Equality" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="operatorTok"><see cref="T:Microsoft.JScript.JSToken" />
    ///  枚举值之一。
    ///  指定要执行的比较。
    ///</param>
    {class} function init(operatorTok: Int32): DNEquality;

  { static methods } 

    ///<summary>
    ///  执行的比较运算。
    ///</summary>
    ///  <param name="v1">
    ///  第一个操作数。
    ///</param>
    ///  <param name="v2">
    ///  第二个操作数。
    ///</param>
    ///<returns>
    ///  操作的结果。
    ///</returns>
    {class} function JScriptEquals(v1: DDN.mscorlib.DNObject; v2: DDN.mscorlib.DNObject): Boolean;

  end;

  ///<summary>
  ///  执行比较操作。
  ///  此类所属的抽象语法树类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Equality')]
  DNEquality = interface(DNBinaryOp)
  ['{9007F98B-536C-3E96-A216-CA6B2EBEB69F}']
  { methods } 

    ///<summary>
    ///  执行比较运算。
    ///</summary>
    ///  <param name="v1">
    ///  第一个操作数。
    ///</param>
    ///  <param name="v2">
    ///  第二个操作数。
    ///</param>
    ///<returns>
    ///  操作的结果。
    ///</returns>
    function EvaluateEquality(v1: DDN.mscorlib.DNObject; v2: DDN.mscorlib.DNObject): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEquality = class(TDNGenericImport<DNEqualityClass, DNEquality>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNInClass = interface(DNBinaryOpClass)
  ['{2EB5A9C8-AD6E-5464-9CC5-57BC059C5DEE}']
  { static methods } 

    ///<summary>
    ///  确定指定的第一个对象是否包含在第二个指定的对象。
    ///</summary>
    ///  <param name="v1">
    ///  要搜索的对象。
    ///</param>
    ///  <param name="v2">
    ///  要搜索中的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果<paramref name="v1" />
    ///  中包含<paramref name="v2" />
    ///  ; 否则为<see langword="false" />
    ///  。
    ///</returns>
    {class} function JScriptIn(v1: DDN.mscorlib.DNObject; v2: DDN.mscorlib.DNObject): Boolean;

  end;

  ///<summary>
  ///  确定对象是否包含在另一个对象。
  ///  此类所属的抽象语法树类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.In')]
  DNIn = interface(DNBinaryOp)
  ['{82FC9CBA-8B3E-36AD-AE35-C12984A28A7F}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNIn = class(TDNGenericImport<DNInClass, DNIn>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNInstanceofClass = interface(DNBinaryOpClass)
  ['{AAC93039-29DE-552D-9DD3-D118AD479F7E}']
  { static methods } 

    ///<summary>
    ///  确定是否可以将第一个指定的对象强制转换为第二个指定对象的类型。
    ///</summary>
    ///  <param name="v1">
    ///  要强制转换为对象的类型的对象<paramref name="v2" />
    ///  。
    ///</param>
    ///  <param name="v2">
    ///  具有所需的类型的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果<paramref name="v1" />
    ///  可强制转换为对象的类型v2; 否则为<see langword="false" />
    ///  。
    ///</returns>
    {class} function JScriptInstanceof(v1: DDN.mscorlib.DNObject; v2: DDN.mscorlib.DNObject): Boolean;

  end;

  ///<summary>
  ///  确定是否可以将对象强制转换为另一个对象的类型。
  ///  此类所属的抽象语法树类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Instanceof')]
  DNInstanceof = interface(DNBinaryOp)
  ['{EEA25003-8D21-37DE-B47E-73EB1AA4A247}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNInstanceof = class(TDNGenericImport<DNInstanceofClass, DNInstanceof>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNNumericBinaryClass = interface(DNBinaryOpClass)
  ['{C3101F8F-168A-5792-90BE-9DA3B16556D9}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.NumericBinary" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="operatorTok"><see cref="T:Microsoft.JScript.JSToken" />
    ///  枚举值之一。
    ///  指定要执行的操作。
    ///</param>
    {class} function init(operatorTok: Int32): DNNumericBinary;

  { static methods } 

    ///<summary>
    ///  对指定的数值操作数执行指定的二元运算。
    ///</summary>
    ///  <param name="v1">
    ///  第一个操作数。
    ///</param>
    ///  <param name="v2">
    ///  第二个操作数。
    ///</param>
    ///  <param name="operatorTok"><see cref="T:Microsoft.JScript.JSToken" />
    ///  枚举值之一。
    ///  指定要执行的操作。
    ///</param>
    ///<returns>
    ///  操作的结果。
    ///</returns>
    {class} function DoOp(v1: DDN.mscorlib.DNObject; v2: DDN.mscorlib.DNObject; operatorTok: DNJSToken): DDN.mscorlib.DNObject;

  end;

  ///<summary>
  ///  对数值操作数执行的二元运算。
  ///  此类所属的抽象语法树类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.NumericBinary')]
  DNNumericBinary = interface(DNBinaryOp)
  ['{36DDA5E3-EEE1-3C28-8EA2-748F3EFA0767}']
  { methods } 

    ///<summary>
    ///  对指定的数值操作数执行二元运算。
    ///</summary>
    ///  <param name="v1">
    ///  第一个操作数。
    ///</param>
    ///  <param name="v2">
    ///  第二个操作数。
    ///</param>
    ///<returns>
    ///  操作的结果。
    ///</returns>
    function EvaluateNumericBinary(v1: DDN.mscorlib.DNObject; v2: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNNumericBinary = class(TDNGenericImport<DNNumericBinaryClass, DNNumericBinary>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNPlusClass = interface(DNBinaryOpClass)
  ['{7DF7E04C-5CA1-5F1C-A1A1-AB4CF166B6CD}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.Plus" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPlus;

  { static methods } 

    ///<summary>
    ///  执行的加法或串联运算。
    ///</summary>
    ///  <param name="v1">
    ///  第一个操作数。
    ///</param>
    ///  <param name="v2">
    ///  第二个操作数。
    ///</param>
    ///<returns>
    ///  操作的结果。
    ///</returns>
    {class} function DoOp(v1: DDN.mscorlib.DNObject; v2: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;

  end;

  ///<summary>
  ///  执行加法和串联运算。
  ///  此类所属的抽象语法树类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Plus')]
  DNPlus = interface(DNBinaryOp)
  ['{2741D411-E488-37D7-A40E-43093974934E}']
  { methods } 

    ///<summary>
    ///  执行的加法或串联运算。
    ///</summary>
    ///  <param name="v1">
    ///  第一个操作数。
    ///</param>
    ///  <param name="v2">
    ///  第二个操作数。
    ///</param>
    ///<returns>
    ///  操作的结果。
    ///</returns>
    function EvaluatePlus(v1: DDN.mscorlib.DNObject; v2: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPlus = class(TDNGenericImport<DNPlusClass, DNPlus>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNRelationalClass = interface(DNBinaryOpClass)
  ['{165454B5-6B3D-5351-88AE-37A4F0536BC6}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.Relational" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="operatorTok"><see cref="T:Microsoft.JScript.JSToken" />
    ///  枚举值之一。
    ///  指定要执行的比较。
    ///</param>
    {class} function init(operatorTok: Int32): DNRelational;

  { static methods } 

    ///<summary>
    ///  执行对指定的操作数的关系的比较运算。
    ///</summary>
    ///  <param name="v1">
    ///  第一个操作数。
    ///</param>
    ///  <param name="v2">
    ///  第二个操作数。
    ///</param>
    ///<returns>
    ///  操作的结果。
    ///</returns>
    {class} function JScriptCompare(v1: DDN.mscorlib.DNObject; v2: DDN.mscorlib.DNObject): Double;

  end;

  ///<summary>
  ///  执行关系比较操作。
  ///  此类所属的抽象语法树类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Relational')]
  DNRelational = interface(DNBinaryOp)
  ['{1D3EE118-BF89-30D8-807E-0540D9E2117A}']
  { methods } 

    ///<summary>
    ///  执行对指定的操作数的关系比较操作。
    ///</summary>
    ///  <param name="v1">
    ///  第一个操作数。
    ///</param>
    ///  <param name="v2">
    ///  第二个操作数。
    ///</param>
    ///<returns>
    ///  操作的结果。
    ///</returns>
    function EvaluateRelational(v1: DDN.mscorlib.DNObject; v2: DDN.mscorlib.DNObject): Double;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRelational = class(TDNGenericImport<DNRelationalClass, DNRelational>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNStrictEqualityClass = interface(DNBinaryOpClass)
  ['{A7A381B0-E9B0-59FC-8C06-CB0FCB861582}']
  { static methods } 

    ///<summary>
    ///  执行的比较运算。
    ///</summary>
    ///  <param name="v1">
    ///  第一个操作数。
    ///</param>
    ///  <param name="v2">
    ///  第二个操作数。
    ///</param>
    ///<returns>
    ///  操作的结果。
    ///</returns>
    {class} function JScriptStrictEquals(v1: DDN.mscorlib.DNObject; v2: DDN.mscorlib.DNObject): Boolean;

  end;

  ///<summary>
  ///  执行比较操作。
  ///  此类所属的抽象语法树类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.StrictEquality')]
  DNStrictEquality = interface(DNBinaryOp)
  ['{D8710F27-24B2-3948-A8D3-D56A48037B0E}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNStrictEquality = class(TDNGenericImport<DNStrictEqualityClass, DNStrictEquality>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNBindingClass = interface(DNASTClass)
  ['{467A9C37-5DF9-53EB-A2CE-E5FC02474D9B}']
  { static methods } 

    ///<summary>
    ///  确定指定的对象是否等效于 <see cref="T:Microsoft.JScript.Missing" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="value" />
    ///  等同于 <see cref="T:Microsoft.JScript.Missing" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsMissing(value: DDN.mscorlib.DNObject): Boolean;

  end;

  ///<summary>
  ///  表示对类成员，可调用表达式或变量名的引用。
  ///  此类尝试在编译时解析为正确的值的引用。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Binding')]
  DNBinding = interface(DNAST)
  ['{8E4E3B8A-CC06-35A1-9B61-D49107A70C98}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBinding = class(TDNGenericImport<DNBindingClass, DNBinding>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNBlockClass = interface(DNASTClass)
  ['{DE297142-6094-5010-B4D4-9936B1AA66B9}']
  end;

  ///<summary>
  ///  表示 JScript 中的块。
  ///  此类主要由<see cref="T:Microsoft.JScript.JSParser" />
  ///  创建<see cref="T:Microsoft.JScript.Block" />
  ///  对象时它所分析的代码。
  ///  此类所属的抽象语法树类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Block')]
  DNBlock = interface(DNAST)
  ['{4655D830-95C9-32D2-AACE-24AD59606E59}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBlock = class(TDNGenericImport<DNBlockClass, DNBlock>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNDebugBreakClass = interface(DNASTClass)
  ['{0E50D9A1-1B81-5908-8E7E-CE8B985E6746}']
  end;

  ///<summary>
  ///  此类由 JScript 分析器用于表示调试器中的断点。
  ///</summary>
  [DNTypeName('Microsoft.JScript.DebugBreak')]
  DNDebugBreak = interface(DNAST)
  ['{EBFAB6AC-A275-3674-A771-9CF83BE08086}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDebugBreak = class(TDNGenericImport<DNDebugBreakClass, DNDebugBreak>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNEvalClass = interface(DNASTClass)
  ['{186A6E9C-0446-546D-9E2F-AC3E28103BF4}']
  { static methods } 

    ///<summary>
    ///  通过使用指定的引擎将评估指定的 JScript 代码。
    ///</summary>
    ///  <param name="source">
    ///  要评估的代码。
    ///</param>
    ///  <param name="engine">
    ///  对要用于评估的脚本引擎的引用<paramref name="source" />
    ///  。
    ///</param>
    ///<returns>
    ///  计算的结果。
    ///  如果<paramref name="source" />
    ///  不是字符串，返回值为<paramref name="source" />
    ///  。
    ///</returns>
    {class} function JScriptEvaluate(source: DDN.mscorlib.DNObject; engine: DNVsaEngine): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  通过使用指定的引擎和安全选项将评估指定的 JScript 代码。
    ///</summary>
    ///  <param name="source">
    ///  要评估的代码。
    ///</param>
    ///  <param name="unsafeOption">
    ///  字符串文本unsafe启用不安全评估; 否则为<see langword="false" />
    ///  。
    ///</param>
    ///  <param name="engine">
    ///  对要用于评估的脚本引擎的引用<paramref name="source" />
    ///  。
    ///</param>
    ///<returns>
    ///  计算的结果。
    ///  如果<paramref name="source" />
    ///  不是字符串，返回值为<paramref name="source" />
    ///  。
    ///</returns>
    {class} function JScriptEvaluate(source: DDN.mscorlib.DNObject; unsafeOption: DDN.mscorlib.DNObject; engine: DNVsaEngine): DDN.mscorlib.DNObject; overload;

  end;

  ///<summary>
  ///  JScript 代码的计算结果。
  ///  此类所属的抽象语法树类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Eval')]
  DNEval = interface(DNAST)
  ['{584FE543-6019-33C4-8BA1-C9E5F2DFE24C}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEval = class(TDNGenericImport<DNEvalClass, DNEval>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNForInClass = interface(DNASTClass)
  ['{A54F3023-6139-5C5D-8EC1-67F462D4EC30}']
  { static methods } 

    ///<summary>
    ///  返回循环访问指定集合的枚举。
    ///</summary>
    ///  <param name="coll">
    ///  要为其获取一个枚举器集合。
    ///</param>
    ///<returns>
    ///  枚举数循环访问<paramref name="coll" />
    ///  。
    ///</returns>
    {class} function JScriptGetEnumerator(coll: DDN.mscorlib.DNObject): DDN.mscorlib.DNIEnumerator;

  end;

  ///<summary>
  ///  表示 JScript <see langword="for...in" />
  ///  语句。
  ///  此类所属的抽象语法树类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.ForIn')]
  DNForIn = interface(DNAST)
  ['{C44F77EB-38C9-38AF-B435-BC2A42E2BB5C}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNForIn = class(TDNGenericImport<DNForInClass, DNForIn>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNFunctionDeclarationClass = interface(DNASTClass)
  ['{6BE84960-54D4-56E4-99EF-627E08A729FC}']
  { static methods } 

    ///<summary>
    ///  创建新的闭包函数，使用指定的信息。
    ///</summary>
    ///  <param name="handle">
    ///  指向函数的类型的句柄。
    ///</param>
    ///  <param name="name">
    ///  函数名。
    ///</param>
    ///  <param name="method_name">
    ///  函数名。
    ///</param>
    ///  <param name="formal_parameters">
    ///  函数的参数。
    ///</param>
    ///  <param name="fields">
    ///  函数的字段。
    ///</param>
    ///  <param name="must_save_stack_locals"><see langword="true" />
    ///  若要保存局部堆栈变量。
    ///  这对于访问一个或其本地变量的嵌套函数非常重要<see langword="eval" />
    ///  语句。
    ///</param>
    ///  <param name="hasArgumentsObject"><see langword="true" />
    ///  如果函数具有参数数组。
    ///</param>
    ///  <param name="text">
    ///  函数声明的文本。
    ///</param>
    ///  <param name="declaringObject">
    ///  获取声明此方法的类型。
    ///</param>
    ///  <param name="engine">
    ///  对脚本引擎的引用。
    ///</param>
    ///<returns>
    ///  新的闭包函数表示函数声明。
    ///</returns>
    {class} function JScriptFunctionDeclaration(handle: DDN.mscorlib.DNRuntimeTypeHandle; name: string; method_name: string; formal_parameters: TArray<string>; fields: TArray<DNJSLocalField>; must_save_stack_locals: Boolean; hasArgumentsObject: Boolean; text: string; declaringObject: DDN.mscorlib.DNObject; engine: DNVsaEngine): DNClosure;

  end;

  ///<summary>
  ///  表示一个函数声明。
  ///  此类所属的抽象语法树类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.FunctionDeclaration')]
  DNFunctionDeclaration = interface(DNAST)
  ['{309D8D11-EF27-38AD-8AC2-26550770C1A0}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFunctionDeclaration = class(TDNGenericImport<DNFunctionDeclarationClass, DNFunctionDeclaration>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNFunctionExpressionClass = interface(DNASTClass)
  ['{C7E3B3C3-08E1-562B-89A4-70907AD8A30A}']
  { static methods } 

    ///<summary>
    ///  创建一个新的函数对象，使用指定的信息。
    ///</summary>
    ///  <param name="handle">
    ///  指向函数的类型的句柄。
    ///</param>
    ///  <param name="name">
    ///  函数名。
    ///</param>
    ///  <param name="method_name">
    ///  函数名。
    ///</param>
    ///  <param name="formal_params">
    ///  函数的参数。
    ///</param>
    ///  <param name="fields">
    ///  函数的字段。
    ///</param>
    ///  <param name="must_save_stack_locals"><see langword="true" />
    ///  若要保存局部堆栈变量。
    ///  这是重要的嵌套函数对于访问其中一个其本地变量，或用于<see langword="eval" />
    ///  语句。
    ///</param>
    ///  <param name="hasArgumentsObject"><see langword="true" />
    ///  如果函数具有参数数组。
    ///</param>
    ///  <param name="text">
    ///  函数声明的文本。
    ///</param>
    ///  <param name="engine">
    ///  对脚本引擎的引用。
    ///</param>
    ///<returns>
    ///  一个新的函数对象。
    ///</returns>
    {class} function JScriptFunctionExpression(handle: DDN.mscorlib.DNRuntimeTypeHandle; name: string; method_name: string; formal_params: TArray<string>; fields: TArray<DNJSLocalField>; must_save_stack_locals: Boolean; hasArgumentsObject: Boolean; text: string; engine: DNVsaEngine): DNFunctionObject;

  end;

  ///<summary>
  ///  表示函数对象。
  ///  此类所属的抽象语法树类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.FunctionExpression')]
  DNFunctionExpression = interface(DNAST)
  ['{05EA7E33-D020-364F-8187-9BE22B17A294}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFunctionExpression = class(TDNGenericImport<DNFunctionExpressionClass, DNFunctionExpression>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNImportClass = interface(DNASTClass)
  ['{356A035F-3A00-55A6-9BDE-4909163BB2DE}']
  { static methods } 

    ///<summary>
    ///  将指定的命名空间用于导入由指定的脚本引擎。
    ///</summary>
    ///  <param name="name">
    ///  要导入的命名空间。
    ///</param>
    ///  <param name="engine">
    ///  对脚本引擎的引用。
    ///</param>
    {class} procedure JScriptImport(name: string; engine: DNVsaEngine);

  end;

  ///<summary>
  ///  在代码中使用的命名空间导入。
  ///  此类所属的抽象语法树类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Import')]
  DNImport = interface(DNAST)
  ['{DE8CA25D-0C0B-3898-BB82-1C5787A8D4A4}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNImport = class(TDNGenericImport<DNImportClass, DNImport>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNPackageClass = interface(DNASTClass)
  ['{158D728B-F8A2-5981-9184-B1BE6CF0932C}']
  { static methods } 

    ///<summary>
    ///  通过使用指定的脚本引擎中创建指定的包。
    ///</summary>
    ///  <param name="rootName">
    ///  包的名称。
    ///</param>
    ///  <param name="engine">
    ///  对脚本引擎的引用。
    ///</param>
    {class} procedure JScriptPackage(rootName: string; engine: DNVsaEngine);

  end;

  ///<summary>
  ///  创建包的 JScript 代码，可使用其他代码。
  ///  此类所属的抽象语法树类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Package')]
  DNPackage = interface(DNAST)
  ['{87AFE896-A837-3ECB-A5BB-B2E61A5E8D12}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPackage = class(TDNGenericImport<DNPackageClass, DNPackage>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNScriptBlockClass = interface(DNASTClass)
  ['{50FAE35D-BD34-5D0F-B37C-C8AC9CBC5798}']
  end;

  ///<summary>
  ///  表示 JScript 代码的块。
  ///  此类所属的抽象语法树类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.ScriptBlock')]
  DNScriptBlock = interface(DNAST)
  ['{B0A80084-B3A1-388E-B5A5-AF97A5B28C8A}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNScriptBlock = class(TDNGenericImport<DNScriptBlockClass, DNScriptBlock>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNThrowClass = interface(DNASTClass)
  ['{5B541E34-C2D7-59CA-92B0-0700903F9FD6}']
  { static methods } 

    ///<summary>
    ///  作为异常，必要时进行到转换中返回指定的对象。
    ///</summary>
    ///  <param name="value">
    ///  要引发的异常。
    ///</param>
    ///<returns>
    ///  异常表示<paramref name="value" />
    ///  。
    ///</returns>
    {class} function JScriptThrow(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNException;

  end;

  ///<summary>
  ///  引发异常。
  ///  此类所属的抽象语法树类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Throw')]
  DNThrow = interface(DNAST)
  ['{65A10D53-131A-34F3-A666-A79511CC4A30}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNThrow = class(TDNGenericImport<DNThrowClass, DNThrow>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNTryClass = interface(DNASTClass)
  ['{04CADDE7-E993-554C-B21B-DB26B532F86D}']
  { static methods } 

    ///<summary>
    ///  创建一个新 <see cref="T:Microsoft.JScript.BlockScope" />
    ///  对象 <see langword="try" />
    ///  块并将结果推送到全局作用域堆栈上。
    ///</summary>
    ///  <param name="engine">
    ///  对脚本引擎的引用。
    ///</param>
    ///  <param name="id">
    ///  作用域的名称 <see langword="try" />
    ///  块。
    ///</param>
    ///  <param name="scopeId">
    ///  作用域的 ID <see langword="try" />
    ///  块。
    ///</param>
    {class} procedure PushHandlerScope(engine: DNVsaEngine; id: string; scopeId: Int32);
    ///<summary>
    ///  返回指定的对象作为异常，将其转换为特定<see cref="T:Microsoft.JScript.JScriptException" />
    ///  如果它知道如何操作。
    ///</summary>
    ///  <param name="e">
    ///  表示异常对象。
    ///</param>
    ///  <param name="engine">
    ///  对脚本引擎的引用。
    ///</param>
    ///<returns>
    ///  异常<paramref name="e" />
    ///  ，转换为特定<see cref="T:Microsoft.JScript.JScriptException" />
    ///  如果这是可行。
    ///</returns>
    {class} function JScriptExceptionValue(e: DDN.mscorlib.DNObject; engine: DNVsaEngine): DDN.mscorlib.DNObject;

  end;

  ///<summary>
  ///  识别错误处理作用域中运行代码的块。
  ///  此类所属的抽象语法树类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Try')]
  DNTry = interface(DNAST)
  ['{4BFD14D8-91B5-3875-9916-F8AC09294691}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTry = class(TDNGenericImport<DNTryClass, DNTry>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNUnaryOpClass = interface(DNASTClass)
  ['{A3F3CCD1-385D-5D5D-9CA4-FBD8E93401AC}']
  end;

  ///<summary>
  ///  表示类的基类，用于执行操作的类单一操作数，如 <see cref="T:Microsoft.JScript.Typeof" />
  ///  和 <see cref="T:Microsoft.JScript.PostOrPrefixOperator" />
  ///  。
  ///  此类所属的抽象语法树类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.UnaryOp')]
  DNUnaryOp = interface(DNAST)
  ['{90465A01-1A81-35CF-9CCA-5DA0A935E15D}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNUnaryOp = class(TDNGenericImport<DNUnaryOpClass, DNUnaryOp>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNNumericUnaryClass = interface(DNUnaryOpClass)
  ['{0ADB4483-DADE-5E2D-8D0B-BE166D4B1C09}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.NumericUnary" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="operatorTok"><see cref="T:Microsoft.JScript.JSToken" />
    ///  枚举值之一。
    ///  指定要执行的操作。
    ///</param>
    {class} function init(operatorTok: Int32): DNNumericUnary;

  end;

  ///<summary>
  ///  执行上数值操作数的一元运算。
  ///  此类所属的抽象语法树类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.NumericUnary')]
  DNNumericUnary = interface(DNUnaryOp)
  ['{07EA7E21-2CEC-3A90-B619-A2A64D02D364}']
  { methods } 

    ///<summary>
    ///  执行一元运算对数值操作数。
    ///</summary>
    ///  <param name="v">
    ///  操作数。
    ///</param>
    ///<returns>
    ///  操作的结果。
    ///</returns>
    function EvaluateUnary(v: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNNumericUnary = class(TDNGenericImport<DNNumericUnaryClass, DNNumericUnary>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNPostOrPrefixOperatorClass = interface(DNUnaryOpClass)
  ['{4ECD499D-9A67-599F-9542-DD9BC4F1DA52}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.PostOrPrefixOperator" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="operatorTok"><see cref="T:Microsoft.JScript.JSToken" />
    ///  枚举值之一。
    ///  指定要执行的操作。
    ///</param>
    {class} function init(operatorTok: Int32): DNPostOrPrefixOperator;

  end;

  ///<summary>
  ///  执行增量和减量操作对应于前缀和后缀语法。
  ///  此类所属的抽象语法树类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.PostOrPrefixOperator')]
  DNPostOrPrefixOperator = interface(DNUnaryOp)
  ['{2E6DDD3F-BF27-3B34-89A9-E1C287521618}']
  { methods } 

    function EvaluatePostOrPrefix(out v: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPostOrPrefixOperator = class(TDNGenericImport<DNPostOrPrefixOperatorClass, DNPostOrPrefixOperator>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNTypeofClass = interface(DNUnaryOpClass)
  ['{A5E7B8E3-2D54-56C4-AC59-14B0B6DEF8BD}']
  { static methods } 

    ///<summary>
    ///  确定指定的对象的数据类型。
    ///</summary>
    ///  <param name="value">
    ///  要确定的类型的对象。
    ///</param>
    ///<returns><paramref name="value" />
    ///  的类型。
    ///</returns>
    {class} function JScriptTypeof(value: DDN.mscorlib.DNObject): string;

  end;

  ///<summary>
  ///  确定对象的数据类型。
  ///  此类所属的抽象语法树类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Typeof')]
  DNTypeof = interface(DNUnaryOp)
  ['{ED2B4650-E79E-3CE8-890B-1F3C3074CA15}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeof = class(TDNGenericImport<DNTypeofClass, DNTypeof>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNWithClass = interface(DNASTClass)
  ['{07F32172-F44E-57F5-8E99-12052AFD7E38}']
  { static methods } 

    ///<summary>
    ///  建立的默认对象<see langword="with" />
    ///  语句块的方法是将其添加到作用域堆栈。
    ///</summary>
    ///  <param name="withOb">
    ///  默认对象。
    ///</param>
    ///  <param name="engine">
    ///  对脚本引擎的引用。
    ///</param>
    ///<returns><paramref name="withOb" />
    ///  转换为对象。
    ///</returns>
    {class} function JScriptWith(withOb: DDN.mscorlib.DNObject; engine: DNVsaEngine): DDN.mscorlib.DNObject;

  end;

  ///<summary>
  ///  表示 <see langword="with" />
  ///  语句。
  ///  此类所属的抽象语法树类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.With')]
  DNWith = interface(DNAST)
  ['{599568C8-F7A0-3514-B13B-0B069E866529}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNWith = class(TDNGenericImport<DNWithClass, DNWith>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNCmdLineOptionParserClass = interface(DDN.mscorlib.DNObjectClass)
  ['{219B112E-D21E-53BB-AD61-61D90F4F7AC6}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.CmdLineOptionParser" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNCmdLineOptionParser;

  { static methods } 

    ///<summary>
    ///  验证指定的选项的位置正确。
    ///</summary>
    ///  <param name="option">
    ///  用户指定的命令行选项。
    ///</param>
    ///  <param name="prefix">
    ///  选项名称。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果该选项是否正确;否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsSimpleOption(option: string; prefix: string): Boolean;
    ///<summary>
    ///  从指定的命令行选项中获取的参数。
    ///  适用于只具有一个名称，如选项 /out:&lt;filename&gt;。
    ///</summary>
    ///  <param name="option">
    ///  用户指定的命令行选项。
    ///</param>
    ///  <param name="prefix">
    ///  选项名称。
    ///</param>
    ///<returns>
    ///  参数，""如果该参数不指定，或者，如果数据库的选项或参数格式不正确。
    ///</returns>
    {class} function IsArgumentOption(option: string; prefix: string): string; overload;
    ///<summary>
    ///  从指定的命令行选项中获取的参数。
    ///  适用于选项可以指定通过长期或短期格式的选项名称，如 /r 或 /reference 为 /r[eference]:&lt;file list&gt;。
    ///</summary>
    ///  <param name="option">
    ///  用户指定的命令行选项。
    ///</param>
    ///  <param name="shortPrefix">
    ///  选项名缩写形式。
    ///</param>
    ///  <param name="longPrefix">
    ///  选项名称长格式。
    ///</param>
    ///<returns>
    ///  参数，""如果该参数不指定，或者，如果数据库的选项或参数格式不正确。
    ///</returns>
    {class} function IsArgumentOption(option: string; shortPrefix: string; longPrefix: string): string; overload;
    ///<summary>
    ///  获取 + 或 - 参数从指定的命令行选项。
    ///  适用于只具有一个名称，如选项 /debug[+|-]。
    ///</summary>
    ///  <param name="option">
    ///  用户指定的命令行选项。
    ///</param>
    ///  <param name="prefix">
    ///  选项名称。
    ///</param>
    ///<returns><see langword="false" />
    ///  有关 -; <see langword="true" />
    ///  为 + 或如果未指定的参数; 如果值为 null 的选项或参数格式不正确。
    ///</returns>
    {class} function IsBooleanOption(option: string; prefix: string): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  获取 + 或 - 参数从指定的命令行选项。
    ///  适用于可以通过长期或短期格式的选项名称指定的选项。
    ///</summary>
    ///  <param name="option">
    ///  用户指定的命令行选项。
    ///</param>
    ///  <param name="shortPrefix">
    ///  选项名缩写形式。
    ///</param>
    ///  <param name="longPrefix">
    ///  选项名称长格式。
    ///</param>
    ///<returns><see langword="false" />
    ///  有关 -; <see langword="true" />
    ///  为 + 或如果未指定的参数; 如果值为 null 的选项或参数格式不正确。
    ///</returns>
    {class} function IsBooleanOption(option: string; shortPrefix: string; longPrefix: string): DDN.mscorlib.DNObject; overload;

  end;

  ///<summary>
  ///  确定是否为命令行编译器 jsc.exe 指定的选项正确，以及读取的自变量，如果任何是否包含。
  ///</summary>
  [DNTypeName('Microsoft.JScript.CmdLineOptionParser')]
  DNCmdLineOptionParser = interface(DDN.mscorlib.DNObject)
  ['{18794D88-7D3D-3086-AB6E-04229D897423}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCmdLineOptionParser = class(TDNGenericImport<DNCmdLineOptionParserClass, DNCmdLineOptionParser>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7F52937D-4A2D-55A6-8A74-F95E84A9D7C8}']
  end;

  ///<summary>
  ///  表示 JScript 源代码。
  ///  此类所属的编译和运行时状态类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Context')]
  DNContext = interface(DDN.mscorlib.DNObject)
  ['{C53AD757-5A68-38AF-94EC-FBACD37B3F14}']
  { getters & setters } 

    function get_EndColumn: Int32;
    function get_EndLine: Int32;
    function get_EndPosition: Int32;
    function get_StartColumn: Int32;
    function get_StartLine: Int32;
    function get_StartPosition: Int32;

  { methods } 

    ///<summary>
    ///  获取包含上下文，并丢弃任何空白的代码。
    ///</summary>
    ///<returns>
    ///  用于上下文所包含的代码。
    ///</returns>
    function GetCode: string;
    ///<summary>
    ///  获取代码的单个单元或 令牌, ，上下文所包含。
    ///</summary>
    ///<returns>
    ///  代码中，各个单元或 令牌, ，上下文所包含。
    ///</returns>
    function GetToken: DNJSToken;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取此代码的结尾处的行中的列号。
    ///  这包括在行开头的空格。
    ///</summary>
    ///<returns>
    ///  此代码的结尾处的列号。
    ///</returns>
    property EndColumn: Int32 read get_EndColumn;
    ///<summary>
    ///  获取此代码的结束行号。
    ///</summary>
    ///<returns>
    ///  此代码的结束行号。
    ///</returns>
    property EndLine: Int32 read get_EndLine;
    ///<summary>
    ///  获取代码字符串中此代码的结束位置的位置，因为所有代码行均都存储在单个字符串中。
    ///</summary>
    ///<returns>
    ///  此代码的结尾处代码字符串中的位置。
    ///</returns>
    property EndPosition: Int32 read get_EndPosition;
    ///<summary>
    ///  获取此代码开始所在行中的列号。
    ///  这包括在行开头的空格。
    ///</summary>
    ///<returns>
    ///  此代码开始所在的列号。
    ///</returns>
    property StartColumn: Int32 read get_StartColumn;
    ///<summary>
    ///  获取此代码开始所在的行号。
    ///</summary>
    ///<returns>
    ///  此代码的开始位置的行号。
    ///</returns>
    property StartLine: Int32 read get_StartLine;
    ///<summary>
    ///  获取代码字符串中的位置，此代码可启动，因为所有代码行均都存储在单个字符串中。
    ///</summary>
    ///<returns>
    ///  此代码开始所在代码字符串中的位置。
    ///</returns>
    property StartPosition: Int32 read get_StartPosition;
  end;

  TDNContext = class(TDNGenericImport<DNContextClass, DNContext>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNConvertClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4E40B4CD-C879-5C2C-900A-A87C80D4A26F}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.Convert" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNConvert;

  { static methods } 

    ///<summary>
    ///  确定变量是否包含数组索引值。
    ///</summary>
    ///  <param name="ast">
    ///  要测试的变量。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="ast" />
    ///  包含数组的索引值; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsBadIndex(ast: DNAST): Boolean;
    ///<summary>
    ///  确定是否<see cref="T:System.Double" />
    ///  变量包含一个整数值。
    ///</summary>
    ///  <param name="d">
    ///  要测试的 <see cref="T:System.Double" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果<paramref name="d" />
    ///  包含整数值，<paramref name="d" />
    ///  返回。
    ///  否则，将引发异常。
    ///</returns>
    {class} function CheckIfDoubleIsInteger(d: Double): Double;
    ///<summary>
    ///  确定是否<see cref="T:System.Single" />
    ///  变量包含一个整数值。
    ///</summary>
    ///  <param name="s">
    ///  要测试的 <see cref="T:System.Single" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果<paramref name="s" />
    ///  包含整数值，<paramref name="s" />
    ///  返回。
    ///  否则，将引发异常。
    ///</returns>
    {class} function CheckIfSingleIsInteger(s: Single): Single;
    ///<summary>
    ///  将指定的值转换为指定的类型。
    ///</summary>
    ///  <param name="value">
    ///  要转换为新类型的值。
    ///</param>
    ///  <param name="type">
    ///  要转换的类型<paramref name="value" />
    ///  到。
    ///</param>
    ///<returns><paramref name="value" />
    ///  转换为<paramref name="type" />
    ///  。
    ///</returns>
    {class} function Coerce(value: DDN.mscorlib.DNObject; &type: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    ///<summary>
    ///  将指定的值转换为指定<see cref="T:System.TypeCode" />
    ///  ，还可以选择允许数据丢失。
    ///</summary>
    ///  <param name="value">
    ///  要转换为新类型的值。
    ///</param>
    ///  <param name="target">
    ///  要转换的类型<paramref name="value" />
    ///  到。
    ///</param>
    ///  <param name="truncationPermitted"><see langword="true" />
    ///  若要允许数据丢失;否则为<see langword="false" />
    ///  。
    ///</param>
    ///<returns><paramref name="value" />
    ///  转换为<paramref name="target" />
    ///  类型。
    ///</returns>
    {class} function Coerce2(value: DDN.mscorlib.DNObject; target: DDN.mscorlib.DNTypeCode; truncationPermitted: Boolean): DDN.mscorlib.DNObject;
    ///<summary>
    ///  引发 <see cref="T:Microsoft.JScript.JScriptException" />
    ///  在所有情况下的异常。
    ///</summary>
    ///  <param name="val">
    ///  导致异常的源代码。
    ///</param>
    {class} procedure ThrowTypeMismatch(val: DDN.mscorlib.DNObject);
    ///<summary>
    ///  将指定的 <see cref="T:System.Double" />
    ///  转换为 <see cref="T:System.Boolean" />
    ///  。
    ///</summary>
    ///  <param name="d">
    ///  要转换的值。
    ///</param>
    ///<returns><see langword="false" />
    ///  如果 <paramref name="d" />
    ///  0; 否则为 <see langword="true" />
    ///  。
    ///</returns>
    {class} function ToBoolean(d: Double): Boolean; overload;
    ///<summary>
    ///  将指定的 <see cref="T:System.Object" />
    ///  转换为 <see cref="T:System.Boolean" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns><paramref name="value" />
    ///  转换为 <see cref="T:System.Boolean" />
    ///  。
    ///</returns>
    {class} function ToBoolean(value: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  将指定 <see cref="T:System.Object" />
    ///  值赋给 <see cref="T:System.Boolean" />
    ///  结构，可以选择允许丢失数据。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///  <param name="explicitConversion"><see langword="true" />
    ///  若要允许的数据丢失。否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns><paramref name="value" />
    ///  转换为 <see cref="T:System.Boolean" />
    ///  。
    ///</returns>
    {class} function ToBoolean(value: DDN.mscorlib.DNObject; explicitConversion: Boolean): Boolean; overload;
    ///<summary>
    ///  指定将值转换为 <see cref="T:System.Object" />
    ///  表示一套 <see cref="T:Microsoft.JScript.AST" />
    ///  对象。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///  <param name="engine">
    ///  对脚本引擎的引用。
    ///</param>
    ///<returns><paramref name="value" />
    ///  转换为 <see cref="T:System.Object" />
    ///  。
    ///</returns>
    {class} function ToForInObject(value: DDN.mscorlib.DNObject; engine: DNVsaEngine): DDN.mscorlib.DNObject;
    ///<summary>
    ///  指定将值转换为 <see cref="T:System.Int32" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns><paramref name="value" />
    ///  转换为 <see cref="T:System.Int32" />
    ///  。
    ///</returns>
    {class} function ToInt32(value: DDN.mscorlib.DNObject): Int32;
    ///<summary>
    ///  将指定的 <see cref="T:System.Object" />
    ///  转换为 <see cref="T:System.Double" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns><paramref name="value" />
    ///  转换为 <see cref="T:System.Double" />
    ///  。
    ///</returns>
    {class} function ToNumber(value: DDN.mscorlib.DNObject): Double; overload;
    ///<summary>
    ///  将指定的 <see cref="T:System.String" />
    ///  转换为 <see cref="T:System.Double" />
    ///  。
    ///</summary>
    ///  <param name="str">
    ///  要转换的值。
    ///</param>
    ///<returns><paramref name="str" />
    ///  转换为 <see cref="T:System.Double" />
    ///  。
    ///</returns>
    {class} function ToNumber(str: string): Double; overload;
    ///<summary>
    ///  将指定 <see cref="T:Microsoft.JScript.ArrayObject" />
    ///  对类型化 <see cref="T:System.Array" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的 <see cref="T:Microsoft.JScript.ArrayObject" />
    ///  。
    ///</param>
    ///  <param name="handle">
    ///  数组中元素的类型。
    ///</param>
    ///<returns><paramref name="value" />
    ///  转换为 <see cref="T:System.Array" />
    ///  这是否可能; 否则为 <paramref name="value" />
    ///  。
    ///</returns>
    {class} function ToNativeArray(value: DDN.mscorlib.DNObject; handle: DDN.mscorlib.DNRuntimeTypeHandle): DDN.mscorlib.DNObject;
    ///<summary>
    ///  指定将值转换为 <see cref="T:System.Object" />
    ///  。
    ///  如果它无法执行转换，将引发错误。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///  <param name="engine">
    ///  对脚本引擎的引用。
    ///</param>
    ///<returns><paramref name="value" />
    ///  转换为 <see cref="T:System.Object" />
    ///  。
    ///</returns>
    {class} function ToObject(value: DDN.mscorlib.DNObject; engine: DNVsaEngine): DDN.mscorlib.DNObject;
    ///<summary>
    ///  指定将值转换为 <see cref="T:System.Object" />
    ///  。
    ///  如果它不能执行转换，，返回 null。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///  <param name="engine">
    ///  对脚本引擎的引用。
    ///</param>
    ///<returns><paramref name="value" />
    ///  转换为 <see cref="T:System.Object" />
    ///  。
    ///</returns>
    {class} function ToObject2(value: DDN.mscorlib.DNObject; engine: DNVsaEngine): DDN.mscorlib.DNObject;
    ///<summary>
    ///  将指定 <see cref="T:System.Object" />
    ///  到 <see cref="T:System.String" />
    ///  , ，还可以选择允许丢失数据。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///  <param name="explicitOK"><see langword="true" />
    ///  若要允许的数据丢失。否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns><paramref name="value" />
    ///  转换为 <see cref="T:System.String" />
    ///  。
    ///</returns>
    {class} function ToString(value: DDN.mscorlib.DNObject; explicitOK: Boolean): string; overload;
    ///<summary>
    ///  将指定的值转换为指定<see cref="T:System.Type" />
    ///  ，还可以选择允许数据丢失。
    ///</summary>
    ///  <param name="value">
    ///  要转换为新类型的值。
    ///</param>
    ///  <param name="t">
    ///  要转换的类型<paramref name="value" />
    ///  到。
    ///</param>
    ///  <param name="explicitOK"><see langword="true" />
    ///  若要允许数据丢失;否则为<see langword="false" />
    ///  。
    ///</param>
    ///<returns><paramref name="value" />
    ///  转换为类型<paramref name="t" />
    ///  。
    ///</returns>
    {class} function CoerceT(value: DDN.mscorlib.DNObject; t: DDN.mscorlib.DNType; explicitOK: Boolean): DDN.mscorlib.DNObject;
    ///<summary>
    ///  将指定的 <see cref="T:System.Boolean" />
    ///  转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="b">
    ///  要转换的值。
    ///</param>
    ///<returns><paramref name="b" />
    ///  转换为 <see cref="T:System.String" />
    ///  。
    ///</returns>
    {class} function ToString(b: Boolean): string; overload;
    ///<summary>
    ///  将指定的 <see cref="T:System.Double" />
    ///  转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="d">
    ///  要转换的值。
    ///</param>
    ///<returns><paramref name="d" />
    ///  转换为 <see cref="T:System.String" />
    ///  。
    ///</returns>
    {class} function ToString(d: Double): string; overload;

  end;

  ///<summary>
  ///  将数据从一种类型转换为另一个。
  ///  这是一个实用工具类。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Convert')]
  DNConvert = interface(DDN.mscorlib.DNObject)
  ['{6566539A-9B7D-360A-A909-E88F8C935197}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  end;

  TDNConvert = class(TDNGenericImport<DNConvertClass, DNConvert>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNDebugConvertClass = interface(DNObjectClass)
  ['{2B4C20BA-A9B4-5A1C-B758-ACF50127EFBD}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.DebugConvert" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDebugConvert;

  end;

  ///<summary>
  ///  将数据从一种类型转换为另一个。
  ///  包含方法将值转换为 <see cref="T:System.String" />
  ///  对象，以便它们可以显示由调试器。
  ///</summary>
  [DNTypeName('Microsoft.JScript.DebugConvert')]
  DNDebugConvert = interface(DNIDebugConvert)
  ['{432D76CE-8C9E-4EED-ADDD-91737F27A8CB}']
  { methods } 

    ///<summary>
    ///  将指定的值转换为指定 <see cref="T:System.TypeCode" />
    ///  , ，还可以选择允许丢失数据。
    ///</summary>
    ///  <param name="value">
    ///  要转换为新类型的值。
    ///</param>
    ///  <param name="typeCode">
    ///  要转换的类型 <paramref name="value" />
    ///  到。
    ///</param>
    ///  <param name="truncationPermitted"><see langword="true" />
    ///  若要允许的数据丢失。否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns><paramref name="value" />
    ///  转换为 <paramref name="typeCode" />
    ///  类型。
    ///</returns>
    function ToPrimitive(value: DDN.mscorlib.DNObject; typeCode: DDN.mscorlib.DNTypeCode; truncationPermitted: Boolean): DDN.mscorlib.DNObject;
    ///<summary>
    ///  将转换指定<see cref="T:System.Byte" />
    ///  值赋给<see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///  <param name="radix">
    ///  返回值的基数。
    ///  基类必须是 2、 8、 10 或 16。
    ///</param>
    ///<returns>
    ///  以 <paramref name="value" />
    ///  为基数的 <paramref name="radix" />
    ///  的字符串表示形式。
    ///</returns>
    function ByteToString(value: Byte; radix: Int32): string;
    ///<summary>
    ///  将指定 <see cref="T:System.SByte" />
    ///  值赋给 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///  <param name="radix">
    ///  返回的值的基数。
    ///  基类必须是 2、 8、 10 或 16。
    ///</param>
    ///<returns>
    ///  以 <paramref name="value" />
    ///  为基数的 <paramref name="radix" />
    ///  的字符串表示形式。
    ///</returns>
    function SByteToString(value: SByte; radix: Int32): string;
    ///<summary>
    ///  将指定 <see cref="T:System.Int16" />
    ///  值赋给 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///  <param name="radix">
    ///  返回的值的基数。
    ///  基类必须是 2、 8、 10 或 16。
    ///</param>
    ///<returns>
    ///  以 <paramref name="value" />
    ///  为基数的 <paramref name="radix" />
    ///  的字符串表示形式。
    ///</returns>
    function Int16ToString(value: Int16; radix: Int32): string;
    ///<summary>
    ///  将指定 <see cref="T:System.UInt16" />
    ///  值赋给 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///  <param name="radix">
    ///  返回的值的基数。
    ///  基类必须是 2、 8、 10 或 16。
    ///</param>
    ///<returns>
    ///  以 <paramref name="value" />
    ///  为基数的 <paramref name="radix" />
    ///  的字符串表示形式。
    ///</returns>
    function UInt16ToString(value: UInt16; radix: Int32): string;
    ///<summary>
    ///  将指定 <see cref="T:System.Int32" />
    ///  值赋给 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///  <param name="radix">
    ///  返回的值的基数。
    ///  基类必须是 2、 8、 10 或 16。
    ///</param>
    ///<returns>
    ///  以 <paramref name="value" />
    ///  为基数的 <paramref name="radix" />
    ///  的字符串表示形式。
    ///</returns>
    function Int32ToString(value: Int32; radix: Int32): string;
    ///<summary>
    ///  将指定 <see cref="T:System.UInt32" />
    ///  值赋给 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///  <param name="radix">
    ///  返回的值的基数。
    ///  基类必须是 2、 8、 10 或 16。
    ///</param>
    ///<returns>
    ///  以 <paramref name="value" />
    ///  为基数的 <paramref name="radix" />
    ///  的字符串表示形式。
    ///</returns>
    function UInt32ToString(value: UInt32; radix: Int32): string;
    ///<summary>
    ///  将指定 <see cref="T:System.Int64" />
    ///  值赋给 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///  <param name="radix">
    ///  返回的值的基数。
    ///  基类必须是 2、 8、 10 或 16。
    ///</param>
    ///<returns>
    ///  以 <paramref name="value" />
    ///  为基数的 <paramref name="radix" />
    ///  的字符串表示形式。
    ///</returns>
    function Int64ToString(value: Int64; radix: Int32): string;
    ///<summary>
    ///  将指定 <see cref="T:System.UInt64" />
    ///  值赋给 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///  <param name="radix">
    ///  返回的值的基数。
    ///  基类必须是 2、 8、 10 或 16。
    ///</param>
    ///<returns>
    ///  以 <paramref name="value" />
    ///  为基数的 <paramref name="radix" />
    ///  的字符串表示形式。
    ///</returns>
    function UInt64ToString(value: UInt64; radix: Int32): string;
    ///<summary>
    ///  将指定 <see cref="T:System.Single" />
    ///  值赋给 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns><paramref name="value" />
    ///  的字符串表示形式。
    ///</returns>
    function SingleToString(value: Single): string;
    ///<summary>
    ///  将指定 <see cref="T:System.Double" />
    ///  值赋给 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns><paramref name="value" />
    ///  的字符串表示形式。
    ///</returns>
    function DoubleToString(value: Double): string;
    ///<summary>
    ///  创建的字符串表示形式指定 <see cref="T:System.Double" />
    ///  。
    ///  字符串表示形式包含在一周、 月份、 日期、 时间、 时区和年的某一天。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns><paramref name="value" />
    ///  的字符串表示形式。
    ///</returns>
    function DoubleToDateString(value: Double): string;
    ///<summary>
    ///  指定正则表达式将信息转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="source">
    ///  要匹配的正则表达式模式。
    ///</param>
    ///  <param name="ignoreCase"><see langword="true" />
    ///  若要使用不区分大小写匹配;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="global"><see langword="true" />
    ///  若要使用全局匹配项，则否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="multiline"><see langword="true" />
    ///  若要使用多行匹配项，则否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  字符串表示形式的正则表达式的信息。
    ///</returns>
    function RegexpToString(source: string; ignoreCase: Boolean; global: Boolean; multiline: Boolean): string;
    ///<summary>
    ///  将指定 <see cref="T:System.Decimal" />
    ///  值赋给 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns><paramref name="value" />
    ///  的字符串表示形式。
    ///</returns>
    function DecimalToString(value: DDN.mscorlib.DNDecimal): string;
    ///<summary>
    ///  创建具有指定的基元值的托管的对象。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns><paramref name="value" />
    ///  转换为托管 <see cref="T:System.Object" />
    ///  。
    ///</returns>
    function GetManagedObject(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    ///<summary>
    ///  创建一个具有指定的基元的托管的对象 <see cref="T:System.Int64" />
    ///  值。
    ///</summary>
    ///  <param name="i">
    ///  要转换的值。
    ///</param>
    ///<returns><paramref name="i" />
    ///  转换为 <see cref="T:System.Object" />
    ///  。
    ///</returns>
    function GetManagedInt64Object(i: Int64): DDN.mscorlib.DNObject;
    ///<summary>
    ///  创建一个具有指定的基元的托管的对象 <see cref="T:System.UInt64" />
    ///  值。
    ///</summary>
    ///  <param name="i">
    ///  要转换的值。
    ///</param>
    ///<returns><paramref name="i" />
    ///  转换为 <see cref="T:System.Object" />
    ///  。
    ///</returns>
    function GetManagedUInt64Object(i: UInt64): DDN.mscorlib.DNObject;
    ///<summary>
    ///  创建一个具有指定的基元的托管的对象 <see cref="T:System.Char" />
    ///  值。
    ///</summary>
    ///  <param name="i">
    ///  要转换的值。
    ///</param>
    ///<returns><paramref name="i" />
    ///  转换为 <see cref="T:System.Char" />
    ///  然后 <see cref="T:System.Object" />
    ///  。
    ///</returns>
    function GetManagedCharObject(i: UInt16): DDN.mscorlib.DNObject;
    ///<summary>
    ///  将转换指定<see cref="T:System.Boolean" />
    ///  值赋给<see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns>
    ///  文字字符串"true"或文字字符串"false"。
    ///</returns>
    function BooleanToString(value: Boolean): string;
    ///<summary>
    ///  将指定 <see cref="T:System.String" />
    ///  到 <see cref="T:System.String" />
    ///  包含不可打印的字符的转义符。
    ///</summary>
    ///  <param name="source">
    ///  要转换的值。
    ///</param>
    ///<returns>
    ///  字符串表示形式 <paramref name="source" />
    ///  包含转义字符。
    ///</returns>
    function StringToPrintable(source: string): string;
    ///<summary>
    ///  获取错误消息，它是创建从指定 <see cref="P:System.Exception.HResult" />
    ///  和 <see cref="T:System.Globalization.CultureInfo" />
    ///  指定 <see cref="T:Microsoft.JScript.Vsa.IJSVsaEngine" />
    ///  。
    ///</summary>
    ///  <param name="hr">
    ///  HRESULT 错误代码。
    ///</param>
    ///  <param name="engine">
    ///  对脚本引擎的引用。
    ///</param>
    ///<returns>
    ///  包含有关错误的信息的本地化的字符串。
    ///</returns>
    function GetErrorMessageForHR(hr: Int32; engine: DNIJSVsaEngine): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDebugConvert = class(TDNGenericImport<DNDebugConvertClass, DNDebugConvert>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNDocumentContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4B05B6D5-CEBC-5A10-8DC7-E293EA4474B0}']
  end;

  ///<summary>
  ///  表示在 JScript 语言中编写的源代码文件。
  ///</summary>
  [DNTypeName('Microsoft.JScript.DocumentContext')]
  DNDocumentContext = interface(DDN.mscorlib.DNObject)
  ['{3A627B6C-389F-3E71-8530-E61A58624241}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDocumentContext = class(TDNGenericImport<DNDocumentContextClass, DNDocumentContext>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNDynamicFieldInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{06B9A23F-9C61-5A50-B7D9-8DEC0F66B2F1}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:Microsoft.JScript.DynamicFieldInfo" />
    ///  类，使用指定的名称和值。
    ///</summary>
    ///  <param name="name">
    ///  字段的名称。
    ///</param>
    ///  <param name="value">
    ///  字段的值。
    ///</param>
    {class} function init(name: string; value: DDN.mscorlib.DNObject): DNDynamicFieldInfo; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:Microsoft.JScript.DynamicFieldInfo" />
    ///  类，使用指定的名称、 值和类型。
    ///</summary>
    ///  <param name="name">
    ///  字段的名称。
    ///</param>
    ///  <param name="value">
    ///  字段的值。
    ///</param>
    ///  <param name="fieldTypeName">
    ///  字段的类型。
    ///</param>
    {class} function init(name: string; value: DDN.mscorlib.DNObject; fieldTypeName: string): DNDynamicFieldInfo; overload;

  end;

  ///<summary>
  ///  表示字段的信息。
  ///  此类用于 expando 类和脚本数组的字段返回给调试器。
  ///</summary>
  [DNTypeName('Microsoft.JScript.DynamicFieldInfo')]
  DNDynamicFieldInfo = interface(DDN.mscorlib.DNObject)
  ['{3817377F-3A3F-3D14-A718-2B5C04C83053}']
  { fields getter & setter } 

   function __fakeFieldGet_name: string;
   procedure __fakeFieldSet_name(value: string);
   function __fakeFieldGet_value: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_value(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_fieldTypeName: string;
   procedure __fakeFieldSet_fieldTypeName(value: string);

  { fields } 

    ///<summary>
    ///  字段的名称。
    ///</summary>
   property name: string read __fakeFieldGet_name write __fakeFieldSet_name;
    ///<summary>
    ///  字段的值。
    ///</summary>
   property value: DDN.mscorlib.DNObject read __fakeFieldGet_value write __fakeFieldSet_value;
    ///<summary>
    ///  字段的类型。
    ///</summary>
   property fieldTypeName: string read __fakeFieldGet_fieldTypeName write __fakeFieldSet_fieldTypeName;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDynamicFieldInfo = class(TDNGenericImport<DNDynamicFieldInfoClass, DNDynamicFieldInfo>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNEmptyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DBE6CE07-6911-59EE-B210-5B9F43B23D75}']
  { static fields getter & setter } 

   function __fakeFieldGet_Value: DNEmpty;

  { static fields } 

    ///<summary>
    ///  指定未实例化的变量的值。
    ///</summary>
    {class} property Value: DNEmpty read __fakeFieldGet_Value;

  end;

  ///<summary>
  ///  表示未实例化的变量的值。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Empty')]
  DNEmpty = interface(DDN.mscorlib.DNObject)
  ['{5074E5D6-7664-353F-AD24-4DE4876CCDF8}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEmpty = class(TDNGenericImport<DNEmptyClass, DNEmpty>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNFieldAccessorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B6C106BE-8AE6-5A37-8EBA-461CEDF007E8}']
  end;

  ///<summary>
  ///  表示字段访问器。
  ///</summary>
  [DNTypeName('Microsoft.JScript.FieldAccessor')]
  DNFieldAccessor = interface(DDN.mscorlib.DNObject)
  ['{444F0AA4-FBA4-3067-8CF0-0A8DEA7D5DAF}']
  { methods } 

    ///<summary>
    ///  当在派生类中重写，获取指定对象的字段值。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  为字段的值 <paramref name="thisob" />
    ///  。
    ///</returns>
    function GetValue(thisob: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    ///<summary>
    ///  当在派生类中重写，将设置为指定的对象的字段指定的值。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="value">
    ///  要设置为该字段的值。
    ///</param>
    procedure SetValue(thisob: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFieldAccessor = class(TDNGenericImport<DNFieldAccessorClass, DNFieldAccessor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNGlobalObjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7656D4C9-9CC3-56FE-A5F5-7F60A16B292D}']
  { static getter & setter } 

    {class} function get_ActiveXObject: DNActiveXObjectConstructor;
    {class} function get_Array: DNArrayConstructor;
    {class} function get_boolean: DDN.mscorlib.DNType;
    {class} function get_byte: DDN.mscorlib.DNType;
    {class} function get_char: DDN.mscorlib.DNType;
    {class} function get_Date: DNDateConstructor;
    {class} function get_decimal: DDN.mscorlib.DNType;
    {class} function get_double: DDN.mscorlib.DNType;
    {class} function get_Enumerator: DNEnumeratorConstructor;
    {class} function get_Error: DNErrorConstructor;
    {class} function get_EvalError: DNErrorConstructor;
    {class} function get_float: DDN.mscorlib.DNType;
    {class} function get_Function: DNFunctionConstructor;
    {class} function get_int: DDN.mscorlib.DNType;
    {class} function get_long: DDN.mscorlib.DNType;
    {class} function get_Math: DNMathObject;
    {class} function get_Number: DNNumberConstructor;
    {class} function get_Object: DNObjectConstructor;
    {class} function get_RangeError: DNErrorConstructor;
    {class} function get_ReferenceError: DNErrorConstructor;
    {class} function get_RegExp: DNRegExpConstructor;
    {class} function get_sbyte: DDN.mscorlib.DNType;
    {class} function get_short: DDN.mscorlib.DNType;
    {class} function get_String: DNStringConstructor;
    {class} function get_SyntaxError: DNErrorConstructor;
    {class} function get_TypeError: DNErrorConstructor;
    {class} function get_URIError: DNErrorConstructor;
    {class} function get_VBArray: DNVBArrayConstructor;
    {class} function get_void: DDN.mscorlib.DNType;
    {class} function get_uint: DDN.mscorlib.DNType;
    {class} function get_ulong: DDN.mscorlib.DNType;
    {class} function get_ushort: DDN.mscorlib.DNType;

  { static fields getter & setter } 

   function __fakeFieldGet_undefined: DNEmpty;

  { static fields } 

    ///<summary>
    ///  表示为 null 的值。
    ///</summary>
    {class} property undefined: DNEmpty read __fakeFieldGet_undefined;

  { static methods } 

    ///<summary>
    ///  将解码指定统一资源标识符 (URI)，考虑保留字符。
    ///</summary>
    ///  <param name="encodedURI">
    ///  要解码的 URI。
    ///</param>
    ///<returns>
    ///  已解码的版本 <paramref name="encodedURI" />
    ///  。
    ///</returns>
    {class} function decodeURI(encodedURI: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  对指定的统一资源标识符 (URI) 进行解码。
    ///</summary>
    ///  <param name="encodedURI">
    ///  要解码的 URI。
    ///</param>
    ///<returns>
    ///  已解码的版本 <paramref name="encodedURI" />
    ///  。
    ///</returns>
    {class} function decodeURIComponent(encodedURI: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  对指定统一资源标识符 (URI)，考虑保留字符进行编码。
    ///</summary>
    ///  <param name="uri">
    ///  要编码的 URI。
    ///</param>
    ///<returns>
    ///  编码的版本 <paramref name="uri" />
    ///  。
    ///</returns>
    {class} function encodeURI(uri: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  对指定的统一资源标识符 (URI) 进行编码。
    ///</summary>
    ///  <param name="uriComponent">
    ///  要编码的 URI。
    ///</param>
    ///<returns>
    ///  编码的版本 <paramref name="uriComponent" />
    ///  。
    ///</returns>
    {class} function encodeURIComponent(uriComponent: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  引发 <see cref="F:Microsoft.JScript.JSError.IllegalEval" />
    ///  在所有情况下的异常。
    ///</summary>
    ///  <param name="x">
    ///  要计算的表达式。
    ///</param>
    ///<returns>
    ///  引发 <see cref="F:Microsoft.JScript.JSError.IllegalEval" />
    ///  在所有情况下的异常。
    ///</returns>
    {class} function eval(x: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    ///<summary>
    ///  使用名字对象或 ProgID 从非托管对象创建托管的对象。
    ///</summary>
    ///  <param name="moniker">
    ///  对象的标记。
    ///</param>
    ///  <param name="progId">
    ///  将对象的 ProgID。
    ///</param>
    ///<returns>
    ///  托管的对象。
    ///</returns>
    {class} function GetObject(moniker: DDN.mscorlib.DNObject; progId: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    ///<summary>
    ///  确定是否可为一个 JScript 的数字转换指定的数目。
    ///</summary>
    ///  <param name="num">
    ///  要检查的数字。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="num" />
    ///  可被转换为 JScript 数; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function isNaN(num: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  确定指定的数目是否表示无穷大。
    ///</summary>
    ///  <param name="number">
    ///  要检查的数字。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="number" />
    ///  不是 <see cref="F:System.Double.NaN" />
    ///  , ，而不 <see cref="F:System.Double.PositiveInfinity" />
    ///  , ，而不 <see cref="F:System.Double.NegativeInfinity" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function isFinite(number: Double): Boolean;
    ///<summary>
    ///  指定将字符串转换为其 <see cref="T:System.Double" />
    ///  等效。
    ///</summary>
    ///  <param name="string">
    ///  要转换的字符串。
    ///</param>
    ///<returns>
    ///  中包含的值相等的值 <paramref name="string" />
    ///  。
    ///</returns>
    {class} function parseFloat(&string: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  指定将字符串转换为其 <see cref="T:System.Double" />
    ///  等效项，使用指定的基数。
    ///</summary>
    ///  <param name="string">
    ///  要转换的字符串。
    ///</param>
    ///  <param name="radix">
    ///  一个介于之间的数字 2 和 36 表示数字系统的基数， <paramref name="string" />
    ///  以表示。
    ///  默认值为 10。
    ///</param>
    ///<returns>
    ///  一个值，它等效于中包含的值 <paramref name="string" />
    ///  。
    ///</returns>
    {class} function parseInt(&string: DDN.mscorlib.DNObject; radix: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  获取脚本引擎的内部版本号。
    ///</summary>
    ///<returns>
    ///  脚本引擎的内部版本号。
    ///</returns>
    {class} function ScriptEngineBuildVersion: Int32;
    ///<summary>
    ///  获取脚本引擎的主版本号。
    ///</summary>
    ///<returns>
    ///  脚本引擎的主要版本号。
    ///</returns>
    {class} function ScriptEngineMajorVersion: Int32;
    ///<summary>
    ///  获取脚本引擎的次版本号。
    ///</summary>
    ///<returns>
    ///  脚本引擎的次版本号。
    ///</returns>
    {class} function ScriptEngineMinorVersion: Int32;
    ///<summary>
    ///  转换为 %的转义字符 (@，*，_、 +、-，。，/) 中对其原始形式的指定字符串。
    ///  转义的字符都以 Unicode 表示法表示。
    ///</summary>
    ///  <param name="string">
    ///  要转换的字符串。
    ///</param>
    ///<returns>
    ///  一份新 <paramref name="string" />
    ///  中而转义的字符转换为其原始格式。
    ///</returns>
    {class} function unescape(&string: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  调用垃圾回收器。
    ///</summary>
    {class} procedure CollectGarbage;
    ///<summary>
    ///  转换指定的字符串使用 %字符进行转义保留的字符 (@，*，_、 +、-、。，/) 和 express 以 Unicode 表示法。
    ///</summary>
    ///  <param name="string">
    ///  要转换的字符串。
    ///</param>
    ///<returns>
    ///  一份新 <paramref name="string" />
    ///  中并以 Unicode 表示的由 %字符转义保留的字符是。
    ///</returns>
    {class} function escape(&string: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  获取脚本引擎的名称。
    ///</summary>
    ///<returns>
    ///  字符串文字"JScript"。
    ///</returns>
    {class} function ScriptEngine: string;

  { static propertys } 

    ///<summary>
    ///  获取对<see cref="T:Microsoft.JScript.ActiveXObjectConstructor" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  对引用<see cref="T:Microsoft.JScript.ActiveXObjectConstructor" />
    ///  对象。
    ///</returns>
    {class} property ActiveXObject: DNActiveXObjectConstructor read get_ActiveXObject;
    ///<summary>
    ///  获取对<see cref="T:Microsoft.JScript.ArrayConstructor" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  对引用<see cref="T:Microsoft.JScript.ArrayConstructor" />
    ///  对象。
    ///</returns>
    {class} property &Array: DNArrayConstructor read get_Array;
    ///<summary>
    ///  获取与 JScript <see langword="boolean" />
    ///  数据类型相对应的托管类型。
    ///</summary>
    ///<returns>
    ///  与 JScript <see langword="boolean" />
    ///  数据类型相对应的托管类型。
    ///</returns>
    {class} property boolean: DDN.mscorlib.DNType read get_boolean;
    ///<summary>
    ///  获取相对应的托管的类型与 JScript<see langword="byte" />
    ///  数据类型。
    ///</summary>
    ///<returns>
    ///  与 JScript 相对应的托管的类型<see langword="byte" />
    ///  数据类型。
    ///</returns>
    {class} property byte: DDN.mscorlib.DNType read get_byte;
    ///<summary>
    ///  获取相对应的托管的类型与 JScript<see langword="char" />
    ///  数据类型。
    ///</summary>
    ///<returns>
    ///  与 JScript 相对应的托管的类型<see langword="char" />
    ///  数据类型。
    ///</returns>
    {class} property char: DDN.mscorlib.DNType read get_char;
    ///<summary>
    ///  获取对 <see cref="T:Microsoft.JScript.DateConstructor" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  对 <see cref="T:Microsoft.JScript.DateConstructor" />
    ///  对象的引用。
    ///</returns>
    {class} property Date: DNDateConstructor read get_Date;
    ///<summary>
    ///  获取与 JScript 相对应的托管的类型 <see langword="decimal" />
    ///  数据类型。
    ///</summary>
    ///<returns>
    ///  托管的类型对应于 JScript <see langword="decimal" />
    ///  数据类型。
    ///</returns>
    {class} property decimal: DDN.mscorlib.DNType read get_decimal;
    ///<summary>
    ///  获取与 JScript 相对应的托管的类型 <see langword="double" />
    ///  数据类型。
    ///</summary>
    ///<returns>
    ///  托管的类型对应于 JScript <see langword="double" />
    ///  数据类型。
    ///</returns>
    {class} property double: DDN.mscorlib.DNType read get_double;
    ///<summary>
    ///  获取对 <see cref="T:Microsoft.JScript.EnumeratorConstructor" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  对引用 <see cref="T:Microsoft.JScript.EnumeratorConstructor" />
    ///  对象。
    ///</returns>
    {class} property Enumerator: DNEnumeratorConstructor read get_Enumerator;
    ///<summary>
    ///  获取对 <see cref="T:Microsoft.JScript.ErrorConstructor" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  对引用 <see cref="T:Microsoft.JScript.ErrorConstructor" />
    ///  对象。
    ///</returns>
    {class} property Error: DNErrorConstructor read get_Error;
    ///<summary>
    ///  获取对 <see cref="T:Microsoft.JScript.ErrorConstructor" />
    ///  对象。
    ///  对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.EvalError" />
    ///  。
    ///</summary>
    ///<returns>
    ///  对引用 <see cref="T:Microsoft.JScript.ErrorConstructor" />
    ///  对象。
    ///  对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.EvalError" />
    ///  。
    ///</returns>
    {class} property EvalError: DNErrorConstructor read get_EvalError;
    ///<summary>
    ///  获取与 JScript 相对应的托管的类型 <see langword="float" />
    ///  数据类型。
    ///</summary>
    ///<returns>
    ///  托管的类型对应于 JScript <see langword="float" />
    ///  数据类型。
    ///</returns>
    {class} property float: DDN.mscorlib.DNType read get_float;
    ///<summary>
    ///  获取对 <see cref="T:Microsoft.JScript.FunctionConstructor" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  对 <see cref="T:Microsoft.JScript.FunctionConstructor" />
    ///  对象的引用。
    ///</returns>
    {class} property &Function: DNFunctionConstructor read get_Function;
    ///<summary>
    ///  获取与 JScript 相对应的托管的类型 <see langword="int" />
    ///  数据类型。
    ///</summary>
    ///<returns>
    ///  托管的类型对应于 JScript <see langword="int" />
    ///  数据类型。
    ///</returns>
    {class} property int: DDN.mscorlib.DNType read get_int;
    ///<summary>
    ///  获取与 JScript 相对应的托管的类型 <see langword="long" />
    ///  数据类型。
    ///</summary>
    ///<returns>
    ///  托管的类型对应于 JScript <see langword="long" />
    ///  数据类型。
    ///</returns>
    {class} property long: DDN.mscorlib.DNType read get_long;
    ///<summary>
    ///  获取对 <see cref="T:Microsoft.JScript.MathObject" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  对 <see cref="T:Microsoft.JScript.MathObject" />
    ///  对象的引用。
    ///</returns>
    {class} property Math: DNMathObject read get_Math;
    ///<summary>
    ///  获取对 <see cref="T:Microsoft.JScript.NumberConstructor" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  对 <see cref="T:Microsoft.JScript.NumberConstructor" />
    ///  对象的引用。
    ///</returns>
    {class} property Number: DNNumberConstructor read get_Number;
    ///<summary>
    ///  获取对 <see cref="T:Microsoft.JScript.ObjectConstructor" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  对引用 <see cref="T:Microsoft.JScript.ObjectConstructor" />
    ///  对象。
    ///</returns>
    {class} property &Object: DNObjectConstructor read get_Object;
    ///<summary>
    ///  获取对 <see cref="T:Microsoft.JScript.ErrorConstructor" />
    ///  对象。
    ///  对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.RangeError" />
    ///  。
    ///</summary>
    ///<returns>
    ///  对引用 <see cref="T:Microsoft.JScript.ErrorConstructor" />
    ///  对象。
    ///  对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.RangeError" />
    ///  。
    ///</returns>
    {class} property RangeError: DNErrorConstructor read get_RangeError;
    ///<summary>
    ///  获取对 <see cref="T:Microsoft.JScript.ErrorConstructor" />
    ///  对象。
    ///  对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.ReferenceError" />
    ///  。
    ///</summary>
    ///<returns>
    ///  对引用 <see cref="T:Microsoft.JScript.ErrorConstructor" />
    ///  对象。
    ///  对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.ReferenceError" />
    ///  。
    ///</returns>
    {class} property ReferenceError: DNErrorConstructor read get_ReferenceError;
    ///<summary>
    ///  获取对 <see cref="T:Microsoft.JScript.RegExpConstructor" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  对 <see cref="T:Microsoft.JScript.RegExpConstructor" />
    ///  对象的引用。
    ///</returns>
    {class} property RegExp: DNRegExpConstructor read get_RegExp;
    ///<summary>
    ///  获取与 JScript 相对应的托管的类型 <see langword="sbyte" />
    ///  数据类型。
    ///</summary>
    ///<returns>
    ///  托管的类型对应于 JScript <see langword="sbyte" />
    ///  数据类型。
    ///</returns>
    {class} property sbyte: DDN.mscorlib.DNType read get_sbyte;
    ///<summary>
    ///  获取与 JScript 相对应的托管的类型 <see langword="short" />
    ///  数据类型。
    ///</summary>
    ///<returns>
    ///  托管的类型对应于 JScript <see langword="short" />
    ///  数据类型。
    ///</returns>
    {class} property short: DDN.mscorlib.DNType read get_short;
    ///<summary>
    ///  获取对 <see cref="T:Microsoft.JScript.StringConstructor" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  对 <see cref="T:Microsoft.JScript.StringConstructor" />
    ///  对象的引用。
    ///</returns>
    {class} property &String: DNStringConstructor read get_String;
    ///<summary>
    ///  获取对 <see cref="T:Microsoft.JScript.ErrorConstructor" />
    ///  对象。
    ///  对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.SyntaxError" />
    ///  。
    ///</summary>
    ///<returns>
    ///  对引用 <see cref="T:Microsoft.JScript.ErrorConstructor" />
    ///  对象。
    ///  对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.SyntaxError" />
    ///  。
    ///</returns>
    {class} property SyntaxError: DNErrorConstructor read get_SyntaxError;
    ///<summary>
    ///  获取对 <see cref="T:Microsoft.JScript.ErrorConstructor" />
    ///  对象。
    ///  对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.TypeError" />
    ///  。
    ///</summary>
    ///<returns>
    ///  对引用 <see cref="T:Microsoft.JScript.ErrorConstructor" />
    ///  对象。
    ///  对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.TypeError" />
    ///  。
    ///</returns>
    {class} property TypeError: DNErrorConstructor read get_TypeError;
    ///<summary>
    ///  获取对 <see cref="T:Microsoft.JScript.ErrorConstructor" />
    ///  对象。
    ///  对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.URIError" />
    ///  。
    ///</summary>
    ///<returns>
    ///  对引用 <see cref="T:Microsoft.JScript.ErrorConstructor" />
    ///  对象。
    ///  对象初始化为 <see cref="F:Microsoft.JScript.ErrorType.URIError" />
    ///  。
    ///</returns>
    {class} property URIError: DNErrorConstructor read get_URIError;
    ///<summary>
    ///  获取对 <see cref="T:Microsoft.JScript.VBArrayConstructor" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  对 <see cref="T:Microsoft.JScript.VBArrayConstructor" />
    ///  对象的引用。
    ///</returns>
    {class} property VBArray: DNVBArrayConstructor read get_VBArray;
    ///<summary>
    ///  不返回值的函数的返回值获取相对应的托管的类型。
    ///</summary>
    ///<returns>
    ///  不返回值的函数的返回值相对应的托管的类型。
    ///</returns>
    {class} property void: DDN.mscorlib.DNType read get_void;
    ///<summary>
    ///  获取与 JScript 相对应的托管的类型 <see langword="uint" />
    ///  数据类型。
    ///</summary>
    ///<returns>
    ///  托管的类型对应于 JScript <see langword="uint" />
    ///  数据类型。
    ///</returns>
    {class} property uint: DDN.mscorlib.DNType read get_uint;
    ///<summary>
    ///  获取与 JScript 相对应的托管的类型 <see langword="ulong" />
    ///  数据类型。
    ///</summary>
    ///<returns>
    ///  托管的类型对应于 JScript <see langword="ulong" />
    ///  数据类型。
    ///</returns>
    {class} property ulong: DDN.mscorlib.DNType read get_ulong;
    ///<summary>
    ///  获取与 JScript 相对应的托管的类型 <see langword="ushort" />
    ///  数据类型。
    ///</summary>
    ///<returns>
    ///  托管的类型对应于 JScript <see langword="ushort" />
    ///  数据类型。
    ///</returns>
    {class} property ushort: DDN.mscorlib.DNType read get_ushort;
  end;

  ///<summary>
  ///  将存储常量、 数据类型信息、 实用程序功能和对基于原型的对象的引用。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.GlobalObject')]
  DNGlobalObject = interface(DDN.mscorlib.DNObject)
  ['{80EC4A20-8CF6-3223-9102-EC1D274704D7}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGlobalObject = class(TDNGenericImport<DNGlobalObjectClass, DNGlobalObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNLenientGlobalObjectClass = interface(DNGlobalObjectClass)
  ['{1789A73A-3D4A-50BF-9428-4200EEA71979}']
  end;

  ///<summary>
  ///  存储构造函数的函数对象、 数据类型信息，以及这些对象表示的静态方法 <see cref="T:Microsoft.JScript.GlobalObject" />
  ///  类。
  ///<see cref="T:Microsoft.JScript.LenientGlobalObject" />
  ///  类属于内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.LenientGlobalObject')]
  DNLenientGlobalObject = interface(DNGlobalObject)
  ['{C41135BE-B488-3AC9-9F12-5473C316493B}']
  { getters & setters } 

    function get_ActiveXObject: DDN.mscorlib.DNObject;
    procedure set_ActiveXObject(value: DDN.mscorlib.DNObject);
    function get_Array: DDN.mscorlib.DNObject;
    procedure set_Array(value: DDN.mscorlib.DNObject);
    function get_Boolean: DDN.mscorlib.DNObject;
    procedure set_Boolean(value: DDN.mscorlib.DNObject);
    function get_Date: DDN.mscorlib.DNObject;
    procedure set_Date(value: DDN.mscorlib.DNObject);
    function get_Enumerator: DDN.mscorlib.DNObject;
    procedure set_Enumerator(value: DDN.mscorlib.DNObject);
    function get_Error: DDN.mscorlib.DNObject;
    procedure set_Error(value: DDN.mscorlib.DNObject);
    function get_EvalError: DDN.mscorlib.DNObject;
    procedure set_EvalError(value: DDN.mscorlib.DNObject);
    function get_Function: DDN.mscorlib.DNObject;
    procedure set_Function(value: DDN.mscorlib.DNObject);
    function get_Math: DDN.mscorlib.DNObject;
    procedure set_Math(value: DDN.mscorlib.DNObject);
    function get_Number: DDN.mscorlib.DNObject;
    procedure set_Number(value: DDN.mscorlib.DNObject);
    function get_Object: DDN.mscorlib.DNObject;
    procedure set_Object(value: DDN.mscorlib.DNObject);
    function get_RangeError: DDN.mscorlib.DNObject;
    procedure set_RangeError(value: DDN.mscorlib.DNObject);
    function get_ReferenceError: DDN.mscorlib.DNObject;
    procedure set_ReferenceError(value: DDN.mscorlib.DNObject);
    function get_RegExp: DDN.mscorlib.DNObject;
    procedure set_RegExp(value: DDN.mscorlib.DNObject);
    function get_String: DDN.mscorlib.DNObject;
    procedure set_String(value: DDN.mscorlib.DNObject);
    function get_SyntaxError: DDN.mscorlib.DNObject;
    procedure set_SyntaxError(value: DDN.mscorlib.DNObject);
    function get_TypeError: DDN.mscorlib.DNObject;
    procedure set_TypeError(value: DDN.mscorlib.DNObject);
    function get_URIError: DDN.mscorlib.DNObject;
    procedure set_URIError(value: DDN.mscorlib.DNObject);
    function get_VBArray: DDN.mscorlib.DNObject;
    procedure set_VBArray(value: DDN.mscorlib.DNObject);

  { fields getter & setter } 

   function __fakeFieldGet_Infinity: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_Infinity(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_NaN: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_NaN(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_undefined: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_undefined(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_decodeURI: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_decodeURI(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_decodeURIComponent: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_decodeURIComponent(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_encodeURI: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_encodeURI(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_encodeURIComponent: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_encodeURIComponent(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_escape: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_escape(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_eval: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_eval(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_isNaN: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_isNaN(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_isFinite: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_isFinite(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_parseInt: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_parseInt(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_parseFloat: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_parseFloat(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_GetObject: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_GetObject(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_ScriptEngine: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_ScriptEngine(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_ScriptEngineBuildVersion: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_ScriptEngineBuildVersion(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_ScriptEngineMajorVersion: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_ScriptEngineMajorVersion(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_ScriptEngineMinorVersion: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_ScriptEngineMinorVersion(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_unescape: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_unescape(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_boolean: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_boolean(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_byte: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_byte(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_char: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_char(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_decimal: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_decimal(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_double: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_double(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_float: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_float(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_int: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_int(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_long: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_long(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_sbyte: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_sbyte(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_short: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_short(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_void: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_void(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_uint: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_uint(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_ulong: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_ulong(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_ushort: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_ushort(value: DDN.mscorlib.DNObject);

  { fields } 

    ///<summary>
    ///  表示正无穷。
    ///</summary>
   property Infinity: DDN.mscorlib.DNObject read __fakeFieldGet_Infinity write __fakeFieldSet_Infinity;
    ///<summary>
    ///  表示一个值，不是数字 (NaN)。
    ///</summary>
   property NaN: DDN.mscorlib.DNObject read __fakeFieldGet_NaN write __fakeFieldSet_NaN;
    ///<summary>
    ///  表示为 null 的值。
    ///</summary>
   property undefined: DDN.mscorlib.DNObject read __fakeFieldGet_undefined write __fakeFieldSet_undefined;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.decodeURI(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
   property decodeURI: DDN.mscorlib.DNObject read __fakeFieldGet_decodeURI write __fakeFieldSet_decodeURI;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.decodeURIComponent(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
   property decodeURIComponent: DDN.mscorlib.DNObject read __fakeFieldGet_decodeURIComponent write __fakeFieldSet_decodeURIComponent;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.encodeURI(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
   property encodeURI: DDN.mscorlib.DNObject read __fakeFieldGet_encodeURI write __fakeFieldSet_encodeURI;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.encodeURIComponent(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
   property encodeURIComponent: DDN.mscorlib.DNObject read __fakeFieldGet_encodeURIComponent write __fakeFieldSet_encodeURIComponent;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.escape(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
   property escape: DDN.mscorlib.DNObject read __fakeFieldGet_escape write __fakeFieldSet_escape;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.eval(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
   property eval: DDN.mscorlib.DNObject read __fakeFieldGet_eval write __fakeFieldSet_eval;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.isNaN(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
   property isNaN: DDN.mscorlib.DNObject read __fakeFieldGet_isNaN write __fakeFieldSet_isNaN;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.isFinite(System.Double)" />
    ///  方法 <see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
   property isFinite: DDN.mscorlib.DNObject read __fakeFieldGet_isFinite write __fakeFieldSet_isFinite;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.parseInt(System.Object,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
   property parseInt: DDN.mscorlib.DNObject read __fakeFieldGet_parseInt write __fakeFieldSet_parseInt;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.parseFloat(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
   property parseFloat: DDN.mscorlib.DNObject read __fakeFieldGet_parseFloat write __fakeFieldSet_parseFloat;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.GetObject(System.Object,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
   property GetObject: DDN.mscorlib.DNObject read __fakeFieldGet_GetObject write __fakeFieldSet_GetObject;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngine" />
    ///  方法 <see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
   property ScriptEngine: DDN.mscorlib.DNObject read __fakeFieldGet_ScriptEngine write __fakeFieldSet_ScriptEngine;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngineBuildVersion" />
    ///  方法 <see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
   property ScriptEngineBuildVersion: DDN.mscorlib.DNObject read __fakeFieldGet_ScriptEngineBuildVersion write __fakeFieldSet_ScriptEngineBuildVersion;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngineMajorVersion" />
    ///  方法 <see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
   property ScriptEngineMajorVersion: DDN.mscorlib.DNObject read __fakeFieldGet_ScriptEngineMajorVersion write __fakeFieldSet_ScriptEngineMajorVersion;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.ScriptEngineMinorVersion" />
    ///  方法 <see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
   property ScriptEngineMinorVersion: DDN.mscorlib.DNObject read __fakeFieldGet_ScriptEngineMinorVersion write __fakeFieldSet_ScriptEngineMinorVersion;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.GlobalObject.unescape(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.GlobalObject" />
    ///  类。
    ///</summary>
   property unescape: DDN.mscorlib.DNObject read __fakeFieldGet_unescape write __fakeFieldSet_unescape;
    ///<summary>
    ///  将存储与 JScript 相对应的托管的类型<see langword="boolean" />
    ///  数据类型。
    ///</summary>
   property boolean: DDN.mscorlib.DNObject read __fakeFieldGet_boolean write __fakeFieldSet_boolean;
    ///<summary>
    ///  将存储与 JScript 相对应的托管的类型<see langword="byte" />
    ///  数据类型。
    ///</summary>
   property byte: DDN.mscorlib.DNObject read __fakeFieldGet_byte write __fakeFieldSet_byte;
    ///<summary>
    ///  将存储与 JScript 相对应的托管的类型<see langword="char" />
    ///  数据类型。
    ///</summary>
   property char: DDN.mscorlib.DNObject read __fakeFieldGet_char write __fakeFieldSet_char;
    ///<summary>
    ///  将存储的托管的类型对应于 JScript <see langword="decimal" />
    ///  数据类型。
    ///</summary>
   property decimal: DDN.mscorlib.DNObject read __fakeFieldGet_decimal write __fakeFieldSet_decimal;
    ///<summary>
    ///  将存储的托管的类型对应于 JScript <see langword="double" />
    ///  数据类型。
    ///</summary>
   property double: DDN.mscorlib.DNObject read __fakeFieldGet_double write __fakeFieldSet_double;
    ///<summary>
    ///  将存储的托管的类型对应于 JScript <see langword="float" />
    ///  数据类型。
    ///</summary>
   property float: DDN.mscorlib.DNObject read __fakeFieldGet_float write __fakeFieldSet_float;
    ///<summary>
    ///  将存储的托管的类型对应于 JScript <see langword="int" />
    ///  数据类型。
    ///</summary>
   property int: DDN.mscorlib.DNObject read __fakeFieldGet_int write __fakeFieldSet_int;
    ///<summary>
    ///  将存储的托管的类型对应于 JScript <see langword="long" />
    ///  数据类型。
    ///</summary>
   property long: DDN.mscorlib.DNObject read __fakeFieldGet_long write __fakeFieldSet_long;
    ///<summary>
    ///  将存储的托管的类型对应于 JScript <see langword="sbyte" />
    ///  数据类型。
    ///</summary>
   property sbyte: DDN.mscorlib.DNObject read __fakeFieldGet_sbyte write __fakeFieldSet_sbyte;
    ///<summary>
    ///  将存储的托管的类型对应于 JScript <see langword="short" />
    ///  数据类型。
    ///</summary>
   property short: DDN.mscorlib.DNObject read __fakeFieldGet_short write __fakeFieldSet_short;
    ///<summary>
    ///  存储不返回值的函数的返回值对应的托管的类型。
    ///</summary>
   property void: DDN.mscorlib.DNObject read __fakeFieldGet_void write __fakeFieldSet_void;
    ///<summary>
    ///  将存储的托管的类型对应于 JScript <see langword="uint" />
    ///  数据类型。
    ///</summary>
   property uint: DDN.mscorlib.DNObject read __fakeFieldGet_uint write __fakeFieldSet_uint;
    ///<summary>
    ///  将存储的托管的类型对应于 JScript <see langword="ulong" />
    ///  数据类型。
    ///</summary>
   property ulong: DDN.mscorlib.DNObject read __fakeFieldGet_ulong write __fakeFieldSet_ulong;
    ///<summary>
    ///  将存储的托管的类型对应于 JScript <see langword="ushort" />
    ///  数据类型。
    ///</summary>
   property ushort: DDN.mscorlib.DNObject read __fakeFieldGet_ushort write __fakeFieldSet_ushort;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置由定义的基于原型的对象<see cref="T:Microsoft.JScript.ActiveXObjectConstructor" />
    ///  构造函数的函数对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:Microsoft.JScript.ActiveXObjectConstructor" />
    ///  对象。
    ///</returns>
    property ActiveXObject: DDN.mscorlib.DNObject read get_ActiveXObject write set_ActiveXObject;
    ///<summary>
    ///  获取或设置由定义的基于原型的对象<see cref="T:Microsoft.JScript.ArrayConstructor" />
    ///  构造函数的函数对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:Microsoft.JScript.ArrayConstructor" />
    ///  对象。
    ///</returns>
    property &Array: DDN.mscorlib.DNObject read get_Array write set_Array;
    ///<summary>
    ///  获取或设置由定义的基于原型的对象<see cref="T:Microsoft.JScript.BooleanConstructor" />
    ///  构造函数的函数对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:Microsoft.JScript.BooleanConstructor" />
    ///  对象。
    ///</returns>
    property Boolean: DDN.mscorlib.DNObject read get_Boolean write set_Boolean;
    ///<summary>
    ///  获取或设置基于原型的对象，该对象由定义 <see cref="T:Microsoft.JScript.LenientDateConstructor" />
    ///  构造函数对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:Microsoft.JScript.LenientDateConstructor" />
    ///  对象。
    ///</returns>
    property Date: DDN.mscorlib.DNObject read get_Date write set_Date;
    ///<summary>
    ///  获取或设置一个基于原型的对象定义的 <see cref="T:Microsoft.JScript.EnumeratorConstructor" />
    ///  构造函数对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:Microsoft.JScript.EnumeratorConstructor" />
    ///  对象。
    ///</returns>
    property Enumerator: DDN.mscorlib.DNObject read get_Enumerator write set_Enumerator;
    ///<summary>
    ///  获取或设置一个基于原型的对象定义的 <see cref="T:Microsoft.JScript.ErrorConstructor" />
    ///  构造函数对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:Microsoft.JScript.ErrorConstructor" />
    ///  对象。
    ///</returns>
    property Error: DDN.mscorlib.DNObject read get_Error write set_Error;
    ///<summary>
    ///  获取或设置一个基于原型的对象定义的 <see cref="T:Microsoft.JScript.ErrorConstructor" />
    ///  构造函数对象，并且被初始化为 <see cref="F:Microsoft.JScript.ErrorType.EvalError" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:Microsoft.JScript.ErrorConstructor" />
    ///  对象。
    ///</returns>
    property EvalError: DDN.mscorlib.DNObject read get_EvalError write set_EvalError;
    ///<summary>
    ///  获取或设置基于原型的对象，该对象由定义 <see cref="T:Microsoft.JScript.FunctionConstructor" />
    ///  构造函数对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:Microsoft.JScript.FunctionConstructor" />
    ///  对象。
    ///</returns>
    property &Function: DDN.mscorlib.DNObject read get_Function write set_Function;
    ///<summary>
    ///  获取或设置 <see cref="T:Microsoft.JScript.LenientMathObject" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:Microsoft.JScript.LenientMathObject" />
    ///  对象。
    ///</returns>
    property Math: DDN.mscorlib.DNObject read get_Math write set_Math;
    ///<summary>
    ///  获取或设置基于原型的对象，该对象由定义 <see cref="T:Microsoft.JScript.NumberConstructor" />
    ///  构造函数对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:Microsoft.JScript.NumberConstructor" />
    ///  对象。
    ///</returns>
    property Number: DDN.mscorlib.DNObject read get_Number write set_Number;
    ///<summary>
    ///  获取或设置一个基于原型的对象定义的 <see cref="T:Microsoft.JScript.ObjectConstructor" />
    ///  构造函数对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:Microsoft.JScript.ObjectConstructor" />
    ///  对象。
    ///</returns>
    property &Object: DDN.mscorlib.DNObject read get_Object write set_Object;
    ///<summary>
    ///  获取或设置一个基于原型的对象定义的 <see cref="T:Microsoft.JScript.ErrorConstructor" />
    ///  构造函数对象，并且被初始化为 <see cref="F:Microsoft.JScript.ErrorType.RangeError" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:Microsoft.JScript.ErrorConstructor" />
    ///  对象。
    ///</returns>
    property RangeError: DDN.mscorlib.DNObject read get_RangeError write set_RangeError;
    ///<summary>
    ///  获取或设置一个基于原型的对象定义的 <see cref="T:Microsoft.JScript.ErrorConstructor" />
    ///  构造函数对象，并且被初始化为 <see cref="F:Microsoft.JScript.ErrorType.ReferenceError" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:Microsoft.JScript.ErrorConstructor" />
    ///  对象。
    ///</returns>
    property ReferenceError: DDN.mscorlib.DNObject read get_ReferenceError write set_ReferenceError;
    ///<summary>
    ///  获取或设置基于原型的对象，该对象由定义 <see cref="T:Microsoft.JScript.RegExpConstructor" />
    ///  构造函数对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:Microsoft.JScript.RegExpConstructor" />
    ///  对象。
    ///</returns>
    property RegExp: DDN.mscorlib.DNObject read get_RegExp write set_RegExp;
    ///<summary>
    ///  获取或设置基于原型的对象，该对象由定义 <see cref="T:Microsoft.JScript.LenientStringConstructor" />
    ///  构造函数对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:Microsoft.JScript.LenientStringConstructor" />
    ///  对象。
    ///</returns>
    property &String: DDN.mscorlib.DNObject read get_String write set_String;
    ///<summary>
    ///  获取或设置一个基于原型的对象定义的 <see cref="T:Microsoft.JScript.ErrorConstructor" />
    ///  构造函数对象，并且被初始化为 <see cref="F:Microsoft.JScript.ErrorType.SyntaxError" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:Microsoft.JScript.ErrorConstructor" />
    ///  对象。
    ///</returns>
    property SyntaxError: DDN.mscorlib.DNObject read get_SyntaxError write set_SyntaxError;
    ///<summary>
    ///  获取或设置一个基于原型的对象定义的 <see cref="T:Microsoft.JScript.ErrorConstructor" />
    ///  构造函数对象，并且被初始化为 <see cref="F:Microsoft.JScript.ErrorType.TypeError" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:Microsoft.JScript.ErrorConstructor" />
    ///  对象。
    ///</returns>
    property TypeError: DDN.mscorlib.DNObject read get_TypeError write set_TypeError;
    ///<summary>
    ///  获取或设置一个基于原型的对象定义的 <see cref="T:Microsoft.JScript.ErrorConstructor" />
    ///  构造函数对象，并且被初始化为 <see cref="F:Microsoft.JScript.ErrorType.URIError" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:Microsoft.JScript.ErrorConstructor" />
    ///  对象。
    ///</returns>
    property URIError: DDN.mscorlib.DNObject read get_URIError write set_URIError;
    ///<summary>
    ///  获取或设置基于原型的对象，该对象由定义 <see cref="T:Microsoft.JScript.VBArrayConstructor" />
    ///  构造函数对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:Microsoft.JScript.VBArrayConstructor" />
    ///  对象。
    ///</returns>
    property VBArray: DDN.mscorlib.DNObject read get_VBArray write set_VBArray;
  end;

  TDNLenientGlobalObject = class(TDNGenericImport<DNLenientGlobalObjectClass, DNLenientGlobalObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNGlobalsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EFF2D3F7-1FE8-515B-B2F2-47B3D297E771}']
  { static fields getter & setter } 

   function __fakeFieldGet_contextEngine: DNVsaEngine;

  { static fields } 

    ///<summary>
    ///  将存储到单个的当前上下文中运行的脚本引擎的全局引用。
    ///</summary>
    {class} property contextEngine: DNVsaEngine read __fakeFieldGet_contextEngine;

  { static methods } 

    ///<summary>
    ///  提供对全局访问<see cref="M:Microsoft.JScript.ArrayConstructor.CreateInstance(System.Object[])" />
    ///  方法。
    ///</summary>
    ///  <param name="args">
    ///  要填充该数组的值。
    ///</param>
    ///<returns>
    ///  JScript 的新实例<see cref="T:Microsoft.JScript.ArrayObject" />
    ///  。
    ///</returns>
    {class} function ConstructArray(args: TArray<DDN.mscorlib.DNObject>): DNArrayObject;
    ///<summary>
    ///  提供对全局访问<see cref="M:Microsoft.JScript.ArrayConstructor.ConstructArray(System.Object[])" />
    ///  方法。
    ///</summary>
    ///  <param name="args">
    ///  要填充该数组的值。
    ///</param>
    ///<returns>
    ///  JScript 的新实例<see cref="T:Microsoft.JScript.ArrayObject" />
    ///  。
    ///</returns>
    {class} function ConstructArrayLiteral(args: TArray<DDN.mscorlib.DNObject>): DNArrayObject;

  end;

  ///<summary>
  ///  存储全局可用的所有类型的引用，并管理堆栈。
  ///  此类所属的编译和运行时状态类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Globals')]
  DNGlobals = interface(DDN.mscorlib.DNObject)
  ['{B9240DD5-30AE-3164-81A6-301AD011455B}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGlobals = class(TDNGenericImport<DNGlobalsClass, DNGlobals>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNJSAuthorClass = interface(DNObjectClass)
  ['{17CEE1BC-CCE8-5394-9CAF-CFFCBEC33362}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.JSAuthor" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNJSAuthor;

  end;

  ///<summary>
  ///  提供用于创作 JScript 代码编辑器中的服务。
  ///</summary>
  [DNTypeName('Microsoft.JScript.JSAuthor')]
  DNJSAuthor = interface(DNIAuthorServices)
  ['{0E4EFFC0-2387-11D3-B372-00105A98B7CE}']
  { methods } 

    ///<summary>
    ///  获取用于在编辑器中创作 JScript 代码时为文本着色的对象。
    ///</summary>
    ///<returns>
    ///  一个对象，用于为文本着色。
    ///</returns>
    function GetColorizer: DNIColorizeText;
    ///<summary>
    ///  获取用于在编辑器中创作 JScript 代码时，将 IntelliSense 添加到文本的对象。
    ///</summary>
    ///<returns>
    ///  一个对象，用于将 IntelliSense 添加为文本。
    ///</returns>
    function GetCodeSense: DNIParseText;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNJSAuthor = class(TDNGenericImport<DNJSAuthorClass, DNJSAuthor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNJSParserClass = interface(DDN.mscorlib.DNObjectClass)
  ['{15EFCCD7-77CD-512F-9EFA-1E83FA8C9BCD}']
  { constructors } 

    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.JScript.JSParser" />
    ///  类，指定要分析的源代码。
    ///</summary>
    ///  <param name="context">
    ///  要分析的源代码。
    ///</param>
    {class} function init(context: DNContext): DNJSParser;

  end;

  ///<summary>
  ///  分析 JScript 代码。
  ///  此类所属的扫描和分析的类别。
  ///  有关扫描和分析的详细信息，请参阅Create a Language Compiler for the .NET Framework。
  ///</summary>
  [DNTypeName('Microsoft.JScript.JSParser')]
  DNJSParser = interface(DDN.mscorlib.DNObject)
  ['{C5D32278-DEE1-364C-B39E-5ABB805FABF6}']
  { methods } 

    ///<summary>
    ///  分析源代码。
    ///</summary>
    ///<returns>
    ///  通过分析代码创建的抽象语法树的根。
    ///</returns>
    function Parse: DNScriptBlock;
    ///<summary>
    ///  分析源代码。
    ///  使用此方法，而不是 <see cref="M:Microsoft.JScript.JSParser.Parse" />
    ///  的源代码位于 <see langword="eval" />
    ///  方法调用。
    ///</summary>
    ///<returns>
    ///  通过分析代码创建的抽象语法树的根。
    ///</returns>
    function ParseEvalBody: DNBlock;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNJSParser = class(TDNGenericImport<DNJSParserClass, DNJSParser>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNJSScannerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C66D6DA7-FBCD-56E8-8777-2B51B886EB38}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.JSScanner" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNJSScanner; overload;
    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.JScript.JSScanner" />
    ///  类，指定要扫描的源代码。
    ///</summary>
    ///  <param name="sourceContext">
    ///  要扫描的源代码。
    ///</param>
    {class} function init(sourceContext: DNContext): DNJSScanner; overload;

  { static methods } 

    ///<summary>
    ///  确定指定的标记是否 JScript 语言中的一个运算符。
    ///</summary>
    ///  <param name="token">
    ///  要检查的标记。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果该令牌是一个运算符;否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsOperator(token: DNJSToken): Boolean;
    ///<summary>
    ///  确定指定的标记是否 JScript 语言中的关键字。
    ///</summary>
    ///  <param name="token">
    ///  要检查的标记。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果该令牌是一个关键字;否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsKeyword(token: DNJSToken): Boolean;

  end;

  ///<summary>
  ///  扫描 JScript 代码的代码中，单个单元搜索或令牌。
  ///  此类所属的扫描和分析的类别。
  ///  有关扫描和分析的详细信息，请参阅Create a Language Compiler for the .NET Framework。
  ///</summary>
  [DNTypeName('Microsoft.JScript.JSScanner')]
  DNJSScanner = interface(DDN.mscorlib.DNObject)
  ['{DDADDE2D-17F4-3461-9C32-08D1E9547730}']
  { methods } 

    ///<summary>
    ///  设置一个标志，指示是否在创作模式下运行扫描程序。
    ///</summary>
    ///  <param name="mode"><see langword="true" />
    ///  若要指示创作模式;否则为 <see langword="false" />
    ///  。
    ///</param>
    procedure SetAuthoringMode(mode: Boolean);
    ///<summary>
    ///  设置要扫描的源代码。
    ///</summary>
    ///  <param name="sourceContext">
    ///  要扫描的源代码。
    ///</param>
    procedure SetSource(sourceContext: DNContext);
    ///<summary>
    ///  扫描在代码中的下一个标记。
    ///</summary>
    procedure GetNextToken;
    ///<summary>
    ///  获取代码字符串中的当前位置。
    ///  这是一个指针，它根据扫描代码时移动。
    ///</summary>
    ///  <param name="absolute">
    ///  忽略此参数。
    ///</param>
    ///<returns>
    ///  Code 字符串中的当前位置。
    ///</returns>
    function GetCurrentPosition(&absolute: Boolean): Int32;
    ///<summary>
    ///  在代码中获取当前行号。
    ///  这是一个指针，它根据扫描代码时移动。
    ///</summary>
    ///<returns>
    ///  当前在代码中的行号。
    ///</returns>
    function GetCurrentLine: Int32;
    ///<summary>
    ///  获取代码字符串中的当前代码的第一行的开始处的位置。
    ///  所有代码行都存储在单个字符串中。
    ///  这是一个指针，它根据扫描代码时移动。
    ///</summary>
    ///<returns>
    ///  Code 字符串中的当前代码的第一行的开始处的位置。
    ///</returns>
    function GetStartLinePosition: Int32;
    ///<summary>
    ///  获取一个字符串，已经过扫描并已替换为其转义序列。
    ///</summary>
    ///<returns>
    ///  一个字符串，已经过扫描并已替换为其转义序列。
    ///</returns>
    function GetStringLiteral: string;
    ///<summary>
    ///  获取与此扫描仪对象相关联的源代码。
    ///</summary>
    ///<returns>
    ///  要扫描的源代码。
    ///</returns>
    function GetSourceCode: string;
    ///<summary>
    ///  指示扫描程序扫描，或查看标记后是否达到行尾。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果已达到行尾？否则为 <see langword="false" />
    ///  。
    ///</returns>
    function GotEndOfLine: Boolean;
    ///<summary>
    ///  跳过跨越多个行，并提升识别代码中的当前位置的指针的注释。
    ///</summary>
    ///<returns>
    ///  代码字符串中新的当前位置。
    ///</returns>
    function SkipMultiLineComment: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNJSScanner = class(TDNGenericImport<DNJSScannerClass, DNJSScanner>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNLateBindingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E5D003AB-AD82-5641-9100-87318E68262F}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:Microsoft.JScript.LateBinding" />
    ///  类，使用指定的标识符。
    ///</summary>
    ///  <param name="name">
    ///  一个字符串，标识绑定引用。
    ///</param>
    {class} function init(name: string): DNLateBinding; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:Microsoft.JScript.LateBinding" />
    ///  类，使用指定的标识符和对象。
    ///</summary>
    ///  <param name="name">
    ///  一个字符串，标识绑定引用。
    ///</param>
    ///  <param name="obj">
    ///  在定义的绑定引用对象。
    ///</param>
    {class} function init(name: string; obj: DDN.mscorlib.DNObject): DNLateBinding; overload;

  { static methods } 

    ///<summary>
    ///  将该绑定引用解析通过调用成员。
    ///</summary>
    ///  <param name="thisob">
    ///  定义的绑定引用对象。
    ///</param>
    ///  <param name="val">
    ///  有关要调用的成员的信息。
    ///</param>
    ///  <param name="arguments">
    ///  要传递给的成员的参数。
    ///</param>
    ///  <param name="construct"><see langword="true" />
    ///  若要使用的构造方法;否则为<see langword="false" />
    ///  。
    ///</param>
    ///  <param name="brackets"><see langword="true" />
    ///  如果绑定引用包含方括号;否则为<see langword="false" />
    ///  。
    ///</param>
    ///  <param name="engine">
    ///  对脚本引擎的引用。
    ///</param>
    ///<returns>
    ///  对成员的调用返回值。
    ///</returns>
    {class} function CallValue(thisob: DDN.mscorlib.DNObject; val: DDN.mscorlib.DNObject; arguments: TArray<DDN.mscorlib.DNObject>; construct: Boolean; brackets: Boolean; engine: DNVsaEngine): DDN.mscorlib.DNObject;
    ///<summary>
    ///  将该绑定引用解析通过调用成员。
    ///</summary>
    ///  <param name="val">
    ///  有关要调用的成员的信息。
    ///</param>
    ///  <param name="thisob">
    ///  定义的绑定引用对象。
    ///</param>
    ///  <param name="arguments">
    ///  要传递给的成员的参数。
    ///</param>
    ///  <param name="construct"><see langword="true" />
    ///  若要使用的构造方法;否则为<see langword="false" />
    ///  。
    ///</param>
    ///  <param name="brackets"><see langword="true" />
    ///  如果绑定引用包含方括号;否则为<see langword="false" />
    ///  。
    ///</param>
    ///  <param name="engine">
    ///  对脚本引擎的引用。
    ///</param>
    ///<returns>
    ///  对成员的调用返回值。
    ///</returns>
    {class} function CallValue2(val: DDN.mscorlib.DNObject; thisob: DDN.mscorlib.DNObject; arguments: TArray<DDN.mscorlib.DNObject>; construct: Boolean; brackets: Boolean; engine: DNVsaEngine): DDN.mscorlib.DNObject;
    ///<summary>
    ///  从指定的对象中删除指定的成员。
    ///</summary>
    ///  <param name="obj">
    ///  要删除的对象。
    ///</param>
    ///  <param name="name">
    ///  要删除的成员。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果成功删除该成员;否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function DeleteMember(obj: DDN.mscorlib.DNObject; name: string): Boolean;
    ///<summary>
    ///  设置索引的属性。
    ///</summary>
    ///  <param name="obj">
    ///  在定义的绑定引用对象。
    ///</param>
    ///  <param name="arguments">
    ///  要传递给成员的参数。
    ///</param>
    ///  <param name="value">
    ///  属性的新值。
    ///</param>
    {class} procedure SetIndexedPropertyValueStatic(obj: DDN.mscorlib.DNObject; arguments: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject);

  end;

  ///<summary>
  ///  表示对类成员，可调用的表达式或变量名的引用。
  ///  此类尝试在运行时解析为正确的值的引用。
  ///</summary>
  [DNTypeName('Microsoft.JScript.LateBinding')]
  DNLateBinding = interface(DDN.mscorlib.DNObject)
  ['{5A6E4A7C-690E-3F3D-9ED2-F83A69B188A6}']
  { fields getter & setter } 

   function __fakeFieldGet_obj: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_obj(value: DDN.mscorlib.DNObject);

  { fields } 

    ///<summary>
    ///  将存储在定义的绑定引用对象的引用。
    ///</summary>
   property obj: DDN.mscorlib.DNObject read __fakeFieldGet_obj write __fakeFieldSet_obj;

  { methods } 

    ///<summary>
    ///  将该绑定引用解析通过调用成员。
    ///</summary>
    ///  <param name="arguments">
    ///  要传递给的成员的参数。
    ///</param>
    ///  <param name="construct"><see langword="true" />
    ///  若要使用的构造方法;否则为<see langword="false" />
    ///  。
    ///</param>
    ///  <param name="brackets"><see langword="true" />
    ///  如果绑定引用包含方括号;否则为<see langword="false" />
    ///  。
    ///</param>
    ///  <param name="engine">
    ///  对脚本引擎的引用。
    ///</param>
    ///<returns>
    ///  对成员的调用返回值。
    ///</returns>
    function Call(arguments: TArray<DDN.mscorlib.DNObject>; construct: Boolean; brackets: Boolean; engine: DNVsaEngine): DDN.mscorlib.DNObject;
    ///<summary>
    ///  从对象上定义的绑定引用中删除绑定引用成员。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果成功删除该成员;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Delete: Boolean;
    ///<summary>
    ///  获取绑定引用的值，并将转换 <see cref="T:Microsoft.JScript.Missing" />
    ///  值与 null。
    ///</summary>
    ///<returns>
    ///  绑定引用中; 的值否则，为 null。
    ///</returns>
    function GetNonMissingValue: DDN.mscorlib.DNObject;
    ///<summary>
    ///  获取绑定引用的值并引发异常，如果无法解析。
    ///</summary>
    ///<returns>
    ///  绑定引用的值。
    ///</returns>
    function GetValue2: DDN.mscorlib.DNObject;
    ///<summary>
    ///  设置的属性。
    ///</summary>
    ///  <param name="value">
    ///  属性的新值。
    ///</param>
    procedure SetValue(value: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNLateBinding = class(TDNGenericImport<DNLateBindingClass, DNLateBinding>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNMemberInfoListClass = interface(DDN.mscorlib.DNObjectClass)
  ['{42D09470-04A0-50F0-8526-AC06959ACE67}']
  end;

  ///<summary>
  ///  维护的列表 <see cref="T:System.Reflection.MemberInfo" />
  ///  元素。
  ///</summary>
  [DNTypeName('Microsoft.JScript.MemberInfoList')]
  DNMemberInfoList = interface(DDN.mscorlib.DNObject)
  ['{78656D44-1D21-301D-A439-F25B7AF19C0F}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMemberInfoList = class(TDNGenericImport<DNMemberInfoListClass, DNMemberInfoList>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNMethodInvokerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CF94196D-5A5B-5B3A-9C7E-0156E44F2678}']
  end;

  ///<summary>
  ///  表示特定方法的调用程序。
  ///  使用 <see cref="T:Microsoft.JScript.JSMethodInfo" />
  ///  类用于调用方法。
  ///</summary>
  [DNTypeName('Microsoft.JScript.MethodInvoker')]
  DNMethodInvoker = interface(DDN.mscorlib.DNObject)
  ['{B3D22B9C-563C-35A8-8913-D8FD1C4B2E60}']
  { methods } 

    ///<summary>
    ///  当在派生类中重写时，将调用该方法。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="parameters">
    ///  要使用的方法的参数。
    ///</param>
    ///<returns>
    ///  调用该方法的结果。
    ///</returns>
    function Invoke(thisob: DDN.mscorlib.DNObject; parameters: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMethodInvoker = class(TDNGenericImport<DNMethodInvokerClass, DNMethodInvoker>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNMissingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5EFAFC16-BC87-5166-AF18-6CFDC78D0012}']
  { static fields getter & setter } 

   function __fakeFieldGet_Value: DNMissing;

  { static fields } 

    ///<summary>
    ///  指定已实例化，但尚未设置其值的变量的值。
    ///</summary>
    {class} property Value: DNMissing read __fakeFieldGet_Value;

  end;

  ///<summary>
  ///  表示已实例化，但尚未设置其值的变量的值。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Missing')]
  DNMissing = interface(DDN.mscorlib.DNObject)
  ['{F41F265C-1C1A-384C-8803-E89CEF5B84C6}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMissing = class(TDNGenericImport<DNMissingClass, DNMissing>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNNamespaceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0448F175-8A6C-5C27-930D-3415EAA0EE4A}']
  { static methods } 

    ///<summary>
    ///  创建并返回的新实例 <see cref="T:Microsoft.JScript.Namespace" />
    ///  类。
    ///</summary>
    ///  <param name="name">
    ///  命名空间的名称。
    ///</param>
    ///  <param name="engine">
    ///  对脚本引擎的引用。
    ///</param>
    ///<returns><see cref="T:Microsoft.JScript.Namespace" />
    ///  类的新实例。
    ///</returns>
    {class} function GetNamespace(name: string; engine: DNVsaEngine): DNNamespace;

  end;

  ///<summary>
  ///  表示一个命名空间。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Namespace')]
  DNNamespace = interface(DDN.mscorlib.DNObject)
  ['{ECDA9D28-E4FB-3D6E-99BE-386D160EB0A4}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNNamespace = class(TDNGenericImport<DNNamespaceClass, DNNamespace>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNRuntimeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{18D2BA1F-FC5B-51E1-A5D2-4C2F5BFA4432}']
  { static methods } 

    ///<summary>
    ///  确定两个指定的值是否相等。
    ///</summary>
    ///  <param name="v1">
    ///  第一个操作数。
    ///</param>
    ///  <param name="v2">
    ///  第二个操作数。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果这些值是否相等。 <see langword="false" />
    ///  如果值是否不相等。
    ///</returns>
    {class} function Equals(v1: DDN.mscorlib.DNObject; v2: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  将指定 <see cref="T:System.Double" />
    ///  值赋给 <see cref="T:System.Int64" />
    ///  。
    ///</summary>
    ///  <param name="val">
    ///  要转换的值。
    ///</param>
    ///<returns><paramref name="val" />
    ///  转换为 <see cref="T:System.Int64" />
    ///  。
    ///</returns>
    {class} function DoubleToInt64(val: Double): Int64;
    ///<summary>
    ///  将指定 <see cref="T:System.Decimal" />
    ///  值赋给 <see cref="T:System.Int64" />
    ///  。
    ///</summary>
    ///  <param name="val">
    ///  要转换的值。
    ///</param>
    ///<returns><paramref name="val" />
    ///  转换为 <see cref="T:System.Int64" />
    ///  。
    ///</returns>
    {class} function UncheckedDecimalToInt64(val: DDN.mscorlib.DNDecimal): Int64;

  end;

  ///<summary>
  ///  提供实用工具函数。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Runtime')]
  DNRuntime = interface(DDN.mscorlib.DNObject)
  ['{3B1A8C90-169E-3FF8-99BD-DCEDEB0EE64C}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRuntime = class(TDNGenericImport<DNRuntimeClass, DNRuntime>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNScriptObjectClass = interface(DNObjectClass)
  ['{25925A83-7AF1-5DBA-A1F0-355419727286}']
  end;

  ///<summary>
  ///  支持的所有 JScript 类。
  ///  这是所有 JScript 类的最终基类。
  ///  此类所属的对象和函数的类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.ScriptObject')]
  DNScriptObject = interface(DDN.mscorlib.DNIReflect)
  ['{7A17A327-0E70-3064-96B7-4696BD3781AB}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

    ///<summary>
    ///  存储对脚本引擎的引用。
    ///</summary>
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  获取具有指定的名称的字段。
    ///</summary>
    ///  <param name="name">
    ///  要获取的字段的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  具有指定的字段 <paramref name="name" />
    ///  , ，或如果该脚本对象不包含该字段，则为 null。
    ///</returns>
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    ///<summary>
    ///  获取具有指定的名称的方法。
    ///</summary>
    ///  <param name="name">
    ///  要获取的方法的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  具有指定的方法 <paramref name="name" />
    ///  , ，或如果该脚本对象不包含该方法，则为 null。
    ///</returns>
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    ///<summary>
    ///  获取对父对象的引用。
    ///</summary>
    ///<returns>
    ///  对父对象的引用。
    ///</returns>
    function GetParent: DNScriptObject;
    ///<summary>
    ///  获取具有指定的名称的属性。
    ///</summary>
    ///  <param name="name">
    ///  要获取的属性的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  具有指定的属性 <paramref name="name" />
    ///  , ，或如果该脚本对象不包含该属性，则为 null。
    ///</returns>
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.FieldInfo" />
    ///  对应于当前的脚本对象的所有字段的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前的脚本对象的所有字段的对象数组。
    ///</returns>
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    ///<summary>
    ///  当在派生类中重写，获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于指定的名称匹配的所有成员的对象。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  匹配的对象的数组 <paramref name="name" />
    ///  参数。
    ///</returns>
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  当在派生类中重写，获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于当前的脚本对象的所有成员的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前的脚本对象的所有成员的对象数组。
    ///</returns>
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  获取具有指定的名称，通过使用指定的选择条件的方法。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的方法的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="types">
    ///  用于查找匹配的方法参数类型。
    ///</param>
    ///  <param name="modifiers">
    ///  使绑定能够处理的参数签名已在其中修改类型的参数修饰符的数组。
    ///</param>
    ///<returns>
    ///  具有指定的方法 <paramref name="name" />
    ///  , ，或如果该脚本对象不包含该方法，则为 null。
    ///</returns>
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MethodInfo" />
    ///  对应于当前的脚本对象的所有方法的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前的脚本对象的所有方法的对象数组。
    ///</returns>
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    ///<summary>
    ///  获取具有指定的名称，通过使用指定的选择条件的属性。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的属性的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="returnType">
    ///  该属性必须具有返回值的类型。
    ///</param>
    ///  <param name="types">
    ///  要搜索的属性索引类型。
    ///  索引化属性，例如一个类的索引器的使用。
    ///</param>
    ///  <param name="modifiers">
    ///  使绑定能够处理的参数签名已在其中修改类型的参数修饰符的数组。
    ///</param>
    ///<returns>
    ///  具有指定的属性 <paramref name="name" />
    ///  , ，或如果该脚本对象不包含该属性，则为 null。
    ///</returns>
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.PropertyInfo" />
    ///  对应于当前的脚本对象的所有属性的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前的脚本对象的所有属性的对象数组。
    ///</returns>
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    ///<summary>
    ///  调用指定的成员。
    ///</summary>
    ///  <param name="name">
    ///  要调用的成员的名称。
    ///</param>
    ///  <param name="invokeAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="target">
    ///  对其调用成员的对象。
    ///  这必须是当前的脚本对象。
    ///</param>
    ///  <param name="args">
    ///  包含要调用个数、 顺序和类型成员的参数的对象数组。
    ///  如果没有任何参数，这是一个空数组。
    ///</param>
    ///  <param name="modifiers">
    ///  具有相同的长度作为 args 参数数组。
    ///  它表示被调用的成员的元数据中的参数属性。
    ///</param>
    ///  <param name="locale">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    ///  <param name="namedParameters">
    ///  参数的数组。
    ///</param>
    ///<returns>
    ///  对该成员的调用返回值。
    ///</returns>
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    ///<summary>
    ///  获取脚本对象的类型。
    ///</summary>
    ///<returns>
    ///  该脚本对象的类型。
    ///</returns>
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNScriptObject = class(TDNGenericImport<DNScriptObjectClass, DNScriptObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNActivationObjectClass = interface(DNScriptObjectClass)
  ['{88A99B6D-DCCD-5CA3-B7CB-ED257D044747}']
  end;

  ///<summary>
  ///  表示正在一部分作用域层次结构中的对象。
  ///  此类包含用于解决作用域以及获取成员信息的方法。
  ///  它所属的编译和运行时状态类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.ActivationObject')]
  DNActivationObject = interface(DNScriptObject)
  ['{415B56B9-3259-3082-8617-3DCE26997CAB}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

    ///<summary>
    ///  存储对脚本引擎的引用。
    ///</summary>
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  返回通过搜索作用域层次结构中具有指定的名称的字段。
    ///  此方法搜索的词法级别指定的作用域。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的字段的名称。
    ///</param>
    ///  <param name="lexLevel">
    ///  要搜索的词法级别。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Reflection.FieldInfo" />
    ///  具有指定的名称的对象。
    ///</returns>
    function GetField(name: string; lexLevel: Int32): DDN.mscorlib.DNFieldInfo; overload;
    ///<summary>
    ///  获取包含的对象的当前默认作用域，可以是 <see langword="with" />
    ///  语句范围或全局范围。
    ///</summary>
    ///<returns>
    ///  当前的默认作用域。
    ///</returns>
    function GetDefaultThisObject: DDN.mscorlib.DNObject;
    ///<summary>
    ///  获取通过搜索作用域层次结构，直到它找到一个范围，包括静态变量，例如，模块作用域的全局作用域。
    ///</summary>
    ///<returns>
    ///  全局作用域。
    ///</returns>
    function GetGlobalScope: DNGlobalScope;
    ///<summary>
    ///  获取具有指定的名称的字段的局部声明。
    ///  这用于编译时错误检查。
    ///</summary>
    ///  <param name="name">
    ///  字段的名称。
    ///</param>
    ///<returns>
    ///  本地字段的声明。
    ///</returns>
    function GetLocalField(name: string): DDN.mscorlib.DNFieldInfo;
    ///<summary>
    ///  获取通过搜索作用域层次结构的指定成员的值。
    ///  此方法搜索的词法级别指定的作用域。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员的名称。
    ///</param>
    ///  <param name="lexlevel">
    ///  要搜索的词法级别。
    ///</param>
    ///<returns>
    ///  成员值 <paramref name="name" />
    ///  。
    ///</returns>
    function GetMemberValue(name: string; lexlevel: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  检索的数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于指定的名称匹配的所有成员的对象。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  匹配的对象的数组 <paramref name="name" />
    ///  参数。
    ///</returns>
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  检索的数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于当前对象的所有成员的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前对象的所有成员的对象数组。
    ///</returns>
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  获取具有指定的名称的字段。
    ///</summary>
    ///  <param name="name">
    ///  要获取的字段的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  具有指定的字段 <paramref name="name" />
    ///  , ，或如果该脚本对象不包含该字段，则为 null。
    ///</returns>
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo; overload;
    ///<summary>
    ///  获取具有指定的名称的方法。
    ///</summary>
    ///  <param name="name">
    ///  要获取的方法的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  具有指定的方法 <paramref name="name" />
    ///  , ，或如果该脚本对象不包含该方法，则为 null。
    ///</returns>
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    ///<summary>
    ///  获取对父对象的引用。
    ///</summary>
    ///<returns>
    ///  对父对象的引用。
    ///</returns>
    function GetParent: DNScriptObject;
    ///<summary>
    ///  获取具有指定的名称的属性。
    ///</summary>
    ///  <param name="name">
    ///  要获取的属性的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  具有指定的属性 <paramref name="name" />
    ///  , ，或如果该脚本对象不包含该属性，则为 null。
    ///</returns>
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.FieldInfo" />
    ///  对应于当前的脚本对象的所有字段的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前的脚本对象的所有字段的对象数组。
    ///</returns>
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    ///<summary>
    ///  获取具有指定的名称，通过使用指定的选择条件的方法。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的方法的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="types">
    ///  用于查找匹配的方法参数类型。
    ///</param>
    ///  <param name="modifiers">
    ///  使绑定能够处理的参数签名已在其中修改类型的参数修饰符的数组。
    ///</param>
    ///<returns>
    ///  具有指定的方法 <paramref name="name" />
    ///  , ，或如果该脚本对象不包含该方法，则为 null。
    ///</returns>
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MethodInfo" />
    ///  对应于当前的脚本对象的所有方法的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前的脚本对象的所有方法的对象数组。
    ///</returns>
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    ///<summary>
    ///  获取具有指定的名称，通过使用指定的选择条件的属性。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的属性的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="returnType">
    ///  该属性必须具有返回值的类型。
    ///</param>
    ///  <param name="types">
    ///  要搜索的属性索引类型。
    ///  索引化属性，例如一个类的索引器的使用。
    ///</param>
    ///  <param name="modifiers">
    ///  使绑定能够处理的参数签名已在其中修改类型的参数修饰符的数组。
    ///</param>
    ///<returns>
    ///  具有指定的属性 <paramref name="name" />
    ///  , ，或如果该脚本对象不包含该属性，则为 null。
    ///</returns>
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.PropertyInfo" />
    ///  对应于当前的脚本对象的所有属性的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前的脚本对象的所有属性的对象数组。
    ///</returns>
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    ///<summary>
    ///  调用指定的成员。
    ///</summary>
    ///  <param name="name">
    ///  要调用的成员的名称。
    ///</param>
    ///  <param name="invokeAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="target">
    ///  对其调用成员的对象。
    ///  这必须是当前的脚本对象。
    ///</param>
    ///  <param name="args">
    ///  包含要调用个数、 顺序和类型成员的参数的对象数组。
    ///  如果没有任何参数，这是一个空数组。
    ///</param>
    ///  <param name="modifiers">
    ///  具有相同的长度作为 args 参数数组。
    ///  它表示被调用的成员的元数据中的参数属性。
    ///</param>
    ///  <param name="locale">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    ///  <param name="namedParameters">
    ///  参数的数组。
    ///</param>
    ///<returns>
    ///  对该成员的调用返回值。
    ///</returns>
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    ///<summary>
    ///  获取脚本对象的类型。
    ///</summary>
    ///<returns>
    ///  该脚本对象的类型。
    ///</returns>
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNActivationObject = class(TDNGenericImport<DNActivationObjectClass, DNActivationObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNBlockScopeClass = interface(DNActivationObjectClass)
  ['{AB98296B-BCC5-5D0F-8C65-9C44E0A05433}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.BlockScope" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="parent">
    ///  作用域的父级。
    ///</param>
    ///  <param name="name">
    ///  作用域的名称。
    ///</param>
    ///  <param name="scopeId">
    ///  作用域的 ID。
    ///</param>
    {class} function init(parent: DNScriptObject; name: string; scopeId: Int32): DNBlockScope;

  end;

  ///<summary>
  ///  表示的作用域层次结构中花费一部分和可以在全局范围内堆栈上推送的代码块的作用域。
  ///  例如，此类可以表示的作用域<see langword="try" />
  ///  块。
  ///</summary>
  [DNTypeName('Microsoft.JScript.BlockScope')]
  DNBlockScope = interface(DNActivationObject)
  ['{7A9E67D4-F8CE-37E8-A653-716FC3D0F2B0}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  返回通过搜索作用域层次结构中具有指定的名称的字段。
    ///  此方法搜索的词法级别指定的作用域。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的字段的名称。
    ///</param>
    ///  <param name="lexLevel">
    ///  要搜索的词法级别。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Reflection.FieldInfo" />
    ///  具有指定的名称的对象。
    ///</returns>
    function GetField(name: string; lexLevel: Int32): DDN.mscorlib.DNFieldInfo; overload;
    ///<summary>
    ///  获取包含的对象的当前默认作用域，可以是 <see langword="with" />
    ///  语句范围或全局范围。
    ///</summary>
    ///<returns>
    ///  当前的默认作用域。
    ///</returns>
    function GetDefaultThisObject: DDN.mscorlib.DNObject;
    ///<summary>
    ///  获取通过搜索作用域层次结构，直到它找到一个范围，包括静态变量，例如，模块作用域的全局作用域。
    ///</summary>
    ///<returns>
    ///  全局作用域。
    ///</returns>
    function GetGlobalScope: DNGlobalScope;
    ///<summary>
    ///  获取具有指定的名称的字段的局部声明。
    ///  这用于编译时错误检查。
    ///</summary>
    ///  <param name="name">
    ///  字段的名称。
    ///</param>
    ///<returns>
    ///  本地字段的声明。
    ///</returns>
    function GetLocalField(name: string): DDN.mscorlib.DNFieldInfo;
    ///<summary>
    ///  获取通过搜索作用域层次结构的指定成员的值。
    ///  此方法搜索的词法级别指定的作用域。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员的名称。
    ///</param>
    ///  <param name="lexlevel">
    ///  要搜索的词法级别。
    ///</param>
    ///<returns>
    ///  成员值 <paramref name="name" />
    ///  。
    ///</returns>
    function GetMemberValue(name: string; lexlevel: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  检索的数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于指定的名称匹配的所有成员的对象。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  匹配的对象的数组 <paramref name="name" />
    ///  参数。
    ///</returns>
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  检索的数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于当前对象的所有成员的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前对象的所有成员的对象数组。
    ///</returns>
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo; overload;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNBlockScope = class(TDNGenericImport<DNBlockScopeClass, DNBlockScope>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNGlobalScopeClass = interface(DNActivationObjectClass)
  ['{8B3B1A9D-9D0C-535B-8350-FCFF5830CE0A}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.GlobalScope" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="parent">
    ///  对父对象的引用。
    ///</param>
    ///  <param name="engine">
    ///  对脚本引擎的引用。
    ///</param>
    {class} function init(parent: DNGlobalScope; engine: DNVsaEngine): DNGlobalScope;

  end;

  ///<summary>
  ///  表示全局作用域。
  ///</summary>
  [DNTypeName('Microsoft.JScript.GlobalScope')]
  DNGlobalScope = interface(DNActivationObject)
  ['{3B289C44-5A3E-3EA5-AF28-1BCCB4012B17}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  将指定的字段添加到全局作用域。
    ///</summary>
    ///  <param name="name">
    ///  要添加的字段的名称。
    ///</param>
    ///<returns>
    ///  新的字段中，如果成功添加。
    ///</returns>
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    ///<summary>
    ///  获取包含的对象的当前默认作用域，可以是 <see langword="with" />
    ///  语句范围或全局范围。
    ///</summary>
    ///<returns>
    ///  此对象。
    ///</returns>
    function GetDefaultThisObject: DDN.mscorlib.DNObject;
    ///<summary>
    ///  获取通过搜索作用域层次结构中具有指定的名称的字段。
    ///  此方法搜索的词法级别指定的作用域。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的字段的名称。
    ///</param>
    ///  <param name="lexLevel">
    ///  要搜索的词法级别。
    ///</param>
    ///<returns>
    ///  具有指定的名称的字段。
    ///</returns>
    function GetField(name: string; lexLevel: Int32): DDN.mscorlib.DNFieldInfo; overload;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.FieldInfo" />
    ///  对应于全局范围的所有字段的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含全局范围内的所有字段的对象数组。
    ///</returns>
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    ///<summary>
    ///  通过返回对此对象的引用来获取全局作用域。
    ///</summary>
    ///<returns>
    ///  此对象。
    ///</returns>
    function GetGlobalScope: DNGlobalScope;
    ///<summary>
    ///  获取具有指定的名称的字段的局部声明。
    ///  这用于编译时错误检查。
    ///</summary>
    ///  <param name="name">
    ///  字段的名称。
    ///</param>
    ///<returns>
    ///  本地字段的声明。
    ///</returns>
    function GetLocalField(name: string): DDN.mscorlib.DNFieldInfo;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于指定的名称匹配的所有成员的对象。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  匹配的对象的数组 <paramref name="name" />
    ///  参数。
    ///</returns>
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MethodInfo" />
    ///  对应于全局范围内的所有方法的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含全局范围内的所有方法的对象数组。
    ///</returns>
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.PropertyInfo" />
    ///  对应于全局范围的所有属性的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含全局范围内的所有属性的对象数组。
    ///</returns>
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于全局范围的所有成员的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含全局范围内的所有成员的对象数组。
    ///</returns>
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  获取通过搜索作用域层次结构的指定成员的值。
    ///  此方法搜索的词法级别指定的作用域。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员的名称。
    ///</param>
    ///  <param name="lexlevel">
    ///  要搜索的词法级别。
    ///</param>
    ///<returns>
    ///  成员值 <paramref name="name" />
    ///  。
    ///</returns>
    function GetMemberValue(name: string; lexlevel: Int32): DDN.mscorlib.DNObject;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo; overload;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNGlobalScope = class(TDNGenericImport<DNGlobalScopeClass, DNGlobalScope>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNJSObjectClass = interface(DNScriptObjectClass)
  ['{9351535E-EAB7-5815-842A-D6238BACDB0C}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.JSObject" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNJSObject;

  end;

  ///<summary>
  ///  表示在 JScript 中的对象。
  ///  此类所属的对象和函数的类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.JSObject')]
  DNJSObject = interface(DNScriptObject)
  ['{4702175F-B6BC-35A1-869D-8253FA2ABCFC}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

    ///<summary>
    ///  存储对脚本引擎的引用。
    ///</summary>
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  将指定的字段添加到对象。
    ///</summary>
    ///  <param name="name">
    ///  要添加的字段的名称。
    ///</param>
    ///<returns>
    ///  新的字段中，如果成功添加。
    ///</returns>
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于匹配指定的名称的所有成员的对象。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  匹配的成员的数组 <paramref name="name" />
    ///  参数。
    ///</returns>
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  设置的值的字段，可动态添加到对象并存储在 <see cref="F:Microsoft.JScript.JSObject.field_table" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  为其设置的值的字段的名称。
    ///</param>
    ///  <param name="value">
    ///  新字段的值。
    ///</param>
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  返回表示当前对象的字符串。
    ///</summary>
    ///<returns>
    ///  表示当前对象的字符串。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于当前的脚本对象的所有成员的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前对象的所有成员的对象数组。
    ///</returns>
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  获取具有指定的名称的字段。
    ///</summary>
    ///  <param name="name">
    ///  要获取的字段的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  具有指定的字段 <paramref name="name" />
    ///  , ，或如果该脚本对象不包含该字段，则为 null。
    ///</returns>
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    ///<summary>
    ///  获取具有指定的名称的方法。
    ///</summary>
    ///  <param name="name">
    ///  要获取的方法的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  具有指定的方法 <paramref name="name" />
    ///  , ，或如果该脚本对象不包含该方法，则为 null。
    ///</returns>
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    ///<summary>
    ///  获取对父对象的引用。
    ///</summary>
    ///<returns>
    ///  对父对象的引用。
    ///</returns>
    function GetParent: DNScriptObject;
    ///<summary>
    ///  获取具有指定的名称的属性。
    ///</summary>
    ///  <param name="name">
    ///  要获取的属性的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  具有指定的属性 <paramref name="name" />
    ///  , ，或如果该脚本对象不包含该属性，则为 null。
    ///</returns>
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.FieldInfo" />
    ///  对应于当前的脚本对象的所有字段的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前的脚本对象的所有字段的对象数组。
    ///</returns>
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    ///<summary>
    ///  获取具有指定的名称，通过使用指定的选择条件的方法。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的方法的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="types">
    ///  用于查找匹配的方法参数类型。
    ///</param>
    ///  <param name="modifiers">
    ///  使绑定能够处理的参数签名已在其中修改类型的参数修饰符的数组。
    ///</param>
    ///<returns>
    ///  具有指定的方法 <paramref name="name" />
    ///  , ，或如果该脚本对象不包含该方法，则为 null。
    ///</returns>
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MethodInfo" />
    ///  对应于当前的脚本对象的所有方法的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前的脚本对象的所有方法的对象数组。
    ///</returns>
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    ///<summary>
    ///  获取具有指定的名称，通过使用指定的选择条件的属性。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的属性的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="returnType">
    ///  该属性必须具有返回值的类型。
    ///</param>
    ///  <param name="types">
    ///  要搜索的属性索引类型。
    ///  索引化属性，例如一个类的索引器的使用。
    ///</param>
    ///  <param name="modifiers">
    ///  使绑定能够处理的参数签名已在其中修改类型的参数修饰符的数组。
    ///</param>
    ///<returns>
    ///  具有指定的属性 <paramref name="name" />
    ///  , ，或如果该脚本对象不包含该属性，则为 null。
    ///</returns>
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.PropertyInfo" />
    ///  对应于当前的脚本对象的所有属性的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前的脚本对象的所有属性的对象数组。
    ///</returns>
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    ///<summary>
    ///  调用指定的成员。
    ///</summary>
    ///  <param name="name">
    ///  要调用的成员的名称。
    ///</param>
    ///  <param name="invokeAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="target">
    ///  对其调用成员的对象。
    ///  这必须是当前的脚本对象。
    ///</param>
    ///  <param name="args">
    ///  包含要调用个数、 顺序和类型成员的参数的对象数组。
    ///  如果没有任何参数，这是一个空数组。
    ///</param>
    ///  <param name="modifiers">
    ///  具有相同的长度作为 args 参数数组。
    ///  它表示被调用的成员的元数据中的参数属性。
    ///</param>
    ///  <param name="locale">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    ///  <param name="namedParameters">
    ///  参数的数组。
    ///</param>
    ///<returns>
    ///  对该成员的调用返回值。
    ///</returns>
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    ///<summary>
    ///  获取脚本对象的类型。
    ///</summary>
    ///<returns>
    ///  该脚本对象的类型。
    ///</returns>
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNJSObject = class(TDNGenericImport<DNJSObjectClass, DNJSObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNArgumentsObjectClass = interface(DNJSObjectClass)
  ['{A9E81839-090F-5AC5-8CF2-5F22E7B5BEEB}']
  end;

  ///<summary>
  ///  表示用于调用的函数的信息。
  ///  这包括函数、 调用方、 自变量和有关堆栈帧的信息。
  ///  此类所属的对象和函数的类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.ArgumentsObject')]
  DNArgumentsObject = interface(DNJSObject)
  ['{70B4F589-65A9-3638-9215-7DF50458D813}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_callee: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_callee(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_caller: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_caller(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_length: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_length(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

    ///<summary>
    ///  表示正在调用的函数闭包函数。
    ///</summary>
   property callee: DDN.mscorlib.DNObject read __fakeFieldGet_callee write __fakeFieldSet_callee;
    ///<summary>
    ///  调用堆栈帧中的范围信息。
    ///</summary>
   property caller: DDN.mscorlib.DNObject read __fakeFieldGet_caller write __fakeFieldSet_caller;
    ///<summary>
    ///  自变量的数量。
    ///</summary>
   property length: DDN.mscorlib.DNObject read __fakeFieldGet_length write __fakeFieldSet_length;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  将指定的字段添加到对象。
    ///</summary>
    ///  <param name="name">
    ///  要添加的字段的名称。
    ///</param>
    ///<returns>
    ///  新的字段中，如果成功添加。
    ///</returns>
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于匹配指定的名称的所有成员的对象。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  匹配的成员的数组 <paramref name="name" />
    ///  参数。
    ///</returns>
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  设置的值的字段，可动态添加到对象并存储在 <see cref="F:Microsoft.JScript.JSObject.field_table" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  为其设置的值的字段的名称。
    ///</param>
    ///  <param name="value">
    ///  新字段的值。
    ///</param>
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  返回表示当前对象的字符串。
    ///</summary>
    ///<returns>
    ///  表示当前对象的字符串。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于当前的脚本对象的所有成员的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前对象的所有成员的对象数组。
    ///</returns>
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNArgumentsObject = class(TDNGenericImport<DNArgumentsObjectClass, DNArgumentsObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNArrayObjectClass = interface(DNJSObjectClass)
  ['{9B360704-FB64-5B06-AA63-AF21A4AD72C2}']
  end;

  ///<summary>
  ///  表示一个数组对象。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.ArrayObject')]
  DNArrayObject = interface(DNJSObject)
  ['{F68923D6-32B6-3E23-B9BC-E6C0A067E451}']
  { getters & setters } 

    function get_length: DDN.mscorlib.DNObject;
    procedure set_length(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  将指定的字段添加到对象。
    ///</summary>
    ///  <param name="name">
    ///  要添加的字段的名称。
    ///</param>
    ///<returns>
    ///  新的字段中，如果成功添加。
    ///</returns>
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于匹配指定的名称的所有成员的对象。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  匹配的成员的数组 <paramref name="name" />
    ///  参数。
    ///</returns>
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  设置的值的字段，可动态添加到对象并存储在 <see cref="F:Microsoft.JScript.JSObject.field_table" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  为其设置的值的字段的名称。
    ///</param>
    ///  <param name="value">
    ///  新字段的值。
    ///</param>
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  返回表示当前对象的字符串。
    ///</summary>
    ///<returns>
    ///  表示当前对象的字符串。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于当前的脚本对象的所有成员的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前对象的所有成员的对象数组。
    ///</returns>
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置数组的长度。
    ///</summary>
    ///<returns>
    ///  数组的长度。
    ///</returns>
    property length: DDN.mscorlib.DNObject read get_length write set_length;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNArrayObject = class(TDNGenericImport<DNArrayObjectClass, DNArrayObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNArrayPrototypeClass = interface(DNArrayObjectClass)
  ['{3528B938-62B8-575D-93A8-2600B30AE1B3}']
  { static getter & setter } 

    {class} function get_constructor: DNArrayConstructor;

  { static methods } 

    ///<summary>
    ///  连接对象或数组的指定的对象或数组的末尾。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于的对象。
    ///</param>
    ///  <param name="engine">
    ///  对脚本引擎的引用。
    ///</param>
    ///  <param name="args">
    ///  对象或数组要追加到<paramref name="thisob" />
    ///  。
    ///</param>
    ///<returns><paramref name="thisob" />
    ///  和<paramref name="args" />
    ///  串联在一起。
    ///</returns>
    {class} function concat(thisob: DDN.mscorlib.DNObject; engine: DNVsaEngine; args: TArray<DDN.mscorlib.DNObject>): DNArrayObject;
    ///<summary>
    ///  创建的字符串表示形式的指定对象的串联元素并将它们与分开 <see cref="P:System.Globalization.TextInfo.ListSeparator" />
    ///  和一个空格。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  一个字符串，串联的元素 <paramref name="thisob" />
    ///  分隔这些与 <see cref="P:System.Globalization.TextInfo.ListSeparator" />
    ///  和一个空格。
    ///</returns>
    {class} function toLocaleString(thisob: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  将指定数组的元素串联成一个字符串。
    ///  指定的分隔符分隔的元素。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于的对象。
    ///</param>
    ///  <param name="separator">
    ///  要用于分隔元素的字符串。
    ///  默认值为逗号。
    ///</param>
    ///<returns>
    ///  连接的元素的字符串<paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function join(thisob: DDN.mscorlib.DNObject; separator: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  从指定数组中移除最后一个元素并将其返回。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  最后一个元素的 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function pop(thisob: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    ///<summary>
    ///  将新元素添加到指定数组的末尾。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="args">
    ///  要添加到元素 <paramref name="thisob" />
    ///  。
    ///</param>
    ///<returns>
    ///  新长度 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function push(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): Int64;
    ///<summary>
    ///  反转指定数组的元素。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns><paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function reverse(thisob: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    ///<summary>
    ///  从指定数组中移除的第一个元素并将其返回。
    ///  将剩余元素位移到前面的位置。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  第一个元素 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function shift(thisob: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    ///<summary>
    ///  创建一个新数组，其中包含从指定数组的指定连续元素。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="engine">
    ///  对脚本引擎的引用。
    ///</param>
    ///  <param name="start">
    ///  要获取的第一个连续元素。
    ///</param>
    ///  <param name="end">
    ///  要获取的最后一个连续元素。
    ///</param>
    ///<returns>
    ///  一个新数组，包含之间的连续元素 <paramref name="thisob" />
    ///  [<paramref name="start" />
    ///  ] 和 <paramref name="thisob" />
    ///  [<paramref name="end" />
    ///  ]。
    ///</returns>
    {class} function slice(thisob: DDN.mscorlib.DNObject; engine: DNVsaEngine; start: Double; &end: DDN.mscorlib.DNObject): DNArrayObject;
    ///<summary>
    ///  使用指定的函数用于比较元素的指定数组的元素进行排序。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="function">
    ///  要用于比较元素的函数。
    ///</param>
    ///<returns><paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function sort(thisob: DDN.mscorlib.DNObject; &function: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    ///<summary>
    ///  添加和移除数组中的指定位置处的数组中的元素。
    ///  可以添加元素和 / 或删除元素。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="engine">
    ///  对脚本引擎的引用。
    ///</param>
    ///  <param name="start">
    ///  要添加和移除元素的数组中的位置。
    ///</param>
    ///  <param name="deleteCnt">
    ///  若要删除，如果有的元素数。
    ///</param>
    ///  <param name="args">
    ///  若要添加，如果任何元素。
    ///</param>
    ///<returns>
    ///  一个新数组，包含从已移除元素 <paramref name="thisob" />
    ///  , ，如果任何已被删除。
    ///</returns>
    {class} function splice(thisob: DDN.mscorlib.DNObject; engine: DNVsaEngine; start: Double; deleteCnt: Double; args: TArray<DDN.mscorlib.DNObject>): DNArrayObject;
    ///<summary>
    ///  创建的字符串表示形式的指定对象的串联元素，并用逗号分隔它们。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  一个字符串，串联的元素 <paramref name="thisob" />
    ///  并用逗号分隔这些。
    ///</returns>
    {class} function toString(thisob: DDN.mscorlib.DNObject): string; overload;
    ///<summary>
    ///  将新元素添加到指定数组的开头。
    ///  将现有元素位移到后面的位置。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="args">
    ///  要添加到元素 <paramref name="thisob" />
    ///  。
    ///</param>
    ///<returns>
    ///  新长度 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function unshift(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;

  { static propertys } 

    ///<summary>
    ///  获取基于原型的对象，该对象正在使用此原型的引用。
    ///</summary>
    ///<returns>
    ///  对基于原型的对象的引用。
    ///</returns>
    {class} property &constructor: DNArrayConstructor read get_constructor;
  end;

  ///<summary>
  ///  提供用于静态方法和属性<see cref="T:Microsoft.JScript.ArrayObject" />
  ///  对象。
  ///  此类的所有方法所都调用的传入到正在请求对方法的访问的对象的引用。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.ArrayPrototype')]
  DNArrayPrototype = interface(DNArrayObject)
  ['{ECEE085E-F109-38DC-A1EC-3F8AA56A8A33}']
  { getters & setters } 

    function get_length: DDN.mscorlib.DNObject;
    procedure set_length(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string; overload;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置数组的长度。
    ///</summary>
    ///<returns>
    ///  数组的长度。
    ///</returns>
    property length: DDN.mscorlib.DNObject read get_length write set_length;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNArrayPrototype = class(TDNGenericImport<DNArrayPrototypeClass, DNArrayPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNLenientArrayPrototypeClass = interface(DNArrayPrototypeClass)
  ['{629BF860-84DA-52A9-9A22-B03DFA60303C}']
  end;

  ///<summary>
  ///  将存储这些对象表示的静态方法 <see cref="T:Microsoft.JScript.ArrayPrototype" />
  ///  类。
  ///<see cref="T:Microsoft.JScript.LenientArrayPrototype" />
  ///  类属于内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.LenientArrayPrototype')]
  DNLenientArrayPrototype = interface(DNArrayPrototype)
  ['{DE65057F-7DC2-38AB-854B-99E28B16B95A}']
  { getters & setters } 

    function get_length: DDN.mscorlib.DNObject;
    procedure set_length(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_constructor: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_constructor(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_concat: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_concat(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_join: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_join(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_pop: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_pop(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_push: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_push(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_reverse: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_reverse(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_shift: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_shift(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_slice: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_slice(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_sort: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_sort(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_splice: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_splice(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_unshift: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_unshift(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toLocaleString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toLocaleString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

    ///<summary>
    ///  存储到的引用<see cref="T:Microsoft.JScript.ArrayConstructor" />
    ///  对象。
    ///</summary>
   property &constructor: DDN.mscorlib.DNObject read __fakeFieldGet_constructor write __fakeFieldSet_constructor;
    ///<summary>
    ///  将存储一个对象，表示静态<see cref="M:Microsoft.JScript.ArrayPrototype.concat(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object[])" />
    ///  方法<see cref="T:Microsoft.JScript.ArrayPrototype" />
    ///  类。
    ///</summary>
   property concat: DDN.mscorlib.DNObject read __fakeFieldGet_concat write __fakeFieldSet_concat;
    ///<summary>
    ///  将存储一个对象，表示静态<see cref="M:Microsoft.JScript.ArrayPrototype.join(System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.ArrayPrototype" />
    ///  类。
    ///</summary>
   property join: DDN.mscorlib.DNObject read __fakeFieldGet_join write __fakeFieldSet_join;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ArrayPrototype.pop(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.ArrayPrototype" />
    ///  类。
    ///</summary>
   property pop: DDN.mscorlib.DNObject read __fakeFieldGet_pop write __fakeFieldSet_pop;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ArrayPrototype.push(System.Object,System.Object[])" />
    ///  方法 <see cref="T:Microsoft.JScript.ArrayPrototype" />
    ///  类。
    ///</summary>
   property push: DDN.mscorlib.DNObject read __fakeFieldGet_push write __fakeFieldSet_push;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ArrayPrototype.reverse(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.ArrayPrototype" />
    ///  类。
    ///</summary>
   property reverse: DDN.mscorlib.DNObject read __fakeFieldGet_reverse write __fakeFieldSet_reverse;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ArrayPrototype.shift(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.ArrayPrototype" />
    ///  类。
    ///</summary>
   property shift: DDN.mscorlib.DNObject read __fakeFieldGet_shift write __fakeFieldSet_shift;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ArrayPrototype.slice(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Double,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.ArrayPrototype" />
    ///  类。
    ///</summary>
   property slice: DDN.mscorlib.DNObject read __fakeFieldGet_slice write __fakeFieldSet_slice;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ArrayPrototype.sort(System.Object,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.ArrayPrototype" />
    ///  类。
    ///</summary>
   property sort: DDN.mscorlib.DNObject read __fakeFieldGet_sort write __fakeFieldSet_sort;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ArrayPrototype.splice(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Double,System.Double,System.Object[])" />
    ///  方法 <see cref="T:Microsoft.JScript.ArrayPrototype" />
    ///  类。
    ///</summary>
   property splice: DDN.mscorlib.DNObject read __fakeFieldGet_splice write __fakeFieldSet_splice;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ArrayPrototype.unshift(System.Object,System.Object[])" />
    ///  方法 <see cref="T:Microsoft.JScript.ArrayPrototype" />
    ///  类。
    ///</summary>
   property unshift: DDN.mscorlib.DNObject read __fakeFieldGet_unshift write __fakeFieldSet_unshift;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ArrayPrototype.toLocaleString(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.ArrayPrototype" />
    ///  类。
    ///</summary>
   property toLocaleString: DDN.mscorlib.DNObject read __fakeFieldGet_toLocaleString write __fakeFieldSet_toLocaleString;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ArrayPrototype.toString(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.ArrayPrototype" />
    ///  类。
    ///</summary>
   property toString_: DDN.mscorlib.DNObject read __fakeFieldGet_toString write __fakeFieldSet_toString;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property length: DDN.mscorlib.DNObject read get_length write set_length;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNLenientArrayPrototype = class(TDNGenericImport<DNLenientArrayPrototypeClass, DNLenientArrayPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNArrayWrapperClass = interface(DNArrayObjectClass)
  ['{EB521225-8DD6-5AEE-A521-39D53F7CFCB0}']
  end;

  ///<summary>
  ///  包装数组创建 JScript <see cref="T:Microsoft.JScript.ArrayObject" />
  ///  。
  ///  此类包装的.NET Framework<see cref="T:System.Array" />
  ///  对象或 JScript<see cref="T:Microsoft.JScript.ArrayObject" />
  ///  对象。
  ///</summary>
  [DNTypeName('Microsoft.JScript.ArrayWrapper')]
  DNArrayWrapper = interface(DNArrayObject)
  ['{4CCDB687-35CF-399B-B29F-C7A7F0085F6C}']
  { getters & setters } 

    function get_length: DDN.mscorlib.DNObject;
    procedure set_length(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  获取数组的类型。
    ///</summary>
    ///<returns>
    ///  一种 <see cref="T:System.Array" />
    ///  或 <see cref="T:Microsoft.JScript.ArrayObject" />
    ///  。
    ///</returns>
    function GetType: DDN.mscorlib.DNType;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    ///<summary>
    ///  获取数组的长度。
    ///</summary>
    ///<returns>
    ///  数组的长度。
    ///</returns>
    property length: DDN.mscorlib.DNObject read get_length write set_length;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNArrayWrapper = class(TDNGenericImport<DNArrayWrapperClass, DNArrayWrapper>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNRegExpMatchClass = interface(DNArrayObjectClass)
  ['{7A2911CB-8FF7-502B-AD2C-07FE6A282B0B}']
  end;

  ///<summary>
  ///  表示正则表达式匹配的结果。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.RegExpMatch')]
  DNRegExpMatch = interface(DNArrayObject)
  ['{BA2EB9E2-6FD5-3A23-8BFC-CD84F3F028C5}']
  { getters & setters } 

    function get_length: DDN.mscorlib.DNObject;
    procedure set_length(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置数组的长度。
    ///</summary>
    ///<returns>
    ///  数组的长度。
    ///</returns>
    property length: DDN.mscorlib.DNObject read get_length write set_length;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNRegExpMatch = class(TDNGenericImport<DNRegExpMatchClass, DNRegExpMatch>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNBooleanObjectClass = interface(DNJSObjectClass)
  ['{66982CD4-6A1D-5DF5-8155-59A0B0FDEB16}']
  end;

  ///<summary>
  ///  表示布尔对象。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.BooleanObject')]
  DNBooleanObject = interface(DNJSObject)
  ['{DCC180B6-1B63-3E91-A76F-1A4603E31CAB}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  返回 <see cref="T:System.Boolean" />
    ///  或 <see cref="T:Microsoft.JScript.BooleanObject" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Boolean" />
    ///  或 <see cref="T:Microsoft.JScript.BooleanObject" />
    ///  。
    ///</returns>
    function GetType: DDN.mscorlib.DNType;
    ///<summary>
    ///  将指定的字段添加到对象。
    ///</summary>
    ///  <param name="name">
    ///  要添加的字段的名称。
    ///</param>
    ///<returns>
    ///  新的字段中，如果成功添加。
    ///</returns>
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于匹配指定的名称的所有成员的对象。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  匹配的成员的数组 <paramref name="name" />
    ///  参数。
    ///</returns>
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  设置的值的字段，可动态添加到对象并存储在 <see cref="F:Microsoft.JScript.JSObject.field_table" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  为其设置的值的字段的名称。
    ///</param>
    ///  <param name="value">
    ///  新字段的值。
    ///</param>
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  返回表示当前对象的字符串。
    ///</summary>
    ///<returns>
    ///  表示当前对象的字符串。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于当前的脚本对象的所有成员的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前对象的所有成员的对象数组。
    ///</returns>
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNBooleanObject = class(TDNGenericImport<DNBooleanObjectClass, DNBooleanObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNBooleanPrototypeClass = interface(DNBooleanObjectClass)
  ['{47AF987C-654F-540E-A1E7-84EE22F1491F}']
  { static getter & setter } 

    {class} function get_constructor: DNBooleanConstructor;

  { static methods } 

    ///<summary>
    ///  返回指定的对象作为 <see cref="T:Microsoft.JScript.BooleanObject" />
    ///  或 <see cref="T:System.Boolean" />
    ///  。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns><paramref name="thisob" />
    ///  作为 <see cref="T:Microsoft.JScript.BooleanObject" />
    ///  或 <see cref="T:System.Boolean" />
    ///  。
    ///</returns>
    {class} function valueOf(thisob: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    ///<summary>
    ///  通过使用创建的字符串表示形式指定的对象 <see cref="T:Microsoft.JScript.Convert" />
    ///  类。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  字符串表示形式 <paramref name="thisob" />
    ///  ，它由创建 <see cref="T:Microsoft.JScript.Convert" />
    ///  类。
    ///</returns>
    {class} function toString(thisob: DDN.mscorlib.DNObject): string; overload;

  { static propertys } 

    ///<summary>
    ///  获取基于原型的对象，该对象正在使用此原型的引用。
    ///</summary>
    ///<returns>
    ///  对基于原型的对象的引用。
    ///</returns>
    {class} property &constructor: DNBooleanConstructor read get_constructor;
  end;

  ///<summary>
  ///  提供用于静态方法和属性<see cref="T:Microsoft.JScript.BooleanObject" />
  ///  对象。
  ///  此类的所有方法所都调用的传入到正在请求对方法的访问的对象的引用。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.BooleanPrototype')]
  DNBooleanPrototype = interface(DNBooleanObject)
  ['{1452A752-D103-385E-A8BB-C57AE47FFE3F}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  返回 <see cref="T:System.Boolean" />
    ///  或 <see cref="T:Microsoft.JScript.BooleanObject" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Boolean" />
    ///  或 <see cref="T:Microsoft.JScript.BooleanObject" />
    ///  。
    ///</returns>
    function GetType: DDN.mscorlib.DNType;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string; overload;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNBooleanPrototype = class(TDNGenericImport<DNBooleanPrototypeClass, DNBooleanPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNLenientBooleanPrototypeClass = interface(DNBooleanPrototypeClass)
  ['{D2BF5EA8-CE65-5FFF-9FB3-834CD380D358}']
  end;

  ///<summary>
  ///  将存储这些对象表示的静态方法 <see cref="T:Microsoft.JScript.BooleanPrototype" />
  ///  类。
  ///<see cref="T:Microsoft.JScript.LenientBooleanPrototype" />
  ///  类属于内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.LenientBooleanPrototype')]
  DNLenientBooleanPrototype = interface(DNBooleanPrototype)
  ['{B12BA434-52BE-3C76-A7F1-629E2053894A}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_constructor: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_constructor(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_valueOf: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_valueOf(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

    ///<summary>
    ///  存储到的引用<see cref="T:Microsoft.JScript.BooleanConstructor" />
    ///  对象。
    ///</summary>
   property &constructor: DDN.mscorlib.DNObject read __fakeFieldGet_constructor write __fakeFieldSet_constructor;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.BooleanPrototype.toString(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.BooleanPrototype" />
    ///  类。
    ///</summary>
   property toString_: DDN.mscorlib.DNObject read __fakeFieldGet_toString write __fakeFieldSet_toString;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.BooleanPrototype.valueOf(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.BooleanPrototype" />
    ///  类。
    ///</summary>
   property valueOf: DDN.mscorlib.DNObject read __fakeFieldGet_valueOf write __fakeFieldSet_valueOf;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function GetType: DDN.mscorlib.DNType;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNLenientBooleanPrototype = class(TDNGenericImport<DNLenientBooleanPrototypeClass, DNLenientBooleanPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNDateObjectClass = interface(DNJSObjectClass)
  ['{6C489C71-DD53-5D2D-AAA7-DD76E137CB98}']
  end;

  ///<summary>
  ///  表示一个 date 对象。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.DateObject')]
  DNDateObject = interface(DNJSObject)
  ['{4E89DEF0-57D3-350D-BD2C-90E435FC1B38}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  将指定的字段添加到对象。
    ///</summary>
    ///  <param name="name">
    ///  要添加的字段的名称。
    ///</param>
    ///<returns>
    ///  新的字段中，如果成功添加。
    ///</returns>
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于匹配指定的名称的所有成员的对象。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  匹配的成员的数组 <paramref name="name" />
    ///  参数。
    ///</returns>
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  设置的值的字段，可动态添加到对象并存储在 <see cref="F:Microsoft.JScript.JSObject.field_table" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  为其设置的值的字段的名称。
    ///</param>
    ///  <param name="value">
    ///  新字段的值。
    ///</param>
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  返回表示当前对象的字符串。
    ///</summary>
    ///<returns>
    ///  表示当前对象的字符串。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于当前的脚本对象的所有成员的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前对象的所有成员的对象数组。
    ///</returns>
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNDateObject = class(TDNGenericImport<DNDateObjectClass, DNDateObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNDatePrototypeClass = interface(DNDateObjectClass)
  ['{E769BEBF-391C-5D5D-8B88-434CCBD738FE}']
  { static getter & setter } 

    {class} function get_constructor: DNDateConstructor;

  { static methods } 

    ///<summary>
    ///  获取指定的日期值 <see cref="T:Microsoft.JScript.DateObject" />
    ///  。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  日期值 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function getDate(thisob: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  获取指定的周日期值 <see cref="T:Microsoft.JScript.DateObject" />
    ///  。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  周日期值 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function getDay(thisob: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  获取指定的年份值 <see cref="T:Microsoft.JScript.DateObject" />
    ///  。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  年份值 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function getFullYear(thisob: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  获取指定的小时值 <see cref="T:Microsoft.JScript.DateObject" />
    ///  。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  小时值为 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function getHours(thisob: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  获取指定的毫秒值 <see cref="T:Microsoft.JScript.DateObject" />
    ///  。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  毫秒值 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function getMilliseconds(thisob: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  获取指定的分钟值 <see cref="T:Microsoft.JScript.DateObject" />
    ///  。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  分钟值 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function getMinutes(thisob: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  获取指定的月份值 <see cref="T:Microsoft.JScript.DateObject" />
    ///  。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  月份值 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function getMonth(thisob: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  获取指定的值的秒的 <see cref="T:Microsoft.JScript.DateObject" />
    ///  。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  秒的值的 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function getSeconds(thisob: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  获取指定的时间值 <see cref="T:Microsoft.JScript.DateObject" />
    ///  。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  时间值 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function getTime(thisob: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  获取指定的偏移量 <see cref="T:Microsoft.JScript.DateObject" />
    ///  与协调世界时 (UTC)。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  之间的差异 <paramref name="thisob" />
    ///  与协调世界时 (UTC)。
    ///</returns>
    {class} function getTimezoneOffset(thisob: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  获取指定的日期值 <see cref="T:Microsoft.JScript.DateObject" />
    ///  , ，以协调世界时 (UTC) 表示。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  日期值 <paramref name="thisob" />
    ///  , 以 UTC 表示。
    ///</returns>
    {class} function getUTCDate(thisob: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  获取指定的周日期值 <see cref="T:Microsoft.JScript.DateObject" />
    ///  , ，以协调世界时 (UTC) 表示。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  周日期值 <paramref name="thisob" />
    ///  , 以 UTC 表示。
    ///</returns>
    {class} function getUTCDay(thisob: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  获取指定的年份值 <see cref="T:Microsoft.JScript.DateObject" />
    ///  , ，以协调世界时 (UTC) 表示。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  年份值 <paramref name="thisob" />
    ///  , 以 UTC 表示。
    ///</returns>
    {class} function getUTCFullYear(thisob: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  获取指定的小时值 <see cref="T:Microsoft.JScript.DateObject" />
    ///  , ，以协调世界时 (UTC) 表示。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  小时值为 <paramref name="thisob" />
    ///  , 以 UTC 表示。
    ///</returns>
    {class} function getUTCHours(thisob: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  获取指定的毫秒值 <see cref="T:Microsoft.JScript.DateObject" />
    ///  , ，以协调世界时 (UTC) 表示。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  毫秒值 <paramref name="thisob" />
    ///  , 以 UTC 表示。
    ///</returns>
    {class} function getUTCMilliseconds(thisob: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  获取指定的分钟值 <see cref="T:Microsoft.JScript.DateObject" />
    ///  , ，以协调世界时 (UTC) 表示。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  分钟值 <paramref name="thisob" />
    ///  , 以 UTC 表示。
    ///</returns>
    {class} function getUTCMinutes(thisob: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  获取指定的月份值 <see cref="T:Microsoft.JScript.DateObject" />
    ///  , ，以协调世界时 (UTC) 表示。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  月份值 <paramref name="thisob" />
    ///  , 以 UTC 表示。
    ///</returns>
    {class} function getUTCMonth(thisob: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  获取指定的值的秒的 <see cref="T:Microsoft.JScript.DateObject" />
    ///  , ，以协调世界时 (UTC) 表示。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  秒的值的 <paramref name="thisob" />
    ///  , 以 UTC 表示。
    ///</returns>
    {class} function getUTCSeconds(thisob: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  返回指定 <see cref="T:Microsoft.JScript.DateObject" />
    ///  作为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  值 <paramref name="thisob" />
    ///  , ，表示为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</returns>
    {class} function getVarDate(thisob: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    ///<summary>
    ///  获取指定的年份值 <see cref="T:Microsoft.JScript.DateObject" />
    ///  , ，以协调世界时 (UTC) 表示。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  年份值 <paramref name="thisob" />
    ///  , 以 UTC 表示。
    ///</returns>
    {class} function getYear(thisob: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  设置的日期值 <see cref="T:Microsoft.JScript.DateObject" />
    ///  为指定的日期值。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="ddate">
    ///  要为设置日期值 <paramref name="thisob" />
    ///  。
    ///</param>
    ///<returns>
    ///  新值 <paramref name="thisob" />
    ///  设置的值之后。
    ///</returns>
    {class} function setDate(thisob: DDN.mscorlib.DNObject; ddate: Double): Double;
    ///<summary>
    ///  设置的年份值 <see cref="T:Microsoft.JScript.DateObject" />
    ///  为指定的年份值。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="dyear">
    ///  若要为设置的年份值 <paramref name="thisob" />
    ///  。
    ///</param>
    ///  <param name="month">
    ///  若要为设置的月份值 <paramref name="thisob" />
    ///  。
    ///</param>
    ///  <param name="date">
    ///  要为设置日期值 <paramref name="thisob" />
    ///  。
    ///</param>
    ///<returns>
    ///  为设置的年份值 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function setFullYear(thisob: DDN.mscorlib.DNObject; dyear: Double; month: DDN.mscorlib.DNObject; date: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  设置小时值为 <see cref="T:Microsoft.JScript.DateObject" />
    ///  为指定的小时值。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="dhour">
    ///  要为设置小时值 <paramref name="thisob" />
    ///  。
    ///</param>
    ///  <param name="min">
    ///  分钟值设置为 <paramref name="thisob" />
    ///  。
    ///</param>
    ///  <param name="sec">
    ///  秒的值设置为 <paramref name="thisob" />
    ///  。
    ///</param>
    ///  <param name="msec">
    ///  毫秒数的值设置为 <paramref name="thisob" />
    ///  。
    ///</param>
    ///<returns>
    ///  新值 <paramref name="thisob" />
    ///  设置的值之后。
    ///</returns>
    {class} function setHours(thisob: DDN.mscorlib.DNObject; dhour: Double; min: DDN.mscorlib.DNObject; sec: DDN.mscorlib.DNObject; msec: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  设置的分钟值 <see cref="T:Microsoft.JScript.DateObject" />
    ///  为指定的分钟值。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="dmin">
    ///  分钟值设置为 <paramref name="thisob" />
    ///  。
    ///</param>
    ///  <param name="sec">
    ///  秒的值设置为 <paramref name="thisob" />
    ///  。
    ///</param>
    ///  <param name="msec">
    ///  毫秒数的值设置为 <paramref name="thisob" />
    ///  。
    ///</param>
    ///<returns>
    ///  新值 <paramref name="thisob" />
    ///  设置的值之后。
    ///</returns>
    {class} function setMinutes(thisob: DDN.mscorlib.DNObject; dmin: Double; sec: DDN.mscorlib.DNObject; msec: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  设置的毫秒值 <see cref="T:Microsoft.JScript.DateObject" />
    ///  为指定的毫秒值。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="dmsec">
    ///  要为设置毫秒值 <paramref name="thisob" />
    ///  。
    ///</param>
    ///<returns>
    ///  新值 <paramref name="thisob" />
    ///  设置的值之后。
    ///</returns>
    {class} function setMilliseconds(thisob: DDN.mscorlib.DNObject; dmsec: Double): Double;
    ///<summary>
    ///  设置的月份值 <see cref="T:Microsoft.JScript.DateObject" />
    ///  为指定的月份值。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="dmonth">
    ///  若要为设置的月份值 <paramref name="thisob" />
    ///  。
    ///</param>
    ///  <param name="date">
    ///  要为设置日期值 <paramref name="thisob" />
    ///  。
    ///</param>
    ///<returns>
    ///  新值 <paramref name="thisob" />
    ///  设置的值之后。
    ///</returns>
    {class} function setMonth(thisob: DDN.mscorlib.DNObject; dmonth: Double; date: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  设置值的秒的 <see cref="T:Microsoft.JScript.DateObject" />
    ///  为指定的秒值。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="dsec">
    ///  秒的值设置为 <paramref name="thisob" />
    ///  。
    ///</param>
    ///  <param name="msec">
    ///  毫秒数的值设置为 <paramref name="thisob" />
    ///  。
    ///</param>
    ///<returns>
    ///  新值 <paramref name="thisob" />
    ///  设置的值之后。
    ///</returns>
    {class} function setSeconds(thisob: DDN.mscorlib.DNObject; dsec: Double; msec: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  设置的时间值 <see cref="T:Microsoft.JScript.DateObject" />
    ///  到指定的时间值。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="time">
    ///  若要为设置的时间值 <paramref name="thisob" />
    ///  。
    ///</param>
    ///<returns>
    ///  新值 <paramref name="thisob" />
    ///  设置的值之后。
    ///</returns>
    {class} function setTime(thisob: DDN.mscorlib.DNObject; time: Double): Double;
    ///<summary>
    ///  设置的日期值 <see cref="T:Microsoft.JScript.DateObject" />
    ///  为指定的日期值，表示以协调世界时 (UTC)。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="ddate">
    ///  要为设置日期值 <paramref name="thisob" />
    ///  。
    ///</param>
    ///<returns>
    ///  新值 <paramref name="thisob" />
    ///  设置的值后，以表示 UTC。
    ///</returns>
    {class} function setUTCDate(thisob: DDN.mscorlib.DNObject; ddate: Double): Double;
    ///<summary>
    ///  设置的年份值 <see cref="T:Microsoft.JScript.DateObject" />
    ///  为指定的年份值，表示以协调世界时 (UTC)。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="dyear">
    ///  若要为设置的年份值 <paramref name="thisob" />
    ///  。
    ///</param>
    ///  <param name="month">
    ///  若要为设置的月份值 <paramref name="thisob" />
    ///  。
    ///</param>
    ///  <param name="date">
    ///  要为设置日期值 <paramref name="thisob" />
    ///  。
    ///</param>
    ///<returns>
    ///  新值 <paramref name="thisob" />
    ///  设置的值后，以表示 UTC。
    ///</returns>
    {class} function setUTCFullYear(thisob: DDN.mscorlib.DNObject; dyear: Double; month: DDN.mscorlib.DNObject; date: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  设置小时值为 <see cref="T:Microsoft.JScript.DateObject" />
    ///  为指定的小时值，表示以协调世界时 (UTC)。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="dhour">
    ///  要为设置小时值 <paramref name="thisob" />
    ///  。
    ///</param>
    ///  <param name="min">
    ///  分钟值设置为 <paramref name="thisob" />
    ///  。
    ///</param>
    ///  <param name="sec">
    ///  秒的值设置为 <paramref name="thisob" />
    ///  。
    ///</param>
    ///  <param name="msec">
    ///  毫秒数的值设置为 <paramref name="thisob" />
    ///  。
    ///</param>
    ///<returns>
    ///  新值 <paramref name="thisob" />
    ///  设置的值后，以表示 UTC。
    ///</returns>
    {class} function setUTCHours(thisob: DDN.mscorlib.DNObject; dhour: Double; min: DDN.mscorlib.DNObject; sec: DDN.mscorlib.DNObject; msec: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  设置的分钟值 <see cref="T:Microsoft.JScript.DateObject" />
    ///  为指定的分钟值，表示以协调世界时 (UTC)。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="dmin">
    ///  分钟值设置为 <paramref name="thisob" />
    ///  。
    ///</param>
    ///  <param name="sec">
    ///  秒的值设置为 <paramref name="thisob" />
    ///  。
    ///</param>
    ///  <param name="msec">
    ///  毫秒数的值设置为 <paramref name="thisob" />
    ///  。
    ///</param>
    ///<returns>
    ///  新值 <paramref name="thisob" />
    ///  设置的值后，以表示 UTC。
    ///</returns>
    {class} function setUTCMinutes(thisob: DDN.mscorlib.DNObject; dmin: Double; sec: DDN.mscorlib.DNObject; msec: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  设置的毫秒值 <see cref="T:Microsoft.JScript.DateObject" />
    ///  为指定的毫秒的值，以协调世界时 (UTC) 表示。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="dmsec">
    ///  要为设置毫秒值 <paramref name="thisob" />
    ///  。
    ///</param>
    ///<returns>
    ///  新值 <paramref name="thisob" />
    ///  设置的值后，以表示 UTC。
    ///</returns>
    {class} function setUTCMilliseconds(thisob: DDN.mscorlib.DNObject; dmsec: Double): Double;
    ///<summary>
    ///  设置的月份值 <see cref="T:Microsoft.JScript.DateObject" />
    ///  为指定的月份值，表示以协调世界时 (UTC)。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="dmonth">
    ///  若要为设置的月份值 <paramref name="thisob" />
    ///  。
    ///</param>
    ///  <param name="date">
    ///  要为设置日期值 <paramref name="thisob" />
    ///  。
    ///</param>
    ///<returns>
    ///  新值 <paramref name="thisob" />
    ///  设置的值后，以表示 UTC。
    ///</returns>
    {class} function setUTCMonth(thisob: DDN.mscorlib.DNObject; dmonth: Double; date: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  设置值的秒的 <see cref="T:Microsoft.JScript.DateObject" />
    ///  为指定的秒的值，表示以协调世界时 (UTC)。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="dsec">
    ///  秒的值设置为 <paramref name="thisob" />
    ///  。
    ///</param>
    ///  <param name="msec">
    ///  毫秒数的值设置为 <paramref name="thisob" />
    ///  。
    ///</param>
    ///<returns>
    ///  新值 <paramref name="thisob" />
    ///  设置的值后，以表示 UTC。
    ///</returns>
    {class} function setUTCSeconds(thisob: DDN.mscorlib.DNObject; dsec: Double; msec: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  设置的年份值 <see cref="T:Microsoft.JScript.DateObject" />
    ///  为指定的年份值。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="dyear">
    ///  若要为设置的年份值 <paramref name="thisob" />
    ///  。
    ///</param>
    ///<returns>
    ///  新值 <paramref name="thisob" />
    ///  设置的值之后。
    ///</returns>
    {class} function setYear(thisob: DDN.mscorlib.DNObject; dyear: Double): Double;
    ///<summary>
    ///  创建的字符串表示形式指定 <see cref="T:Microsoft.JScript.DateObject" />
    ///  ，其中包含每周、 月份、 日期和年的某一天。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  字符串表示形式 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function toDateString(thisob: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  创建的字符串表示形式指定 <see cref="T:Microsoft.JScript.DateObject" />
    ///  ，其中包含的一周、 月份、 日期、 一年中和时间，以协调世界时 (UTC) 表示。
    ///  使用 <see cref="M:Microsoft.JScript.DatePrototype.toUTCString(System.Object)" />
    ///  而是可以。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  字符串表示形式 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function toGMTString(thisob: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  创建的字符串表示形式指定 <see cref="T:Microsoft.JScript.DateObject" />
    ///  包含日期而不是时间。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  字符串表示形式 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function toLocaleDateString(thisob: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  创建的字符串表示形式指定 <see cref="T:Microsoft.JScript.DateObject" />
    ///  包含时间而非日期。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  字符串表示形式 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function toLocaleTimeString(thisob: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  创建的字符串表示形式指定 <see cref="T:Microsoft.JScript.DateObject" />
    ///  ，其中包含每周、 月份、 日期、 时间、 时区、 和年的某一天。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  字符串表示形式 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function toString(thisob: DDN.mscorlib.DNObject): string; overload;
    ///<summary>
    ///  创建的字符串表示形式指定 <see cref="T:Microsoft.JScript.DateObject" />
    ///  ，其中包含的时间和时区。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  字符串表示形式 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function toTimeString(thisob: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  创建的字符串表示形式指定 <see cref="T:Microsoft.JScript.DateObject" />
    ///  ，其中包含的一周、 月份、 日期、 一年中和时间，以协调世界时 (UTC) 表示。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  字符串表示形式 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function toUTCString(thisob: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  返回指定的值 <see cref="T:Microsoft.JScript.DateObject" />
    ///  。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns><paramref name="thisob" />
    ///  的值。
    ///</returns>
    {class} function valueOf(thisob: DDN.mscorlib.DNObject): Double;
    ///<summary>
    ///  创建的字符串表示形式指定 <see cref="T:Microsoft.JScript.DateObject" />
    ///  ，其中包含的日期和时间。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  字符串表示形式 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function toLocaleString(thisob: DDN.mscorlib.DNObject): string;

  { static propertys } 

    ///<summary>
    ///  获取基于原型的对象，该对象正在使用此原型的引用。
    ///</summary>
    ///<returns>
    ///  对基于原型的对象的引用。
    ///</returns>
    {class} property &constructor: DNDateConstructor read get_constructor;
  end;

  ///<summary>
  ///  提供用于静态方法和属性 <see cref="T:Microsoft.JScript.DateObject" />
  ///  对象。
  ///  通过传入到正在请求对方法的访问的对象引用来调用此类的所有方法。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.DatePrototype')]
  DNDatePrototype = interface(DNDateObject)
  ['{80721E3C-C3D0-3EA9-976D-37478E995652}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string; overload;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNDatePrototype = class(TDNGenericImport<DNDatePrototypeClass, DNDatePrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNLenientDatePrototypeClass = interface(DNDatePrototypeClass)
  ['{CCD10179-2F59-5E8A-8A5B-BE4DF1D8A21B}']
  end;

  ///<summary>
  ///  将存储这些对象表示的静态方法 <see cref="T:Microsoft.JScript.DatePrototype" />
  ///  类。
  ///<see cref="T:Microsoft.JScript.LenientDatePrototype" />
  ///  类属于内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.LenientDatePrototype')]
  DNLenientDatePrototype = interface(DNDatePrototype)
  ['{70080960-9C7A-35EB-8D10-B9B453E400DA}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_constructor: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_constructor(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getTime: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getTime(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getYear: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getYear(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getFullYear: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getFullYear(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getUTCFullYear: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getUTCFullYear(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getMonth: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getMonth(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getUTCMonth: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getUTCMonth(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getDate: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getDate(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getUTCDate: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getUTCDate(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getDay: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getDay(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getUTCDay: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getUTCDay(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getHours: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getHours(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getUTCHours: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getUTCHours(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getMinutes: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getMinutes(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getUTCMinutes: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getUTCMinutes(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getSeconds: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getSeconds(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getUTCSeconds: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getUTCSeconds(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getMilliseconds: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getMilliseconds(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getUTCMilliseconds: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getUTCMilliseconds(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getVarDate: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getVarDate(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getTimezoneOffset: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getTimezoneOffset(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setTime: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setTime(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setMilliseconds: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setMilliseconds(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setUTCMilliseconds: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setUTCMilliseconds(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setSeconds: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setSeconds(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setUTCSeconds: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setUTCSeconds(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setMinutes: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setMinutes(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setUTCMinutes: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setUTCMinutes(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setHours: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setHours(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setUTCHours: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setUTCHours(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setDate: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setDate(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setUTCDate: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setUTCDate(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setMonth: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setMonth(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setUTCMonth: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setUTCMonth(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setFullYear: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setFullYear(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setUTCFullYear: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setUTCFullYear(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_setYear: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_setYear(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toGMTString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toGMTString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toDateString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toDateString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toLocaleDateString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toLocaleDateString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toLocaleString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toLocaleString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toLocaleTimeString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toLocaleTimeString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toTimeString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toTimeString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toUTCString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toUTCString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_valueOf: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_valueOf(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

    ///<summary>
    ///  存储到的引用<see cref="T:Microsoft.JScript.DateConstructor" />
    ///  对象。
    ///</summary>
   property &constructor: DDN.mscorlib.DNObject read __fakeFieldGet_constructor write __fakeFieldSet_constructor;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getTime(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property getTime: DDN.mscorlib.DNObject read __fakeFieldGet_getTime write __fakeFieldSet_getTime;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getYear(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property getYear: DDN.mscorlib.DNObject read __fakeFieldGet_getYear write __fakeFieldSet_getYear;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getFullYear(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property getFullYear: DDN.mscorlib.DNObject read __fakeFieldGet_getFullYear write __fakeFieldSet_getFullYear;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getUTCFullYear(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property getUTCFullYear: DDN.mscorlib.DNObject read __fakeFieldGet_getUTCFullYear write __fakeFieldSet_getUTCFullYear;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getMonth(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property getMonth: DDN.mscorlib.DNObject read __fakeFieldGet_getMonth write __fakeFieldSet_getMonth;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getUTCMonth(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property getUTCMonth: DDN.mscorlib.DNObject read __fakeFieldGet_getUTCMonth write __fakeFieldSet_getUTCMonth;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getDate(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property getDate: DDN.mscorlib.DNObject read __fakeFieldGet_getDate write __fakeFieldSet_getDate;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getUTCDate(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property getUTCDate: DDN.mscorlib.DNObject read __fakeFieldGet_getUTCDate write __fakeFieldSet_getUTCDate;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getDay(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property getDay: DDN.mscorlib.DNObject read __fakeFieldGet_getDay write __fakeFieldSet_getDay;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getUTCDay(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property getUTCDay: DDN.mscorlib.DNObject read __fakeFieldGet_getUTCDay write __fakeFieldSet_getUTCDay;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getHours(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property getHours: DDN.mscorlib.DNObject read __fakeFieldGet_getHours write __fakeFieldSet_getHours;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getUTCHours(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property getUTCHours: DDN.mscorlib.DNObject read __fakeFieldGet_getUTCHours write __fakeFieldSet_getUTCHours;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getMinutes(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property getMinutes: DDN.mscorlib.DNObject read __fakeFieldGet_getMinutes write __fakeFieldSet_getMinutes;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getUTCMinutes(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property getUTCMinutes: DDN.mscorlib.DNObject read __fakeFieldGet_getUTCMinutes write __fakeFieldSet_getUTCMinutes;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getSeconds(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property getSeconds: DDN.mscorlib.DNObject read __fakeFieldGet_getSeconds write __fakeFieldSet_getSeconds;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getUTCSeconds(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property getUTCSeconds: DDN.mscorlib.DNObject read __fakeFieldGet_getUTCSeconds write __fakeFieldSet_getUTCSeconds;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getMilliseconds(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property getMilliseconds: DDN.mscorlib.DNObject read __fakeFieldGet_getMilliseconds write __fakeFieldSet_getMilliseconds;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getUTCMilliseconds(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property getUTCMilliseconds: DDN.mscorlib.DNObject read __fakeFieldGet_getUTCMilliseconds write __fakeFieldSet_getUTCMilliseconds;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getVarDate(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property getVarDate: DDN.mscorlib.DNObject read __fakeFieldGet_getVarDate write __fakeFieldSet_getVarDate;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.getTimezoneOffset(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property getTimezoneOffset: DDN.mscorlib.DNObject read __fakeFieldGet_getTimezoneOffset write __fakeFieldSet_getTimezoneOffset;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setTime(System.Object,System.Double)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property setTime: DDN.mscorlib.DNObject read __fakeFieldGet_setTime write __fakeFieldSet_setTime;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setMilliseconds(System.Object,System.Double)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property setMilliseconds: DDN.mscorlib.DNObject read __fakeFieldGet_setMilliseconds write __fakeFieldSet_setMilliseconds;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setUTCMilliseconds(System.Object,System.Double)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property setUTCMilliseconds: DDN.mscorlib.DNObject read __fakeFieldGet_setUTCMilliseconds write __fakeFieldSet_setUTCMilliseconds;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setSeconds(System.Object,System.Double,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property setSeconds: DDN.mscorlib.DNObject read __fakeFieldGet_setSeconds write __fakeFieldSet_setSeconds;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setUTCSeconds(System.Object,System.Double,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property setUTCSeconds: DDN.mscorlib.DNObject read __fakeFieldGet_setUTCSeconds write __fakeFieldSet_setUTCSeconds;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setMinutes(System.Object,System.Double,System.Object,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property setMinutes: DDN.mscorlib.DNObject read __fakeFieldGet_setMinutes write __fakeFieldSet_setMinutes;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setUTCMinutes(System.Object,System.Double,System.Object,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property setUTCMinutes: DDN.mscorlib.DNObject read __fakeFieldGet_setUTCMinutes write __fakeFieldSet_setUTCMinutes;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setHours(System.Object,System.Double,System.Object,System.Object,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property setHours: DDN.mscorlib.DNObject read __fakeFieldGet_setHours write __fakeFieldSet_setHours;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setUTCHours(System.Object,System.Double,System.Object,System.Object,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property setUTCHours: DDN.mscorlib.DNObject read __fakeFieldGet_setUTCHours write __fakeFieldSet_setUTCHours;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setDate(System.Object,System.Double)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property setDate: DDN.mscorlib.DNObject read __fakeFieldGet_setDate write __fakeFieldSet_setDate;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setUTCDate(System.Object,System.Double)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property setUTCDate: DDN.mscorlib.DNObject read __fakeFieldGet_setUTCDate write __fakeFieldSet_setUTCDate;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setMonth(System.Object,System.Double,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property setMonth: DDN.mscorlib.DNObject read __fakeFieldGet_setMonth write __fakeFieldSet_setMonth;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setUTCMonth(System.Object,System.Double,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property setUTCMonth: DDN.mscorlib.DNObject read __fakeFieldGet_setUTCMonth write __fakeFieldSet_setUTCMonth;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setFullYear(System.Object,System.Double,System.Object,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property setFullYear: DDN.mscorlib.DNObject read __fakeFieldGet_setFullYear write __fakeFieldSet_setFullYear;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setUTCFullYear(System.Object,System.Double,System.Object,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property setUTCFullYear: DDN.mscorlib.DNObject read __fakeFieldGet_setUTCFullYear write __fakeFieldSet_setUTCFullYear;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.setYear(System.Object,System.Double)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property setYear: DDN.mscorlib.DNObject read __fakeFieldGet_setYear write __fakeFieldSet_setYear;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.toGMTString(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property toGMTString: DDN.mscorlib.DNObject read __fakeFieldGet_toGMTString write __fakeFieldSet_toGMTString;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.toDateString(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property toDateString: DDN.mscorlib.DNObject read __fakeFieldGet_toDateString write __fakeFieldSet_toDateString;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.toLocaleDateString(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property toLocaleDateString: DDN.mscorlib.DNObject read __fakeFieldGet_toLocaleDateString write __fakeFieldSet_toLocaleDateString;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.toLocaleString(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property toLocaleString: DDN.mscorlib.DNObject read __fakeFieldGet_toLocaleString write __fakeFieldSet_toLocaleString;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.toLocaleTimeString(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property toLocaleTimeString: DDN.mscorlib.DNObject read __fakeFieldGet_toLocaleTimeString write __fakeFieldSet_toLocaleTimeString;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.toString(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property toString_: DDN.mscorlib.DNObject read __fakeFieldGet_toString write __fakeFieldSet_toString;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.toTimeString(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property toTimeString: DDN.mscorlib.DNObject read __fakeFieldGet_toTimeString write __fakeFieldSet_toTimeString;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.toUTCString(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property toUTCString: DDN.mscorlib.DNObject read __fakeFieldGet_toUTCString write __fakeFieldSet_toUTCString;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DatePrototype.valueOf(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DatePrototype" />
    ///  类。
    ///</summary>
   property valueOf: DDN.mscorlib.DNObject read __fakeFieldGet_valueOf write __fakeFieldSet_valueOf;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNLenientDatePrototype = class(TDNGenericImport<DNLenientDatePrototypeClass, DNLenientDatePrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNEnumeratorObjectClass = interface(DNJSObjectClass)
  ['{6B4FA723-0AD8-5B09-8E5B-46B1DF1DA52B}']
  end;

  ///<summary>
  ///  表示一个枚举器对象。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.EnumeratorObject')]
  DNEnumeratorObject = interface(DNJSObject)
  ['{46222DD4-6190-3936-B815-7B3D4CA55B06}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  将指定的字段添加到对象。
    ///</summary>
    ///  <param name="name">
    ///  要添加的字段的名称。
    ///</param>
    ///<returns>
    ///  新的字段中，如果成功添加。
    ///</returns>
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于匹配指定的名称的所有成员的对象。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  匹配的成员的数组 <paramref name="name" />
    ///  参数。
    ///</returns>
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  设置的值的字段，可动态添加到对象并存储在 <see cref="F:Microsoft.JScript.JSObject.field_table" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  为其设置的值的字段的名称。
    ///</param>
    ///  <param name="value">
    ///  新字段的值。
    ///</param>
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  返回表示当前对象的字符串。
    ///</summary>
    ///<returns>
    ///  表示当前对象的字符串。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于当前的脚本对象的所有成员的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前对象的所有成员的对象数组。
    ///</returns>
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNEnumeratorObject = class(TDNGenericImport<DNEnumeratorObjectClass, DNEnumeratorObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNEnumeratorPrototypeClass = interface(DNJSObjectClass)
  ['{9BABEFF5-32EA-5308-8497-0A666396301E}']
  { static getter & setter } 

    {class} function get_constructor: DNEnumeratorConstructor;

  { static methods } 

    ///<summary>
    ///  确定是否将枚举数已通过集合的最后一项。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果枚举器已传递的最后一项的集合;否则为<see langword="false" />
    ///  。
    ///</returns>
    {class} function atEnd(thisob: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  获取集合中的当前元素。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  集合中的当前元素。
    ///</returns>
    {class} function item(thisob: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    ///<summary>
    ///  将枚举数移到其初始位置，即在集合中的第一个元素之前。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    {class} procedure moveFirst(thisob: DDN.mscorlib.DNObject);
    ///<summary>
    ///  将枚举数推进到集合的下一个元素。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    {class} procedure moveNext(thisob: DDN.mscorlib.DNObject);

  { static propertys } 

    ///<summary>
    ///  获取基于原型的对象，该对象正在使用此原型的引用。
    ///</summary>
    ///<returns>
    ///  对基于原型的对象的引用。
    ///</returns>
    {class} property &constructor: DNEnumeratorConstructor read get_constructor;
  end;

  ///<summary>
  ///  提供用于静态方法和属性 <see cref="T:Microsoft.JScript.EnumeratorObject" />
  ///  对象。
  ///  通过传入到正在请求对方法的访问的对象引用来调用此类的所有方法。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.EnumeratorPrototype')]
  DNEnumeratorPrototype = interface(DNJSObject)
  ['{EA662803-032A-3935-AC7A-5C577A523C7D}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  将指定的字段添加到对象。
    ///</summary>
    ///  <param name="name">
    ///  要添加的字段的名称。
    ///</param>
    ///<returns>
    ///  新的字段中，如果成功添加。
    ///</returns>
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于匹配指定的名称的所有成员的对象。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  匹配的成员的数组 <paramref name="name" />
    ///  参数。
    ///</returns>
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  设置的值的字段，可动态添加到对象并存储在 <see cref="F:Microsoft.JScript.JSObject.field_table" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  为其设置的值的字段的名称。
    ///</param>
    ///  <param name="value">
    ///  新字段的值。
    ///</param>
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  返回表示当前对象的字符串。
    ///</summary>
    ///<returns>
    ///  表示当前对象的字符串。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于当前的脚本对象的所有成员的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前对象的所有成员的对象数组。
    ///</returns>
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNEnumeratorPrototype = class(TDNGenericImport<DNEnumeratorPrototypeClass, DNEnumeratorPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNLenientEnumeratorPrototypeClass = interface(DNEnumeratorPrototypeClass)
  ['{79FDB67D-1DEB-5DF1-BF7D-6599DB03AC79}']
  end;

  ///<summary>
  ///  将存储这些对象表示的静态方法 <see cref="T:Microsoft.JScript.EnumeratorPrototype" />
  ///  类。
  ///<see cref="T:Microsoft.JScript.LenientEnumeratorPrototype" />
  ///  类属于内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.LenientEnumeratorPrototype')]
  DNLenientEnumeratorPrototype = interface(DNEnumeratorPrototype)
  ['{7ABF9BF0-DCE9-328D-BF14-AC6F9FA418D5}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_constructor: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_constructor(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_atEnd: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_atEnd(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_item: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_item(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_moveFirst: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_moveFirst(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_moveNext: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_moveNext(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

    ///<summary>
    ///  存储到的引用<see cref="T:Microsoft.JScript.EnumeratorConstructor" />
    ///  对象。
    ///</summary>
   property &constructor: DDN.mscorlib.DNObject read __fakeFieldGet_constructor write __fakeFieldSet_constructor;
    ///<summary>
    ///  将存储一个对象，表示静态<see cref="M:Microsoft.JScript.EnumeratorPrototype.atEnd(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.EnumeratorPrototype" />
    ///  类。
    ///</summary>
   property atEnd: DDN.mscorlib.DNObject read __fakeFieldGet_atEnd write __fakeFieldSet_atEnd;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.EnumeratorPrototype.item(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.EnumeratorPrototype" />
    ///  类。
    ///</summary>
   property item: DDN.mscorlib.DNObject read __fakeFieldGet_item write __fakeFieldSet_item;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.EnumeratorPrototype.moveFirst(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.EnumeratorPrototype" />
    ///  类。
    ///</summary>
   property moveFirst: DDN.mscorlib.DNObject read __fakeFieldGet_moveFirst write __fakeFieldSet_moveFirst;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.EnumeratorPrototype.moveNext(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.EnumeratorPrototype" />
    ///  类。
    ///</summary>
   property moveNext: DDN.mscorlib.DNObject read __fakeFieldGet_moveNext write __fakeFieldSet_moveNext;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNLenientEnumeratorPrototype = class(TDNGenericImport<DNLenientEnumeratorPrototypeClass, DNLenientEnumeratorPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNErrorObjectClass = interface(DNJSObjectClass)
  ['{6D3C945D-46FA-5F39-AA2F-BB22BFA7EB1D}']
  { static methods } 

    ///<summary>
    ///  将转换 <see cref="T:Microsoft.JScript.ErrorObject" />
    ///  到 <see cref="T:System.Exception" />
    ///  , 、 隐式。
    ///</summary>
    ///  <param name="err">
    ///  要转换的对象。
    ///</param>
    ///<returns>
    ///  转换后 <see cref="T:Microsoft.JScript.ErrorObject" />
    ///  。
    ///</returns>
    {class} function ToException(err: DNErrorObject): DDN.mscorlib.DNException;

  end;

  ///<summary>
  ///  表示一个 error 对象。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.ErrorObject')]
  DNErrorObject = interface(DNJSObject)
  ['{F2067C13-DB00-30F2-AB68-D4921C36EB2C}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_message: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_message(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_number: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_number(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_description: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_description(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

    ///<summary>
    ///  指定说明错误的原因的消息。
    ///</summary>
   property message: DDN.mscorlib.DNObject read __fakeFieldGet_message write __fakeFieldSet_message;
    ///<summary>
    ///  指定错误号或错误代码。
    ///</summary>
   property number: DDN.mscorlib.DNObject read __fakeFieldGet_number write __fakeFieldSet_number;
    ///<summary>
    ///  指定说明错误的原因的消息。
    ///</summary>
   property description: DDN.mscorlib.DNObject read __fakeFieldGet_description write __fakeFieldSet_description;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  将指定的字段添加到对象。
    ///</summary>
    ///  <param name="name">
    ///  要添加的字段的名称。
    ///</param>
    ///<returns>
    ///  新的字段中，如果成功添加。
    ///</returns>
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于匹配指定的名称的所有成员的对象。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  匹配的成员的数组 <paramref name="name" />
    ///  参数。
    ///</returns>
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  设置的值的字段，可动态添加到对象并存储在 <see cref="F:Microsoft.JScript.JSObject.field_table" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  为其设置的值的字段的名称。
    ///</param>
    ///  <param name="value">
    ///  新字段的值。
    ///</param>
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  返回表示当前对象的字符串。
    ///</summary>
    ///<returns>
    ///  表示当前对象的字符串。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于当前的脚本对象的所有成员的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前对象的所有成员的对象数组。
    ///</returns>
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNErrorObject = class(TDNGenericImport<DNErrorObjectClass, DNErrorObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNEvalErrorObjectClass = interface(DNErrorObjectClass)
  ['{D04C42DC-6805-5F41-A0EF-D120772566AB}']
  end;

  ///<summary>
  ///  表示发生的错误时 <see langword="eval" />
  ///  使用方法。
  ///  有关详细信息，请参阅 eval 方法 (Visual Studio-JScript)。
  ///</summary>
  [DNTypeName('Microsoft.JScript.EvalErrorObject')]
  DNEvalErrorObject = interface(DNErrorObject)
  ['{A1838EA7-90A0-3613-A9CA-40838EFE4A4E}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_message: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_message(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_number: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_number(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_description: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_description(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

    ///<summary>
    ///  指定说明错误的原因的消息。
    ///</summary>
   property message: DDN.mscorlib.DNObject read __fakeFieldGet_message write __fakeFieldSet_message;
    ///<summary>
    ///  指定错误号或错误代码。
    ///</summary>
   property number: DDN.mscorlib.DNObject read __fakeFieldGet_number write __fakeFieldSet_number;
    ///<summary>
    ///  指定说明错误的原因的消息。
    ///</summary>
   property description: DDN.mscorlib.DNObject read __fakeFieldGet_description write __fakeFieldSet_description;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNEvalErrorObject = class(TDNGenericImport<DNEvalErrorObjectClass, DNEvalErrorObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNRangeErrorObjectClass = interface(DNErrorObjectClass)
  ['{D0936AD9-891D-5F52-9BE2-EEDC92D6E8F1}']
  end;

  ///<summary>
  ///  表示范围错误。
  ///  例如，如果使用不正确的索引来访问数组元素，可以发生范围错误。
  ///</summary>
  [DNTypeName('Microsoft.JScript.RangeErrorObject')]
  DNRangeErrorObject = interface(DNErrorObject)
  ['{728F539B-AF1C-3AD4-A066-D09A0072A67A}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_message: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_message(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_number: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_number(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_description: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_description(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

    ///<summary>
    ///  指定说明错误的原因的消息。
    ///</summary>
   property message: DDN.mscorlib.DNObject read __fakeFieldGet_message write __fakeFieldSet_message;
    ///<summary>
    ///  指定错误号或错误代码。
    ///</summary>
   property number: DDN.mscorlib.DNObject read __fakeFieldGet_number write __fakeFieldSet_number;
    ///<summary>
    ///  指定说明错误的原因的消息。
    ///</summary>
   property description: DDN.mscorlib.DNObject read __fakeFieldGet_description write __fakeFieldSet_description;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNRangeErrorObject = class(TDNGenericImport<DNRangeErrorObjectClass, DNRangeErrorObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNReferenceErrorObjectClass = interface(DNErrorObjectClass)
  ['{71B58494-F11D-5BCD-9883-638D53F75DC1}']
  end;

  ///<summary>
  ///  表示引用错误。
  ///  例如，当引用未声明的变量时，可以发生引用错误。
  ///</summary>
  [DNTypeName('Microsoft.JScript.ReferenceErrorObject')]
  DNReferenceErrorObject = interface(DNErrorObject)
  ['{6F040B71-E672-3FC2-82F3-09E1BD95448D}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_message: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_message(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_number: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_number(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_description: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_description(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

    ///<summary>
    ///  指定说明错误的原因的消息。
    ///</summary>
   property message: DDN.mscorlib.DNObject read __fakeFieldGet_message write __fakeFieldSet_message;
    ///<summary>
    ///  指定错误号或错误代码。
    ///</summary>
   property number: DDN.mscorlib.DNObject read __fakeFieldGet_number write __fakeFieldSet_number;
    ///<summary>
    ///  指定说明错误的原因的消息。
    ///</summary>
   property description: DDN.mscorlib.DNObject read __fakeFieldGet_description write __fakeFieldSet_description;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNReferenceErrorObject = class(TDNGenericImport<DNReferenceErrorObjectClass, DNReferenceErrorObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNSyntaxErrorObjectClass = interface(DNErrorObjectClass)
  ['{EE0AABF2-33F6-571F-AC9E-9FE9B218684A}']
  end;

  ///<summary>
  ///  表示语法错误。
  ///  例如时忽略分号,，可以发生语法错误。
  ///</summary>
  [DNTypeName('Microsoft.JScript.SyntaxErrorObject')]
  DNSyntaxErrorObject = interface(DNErrorObject)
  ['{181E5270-27FF-3F63-8088-91AA4C432FA9}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_message: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_message(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_number: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_number(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_description: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_description(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

    ///<summary>
    ///  指定说明错误的原因的消息。
    ///</summary>
   property message: DDN.mscorlib.DNObject read __fakeFieldGet_message write __fakeFieldSet_message;
    ///<summary>
    ///  指定错误号或错误代码。
    ///</summary>
   property number: DDN.mscorlib.DNObject read __fakeFieldGet_number write __fakeFieldSet_number;
    ///<summary>
    ///  指定说明错误的原因的消息。
    ///</summary>
   property description: DDN.mscorlib.DNObject read __fakeFieldGet_description write __fakeFieldSet_description;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNSyntaxErrorObject = class(TDNGenericImport<DNSyntaxErrorObjectClass, DNSyntaxErrorObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNTypeErrorObjectClass = interface(DNErrorObjectClass)
  ['{23DF9BD0-82DB-5E03-BD8F-CCFBB0BA2B88}']
  end;

  ///<summary>
  ///  表示类型错误。
  ///  例如，一种类型的对象传递给需要另一种类型的对象的方法时，可以发生类型错误。
  ///</summary>
  [DNTypeName('Microsoft.JScript.TypeErrorObject')]
  DNTypeErrorObject = interface(DNErrorObject)
  ['{0E9D8F62-27CE-350A-A048-BEEAC2B93EB6}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_message: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_message(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_number: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_number(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_description: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_description(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

    ///<summary>
    ///  指定说明错误的原因的消息。
    ///</summary>
   property message: DDN.mscorlib.DNObject read __fakeFieldGet_message write __fakeFieldSet_message;
    ///<summary>
    ///  指定错误号或错误代码。
    ///</summary>
   property number: DDN.mscorlib.DNObject read __fakeFieldGet_number write __fakeFieldSet_number;
    ///<summary>
    ///  指定说明错误的原因的消息。
    ///</summary>
   property description: DDN.mscorlib.DNObject read __fakeFieldGet_description write __fakeFieldSet_description;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNTypeErrorObject = class(TDNGenericImport<DNTypeErrorObjectClass, DNTypeErrorObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNURIErrorObjectClass = interface(DNErrorObjectClass)
  ['{83D7F5E2-4584-5FD3-BC47-4A6BE9E3C17F}']
  end;

  ///<summary>
  ///  表示统一资源标识符 (URI) 错误。
  ///  例如，URI 错误会 when you try to 进行编码或解码的 URI。
  ///</summary>
  [DNTypeName('Microsoft.JScript.URIErrorObject')]
  DNURIErrorObject = interface(DNErrorObject)
  ['{7512A4CB-9A6A-31CC-973D-750A168DAB99}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_message: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_message(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_number: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_number(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_description: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_description(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

    ///<summary>
    ///  指定说明错误的原因的消息。
    ///</summary>
   property message: DDN.mscorlib.DNObject read __fakeFieldGet_message write __fakeFieldSet_message;
    ///<summary>
    ///  指定错误号或错误代码。
    ///</summary>
   property number: DDN.mscorlib.DNObject read __fakeFieldGet_number write __fakeFieldSet_number;
    ///<summary>
    ///  指定说明错误的原因的消息。
    ///</summary>
   property description: DDN.mscorlib.DNObject read __fakeFieldGet_description write __fakeFieldSet_description;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNURIErrorObject = class(TDNGenericImport<DNURIErrorObjectClass, DNURIErrorObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNErrorPrototypeClass = interface(DNJSObjectClass)
  ['{0265A742-A111-5147-B243-A952510EC16F}']
  { static fields getter & setter } 

   function __fakeFieldGet_name: string;

  { static fields } 

    ///<summary>
    ///  指定的错误类型的名称。
    ///  可能值包括错误、 EvalError、 RangeError、 ReferenceError、 SyntaxError、 TypeError 和 URIError。
    ///</summary>
    {class} property name: string read __fakeFieldGet_name;

  { static methods } 

    ///<summary>
    ///  创建指定对象的字符串表示形式。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  字符串表示形式 <paramref name="thisob" />
    ///  如果有一个包含名称的类型的错误对象，以及一条错误消息。
    ///</returns>
    {class} function toString(thisob: DDN.mscorlib.DNObject): string; overload;

  end;

  ///<summary>
  ///  提供用于静态方法和属性 <see cref="T:Microsoft.JScript.ErrorObject" />
  ///  对象。
  ///  通过传入到正在请求对方法的访问的对象引用来调用此类的所有方法。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.ErrorPrototype')]
  DNErrorPrototype = interface(DNJSObject)
  ['{7111FD37-0F39-3069-959E-32828C97CF0D}']
  { getters & setters } 

    function get_constructor: DNErrorConstructor;
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_name: string;
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

    ///<summary>
    ///  指定的错误类型的名称。
    ///  可能值包括错误、 EvalError、 RangeError、 ReferenceError、 SyntaxError、 TypeError 和 URIError。
    ///</summary>
   property name: string read __fakeFieldGet_name;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  将指定的字段添加到对象。
    ///</summary>
    ///  <param name="name">
    ///  要添加的字段的名称。
    ///</param>
    ///<returns>
    ///  新的字段中，如果成功添加。
    ///</returns>
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于匹配指定的名称的所有成员的对象。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  匹配的成员的数组 <paramref name="name" />
    ///  参数。
    ///</returns>
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  设置的值的字段，可动态添加到对象并存储在 <see cref="F:Microsoft.JScript.JSObject.field_table" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  为其设置的值的字段的名称。
    ///</param>
    ///  <param name="value">
    ///  新字段的值。
    ///</param>
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  返回表示当前对象的字符串。
    ///</summary>
    ///<returns>
    ///  表示当前对象的字符串。
    ///</returns>
    function ToString: string; overload;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于当前的脚本对象的所有成员的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前对象的所有成员的对象数组。
    ///</returns>
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取基于原型的对象，该对象正在使用此原型的引用。
    ///</summary>
    ///<returns>
    ///  对基于原型的对象的引用。
    ///</returns>
    property &constructor: DNErrorConstructor read get_constructor;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNErrorPrototype = class(TDNGenericImport<DNErrorPrototypeClass, DNErrorPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNLenientErrorPrototypeClass = interface(DNErrorPrototypeClass)
  ['{DF988EA7-C1CA-5858-9B66-218DA9F012FF}']
  { static fields getter & setter } 

   function __fakeFieldGet_name: string;

  { static fields } 

    ///<summary>
    ///  将包含错误的子类型的名称的字符串存储。
    ///</summary>
    {class} property name: string read __fakeFieldGet_name;

  end;

  ///<summary>
  ///  将存储这些对象表示的静态方法 <see cref="T:Microsoft.JScript.ErrorPrototype" />
  ///  类。
  ///<see cref="T:Microsoft.JScript.LenientErrorPrototype" />
  ///  类属于内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.LenientErrorPrototype')]
  DNLenientErrorPrototype = interface(DNErrorPrototype)
  ['{A9ED43A6-F973-3EB8-A4E3-9625446A3675}']
  { getters & setters } 

    function get_constructor: DNErrorConstructor;
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_constructor: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_constructor(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_name: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_name(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

    ///<summary>
    ///  存储到的引用<see cref="T:Microsoft.JScript.ErrorConstructor" />
    ///  对象。
    ///</summary>
   property &constructor: DDN.mscorlib.DNObject read __fakeFieldGet_constructor write __fakeFieldSet_constructor;
    ///<summary>
    ///  将包含错误的子类型的名称的字符串存储。
    ///</summary>
   property name: DDN.mscorlib.DNObject read __fakeFieldGet_name write __fakeFieldSet_name;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ErrorPrototype.toString(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.ErrorPrototype" />
    ///  类。
    ///</summary>
   property toString_: DDN.mscorlib.DNObject read __fakeFieldGet_toString write __fakeFieldSet_toString;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取基于原型的对象，该对象正在使用此原型的引用。
    ///</summary>
    ///<returns>
    ///  对基于原型的对象的引用。
    ///</returns>
    property &constructor: DNErrorConstructor read get_constructor;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNLenientErrorPrototype = class(TDNGenericImport<DNLenientErrorPrototypeClass, DNLenientErrorPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNJSPrototypeObjectClass = interface(DNJSObjectClass)
  ['{ADC1D0CA-616E-53C6-938F-20CFCEABA816}']
  end;

  ///<summary>
  ///  构造函数函数将属性添加到<see cref="T:Microsoft.JScript.JSObject" />
  ///  进行早期绑定时。
  ///  此类所属的对象和函数的类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.JSPrototypeObject')]
  DNJSPrototypeObject = interface(DNJSObject)
  ['{2E9C125F-E16F-37D0-9152-BBEA40A394CE}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_constructor: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_constructor(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

    ///<summary>
    ///  存储用于定义基于原型的对象的构造函数函数对象。
    ///</summary>
   property &constructor: DDN.mscorlib.DNObject read __fakeFieldGet_constructor write __fakeFieldSet_constructor;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  将指定的字段添加到对象。
    ///</summary>
    ///  <param name="name">
    ///  要添加的字段的名称。
    ///</param>
    ///<returns>
    ///  新的字段中，如果成功添加。
    ///</returns>
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于匹配指定的名称的所有成员的对象。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  匹配的成员的数组 <paramref name="name" />
    ///  参数。
    ///</returns>
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  设置的值的字段，可动态添加到对象并存储在 <see cref="F:Microsoft.JScript.JSObject.field_table" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  为其设置的值的字段的名称。
    ///</param>
    ///  <param name="value">
    ///  新字段的值。
    ///</param>
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  返回表示当前对象的字符串。
    ///</summary>
    ///<returns>
    ///  表示当前对象的字符串。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于当前的脚本对象的所有成员的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前对象的所有成员的对象数组。
    ///</returns>
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNJSPrototypeObject = class(TDNGenericImport<DNJSPrototypeObjectClass, DNJSPrototypeObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNMathObjectClass = interface(DNJSObjectClass)
  ['{ED1D4BBD-7AFB-5349-9AD9-1339576F36AB}']
  { static methods } 

    ///<summary>
    ///  计算指定的数字的绝对值。
    ///</summary>
    ///  <param name="d">
    ///  要计算的绝对值的数值的数字。
    ///</param>
    ///<returns><paramref name="d" />
    ///  的绝对值。
    ///</returns>
    {class} function abs(d: Double): Double;
    ///<summary>
    ///  计算指定的数字的反余弦值。
    ///</summary>
    ///  <param name="x">
    ///  要计算的反余弦值的数字。
    ///</param>
    ///<returns>
    ///  反余弦值<paramref name="x" />
    ///  ，以弧度为单位。
    ///</returns>
    {class} function acos(x: Double): Double;
    ///<summary>
    ///  计算指定的数字的反正弦值。
    ///</summary>
    ///  <param name="x">
    ///  要计算的反正弦值的数字。
    ///</param>
    ///<returns>
    ///  反正弦值<paramref name="x" />
    ///  ，以弧度为单位。
    ///</returns>
    {class} function asin(x: Double): Double;
    ///<summary>
    ///  计算指定的数的反正切值。
    ///</summary>
    ///  <param name="x">
    ///  要计算的反正切值的数字。
    ///</param>
    ///<returns>
    ///  反正切值<paramref name="x" />
    ///  ，以弧度为单位。
    ///</returns>
    {class} function atan(x: Double): Double;
    ///<summary>
    ///  计算指定的数字的商的反正切值。
    ///</summary>
    ///  <param name="dy">
    ///  若要计算的反正切值的商的分子。
    ///</param>
    ///  <param name="dx">
    ///  若要计算的反正切值的商的分母。
    ///</param>
    ///<returns>
    ///  反正切值<paramref name="dy" />
    ///  /<paramref name="dx" />
    ///  ，以弧度为单位。
    ///</returns>
    {class} function atan2(dy: Double; dx: Double): Double;
    ///<summary>
    ///  计算指定的数，大于或等于指定数字的最小整数的上限。
    ///</summary>
    ///  <param name="x">
    ///  若要计算的上限数。
    ///</param>
    ///<returns>
    ///  上限<paramref name="x" />
    ///  。
    ///</returns>
    {class} function ceil(x: Double): Double;
    ///<summary>
    ///  计算指定角度的余弦值。
    ///</summary>
    ///  <param name="x">
    ///  以弧度计量的角度。
    ///</param>
    ///<returns><paramref name="x" />
    ///  的余弦值。
    ///</returns>
    {class} function cos(x: Double): Double;
    ///<summary>
    ///  计算数 e 的指定次幂，其中 e 是欧拉常量，是自然对数的底数。
    ///</summary>
    ///  <param name="x">
    ///  幂数 <paramref name="e" />
    ///  到。
    ///</param>
    ///<returns>
    ///  数 e 提升到 <paramref name="x" />
    ///  电源。
    ///</returns>
    {class} function exp(x: Double): Double;
    ///<summary>
    ///  计算的下限指定数字小于或等于指定数字的最大整数。
    ///</summary>
    ///  <param name="x">
    ///  要计算的下限的数字。
    ///</param>
    ///<returns>
    ///  基底 <paramref name="x" />
    ///  。
    ///</returns>
    {class} function floor(x: Double): Double;
    ///<summary>
    ///  计算对数底 e 指定的数字，即指定数字的自然对数。
    ///</summary>
    ///  <param name="x">
    ///  要计算的自然对数的数字。
    ///</param>
    ///<returns>
    ///  自然对数 <paramref name="x" />
    ///  。
    ///</returns>
    {class} function log(x: Double): Double;
    ///<summary>
    ///  返回两个或多个指定数字的最大值。
    ///</summary>
    ///  <param name="x">
    ///  要比较的第一个数字。
    ///</param>
    ///  <param name="y">
    ///  要比较的第二个数字。
    ///</param>
    ///  <param name="args">
    ///  要比较的其他号码。
    ///</param>
    ///<returns>
    ///  最大的 <paramref name="x" />
    ///  , ，<paramref name="y" />
    ///  , ，和中包含的数字 <paramref name="args" />
    ///  。
    ///</returns>
    {class} function max(x: DDN.mscorlib.DNObject; y: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): Double;
    ///<summary>
    ///  返回两个或多个指定数字的最小值。
    ///</summary>
    ///  <param name="x">
    ///  要比较的第一个数字。
    ///</param>
    ///  <param name="y">
    ///  要比较的第二个数字。
    ///</param>
    ///  <param name="args">
    ///  要比较的其他号码。
    ///</param>
    ///<returns>
    ///  最小的 <paramref name="x" />
    ///  , ，<paramref name="y" />
    ///  , ，和中包含的数字 <paramref name="args" />
    ///  。
    ///</returns>
    {class} function min(x: DDN.mscorlib.DNObject; y: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): Double;
    ///<summary>
    ///  计算某数的指定次幂。
    ///</summary>
    ///  <param name="dx">
    ///  编号，以将提升为 <paramref name="dy" />
    ///  电源。
    ///</param>
    ///  <param name="dy">
    ///  幂数 <paramref name="dx" />
    ///  到。
    ///</param>
    ///<returns>
    ///  数 <paramref name="dx" />
    ///  提升到 <paramref name="dy" />
    ///  电源。
    ///</returns>
    {class} function pow(dx: Double; dy: Double): Double;
    ///<summary>
    ///  生成一个介于 0 和 1 之间的随机数字。
    ///  此方法不生成加密性极安全的随机数字。
    ///</summary>
    ///<returns>
    ///  一个大于或等于 0，且小于 1 的数字。
    ///</returns>
    {class} function random: Double;
    ///<summary>
    ///  将指定的数字舍入关闭，或最接近的整数。
    ///</summary>
    ///  <param name="d">
    ///  要舍入数字。
    ///</param>
    ///<returns>
    ///  如果的小数部分 <paramref name="d" />
    ///  为到下一个整数，小于偶数 <paramref name="d" />
    ///  向下舍入。
    ///  如果的小数部分 <paramref name="d" />
    ///  二者中的偶数上或更多的下一个整数， <paramref name="d" />
    ///  向上舍入。
    ///</returns>
    {class} function round(d: Double): Double;
    ///<summary>
    ///  计算指定角度的正弦值。
    ///</summary>
    ///  <param name="x">
    ///  以弧度计量的角度。
    ///</param>
    ///<returns><paramref name="x" />
    ///  的正弦值。
    ///</returns>
    {class} function sin(x: Double): Double;
    ///<summary>
    ///  计算指定的数字的平方根。
    ///</summary>
    ///  <param name="x">
    ///  要计算平方根的数字。
    ///</param>
    ///<returns>
    ///  平方根 <paramref name="x" />
    ///  。
    ///</returns>
    {class} function sqrt(x: Double): Double;
    ///<summary>
    ///  计算指定角度的正切值。
    ///</summary>
    ///  <param name="x">
    ///  以弧度计量的角度。
    ///</param>
    ///<returns><paramref name="x" />
    ///  的正切值。
    ///</returns>
    {class} function tan(x: Double): Double;

  end;

  ///<summary>
  ///  为三角函数、 对数函数和其他通用数学函数提供常数和静态方法。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.MathObject')]
  DNMathObject = interface(DNJSObject)
  ['{4690F45C-7D99-3190-9167-89FDAD3FE109}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  将指定的字段添加到对象。
    ///</summary>
    ///  <param name="name">
    ///  要添加的字段的名称。
    ///</param>
    ///<returns>
    ///  新的字段中，如果成功添加。
    ///</returns>
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于匹配指定的名称的所有成员的对象。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  匹配的成员的数组 <paramref name="name" />
    ///  参数。
    ///</returns>
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  设置的值的字段，可动态添加到对象并存储在 <see cref="F:Microsoft.JScript.JSObject.field_table" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  为其设置的值的字段的名称。
    ///</param>
    ///  <param name="value">
    ///  新字段的值。
    ///</param>
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  返回表示当前对象的字符串。
    ///</summary>
    ///<returns>
    ///  表示当前对象的字符串。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于当前的脚本对象的所有成员的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前对象的所有成员的对象数组。
    ///</returns>
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNMathObject = class(TDNGenericImport<DNMathObjectClass, DNMathObject>)
  public const
    ///<summary>
    ///  存储一个值，表示欧拉常量，即自然对数的底，由常量指定基 e。
    ///</summary>
   E = 2.71828182845905;
    ///<summary>
    ///  存储一个值，该值表示对数底 e 为 10，10 的自然对数。
    ///</summary>
   LN10 = 2.30258509299405;
    ///<summary>
    ///  存储一个值，该值表示对数底 e 2，2 的自然对数。
    ///</summary>
   LN2 = 0.693147180559945;
    ///<summary>
    ///  存储一个值，该值表示对数的底 2 e, 的二进制对数 e。
    ///</summary>
   LOG2E = 1.44269504088896;
    ///<summary>
    ///  存储一个值，该值表示对数的底 10 e, 的常用对数 e。
    ///</summary>
   LOG10E = 0.434294481903252;
    ///<summary>
    ///  存储一个值，表示的比率圆的周长与其直径，由常量指定 π。
    ///</summary>
   PI = 3.14159265358979;
    ///<summary>
    ///  存储一个值，表示以下等效值: (√ 2) / 2，√(½) 和 1/(√2)。
    ///</summary>
   SQRT1_2 = 0.707106781186548;
    ///<summary>
    ///  存储一个值，该值表示 √ 2。
    ///</summary>
   SQRT2 = 1.4142135623731;
  end;

  //-------------namespace: Microsoft.JScript----------------
  DNLenientMathObjectClass = interface(DNMathObjectClass)
  ['{ED303990-F2ED-552B-93FE-C0B703D3AB49}']
  end;

  ///<summary>
  ///  将存储这些对象表示的静态方法 <see cref="T:Microsoft.JScript.MathObject" />
  ///  类。
  ///<see cref="T:Microsoft.JScript.LenientMathObject" />
  ///  类属于内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.LenientMathObject')]
  DNLenientMathObject = interface(DNMathObject)
  ['{0A950FA0-325E-3FAA-A01D-62DD701944C4}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_abs: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_abs(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_acos: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_acos(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_asin: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_asin(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_atan: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_atan(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_atan2: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_atan2(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_ceil: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_ceil(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_cos: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_cos(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_exp: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_exp(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_floor: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_floor(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_log: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_log(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_max: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_max(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_min: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_min(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_pow: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_pow(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_random: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_random(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_round: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_round(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_sin: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_sin(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_sqrt: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_sqrt(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_tan: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_tan(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

    ///<summary>
    ///  将存储一个对象，表示静态<see cref="M:Microsoft.JScript.MathObject.abs(System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
   property abs: DDN.mscorlib.DNObject read __fakeFieldGet_abs write __fakeFieldSet_abs;
    ///<summary>
    ///  将存储一个对象，表示静态<see cref="M:Microsoft.JScript.MathObject.acos(System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
   property acos: DDN.mscorlib.DNObject read __fakeFieldGet_acos write __fakeFieldSet_acos;
    ///<summary>
    ///  将存储一个对象，表示静态<see cref="M:Microsoft.JScript.MathObject.asin(System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
   property asin: DDN.mscorlib.DNObject read __fakeFieldGet_asin write __fakeFieldSet_asin;
    ///<summary>
    ///  将存储一个对象，表示静态<see cref="M:Microsoft.JScript.MathObject.atan(System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
   property atan: DDN.mscorlib.DNObject read __fakeFieldGet_atan write __fakeFieldSet_atan;
    ///<summary>
    ///  将存储一个对象，表示静态<see cref="M:Microsoft.JScript.MathObject.atan2(System.Double,System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
   property atan2: DDN.mscorlib.DNObject read __fakeFieldGet_atan2 write __fakeFieldSet_atan2;
    ///<summary>
    ///  将存储一个对象，表示静态<see cref="M:Microsoft.JScript.MathObject.ceil(System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
   property ceil: DDN.mscorlib.DNObject read __fakeFieldGet_ceil write __fakeFieldSet_ceil;
    ///<summary>
    ///  将存储一个对象，表示静态<see cref="M:Microsoft.JScript.MathObject.cos(System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
   property cos: DDN.mscorlib.DNObject read __fakeFieldGet_cos write __fakeFieldSet_cos;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.MathObject.exp(System.Double)" />
    ///  方法 <see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
   property exp: DDN.mscorlib.DNObject read __fakeFieldGet_exp write __fakeFieldSet_exp;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.MathObject.floor(System.Double)" />
    ///  方法 <see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
   property floor: DDN.mscorlib.DNObject read __fakeFieldGet_floor write __fakeFieldSet_floor;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.MathObject.log(System.Double)" />
    ///  方法 <see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
   property log: DDN.mscorlib.DNObject read __fakeFieldGet_log write __fakeFieldSet_log;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.MathObject.max(System.Object,System.Object,System.Object[])" />
    ///  方法 <see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
   property max: DDN.mscorlib.DNObject read __fakeFieldGet_max write __fakeFieldSet_max;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.MathObject.min(System.Object,System.Object,System.Object[])" />
    ///  方法 <see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
   property min: DDN.mscorlib.DNObject read __fakeFieldGet_min write __fakeFieldSet_min;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.MathObject.pow(System.Double,System.Double)" />
    ///  方法 <see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
   property pow: DDN.mscorlib.DNObject read __fakeFieldGet_pow write __fakeFieldSet_pow;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.MathObject.random" />
    ///  方法 <see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
   property random: DDN.mscorlib.DNObject read __fakeFieldGet_random write __fakeFieldSet_random;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.MathObject.round(System.Double)" />
    ///  方法 <see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
   property round: DDN.mscorlib.DNObject read __fakeFieldGet_round write __fakeFieldSet_round;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.MathObject.sin(System.Double)" />
    ///  方法 <see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
   property sin: DDN.mscorlib.DNObject read __fakeFieldGet_sin write __fakeFieldSet_sin;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.MathObject.sqrt(System.Double)" />
    ///  方法 <see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
   property sqrt: DDN.mscorlib.DNObject read __fakeFieldGet_sqrt write __fakeFieldSet_sqrt;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.MathObject.tan(System.Double)" />
    ///  方法 <see cref="T:Microsoft.JScript.MathObject" />
    ///  类。
    ///</summary>
   property tan: DDN.mscorlib.DNObject read __fakeFieldGet_tan write __fakeFieldSet_tan;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNLenientMathObject = class(TDNGenericImport<DNLenientMathObjectClass, DNLenientMathObject>)
  public const
    ///<summary>
    ///  存储一个值，表示欧拉常量，由常数 e 是自然对数的基数。
    ///</summary>
   E = 2.71828182845905;
    ///<summary>
    ///  存储一个值，该值表示对数底 e 为 10，10 的自然对数。
    ///</summary>
   LN10 = 2.30258509299405;
    ///<summary>
    ///  存储一个值，该值表示对数底 e 2，2 的自然对数。
    ///</summary>
   LN2 = 0.693147180559945;
    ///<summary>
    ///  存储一个值，该值表示对数的底 2 e, 的二进制对数 e。
    ///</summary>
   LOG2E = 1.44269504088896;
    ///<summary>
    ///  存储一个值，该值表示对数的底 10 e, 的常用对数 e。
    ///</summary>
   LOG10E = 0.434294481903252;
    ///<summary>
    ///  存储一个值，表示的比率圆的周长与其直径，由常量指定 π。
    ///</summary>
   PI = 3.14159265358979;
    ///<summary>
    ///  存储一个值，表示以下等效值: (√ 2) / 2，√(½) 和 1/(√2)。
    ///</summary>
   SQRT1_2 = 0.707106781186548;
    ///<summary>
    ///  存储一个值，该值表示 √ 2。
    ///</summary>
   SQRT2 = 1.4142135623731;
  end;

  //-------------namespace: Microsoft.JScript----------------
  DNNumberObjectClass = interface(DNJSObjectClass)
  ['{5FA0A73A-3A7E-558A-A12F-421746170A32}']
  end;

  ///<summary>
  ///  表示一个数字对象。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.NumberObject')]
  DNNumberObject = interface(DNJSObject)
  ['{165AB683-F8FD-3874-8A2B-7C2A5F3B8724}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  返回基础值对象的类型，则返回 <see cref="T:Microsoft.JScript.NumberObject" />
    ///  。
    ///</summary>
    ///<returns>
    ///  基础值对象的类型或 <see cref="T:Microsoft.JScript.NumberObject" />
    ///  。
    ///</returns>
    function GetType: DDN.mscorlib.DNType;
    ///<summary>
    ///  将指定的字段添加到对象。
    ///</summary>
    ///  <param name="name">
    ///  要添加的字段的名称。
    ///</param>
    ///<returns>
    ///  新的字段中，如果成功添加。
    ///</returns>
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于匹配指定的名称的所有成员的对象。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  匹配的成员的数组 <paramref name="name" />
    ///  参数。
    ///</returns>
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  设置的值的字段，可动态添加到对象并存储在 <see cref="F:Microsoft.JScript.JSObject.field_table" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  为其设置的值的字段的名称。
    ///</param>
    ///  <param name="value">
    ///  新字段的值。
    ///</param>
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  返回表示当前对象的字符串。
    ///</summary>
    ///<returns>
    ///  表示当前对象的字符串。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于当前的脚本对象的所有成员的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前对象的所有成员的对象数组。
    ///</returns>
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNNumberObject = class(TDNGenericImport<DNNumberObjectClass, DNNumberObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNNumberPrototypeClass = interface(DNNumberObjectClass)
  ['{4DF0F31D-4E48-519F-BC9C-41A3395137E2}']
  { static getter & setter } 

    {class} function get_constructor: DNNumberConstructor;

  { static methods } 

    ///<summary>
    ///  创建基于指定对象的字符串表示 <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo" />
    ///  和 <see cref="T:System.Globalization.CultureInfo" />
    ///  。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  字符串表示形式 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function toLocaleString(thisob: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  创建指定对象的字符串表示形式。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="radix">
    ///  一个介于之间的数字 2 和 36 表示数字系统的基数， <paramref name="thisob" />
    ///  以表示。
    ///  默认值为 10。
    ///</param>
    ///<returns>
    ///  字符串表示形式 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function toString(thisob: DDN.mscorlib.DNObject; radix: DDN.mscorlib.DNObject): string; overload;
    ///<summary>
    ///  返回指定的值 <see cref="T:Microsoft.JScript.NumberObject" />
    ///  。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns><paramref name="thisob" />
    ///  的值。
    ///</returns>
    {class} function valueOf(thisob: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    ///<summary>
    ///  创建的字符串表示形式指定 <see cref="T:Microsoft.JScript.NumberObject" />
    ///  使用科学记数法 (E) 表示法。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="fractionDigits">
    ///  表示要显示的小数位数数字 0 到 20 之间数字。
    ///  默认值为 16。
    ///</param>
    ///<returns>
    ///  字符串表示形式 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function toExponential(thisob: DDN.mscorlib.DNObject; fractionDigits: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  创建的字符串表示形式指定 <see cref="T:Microsoft.JScript.NumberObject" />
    ///  它显示指定的数字的小数位数。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="fractionDigits">
    ///  表示要显示的小数位数数字 0 到 20 之间数字。
    ///  默认值为 0。
    ///</param>
    ///<returns>
    ///  字符串表示形式 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function toFixed(thisob: DDN.mscorlib.DNObject; fractionDigits: Double): string;
    ///<summary>
    ///  创建的字符串表示形式指定 <see cref="T:Microsoft.JScript.NumberObject" />
    ///  显示指定的位数的精度数字。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="precision">
    ///  一个介于 0 和 21 之间的数字表示的精度位数，以显示。
    ///  <paramref name="Precision digits" />
    ///  在小数点的数字和指数组合。
    ///</param>
    ///<returns>
    ///  字符串表示形式 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function toPrecision(thisob: DDN.mscorlib.DNObject; precision: DDN.mscorlib.DNObject): string;

  { static propertys } 

    ///<summary>
    ///  获取基于原型的对象，该对象正在使用此原型的引用。
    ///</summary>
    ///<returns>
    ///  对基于原型的对象的引用。
    ///</returns>
    {class} property &constructor: DNNumberConstructor read get_constructor;
  end;

  ///<summary>
  ///  提供用于静态方法和属性 <see cref="T:Microsoft.JScript.NumberObject" />
  ///  对象。
  ///  通过传入到正在请求对方法的访问的对象引用来调用此类的所有方法。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.NumberPrototype')]
  DNNumberPrototype = interface(DNNumberObject)
  ['{F711FD19-773C-3A6F-B33B-93C69F066D20}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  返回基础值对象的类型，则返回 <see cref="T:Microsoft.JScript.NumberObject" />
    ///  。
    ///</summary>
    ///<returns>
    ///  基础值对象的类型或 <see cref="T:Microsoft.JScript.NumberObject" />
    ///  。
    ///</returns>
    function GetType: DDN.mscorlib.DNType;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string; overload;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNNumberPrototype = class(TDNGenericImport<DNNumberPrototypeClass, DNNumberPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNLenientNumberPrototypeClass = interface(DNNumberPrototypeClass)
  ['{8CC94572-2245-5009-8447-867C205B2E42}']
  end;

  ///<summary>
  ///  将存储这些对象表示的静态方法 <see cref="T:Microsoft.JScript.NumberPrototype" />
  ///  类。
  ///<see cref="T:Microsoft.JScript.LenientNumberPrototype" />
  ///  类属于内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.LenientNumberPrototype')]
  DNLenientNumberPrototype = interface(DNNumberPrototype)
  ['{407A2180-F031-3756-8E9B-EED643B7520D}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_constructor: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_constructor(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toExponential: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toExponential(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toFixed: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toFixed(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toLocaleString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toLocaleString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toPrecision: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toPrecision(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_valueOf: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_valueOf(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

    ///<summary>
    ///  存储到的引用<see cref="T:Microsoft.JScript.NumberConstructor" />
    ///  对象。
    ///</summary>
   property &constructor: DDN.mscorlib.DNObject read __fakeFieldGet_constructor write __fakeFieldSet_constructor;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.NumberPrototype.toExponential(System.Object,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.NumberPrototype" />
    ///  类。
    ///</summary>
   property toExponential: DDN.mscorlib.DNObject read __fakeFieldGet_toExponential write __fakeFieldSet_toExponential;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.NumberPrototype.toFixed(System.Object,System.Double)" />
    ///  方法 <see cref="T:Microsoft.JScript.NumberPrototype" />
    ///  类。
    ///</summary>
   property toFixed: DDN.mscorlib.DNObject read __fakeFieldGet_toFixed write __fakeFieldSet_toFixed;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.NumberPrototype.toLocaleString(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.NumberPrototype" />
    ///  类。
    ///</summary>
   property toLocaleString: DDN.mscorlib.DNObject read __fakeFieldGet_toLocaleString write __fakeFieldSet_toLocaleString;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.NumberPrototype.toPrecision(System.Object,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.NumberPrototype" />
    ///  类。
    ///</summary>
   property toPrecision: DDN.mscorlib.DNObject read __fakeFieldGet_toPrecision write __fakeFieldSet_toPrecision;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.NumberPrototype.toString(System.Object,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.NumberPrototype" />
    ///  类。
    ///</summary>
   property toString_: DDN.mscorlib.DNObject read __fakeFieldGet_toString write __fakeFieldSet_toString;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.NumberPrototype.valueOf(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.NumberPrototype" />
    ///  类。
    ///</summary>
   property valueOf: DDN.mscorlib.DNObject read __fakeFieldGet_valueOf write __fakeFieldSet_valueOf;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function GetType: DDN.mscorlib.DNType;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNLenientNumberPrototype = class(TDNGenericImport<DNLenientNumberPrototypeClass, DNLenientNumberPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNObjectPrototypeClass = interface(DNJSObjectClass)
  ['{8310404D-E335-502A-9E28-B69878B1C583}']
  { static getter & setter } 

    {class} function get_constructor: DNObjectConstructor;

  { static methods } 

    ///<summary>
    ///  确定指定的对象是否包含指定的属性。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于的对象。
    ///</param>
    ///  <param name="name">
    ///  要搜索的属性。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果<paramref name="name" />
    ///  是的一个属性<paramref name="thisob" />
    ///  并且已被设置; 否则为<see langword="false" />
    ///  。
    ///</returns>
    {class} function hasOwnProperty(thisob: DDN.mscorlib.DNObject; name: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  确定第一个指定的对象是否可以作为第二个指定对象的类型实例化。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="ob">
    ///  具有所需的类型的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="ob" />
    ///  是继承层次结构中 <paramref name="thisob" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function isPrototypeOf(thisob: DDN.mscorlib.DNObject; ob: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  确定指定的对象的指定的属性是否可枚举。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="name">
    ///  要测试的属性。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="name" />
    ///  是一个可枚举属性; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function propertyIsEnumerable(thisob: DDN.mscorlib.DNObject; name: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  通过使用创建的字符串表示形式指定的对象 <see cref="T:Microsoft.JScript.Convert" />
    ///  类。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  字符串表示形式 <paramref name="thisob" />
    ///  ，它由创建 <see cref="T:Microsoft.JScript.Convert" />
    ///  类。
    ///</returns>
    {class} function toLocaleString(thisob: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  返回指定的对象。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns><paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function valueOf(thisob: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    ///<summary>
    ///  创建指定对象的字符串表示形式。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  该对象，它定义了一个; 如果类的名称否则为 <see cref="P:System.Reflection.MemberInfo.Name" />
    ///  的 <see cref="T:System.Type" />
    ///  的对象。
    ///</returns>
    {class} function toString(thisob: DDN.mscorlib.DNObject): string; overload;

  { static propertys } 

    ///<summary>
    ///  获取基于原型的对象，该对象正在使用此原型的引用。
    ///</summary>
    ///<returns>
    ///  对基于原型的对象的引用。
    ///</returns>
    {class} property &constructor: DNObjectConstructor read get_constructor;
  end;

  ///<summary>
  ///  提供用于静态方法和属性 <see cref="T:Microsoft.JScript.JSObject" />
  ///  对象。
  ///  通过传入到正在请求对方法的访问的对象引用来调用此类的所有方法。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.ObjectPrototype')]
  DNObjectPrototype = interface(DNJSObject)
  ['{E864DDDB-A582-3EAD-95C1-9FCBC4AE35A5}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  将指定的字段添加到对象。
    ///</summary>
    ///  <param name="name">
    ///  要添加的字段的名称。
    ///</param>
    ///<returns>
    ///  新的字段中，如果成功添加。
    ///</returns>
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于匹配指定的名称的所有成员的对象。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  匹配的成员的数组 <paramref name="name" />
    ///  参数。
    ///</returns>
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  设置的值的字段，可动态添加到对象并存储在 <see cref="F:Microsoft.JScript.JSObject.field_table" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  为其设置的值的字段的名称。
    ///</param>
    ///  <param name="value">
    ///  新字段的值。
    ///</param>
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  返回表示当前对象的字符串。
    ///</summary>
    ///<returns>
    ///  表示当前对象的字符串。
    ///</returns>
    function ToString: string; overload;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于当前的脚本对象的所有成员的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前对象的所有成员的对象数组。
    ///</returns>
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNObjectPrototype = class(TDNGenericImport<DNObjectPrototypeClass, DNObjectPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNLenientObjectPrototypeClass = interface(DNObjectPrototypeClass)
  ['{D95D1D50-9D57-5450-88AB-F69C4938C6E1}']
  end;

  ///<summary>
  ///  将存储这些对象表示的静态方法 <see cref="T:Microsoft.JScript.ObjectPrototype" />
  ///  类。
  ///<see cref="T:Microsoft.JScript.LenientObjectPrototype" />
  ///  类属于内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.LenientObjectPrototype')]
  DNLenientObjectPrototype = interface(DNObjectPrototype)
  ['{F0CBDD7A-A152-369A-8F1C-E93B0A653858}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_constructor: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_constructor(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_hasOwnProperty: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_hasOwnProperty(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_isPrototypeOf: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_isPrototypeOf(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_propertyIsEnumerable: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_propertyIsEnumerable(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toLocaleString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toLocaleString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_valueOf: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_valueOf(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

    ///<summary>
    ///  存储到的引用<see cref="T:Microsoft.JScript.ObjectConstructor" />
    ///  对象。
    ///</summary>
   property &constructor: DDN.mscorlib.DNObject read __fakeFieldGet_constructor write __fakeFieldSet_constructor;
    ///<summary>
    ///  将存储一个对象，表示静态<see cref="M:Microsoft.JScript.ObjectPrototype.hasOwnProperty(System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.ObjectPrototype" />
    ///  类。
    ///</summary>
   property hasOwnProperty: DDN.mscorlib.DNObject read __fakeFieldGet_hasOwnProperty write __fakeFieldSet_hasOwnProperty;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ObjectPrototype.isPrototypeOf(System.Object,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.ObjectPrototype" />
    ///  类。
    ///</summary>
   property isPrototypeOf: DDN.mscorlib.DNObject read __fakeFieldGet_isPrototypeOf write __fakeFieldSet_isPrototypeOf;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ObjectPrototype.propertyIsEnumerable(System.Object,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.ObjectPrototype" />
    ///  类。
    ///</summary>
   property propertyIsEnumerable: DDN.mscorlib.DNObject read __fakeFieldGet_propertyIsEnumerable write __fakeFieldSet_propertyIsEnumerable;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ObjectPrototype.toLocaleString(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.ObjectPrototype" />
    ///  类。
    ///</summary>
   property toLocaleString: DDN.mscorlib.DNObject read __fakeFieldGet_toLocaleString write __fakeFieldSet_toLocaleString;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ObjectPrototype.toString(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.ObjectPrototype" />
    ///  类。
    ///</summary>
   property toString_: DDN.mscorlib.DNObject read __fakeFieldGet_toString write __fakeFieldSet_toString;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.ObjectPrototype.valueOf(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.ObjectPrototype" />
    ///  类。
    ///</summary>
   property valueOf: DDN.mscorlib.DNObject read __fakeFieldGet_valueOf write __fakeFieldSet_valueOf;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNLenientObjectPrototype = class(TDNGenericImport<DNLenientObjectPrototypeClass, DNLenientObjectPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNRegExpObjectClass = interface(DNJSObjectClass)
  ['{78726095-3069-524C-B2EA-59472F5BF66A}']
  end;

  ///<summary>
  ///  表示正则表达式对象。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.RegExpObject')]
  DNRegExpObject = interface(DNJSObject)
  ['{7508BD7C-F92D-3F4A-8566-436CA1500FBC}']
  { getters & setters } 

    function get_source: string;
    function get_ignoreCase: Boolean;
    function get_global: Boolean;
    function get_multiline: Boolean;
    function get_lastIndex: DDN.mscorlib.DNObject;
    procedure set_lastIndex(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  创建此对象，它包含正则表达式模式和标志的字符串表示。
    ///</summary>
    ///<returns>
    ///  此对象的字符串表示形式。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  将指定的字段添加到对象。
    ///</summary>
    ///  <param name="name">
    ///  要添加的字段的名称。
    ///</param>
    ///<returns>
    ///  新的字段中，如果成功添加。
    ///</returns>
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于匹配指定的名称的所有成员的对象。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  匹配的成员的数组 <paramref name="name" />
    ///  参数。
    ///</returns>
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  设置的值的字段，可动态添加到对象并存储在 <see cref="F:Microsoft.JScript.JSObject.field_table" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  为其设置的值的字段的名称。
    ///</param>
    ///  <param name="value">
    ///  新字段的值。
    ///</param>
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于当前的脚本对象的所有成员的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前对象的所有成员的对象数组。
    ///</returns>
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取由此对象表示的正则表达式模式。
    ///</summary>
    ///<returns>
    ///  此对象表示正则表达式模式。
    ///</returns>
    property source: string read get_source;
    ///<summary>
    ///  获取一个值，该值指示是否使用不区分大小写标志来执行搜索 (/i)。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果执行不区分大小写的搜索;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property ignoreCase: Boolean read get_ignoreCase;
    ///<summary>
    ///  获取一个值，该值指示是否使用了全局标志来执行搜索 (/g)，匹配所有匹配项。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果执行全局搜索;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property global: Boolean read get_global;
    ///<summary>
    ///  获取一个值，该值指示是否有多行的标志来执行搜索 (/m)。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果执行搜索，在多行模式下;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property multiline: Boolean read get_multiline;
    ///<summary>
    ///  获取或设置最后一个成功匹配的索引。
    ///</summary>
    ///<returns>
    ///  如果有的话的最后一个成功匹配的索引。
    ///</returns>
    property lastIndex: DDN.mscorlib.DNObject read get_lastIndex write set_lastIndex;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNRegExpObject = class(TDNGenericImport<DNRegExpObjectClass, DNRegExpObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNRegExpPrototypeClass = interface(DNJSObjectClass)
  ['{51174A10-D76C-5384-8D24-4893E3095D11}']
  { static getter & setter } 

    {class} function get_constructor: DNRegExpConstructor;

  { static methods } 

    ///<summary>
    ///  创建并编译新<see cref="T:Microsoft.JScript.RegExpObject" />
    ///  指定正则表达式模式和标志的对象。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于的对象。
    ///</param>
    ///  <param name="source">
    ///  要搜索的正则表达式模式。
    ///</param>
    ///  <param name="flags">
    ///  忽略大小写，全局、 标志和多行模式。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:Microsoft.JScript.RegExpObject" />
    ///  对象。
    ///</returns>
    {class} function compile(thisob: DDN.mscorlib.DNObject; source: DDN.mscorlib.DNObject; flags: DDN.mscorlib.DNObject): DNRegExpObject;
    ///<summary>
    ///  在指定的对象上运行指定的正则表达式模式的搜索。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="input">
    ///  要搜索的正则表达式模式。
    ///</param>
    ///<returns>
    ///  正则表达式模式搜索的结果。
    ///</returns>
    {class} function exec(thisob: DDN.mscorlib.DNObject; input: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    ///<summary>
    ///  测试搜索指定对象上指定正则表达式模式。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="input">
    ///  要搜索的正则表达式模式。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果搜索成功，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function test(thisob: DDN.mscorlib.DNObject; input: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  创建的字符串表示形式的指定对象的包含正则表达式模式和标志。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  字符串表示形式 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function toString(thisob: DDN.mscorlib.DNObject): string; overload;

  { static propertys } 

    ///<summary>
    ///  获取基于原型的对象，该对象正在使用此原型的引用。
    ///</summary>
    ///<returns>
    ///  对基于原型的对象的引用。
    ///</returns>
    {class} property &constructor: DNRegExpConstructor read get_constructor;
  end;

  ///<summary>
  ///  提供用于静态方法和属性 <see cref="T:Microsoft.JScript.RegExpObject" />
  ///  对象。
  ///  通过传入到正在请求对方法的访问的对象引用来调用此类的所有方法。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.RegExpPrototype')]
  DNRegExpPrototype = interface(DNJSObject)
  ['{863EB8B2-CE50-38E7-9EC6-215A6B8CD1DE}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  将指定的字段添加到对象。
    ///</summary>
    ///  <param name="name">
    ///  要添加的字段的名称。
    ///</param>
    ///<returns>
    ///  新的字段中，如果成功添加。
    ///</returns>
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于匹配指定的名称的所有成员的对象。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  匹配的成员的数组 <paramref name="name" />
    ///  参数。
    ///</returns>
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  设置的值的字段，可动态添加到对象并存储在 <see cref="F:Microsoft.JScript.JSObject.field_table" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  为其设置的值的字段的名称。
    ///</param>
    ///  <param name="value">
    ///  新字段的值。
    ///</param>
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  返回表示当前对象的字符串。
    ///</summary>
    ///<returns>
    ///  表示当前对象的字符串。
    ///</returns>
    function ToString: string; overload;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于当前的脚本对象的所有成员的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前对象的所有成员的对象数组。
    ///</returns>
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNRegExpPrototype = class(TDNGenericImport<DNRegExpPrototypeClass, DNRegExpPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNLenientRegExpPrototypeClass = interface(DNRegExpPrototypeClass)
  ['{FECD915E-E833-56EC-99BD-3BAA3B87ADAF}']
  end;

  ///<summary>
  ///  将存储这些对象表示的静态方法 <see cref="T:Microsoft.JScript.RegExpPrototype" />
  ///  类。
  ///<see cref="T:Microsoft.JScript.LenientRegExpPrototype" />
  ///  类属于内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.LenientRegExpPrototype')]
  DNLenientRegExpPrototype = interface(DNRegExpPrototype)
  ['{E0FCACF9-9A8E-3176-8E98-4FF2D0E1391B}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_constructor: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_constructor(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_compile: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_compile(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_exec: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_exec(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_test: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_test(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

    ///<summary>
    ///  存储到的引用<see cref="T:Microsoft.JScript.RegExpConstructor" />
    ///  对象。
    ///</summary>
   property &constructor: DDN.mscorlib.DNObject read __fakeFieldGet_constructor write __fakeFieldSet_constructor;
    ///<summary>
    ///  将存储一个对象，表示静态<see cref="M:Microsoft.JScript.RegExpPrototype.compile(System.Object,System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.RegExpPrototype" />
    ///  类。
    ///</summary>
   property compile: DDN.mscorlib.DNObject read __fakeFieldGet_compile write __fakeFieldSet_compile;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.RegExpPrototype.exec(System.Object,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.RegExpPrototype" />
    ///  类。
    ///</summary>
   property exec: DDN.mscorlib.DNObject read __fakeFieldGet_exec write __fakeFieldSet_exec;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.RegExpPrototype.test(System.Object,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.RegExpPrototype" />
    ///  类。
    ///</summary>
   property test: DDN.mscorlib.DNObject read __fakeFieldGet_test write __fakeFieldSet_test;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.RegExpPrototype.toString(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.RegExpPrototype" />
    ///  类。
    ///</summary>
   property toString_: DDN.mscorlib.DNObject read __fakeFieldGet_toString write __fakeFieldSet_toString;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNLenientRegExpPrototype = class(TDNGenericImport<DNLenientRegExpPrototypeClass, DNLenientRegExpPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNScriptFunctionClass = interface(DNJSObjectClass)
  ['{58797BE8-5889-5E3E-B941-C4FD782FFDA2}']
  end;

  ///<summary>
  ///  表示基于原型的对象定义的构造函数。
  ///  大多数构造函数的类，如 <see cref="T:Microsoft.JScript.DateConstructor" />
  ///  , ，<see cref="T:Microsoft.JScript.NumberConstructor" />
  ///  , ，<see cref="T:Microsoft.JScript.StringConstructor" />
  ///  , ，和 <see cref="T:Microsoft.JScript.ObjectConstructor" />
  ///  , ，从此类继承的。
  ///  此类所属的对象和函数的类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.ScriptFunction')]
  DNScriptFunction = interface(DNJSObject)
  ['{382FF180-3B4B-394A-BB37-E50AFDBBC3D1}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  创建基于原型的对象，在指定的参数中传递的实例。
    ///</summary>
    ///  <param name="args">
    ///  要传递给构造函数的实参。
    ///</param>
    ///<returns>
    ///  对象的实例。
    ///</returns>
    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  调用基于原型的对象，在指定的参数中传递的方法。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="args">
    ///  要传递给方法的参数。
    ///</param>
    ///<returns>
    ///  对方法调用的结果。
    ///</returns>
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  调用指定的成员。
    ///</summary>
    ///  <param name="name">
    ///  要调用的成员的名称。
    ///</param>
    ///  <param name="invokeAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="target">
    ///  对其调用成员的对象。
    ///  这必须是当前的脚本对象。
    ///</param>
    ///  <param name="args">
    ///  包含要调用个数、 顺序和类型成员的参数的对象数组。
    ///  如果没有任何参数，这是一个空数组。
    ///</param>
    ///  <param name="modifiers">
    ///  具有相同的长度的数组的 <paramref name="args" />
    ///  参数。
    ///  它表示被调用的成员的元数据中的参数属性。
    ///</param>
    ///  <param name="culture">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    ///  <param name="namedParameters">
    ///  参数的数组。
    ///</param>
    ///<returns>
    ///  对该成员的调用返回值。
    ///</returns>
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  返回的字符串表示形式的构造函数。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含代码的构造函数和占位符的名称。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  将指定的字段添加到对象。
    ///</summary>
    ///  <param name="name">
    ///  要添加的字段的名称。
    ///</param>
    ///<returns>
    ///  新的字段中，如果成功添加。
    ///</returns>
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于匹配指定的名称的所有成员的对象。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  匹配的成员的数组 <paramref name="name" />
    ///  参数。
    ///</returns>
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  设置的值的字段，可动态添加到对象并存储在 <see cref="F:Microsoft.JScript.JSObject.field_table" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  为其设置的值的字段的名称。
    ///</param>
    ///  <param name="value">
    ///  新字段的值。
    ///</param>
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于当前的脚本对象的所有成员的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前对象的所有成员的对象数组。
    ///</returns>
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</summary>
    ///<returns>
    ///  中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</returns>
    property length: Int32 read get_length write set_length;
    ///<summary>
    ///  获取或设置此构造函数的原型对象。
    ///</summary>
    ///<returns>
    ///  此构造函数的的原型对象。
    ///</returns>
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNScriptFunction = class(TDNGenericImport<DNScriptFunctionClass, DNScriptFunction>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNActiveXObjectConstructorClass = interface(DNScriptFunctionClass)
  ['{5983CA30-B0A7-5BAD-869D-7702489B3173}']
  end;

  ///<summary>
  ///  表示基于原型的对象定义的构造函数。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.ActiveXObjectConstructor')]
  DNActiveXObjectConstructor = interface(DNScriptFunction)
  ['{A51A0372-81CD-3BD2-885C-5906A77E326A}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  创建基于原型的对象，在指定的参数中传递的实例。
    ///</summary>
    ///  <param name="args">
    ///  要传递给构造函数的实参。
    ///</param>
    ///<returns>
    ///  对象的实例。
    ///</returns>
    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  在所有情况下均返回 null。
    ///</summary>
    ///<returns>
    ///  null。
    ///</returns>
    function Invoke: DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  调用基于原型的对象，在指定的参数中传递的方法。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="args">
    ///  要传递给方法的参数。
    ///</param>
    ///<returns>
    ///  对方法调用的结果。
    ///</returns>
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  调用指定的成员。
    ///</summary>
    ///  <param name="name">
    ///  要调用的成员的名称。
    ///</param>
    ///  <param name="invokeAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="target">
    ///  对其调用成员的对象。
    ///  这必须是当前的脚本对象。
    ///</param>
    ///  <param name="args">
    ///  包含要调用个数、 顺序和类型成员的参数的对象数组。
    ///  如果没有任何参数，这是一个空数组。
    ///</param>
    ///  <param name="modifiers">
    ///  具有相同的长度的数组的 <paramref name="args" />
    ///  参数。
    ///  它表示被调用的成员的元数据中的参数属性。
    ///</param>
    ///  <param name="culture">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    ///  <param name="namedParameters">
    ///  参数的数组。
    ///</param>
    ///<returns>
    ///  对该成员的调用返回值。
    ///</returns>
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  返回的字符串表示形式的构造函数。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含代码的构造函数和占位符的名称。
    ///</returns>
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</summary>
    ///<returns>
    ///  中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</returns>
    property length: Int32 read get_length write set_length;
    ///<summary>
    ///  获取或设置此构造函数的原型对象。
    ///</summary>
    ///<returns>
    ///  此构造函数的的原型对象。
    ///</returns>
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNActiveXObjectConstructor = class(TDNGenericImport<DNActiveXObjectConstructorClass, DNActiveXObjectConstructor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNArrayConstructorClass = interface(DNScriptFunctionClass)
  ['{45D367A8-ADF8-5477-A93E-954348EFB70C}']
  end;

  ///<summary>
  ///  表示基于原型的对象定义的构造函数。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.ArrayConstructor')]
  DNArrayConstructor = interface(DNScriptFunction)
  ['{5149DE7C-8905-39E3-AC17-F7DC669CC82C}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  帮助器方法，创建一个新数组并使用指定的值填充它。
    ///</summary>
    ///  <param name="args">
    ///  要填充该数组的值。
    ///</param>
    ///<returns>
    ///  新数组。
    ///</returns>
    function ConstructArray(args: TArray<DDN.mscorlib.DNObject>): DNArrayObject;
    ///<summary>
    ///  创建基于原型的对象，在指定的参数中传递的实例。
    ///</summary>
    ///  <param name="args">
    ///  要传递给构造函数的实参。
    ///</param>
    ///<returns>
    ///  对象的实例。
    ///</returns>
    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DNArrayObject;
    ///<summary>
    ///  调用基于原型的对象，在指定的参数中传递的方法。
    ///</summary>
    ///  <param name="args">
    ///  要传递给方法的参数。
    ///</param>
    ///<returns>
    ///  对方法调用的结果。
    ///</returns>
    function Invoke(args: TArray<DDN.mscorlib.DNObject>): DNArrayObject; overload;
    ///<summary>
    ///  调用基于原型的对象，在指定的参数中传递的方法。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="args">
    ///  要传递给方法的参数。
    ///</param>
    ///<returns>
    ///  对方法调用的结果。
    ///</returns>
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  调用指定的成员。
    ///</summary>
    ///  <param name="name">
    ///  要调用的成员的名称。
    ///</param>
    ///  <param name="invokeAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="target">
    ///  对其调用成员的对象。
    ///  这必须是当前的脚本对象。
    ///</param>
    ///  <param name="args">
    ///  包含要调用个数、 顺序和类型成员的参数的对象数组。
    ///  如果没有任何参数，这是一个空数组。
    ///</param>
    ///  <param name="modifiers">
    ///  具有相同的长度的数组的 <paramref name="args" />
    ///  参数。
    ///  它表示被调用的成员的元数据中的参数属性。
    ///</param>
    ///  <param name="culture">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    ///  <param name="namedParameters">
    ///  参数的数组。
    ///</param>
    ///<returns>
    ///  对该成员的调用返回值。
    ///</returns>
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  返回的字符串表示形式的构造函数。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含代码的构造函数和占位符的名称。
    ///</returns>
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</summary>
    ///<returns>
    ///  中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</returns>
    property length: Int32 read get_length write set_length;
    ///<summary>
    ///  获取或设置此构造函数的原型对象。
    ///</summary>
    ///<returns>
    ///  此构造函数的的原型对象。
    ///</returns>
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNArrayConstructor = class(TDNGenericImport<DNArrayConstructorClass, DNArrayConstructor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNBooleanConstructorClass = interface(DNScriptFunctionClass)
  ['{9DC933A6-44AE-595A-BCA6-13DF63B5F5CC}']
  end;

  ///<summary>
  ///  表示基于原型的对象定义的构造函数。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.BooleanConstructor')]
  DNBooleanConstructor = interface(DNScriptFunction)
  ['{9733094C-A87B-3BAA-AF59-F9CBC1644BE4}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  创建基于原型的对象，在指定的参数中传递的实例。
    ///</summary>
    ///  <param name="args">
    ///  要传递给构造函数的实参。
    ///</param>
    ///<returns>
    ///  对象的实例。
    ///</returns>
    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DNBooleanObject;
    ///<summary>
    ///  调用基于原型的对象，在指定的参数中传递的方法。
    ///</summary>
    ///  <param name="arg">
    ///  要传递给方法的参数。
    ///</param>
    ///<returns>
    ///  对方法调用的结果。
    ///</returns>
    function Invoke(arg: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  调用基于原型的对象，在指定的参数中传递的方法。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="args">
    ///  要传递给方法的参数。
    ///</param>
    ///<returns>
    ///  对方法调用的结果。
    ///</returns>
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  调用指定的成员。
    ///</summary>
    ///  <param name="name">
    ///  要调用的成员的名称。
    ///</param>
    ///  <param name="invokeAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="target">
    ///  对其调用成员的对象。
    ///  这必须是当前的脚本对象。
    ///</param>
    ///  <param name="args">
    ///  包含要调用个数、 顺序和类型成员的参数的对象数组。
    ///  如果没有任何参数，这是一个空数组。
    ///</param>
    ///  <param name="modifiers">
    ///  具有相同的长度的数组的 <paramref name="args" />
    ///  参数。
    ///  它表示被调用的成员的元数据中的参数属性。
    ///</param>
    ///  <param name="culture">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    ///  <param name="namedParameters">
    ///  参数的数组。
    ///</param>
    ///<returns>
    ///  对该成员的调用返回值。
    ///</returns>
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  返回的字符串表示形式的构造函数。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含代码的构造函数和占位符的名称。
    ///</returns>
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</summary>
    ///<returns>
    ///  中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</returns>
    property length: Int32 read get_length write set_length;
    ///<summary>
    ///  获取或设置此构造函数的原型对象。
    ///</summary>
    ///<returns>
    ///  此构造函数的的原型对象。
    ///</returns>
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNBooleanConstructor = class(TDNGenericImport<DNBooleanConstructorClass, DNBooleanConstructor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNClosureClass = interface(DNScriptFunctionClass)
  ['{DAF07C45-C43A-5D1B-86C6-F098D7B55EB6}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.Closure" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="func">
    ///  表示此闭包的函数。
    ///</param>
    {class} function init(func: DNFunctionObject): DNClosure;

  end;

  ///<summary>
  ///  表示闭包函数。
  ///  此类所属的对象和函数的类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Closure')]
  DNClosure = interface(DNScriptFunction)
  ['{F1C9AA4D-3B57-362E-AC53-3B26156BA10D}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_arguments: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_arguments(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_caller: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_caller(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

    ///<summary>
    ///  要使用的函数的参数。
    ///</summary>
   property arguments: DDN.mscorlib.DNObject read __fakeFieldGet_arguments write __fakeFieldSet_arguments;
    ///<summary>
    ///  调用堆栈帧中的范围信息。
    ///</summary>
   property caller: DDN.mscorlib.DNObject read __fakeFieldGet_caller write __fakeFieldSet_caller;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  创建的字符串表示形式的函数，例如函数或上下文的名称。
    ///</summary>
    ///<returns>
    ///  函数的字符串表示形式。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  创建基于原型的对象，在指定的参数中传递的实例。
    ///</summary>
    ///  <param name="args">
    ///  要传递给构造函数的实参。
    ///</param>
    ///<returns>
    ///  对象的实例。
    ///</returns>
    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  调用基于原型的对象，在指定的参数中传递的方法。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="args">
    ///  要传递给方法的参数。
    ///</param>
    ///<returns>
    ///  对方法调用的结果。
    ///</returns>
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  调用指定的成员。
    ///</summary>
    ///  <param name="name">
    ///  要调用的成员的名称。
    ///</param>
    ///  <param name="invokeAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="target">
    ///  对其调用成员的对象。
    ///  这必须是当前的脚本对象。
    ///</param>
    ///  <param name="args">
    ///  包含要调用个数、 顺序和类型成员的参数的对象数组。
    ///  如果没有任何参数，这是一个空数组。
    ///</param>
    ///  <param name="modifiers">
    ///  具有相同的长度的数组的 <paramref name="args" />
    ///  参数。
    ///  它表示被调用的成员的元数据中的参数属性。
    ///</param>
    ///  <param name="culture">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    ///  <param name="namedParameters">
    ///  参数的数组。
    ///</param>
    ///<returns>
    ///  对该成员的调用返回值。
    ///</returns>
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</summary>
    ///<returns>
    ///  中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</returns>
    property length: Int32 read get_length write set_length;
    ///<summary>
    ///  获取或设置此构造函数的原型对象。
    ///</summary>
    ///<returns>
    ///  此构造函数的的原型对象。
    ///</returns>
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNClosure = class(TDNGenericImport<DNClosureClass, DNClosure>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNDateConstructorClass = interface(DNScriptFunctionClass)
  ['{2B9F22B6-2EBF-5729-86E5-3311046005AC}']
  { static methods } 

    ///<summary>
    ///  将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.Double" />
    ///  。
    ///</summary>
    ///  <param name="str">
    ///  包含要转换的日期和时间的字符串。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Double" />
    ///  等效的日期和时间中包含的 <paramref name="str" />
    ///  。
    ///</returns>
    {class} function parse(str: string): Double;
    ///<summary>
    ///  将指定的日期和时间转换为其 <see cref="T:System.Double" />
    ///  等效。
    ///</summary>
    ///  <param name="year">
    ///  要转换的日期和时间的年份。
    ///</param>
    ///  <param name="month">
    ///  要转换的日期和时间的月份。
    ///</param>
    ///  <param name="date">
    ///  要转换的日期和时间的日期。
    ///</param>
    ///  <param name="hours">
    ///  要转换的日期和时间的小时。
    ///</param>
    ///  <param name="minutes">
    ///  要转换的日期和时间的分钟数。
    ///</param>
    ///  <param name="seconds">
    ///  要转换的日期和时间的秒数。
    ///</param>
    ///  <param name="ms">
    ///  要转换的日期和时间 （毫秒)。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Double" />
    ///  等效的指定的日期和时间。
    ///</returns>
    {class} function UTC(year: DDN.mscorlib.DNObject; month: DDN.mscorlib.DNObject; date: DDN.mscorlib.DNObject; hours: DDN.mscorlib.DNObject; minutes: DDN.mscorlib.DNObject; seconds: DDN.mscorlib.DNObject; ms: DDN.mscorlib.DNObject): Double;

  end;

  ///<summary>
  ///  表示基于原型的对象定义的构造函数。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.DateConstructor')]
  DNDateConstructor = interface(DNScriptFunction)
  ['{9058A604-2DD1-3395-BB89-A25C4CF590AD}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  创建基于原型的对象，在指定的参数中传递的实例。
    ///</summary>
    ///  <param name="args">
    ///  要传递给构造函数的实参。
    ///</param>
    ///<returns>
    ///  对象的实例。
    ///</returns>
    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DNDateObject;
    ///<summary>
    ///  返回自 1970 年 1 月 1 日以来经过的毫秒数。
    ///</summary>
    ///<returns>
    ///  自 1970 年 1 月 1 日以来经过的毫秒数。
    ///</returns>
    function Invoke: string; overload;
    ///<summary>
    ///  调用基于原型的对象，在指定的参数中传递的方法。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="args">
    ///  要传递给方法的参数。
    ///</param>
    ///<returns>
    ///  对方法调用的结果。
    ///</returns>
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  调用指定的成员。
    ///</summary>
    ///  <param name="name">
    ///  要调用的成员的名称。
    ///</param>
    ///  <param name="invokeAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="target">
    ///  对其调用成员的对象。
    ///  这必须是当前的脚本对象。
    ///</param>
    ///  <param name="args">
    ///  包含要调用个数、 顺序和类型成员的参数的对象数组。
    ///  如果没有任何参数，这是一个空数组。
    ///</param>
    ///  <param name="modifiers">
    ///  具有相同的长度的数组的 <paramref name="args" />
    ///  参数。
    ///  它表示被调用的成员的元数据中的参数属性。
    ///</param>
    ///  <param name="culture">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    ///  <param name="namedParameters">
    ///  参数的数组。
    ///</param>
    ///<returns>
    ///  对该成员的调用返回值。
    ///</returns>
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  返回的字符串表示形式的构造函数。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含代码的构造函数和占位符的名称。
    ///</returns>
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</summary>
    ///<returns>
    ///  中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</returns>
    property length: Int32 read get_length write set_length;
    ///<summary>
    ///  获取或设置此构造函数的原型对象。
    ///</summary>
    ///<returns>
    ///  此构造函数的的原型对象。
    ///</returns>
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNDateConstructor = class(TDNGenericImport<DNDateConstructorClass, DNDateConstructor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNLenientDateConstructorClass = interface(DNDateConstructorClass)
  ['{1622B3C6-7F95-5A1D-A118-FF2C6BA229E6}']
  end;

  ///<summary>
  ///  将存储这些对象表示的静态方法 <see cref="T:Microsoft.JScript.DateConstructor" />
  ///  类。
  ///<see cref="T:Microsoft.JScript.LenientDateConstructor" />
  ///  类属于内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.LenientDateConstructor')]
  DNLenientDateConstructor = interface(DNDateConstructor)
  ['{8E678CA6-DBF7-3DA5-86EC-912CE6B92F86}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_parse: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_parse(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_UTC: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_UTC(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DateConstructor.parse(System.String)" />
    ///  方法 <see cref="T:Microsoft.JScript.DateConstructor" />
    ///  类。
    ///</summary>
   property parse: DDN.mscorlib.DNObject read __fakeFieldGet_parse write __fakeFieldSet_parse;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.DateConstructor.UTC(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.DateConstructor" />
    ///  类。
    ///</summary>
   property UTC: DDN.mscorlib.DNObject read __fakeFieldGet_UTC write __fakeFieldSet_UTC;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  创建基于原型的对象，在指定的参数中传递的实例。
    ///</summary>
    ///  <param name="args">
    ///  要传递给构造函数的实参。
    ///</param>
    ///<returns>
    ///  对象的实例。
    ///</returns>
    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DNDateObject;
    ///<summary>
    ///  返回自 1970 年 1 月 1 日以来经过的毫秒数。
    ///</summary>
    ///<returns>
    ///  自 1970 年 1 月 1 日以来经过的毫秒数。
    ///</returns>
    function Invoke: string; overload;
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property length: Int32 read get_length write set_length;
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNLenientDateConstructor = class(TDNGenericImport<DNLenientDateConstructorClass, DNLenientDateConstructor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNEnumeratorConstructorClass = interface(DNScriptFunctionClass)
  ['{8ADD4711-8901-5D44-BD88-1E7E0C06446E}']
  end;

  ///<summary>
  ///  表示基于原型的对象定义的构造函数。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.EnumeratorConstructor')]
  DNEnumeratorConstructor = interface(DNScriptFunction)
  ['{F378FC0C-00FA-33D4-A270-B674FDAB003C}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  创建基于原型的对象，在指定的参数中传递的实例。
    ///</summary>
    ///  <param name="args">
    ///  要传递给构造函数的实参。
    ///</param>
    ///<returns>
    ///  对象的实例。
    ///</returns>
    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DNEnumeratorObject;
    ///<summary>
    ///  在所有情况下均返回 null。
    ///</summary>
    ///<returns>
    ///  null。
    ///</returns>
    function Invoke: DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  调用基于原型的对象，在指定的参数中传递的方法。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="args">
    ///  要传递给方法的参数。
    ///</param>
    ///<returns>
    ///  对方法调用的结果。
    ///</returns>
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  调用指定的成员。
    ///</summary>
    ///  <param name="name">
    ///  要调用的成员的名称。
    ///</param>
    ///  <param name="invokeAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="target">
    ///  对其调用成员的对象。
    ///  这必须是当前的脚本对象。
    ///</param>
    ///  <param name="args">
    ///  包含要调用个数、 顺序和类型成员的参数的对象数组。
    ///  如果没有任何参数，这是一个空数组。
    ///</param>
    ///  <param name="modifiers">
    ///  具有相同的长度的数组的 <paramref name="args" />
    ///  参数。
    ///  它表示被调用的成员的元数据中的参数属性。
    ///</param>
    ///  <param name="culture">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    ///  <param name="namedParameters">
    ///  参数的数组。
    ///</param>
    ///<returns>
    ///  对该成员的调用返回值。
    ///</returns>
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  返回的字符串表示形式的构造函数。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含代码的构造函数和占位符的名称。
    ///</returns>
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</summary>
    ///<returns>
    ///  中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</returns>
    property length: Int32 read get_length write set_length;
    ///<summary>
    ///  获取或设置此构造函数的原型对象。
    ///</summary>
    ///<returns>
    ///  此构造函数的的原型对象。
    ///</returns>
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNEnumeratorConstructor = class(TDNGenericImport<DNEnumeratorConstructorClass, DNEnumeratorConstructor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNErrorConstructorClass = interface(DNScriptFunctionClass)
  ['{1B9E0AD4-B67A-553B-8996-11D434B0CA9B}']
  end;

  ///<summary>
  ///  表示基于原型的对象定义的构造函数。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.ErrorConstructor')]
  DNErrorConstructor = interface(DNScriptFunction)
  ['{031BB8A0-7F93-37F1-857B-9CA3DD7F35EF}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  创建基于原型的对象，在指定的参数中传递的实例。
    ///</summary>
    ///  <param name="args">
    ///  要传递给构造函数的实参。
    ///</param>
    ///<returns>
    ///  对象的实例。
    ///</returns>
    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DNErrorObject;
    ///<summary>
    ///  创建基于原型的对象，在指定的参数中传递的实例。
    ///</summary>
    ///  <param name="args">
    ///  要传递给构造函数的实参。
    ///</param>
    ///<returns>
    ///  对象的实例。
    ///</returns>
    function Invoke(args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  调用基于原型的对象，在指定的参数中传递的方法。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="args">
    ///  要传递给方法的参数。
    ///</param>
    ///<returns>
    ///  对方法调用的结果。
    ///</returns>
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  调用指定的成员。
    ///</summary>
    ///  <param name="name">
    ///  要调用的成员的名称。
    ///</param>
    ///  <param name="invokeAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="target">
    ///  对其调用成员的对象。
    ///  这必须是当前的脚本对象。
    ///</param>
    ///  <param name="args">
    ///  包含要调用个数、 顺序和类型成员的参数的对象数组。
    ///  如果没有任何参数，这是一个空数组。
    ///</param>
    ///  <param name="modifiers">
    ///  具有相同的长度的数组的 <paramref name="args" />
    ///  参数。
    ///  它表示被调用的成员的元数据中的参数属性。
    ///</param>
    ///  <param name="culture">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    ///  <param name="namedParameters">
    ///  参数的数组。
    ///</param>
    ///<returns>
    ///  对该成员的调用返回值。
    ///</returns>
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  返回的字符串表示形式的构造函数。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含代码的构造函数和占位符的名称。
    ///</returns>
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</summary>
    ///<returns>
    ///  中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</returns>
    property length: Int32 read get_length write set_length;
    ///<summary>
    ///  获取或设置此构造函数的原型对象。
    ///</summary>
    ///<returns>
    ///  此构造函数的的原型对象。
    ///</returns>
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNErrorConstructor = class(TDNGenericImport<DNErrorConstructorClass, DNErrorConstructor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNFunctionConstructorClass = interface(DNScriptFunctionClass)
  ['{D0BDD0F8-3B93-58DA-9CD4-34C61493157C}']
  end;

  ///<summary>
  ///  表示基于原型的对象定义的构造函数。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.FunctionConstructor')]
  DNFunctionConstructor = interface(DNScriptFunction)
  ['{ADC53C69-DB12-32A2-AAC6-D71E652BE9E3}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  创建基于原型的对象，在指定的参数中传递的实例。
    ///</summary>
    ///  <param name="args">
    ///  要传递给构造函数的实参。
    ///</param>
    ///<returns>
    ///  对象的实例。
    ///</returns>
    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DNScriptFunction;
    ///<summary>
    ///  创建基于原型的对象，在指定的参数中传递的实例。
    ///</summary>
    ///  <param name="args">
    ///  要传递给构造函数的实参。
    ///</param>
    ///<returns>
    ///  对象的实例。
    ///</returns>
    function Invoke(args: TArray<DDN.mscorlib.DNObject>): DNScriptFunction; overload;
    ///<summary>
    ///  调用基于原型的对象，在指定的参数中传递的方法。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="args">
    ///  要传递给方法的参数。
    ///</param>
    ///<returns>
    ///  对方法调用的结果。
    ///</returns>
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  调用指定的成员。
    ///</summary>
    ///  <param name="name">
    ///  要调用的成员的名称。
    ///</param>
    ///  <param name="invokeAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="target">
    ///  对其调用成员的对象。
    ///  这必须是当前的脚本对象。
    ///</param>
    ///  <param name="args">
    ///  包含要调用个数、 顺序和类型成员的参数的对象数组。
    ///  如果没有任何参数，这是一个空数组。
    ///</param>
    ///  <param name="modifiers">
    ///  具有相同的长度的数组的 <paramref name="args" />
    ///  参数。
    ///  它表示被调用的成员的元数据中的参数属性。
    ///</param>
    ///  <param name="culture">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    ///  <param name="namedParameters">
    ///  参数的数组。
    ///</param>
    ///<returns>
    ///  对该成员的调用返回值。
    ///</returns>
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  返回的字符串表示形式的构造函数。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含代码的构造函数和占位符的名称。
    ///</returns>
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</summary>
    ///<returns>
    ///  中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</returns>
    property length: Int32 read get_length write set_length;
    ///<summary>
    ///  获取或设置此构造函数的原型对象。
    ///</summary>
    ///<returns>
    ///  此构造函数的的原型对象。
    ///</returns>
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNFunctionConstructor = class(TDNGenericImport<DNFunctionConstructorClass, DNFunctionConstructor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNFunctionObjectClass = interface(DNScriptFunctionClass)
  ['{384CC6A9-CC97-5696-9984-17E4FE97A917}']
  end;

  ///<summary>
  ///  表示函数对象。
  ///</summary>
  [DNTypeName('Microsoft.JScript.FunctionObject')]
  DNFunctionObject = interface(DNScriptFunction)
  ['{6FAE3171-E570-3A7F-B6EA-E6F2EAD6ABD0}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  返回此函数对象的字符串表示。
    ///</summary>
    ///<returns>
    ///  此函数对象，其中包含该函数的文本字符串表示形式。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  创建基于原型的对象，在指定的参数中传递的实例。
    ///</summary>
    ///  <param name="args">
    ///  要传递给构造函数的实参。
    ///</param>
    ///<returns>
    ///  对象的实例。
    ///</returns>
    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  调用基于原型的对象，在指定的参数中传递的方法。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="args">
    ///  要传递给方法的参数。
    ///</param>
    ///<returns>
    ///  对方法调用的结果。
    ///</returns>
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  调用指定的成员。
    ///</summary>
    ///  <param name="name">
    ///  要调用的成员的名称。
    ///</param>
    ///  <param name="invokeAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="target">
    ///  对其调用成员的对象。
    ///  这必须是当前的脚本对象。
    ///</param>
    ///  <param name="args">
    ///  包含要调用个数、 顺序和类型成员的参数的对象数组。
    ///  如果没有任何参数，这是一个空数组。
    ///</param>
    ///  <param name="modifiers">
    ///  具有相同的长度的数组的 <paramref name="args" />
    ///  参数。
    ///  它表示被调用的成员的元数据中的参数属性。
    ///</param>
    ///  <param name="culture">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    ///  <param name="namedParameters">
    ///  参数的数组。
    ///</param>
    ///<returns>
    ///  对该成员的调用返回值。
    ///</returns>
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</summary>
    ///<returns>
    ///  中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</returns>
    property length: Int32 read get_length write set_length;
    ///<summary>
    ///  获取或设置此构造函数的原型对象。
    ///</summary>
    ///<returns>
    ///  此构造函数的的原型对象。
    ///</returns>
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNFunctionObject = class(TDNGenericImport<DNFunctionObjectClass, DNFunctionObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNFunctionPrototypeClass = interface(DNScriptFunctionClass)
  ['{CCB4CFDF-83DC-5C98-A87A-12F8478DE2E2}']
  { static getter & setter } 

    {class} function get_constructor: DNFunctionConstructor;

  { static methods } 

    ///<summary>
    ///  调用此对象表示的函数。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于的对象。
    ///</param>
    ///  <param name="thisarg">
    ///  当前的默认作用域。
    ///  包含的对象<see langword="with" />
    ///  语句范围或全局范围。
    ///</param>
    ///  <param name="args">
    ///  要传递给函数作为数组的参数。
    ///</param>
    ///<returns>
    ///  对此对象表示函数的调用返回值。
    ///</returns>
    {class} function call(thisob: DDN.mscorlib.DNObject; thisarg: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  创建指定对象的字符串表示形式。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  字符串表示形式 <paramref name="thisob" />
    ///  ，其中包含函数的名称。
    ///</returns>
    {class} function toString(thisob: DDN.mscorlib.DNObject): string; overload;
    ///<summary>
    ///  调用此对象表示，将指定的自变量对象转换为参数的数组，如果它对所拥有的函数。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于的对象。
    ///</param>
    ///  <param name="thisarg">
    ///  当前的默认作用域。
    ///  包含的对象<see langword="with" />
    ///  语句范围或全局范围。
    ///</param>
    ///  <param name="argArray">
    ///  要作为传递给函数的自变量<see cref="T:Microsoft.JScript.ArgumentsObject" />
    ///  或<see cref="T:Microsoft.JScript.ArrayObject" />
    ///  。
    ///</param>
    ///<returns>
    ///  对此对象表示函数的调用返回值。
    ///</returns>
    {class} function apply(thisob: DDN.mscorlib.DNObject; thisarg: DDN.mscorlib.DNObject; argArray: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;

  { static propertys } 

    ///<summary>
    ///  获取基于原型的对象，该对象正在使用此原型的引用。
    ///</summary>
    ///<returns>
    ///  对基于原型的对象的引用。
    ///</returns>
    {class} property &constructor: DNFunctionConstructor read get_constructor;
  end;

  ///<summary>
  ///  提供用于静态方法和属性 <see cref="T:Microsoft.JScript.FunctionObject" />
  ///  对象。
  ///  通过传入到正在请求对方法的访问的对象引用来调用此类的所有方法。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.FunctionPrototype')]
  DNFunctionPrototype = interface(DNScriptFunction)
  ['{A8BD3646-7160-320F-A79B-61356CB9E4CA}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  创建基于原型的对象，在指定的参数中传递的实例。
    ///</summary>
    ///  <param name="args">
    ///  要传递给构造函数的实参。
    ///</param>
    ///<returns>
    ///  对象的实例。
    ///</returns>
    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  调用基于原型的对象，在指定的参数中传递的方法。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="args">
    ///  要传递给方法的参数。
    ///</param>
    ///<returns>
    ///  对方法调用的结果。
    ///</returns>
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  调用指定的成员。
    ///</summary>
    ///  <param name="name">
    ///  要调用的成员的名称。
    ///</param>
    ///  <param name="invokeAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="target">
    ///  对其调用成员的对象。
    ///  这必须是当前的脚本对象。
    ///</param>
    ///  <param name="args">
    ///  包含要调用个数、 顺序和类型成员的参数的对象数组。
    ///  如果没有任何参数，这是一个空数组。
    ///</param>
    ///  <param name="modifiers">
    ///  具有相同的长度的数组的 <paramref name="args" />
    ///  参数。
    ///  它表示被调用的成员的元数据中的参数属性。
    ///</param>
    ///  <param name="culture">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    ///  <param name="namedParameters">
    ///  参数的数组。
    ///</param>
    ///<returns>
    ///  对该成员的调用返回值。
    ///</returns>
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  返回的字符串表示形式的构造函数。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含代码的构造函数和占位符的名称。
    ///</returns>
    function ToString: string; overload;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</summary>
    ///<returns>
    ///  中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</returns>
    property length: Int32 read get_length write set_length;
    ///<summary>
    ///  获取或设置此构造函数的原型对象。
    ///</summary>
    ///<returns>
    ///  此构造函数的的原型对象。
    ///</returns>
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNFunctionPrototype = class(TDNGenericImport<DNFunctionPrototypeClass, DNFunctionPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNLenientFunctionPrototypeClass = interface(DNFunctionPrototypeClass)
  ['{534D2E0A-779A-56C7-8151-D11753CA1B6E}']
  end;

  ///<summary>
  ///  将存储这些对象表示的静态方法 <see cref="T:Microsoft.JScript.FunctionPrototype" />
  ///  类。
  ///<see cref="T:Microsoft.JScript.LenientFunctionPrototype" />
  ///  类属于内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.LenientFunctionPrototype')]
  DNLenientFunctionPrototype = interface(DNFunctionPrototype)
  ['{8615D14A-A07E-3D75-B3DB-FCDBBA6A5000}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_constructor: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_constructor(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_apply: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_apply(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_call: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_call(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

    ///<summary>
    ///  存储到的引用<see cref="T:Microsoft.JScript.FunctionConstructor" />
    ///  对象。
    ///</summary>
   property &constructor: DDN.mscorlib.DNObject read __fakeFieldGet_constructor write __fakeFieldSet_constructor;
    ///<summary>
    ///  将存储一个对象，表示静态<see cref="M:Microsoft.JScript.FunctionPrototype.apply(System.Object,System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.FunctionPrototype" />
    ///  类。
    ///</summary>
   property apply: DDN.mscorlib.DNObject read __fakeFieldGet_apply write __fakeFieldSet_apply;
    ///<summary>
    ///  将存储一个对象，表示静态<see cref="M:Microsoft.JScript.FunctionPrototype.call(System.Object,System.Object,System.Object[])" />
    ///  方法<see cref="T:Microsoft.JScript.FunctionPrototype" />
    ///  类。
    ///</summary>
   property call: DDN.mscorlib.DNObject read __fakeFieldGet_call write __fakeFieldSet_call;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.FunctionPrototype.toString(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.FunctionPrototype" />
    ///  类。
    ///</summary>
   property toString_: DDN.mscorlib.DNObject read __fakeFieldGet_toString write __fakeFieldSet_toString;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property length: Int32 read get_length write set_length;
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNLenientFunctionPrototype = class(TDNGenericImport<DNLenientFunctionPrototypeClass, DNLenientFunctionPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNFunctionWrapperClass = interface(DNScriptFunctionClass)
  ['{4A0160B1-4E4A-58E3-A103-D68AAC66C332}']
  end;

  ///<summary>
  ///  绑定到对象的函数成员。
  ///</summary>
  [DNTypeName('Microsoft.JScript.FunctionWrapper')]
  DNFunctionWrapper = interface(DNScriptFunction)
  ['{42D2A11E-4D4E-3C09-95C5-7CB10FBA3065}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  创建的函数的字符串表示形式。
    ///</summary>
    ///<returns>
    ///  包含函数源、 函数成员和函数名称的函数的字符串表示形式。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  创建基于原型的对象，在指定的参数中传递的实例。
    ///</summary>
    ///  <param name="args">
    ///  要传递给构造函数的实参。
    ///</param>
    ///<returns>
    ///  对象的实例。
    ///</returns>
    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  调用基于原型的对象，在指定的参数中传递的方法。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="args">
    ///  要传递给方法的参数。
    ///</param>
    ///<returns>
    ///  对方法调用的结果。
    ///</returns>
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  调用指定的成员。
    ///</summary>
    ///  <param name="name">
    ///  要调用的成员的名称。
    ///</param>
    ///  <param name="invokeAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="target">
    ///  对其调用成员的对象。
    ///  这必须是当前的脚本对象。
    ///</param>
    ///  <param name="args">
    ///  包含要调用个数、 顺序和类型成员的参数的对象数组。
    ///  如果没有任何参数，这是一个空数组。
    ///</param>
    ///  <param name="modifiers">
    ///  具有相同的长度的数组的 <paramref name="args" />
    ///  参数。
    ///  它表示被调用的成员的元数据中的参数属性。
    ///</param>
    ///  <param name="culture">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    ///  <param name="namedParameters">
    ///  参数的数组。
    ///</param>
    ///<returns>
    ///  对该成员的调用返回值。
    ///</returns>
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</summary>
    ///<returns>
    ///  中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</returns>
    property length: Int32 read get_length write set_length;
    ///<summary>
    ///  获取或设置此构造函数的原型对象。
    ///</summary>
    ///<returns>
    ///  此构造函数的的原型对象。
    ///</returns>
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNFunctionWrapper = class(TDNGenericImport<DNFunctionWrapperClass, DNFunctionWrapper>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNNumberConstructorClass = interface(DNScriptFunctionClass)
  ['{155824BC-5DFF-5919-B98E-CF971CAD0A60}']
  end;

  ///<summary>
  ///  表示基于原型的对象定义的构造函数。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.NumberConstructor')]
  DNNumberConstructor = interface(DNScriptFunction)
  ['{C3415341-A234-32B5-8142-2483AC2EADC6}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  创建基于原型的对象，在指定的参数中传递的实例。
    ///</summary>
    ///  <param name="args">
    ///  要传递给构造函数的实参。
    ///</param>
    ///<returns>
    ///  对象的实例。
    ///</returns>
    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DNNumberObject;
    ///<summary>
    ///  将指定的对象转换为一个数字。
    ///</summary>
    ///  <param name="arg">
    ///  要转换的对象。
    ///</param>
    ///<returns><paramref name="arg" />
    ///  如果这是可能的则表示为一个数字。
    ///</returns>
    function Invoke(arg: DDN.mscorlib.DNObject): Double; overload;
    ///<summary>
    ///  调用基于原型的对象，在指定的参数中传递的方法。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="args">
    ///  要传递给方法的参数。
    ///</param>
    ///<returns>
    ///  对方法调用的结果。
    ///</returns>
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  调用指定的成员。
    ///</summary>
    ///  <param name="name">
    ///  要调用的成员的名称。
    ///</param>
    ///  <param name="invokeAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="target">
    ///  对其调用成员的对象。
    ///  这必须是当前的脚本对象。
    ///</param>
    ///  <param name="args">
    ///  包含要调用个数、 顺序和类型成员的参数的对象数组。
    ///  如果没有任何参数，这是一个空数组。
    ///</param>
    ///  <param name="modifiers">
    ///  具有相同的长度的数组的 <paramref name="args" />
    ///  参数。
    ///  它表示被调用的成员的元数据中的参数属性。
    ///</param>
    ///  <param name="culture">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    ///  <param name="namedParameters">
    ///  参数的数组。
    ///</param>
    ///<returns>
    ///  对该成员的调用返回值。
    ///</returns>
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  返回的字符串表示形式的构造函数。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含代码的构造函数和占位符的名称。
    ///</returns>
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</summary>
    ///<returns>
    ///  中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</returns>
    property length: Int32 read get_length write set_length;
    ///<summary>
    ///  获取或设置此构造函数的原型对象。
    ///</summary>
    ///<returns>
    ///  此构造函数的的原型对象。
    ///</returns>
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNNumberConstructor = class(TDNGenericImport<DNNumberConstructorClass, DNNumberConstructor>)
  public const
    ///<summary>
    ///  表示 <see cref="T:System.Double" />
    ///  的最大可能值。
    ///  此字段为常数。
    ///</summary>
   MAX_VALUE = 1.79769313486232E+308;
    ///<summary>
    ///  表示大于零的最小正 <see cref="T:System.Double" />
    ///  值。
    ///  此字段为常数。
    ///</summary>
   MIN_VALUE = 4.94065645841247E-324;
  end;

  //-------------namespace: Microsoft.JScript----------------
  DNObjectConstructorClass = interface(DNScriptFunctionClass)
  ['{4E987A94-3613-5EB5-A7B5-0BC1B1A6E092}']
  end;

  ///<summary>
  ///  表示基于原型的对象定义的构造函数。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.ObjectConstructor')]
  DNObjectConstructor = interface(DNScriptFunction)
  ['{03F663AE-BF19-3655-98D8-5DAD7CC236D2}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  创建基于原型的对象的实例。
    ///</summary>
    ///<returns>
    ///  对象的实例。
    ///</returns>
    function ConstructObject: DNJSObject;
    ///<summary>
    ///  创建基于原型的对象，在指定的参数中传递的实例。
    ///</summary>
    ///  <param name="args">
    ///  要传递给构造函数的实参。
    ///</param>
    ///<returns>
    ///  对象的实例。
    ///</returns>
    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  调用基于原型的对象，在指定的参数中传递的方法。
    ///</summary>
    ///  <param name="args">
    ///  要传递给方法的参数。
    ///</param>
    ///<returns>
    ///  对方法调用的结果。
    ///</returns>
    function Invoke(args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  调用基于原型的对象，在指定的参数中传递的方法。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="args">
    ///  要传递给方法的参数。
    ///</param>
    ///<returns>
    ///  对方法调用的结果。
    ///</returns>
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  调用指定的成员。
    ///</summary>
    ///  <param name="name">
    ///  要调用的成员的名称。
    ///</param>
    ///  <param name="invokeAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="target">
    ///  对其调用成员的对象。
    ///  这必须是当前的脚本对象。
    ///</param>
    ///  <param name="args">
    ///  包含要调用个数、 顺序和类型成员的参数的对象数组。
    ///  如果没有任何参数，这是一个空数组。
    ///</param>
    ///  <param name="modifiers">
    ///  具有相同的长度的数组的 <paramref name="args" />
    ///  参数。
    ///  它表示被调用的成员的元数据中的参数属性。
    ///</param>
    ///  <param name="culture">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    ///  <param name="namedParameters">
    ///  参数的数组。
    ///</param>
    ///<returns>
    ///  对该成员的调用返回值。
    ///</returns>
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  返回的字符串表示形式的构造函数。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含代码的构造函数和占位符的名称。
    ///</returns>
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</summary>
    ///<returns>
    ///  中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</returns>
    property length: Int32 read get_length write set_length;
    ///<summary>
    ///  获取或设置此构造函数的原型对象。
    ///</summary>
    ///<returns>
    ///  此构造函数的的原型对象。
    ///</returns>
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNObjectConstructor = class(TDNGenericImport<DNObjectConstructorClass, DNObjectConstructor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNRegExpConstructorClass = interface(DNScriptFunctionClass)
  ['{DB57C681-5542-52EF-8EA3-6515FC88DA33}']
  end;

  ///<summary>
  ///  表示基于原型的对象定义的构造函数。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.RegExpConstructor')]
  DNRegExpConstructor = interface(DNScriptFunction)
  ['{A06AF7C6-3002-37FA-B285-E0ECDFF9E384}']
  { getters & setters } 

    function get_index: DDN.mscorlib.DNObject;
    function get_input: DDN.mscorlib.DNObject;
    procedure set_input(value: DDN.mscorlib.DNObject);
    function get_lastIndex: DDN.mscorlib.DNObject;
    function get_lastMatch: DDN.mscorlib.DNObject;
    function get_lastParen: DDN.mscorlib.DNObject;
    function get_leftContext: DDN.mscorlib.DNObject;
    function get_rightContext: DDN.mscorlib.DNObject;
    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  创建一个新<see cref="T:Microsoft.JScript.RegExpObject" />
    ///  指定正则表达式模式和标志的对象。
    ///</summary>
    ///  <param name="pattern">
    ///  要匹配的正则表达式模式。
    ///</param>
    ///  <param name="ignoreCase"><see langword="true" />
    ///  若要使用不区分大小写匹配;否则为<see langword="false" />
    ///  。
    ///</param>
    ///  <param name="global"><see langword="true" />
    ///  若要使用全局匹配项，则否则为<see langword="false" />
    ///  。
    ///</param>
    ///  <param name="multiline"><see langword="true" />
    ///  若要使用多行匹配项，则否则为<see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个新 <see cref="T:Microsoft.JScript.RegExpObject" />
    ///  对象。
    ///</returns>
    function Construct(pattern: string; ignoreCase: Boolean; global: Boolean; multiline: Boolean): DDN.mscorlib.DNObject;
    ///<summary>
    ///  创建基于原型的对象，在指定的参数中传递的实例。
    ///</summary>
    ///  <param name="args">
    ///  要传递给构造函数的实参。
    ///</param>
    ///<returns>
    ///  对象的实例。
    ///</returns>
    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DNRegExpObject;
    ///<summary>
    ///  创建基于原型的对象，在指定的参数中传递的实例。
    ///</summary>
    ///  <param name="args">
    ///  要传递给构造函数的实参。
    ///</param>
    ///<returns>
    ///  对象的实例。
    ///</returns>
    function Invoke(args: TArray<DDN.mscorlib.DNObject>): DNRegExpObject; overload;
    ///<summary>
    ///  调用基于原型的对象，在指定的参数中传递的方法。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="args">
    ///  要传递给方法的参数。
    ///</param>
    ///<returns>
    ///  对方法调用的结果。
    ///</returns>
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  调用指定的成员。
    ///</summary>
    ///  <param name="name">
    ///  要调用的成员的名称。
    ///</param>
    ///  <param name="invokeAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="target">
    ///  对其调用成员的对象。
    ///  这必须是当前的脚本对象。
    ///</param>
    ///  <param name="args">
    ///  包含要调用个数、 顺序和类型成员的参数的对象数组。
    ///  如果没有任何参数，这是一个空数组。
    ///</param>
    ///  <param name="modifiers">
    ///  具有相同的长度的数组的 <paramref name="args" />
    ///  参数。
    ///  它表示被调用的成员的元数据中的参数属性。
    ///</param>
    ///  <param name="culture">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    ///  <param name="namedParameters">
    ///  参数的数组。
    ///</param>
    ///<returns>
    ///  对该成员的调用返回值。
    ///</returns>
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  返回的字符串表示形式的构造函数。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含代码的构造函数和占位符的名称。
    ///</returns>
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取前移索引之前的最后一个成功的匹配索引。
    ///</summary>
    ///<returns>
    ///  如果有的话的最后一个成功匹配的索引。
    ///</returns>
    property index: DDN.mscorlib.DNObject read get_index;
    ///<summary>
    ///  获取或设置正则表达式搜索的输入的字符串。
    ///</summary>
    ///<returns>
    ///  正则表达式搜索输入的字符串。
    ///</returns>
    property input: DDN.mscorlib.DNObject read get_input write set_input;
    ///<summary>
    ///  获取前移索引后的最后一个成功的匹配索引。
    ///</summary>
    ///<returns>
    ///  如果有的话的最后一个成功匹配的索引。
    ///</returns>
    property lastIndex: DDN.mscorlib.DNObject read get_lastIndex;
    ///<summary>
    ///  获取最后一个成功匹配的字符串表示。
    ///</summary>
    ///<returns>
    ///  如果有的话的最后一个成功匹配的字符串表示形式。
    ///</returns>
    property lastMatch: DDN.mscorlib.DNObject read get_lastMatch;
    ///<summary>
    ///  获取最后一个 <see cref="T:System.Text.RegularExpressions.Group" />
    ///  从 <see cref="P:System.Text.RegularExpressions.Match.Groups" />
    ///  的最后一个匹配项。
    ///</summary>
    ///<returns>
    ///  最后一个组 （如果有的话） 的字符串表示形式。
    ///</returns>
    property lastParen: DDN.mscorlib.DNObject read get_lastParen;
    ///<summary>
    ///  获取输入开始日期和最后一个成功匹配的开始之间的输入字符串中子字符串。
    ///</summary>
    ///<returns>
    ///  如果没有一个输入字符串中子字符串。
    ///</returns>
    property leftContext: DDN.mscorlib.DNObject read get_leftContext;
    ///<summary>
    ///  获取最后一个成功匹配的开始日期和输入结尾之间的输入字符串中的子字符串。
    ///</summary>
    ///<returns>
    ///  如果没有一个输入字符串中子字符串。
    ///</returns>
    property rightContext: DDN.mscorlib.DNObject read get_rightContext;
    ///<summary>
    ///  获取或设置中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</summary>
    ///<returns>
    ///  中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</returns>
    property length: Int32 read get_length write set_length;
    ///<summary>
    ///  获取或设置此构造函数的原型对象。
    ///</summary>
    ///<returns>
    ///  此构造函数的的原型对象。
    ///</returns>
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNRegExpConstructor = class(TDNGenericImport<DNRegExpConstructorClass, DNRegExpConstructor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNStringConstructorClass = interface(DNScriptFunctionClass)
  ['{20A8239B-F121-5B83-AE19-C4DD812B6F58}']
  { static methods } 

    ///<summary>
    ///  将指定数组的每个元素转换为一个字符并将它们连接起来。
    ///</summary>
    ///  <param name="args">
    ///  要转换为字符串的元素。
    ///</param>
    ///<returns>
    ///  字符串表示形式 <paramref name="arg" />
    ///  。
    ///</returns>
    {class} function fromCharCode(args: TArray<DDN.mscorlib.DNObject>): string;

  end;

  ///<summary>
  ///  表示基于原型的对象定义的构造函数。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.StringConstructor')]
  DNStringConstructor = interface(DNScriptFunction)
  ['{EC6DCEE8-A8BA-32E0-BC40-D6C438774750}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  创建基于原型的对象，在指定的参数中传递的实例。
    ///</summary>
    ///  <param name="args">
    ///  要传递给构造函数的实参。
    ///</param>
    ///<returns>
    ///  对象的实例。
    ///</returns>
    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DNStringObject;
    ///<summary>
    ///  将指定的对象转换为字符串。
    ///</summary>
    ///  <param name="arg">
    ///  要转换为字符串的对象。
    ///</param>
    ///<returns>
    ///  字符串表示形式 <paramref name="arg" />
    ///  。
    ///</returns>
    function Invoke(arg: DDN.mscorlib.DNObject): string; overload;
    ///<summary>
    ///  调用基于原型的对象，在指定的参数中传递的方法。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="args">
    ///  要传递给方法的参数。
    ///</param>
    ///<returns>
    ///  对方法调用的结果。
    ///</returns>
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  调用指定的成员。
    ///</summary>
    ///  <param name="name">
    ///  要调用的成员的名称。
    ///</param>
    ///  <param name="invokeAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="target">
    ///  对其调用成员的对象。
    ///  这必须是当前的脚本对象。
    ///</param>
    ///  <param name="args">
    ///  包含要调用个数、 顺序和类型成员的参数的对象数组。
    ///  如果没有任何参数，这是一个空数组。
    ///</param>
    ///  <param name="modifiers">
    ///  具有相同的长度的数组的 <paramref name="args" />
    ///  参数。
    ///  它表示被调用的成员的元数据中的参数属性。
    ///</param>
    ///  <param name="culture">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    ///  <param name="namedParameters">
    ///  参数的数组。
    ///</param>
    ///<returns>
    ///  对该成员的调用返回值。
    ///</returns>
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  返回的字符串表示形式的构造函数。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含代码的构造函数和占位符的名称。
    ///</returns>
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</summary>
    ///<returns>
    ///  中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</returns>
    property length: Int32 read get_length write set_length;
    ///<summary>
    ///  获取或设置此构造函数的原型对象。
    ///</summary>
    ///<returns>
    ///  此构造函数的的原型对象。
    ///</returns>
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNStringConstructor = class(TDNGenericImport<DNStringConstructorClass, DNStringConstructor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNLenientStringConstructorClass = interface(DNStringConstructorClass)
  ['{BBA66ED7-1702-5367-9F89-D3B1C08AFE13}']
  end;

  ///<summary>
  ///  将存储这些对象表示的静态方法 <see cref="T:Microsoft.JScript.StringConstructor" />
  ///  类。
  ///<see cref="T:Microsoft.JScript.LenientStringConstructor" />
  ///  类属于内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.LenientStringConstructor')]
  DNLenientStringConstructor = interface(DNStringConstructor)
  ['{B796A967-2408-300F-98FC-CDDC1AAC5B32}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_fromCharCode: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_fromCharCode(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringConstructor.fromCharCode(System.Object[])" />
    ///  方法 <see cref="T:Microsoft.JScript.StringConstructor" />
    ///  类。
    ///</summary>
   property fromCharCode: DDN.mscorlib.DNObject read __fakeFieldGet_fromCharCode write __fakeFieldSet_fromCharCode;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  创建基于原型的对象，在指定的参数中传递的实例。
    ///</summary>
    ///  <param name="args">
    ///  要传递给构造函数的实参。
    ///</param>
    ///<returns>
    ///  对象的实例。
    ///</returns>
    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DNStringObject;
    ///<summary>
    ///  将指定的对象转换为字符串。
    ///</summary>
    ///  <param name="arg">
    ///  要转换为字符串的对象。
    ///</param>
    ///<returns>
    ///  字符串表示形式 <paramref name="arg" />
    ///  。
    ///</returns>
    function Invoke(arg: DDN.mscorlib.DNObject): string; overload;
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property length: Int32 read get_length write set_length;
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNLenientStringConstructor = class(TDNGenericImport<DNLenientStringConstructorClass, DNLenientStringConstructor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNVBArrayConstructorClass = interface(DNScriptFunctionClass)
  ['{D78ADF0F-CE06-5AB7-9A35-5E5B409C13C0}']
  end;

  ///<summary>
  ///  表示基于原型的对象定义的构造函数。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.VBArrayConstructor')]
  DNVBArrayConstructor = interface(DNScriptFunction)
  ['{A267A509-7A5E-3076-94A1-27568501FD1B}']
  { getters & setters } 

    function get_length: Int32;
    procedure set_length(value: Int32);
    function get_prototype: DDN.mscorlib.DNObject;
    procedure set_prototype(value: DDN.mscorlib.DNObject);
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  创建基于原型的对象，在指定的参数中传递的实例。
    ///</summary>
    ///  <param name="args">
    ///  要传递给构造函数的实参。
    ///</param>
    ///<returns>
    ///  对象的实例。
    ///</returns>
    function CreateInstance(args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  调用基于原型的对象，在指定的参数中传递的方法。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="args">
    ///  要传递给方法的参数。
    ///</param>
    ///<returns>
    ///  对方法调用的结果。
    ///</returns>
    function Invoke(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  调用指定的成员。
    ///</summary>
    ///  <param name="name">
    ///  要调用的成员的名称。
    ///</param>
    ///  <param name="invokeAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="target">
    ///  对其调用成员的对象。
    ///  这必须是当前的脚本对象。
    ///</param>
    ///  <param name="args">
    ///  包含要调用个数、 顺序和类型成员的参数的对象数组。
    ///  如果没有任何参数，这是一个空数组。
    ///</param>
    ///  <param name="modifiers">
    ///  具有相同的长度的数组的 <paramref name="args" />
    ///  参数。
    ///  它表示被调用的成员的元数据中的参数属性。
    ///</param>
    ///  <param name="culture">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    ///  <param name="namedParameters">
    ///  参数的数组。
    ///</param>
    ///<returns>
    ///  对该成员的调用返回值。
    ///</returns>
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; culture: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  返回的字符串表示形式的构造函数。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含代码的构造函数和占位符的名称。
    ///</returns>
    function ToString: string;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</summary>
    ///<returns>
    ///  中的元素数目 <paramref name="args" />
    ///  参数 <see cref="M:Microsoft.JScript.ScriptFunction.CreateInstance(System.Object[])" />
    ///  方法。
    ///</returns>
    property length: Int32 read get_length write set_length;
    ///<summary>
    ///  获取或设置此构造函数的原型对象。
    ///</summary>
    ///<returns>
    ///  此构造函数的的原型对象。
    ///</returns>
    property prototype: DDN.mscorlib.DNObject read get_prototype write set_prototype;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNVBArrayConstructor = class(TDNGenericImport<DNVBArrayConstructorClass, DNVBArrayConstructor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNStringObjectClass = interface(DNJSObjectClass)
  ['{9CBF0D80-A99B-5AF3-9CFD-E3903191A0E8}']
  end;

  ///<summary>
  ///  表示字符串对象。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.StringObject')]
  DNStringObject = interface(DNJSObject)
  ['{CFA4E06C-9DE4-3973-8927-B3AE1FE22C88}']
  { getters & setters } 

    function get_length: Int32;
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  确定此字符串与指定的字符串是否具有相同的值。
    ///</summary>
    ///  <param name="ob">
    ///  要比较的字符串。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果此字符串和 <paramref name="ob" />
    ///  具有相同的值; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(ob: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回该字符串的哈希代码。
    ///</summary>
    ///<returns>
    ///  此字符串哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  返回 <see cref="T:System.String" />
    ///  或 <see cref="T:Microsoft.JScript.StringObject" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.String" />
    ///  或 <see cref="T:Microsoft.JScript.StringObject" />
    ///  。
    ///</returns>
    function GetType: DDN.mscorlib.DNType;
    ///<summary>
    ///  将指定的字段添加到对象。
    ///</summary>
    ///  <param name="name">
    ///  要添加的字段的名称。
    ///</param>
    ///<returns>
    ///  新的字段中，如果成功添加。
    ///</returns>
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于匹配指定的名称的所有成员的对象。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  匹配的成员的数组 <paramref name="name" />
    ///  参数。
    ///</returns>
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  设置的值的字段，可动态添加到对象并存储在 <see cref="F:Microsoft.JScript.JSObject.field_table" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  为其设置的值的字段的名称。
    ///</param>
    ///  <param name="value">
    ///  新字段的值。
    ///</param>
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  返回表示当前对象的字符串。
    ///</summary>
    ///<returns>
    ///  表示当前对象的字符串。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于当前的脚本对象的所有成员的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前对象的所有成员的对象数组。
    ///</returns>
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;

  { propertys } 

    ///<summary>
    ///  获取字符串中的字符数。
    ///</summary>
    ///<returns>
    ///  在字符串中的字符数。
    ///</returns>
    property length: Int32 read get_length;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNStringObject = class(TDNGenericImport<DNStringObjectClass, DNStringObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNStringPrototypeClass = interface(DNStringObjectClass)
  ['{EEB8FFB8-920C-5A87-B315-A2FBDE2BFE24}']
  { static getter & setter } 

    {class} function get_constructor: DNStringConstructor;

  { static methods } 

    ///<summary>
    ///  返回位于指定的对象中指定位置处的字符。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于的对象。
    ///</param>
    ///  <param name="pos">
    ///  要返回的字符位置。
    ///</param>
    ///<returns>
    ///  处的字符<paramref name="pos" />
    ///  ，如果有。
    ///</returns>
    {class} function charAt(thisob: DDN.mscorlib.DNObject; pos: Double): string;
    ///<summary>
    ///  返回位于指定的对象中指定位置处的字符的 ASCII 代码。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于的对象。
    ///</param>
    ///  <param name="pos">
    ///  你想要返回其代码的字符的位置。
    ///</param>
    ///<returns>
    ///  处的字符代码<paramref name="pos" />
    ///  ，如果有。
    ///</returns>
    {class} function charCodeAt(thisob: DDN.mscorlib.DNObject; pos: Double): DDN.mscorlib.DNObject;
    ///<summary>
    ///  将指定的参数追加到指定的对象。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于的对象。
    ///</param>
    ///  <param name="args">
    ///  要追加到的自变量<paramref name="thisob" />
    ///  。
    ///</param>
    ///<returns>
    ///  字符串表示形式<paramref name="thisob" />
    ///  ，与<paramref name="args" />
    ///  追加。
    ///</returns>
    {class} function concat(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): string;
    ///<summary>
    ///  搜索中指定的对象，从指定的字符位置开始的指定字符串的第一个匹配项。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="searchString">
    ///  要搜索的字符串。
    ///</param>
    ///  <param name="position">
    ///  在该处开始搜索的位置。
    ///</param>
    ///<returns>
    ///  第一个匹配项的位置 <paramref name="searchString" />
    ///  , ，如果找到它。
    ///</returns>
    {class} function indexOf(thisob: DDN.mscorlib.DNObject; searchString: DDN.mscorlib.DNObject; position: Double): Int32;
    ///<summary>
    ///  搜索中指定的对象，从指定的字符位置开始的指定字符串的最后一个匹配项。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="searchString">
    ///  要搜索的字符串。
    ///</param>
    ///  <param name="position">
    ///  在该处开始搜索的位置。
    ///</param>
    ///<returns>
    ///  最后一个匹配项的位置 <paramref name="searchString" />
    ///  , ，如果找到它。
    ///</returns>
    {class} function lastIndexOf(thisob: DDN.mscorlib.DNObject; searchString: DDN.mscorlib.DNObject; position: Double): Int32;
    ///<summary>
    ///  比较两个指定的字符串并返回一个整数，指示它们之间的词法关系。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="thatob">
    ///  要比较的字符串 <paramref name="thisob" />
    ///  。
    ///</param>
    ///<returns>
    ///  负值时 <paramref name="thisob" />
    ///  是小于 <paramref name="thatob" />
    ///  ; 零在 <paramref name="thisob" />
    ///  等于 <paramref name="thatob" />
    ///  ; 值为正时，值 <paramref name="thisob" />
    ///  大于 <paramref name="thatob" />
    ///  。
    ///</returns>
    {class} function localeCompare(thisob: DDN.mscorlib.DNObject; thatob: DDN.mscorlib.DNObject): Int32;
    ///<summary>
    ///  在指定的对象上运行指定的正则表达式模式的搜索。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="engine">
    ///  对脚本引擎的引用。
    ///</param>
    ///  <param name="regExp">
    ///  要搜索的正则表达式模式。
    ///</param>
    ///<returns>
    ///  正则表达式模式搜索的结果。
    ///</returns>
    {class} function match(thisob: DDN.mscorlib.DNObject; engine: DNVsaEngine; regExp: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    ///<summary>
    ///  在第一个指定的对象上运行指定的正则表达式模式的搜索，将任何匹配项替换为第三个指定的对象。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="regExp">
    ///  要搜索的正则表达式模式。
    ///</param>
    ///  <param name="replacement">
    ///  对任何匹配项替换。
    ///</param>
    ///<returns>
    ///  新的字符串中之后进行替换。
    ///</returns>
    {class} function replace(thisob: DDN.mscorlib.DNObject; regExp: DDN.mscorlib.DNObject; replacement: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  在指定的对象上运行指定的正则表达式模式的搜索。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="engine">
    ///  对脚本引擎的引用。
    ///</param>
    ///  <param name="regExp">
    ///  要搜索的正则表达式模式。
    ///</param>
    ///<returns>
    ///  如果搜索未成功的匹配项，则索引否则为-1。
    ///</returns>
    {class} function search(thisob: DDN.mscorlib.DNObject; engine: DNVsaEngine; regExp: DDN.mscorlib.DNObject): Int32;
    ///<summary>
    ///  创建一个新字符串，包含指定字符串中指定的连续字符。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="start">
    ///  要获取的第一个连续字符。
    ///</param>
    ///  <param name="end">
    ///  要获取的最后一个连续字符。
    ///</param>
    ///<returns>
    ///  一个新字符串，包含之间的连续字符 <paramref name="start" />
    ///  和 <paramref name="end" />
    ///  。
    ///</returns>
    {class} function slice(thisob: DDN.mscorlib.DNObject; start: Double; &end: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  返回一个包含由指定的字符分隔的子字符串中指定的对象的数组。
    ///  数组中的子字符串的数量受指定的限制。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="engine">
    ///  对脚本引擎的引用。
    ///</param>
    ///  <param name="separator">
    ///  用作分隔符中的子字符串的字符 <paramref name="thisob" />
    ///  。
    ///</param>
    ///  <param name="limit">
    ///  要返回的子字符串的最大数量。
    ///</param>
    ///<returns>
    ///  一个数组，包含中的子字符串 <paramref name="thisob" />
    ///  由分隔 <paramref name="separator" />
    ///  。
    ///</returns>
    {class} function split(thisob: DDN.mscorlib.DNObject; engine: DNVsaEngine; separator: DDN.mscorlib.DNObject; limit: DDN.mscorlib.DNObject): DNArrayObject;
    ///<summary>
    ///  创建一个新字符串，包含从指定的字符位置开始的指定字符串中的连续字符数指定。
    ///  使用 <see cref="M:Microsoft.JScript.StringPrototype.substring(System.Object,System.Double,System.Object)" />
    ///  相反，如果您知道如何操作。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="start">
    ///  要获取的第一个连续字符。
    ///</param>
    ///  <param name="count">
    ///  要获取的字符数。
    ///</param>
    ///<returns>
    ///  一个新字符串，包含 <paramref name="count" />
    ///  处开始的连续字符 <paramref name="start" />
    ///  。
    ///</returns>
    {class} function substr(thisob: DDN.mscorlib.DNObject; start: Double; count: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  创建一个新字符串，包含指定字符串中指定的连续字符。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="start">
    ///  要获取的第一个连续字符。
    ///</param>
    ///  <param name="end">
    ///  要获取的最后一个连续字符。
    ///</param>
    ///<returns>
    ///  一个新字符串，包含之间的连续字符 <paramref name="start" />
    ///  和 <paramref name="end" />
    ///  。
    ///</returns>
    {class} function substring(thisob: DDN.mscorlib.DNObject; start: Double; &end: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  返回一个副本指定的字符串转换为小写字符、 根据使用的大小写规则 <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
    ///  。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  一个小写字符串。
    ///</returns>
    {class} function toLocaleLowerCase(thisob: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  返回一个副本指定的字符串转换为大写形式，并根据的大小写规则 <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
    ///  。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  大写的字符串。
    ///</returns>
    {class} function toLocaleUpperCase(thisob: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  返回一个副本指定的字符串转换为小写字符、 根据使用的大小写规则 <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
    ///  。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  一个小写字符串。
    ///</returns>
    {class} function toLowerCase(thisob: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  创建指定对象的字符串表示形式。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  字符串表示形式 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function toString(thisob: DDN.mscorlib.DNObject): string; overload;
    ///<summary>
    ///  返回一个副本指定的字符串转换为大写形式，并根据的大小写规则 <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />
    ///  。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  大写的字符串。
    ///</returns>
    {class} function toUpperCase(thisob: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  返回指定对象的值。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns><paramref name="thisob" />
    ///  的值。
    ///</returns>
    {class} function valueOf(thisob: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    ///<summary>
    ///  将指定的对象转换为文本括在定位点标记中，并提供指定的名称特性的定位元素。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于的对象。
    ///</param>
    ///  <param name="anchorName">
    ///  定位点元素的名称属性。
    ///</param>
    ///<returns>
    ///  A string in the form "&lt;A NAME=\""+ <paramref name="anchorName" />
    ///  +"\"&gt;"+ <paramref name="thisob" />
    ///  +"&lt;/A&gt;".
    ///</returns>
    {class} function anchor(thisob: DDN.mscorlib.DNObject; anchorName: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  将指定的对象转换为文本括在更大的文本标记中。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于的对象。
    ///</param>
    ///<returns>
    ///  窗体中的字符串"&lt;BIG&gt;"+ <paramref name="thisob" />
    ///  +"&lt;/BIG&gt;"。
    ///</returns>
    {class} function big(thisob: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  将指定的对象与文本括在眨眼之间标记标记。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于的对象。
    ///</param>
    ///<returns>
    ///  窗体中的字符串"&lt;BLINK&gt;"+ <paramref name="thisob" />
    ///  +"&lt;/BLINK&gt;"。
    ///</returns>
    {class} function blink(thisob: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  将指定的对象转换为文本括在粗体文本标记中。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于的对象。
    ///</param>
    ///<returns>
    ///  窗体中的字符串"&lt;B&gt;"+ <paramref name="thisob" />
    ///  +"&lt;/B&gt;"。
    ///</returns>
    {class} function bold(thisob: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  将指定的对象转换为文本括在固定宽度的文本标记中。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  窗体中的字符串 "&lt;TT&gt;"+ <paramref name="thisob" />
    ///  +"&lt;/TT&gt;"。
    ///</returns>
    {class} function fixed(thisob: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  将指定的对象转换为文本括在字体标记中，为元素提供指定的颜色属性。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="colorName">
    ///  Font 元素的颜色属性。
    ///</param>
    ///<returns>
    ///  窗体中的字符串 "&lt;FONT COLOR=\""+ <paramref name="colorName" />
    ///  +"\"&gt;"+ <paramref name="thisob" />
    ///  +"&lt;/FONT&gt;"。
    ///</returns>
    {class} function fontcolor(thisob: DDN.mscorlib.DNObject; colorName: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  将指定的对象转换为文本括在字体标记中，为元素提供指定的大小属性。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="fontSize">
    ///  Font 元素大小属性。
    ///</param>
    ///<returns>
    ///  窗体中的字符串 "&lt;FONT SIZE=\""+ <paramref name="fontSize" />
    ///  +"\"&gt;"+ <paramref name="thisob" />
    ///  +"&lt;/FONT&gt;"。
    ///</returns>
    {class} function fontsize(thisob: DDN.mscorlib.DNObject; fontSize: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  将指定的对象转换为文本括在斜体文本标记中。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  窗体中的字符串 "&lt;I&gt;"+ <paramref name="thisob" />
    ///  +"&lt;/I&gt;"。
    ///</returns>
    {class} function italics(thisob: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  将指定的对象转换为文本括在定位点标记中，并提供指定的链接目标特性的定位元素。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="linkRef">
    ///  目标属性的定位元素。
    ///</param>
    ///<returns>
    ///  窗体中的字符串 "&lt;A HREF=\""+ <paramref name="linkRef" />
    ///  +"\"&gt;"+ <paramref name="thisob" />
    ///  +"&lt;/A&gt;"。
    ///</returns>
    {class} function link(thisob: DDN.mscorlib.DNObject; linkRef: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  将指定的对象转换为文本括在较小的文本标记中。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  窗体中的字符串 "&lt;SMALL&gt;"+ <paramref name="thisob" />
    ///  +"&lt;/SMALL&gt;"。
    ///</returns>
    {class} function small(thisob: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  将指定的对象转换为文本括在带删除线标记中。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  窗体中的字符串 "&lt;STRIKE&gt;"+ <paramref name="thisob" />
    ///  +"&lt;/STRIKE&gt;"。
    ///</returns>
    {class} function strike(thisob: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  将指定的对象转换为文本括在下标标记中。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  窗体中的字符串 "&lt;SUB&gt;"+ <paramref name="thisob" />
    ///  +"&lt;/SUB&gt;"。
    ///</returns>
    {class} function sub(thisob: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  将指定的对象转换为文本括在上标标记中。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  窗体中的字符串 "&lt;SUP&gt;"+ <paramref name="thisob" />
    ///  +"&lt;/SUP&gt;"。
    ///</returns>
    {class} function sup(thisob: DDN.mscorlib.DNObject): string;

  { static propertys } 

    ///<summary>
    ///  获取基于原型的对象，该对象正在使用此原型的引用。
    ///</summary>
    ///<returns>
    ///  对基于原型的对象的引用。
    ///</returns>
    {class} property &constructor: DNStringConstructor read get_constructor;
  end;

  ///<summary>
  ///  提供用于静态方法和属性 <see cref="T:Microsoft.JScript.StringObject" />
  ///  对象。
  ///  通过传入到正在请求对方法的访问的对象引用来调用此类的所有方法。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.StringPrototype')]
  DNStringPrototype = interface(DNStringObject)
  ['{4894A4B9-0D7A-386E-A077-1B6B704988DB}']
  { getters & setters } 

    function get_length: Int32;
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  确定此字符串与指定的字符串是否具有相同的值。
    ///</summary>
    ///  <param name="ob">
    ///  要比较的字符串。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果此字符串和 <paramref name="ob" />
    ///  具有相同的值; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(ob: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回该字符串的哈希代码。
    ///</summary>
    ///<returns>
    ///  此字符串哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  返回 <see cref="T:System.String" />
    ///  或 <see cref="T:Microsoft.JScript.StringObject" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.String" />
    ///  或 <see cref="T:Microsoft.JScript.StringObject" />
    ///  。
    ///</returns>
    function GetType: DDN.mscorlib.DNType;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string; overload;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;

  { propertys } 

    ///<summary>
    ///  获取字符串中的字符数。
    ///</summary>
    ///<returns>
    ///  在字符串中的字符数。
    ///</returns>
    property length: Int32 read get_length;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNStringPrototype = class(TDNGenericImport<DNStringPrototypeClass, DNStringPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNLenientStringPrototypeClass = interface(DNStringPrototypeClass)
  ['{32179421-6E0B-5435-86E5-753736437EDD}']
  end;

  ///<summary>
  ///  将存储这些对象表示的静态方法 <see cref="T:Microsoft.JScript.StringPrototype" />
  ///  类。
  ///<see cref="T:Microsoft.JScript.LenientStringPrototype" />
  ///  类属于内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.LenientStringPrototype')]
  DNLenientStringPrototype = interface(DNStringPrototype)
  ['{66F6203E-8B73-365A-810F-DA96262E5574}']
  { getters & setters } 

    function get_length: Int32;
    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_constructor: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_constructor(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_anchor: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_anchor(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_big: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_big(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_blink: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_blink(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_bold: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_bold(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_charAt: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_charAt(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_charCodeAt: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_charCodeAt(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_concat: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_concat(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_fixed: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_fixed(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_fontcolor: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_fontcolor(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_fontsize: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_fontsize(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_indexOf: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_indexOf(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_italics: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_italics(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_lastIndexOf: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_lastIndexOf(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_link: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_link(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_localeCompare: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_localeCompare(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_match: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_match(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_replace: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_replace(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_search: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_search(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_slice: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_slice(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_small: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_small(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_split: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_split(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_strike: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_strike(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_sub: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_sub(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_substr: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_substr(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_substring: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_substring(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_sup: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_sup(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toLocaleLowerCase: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toLocaleLowerCase(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toLocaleUpperCase: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toLocaleUpperCase(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toLowerCase: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toLowerCase(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toString: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toString(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toUpperCase: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toUpperCase(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_valueOf: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_valueOf(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

    ///<summary>
    ///  存储到的引用<see cref="T:Microsoft.JScript.StringConstructor" />
    ///  对象。
    ///</summary>
   property &constructor: DDN.mscorlib.DNObject read __fakeFieldGet_constructor write __fakeFieldSet_constructor;
    ///<summary>
    ///  将存储一个对象，表示静态<see cref="M:Microsoft.JScript.StringPrototype.anchor(System.Object,System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property anchor: DDN.mscorlib.DNObject read __fakeFieldGet_anchor write __fakeFieldSet_anchor;
    ///<summary>
    ///  将存储一个对象，表示静态<see cref="M:Microsoft.JScript.StringPrototype.big(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property big: DDN.mscorlib.DNObject read __fakeFieldGet_big write __fakeFieldSet_big;
    ///<summary>
    ///  将存储一个对象，表示静态<see cref="M:Microsoft.JScript.StringPrototype.blink(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property blink: DDN.mscorlib.DNObject read __fakeFieldGet_blink write __fakeFieldSet_blink;
    ///<summary>
    ///  将存储一个对象，表示静态<see cref="M:Microsoft.JScript.StringPrototype.bold(System.Object)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property bold: DDN.mscorlib.DNObject read __fakeFieldGet_bold write __fakeFieldSet_bold;
    ///<summary>
    ///  将存储一个对象，表示静态<see cref="M:Microsoft.JScript.StringPrototype.charAt(System.Object,System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property charAt: DDN.mscorlib.DNObject read __fakeFieldGet_charAt write __fakeFieldSet_charAt;
    ///<summary>
    ///  将存储一个对象，表示静态<see cref="M:Microsoft.JScript.StringPrototype.charCodeAt(System.Object,System.Double)" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property charCodeAt: DDN.mscorlib.DNObject read __fakeFieldGet_charCodeAt write __fakeFieldSet_charCodeAt;
    ///<summary>
    ///  将存储一个对象，表示静态<see cref="M:Microsoft.JScript.StringPrototype.concat(System.Object,System.Object[])" />
    ///  方法<see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property concat: DDN.mscorlib.DNObject read __fakeFieldGet_concat write __fakeFieldSet_concat;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.fixed(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property fixed: DDN.mscorlib.DNObject read __fakeFieldGet_fixed write __fakeFieldSet_fixed;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.fontcolor(System.Object,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property fontcolor: DDN.mscorlib.DNObject read __fakeFieldGet_fontcolor write __fakeFieldSet_fontcolor;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.fontsize(System.Object,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property fontsize: DDN.mscorlib.DNObject read __fakeFieldGet_fontsize write __fakeFieldSet_fontsize;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.indexOf(System.Object,System.Object,System.Double)" />
    ///  方法 <see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property indexOf: DDN.mscorlib.DNObject read __fakeFieldGet_indexOf write __fakeFieldSet_indexOf;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.italics(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property italics: DDN.mscorlib.DNObject read __fakeFieldGet_italics write __fakeFieldSet_italics;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.lastIndexOf(System.Object,System.Object,System.Double)" />
    ///  方法 <see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property lastIndexOf: DDN.mscorlib.DNObject read __fakeFieldGet_lastIndexOf write __fakeFieldSet_lastIndexOf;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.link(System.Object,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property link: DDN.mscorlib.DNObject read __fakeFieldGet_link write __fakeFieldSet_link;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.localeCompare(System.Object,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property localeCompare: DDN.mscorlib.DNObject read __fakeFieldGet_localeCompare write __fakeFieldSet_localeCompare;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.match(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property match: DDN.mscorlib.DNObject read __fakeFieldGet_match write __fakeFieldSet_match;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.replace(System.Object,System.Object,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property replace: DDN.mscorlib.DNObject read __fakeFieldGet_replace write __fakeFieldSet_replace;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.search(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property search: DDN.mscorlib.DNObject read __fakeFieldGet_search write __fakeFieldSet_search;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.slice(System.Object,System.Double,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property slice: DDN.mscorlib.DNObject read __fakeFieldGet_slice write __fakeFieldSet_slice;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.small(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property small: DDN.mscorlib.DNObject read __fakeFieldGet_small write __fakeFieldSet_small;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.split(System.Object,Microsoft.JScript.Vsa.VsaEngine,System.Object,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property split: DDN.mscorlib.DNObject read __fakeFieldGet_split write __fakeFieldSet_split;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.strike(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property strike: DDN.mscorlib.DNObject read __fakeFieldGet_strike write __fakeFieldSet_strike;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.sub(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property sub: DDN.mscorlib.DNObject read __fakeFieldGet_sub write __fakeFieldSet_sub;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.substr(System.Object,System.Double,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property substr: DDN.mscorlib.DNObject read __fakeFieldGet_substr write __fakeFieldSet_substr;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.substring(System.Object,System.Double,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property substring: DDN.mscorlib.DNObject read __fakeFieldGet_substring write __fakeFieldSet_substring;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.sup(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property sup: DDN.mscorlib.DNObject read __fakeFieldGet_sup write __fakeFieldSet_sup;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.toLocaleLowerCase(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property toLocaleLowerCase: DDN.mscorlib.DNObject read __fakeFieldGet_toLocaleLowerCase write __fakeFieldSet_toLocaleLowerCase;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.toLocaleUpperCase(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property toLocaleUpperCase: DDN.mscorlib.DNObject read __fakeFieldGet_toLocaleUpperCase write __fakeFieldSet_toLocaleUpperCase;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.toLowerCase(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property toLowerCase: DDN.mscorlib.DNObject read __fakeFieldGet_toLowerCase write __fakeFieldSet_toLowerCase;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.toString(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property toString_: DDN.mscorlib.DNObject read __fakeFieldGet_toString write __fakeFieldSet_toString;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.toUpperCase(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property toUpperCase: DDN.mscorlib.DNObject read __fakeFieldGet_toUpperCase write __fakeFieldSet_toUpperCase;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.StringPrototype.valueOf(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.StringPrototype" />
    ///  类。
    ///</summary>
   property valueOf: DDN.mscorlib.DNObject read __fakeFieldGet_valueOf write __fakeFieldSet_valueOf;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function Equals(ob: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;

  { propertys } 

    property length: Int32 read get_length;
    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNLenientStringPrototype = class(TDNGenericImport<DNLenientStringPrototypeClass, DNLenientStringPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNVBArrayObjectClass = interface(DNJSObjectClass)
  ['{8AAF8241-148C-5C08-95A2-7E76A32AF88F}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.VBArrayObject" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="parent">
    ///  对象的父级。
    ///</param>
    ///  <param name="array">
    ///  类表示的基础数组。
    ///</param>
    {class} function init(parent: DNVBArrayPrototype; &array: DDN.mscorlib.DNArray): DNVBArrayObject;

  end;

  ///<summary>
  ///  表示 VBArray 对象。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.VBArrayObject')]
  DNVBArrayObject = interface(DNJSObject)
  ['{03AD1512-D232-3369-8D42-9AE9D4F07329}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  将指定的字段添加到对象。
    ///</summary>
    ///  <param name="name">
    ///  要添加的字段的名称。
    ///</param>
    ///<returns>
    ///  新的字段中，如果成功添加。
    ///</returns>
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于匹配指定的名称的所有成员的对象。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  匹配的成员的数组 <paramref name="name" />
    ///  参数。
    ///</returns>
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  设置的值的字段，可动态添加到对象并存储在 <see cref="F:Microsoft.JScript.JSObject.field_table" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  为其设置的值的字段的名称。
    ///</param>
    ///  <param name="value">
    ///  新字段的值。
    ///</param>
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  返回表示当前对象的字符串。
    ///</summary>
    ///<returns>
    ///  表示当前对象的字符串。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于当前的脚本对象的所有成员的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前对象的所有成员的对象数组。
    ///</returns>
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNVBArrayObject = class(TDNGenericImport<DNVBArrayObjectClass, DNVBArrayObject>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNVBArrayPrototypeClass = interface(DNJSObjectClass)
  ['{B159C4D9-B8E2-5B9F-939B-5BE625EBB0FA}']
  { static getter & setter } 

    {class} function get_constructor: DNVBArrayConstructor;

  { static methods } 

    ///<summary>
    ///  确定指定数组中的维度数。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///<returns>
    ///  中的维度数 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function dimensions(thisob: DDN.mscorlib.DNObject): Int32;
    ///<summary>
    ///  获取位于指定数组中的指定位置的值。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="args">
    ///  一个数组，表示指定要获取的元素的位置的每个维度的索引。
    ///</param>
    ///<returns>
    ///  中的指定位置处的值 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function getItem(thisob: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  获取指定数组中指定维度的下限。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="dimension">
    ///  确定其下限的维度。
    ///</param>
    ///<returns>
    ///  下限为 <paramref name="dimension" />
    ///  中 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function lbound(thisob: DDN.mscorlib.DNObject; dimension: DDN.mscorlib.DNObject): Int32;
    ///<summary>
    ///  将转换 <see cref="T:Microsoft.JScript.VBArrayObject" />
    ///  对象传递给 <see cref="T:Microsoft.JScript.ArrayObject" />
    ///  对象。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="engine">
    ///  对脚本引擎的引用。
    ///</param>
    ///<returns><paramref name="thisob" />
    ///  表示为 <see cref="T:Microsoft.JScript.ArrayObject" />
    ///  。
    ///</returns>
    {class} function toArray(thisob: DDN.mscorlib.DNObject; engine: DNVsaEngine): DNArrayObject;
    ///<summary>
    ///  获取指定数组中指定维度的上限。
    ///</summary>
    ///  <param name="thisob">
    ///  此方法作用于该对象。
    ///</param>
    ///  <param name="dimension">
    ///  确定其上限的维度。
    ///</param>
    ///<returns>
    ///  上限 <paramref name="dimension" />
    ///  中 <paramref name="thisob" />
    ///  。
    ///</returns>
    {class} function ubound(thisob: DDN.mscorlib.DNObject; dimension: DDN.mscorlib.DNObject): Int32;

  { static propertys } 

    ///<summary>
    ///  获取基于原型的对象，该对象正在使用此原型的引用。
    ///</summary>
    ///<returns>
    ///  对基于原型的对象的引用。
    ///</returns>
    {class} property &constructor: DNVBArrayConstructor read get_constructor;
  end;

  ///<summary>
  ///  提供用于静态方法和属性 <see cref="T:Microsoft.JScript.VBArrayObject" />
  ///  对象。
  ///  通过传入到正在请求对方法的访问的对象引用来调用此类的所有方法。
  ///  此类所属的内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.VBArrayPrototype')]
  DNVBArrayPrototype = interface(DNJSObject)
  ['{F4D71604-123C-365D-A086-B14641D9425B}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  将指定的字段添加到对象。
    ///</summary>
    ///  <param name="name">
    ///  要添加的字段的名称。
    ///</param>
    ///<returns>
    ///  新的字段中，如果成功添加。
    ///</returns>
    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于匹配指定的名称的所有成员的对象。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  匹配的成员的数组 <paramref name="name" />
    ///  参数。
    ///</returns>
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  设置的值的字段，可动态添加到对象并存储在 <see cref="F:Microsoft.JScript.JSObject.field_table" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  为其设置的值的字段的名称。
    ///</param>
    ///  <param name="value">
    ///  新字段的值。
    ///</param>
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  返回表示当前对象的字符串。
    ///</summary>
    ///<returns>
    ///  表示当前对象的字符串。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于当前的脚本对象的所有成员的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前对象的所有成员的对象数组。
    ///</returns>
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNVBArrayPrototype = class(TDNGenericImport<DNVBArrayPrototypeClass, DNVBArrayPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNLenientVBArrayPrototypeClass = interface(DNVBArrayPrototypeClass)
  ['{24DE65A0-2314-5860-8A45-C117D4B6EA3C}']
  end;

  ///<summary>
  ///  将存储这些对象表示的静态方法 <see cref="T:Microsoft.JScript.VBArrayPrototype" />
  ///  类。
  ///<see cref="T:Microsoft.JScript.LenientVBArrayPrototype" />
  ///  类属于内置对象模型类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.LenientVBArrayPrototype')]
  DNLenientVBArrayPrototype = interface(DNVBArrayPrototype)
  ['{E41C3422-2197-3CB9-99B8-323E02826D4A}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_constructor: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_constructor(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_dimensions: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_dimensions(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_getItem: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_getItem(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_lbound: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_lbound(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_toArray: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_toArray(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_ubound: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_ubound(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

    ///<summary>
    ///  存储到的引用<see cref="T:Microsoft.JScript.VBArrayConstructor" />
    ///  对象。
    ///</summary>
   property &constructor: DDN.mscorlib.DNObject read __fakeFieldGet_constructor write __fakeFieldSet_constructor;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.VBArrayPrototype.dimensions(System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.VBArrayPrototype" />
    ///  类。
    ///</summary>
   property dimensions: DDN.mscorlib.DNObject read __fakeFieldGet_dimensions write __fakeFieldSet_dimensions;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.VBArrayPrototype.getItem(System.Object,System.Object[])" />
    ///  方法 <see cref="T:Microsoft.JScript.VBArrayPrototype" />
    ///  类。
    ///</summary>
   property getItem: DDN.mscorlib.DNObject read __fakeFieldGet_getItem write __fakeFieldSet_getItem;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.VBArrayPrototype.lbound(System.Object,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.VBArrayPrototype" />
    ///  类。
    ///</summary>
   property lbound: DDN.mscorlib.DNObject read __fakeFieldGet_lbound write __fakeFieldSet_lbound;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.VBArrayPrototype.toArray(System.Object,Microsoft.JScript.Vsa.VsaEngine)" />
    ///  方法 <see cref="T:Microsoft.JScript.VBArrayPrototype" />
    ///  类。
    ///</summary>
   property toArray: DDN.mscorlib.DNObject read __fakeFieldGet_toArray write __fakeFieldSet_toArray;
    ///<summary>
    ///  将一个对象，表示静态存储 <see cref="M:Microsoft.JScript.VBArrayPrototype.ubound(System.Object,System.Object)" />
    ///  方法 <see cref="T:Microsoft.JScript.VBArrayPrototype" />
    ///  类。
    ///</summary>
   property ubound: DDN.mscorlib.DNObject read __fakeFieldGet_ubound write __fakeFieldSet_ubound;
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    function AddField(name: string): DDN.mscorlib.DNFieldInfo;
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    procedure SetMemberValue2(name: string; value: DDN.mscorlib.DNObject);
    function ToString: string;
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    function GetParent: DNScriptObject;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNLenientVBArrayPrototype = class(TDNGenericImport<DNLenientVBArrayPrototypeClass, DNLenientVBArrayPrototype>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNStackFrameClass = interface(DNScriptObjectClass)
  ['{68E62C2E-407E-557D-8D80-AC81B2421513}']
  { static methods } 

    ///<summary>
    ///  创建一个新 <see cref="T:Microsoft.JScript.StackFrame" />
    ///  对一个静态方法的对象并将结果推送到全局作用域堆栈上。
    ///</summary>
    ///  <param name="thisclass">
    ///  包含静态方法的类。
    ///</param>
    ///  <param name="fields">
    ///  堆栈帧的局部变量。
    ///</param>
    ///  <param name="engine">
    ///  对脚本引擎的引用。
    ///</param>
    {class} procedure PushStackFrameForStaticMethod(thisclass: DDN.mscorlib.DNRuntimeTypeHandle; fields: TArray<DNJSLocalField>; engine: DNVsaEngine);
    ///<summary>
    ///  创建一个新 <see cref="T:Microsoft.JScript.StackFrame" />
    ///  方法的对象并将结果推送到全局作用域堆栈上。
    ///</summary>
    ///  <param name="thisob">
    ///  包含该方法的对象。
    ///</param>
    ///  <param name="fields">
    ///  堆栈帧的局部变量。
    ///</param>
    ///  <param name="engine">
    ///  对脚本引擎的引用。
    ///</param>
    {class} procedure PushStackFrameForMethod(thisob: DDN.mscorlib.DNObject; fields: TArray<DNJSLocalField>; engine: DNVsaEngine);

  end;

  ///<summary>
  ///  表示用于执行代码的堆栈帧。
  ///  此类包含用于解析作用域的方法。
  ///  它属于编译和运行时状态类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.StackFrame')]
  DNStackFrame = interface(DNScriptObject)
  ['{2B185ABC-A9D4-3EE7-942F-A387A2736629}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_localVars: TArray<DDN.mscorlib.DNObject>;
   procedure __fakeFieldSet_localVars(value: TArray<DDN.mscorlib.DNObject>);
   function __fakeFieldGet_closureInstance: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_closureInstance(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

    ///<summary>
    ///  将存储此堆栈帧的局部变量。
    ///</summary>
   property localVars: TArray<DDN.mscorlib.DNObject> read __fakeFieldGet_localVars write __fakeFieldSet_localVars;
    ///<summary>
    ///  将存储到当前堆栈帧的调用方的引用。
    ///</summary>
   property closureInstance: DDN.mscorlib.DNObject read __fakeFieldGet_closureInstance write __fakeFieldSet_closureInstance;
    ///<summary>
    ///  存储对脚本引擎的引用。
    ///</summary>
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  获取包含的对象的当前的默认作用域，将为 <see langword="with" />
    ///  语句范围或全局范围。
    ///</summary>
    ///<returns>
    ///  当前的默认作用域。
    ///</returns>
    function GetDefaultThisObject: DDN.mscorlib.DNObject;
    ///<summary>
    ///  获取通过搜索作用域层次结构中具有指定的名称的字段。
    ///  此方法搜索的词法级别指定的作用域。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的字段的名称。
    ///</param>
    ///  <param name="lexLevel">
    ///  要搜索的词法级别。
    ///</param>
    ///<returns>
    ///  在所有情况下，则为 null。
    ///</returns>
    function GetField(name: string; lexLevel: Int32): DDN.mscorlib.DNFieldInfo; overload;
    ///<summary>
    ///  获取通过搜索作用域层次结构，直到它找到一个范围，包括静态变量，例如，模块作用域的全局作用域。
    ///</summary>
    ///<returns>
    ///  全局作用域。
    ///</returns>
    function GetGlobalScope: DNGlobalScope;
    ///<summary>
    ///  检索的数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于指定的名称匹配的所有成员的对象。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  匹配的对象的数组 <paramref name="name" />
    ///  参数。
    ///</returns>
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  检索的数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对应于当前对象的所有成员的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前对象的所有成员的对象数组。
    ///</returns>
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  获取通过搜索作用域层次结构的指定成员的值。
    ///  此方法搜索的词法级别指定的作用域。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员的名称。
    ///</param>
    ///  <param name="lexlevel">
    ///  要搜索的词法级别。
    ///</param>
    ///<returns>
    ///  成员值 <paramref name="name" />
    ///  。
    ///</returns>
    function GetMemberValue(name: string; lexlevel: Int32): DDN.mscorlib.DNObject;
    ///<summary>
    ///  获取具有指定的名称的字段。
    ///</summary>
    ///  <param name="name">
    ///  要获取的字段的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  具有指定的字段 <paramref name="name" />
    ///  , ，或如果该脚本对象不包含该字段，则为 null。
    ///</returns>
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo; overload;
    ///<summary>
    ///  获取具有指定的名称的方法。
    ///</summary>
    ///  <param name="name">
    ///  要获取的方法的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  具有指定的方法 <paramref name="name" />
    ///  , ，或如果该脚本对象不包含该方法，则为 null。
    ///</returns>
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    ///<summary>
    ///  获取对父对象的引用。
    ///</summary>
    ///<returns>
    ///  对父对象的引用。
    ///</returns>
    function GetParent: DNScriptObject;
    ///<summary>
    ///  获取具有指定的名称的属性。
    ///</summary>
    ///  <param name="name">
    ///  要获取的属性的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  具有指定的属性 <paramref name="name" />
    ///  , ，或如果该脚本对象不包含该属性，则为 null。
    ///</returns>
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.FieldInfo" />
    ///  对应于当前的脚本对象的所有字段的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前的脚本对象的所有字段的对象数组。
    ///</returns>
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    ///<summary>
    ///  获取具有指定的名称，通过使用指定的选择条件的方法。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的方法的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="types">
    ///  用于查找匹配的方法参数类型。
    ///</param>
    ///  <param name="modifiers">
    ///  使绑定能够处理的参数签名已在其中修改类型的参数修饰符的数组。
    ///</param>
    ///<returns>
    ///  具有指定的方法 <paramref name="name" />
    ///  , ，或如果该脚本对象不包含该方法，则为 null。
    ///</returns>
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MethodInfo" />
    ///  对应于当前的脚本对象的所有方法的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前的脚本对象的所有方法的对象数组。
    ///</returns>
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    ///<summary>
    ///  获取具有指定的名称，通过使用指定的选择条件的属性。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的属性的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="returnType">
    ///  该属性必须具有返回值的类型。
    ///</param>
    ///  <param name="types">
    ///  要搜索的属性索引类型。
    ///  索引化属性，例如一个类的索引器的使用。
    ///</param>
    ///  <param name="modifiers">
    ///  使绑定能够处理的参数签名已在其中修改类型的参数修饰符的数组。
    ///</param>
    ///<returns>
    ///  具有指定的属性 <paramref name="name" />
    ///  , ，或如果该脚本对象不包含该属性，则为 null。
    ///</returns>
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.PropertyInfo" />
    ///  对应于当前的脚本对象的所有属性的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前的脚本对象的所有属性的对象数组。
    ///</returns>
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    ///<summary>
    ///  调用指定的成员。
    ///</summary>
    ///  <param name="name">
    ///  要调用的成员的名称。
    ///</param>
    ///  <param name="invokeAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="target">
    ///  对其调用成员的对象。
    ///  这必须是当前的脚本对象。
    ///</param>
    ///  <param name="args">
    ///  包含要调用个数、 顺序和类型成员的参数的对象数组。
    ///  如果没有任何参数，这是一个空数组。
    ///</param>
    ///  <param name="modifiers">
    ///  具有相同的长度作为 args 参数数组。
    ///  它表示被调用的成员的元数据中的参数属性。
    ///</param>
    ///  <param name="locale">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    ///  <param name="namedParameters">
    ///  参数的数组。
    ///</param>
    ///<returns>
    ///  对该成员的调用返回值。
    ///</returns>
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    ///<summary>
    ///  获取脚本对象的类型。
    ///</summary>
    ///<returns>
    ///  该脚本对象的类型。
    ///</returns>
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNStackFrame = class(TDNGenericImport<DNStackFrameClass, DNStackFrame>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNTypeReflectorClass = interface(DNScriptObjectClass)
  ['{A3D26F7D-58B6-5F8D-8093-8EF74A27861C}']
  end;

  ///<summary>
  ///  提供的实现 <see cref="M:Microsoft.JScript.TypeReflector.GetMember(System.String,System.Reflection.BindingFlags)" />
  ///  的速度快于 <see cref="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)" />
  ///  。
  ///</summary>
  [DNTypeName('Microsoft.JScript.TypeReflector')]
  DNTypeReflector = interface(DNScriptObject)
  ['{D1A0BD69-BDB8-376E-9C8C-282A718A0F4C}']
  { getters & setters } 

    function get_Item(index: Double): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Double; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(pars: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure set_Item(pars: TArray<DDN.mscorlib.DNObject>; value: DDN.mscorlib.DNObject); overload;
    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { fields getter & setter } 

   function __fakeFieldGet_engine: DNVsaEngine;
   procedure __fakeFieldSet_engine(value: DNVsaEngine);

  { fields } 

    ///<summary>
    ///  存储对脚本引擎的引用。
    ///</summary>
   property engine: DNVsaEngine read __fakeFieldGet_engine write __fakeFieldSet_engine;

  { methods } 

    ///<summary>
    ///  对于指定的成员，请使用指定的绑定约束搜索。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定在其中进行成员和类型搜索由反射操作的方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  表示如果找到; 否则为具有指定的名称的公共成员的对象、 一个空数组。
    ///</returns>
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  在所有情况下都会引发 <see cref="T:Microsoft.JScript.JScriptException" />
    ///  异常。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定在其中进行成员和类型搜索由反射操作的方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  在所有情况下都会引发 <see cref="T:Microsoft.JScript.JScriptException" />
    ///  异常。
    ///</returns>
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  获取具有指定的名称的字段。
    ///</summary>
    ///  <param name="name">
    ///  要获取的字段的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  具有指定的字段 <paramref name="name" />
    ///  , ，或如果该脚本对象不包含该字段，则为 null。
    ///</returns>
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    ///<summary>
    ///  获取具有指定的名称的方法。
    ///</summary>
    ///  <param name="name">
    ///  要获取的方法的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  具有指定的方法 <paramref name="name" />
    ///  , ，或如果该脚本对象不包含该方法，则为 null。
    ///</returns>
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    ///<summary>
    ///  获取对父对象的引用。
    ///</summary>
    ///<returns>
    ///  对父对象的引用。
    ///</returns>
    function GetParent: DNScriptObject;
    ///<summary>
    ///  获取具有指定的名称的属性。
    ///</summary>
    ///  <param name="name">
    ///  要获取的属性的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  具有指定的属性 <paramref name="name" />
    ///  , ，或如果该脚本对象不包含该属性，则为 null。
    ///</returns>
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.FieldInfo" />
    ///  对应于当前的脚本对象的所有字段的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前的脚本对象的所有字段的对象数组。
    ///</returns>
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    ///<summary>
    ///  获取具有指定的名称，通过使用指定的选择条件的方法。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的方法的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="types">
    ///  用于查找匹配的方法参数类型。
    ///</param>
    ///  <param name="modifiers">
    ///  使绑定能够处理的参数签名已在其中修改类型的参数修饰符的数组。
    ///</param>
    ///<returns>
    ///  具有指定的方法 <paramref name="name" />
    ///  , ，或如果该脚本对象不包含该方法，则为 null。
    ///</returns>
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MethodInfo" />
    ///  对应于当前的脚本对象的所有方法的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前的脚本对象的所有方法的对象数组。
    ///</returns>
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    ///<summary>
    ///  获取具有指定的名称，通过使用指定的选择条件的属性。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的属性的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="returnType">
    ///  该属性必须具有返回值的类型。
    ///</param>
    ///  <param name="types">
    ///  要搜索的属性索引类型。
    ///  索引化属性，例如一个类的索引器的使用。
    ///</param>
    ///  <param name="modifiers">
    ///  使绑定能够处理的参数签名已在其中修改类型的参数修饰符的数组。
    ///</param>
    ///<returns>
    ///  具有指定的属性 <paramref name="name" />
    ///  , ，或如果该脚本对象不包含该属性，则为 null。
    ///</returns>
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.PropertyInfo" />
    ///  对应于当前的脚本对象的所有属性的对象。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含当前的脚本对象的所有属性的对象数组。
    ///</returns>
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    ///<summary>
    ///  调用指定的成员。
    ///</summary>
    ///  <param name="name">
    ///  要调用的成员的名称。
    ///</param>
    ///  <param name="invokeAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="target">
    ///  对其调用成员的对象。
    ///  这必须是当前的脚本对象。
    ///</param>
    ///  <param name="args">
    ///  包含要调用个数、 顺序和类型成员的参数的对象数组。
    ///  如果没有任何参数，这是一个空数组。
    ///</param>
    ///  <param name="modifiers">
    ///  具有相同的长度作为 args 参数数组。
    ///  它表示被调用的成员的元数据中的参数属性。
    ///</param>
    ///  <param name="locale">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    ///  <param name="namedParameters">
    ///  参数的数组。
    ///</param>
    ///<returns>
    ///  对该成员的调用返回值。
    ///</returns>
    function InvokeMember(name: string; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Double]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[pars: TArray<DDN.mscorlib.DNObject>]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    ///<summary>
    ///  获取脚本对象的类型。
    ///</summary>
    ///<returns>
    ///  该脚本对象的类型。
    ///</returns>
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNTypeReflector = class(TDNGenericImport<DNTypeReflectorClass, DNTypeReflector>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNScriptStreamClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5814FA3E-B99D-5F1E-BEFE-BF1AE2584B17}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.ScriptStream" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNScriptStream;

  { static fields getter & setter } 

   function __fakeFieldGet_Out: DDN.mscorlib.DNTextWriter;
   function __fakeFieldGet_Error: DDN.mscorlib.DNTextWriter;

  { static fields } 

    ///<summary>
    ///  存储对标准控制台的引用 <see cref="P:System.Console.Out" />
    ///  流或自定义 <see cref="T:Microsoft.JScript.COMCharStream" />
    ///  。
    ///</summary>
    {class} property &Out: DDN.mscorlib.DNTextWriter read __fakeFieldGet_Out;
    ///<summary>
    ///  存储对标准控制台的引用 <see cref="P:System.Console.Error" />
    ///  流或自定义 <see cref="T:Microsoft.JScript.COMCharStream" />
    ///  。
    ///</summary>
    {class} property Error: DDN.mscorlib.DNTextWriter read __fakeFieldGet_Error;

  { static methods } 

    ///<summary>
    ///  写入一个字符串，描述调用堆栈的当前内容。
    ///  该字符串写入到 <see cref="F:Microsoft.JScript.ScriptStream.Out" />
    ///  流。
    ///</summary>
    {class} procedure PrintStackTrace; overload;
    ///<summary>
    ///  写入一个字符串，描述在引发指定的异常时调用堆栈的内容。
    ///  该字符串写入到 <see cref="F:Microsoft.JScript.ScriptStream.Out" />
    ///  流。
    ///</summary>
    ///  <param name="e">
    ///  抛出的异常。
    ///</param>
    {class} procedure PrintStackTrace(e: DDN.mscorlib.DNException); overload;
    ///<summary>
    ///  将指定的字符串写入流。
    ///  该字符串写入到 <see cref="F:Microsoft.JScript.ScriptStream.Out" />
    ///  流。
    ///</summary>
    ///  <param name="str">
    ///  要写入流的字符串。
    ///</param>
    {class} procedure Write(str: string);
    ///<summary>
    ///  将指定的字符串写入流，后面带有行结束符。
    ///  该字符串写入到 <see cref="F:Microsoft.JScript.ScriptStream.Out" />
    ///  流。
    ///</summary>
    ///  <param name="str">
    ///  要写入流的字符串。
    ///</param>
    {class} procedure WriteLine(str: string);

  end;

  ///<summary>
  ///  表示数据的流。
  ///  此类将其数据发送至任一 <see cref="T:Microsoft.JScript.COMCharStream" />
  ///  或 <see cref="T:System.Console" />
  ///  流。
  ///</summary>
  [DNTypeName('Microsoft.JScript.ScriptStream')]
  DNScriptStream = interface(DDN.mscorlib.DNObject)
  ['{01E159AF-9848-3F2D-A5A6-1746260A544D}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNScriptStream = class(TDNGenericImport<DNScriptStreamClass, DNScriptStream>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNSimpleHashtableClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7016C8FB-1F11-5A3D-801C-DC6A4816A624}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:Microsoft.JScript.SimpleHashtable" />
    ///  类，使用指定的阈值。
    ///</summary>
    ///  <param name="threshold">
    ///  此时必须调整大小的哈希表的项目数。
    ///</param>
    {class} function init(threshold: UInt32): DNSimpleHashtable;

  end;

  ///<summary>
  ///  项的内部存储哈希表。
  ///</summary>
  [DNTypeName('Microsoft.JScript.SimpleHashtable')]
  DNSimpleHashtable = interface(DDN.mscorlib.DNObject)
  ['{9225103B-62F2-3903-88E0-5A92B44A268C}']
  { getters & setters } 

    function get_Item(key: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    procedure set_Item(key: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);

  { methods } 

    ///<summary>
    ///  获取哈希表的枚举数。
    ///</summary>
    ///<returns>
    ///  一个用于哈希表的枚举。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIDictionaryEnumerator;
    ///<summary>
    ///  从哈希表中移除具有指定键的项。
    ///</summary>
    ///  <param name="key">
    ///  要移除的项的键。
    ///</param>
    procedure Remove(key: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: DDN.mscorlib.DNObject]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
  end;

  TDNSimpleHashtable = class(TDNGenericImport<DNSimpleHashtableClass, DNSimpleHashtable>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNSuperTypeMembersSorterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9AA6B7F8-0946-594A-B86B-8CC8D3429029}']
  end;

  ///<summary>
  ///  将存储从基类，这些类和接口的成员。
  ///</summary>
  [DNTypeName('Microsoft.JScript.SuperTypeMembersSorter')]
  DNSuperTypeMembersSorter = interface(DDN.mscorlib.DNObject)
  ['{C54E0D1F-F897-37FF-935B-D3C92151F701}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSuperTypeMembersSorter = class(TDNGenericImport<DNSuperTypeMembersSorterClass, DNSuperTypeMembersSorter>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNTypedArrayClass = interface(DNObjectClass)
  ['{C8350306-78CA-572C-9D50-682D624795F5}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.TypedArray" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="elementType">
    ///  类型化数组的元素类型。
    ///</param>
    ///  <param name="rank">
    ///  数组的秩 （维数）。
    ///</param>
    {class} function init(elementType: DDN.mscorlib.DNIReflect; rank: Int32): DNTypedArray;

  end;

  ///<summary>
  ///  表示对却引用 <see cref="T:System.Array" />
  ///  类。
  ///  此类存储的类型化数组的元素类型，但此类不存储数据。
  ///</summary>
  [DNTypeName('Microsoft.JScript.TypedArray')]
  DNTypedArray = interface(DDN.mscorlib.DNIReflect)
  ['{6E6C4A58-DB10-3427-BF04-D608E8360B76}']
  { getters & setters } 

    function get_UnderlyingSystemType: DDN.mscorlib.DNType;

  { methods } 

    ///<summary>
    ///  确定指定的类型化的数组具有相同的元素类型和作为当前的类型化数组的级别。
    ///</summary>
    ///  <param name="obj">
    ///  要与当前类型化数组进行比较的类型化的数组。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="obj" />
    ///  具有相同的元素类型和秩作为当前的类型化数组; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  获取字段的 <see cref="T:System.Array" />
    ///  类具有指定的名称的类型。
    ///</summary>
    ///  <param name="name">
    ///  要获取的字段的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  如果找到一个，则具有指定的名称的字段否则，为 null。
    ///</returns>
    function GetField(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNFieldInfo;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.FieldInfo" />
    ///  对象所对应的所有字段 <see cref="T:System.Array" />
    ///  类类型。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含的所有字段的对象的数组 <see cref="T:System.Array" />
    ///  类类型。
    ///</returns>
    function GetFields(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNFieldInfo>;
    ///<summary>
    ///  可作为类型化数组的元素类型的哈希函数。
    ///</summary>
    ///<returns>
    ///  当前对象的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对象相对应的所有成员的 <see cref="T:System.Array" />
    ///  类类型的指定的名称匹配。
    ///</summary>
    ///  <param name="name">
    ///  要搜索的成员的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  匹配的对象的数组 <paramref name="name" />
    ///  参数。
    ///</returns>
    function GetMember(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MemberInfo" />
    ///  对象相对应的所有成员的 <see cref="T:System.Array" />
    ///  类类型。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含的所有成员的对象的数组 <see cref="T:System.Array" />
    ///  类类型。
    ///</returns>
    function GetMembers(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMemberInfo>;
    ///<summary>
    ///  获取方法的 <see cref="T:System.Array" />
    ///  类具有指定的名称的类型。
    ///</summary>
    ///  <param name="name">
    ///  要获取的方法的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  如果找到一个，则具有指定的名称的方法否则，为 null。
    ///</returns>
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNMethodInfo; overload;
    ///<summary>
    ///  获取方法的 <see cref="T:System.Array" />
    ///  类通过使用指定的选择条件具有指定的名称的类型。
    ///</summary>
    ///  <param name="name">
    ///  要获取的方法的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="types">
    ///  用于查找匹配的方法参数类型。
    ///</param>
    ///  <param name="modifiers">
    ///  使绑定能够处理的参数签名已在其中修改类型的参数修饰符的数组。
    ///</param>
    ///<returns>
    ///  如果找到一个，则具有指定的名称的方法否则，为 null。
    ///</returns>
    function GetMethod(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNMethodInfo; overload;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.MethodInfo" />
    ///  对应于的所有方法的对象 <see cref="T:System.Array" />
    ///  类类型。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含的所有方法的对象的数组 <see cref="T:System.Array" />
    ///  类类型。
    ///</returns>
    function GetMethods(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNMethodInfo>;
    ///<summary>
    ///  获取的属性 <see cref="T:System.Array" />
    ///  类具有指定的名称的类型。
    ///</summary>
    ///  <param name="name">
    ///  要获取的属性的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  如果找到一个，则具有指定的名称的属性否则，为 null。
    ///</returns>
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags): DDN.mscorlib.DNPropertyInfo; overload;
    ///<summary>
    ///  获取的属性 <see cref="T:System.Array" />
    ///  类通过使用指定的选择条件具有指定的名称的类型。
    ///</summary>
    ///  <param name="name">
    ///  要获取的属性的名称。
    ///</param>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="returnType">
    ///  该属性必须具有返回值的类型。
    ///</param>
    ///  <param name="types">
    ///  要搜索的属性索引类型。
    ///  索引化属性，例如一个类的索引器的使用。
    ///</param>
    ///  <param name="modifiers">
    ///  使绑定能够处理的参数签名已在其中修改类型的参数修饰符的数组。
    ///</param>
    ///<returns>
    ///  如果找到一个，则具有指定的名称的属性否则，为 null。
    ///</returns>
    function GetProperty(name: string; bindingAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; returnType: DDN.mscorlib.DNType; types: TArray<DDN.mscorlib.DNType>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>): DDN.mscorlib.DNPropertyInfo; overload;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Reflection.PropertyInfo" />
    ///  对象相对应的所有属性的 <see cref="T:System.Array" />
    ///  类类型。
    ///</summary>
    ///  <param name="bindingAttr">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///<returns>
    ///  包含的所有属性的对象的数组 <see cref="T:System.Array" />
    ///  类类型。
    ///</returns>
    function GetProperties(bindingAttr: DDN.mscorlib.DNBindingFlags): TArray<DDN.mscorlib.DNPropertyInfo>;
    ///<summary>
    ///  调用指定的成员的元素类型或 <see cref="T:System.Array" />
    ///  类类型。
    ///</summary>
    ///  <param name="name">
    ///  要调用的成员的名称。
    ///</param>
    ///  <param name="flags">
    ///  指定搜索成员通过反射的执行方式的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，执行从实参类型到形参类型的类型转换。
    ///</param>
    ///  <param name="target">
    ///  对其调用成员的对象。
    ///  这必须是当前的脚本对象。
    ///</param>
    ///  <param name="args">
    ///  包含要调用个数、 顺序和类型成员的参数的对象数组。
    ///  如果没有任何参数，这是一个空数组。
    ///</param>
    ///  <param name="modifiers">
    ///  具有相同的长度的数组的 <paramref name="args" />
    ///  参数。
    ///  它表示被调用的成员的元数据中的参数属性。
    ///</param>
    ///  <param name="locale">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    ///  <param name="namedParameters">
    ///  参数的数组。
    ///</param>
    ///<returns>
    ///  对该成员的调用返回值。
    ///</returns>
    function InvokeMember(name: string; flags: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; target: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>; modifiers: TArray<DDN.mscorlib.DNParameterModifier>; locale: DDN.mscorlib.DNCultureInfo; namedParameters: TArray<string>): DDN.mscorlib.DNObject;
    ///<summary>
    ///  返回一个字符串，包含类型化的数组和排名信息的元素类型。
    ///</summary>
    ///<returns>
    ///  一个字符串，包含的元素类型的类型化的数组和排名的信息。
    ///</returns>
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取的类型 <see cref="T:Microsoft.JScript.TypedArray" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一种 <see cref="T:Microsoft.JScript.TypedArray" />
    ///  对象。
    ///</returns>
    property UnderlyingSystemType: DDN.mscorlib.DNType read get_UnderlyingSystemType;
  end;

  TDNTypedArray = class(TDNGenericImport<DNTypedArrayClass, DNTypedArray>) end;

  //-------------namespace: Microsoft.JScript.Vsa----------------
  DNBaseVsaEngineClass = interface(DNObjectClass)
  ['{AC8702B9-6907-581B-8602-DC3A51146250}']
  end;

  ///<summary>
  ///  实现<see cref="T:Microsoft.JScript.Vsa.IJSVsaEngine" />
  ///  接口。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Vsa.BaseVsaEngine')]
  DNBaseVsaEngine = interface(DNIJSVsaEngine)
  ['{F8932A50-9127-48B6-B115-2BFDC627CEE3}']
  { getters & setters } 

    function get_AppDomain: DDN.mscorlib.DN_AppDomain;
    procedure set_AppDomain(value: DDN.mscorlib.DN_AppDomain);
    function get_Evidence: DDN.mscorlib.DNEvidence;
    procedure set_Evidence(value: DDN.mscorlib.DNEvidence);
    function get_ApplicationBase: string;
    procedure set_ApplicationBase(value: string);
    function get_Assembly: DDN.mscorlib.DNAssembly;
    function get_GenerateDebugInfo: Boolean;
    procedure set_GenerateDebugInfo(value: Boolean);
    function get_IsCompiled: Boolean;
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_IsRunning: Boolean;
    function get_Items: DNIJSVsaItems;
    function get_Language: string;
    function get_LCID: Int32;
    procedure set_LCID(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RootMoniker: string;
    procedure set_RootMoniker(value: string);
    function get_RootNamespace: string;
    procedure set_RootNamespace(value: string);
    function get_Site: DNIJSVsaSite;
    procedure set_Site(value: DNIJSVsaSite);
    function get_Version: string;

  { methods } 

    ///<summary>
    ///  关闭该引擎。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  将使引擎编译现有的源状态。
    ///</summary>
    ///<returns><see langword="true" />
    ///  在成功编译;否则为<see langword="false" />
    ///  。
    ///</returns>
    function Compile: Boolean;
    ///<summary>
    ///  获取引擎特定于实现的选项。
    ///</summary>
    ///  <param name="name">
    ///  要获取的选项的名称。
    ///</param>
    ///<returns>
    ///  选项的值。
    ///</returns>
    function GetOption(name: string): DDN.mscorlib.DNObject;
    ///<summary>
    ///  提供初始化阶段已完成的通知。
    ///</summary>
    procedure InitNew;
    ///<summary>
    ///  指示引擎从持久性提供主机的对象由指定点加载源项。
    ///</summary>
    ///  <param name="site">
    ///  从中加载指定源项的站点。
    ///</param>
    procedure LoadSourceState(site: DNIJSVsaPersistSite);
    ///<summary>
    ///  从正在运行状态中移除引擎并断开连接自动绑定的事件处理程序。
    ///</summary>
    procedure Reset;
    ///<summary>
    ///  使无效的引擎，其根名字对象由指定的缓存程序集。
    ///</summary>
    procedure RevokeCache;
    ///<summary>
    ///  设置特定于实现的引擎的选项。
    ///</summary>
    ///  <param name="name">
    ///  要设置的选项的名称。
    ///</param>
    ///  <param name="value">
    ///  所设置的选项的值。
    ///</param>
    procedure SetOption(name: string; value: DDN.mscorlib.DNObject);
    procedure SaveCompiledState(out pe: TArray<Byte>; out debugInfo: TArray<Byte>);
    ///<summary>
    ///  指示引擎来持久保存其源状态。
    ///</summary>
    ///  <param name="site">
    ///  状态保存到数据集的源站点。
    ///</param>
    procedure SaveSourceState(site: DNIJSVsaPersistSite);
    ///<summary>
    ///  启动在引擎中的已编译代码的执行，并绑定所有事件处理程序
    ///</summary>
    procedure Run;
    ///<summary>
    ///  检查提供的标识符是否对引擎有效。
    ///</summary>
    ///  <param name="ident">
    ///  作为标识符提供的字符串值。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果标识符有效，则为否则，它将返回 <see langword="false" />
    ///  。
    ///</returns>
    function IsValidIdentifier(ident: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置应用程序域。
    ///</summary>
    ///<returns>
    ///  应用程序域中。
    ///</returns>
    property AppDomain: DDN.mscorlib.DN_AppDomain read get_AppDomain write set_AppDomain;
    ///<summary>
    ///  提供用于验证当前对象的标识的证据。
    ///</summary>
    ///<returns>
    ///  返回对 Evidence 对象的引用。
    ///</returns>
    property Evidence: DDN.mscorlib.DNEvidence read get_Evidence write set_Evidence;
    ///<summary>
    ///  获取或设置应用程序基。
    ///</summary>
    ///<returns>
    ///  应用程序基中。
    ///</returns>
    property ApplicationBase: string read get_ApplicationBase write set_ApplicationBase;
    ///<summary>
    ///  获取对运行方法生成的正在运行的程序集的引用。
    ///</summary>
    ///<returns>
    ///  对当前正在运行的程序集的引用。
    ///</returns>
    property Assembly: DDN.mscorlib.DNAssembly read get_Assembly;
    ///<summary>
    ///  设置或获取一个布尔值，表示调用编译方法时，脚本引擎是否生成调试信息。
    ///</summary>
    ///<returns><see langword="true" />
    ///  生成调试信息;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property GenerateDebugInfo: Boolean read get_GenerateDebugInfo write set_GenerateDebugInfo;
    ///<summary>
    ///  获取或设置一个值，指示源是否被编译。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果源被编译;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsCompiled: Boolean read get_IsCompiled;
    ///<summary>
    ///  获取或设置一个值，该值指示该项的当前内存中表示是否从保留的表示形式不同。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果内存中表示不同于保留的表示形式;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  获取一个布尔值，则引擎当前是否处于运行模式下将进行相应报告。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果引擎处于运行模式下;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsRunning: Boolean read get_IsRunning;
    ///<summary>
    ///  获取 IJSVsaItem 对象，它表示添加到引擎的所有项的集合。
    ///</summary>
    ///<returns>
    ///  项的集合。
    ///</returns>
    property Items: DNIJSVsaItems read get_Items;
    ///<summary>
    ///  获取由该引擎支持的编程语言的名称。
    ///</summary>
    ///<returns>
    ///  编程语言的名称。
    ///</returns>
    property Language: string read get_Language;
    ///<summary>
    ///  获取或设置在报告异常消息时所使用的地理区域设置和语言。
    ///</summary>
    ///<returns>
    ///  一个整数值表示内的异常的消息都要报告的区域设置。
    ///</returns>
    property LCID: Int32 read get_LCID write set_LCID;
    ///<summary>
    ///  设置或获取该引擎的显示名称。
    ///</summary>
    ///<returns>
    ///  引擎的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  设置或获取脚本引擎的根名字对象。
    ///</summary>
    ///<returns>
    ///  引擎的根名字对象。
    ///</returns>
    property RootMoniker: string read get_RootMoniker write set_RootMoniker;
    ///<summary>
    ///  设置或获取由引擎使用的根命名空间。
    ///</summary>
    ///<returns>
    ///  引擎的命名空间。
    ///</returns>
    property RootNamespace: string read get_RootNamespace write set_RootNamespace;
    ///<summary>
    ///  设置或获取的宿主实现 IJSVsaSite 对象，该引擎用于与主机通信。
    ///</summary>
    ///<returns>
    ///  宿主实现的对象。
    ///</returns>
    property Site: DNIJSVsaSite read get_Site write set_Site;
    ///<summary>
    ///  获取由引擎使用，在窗体支持的语言编译器的当前版本 Major.Minor.Revision.Build。
    ///</summary>
    ///<returns>
    ///  最新版本。
    ///</returns>
    property Version: string read get_Version;
  end;

  TDNBaseVsaEngine = class(TDNGenericImport<DNBaseVsaEngineClass, DNBaseVsaEngine>) end;

  //-------------namespace: Microsoft.JScript.Vsa----------------
  DNVsaEngineClass = interface(DNBaseVsaEngineClass)
  ['{AE9CC34A-8CFF-5105-8FCB-4BB391271B1D}']
  { constructors } 

    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
    {class} function init: DNVsaEngine; overload;
    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
    ///  <param name="fast" />
    {class} function init(fast: Boolean): DNVsaEngine; overload;

  { static methods } 

    ///<summary>
    ///  此类、 成员或属性是脚本引擎的内部，且不应在代码中调用。
    ///</summary>
    ///  <param name="fast" />
    ///  <param name="assemblyNames" />
    ///  <param name="callingTypeHandle" />
    {class} function CreateEngineAndGetGlobalScopeWithType(fast: Boolean; assemblyNames: TArray<string>; callingTypeHandle: DDN.mscorlib.DNRuntimeTypeHandle): DNGlobalScope;
    ///<summary>
    ///  此类、 成员或属性是脚本引擎的内部，且不应在代码中调用。
    ///</summary>
    ///  <param name="fast" />
    ///  <param name="assemblyNames" />
    {class} function CreateEngineAndGetGlobalScope(fast: Boolean; assemblyNames: TArray<string>): DNGlobalScope;
    ///<summary>
    ///  此类、 成员或属性是脚本引擎的内部，且不应在代码中调用。
    ///</summary>
    ///  <param name="fast" />
    ///  <param name="assemblyNames" />
    ///  <param name="callingTypeHandle" />
    ///  <param name="rootNamespace" />
    ///<returns>
    ///  返回 <see cref="T:Microsoft.JScript.GlobalScope" />
    ///  。
    ///</returns>
    {class} function CreateEngineAndGetGlobalScopeWithTypeAndRootNamespace(fast: Boolean; assemblyNames: TArray<string>; callingTypeHandle: DDN.mscorlib.DNRuntimeTypeHandle; rootNamespace: string): DNGlobalScope;
    ///<summary>
    ///  此类、 成员或属性是脚本引擎的内部，且不应在代码中调用。
    ///</summary>
    {class} function CreateEngine: DNVsaEngine;
    ///<summary>
    ///  此类、 成员或属性是脚本引擎的内部，且不应在代码中调用。
    ///</summary>
    ///  <param name="callingTypeHandle" />
    {class} function CreateEngineWithType(callingTypeHandle: DDN.mscorlib.DNRuntimeTypeHandle): DNVsaEngine;

  end;

  ///<summary>
  ///  实现 <see cref="T:Microsoft.Vsa.IVsaEngine" />
  ///  接口。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Vsa.VsaEngine')]
  DNVsaEngine = interface(DNBaseVsaEngine)
  ['{B71E484D-93ED-4B56-BFB9-CEED5134822B}']
  { getters & setters } 

    function get_LenientGlobalObject: DNLenientGlobalObject;
    function get_AppDomain: DDN.mscorlib.DN_AppDomain;
    procedure set_AppDomain(value: DDN.mscorlib.DN_AppDomain);
    function get_Evidence: DDN.mscorlib.DNEvidence;
    procedure set_Evidence(value: DDN.mscorlib.DNEvidence);
    function get_ApplicationBase: string;
    procedure set_ApplicationBase(value: string);
    function get_Assembly: DDN.mscorlib.DNAssembly;
    function get_GenerateDebugInfo: Boolean;
    procedure set_GenerateDebugInfo(value: Boolean);
    function get_IsCompiled: Boolean;
    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_IsRunning: Boolean;
    function get_Items: DNIJSVsaItems;
    function get_Language: string;
    function get_LCID: Int32;
    procedure set_LCID(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RootMoniker: string;
    procedure set_RootMoniker(value: string);
    function get_RootNamespace: string;
    procedure set_RootNamespace(value: string);
    function get_Site: DNIJSVsaSite;
    procedure set_Site(value: DNIJSVsaSite);
    function get_Version: string;

  { methods } 

    ///<summary>
    ///  此类、 成员或属性是脚本引擎的内部，且不应在代码中调用。
    ///</summary>
    ///  <param name="domain" />
    function Clone(domain: DDN.mscorlib.DNAppDomain): DNIJSVsaEngine;
    ///<summary>
    ///  此类、 成员或属性是脚本引擎的内部，且不应在代码中调用。
    ///</summary>
    function CompileEmpty: Boolean;
    ///<summary>
    ///  此类、 成员或属性是脚本引擎的内部，且不应在代码中调用。
    ///</summary>
    procedure ConnectEvents;
    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
    procedure DisconnectEvents;
    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
    function GetAssembly: DDN.mscorlib.DNAssembly;
    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
    ///  <param name="itemName" />
    function GetItem(itemName: string): DNIJSVsaItem;
    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
    ///  <param name="index" />
    function GetItemAtIndex(index: Int32): DNIJSVsaItem;
    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
    function GetItemCount: Int32;
    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
    function GetMainScope: DNGlobalScope;
    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
    function GetModule: DDN.mscorlib.DNModule;
    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
    function GetOriginalArrayConstructor: DNArrayConstructor;
    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
    function GetOriginalObjectConstructor: DNObjectConstructor;
    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
    function GetOriginalRegExpConstructor: DNRegExpConstructor;
    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
    procedure Interrupt;
    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
    ///  <param name="ident" />
    function IsValidIdentifier(ident: string): Boolean;
    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
    function PopScriptObject: DNScriptObject;
    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
    ///  <param name="obj" />
    procedure PushScriptObject(obj: DNScriptObject);
    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
    ///  <param name="name" />
    procedure RegisterEventSource(name: string);
    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
    procedure Reset;
    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
    procedure Restart;
    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
    procedure RunEmpty;
    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
    ///  <param name="domain" />
    procedure Run(domain: DDN.mscorlib.DNAppDomain); overload;
    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
    function ScriptObjectStackTop: DNScriptObject;
    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
    ///  <param name="output" />
    procedure SetOutputStream(output: DNIMessageReceiver);
    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
    function GetGlobalScope: DNIVsaScriptScope;
    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
    ///  <param name="rootMoniker" />
    ///  <param name="site" />
    procedure InitVsaEngine(rootMoniker: string; site: DNIJSVsaSite);
    ///<summary>
    ///  关闭该引擎。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  将使引擎编译现有的源状态。
    ///</summary>
    ///<returns><see langword="true" />
    ///  在成功编译;否则为<see langword="false" />
    ///  。
    ///</returns>
    function Compile: Boolean;
    ///<summary>
    ///  获取引擎特定于实现的选项。
    ///</summary>
    ///  <param name="name">
    ///  要获取的选项的名称。
    ///</param>
    ///<returns>
    ///  选项的值。
    ///</returns>
    function GetOption(name: string): DDN.mscorlib.DNObject;
    ///<summary>
    ///  提供初始化阶段已完成的通知。
    ///</summary>
    procedure InitNew;
    ///<summary>
    ///  指示引擎从持久性提供主机的对象由指定点加载源项。
    ///</summary>
    ///  <param name="site">
    ///  从中加载指定源项的站点。
    ///</param>
    procedure LoadSourceState(site: DNIJSVsaPersistSite);
    ///<summary>
    ///  使无效的引擎，其根名字对象由指定的缓存程序集。
    ///</summary>
    procedure RevokeCache;
    ///<summary>
    ///  设置特定于实现的引擎的选项。
    ///</summary>
    ///  <param name="name">
    ///  要设置的选项的名称。
    ///</param>
    ///  <param name="value">
    ///  所设置的选项的值。
    ///</param>
    procedure SetOption(name: string; value: DDN.mscorlib.DNObject);
    procedure SaveCompiledState(out pe: TArray<Byte>; out debugInfo: TArray<Byte>);
    ///<summary>
    ///  指示引擎来持久保存其源状态。
    ///</summary>
    ///  <param name="site">
    ///  状态保存到数据集的源站点。
    ///</param>
    procedure SaveSourceState(site: DNIJSVsaPersistSite);
    ///<summary>
    ///  启动在引擎中的已编译代码的执行，并绑定所有事件处理程序
    ///</summary>
    procedure Run; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
    property LenientGlobalObject: DNLenientGlobalObject read get_LenientGlobalObject;
    ///<summary>
    ///  获取或设置应用程序域。
    ///</summary>
    ///<returns>
    ///  应用程序域中。
    ///</returns>
    property AppDomain: DDN.mscorlib.DN_AppDomain read get_AppDomain write set_AppDomain;
    ///<summary>
    ///  提供用于验证当前对象的标识的证据。
    ///</summary>
    ///<returns>
    ///  返回对 Evidence 对象的引用。
    ///</returns>
    property Evidence: DDN.mscorlib.DNEvidence read get_Evidence write set_Evidence;
    ///<summary>
    ///  获取或设置应用程序基。
    ///</summary>
    ///<returns>
    ///  应用程序基中。
    ///</returns>
    property ApplicationBase: string read get_ApplicationBase write set_ApplicationBase;
    ///<summary>
    ///  获取对运行方法生成的正在运行的程序集的引用。
    ///</summary>
    ///<returns>
    ///  对当前正在运行的程序集的引用。
    ///</returns>
    property Assembly: DDN.mscorlib.DNAssembly read get_Assembly;
    ///<summary>
    ///  设置或获取一个布尔值，表示调用编译方法时，脚本引擎是否生成调试信息。
    ///</summary>
    ///<returns><see langword="true" />
    ///  生成调试信息;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property GenerateDebugInfo: Boolean read get_GenerateDebugInfo write set_GenerateDebugInfo;
    ///<summary>
    ///  获取或设置一个值，指示源是否被编译。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果源被编译;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsCompiled: Boolean read get_IsCompiled;
    ///<summary>
    ///  获取或设置一个值，该值指示该项的当前内存中表示是否从保留的表示形式不同。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果内存中表示不同于保留的表示形式;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  获取一个布尔值，则引擎当前是否处于运行模式下将进行相应报告。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果引擎处于运行模式下;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsRunning: Boolean read get_IsRunning;
    ///<summary>
    ///  获取 IJSVsaItem 对象，它表示添加到引擎的所有项的集合。
    ///</summary>
    ///<returns>
    ///  项的集合。
    ///</returns>
    property Items: DNIJSVsaItems read get_Items;
    ///<summary>
    ///  获取由该引擎支持的编程语言的名称。
    ///</summary>
    ///<returns>
    ///  编程语言的名称。
    ///</returns>
    property Language: string read get_Language;
    ///<summary>
    ///  获取或设置在报告异常消息时所使用的地理区域设置和语言。
    ///</summary>
    ///<returns>
    ///  一个整数值表示内的异常的消息都要报告的区域设置。
    ///</returns>
    property LCID: Int32 read get_LCID write set_LCID;
    ///<summary>
    ///  设置或获取该引擎的显示名称。
    ///</summary>
    ///<returns>
    ///  引擎的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  设置或获取脚本引擎的根名字对象。
    ///</summary>
    ///<returns>
    ///  引擎的根名字对象。
    ///</returns>
    property RootMoniker: string read get_RootMoniker write set_RootMoniker;
    ///<summary>
    ///  设置或获取由引擎使用的根命名空间。
    ///</summary>
    ///<returns>
    ///  引擎的命名空间。
    ///</returns>
    property RootNamespace: string read get_RootNamespace write set_RootNamespace;
    ///<summary>
    ///  设置或获取的宿主实现 IJSVsaSite 对象，该引擎用于与主机通信。
    ///</summary>
    ///<returns>
    ///  宿主实现的对象。
    ///</returns>
    property Site: DNIJSVsaSite read get_Site write set_Site;
    ///<summary>
    ///  获取由引擎使用，在窗体支持的语言编译器的当前版本 Major.Minor.Revision.Build。
    ///</summary>
    ///<returns>
    ///  最新版本。
    ///</returns>
    property Version: string read get_Version;
  end;

  TDNVsaEngine = class(TDNGenericImport<DNVsaEngineClass, DNVsaEngine>) end;

  //-------------namespace: Microsoft.JScript.Vsa----------------
  DNBaseVsaSiteClass = interface(DNObjectClass)
  ['{99BAAA49-5EA5-5B8C-8C22-641B40D7F347}']
  { constructors } 

    ///<summary>
    ///  创建新的站点。
    ///</summary>
    {class} function init: DNBaseVsaSite;

  end;

  ///<summary>
  ///  启用主机与脚本引擎之间的通信。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Vsa.BaseVsaSite')]
  DNBaseVsaSite = interface(DNIJSVsaSite)
  ['{172186BB-0EB9-3832-8716-B17A8B140E0E}']
  { getters & setters } 

    function get_Assembly: TArray<Byte>;
    function get_DebugInfo: TArray<Byte>;

  { methods } 

    procedure GetCompiledState(out pe: TArray<Byte>; out debugInfo: TArray<Byte>);
    ///<summary>
    ///  获取对先前使用 <see cref="M:Microsoft.Vsa.IVsaCodeItem.AddEventSource(System.String,System.String)" />
    ///  方法添加到脚本引擎中的事件源的引用。
    ///</summary>
    ///  <param name="itemName">
    ///  指定的项名称。
    ///</param>
    ///  <param name="eventSourceName">
    ///  指定的事件源名称。
    ///</param>
    ///<returns>
    ///  将事件源返回到引擎。
    ///</returns>
    function GetEventSourceInstance(itemName: string; eventSourceName: string): DDN.mscorlib.DNObject;
    ///<summary>
    ///  获取对全局项的引用，例如主机提供的应用程序对象。
    ///</summary>
    ///  <param name="name">
    ///  获取对全局项的引用，例如主机提供的应用程序对象。
    ///</param>
    ///<returns>
    ///  返回对全局对象的引用。
    ///</returns>
    function GetGlobalInstance(name: string): DDN.mscorlib.DNObject;
    ///<summary>
    ///  通知主机有关由脚本引擎生成的事件。
    ///</summary>
    ///  <param name="notify">
    ///  通知主机有关由脚本引擎生成的事件。
    ///</param>
    ///  <param name="optional">
    ///  通知主机有关由引擎生成的事件。
    ///</param>
    procedure Notify(notify: string; optional: DDN.mscorlib.DNObject);
    ///<summary>
    ///  通知主机如何对脚本引擎遇到的编译器错误作出响应。
    ///</summary>
    ///  <param name="error">
    ///  表示有害错误的 <see cref="T:Microsoft.Vsa.IVsaError" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  如果指示编译器继续向 <see cref="T:Microsoft.Vsa.IVsaSite" />
    ///  对象报告进一步的错误，则返回 TRUE。
    ///  如果指示编译器停止向 <see langword="IVsaSite" />
    ///  对象报告进一步的错误，则返回 FALSE。
    ///</returns>
    function OnCompilerError(error: DNIJSVsaError): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  此站点的的程序集。
    ///</summary>
    ///<returns>
    ///  此站点的的程序集。
    ///</returns>
    property Assembly: TArray<Byte> read get_Assembly;
    ///<summary>
    ///  调试此站点的信息。
    ///</summary>
    ///<returns>
    ///  调试此站点的信息。
    ///</returns>
    property DebugInfo: TArray<Byte> read get_DebugInfo;
  end;

  TDNBaseVsaSite = class(TDNGenericImport<DNBaseVsaSiteClass, DNBaseVsaSite>) end;

  //-------------namespace: Microsoft.JScript.Vsa----------------
  DNBaseVsaStartupClass = interface(DDN.mscorlib.DNObjectClass)
  ['{64140E7B-837A-5DD8-8D35-9FDFB2670D9E}']
  end;

  ///<summary>
  ///  用于启动和重置基 VSA 引擎。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Vsa.BaseVsaStartup')]
  DNBaseVsaStartup = interface(DDN.mscorlib.DNObject)
  ['{FA6559BE-276C-3FC6-8B0E-7EADD8D64C40}']
  { methods } 

    ///<summary>
    ///  设置此引擎的 VSA 站点。
    ///</summary>
    ///  <param name="site">
    ///  此引擎 VSA 站点。
    ///</param>
    procedure SetSite(site: DNIJSVsaSite);
    ///<summary>
    ///  用于执行在引擎启动时的操作。
    ///</summary>
    procedure Startup;
    ///<summary>
    ///  用于关闭引擎在执行操作。
    ///</summary>
    procedure Shutdown;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBaseVsaStartup = class(TDNGenericImport<DNBaseVsaStartupClass, DNBaseVsaStartup>) end;

  //-------------namespace: Microsoft.JScript.Vsa----------------
  DNResInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A481384F-35DD-51A4-AC3B-3228B5BAD59B}']
  { constructors } 

    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
    ///  <param name="filename" />
    ///  <param name="name" />
    ///  <param name="isPublic" />
    ///  <param name="isLinked" />
    {class} function init(filename: string; name: string; isPublic: Boolean; isLinked: Boolean): DNResInfo; overload;
    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
    ///  <param name="resinfo" />
    ///  <param name="isLinked" />
    {class} function init(resinfo: string; isLinked: Boolean): DNResInfo; overload;

  end;

  ///<summary>
  ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Vsa.ResInfo')]
  DNResInfo = interface(DDN.mscorlib.DNObject)
  ['{E3F15281-50FF-30DE-A541-1B9785E74E5A}']
  { fields getter & setter } 

   function __fakeFieldGet_filename: string;
   procedure __fakeFieldSet_filename(value: string);
   function __fakeFieldGet_fullpath: string;
   procedure __fakeFieldSet_fullpath(value: string);
   function __fakeFieldGet_name: string;
   procedure __fakeFieldSet_name(value: string);
   function __fakeFieldGet_isPublic: Boolean;
   procedure __fakeFieldSet_isPublic(value: Boolean);
   function __fakeFieldGet_isLinked: Boolean;
   procedure __fakeFieldSet_isLinked(value: Boolean);

  { fields } 

    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
   property filename: string read __fakeFieldGet_filename write __fakeFieldSet_filename;
    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
   property fullpath: string read __fakeFieldGet_fullpath write __fakeFieldSet_fullpath;
    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
   property name: string read __fakeFieldGet_name write __fakeFieldSet_name;
    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
   property isPublic: Boolean read __fakeFieldGet_isPublic write __fakeFieldSet_isPublic;
    ///<summary>
    ///  此类、 成员或属性对脚本引擎内部使用并且不应在代码中调用。
    ///</summary>
   property isLinked: Boolean read __fakeFieldGet_isLinked write __fakeFieldSet_isLinked;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNResInfo = class(TDNGenericImport<DNResInfoClass, DNResInfo>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNVsaItemClass = interface(DNObjectClass)
  ['{B8852912-C3E2-54C1-A956-247F980E4944}']
  end;

  ///<summary>
  ///  表示项添加到.NET 脚本引擎。
  ///  这包括代码项、 引用项和全局项。
  ///</summary>
  [DNTypeName('Microsoft.JScript.VsaItem')]
  DNVsaItem = interface(DNIJSVsaItem)
  ['{4BC9B26A-38F3-316A-9F40-E67FBEDA918B}']
  { getters & setters } 

    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_ItemType: DNJSVsaItemType;

  { methods } 

    ///<summary>
    ///  获取 codebase 选项。
    ///</summary>
    ///  <param name="name">
    ///  字符串文字"基本代码"。
    ///</param>
    ///<returns>
    ///  值 codebase 选项。
    ///</returns>
    function GetOption(name: string): DDN.mscorlib.DNObject;
    ///<summary>
    ///  集 codebase 选项。
    ///</summary>
    ///  <param name="name">
    ///  字符串文字"基本代码"。
    ///</param>
    ///  <param name="value">
    ///  选项的新值。
    ///</param>
    procedure SetOption(name: string; value: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示该项的当前内存中表示是否从保留的表示形式不同。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果内存中表示不同于保留的表示形式;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    ///<summary>
    ///  获取或设置项的名称。
    ///</summary>
    ///<returns>
    ///  项的字符串文字名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取项的类型。
    ///</summary>
    ///<returns>
    ///  枚举值之一。
    ///  值指示项的类型。
    ///</returns>
    property ItemType: DNJSVsaItemType read get_ItemType;
  end;

  TDNVsaItem = class(TDNGenericImport<DNVsaItemClass, DNVsaItem>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNVsaItemsClass = interface(DNObjectClass)
  ['{8F91B953-9982-5CC9-A8C2-A3720BBDDDEB}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.VsaItems" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="engine">
    ///  对脚本引擎的引用。
    ///</param>
    {class} function init(engine: DNVsaEngine): DNVsaItems;

  end;

  ///<summary>
  ///  表示一套 <see cref="T:Microsoft.Vsa.IVsaItem" />
  ///  可以按名称或索引进行寻址的对象。
  ///</summary>
  [DNTypeName('Microsoft.JScript.VsaItems')]
  DNVsaItems = interface(DNIJSVsaItems)
  ['{CE4CC16F-6692-3F98-AD40-51894B669737}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  断开与脚本引擎的每个项集合中。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  获取循环的枚举器对的集合。
    ///</summary>
    ///<returns>
    ///  一个循环访问集合的枚举。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  创建新项并将其添加到集合。
    ///</summary>
    ///  <param name="name">
    ///  新项的名称。
    ///</param>
    ///  <param name="itemType">
    ///  枚举值之一。
    ///  值指定为新项的类型<see cref="F:Microsoft.JScript.Vsa.JSVsaItemType.Code" />
    ///  ， <see cref="F:Microsoft.JScript.Vsa.JSVsaItemType.Reference" />
    ///  ，或<see cref="F:Microsoft.JScript.Vsa.JSVsaItemType.AppGlobal" />
    ///  。
    ///</param>
    ///  <param name="itemFlag">
    ///  枚举值之一。
    ///  值指定的初始内容<see cref="F:Microsoft.JScript.Vsa.JSVsaItemType.Code" />
    ///  项作为<see cref="F:Microsoft.JScript.Vsa.JSVsaItemFlag.Class" />
    ///  ， <see cref="F:Microsoft.JScript.Vsa.JSVsaItemFlag.Module" />
    ///  ，或<see cref="F:Microsoft.JScript.Vsa.JSVsaItemFlag.None" />
    ///  。
    ///</param>
    ///<returns>
    ///  新创建的项。
    ///</returns>
    function CreateItem(name: string; itemType: DNJSVsaItemType; itemFlag: DNJSVsaItemFlag): DNIJSVsaItem;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取集合中的项数。
    ///</summary>
    ///<returns>
    ///  集合中项的数目。
    ///</returns>
    property Count: Int32 read get_Count;
  end;

  TDNVsaItems = class(TDNGenericImport<DNVsaItemsClass, DNVsaItems>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNExpandoClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{69A3C8ED-AE6B-527F-9BCF-41A9CFC8CC8B}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:Microsoft.JScript.Expando" />
    ///  特性类。
    ///</summary>
    {class} function init: DNExpando;

  end;

  ///<summary>
  ///  指示类或方法是 expando 类或方法。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Expando')]
  DNExpando = interface(DDN.mscorlib.DNAttribute)
  ['{3C80C5C6-9C5A-37F2-9066-18F915591F6F}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNExpando = class(TDNGenericImport<DNExpandoClass, DNExpando>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNHideClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{76CFFEA8-8C53-5764-86EE-0E274C17FC0B}']
  { constructors } 

    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.JScript.Hide" />
    ///  特性类。
    ///</summary>
    {class} function init: DNHide;

  end;

  ///<summary>
  ///  指示方法或字段隐藏方法或在基类中的字段。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Hide')]
  DNHide = interface(DDN.mscorlib.DNAttribute)
  ['{EC2FEB5E-A197-3917-98C3-C9E92FF9DED8}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNHide = class(TDNGenericImport<DNHideClass, DNHide>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNJSFunctionAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{906CA8DB-7EC8-5C72-897D-DB30C566CA7D}']
  { constructors } 

    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.JScript.JSFunctionAttribute" />
    ///  类，使用指定的调用约定。
    ///</summary>
    ///  <param name="value">
    ///  该方法或构造函数的调用约定。
    ///</param>
    {class} function init(value: DNJSFunctionAttributeEnum): DNJSFunctionAttribute; overload;
    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.JScript.JSFunctionAttribute" />
    ///  类，使用指定的调用约定。
    ///  该属性标识指定的内置函数。
    ///</summary>
    ///  <param name="value">
    ///  该方法或构造函数的调用约定。
    ///</param>
    ///  <param name="builtinFunction">
    ///  此属性标识的内置函数。
    ///</param>
    {class} function init(value: DNJSFunctionAttributeEnum; builtinFunction: DNJSBuiltin): DNJSFunctionAttribute; overload;

  end;

  ///<summary>
  ///  与使用<see cref="T:Microsoft.JScript.JSFunctionAttributeEnum" />
  ///  进行批注的方法和由 JScript 编译器生成的构造函数的调用约定。
  ///</summary>
  [DNTypeName('Microsoft.JScript.JSFunctionAttribute')]
  DNJSFunctionAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{1C0D1CD4-7863-374B-9481-00EC9EA400D4}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  获取该方法或构造函数的调用约定。
    ///</summary>
    ///<returns>
    ///  方法或构造函数的调用约定。
    ///</returns>
    function GetAttributeValue: DNJSFunctionAttributeEnum;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNJSFunctionAttribute = class(TDNGenericImport<DNJSFunctionAttributeClass, DNJSFunctionAttribute>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNNotRecommendedClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{C104F49A-47E9-501B-BAF0-82E1E591ED3B}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:Microsoft.JScript.NotRecommended" />
    ///  特性类。
    ///</summary>
    ///  <param name="message">
    ///  建议不要使用字段的方法的名称。
    ///</param>
    {class} function init(message: string): DNNotRecommended;

  end;

  ///<summary>
  ///  指示方法或字段不建议使用。
  ///</summary>
  [DNTypeName('Microsoft.JScript.NotRecommended')]
  DNNotRecommended = interface(DDN.mscorlib.DNAttribute)
  ['{00D5EE74-C74A-3D9D-B249-778494C268C2}']
  { getters & setters } 

    function get_IsError: Boolean;
    function get_Message: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否使用方法或字段，不建议为一个错误。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="false" />
    ///  。
    ///</returns>
    property IsError: Boolean read get_IsError;
    ///<summary>
    ///  获取的方法或不建议使用的字段的名称。
    ///</summary>
    ///<returns>
    ///  建议不要使用字段的方法的名称。
    ///</returns>
    property Message: string read get_Message;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNNotRecommended = class(TDNGenericImport<DNNotRecommendedClass, DNNotRecommended>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNOverrideClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{C698512A-6079-5AF0-9550-0D0A7A3E0CC7}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.Override" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNOverride;

  end;

  ///<summary>
  ///  指示方法或字段重写的方法或在基类中的字段。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Override')]
  DNOverride = interface(DDN.mscorlib.DNAttribute)
  ['{2B3C12AA-3DEA-3335-BE03-3AA04045226C}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNOverride = class(TDNGenericImport<DNOverrideClass, DNOverride>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNReferenceAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{EAB1ABE3-91E1-5A8E-84B4-AA76EC636B65}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.ReferenceAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="reference">
    ///  对程序集的引用。
    ///</param>
    {class} function init(reference: string): DNReferenceAttribute;

  end;

  ///<summary>
  ///  表示对程序集的引用。
  ///</summary>
  [DNTypeName('Microsoft.JScript.ReferenceAttribute')]
  DNReferenceAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{12E6C9EB-F32C-36E7-9473-063044C070D6}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { fields getter & setter } 

   function __fakeFieldGet_reference: string;
   procedure __fakeFieldSet_reference(value: string);

  { fields } 

    ///<summary>
    ///  指定对程序集的引用。
    ///</summary>
   property reference: string read __fakeFieldGet_reference write __fakeFieldSet_reference;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNReferenceAttribute = class(TDNGenericImport<DNReferenceAttributeClass, DNReferenceAttribute>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNCmdLineExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{B0D5B544-EEBC-53E6-A39B-DB23C34EEAAA}']
  { constructors } 

    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.JScript.CmdLineException" />
    ///  类，使用指定的错误代码和区域性信息。
    ///</summary>
    ///  <param name="errorCode">
    ///  枚举值之一。
    ///  指定错误的类型。
    ///</param>
    ///  <param name="culture">
    ///  区域性特定信息。
    ///</param>
    {class} function init(errorCode: DNCmdLineError; culture: DDN.mscorlib.DNCultureInfo): DNCmdLineException; overload;
    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.JScript.CmdLineException" />
    ///  类，使用指定的错误代码、 上下文和区域性信息。
    ///</summary>
    ///  <param name="errorCode">
    ///  枚举值之一。
    ///  指定错误的类型。
    ///</param>
    ///  <param name="context">
    ///  在其中发生错误的上下文。
    ///</param>
    ///  <param name="culture">
    ///  区域性特定信息。
    ///</param>
    {class} function init(errorCode: DNCmdLineError; context: string; culture: DDN.mscorlib.DNCultureInfo): DNCmdLineException; overload;
    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.CmdLineException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNCmdLineException; overload;
    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.JScript.CmdLineException" />
    ///  类，使用指定的错误消息。
    ///</summary>
    ///  <param name="m">
    ///  描述错误的消息。
    ///</param>
    {class} function init(m: string): DNCmdLineException; overload;
    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.JScript.CmdLineException" />
    ///  类，使用指定的错误消息和对导致此异常的内部异常的引用。
    ///</summary>
    ///  <param name="m">
    ///  描述错误的消息。
    ///</param>
    ///  <param name="e">
    ///  如果未指定内部异常是，则当前异常，则为 null 的原因的异常。
    ///</param>
    {class} function init(m: string; e: DDN.mscorlib.DNException): DNCmdLineException; overload;

  end;

  ///<summary>
  ///  表示在运行命令行编译器 jsc.exe 时出现的错误。
  ///</summary>
  [DNTypeName('Microsoft.JScript.CmdLineException')]
  DNCmdLineException = interface(DDN.mscorlib.DNException)
  ['{9FB2FA43-F441-390E-8AC2-184AC4C84DDA}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  存储序列化有关所引发的异常对象数据。
    ///</summary>
    ///  <param name="s">
    ///  有关所引发的异常的序列化的对象数据。
    ///</param>
    ///  <param name="c">
    ///  有关源或目标的上下文信息
    ///</param>
    procedure GetObjectData(s: DDN.mscorlib.DNSerializationInfo; c: DDN.mscorlib.DNStreamingContext);
    ///<summary>
    ///  在资源文件中返回指定的错误的键。
    ///</summary>
    ///  <param name="errorCode">
    ///  枚举值之一。
    ///  指定要获取的项的错误。
    ///</param>
    ///<returns>
    ///  密钥 <paramref name="errorCode" />
    ///  。
    ///</returns>
    function ResourceKey(errorCode: DNCmdLineError): string;
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取描述当前异常的消息。
    ///</summary>
    ///<returns>
    ///  解释异常原因的错误消息。
    ///</returns>
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNCmdLineException = class(TDNGenericImport<DNCmdLineExceptionClass, DNCmdLineException>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNParserExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{D0E81E0E-689B-5ADD-96D2-680CDC8AB0F9}']
  end;

  ///<summary>
  ///  此类由 JScript 分析器用于表示分析器异常。
  ///</summary>
  [DNTypeName('Microsoft.JScript.ParserException')]
  DNParserException = interface(DDN.mscorlib.DNException)
  ['{4C50F41D-B082-3285-B94D-AADE13829FDE}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNParserException = class(TDNGenericImport<DNParserExceptionClass, DNParserException>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNEndOfFileClass = interface(DNParserExceptionClass)
  ['{EC5CE8A5-00E3-553E-B418-1D7AA7F5019A}']
  end;

  ///<summary>
  ///  此类由 JScript 分析器用于表示到达作为异常的文件的结尾。
  ///  代码可能会引发此错误，来停止分析器。
  ///</summary>
  [DNTypeName('Microsoft.JScript.EndOfFile')]
  DNEndOfFile = interface(DNParserException)
  ['{FC0E925F-1171-39A1-BAAC-38C372DC111D}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNEndOfFile = class(TDNGenericImport<DNEndOfFileClass, DNEndOfFile>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNBreakOutOfFinallyClass = interface(DDN.mscorlib.DNApplicationExceptionClass)
  ['{83A96511-A0DD-5094-8D2F-E1C19F43E3A0}']
  { constructors } 

    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.JScript.BreakOutOfFinally" />
    ///  类，使用指定的目标。
    ///</summary>
    ///  <param name="target">
    ///  异常的目标。
    ///</param>
    {class} function init(target: Int32): DNBreakOutOfFinally; overload;
    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.JScript.BreakOutOfFinally" />
    ///  类，使用指定的错误消息。
    ///</summary>
    ///  <param name="m">
    ///  描述错误的消息。
    ///</param>
    {class} function init(m: string): DNBreakOutOfFinally; overload;
    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.JScript.BreakOutOfFinally" />
    ///  类，使用指定的错误消息和对导致此异常的内部异常的引用。
    ///</summary>
    ///  <param name="m">
    ///  描述错误的消息。
    ///</param>
    ///  <param name="e">
    ///  导致当前异常的异常。
    ///</param>
    {class} function init(m: string; e: DDN.mscorlib.DNException): DNBreakOutOfFinally; overload;

  end;

  ///<summary>
  ///  执行代码外中断时表示异常状态<see langword="finally" />
  ///  块。
  ///</summary>
  [DNTypeName('Microsoft.JScript.BreakOutOfFinally')]
  DNBreakOutOfFinally = interface(DDN.mscorlib.DNApplicationException)
  ['{2A52D6E9-AB9A-3309-9ED6-E25298434FFA}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { fields getter & setter } 

   function __fakeFieldGet_target: Int32;
   procedure __fakeFieldSet_target(value: Int32);

  { fields } 

    ///<summary>
    ///  存储异常的目标。
    ///</summary>
   property target: Int32 read __fakeFieldGet_target write __fakeFieldSet_target;

  { methods } 

    ///<summary>
    ///  存储中的异常有关的信息 <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  。
    ///  存储的信息包括 <see cref="F:Microsoft.JScript.ContinueOutOfFinally.target" />
    ///  值。
    ///</summary>
    ///  <param name="s">
    ///  有关所引发的异常的序列化的对象数据。
    ///</param>
    ///  <param name="c">
    ///  有关源或目标的上下文信息。
    ///</param>
    procedure GetObjectData(s: DDN.mscorlib.DNSerializationInfo; c: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNBreakOutOfFinally = class(TDNGenericImport<DNBreakOutOfFinallyClass, DNBreakOutOfFinally>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNContinueOutOfFinallyClass = interface(DDN.mscorlib.DNApplicationExceptionClass)
  ['{8E369D64-1722-5A92-B0D5-224A59B0D170}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.ContinueOutOfFinally" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNContinueOutOfFinally; overload;
    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.JScript.ContinueOutOfFinally" />
    ///  类，使用指定的目标。
    ///</summary>
    ///  <param name="target">
    ///  异常的目标。
    ///</param>
    {class} function init(target: Int32): DNContinueOutOfFinally; overload;
    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.JScript.ContinueOutOfFinally" />
    ///  类，使用指定的错误消息。
    ///</summary>
    ///  <param name="m">
    ///  描述错误的消息。
    ///</param>
    {class} function init(m: string): DNContinueOutOfFinally; overload;
    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.JScript.ContinueOutOfFinally" />
    ///  类，使用指定的错误消息和对导致此异常的内部异常的引用。
    ///</summary>
    ///  <param name="m">
    ///  描述错误的消息。
    ///</param>
    ///  <param name="e">
    ///  导致当前异常的异常。
    ///</param>
    {class} function init(m: string; e: DDN.mscorlib.DNException): DNContinueOutOfFinally; overload;

  end;

  ///<summary>
  ///  表示异常状态，当执行代码继续外<see langword="finally" />
  ///  块。
  ///</summary>
  [DNTypeName('Microsoft.JScript.ContinueOutOfFinally')]
  DNContinueOutOfFinally = interface(DDN.mscorlib.DNApplicationException)
  ['{9A313D35-FDA9-3EAC-806E-2ACB574E66DD}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { fields getter & setter } 

   function __fakeFieldGet_target: Int32;
   procedure __fakeFieldSet_target(value: Int32);

  { fields } 

    ///<summary>
    ///  存储异常的目标。
    ///</summary>
   property target: Int32 read __fakeFieldGet_target write __fakeFieldSet_target;

  { methods } 

    ///<summary>
    ///  存储中的异常有关的信息 <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  。
    ///  存储的信息包括 <see cref="F:Microsoft.JScript.ContinueOutOfFinally.target" />
    ///  值。
    ///</summary>
    ///  <param name="s">
    ///  有关所引发的异常的序列化的对象数据。
    ///</param>
    ///  <param name="c">
    ///  有关源或目标的上下文信息。
    ///</param>
    procedure GetObjectData(s: DDN.mscorlib.DNSerializationInfo; c: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNContinueOutOfFinally = class(TDNGenericImport<DNContinueOutOfFinallyClass, DNContinueOutOfFinally>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNJScriptExceptionClass = interface(DDN.mscorlib.DNApplicationExceptionClass)
  ['{C4B171EE-E08D-5742-90EB-7E1B17CDAE8F}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.JScriptException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNJScriptException; overload;
    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.JScript.JScriptException" />
    ///  类，使用指定的错误消息。
    ///</summary>
    ///  <param name="m">
    ///  描述错误的消息。
    ///</param>
    {class} function init(m: string): DNJScriptException; overload;
    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.JScript.JScriptException" />
    ///  类，使用指定的错误消息和对导致此异常的内部异常的引用。
    ///</summary>
    ///  <param name="m">
    ///  描述错误的消息。
    ///</param>
    ///  <param name="e">
    ///  导致当前异常的异常。
    ///</param>
    {class} function init(m: string; e: DDN.mscorlib.DNException): DNJScriptException; overload;
    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.JScript.JScriptException" />
    ///  类，使用指定<see cref="T:Microsoft.JScript.JSError" />
    ///  。
    ///</summary>
    ///  <param name="errorNumber">
    ///  枚举值之一。
    ///  值指定的错误。
    ///</param>
    {class} function init(errorNumber: DNJSError): DNJScriptException; overload;

  end;

  ///<summary>
  ///  JScript 为向公共语言运行时 (CLR) 主机或程序通知发生错误而引发的异常。
  ///<see cref="T:Microsoft.JScript.JScriptException" />
  ///  通常采用 <see cref="T:Microsoft.JScript.JSError" />
  ///  枚举值。
  ///</summary>
  [DNTypeName('Microsoft.JScript.JScriptException')]
  DNJScriptException = interface(DDN.mscorlib.DNApplicationException)
  ['{7815EFA1-2147-3753-A264-E0539F39D66C}']
  { getters & setters } 

    function get_SourceMoniker: string;
    function get_StartColumn: Int32;
    function get_Column: Int32;
    function get_Description: string;
    function get_EndLine: Int32;
    function get_EndColumn: Int32;
    function get_Number: Int32;
    function get_ErrorNumber: Int32;
    function get_Line: Int32;
    function get_LineText: string;
    function get_Message: string;
    function get_Severity: Int32;
    function get_SourceItem: DNIJSVsaItem;
    function get_StackTrace: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  存储有关该异常的信息包括 IsError 和 Code 值，在 <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  。
    ///</summary>
    ///  <param name="info">
    ///  有关所引发的异常的序列化的对象数据。
    ///</param>
    ///  <param name="context">
    ///  有关源或目标的上下文信息。
    ///</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取包含错误的源代码文件的名称。
    ///</summary>
    ///<returns>
    ///  源的名称的代码文件或字符串文字"无源"如果 <see cref="T:Microsoft.JScript.Context" />
    ///  为 null。
    ///</returns>
    property SourceMoniker: string read get_SourceMoniker;
    ///<summary>
    ///  获取在代码中发生错误的列。
    ///</summary>
    ///<returns>
    ///  中的代码在其中出现错误，或者，如果列 <see cref="T:Microsoft.JScript.Context" />
    ///  为 null。
    ///</returns>
    property StartColumn: Int32 read get_StartColumn;
    ///<summary>
    ///  获取在代码中发生错误的列。
    ///</summary>
    ///<returns>
    ///  中的代码在其中发生错误，或者，如果列<see cref="T:Microsoft.JScript.Context" />
    ///  为 null。
    ///</returns>
    property Column: Int32 read get_Column;
    ///<summary>
    ///  获取描述错误的消息。
    ///</summary>
    ///<returns>
    ///  描述错误的消息。
    ///</returns>
    property Description: string read get_Description;
    ///<summary>
    ///  获取在其中结束错误代码的行。
    ///</summary>
    ///<returns>
    ///  在其中错误结束，代码，或者，如果行 <see cref="T:Microsoft.JScript.Context" />
    ///  为 null。
    ///</returns>
    property EndLine: Int32 read get_EndLine;
    ///<summary>
    ///  获取在其中结束错误代码中的列。
    ///</summary>
    ///<returns>
    ///  中的列顺序错误结束，该代码或 0 <see cref="T:Microsoft.JScript.Context" />
    ///  为 null。
    ///</returns>
    property EndColumn: Int32 read get_EndColumn;
    ///<summary>
    ///  获取 <see cref="P:System.Exception.HResult" />
    ///  错误代码。
    ///</summary>
    ///<returns><see cref="P:System.Exception.HResult" />
    ///  错误代码。
    ///</returns>
    property Number: Int32 read get_Number;
    ///<summary>
    ///  获取 <see cref="P:System.Exception.HResult" />
    ///  错误代码。
    ///</summary>
    ///<returns><see cref="P:System.Exception.HResult" />
    ///  错误代码。
    ///</returns>
    property ErrorNumber: Int32 read get_ErrorNumber;
    ///<summary>
    ///  获取的代码发生错误的行。
    ///</summary>
    ///<returns>
    ///  代码中发生错误，或者，如果行 <see cref="T:Microsoft.JScript.Context" />
    ///  为 null。
    ///</returns>
    property Line: Int32 read get_Line;
    ///<summary>
    ///  获取发生错误的代码的文本。
    ///</summary>
    ///<returns>
    ///  该代码或为空字符串的文本如果 <see cref="T:Microsoft.JScript.Context" />
    ///  为 null。
    ///</returns>
    property LineText: string read get_LineText;
    ///<summary>
    ///  获取描述错误的消息。
    ///</summary>
    ///<returns>
    ///  描述错误的消息。
    ///</returns>
    property Message: string read get_Message;
    ///<summary>
    ///  获取一个介于 0 （最严重） 和 4 （最不严重） 之间的数字，该值指示错误的严重级别。
    ///  默认值为 0。
    ///</summary>
    ///<returns>
    ///  介于 0 和 4 之间的数字。
    ///</returns>
    property Severity: Int32 read get_Severity;
    ///<summary>
    ///  获取导致了错误的源的代码项。
    ///</summary>
    ///<returns>
    ///  源的代码项;否则会引发 <see cref="T:Microsoft.JScript.NoContextException" />
    ///  如果 <see cref="T:Microsoft.JScript.Context" />
    ///  为 null。
    ///</returns>
    property SourceItem: DNIJSVsaItem read get_SourceItem;
    ///<summary>
    ///  获取在错误发生时的堆栈跟踪信息。
    ///</summary>
    ///<returns>
    ///  堆栈跟踪信息。
    ///</returns>
    property StackTrace: string read get_StackTrace;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNJScriptException = class(TDNGenericImport<DNJScriptExceptionClass, DNJScriptException>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNNoContextExceptionClass = interface(DDN.mscorlib.DNApplicationExceptionClass)
  ['{4ED94B91-DC91-5BF6-AAAB-E7810C98DDF7}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.NoContextException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNNoContextException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:Microsoft.JScript.NoContextException" />
    ///  类，使用指定的错误消息。
    ///</summary>
    ///  <param name="m">
    ///  描述错误的消息。
    ///</param>
    {class} function init(m: string): DNNoContextException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:Microsoft.JScript.NoContextException" />
    ///  类，使用指定的错误消息和对导致此异常的内部异常的引用。
    ///</summary>
    ///  <param name="m">
    ///  描述错误的消息。
    ///</param>
    ///  <param name="e">
    ///  导致当前异常的异常。
    ///</param>
    {class} function init(m: string; e: DDN.mscorlib.DNException): DNNoContextException; overload;

  end;

  ///<summary>
  ///  没有任何代码时引发的异常 <see cref="T:Microsoft.JScript.Context" />
  ///  与关联 <see cref="T:Microsoft.JScript.JScriptException" />
  ///  。
  ///</summary>
  [DNTypeName('Microsoft.JScript.NoContextException')]
  DNNoContextException = interface(DDN.mscorlib.DNApplicationException)
  ['{06ACC406-2823-329B-A3AF-6A530AE10739}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNNoContextException = class(TDNGenericImport<DNNoContextExceptionClass, DNNoContextException>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNReturnOutOfFinallyClass = interface(DDN.mscorlib.DNApplicationExceptionClass)
  ['{E6CA4BF1-F4A9-5E84-BD40-06C81CBD29EE}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.ReturnOutOfFinally" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNReturnOutOfFinally; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:Microsoft.JScript.ReturnOutOfFinally" />
    ///  类，使用指定的错误消息。
    ///</summary>
    ///  <param name="m">
    ///  描述错误的消息。
    ///</param>
    {class} function init(m: string): DNReturnOutOfFinally; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:Microsoft.JScript.ReturnOutOfFinally" />
    ///  类，使用指定的错误消息和对导致此异常的内部异常的引用。
    ///</summary>
    ///  <param name="m">
    ///  描述错误的消息。
    ///</param>
    ///  <param name="e">
    ///  导致当前异常的异常。
    ///</param>
    {class} function init(m: string; e: DDN.mscorlib.DNException): DNReturnOutOfFinally; overload;

  end;

  ///<summary>
  ///  表示异常状态，当代码执行返回外 <see langword="finally" />
  ///  块。
  ///</summary>
  [DNTypeName('Microsoft.JScript.ReturnOutOfFinally')]
  DNReturnOutOfFinally = interface(DDN.mscorlib.DNApplicationException)
  ['{026B6BC9-F948-3744-A243-4F640405BAAC}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNReturnOutOfFinally = class(TDNGenericImport<DNReturnOutOfFinallyClass, DNReturnOutOfFinally>) end;

  //-------------namespace: Microsoft.JScript.Vsa----------------
  DNJSVsaExceptionClass = interface(DDN.mscorlib.DNExternalExceptionClass)
  ['{25EFBB8C-6D72-5232-A196-5F52640E9A15}']
  { constructors } 

    ///<summary>
    ///  使用由系统提供的用于描述错误的消息初始化 <see cref="T:Microsoft.JScript.Vsa.JSVsaException" />
    ///  类的新实例。
    ///  此成员支持 .NET Framework 结构，不能在代码中直接使用。
    ///</summary>
    {class} function init: DNJSVsaException; overload;
    ///<summary>
    ///  使用指定的描述错误的消息初始化 <see cref="T:Microsoft.JScript.Vsa.JSVsaException" />
    ///  类的新实例。
    ///  此成员支持 .NET Framework 结构，不能在代码中直接使用。
    ///</summary>
    ///  <param name="message">
    ///  描述该异常的消息。
    ///  此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
    ///</param>
    {class} function init(message: string): DNJSVsaException; overload;
    ///<summary>
    ///  使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:Microsoft.JScript.Vsa.JSVsaException" />
    ///  类的新实例。
    ///  此成员支持 .NET Framework 结构，不能在代码中直接使用。
    ///</summary>
    ///  <param name="message">
    ///  描述该异常的消息。
    ///  此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常。
    ///  如果 <paramref name="innerException" />
    ///  参数不为 <see langword="null" />
    ///  ，则当前异常将在处理内部异常的 <see langword="catch" />
    ///  块中引发。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNJSVsaException; overload;
    ///<summary>
    ///  用序列化数据初始化 <see cref="T:Microsoft.JScript.Vsa.JSVsaException" />
    ///  类的新实例。
    ///  此成员支持 .NET Framework 结构，不能在代码中直接使用。
    ///</summary>
    ///  <param name="info">
    ///  承载序列化对象数据的对象。
    ///</param>
    ///  <param name="context">
    ///  关于来源和目标的上下文信息
    ///</param>
    {class} function init(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext): DNJSVsaException; overload;
    ///<summary>
    ///  此成员支持 .NET Framework 结构，不能在代码中直接使用。
    ///</summary>
    ///  <param name="error">
    ///  A<see cref="T:Microsoft.JScript.Vsa.JSVsaError" />
    ///  值，该值描述异常的原因。
    ///</param>
    {class} function init(error: DNJSVsaError): DNJSVsaException; overload;
    ///<summary>
    ///  此成员支持 .NET Framework 结构，不能在代码中直接使用。
    ///</summary>
    ///  <param name="error">
    ///  A<see cref="T:Microsoft.JScript.Vsa.JSVsaError" />
    ///  值，该值描述异常的原因。
    ///</param>
    ///  <param name="message">
    ///  描述该异常的消息。
    ///  此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
    ///</param>
    {class} function init(error: DNJSVsaError; message: string): DNJSVsaException; overload;
    ///<summary>
    ///  此成员支持 .NET Framework 结构，不能在代码中直接使用。
    ///</summary>
    ///  <param name="error">
    ///  A<see cref="T:Microsoft.JScript.Vsa.JSVsaError" />
    ///  值，该值描述异常的原因。
    ///</param>
    ///  <param name="message">
    ///  描述该异常的消息。
    ///  此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常。
    ///  如果 <paramref name="innerException" />
    ///  参数不为 <see langword="null" />
    ///  ，则当前异常将在处理内部异常的 <see langword="catch" />
    ///  块中引发。
    ///</param>
    {class} function init(error: DNJSVsaError; message: string; innerException: DDN.mscorlib.DNException): DNJSVsaException; overload;

  end;

  ///<summary>
  ///  此类型支持 .NET Framework 基础结构，不能在代码中直接使用。
  ///</summary>
  [DNTypeName('Microsoft.JScript.Vsa.JSVsaException')]
  DNJSVsaException = interface(DDN.mscorlib.DNExternalException)
  ['{064C47AC-C9DF-4FCD-9009-E9299D620018}']
  { getters & setters } 

    function get_ErrorCode: DNJSVsaError;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  用序列化数据初始化 <see cref="T:Microsoft.JScript.Vsa.JSVsaException" />
    ///  类的新实例。
    ///  此成员支持 .NET Framework 结构，不能在代码中直接使用。
    ///</summary>
    ///  <param name="info">
    ///  承载序列化对象数据的对象。
    ///</param>
    ///  <param name="context">
    ///  关于来源和目标的上下文信息
    ///</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    ///<summary>
    ///  此成员支持 .NET Framework 结构，不能在代码中直接使用。
    ///</summary>
    ///<returns>
    ///  当前异常的字符串表示形式。
    ///</returns>
    function ToString: string;
    function GetBaseException: DDN.mscorlib.DNException;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  此成员支持 .NET Framework 结构，不能在代码中直接使用。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:Microsoft.JScript.Vsa.JSVsaError" />
    ///  值，该值描述异常的原因。
    ///</returns>
    property ErrorCode: DNJSVsaError read get_ErrorCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNJSVsaException = class(TDNGenericImport<DNJSVsaExceptionClass, DNJSVsaException>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNJScriptCodeProviderClass = interface(DNObjectClass)
  ['{5216C806-BEFF-5B2B-884A-9CEA3065964C}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.JScriptCodeProvider" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNJScriptCodeProvider;

  end;

  ///<summary>
  ///  提供对 JScript 代码生成器和代码编译器的实例访问。
  ///</summary>
  [DNTypeName('Microsoft.JScript.JScriptCodeProvider')]
  DNJScriptCodeProvider = interface(DNObject)
  ['{1C386577-AEC5-3CE5-A00C-5B1193CF2AB0}']
  { getters & setters } 

    function get_FileExtension: string;
    function get_LanguageOptions: DDN.System.DNLanguageOptions;
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  返回 JScript 代码生成器的实例。
    ///</summary>
    ///<returns>
    ///  JScript 代码生成器的实例。
    ///</returns>
    function CreateGenerator: DDN.System.DNICodeGenerator; overload;
    ///<summary>
    ///  返回 JScript 代码编译器的实例。
    ///</summary>
    ///<returns>
    ///  JScript 代码编译器的实例。
    ///</returns>
    function CreateCompiler: DDN.System.DNICodeCompiler;
    function CreateGenerator(output: DDN.mscorlib.DNTextWriter): DDN.System.DNICodeGenerator; overload;
    function CreateGenerator(fileName: string): DDN.System.DNICodeGenerator; overload;
    function CreateParser: DDN.System.DNICodeParser;
    function GetConverter(&type: DDN.mscorlib.DNType): DDN.System.DNTypeConverter;
    function CompileAssemblyFromDom(options: DDN.System.DNCompilerParameters; compilationUnits: TArray<DDN.System.DNCodeCompileUnit>): DDN.System.DNCompilerResults;
    function CompileAssemblyFromFile(options: DDN.System.DNCompilerParameters; fileNames: TArray<string>): DDN.System.DNCompilerResults;
    function CompileAssemblyFromSource(options: DDN.System.DNCompilerParameters; sources: TArray<string>): DDN.System.DNCompilerResults;
    function IsValidIdentifier(value: string): Boolean;
    function CreateEscapedIdentifier(value: string): string;
    function CreateValidIdentifier(value: string): string;
    function GetTypeOutput(&type: DDN.System.DNCodeTypeReference): string;
    function Supports(generatorSupport: DDN.System.DNGeneratorSupport): Boolean;
    procedure GenerateCodeFromExpression(expression: DDN.System.DNCodeExpression; writer: DDN.mscorlib.DNTextWriter; options: DDN.System.DNCodeGeneratorOptions);
    procedure GenerateCodeFromStatement(statement: DDN.System.DNCodeStatement; writer: DDN.mscorlib.DNTextWriter; options: DDN.System.DNCodeGeneratorOptions);
    procedure GenerateCodeFromNamespace(codeNamespace: DDN.System.DNCodeNamespace; writer: DDN.mscorlib.DNTextWriter; options: DDN.System.DNCodeGeneratorOptions);
    procedure GenerateCodeFromCompileUnit(compileUnit: DDN.System.DNCodeCompileUnit; writer: DDN.mscorlib.DNTextWriter; options: DDN.System.DNCodeGeneratorOptions);
    procedure GenerateCodeFromType(codeType: DDN.System.DNCodeTypeDeclaration; writer: DDN.mscorlib.DNTextWriter; options: DDN.System.DNCodeGeneratorOptions);
    procedure GenerateCodeFromMember(member: DDN.System.DNCodeTypeMember; writer: DDN.mscorlib.DNTextWriter; options: DDN.System.DNCodeGeneratorOptions);
    function Parse(codeStream: DDN.mscorlib.DNTextReader): DDN.System.DNCodeCompileUnit;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取 JScript 代码文件的文件扩展名。
    ///</summary>
    ///<returns>
    ///  字符串文字"js"。
    ///</returns>
    property FileExtension: string read get_FileExtension;
    property LanguageOptions: DDN.System.DNLanguageOptions read get_LanguageOptions;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNJScriptCodeProvider = class(TDNGenericImport<DNJScriptCodeProviderClass, DNJScriptCodeProvider>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNCOMCharStreamClass = interface(DDN.mscorlib.DNStreamClass)
  ['{FF096A28-C769-5C34-A2AD-D4EBD02A84D6}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.COMCharStream" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="messageReceiver">
    ///  流的数据的接收者。
    ///</param>
    {class} function init(messageReceiver: DNIMessageReceiver): DNCOMCharStream;

  end;

  ///<summary>
  ///  表示一个流，其将数据发送到<see cref="T:Microsoft.JScript.IMessageReceiver" />
  ///  。
  ///  数据存储在缓冲区中，直到刷新数据或该流已关闭。
  ///</summary>
  [DNTypeName('Microsoft.JScript.COMCharStream')]
  DNCOMCharStream = interface(DDN.mscorlib.DNStream)
  ['{3D480C51-E2C1-3963-9174-5B1A5426BA7A}']
  { getters & setters } 

    function get_CanWrite: Boolean;
    function get_CanRead: Boolean;
    function get_CanSeek: Boolean;
    function get_Length: Int64;
    function get_Position: Int64;
    procedure set_Position(value: Int64);
    function get_CanTimeout: Boolean;
    function get_ReadTimeout: Int32;
    procedure set_ReadTimeout(value: Int32);
    function get_WriteTimeout: Int32;
    procedure set_WriteTimeout(value: Int32);

  { methods } 

    ///<summary>
    ///  此流将数据发送到<see cref="T:Microsoft.JScript.IMessageReceiver" />
    ///  并清除其缓冲区。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  此流将数据发送到 <see cref="T:Microsoft.JScript.IMessageReceiver" />
    ///  并清除其缓冲区。
    ///</summary>
    procedure Flush;
    ///<summary>
    ///  在所有情况下都会引发 <see cref="T:System.NotSupportedException" />
    ///  异常。
    ///</summary>
    ///  <param name="buffer">
    ///  要在其中存储从流中读取的数据的字节数组。
    ///</param>
    ///  <param name="offset">
    ///  中的从零开始的字节偏移量 <paramref name="buffer" />
    ///  从此处开始存储从流中读取的数据。
    ///</param>
    ///  <param name="count">
    ///  最大要从流中读取的字节数。
    ///</param>
    ///<returns>
    ///  在所有情况下都会引发 <see cref="T:System.NotSupportedException" />
    ///  异常。
    ///</returns>
    function Read(buffer: TArray<Byte>; offset: Int32; count: Int32): Int32;
    ///<summary>
    ///  设置当前流中的位置。
    ///  此方法不执行任何操作。
    ///  它始终返回 0。
    ///</summary>
    ///  <param name="offset">
    ///  相对于 <paramref name="origin" />
    ///  参数的字节偏移量。
    ///</param>
    ///  <param name="origin">
    ///  一个值，指示用于获取新位置的参考点。
    ///</param>
    ///<returns>
    ///  在所有情况下均为 0。
    ///</returns>
    function Seek(offset: Int64; origin: DDN.mscorlib.DNSeekOrigin): Int64;
    ///<summary>
    ///  设置流的长度。
    ///</summary>
    ///  <param name="value">
    ///  流的新长度。
    ///</param>
    procedure SetLength(value: Int64);
    ///<summary>
    ///  将指定的字节数据写入流。
    ///</summary>
    ///  <param name="buffer">
    ///  若要将复制到当前流的字节数据的数组。
    ///</param>
    ///  <param name="offset"><paramref name="buffer" />
    ///  中的从零开始的字节偏移量，从此处开始将字节复制到当前流。
    ///</param>
    ///  <param name="count">
    ///  要从复制的字节数 <paramref name="buffer" />
    ///  写入当前流。
    ///</param>
    procedure Write(buffer: TArray<Byte>; offset: Int32; count: Int32);
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    procedure Dispose;
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndRead(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<Int32>; overload;
    function BeginWrite(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    procedure EndWrite(asyncResult: DDN.mscorlib.DNIAsyncResult);
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadByte: Int32;
    procedure WriteByte(value: Byte);
    function CopyToAsync(destination: DDN.mscorlib.DNStream): DDN.mscorlib.DNTask; overload;
    function CopyToAsync(destination: DDN.mscorlib.DNStream; bufferSize: Int32): DDN.mscorlib.DNTask; overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream); overload;
    procedure CopyTo(destination: DDN.mscorlib.DNStream; bufferSize: Int32); overload;
    function FlushAsync: DDN.mscorlib.DNTask; overload;
    function FlushAsync(cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask; overload;
    function ReadAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>; overload;
    function WriteAsync(buffer: TArray<Byte>; offset: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示当前流是否支持写入。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="true" />
    ///  。
    ///</returns>
    property CanWrite: Boolean read get_CanWrite;
    ///<summary>
    ///  获取一个值，该值指示当前流是否支持读取。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="false" />
    ///  。
    ///</returns>
    property CanRead: Boolean read get_CanRead;
    ///<summary>
    ///  获取一个值，该值指示当前流是否支持查找。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="false" />
    ///  。
    ///</returns>
    property CanSeek: Boolean read get_CanSeek;
    ///<summary>
    ///  获取流的长度。
    ///</summary>
    ///<returns>
    ///  流的长度。
    ///</returns>
    property Length: Int64 read get_Length;
    ///<summary>
    ///  获取当前流中的位置。
    ///  Set 方法不执行任何操作。
    ///</summary>
    ///<returns>
    ///  流中的当前新位置。
    ///</returns>
    property Position: Int64 read get_Position write set_Position;
    property CanTimeout: Boolean read get_CanTimeout;
    property ReadTimeout: Int32 read get_ReadTimeout write set_ReadTimeout;
    property WriteTimeout: Int32 read get_WriteTimeout write set_WriteTimeout;
  end;

  TDNCOMCharStream = class(TDNGenericImport<DNCOMCharStreamClass, DNCOMCharStream>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNCOMFieldInfoClass = interface(DDN.mscorlib.DNFieldInfoClass)
  ['{CC509485-31A0-5FB2-8465-9991231D0089}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.COMFieldInfo" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNCOMFieldInfo;

  end;

  ///<summary>
  ///  使 JScript 能够与外部 COM 字段进行通信。
  ///  外部 COM 实现使用此类向 JScript 公开其对象，原因是 JScript 需要托管的 <see cref="T:System.Reflection.MemberInfo" />
  ///  以便绑定到外部对象。
  ///</summary>
  [DNTypeName('Microsoft.JScript.COMFieldInfo')]
  DNCOMFieldInfo = interface(DDN.mscorlib.DNFieldInfo)
  ['{CA0F511A-FAF2-4942-B9A8-17D5E46514E8}']
  { getters & setters } 

    function get_Attributes: DDN.mscorlib.DNFieldAttributes;
    function get_DeclaringType: DDN.mscorlib.DNType;
    function get_FieldHandle: DDN.mscorlib.DNRuntimeFieldHandle;
    function get_FieldType: DDN.mscorlib.DNType;
    function get_MemberType: DDN.mscorlib.DNMemberTypes;
    function get_Name: string;
    function get_ReflectedType: DDN.mscorlib.DNType;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsInitOnly: Boolean;
    function get_IsLiteral: Boolean;
    function get_IsNotSerialized: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsPinvokeImpl: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DDN.mscorlib.DNModule;

  { methods } 

    ///<summary>
    ///  初始化使 JScript 与该外部 COM 字段进行通信的信息。
    ///</summary>
    ///  <param name="name">
    ///  此对象表示的外部 COM 字段的名称。
    ///</param>
    ///  <param name="dispatch">
    ///  使 JScript 能够访问的外部 COM 字段的信息。
    ///</param>
    procedure Initialize(name: string; dispatch: DNCOMMemberInfo);
    ///<summary>
    ///  获取支持 JScript 与该外部 COM 字段进行通信的托管的对象。
    ///</summary>
    ///<returns>
    ///  支持 JScript 与该外部 COM 字段进行通信的托管的对象。
    ///</returns>
    function GetCOMMemberInfo: DNCOMMemberInfo;
    ///<summary>
    ///  确定指定的特性类型附加到此字段。
    ///</summary>
    ///  <param name="t">
    ///  要搜索的属性类型。
    ///</param>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承层次结构以查找这些特性。
    ///</param>
    ///<returns>
    ///  在所有情况下均为 <see langword="false" />
    ///  。
    ///</returns>
    function IsDefined(t: DDN.mscorlib.DNType; inherit: Boolean): Boolean;
    ///<summary>
    ///  获取外部 COM 字段的值，通过使用 <see cref="T:Microsoft.JScript.COMMemberInfo" />
    ///  指定给 <see cref="M:Microsoft.JScript.COMFieldInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)" />
    ///  方法。
    ///</summary>
    ///  <param name="obj">
    ///  要传递给外部 COM 字段的参数列表。
    ///  忽略此参数。
    ///</param>
    ///<returns>
    ///  外部 COM 字段的值。
    ///</returns>
    function GetValue(obj: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    ///<summary>
    ///  通过设置外部 COM 字段的值 <see cref="T:Microsoft.JScript.COMMemberInfo" />
    ///  指定给 <see cref="M:Microsoft.JScript.COMFieldInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)" />
    ///  方法。
    ///</summary>
    ///  <param name="obj">
    ///  将设置其字段值的对象。
    ///  忽略此参数。
    ///</param>
    ///  <param name="value">
    ///  外部 COM 成员的新值。
    ///</param>
    ///  <param name="invokeAttr">
    ///  用于控制绑定的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，将类型从实参类型转换为形参类型。
    ///</param>
    ///  <param name="culture">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    procedure SetValue(obj: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; culture: DDN.mscorlib.DNCultureInfo); overload;
    ///<summary>
    ///  返回一个数组，包含附加到此字段，只搜索指定类型的特性的自定义特性。
    ///</summary>
    ///  <param name="t">
    ///  要搜索的属性的类型。
    ///</param>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承层次结构以查找这些特性。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Reflection.FieldInfo" />
    ///  具有零个元素的对象。
    ///</returns>
    function GetCustomAttributes(t: DDN.mscorlib.DNType; inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    ///<summary>
    ///  返回一个数组，包含附加到此字段的自定义特性。
    ///</summary>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承层次结构以查找这些特性。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Reflection.FieldInfo" />
    ///  具有零个元素的对象。
    ///</returns>
    function GetCustomAttributes(inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetRequiredCustomModifiers: TArray<DDN.mscorlib.DNType>;
    function GetOptionalCustomModifiers: TArray<DDN.mscorlib.DNType>;
    procedure SetValueDirect(obj: DDN.mscorlib.DNTypedReference; value: DDN.mscorlib.DNObject);
    function GetValueDirect(obj: DDN.mscorlib.DNTypedReference): DDN.mscorlib.DNObject;
    function GetRawConstantValue: DDN.mscorlib.DNObject;
    procedure SetValue(obj: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject); overload;
    function GetCustomAttributesData: DDN.mscorlib.DNIList<DDN.mscorlib.DNCustomAttributeData>;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与此字段相关联的属性。
    ///</summary>
    ///<returns><see cref="F:System.Reflection.FieldAttributes.Public" />
    ///</returns>
    property Attributes: DDN.mscorlib.DNFieldAttributes read get_Attributes;
    ///<summary>
    ///  获取声明此字段的类型。
    ///</summary>
    ///<returns>
    ///  为 null，因为声明此字段的类型为外部 COM 对象。
    ///</returns>
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
    ///<summary>
    ///  引发 <see cref="F:Microsoft.JScript.JSError.InternalError" />
    ///  在所有情况下的异常。
    ///</summary>
    ///<returns>
    ///  引发 <see cref="F:Microsoft.JScript.JSError.InternalError" />
    ///  在所有情况下的异常。
    ///</returns>
    property FieldHandle: DDN.mscorlib.DNRuntimeFieldHandle read get_FieldHandle;
    ///<summary>
    ///  获取此字段的类型。
    ///</summary>
    ///<returns><see cref="T:System.Object" />
    ///  的类型。
    ///</returns>
    property FieldType: DDN.mscorlib.DNType read get_FieldType;
    ///<summary>
    ///  获取此字段的成员的类型。
    ///  标识类型的类派生自 <see cref="T:System.Reflection.MemberInfo" />
    ///  ，此类派生。
    ///</summary>
    ///<returns><see cref="F:System.Reflection.MemberTypes.Field" />
    ///  , 因为此类派生自 <see cref="T:System.Reflection.FieldInfo" />
    ///  。
    ///</returns>
    property MemberType: DDN.mscorlib.DNMemberTypes read get_MemberType;
    ///<summary>
    ///  获取此对象表示的外部 COM 字段的名称。
    ///</summary>
    ///<returns>
    ///  此对象表示的外部 COM 字段的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取用于获取通过反射此实例的类对象。
    ///</summary>
    ///<returns>
    ///  为 null，因为未通过反射获取此实例。
    ///</returns>
    property ReflectedType: DDN.mscorlib.DNType read get_ReflectedType;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsInitOnly: Boolean read get_IsInitOnly;
    property IsLiteral: Boolean read get_IsLiteral;
    property IsNotSerialized: Boolean read get_IsNotSerialized;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsPinvokeImpl: Boolean read get_IsPinvokeImpl;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DDN.mscorlib.DNModule read get_Module;
  end;

  TDNCOMFieldInfo = class(TDNGenericImport<DNCOMFieldInfoClass, DNCOMFieldInfo>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNJSFieldClass = interface(DDN.mscorlib.DNFieldInfoClass)
  ['{D68B0ED9-CED3-5387-94BC-0CF27F24613C}']
  end;

  ///<summary>
  ///  在 JScript 中支持的所有字段。
  ///  这是 jscript 定义的所有字段的基类。
  ///  此类属于名称绑定类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.JSField')]
  DNJSField = interface(DDN.mscorlib.DNFieldInfo)
  ['{41329228-40B0-3518-B508-488D81CF4DAB}']
  { getters & setters } 

    function get_Attributes: DDN.mscorlib.DNFieldAttributes;
    function get_DeclaringType: DDN.mscorlib.DNType;
    function get_FieldHandle: DDN.mscorlib.DNRuntimeFieldHandle;
    function get_FieldType: DDN.mscorlib.DNType;
    function get_MemberType: DDN.mscorlib.DNMemberTypes;
    function get_Name: string;
    function get_ReflectedType: DDN.mscorlib.DNType;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsInitOnly: Boolean;
    function get_IsLiteral: Boolean;
    function get_IsNotSerialized: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsPinvokeImpl: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DDN.mscorlib.DNModule;

  { methods } 

    ///<summary>
    ///  确定指定的特性类型附加到此字段。
    ///</summary>
    ///  <param name="type">
    ///  要搜索的属性类型。
    ///</param>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承层次结构以查找这些特性。
    ///</param>
    ///<returns>
    ///  在所有情况下均为 <see langword="false" />
    ///  。
    ///</returns>
    function IsDefined(&type: DDN.mscorlib.DNType; inherit: Boolean): Boolean;
    ///<summary>
    ///  返回一个数组，包含附加到此字段，只搜索指定类型的特性的自定义特性。
    ///</summary>
    ///  <param name="t">
    ///  要搜索的属性的类型。
    ///</param>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承层次结构以查找这些特性。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Reflection.FieldInfo" />
    ///  具有零个元素的对象。
    ///</returns>
    function GetCustomAttributes(t: DDN.mscorlib.DNType; inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    ///<summary>
    ///  返回一个数组，包含附加到此字段的自定义特性。
    ///</summary>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承层次结构以查找这些特性。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Reflection.FieldInfo" />
    ///  具有零个元素的对象。
    ///</returns>
    function GetCustomAttributes(inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetRequiredCustomModifiers: TArray<DDN.mscorlib.DNType>;
    function GetOptionalCustomModifiers: TArray<DDN.mscorlib.DNType>;
    procedure SetValueDirect(obj: DDN.mscorlib.DNTypedReference; value: DDN.mscorlib.DNObject);
    function GetValueDirect(obj: DDN.mscorlib.DNTypedReference): DDN.mscorlib.DNObject;
    function GetRawConstantValue: DDN.mscorlib.DNObject;
    procedure SetValue(obj: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject); overload;
    function GetValue(obj: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    procedure SetValue(obj: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; culture: DDN.mscorlib.DNCultureInfo); overload;
    function GetCustomAttributesData: DDN.mscorlib.DNIList<DDN.mscorlib.DNCustomAttributeData>;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与此字段相关联的属性。
    ///</summary>
    ///<returns><see cref="F:System.Reflection.FieldAttributes.PrivateScope" />
    ///</returns>
    property Attributes: DDN.mscorlib.DNFieldAttributes read get_Attributes;
    ///<summary>
    ///  获取声明此字段的类型。
    ///</summary>
    ///<returns>
    ///  在所有情况下，则为 null。
    ///</returns>
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
    ///<summary>
    ///  获取此字段的内部元数据表示的句柄。
    ///</summary>
    ///<returns>
    ///  此字段的内部元数据表示句柄。
    ///</returns>
    property FieldHandle: DDN.mscorlib.DNRuntimeFieldHandle read get_FieldHandle;
    ///<summary>
    ///  获取此字段的类型。
    ///</summary>
    ///<returns><see cref="T:System.Object" />
    ///  的类型。
    ///</returns>
    property FieldType: DDN.mscorlib.DNType read get_FieldType;
    ///<summary>
    ///  获取此字段的成员的类型。
    ///  标识类型的类派生自 <see cref="T:System.Reflection.MemberInfo" />
    ///  ，此类派生。
    ///</summary>
    ///<returns><see cref="F:System.Reflection.MemberTypes.Field" />
    ///  , 因为此类派生自 <see cref="T:System.Reflection.FieldInfo" />
    ///  。
    ///</returns>
    property MemberType: DDN.mscorlib.DNMemberTypes read get_MemberType;
    ///<summary>
    ///  获取此字段的名称。
    ///</summary>
    ///<returns>
    ///  此字段的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取用于获取通过反射此实例的类对象。
    ///</summary>
    ///<returns>
    ///  声明此方法的类型。
    ///</returns>
    property ReflectedType: DDN.mscorlib.DNType read get_ReflectedType;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsInitOnly: Boolean read get_IsInitOnly;
    property IsLiteral: Boolean read get_IsLiteral;
    property IsNotSerialized: Boolean read get_IsNotSerialized;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsPinvokeImpl: Boolean read get_IsPinvokeImpl;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DDN.mscorlib.DNModule read get_Module;
  end;

  TDNJSField = class(TDNGenericImport<DNJSFieldClass, DNJSField>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNJSVariableFieldClass = interface(DNJSFieldClass)
  ['{21529387-5F15-58FD-A346-E01D3F32DDC3}']
  end;

  ///<summary>
  ///  在 JScript 中支持变量字段。
  ///  这是参数、 局部变量、 全局变量和类成员的基类。
  ///</summary>
  [DNTypeName('Microsoft.JScript.JSVariableField')]
  DNJSVariableField = interface(DNJSField)
  ['{08405F7D-AC70-33BA-B067-76CA1F075989}']
  { getters & setters } 

    function get_Attributes: DDN.mscorlib.DNFieldAttributes;
    function get_DeclaringType: DDN.mscorlib.DNType;
    function get_FieldType: DDN.mscorlib.DNType;
    function get_Name: string;
    function get_FieldHandle: DDN.mscorlib.DNRuntimeFieldHandle;
    function get_MemberType: DDN.mscorlib.DNMemberTypes;
    function get_ReflectedType: DDN.mscorlib.DNType;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsInitOnly: Boolean;
    function get_IsLiteral: Boolean;
    function get_IsNotSerialized: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsPinvokeImpl: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DDN.mscorlib.DNModule;

  { methods } 

    ///<summary>
    ///  返回一个数组，包含附加到此字段的自定义特性。
    ///</summary>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承层次结构以查找这些特性。
    ///</param>
    ///<returns>
    ///  一个数组，包含自定义特性附加到此字段中，或者，如果没有任何一个数组，其中包含零个元素。
    ///</returns>
    function GetCustomAttributes(inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    ///<summary>
    ///  确定指定的特性类型附加到此字段。
    ///</summary>
    ///  <param name="type">
    ///  要搜索的属性类型。
    ///</param>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承层次结构以查找这些特性。
    ///</param>
    ///<returns>
    ///  在所有情况下均为 <see langword="false" />
    ///  。
    ///</returns>
    function IsDefined(&type: DDN.mscorlib.DNType; inherit: Boolean): Boolean;
    ///<summary>
    ///  返回一个数组，包含附加到此字段，只搜索指定类型的特性的自定义特性。
    ///</summary>
    ///  <param name="t">
    ///  要搜索的属性的类型。
    ///</param>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承层次结构以查找这些特性。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Reflection.FieldInfo" />
    ///  具有零个元素的对象。
    ///</returns>
    function GetCustomAttributes(t: DDN.mscorlib.DNType; inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetRequiredCustomModifiers: TArray<DDN.mscorlib.DNType>;
    function GetOptionalCustomModifiers: TArray<DDN.mscorlib.DNType>;
    procedure SetValueDirect(obj: DDN.mscorlib.DNTypedReference; value: DDN.mscorlib.DNObject);
    function GetValueDirect(obj: DDN.mscorlib.DNTypedReference): DDN.mscorlib.DNObject;
    function GetRawConstantValue: DDN.mscorlib.DNObject;
    procedure SetValue(obj: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject); overload;
    function GetValue(obj: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    procedure SetValue(obj: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; culture: DDN.mscorlib.DNCultureInfo); overload;
    function GetCustomAttributesData: DDN.mscorlib.DNIList<DDN.mscorlib.DNCustomAttributeData>;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与此字段相关联的属性。
    ///</summary>
    ///<returns>
    ///  枚举值的按位组合。
    ///</returns>
    property Attributes: DDN.mscorlib.DNFieldAttributes read get_Attributes;
    ///<summary>
    ///  获取声明此字段的类型。
    ///</summary>
    ///<returns><see langword="Type" />
    ///  对象为声明此成员的类。
    ///</returns>
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
    ///<summary>
    ///  获取此字段的类型。
    ///</summary>
    ///<returns>
    ///  此字段的类型。
    ///</returns>
    property FieldType: DDN.mscorlib.DNType read get_FieldType;
    ///<summary>
    ///  获取此字段的名称。
    ///</summary>
    ///<returns>
    ///  此字段的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取此字段的内部元数据表示的句柄。
    ///</summary>
    ///<returns>
    ///  此字段的内部元数据表示句柄。
    ///</returns>
    property FieldHandle: DDN.mscorlib.DNRuntimeFieldHandle read get_FieldHandle;
    ///<summary>
    ///  获取此字段的成员的类型。
    ///  标识类型的类派生自 <see cref="T:System.Reflection.MemberInfo" />
    ///  ，此类派生。
    ///</summary>
    ///<returns><see cref="F:System.Reflection.MemberTypes.Field" />
    ///  , 因为此类派生自 <see cref="T:System.Reflection.FieldInfo" />
    ///  。
    ///</returns>
    property MemberType: DDN.mscorlib.DNMemberTypes read get_MemberType;
    ///<summary>
    ///  获取用于获取通过反射此实例的类对象。
    ///</summary>
    ///<returns>
    ///  声明此方法的类型。
    ///</returns>
    property ReflectedType: DDN.mscorlib.DNType read get_ReflectedType;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsInitOnly: Boolean read get_IsInitOnly;
    property IsLiteral: Boolean read get_IsLiteral;
    property IsNotSerialized: Boolean read get_IsNotSerialized;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsPinvokeImpl: Boolean read get_IsPinvokeImpl;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DDN.mscorlib.DNModule read get_Module;
  end;

  TDNJSVariableField = class(TDNGenericImport<DNJSVariableFieldClass, DNJSVariableField>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNJSLocalFieldClass = interface(DNJSVariableFieldClass)
  ['{09156F5C-E78D-5F63-84F3-BD0835DC8C73}']
  { constructors } 

    ///<summary>
    ///  初始化的新实例<see cref="T:Microsoft.JScript.JSLocalField" />
    ///  类，使用指定的名称、 句柄，并且槽数。
    ///</summary>
    ///  <param name="name">
    ///  此字段的名称。
    ///</param>
    ///  <param name="handle">
    ///  此字段的内部元数据表示句柄。
    ///</param>
    ///  <param name="slotNumber">
    ///  变量的槽数。
    ///</param>
    {class} function init(name: string; handle: DDN.mscorlib.DNRuntimeTypeHandle; slotNumber: Int32): DNJSLocalField;

  end;

  ///<summary>
  ///  表示的本地变量。
  ///</summary>
  [DNTypeName('Microsoft.JScript.JSLocalField')]
  DNJSLocalField = interface(DNJSVariableField)
  ['{77E7E447-F52E-3820-99FE-6F7578EDD9B0}']
  { getters & setters } 

    function get_FieldType: DDN.mscorlib.DNType;
    function get_Attributes: DDN.mscorlib.DNFieldAttributes;
    function get_DeclaringType: DDN.mscorlib.DNType;
    function get_Name: string;
    function get_FieldHandle: DDN.mscorlib.DNRuntimeFieldHandle;
    function get_MemberType: DDN.mscorlib.DNMemberTypes;
    function get_ReflectedType: DDN.mscorlib.DNType;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsInitOnly: Boolean;
    function get_IsLiteral: Boolean;
    function get_IsNotSerialized: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsPinvokeImpl: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DDN.mscorlib.DNModule;

  { methods } 

    ///<summary>
    ///  获取字段的值。
    ///</summary>
    ///  <param name="obj">
    ///  将返回其字段值的对象。
    ///</param>
    ///<returns>
    ///  字段的值。
    ///</returns>
    function GetValue(obj: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    ///<summary>
    ///  设置的值字段中，使用指定的值、 区域性和绑定信息。
    ///</summary>
    ///  <param name="obj">
    ///  将设置其字段值的对象。
    ///</param>
    ///  <param name="value">
    ///  要分配给字段的值。
    ///</param>
    ///  <param name="invokeAttr">
    ///  用于控制绑定的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  启用绑定、 强制参数类型和成员通过反射调用的属性集。
    ///</param>
    ///  <param name="locale">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    procedure SetValue(obj: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; locale: DDN.mscorlib.DNCultureInfo); overload;
    ///<summary>
    ///  返回一个数组，包含附加到此字段的自定义特性。
    ///</summary>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承层次结构以查找这些特性。
    ///</param>
    ///<returns>
    ///  一个数组，包含自定义特性附加到此字段中，或者，如果没有任何一个数组，其中包含零个元素。
    ///</returns>
    function GetCustomAttributes(inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function IsDefined(&type: DDN.mscorlib.DNType; inherit: Boolean): Boolean;
    function GetCustomAttributes(t: DDN.mscorlib.DNType; inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetRequiredCustomModifiers: TArray<DDN.mscorlib.DNType>;
    function GetOptionalCustomModifiers: TArray<DDN.mscorlib.DNType>;
    procedure SetValueDirect(obj: DDN.mscorlib.DNTypedReference; value: DDN.mscorlib.DNObject);
    function GetValueDirect(obj: DDN.mscorlib.DNTypedReference): DDN.mscorlib.DNObject;
    function GetRawConstantValue: DDN.mscorlib.DNObject;
    procedure SetValue(obj: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject); overload;
    function GetCustomAttributesData: DDN.mscorlib.DNIList<DDN.mscorlib.DNCustomAttributeData>;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取此字段的类型。
    ///</summary>
    ///<returns>
    ///  此字段的类型。
    ///</returns>
    property FieldType: DDN.mscorlib.DNType read get_FieldType;
    ///<summary>
    ///  获取与此字段相关联的属性。
    ///</summary>
    ///<returns>
    ///  枚举值的按位组合。
    ///</returns>
    property Attributes: DDN.mscorlib.DNFieldAttributes read get_Attributes;
    ///<summary>
    ///  获取声明此字段的类型。
    ///</summary>
    ///<returns><see langword="Type" />
    ///  对象为声明此成员的类。
    ///</returns>
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
    ///<summary>
    ///  获取此字段的名称。
    ///</summary>
    ///<returns>
    ///  此字段的名称。
    ///</returns>
    property Name: string read get_Name;
    property FieldHandle: DDN.mscorlib.DNRuntimeFieldHandle read get_FieldHandle;
    property MemberType: DDN.mscorlib.DNMemberTypes read get_MemberType;
    property ReflectedType: DDN.mscorlib.DNType read get_ReflectedType;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsInitOnly: Boolean read get_IsInitOnly;
    property IsLiteral: Boolean read get_IsLiteral;
    property IsNotSerialized: Boolean read get_IsNotSerialized;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsPinvokeImpl: Boolean read get_IsPinvokeImpl;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DDN.mscorlib.DNModule read get_Module;
  end;

  TDNJSLocalField = class(TDNGenericImport<DNJSLocalFieldClass, DNJSLocalField>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNJSFieldInfoClass = interface(DDN.mscorlib.DNFieldInfoClass)
  ['{0FC10D8A-BEFF-58EF-B9CA-E9EFBCCD4893}']
  end;

  ///<summary>
  ///  包装 <see cref="T:System.Reflection.FieldInfo" />
  ///  对象。
  ///</summary>
  [DNTypeName('Microsoft.JScript.JSFieldInfo')]
  DNJSFieldInfo = interface(DDN.mscorlib.DNFieldInfo)
  ['{00FDCB17-501B-3359-A319-1F8AE3F35764}']
  { getters & setters } 

    function get_Attributes: DDN.mscorlib.DNFieldAttributes;
    function get_DeclaringType: DDN.mscorlib.DNType;
    function get_FieldHandle: DDN.mscorlib.DNRuntimeFieldHandle;
    function get_FieldType: DDN.mscorlib.DNType;
    function get_MemberType: DDN.mscorlib.DNMemberTypes;
    function get_Name: string;
    function get_ReflectedType: DDN.mscorlib.DNType;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsInitOnly: Boolean;
    function get_IsLiteral: Boolean;
    function get_IsNotSerialized: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsPinvokeImpl: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DDN.mscorlib.DNModule;

  { methods } 

    ///<summary>
    ///  获取字段的值。
    ///</summary>
    ///  <param name="obj">
    ///  将返回其字段值的对象。
    ///</param>
    ///<returns>
    ///  字段的值。
    ///</returns>
    function GetValue(obj: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    ///<summary>
    ///  确定指定的特性类型附加到此字段。
    ///</summary>
    ///  <param name="type">
    ///  要搜索的属性类型。
    ///</param>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承层次结构以查找这些特性。
    ///</param>
    ///<returns>
    ///  在所有情况下均为 <see langword="false" />
    ///  。
    ///</returns>
    function IsDefined(&type: DDN.mscorlib.DNType; inherit: Boolean): Boolean;
    ///<summary>
    ///  设置字段中，使用指定的值的值。
    ///</summary>
    ///  <param name="obj">
    ///  将设置其字段值的对象。
    ///</param>
    ///  <param name="value">
    ///  要分配给字段的值。
    ///</param>
    procedure SetValue(obj: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  设置的值字段中，使用指定的值、 区域性和绑定信息。
    ///</summary>
    ///  <param name="obj">
    ///  将设置其字段值的对象。
    ///</param>
    ///  <param name="value">
    ///  要分配给字段的值。
    ///</param>
    ///  <param name="invokeAttr">
    ///  用于控制绑定的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  启用绑定、 强制参数类型和成员通过反射调用的属性集。
    ///</param>
    ///  <param name="culture">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    procedure SetValue(obj: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; culture: DDN.mscorlib.DNCultureInfo); overload;
    ///<summary>
    ///  返回一个数组，包含附加到此字段，只搜索指定类型的特性的自定义特性。
    ///</summary>
    ///  <param name="t">
    ///  要搜索的属性的类型。
    ///</param>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承层次结构以查找这些特性。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Reflection.FieldInfo" />
    ///  具有零个元素的对象。
    ///</returns>
    function GetCustomAttributes(t: DDN.mscorlib.DNType; inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    ///<summary>
    ///  返回一个数组，包含附加到此字段的自定义特性。
    ///</summary>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承层次结构以查找这些特性。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Reflection.FieldInfo" />
    ///  具有零个元素的对象。
    ///</returns>
    function GetCustomAttributes(inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetRequiredCustomModifiers: TArray<DDN.mscorlib.DNType>;
    function GetOptionalCustomModifiers: TArray<DDN.mscorlib.DNType>;
    procedure SetValueDirect(obj: DDN.mscorlib.DNTypedReference; value: DDN.mscorlib.DNObject);
    function GetValueDirect(obj: DDN.mscorlib.DNTypedReference): DDN.mscorlib.DNObject;
    function GetRawConstantValue: DDN.mscorlib.DNObject;
    function GetCustomAttributesData: DDN.mscorlib.DNIList<DDN.mscorlib.DNCustomAttributeData>;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与此字段相关联的属性。
    ///</summary>
    ///<returns>
    ///  枚举值的按位组合。
    ///</returns>
    property Attributes: DDN.mscorlib.DNFieldAttributes read get_Attributes;
    ///<summary>
    ///  获取声明此字段的类型。
    ///</summary>
    ///<returns><see langword="Type" />
    ///  对象为声明此成员的类。
    ///</returns>
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
    ///<summary>
    ///  获取此字段的内部元数据表示的句柄。
    ///</summary>
    ///<returns>
    ///  此字段的内部元数据表示句柄。
    ///</returns>
    property FieldHandle: DDN.mscorlib.DNRuntimeFieldHandle read get_FieldHandle;
    ///<summary>
    ///  获取此字段的类型。
    ///</summary>
    ///<returns>
    ///  此字段的类型。
    ///</returns>
    property FieldType: DDN.mscorlib.DNType read get_FieldType;
    ///<summary>
    ///  获取此字段的成员的类型。
    ///  标识类型的类派生自 <see cref="T:System.Reflection.MemberInfo" />
    ///  ，此类派生。
    ///</summary>
    ///<returns><see cref="F:System.Reflection.MemberTypes.Field" />
    ///  , 因为此类派生自 <see cref="T:System.Reflection.FieldInfo" />
    ///  。
    ///</returns>
    property MemberType: DDN.mscorlib.DNMemberTypes read get_MemberType;
    ///<summary>
    ///  获取此字段的名称。
    ///</summary>
    ///<returns>
    ///  此字段的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取用于获取通过反射此实例的类对象。
    ///</summary>
    ///<returns><see langword="Type" />
    ///  用于获取此方法的对象。
    ///</returns>
    property ReflectedType: DDN.mscorlib.DNType read get_ReflectedType;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsInitOnly: Boolean read get_IsInitOnly;
    property IsLiteral: Boolean read get_IsLiteral;
    property IsNotSerialized: Boolean read get_IsNotSerialized;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsPinvokeImpl: Boolean read get_IsPinvokeImpl;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DDN.mscorlib.DNModule read get_Module;
  end;

  TDNJSFieldInfo = class(TDNGenericImport<DNJSFieldInfoClass, DNJSFieldInfo>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNJSConstructorClass = interface(DDN.mscorlib.DNConstructorInfoClass)
  ['{0A9DB67B-04DB-57C0-BD96-A8ECAF59BC6C}']
  end;

  ///<summary>
  ///  包装 <see cref="T:Microsoft.JScript.FunctionObject" />
  ///  。
  ///</summary>
  [DNTypeName('Microsoft.JScript.JSConstructor')]
  DNJSConstructor = interface(DDN.mscorlib.DNConstructorInfo)
  ['{3791D035-D8F6-3EBC-8D0A-FFE36C3E8803}']
  { getters & setters } 

    function get_Attributes: DDN.mscorlib.DNMethodAttributes;
    function get_Name: string;
    function get_DeclaringType: DDN.mscorlib.DNType;
    function get_MemberType: DDN.mscorlib.DNMemberTypes;
    function get_MethodHandle: DDN.mscorlib.DNRuntimeMethodHandle;
    function get_ReflectedType: DDN.mscorlib.DNType;
    function get_MethodImplementationFlags: DDN.mscorlib.DNMethodImplAttributes;
    function get_CallingConvention: DDN.mscorlib.DNCallingConventions;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsFinal: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsConstructor: Boolean;
    function get_CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DDN.mscorlib.DNModule;

  { methods } 

    ///<summary>
    ///  返回有关此方法的实现的信息。
    ///</summary>
    ///<returns><see cref="F:System.Reflection.MethodImplAttributes.Managed" />
    ///  和 <see cref="F:System.Reflection.MethodImplAttributes.IL" />
    ///  。
    ///</returns>
    function GetMethodImplementationFlags: DDN.mscorlib.DNMethodImplAttributes;
    ///<summary>
    ///  获取此构造函数的参数。
    ///</summary>
    ///<returns>
    ///  一个数组，包含与此构造函数的签名匹配的信息。
    ///</returns>
    function GetParameters: TArray<DDN.mscorlib.DNParameterInfo>;
    ///<summary>
    ///  调用构造函数中，使用指定的区域性和绑定信息。
    ///</summary>
    ///  <param name="options">
    ///  用于控制绑定的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，将类型从实参类型转换为形参类型。
    ///</param>
    ///  <param name="parameters">
    ///  要传递给构造函数的参数列表。
    ///</param>
    ///  <param name="culture">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    ///<returns>
    ///  与构造函数关联的类的实例。
    ///</returns>
    function Invoke(options: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; parameters: TArray<DDN.mscorlib.DNObject>; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  调用构造函数，对指定的对象，使用指定的区域性和绑定信息。
    ///</summary>
    ///  <param name="obj">
    ///  要在调用构造函数的对象。
    ///</param>
    ///  <param name="options">
    ///  用于控制绑定的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，将类型从实参类型转换为形参类型。
    ///</param>
    ///  <param name="parameters">
    ///  要传递给构造函数的参数列表。
    ///</param>
    ///  <param name="culture">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    ///<returns>
    ///  与构造函数关联的类的实例。
    ///</returns>
    function Invoke(obj: DDN.mscorlib.DNObject; options: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; parameters: TArray<DDN.mscorlib.DNObject>; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  确定指定的属性类型是否已附加到此构造函数。
    ///</summary>
    ///  <param name="type">
    ///  要搜索的属性类型。
    ///</param>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承层次结构以查找这些特性。
    ///</param>
    ///<returns>
    ///  在所有情况下均为 <see langword="false" />
    ///  。
    ///</returns>
    function IsDefined(&type: DDN.mscorlib.DNType; inherit: Boolean): Boolean;
    ///<summary>
    ///  返回一个数组，包含附加到此构造函数中，只搜索指定类型的特性的自定义特性。
    ///</summary>
    ///  <param name="t">
    ///  要搜索的属性的类型。
    ///</param>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承层次结构以查找这些特性。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Object" />
    ///  具有零个元素的对象。
    ///</returns>
    function GetCustomAttributes(t: DDN.mscorlib.DNType; inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    ///<summary>
    ///  返回一个数组，包含附加到此构造函数的自定义特性。
    ///</summary>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承层次结构以查找这些特性。
    ///</param>
    ///<returns>
    ///  包含附加到此方法的自定义特性的数组; 如果没有任何一个数组，其中包含零个元素。
    ///</returns>
    function GetCustomAttributes(inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function Invoke(parameters: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetGenericArguments: TArray<DDN.mscorlib.DNType>;
    function Invoke(obj: DDN.mscorlib.DNObject; parameters: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function GetMethodBody: DDN.mscorlib.DNMethodBody;
    function GetCustomAttributesData: DDN.mscorlib.DNIList<DDN.mscorlib.DNCustomAttributeData>;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与此构造函数关联的属性。
    ///</summary>
    ///<returns>
    ///  枚举值的按位组合。
    ///</returns>
    property Attributes: DDN.mscorlib.DNMethodAttributes read get_Attributes;
    ///<summary>
    ///  获取此构造函数的名称。
    ///</summary>
    ///<returns>
    ///  此构造函数的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取声明此构造函数的类型。
    ///</summary>
    ///<returns><see langword="Type" />
    ///  对象为声明此成员的类。
    ///</returns>
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
    ///<summary>
    ///  获取此方法的成员的类型。
    ///  标识类型的类派生自 <see cref="T:System.Reflection.MemberInfo" />
    ///  ，此类派生。
    ///</summary>
    ///<returns><see cref="F:System.Reflection.MemberTypes.Constructor" />
    ///  , 因为此类派生自 <see cref="T:System.Reflection.ConstructorInfo" />
    ///  。
    ///</returns>
    property MemberType: DDN.mscorlib.DNMemberTypes read get_MemberType;
    ///<summary>
    ///  获取此构造函数的内部元数据表示的句柄。
    ///</summary>
    ///<returns>
    ///  此构造函数的内部元数据表示句柄。
    ///</returns>
    property MethodHandle: DDN.mscorlib.DNRuntimeMethodHandle read get_MethodHandle;
    ///<summary>
    ///  获取用于获取通过反射此实例的类对象。
    ///</summary>
    ///<returns><see langword="Type" />
    ///  对象为声明此成员的类。
    ///</returns>
    property ReflectedType: DDN.mscorlib.DNType read get_ReflectedType;
    property MethodImplementationFlags: DDN.mscorlib.DNMethodImplAttributes read get_MethodImplementationFlags;
    property CallingConvention: DDN.mscorlib.DNCallingConventions read get_CallingConvention;
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsFinal: Boolean read get_IsFinal;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsConstructor: Boolean read get_IsConstructor;
    property CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DDN.mscorlib.DNModule read get_Module;
  end;

  TDNJSConstructor = class(TDNGenericImport<DNJSConstructorClass, DNJSConstructor>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNJSMethodClass = interface(DDN.mscorlib.DNMethodInfoClass)
  ['{1403F4BB-95DF-5B4D-A1FD-E40B1856C66C}']
  end;

  ///<summary>
  ///  表示 JScript 方法。
  ///  此类属于名称绑定类别。
  ///</summary>
  [DNTypeName('Microsoft.JScript.JSMethod')]
  DNJSMethod = interface(DDN.mscorlib.DNMethodInfo)
  ['{561AC104-8869-4368-902F-4E0D7DDEDDDD}']
  { getters & setters } 

    function get_MemberType: DDN.mscorlib.DNMemberTypes;
    function get_MethodHandle: DDN.mscorlib.DNRuntimeMethodHandle;
    function get_ReflectedType: DDN.mscorlib.DNType;
    function get_ReturnTypeCustomAttributes: DDN.mscorlib.DNICustomAttributeProvider;
    function get_ReturnType: DDN.mscorlib.DNType;
    function get_ReturnParameter: DDN.mscorlib.DNParameterInfo;
    function get_MethodImplementationFlags: DDN.mscorlib.DNMethodImplAttributes;
    function get_Attributes: DDN.mscorlib.DNMethodAttributes;
    function get_CallingConvention: DDN.mscorlib.DNCallingConventions;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsFinal: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsConstructor: Boolean;
    function get_Name: string;
    function get_DeclaringType: DDN.mscorlib.DNType;
    function get_CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DDN.mscorlib.DNModule;

  { methods } 

    ///<summary>
    ///  返回 <see cref="T:System.Reflection.MethodInfo" />
    ///  首先声明此方法的直接或间接基类上的方法的对象。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="this" />
    ///  。
    ///</returns>
    function GetBaseDefinition: DDN.mscorlib.DNMethodInfo;
    ///<summary>
    ///  返回有关此方法的实现的信息。
    ///</summary>
    ///<returns><see cref="F:System.Reflection.MethodImplAttributes.Managed" />
    ///  和 <see cref="F:System.Reflection.MethodImplAttributes.IL" />
    ///  。
    ///</returns>
    function GetMethodImplementationFlags: DDN.mscorlib.DNMethodImplAttributes;
    ///<summary>
    ///  调用的方法，使用指定的信息。
    ///</summary>
    ///  <param name="obj">
    ///  要调用的方法的对象。
    ///</param>
    ///  <param name="options">
    ///  用于控制绑定的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，将类型从实参类型转换为形参类型。
    ///</param>
    ///  <param name="parameters">
    ///  要传递给方法的参数列表。
    ///</param>
    ///  <param name="culture">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    ///<returns>
    ///  对方法的调用返回值。
    ///</returns>
    function Invoke(obj: DDN.mscorlib.DNObject; options: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; parameters: TArray<DDN.mscorlib.DNObject>; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  确定指定的特性类型附加到此方法。
    ///</summary>
    ///  <param name="type">
    ///  要搜索的属性类型。
    ///</param>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承层次结构以查找这些特性。
    ///</param>
    ///<returns>
    ///  在所有情况下均为 <see langword="false" />
    ///  。
    ///</returns>
    function IsDefined(&type: DDN.mscorlib.DNType; inherit: Boolean): Boolean;
    ///<summary>
    ///  返回一个数组，包含附加到此方法，只搜索指定类型的特性的自定义特性。
    ///</summary>
    ///  <param name="t">
    ///  要搜索的属性的类型。
    ///</param>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承层次结构以查找这些特性。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Object" />
    ///  具有零个元素的对象。
    ///</returns>
    function GetCustomAttributes(t: DDN.mscorlib.DNType; inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    ///<summary>
    ///  返回一个数组，包含附加到此方法的自定义特性。
    ///</summary>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承层次结构以查找这些特性。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Object" />
    ///  具有零个元素的对象。
    ///</returns>
    function GetCustomAttributes(inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetGenericArguments: TArray<DDN.mscorlib.DNType>;
    function GetGenericMethodDefinition: DDN.mscorlib.DNMethodInfo;
    function MakeGenericMethod(typeArguments: TArray<DDN.mscorlib.DNType>): DDN.mscorlib.DNMethodInfo;
    function CreateDelegate(delegateType: DDN.mscorlib.DNType): DDN.mscorlib.DNDelegate; overload;
    function CreateDelegate(delegateType: DDN.mscorlib.DNType; target: DDN.mscorlib.DNObject): DDN.mscorlib.DNDelegate; overload;
    function Invoke(obj: DDN.mscorlib.DNObject; parameters: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function GetMethodBody: DDN.mscorlib.DNMethodBody;
    function GetParameters: TArray<DDN.mscorlib.DNParameterInfo>;
    function GetCustomAttributesData: DDN.mscorlib.DNIList<DDN.mscorlib.DNCustomAttributeData>;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取此方法的成员的类型。
    ///  标识类型的类派生自 <see cref="T:System.Reflection.MemberInfo" />
    ///  ，此类派生。
    ///</summary>
    ///<returns><see cref="F:System.Reflection.MemberTypes.Method" />
    ///  , 因为此类派生自 <see cref="T:System.Reflection.MethodInfo" />
    ///  。
    ///</returns>
    property MemberType: DDN.mscorlib.DNMemberTypes read get_MemberType;
    ///<summary>
    ///  获取此方法的内部元数据表示的句柄。
    ///</summary>
    ///<returns>
    ///  此方法的内部元数据表示句柄。
    ///</returns>
    property MethodHandle: DDN.mscorlib.DNRuntimeMethodHandle read get_MethodHandle;
    ///<summary>
    ///  获取用于获取通过反射此实例的类对象。
    ///</summary>
    ///<returns>
    ///  声明此方法的类型。
    ///</returns>
    property ReflectedType: DDN.mscorlib.DNType read get_ReflectedType;
    ///<summary>
    ///  获取此方法的返回值的类型的自定义特性。
    ///</summary>
    ///<returns>
    ///  在所有情况下，则为 null。
    ///</returns>
    property ReturnTypeCustomAttributes: DDN.mscorlib.DNICustomAttributeProvider read get_ReturnTypeCustomAttributes;
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    property ReturnParameter: DDN.mscorlib.DNParameterInfo read get_ReturnParameter;
    property MethodImplementationFlags: DDN.mscorlib.DNMethodImplAttributes read get_MethodImplementationFlags;
    property Attributes: DDN.mscorlib.DNMethodAttributes read get_Attributes;
    property CallingConvention: DDN.mscorlib.DNCallingConventions read get_CallingConvention;
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsFinal: Boolean read get_IsFinal;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsConstructor: Boolean read get_IsConstructor;
    property Name: string read get_Name;
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
    property CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DDN.mscorlib.DNModule read get_Module;
  end;

  TDNJSMethod = class(TDNGenericImport<DNJSMethodClass, DNJSMethod>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNCOMMethodInfoClass = interface(DNJSMethodClass)
  ['{BCC61C25-E6A9-5FA2-8CA6-4701BC4ED548}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.COMMethodInfo" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNCOMMethodInfo;

  end;

  ///<summary>
  ///  使 JScript 能够与外部 COM 方法通信。
  ///  外部 COM 实现使用此类向 JScript 公开其对象，原因是 JScript 需要托管的 <see cref="T:System.Reflection.MemberInfo" />
  ///  以便绑定到外部对象。
  ///</summary>
  [DNTypeName('Microsoft.JScript.COMMethodInfo')]
  DNCOMMethodInfo = interface(DNJSMethod)
  ['{C7B9C313-2FD4-4384-8571-7ABC08BD17E5}']
  { getters & setters } 

    function get_Attributes: DDN.mscorlib.DNMethodAttributes;
    function get_DeclaringType: DDN.mscorlib.DNType;
    function get_MemberType: DDN.mscorlib.DNMemberTypes;
    function get_MethodHandle: DDN.mscorlib.DNRuntimeMethodHandle;
    function get_Name: string;
    function get_ReflectedType: DDN.mscorlib.DNType;
    function get_ReturnType: DDN.mscorlib.DNType;
    function get_ReturnTypeCustomAttributes: DDN.mscorlib.DNICustomAttributeProvider;
    function get_ReturnParameter: DDN.mscorlib.DNParameterInfo;
    function get_MethodImplementationFlags: DDN.mscorlib.DNMethodImplAttributes;
    function get_CallingConvention: DDN.mscorlib.DNCallingConventions;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsFinal: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsConstructor: Boolean;
    function get_CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DDN.mscorlib.DNModule;

  { methods } 

    ///<summary>
    ///  初始化使 JScript 进行通信，此外部 COM 方法的信息。
    ///</summary>
    ///  <param name="name">
    ///  此对象表示的外部 COM 方法的名称。
    ///</param>
    ///  <param name="dispatch">
    ///  使 JScript 能够访问的外部 COM 方法的信息。
    ///</param>
    procedure Initialize(name: string; dispatch: DNCOMMemberInfo);
    ///<summary>
    ///  获取支持 JScript 进行通信，此外部 COM 方法的托管的对象。
    ///</summary>
    ///<returns>
    ///  支持 JScript 进行通信，此外部 COM 方法的托管的对象。
    ///</returns>
    function GetCOMMemberInfo: DNCOMMemberInfo;
    ///<summary>
    ///  返回 <see cref="T:System.Reflection.MethodInfo" />
    ///  首先声明此方法的直接或间接基类上的方法的对象。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="this" />
    ///  。
    ///</returns>
    function GetBaseDefinition: DDN.mscorlib.DNMethodInfo;
    ///<summary>
    ///  返回有关此方法的实现的信息。
    ///</summary>
    ///<returns><see cref="F:System.Reflection.MethodImplAttributes.Managed" />
    ///  和 <see cref="F:System.Reflection.MethodImplAttributes.IL" />
    ///  。
    ///</returns>
    function GetMethodImplementationFlags: DDN.mscorlib.DNMethodImplAttributes;
    ///<summary>
    ///  获取此外部 COM 方法的参数。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Reflection.ParameterInfo" />
    ///  具有零个元素的对象。
    ///</returns>
    function GetParameters: TArray<DDN.mscorlib.DNParameterInfo>;
    ///<summary>
    ///  返回一个字符串，表示当前方法。
    ///</summary>
    ///<returns>
    ///  空字符串。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  通过使用调用外部 COM 方法 <see cref="T:Microsoft.JScript.COMMemberInfo" />
    ///  指定给 <see cref="M:Microsoft.JScript.COMMethodInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)" />
    ///  方法。
    ///</summary>
    ///  <param name="obj">
    ///  要调用的方法的对象。
    ///  忽略此参数。
    ///</param>
    ///  <param name="invokeAttr">
    ///  用于控制绑定的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，将类型从实参类型转换为形参类型。
    ///</param>
    ///  <param name="parameters">
    ///  要传递给外部 COM 成员的参数列表。
    ///</param>
    ///  <param name="culture">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    ///<returns>
    ///  对外部 COM 方法的调用返回值。
    ///</returns>
    function Invoke(obj: DDN.mscorlib.DNObject; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; parameters: TArray<DDN.mscorlib.DNObject>; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  确定指定的特性类型附加到此方法。
    ///</summary>
    ///  <param name="type">
    ///  要搜索的属性类型。
    ///</param>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承层次结构以查找这些特性。
    ///</param>
    ///<returns>
    ///  在所有情况下均为 <see langword="false" />
    ///  。
    ///</returns>
    function IsDefined(&type: DDN.mscorlib.DNType; inherit: Boolean): Boolean;
    ///<summary>
    ///  返回一个数组，包含附加到此方法，只搜索指定类型的特性的自定义特性。
    ///</summary>
    ///  <param name="t">
    ///  要搜索的属性的类型。
    ///</param>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承层次结构以查找这些特性。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Object" />
    ///  具有零个元素的对象。
    ///</returns>
    function GetCustomAttributes(t: DDN.mscorlib.DNType; inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    ///<summary>
    ///  返回一个数组，包含附加到此方法的自定义特性。
    ///</summary>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承层次结构以查找这些特性。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Object" />
    ///  具有零个元素的对象。
    ///</returns>
    function GetCustomAttributes(inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetGenericArguments: TArray<DDN.mscorlib.DNType>;
    function GetGenericMethodDefinition: DDN.mscorlib.DNMethodInfo;
    function MakeGenericMethod(typeArguments: TArray<DDN.mscorlib.DNType>): DDN.mscorlib.DNMethodInfo;
    function CreateDelegate(delegateType: DDN.mscorlib.DNType): DDN.mscorlib.DNDelegate; overload;
    function CreateDelegate(delegateType: DDN.mscorlib.DNType; target: DDN.mscorlib.DNObject): DDN.mscorlib.DNDelegate; overload;
    function Invoke(obj: DDN.mscorlib.DNObject; parameters: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function GetMethodBody: DDN.mscorlib.DNMethodBody;
    function GetCustomAttributesData: DDN.mscorlib.DNIList<DDN.mscorlib.DNCustomAttributeData>;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取与此方法关联的属性。
    ///</summary>
    ///<returns><see cref="F:System.Reflection.MethodAttributes.Public" />
    ///</returns>
    property Attributes: DDN.mscorlib.DNMethodAttributes read get_Attributes;
    ///<summary>
    ///  获取声明此方法的类型。
    ///</summary>
    ///<returns>
    ///  为 null，因为声明此方法的类型为外部 COM 对象。
    ///</returns>
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
    ///<summary>
    ///  获取此方法的成员的类型。
    ///  标识类型的类派生自 <see cref="T:System.Reflection.MemberInfo" />
    ///  ，此类派生。
    ///</summary>
    ///<returns><see cref="F:System.Reflection.MemberTypes.Method" />
    ///  , 因为此类派生自 <see cref="T:System.Reflection.MethodInfo" />
    ///  。
    ///</returns>
    property MemberType: DDN.mscorlib.DNMemberTypes read get_MemberType;
    ///<summary>
    ///  引发 <see cref="F:Microsoft.JScript.JSError.InternalError" />
    ///  在所有情况下的异常。
    ///</summary>
    ///<returns>
    ///  引发 <see cref="F:Microsoft.JScript.JSError.InternalError" />
    ///  在所有情况下的异常。
    ///</returns>
    property MethodHandle: DDN.mscorlib.DNRuntimeMethodHandle read get_MethodHandle;
    ///<summary>
    ///  获取此对象表示的外部 COM 方法的名称。
    ///</summary>
    ///<returns>
    ///  此对象表示的外部 COM 方法的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取用于获取通过反射此实例的类对象。
    ///</summary>
    ///<returns>
    ///  为 null，因为未通过反射获取此实例。
    ///</returns>
    property ReflectedType: DDN.mscorlib.DNType read get_ReflectedType;
    ///<summary>
    ///  获取此方法的返回值的类型。
    ///</summary>
    ///<returns>
    ///  在所有情况下，则为 null。
    ///</returns>
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    ///<summary>
    ///  获取此方法的返回值的类型的自定义特性。
    ///</summary>
    ///<returns>
    ///  在所有情况下，则为 null。
    ///</returns>
    property ReturnTypeCustomAttributes: DDN.mscorlib.DNICustomAttributeProvider read get_ReturnTypeCustomAttributes;
    property ReturnParameter: DDN.mscorlib.DNParameterInfo read get_ReturnParameter;
    property MethodImplementationFlags: DDN.mscorlib.DNMethodImplAttributes read get_MethodImplementationFlags;
    property CallingConvention: DDN.mscorlib.DNCallingConventions read get_CallingConvention;
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsFinal: Boolean read get_IsFinal;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsConstructor: Boolean read get_IsConstructor;
    property CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DDN.mscorlib.DNModule read get_Module;
  end;

  TDNCOMMethodInfo = class(TDNGenericImport<DNCOMMethodInfoClass, DNCOMMethodInfo>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNJSMethodInfoClass = interface(DDN.mscorlib.DNMethodInfoClass)
  ['{56BCC170-9749-5307-9139-CBB4E391A536}']
  end;

  ///<summary>
  ///  包装 <see cref="T:System.Reflection.MethodInfo" />
  ///  对象。
  ///</summary>
  [DNTypeName('Microsoft.JScript.JSMethodInfo')]
  DNJSMethodInfo = interface(DDN.mscorlib.DNMethodInfo)
  ['{B9E539D3-505B-3E93-A944-9698C5D08520}']
  { getters & setters } 

    function get_Attributes: DDN.mscorlib.DNMethodAttributes;
    function get_DeclaringType: DDN.mscorlib.DNType;
    function get_MemberType: DDN.mscorlib.DNMemberTypes;
    function get_MethodHandle: DDN.mscorlib.DNRuntimeMethodHandle;
    function get_Name: string;
    function get_ReflectedType: DDN.mscorlib.DNType;
    function get_ReturnType: DDN.mscorlib.DNType;
    function get_ReturnTypeCustomAttributes: DDN.mscorlib.DNICustomAttributeProvider;
    function get_ReturnParameter: DDN.mscorlib.DNParameterInfo;
    function get_MethodImplementationFlags: DDN.mscorlib.DNMethodImplAttributes;
    function get_CallingConvention: DDN.mscorlib.DNCallingConventions;
    function get_IsGenericMethodDefinition: Boolean;
    function get_ContainsGenericParameters: Boolean;
    function get_IsGenericMethod: Boolean;
    function get_IsSecurityCritical: Boolean;
    function get_IsSecuritySafeCritical: Boolean;
    function get_IsSecurityTransparent: Boolean;
    function get_IsPublic: Boolean;
    function get_IsPrivate: Boolean;
    function get_IsFamily: Boolean;
    function get_IsAssembly: Boolean;
    function get_IsFamilyAndAssembly: Boolean;
    function get_IsFamilyOrAssembly: Boolean;
    function get_IsStatic: Boolean;
    function get_IsFinal: Boolean;
    function get_IsVirtual: Boolean;
    function get_IsHideBySig: Boolean;
    function get_IsAbstract: Boolean;
    function get_IsSpecialName: Boolean;
    function get_IsConstructor: Boolean;
    function get_CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DDN.mscorlib.DNModule;

  { methods } 

    ///<summary>
    ///  返回 <see cref="T:System.Reflection.MethodInfo" />
    ///  对象直接或间接基类最先声明此方法的方法。
    ///</summary>
    ///<returns>
    ///  此方法在层次结构中的第一种实现。
    ///</returns>
    function GetBaseDefinition: DDN.mscorlib.DNMethodInfo;
    ///<summary>
    ///  返回一个数组，包含附加到此方法的自定义特性。
    ///</summary>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承层次结构以查找这些特性。
    ///</param>
    ///<returns>
    ///  一个数组，包含自定义特性附加到这种方法，或者，如果没有任何一个数组，其中包含零个元素。
    ///</returns>
    function GetCustomAttributes(inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    ///<summary>
    ///  返回一个数组，包含附加到此方法，只搜索指定类型的特性的自定义特性。
    ///</summary>
    ///  <param name="type">
    ///  要搜索的属性的类型。
    ///</param>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承层次结构以查找这些特性。
    ///</param>
    ///<returns>
    ///  一个数组，包含自定义特性附加到这种方法，或者，如果没有任何一个数组，其中包含零个元素。
    ///</returns>
    function GetCustomAttributes(&type: DDN.mscorlib.DNType; inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    ///<summary>
    ///  返回有关此方法的实现的信息。
    ///</summary>
    ///<returns>
    ///  枚举值的按位组合。
    ///</returns>
    function GetMethodImplementationFlags: DDN.mscorlib.DNMethodImplAttributes;
    ///<summary>
    ///  获取此方法的参数。
    ///</summary>
    ///<returns>
    ///  一个数组，包含与此方法的签名匹配的信息。
    ///</returns>
    function GetParameters: TArray<DDN.mscorlib.DNParameterInfo>;
    ///<summary>
    ///  调用的方法，使用指定的信息。
    ///</summary>
    ///  <param name="obj">
    ///  要调用的方法的对象。
    ///</param>
    ///  <param name="options">
    ///  用于控制绑定的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，将类型从实参类型转换为形参类型。
    ///</param>
    ///  <param name="parameters">
    ///  要传递给方法的参数列表。
    ///</param>
    ///  <param name="culture">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    ///<returns>
    ///  对方法的调用返回值。
    ///</returns>
    function Invoke(obj: DDN.mscorlib.DNObject; options: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; parameters: TArray<DDN.mscorlib.DNObject>; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  确定指定的特性类型附加到此方法。
    ///</summary>
    ///  <param name="type">
    ///  要搜索的属性类型。
    ///</param>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承层次结构以查找这些特性。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的属性的一个或多个实例 <paramref name="type" />
    ///  附加到此方法; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsDefined(&type: DDN.mscorlib.DNType; inherit: Boolean): Boolean;
    ///<summary>
    ///  返回一个字符串，表示该方法。
    ///</summary>
    ///<returns>
    ///  一个字符串，表示的方法。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetGenericArguments: TArray<DDN.mscorlib.DNType>;
    function GetGenericMethodDefinition: DDN.mscorlib.DNMethodInfo;
    function MakeGenericMethod(typeArguments: TArray<DDN.mscorlib.DNType>): DDN.mscorlib.DNMethodInfo;
    function CreateDelegate(delegateType: DDN.mscorlib.DNType): DDN.mscorlib.DNDelegate; overload;
    function CreateDelegate(delegateType: DDN.mscorlib.DNType; target: DDN.mscorlib.DNObject): DDN.mscorlib.DNDelegate; overload;
    function Invoke(obj: DDN.mscorlib.DNObject; parameters: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    function GetMethodBody: DDN.mscorlib.DNMethodBody;
    function GetCustomAttributesData: DDN.mscorlib.DNIList<DDN.mscorlib.DNCustomAttributeData>;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取与此方法关联的属性。
    ///</summary>
    ///<returns>
    ///  枚举值的按位组合。
    ///</returns>
    property Attributes: DDN.mscorlib.DNMethodAttributes read get_Attributes;
    ///<summary>
    ///  获取声明此方法的类型。
    ///</summary>
    ///<returns><see langword="Type" />
    ///  对象为声明此成员的类。
    ///</returns>
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
    ///<summary>
    ///  获取此方法的成员的类型。
    ///  标识类型的类派生自 <see cref="T:System.Reflection.MemberInfo" />
    ///  ，此类派生。
    ///</summary>
    ///<returns><see cref="F:System.Reflection.MemberTypes.Method" />
    ///  , 因为此类派生自 <see cref="T:System.Reflection.MethodInfo" />
    ///  。
    ///</returns>
    property MemberType: DDN.mscorlib.DNMemberTypes read get_MemberType;
    ///<summary>
    ///  获取此方法的内部元数据表示的句柄。
    ///</summary>
    ///<returns>
    ///  此方法的内部元数据表示句柄。
    ///</returns>
    property MethodHandle: DDN.mscorlib.DNRuntimeMethodHandle read get_MethodHandle;
    ///<summary>
    ///  获取此方法的名称。
    ///</summary>
    ///<returns>
    ///  此方法的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取用于获取通过反射此实例的类对象。
    ///</summary>
    ///<returns><see langword="Type" />
    ///  用于获取此方法的对象。
    ///</returns>
    property ReflectedType: DDN.mscorlib.DNType read get_ReflectedType;
    ///<summary>
    ///  获取此方法的返回值的类型。
    ///</summary>
    ///<returns>
    ///  此方法的返回值的类型。
    ///</returns>
    property ReturnType: DDN.mscorlib.DNType read get_ReturnType;
    ///<summary>
    ///  获取此方法的返回值的类型的自定义特性。
    ///</summary>
    ///<returns>
    ///  此方法的返回值的类型的自定义特性。
    ///</returns>
    property ReturnTypeCustomAttributes: DDN.mscorlib.DNICustomAttributeProvider read get_ReturnTypeCustomAttributes;
    property ReturnParameter: DDN.mscorlib.DNParameterInfo read get_ReturnParameter;
    property MethodImplementationFlags: DDN.mscorlib.DNMethodImplAttributes read get_MethodImplementationFlags;
    property CallingConvention: DDN.mscorlib.DNCallingConventions read get_CallingConvention;
    property IsGenericMethodDefinition: Boolean read get_IsGenericMethodDefinition;
    property ContainsGenericParameters: Boolean read get_ContainsGenericParameters;
    property IsGenericMethod: Boolean read get_IsGenericMethod;
    property IsSecurityCritical: Boolean read get_IsSecurityCritical;
    property IsSecuritySafeCritical: Boolean read get_IsSecuritySafeCritical;
    property IsSecurityTransparent: Boolean read get_IsSecurityTransparent;
    property IsPublic: Boolean read get_IsPublic;
    property IsPrivate: Boolean read get_IsPrivate;
    property IsFamily: Boolean read get_IsFamily;
    property IsAssembly: Boolean read get_IsAssembly;
    property IsFamilyAndAssembly: Boolean read get_IsFamilyAndAssembly;
    property IsFamilyOrAssembly: Boolean read get_IsFamilyOrAssembly;
    property IsStatic: Boolean read get_IsStatic;
    property IsFinal: Boolean read get_IsFinal;
    property IsVirtual: Boolean read get_IsVirtual;
    property IsHideBySig: Boolean read get_IsHideBySig;
    property IsAbstract: Boolean read get_IsAbstract;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property IsConstructor: Boolean read get_IsConstructor;
    property CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DDN.mscorlib.DNModule read get_Module;
  end;

  TDNJSMethodInfo = class(TDNGenericImport<DNJSMethodInfoClass, DNJSMethodInfo>) end;

  //-------------namespace: Microsoft.JScript----------------
  DNCOMPropertyInfoClass = interface(DDN.mscorlib.DNPropertyInfoClass)
  ['{6BD898CB-16CE-5089-A185-A0A97E5E7D0D}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:Microsoft.JScript.COMPropertyInfo" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNCOMPropertyInfo;

  end;

  ///<summary>
  ///  使 JScript 能够与外部 COM 属性进行通信。
  ///  外部 COM 实现使用此类向 JScript 公开其对象，原因是 JScript 需要托管的 <see cref="T:System.Reflection.MemberInfo" />
  ///  以便绑定到外部对象。
  ///</summary>
  [DNTypeName('Microsoft.JScript.COMPropertyInfo')]
  DNCOMPropertyInfo = interface(DDN.mscorlib.DNPropertyInfo)
  ['{6A02951C-B129-4D26-AB92-B9CA19BDCA26}']
  { getters & setters } 

    function get_Attributes: DDN.mscorlib.DNPropertyAttributes;
    function get_CanRead: Boolean;
    function get_CanWrite: Boolean;
    function get_DeclaringType: DDN.mscorlib.DNType;
    function get_MemberType: DDN.mscorlib.DNMemberTypes;
    function get_Name: string;
    function get_ReflectedType: DDN.mscorlib.DNType;
    function get_PropertyType: DDN.mscorlib.DNType;
    function get_GetMethod: DDN.mscorlib.DNMethodInfo;
    function get_SetMethod: DDN.mscorlib.DNMethodInfo;
    function get_IsSpecialName: Boolean;
    function get_CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData>;
    function get_MetadataToken: Int32;
    function get_Module: DDN.mscorlib.DNModule;

  { methods } 

    ///<summary>
    ///  返回此属性的 get 访问器。
    ///</summary>
    ///  <param name="nonPublic"><see langword="true" />
    ///  若要包括非公共访问器。
    ///</param>
    ///<returns>
    ///  此属性的 get 访问器。
    ///</returns>
    function GetGetMethod(nonPublic: Boolean): DDN.mscorlib.DNMethodInfo; overload;
    ///<summary>
    ///  返回此属性的 set 访问器。
    ///</summary>
    ///  <param name="nonPublic"><see langword="true" />
    ///  若要包括非公共访问器。
    ///</param>
    ///<returns>
    ///  此属性的 set 访问器。
    ///</returns>
    function GetSetMethod(nonPublic: Boolean): DDN.mscorlib.DNMethodInfo; overload;
    ///<summary>
    ///  初始化使 JScript 与该外部 COM 属性进行通信的信息。
    ///</summary>
    ///  <param name="name">
    ///  此对象表示的外部 COM 属性的名称。
    ///</param>
    ///  <param name="dispatch">
    ///  使 JScript 能够访问的外部 COM 属性的信息。
    ///</param>
    procedure Initialize(name: string; dispatch: DNCOMMemberInfo);
    ///<summary>
    ///  获取支持 JScript 与该外部 COM 属性进行通信的托管的对象。
    ///</summary>
    ///<returns>
    ///  支持 JScript 与该外部 COM 属性进行通信的托管的对象。
    ///</returns>
    function GetCOMMemberInfo: DNCOMMemberInfo;
    ///<summary>
    ///  确定指定的特性类型附加到此属性。
    ///</summary>
    ///  <param name="t">
    ///  要搜索的属性类型。
    ///</param>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承层次结构以查找这些特性。
    ///</param>
    ///<returns>
    ///  在所有情况下均为 <see langword="false" />
    ///  。
    ///</returns>
    function IsDefined(t: DDN.mscorlib.DNType; inherit: Boolean): Boolean;
    ///<summary>
    ///  获取一个数组，其元素包含 get 和 set 访问器的此对象表示的外部 COM 属性。
    ///</summary>
    ///  <param name="nonPublic"><see langword="true" />
    ///  若要包括非公共访问器。
    ///</param>
    ///<returns>
    ///  两个元素的数组 <see cref="T:System.Reflection.MethodInfo" />
    ///  对象，它包含 get 和 set 方法的此属性。
    ///</returns>
    function GetAccessors(nonPublic: Boolean): TArray<DDN.mscorlib.DNMethodInfo>; overload;
    ///<summary>
    ///  返回一个数组，包含附加到此属性，只搜索指定类型的特性的自定义特性。
    ///</summary>
    ///  <param name="t">
    ///  要搜索的属性的类型。
    ///</param>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承层次结构以查找这些特性。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Reflection.FieldInfo" />
    ///  具有零个元素的对象。
    ///</returns>
    function GetCustomAttributes(t: DDN.mscorlib.DNType; inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    ///<summary>
    ///  返回一个数组，包含附加到此属性的自定义特性。
    ///</summary>
    ///  <param name="inherit"><see langword="true" />
    ///  搜索此成员继承层次结构以查找这些特性。
    ///</param>
    ///<returns>
    ///  一个数组 <see cref="T:System.Reflection.FieldInfo" />
    ///  具有零个元素的对象。
    ///</returns>
    function GetCustomAttributes(inherit: Boolean): TArray<DDN.mscorlib.DNObject>; overload;
    ///<summary>
    ///  返回数组的属性的所有索引参数。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Reflection.ParameterInfo" />
    ///  具有零个元素的对象。
    ///</returns>
    function GetIndexParameters: TArray<DDN.mscorlib.DNParameterInfo>;
    ///<summary>
    ///  通过使用获取的外部 COM 属性的值 <see cref="T:Microsoft.JScript.COMMemberInfo" />
    ///  指定给 <see cref="M:Microsoft.JScript.COMPropertyInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)" />
    ///  方法。
    ///</summary>
    ///  <param name="obj">
    ///  你想要获取其属性值的对象。
    ///  忽略此参数。
    ///</param>
    ///  <param name="invokeAttr">
    ///  用于控制绑定的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，将类型从实参类型转换为形参类型。
    ///</param>
    ///  <param name="index">
    ///  要传递给外部 COM 属性的参数列表。
    ///</param>
    ///  <param name="culture">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    ///<returns>
    ///  外部 COM 属性的值。
    ///</returns>
    function GetValue(obj: DDN.mscorlib.DNObject; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; index: TArray<DDN.mscorlib.DNObject>; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  通过设置外部 COM 属性的值 <see cref="T:Microsoft.JScript.COMMemberInfo" />
    ///  指定给 <see cref="M:Microsoft.JScript.COMPropertyInfo.Initialize(System.String,Microsoft.JScript.COMMemberInfo)" />
    ///  方法。
    ///</summary>
    ///  <param name="obj">
    ///  将设置其属性值的对象。
    ///  忽略此参数。
    ///</param>
    ///  <param name="value">
    ///  外部 COM 成员的新值。
    ///</param>
    ///  <param name="invokeAttr">
    ///  用于控制绑定的枚举值的按位组合。
    ///</param>
    ///  <param name="binder">
    ///  一个对象，将类型从实参类型转换为形参类型。
    ///</param>
    ///  <param name="index">
    ///  要传递给外部 COM 属性的参数列表。
    ///</param>
    ///  <param name="culture">
    ///  提供有关特定区域性或区域设置信息。
    ///  用于正确地设置数字、 日期和字符串的格式。
    ///</param>
    procedure SetValue(obj: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject; invokeAttr: DDN.mscorlib.DNBindingFlags; binder: DDN.mscorlib.DNBinder; index: TArray<DDN.mscorlib.DNObject>; culture: DDN.mscorlib.DNCultureInfo); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetConstantValue: DDN.mscorlib.DNObject;
    function GetRawConstantValue: DDN.mscorlib.DNObject;
    function GetValue(obj: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function GetValue(obj: DDN.mscorlib.DNObject; index: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    procedure SetValue(obj: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject); overload;
    procedure SetValue(obj: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject; index: TArray<DDN.mscorlib.DNObject>); overload;
    function GetRequiredCustomModifiers: TArray<DDN.mscorlib.DNType>;
    function GetOptionalCustomModifiers: TArray<DDN.mscorlib.DNType>;
    function GetAccessors: TArray<DDN.mscorlib.DNMethodInfo>; overload;
    function GetGetMethod: DDN.mscorlib.DNMethodInfo; overload;
    function GetSetMethod: DDN.mscorlib.DNMethodInfo; overload;
    function GetCustomAttributesData: DDN.mscorlib.DNIList<DDN.mscorlib.DNCustomAttributeData>;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与此属性关联的属性。
    ///</summary>
    ///<returns><see cref="F:System.Reflection.PropertyAttributes.None" />
    ///</returns>
    property Attributes: DDN.mscorlib.DNPropertyAttributes read get_Attributes;
    ///<summary>
    ///  获取一个值，该值指示是否可以读取属性。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="true" />
    ///  。
    ///</returns>
    property CanRead: Boolean read get_CanRead;
    ///<summary>
    ///  获取一个值，指示属性是否可写。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="true" />
    ///  。
    ///</returns>
    property CanWrite: Boolean read get_CanWrite;
    ///<summary>
    ///  获取声明此属性的类型。
    ///</summary>
    ///<returns>
    ///  为 null，因为声明此属性的类型为外部 COM 对象。
    ///</returns>
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
    ///<summary>
    ///  获取此属性的成员的类型。
    ///  标识类型的类派生自 <see cref="T:System.Reflection.MemberInfo" />
    ///  ，此类派生。
    ///</summary>
    ///<returns><see cref="F:System.Reflection.MemberTypes.Property" />
    ///  , 因为此类派生自 <see cref="T:System.Reflection.PropertyInfo" />
    ///  。
    ///</returns>
    property MemberType: DDN.mscorlib.DNMemberTypes read get_MemberType;
    ///<summary>
    ///  获取此对象表示的外部 COM 属性的名称。
    ///</summary>
    ///<returns>
    ///  此对象表示的外部 COM 属性的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取用于获取通过反射此实例的类对象。
    ///</summary>
    ///<returns>
    ///  为 null，因为未通过反射获取此实例。
    ///</returns>
    property ReflectedType: DDN.mscorlib.DNType read get_ReflectedType;
    ///<summary>
    ///  获取此属性的类型。
    ///</summary>
    ///<returns><see cref="T:System.Object" />
    ///  的类型。
    ///</returns>
    property PropertyType: DDN.mscorlib.DNType read get_PropertyType;
    property GetMethod: DDN.mscorlib.DNMethodInfo read get_GetMethod;
    property SetMethod: DDN.mscorlib.DNMethodInfo read get_SetMethod;
    property IsSpecialName: Boolean read get_IsSpecialName;
    property CustomAttributes: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNCustomAttributeData> read get_CustomAttributes;
    property MetadataToken: Int32 read get_MetadataToken;
    property Module: DDN.mscorlib.DNModule read get_Module;
  end;

  TDNCOMPropertyInfo = class(TDNGenericImport<DNCOMPropertyInfoClass, DNCOMPropertyInfo>) end;


implementation


initialization
  LoadAssemblyModule('Microsoft.JScript.dll', True);

finalization

end.
