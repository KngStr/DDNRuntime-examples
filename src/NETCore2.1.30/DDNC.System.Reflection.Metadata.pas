//----------------------------------------------------------------------------
//  System.Reflection.Metadata.dll: System.Reflection.Metadata, Version=1.4.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 2.1.30
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.Reflection.Metadata
//  Author: ying32
//----------------------------------------------------------------------------

unit DDNC.System.Reflection.Metadata;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.System.Private.CoreLib,
  DDNC.System.Collections.Immutable;

type

{ enums }

  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.AssemblyFlags')]
  DNAssemblyFlags = type Integer;
  DNAssemblyFlagsHelper = record helper for DNAssemblyFlags
  public const
    PublicKey = 1;
    Retargetable = 256;
    WindowsRuntime = 512;
    ContentTypeMask = 3584;
    DisableJitCompileOptimizer = 16384;
    EnableJitCompileTracking = 32768;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.AssemblyHashAlgorithm')]
  DNAssemblyHashAlgorithm = type Integer;
  DNAssemblyHashAlgorithmHelper = record helper for DNAssemblyHashAlgorithm
  public const
    None = 0;
    MD5 = 32771;
    Sha1 = 32772;
    Sha256 = 32780;
    Sha384 = 32781;
    Sha512 = 32782;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.DeclarativeSecurityAction')]
  DNDeclarativeSecurityAction = type Integer;
  DNDeclarativeSecurityActionHelper = record helper for DNDeclarativeSecurityAction
  public const
    None = 0;
    Demand = 2;
    Assert = 3;
    Deny = 4;
    PermitOnly = 5;
    LinkDemand = 6;
    InheritanceDemand = 7;
    RequestMinimum = 8;
    RequestOptional = 9;
    RequestRefuse = 10;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.ManifestResourceAttributes')]
  DNManifestResourceAttributes = type Integer;
  DNManifestResourceAttributesHelper = record helper for DNManifestResourceAttributes
  public const
    Public_ = 1;
    Private_ = 2;
    VisibilityMask = 7;
  end;


  //-------------namespace: System.Reflection.Metadata----------------
  [DNTypeName('System.Reflection.Metadata.ConstantTypeCode')]
  DNConstantTypeCode = type Integer;
  DNConstantTypeCodeHelper = record helper for DNConstantTypeCode
  public const
    Invalid = 0;
    Boolean = 2;
    Char = 3;
    SByte = 4;
    Byte = 5;
    Int16 = 6;
    UInt16 = 7;
    Int32 = 8;
    UInt32 = 9;
    Int64 = 10;
    UInt64 = 11;
    Single = 12;
    Double = 13;
    String_ = 14;
    NullReference = 18;
  end;


  //-------------namespace: System.Reflection.Metadata----------------
  [DNTypeName('System.Reflection.Metadata.CustomAttributeNamedArgumentKind')]
  DNCustomAttributeNamedArgumentKind = type Integer;
  DNCustomAttributeNamedArgumentKindHelper = record helper for DNCustomAttributeNamedArgumentKind
  public const
    Field = 83;
    Property_ = 84;
  end;


  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  [DNTypeName('System.Reflection.Metadata.Ecma335.EditAndContinueOperation')]
  DNEditAndContinueOperation = type Integer;
  DNEditAndContinueOperationHelper = record helper for DNEditAndContinueOperation
  public const
    Default_ = 0;
    AddMethod = 1;
    AddField = 2;
    AddParameter = 3;
    AddProperty = 4;
    AddEvent = 5;
  end;


  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  [DNTypeName('System.Reflection.Metadata.Ecma335.FunctionPointerAttributes')]
  DNFunctionPointerAttributes = type Integer;
  DNFunctionPointerAttributesHelper = record helper for DNFunctionPointerAttributes
  public const
    None = 0;
    HasThis = 32;
    HasExplicitThis = 96;
  end;


  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  [DNTypeName('System.Reflection.Metadata.Ecma335.HeapIndex')]
  DNHeapIndex = type Integer;
  DNHeapIndexHelper = record helper for DNHeapIndex
  public const
    UserString = 0;
    String_ = 1;
    Blob = 2;
    Guid = 3;
  end;


  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  [DNTypeName('System.Reflection.Metadata.Ecma335.MethodBodyAttributes')]
  DNMethodBodyAttributes = type Integer;
  DNMethodBodyAttributesHelper = record helper for DNMethodBodyAttributes
  public const
    None = 0;
    InitLocals = 1;
  end;


  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  [DNTypeName('System.Reflection.Metadata.Ecma335.TableIndex')]
  DNTableIndex = type Integer;
  DNTableIndexHelper = record helper for DNTableIndex
  public const
    Module = 0;
    TypeRef = 1;
    TypeDef = 2;
    FieldPtr = 3;
    Field = 4;
    MethodPtr = 5;
    MethodDef = 6;
    ParamPtr = 7;
    Param = 8;
    InterfaceImpl = 9;
    MemberRef = 10;
    Constant = 11;
    CustomAttribute = 12;
    FieldMarshal = 13;
    DeclSecurity = 14;
    ClassLayout = 15;
    FieldLayout = 16;
    StandAloneSig = 17;
    EventMap = 18;
    EventPtr = 19;
    Event = 20;
    PropertyMap = 21;
    PropertyPtr = 22;
    Property_ = 23;
    MethodSemantics = 24;
    MethodImpl = 25;
    ModuleRef = 26;
    TypeSpec = 27;
    ImplMap = 28;
    FieldRva = 29;
    EncLog = 30;
    EncMap = 31;
    Assembly = 32;
    AssemblyProcessor = 33;
    AssemblyOS = 34;
    AssemblyRef = 35;
    AssemblyRefProcessor = 36;
    AssemblyRefOS = 37;
    File_ = 38;
    ExportedType = 39;
    ManifestResource = 40;
    NestedClass = 41;
    GenericParam = 42;
    MethodSpec = 43;
    GenericParamConstraint = 44;
    Document = 48;
    MethodDebugInformation = 49;
    LocalScope = 50;
    LocalVariable = 51;
    LocalConstant = 52;
    ImportScope = 53;
    StateMachineMethod = 54;
    CustomDebugInformation = 55;
  end;


  //-------------namespace: System.Reflection.Metadata----------------
  [DNTypeName('System.Reflection.Metadata.ExceptionRegionKind')]
  DNExceptionRegionKind = type Integer;
  DNExceptionRegionKindHelper = record helper for DNExceptionRegionKind
  public const
    Catch = 0;
    Filter = 1;
    Finally_ = 2;
    Fault = 4;
  end;


  //-------------namespace: System.Reflection.Metadata----------------
  [DNTypeName('System.Reflection.Metadata.HandleKind')]
  DNHandleKind = type Integer;
  DNHandleKindHelper = record helper for DNHandleKind
  public const
    ModuleDefinition = 0;
    TypeReference = 1;
    TypeDefinition = 2;
    FieldDefinition = 4;
    MethodDefinition = 6;
    Parameter = 8;
    InterfaceImplementation = 9;
    MemberReference = 10;
    Constant = 11;
    CustomAttribute = 12;
    DeclarativeSecurityAttribute = 14;
    StandaloneSignature = 17;
    EventDefinition = 20;
    PropertyDefinition = 23;
    MethodImplementation = 25;
    ModuleReference = 26;
    TypeSpecification = 27;
    AssemblyDefinition = 32;
    AssemblyReference = 35;
    AssemblyFile = 38;
    ExportedType = 39;
    ManifestResource = 40;
    GenericParameter = 42;
    MethodSpecification = 43;
    GenericParameterConstraint = 44;
    Document = 48;
    MethodDebugInformation = 49;
    LocalScope = 50;
    LocalVariable = 51;
    LocalConstant = 52;
    ImportScope = 53;
    CustomDebugInformation = 55;
    UserString = 112;
    Blob = 113;
    Guid = 114;
    String_ = 120;
    NamespaceDefinition = 124;
  end;


  //-------------namespace: System.Reflection.Metadata----------------
  [DNTypeName('System.Reflection.Metadata.ILOpCode')]
  DNILOpCode = type Integer;
  DNILOpCodeHelper = record helper for DNILOpCode
  public const
    Nop = 0;
    Break = 1;
    Ldarg_0 = 2;
    Ldarg_1 = 3;
    Ldarg_2 = 4;
    Ldarg_3 = 5;
    Ldloc_0 = 6;
    Ldloc_1 = 7;
    Ldloc_2 = 8;
    Ldloc_3 = 9;
    Stloc_0 = 10;
    Stloc_1 = 11;
    Stloc_2 = 12;
    Stloc_3 = 13;
    Ldarg_s = 14;
    Ldarga_s = 15;
    Starg_s = 16;
    Ldloc_s = 17;
    Ldloca_s = 18;
    Stloc_s = 19;
    Ldnull = 20;
    Ldc_i4_m1 = 21;
    Ldc_i4_0 = 22;
    Ldc_i4_1 = 23;
    Ldc_i4_2 = 24;
    Ldc_i4_3 = 25;
    Ldc_i4_4 = 26;
    Ldc_i4_5 = 27;
    Ldc_i4_6 = 28;
    Ldc_i4_7 = 29;
    Ldc_i4_8 = 30;
    Ldc_i4_s = 31;
    Ldc_i4 = 32;
    Ldc_i8 = 33;
    Ldc_r4 = 34;
    Ldc_r8 = 35;
    Dup = 37;
    Pop = 38;
    Jmp = 39;
    Call = 40;
    Calli = 41;
    Ret = 42;
    Br_s = 43;
    Brfalse_s = 44;
    Brtrue_s = 45;
    Beq_s = 46;
    Bge_s = 47;
    Bgt_s = 48;
    Ble_s = 49;
    Blt_s = 50;
    Bne_un_s = 51;
    Bge_un_s = 52;
    Bgt_un_s = 53;
    Ble_un_s = 54;
    Blt_un_s = 55;
    Br = 56;
    Brfalse = 57;
    Brtrue = 58;
    Beq = 59;
    Bge = 60;
    Bgt = 61;
    Ble = 62;
    Blt = 63;
    Bne_un = 64;
    Bge_un = 65;
    Bgt_un = 66;
    Ble_un = 67;
    Blt_un = 68;
    Switch = 69;
    Ldind_i1 = 70;
    Ldind_u1 = 71;
    Ldind_i2 = 72;
    Ldind_u2 = 73;
    Ldind_i4 = 74;
    Ldind_u4 = 75;
    Ldind_i8 = 76;
    Ldind_i = 77;
    Ldind_r4 = 78;
    Ldind_r8 = 79;
    Ldind_ref = 80;
    Stind_ref = 81;
    Stind_i1 = 82;
    Stind_i2 = 83;
    Stind_i4 = 84;
    Stind_i8 = 85;
    Stind_r4 = 86;
    Stind_r8 = 87;
    Add = 88;
    Sub = 89;
    Mul = 90;
    Div_ = 91;
    Div_un = 92;
    Rem = 93;
    Rem_un = 94;
    And_ = 95;
    Or_ = 96;
    Xor_ = 97;
    Shl_ = 98;
    Shr_ = 99;
    Shr_un = 100;
    Neg = 101;
    Not_ = 102;
    Conv_i1 = 103;
    Conv_i2 = 104;
    Conv_i4 = 105;
    Conv_i8 = 106;
    Conv_r4 = 107;
    Conv_r8 = 108;
    Conv_u4 = 109;
    Conv_u8 = 110;
    Callvirt = 111;
    Cpobj = 112;
    Ldobj = 113;
    Ldstr = 114;
    Newobj = 115;
    Castclass = 116;
    Isinst = 117;
    Conv_r_un = 118;
    Unbox = 121;
    Throw = 122;
    Ldfld = 123;
    Ldflda = 124;
    Stfld = 125;
    Ldsfld = 126;
    Ldsflda = 127;
    Stsfld = 128;
    Stobj = 129;
    Conv_ovf_i1_un = 130;
    Conv_ovf_i2_un = 131;
    Conv_ovf_i4_un = 132;
    Conv_ovf_i8_un = 133;
    Conv_ovf_u1_un = 134;
    Conv_ovf_u2_un = 135;
    Conv_ovf_u4_un = 136;
    Conv_ovf_u8_un = 137;
    Conv_ovf_i_un = 138;
    Conv_ovf_u_un = 139;
    Box = 140;
    Newarr = 141;
    Ldlen = 142;
    Ldelema = 143;
    Ldelem_i1 = 144;
    Ldelem_u1 = 145;
    Ldelem_i2 = 146;
    Ldelem_u2 = 147;
    Ldelem_i4 = 148;
    Ldelem_u4 = 149;
    Ldelem_i8 = 150;
    Ldelem_i = 151;
    Ldelem_r4 = 152;
    Ldelem_r8 = 153;
    Ldelem_ref = 154;
    Stelem_i = 155;
    Stelem_i1 = 156;
    Stelem_i2 = 157;
    Stelem_i4 = 158;
    Stelem_i8 = 159;
    Stelem_r4 = 160;
    Stelem_r8 = 161;
    Stelem_ref = 162;
    Ldelem = 163;
    Stelem = 164;
    Unbox_any = 165;
    Conv_ovf_i1 = 179;
    Conv_ovf_u1 = 180;
    Conv_ovf_i2 = 181;
    Conv_ovf_u2 = 182;
    Conv_ovf_i4 = 183;
    Conv_ovf_u4 = 184;
    Conv_ovf_i8 = 185;
    Conv_ovf_u8 = 186;
    Refanyval = 194;
    Ckfinite = 195;
    Mkrefany = 198;
    Ldtoken = 208;
    Conv_u2 = 209;
    Conv_u1 = 210;
    Conv_i = 211;
    Conv_ovf_i = 212;
    Conv_ovf_u = 213;
    Add_ovf = 214;
    Add_ovf_un = 215;
    Mul_ovf = 216;
    Mul_ovf_un = 217;
    Sub_ovf = 218;
    Sub_ovf_un = 219;
    Endfinally = 220;
    Leave = 221;
    Leave_s = 222;
    Stind_i = 223;
    Conv_u = 224;
    Arglist = 65024;
    Ceq = 65025;
    Cgt = 65026;
    Cgt_un = 65027;
    Clt = 65028;
    Clt_un = 65029;
    Ldftn = 65030;
    Ldvirtftn = 65031;
    Ldarg = 65033;
    Ldarga = 65034;
    Starg = 65035;
    Ldloc = 65036;
    Ldloca = 65037;
    Stloc = 65038;
    Localloc = 65039;
    Endfilter = 65041;
    Unaligned = 65042;
    Volatile = 65043;
    Tail = 65044;
    Initobj = 65045;
    Constrained = 65046;
    Cpblk = 65047;
    Initblk = 65048;
    Rethrow = 65050;
    Sizeof = 65052;
    Refanytype = 65053;
    Readonly = 65054;
  end;


  //-------------namespace: System.Reflection.Metadata----------------
  [DNTypeName('System.Reflection.Metadata.ImportDefinitionKind')]
  DNImportDefinitionKind = type Integer;
  DNImportDefinitionKindHelper = record helper for DNImportDefinitionKind
  public const
    ImportNamespace = 1;
    ImportAssemblyNamespace = 2;
    ImportType = 3;
    ImportXmlNamespace = 4;
    ImportAssemblyReferenceAlias = 5;
    AliasAssemblyReference = 6;
    AliasNamespace = 7;
    AliasAssemblyNamespace = 8;
    AliasType = 9;
  end;


  //-------------namespace: System.Reflection.Metadata----------------
  [DNTypeName('System.Reflection.Metadata.LocalVariableAttributes')]
  DNLocalVariableAttributes = type Integer;
  DNLocalVariableAttributesHelper = record helper for DNLocalVariableAttributes
  public const
    None = 0;
    DebuggerHidden = 1;
  end;


  //-------------namespace: System.Reflection.Metadata----------------
  [DNTypeName('System.Reflection.Metadata.MemberReferenceKind')]
  DNMemberReferenceKind = type Integer;
  DNMemberReferenceKindHelper = record helper for DNMemberReferenceKind
  public const
    Method = 0;
    Field = 1;
  end;


  //-------------namespace: System.Reflection.Metadata----------------
  [DNTypeName('System.Reflection.Metadata.MetadataKind')]
  DNMetadataKind = type Integer;
  DNMetadataKindHelper = record helper for DNMetadataKind
  public const
    Ecma335 = 0;
    WindowsMetadata = 1;
    ManagedWindowsMetadata = 2;
  end;


  //-------------namespace: System.Reflection.Metadata----------------
  [DNTypeName('System.Reflection.Metadata.MetadataReaderOptions')]
  DNMetadataReaderOptions = type Integer;
  DNMetadataReaderOptionsHelper = record helper for DNMetadataReaderOptions
  public const
    None = 0;
    Default_ = 1;
    ApplyWindowsRuntimeProjections = 1;
  end;


  //-------------namespace: System.Reflection.Metadata----------------
  [DNTypeName('System.Reflection.Metadata.MetadataStreamOptions')]
  DNMetadataStreamOptions = type Integer;
  DNMetadataStreamOptionsHelper = record helper for DNMetadataStreamOptions
  public const
    Default_ = 0;
    LeaveOpen = 1;
    PrefetchMetadata = 2;
  end;


  //-------------namespace: System.Reflection.Metadata----------------
  [DNTypeName('System.Reflection.Metadata.PrimitiveSerializationTypeCode')]
  DNPrimitiveSerializationTypeCode = type Integer;
  DNPrimitiveSerializationTypeCodeHelper = record helper for DNPrimitiveSerializationTypeCode
  public const
    Boolean = 2;
    Char = 3;
    SByte = 4;
    Byte = 5;
    Int16 = 6;
    UInt16 = 7;
    Int32 = 8;
    UInt32 = 9;
    Int64 = 10;
    UInt64 = 11;
    Single = 12;
    Double = 13;
    String_ = 14;
  end;


  //-------------namespace: System.Reflection.Metadata----------------
  [DNTypeName('System.Reflection.Metadata.PrimitiveTypeCode')]
  DNPrimitiveTypeCode = type Integer;
  DNPrimitiveTypeCodeHelper = record helper for DNPrimitiveTypeCode
  public const
    Void = 1;
    Boolean = 2;
    Char = 3;
    SByte = 4;
    Byte = 5;
    Int16 = 6;
    UInt16 = 7;
    Int32 = 8;
    UInt32 = 9;
    Int64 = 10;
    UInt64 = 11;
    Single = 12;
    Double = 13;
    String_ = 14;
    TypedReference = 22;
    IntPtr = 24;
    UIntPtr = 25;
    Object_ = 28;
  end;


  //-------------namespace: System.Reflection.Metadata----------------
  [DNTypeName('System.Reflection.Metadata.SerializationTypeCode')]
  DNSerializationTypeCode = type Integer;
  DNSerializationTypeCodeHelper = record helper for DNSerializationTypeCode
  public const
    Invalid = 0;
    Boolean = 2;
    Char = 3;
    SByte = 4;
    Byte = 5;
    Int16 = 6;
    UInt16 = 7;
    Int32 = 8;
    UInt32 = 9;
    Int64 = 10;
    UInt64 = 11;
    Single = 12;
    Double = 13;
    String_ = 14;
    SZArray = 29;
    Type_ = 80;
    TaggedObject = 81;
    Enum = 85;
  end;


  //-------------namespace: System.Reflection.Metadata----------------
  [DNTypeName('System.Reflection.Metadata.SignatureAttributes')]
  DNSignatureAttributes = type Integer;
  DNSignatureAttributesHelper = record helper for DNSignatureAttributes
  public const
    None = 0;
    Generic = 16;
    Instance = 32;
    ExplicitThis = 64;
  end;


  //-------------namespace: System.Reflection.Metadata----------------
  [DNTypeName('System.Reflection.Metadata.SignatureCallingConvention')]
  DNSignatureCallingConvention = type Integer;
  DNSignatureCallingConventionHelper = record helper for DNSignatureCallingConvention
  public const
    Default_ = 0;
    CDecl_ = 1;
    StdCall_ = 2;
    ThisCall = 3;
    FastCall = 4;
    VarArgs_ = 5;
  end;


  //-------------namespace: System.Reflection.Metadata----------------
  [DNTypeName('System.Reflection.Metadata.SignatureKind')]
  DNSignatureKind = type Integer;
  DNSignatureKindHelper = record helper for DNSignatureKind
  public const
    Method = 0;
    Field = 6;
    LocalVariables = 7;
    Property_ = 8;
    MethodSpecification = 10;
  end;


  //-------------namespace: System.Reflection.Metadata----------------
  [DNTypeName('System.Reflection.Metadata.SignatureTypeCode')]
  DNSignatureTypeCode = type Integer;
  DNSignatureTypeCodeHelper = record helper for DNSignatureTypeCode
  public const
    Invalid = 0;
    Void = 1;
    Boolean = 2;
    Char = 3;
    SByte = 4;
    Byte = 5;
    Int16 = 6;
    UInt16 = 7;
    Int32 = 8;
    UInt32 = 9;
    Int64 = 10;
    UInt64 = 11;
    Single = 12;
    Double = 13;
    String_ = 14;
    Pointer = 15;
    ByReference = 16;
    GenericTypeParameter = 19;
    Array_ = 20;
    GenericTypeInstance = 21;
    TypedReference = 22;
    IntPtr = 24;
    UIntPtr = 25;
    FunctionPointer = 27;
    Object_ = 28;
    SZArray = 29;
    GenericMethodParameter = 30;
    RequiredModifier = 31;
    OptionalModifier = 32;
    TypeHandle = 64;
    Sentinel = 65;
    Pinned = 69;
  end;


  //-------------namespace: System.Reflection.Metadata----------------
  [DNTypeName('System.Reflection.Metadata.SignatureTypeKind')]
  DNSignatureTypeKind = type Integer;
  DNSignatureTypeKindHelper = record helper for DNSignatureTypeKind
  public const
    Unknown = 0;
    ValueType = 17;
    Class_ = 18;
  end;


  //-------------namespace: System.Reflection.Metadata----------------
  [DNTypeName('System.Reflection.Metadata.StandaloneSignatureKind')]
  DNStandaloneSignatureKind = type Integer;
  DNStandaloneSignatureKindHelper = record helper for DNStandaloneSignatureKind
  public const
    Method = 0;
    LocalVariables = 1;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.MethodImportAttributes')]
  DNMethodImportAttributes = type Integer;
  DNMethodImportAttributesHelper = record helper for DNMethodImportAttributes
  public const
    None = 0;
    ExactSpelling = 1;
    CharSetAnsi = 2;
    CharSetUnicode = 4;
    CharSetAuto = 6;
    CharSetMask = 6;
    BestFitMappingEnable = 16;
    BestFitMappingDisable = 32;
    BestFitMappingMask = 48;
    SetLastError = 64;
    CallingConventionWinApi = 256;
    CallingConventionCDecl = 512;
    CallingConventionStdCall = 768;
    CallingConventionThisCall = 1024;
    CallingConventionFastCall = 1280;
    CallingConventionMask = 1792;
    ThrowOnUnmappableCharEnable = 4096;
    ThrowOnUnmappableCharDisable = 8192;
    ThrowOnUnmappableCharMask = 12288;
  end;


  //-------------namespace: System.Reflection----------------
  [DNTypeName('System.Reflection.MethodSemanticsAttributes')]
  DNMethodSemanticsAttributes = type Integer;
  DNMethodSemanticsAttributesHelper = record helper for DNMethodSemanticsAttributes
  public const
    Setter = 1;
    Getter = 2;
    Other = 4;
    Adder = 8;
    Remover = 16;
    Raiser = 32;
  end;


  //-------------namespace: System.Reflection.PortableExecutable----------------
  [DNTypeName('System.Reflection.PortableExecutable.Characteristics')]
  DNCharacteristics = type Integer;
  DNCharacteristicsHelper = record helper for DNCharacteristics
  public const
    RelocsStripped = 1;
    ExecutableImage = 2;
    LineNumsStripped = 4;
    LocalSymsStripped = 8;
    AggressiveWSTrim = 16;
    LargeAddressAware = 32;
    BytesReversedLo = 128;
    Bit32Machine = 256;
    DebugStripped = 512;
    RemovableRunFromSwap = 1024;
    NetRunFromSwap = 2048;
    System = 4096;
    Dll = 8192;
    UpSystemOnly = 16384;
    BytesReversedHi = 32768;
  end;


  //-------------namespace: System.Reflection.PortableExecutable----------------
  [DNTypeName('System.Reflection.PortableExecutable.CorFlags')]
  DNCorFlags = type Integer;
  DNCorFlagsHelper = record helper for DNCorFlags
  public const
    ILOnly = 1;
    Requires32Bit = 2;
    ILLibrary = 4;
    StrongNameSigned = 8;
    NativeEntryPoint = 16;
    TrackDebugData = 65536;
    Prefers32Bit = 131072;
  end;


  //-------------namespace: System.Reflection.PortableExecutable----------------
  [DNTypeName('System.Reflection.PortableExecutable.DebugDirectoryEntryType')]
  DNDebugDirectoryEntryType = type Integer;
  DNDebugDirectoryEntryTypeHelper = record helper for DNDebugDirectoryEntryType
  public const
    Unknown = 0;
    Coff = 1;
    CodeView = 2;
    Reproducible = 16;
    EmbeddedPortablePdb = 17;
    PdbChecksum = 19;
  end;


  //-------------namespace: System.Reflection.PortableExecutable----------------
  [DNTypeName('System.Reflection.PortableExecutable.DllCharacteristics')]
  DNDllCharacteristics = type Integer;
  DNDllCharacteristicsHelper = record helper for DNDllCharacteristics
  public const
    ProcessInit = 1;
    ProcessTerm = 2;
    ThreadInit = 4;
    ThreadTerm = 8;
    HighEntropyVirtualAddressSpace = 32;
    DynamicBase = 64;
    NxCompatible = 256;
    NoIsolation = 512;
    NoSeh = 1024;
    NoBind = 2048;
    AppContainer = 4096;
    WdmDriver = 8192;
    TerminalServerAware = 32768;
  end;


  //-------------namespace: System.Reflection.PortableExecutable----------------
  [DNTypeName('System.Reflection.PortableExecutable.Machine')]
  DNMachine = type Integer;
  DNMachineHelper = record helper for DNMachine
  public const
    Unknown = 0;
    I386 = 332;
    WceMipsV2 = 361;
    Alpha = 388;
    SH3 = 418;
    SH3Dsp = 419;
    SH3E = 420;
    SH4 = 422;
    SH5 = 424;
    Arm = 448;
    Thumb = 450;
    ArmThumb2 = 452;
    AM33 = 467;
    PowerPC = 496;
    PowerPCFP = 497;
    IA64 = 512;
    MIPS16 = 614;
    Alpha64 = 644;
    MipsFpu = 870;
    MipsFpu16 = 1126;
    Tricore = 1312;
    Ebc = 3772;
    Amd64 = 34404;
    M32R = 36929;
    Arm64 = 43620;
  end;


  //-------------namespace: System.Reflection.PortableExecutable----------------
  [DNTypeName('System.Reflection.PortableExecutable.PEMagic')]
  DNPEMagic = type Integer;
  DNPEMagicHelper = record helper for DNPEMagic
  public const
    PE32 = 267;
    PE32Plus = 523;
  end;


  //-------------namespace: System.Reflection.PortableExecutable----------------
  [DNTypeName('System.Reflection.PortableExecutable.PEStreamOptions')]
  DNPEStreamOptions = type Integer;
  DNPEStreamOptionsHelper = record helper for DNPEStreamOptions
  public const
    Default_ = 0;
    LeaveOpen = 1;
    PrefetchMetadata = 2;
    PrefetchEntireImage = 4;
    IsLoadedImage = 8;
  end;


  //-------------namespace: System.Reflection.PortableExecutable----------------
  [DNTypeName('System.Reflection.PortableExecutable.SectionCharacteristics')]
  DNSectionCharacteristics = type Integer;
  DNSectionCharacteristicsHelper = record helper for DNSectionCharacteristics
  public const
    TypeReg = 0;
    TypeDSect = 1;
    TypeNoLoad = 2;
    TypeGroup = 4;
    TypeNoPad = 8;
    TypeCopy = 16;
    ContainsCode = 32;
    ContainsInitializedData = 64;
    ContainsUninitializedData = 128;
    LinkerOther = 256;
    LinkerInfo = 512;
    TypeOver = 1024;
    LinkerRemove = 2048;
    LinkerComdat = 4096;
    MemProtected = 16384;
    NoDeferSpecExc = 16384;
    GPRel = 32768;
    MemFardata = 32768;
    MemSysheap = 65536;
    MemPurgeable = 131072;
    Mem16Bit = 131072;
    MemLocked = 262144;
    MemPreload = 524288;
    Align1Bytes = 1048576;
    Align2Bytes = 2097152;
    Align4Bytes = 3145728;
    Align8Bytes = 4194304;
    Align16Bytes = 5242880;
    Align32Bytes = 6291456;
    Align64Bytes = 7340032;
    Align128Bytes = 8388608;
    Align256Bytes = 9437184;
    Align512Bytes = 10485760;
    Align1024Bytes = 11534336;
    Align2048Bytes = 12582912;
    Align4096Bytes = 13631488;
    Align8192Bytes = 14680064;
    AlignMask = 15728640;
    LinkerNRelocOvfl = 16777216;
    MemDiscardable = 33554432;
    MemNotCached = 67108864;
    MemNotPaged = 134217728;
    MemShared = 268435456;
    MemExecute = 536870912;
    MemRead = 1073741824;
    MemWrite = 2147483648;
  end;


  //-------------namespace: System.Reflection.PortableExecutable----------------
  [DNTypeName('System.Reflection.PortableExecutable.Subsystem')]
  DNSubsystem = type Integer;
  DNSubsystemHelper = record helper for DNSubsystem
  public const
    Unknown = 0;
    Native = 1;
    WindowsGui = 2;
    WindowsCui = 3;
    OS2Cui = 5;
    PosixCui = 7;
    NativeWindows = 8;
    WindowsCEGui = 9;
    EfiApplication = 10;
    EfiBootServiceDriver = 11;
    EfiRuntimeDriver = 12;
    EfiRom = 13;
    Xbox = 14;
    WindowsBootApplication = 16;
  end;




type


{ declares }

  DNISimpleTypeProvider<TType> = interface; // type: System.Reflection.Metadata.ISimpleTypeProvider`1, namespace: System.Reflection.Metadata
  DNICustomAttributeTypeProvider<TType> = interface; // type: System.Reflection.Metadata.ICustomAttributeTypeProvider`1, namespace: System.Reflection.Metadata
  DNISignatureTypeProvider<TType, TGenericContext> = interface; // type: System.Reflection.Metadata.ISignatureTypeProvider`2, namespace: System.Reflection.Metadata
  DNISZArrayTypeProvider<TType> = interface; // type: System.Reflection.Metadata.ISZArrayTypeProvider`1, namespace: System.Reflection.Metadata
  DNIConstructedTypeProvider<TType> = interface; // type: System.Reflection.Metadata.IConstructedTypeProvider`1, namespace: System.Reflection.Metadata
  DNImageFormatLimitationException = interface; // type: System.Reflection.Metadata.ImageFormatLimitationException, namespace: System.Reflection.Metadata
  DNBlobBuilder = interface; // type: System.Reflection.Metadata.BlobBuilder, namespace: System.Reflection.Metadata
  DNDebugMetadataHeader = interface; // type: System.Reflection.Metadata.DebugMetadataHeader, namespace: System.Reflection.Metadata
  DNCodedIndex = interface; // type: System.Reflection.Metadata.Ecma335.CodedIndex, namespace: System.Reflection.Metadata.Ecma335
  DNControlFlowBuilder = interface; // type: System.Reflection.Metadata.Ecma335.ControlFlowBuilder, namespace: System.Reflection.Metadata.Ecma335
  DNExportedTypeExtensions = interface; // type: System.Reflection.Metadata.Ecma335.ExportedTypeExtensions, namespace: System.Reflection.Metadata.Ecma335
  DNMetadataAggregator = interface; // type: System.Reflection.Metadata.Ecma335.MetadataAggregator, namespace: System.Reflection.Metadata.Ecma335
  DNMetadataBuilder = interface; // type: System.Reflection.Metadata.Ecma335.MetadataBuilder, namespace: System.Reflection.Metadata.Ecma335
  DNMetadataReaderExtensions = interface; // type: System.Reflection.Metadata.Ecma335.MetadataReaderExtensions, namespace: System.Reflection.Metadata.Ecma335
  DNMetadataRootBuilder = interface; // type: System.Reflection.Metadata.Ecma335.MetadataRootBuilder, namespace: System.Reflection.Metadata.Ecma335
  DNMetadataSizes = interface; // type: System.Reflection.Metadata.Ecma335.MetadataSizes, namespace: System.Reflection.Metadata.Ecma335
  DNMetadataTokens = interface; // type: System.Reflection.Metadata.Ecma335.MetadataTokens, namespace: System.Reflection.Metadata.Ecma335
  DNPortablePdbBuilder = interface; // type: System.Reflection.Metadata.Ecma335.PortablePdbBuilder, namespace: System.Reflection.Metadata.Ecma335
  DNHandleComparer = interface; // type: System.Reflection.Metadata.HandleComparer, namespace: System.Reflection.Metadata
  DNILOpCodeExtensions = interface; // type: System.Reflection.Metadata.ILOpCodeExtensions, namespace: System.Reflection.Metadata
  DNMetadataReader = interface; // type: System.Reflection.Metadata.MetadataReader, namespace: System.Reflection.Metadata
  DNMetadataReaderProvider = interface; // type: System.Reflection.Metadata.MetadataReaderProvider, namespace: System.Reflection.Metadata
  DNMetadataStringDecoder = interface; // type: System.Reflection.Metadata.MetadataStringDecoder, namespace: System.Reflection.Metadata
  DNMethodBodyBlock = interface; // type: System.Reflection.Metadata.MethodBodyBlock, namespace: System.Reflection.Metadata
  DNPEReaderExtensions = interface; // type: System.Reflection.Metadata.PEReaderExtensions, namespace: System.Reflection.Metadata
  DNCoffHeader = interface; // type: System.Reflection.PortableExecutable.CoffHeader, namespace: System.Reflection.PortableExecutable
  DNCorHeader = interface; // type: System.Reflection.PortableExecutable.CorHeader, namespace: System.Reflection.PortableExecutable
  DNDebugDirectoryBuilder = interface; // type: System.Reflection.PortableExecutable.DebugDirectoryBuilder, namespace: System.Reflection.PortableExecutable
  DNPEBuilder = interface; // type: System.Reflection.PortableExecutable.PEBuilder, namespace: System.Reflection.PortableExecutable
  DNManagedPEBuilder = interface; // type: System.Reflection.PortableExecutable.ManagedPEBuilder, namespace: System.Reflection.PortableExecutable
  DNPEDirectoriesBuilder = interface; // type: System.Reflection.PortableExecutable.PEDirectoriesBuilder, namespace: System.Reflection.PortableExecutable
  DNPEHeader = interface; // type: System.Reflection.PortableExecutable.PEHeader, namespace: System.Reflection.PortableExecutable
  DNPEHeaderBuilder = interface; // type: System.Reflection.PortableExecutable.PEHeaderBuilder, namespace: System.Reflection.PortableExecutable
  DNPEHeaders = interface; // type: System.Reflection.PortableExecutable.PEHeaders, namespace: System.Reflection.PortableExecutable
  DNPEReader = interface; // type: System.Reflection.PortableExecutable.PEReader, namespace: System.Reflection.PortableExecutable
  DNResourceSectionBuilder = interface; // type: System.Reflection.PortableExecutable.ResourceSectionBuilder, namespace: System.Reflection.PortableExecutable
  DNArrayShape = interface; // type: System.Reflection.Metadata.ArrayShape, namespace: System.Reflection.Metadata
  DNAssemblyDefinition = interface; // type: System.Reflection.Metadata.AssemblyDefinition, namespace: System.Reflection.Metadata
  DNAssemblyDefinitionHandle = interface; // type: System.Reflection.Metadata.AssemblyDefinitionHandle, namespace: System.Reflection.Metadata
  DNAssemblyFile = interface; // type: System.Reflection.Metadata.AssemblyFile, namespace: System.Reflection.Metadata
  DNAssemblyFileHandle = interface; // type: System.Reflection.Metadata.AssemblyFileHandle, namespace: System.Reflection.Metadata
  DNAssemblyFileHandleCollection = interface; // type: System.Reflection.Metadata.AssemblyFileHandleCollection, namespace: System.Reflection.Metadata
  DNAssemblyFileHandleCollection_Enumerator = interface; // type: System.Reflection.Metadata.AssemblyFileHandleCollection+Enumerator, namespace: System.Reflection.Metadata
  DNAssemblyReference = interface; // type: System.Reflection.Metadata.AssemblyReference, namespace: System.Reflection.Metadata
  DNAssemblyReferenceHandle = interface; // type: System.Reflection.Metadata.AssemblyReferenceHandle, namespace: System.Reflection.Metadata
  DNAssemblyReferenceHandleCollection = interface; // type: System.Reflection.Metadata.AssemblyReferenceHandleCollection, namespace: System.Reflection.Metadata
  DNAssemblyReferenceHandleCollection_Enumerator = interface; // type: System.Reflection.Metadata.AssemblyReferenceHandleCollection+Enumerator, namespace: System.Reflection.Metadata
  DNBlob = interface; // type: System.Reflection.Metadata.Blob, namespace: System.Reflection.Metadata
  DNBlobBuilder_Blobs = interface; // type: System.Reflection.Metadata.BlobBuilder+Blobs, namespace: System.Reflection.Metadata
  DNBlobContentId = interface; // type: System.Reflection.Metadata.BlobContentId, namespace: System.Reflection.Metadata
  DNBlobHandle = interface; // type: System.Reflection.Metadata.BlobHandle, namespace: System.Reflection.Metadata
  DNBlobReader = interface; // type: System.Reflection.Metadata.BlobReader, namespace: System.Reflection.Metadata
  DNBlobWriter = interface; // type: System.Reflection.Metadata.BlobWriter, namespace: System.Reflection.Metadata
  DNConstant = interface; // type: System.Reflection.Metadata.Constant, namespace: System.Reflection.Metadata
  DNConstantHandle = interface; // type: System.Reflection.Metadata.ConstantHandle, namespace: System.Reflection.Metadata
  DNCustomAttribute = interface; // type: System.Reflection.Metadata.CustomAttribute, namespace: System.Reflection.Metadata
  DNCustomAttributeHandle = interface; // type: System.Reflection.Metadata.CustomAttributeHandle, namespace: System.Reflection.Metadata
  DNCustomAttributeHandleCollection = interface; // type: System.Reflection.Metadata.CustomAttributeHandleCollection, namespace: System.Reflection.Metadata
  DNCustomAttributeHandleCollection_Enumerator = interface; // type: System.Reflection.Metadata.CustomAttributeHandleCollection+Enumerator, namespace: System.Reflection.Metadata
  DNCustomAttributeNamedArgument<TType> = interface; // type: System.Reflection.Metadata.CustomAttributeNamedArgument`1, namespace: System.Reflection.Metadata
  DNCustomAttributeTypedArgument<TType> = interface; // type: System.Reflection.Metadata.CustomAttributeTypedArgument`1, namespace: System.Reflection.Metadata
  DNCustomAttributeValue<TType> = interface; // type: System.Reflection.Metadata.CustomAttributeValue`1, namespace: System.Reflection.Metadata
  DNCustomDebugInformation = interface; // type: System.Reflection.Metadata.CustomDebugInformation, namespace: System.Reflection.Metadata
  DNCustomDebugInformationHandle = interface; // type: System.Reflection.Metadata.CustomDebugInformationHandle, namespace: System.Reflection.Metadata
  DNCustomDebugInformationHandleCollection = interface; // type: System.Reflection.Metadata.CustomDebugInformationHandleCollection, namespace: System.Reflection.Metadata
  DNCustomDebugInformationHandleCollection_Enumerator = interface; // type: System.Reflection.Metadata.CustomDebugInformationHandleCollection+Enumerator, namespace: System.Reflection.Metadata
  DNDeclarativeSecurityAttribute = interface; // type: System.Reflection.Metadata.DeclarativeSecurityAttribute, namespace: System.Reflection.Metadata
  DNDeclarativeSecurityAttributeHandle = interface; // type: System.Reflection.Metadata.DeclarativeSecurityAttributeHandle, namespace: System.Reflection.Metadata
  DNDeclarativeSecurityAttributeHandleCollection = interface; // type: System.Reflection.Metadata.DeclarativeSecurityAttributeHandleCollection, namespace: System.Reflection.Metadata
  DNDeclarativeSecurityAttributeHandleCollection_Enumerator = interface; // type: System.Reflection.Metadata.DeclarativeSecurityAttributeHandleCollection+Enumerator, namespace: System.Reflection.Metadata
  DNDocument = interface; // type: System.Reflection.Metadata.Document, namespace: System.Reflection.Metadata
  DNDocumentHandle = interface; // type: System.Reflection.Metadata.DocumentHandle, namespace: System.Reflection.Metadata
  DNDocumentHandleCollection = interface; // type: System.Reflection.Metadata.DocumentHandleCollection, namespace: System.Reflection.Metadata
  DNDocumentHandleCollection_Enumerator = interface; // type: System.Reflection.Metadata.DocumentHandleCollection+Enumerator, namespace: System.Reflection.Metadata
  DNDocumentNameBlobHandle = interface; // type: System.Reflection.Metadata.DocumentNameBlobHandle, namespace: System.Reflection.Metadata
  DNArrayShapeEncoder = interface; // type: System.Reflection.Metadata.Ecma335.ArrayShapeEncoder, namespace: System.Reflection.Metadata.Ecma335
  DNBlobEncoder = interface; // type: System.Reflection.Metadata.Ecma335.BlobEncoder, namespace: System.Reflection.Metadata.Ecma335
  DNCustomAttributeArrayTypeEncoder = interface; // type: System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder, namespace: System.Reflection.Metadata.Ecma335
  DNCustomAttributeElementTypeEncoder = interface; // type: System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder, namespace: System.Reflection.Metadata.Ecma335
  DNCustomAttributeNamedArgumentsEncoder = interface; // type: System.Reflection.Metadata.Ecma335.CustomAttributeNamedArgumentsEncoder, namespace: System.Reflection.Metadata.Ecma335
  DNCustomModifiersEncoder = interface; // type: System.Reflection.Metadata.Ecma335.CustomModifiersEncoder, namespace: System.Reflection.Metadata.Ecma335
  DNEditAndContinueLogEntry = interface; // type: System.Reflection.Metadata.Ecma335.EditAndContinueLogEntry, namespace: System.Reflection.Metadata.Ecma335
  DNExceptionRegionEncoder = interface; // type: System.Reflection.Metadata.Ecma335.ExceptionRegionEncoder, namespace: System.Reflection.Metadata.Ecma335
  DNFixedArgumentsEncoder = interface; // type: System.Reflection.Metadata.Ecma335.FixedArgumentsEncoder, namespace: System.Reflection.Metadata.Ecma335
  DNGenericTypeArgumentsEncoder = interface; // type: System.Reflection.Metadata.Ecma335.GenericTypeArgumentsEncoder, namespace: System.Reflection.Metadata.Ecma335
  DNInstructionEncoder = interface; // type: System.Reflection.Metadata.Ecma335.InstructionEncoder, namespace: System.Reflection.Metadata.Ecma335
  DNLabelHandle = interface; // type: System.Reflection.Metadata.Ecma335.LabelHandle, namespace: System.Reflection.Metadata.Ecma335
  DNLiteralEncoder = interface; // type: System.Reflection.Metadata.Ecma335.LiteralEncoder, namespace: System.Reflection.Metadata.Ecma335
  DNLiteralsEncoder = interface; // type: System.Reflection.Metadata.Ecma335.LiteralsEncoder, namespace: System.Reflection.Metadata.Ecma335
  DNLocalVariablesEncoder = interface; // type: System.Reflection.Metadata.Ecma335.LocalVariablesEncoder, namespace: System.Reflection.Metadata.Ecma335
  DNLocalVariableTypeEncoder = interface; // type: System.Reflection.Metadata.Ecma335.LocalVariableTypeEncoder, namespace: System.Reflection.Metadata.Ecma335
  DNMethodBodyStreamEncoder = interface; // type: System.Reflection.Metadata.Ecma335.MethodBodyStreamEncoder, namespace: System.Reflection.Metadata.Ecma335
  DNMethodBodyStreamEncoder_MethodBody = interface; // type: System.Reflection.Metadata.Ecma335.MethodBodyStreamEncoder+MethodBody, namespace: System.Reflection.Metadata.Ecma335
  DNMethodSignatureEncoder = interface; // type: System.Reflection.Metadata.Ecma335.MethodSignatureEncoder, namespace: System.Reflection.Metadata.Ecma335
  DNNamedArgumentsEncoder = interface; // type: System.Reflection.Metadata.Ecma335.NamedArgumentsEncoder, namespace: System.Reflection.Metadata.Ecma335
  DNNamedArgumentTypeEncoder = interface; // type: System.Reflection.Metadata.Ecma335.NamedArgumentTypeEncoder, namespace: System.Reflection.Metadata.Ecma335
  DNNameEncoder = interface; // type: System.Reflection.Metadata.Ecma335.NameEncoder, namespace: System.Reflection.Metadata.Ecma335
  DNParametersEncoder = interface; // type: System.Reflection.Metadata.Ecma335.ParametersEncoder, namespace: System.Reflection.Metadata.Ecma335
  DNParameterTypeEncoder = interface; // type: System.Reflection.Metadata.Ecma335.ParameterTypeEncoder, namespace: System.Reflection.Metadata.Ecma335
  DNPermissionSetEncoder = interface; // type: System.Reflection.Metadata.Ecma335.PermissionSetEncoder, namespace: System.Reflection.Metadata.Ecma335
  DNReturnTypeEncoder = interface; // type: System.Reflection.Metadata.Ecma335.ReturnTypeEncoder, namespace: System.Reflection.Metadata.Ecma335
  DNScalarEncoder = interface; // type: System.Reflection.Metadata.Ecma335.ScalarEncoder, namespace: System.Reflection.Metadata.Ecma335
  DNSignatureDecoder<TType, TGenericContext> = interface; // type: System.Reflection.Metadata.Ecma335.SignatureDecoder`2, namespace: System.Reflection.Metadata.Ecma335
  DNSignatureTypeEncoder = interface; // type: System.Reflection.Metadata.Ecma335.SignatureTypeEncoder, namespace: System.Reflection.Metadata.Ecma335
  DNVectorEncoder = interface; // type: System.Reflection.Metadata.Ecma335.VectorEncoder, namespace: System.Reflection.Metadata.Ecma335
  DNEntityHandle = interface; // type: System.Reflection.Metadata.EntityHandle, namespace: System.Reflection.Metadata
  DNEventAccessors = interface; // type: System.Reflection.Metadata.EventAccessors, namespace: System.Reflection.Metadata
  DNEventDefinition = interface; // type: System.Reflection.Metadata.EventDefinition, namespace: System.Reflection.Metadata
  DNEventDefinitionHandle = interface; // type: System.Reflection.Metadata.EventDefinitionHandle, namespace: System.Reflection.Metadata
  DNEventDefinitionHandleCollection = interface; // type: System.Reflection.Metadata.EventDefinitionHandleCollection, namespace: System.Reflection.Metadata
  DNEventDefinitionHandleCollection_Enumerator = interface; // type: System.Reflection.Metadata.EventDefinitionHandleCollection+Enumerator, namespace: System.Reflection.Metadata
  DNExceptionRegion = interface; // type: System.Reflection.Metadata.ExceptionRegion, namespace: System.Reflection.Metadata
  DNExportedType = interface; // type: System.Reflection.Metadata.ExportedType, namespace: System.Reflection.Metadata
  DNExportedTypeHandle = interface; // type: System.Reflection.Metadata.ExportedTypeHandle, namespace: System.Reflection.Metadata
  DNExportedTypeHandleCollection = interface; // type: System.Reflection.Metadata.ExportedTypeHandleCollection, namespace: System.Reflection.Metadata
  DNExportedTypeHandleCollection_Enumerator = interface; // type: System.Reflection.Metadata.ExportedTypeHandleCollection+Enumerator, namespace: System.Reflection.Metadata
  DNFieldDefinition = interface; // type: System.Reflection.Metadata.FieldDefinition, namespace: System.Reflection.Metadata
  DNFieldDefinitionHandle = interface; // type: System.Reflection.Metadata.FieldDefinitionHandle, namespace: System.Reflection.Metadata
  DNFieldDefinitionHandleCollection = interface; // type: System.Reflection.Metadata.FieldDefinitionHandleCollection, namespace: System.Reflection.Metadata
  DNFieldDefinitionHandleCollection_Enumerator = interface; // type: System.Reflection.Metadata.FieldDefinitionHandleCollection+Enumerator, namespace: System.Reflection.Metadata
  DNGenericParameter = interface; // type: System.Reflection.Metadata.GenericParameter, namespace: System.Reflection.Metadata
  DNGenericParameterConstraint = interface; // type: System.Reflection.Metadata.GenericParameterConstraint, namespace: System.Reflection.Metadata
  DNGenericParameterConstraintHandle = interface; // type: System.Reflection.Metadata.GenericParameterConstraintHandle, namespace: System.Reflection.Metadata
  DNGenericParameterConstraintHandleCollection = interface; // type: System.Reflection.Metadata.GenericParameterConstraintHandleCollection, namespace: System.Reflection.Metadata
  DNGenericParameterConstraintHandleCollection_Enumerator = interface; // type: System.Reflection.Metadata.GenericParameterConstraintHandleCollection+Enumerator, namespace: System.Reflection.Metadata
  DNGenericParameterHandle = interface; // type: System.Reflection.Metadata.GenericParameterHandle, namespace: System.Reflection.Metadata
  DNGenericParameterHandleCollection = interface; // type: System.Reflection.Metadata.GenericParameterHandleCollection, namespace: System.Reflection.Metadata
  DNGenericParameterHandleCollection_Enumerator = interface; // type: System.Reflection.Metadata.GenericParameterHandleCollection+Enumerator, namespace: System.Reflection.Metadata
  DNGuidHandle = interface; // type: System.Reflection.Metadata.GuidHandle, namespace: System.Reflection.Metadata
  DNHandle = interface; // type: System.Reflection.Metadata.Handle, namespace: System.Reflection.Metadata
  DNImportDefinition = interface; // type: System.Reflection.Metadata.ImportDefinition, namespace: System.Reflection.Metadata
  DNImportDefinitionCollection = interface; // type: System.Reflection.Metadata.ImportDefinitionCollection, namespace: System.Reflection.Metadata
  DNImportDefinitionCollection_Enumerator = interface; // type: System.Reflection.Metadata.ImportDefinitionCollection+Enumerator, namespace: System.Reflection.Metadata
  DNImportScope = interface; // type: System.Reflection.Metadata.ImportScope, namespace: System.Reflection.Metadata
  DNImportScopeCollection = interface; // type: System.Reflection.Metadata.ImportScopeCollection, namespace: System.Reflection.Metadata
  DNImportScopeCollection_Enumerator = interface; // type: System.Reflection.Metadata.ImportScopeCollection+Enumerator, namespace: System.Reflection.Metadata
  DNImportScopeHandle = interface; // type: System.Reflection.Metadata.ImportScopeHandle, namespace: System.Reflection.Metadata
  DNInterfaceImplementation = interface; // type: System.Reflection.Metadata.InterfaceImplementation, namespace: System.Reflection.Metadata
  DNInterfaceImplementationHandle = interface; // type: System.Reflection.Metadata.InterfaceImplementationHandle, namespace: System.Reflection.Metadata
  DNInterfaceImplementationHandleCollection = interface; // type: System.Reflection.Metadata.InterfaceImplementationHandleCollection, namespace: System.Reflection.Metadata
  DNInterfaceImplementationHandleCollection_Enumerator = interface; // type: System.Reflection.Metadata.InterfaceImplementationHandleCollection+Enumerator, namespace: System.Reflection.Metadata
  DNLocalConstant = interface; // type: System.Reflection.Metadata.LocalConstant, namespace: System.Reflection.Metadata
  DNLocalConstantHandle = interface; // type: System.Reflection.Metadata.LocalConstantHandle, namespace: System.Reflection.Metadata
  DNLocalConstantHandleCollection = interface; // type: System.Reflection.Metadata.LocalConstantHandleCollection, namespace: System.Reflection.Metadata
  DNLocalConstantHandleCollection_Enumerator = interface; // type: System.Reflection.Metadata.LocalConstantHandleCollection+Enumerator, namespace: System.Reflection.Metadata
  DNLocalScope = interface; // type: System.Reflection.Metadata.LocalScope, namespace: System.Reflection.Metadata
  DNLocalScopeHandle = interface; // type: System.Reflection.Metadata.LocalScopeHandle, namespace: System.Reflection.Metadata
  DNLocalScopeHandleCollection = interface; // type: System.Reflection.Metadata.LocalScopeHandleCollection, namespace: System.Reflection.Metadata
  DNLocalScopeHandleCollection_ChildrenEnumerator = interface; // type: System.Reflection.Metadata.LocalScopeHandleCollection+ChildrenEnumerator, namespace: System.Reflection.Metadata
  DNLocalScopeHandleCollection_Enumerator = interface; // type: System.Reflection.Metadata.LocalScopeHandleCollection+Enumerator, namespace: System.Reflection.Metadata
  DNLocalVariable = interface; // type: System.Reflection.Metadata.LocalVariable, namespace: System.Reflection.Metadata
  DNLocalVariableHandle = interface; // type: System.Reflection.Metadata.LocalVariableHandle, namespace: System.Reflection.Metadata
  DNLocalVariableHandleCollection = interface; // type: System.Reflection.Metadata.LocalVariableHandleCollection, namespace: System.Reflection.Metadata
  DNLocalVariableHandleCollection_Enumerator = interface; // type: System.Reflection.Metadata.LocalVariableHandleCollection+Enumerator, namespace: System.Reflection.Metadata
  DNManifestResource = interface; // type: System.Reflection.Metadata.ManifestResource, namespace: System.Reflection.Metadata
  DNManifestResourceHandle = interface; // type: System.Reflection.Metadata.ManifestResourceHandle, namespace: System.Reflection.Metadata
  DNManifestResourceHandleCollection = interface; // type: System.Reflection.Metadata.ManifestResourceHandleCollection, namespace: System.Reflection.Metadata
  DNManifestResourceHandleCollection_Enumerator = interface; // type: System.Reflection.Metadata.ManifestResourceHandleCollection+Enumerator, namespace: System.Reflection.Metadata
  DNMemberReference = interface; // type: System.Reflection.Metadata.MemberReference, namespace: System.Reflection.Metadata
  DNMemberReferenceHandle = interface; // type: System.Reflection.Metadata.MemberReferenceHandle, namespace: System.Reflection.Metadata
  DNMemberReferenceHandleCollection = interface; // type: System.Reflection.Metadata.MemberReferenceHandleCollection, namespace: System.Reflection.Metadata
  DNMemberReferenceHandleCollection_Enumerator = interface; // type: System.Reflection.Metadata.MemberReferenceHandleCollection+Enumerator, namespace: System.Reflection.Metadata
  DNMetadataStringComparer = interface; // type: System.Reflection.Metadata.MetadataStringComparer, namespace: System.Reflection.Metadata
  DNMethodDebugInformation = interface; // type: System.Reflection.Metadata.MethodDebugInformation, namespace: System.Reflection.Metadata
  DNMethodDebugInformationHandle = interface; // type: System.Reflection.Metadata.MethodDebugInformationHandle, namespace: System.Reflection.Metadata
  DNMethodDebugInformationHandleCollection = interface; // type: System.Reflection.Metadata.MethodDebugInformationHandleCollection, namespace: System.Reflection.Metadata
  DNMethodDebugInformationHandleCollection_Enumerator = interface; // type: System.Reflection.Metadata.MethodDebugInformationHandleCollection+Enumerator, namespace: System.Reflection.Metadata
  DNMethodDefinition = interface; // type: System.Reflection.Metadata.MethodDefinition, namespace: System.Reflection.Metadata
  DNMethodDefinitionHandle = interface; // type: System.Reflection.Metadata.MethodDefinitionHandle, namespace: System.Reflection.Metadata
  DNMethodDefinitionHandleCollection = interface; // type: System.Reflection.Metadata.MethodDefinitionHandleCollection, namespace: System.Reflection.Metadata
  DNMethodDefinitionHandleCollection_Enumerator = interface; // type: System.Reflection.Metadata.MethodDefinitionHandleCollection+Enumerator, namespace: System.Reflection.Metadata
  DNMethodImplementation = interface; // type: System.Reflection.Metadata.MethodImplementation, namespace: System.Reflection.Metadata
  DNMethodImplementationHandle = interface; // type: System.Reflection.Metadata.MethodImplementationHandle, namespace: System.Reflection.Metadata
  DNMethodImplementationHandleCollection = interface; // type: System.Reflection.Metadata.MethodImplementationHandleCollection, namespace: System.Reflection.Metadata
  DNMethodImplementationHandleCollection_Enumerator = interface; // type: System.Reflection.Metadata.MethodImplementationHandleCollection+Enumerator, namespace: System.Reflection.Metadata
  DNMethodImport = interface; // type: System.Reflection.Metadata.MethodImport, namespace: System.Reflection.Metadata
  DNMethodSignature<TType> = interface; // type: System.Reflection.Metadata.MethodSignature`1, namespace: System.Reflection.Metadata
  DNMethodSpecification = interface; // type: System.Reflection.Metadata.MethodSpecification, namespace: System.Reflection.Metadata
  DNMethodSpecificationHandle = interface; // type: System.Reflection.Metadata.MethodSpecificationHandle, namespace: System.Reflection.Metadata
  DNModuleDefinition = interface; // type: System.Reflection.Metadata.ModuleDefinition, namespace: System.Reflection.Metadata
  DNModuleDefinitionHandle = interface; // type: System.Reflection.Metadata.ModuleDefinitionHandle, namespace: System.Reflection.Metadata
  DNModuleReference = interface; // type: System.Reflection.Metadata.ModuleReference, namespace: System.Reflection.Metadata
  DNModuleReferenceHandle = interface; // type: System.Reflection.Metadata.ModuleReferenceHandle, namespace: System.Reflection.Metadata
  DNNamespaceDefinition = interface; // type: System.Reflection.Metadata.NamespaceDefinition, namespace: System.Reflection.Metadata
  DNNamespaceDefinitionHandle = interface; // type: System.Reflection.Metadata.NamespaceDefinitionHandle, namespace: System.Reflection.Metadata
  DNParameter = interface; // type: System.Reflection.Metadata.Parameter, namespace: System.Reflection.Metadata
  DNParameterHandle = interface; // type: System.Reflection.Metadata.ParameterHandle, namespace: System.Reflection.Metadata
  DNParameterHandleCollection = interface; // type: System.Reflection.Metadata.ParameterHandleCollection, namespace: System.Reflection.Metadata
  DNParameterHandleCollection_Enumerator = interface; // type: System.Reflection.Metadata.ParameterHandleCollection+Enumerator, namespace: System.Reflection.Metadata
  DNPropertyAccessors = interface; // type: System.Reflection.Metadata.PropertyAccessors, namespace: System.Reflection.Metadata
  DNPropertyDefinition = interface; // type: System.Reflection.Metadata.PropertyDefinition, namespace: System.Reflection.Metadata
  DNPropertyDefinitionHandle = interface; // type: System.Reflection.Metadata.PropertyDefinitionHandle, namespace: System.Reflection.Metadata
  DNPropertyDefinitionHandleCollection = interface; // type: System.Reflection.Metadata.PropertyDefinitionHandleCollection, namespace: System.Reflection.Metadata
  DNPropertyDefinitionHandleCollection_Enumerator = interface; // type: System.Reflection.Metadata.PropertyDefinitionHandleCollection+Enumerator, namespace: System.Reflection.Metadata
  DNReservedBlob<THandle> = interface; // type: System.Reflection.Metadata.ReservedBlob`1, namespace: System.Reflection.Metadata
  DNSequencePoint = interface; // type: System.Reflection.Metadata.SequencePoint, namespace: System.Reflection.Metadata
  DNSequencePointCollection = interface; // type: System.Reflection.Metadata.SequencePointCollection, namespace: System.Reflection.Metadata
  DNSequencePointCollection_Enumerator = interface; // type: System.Reflection.Metadata.SequencePointCollection+Enumerator, namespace: System.Reflection.Metadata
  DNSignatureHeader = interface; // type: System.Reflection.Metadata.SignatureHeader, namespace: System.Reflection.Metadata
  DNStandaloneSignature = interface; // type: System.Reflection.Metadata.StandaloneSignature, namespace: System.Reflection.Metadata
  DNStandaloneSignatureHandle = interface; // type: System.Reflection.Metadata.StandaloneSignatureHandle, namespace: System.Reflection.Metadata
  DNStringHandle = interface; // type: System.Reflection.Metadata.StringHandle, namespace: System.Reflection.Metadata
  DNTypeDefinition = interface; // type: System.Reflection.Metadata.TypeDefinition, namespace: System.Reflection.Metadata
  DNTypeDefinitionHandle = interface; // type: System.Reflection.Metadata.TypeDefinitionHandle, namespace: System.Reflection.Metadata
  DNTypeDefinitionHandleCollection = interface; // type: System.Reflection.Metadata.TypeDefinitionHandleCollection, namespace: System.Reflection.Metadata
  DNTypeDefinitionHandleCollection_Enumerator = interface; // type: System.Reflection.Metadata.TypeDefinitionHandleCollection+Enumerator, namespace: System.Reflection.Metadata
  DNTypeLayout = interface; // type: System.Reflection.Metadata.TypeLayout, namespace: System.Reflection.Metadata
  DNTypeReference = interface; // type: System.Reflection.Metadata.TypeReference, namespace: System.Reflection.Metadata
  DNTypeReferenceHandle = interface; // type: System.Reflection.Metadata.TypeReferenceHandle, namespace: System.Reflection.Metadata
  DNTypeReferenceHandleCollection = interface; // type: System.Reflection.Metadata.TypeReferenceHandleCollection, namespace: System.Reflection.Metadata
  DNTypeReferenceHandleCollection_Enumerator = interface; // type: System.Reflection.Metadata.TypeReferenceHandleCollection+Enumerator, namespace: System.Reflection.Metadata
  DNTypeSpecification = interface; // type: System.Reflection.Metadata.TypeSpecification, namespace: System.Reflection.Metadata
  DNTypeSpecificationHandle = interface; // type: System.Reflection.Metadata.TypeSpecificationHandle, namespace: System.Reflection.Metadata
  DNUserStringHandle = interface; // type: System.Reflection.Metadata.UserStringHandle, namespace: System.Reflection.Metadata
  DNCodeViewDebugDirectoryData = interface; // type: System.Reflection.PortableExecutable.CodeViewDebugDirectoryData, namespace: System.Reflection.PortableExecutable
  DNDebugDirectoryEntry = interface; // type: System.Reflection.PortableExecutable.DebugDirectoryEntry, namespace: System.Reflection.PortableExecutable
  DNDirectoryEntry = interface; // type: System.Reflection.PortableExecutable.DirectoryEntry, namespace: System.Reflection.PortableExecutable
  DNPdbChecksumDebugDirectoryData = interface; // type: System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData, namespace: System.Reflection.PortableExecutable
  DNPEMemoryBlock = interface; // type: System.Reflection.PortableExecutable.PEMemoryBlock, namespace: System.Reflection.PortableExecutable
  DNSectionHeader = interface; // type: System.Reflection.PortableExecutable.SectionHeader, namespace: System.Reflection.PortableExecutable
  DNSectionLocation = interface; // type: System.Reflection.PortableExecutable.SectionLocation, namespace: System.Reflection.PortableExecutable


{ objects }

  //-------------namespace: System.Reflection.Metadata----------------
  [DNTypeName('System.Reflection.Metadata.ISimpleTypeProvider`1')]
  DNISimpleTypeProvider<TType> = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{64E344CB-48FE-3B46-A649-66E352260F9C}']
  { methods } 

    function GetPrimitiveType(typeCode: DNPrimitiveTypeCode): TType;
    function GetTypeFromDefinition(reader: DNMetadataReader; handle: DNTypeDefinitionHandle; rawTypeKind: Byte): TType;
    function GetTypeFromReference(reader: DNMetadataReader; handle: DNTypeReferenceHandle; rawTypeKind: Byte): TType;

  end;

  //-------------namespace: System.Reflection.Metadata----------------
  [DNTypeName('System.Reflection.Metadata.ICustomAttributeTypeProvider`1')]
  DNICustomAttributeTypeProvider<TType> = interface(DNISimpleTypeProvider<TType>)
  ['{A63DC516-6E52-35E8-98BA-0D312D70959B}']
  { methods } 

    function GetSystemType: TType;
    function IsSystemType(&type: TType): Boolean;
    function GetTypeFromSerializedName(name: string): TType;
    function GetUnderlyingEnumType(&type: TType): DNPrimitiveTypeCode;

  end;

  //-------------namespace: System.Reflection.Metadata----------------
  [DNTypeName('System.Reflection.Metadata.ISignatureTypeProvider`2')]
  DNISignatureTypeProvider<TType, TGenericContext> = interface(DNISimpleTypeProvider<TType>)
  ['{AC1C0D73-0BB3-37F0-8AF6-5CDA806A2A81}']
  { methods } 

    function GetFunctionPointerType(signature: DNMethodSignature<TType>): TType;
    function GetGenericMethodParameter(genericContext: TGenericContext; index: Int32): TType;
    function GetGenericTypeParameter(genericContext: TGenericContext; index: Int32): TType;
    function GetModifiedType(modifier: TType; unmodifiedType: TType; isRequired: Boolean): TType;
    function GetPinnedType(elementType: TType): TType;
    function GetTypeFromSpecification(reader: DNMetadataReader; genericContext: TGenericContext; handle: DNTypeSpecificationHandle; rawTypeKind: Byte): TType;

  end;

  //-------------namespace: System.Reflection.Metadata----------------
  [DNTypeName('System.Reflection.Metadata.ISZArrayTypeProvider`1')]
  DNISZArrayTypeProvider<TType> = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{767D01FD-E27D-3B04-A041-3FE3F681A89D}']
  { methods } 

    function GetSZArrayType(elementType: TType): TType;

  end;

  //-------------namespace: System.Reflection.Metadata----------------
  [DNTypeName('System.Reflection.Metadata.IConstructedTypeProvider`1')]
  DNIConstructedTypeProvider<TType> = interface(DNISZArrayTypeProvider<TType>)
  ['{ED638ED3-1097-31B5-ADDF-A00F5E62E97F}']
  { methods } 

    function GetGenericInstantiation(genericType: TType; typeArguments: DDNC.System.Collections.Immutable.DNImmutableArray<TType>): TType;
    function GetArrayType(elementType: TType; shape: DNArrayShape): TType;
    function GetByReferenceType(elementType: TType): TType;
    function GetPointerType(elementType: TType): TType;

  end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNImageFormatLimitationExceptionClass = interface(DDNC.System.Private.CoreLib.DNExceptionClass)
  ['{44D8261F-2E1C-5A2F-8BC0-07118501AC2B}']
  { constructors } 

    {class} function init: DNImageFormatLimitationException; overload;
    {class} function init(message: string): DNImageFormatLimitationException; overload;
    {class} function init(message: string; innerException: DDNC.System.Private.CoreLib.DNException): DNImageFormatLimitationException; overload;

  end;

  [DNTypeName('System.Reflection.Metadata.ImageFormatLimitationException')]
  DNImageFormatLimitationException = interface(DDNC.System.Private.CoreLib.DNException)
  ['{73E771E9-DC88-3395-95D2-7B65D06B1441}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDNC.System.Private.CoreLib.DNIDictionary;
    function get_InnerException: DDNC.System.Private.CoreLib.DNException;
    function get_TargetSite: DDNC.System.Private.CoreLib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDNC.System.Private.CoreLib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDNC.System.Private.CoreLib.DNSerializationInfo; context: DDNC.System.Private.CoreLib.DNStreamingContext);
    function GetType: DDNC.System.Private.CoreLib.DNType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDNC.System.Private.CoreLib.DNIDictionary read get_Data;
    property InnerException: DDNC.System.Private.CoreLib.DNException read get_InnerException;
    property TargetSite: DDNC.System.Private.CoreLib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNImageFormatLimitationException = class(TDNGenericImport<DNImageFormatLimitationExceptionClass, DNImageFormatLimitationException>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNBlobBuilderClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{7A6C35AA-0AC4-5FFE-92A1-600C8F5C7F46}']
  { constructors } 

    {class} function init(capacity: Int32): DNBlobBuilder;

  end;

  [DNTypeName('System.Reflection.Metadata.BlobBuilder')]
  DNBlobBuilder = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{69EFA953-DB89-3C71-BE45-A3DB1CA68521}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure Clear;
    function GetBlobs: DNBlobBuilder_Blobs;
    function ContentEquals(other: DNBlobBuilder): Boolean;
    function ToArray: TArray<Byte>; overload;
    function ToArray(start: Int32; byteCount: Int32): TArray<Byte>; overload;
    function ToImmutableArray: DDNC.System.Collections.Immutable.DNImmutableArray<Byte>; overload;
    function ToImmutableArray(start: Int32; byteCount: Int32): DDNC.System.Collections.Immutable.DNImmutableArray<Byte>; overload;
    procedure WriteContentTo(destination: DDNC.System.Private.CoreLib.DNStream); overload;
    procedure WriteContentTo(out destination: DNBlobWriter); overload;
    procedure WriteContentTo(destination: DNBlobBuilder); overload;
    procedure LinkPrefix(prefix: DNBlobBuilder);
    procedure LinkSuffix(suffix: DNBlobBuilder);
    function ReserveBytes(byteCount: Int32): DNBlob;
    procedure WriteBytes(value: Byte; byteCount: Int32); overload;
    procedure WriteBytes(buffer: PByte; byteCount: Int32); overload;
    function TryWriteBytes(source: DDNC.System.Private.CoreLib.DNStream; byteCount: Int32): Int32;
    procedure WriteBytes(buffer: DDNC.System.Collections.Immutable.DNImmutableArray<Byte>); overload;
    procedure WriteBytes(buffer: DDNC.System.Collections.Immutable.DNImmutableArray<Byte>; start: Int32; byteCount: Int32); overload;
    procedure WriteBytes(buffer: TArray<Byte>); overload;
    procedure WriteBytes(buffer: TArray<Byte>; start: Int32; byteCount: Int32); overload;
    procedure PadTo(position: Int32);
    procedure Align(alignment: Int32);
    procedure WriteBoolean(value: Boolean);
    procedure WriteByte(value: Byte);
    procedure WriteSByte(value: SByte);
    procedure WriteDouble(value: Double);
    procedure WriteSingle(value: Single);
    procedure WriteInt16(value: Int16);
    procedure WriteUInt16(value: UInt16);
    procedure WriteInt16BE(value: Int16);
    procedure WriteUInt16BE(value: UInt16);
    procedure WriteInt32BE(value: Int32);
    procedure WriteUInt32BE(value: UInt32);
    procedure WriteInt32(value: Int32);
    procedure WriteUInt32(value: UInt32);
    procedure WriteInt64(value: Int64);
    procedure WriteUInt64(value: UInt64);
    procedure WriteDecimal(value: DDNC.System.Private.CoreLib.DNDecimal);
    procedure WriteGuid(value: DDNC.System.Private.CoreLib.DNGuid);
    procedure WriteDateTime(value: DDNC.System.Private.CoreLib.DNDateTime);
    procedure WriteReference(reference: Int32; isSmall: Boolean);
    procedure WriteUTF16(value: TArray<Char>); overload;
    procedure WriteUTF16(value: string); overload;
    procedure WriteSerializedString(value: string);
    procedure WriteUserString(value: string);
    procedure WriteUTF8(value: string; allowUnpairedSurrogates: Boolean);
    procedure WriteCompressedSignedInteger(value: Int32);
    procedure WriteCompressedInteger(value: Int32);
    procedure WriteConstant(value: DDNC.System.Private.CoreLib.DNObject);
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNBlobBuilder = class(TDNGenericImport<DNBlobBuilderClass, DNBlobBuilder>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNDebugMetadataHeaderClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{EAF513CE-6564-55BE-BEC1-E752FB64CC4F}']
  end;

  [DNTypeName('System.Reflection.Metadata.DebugMetadataHeader')]
  DNDebugMetadataHeader = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{FD821D1B-601E-38A7-AC73-EE4789951CB0}']
  { getters & setters } 

    function get_Id: DDNC.System.Collections.Immutable.DNImmutableArray<Byte>;
    function get_EntryPoint: DNMethodDefinitionHandle;
    function get_IdStartOffset: Int32;

  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Id: DDNC.System.Collections.Immutable.DNImmutableArray<Byte> read get_Id;
    property EntryPoint: DNMethodDefinitionHandle read get_EntryPoint;
    property IdStartOffset: Int32 read get_IdStartOffset;
  end;

  TDNDebugMetadataHeader = class(TDNGenericImport<DNDebugMetadataHeaderClass, DNDebugMetadataHeader>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNCodedIndexClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{EA6F96D6-1390-59EB-98D1-5A152B7499F7}']
  { static methods } 

    {class} function HasCustomAttribute(handle: DNEntityHandle): Int32;
    {class} function HasConstant(handle: DNEntityHandle): Int32;
    {class} function CustomAttributeType(handle: DNEntityHandle): Int32;
    {class} function HasDeclSecurity(handle: DNEntityHandle): Int32;
    {class} function HasFieldMarshal(handle: DNEntityHandle): Int32;
    {class} function HasSemantics(handle: DNEntityHandle): Int32;
    {class} function &Implementation(handle: DNEntityHandle): Int32;
    {class} function MemberForwarded(handle: DNEntityHandle): Int32;
    {class} function MemberRefParent(handle: DNEntityHandle): Int32;
    {class} function MethodDefOrRef(handle: DNEntityHandle): Int32;
    {class} function ResolutionScope(handle: DNEntityHandle): Int32;
    {class} function TypeDefOrRef(handle: DNEntityHandle): Int32;
    {class} function TypeDefOrRefOrSpec(handle: DNEntityHandle): Int32;
    {class} function TypeOrMethodDef(handle: DNEntityHandle): Int32;
    {class} function HasCustomDebugInformation(handle: DNEntityHandle): Int32;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.CodedIndex')]
  DNCodedIndex = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{7BDAF53A-F928-3952-B7E7-9F4C0EDAE770}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNCodedIndex = class(TDNGenericImport<DNCodedIndexClass, DNCodedIndex>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNControlFlowBuilderClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{9B4493C9-1462-5651-8CB4-8CD9A93DA78C}']
  { constructors } 

    {class} function init: DNControlFlowBuilder;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.ControlFlowBuilder')]
  DNControlFlowBuilder = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{FE19E33F-FECA-331A-8103-8974C0824DBB}']
  { methods } 

    procedure AddFinallyRegion(tryStart: DNLabelHandle; tryEnd: DNLabelHandle; handlerStart: DNLabelHandle; handlerEnd: DNLabelHandle);
    procedure AddFaultRegion(tryStart: DNLabelHandle; tryEnd: DNLabelHandle; handlerStart: DNLabelHandle; handlerEnd: DNLabelHandle);
    procedure AddCatchRegion(tryStart: DNLabelHandle; tryEnd: DNLabelHandle; handlerStart: DNLabelHandle; handlerEnd: DNLabelHandle; catchType: DNEntityHandle);
    procedure AddFilterRegion(tryStart: DNLabelHandle; tryEnd: DNLabelHandle; handlerStart: DNLabelHandle; handlerEnd: DNLabelHandle; filterStart: DNLabelHandle);
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNControlFlowBuilder = class(TDNGenericImport<DNControlFlowBuilderClass, DNControlFlowBuilder>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNExportedTypeExtensionsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{B3532307-00B0-5FEA-824E-A0DA41E70CB9}']
  { static methods } 

    {class} function GetTypeDefinitionId(exportedType: DNExportedType): Int32;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.ExportedTypeExtensions')]
  DNExportedTypeExtensions = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{3E376008-BEA0-3C0F-B067-3576435F5FC6}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNExportedTypeExtensions = class(TDNGenericImport<DNExportedTypeExtensionsClass, DNExportedTypeExtensions>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNMetadataAggregatorClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{8B384BCE-3C04-56DA-B0D1-292477E602DA}']
  { constructors } 

    {class} function init(baseReader: DNMetadataReader; deltaReaders: DDNC.System.Private.CoreLib.DNIReadOnlyList<DNMetadataReader>): DNMetadataAggregator; overload;
    {class} function init(baseTableRowCounts: DDNC.System.Private.CoreLib.DNIReadOnlyList<Int32>; baseHeapSizes: DDNC.System.Private.CoreLib.DNIReadOnlyList<Int32>; deltaReaders: DDNC.System.Private.CoreLib.DNIReadOnlyList<DNMetadataReader>): DNMetadataAggregator; overload;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.MetadataAggregator')]
  DNMetadataAggregator = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{2AA53492-869D-311D-83E0-F766B86489A0}']
  { methods } 

    function GetGenerationHandle(handle: DNHandle; out generation: Int32): DNHandle;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNMetadataAggregator = class(TDNGenericImport<DNMetadataAggregatorClass, DNMetadataAggregator>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNMetadataBuilderClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{60D3BB71-58BF-59DA-B8C2-A369417F9AB6}']
  { constructors } 

    {class} function init(userStringHeapStartOffset: Int32; stringHeapStartOffset: Int32; blobHeapStartOffset: Int32; guidHeapStartOffset: Int32): DNMetadataBuilder;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.MetadataBuilder')]
  DNMetadataBuilder = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{FFC2520F-0169-3141-8752-F13E5FEA1C53}']
  { methods } 

    function ReserveUserString(length: Int32): DNReservedBlob<DNUserStringHandle>;
    function GetOrAddUserString(value: string): DNUserStringHandle;
    procedure SetCapacity(table: DNTableIndex; rowCount: Int32); overload;
    function GetRowCount(table: DNTableIndex): Int32;
    function GetRowCounts: DDNC.System.Collections.Immutable.DNImmutableArray<Int32>;
    function AddModule(generation: Int32; moduleName: DNStringHandle; mvid: DNGuidHandle; encId: DNGuidHandle; encBaseId: DNGuidHandle): DNModuleDefinitionHandle;
    function AddAssembly(name: DNStringHandle; version: DDNC.System.Private.CoreLib.DNVersion; culture: DNStringHandle; publicKey: DNBlobHandle; flags: DNAssemblyFlags; hashAlgorithm: DNAssemblyHashAlgorithm): DNAssemblyDefinitionHandle;
    function AddAssemblyReference(name: DNStringHandle; version: DDNC.System.Private.CoreLib.DNVersion; culture: DNStringHandle; publicKeyOrToken: DNBlobHandle; flags: DNAssemblyFlags; hashValue: DNBlobHandle): DNAssemblyReferenceHandle;
    function AddTypeDefinition(attributes: DDNC.System.Private.CoreLib.DNTypeAttributes; namespace: DNStringHandle; name: DNStringHandle; baseType: DNEntityHandle; fieldList: DNFieldDefinitionHandle; methodList: DNMethodDefinitionHandle): DNTypeDefinitionHandle;
    procedure AddTypeLayout(&type: DNTypeDefinitionHandle; packingSize: UInt16; size: UInt32);
    function AddInterfaceImplementation(&type: DNTypeDefinitionHandle; implementedInterface: DNEntityHandle): DNInterfaceImplementationHandle;
    procedure AddNestedType(&type: DNTypeDefinitionHandle; enclosingType: DNTypeDefinitionHandle);
    function AddTypeReference(resolutionScope: DNEntityHandle; namespace: DNStringHandle; name: DNStringHandle): DNTypeReferenceHandle;
    function AddTypeSpecification(signature: DNBlobHandle): DNTypeSpecificationHandle;
    function AddStandaloneSignature(signature: DNBlobHandle): DNStandaloneSignatureHandle;
    function AddProperty(attributes: DDNC.System.Private.CoreLib.DNPropertyAttributes; name: DNStringHandle; signature: DNBlobHandle): DNPropertyDefinitionHandle;
    procedure AddPropertyMap(declaringType: DNTypeDefinitionHandle; propertyList: DNPropertyDefinitionHandle);
    function AddEvent(attributes: DDNC.System.Private.CoreLib.DNEventAttributes; name: DNStringHandle; &type: DNEntityHandle): DNEventDefinitionHandle;
    procedure AddEventMap(declaringType: DNTypeDefinitionHandle; eventList: DNEventDefinitionHandle);
    function AddConstant(parent: DNEntityHandle; value: DDNC.System.Private.CoreLib.DNObject): DNConstantHandle;
    procedure AddMethodSemantics(association: DNEntityHandle; semantics: DNMethodSemanticsAttributes; methodDefinition: DNMethodDefinitionHandle);
    function AddCustomAttribute(parent: DNEntityHandle; &constructor: DNEntityHandle; value: DNBlobHandle): DNCustomAttributeHandle;
    function AddMethodSpecification(method: DNEntityHandle; instantiation: DNBlobHandle): DNMethodSpecificationHandle;
    function AddModuleReference(moduleName: DNStringHandle): DNModuleReferenceHandle;
    function AddParameter(attributes: DDNC.System.Private.CoreLib.DNParameterAttributes; name: DNStringHandle; sequenceNumber: Int32): DNParameterHandle;
    function AddGenericParameter(parent: DNEntityHandle; attributes: DDNC.System.Private.CoreLib.DNGenericParameterAttributes; name: DNStringHandle; index: Int32): DNGenericParameterHandle;
    function AddGenericParameterConstraint(genericParameter: DNGenericParameterHandle; constraint: DNEntityHandle): DNGenericParameterConstraintHandle;
    function AddFieldDefinition(attributes: DDNC.System.Private.CoreLib.DNFieldAttributes; name: DNStringHandle; signature: DNBlobHandle): DNFieldDefinitionHandle;
    procedure AddFieldLayout(field: DNFieldDefinitionHandle; offset: Int32);
    procedure AddMarshallingDescriptor(parent: DNEntityHandle; descriptor: DNBlobHandle);
    procedure AddFieldRelativeVirtualAddress(field: DNFieldDefinitionHandle; offset: Int32);
    function AddMethodDefinition(attributes: DDNC.System.Private.CoreLib.DNMethodAttributes; implAttributes: DDNC.System.Private.CoreLib.DNMethodImplAttributes; name: DNStringHandle; signature: DNBlobHandle; bodyOffset: Int32; parameterList: DNParameterHandle): DNMethodDefinitionHandle;
    procedure AddMethodImport(method: DNMethodDefinitionHandle; attributes: DNMethodImportAttributes; name: DNStringHandle; module: DNModuleReferenceHandle);
    function AddMethodImplementation(&type: DNTypeDefinitionHandle; methodBody: DNEntityHandle; methodDeclaration: DNEntityHandle): DNMethodImplementationHandle;
    function AddMemberReference(parent: DNEntityHandle; name: DNStringHandle; signature: DNBlobHandle): DNMemberReferenceHandle;
    function AddManifestResource(attributes: DNManifestResourceAttributes; name: DNStringHandle; &implementation: DNEntityHandle; offset: UInt32): DNManifestResourceHandle;
    function AddAssemblyFile(name: DNStringHandle; hashValue: DNBlobHandle; containsMetadata: Boolean): DNAssemblyFileHandle;
    function AddExportedType(attributes: DDNC.System.Private.CoreLib.DNTypeAttributes; namespace: DNStringHandle; name: DNStringHandle; &implementation: DNEntityHandle; typeDefinitionId: Int32): DNExportedTypeHandle;
    function AddDeclarativeSecurityAttribute(parent: DNEntityHandle; action: DNDeclarativeSecurityAction; permissionSet: DNBlobHandle): DNDeclarativeSecurityAttributeHandle;
    procedure AddEncLogEntry(entity: DNEntityHandle; code: DNEditAndContinueOperation);
    procedure AddEncMapEntry(entity: DNEntityHandle);
    function AddDocument(name: DNBlobHandle; hashAlgorithm: DNGuidHandle; hash: DNBlobHandle; language: DNGuidHandle): DNDocumentHandle;
    function AddMethodDebugInformation(document: DNDocumentHandle; sequencePoints: DNBlobHandle): DNMethodDebugInformationHandle;
    function AddLocalScope(method: DNMethodDefinitionHandle; importScope: DNImportScopeHandle; variableList: DNLocalVariableHandle; constantList: DNLocalConstantHandle; startOffset: Int32; length: Int32): DNLocalScopeHandle;
    function AddLocalVariable(attributes: DNLocalVariableAttributes; index: Int32; name: DNStringHandle): DNLocalVariableHandle;
    function AddLocalConstant(name: DNStringHandle; signature: DNBlobHandle): DNLocalConstantHandle;
    function AddImportScope(parentScope: DNImportScopeHandle; imports: DNBlobHandle): DNImportScopeHandle;
    procedure AddStateMachineMethod(moveNextMethod: DNMethodDefinitionHandle; kickoffMethod: DNMethodDefinitionHandle);
    function AddCustomDebugInformation(parent: DNEntityHandle; kind: DNGuidHandle; value: DNBlobHandle): DNCustomDebugInformationHandle;
    procedure SetCapacity(heap: DNHeapIndex; byteCount: Int32); overload;
    function GetOrAddBlob(value: DNBlobBuilder): DNBlobHandle; overload;
    function GetOrAddBlob(value: TArray<Byte>): DNBlobHandle; overload;
    function GetOrAddBlob(value: DDNC.System.Collections.Immutable.DNImmutableArray<Byte>): DNBlobHandle; overload;
    function GetOrAddConstantBlob(value: DDNC.System.Private.CoreLib.DNObject): DNBlobHandle;
    function GetOrAddBlobUTF16(value: string): DNBlobHandle;
    function GetOrAddBlobUTF8(value: string; allowUnpairedSurrogates: Boolean): DNBlobHandle;
    function GetOrAddDocumentName(value: string): DNBlobHandle;
    function GetOrAddGuid(guid: DDNC.System.Private.CoreLib.DNGuid): DNGuidHandle;
    function ReserveGuid: DNReservedBlob<DNGuidHandle>;
    function GetOrAddString(value: string): DNStringHandle;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNMetadataBuilder = class(TDNGenericImport<DNMetadataBuilderClass, DNMetadataBuilder>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNMetadataReaderExtensionsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{2BB1EB63-C87F-5B94-BB38-62F8C7A6A6AD}']
  { static methods } 

    {class} function GetTableRowCount(reader: DNMetadataReader; tableIndex: DNTableIndex): Int32;
    {class} function GetTableRowSize(reader: DNMetadataReader; tableIndex: DNTableIndex): Int32;
    {class} function GetTableMetadataOffset(reader: DNMetadataReader; tableIndex: DNTableIndex): Int32;
    {class} function GetHeapSize(reader: DNMetadataReader; heapIndex: DNHeapIndex): Int32;
    {class} function GetHeapMetadataOffset(reader: DNMetadataReader; heapIndex: DNHeapIndex): Int32;
    {class} function GetNextHandle(reader: DNMetadataReader; handle: DNUserStringHandle): DNUserStringHandle; overload;
    {class} function GetNextHandle(reader: DNMetadataReader; handle: DNBlobHandle): DNBlobHandle; overload;
    {class} function GetNextHandle(reader: DNMetadataReader; handle: DNStringHandle): DNStringHandle; overload;
    {class} function GetEditAndContinueLogEntries(reader: DNMetadataReader): DDNC.System.Private.CoreLib.DNIEnumerable<DNEditAndContinueLogEntry>;
    {class} function GetEditAndContinueMapEntries(reader: DNMetadataReader): DDNC.System.Private.CoreLib.DNIEnumerable<DNEntityHandle>;
    {class} function GetTypesWithProperties(reader: DNMetadataReader): DDNC.System.Private.CoreLib.DNIEnumerable<DNTypeDefinitionHandle>;
    {class} function GetTypesWithEvents(reader: DNMetadataReader): DDNC.System.Private.CoreLib.DNIEnumerable<DNTypeDefinitionHandle>;
    {class} function ResolveSignatureTypeKind(reader: DNMetadataReader; typeHandle: DNEntityHandle; rawTypeKind: Byte): DNSignatureTypeKind;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.MetadataReaderExtensions')]
  DNMetadataReaderExtensions = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{EF374810-76A4-31F0-ABCC-71F8B7685537}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNMetadataReaderExtensions = class(TDNGenericImport<DNMetadataReaderExtensionsClass, DNMetadataReaderExtensions>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNMetadataRootBuilderClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{E3DB99B5-39D6-505E-9989-1C904F07677B}']
  { constructors } 

    {class} function init(tablesAndHeaps: DNMetadataBuilder; metadataVersion: string; suppressValidation: Boolean): DNMetadataRootBuilder;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.MetadataRootBuilder')]
  DNMetadataRootBuilder = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{F3FFB7BD-F35B-3660-9DE0-5CD1313547C1}']
  { getters & setters } 

    function get_MetadataVersion: string;
    function get_SuppressValidation: Boolean;
    function get_Sizes: DNMetadataSizes;

  { methods } 

    procedure Serialize(builder: DNBlobBuilder; methodBodyStreamRva: Int32; mappedFieldDataStreamRva: Int32);
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property MetadataVersion: string read get_MetadataVersion;
    property SuppressValidation: Boolean read get_SuppressValidation;
    property Sizes: DNMetadataSizes read get_Sizes;
  end;

  TDNMetadataRootBuilder = class(TDNGenericImport<DNMetadataRootBuilderClass, DNMetadataRootBuilder>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNMetadataSizesClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{C3A12C8D-7B63-5652-92A3-8C883709DCAA}']
  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.MetadataSizes')]
  DNMetadataSizes = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{25663344-BE5B-3E70-A66D-9376DF061B7C}']
  { getters & setters } 

    function get_HeapSizes: DDNC.System.Collections.Immutable.DNImmutableArray<Int32>;
    function get_RowCounts: DDNC.System.Collections.Immutable.DNImmutableArray<Int32>;
    function get_ExternalRowCounts: DDNC.System.Collections.Immutable.DNImmutableArray<Int32>;

  { methods } 

    function GetAlignedHeapSize(index: DNHeapIndex): Int32;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property HeapSizes: DDNC.System.Collections.Immutable.DNImmutableArray<Int32> read get_HeapSizes;
    property RowCounts: DDNC.System.Collections.Immutable.DNImmutableArray<Int32> read get_RowCounts;
    property ExternalRowCounts: DDNC.System.Collections.Immutable.DNImmutableArray<Int32> read get_ExternalRowCounts;
  end;

  TDNMetadataSizes = class(TDNGenericImport<DNMetadataSizesClass, DNMetadataSizes>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNMetadataTokensClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{8535A432-0A72-5F6D-BA36-3FCEE41951E5}']
  { static fields getter & setter } 

   function __fakeFieldGet_TableCount: Int32;
   function __fakeFieldGet_HeapCount: Int32;

  { static fields } 

    {class} property TableCount: Int32 read __fakeFieldGet_TableCount;
    {class} property HeapCount: Int32 read __fakeFieldGet_HeapCount;

  { static methods } 

    {class} function GetRowNumber(reader: DNMetadataReader; handle: DNEntityHandle): Int32; overload;
    {class} function GetHeapOffset(reader: DNMetadataReader; handle: DNHandle): Int32; overload;
    {class} function GetToken(reader: DNMetadataReader; handle: DNEntityHandle): Int32; overload;
    {class} function GetToken(reader: DNMetadataReader; handle: DNHandle): Int32; overload;
    {class} function GetRowNumber(handle: DNEntityHandle): Int32; overload;
    {class} function GetHeapOffset(handle: DNHandle): Int32; overload;
    {class} function GetHeapOffset(handle: DNBlobHandle): Int32; overload;
    {class} function GetHeapOffset(handle: DNGuidHandle): Int32; overload;
    {class} function GetHeapOffset(handle: DNUserStringHandle): Int32; overload;
    {class} function GetHeapOffset(handle: DNStringHandle): Int32; overload;
    {class} function GetToken(handle: DNHandle): Int32; overload;
    {class} function GetToken(handle: DNEntityHandle): Int32; overload;
    {class} function TryGetTableIndex(&type: DNHandleKind; out index: DNTableIndex): Boolean;
    {class} function TryGetHeapIndex(&type: DNHandleKind; out index: DNHeapIndex): Boolean;
    {class} function Handle(token: Int32): DNHandle; overload;
    {class} function EntityHandle(token: Int32): DNEntityHandle; overload;
    {class} function EntityHandle(tableIndex: DNTableIndex; rowNumber: Int32): DNEntityHandle; overload;
    {class} function Handle(tableIndex: DNTableIndex; rowNumber: Int32): DNEntityHandle; overload;
    {class} function MethodDefinitionHandle(rowNumber: Int32): DNMethodDefinitionHandle;
    {class} function MethodImplementationHandle(rowNumber: Int32): DNMethodImplementationHandle;
    {class} function MethodSpecificationHandle(rowNumber: Int32): DNMethodSpecificationHandle;
    {class} function TypeDefinitionHandle(rowNumber: Int32): DNTypeDefinitionHandle;
    {class} function ExportedTypeHandle(rowNumber: Int32): DNExportedTypeHandle;
    {class} function TypeReferenceHandle(rowNumber: Int32): DNTypeReferenceHandle;
    {class} function TypeSpecificationHandle(rowNumber: Int32): DNTypeSpecificationHandle;
    {class} function InterfaceImplementationHandle(rowNumber: Int32): DNInterfaceImplementationHandle;
    {class} function MemberReferenceHandle(rowNumber: Int32): DNMemberReferenceHandle;
    {class} function FieldDefinitionHandle(rowNumber: Int32): DNFieldDefinitionHandle;
    {class} function EventDefinitionHandle(rowNumber: Int32): DNEventDefinitionHandle;
    {class} function PropertyDefinitionHandle(rowNumber: Int32): DNPropertyDefinitionHandle;
    {class} function StandaloneSignatureHandle(rowNumber: Int32): DNStandaloneSignatureHandle;
    {class} function ParameterHandle(rowNumber: Int32): DNParameterHandle;
    {class} function GenericParameterHandle(rowNumber: Int32): DNGenericParameterHandle;
    {class} function GenericParameterConstraintHandle(rowNumber: Int32): DNGenericParameterConstraintHandle;
    {class} function ModuleReferenceHandle(rowNumber: Int32): DNModuleReferenceHandle;
    {class} function AssemblyReferenceHandle(rowNumber: Int32): DNAssemblyReferenceHandle;
    {class} function CustomAttributeHandle(rowNumber: Int32): DNCustomAttributeHandle;
    {class} function DeclarativeSecurityAttributeHandle(rowNumber: Int32): DNDeclarativeSecurityAttributeHandle;
    {class} function ConstantHandle(rowNumber: Int32): DNConstantHandle;
    {class} function ManifestResourceHandle(rowNumber: Int32): DNManifestResourceHandle;
    {class} function AssemblyFileHandle(rowNumber: Int32): DNAssemblyFileHandle;
    {class} function DocumentHandle(rowNumber: Int32): DNDocumentHandle;
    {class} function MethodDebugInformationHandle(rowNumber: Int32): DNMethodDebugInformationHandle;
    {class} function LocalScopeHandle(rowNumber: Int32): DNLocalScopeHandle;
    {class} function LocalVariableHandle(rowNumber: Int32): DNLocalVariableHandle;
    {class} function LocalConstantHandle(rowNumber: Int32): DNLocalConstantHandle;
    {class} function ImportScopeHandle(rowNumber: Int32): DNImportScopeHandle;
    {class} function CustomDebugInformationHandle(rowNumber: Int32): DNCustomDebugInformationHandle;
    {class} function UserStringHandle(offset: Int32): DNUserStringHandle;
    {class} function StringHandle(offset: Int32): DNStringHandle;
    {class} function BlobHandle(offset: Int32): DNBlobHandle;
    {class} function GuidHandle(offset: Int32): DNGuidHandle;
    {class} function DocumentNameBlobHandle(offset: Int32): DNDocumentNameBlobHandle;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.MetadataTokens')]
  DNMetadataTokens = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{1AA43938-8731-3798-A20E-DD746C72E15A}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNMetadataTokens = class(TDNGenericImport<DNMetadataTokensClass, DNMetadataTokens>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNPortablePdbBuilderClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{EDC8401E-8A0F-5198-A200-B36E59576277}']
  { constructors } 

    {class} function init(tablesAndHeaps: DNMetadataBuilder; typeSystemRowCounts: DDNC.System.Collections.Immutable.DNImmutableArray<Int32>; entryPoint: DNMethodDefinitionHandle; idProvider: DDNC.System.Private.CoreLib.DNFunc<DDNC.System.Private.CoreLib.DNIEnumerable<DNBlob>, DNBlobContentId>): DNPortablePdbBuilder;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.PortablePdbBuilder')]
  DNPortablePdbBuilder = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{67F64314-838F-312A-ABBD-4588A6EB8B18}']
  { getters & setters } 

    function get_MetadataVersion: string;
    function get_FormatVersion: UInt16;
    function get_IdProvider: DDNC.System.Private.CoreLib.DNFunc<DDNC.System.Private.CoreLib.DNIEnumerable<DNBlob>, DNBlobContentId>;

  { methods } 

    function Serialize(builder: DNBlobBuilder): DNBlobContentId;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property MetadataVersion: string read get_MetadataVersion;
    property FormatVersion: UInt16 read get_FormatVersion;
    property IdProvider: DDNC.System.Private.CoreLib.DNFunc<DDNC.System.Private.CoreLib.DNIEnumerable<DNBlob>, DNBlobContentId> read get_IdProvider;
  end;

  TDNPortablePdbBuilder = class(TDNGenericImport<DNPortablePdbBuilderClass, DNPortablePdbBuilder>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNHandleComparerClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{71D6394B-FA1C-5A08-81CF-9B2C22F8BD9E}']
  { static getter & setter } 

    {class} function get_Default: DNHandleComparer;

  { static propertys } 

    {class} property &Default: DNHandleComparer read get_Default;
  end;

  [DNTypeName('System.Reflection.Metadata.HandleComparer')]
  DNHandleComparer = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{7C7AEFE8-F7CB-3A52-BB2F-3B50A421485E}']
  { methods } 

    function Equals(x: DNHandle; y: DNHandle): Boolean; overload;
    function Equals(x: DNEntityHandle; y: DNEntityHandle): Boolean; overload;
    function GetHashCode(obj: DNHandle): Int32; overload;
    function GetHashCode(obj: DNEntityHandle): Int32; overload;
    function Compare(x: DNHandle; y: DNHandle): Int32; overload;
    function Compare(x: DNEntityHandle; y: DNEntityHandle): Int32; overload;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetHashCode: Int32; overload;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNHandleComparer = class(TDNGenericImport<DNHandleComparerClass, DNHandleComparer>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNILOpCodeExtensionsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{97AE9A37-3735-5D6A-BDAA-85A5A5889C62}']
  { static methods } 

    {class} function IsBranch(opCode: DNILOpCode): Boolean;
    {class} function GetBranchOperandSize(opCode: DNILOpCode): Int32;
    {class} function GetShortBranch(opCode: DNILOpCode): DNILOpCode;
    {class} function GetLongBranch(opCode: DNILOpCode): DNILOpCode;

  end;

  [DNTypeName('System.Reflection.Metadata.ILOpCodeExtensions')]
  DNILOpCodeExtensions = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{B3CC359E-C210-34CF-92EA-E35A749042F0}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNILOpCodeExtensions = class(TDNGenericImport<DNILOpCodeExtensionsClass, DNILOpCodeExtensions>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNMetadataReaderClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{DD291DB7-8195-5B83-9C10-DF0AE21D8353}']
  { constructors } 

    {class} function init(metadata: PByte; length: Int32): DNMetadataReader; overload;
    {class} function init(metadata: PByte; length: Int32; options: DNMetadataReaderOptions): DNMetadataReader; overload;
    {class} function init(metadata: PByte; length: Int32; options: DNMetadataReaderOptions; utf8Decoder: DNMetadataStringDecoder): DNMetadataReader; overload;

  end;

  [DNTypeName('System.Reflection.Metadata.MetadataReader')]
  DNMetadataReader = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{C19C1B0B-9047-3E72-82C5-FA1451E8A1A4}']
  { getters & setters } 

    function get_MetadataPointer: PByte;
    function get_MetadataLength: Int32;
    function get_Options: DNMetadataReaderOptions;
    function get_MetadataVersion: string;
    function get_DebugMetadataHeader: DNDebugMetadataHeader;
    function get_MetadataKind: DNMetadataKind;
    function get_StringComparer: DNMetadataStringComparer;
    function get_UTF8Decoder: DNMetadataStringDecoder;
    function get_IsAssembly: Boolean;
    function get_AssemblyReferences: DNAssemblyReferenceHandleCollection;
    function get_TypeDefinitions: DNTypeDefinitionHandleCollection;
    function get_TypeReferences: DNTypeReferenceHandleCollection;
    function get_CustomAttributes: DNCustomAttributeHandleCollection;
    function get_DeclarativeSecurityAttributes: DNDeclarativeSecurityAttributeHandleCollection;
    function get_MemberReferences: DNMemberReferenceHandleCollection;
    function get_ManifestResources: DNManifestResourceHandleCollection;
    function get_AssemblyFiles: DNAssemblyFileHandleCollection;
    function get_ExportedTypes: DNExportedTypeHandleCollection;
    function get_MethodDefinitions: DNMethodDefinitionHandleCollection;
    function get_FieldDefinitions: DNFieldDefinitionHandleCollection;
    function get_EventDefinitions: DNEventDefinitionHandleCollection;
    function get_PropertyDefinitions: DNPropertyDefinitionHandleCollection;
    function get_Documents: DNDocumentHandleCollection;
    function get_MethodDebugInformation: DNMethodDebugInformationHandleCollection;
    function get_LocalScopes: DNLocalScopeHandleCollection;
    function get_LocalVariables: DNLocalVariableHandleCollection;
    function get_LocalConstants: DNLocalConstantHandleCollection;
    function get_ImportScopes: DNImportScopeCollection;
    function get_CustomDebugInformation: DNCustomDebugInformationHandleCollection;

  { methods } 

    function GetAssemblyDefinition: DNAssemblyDefinition;
    function GetString(handle: DNStringHandle): string; overload;
    function GetString(handle: DNNamespaceDefinitionHandle): string; overload;
    function GetBlobBytes(handle: DNBlobHandle): TArray<Byte>;
    function GetBlobContent(handle: DNBlobHandle): DDNC.System.Collections.Immutable.DNImmutableArray<Byte>;
    function GetBlobReader(handle: DNBlobHandle): DNBlobReader; overload;
    function GetBlobReader(handle: DNStringHandle): DNBlobReader; overload;
    function GetUserString(handle: DNUserStringHandle): string;
    function GetGuid(handle: DNGuidHandle): DDNC.System.Private.CoreLib.DNGuid;
    function GetModuleDefinition: DNModuleDefinition;
    function GetAssemblyReference(handle: DNAssemblyReferenceHandle): DNAssemblyReference;
    function GetTypeDefinition(handle: DNTypeDefinitionHandle): DNTypeDefinition;
    function GetNamespaceDefinitionRoot: DNNamespaceDefinition;
    function GetNamespaceDefinition(handle: DNNamespaceDefinitionHandle): DNNamespaceDefinition;
    function GetTypeReference(handle: DNTypeReferenceHandle): DNTypeReference;
    function GetExportedType(handle: DNExportedTypeHandle): DNExportedType;
    function GetCustomAttributes(handle: DNEntityHandle): DNCustomAttributeHandleCollection;
    function GetCustomAttribute(handle: DNCustomAttributeHandle): DNCustomAttribute;
    function GetDeclarativeSecurityAttribute(handle: DNDeclarativeSecurityAttributeHandle): DNDeclarativeSecurityAttribute;
    function GetConstant(handle: DNConstantHandle): DNConstant;
    function GetMethodDefinition(handle: DNMethodDefinitionHandle): DNMethodDefinition;
    function GetFieldDefinition(handle: DNFieldDefinitionHandle): DNFieldDefinition;
    function GetPropertyDefinition(handle: DNPropertyDefinitionHandle): DNPropertyDefinition;
    function GetEventDefinition(handle: DNEventDefinitionHandle): DNEventDefinition;
    function GetMethodImplementation(handle: DNMethodImplementationHandle): DNMethodImplementation;
    function GetMemberReference(handle: DNMemberReferenceHandle): DNMemberReference;
    function GetMethodSpecification(handle: DNMethodSpecificationHandle): DNMethodSpecification;
    function GetParameter(handle: DNParameterHandle): DNParameter;
    function GetGenericParameter(handle: DNGenericParameterHandle): DNGenericParameter;
    function GetGenericParameterConstraint(handle: DNGenericParameterConstraintHandle): DNGenericParameterConstraint;
    function GetManifestResource(handle: DNManifestResourceHandle): DNManifestResource;
    function GetAssemblyFile(handle: DNAssemblyFileHandle): DNAssemblyFile;
    function GetStandaloneSignature(handle: DNStandaloneSignatureHandle): DNStandaloneSignature;
    function GetTypeSpecification(handle: DNTypeSpecificationHandle): DNTypeSpecification;
    function GetModuleReference(handle: DNModuleReferenceHandle): DNModuleReference;
    function GetInterfaceImplementation(handle: DNInterfaceImplementationHandle): DNInterfaceImplementation;
    function GetString(handle: DNDocumentNameBlobHandle): string; overload;
    function GetDocument(handle: DNDocumentHandle): DNDocument;
    function GetMethodDebugInformation(handle: DNMethodDebugInformationHandle): DNMethodDebugInformation; overload;
    function GetMethodDebugInformation(handle: DNMethodDefinitionHandle): DNMethodDebugInformation; overload;
    function GetLocalScope(handle: DNLocalScopeHandle): DNLocalScope;
    function GetLocalVariable(handle: DNLocalVariableHandle): DNLocalVariable;
    function GetLocalConstant(handle: DNLocalConstantHandle): DNLocalConstant;
    function GetImportScope(handle: DNImportScopeHandle): DNImportScope;
    function GetCustomDebugInformation(handle: DNCustomDebugInformationHandle): DNCustomDebugInformation; overload;
    function GetCustomDebugInformation(handle: DNEntityHandle): DNCustomDebugInformationHandleCollection; overload;
    function GetLocalScopes(handle: DNMethodDefinitionHandle): DNLocalScopeHandleCollection; overload;
    function GetLocalScopes(handle: DNMethodDebugInformationHandle): DNLocalScopeHandleCollection; overload;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property MetadataPointer: PByte read get_MetadataPointer;
    property MetadataLength: Int32 read get_MetadataLength;
    property Options: DNMetadataReaderOptions read get_Options;
    property MetadataVersion: string read get_MetadataVersion;
    property DebugMetadataHeader: DNDebugMetadataHeader read get_DebugMetadataHeader;
    property MetadataKind: DNMetadataKind read get_MetadataKind;
    property StringComparer: DNMetadataStringComparer read get_StringComparer;
    property UTF8Decoder: DNMetadataStringDecoder read get_UTF8Decoder;
    property IsAssembly: Boolean read get_IsAssembly;
    property AssemblyReferences: DNAssemblyReferenceHandleCollection read get_AssemblyReferences;
    property TypeDefinitions: DNTypeDefinitionHandleCollection read get_TypeDefinitions;
    property TypeReferences: DNTypeReferenceHandleCollection read get_TypeReferences;
    property CustomAttributes: DNCustomAttributeHandleCollection read get_CustomAttributes;
    property DeclarativeSecurityAttributes: DNDeclarativeSecurityAttributeHandleCollection read get_DeclarativeSecurityAttributes;
    property MemberReferences: DNMemberReferenceHandleCollection read get_MemberReferences;
    property ManifestResources: DNManifestResourceHandleCollection read get_ManifestResources;
    property AssemblyFiles: DNAssemblyFileHandleCollection read get_AssemblyFiles;
    property ExportedTypes: DNExportedTypeHandleCollection read get_ExportedTypes;
    property MethodDefinitions: DNMethodDefinitionHandleCollection read get_MethodDefinitions;
    property FieldDefinitions: DNFieldDefinitionHandleCollection read get_FieldDefinitions;
    property EventDefinitions: DNEventDefinitionHandleCollection read get_EventDefinitions;
    property PropertyDefinitions: DNPropertyDefinitionHandleCollection read get_PropertyDefinitions;
    property Documents: DNDocumentHandleCollection read get_Documents;
    property MethodDebugInformation: DNMethodDebugInformationHandleCollection read get_MethodDebugInformation;
    property LocalScopes: DNLocalScopeHandleCollection read get_LocalScopes;
    property LocalVariables: DNLocalVariableHandleCollection read get_LocalVariables;
    property LocalConstants: DNLocalConstantHandleCollection read get_LocalConstants;
    property ImportScopes: DNImportScopeCollection read get_ImportScopes;
    property CustomDebugInformation: DNCustomDebugInformationHandleCollection read get_CustomDebugInformation;
  end;

  TDNMetadataReader = class(TDNGenericImport<DNMetadataReaderClass, DNMetadataReader>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNMetadataReaderProviderClass = interface(DNObjectClass)
  ['{6CA8BB98-371B-52C4-92A4-7190CEA30F54}']
  { static methods } 

    {class} function FromPortablePdbImage(start: PByte; size: Int32): DNMetadataReaderProvider; overload;
    {class} function FromMetadataImage(start: PByte; size: Int32): DNMetadataReaderProvider; overload;
    {class} function FromPortablePdbImage(image: DDNC.System.Collections.Immutable.DNImmutableArray<Byte>): DNMetadataReaderProvider; overload;
    {class} function FromMetadataImage(image: DDNC.System.Collections.Immutable.DNImmutableArray<Byte>): DNMetadataReaderProvider; overload;
    {class} function FromPortablePdbStream(stream: DDNC.System.Private.CoreLib.DNStream; options: DNMetadataStreamOptions; size: Int32): DNMetadataReaderProvider;
    {class} function FromMetadataStream(stream: DDNC.System.Private.CoreLib.DNStream; options: DNMetadataStreamOptions; size: Int32): DNMetadataReaderProvider;

  end;

  [DNTypeName('System.Reflection.Metadata.MetadataReaderProvider')]
  DNMetadataReaderProvider = interface(DDNC.System.Private.CoreLib.DNIDisposable)
  ['{146DEEB6-E5D9-3C9C-B30A-4E557A044BB7}']
  { methods } 

    procedure Dispose;
    function GetMetadataReader(options: DNMetadataReaderOptions; utf8Decoder: DNMetadataStringDecoder): DNMetadataReader;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNMetadataReaderProvider = class(TDNGenericImport<DNMetadataReaderProviderClass, DNMetadataReaderProvider>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNMetadataStringDecoderClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{20DE7F70-0249-51B0-B5DA-E3048839DAAD}']
  { static getter & setter } 

    {class} function get_DefaultUTF8: DNMetadataStringDecoder;

  { constructors } 

    {class} function init(encoding: DDNC.System.Private.CoreLib.DNEncoding): DNMetadataStringDecoder;

  { static propertys } 

    {class} property DefaultUTF8: DNMetadataStringDecoder read get_DefaultUTF8;
  end;

  [DNTypeName('System.Reflection.Metadata.MetadataStringDecoder')]
  DNMetadataStringDecoder = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{B53FECA4-0B37-3CE7-B554-507F848678E5}']
  { getters & setters } 

    function get_Encoding: DDNC.System.Private.CoreLib.DNEncoding;

  { methods } 

    function GetString(bytes: PByte; byteCount: Int32): string;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Encoding: DDNC.System.Private.CoreLib.DNEncoding read get_Encoding;
  end;

  TDNMetadataStringDecoder = class(TDNGenericImport<DNMetadataStringDecoderClass, DNMetadataStringDecoder>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNMethodBodyBlockClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{4DFC17B7-3C03-5DBB-84BB-DE7F29A6A5B1}']
  { static methods } 

    {class} function Create(reader: DNBlobReader): DNMethodBodyBlock;

  end;

  [DNTypeName('System.Reflection.Metadata.MethodBodyBlock')]
  DNMethodBodyBlock = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{DAB41EF3-F26E-384C-945E-5EBD0226EA85}']
  { getters & setters } 

    function get_Size: Int32;
    function get_MaxStack: Int32;
    function get_LocalVariablesInitialized: Boolean;
    function get_LocalSignature: DNStandaloneSignatureHandle;
    function get_ExceptionRegions: DDNC.System.Collections.Immutable.DNImmutableArray<DNExceptionRegion>;

  { methods } 

    function GetILBytes: TArray<Byte>;
    function GetILContent: DDNC.System.Collections.Immutable.DNImmutableArray<Byte>;
    function GetILReader: DNBlobReader;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Size: Int32 read get_Size;
    property MaxStack: Int32 read get_MaxStack;
    property LocalVariablesInitialized: Boolean read get_LocalVariablesInitialized;
    property LocalSignature: DNStandaloneSignatureHandle read get_LocalSignature;
    property ExceptionRegions: DDNC.System.Collections.Immutable.DNImmutableArray<DNExceptionRegion> read get_ExceptionRegions;
  end;

  TDNMethodBodyBlock = class(TDNGenericImport<DNMethodBodyBlockClass, DNMethodBodyBlock>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNPEReaderExtensionsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{DBA45969-1316-5585-A18B-813AA12E4053}']
  { static methods } 

    {class} function GetMethodBody(peReader: DNPEReader; relativeVirtualAddress: Int32): DNMethodBodyBlock;
    {class} function GetMetadataReader(peReader: DNPEReader): DNMetadataReader; overload;
    {class} function GetMetadataReader(peReader: DNPEReader; options: DNMetadataReaderOptions): DNMetadataReader; overload;
    {class} function GetMetadataReader(peReader: DNPEReader; options: DNMetadataReaderOptions; utf8Decoder: DNMetadataStringDecoder): DNMetadataReader; overload;

  end;

  [DNTypeName('System.Reflection.Metadata.PEReaderExtensions')]
  DNPEReaderExtensions = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{E5D25EAD-9A18-36B4-AC3A-A256AD94BE06}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNPEReaderExtensions = class(TDNGenericImport<DNPEReaderExtensionsClass, DNPEReaderExtensions>) end;

  //-------------namespace: System.Reflection.PortableExecutable----------------
  DNCoffHeaderClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{C0D1AA43-2F81-50B9-82EE-150A26D8CC8F}']
  end;

  [DNTypeName('System.Reflection.PortableExecutable.CoffHeader')]
  DNCoffHeader = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{35ED2654-891F-3605-BD00-82F93425ADC8}']
  { getters & setters } 

    function get_Machine: DNMachine;
    function get_NumberOfSections: Int16;
    function get_TimeDateStamp: Int32;
    function get_PointerToSymbolTable: Int32;
    function get_NumberOfSymbols: Int32;
    function get_SizeOfOptionalHeader: Int16;
    function get_Characteristics: DNCharacteristics;

  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Machine: DNMachine read get_Machine;
    property NumberOfSections: Int16 read get_NumberOfSections;
    property TimeDateStamp: Int32 read get_TimeDateStamp;
    property PointerToSymbolTable: Int32 read get_PointerToSymbolTable;
    property NumberOfSymbols: Int32 read get_NumberOfSymbols;
    property SizeOfOptionalHeader: Int16 read get_SizeOfOptionalHeader;
    property Characteristics: DNCharacteristics read get_Characteristics;
  end;

  TDNCoffHeader = class(TDNGenericImport<DNCoffHeaderClass, DNCoffHeader>) end;

  //-------------namespace: System.Reflection.PortableExecutable----------------
  DNCorHeaderClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{42D2F6B2-58C1-5FBE-AE98-141BC35EC974}']
  end;

  [DNTypeName('System.Reflection.PortableExecutable.CorHeader')]
  DNCorHeader = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{B133D036-5D43-345D-B4EB-04FA410ACBA1}']
  { getters & setters } 

    function get_MajorRuntimeVersion: UInt16;
    function get_MinorRuntimeVersion: UInt16;
    function get_MetadataDirectory: DNDirectoryEntry;
    function get_Flags: DNCorFlags;
    function get_EntryPointTokenOrRelativeVirtualAddress: Int32;
    function get_ResourcesDirectory: DNDirectoryEntry;
    function get_StrongNameSignatureDirectory: DNDirectoryEntry;
    function get_CodeManagerTableDirectory: DNDirectoryEntry;
    function get_VtableFixupsDirectory: DNDirectoryEntry;
    function get_ExportAddressTableJumpsDirectory: DNDirectoryEntry;
    function get_ManagedNativeHeaderDirectory: DNDirectoryEntry;

  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property MajorRuntimeVersion: UInt16 read get_MajorRuntimeVersion;
    property MinorRuntimeVersion: UInt16 read get_MinorRuntimeVersion;
    property MetadataDirectory: DNDirectoryEntry read get_MetadataDirectory;
    property Flags: DNCorFlags read get_Flags;
    property EntryPointTokenOrRelativeVirtualAddress: Int32 read get_EntryPointTokenOrRelativeVirtualAddress;
    property ResourcesDirectory: DNDirectoryEntry read get_ResourcesDirectory;
    property StrongNameSignatureDirectory: DNDirectoryEntry read get_StrongNameSignatureDirectory;
    property CodeManagerTableDirectory: DNDirectoryEntry read get_CodeManagerTableDirectory;
    property VtableFixupsDirectory: DNDirectoryEntry read get_VtableFixupsDirectory;
    property ExportAddressTableJumpsDirectory: DNDirectoryEntry read get_ExportAddressTableJumpsDirectory;
    property ManagedNativeHeaderDirectory: DNDirectoryEntry read get_ManagedNativeHeaderDirectory;
  end;

  TDNCorHeader = class(TDNGenericImport<DNCorHeaderClass, DNCorHeader>) end;

  //-------------namespace: System.Reflection.PortableExecutable----------------
  DNDebugDirectoryBuilderClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{47C0C2D3-D92D-5D44-A4C8-6BE6677203D5}']
  { constructors } 

    {class} function init: DNDebugDirectoryBuilder;

  end;

  [DNTypeName('System.Reflection.PortableExecutable.DebugDirectoryBuilder')]
  DNDebugDirectoryBuilder = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{E58BE527-1F11-34AB-85DD-418803054CF8}']
  { methods } 

    procedure AddEntry(&type: DNDebugDirectoryEntryType; version: UInt32; stamp: UInt32); overload;
    procedure AddCodeViewEntry(pdbPath: string; pdbContentId: DNBlobContentId; portablePdbVersion: UInt16);
    procedure AddReproducibleEntry;
    procedure AddPdbChecksumEntry(algorithmName: string; checksum: DDNC.System.Collections.Immutable.DNImmutableArray<Byte>);
    procedure AddEmbeddedPortablePdbEntry(debugMetadata: DNBlobBuilder; portablePdbVersion: UInt16);
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNDebugDirectoryBuilder = class(TDNGenericImport<DNDebugDirectoryBuilderClass, DNDebugDirectoryBuilder>) end;

  //-------------namespace: System.Reflection.PortableExecutable----------------
  DNPEBuilderClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{E8E7E83B-AAB7-51CE-9EFD-EA412ADD8B14}']
  end;

  [DNTypeName('System.Reflection.PortableExecutable.PEBuilder')]
  DNPEBuilder = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{48561401-4845-3004-9E2E-8E9A91B49D4B}']
  { getters & setters } 

    function get_Header: DNPEHeaderBuilder;
    function get_IdProvider: DDNC.System.Private.CoreLib.DNFunc<DDNC.System.Private.CoreLib.DNIEnumerable<DNBlob>, DNBlobContentId>;
    function get_IsDeterministic: Boolean;

  { methods } 

    function Serialize(builder: DNBlobBuilder): DNBlobContentId;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Header: DNPEHeaderBuilder read get_Header;
    property IdProvider: DDNC.System.Private.CoreLib.DNFunc<DDNC.System.Private.CoreLib.DNIEnumerable<DNBlob>, DNBlobContentId> read get_IdProvider;
    property IsDeterministic: Boolean read get_IsDeterministic;
  end;

  TDNPEBuilder = class(TDNGenericImport<DNPEBuilderClass, DNPEBuilder>) end;

  //-------------namespace: System.Reflection.PortableExecutable----------------
  DNManagedPEBuilderClass = interface(DNPEBuilderClass)
  ['{8DE96903-0982-5220-B844-32B19F732B71}']
  { constructors } 

    {class} function init(header: DNPEHeaderBuilder; metadataRootBuilder: DNMetadataRootBuilder; ilStream: DNBlobBuilder; mappedFieldData: DNBlobBuilder; managedResources: DNBlobBuilder; nativeResources: DNResourceSectionBuilder; debugDirectoryBuilder: DNDebugDirectoryBuilder; strongNameSignatureSize: Int32; entryPoint: DNMethodDefinitionHandle; flags: DNCorFlags; deterministicIdProvider: DDNC.System.Private.CoreLib.DNFunc<DDNC.System.Private.CoreLib.DNIEnumerable<DNBlob>, DNBlobContentId>): DNManagedPEBuilder;

  end;

  [DNTypeName('System.Reflection.PortableExecutable.ManagedPEBuilder')]
  DNManagedPEBuilder = interface(DNPEBuilder)
  ['{52FBE868-C082-3262-B044-1ED399F6F871}']
  { getters & setters } 

    function get_Header: DNPEHeaderBuilder;
    function get_IdProvider: DDNC.System.Private.CoreLib.DNFunc<DDNC.System.Private.CoreLib.DNIEnumerable<DNBlob>, DNBlobContentId>;
    function get_IsDeterministic: Boolean;

  { methods } 

    procedure Sign(peImage: DNBlobBuilder; signatureProvider: DDNC.System.Private.CoreLib.DNFunc<DDNC.System.Private.CoreLib.DNIEnumerable<DNBlob>, TArray<Byte>>);
    function Serialize(builder: DNBlobBuilder): DNBlobContentId;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Header: DNPEHeaderBuilder read get_Header;
    property IdProvider: DDNC.System.Private.CoreLib.DNFunc<DDNC.System.Private.CoreLib.DNIEnumerable<DNBlob>, DNBlobContentId> read get_IdProvider;
    property IsDeterministic: Boolean read get_IsDeterministic;
  end;

  TDNManagedPEBuilder = class(TDNGenericImport<DNManagedPEBuilderClass, DNManagedPEBuilder>)
  public const
   ManagedResourcesDataAlignment = 8;
   MappedFieldDataAlignment = 8;
  end;

  //-------------namespace: System.Reflection.PortableExecutable----------------
  DNPEDirectoriesBuilderClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{A398F780-1866-58AF-83D4-9BF6A00D2887}']
  { constructors } 

    {class} function init: DNPEDirectoriesBuilder;

  end;

  [DNTypeName('System.Reflection.PortableExecutable.PEDirectoriesBuilder')]
  DNPEDirectoriesBuilder = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{66566792-201D-3B42-AE3C-F1809B50FC18}']
  { getters & setters } 

    function get_AddressOfEntryPoint: Int32;
    procedure set_AddressOfEntryPoint(value: Int32);
    function get_ExportTable: DNDirectoryEntry;
    procedure set_ExportTable(value: DNDirectoryEntry);
    function get_ImportTable: DNDirectoryEntry;
    procedure set_ImportTable(value: DNDirectoryEntry);
    function get_ResourceTable: DNDirectoryEntry;
    procedure set_ResourceTable(value: DNDirectoryEntry);
    function get_ExceptionTable: DNDirectoryEntry;
    procedure set_ExceptionTable(value: DNDirectoryEntry);
    function get_BaseRelocationTable: DNDirectoryEntry;
    procedure set_BaseRelocationTable(value: DNDirectoryEntry);
    function get_DebugTable: DNDirectoryEntry;
    procedure set_DebugTable(value: DNDirectoryEntry);
    function get_CopyrightTable: DNDirectoryEntry;
    procedure set_CopyrightTable(value: DNDirectoryEntry);
    function get_GlobalPointerTable: DNDirectoryEntry;
    procedure set_GlobalPointerTable(value: DNDirectoryEntry);
    function get_ThreadLocalStorageTable: DNDirectoryEntry;
    procedure set_ThreadLocalStorageTable(value: DNDirectoryEntry);
    function get_LoadConfigTable: DNDirectoryEntry;
    procedure set_LoadConfigTable(value: DNDirectoryEntry);
    function get_BoundImportTable: DNDirectoryEntry;
    procedure set_BoundImportTable(value: DNDirectoryEntry);
    function get_ImportAddressTable: DNDirectoryEntry;
    procedure set_ImportAddressTable(value: DNDirectoryEntry);
    function get_DelayImportTable: DNDirectoryEntry;
    procedure set_DelayImportTable(value: DNDirectoryEntry);
    function get_CorHeaderTable: DNDirectoryEntry;
    procedure set_CorHeaderTable(value: DNDirectoryEntry);

  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property AddressOfEntryPoint: Int32 read get_AddressOfEntryPoint write set_AddressOfEntryPoint;
    property ExportTable: DNDirectoryEntry read get_ExportTable write set_ExportTable;
    property ImportTable: DNDirectoryEntry read get_ImportTable write set_ImportTable;
    property ResourceTable: DNDirectoryEntry read get_ResourceTable write set_ResourceTable;
    property ExceptionTable: DNDirectoryEntry read get_ExceptionTable write set_ExceptionTable;
    property BaseRelocationTable: DNDirectoryEntry read get_BaseRelocationTable write set_BaseRelocationTable;
    property DebugTable: DNDirectoryEntry read get_DebugTable write set_DebugTable;
    property CopyrightTable: DNDirectoryEntry read get_CopyrightTable write set_CopyrightTable;
    property GlobalPointerTable: DNDirectoryEntry read get_GlobalPointerTable write set_GlobalPointerTable;
    property ThreadLocalStorageTable: DNDirectoryEntry read get_ThreadLocalStorageTable write set_ThreadLocalStorageTable;
    property LoadConfigTable: DNDirectoryEntry read get_LoadConfigTable write set_LoadConfigTable;
    property BoundImportTable: DNDirectoryEntry read get_BoundImportTable write set_BoundImportTable;
    property ImportAddressTable: DNDirectoryEntry read get_ImportAddressTable write set_ImportAddressTable;
    property DelayImportTable: DNDirectoryEntry read get_DelayImportTable write set_DelayImportTable;
    property CorHeaderTable: DNDirectoryEntry read get_CorHeaderTable write set_CorHeaderTable;
  end;

  TDNPEDirectoriesBuilder = class(TDNGenericImport<DNPEDirectoriesBuilderClass, DNPEDirectoriesBuilder>) end;

  //-------------namespace: System.Reflection.PortableExecutable----------------
  DNPEHeaderClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{4207E5B3-1A9E-5350-A86A-0E5F598300E2}']
  end;

  [DNTypeName('System.Reflection.PortableExecutable.PEHeader')]
  DNPEHeader = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{ABD8CE79-A893-32DA-A762-FEBDA52003DD}']
  { getters & setters } 

    function get_Magic: DNPEMagic;
    function get_MajorLinkerVersion: Byte;
    function get_MinorLinkerVersion: Byte;
    function get_SizeOfCode: Int32;
    function get_SizeOfInitializedData: Int32;
    function get_SizeOfUninitializedData: Int32;
    function get_AddressOfEntryPoint: Int32;
    function get_BaseOfCode: Int32;
    function get_BaseOfData: Int32;
    function get_ImageBase: UInt64;
    function get_SectionAlignment: Int32;
    function get_FileAlignment: Int32;
    function get_MajorOperatingSystemVersion: UInt16;
    function get_MinorOperatingSystemVersion: UInt16;
    function get_MajorImageVersion: UInt16;
    function get_MinorImageVersion: UInt16;
    function get_MajorSubsystemVersion: UInt16;
    function get_MinorSubsystemVersion: UInt16;
    function get_SizeOfImage: Int32;
    function get_SizeOfHeaders: Int32;
    function get_CheckSum: UInt32;
    function get_Subsystem: DNSubsystem;
    function get_DllCharacteristics: DNDllCharacteristics;
    function get_SizeOfStackReserve: UInt64;
    function get_SizeOfStackCommit: UInt64;
    function get_SizeOfHeapReserve: UInt64;
    function get_SizeOfHeapCommit: UInt64;
    function get_NumberOfRvaAndSizes: Int32;
    function get_ExportTableDirectory: DNDirectoryEntry;
    function get_ImportTableDirectory: DNDirectoryEntry;
    function get_ResourceTableDirectory: DNDirectoryEntry;
    function get_ExceptionTableDirectory: DNDirectoryEntry;
    function get_CertificateTableDirectory: DNDirectoryEntry;
    function get_BaseRelocationTableDirectory: DNDirectoryEntry;
    function get_DebugTableDirectory: DNDirectoryEntry;
    function get_CopyrightTableDirectory: DNDirectoryEntry;
    function get_GlobalPointerTableDirectory: DNDirectoryEntry;
    function get_ThreadLocalStorageTableDirectory: DNDirectoryEntry;
    function get_LoadConfigTableDirectory: DNDirectoryEntry;
    function get_BoundImportTableDirectory: DNDirectoryEntry;
    function get_ImportAddressTableDirectory: DNDirectoryEntry;
    function get_DelayImportTableDirectory: DNDirectoryEntry;
    function get_CorHeaderTableDirectory: DNDirectoryEntry;

  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Magic: DNPEMagic read get_Magic;
    property MajorLinkerVersion: Byte read get_MajorLinkerVersion;
    property MinorLinkerVersion: Byte read get_MinorLinkerVersion;
    property SizeOfCode: Int32 read get_SizeOfCode;
    property SizeOfInitializedData: Int32 read get_SizeOfInitializedData;
    property SizeOfUninitializedData: Int32 read get_SizeOfUninitializedData;
    property AddressOfEntryPoint: Int32 read get_AddressOfEntryPoint;
    property BaseOfCode: Int32 read get_BaseOfCode;
    property BaseOfData: Int32 read get_BaseOfData;
    property ImageBase: UInt64 read get_ImageBase;
    property SectionAlignment: Int32 read get_SectionAlignment;
    property FileAlignment: Int32 read get_FileAlignment;
    property MajorOperatingSystemVersion: UInt16 read get_MajorOperatingSystemVersion;
    property MinorOperatingSystemVersion: UInt16 read get_MinorOperatingSystemVersion;
    property MajorImageVersion: UInt16 read get_MajorImageVersion;
    property MinorImageVersion: UInt16 read get_MinorImageVersion;
    property MajorSubsystemVersion: UInt16 read get_MajorSubsystemVersion;
    property MinorSubsystemVersion: UInt16 read get_MinorSubsystemVersion;
    property SizeOfImage: Int32 read get_SizeOfImage;
    property SizeOfHeaders: Int32 read get_SizeOfHeaders;
    property CheckSum: UInt32 read get_CheckSum;
    property Subsystem: DNSubsystem read get_Subsystem;
    property DllCharacteristics: DNDllCharacteristics read get_DllCharacteristics;
    property SizeOfStackReserve: UInt64 read get_SizeOfStackReserve;
    property SizeOfStackCommit: UInt64 read get_SizeOfStackCommit;
    property SizeOfHeapReserve: UInt64 read get_SizeOfHeapReserve;
    property SizeOfHeapCommit: UInt64 read get_SizeOfHeapCommit;
    property NumberOfRvaAndSizes: Int32 read get_NumberOfRvaAndSizes;
    property ExportTableDirectory: DNDirectoryEntry read get_ExportTableDirectory;
    property ImportTableDirectory: DNDirectoryEntry read get_ImportTableDirectory;
    property ResourceTableDirectory: DNDirectoryEntry read get_ResourceTableDirectory;
    property ExceptionTableDirectory: DNDirectoryEntry read get_ExceptionTableDirectory;
    property CertificateTableDirectory: DNDirectoryEntry read get_CertificateTableDirectory;
    property BaseRelocationTableDirectory: DNDirectoryEntry read get_BaseRelocationTableDirectory;
    property DebugTableDirectory: DNDirectoryEntry read get_DebugTableDirectory;
    property CopyrightTableDirectory: DNDirectoryEntry read get_CopyrightTableDirectory;
    property GlobalPointerTableDirectory: DNDirectoryEntry read get_GlobalPointerTableDirectory;
    property ThreadLocalStorageTableDirectory: DNDirectoryEntry read get_ThreadLocalStorageTableDirectory;
    property LoadConfigTableDirectory: DNDirectoryEntry read get_LoadConfigTableDirectory;
    property BoundImportTableDirectory: DNDirectoryEntry read get_BoundImportTableDirectory;
    property ImportAddressTableDirectory: DNDirectoryEntry read get_ImportAddressTableDirectory;
    property DelayImportTableDirectory: DNDirectoryEntry read get_DelayImportTableDirectory;
    property CorHeaderTableDirectory: DNDirectoryEntry read get_CorHeaderTableDirectory;
  end;

  TDNPEHeader = class(TDNGenericImport<DNPEHeaderClass, DNPEHeader>) end;

  //-------------namespace: System.Reflection.PortableExecutable----------------
  DNPEHeaderBuilderClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{4BA6F3EB-4AD5-5AAC-935C-657995483456}']
  { constructors } 

    {class} function init(machine: DNMachine; sectionAlignment: Int32; fileAlignment: Int32; imageBase: UInt64; majorLinkerVersion: Byte; minorLinkerVersion: Byte; majorOperatingSystemVersion: UInt16; minorOperatingSystemVersion: UInt16; majorImageVersion: UInt16; minorImageVersion: UInt16; majorSubsystemVersion: UInt16; minorSubsystemVersion: UInt16; subsystem: DNSubsystem; dllCharacteristics: DNDllCharacteristics; imageCharacteristics: DNCharacteristics; sizeOfStackReserve: UInt64; sizeOfStackCommit: UInt64; sizeOfHeapReserve: UInt64; sizeOfHeapCommit: UInt64): DNPEHeaderBuilder;

  { static methods } 

    {class} function CreateExecutableHeader: DNPEHeaderBuilder;
    {class} function CreateLibraryHeader: DNPEHeaderBuilder;

  end;

  [DNTypeName('System.Reflection.PortableExecutable.PEHeaderBuilder')]
  DNPEHeaderBuilder = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{151CEE0F-4DF2-303E-B6D4-9E670F47554E}']
  { getters & setters } 

    function get_Machine: DNMachine;
    function get_ImageCharacteristics: DNCharacteristics;
    function get_MajorLinkerVersion: Byte;
    function get_MinorLinkerVersion: Byte;
    function get_ImageBase: UInt64;
    function get_SectionAlignment: Int32;
    function get_FileAlignment: Int32;
    function get_MajorOperatingSystemVersion: UInt16;
    function get_MinorOperatingSystemVersion: UInt16;
    function get_MajorImageVersion: UInt16;
    function get_MinorImageVersion: UInt16;
    function get_MajorSubsystemVersion: UInt16;
    function get_MinorSubsystemVersion: UInt16;
    function get_Subsystem: DNSubsystem;
    function get_DllCharacteristics: DNDllCharacteristics;
    function get_SizeOfStackReserve: UInt64;
    function get_SizeOfStackCommit: UInt64;
    function get_SizeOfHeapReserve: UInt64;
    function get_SizeOfHeapCommit: UInt64;

  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Machine: DNMachine read get_Machine;
    property ImageCharacteristics: DNCharacteristics read get_ImageCharacteristics;
    property MajorLinkerVersion: Byte read get_MajorLinkerVersion;
    property MinorLinkerVersion: Byte read get_MinorLinkerVersion;
    property ImageBase: UInt64 read get_ImageBase;
    property SectionAlignment: Int32 read get_SectionAlignment;
    property FileAlignment: Int32 read get_FileAlignment;
    property MajorOperatingSystemVersion: UInt16 read get_MajorOperatingSystemVersion;
    property MinorOperatingSystemVersion: UInt16 read get_MinorOperatingSystemVersion;
    property MajorImageVersion: UInt16 read get_MajorImageVersion;
    property MinorImageVersion: UInt16 read get_MinorImageVersion;
    property MajorSubsystemVersion: UInt16 read get_MajorSubsystemVersion;
    property MinorSubsystemVersion: UInt16 read get_MinorSubsystemVersion;
    property Subsystem: DNSubsystem read get_Subsystem;
    property DllCharacteristics: DNDllCharacteristics read get_DllCharacteristics;
    property SizeOfStackReserve: UInt64 read get_SizeOfStackReserve;
    property SizeOfStackCommit: UInt64 read get_SizeOfStackCommit;
    property SizeOfHeapReserve: UInt64 read get_SizeOfHeapReserve;
    property SizeOfHeapCommit: UInt64 read get_SizeOfHeapCommit;
  end;

  TDNPEHeaderBuilder = class(TDNGenericImport<DNPEHeaderBuilderClass, DNPEHeaderBuilder>) end;

  //-------------namespace: System.Reflection.PortableExecutable----------------
  DNPEHeadersClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{F28305FE-8C88-54FB-A7FD-D77F02D460AC}']
  { constructors } 

    {class} function init(peStream: DDNC.System.Private.CoreLib.DNStream): DNPEHeaders; overload;
    {class} function init(peStream: DDNC.System.Private.CoreLib.DNStream; size: Int32): DNPEHeaders; overload;
    {class} function init(peStream: DDNC.System.Private.CoreLib.DNStream; size: Int32; isLoadedImage: Boolean): DNPEHeaders; overload;

  end;

  [DNTypeName('System.Reflection.PortableExecutable.PEHeaders')]
  DNPEHeaders = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{4E3E1C3C-81C9-39EF-885A-5DCBA972FC44}']
  { getters & setters } 

    function get_MetadataStartOffset: Int32;
    function get_MetadataSize: Int32;
    function get_CoffHeader: DNCoffHeader;
    function get_CoffHeaderStartOffset: Int32;
    function get_IsCoffOnly: Boolean;
    function get_PEHeader: DNPEHeader;
    function get_PEHeaderStartOffset: Int32;
    function get_SectionHeaders: DDNC.System.Collections.Immutable.DNImmutableArray<DNSectionHeader>;
    function get_CorHeader: DNCorHeader;
    function get_CorHeaderStartOffset: Int32;
    function get_IsConsoleApplication: Boolean;
    function get_IsDll: Boolean;
    function get_IsExe: Boolean;

  { methods } 

    function TryGetDirectoryOffset(directory: DNDirectoryEntry; out offset: Int32): Boolean;
    function GetContainingSectionIndex(relativeVirtualAddress: Int32): Int32;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property MetadataStartOffset: Int32 read get_MetadataStartOffset;
    property MetadataSize: Int32 read get_MetadataSize;
    property CoffHeader: DNCoffHeader read get_CoffHeader;
    property CoffHeaderStartOffset: Int32 read get_CoffHeaderStartOffset;
    property IsCoffOnly: Boolean read get_IsCoffOnly;
    property PEHeader: DNPEHeader read get_PEHeader;
    property PEHeaderStartOffset: Int32 read get_PEHeaderStartOffset;
    property SectionHeaders: DDNC.System.Collections.Immutable.DNImmutableArray<DNSectionHeader> read get_SectionHeaders;
    property CorHeader: DNCorHeader read get_CorHeader;
    property CorHeaderStartOffset: Int32 read get_CorHeaderStartOffset;
    property IsConsoleApplication: Boolean read get_IsConsoleApplication;
    property IsDll: Boolean read get_IsDll;
    property IsExe: Boolean read get_IsExe;
  end;

  TDNPEHeaders = class(TDNGenericImport<DNPEHeadersClass, DNPEHeaders>) end;

  //-------------namespace: System.Reflection.PortableExecutable----------------
  DNPEReaderClass = interface(DNObjectClass)
  ['{874FEBA2-A404-534E-A3D8-CC4E4554705D}']
  { constructors } 

    {class} function init(peImage: PByte; size: Int32): DNPEReader; overload;
    {class} function init(peImage: PByte; size: Int32; isLoadedImage: Boolean): DNPEReader; overload;
    {class} function init(peStream: DDNC.System.Private.CoreLib.DNStream): DNPEReader; overload;
    {class} function init(peStream: DDNC.System.Private.CoreLib.DNStream; options: DNPEStreamOptions): DNPEReader; overload;
    {class} function init(peStream: DDNC.System.Private.CoreLib.DNStream; options: DNPEStreamOptions; size: Int32): DNPEReader; overload;
    {class} function init(peImage: DDNC.System.Collections.Immutable.DNImmutableArray<Byte>): DNPEReader; overload;

  end;

  [DNTypeName('System.Reflection.PortableExecutable.PEReader')]
  DNPEReader = interface(DDNC.System.Private.CoreLib.DNIDisposable)
  ['{51DC9DB1-BC19-3842-8049-1E3D52383A3B}']
  { getters & setters } 

    function get_IsLoadedImage: Boolean;
    function get_PEHeaders: DNPEHeaders;
    function get_IsEntireImageAvailable: Boolean;
    function get_HasMetadata: Boolean;

  { methods } 

    procedure Dispose;
    function GetEntireImage: DNPEMemoryBlock;
    function GetMetadata: DNPEMemoryBlock;
    function GetSectionData(relativeVirtualAddress: Int32): DNPEMemoryBlock; overload;
    function GetSectionData(sectionName: string): DNPEMemoryBlock; overload;
    function ReadDebugDirectory: DDNC.System.Collections.Immutable.DNImmutableArray<DNDebugDirectoryEntry>;
    function ReadCodeViewDebugDirectoryData(entry: DNDebugDirectoryEntry): DNCodeViewDebugDirectoryData;
    function ReadPdbChecksumDebugDirectoryData(entry: DNDebugDirectoryEntry): DNPdbChecksumDebugDirectoryData;
    function TryOpenAssociatedPortablePdb(peImagePath: string; pdbFileStreamProvider: DDNC.System.Private.CoreLib.DNFunc<string, DDNC.System.Private.CoreLib.DNStream>; out pdbReaderProvider: DNMetadataReaderProvider; out pdbPath: string): Boolean;
    function ReadEmbeddedPortablePdbDebugDirectoryData(entry: DNDebugDirectoryEntry): DNMetadataReaderProvider;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsLoadedImage: Boolean read get_IsLoadedImage;
    property PEHeaders: DNPEHeaders read get_PEHeaders;
    property IsEntireImageAvailable: Boolean read get_IsEntireImageAvailable;
    property HasMetadata: Boolean read get_HasMetadata;
  end;

  TDNPEReader = class(TDNGenericImport<DNPEReaderClass, DNPEReader>) end;

  //-------------namespace: System.Reflection.PortableExecutable----------------
  DNResourceSectionBuilderClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{05F7DD24-C25A-5083-915D-52C98C0660F2}']
  end;

  [DNTypeName('System.Reflection.PortableExecutable.ResourceSectionBuilder')]
  DNResourceSectionBuilder = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{01062DE2-D37D-32CD-943B-E4644000EAA0}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNResourceSectionBuilder = class(TDNGenericImport<DNResourceSectionBuilderClass, DNResourceSectionBuilder>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNArrayShapeClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{A5D2FBCA-48BB-5CFC-856F-11B175EDA099}']
  { constructors } 

    {class} function init(rank: Int32; sizes: DDNC.System.Collections.Immutable.DNImmutableArray<Int32>; lowerBounds: DDNC.System.Collections.Immutable.DNImmutableArray<Int32>): DNArrayShape;

  end;

  [DNTypeName('System.Reflection.Metadata.ArrayShape')]
  DNArrayShape = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{5D90D95E-B009-34FA-8253-FFC64084B607}']
  { getters & setters } 

    function get_Rank: Int32;
    function get_Sizes: DDNC.System.Collections.Immutable.DNImmutableArray<Int32>;
    function get_LowerBounds: DDNC.System.Collections.Immutable.DNImmutableArray<Int32>;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Rank: Int32 read get_Rank;
    property Sizes: DDNC.System.Collections.Immutable.DNImmutableArray<Int32> read get_Sizes;
    property LowerBounds: DDNC.System.Collections.Immutable.DNImmutableArray<Int32> read get_LowerBounds;
  end;

  TDNArrayShape = class(TDNGenericImport<DNArrayShapeClass, DNArrayShape>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNAssemblyDefinitionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{F38996CA-3612-5A8D-B291-D28BE3DC806B}']
  end;

  [DNTypeName('System.Reflection.Metadata.AssemblyDefinition')]
  DNAssemblyDefinition = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{831CEDFA-03E4-3EB1-B15A-4F24BE3E95E7}']
  { getters & setters } 

    function get_HashAlgorithm: DNAssemblyHashAlgorithm;
    function get_Version: DDNC.System.Private.CoreLib.DNVersion;
    function get_Flags: DNAssemblyFlags;
    function get_Name: DNStringHandle;
    function get_Culture: DNStringHandle;
    function get_PublicKey: DNBlobHandle;

  { methods } 

    function GetAssemblyName: DDNC.System.Private.CoreLib.DNAssemblyName;
    function GetCustomAttributes: DNCustomAttributeHandleCollection;
    function GetDeclarativeSecurityAttributes: DNDeclarativeSecurityAttributeHandleCollection;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property HashAlgorithm: DNAssemblyHashAlgorithm read get_HashAlgorithm;
    property Version: DDNC.System.Private.CoreLib.DNVersion read get_Version;
    property Flags: DNAssemblyFlags read get_Flags;
    property Name: DNStringHandle read get_Name;
    property Culture: DNStringHandle read get_Culture;
    property PublicKey: DNBlobHandle read get_PublicKey;
  end;

  TDNAssemblyDefinition = class(TDNGenericImport<DNAssemblyDefinitionClass, DNAssemblyDefinition>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNAssemblyDefinitionHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{4F9D3624-A0D7-5A56-8998-A04E3378C85C}']
  end;

  [DNTypeName('System.Reflection.Metadata.AssemblyDefinitionHandle')]
  DNAssemblyDefinitionHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{678A9092-D6F6-3D02-87CA-64B34AEE36F2}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNAssemblyDefinitionHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNAssemblyDefinitionHandle = class(TDNGenericImport<DNAssemblyDefinitionHandleClass, DNAssemblyDefinitionHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNAssemblyFileClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{82FD17EE-0E40-5D64-9E6F-416DC8BC738E}']
  end;

  [DNTypeName('System.Reflection.Metadata.AssemblyFile')]
  DNAssemblyFile = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{08AEB534-1C40-3F3F-8D30-9823BE7E9ABC}']
  { getters & setters } 

    function get_ContainsMetadata: Boolean;
    function get_Name: DNStringHandle;
    function get_HashValue: DNBlobHandle;

  { methods } 

    function GetCustomAttributes: DNCustomAttributeHandleCollection;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property ContainsMetadata: Boolean read get_ContainsMetadata;
    property Name: DNStringHandle read get_Name;
    property HashValue: DNBlobHandle read get_HashValue;
  end;

  TDNAssemblyFile = class(TDNGenericImport<DNAssemblyFileClass, DNAssemblyFile>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNAssemblyFileHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{F82585D3-709C-56F8-9FAC-2BF23C6A77AD}']
  end;

  [DNTypeName('System.Reflection.Metadata.AssemblyFileHandle')]
  DNAssemblyFileHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{D0075818-F7D9-313C-858E-BB0A1030279B}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNAssemblyFileHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNAssemblyFileHandle = class(TDNGenericImport<DNAssemblyFileHandleClass, DNAssemblyFileHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNAssemblyFileHandleCollectionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{09534FE3-A26D-5051-984B-C0615118A3CB}']
  end;

  [DNTypeName('System.Reflection.Metadata.AssemblyFileHandleCollection')]
  DNAssemblyFileHandleCollection = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{61CDC1C9-67AB-3893-9A9B-A4BF35D84E8D}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNAssemblyFileHandleCollection_Enumerator;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNAssemblyFileHandleCollection = class(TDNGenericImport<DNAssemblyFileHandleCollectionClass, DNAssemblyFileHandleCollection>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNAssemblyFileHandleCollection_EnumeratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{CBD20F37-84F3-5703-8970-78F3479D3C03}']
  end;

  [DNTypeName('System.Reflection.Metadata.AssemblyFileHandleCollection+Enumerator')]
  DNAssemblyFileHandleCollection_Enumerator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{D1FC61C7-57EB-39DD-ABCD-A5CE2C9C70B6}']
  { getters & setters } 

    function get_Current: DNAssemblyFileHandle;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNAssemblyFileHandle read get_Current;
  end;

  TDNAssemblyFileHandleCollection_Enumerator = class(TDNGenericImport<DNAssemblyFileHandleCollection_EnumeratorClass, DNAssemblyFileHandleCollection_Enumerator>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNAssemblyReferenceClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{2DDD9BCF-607E-59B8-8E6E-7D75819ED1DC}']
  end;

  [DNTypeName('System.Reflection.Metadata.AssemblyReference')]
  DNAssemblyReference = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{090D72CC-4470-370A-A849-C4FAAFE8D420}']
  { getters & setters } 

    function get_Version: DDNC.System.Private.CoreLib.DNVersion;
    function get_Flags: DNAssemblyFlags;
    function get_Name: DNStringHandle;
    function get_Culture: DNStringHandle;
    function get_PublicKeyOrToken: DNBlobHandle;
    function get_HashValue: DNBlobHandle;

  { methods } 

    function GetAssemblyName: DDNC.System.Private.CoreLib.DNAssemblyName;
    function GetCustomAttributes: DNCustomAttributeHandleCollection;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Version: DDNC.System.Private.CoreLib.DNVersion read get_Version;
    property Flags: DNAssemblyFlags read get_Flags;
    property Name: DNStringHandle read get_Name;
    property Culture: DNStringHandle read get_Culture;
    property PublicKeyOrToken: DNBlobHandle read get_PublicKeyOrToken;
    property HashValue: DNBlobHandle read get_HashValue;
  end;

  TDNAssemblyReference = class(TDNGenericImport<DNAssemblyReferenceClass, DNAssemblyReference>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNAssemblyReferenceHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{5DC1014B-9233-5D21-81BB-D6268ACEAD30}']
  end;

  [DNTypeName('System.Reflection.Metadata.AssemblyReferenceHandle')]
  DNAssemblyReferenceHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{7AD40C82-4257-3D38-AB9A-DEC9E9F5FC99}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNAssemblyReferenceHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNAssemblyReferenceHandle = class(TDNGenericImport<DNAssemblyReferenceHandleClass, DNAssemblyReferenceHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNAssemblyReferenceHandleCollectionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{5A43B6A2-422A-5646-86C0-69561C39E863}']
  end;

  [DNTypeName('System.Reflection.Metadata.AssemblyReferenceHandleCollection')]
  DNAssemblyReferenceHandleCollection = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{4E6C0BE4-8B84-38A8-8407-0CA1C1B4B6AF}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNAssemblyReferenceHandleCollection_Enumerator;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNAssemblyReferenceHandleCollection = class(TDNGenericImport<DNAssemblyReferenceHandleCollectionClass, DNAssemblyReferenceHandleCollection>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNAssemblyReferenceHandleCollection_EnumeratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{168530D7-12F8-53D8-92DB-F254897AB4E1}']
  end;

  [DNTypeName('System.Reflection.Metadata.AssemblyReferenceHandleCollection+Enumerator')]
  DNAssemblyReferenceHandleCollection_Enumerator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{BF427037-C29D-3BEC-A112-1F6AED4CF247}']
  { getters & setters } 

    function get_Current: DNAssemblyReferenceHandle;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNAssemblyReferenceHandle read get_Current;
  end;

  TDNAssemblyReferenceHandleCollection_Enumerator = class(TDNGenericImport<DNAssemblyReferenceHandleCollection_EnumeratorClass, DNAssemblyReferenceHandleCollection_Enumerator>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNBlobClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{8A50EC0D-8F7E-57EE-8F13-9A35E7004319}']
  end;

  [DNTypeName('System.Reflection.Metadata.Blob')]
  DNBlob = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{54C1F94F-26B8-39A3-89A9-A0B2A7EA8B2B}']
  { getters & setters } 

    function get_Length: Int32;
    function get_IsDefault: Boolean;

  { methods } 

    function GetBytes: DDNC.System.Private.CoreLib.DNArraySegment<Byte>;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Length: Int32 read get_Length;
    property IsDefault: Boolean read get_IsDefault;
  end;

  TDNBlob = class(TDNGenericImport<DNBlobClass, DNBlob>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNBlobBuilder_BlobsClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{2FBE79DA-814F-5F5F-9A22-5021FEB3D629}']
  end;

  [DNTypeName('System.Reflection.Metadata.BlobBuilder+Blobs')]
  DNBlobBuilder_Blobs = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{55DB42AB-B41D-3902-A4E3-2D1B943D0367}']
  { getters & setters } 

    function get_Current: DNBlob;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function GetEnumerator: DNBlobBuilder_Blobs;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNBlob read get_Current;
  end;

  TDNBlobBuilder_Blobs = class(TDNGenericImport<DNBlobBuilder_BlobsClass, DNBlobBuilder_Blobs>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNBlobContentIdClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{0465E8FE-96E1-5347-812D-6C736E4189A8}']
  { constructors } 

    {class} function init(guid: DDNC.System.Private.CoreLib.DNGuid; stamp: UInt32): DNBlobContentId; overload;
    {class} function init(id: DDNC.System.Collections.Immutable.DNImmutableArray<Byte>): DNBlobContentId; overload;
    {class} function init(id: TArray<Byte>): DNBlobContentId; overload;

  { static methods } 

    {class} function FromHash(hashCode: DDNC.System.Collections.Immutable.DNImmutableArray<Byte>): DNBlobContentId; overload;
    {class} function FromHash(hashCode: TArray<Byte>): DNBlobContentId; overload;
    {class} function GetTimeBasedProvider: DDNC.System.Private.CoreLib.DNFunc<DDNC.System.Private.CoreLib.DNIEnumerable<DNBlob>, DNBlobContentId>;

  end;

  [DNTypeName('System.Reflection.Metadata.BlobContentId')]
  DNBlobContentId = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{F6347ED7-330F-38DE-A061-BA1398D9413B}']
  { getters & setters } 

    function get_Guid: DDNC.System.Private.CoreLib.DNGuid;
    function get_Stamp: UInt32;
    function get_IsDefault: Boolean;

  { methods } 

    function Equals(other: DNBlobContentId): Boolean; overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Guid: DDNC.System.Private.CoreLib.DNGuid read get_Guid;
    property Stamp: UInt32 read get_Stamp;
    property IsDefault: Boolean read get_IsDefault;
  end;

  TDNBlobContentId = class(TDNGenericImport<DNBlobContentIdClass, DNBlobContentId>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNBlobHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{48F563CA-AA2A-5C7B-B0D1-C95C3A19F8F2}']
  end;

  [DNTypeName('System.Reflection.Metadata.BlobHandle')]
  DNBlobHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{17A69F16-26BB-3E47-91C4-850E7F7EEF05}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNBlobHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNBlobHandle = class(TDNGenericImport<DNBlobHandleClass, DNBlobHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNBlobReaderClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{DE8E4D2F-9A5C-5C5E-96D8-28CBC3CC60A7}']
  { constructors } 

    {class} function init(buffer: PByte; length: Int32): DNBlobReader;

  end;

  [DNTypeName('System.Reflection.Metadata.BlobReader')]
  DNBlobReader = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{F20408E5-4D15-3698-9067-BBBAFF9A8EFB}']
  { getters & setters } 

    function get_StartPointer: PByte;
    function get_CurrentPointer: PByte;
    function get_Length: Int32;
    function get_Offset: Int32;
    procedure set_Offset(value: Int32);
    function get_RemainingBytes: Int32;

  { methods } 

    procedure Reset;
    procedure Align(alignment: Byte);
    function ReadBoolean: Boolean;
    function ReadSByte: SByte;
    function ReadByte: Byte;
    function ReadChar: Char;
    function ReadInt16: Int16;
    function ReadUInt16: UInt16;
    function ReadInt32: Int32;
    function ReadUInt32: UInt32;
    function ReadInt64: Int64;
    function ReadUInt64: UInt64;
    function ReadSingle: Single;
    function ReadDouble: Double;
    function ReadGuid: DDNC.System.Private.CoreLib.DNGuid;
    function ReadDecimal: DDNC.System.Private.CoreLib.DNDecimal;
    function ReadDateTime: DDNC.System.Private.CoreLib.DNDateTime;
    function ReadSignatureHeader: DNSignatureHeader;
    function IndexOf(value: Byte): Int32;
    function ReadUTF8(byteCount: Int32): string;
    function ReadUTF16(byteCount: Int32): string;
    function ReadBytes(byteCount: Int32): TArray<Byte>; overload;
    procedure ReadBytes(byteCount: Int32; buffer: TArray<Byte>; bufferOffset: Int32); overload;
    function TryReadCompressedInteger(out value: Int32): Boolean;
    function ReadCompressedInteger: Int32;
    function TryReadCompressedSignedInteger(out value: Int32): Boolean;
    function ReadCompressedSignedInteger: Int32;
    function ReadSerializationTypeCode: DNSerializationTypeCode;
    function ReadSignatureTypeCode: DNSignatureTypeCode;
    function ReadSerializedString: string;
    function ReadTypeHandle: DNEntityHandle;
    function ReadBlobHandle: DNBlobHandle;
    function ReadConstant(typeCode: DNConstantTypeCode): DDNC.System.Private.CoreLib.DNObject;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property StartPointer: PByte read get_StartPointer;
    property CurrentPointer: PByte read get_CurrentPointer;
    property Length: Int32 read get_Length;
    property Offset: Int32 read get_Offset write set_Offset;
    property RemainingBytes: Int32 read get_RemainingBytes;
  end;

  TDNBlobReader = class(TDNGenericImport<DNBlobReaderClass, DNBlobReader>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNBlobWriterClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{7287DF85-95D7-5FD0-960E-9CD5BF355284}']
  { constructors } 

    {class} function init(size: Int32): DNBlobWriter; overload;
    {class} function init(buffer: TArray<Byte>): DNBlobWriter; overload;
    {class} function init(blob: DNBlob): DNBlobWriter; overload;
    {class} function init(buffer: TArray<Byte>; start: Int32; count: Int32): DNBlobWriter; overload;

  end;

  [DNTypeName('System.Reflection.Metadata.BlobWriter')]
  DNBlobWriter = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{1F82C619-29AF-3C87-8BD9-D282FED9A84B}']
  { getters & setters } 

    function get_Offset: Int32;
    procedure set_Offset(value: Int32);
    function get_Length: Int32;
    function get_RemainingBytes: Int32;
    function get_Blob: DNBlob;

  { methods } 

    function ContentEquals(other: DNBlobWriter): Boolean;
    function ToArray: TArray<Byte>; overload;
    function ToArray(start: Int32; byteCount: Int32): TArray<Byte>; overload;
    function ToImmutableArray: DDNC.System.Collections.Immutable.DNImmutableArray<Byte>; overload;
    function ToImmutableArray(start: Int32; byteCount: Int32): DDNC.System.Collections.Immutable.DNImmutableArray<Byte>; overload;
    procedure WriteBytes(value: Byte; byteCount: Int32); overload;
    procedure WriteBytes(buffer: PByte; byteCount: Int32); overload;
    procedure WriteBytes(source: DNBlobBuilder); overload;
    function WriteBytes(source: DDNC.System.Private.CoreLib.DNStream; byteCount: Int32): Int32; overload;
    procedure WriteBytes(buffer: DDNC.System.Collections.Immutable.DNImmutableArray<Byte>); overload;
    procedure WriteBytes(buffer: DDNC.System.Collections.Immutable.DNImmutableArray<Byte>; start: Int32; byteCount: Int32); overload;
    procedure WriteBytes(buffer: TArray<Byte>); overload;
    procedure WriteBytes(buffer: TArray<Byte>; start: Int32; byteCount: Int32); overload;
    procedure PadTo(offset: Int32);
    procedure Align(alignment: Int32);
    procedure WriteBoolean(value: Boolean);
    procedure WriteByte(value: Byte);
    procedure WriteSByte(value: SByte);
    procedure WriteDouble(value: Double);
    procedure WriteSingle(value: Single);
    procedure WriteInt16(value: Int16);
    procedure WriteUInt16(value: UInt16);
    procedure WriteInt16BE(value: Int16);
    procedure WriteUInt16BE(value: UInt16);
    procedure WriteInt32BE(value: Int32);
    procedure WriteUInt32BE(value: UInt32);
    procedure WriteInt32(value: Int32);
    procedure WriteUInt32(value: UInt32);
    procedure WriteInt64(value: Int64);
    procedure WriteUInt64(value: UInt64);
    procedure WriteDecimal(value: DDNC.System.Private.CoreLib.DNDecimal);
    procedure WriteGuid(value: DDNC.System.Private.CoreLib.DNGuid);
    procedure WriteDateTime(value: DDNC.System.Private.CoreLib.DNDateTime);
    procedure WriteReference(reference: Int32; isSmall: Boolean);
    procedure WriteUTF16(value: TArray<Char>); overload;
    procedure WriteUTF16(value: string); overload;
    procedure WriteSerializedString(str: string);
    procedure WriteUserString(value: string);
    procedure WriteUTF8(value: string; allowUnpairedSurrogates: Boolean);
    procedure WriteCompressedSignedInteger(value: Int32);
    procedure WriteCompressedInteger(value: Int32);
    procedure WriteConstant(value: DDNC.System.Private.CoreLib.DNObject);
    procedure Clear;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Offset: Int32 read get_Offset write set_Offset;
    property Length: Int32 read get_Length;
    property RemainingBytes: Int32 read get_RemainingBytes;
    property Blob: DNBlob read get_Blob;
  end;

  TDNBlobWriter = class(TDNGenericImport<DNBlobWriterClass, DNBlobWriter>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNConstantClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{6E74D649-74D2-5FA7-8D9B-B10D03E7BF7E}']
  end;

  [DNTypeName('System.Reflection.Metadata.Constant')]
  DNConstant = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{23B4DCB9-D8E9-3BA9-9A65-D3DC96609BE5}']
  { getters & setters } 

    function get_TypeCode: DNConstantTypeCode;
    function get_Value: DNBlobHandle;
    function get_Parent: DNEntityHandle;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property TypeCode: DNConstantTypeCode read get_TypeCode;
    property Value: DNBlobHandle read get_Value;
    property Parent: DNEntityHandle read get_Parent;
  end;

  TDNConstant = class(TDNGenericImport<DNConstantClass, DNConstant>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNConstantHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{116BCF8E-7E80-5498-AD4C-DB50A5DD68FC}']
  end;

  [DNTypeName('System.Reflection.Metadata.ConstantHandle')]
  DNConstantHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{BBEAC0A6-3486-3108-ACAD-69483946124C}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNConstantHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNConstantHandle = class(TDNGenericImport<DNConstantHandleClass, DNConstantHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNCustomAttributeClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{20D1323C-81A9-50CF-951D-47658FD259ED}']
  end;

  [DNTypeName('System.Reflection.Metadata.CustomAttribute')]
  DNCustomAttribute = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{D9DCCD65-6593-34FC-964D-7CD53DF8C034}']
  { getters & setters } 

    function get_Constructor: DNEntityHandle;
    function get_Parent: DNEntityHandle;
    function get_Value: DNBlobHandle;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property &Constructor: DNEntityHandle read get_Constructor;
    property Parent: DNEntityHandle read get_Parent;
    property Value: DNBlobHandle read get_Value;
  end;

  TDNCustomAttribute = class(TDNGenericImport<DNCustomAttributeClass, DNCustomAttribute>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNCustomAttributeHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{C95977BC-C8E6-578F-AAC3-4C45F1CDE3AC}']
  end;

  [DNTypeName('System.Reflection.Metadata.CustomAttributeHandle')]
  DNCustomAttributeHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{4D62D713-936E-3DFE-AD34-1A3A7C0B0567}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNCustomAttributeHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNCustomAttributeHandle = class(TDNGenericImport<DNCustomAttributeHandleClass, DNCustomAttributeHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNCustomAttributeHandleCollectionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{74D18394-26BF-567B-A349-07AA7670331B}']
  end;

  [DNTypeName('System.Reflection.Metadata.CustomAttributeHandleCollection')]
  DNCustomAttributeHandleCollection = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{48EF46D7-4154-3583-8039-15F315432C64}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNCustomAttributeHandleCollection_Enumerator;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNCustomAttributeHandleCollection = class(TDNGenericImport<DNCustomAttributeHandleCollectionClass, DNCustomAttributeHandleCollection>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNCustomAttributeHandleCollection_EnumeratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{E30CFB75-1578-5F32-B246-320CC3D0AE5F}']
  end;

  [DNTypeName('System.Reflection.Metadata.CustomAttributeHandleCollection+Enumerator')]
  DNCustomAttributeHandleCollection_Enumerator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{C9F0A079-8078-3A3E-AF73-DC1C3E92CF9C}']
  { getters & setters } 

    function get_Current: DNCustomAttributeHandle;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNCustomAttributeHandle read get_Current;
  end;

  TDNCustomAttributeHandleCollection_Enumerator = class(TDNGenericImport<DNCustomAttributeHandleCollection_EnumeratorClass, DNCustomAttributeHandleCollection_Enumerator>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNCustomAttributeNamedArgumentClass<TType> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{4CB36D22-5CD3-5443-847D-A99B5564063A}']
  { constructors } 

    {class} function init(name: string; kind: DNCustomAttributeNamedArgumentKind; &type: TType; value: DDNC.System.Private.CoreLib.DNObject): DNCustomAttributeNamedArgument<TType>;

  end;

  [DNTypeName('System.Reflection.Metadata.CustomAttributeNamedArgument`1')]
  DNCustomAttributeNamedArgument<TType> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{BA18FAE6-2195-3C99-B268-4DA37912AEAD}']
  { getters & setters } 

    function get_Name: string;
    function get_Kind: DNCustomAttributeNamedArgumentKind;
    function get_Type: TType;
    function get_Value: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Name: string read get_Name;
    property Kind: DNCustomAttributeNamedArgumentKind read get_Kind;
    property &Type: TType read get_Type;
    property Value: DDNC.System.Private.CoreLib.DNObject read get_Value;
  end;

  TDNCustomAttributeNamedArgument<TType> = class(TDNGenericImport<DNCustomAttributeNamedArgumentClass<TType>, DNCustomAttributeNamedArgument<TType>>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNCustomAttributeTypedArgumentClass<TType> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{69DCADF3-7F91-5AD9-AE81-E83D645E1821}']
  { constructors } 

    {class} function init(&type: TType; value: DDNC.System.Private.CoreLib.DNObject): DNCustomAttributeTypedArgument<TType>;

  end;

  [DNTypeName('System.Reflection.Metadata.CustomAttributeTypedArgument`1')]
  DNCustomAttributeTypedArgument<TType> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{8053FD0F-B13E-3E75-BAB0-14BC7E48F9FA}']
  { getters & setters } 

    function get_Type: TType;
    function get_Value: DDNC.System.Private.CoreLib.DNObject;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property &Type: TType read get_Type;
    property Value: DDNC.System.Private.CoreLib.DNObject read get_Value;
  end;

  TDNCustomAttributeTypedArgument<TType> = class(TDNGenericImport<DNCustomAttributeTypedArgumentClass<TType>, DNCustomAttributeTypedArgument<TType>>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNCustomAttributeValueClass<TType> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{D2F5A6AF-880A-5EC2-BBFD-DFA9F0566F4C}']
  { constructors } 

    {class} function init(fixedArguments: DDNC.System.Collections.Immutable.DNImmutableArray<DNCustomAttributeTypedArgument<TType>>; namedArguments: DDNC.System.Collections.Immutable.DNImmutableArray<DNCustomAttributeNamedArgument<TType>>): DNCustomAttributeValue<TType>;

  end;

  [DNTypeName('System.Reflection.Metadata.CustomAttributeValue`1')]
  DNCustomAttributeValue<TType> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{03DD9D75-1CBF-3F9D-9411-5A8E1782BE3E}']
  { getters & setters } 

    function get_FixedArguments: DDNC.System.Collections.Immutable.DNImmutableArray<DNCustomAttributeTypedArgument<TType>>;
    function get_NamedArguments: DDNC.System.Collections.Immutable.DNImmutableArray<DNCustomAttributeNamedArgument<TType>>;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property FixedArguments: DDNC.System.Collections.Immutable.DNImmutableArray<DNCustomAttributeTypedArgument<TType>> read get_FixedArguments;
    property NamedArguments: DDNC.System.Collections.Immutable.DNImmutableArray<DNCustomAttributeNamedArgument<TType>> read get_NamedArguments;
  end;

  TDNCustomAttributeValue<TType> = class(TDNGenericImport<DNCustomAttributeValueClass<TType>, DNCustomAttributeValue<TType>>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNCustomDebugInformationClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{F3352231-D4A6-58FA-BEB9-E176CC72702E}']
  end;

  [DNTypeName('System.Reflection.Metadata.CustomDebugInformation')]
  DNCustomDebugInformation = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{CBFCF4BD-A9BB-3F0F-ACF9-291C731D8037}']
  { getters & setters } 

    function get_Parent: DNEntityHandle;
    function get_Kind: DNGuidHandle;
    function get_Value: DNBlobHandle;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Parent: DNEntityHandle read get_Parent;
    property Kind: DNGuidHandle read get_Kind;
    property Value: DNBlobHandle read get_Value;
  end;

  TDNCustomDebugInformation = class(TDNGenericImport<DNCustomDebugInformationClass, DNCustomDebugInformation>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNCustomDebugInformationHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{17F95FC2-9A76-5817-8484-E8DA38FD21F0}']
  end;

  [DNTypeName('System.Reflection.Metadata.CustomDebugInformationHandle')]
  DNCustomDebugInformationHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{623BE8E4-2036-33E2-BEA7-BD341094844B}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNCustomDebugInformationHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNCustomDebugInformationHandle = class(TDNGenericImport<DNCustomDebugInformationHandleClass, DNCustomDebugInformationHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNCustomDebugInformationHandleCollectionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{0D84F7D8-EB5C-57F6-B22F-E484AD3A8C12}']
  end;

  [DNTypeName('System.Reflection.Metadata.CustomDebugInformationHandleCollection')]
  DNCustomDebugInformationHandleCollection = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{CAF45889-6EED-3A40-AF0F-E8B1D3E99EDE}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNCustomDebugInformationHandleCollection_Enumerator;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNCustomDebugInformationHandleCollection = class(TDNGenericImport<DNCustomDebugInformationHandleCollectionClass, DNCustomDebugInformationHandleCollection>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNCustomDebugInformationHandleCollection_EnumeratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{ACC1F04B-2150-5C8B-940C-0354325D327F}']
  end;

  [DNTypeName('System.Reflection.Metadata.CustomDebugInformationHandleCollection+Enumerator')]
  DNCustomDebugInformationHandleCollection_Enumerator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{8B7B907C-7249-3889-A2BD-E9056E232AAD}']
  { getters & setters } 

    function get_Current: DNCustomDebugInformationHandle;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNCustomDebugInformationHandle read get_Current;
  end;

  TDNCustomDebugInformationHandleCollection_Enumerator = class(TDNGenericImport<DNCustomDebugInformationHandleCollection_EnumeratorClass, DNCustomDebugInformationHandleCollection_Enumerator>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNDeclarativeSecurityAttributeClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{91E0875F-3C5C-5A5C-8B4E-8CBDE8A837E9}']
  end;

  [DNTypeName('System.Reflection.Metadata.DeclarativeSecurityAttribute')]
  DNDeclarativeSecurityAttribute = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{D4F7C53F-061F-36ED-A7CA-BACE9B2B68AF}']
  { getters & setters } 

    function get_Action: DNDeclarativeSecurityAction;
    function get_Parent: DNEntityHandle;
    function get_PermissionSet: DNBlobHandle;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Action: DNDeclarativeSecurityAction read get_Action;
    property Parent: DNEntityHandle read get_Parent;
    property PermissionSet: DNBlobHandle read get_PermissionSet;
  end;

  TDNDeclarativeSecurityAttribute = class(TDNGenericImport<DNDeclarativeSecurityAttributeClass, DNDeclarativeSecurityAttribute>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNDeclarativeSecurityAttributeHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{0E6F1D2B-313A-5C7D-A1D1-0EFFE8BE32A4}']
  end;

  [DNTypeName('System.Reflection.Metadata.DeclarativeSecurityAttributeHandle')]
  DNDeclarativeSecurityAttributeHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{02DFA32D-CA5D-3315-BC99-6D61DF264150}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNDeclarativeSecurityAttributeHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNDeclarativeSecurityAttributeHandle = class(TDNGenericImport<DNDeclarativeSecurityAttributeHandleClass, DNDeclarativeSecurityAttributeHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNDeclarativeSecurityAttributeHandleCollectionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{FFFC1AA2-A362-597A-B0AE-FF39101DB32D}']
  end;

  [DNTypeName('System.Reflection.Metadata.DeclarativeSecurityAttributeHandleCollection')]
  DNDeclarativeSecurityAttributeHandleCollection = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{C146849A-68D5-3BB0-987B-5ECC15780A1E}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNDeclarativeSecurityAttributeHandleCollection_Enumerator;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNDeclarativeSecurityAttributeHandleCollection = class(TDNGenericImport<DNDeclarativeSecurityAttributeHandleCollectionClass, DNDeclarativeSecurityAttributeHandleCollection>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNDeclarativeSecurityAttributeHandleCollection_EnumeratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{90A5B196-4BBC-5F36-8579-A18EFCE4546B}']
  end;

  [DNTypeName('System.Reflection.Metadata.DeclarativeSecurityAttributeHandleCollection+Enumerator')]
  DNDeclarativeSecurityAttributeHandleCollection_Enumerator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{A78180F9-B60E-3D22-B0D6-20D10209AC4A}']
  { getters & setters } 

    function get_Current: DNDeclarativeSecurityAttributeHandle;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNDeclarativeSecurityAttributeHandle read get_Current;
  end;

  TDNDeclarativeSecurityAttributeHandleCollection_Enumerator = class(TDNGenericImport<DNDeclarativeSecurityAttributeHandleCollection_EnumeratorClass, DNDeclarativeSecurityAttributeHandleCollection_Enumerator>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNDocumentClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{115489CF-5A47-592F-B6A4-4C198E1E0299}']
  end;

  [DNTypeName('System.Reflection.Metadata.Document')]
  DNDocument = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{0D791641-1A1F-35E2-BFD2-1948CA80ADB4}']
  { getters & setters } 

    function get_Name: DNDocumentNameBlobHandle;
    function get_Language: DNGuidHandle;
    function get_HashAlgorithm: DNGuidHandle;
    function get_Hash: DNBlobHandle;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Name: DNDocumentNameBlobHandle read get_Name;
    property Language: DNGuidHandle read get_Language;
    property HashAlgorithm: DNGuidHandle read get_HashAlgorithm;
    property Hash: DNBlobHandle read get_Hash;
  end;

  TDNDocument = class(TDNGenericImport<DNDocumentClass, DNDocument>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNDocumentHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{F75B8CE7-32F8-5C9A-B441-CC949506DCA8}']
  end;

  [DNTypeName('System.Reflection.Metadata.DocumentHandle')]
  DNDocumentHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{4D06BF1E-32C4-32E0-BBB8-245E91D7B8C5}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNDocumentHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNDocumentHandle = class(TDNGenericImport<DNDocumentHandleClass, DNDocumentHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNDocumentHandleCollectionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{B6795446-52E0-5A47-9720-3C7032EFB510}']
  end;

  [DNTypeName('System.Reflection.Metadata.DocumentHandleCollection')]
  DNDocumentHandleCollection = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{E4020E37-D34A-326A-AABF-213CFFAC8EC0}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNDocumentHandleCollection_Enumerator;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNDocumentHandleCollection = class(TDNGenericImport<DNDocumentHandleCollectionClass, DNDocumentHandleCollection>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNDocumentHandleCollection_EnumeratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{56BB5538-7D92-5E9C-856A-4E5A7383DA79}']
  end;

  [DNTypeName('System.Reflection.Metadata.DocumentHandleCollection+Enumerator')]
  DNDocumentHandleCollection_Enumerator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{F50B5DBF-0135-3F34-B3E9-C21BB958CA80}']
  { getters & setters } 

    function get_Current: DNDocumentHandle;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNDocumentHandle read get_Current;
  end;

  TDNDocumentHandleCollection_Enumerator = class(TDNGenericImport<DNDocumentHandleCollection_EnumeratorClass, DNDocumentHandleCollection_Enumerator>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNDocumentNameBlobHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{60EBD00B-CEE2-5DE3-9903-6C30E3AE5EAC}']
  end;

  [DNTypeName('System.Reflection.Metadata.DocumentNameBlobHandle')]
  DNDocumentNameBlobHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{AF70C45F-16C6-38AF-9684-2CB35CBEA994}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNDocumentNameBlobHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNDocumentNameBlobHandle = class(TDNGenericImport<DNDocumentNameBlobHandleClass, DNDocumentNameBlobHandle>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNArrayShapeEncoderClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{D8DAF1CC-550D-57E0-A56D-25D2CF629883}']
  { constructors } 

    {class} function init(builder: DNBlobBuilder): DNArrayShapeEncoder;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.ArrayShapeEncoder')]
  DNArrayShapeEncoder = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{ABE80CB2-656C-3C6B-B23D-985D54A16196}']
  { getters & setters } 

    function get_Builder: DNBlobBuilder;

  { methods } 

    procedure Shape(rank: Int32; sizes: DDNC.System.Collections.Immutable.DNImmutableArray<Int32>; lowerBounds: DDNC.System.Collections.Immutable.DNImmutableArray<Int32>);
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Builder: DNBlobBuilder read get_Builder;
  end;

  TDNArrayShapeEncoder = class(TDNGenericImport<DNArrayShapeEncoderClass, DNArrayShapeEncoder>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNBlobEncoderClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{F2C0EBF6-5F8A-57BE-94BC-37E0266CFF07}']
  { constructors } 

    {class} function init(builder: DNBlobBuilder): DNBlobEncoder;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.BlobEncoder')]
  DNBlobEncoder = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{3977F3D6-3C38-3F2E-9AE9-3844F6B3963B}']
  { getters & setters } 

    function get_Builder: DNBlobBuilder;

  { methods } 

    function FieldSignature: DNSignatureTypeEncoder;
    function MethodSpecificationSignature(genericArgumentCount: Int32): DNGenericTypeArgumentsEncoder;
    function MethodSignature(convention: DNSignatureCallingConvention; genericParameterCount: Int32; isInstanceMethod: Boolean): DNMethodSignatureEncoder;
    function PropertySignature(isInstanceProperty: Boolean): DNMethodSignatureEncoder;
    procedure CustomAttributeSignature(out fixedArguments: DNFixedArgumentsEncoder; out namedArguments: DNCustomAttributeNamedArgumentsEncoder); overload;
    procedure CustomAttributeSignature(fixedArguments: DDNC.System.Private.CoreLib.DNAction<DNFixedArgumentsEncoder>; namedArguments: DDNC.System.Private.CoreLib.DNAction<DNCustomAttributeNamedArgumentsEncoder>); overload;
    function LocalVariableSignature(variableCount: Int32): DNLocalVariablesEncoder;
    function TypeSpecificationSignature: DNSignatureTypeEncoder;
    function PermissionSetBlob(attributeCount: Int32): DNPermissionSetEncoder;
    function PermissionSetArguments(argumentCount: Int32): DNNamedArgumentsEncoder;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Builder: DNBlobBuilder read get_Builder;
  end;

  TDNBlobEncoder = class(TDNGenericImport<DNBlobEncoderClass, DNBlobEncoder>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNCustomAttributeArrayTypeEncoderClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{A6DE62C8-9CD0-5EF8-8E64-4593DD335CBA}']
  { constructors } 

    {class} function init(builder: DNBlobBuilder): DNCustomAttributeArrayTypeEncoder;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder')]
  DNCustomAttributeArrayTypeEncoder = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{2231E331-3EC8-3792-AD6F-5C061C0AF710}']
  { getters & setters } 

    function get_Builder: DNBlobBuilder;

  { methods } 

    procedure ObjectArray;
    function ElementType: DNCustomAttributeElementTypeEncoder;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Builder: DNBlobBuilder read get_Builder;
  end;

  TDNCustomAttributeArrayTypeEncoder = class(TDNGenericImport<DNCustomAttributeArrayTypeEncoderClass, DNCustomAttributeArrayTypeEncoder>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNCustomAttributeElementTypeEncoderClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{28C51EED-603F-534E-A095-5F155E8FF74A}']
  { constructors } 

    {class} function init(builder: DNBlobBuilder): DNCustomAttributeElementTypeEncoder;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder')]
  DNCustomAttributeElementTypeEncoder = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{2FCDC4FA-943C-3F8E-B6E9-C82665583CD1}']
  { getters & setters } 

    function get_Builder: DNBlobBuilder;

  { methods } 

    procedure Boolean;
    procedure Char;
    procedure SByte;
    procedure Byte;
    procedure Int16;
    procedure UInt16;
    procedure Int32;
    procedure UInt32;
    procedure Int64;
    procedure UInt64;
    procedure Single;
    procedure Double;
    procedure &String;
    procedure PrimitiveType(&type: DNPrimitiveSerializationTypeCode);
    procedure SystemType;
    procedure Enum(enumTypeName: string);
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Builder: DNBlobBuilder read get_Builder;
  end;

  TDNCustomAttributeElementTypeEncoder = class(TDNGenericImport<DNCustomAttributeElementTypeEncoderClass, DNCustomAttributeElementTypeEncoder>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNCustomAttributeNamedArgumentsEncoderClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{78E05AB3-A9F6-5089-A2A7-3E1BF83056D2}']
  { constructors } 

    {class} function init(builder: DNBlobBuilder): DNCustomAttributeNamedArgumentsEncoder;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.CustomAttributeNamedArgumentsEncoder')]
  DNCustomAttributeNamedArgumentsEncoder = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{71BDCDC4-7D7B-3F5D-88DF-C8E65CCD4E00}']
  { getters & setters } 

    function get_Builder: DNBlobBuilder;

  { methods } 

    function Count(count: Int32): DNNamedArgumentsEncoder;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Builder: DNBlobBuilder read get_Builder;
  end;

  TDNCustomAttributeNamedArgumentsEncoder = class(TDNGenericImport<DNCustomAttributeNamedArgumentsEncoderClass, DNCustomAttributeNamedArgumentsEncoder>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNCustomModifiersEncoderClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{EBB598F5-73AD-5074-9D4F-5DBBC49E94EA}']
  { constructors } 

    {class} function init(builder: DNBlobBuilder): DNCustomModifiersEncoder;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.CustomModifiersEncoder')]
  DNCustomModifiersEncoder = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{4BA8EE91-3BC4-3DAF-B563-8CCE45480A3B}']
  { getters & setters } 

    function get_Builder: DNBlobBuilder;

  { methods } 

    function AddModifier(&type: DNEntityHandle; isOptional: Boolean): DNCustomModifiersEncoder;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Builder: DNBlobBuilder read get_Builder;
  end;

  TDNCustomModifiersEncoder = class(TDNGenericImport<DNCustomModifiersEncoderClass, DNCustomModifiersEncoder>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNEditAndContinueLogEntryClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{7A4931CC-352A-5C7A-870A-1DF795D13BA9}']
  { constructors } 

    {class} function init(handle: DNEntityHandle; operation: DNEditAndContinueOperation): DNEditAndContinueLogEntry;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.EditAndContinueLogEntry')]
  DNEditAndContinueLogEntry = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{66427123-AACF-399B-BB31-D282975F60BC}']
  { getters & setters } 

    function get_Handle: DNEntityHandle;
    function get_Operation: DNEditAndContinueOperation;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNEditAndContinueLogEntry): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Handle: DNEntityHandle read get_Handle;
    property Operation: DNEditAndContinueOperation read get_Operation;
  end;

  TDNEditAndContinueLogEntry = class(TDNGenericImport<DNEditAndContinueLogEntryClass, DNEditAndContinueLogEntry>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNExceptionRegionEncoderClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{41DCDFD7-4455-579C-BA0A-6FCBC403948F}']
  { static methods } 

    {class} function IsSmallRegionCount(exceptionRegionCount: Int32): Boolean;
    {class} function IsSmallExceptionRegion(startOffset: Int32; length: Int32): Boolean;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.ExceptionRegionEncoder')]
  DNExceptionRegionEncoder = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{04160FD5-E957-35A7-B82F-A26D3B69EA58}']
  { getters & setters } 

    function get_Builder: DNBlobBuilder;
    function get_HasSmallFormat: Boolean;

  { methods } 

    function AddFinally(tryOffset: Int32; tryLength: Int32; handlerOffset: Int32; handlerLength: Int32): DNExceptionRegionEncoder;
    function AddFault(tryOffset: Int32; tryLength: Int32; handlerOffset: Int32; handlerLength: Int32): DNExceptionRegionEncoder;
    function AddCatch(tryOffset: Int32; tryLength: Int32; handlerOffset: Int32; handlerLength: Int32; catchType: DNEntityHandle): DNExceptionRegionEncoder;
    function AddFilter(tryOffset: Int32; tryLength: Int32; handlerOffset: Int32; handlerLength: Int32; filterOffset: Int32): DNExceptionRegionEncoder;
    function Add(kind: DNExceptionRegionKind; tryOffset: Int32; tryLength: Int32; handlerOffset: Int32; handlerLength: Int32; catchType: DNEntityHandle; filterOffset: Int32): DNExceptionRegionEncoder;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Builder: DNBlobBuilder read get_Builder;
    property HasSmallFormat: Boolean read get_HasSmallFormat;
  end;

  TDNExceptionRegionEncoder = class(TDNGenericImport<DNExceptionRegionEncoderClass, DNExceptionRegionEncoder>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNFixedArgumentsEncoderClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{A41DB286-E625-5625-BCE6-ABDBE0689FA4}']
  { constructors } 

    {class} function init(builder: DNBlobBuilder): DNFixedArgumentsEncoder;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.FixedArgumentsEncoder')]
  DNFixedArgumentsEncoder = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{AD32EE9E-E37B-319E-8F81-DD21A3CE464E}']
  { getters & setters } 

    function get_Builder: DNBlobBuilder;

  { methods } 

    function AddArgument: DNLiteralEncoder;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Builder: DNBlobBuilder read get_Builder;
  end;

  TDNFixedArgumentsEncoder = class(TDNGenericImport<DNFixedArgumentsEncoderClass, DNFixedArgumentsEncoder>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNGenericTypeArgumentsEncoderClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{CC0EA466-D76C-5781-B14C-6CFDBAA8638F}']
  { constructors } 

    {class} function init(builder: DNBlobBuilder): DNGenericTypeArgumentsEncoder;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.GenericTypeArgumentsEncoder')]
  DNGenericTypeArgumentsEncoder = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{C97B332A-88D9-3AC3-9C44-51B073EFE871}']
  { getters & setters } 

    function get_Builder: DNBlobBuilder;

  { methods } 

    function AddArgument: DNSignatureTypeEncoder;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Builder: DNBlobBuilder read get_Builder;
  end;

  TDNGenericTypeArgumentsEncoder = class(TDNGenericImport<DNGenericTypeArgumentsEncoderClass, DNGenericTypeArgumentsEncoder>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNInstructionEncoderClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{7FBACF22-A4FD-5641-A7F1-8CC50E3E151E}']
  { constructors } 

    {class} function init(codeBuilder: DNBlobBuilder; controlFlowBuilder: DNControlFlowBuilder): DNInstructionEncoder;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.InstructionEncoder')]
  DNInstructionEncoder = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{253AFEBC-7023-3E4E-8F0C-0C6075D5EAEB}']
  { getters & setters } 

    function get_CodeBuilder: DNBlobBuilder;
    function get_ControlFlowBuilder: DNControlFlowBuilder;
    function get_Offset: Int32;

  { methods } 

    procedure OpCode(code: DNILOpCode);
    procedure Token(handle: DNEntityHandle); overload;
    procedure Token(token: Int32); overload;
    procedure LoadString(handle: DNUserStringHandle);
    procedure Call(methodHandle: DNEntityHandle); overload;
    procedure Call(methodHandle: DNMethodDefinitionHandle); overload;
    procedure Call(methodHandle: DNMethodSpecificationHandle); overload;
    procedure Call(methodHandle: DNMemberReferenceHandle); overload;
    procedure CallIndirect(signature: DNStandaloneSignatureHandle);
    procedure LoadConstantI4(value: Int32);
    procedure LoadConstantI8(value: Int64);
    procedure LoadConstantR4(value: Single);
    procedure LoadConstantR8(value: Double);
    procedure LoadLocal(slotIndex: Int32);
    procedure StoreLocal(slotIndex: Int32);
    procedure LoadLocalAddress(slotIndex: Int32);
    procedure LoadArgument(argumentIndex: Int32);
    procedure LoadArgumentAddress(argumentIndex: Int32);
    procedure StoreArgument(argumentIndex: Int32);
    function DefineLabel: DNLabelHandle;
    procedure Branch(code: DNILOpCode; &label: DNLabelHandle);
    procedure MarkLabel(&label: DNLabelHandle);
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property CodeBuilder: DNBlobBuilder read get_CodeBuilder;
    property ControlFlowBuilder: DNControlFlowBuilder read get_ControlFlowBuilder;
    property Offset: Int32 read get_Offset;
  end;

  TDNInstructionEncoder = class(TDNGenericImport<DNInstructionEncoderClass, DNInstructionEncoder>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNLabelHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{5EC31813-518C-556D-A3EF-67BC7A4C1558}']
  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.LabelHandle')]
  DNLabelHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{8094F96F-E097-36BA-AB97-C6BD4E6AA167}']
  { getters & setters } 

    function get_Id: Int32;
    function get_IsNil: Boolean;

  { methods } 

    function Equals(other: DNLabelHandle): Boolean; overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Id: Int32 read get_Id;
    property IsNil: Boolean read get_IsNil;
  end;

  TDNLabelHandle = class(TDNGenericImport<DNLabelHandleClass, DNLabelHandle>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNLiteralEncoderClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{AE45E46D-00DB-5FE5-921E-B0B3CEF8A14D}']
  { constructors } 

    {class} function init(builder: DNBlobBuilder): DNLiteralEncoder;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.LiteralEncoder')]
  DNLiteralEncoder = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{2499077E-F3BB-3D10-805D-5812B55D6E10}']
  { getters & setters } 

    function get_Builder: DNBlobBuilder;

  { methods } 

    function Vector: DNVectorEncoder;
    procedure TaggedVector(out arrayType: DNCustomAttributeArrayTypeEncoder; out vector: DNVectorEncoder); overload;
    procedure TaggedVector(arrayType: DDNC.System.Private.CoreLib.DNAction<DNCustomAttributeArrayTypeEncoder>; vector: DDNC.System.Private.CoreLib.DNAction<DNVectorEncoder>); overload;
    function Scalar: DNScalarEncoder;
    procedure TaggedScalar(out &type: DNCustomAttributeElementTypeEncoder; out scalar: DNScalarEncoder); overload;
    procedure TaggedScalar(&type: DDNC.System.Private.CoreLib.DNAction<DNCustomAttributeElementTypeEncoder>; scalar: DDNC.System.Private.CoreLib.DNAction<DNScalarEncoder>); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Builder: DNBlobBuilder read get_Builder;
  end;

  TDNLiteralEncoder = class(TDNGenericImport<DNLiteralEncoderClass, DNLiteralEncoder>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNLiteralsEncoderClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{249E426F-6554-5E35-8C33-F4104A1E486B}']
  { constructors } 

    {class} function init(builder: DNBlobBuilder): DNLiteralsEncoder;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.LiteralsEncoder')]
  DNLiteralsEncoder = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{3AC82838-4EFA-3EC3-A943-F1B2D1C9D319}']
  { getters & setters } 

    function get_Builder: DNBlobBuilder;

  { methods } 

    function AddLiteral: DNLiteralEncoder;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Builder: DNBlobBuilder read get_Builder;
  end;

  TDNLiteralsEncoder = class(TDNGenericImport<DNLiteralsEncoderClass, DNLiteralsEncoder>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNLocalVariablesEncoderClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{46B97CD5-54F5-5F6A-BE91-301029CE92FF}']
  { constructors } 

    {class} function init(builder: DNBlobBuilder): DNLocalVariablesEncoder;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.LocalVariablesEncoder')]
  DNLocalVariablesEncoder = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{DF13E704-6559-3A73-8366-356A1E815126}']
  { getters & setters } 

    function get_Builder: DNBlobBuilder;

  { methods } 

    function AddVariable: DNLocalVariableTypeEncoder;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Builder: DNBlobBuilder read get_Builder;
  end;

  TDNLocalVariablesEncoder = class(TDNGenericImport<DNLocalVariablesEncoderClass, DNLocalVariablesEncoder>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNLocalVariableTypeEncoderClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{A7C50370-E364-57D5-85EF-15D06E35CAE4}']
  { constructors } 

    {class} function init(builder: DNBlobBuilder): DNLocalVariableTypeEncoder;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.LocalVariableTypeEncoder')]
  DNLocalVariableTypeEncoder = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{B8810BF8-A2B7-3F0D-8309-C3D511A1E980}']
  { getters & setters } 

    function get_Builder: DNBlobBuilder;

  { methods } 

    function CustomModifiers: DNCustomModifiersEncoder;
    function &Type(isByRef: Boolean; isPinned: Boolean): DNSignatureTypeEncoder;
    procedure TypedReference;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Builder: DNBlobBuilder read get_Builder;
  end;

  TDNLocalVariableTypeEncoder = class(TDNGenericImport<DNLocalVariableTypeEncoderClass, DNLocalVariableTypeEncoder>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNMethodBodyStreamEncoderClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{D6844068-D9E5-5F85-92B3-5A9F814A798C}']
  { constructors } 

    {class} function init(builder: DNBlobBuilder): DNMethodBodyStreamEncoder;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.MethodBodyStreamEncoder')]
  DNMethodBodyStreamEncoder = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{732DFB29-0B15-3198-9344-1C01A2F20401}']
  { getters & setters } 

    function get_Builder: DNBlobBuilder;

  { methods } 

    function AddMethodBody(codeSize: Int32; maxStack: Int32; exceptionRegionCount: Int32; hasSmallExceptionRegions: Boolean; localVariablesSignature: DNStandaloneSignatureHandle; attributes: DNMethodBodyAttributes): DNMethodBodyStreamEncoder_MethodBody; overload;
    function AddMethodBody(codeSize: Int32; maxStack: Int32; exceptionRegionCount: Int32; hasSmallExceptionRegions: Boolean; localVariablesSignature: DNStandaloneSignatureHandle; attributes: DNMethodBodyAttributes; hasDynamicStackAllocation: Boolean): DNMethodBodyStreamEncoder_MethodBody; overload;
    function AddMethodBody(instructionEncoder: DNInstructionEncoder; maxStack: Int32; localVariablesSignature: DNStandaloneSignatureHandle; attributes: DNMethodBodyAttributes): Int32; overload;
    function AddMethodBody(instructionEncoder: DNInstructionEncoder; maxStack: Int32; localVariablesSignature: DNStandaloneSignatureHandle; attributes: DNMethodBodyAttributes; hasDynamicStackAllocation: Boolean): Int32; overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Builder: DNBlobBuilder read get_Builder;
  end;

  TDNMethodBodyStreamEncoder = class(TDNGenericImport<DNMethodBodyStreamEncoderClass, DNMethodBodyStreamEncoder>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNMethodBodyStreamEncoder_MethodBodyClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{A62972AE-DA87-5311-8B12-B358018DBD37}']
  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.MethodBodyStreamEncoder+MethodBody')]
  DNMethodBodyStreamEncoder_MethodBody = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{7FE3B1B9-605D-3578-9E93-23310D094D4C}']
  { getters & setters } 

    function get_Offset: Int32;
    function get_Instructions: DNBlob;
    function get_ExceptionRegions: DNExceptionRegionEncoder;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Offset: Int32 read get_Offset;
    property Instructions: DNBlob read get_Instructions;
    property ExceptionRegions: DNExceptionRegionEncoder read get_ExceptionRegions;
  end;

  TDNMethodBodyStreamEncoder_MethodBody = class(TDNGenericImport<DNMethodBodyStreamEncoder_MethodBodyClass, DNMethodBodyStreamEncoder_MethodBody>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNMethodSignatureEncoderClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{CB21CD5B-4E5D-5AC3-804D-8AEC2DC7FBD3}']
  { constructors } 

    {class} function init(builder: DNBlobBuilder; hasVarArgs: Boolean): DNMethodSignatureEncoder;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.MethodSignatureEncoder')]
  DNMethodSignatureEncoder = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{31B37098-D28A-3AB1-BE21-09E895E3CB74}']
  { getters & setters } 

    function get_Builder: DNBlobBuilder;
    function get_HasVarArgs: Boolean;

  { methods } 

    procedure Parameters(parameterCount: Int32; out returnType: DNReturnTypeEncoder; out parameters: DNParametersEncoder); overload;
    procedure Parameters(parameterCount: Int32; returnType: DDNC.System.Private.CoreLib.DNAction<DNReturnTypeEncoder>; parameters: DDNC.System.Private.CoreLib.DNAction<DNParametersEncoder>); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Builder: DNBlobBuilder read get_Builder;
    property HasVarArgs: Boolean read get_HasVarArgs;
  end;

  TDNMethodSignatureEncoder = class(TDNGenericImport<DNMethodSignatureEncoderClass, DNMethodSignatureEncoder>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNNamedArgumentsEncoderClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{9F4E6ED2-764C-5AA5-98E6-02095434BBD2}']
  { constructors } 

    {class} function init(builder: DNBlobBuilder): DNNamedArgumentsEncoder;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.NamedArgumentsEncoder')]
  DNNamedArgumentsEncoder = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{2E24068F-50B7-369A-B068-7FC6E8ECC356}']
  { getters & setters } 

    function get_Builder: DNBlobBuilder;

  { methods } 

    procedure AddArgument(isField: Boolean; out &type: DNNamedArgumentTypeEncoder; out name: DNNameEncoder; out literal: DNLiteralEncoder); overload;
    procedure AddArgument(isField: Boolean; &type: DDNC.System.Private.CoreLib.DNAction<DNNamedArgumentTypeEncoder>; name: DDNC.System.Private.CoreLib.DNAction<DNNameEncoder>; literal: DDNC.System.Private.CoreLib.DNAction<DNLiteralEncoder>); overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Builder: DNBlobBuilder read get_Builder;
  end;

  TDNNamedArgumentsEncoder = class(TDNGenericImport<DNNamedArgumentsEncoderClass, DNNamedArgumentsEncoder>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNNamedArgumentTypeEncoderClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{F4D029B9-CC7E-5683-B2C9-BC416C95D207}']
  { constructors } 

    {class} function init(builder: DNBlobBuilder): DNNamedArgumentTypeEncoder;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.NamedArgumentTypeEncoder')]
  DNNamedArgumentTypeEncoder = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{B14C1A10-22B9-3320-9599-71519BC0FEDD}']
  { getters & setters } 

    function get_Builder: DNBlobBuilder;

  { methods } 

    function ScalarType: DNCustomAttributeElementTypeEncoder;
    procedure &Object;
    function SZArray: DNCustomAttributeArrayTypeEncoder;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Builder: DNBlobBuilder read get_Builder;
  end;

  TDNNamedArgumentTypeEncoder = class(TDNGenericImport<DNNamedArgumentTypeEncoderClass, DNNamedArgumentTypeEncoder>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNNameEncoderClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{07A08F1A-43A3-58ED-928F-86CC402018EB}']
  { constructors } 

    {class} function init(builder: DNBlobBuilder): DNNameEncoder;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.NameEncoder')]
  DNNameEncoder = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{8A3B0A3D-3C0E-308C-9523-7ACA18F1912A}']
  { getters & setters } 

    function get_Builder: DNBlobBuilder;

  { methods } 

    procedure Name(name: string);
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Builder: DNBlobBuilder read get_Builder;
  end;

  TDNNameEncoder = class(TDNGenericImport<DNNameEncoderClass, DNNameEncoder>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNParametersEncoderClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{A0F92CF1-5EC8-5620-BB3C-2B2A9B390968}']
  { constructors } 

    {class} function init(builder: DNBlobBuilder; hasVarArgs: Boolean): DNParametersEncoder;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.ParametersEncoder')]
  DNParametersEncoder = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{9D2E91B0-FDAD-3FB8-A776-360DDA68CA5D}']
  { getters & setters } 

    function get_Builder: DNBlobBuilder;
    function get_HasVarArgs: Boolean;

  { methods } 

    function AddParameter: DNParameterTypeEncoder;
    function StartVarArgs: DNParametersEncoder;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Builder: DNBlobBuilder read get_Builder;
    property HasVarArgs: Boolean read get_HasVarArgs;
  end;

  TDNParametersEncoder = class(TDNGenericImport<DNParametersEncoderClass, DNParametersEncoder>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNParameterTypeEncoderClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{FDF64F5C-269D-5ADE-9669-487B6BDF3ADC}']
  { constructors } 

    {class} function init(builder: DNBlobBuilder): DNParameterTypeEncoder;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.ParameterTypeEncoder')]
  DNParameterTypeEncoder = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{55F5714E-6FB9-3A4D-9C18-D1434740A658}']
  { getters & setters } 

    function get_Builder: DNBlobBuilder;

  { methods } 

    function CustomModifiers: DNCustomModifiersEncoder;
    function &Type(isByRef: Boolean): DNSignatureTypeEncoder;
    procedure TypedReference;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Builder: DNBlobBuilder read get_Builder;
  end;

  TDNParameterTypeEncoder = class(TDNGenericImport<DNParameterTypeEncoderClass, DNParameterTypeEncoder>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNPermissionSetEncoderClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{79575B2D-29A5-5A76-ACF4-65483D8CACE1}']
  { constructors } 

    {class} function init(builder: DNBlobBuilder): DNPermissionSetEncoder;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.PermissionSetEncoder')]
  DNPermissionSetEncoder = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{83BB31E1-A6C1-324F-A775-27D517100C2E}']
  { getters & setters } 

    function get_Builder: DNBlobBuilder;

  { methods } 

    function AddPermission(typeName: string; encodedArguments: DDNC.System.Collections.Immutable.DNImmutableArray<Byte>): DNPermissionSetEncoder; overload;
    function AddPermission(typeName: string; encodedArguments: DNBlobBuilder): DNPermissionSetEncoder; overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Builder: DNBlobBuilder read get_Builder;
  end;

  TDNPermissionSetEncoder = class(TDNGenericImport<DNPermissionSetEncoderClass, DNPermissionSetEncoder>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNReturnTypeEncoderClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{AB53D735-6BBB-5AB3-A785-9FF6CC99E33A}']
  { constructors } 

    {class} function init(builder: DNBlobBuilder): DNReturnTypeEncoder;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.ReturnTypeEncoder')]
  DNReturnTypeEncoder = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{DD025CE8-799E-3D7B-86CC-F0935403AA04}']
  { getters & setters } 

    function get_Builder: DNBlobBuilder;

  { methods } 

    function CustomModifiers: DNCustomModifiersEncoder;
    function &Type(isByRef: Boolean): DNSignatureTypeEncoder;
    procedure TypedReference;
    procedure Void;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Builder: DNBlobBuilder read get_Builder;
  end;

  TDNReturnTypeEncoder = class(TDNGenericImport<DNReturnTypeEncoderClass, DNReturnTypeEncoder>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNScalarEncoderClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{CB0BCDF4-117E-5BCD-BA19-3A20AD43CBA2}']
  { constructors } 

    {class} function init(builder: DNBlobBuilder): DNScalarEncoder;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.ScalarEncoder')]
  DNScalarEncoder = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{12359102-6E8A-31EF-91ED-A11FEB43E98B}']
  { getters & setters } 

    function get_Builder: DNBlobBuilder;

  { methods } 

    procedure NullArray;
    procedure Constant(value: DDNC.System.Private.CoreLib.DNObject);
    procedure SystemType(serializedTypeName: string);
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Builder: DNBlobBuilder read get_Builder;
  end;

  TDNScalarEncoder = class(TDNGenericImport<DNScalarEncoderClass, DNScalarEncoder>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNSignatureDecoderClass<TType, TGenericContext> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{668256DF-9FED-5409-9B06-29785231BC6F}']
  { constructors } 

    {class} function init(provider: DNISignatureTypeProvider<TType, TGenericContext>; metadataReader: DNMetadataReader; genericContext: TGenericContext): DNSignatureDecoder<TType, TGenericContext>;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.SignatureDecoder`2')]
  DNSignatureDecoder<TType, TGenericContext> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{7179D6CC-016C-304C-A815-048C3BD616D1}']
  { methods } 

    function DecodeType(out blobReader: DNBlobReader; allowTypeSpecifications: Boolean): TType;
    function DecodeMethodSignature(out blobReader: DNBlobReader): DNMethodSignature<TType>;
    function DecodeMethodSpecificationSignature(out blobReader: DNBlobReader): DDNC.System.Collections.Immutable.DNImmutableArray<TType>;
    function DecodeLocalSignature(out blobReader: DNBlobReader): DDNC.System.Collections.Immutable.DNImmutableArray<TType>;
    function DecodeFieldSignature(out blobReader: DNBlobReader): TType;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNSignatureDecoder<TType, TGenericContext> = class(TDNGenericImport<DNSignatureDecoderClass<TType, TGenericContext>, DNSignatureDecoder<TType, TGenericContext>>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNSignatureTypeEncoderClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{81D1A808-9E0A-5FD1-AC7C-F30DA5D38031}']
  { constructors } 

    {class} function init(builder: DNBlobBuilder): DNSignatureTypeEncoder;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.SignatureTypeEncoder')]
  DNSignatureTypeEncoder = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{CBA1E555-9B7D-3E72-A240-C6FD9C26E1BB}']
  { getters & setters } 

    function get_Builder: DNBlobBuilder;

  { methods } 

    procedure Boolean;
    procedure Char;
    procedure SByte;
    procedure Byte;
    procedure Int16;
    procedure UInt16;
    procedure Int32;
    procedure UInt32;
    procedure Int64;
    procedure UInt64;
    procedure Single;
    procedure Double;
    procedure &String;
    procedure IntPtr;
    procedure UIntPtr;
    procedure &Object;
    procedure PrimitiveType(&type: DNPrimitiveTypeCode);
    procedure &Array(out elementType: DNSignatureTypeEncoder; out arrayShape: DNArrayShapeEncoder); overload;
    procedure &Array(elementType: DDNC.System.Private.CoreLib.DNAction<DNSignatureTypeEncoder>; arrayShape: DDNC.System.Private.CoreLib.DNAction<DNArrayShapeEncoder>); overload;
    procedure &Type(&type: DNEntityHandle; isValueType: Boolean);
    function FunctionPointer(convention: DNSignatureCallingConvention; attributes: DNFunctionPointerAttributes; genericParameterCount: Int32): DNMethodSignatureEncoder;
    function GenericInstantiation(genericType: DNEntityHandle; genericArgumentCount: Int32; isValueType: Boolean): DNGenericTypeArgumentsEncoder;
    procedure GenericMethodTypeParameter(parameterIndex: Int32);
    procedure GenericTypeParameter(parameterIndex: Int32);
    function Pointer: DNSignatureTypeEncoder;
    procedure VoidPointer;
    function SZArray: DNSignatureTypeEncoder;
    function CustomModifiers: DNCustomModifiersEncoder;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Builder: DNBlobBuilder read get_Builder;
  end;

  TDNSignatureTypeEncoder = class(TDNGenericImport<DNSignatureTypeEncoderClass, DNSignatureTypeEncoder>) end;

  //-------------namespace: System.Reflection.Metadata.Ecma335----------------
  DNVectorEncoderClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{AB8AE4C1-A32B-5425-A592-27C41345E4FB}']
  { constructors } 

    {class} function init(builder: DNBlobBuilder): DNVectorEncoder;

  end;

  [DNTypeName('System.Reflection.Metadata.Ecma335.VectorEncoder')]
  DNVectorEncoder = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{388015C8-306B-3BAB-AD94-B30B20985CD5}']
  { getters & setters } 

    function get_Builder: DNBlobBuilder;

  { methods } 

    function Count(count: Int32): DNLiteralsEncoder;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Builder: DNBlobBuilder read get_Builder;
  end;

  TDNVectorEncoder = class(TDNGenericImport<DNVectorEncoderClass, DNVectorEncoder>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNEntityHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{4C937E2F-8CB2-57EF-94ED-6B9BF85D473B}']
  { static fields getter & setter } 

   function __fakeFieldGet_ModuleDefinition: DNModuleDefinitionHandle;
   function __fakeFieldGet_AssemblyDefinition: DNAssemblyDefinitionHandle;

  { static fields } 

    {class} property ModuleDefinition: DNModuleDefinitionHandle read __fakeFieldGet_ModuleDefinition;
    {class} property AssemblyDefinition: DNAssemblyDefinitionHandle read __fakeFieldGet_AssemblyDefinition;

  end;

  [DNTypeName('System.Reflection.Metadata.EntityHandle')]
  DNEntityHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{C920C976-18A6-3319-ABA5-96FDC55D5C5B}']
  { getters & setters } 

    function get_IsNil: Boolean;
    function get_Kind: DNHandleKind;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNEntityHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
    property Kind: DNHandleKind read get_Kind;
  end;

  TDNEntityHandle = class(TDNGenericImport<DNEntityHandleClass, DNEntityHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNEventAccessorsClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{8053C0B8-97FF-5499-A6F8-15095C96E592}']
  end;

  [DNTypeName('System.Reflection.Metadata.EventAccessors')]
  DNEventAccessors = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{E6AABA8E-EE46-364C-8696-54EF3AE622DD}']
  { getters & setters } 

    function get_Adder: DNMethodDefinitionHandle;
    function get_Remover: DNMethodDefinitionHandle;
    function get_Raiser: DNMethodDefinitionHandle;
    function get_Others: DDNC.System.Collections.Immutable.DNImmutableArray<DNMethodDefinitionHandle>;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Adder: DNMethodDefinitionHandle read get_Adder;
    property Remover: DNMethodDefinitionHandle read get_Remover;
    property Raiser: DNMethodDefinitionHandle read get_Raiser;
    property Others: DDNC.System.Collections.Immutable.DNImmutableArray<DNMethodDefinitionHandle> read get_Others;
  end;

  TDNEventAccessors = class(TDNGenericImport<DNEventAccessorsClass, DNEventAccessors>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNEventDefinitionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{9EFBBFE0-E8B5-5433-94AE-F8F7DC763B82}']
  end;

  [DNTypeName('System.Reflection.Metadata.EventDefinition')]
  DNEventDefinition = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{6B8F0A3F-3E1C-3802-BBA4-092F7472F9D5}']
  { getters & setters } 

    function get_Name: DNStringHandle;
    function get_Attributes: DDNC.System.Private.CoreLib.DNEventAttributes;
    function get_Type: DNEntityHandle;

  { methods } 

    function GetCustomAttributes: DNCustomAttributeHandleCollection;
    function GetAccessors: DNEventAccessors;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Name: DNStringHandle read get_Name;
    property Attributes: DDNC.System.Private.CoreLib.DNEventAttributes read get_Attributes;
    property &Type: DNEntityHandle read get_Type;
  end;

  TDNEventDefinition = class(TDNGenericImport<DNEventDefinitionClass, DNEventDefinition>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNEventDefinitionHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{51DBC44F-E6C9-56DC-9ACA-EF28E21F5151}']
  end;

  [DNTypeName('System.Reflection.Metadata.EventDefinitionHandle')]
  DNEventDefinitionHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{AF705D0B-E4DA-38D9-BE0B-E2DE95F4EAFC}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNEventDefinitionHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNEventDefinitionHandle = class(TDNGenericImport<DNEventDefinitionHandleClass, DNEventDefinitionHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNEventDefinitionHandleCollectionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{7AB94E2E-9487-585F-8328-85D22AFE1D8B}']
  end;

  [DNTypeName('System.Reflection.Metadata.EventDefinitionHandleCollection')]
  DNEventDefinitionHandleCollection = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{080D8221-4CB6-378D-87D8-F8ACC773CCF5}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNEventDefinitionHandleCollection_Enumerator;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNEventDefinitionHandleCollection = class(TDNGenericImport<DNEventDefinitionHandleCollectionClass, DNEventDefinitionHandleCollection>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNEventDefinitionHandleCollection_EnumeratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{809CCE28-23FF-5877-B93B-C3BBCDD3BF81}']
  end;

  [DNTypeName('System.Reflection.Metadata.EventDefinitionHandleCollection+Enumerator')]
  DNEventDefinitionHandleCollection_Enumerator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{7B5B718B-C083-3FD5-B59A-C0BCB7938EB5}']
  { getters & setters } 

    function get_Current: DNEventDefinitionHandle;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNEventDefinitionHandle read get_Current;
  end;

  TDNEventDefinitionHandleCollection_Enumerator = class(TDNGenericImport<DNEventDefinitionHandleCollection_EnumeratorClass, DNEventDefinitionHandleCollection_Enumerator>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNExceptionRegionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{1B8D899B-7698-5BC7-9A4C-7952319FDCE2}']
  end;

  [DNTypeName('System.Reflection.Metadata.ExceptionRegion')]
  DNExceptionRegion = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{0FE45B64-29D0-3C7B-ACF6-856D80917861}']
  { getters & setters } 

    function get_Kind: DNExceptionRegionKind;
    function get_TryOffset: Int32;
    function get_TryLength: Int32;
    function get_HandlerOffset: Int32;
    function get_HandlerLength: Int32;
    function get_FilterOffset: Int32;
    function get_CatchType: DNEntityHandle;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Kind: DNExceptionRegionKind read get_Kind;
    property TryOffset: Int32 read get_TryOffset;
    property TryLength: Int32 read get_TryLength;
    property HandlerOffset: Int32 read get_HandlerOffset;
    property HandlerLength: Int32 read get_HandlerLength;
    property FilterOffset: Int32 read get_FilterOffset;
    property CatchType: DNEntityHandle read get_CatchType;
  end;

  TDNExceptionRegion = class(TDNGenericImport<DNExceptionRegionClass, DNExceptionRegion>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNExportedTypeClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{94AE4570-2A23-5D43-A376-A564AA5CBB72}']
  end;

  [DNTypeName('System.Reflection.Metadata.ExportedType')]
  DNExportedType = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{B483229C-732F-3EDA-96AE-4A086FA1AB19}']
  { getters & setters } 

    function get_Attributes: DDNC.System.Private.CoreLib.DNTypeAttributes;
    function get_IsForwarder: Boolean;
    function get_Name: DNStringHandle;
    function get_Namespace: DNStringHandle;
    function get_NamespaceDefinition: DNNamespaceDefinitionHandle;
    function get_Implementation: DNEntityHandle;

  { methods } 

    function GetCustomAttributes: DNCustomAttributeHandleCollection;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Attributes: DDNC.System.Private.CoreLib.DNTypeAttributes read get_Attributes;
    property IsForwarder: Boolean read get_IsForwarder;
    property Name: DNStringHandle read get_Name;
    property Namespace: DNStringHandle read get_Namespace;
    property NamespaceDefinition: DNNamespaceDefinitionHandle read get_NamespaceDefinition;
    property &Implementation: DNEntityHandle read get_Implementation;
  end;

  TDNExportedType = class(TDNGenericImport<DNExportedTypeClass, DNExportedType>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNExportedTypeHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{0532E190-2C82-5CE4-B60C-E7CE08DDAE92}']
  end;

  [DNTypeName('System.Reflection.Metadata.ExportedTypeHandle')]
  DNExportedTypeHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{52B26F17-D8FC-3A67-B130-A395D486D392}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNExportedTypeHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNExportedTypeHandle = class(TDNGenericImport<DNExportedTypeHandleClass, DNExportedTypeHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNExportedTypeHandleCollectionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{CE24C689-D026-5F51-9D4A-842F9EA66198}']
  end;

  [DNTypeName('System.Reflection.Metadata.ExportedTypeHandleCollection')]
  DNExportedTypeHandleCollection = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{081D41E3-0282-3C0D-A2CA-B709C48B4204}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNExportedTypeHandleCollection_Enumerator;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNExportedTypeHandleCollection = class(TDNGenericImport<DNExportedTypeHandleCollectionClass, DNExportedTypeHandleCollection>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNExportedTypeHandleCollection_EnumeratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{BE7CFF8F-FB64-56F3-844C-D6AD0FD41142}']
  end;

  [DNTypeName('System.Reflection.Metadata.ExportedTypeHandleCollection+Enumerator')]
  DNExportedTypeHandleCollection_Enumerator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{6385FA4E-7C46-3F98-946E-FDF5C2B30503}']
  { getters & setters } 

    function get_Current: DNExportedTypeHandle;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNExportedTypeHandle read get_Current;
  end;

  TDNExportedTypeHandleCollection_Enumerator = class(TDNGenericImport<DNExportedTypeHandleCollection_EnumeratorClass, DNExportedTypeHandleCollection_Enumerator>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNFieldDefinitionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{5777AF36-7FE9-5059-8BFD-4DC2112DCB59}']
  end;

  [DNTypeName('System.Reflection.Metadata.FieldDefinition')]
  DNFieldDefinition = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{7BCEAEF9-39D6-3F6F-949B-1B831DEDB866}']
  { getters & setters } 

    function get_Name: DNStringHandle;
    function get_Attributes: DDNC.System.Private.CoreLib.DNFieldAttributes;
    function get_Signature: DNBlobHandle;

  { methods } 

    function GetDeclaringType: DNTypeDefinitionHandle;
    function GetDefaultValue: DNConstantHandle;
    function GetRelativeVirtualAddress: Int32;
    function GetOffset: Int32;
    function GetMarshallingDescriptor: DNBlobHandle;
    function GetCustomAttributes: DNCustomAttributeHandleCollection;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Name: DNStringHandle read get_Name;
    property Attributes: DDNC.System.Private.CoreLib.DNFieldAttributes read get_Attributes;
    property Signature: DNBlobHandle read get_Signature;
  end;

  TDNFieldDefinition = class(TDNGenericImport<DNFieldDefinitionClass, DNFieldDefinition>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNFieldDefinitionHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{7DDE1DE3-26BC-5445-B24B-08061B24DD6B}']
  end;

  [DNTypeName('System.Reflection.Metadata.FieldDefinitionHandle')]
  DNFieldDefinitionHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{2F98A027-82D7-333F-9D42-935ED363E2E6}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNFieldDefinitionHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNFieldDefinitionHandle = class(TDNGenericImport<DNFieldDefinitionHandleClass, DNFieldDefinitionHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNFieldDefinitionHandleCollectionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{C5596424-FA0D-5170-ACCA-AB2B2C839F85}']
  end;

  [DNTypeName('System.Reflection.Metadata.FieldDefinitionHandleCollection')]
  DNFieldDefinitionHandleCollection = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{0652E308-E04A-312F-89C1-6E53E2D3DF34}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNFieldDefinitionHandleCollection_Enumerator;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNFieldDefinitionHandleCollection = class(TDNGenericImport<DNFieldDefinitionHandleCollectionClass, DNFieldDefinitionHandleCollection>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNFieldDefinitionHandleCollection_EnumeratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{FF432623-FB6A-5F86-A654-C5A9E8744095}']
  end;

  [DNTypeName('System.Reflection.Metadata.FieldDefinitionHandleCollection+Enumerator')]
  DNFieldDefinitionHandleCollection_Enumerator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{9968A259-D856-3490-9CCA-46E14A482FA7}']
  { getters & setters } 

    function get_Current: DNFieldDefinitionHandle;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNFieldDefinitionHandle read get_Current;
  end;

  TDNFieldDefinitionHandleCollection_Enumerator = class(TDNGenericImport<DNFieldDefinitionHandleCollection_EnumeratorClass, DNFieldDefinitionHandleCollection_Enumerator>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNGenericParameterClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{4C82301E-CAA6-57DE-967F-A4DF29E6903E}']
  end;

  [DNTypeName('System.Reflection.Metadata.GenericParameter')]
  DNGenericParameter = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{F0222AC0-541D-30C5-8ECF-258783337D59}']
  { getters & setters } 

    function get_Parent: DNEntityHandle;
    function get_Attributes: DDNC.System.Private.CoreLib.DNGenericParameterAttributes;
    function get_Index: Int32;
    function get_Name: DNStringHandle;

  { methods } 

    function GetConstraints: DNGenericParameterConstraintHandleCollection;
    function GetCustomAttributes: DNCustomAttributeHandleCollection;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Parent: DNEntityHandle read get_Parent;
    property Attributes: DDNC.System.Private.CoreLib.DNGenericParameterAttributes read get_Attributes;
    property Index: Int32 read get_Index;
    property Name: DNStringHandle read get_Name;
  end;

  TDNGenericParameter = class(TDNGenericImport<DNGenericParameterClass, DNGenericParameter>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNGenericParameterConstraintClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{BAF7ABE5-2AFE-5183-8405-F85F0E6BC534}']
  end;

  [DNTypeName('System.Reflection.Metadata.GenericParameterConstraint')]
  DNGenericParameterConstraint = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{D7FBF34E-9FE8-3542-9E63-AFFA096B03FC}']
  { getters & setters } 

    function get_Parameter: DNGenericParameterHandle;
    function get_Type: DNEntityHandle;

  { methods } 

    function GetCustomAttributes: DNCustomAttributeHandleCollection;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Parameter: DNGenericParameterHandle read get_Parameter;
    property &Type: DNEntityHandle read get_Type;
  end;

  TDNGenericParameterConstraint = class(TDNGenericImport<DNGenericParameterConstraintClass, DNGenericParameterConstraint>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNGenericParameterConstraintHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{81A5128F-6DD3-5A22-8E5C-9DB8E1CF727E}']
  end;

  [DNTypeName('System.Reflection.Metadata.GenericParameterConstraintHandle')]
  DNGenericParameterConstraintHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{9DD87119-BB7C-3395-A743-870CB063778B}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNGenericParameterConstraintHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNGenericParameterConstraintHandle = class(TDNGenericImport<DNGenericParameterConstraintHandleClass, DNGenericParameterConstraintHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNGenericParameterConstraintHandleCollectionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{03D02328-E820-5B25-8B88-A835E50C7B5C}']
  end;

  [DNTypeName('System.Reflection.Metadata.GenericParameterConstraintHandleCollection')]
  DNGenericParameterConstraintHandleCollection = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{C0DA0E9F-3AFA-3370-BE74-645323861EDD}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNGenericParameterConstraintHandleCollection_Enumerator;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNGenericParameterConstraintHandleCollection = class(TDNGenericImport<DNGenericParameterConstraintHandleCollectionClass, DNGenericParameterConstraintHandleCollection>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNGenericParameterConstraintHandleCollection_EnumeratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{C01A2B3C-A3AD-5C8F-8F4E-89C7AAB6990F}']
  end;

  [DNTypeName('System.Reflection.Metadata.GenericParameterConstraintHandleCollection+Enumerator')]
  DNGenericParameterConstraintHandleCollection_Enumerator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{8497E581-8D3D-345C-8DFF-C507CE7A8702}']
  { getters & setters } 

    function get_Current: DNGenericParameterConstraintHandle;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNGenericParameterConstraintHandle read get_Current;
  end;

  TDNGenericParameterConstraintHandleCollection_Enumerator = class(TDNGenericImport<DNGenericParameterConstraintHandleCollection_EnumeratorClass, DNGenericParameterConstraintHandleCollection_Enumerator>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNGenericParameterHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{CC5CBFCF-95FE-5D10-BC29-F2C35AC2C24A}']
  end;

  [DNTypeName('System.Reflection.Metadata.GenericParameterHandle')]
  DNGenericParameterHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{1FD2DA6C-AA43-324F-AF0D-C4D2E7D2BF4D}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNGenericParameterHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNGenericParameterHandle = class(TDNGenericImport<DNGenericParameterHandleClass, DNGenericParameterHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNGenericParameterHandleCollectionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{E07DA1AE-1350-5D49-9312-9453D4BF0F4E}']
  end;

  [DNTypeName('System.Reflection.Metadata.GenericParameterHandleCollection')]
  DNGenericParameterHandleCollection = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{FBA357B7-C947-3675-B2DA-ADEABF15DBF8}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNGenericParameterHandleCollection_Enumerator;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNGenericParameterHandleCollection = class(TDNGenericImport<DNGenericParameterHandleCollectionClass, DNGenericParameterHandleCollection>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNGenericParameterHandleCollection_EnumeratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{A2A727CA-9EEA-5DA3-AC92-F7B35BFE4119}']
  end;

  [DNTypeName('System.Reflection.Metadata.GenericParameterHandleCollection+Enumerator')]
  DNGenericParameterHandleCollection_Enumerator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{9A840446-B75A-355B-B2B5-F215A6510522}']
  { getters & setters } 

    function get_Current: DNGenericParameterHandle;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNGenericParameterHandle read get_Current;
  end;

  TDNGenericParameterHandleCollection_Enumerator = class(TDNGenericImport<DNGenericParameterHandleCollection_EnumeratorClass, DNGenericParameterHandleCollection_Enumerator>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNGuidHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{C3EF034E-667E-552A-B222-9C510F0CC3FD}']
  end;

  [DNTypeName('System.Reflection.Metadata.GuidHandle')]
  DNGuidHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{29D653DD-0EF5-34C5-B0A0-C41A3364675A}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNGuidHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNGuidHandle = class(TDNGenericImport<DNGuidHandleClass, DNGuidHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{048C57C6-ADCC-5C47-A879-A1449B7F08B7}']
  { static fields getter & setter } 

   function __fakeFieldGet_ModuleDefinition: DNModuleDefinitionHandle;
   function __fakeFieldGet_AssemblyDefinition: DNAssemblyDefinitionHandle;

  { static fields } 

    {class} property ModuleDefinition: DNModuleDefinitionHandle read __fakeFieldGet_ModuleDefinition;
    {class} property AssemblyDefinition: DNAssemblyDefinitionHandle read __fakeFieldGet_AssemblyDefinition;

  end;

  [DNTypeName('System.Reflection.Metadata.Handle')]
  DNHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{970C2FA2-6EDB-30E0-B30F-89E2A1CA34B0}']
  { getters & setters } 

    function get_Kind: DNHandleKind;
    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Kind: DNHandleKind read get_Kind;
    property IsNil: Boolean read get_IsNil;
  end;

  TDNHandle = class(TDNGenericImport<DNHandleClass, DNHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNImportDefinitionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{11425D02-BB89-58BA-8C0B-72A032665BC1}']
  end;

  [DNTypeName('System.Reflection.Metadata.ImportDefinition')]
  DNImportDefinition = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{4CBC0404-1B3C-3CCE-A3C4-334423EAAE6E}']
  { getters & setters } 

    function get_Kind: DNImportDefinitionKind;
    function get_Alias: DNBlobHandle;
    function get_TargetAssembly: DNAssemblyReferenceHandle;
    function get_TargetNamespace: DNBlobHandle;
    function get_TargetType: DNEntityHandle;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Kind: DNImportDefinitionKind read get_Kind;
    property Alias: DNBlobHandle read get_Alias;
    property TargetAssembly: DNAssemblyReferenceHandle read get_TargetAssembly;
    property TargetNamespace: DNBlobHandle read get_TargetNamespace;
    property TargetType: DNEntityHandle read get_TargetType;
  end;

  TDNImportDefinition = class(TDNGenericImport<DNImportDefinitionClass, DNImportDefinition>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNImportDefinitionCollectionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{7DF57F0B-5B55-5435-A9E2-489BCEB1840A}']
  end;

  [DNTypeName('System.Reflection.Metadata.ImportDefinitionCollection')]
  DNImportDefinitionCollection = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{BE91305E-2D16-3584-BC7C-BD95F4CAD39F}']
  { methods } 

    function GetEnumerator: DNImportDefinitionCollection_Enumerator;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNImportDefinitionCollection = class(TDNGenericImport<DNImportDefinitionCollectionClass, DNImportDefinitionCollection>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNImportDefinitionCollection_EnumeratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{921FE9CE-1D77-5E8C-895F-4AFF28DCA72A}']
  end;

  [DNTypeName('System.Reflection.Metadata.ImportDefinitionCollection+Enumerator')]
  DNImportDefinitionCollection_Enumerator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{0BC5635F-BBD5-34AE-A541-B06769BFE82F}']
  { getters & setters } 

    function get_Current: DNImportDefinition;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNImportDefinition read get_Current;
  end;

  TDNImportDefinitionCollection_Enumerator = class(TDNGenericImport<DNImportDefinitionCollection_EnumeratorClass, DNImportDefinitionCollection_Enumerator>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNImportScopeClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{ABA0FC4F-2162-5269-96D6-66C5548A7C4D}']
  end;

  [DNTypeName('System.Reflection.Metadata.ImportScope')]
  DNImportScope = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{C477A914-FF7A-347C-A752-3EED64CA7CD6}']
  { getters & setters } 

    function get_Parent: DNImportScopeHandle;
    function get_ImportsBlob: DNBlobHandle;

  { methods } 

    function GetImports: DNImportDefinitionCollection;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Parent: DNImportScopeHandle read get_Parent;
    property ImportsBlob: DNBlobHandle read get_ImportsBlob;
  end;

  TDNImportScope = class(TDNGenericImport<DNImportScopeClass, DNImportScope>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNImportScopeCollectionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{E90FF0DA-8C21-5669-AA6E-73F3D237B6BB}']
  end;

  [DNTypeName('System.Reflection.Metadata.ImportScopeCollection')]
  DNImportScopeCollection = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{3B92A920-38B2-356E-A4D0-2C18970EE91A}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNImportScopeCollection_Enumerator;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNImportScopeCollection = class(TDNGenericImport<DNImportScopeCollectionClass, DNImportScopeCollection>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNImportScopeCollection_EnumeratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{AA5A89E7-9208-5348-AAE1-41F80C991A39}']
  end;

  [DNTypeName('System.Reflection.Metadata.ImportScopeCollection+Enumerator')]
  DNImportScopeCollection_Enumerator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{DEA54095-B008-308F-86E2-72C05C133406}']
  { getters & setters } 

    function get_Current: DNImportScopeHandle;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNImportScopeHandle read get_Current;
  end;

  TDNImportScopeCollection_Enumerator = class(TDNGenericImport<DNImportScopeCollection_EnumeratorClass, DNImportScopeCollection_Enumerator>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNImportScopeHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{BA858FE6-EDC1-5078-B917-A4C4AB6B1F37}']
  end;

  [DNTypeName('System.Reflection.Metadata.ImportScopeHandle')]
  DNImportScopeHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{0D54500D-572C-3D7C-90AA-C1E635A8CEDC}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNImportScopeHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNImportScopeHandle = class(TDNGenericImport<DNImportScopeHandleClass, DNImportScopeHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNInterfaceImplementationClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{B96125E5-25B9-5CEC-923F-DDADC49DEBEF}']
  end;

  [DNTypeName('System.Reflection.Metadata.InterfaceImplementation')]
  DNInterfaceImplementation = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{85730E46-E56A-3D5C-908B-2D58074E41A3}']
  { getters & setters } 

    function get_Interface: DNEntityHandle;

  { methods } 

    function GetCustomAttributes: DNCustomAttributeHandleCollection;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property &Interface: DNEntityHandle read get_Interface;
  end;

  TDNInterfaceImplementation = class(TDNGenericImport<DNInterfaceImplementationClass, DNInterfaceImplementation>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNInterfaceImplementationHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{70785D92-C048-5BCC-BAC2-7D5A289591BB}']
  end;

  [DNTypeName('System.Reflection.Metadata.InterfaceImplementationHandle')]
  DNInterfaceImplementationHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{62A0D0B2-6FD6-3FC9-B8A3-BEC57718D132}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNInterfaceImplementationHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNInterfaceImplementationHandle = class(TDNGenericImport<DNInterfaceImplementationHandleClass, DNInterfaceImplementationHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNInterfaceImplementationHandleCollectionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{DF6C8BA1-72EA-5938-A406-94BC399245A1}']
  end;

  [DNTypeName('System.Reflection.Metadata.InterfaceImplementationHandleCollection')]
  DNInterfaceImplementationHandleCollection = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{1829A094-E0F1-3ACC-92B3-2A4A8908F759}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNInterfaceImplementationHandleCollection_Enumerator;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNInterfaceImplementationHandleCollection = class(TDNGenericImport<DNInterfaceImplementationHandleCollectionClass, DNInterfaceImplementationHandleCollection>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNInterfaceImplementationHandleCollection_EnumeratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{9373D64F-82D4-5B03-9A63-2EE11EC6403C}']
  end;

  [DNTypeName('System.Reflection.Metadata.InterfaceImplementationHandleCollection+Enumerator')]
  DNInterfaceImplementationHandleCollection_Enumerator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{2529E09A-76A0-323F-8EFB-58823F68B574}']
  { getters & setters } 

    function get_Current: DNInterfaceImplementationHandle;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNInterfaceImplementationHandle read get_Current;
  end;

  TDNInterfaceImplementationHandleCollection_Enumerator = class(TDNGenericImport<DNInterfaceImplementationHandleCollection_EnumeratorClass, DNInterfaceImplementationHandleCollection_Enumerator>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNLocalConstantClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{FEA92A84-8A05-5973-A9F4-43E08A577CC2}']
  end;

  [DNTypeName('System.Reflection.Metadata.LocalConstant')]
  DNLocalConstant = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{844407FF-8992-31A9-9EDC-54E1F283D48C}']
  { getters & setters } 

    function get_Name: DNStringHandle;
    function get_Signature: DNBlobHandle;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Name: DNStringHandle read get_Name;
    property Signature: DNBlobHandle read get_Signature;
  end;

  TDNLocalConstant = class(TDNGenericImport<DNLocalConstantClass, DNLocalConstant>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNLocalConstantHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{CF1CE6DA-F0D8-5335-90F1-A102AF840755}']
  end;

  [DNTypeName('System.Reflection.Metadata.LocalConstantHandle')]
  DNLocalConstantHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{F9F83A9D-4C8D-3816-9980-31F3A513A4F9}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNLocalConstantHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNLocalConstantHandle = class(TDNGenericImport<DNLocalConstantHandleClass, DNLocalConstantHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNLocalConstantHandleCollectionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{0F2668AC-0960-539F-ACF8-4FA49CC771EF}']
  end;

  [DNTypeName('System.Reflection.Metadata.LocalConstantHandleCollection')]
  DNLocalConstantHandleCollection = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{EB3417C9-6690-340A-89CC-16FCAC937D1D}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNLocalConstantHandleCollection_Enumerator;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNLocalConstantHandleCollection = class(TDNGenericImport<DNLocalConstantHandleCollectionClass, DNLocalConstantHandleCollection>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNLocalConstantHandleCollection_EnumeratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{5884CF45-BAE5-5EA9-992D-52E56167F69B}']
  end;

  [DNTypeName('System.Reflection.Metadata.LocalConstantHandleCollection+Enumerator')]
  DNLocalConstantHandleCollection_Enumerator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{22832244-8C96-30D6-8C3E-8B0D10174757}']
  { getters & setters } 

    function get_Current: DNLocalConstantHandle;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNLocalConstantHandle read get_Current;
  end;

  TDNLocalConstantHandleCollection_Enumerator = class(TDNGenericImport<DNLocalConstantHandleCollection_EnumeratorClass, DNLocalConstantHandleCollection_Enumerator>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNLocalScopeClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{58B78A6B-DD5D-5B4D-AD32-570242C734D7}']
  end;

  [DNTypeName('System.Reflection.Metadata.LocalScope')]
  DNLocalScope = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{563C8BD5-E6D6-38A3-8D99-B99F4DC86A63}']
  { getters & setters } 

    function get_Method: DNMethodDefinitionHandle;
    function get_ImportScope: DNImportScopeHandle;
    function get_StartOffset: Int32;
    function get_Length: Int32;
    function get_EndOffset: Int32;

  { methods } 

    function GetLocalVariables: DNLocalVariableHandleCollection;
    function GetLocalConstants: DNLocalConstantHandleCollection;
    function GetChildren: DNLocalScopeHandleCollection_ChildrenEnumerator;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Method: DNMethodDefinitionHandle read get_Method;
    property ImportScope: DNImportScopeHandle read get_ImportScope;
    property StartOffset: Int32 read get_StartOffset;
    property Length: Int32 read get_Length;
    property EndOffset: Int32 read get_EndOffset;
  end;

  TDNLocalScope = class(TDNGenericImport<DNLocalScopeClass, DNLocalScope>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNLocalScopeHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{67EE72E2-B67E-5C58-91E7-23D5B5E1CF22}']
  end;

  [DNTypeName('System.Reflection.Metadata.LocalScopeHandle')]
  DNLocalScopeHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{BA8586C1-D424-3BF0-9C3D-FFF88493A7EB}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNLocalScopeHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNLocalScopeHandle = class(TDNGenericImport<DNLocalScopeHandleClass, DNLocalScopeHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNLocalScopeHandleCollectionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{059A2127-F505-5EE3-B6B7-E3AFD1AC0DCB}']
  end;

  [DNTypeName('System.Reflection.Metadata.LocalScopeHandleCollection')]
  DNLocalScopeHandleCollection = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{E69EA3A8-AB88-3932-B6C4-9AB4A07FFC8C}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNLocalScopeHandleCollection_Enumerator;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNLocalScopeHandleCollection = class(TDNGenericImport<DNLocalScopeHandleCollectionClass, DNLocalScopeHandleCollection>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNLocalScopeHandleCollection_ChildrenEnumeratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{C112C493-8740-56FF-B55F-436FF25F61DA}']
  end;

  [DNTypeName('System.Reflection.Metadata.LocalScopeHandleCollection+ChildrenEnumerator')]
  DNLocalScopeHandleCollection_ChildrenEnumerator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{2C404D29-D411-39C2-ABA9-5A2B926CEE28}']
  { getters & setters } 

    function get_Current: DNLocalScopeHandle;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNLocalScopeHandle read get_Current;
  end;

  TDNLocalScopeHandleCollection_ChildrenEnumerator = class(TDNGenericImport<DNLocalScopeHandleCollection_ChildrenEnumeratorClass, DNLocalScopeHandleCollection_ChildrenEnumerator>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNLocalScopeHandleCollection_EnumeratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{D983477E-4E75-5CA2-9DD5-596A8C6D5687}']
  end;

  [DNTypeName('System.Reflection.Metadata.LocalScopeHandleCollection+Enumerator')]
  DNLocalScopeHandleCollection_Enumerator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{13839A61-7CA5-3F5C-A94A-78056711CD20}']
  { getters & setters } 

    function get_Current: DNLocalScopeHandle;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNLocalScopeHandle read get_Current;
  end;

  TDNLocalScopeHandleCollection_Enumerator = class(TDNGenericImport<DNLocalScopeHandleCollection_EnumeratorClass, DNLocalScopeHandleCollection_Enumerator>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNLocalVariableClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{8FA9A1B3-E7F1-51FF-AC16-21357B1C3B2A}']
  end;

  [DNTypeName('System.Reflection.Metadata.LocalVariable')]
  DNLocalVariable = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{EF2835A5-260C-3FA9-8A00-B1C2FB180B13}']
  { getters & setters } 

    function get_Attributes: DNLocalVariableAttributes;
    function get_Index: Int32;
    function get_Name: DNStringHandle;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Attributes: DNLocalVariableAttributes read get_Attributes;
    property Index: Int32 read get_Index;
    property Name: DNStringHandle read get_Name;
  end;

  TDNLocalVariable = class(TDNGenericImport<DNLocalVariableClass, DNLocalVariable>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNLocalVariableHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{DB0C715C-5FC7-5C00-8627-C8388E4DA013}']
  end;

  [DNTypeName('System.Reflection.Metadata.LocalVariableHandle')]
  DNLocalVariableHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{FCE11F59-1064-3F3C-AC6D-F981ADDA42A6}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNLocalVariableHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNLocalVariableHandle = class(TDNGenericImport<DNLocalVariableHandleClass, DNLocalVariableHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNLocalVariableHandleCollectionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{228F1333-D34A-5AAD-9FAB-A880548890AF}']
  end;

  [DNTypeName('System.Reflection.Metadata.LocalVariableHandleCollection')]
  DNLocalVariableHandleCollection = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{70A32693-A88C-3B34-B767-0EC51C064B22}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNLocalVariableHandleCollection_Enumerator;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNLocalVariableHandleCollection = class(TDNGenericImport<DNLocalVariableHandleCollectionClass, DNLocalVariableHandleCollection>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNLocalVariableHandleCollection_EnumeratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{F34413E2-069F-5B4A-BB65-7FC9CE80D2CA}']
  end;

  [DNTypeName('System.Reflection.Metadata.LocalVariableHandleCollection+Enumerator')]
  DNLocalVariableHandleCollection_Enumerator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{FB0FD187-1EB5-3072-9E18-C36B542E7CDD}']
  { getters & setters } 

    function get_Current: DNLocalVariableHandle;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNLocalVariableHandle read get_Current;
  end;

  TDNLocalVariableHandleCollection_Enumerator = class(TDNGenericImport<DNLocalVariableHandleCollection_EnumeratorClass, DNLocalVariableHandleCollection_Enumerator>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNManifestResourceClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{E68646C5-8120-5810-B458-FE94F0E5EE92}']
  end;

  [DNTypeName('System.Reflection.Metadata.ManifestResource')]
  DNManifestResource = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{D83B66AC-476A-37AA-A3F1-F0C47FE09E70}']
  { getters & setters } 

    function get_Offset: Int64;
    function get_Attributes: DNManifestResourceAttributes;
    function get_Name: DNStringHandle;
    function get_Implementation: DNEntityHandle;

  { methods } 

    function GetCustomAttributes: DNCustomAttributeHandleCollection;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Offset: Int64 read get_Offset;
    property Attributes: DNManifestResourceAttributes read get_Attributes;
    property Name: DNStringHandle read get_Name;
    property &Implementation: DNEntityHandle read get_Implementation;
  end;

  TDNManifestResource = class(TDNGenericImport<DNManifestResourceClass, DNManifestResource>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNManifestResourceHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{9BA8E2F1-EBD8-535C-8D83-76A0BC86C239}']
  end;

  [DNTypeName('System.Reflection.Metadata.ManifestResourceHandle')]
  DNManifestResourceHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{F5843354-124C-37CC-BBF6-EBEEF23B1A7B}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNManifestResourceHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNManifestResourceHandle = class(TDNGenericImport<DNManifestResourceHandleClass, DNManifestResourceHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNManifestResourceHandleCollectionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{E479ECFC-16F1-5B30-AFC2-47B20A181142}']
  end;

  [DNTypeName('System.Reflection.Metadata.ManifestResourceHandleCollection')]
  DNManifestResourceHandleCollection = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{95C09CB4-B879-37D7-B2EE-657A5B55C0C3}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNManifestResourceHandleCollection_Enumerator;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNManifestResourceHandleCollection = class(TDNGenericImport<DNManifestResourceHandleCollectionClass, DNManifestResourceHandleCollection>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNManifestResourceHandleCollection_EnumeratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{8AE907F4-F757-543B-9B90-1C201104CE9D}']
  end;

  [DNTypeName('System.Reflection.Metadata.ManifestResourceHandleCollection+Enumerator')]
  DNManifestResourceHandleCollection_Enumerator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{E3E1D223-5319-3E45-866E-AF3264FA09F1}']
  { getters & setters } 

    function get_Current: DNManifestResourceHandle;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNManifestResourceHandle read get_Current;
  end;

  TDNManifestResourceHandleCollection_Enumerator = class(TDNGenericImport<DNManifestResourceHandleCollection_EnumeratorClass, DNManifestResourceHandleCollection_Enumerator>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNMemberReferenceClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{757BA7E8-FED6-533E-B109-C2074A11E78C}']
  end;

  [DNTypeName('System.Reflection.Metadata.MemberReference')]
  DNMemberReference = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{606D71C8-50C5-32A0-9AC9-472730E65995}']
  { getters & setters } 

    function get_Parent: DNEntityHandle;
    function get_Name: DNStringHandle;
    function get_Signature: DNBlobHandle;

  { methods } 

    function GetKind: DNMemberReferenceKind;
    function GetCustomAttributes: DNCustomAttributeHandleCollection;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Parent: DNEntityHandle read get_Parent;
    property Name: DNStringHandle read get_Name;
    property Signature: DNBlobHandle read get_Signature;
  end;

  TDNMemberReference = class(TDNGenericImport<DNMemberReferenceClass, DNMemberReference>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNMemberReferenceHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{0C6B5FBE-B864-517E-8AB9-11CD3FD22298}']
  end;

  [DNTypeName('System.Reflection.Metadata.MemberReferenceHandle')]
  DNMemberReferenceHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{77C36B5C-7562-32FE-A453-1376AB77E79F}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNMemberReferenceHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNMemberReferenceHandle = class(TDNGenericImport<DNMemberReferenceHandleClass, DNMemberReferenceHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNMemberReferenceHandleCollectionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{4612EDD1-0FC7-50F6-B404-9AEA024CB51D}']
  end;

  [DNTypeName('System.Reflection.Metadata.MemberReferenceHandleCollection')]
  DNMemberReferenceHandleCollection = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{F0CEBB1E-C4E0-3E5F-8140-5019714BF1DB}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNMemberReferenceHandleCollection_Enumerator;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNMemberReferenceHandleCollection = class(TDNGenericImport<DNMemberReferenceHandleCollectionClass, DNMemberReferenceHandleCollection>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNMemberReferenceHandleCollection_EnumeratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{C6E6DE73-6767-5D24-93FB-CE14361F462E}']
  end;

  [DNTypeName('System.Reflection.Metadata.MemberReferenceHandleCollection+Enumerator')]
  DNMemberReferenceHandleCollection_Enumerator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{7E31A35F-8219-30E3-BC78-AE7AE8480FC2}']
  { getters & setters } 

    function get_Current: DNMemberReferenceHandle;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNMemberReferenceHandle read get_Current;
  end;

  TDNMemberReferenceHandleCollection_Enumerator = class(TDNGenericImport<DNMemberReferenceHandleCollection_EnumeratorClass, DNMemberReferenceHandleCollection_Enumerator>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNMetadataStringComparerClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{082E8F94-2F34-556E-BA82-3AB84B41827B}']
  end;

  [DNTypeName('System.Reflection.Metadata.MetadataStringComparer')]
  DNMetadataStringComparer = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{55482FDE-CDA1-3F3E-BB37-D69019D90078}']
  { methods } 

    function Equals(handle: DNStringHandle; value: string): Boolean; overload;
    function Equals(handle: DNStringHandle; value: string; ignoreCase: Boolean): Boolean; overload;
    function Equals(handle: DNNamespaceDefinitionHandle; value: string): Boolean; overload;
    function Equals(handle: DNNamespaceDefinitionHandle; value: string; ignoreCase: Boolean): Boolean; overload;
    function Equals(handle: DNDocumentNameBlobHandle; value: string): Boolean; overload;
    function Equals(handle: DNDocumentNameBlobHandle; value: string; ignoreCase: Boolean): Boolean; overload;
    function StartsWith(handle: DNStringHandle; value: string): Boolean; overload;
    function StartsWith(handle: DNStringHandle; value: string; ignoreCase: Boolean): Boolean; overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNMetadataStringComparer = class(TDNGenericImport<DNMetadataStringComparerClass, DNMetadataStringComparer>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNMethodDebugInformationClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{DD834319-A94A-5E20-9954-DFF68B979F0C}']
  end;

  [DNTypeName('System.Reflection.Metadata.MethodDebugInformation')]
  DNMethodDebugInformation = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{E8D9210D-A7D2-34B9-9037-5B97B91A58BF}']
  { getters & setters } 

    function get_SequencePointsBlob: DNBlobHandle;
    function get_Document: DNDocumentHandle;
    function get_LocalSignature: DNStandaloneSignatureHandle;

  { methods } 

    function GetSequencePoints: DNSequencePointCollection;
    function GetStateMachineKickoffMethod: DNMethodDefinitionHandle;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property SequencePointsBlob: DNBlobHandle read get_SequencePointsBlob;
    property Document: DNDocumentHandle read get_Document;
    property LocalSignature: DNStandaloneSignatureHandle read get_LocalSignature;
  end;

  TDNMethodDebugInformation = class(TDNGenericImport<DNMethodDebugInformationClass, DNMethodDebugInformation>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNMethodDebugInformationHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{2791FCC4-CEDF-521A-8844-72007DA31331}']
  end;

  [DNTypeName('System.Reflection.Metadata.MethodDebugInformationHandle')]
  DNMethodDebugInformationHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{A27100A6-3F68-399B-89E2-7FF42CFEBE56}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNMethodDebugInformationHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToDefinitionHandle: DNMethodDefinitionHandle;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNMethodDebugInformationHandle = class(TDNGenericImport<DNMethodDebugInformationHandleClass, DNMethodDebugInformationHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNMethodDebugInformationHandleCollectionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{1DBA9DDC-94A4-52E1-B60B-4B9468C122B3}']
  end;

  [DNTypeName('System.Reflection.Metadata.MethodDebugInformationHandleCollection')]
  DNMethodDebugInformationHandleCollection = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{5E03DC31-FF22-312C-8119-21056DFC8073}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNMethodDebugInformationHandleCollection_Enumerator;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNMethodDebugInformationHandleCollection = class(TDNGenericImport<DNMethodDebugInformationHandleCollectionClass, DNMethodDebugInformationHandleCollection>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNMethodDebugInformationHandleCollection_EnumeratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{F95FA64E-4E6A-50D2-8847-442F9BFF4C36}']
  end;

  [DNTypeName('System.Reflection.Metadata.MethodDebugInformationHandleCollection+Enumerator')]
  DNMethodDebugInformationHandleCollection_Enumerator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{230401E2-C761-3812-8AF3-8AB7E56AD76E}']
  { getters & setters } 

    function get_Current: DNMethodDebugInformationHandle;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNMethodDebugInformationHandle read get_Current;
  end;

  TDNMethodDebugInformationHandleCollection_Enumerator = class(TDNGenericImport<DNMethodDebugInformationHandleCollection_EnumeratorClass, DNMethodDebugInformationHandleCollection_Enumerator>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNMethodDefinitionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{E06DC3BA-B7B9-53CE-9EBE-263D3D8C4AE5}']
  end;

  [DNTypeName('System.Reflection.Metadata.MethodDefinition')]
  DNMethodDefinition = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{B8435947-A23F-3732-89E9-C56BB4AE85B9}']
  { getters & setters } 

    function get_Name: DNStringHandle;
    function get_Signature: DNBlobHandle;
    function get_RelativeVirtualAddress: Int32;
    function get_Attributes: DDNC.System.Private.CoreLib.DNMethodAttributes;
    function get_ImplAttributes: DDNC.System.Private.CoreLib.DNMethodImplAttributes;

  { methods } 

    function GetDeclaringType: DNTypeDefinitionHandle;
    function GetParameters: DNParameterHandleCollection;
    function GetGenericParameters: DNGenericParameterHandleCollection;
    function GetImport: DNMethodImport;
    function GetCustomAttributes: DNCustomAttributeHandleCollection;
    function GetDeclarativeSecurityAttributes: DNDeclarativeSecurityAttributeHandleCollection;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Name: DNStringHandle read get_Name;
    property Signature: DNBlobHandle read get_Signature;
    property RelativeVirtualAddress: Int32 read get_RelativeVirtualAddress;
    property Attributes: DDNC.System.Private.CoreLib.DNMethodAttributes read get_Attributes;
    property ImplAttributes: DDNC.System.Private.CoreLib.DNMethodImplAttributes read get_ImplAttributes;
  end;

  TDNMethodDefinition = class(TDNGenericImport<DNMethodDefinitionClass, DNMethodDefinition>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNMethodDefinitionHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{7A8E891F-2456-57E4-A162-7C9EF73EF667}']
  end;

  [DNTypeName('System.Reflection.Metadata.MethodDefinitionHandle')]
  DNMethodDefinitionHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{9815BE77-B53B-369C-9318-9363BDBD6253}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNMethodDefinitionHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToDebugInformationHandle: DNMethodDebugInformationHandle;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNMethodDefinitionHandle = class(TDNGenericImport<DNMethodDefinitionHandleClass, DNMethodDefinitionHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNMethodDefinitionHandleCollectionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{81554373-B740-579B-88C7-3DE9C7AF4C08}']
  end;

  [DNTypeName('System.Reflection.Metadata.MethodDefinitionHandleCollection')]
  DNMethodDefinitionHandleCollection = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{5C84E53D-F1F9-3229-A238-945B3976FE0A}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNMethodDefinitionHandleCollection_Enumerator;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNMethodDefinitionHandleCollection = class(TDNGenericImport<DNMethodDefinitionHandleCollectionClass, DNMethodDefinitionHandleCollection>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNMethodDefinitionHandleCollection_EnumeratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{1CCAE9D6-9B34-507D-9156-79A45B082C2C}']
  end;

  [DNTypeName('System.Reflection.Metadata.MethodDefinitionHandleCollection+Enumerator')]
  DNMethodDefinitionHandleCollection_Enumerator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{5DC433AA-2812-314B-AC8E-944CD3BBA8A9}']
  { getters & setters } 

    function get_Current: DNMethodDefinitionHandle;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNMethodDefinitionHandle read get_Current;
  end;

  TDNMethodDefinitionHandleCollection_Enumerator = class(TDNGenericImport<DNMethodDefinitionHandleCollection_EnumeratorClass, DNMethodDefinitionHandleCollection_Enumerator>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNMethodImplementationClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{058CB75B-EC62-59AC-96C9-340BFB6C9B3D}']
  end;

  [DNTypeName('System.Reflection.Metadata.MethodImplementation')]
  DNMethodImplementation = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{DD6E3427-A010-350C-907A-8D6F291208FB}']
  { getters & setters } 

    function get_Type: DNTypeDefinitionHandle;
    function get_MethodBody: DNEntityHandle;
    function get_MethodDeclaration: DNEntityHandle;

  { methods } 

    function GetCustomAttributes: DNCustomAttributeHandleCollection;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property &Type: DNTypeDefinitionHandle read get_Type;
    property MethodBody: DNEntityHandle read get_MethodBody;
    property MethodDeclaration: DNEntityHandle read get_MethodDeclaration;
  end;

  TDNMethodImplementation = class(TDNGenericImport<DNMethodImplementationClass, DNMethodImplementation>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNMethodImplementationHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{E94C03C0-66EF-5251-B87D-DA0EDE0F3FCC}']
  end;

  [DNTypeName('System.Reflection.Metadata.MethodImplementationHandle')]
  DNMethodImplementationHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{E3816E68-2D50-3C44-9056-178CEEFD3BDE}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNMethodImplementationHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNMethodImplementationHandle = class(TDNGenericImport<DNMethodImplementationHandleClass, DNMethodImplementationHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNMethodImplementationHandleCollectionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{BEFAD7E3-455A-51F6-9B71-4EEAEB932DE1}']
  end;

  [DNTypeName('System.Reflection.Metadata.MethodImplementationHandleCollection')]
  DNMethodImplementationHandleCollection = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{F0958614-514E-32E3-9842-FBEA6C062321}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNMethodImplementationHandleCollection_Enumerator;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNMethodImplementationHandleCollection = class(TDNGenericImport<DNMethodImplementationHandleCollectionClass, DNMethodImplementationHandleCollection>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNMethodImplementationHandleCollection_EnumeratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{3982DE40-C0EE-5889-A9C1-CEBCCA61537D}']
  end;

  [DNTypeName('System.Reflection.Metadata.MethodImplementationHandleCollection+Enumerator')]
  DNMethodImplementationHandleCollection_Enumerator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{443665C7-36E2-3CC0-B507-1BB16A216321}']
  { getters & setters } 

    function get_Current: DNMethodImplementationHandle;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNMethodImplementationHandle read get_Current;
  end;

  TDNMethodImplementationHandleCollection_Enumerator = class(TDNGenericImport<DNMethodImplementationHandleCollection_EnumeratorClass, DNMethodImplementationHandleCollection_Enumerator>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNMethodImportClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{26FB5C7E-8C45-5FB3-977E-8F8945C6C065}']
  end;

  [DNTypeName('System.Reflection.Metadata.MethodImport')]
  DNMethodImport = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{5125DDDD-4240-3787-BBB3-CD6CE651CA67}']
  { getters & setters } 

    function get_Attributes: DNMethodImportAttributes;
    function get_Name: DNStringHandle;
    function get_Module: DNModuleReferenceHandle;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Attributes: DNMethodImportAttributes read get_Attributes;
    property Name: DNStringHandle read get_Name;
    property Module: DNModuleReferenceHandle read get_Module;
  end;

  TDNMethodImport = class(TDNGenericImport<DNMethodImportClass, DNMethodImport>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNMethodSignatureClass<TType> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{002F5492-7DA7-5206-8448-1534D8C54BBE}']
  { constructors } 

    {class} function init(header: DNSignatureHeader; returnType: TType; requiredParameterCount: Int32; genericParameterCount: Int32; parameterTypes: DDNC.System.Collections.Immutable.DNImmutableArray<TType>): DNMethodSignature<TType>;

  end;

  [DNTypeName('System.Reflection.Metadata.MethodSignature`1')]
  DNMethodSignature<TType> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{351E95BD-BA97-3947-866C-18ACE4307C37}']
  { getters & setters } 

    function get_Header: DNSignatureHeader;
    function get_ReturnType: TType;
    function get_RequiredParameterCount: Int32;
    function get_GenericParameterCount: Int32;
    function get_ParameterTypes: DDNC.System.Collections.Immutable.DNImmutableArray<TType>;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Header: DNSignatureHeader read get_Header;
    property ReturnType: TType read get_ReturnType;
    property RequiredParameterCount: Int32 read get_RequiredParameterCount;
    property GenericParameterCount: Int32 read get_GenericParameterCount;
    property ParameterTypes: DDNC.System.Collections.Immutable.DNImmutableArray<TType> read get_ParameterTypes;
  end;

  TDNMethodSignature<TType> = class(TDNGenericImport<DNMethodSignatureClass<TType>, DNMethodSignature<TType>>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNMethodSpecificationClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{CCD35EAB-3D6F-5FF1-80D1-FB5F269A51E6}']
  end;

  [DNTypeName('System.Reflection.Metadata.MethodSpecification')]
  DNMethodSpecification = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{8EA0D368-066E-3CF7-871D-44C6BE021EBF}']
  { getters & setters } 

    function get_Method: DNEntityHandle;
    function get_Signature: DNBlobHandle;

  { methods } 

    function GetCustomAttributes: DNCustomAttributeHandleCollection;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Method: DNEntityHandle read get_Method;
    property Signature: DNBlobHandle read get_Signature;
  end;

  TDNMethodSpecification = class(TDNGenericImport<DNMethodSpecificationClass, DNMethodSpecification>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNMethodSpecificationHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{C6B95A8F-F0C1-5A64-B735-02C46F82CDF7}']
  end;

  [DNTypeName('System.Reflection.Metadata.MethodSpecificationHandle')]
  DNMethodSpecificationHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{E34DA075-B791-39D6-81D4-08B4C146C9BB}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNMethodSpecificationHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNMethodSpecificationHandle = class(TDNGenericImport<DNMethodSpecificationHandleClass, DNMethodSpecificationHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNModuleDefinitionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{3904F553-5AF9-5119-8D35-0566D6602410}']
  end;

  [DNTypeName('System.Reflection.Metadata.ModuleDefinition')]
  DNModuleDefinition = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{D75BE42C-08BD-32C6-9ECD-8420E39CA164}']
  { getters & setters } 

    function get_Generation: Int32;
    function get_Name: DNStringHandle;
    function get_Mvid: DNGuidHandle;
    function get_GenerationId: DNGuidHandle;
    function get_BaseGenerationId: DNGuidHandle;

  { methods } 

    function GetCustomAttributes: DNCustomAttributeHandleCollection;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Generation: Int32 read get_Generation;
    property Name: DNStringHandle read get_Name;
    property Mvid: DNGuidHandle read get_Mvid;
    property GenerationId: DNGuidHandle read get_GenerationId;
    property BaseGenerationId: DNGuidHandle read get_BaseGenerationId;
  end;

  TDNModuleDefinition = class(TDNGenericImport<DNModuleDefinitionClass, DNModuleDefinition>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNModuleDefinitionHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{E5C984CD-9C07-519F-86F1-A3BB9627467F}']
  end;

  [DNTypeName('System.Reflection.Metadata.ModuleDefinitionHandle')]
  DNModuleDefinitionHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{0AD99F64-4BEC-3FE4-98E4-52D3023E1D5E}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNModuleDefinitionHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNModuleDefinitionHandle = class(TDNGenericImport<DNModuleDefinitionHandleClass, DNModuleDefinitionHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNModuleReferenceClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{C48C1731-F8A4-5577-A035-9BA18D08616D}']
  end;

  [DNTypeName('System.Reflection.Metadata.ModuleReference')]
  DNModuleReference = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{9A6AD5E1-2C11-3F53-9421-A9AA253DB53D}']
  { getters & setters } 

    function get_Name: DNStringHandle;

  { methods } 

    function GetCustomAttributes: DNCustomAttributeHandleCollection;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Name: DNStringHandle read get_Name;
  end;

  TDNModuleReference = class(TDNGenericImport<DNModuleReferenceClass, DNModuleReference>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNModuleReferenceHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{8C257E5C-29B4-553C-9348-6B891E7529CD}']
  end;

  [DNTypeName('System.Reflection.Metadata.ModuleReferenceHandle')]
  DNModuleReferenceHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{793D4FF1-3ECC-30DD-8355-D9A21FA2239D}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNModuleReferenceHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNModuleReferenceHandle = class(TDNGenericImport<DNModuleReferenceHandleClass, DNModuleReferenceHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNNamespaceDefinitionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{CAA8B78C-6135-51D4-918F-432333D45A35}']
  end;

  [DNTypeName('System.Reflection.Metadata.NamespaceDefinition')]
  DNNamespaceDefinition = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{0E4F0FCF-BF1A-3BAE-A1BA-90F75592CC7D}']
  { getters & setters } 

    function get_Name: DNStringHandle;
    function get_Parent: DNNamespaceDefinitionHandle;
    function get_NamespaceDefinitions: DDNC.System.Collections.Immutable.DNImmutableArray<DNNamespaceDefinitionHandle>;
    function get_TypeDefinitions: DDNC.System.Collections.Immutable.DNImmutableArray<DNTypeDefinitionHandle>;
    function get_ExportedTypes: DDNC.System.Collections.Immutable.DNImmutableArray<DNExportedTypeHandle>;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Name: DNStringHandle read get_Name;
    property Parent: DNNamespaceDefinitionHandle read get_Parent;
    property NamespaceDefinitions: DDNC.System.Collections.Immutable.DNImmutableArray<DNNamespaceDefinitionHandle> read get_NamespaceDefinitions;
    property TypeDefinitions: DDNC.System.Collections.Immutable.DNImmutableArray<DNTypeDefinitionHandle> read get_TypeDefinitions;
    property ExportedTypes: DDNC.System.Collections.Immutable.DNImmutableArray<DNExportedTypeHandle> read get_ExportedTypes;
  end;

  TDNNamespaceDefinition = class(TDNGenericImport<DNNamespaceDefinitionClass, DNNamespaceDefinition>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNNamespaceDefinitionHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{92231BEC-7740-5AB2-975B-D7F30B733A87}']
  end;

  [DNTypeName('System.Reflection.Metadata.NamespaceDefinitionHandle')]
  DNNamespaceDefinitionHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{6247E7C7-3A46-3BF2-BBAC-AB2E5694D127}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNNamespaceDefinitionHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNNamespaceDefinitionHandle = class(TDNGenericImport<DNNamespaceDefinitionHandleClass, DNNamespaceDefinitionHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNParameterClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{F41B6F9C-3AC9-5638-A0BC-8EF6382031A7}']
  end;

  [DNTypeName('System.Reflection.Metadata.Parameter')]
  DNParameter = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{4617C9F4-2DCE-382B-925E-A0F52FD07D47}']
  { getters & setters } 

    function get_Attributes: DDNC.System.Private.CoreLib.DNParameterAttributes;
    function get_SequenceNumber: Int32;
    function get_Name: DNStringHandle;

  { methods } 

    function GetDefaultValue: DNConstantHandle;
    function GetMarshallingDescriptor: DNBlobHandle;
    function GetCustomAttributes: DNCustomAttributeHandleCollection;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Attributes: DDNC.System.Private.CoreLib.DNParameterAttributes read get_Attributes;
    property SequenceNumber: Int32 read get_SequenceNumber;
    property Name: DNStringHandle read get_Name;
  end;

  TDNParameter = class(TDNGenericImport<DNParameterClass, DNParameter>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNParameterHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{1CB2D4DA-22FE-51BC-9BD0-C930FC30F398}']
  end;

  [DNTypeName('System.Reflection.Metadata.ParameterHandle')]
  DNParameterHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{701C325C-0D6F-31AC-A72B-28B53BB905ED}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNParameterHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNParameterHandle = class(TDNGenericImport<DNParameterHandleClass, DNParameterHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNParameterHandleCollectionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{CC83ABA7-D0D3-5535-B5E0-BB848CE9EC38}']
  end;

  [DNTypeName('System.Reflection.Metadata.ParameterHandleCollection')]
  DNParameterHandleCollection = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{D9238734-ABE9-3FAC-8D50-5FBC3B506C1F}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNParameterHandleCollection_Enumerator;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNParameterHandleCollection = class(TDNGenericImport<DNParameterHandleCollectionClass, DNParameterHandleCollection>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNParameterHandleCollection_EnumeratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{9B3D1CAA-43AB-5010-B1D7-447CF7BC45C6}']
  end;

  [DNTypeName('System.Reflection.Metadata.ParameterHandleCollection+Enumerator')]
  DNParameterHandleCollection_Enumerator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{DE742D32-A9B2-31F2-8FB8-FC59DDD878E1}']
  { getters & setters } 

    function get_Current: DNParameterHandle;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNParameterHandle read get_Current;
  end;

  TDNParameterHandleCollection_Enumerator = class(TDNGenericImport<DNParameterHandleCollection_EnumeratorClass, DNParameterHandleCollection_Enumerator>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNPropertyAccessorsClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{A9ACAB78-F461-59AD-9D0F-365C2AB02CC3}']
  end;

  [DNTypeName('System.Reflection.Metadata.PropertyAccessors')]
  DNPropertyAccessors = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{FD6C874B-3270-35CB-AC03-60661756E57F}']
  { getters & setters } 

    function get_Getter: DNMethodDefinitionHandle;
    function get_Setter: DNMethodDefinitionHandle;
    function get_Others: DDNC.System.Collections.Immutable.DNImmutableArray<DNMethodDefinitionHandle>;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Getter: DNMethodDefinitionHandle read get_Getter;
    property Setter: DNMethodDefinitionHandle read get_Setter;
    property Others: DDNC.System.Collections.Immutable.DNImmutableArray<DNMethodDefinitionHandle> read get_Others;
  end;

  TDNPropertyAccessors = class(TDNGenericImport<DNPropertyAccessorsClass, DNPropertyAccessors>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNPropertyDefinitionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{1B08D099-CBF5-5644-9119-54536947EF05}']
  end;

  [DNTypeName('System.Reflection.Metadata.PropertyDefinition')]
  DNPropertyDefinition = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{F4F129A9-BE46-32C9-B153-2694516403B4}']
  { getters & setters } 

    function get_Name: DNStringHandle;
    function get_Attributes: DDNC.System.Private.CoreLib.DNPropertyAttributes;
    function get_Signature: DNBlobHandle;

  { methods } 

    function GetDefaultValue: DNConstantHandle;
    function GetCustomAttributes: DNCustomAttributeHandleCollection;
    function GetAccessors: DNPropertyAccessors;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Name: DNStringHandle read get_Name;
    property Attributes: DDNC.System.Private.CoreLib.DNPropertyAttributes read get_Attributes;
    property Signature: DNBlobHandle read get_Signature;
  end;

  TDNPropertyDefinition = class(TDNGenericImport<DNPropertyDefinitionClass, DNPropertyDefinition>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNPropertyDefinitionHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{89FED7E5-D160-55BE-B125-76EE2EB98A3C}']
  end;

  [DNTypeName('System.Reflection.Metadata.PropertyDefinitionHandle')]
  DNPropertyDefinitionHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{B384D459-AEE7-3541-A94C-1EAB188D041F}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNPropertyDefinitionHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNPropertyDefinitionHandle = class(TDNGenericImport<DNPropertyDefinitionHandleClass, DNPropertyDefinitionHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNPropertyDefinitionHandleCollectionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{4961994B-39EE-5813-9BE5-59F63A27BB82}']
  end;

  [DNTypeName('System.Reflection.Metadata.PropertyDefinitionHandleCollection')]
  DNPropertyDefinitionHandleCollection = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{F468F998-C328-3462-8E87-CE1F854C50F5}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNPropertyDefinitionHandleCollection_Enumerator;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNPropertyDefinitionHandleCollection = class(TDNGenericImport<DNPropertyDefinitionHandleCollectionClass, DNPropertyDefinitionHandleCollection>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNPropertyDefinitionHandleCollection_EnumeratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{B15865B8-B552-5BEC-AD69-1E1D271F865E}']
  end;

  [DNTypeName('System.Reflection.Metadata.PropertyDefinitionHandleCollection+Enumerator')]
  DNPropertyDefinitionHandleCollection_Enumerator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{EBBA726A-6BF2-305B-B167-6571A678B82E}']
  { getters & setters } 

    function get_Current: DNPropertyDefinitionHandle;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNPropertyDefinitionHandle read get_Current;
  end;

  TDNPropertyDefinitionHandleCollection_Enumerator = class(TDNGenericImport<DNPropertyDefinitionHandleCollection_EnumeratorClass, DNPropertyDefinitionHandleCollection_Enumerator>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNReservedBlobClass<THandle> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{F27420A2-293F-5A05-86D0-E92DDA741234}']
  end;

  [DNTypeName('System.Reflection.Metadata.ReservedBlob`1')]
  DNReservedBlob<THandle> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{82D50945-E066-3FC5-88C4-927A2C9994A8}']
  { getters & setters } 

    function get_Handle: THandle;
    function get_Content: DNBlob;

  { methods } 

    function CreateWriter: DNBlobWriter;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Handle: THandle read get_Handle;
    property Content: DNBlob read get_Content;
  end;

  TDNReservedBlob<THandle> = class(TDNGenericImport<DNReservedBlobClass<THandle>, DNReservedBlob<THandle>>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNSequencePointClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{DFF6EC56-EE2F-5CA8-853B-EE31943F9DF6}']
  end;

  [DNTypeName('System.Reflection.Metadata.SequencePoint')]
  DNSequencePoint = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{F7EE4CB6-2939-3A37-9DD0-0856EF90A297}']
  { getters & setters } 

    function get_Document: DNDocumentHandle;
    function get_Offset: Int32;
    function get_StartLine: Int32;
    function get_EndLine: Int32;
    function get_StartColumn: Int32;
    function get_EndColumn: Int32;
    function get_IsHidden: Boolean;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNSequencePoint): Boolean; overload;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Document: DNDocumentHandle read get_Document;
    property Offset: Int32 read get_Offset;
    property StartLine: Int32 read get_StartLine;
    property EndLine: Int32 read get_EndLine;
    property StartColumn: Int32 read get_StartColumn;
    property EndColumn: Int32 read get_EndColumn;
    property IsHidden: Boolean read get_IsHidden;
  end;

  TDNSequencePoint = class(TDNGenericImport<DNSequencePointClass, DNSequencePoint>)
  public const
   HiddenLine = 16707566;
  end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNSequencePointCollectionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{CC5DBFA7-AF4D-51F0-869C-00BA5478605C}']
  end;

  [DNTypeName('System.Reflection.Metadata.SequencePointCollection')]
  DNSequencePointCollection = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{215A0CF1-4BCF-3803-8A1A-4CE67187D998}']
  { methods } 

    function GetEnumerator: DNSequencePointCollection_Enumerator;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNSequencePointCollection = class(TDNGenericImport<DNSequencePointCollectionClass, DNSequencePointCollection>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNSequencePointCollection_EnumeratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{2BD99697-8109-5109-9A20-979EF34A4A87}']
  end;

  [DNTypeName('System.Reflection.Metadata.SequencePointCollection+Enumerator')]
  DNSequencePointCollection_Enumerator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{2525CDBA-1945-362A-B3F2-EB7E49C5B130}']
  { getters & setters } 

    function get_Current: DNSequencePoint;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNSequencePoint read get_Current;
  end;

  TDNSequencePointCollection_Enumerator = class(TDNGenericImport<DNSequencePointCollection_EnumeratorClass, DNSequencePointCollection_Enumerator>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNSignatureHeaderClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{93CC8E9E-93D1-58B1-AE49-D72E81BA63CE}']
  { constructors } 

    {class} function init(rawValue: Byte): DNSignatureHeader; overload;
    {class} function init(kind: DNSignatureKind; convention: DNSignatureCallingConvention; attributes: DNSignatureAttributes): DNSignatureHeader; overload;

  end;

  [DNTypeName('System.Reflection.Metadata.SignatureHeader')]
  DNSignatureHeader = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{6D64B9EB-B812-3594-B08F-F90F0641BEFD}']
  { getters & setters } 

    function get_RawValue: Byte;
    function get_CallingConvention: DNSignatureCallingConvention;
    function get_Kind: DNSignatureKind;
    function get_Attributes: DNSignatureAttributes;
    function get_HasExplicitThis: Boolean;
    function get_IsInstance: Boolean;
    function get_IsGeneric: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNSignatureHeader): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property RawValue: Byte read get_RawValue;
    property CallingConvention: DNSignatureCallingConvention read get_CallingConvention;
    property Kind: DNSignatureKind read get_Kind;
    property Attributes: DNSignatureAttributes read get_Attributes;
    property HasExplicitThis: Boolean read get_HasExplicitThis;
    property IsInstance: Boolean read get_IsInstance;
    property IsGeneric: Boolean read get_IsGeneric;
  end;

  TDNSignatureHeader = class(TDNGenericImport<DNSignatureHeaderClass, DNSignatureHeader>)
  public const
   CallingConventionOrKindMask = 15;
  end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNStandaloneSignatureClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{4E201171-6B9A-51F8-91E4-ECEFC1E33063}']
  end;

  [DNTypeName('System.Reflection.Metadata.StandaloneSignature')]
  DNStandaloneSignature = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{4AE54A96-778A-3DD6-BDD9-8DF41EC1CDBF}']
  { getters & setters } 

    function get_Signature: DNBlobHandle;

  { methods } 

    function GetCustomAttributes: DNCustomAttributeHandleCollection;
    function GetKind: DNStandaloneSignatureKind;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Signature: DNBlobHandle read get_Signature;
  end;

  TDNStandaloneSignature = class(TDNGenericImport<DNStandaloneSignatureClass, DNStandaloneSignature>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNStandaloneSignatureHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{FC677C01-2F36-5A83-96ED-5E56346A2A8D}']
  end;

  [DNTypeName('System.Reflection.Metadata.StandaloneSignatureHandle')]
  DNStandaloneSignatureHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{3D714C93-E0C6-3FB3-8245-4DAA4EEBA7BB}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNStandaloneSignatureHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNStandaloneSignatureHandle = class(TDNGenericImport<DNStandaloneSignatureHandleClass, DNStandaloneSignatureHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNStringHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{1667DF11-3DA1-5082-A11A-9013F071D12A}']
  end;

  [DNTypeName('System.Reflection.Metadata.StringHandle')]
  DNStringHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{670062B0-5805-3017-9DD7-067F9A7DA5EA}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNStringHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNStringHandle = class(TDNGenericImport<DNStringHandleClass, DNStringHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNTypeDefinitionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{E6092620-E96A-532F-8B59-ACDD8159A7F7}']
  end;

  [DNTypeName('System.Reflection.Metadata.TypeDefinition')]
  DNTypeDefinition = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{62A0BA6B-91F9-3AE9-9030-307CFB9DF71D}']
  { getters & setters } 

    function get_Attributes: DDNC.System.Private.CoreLib.DNTypeAttributes;
    function get_IsNested: Boolean;
    function get_Name: DNStringHandle;
    function get_Namespace: DNStringHandle;
    function get_NamespaceDefinition: DNNamespaceDefinitionHandle;
    function get_BaseType: DNEntityHandle;

  { methods } 

    function GetLayout: DNTypeLayout;
    function GetDeclaringType: DNTypeDefinitionHandle;
    function GetGenericParameters: DNGenericParameterHandleCollection;
    function GetMethods: DNMethodDefinitionHandleCollection;
    function GetFields: DNFieldDefinitionHandleCollection;
    function GetProperties: DNPropertyDefinitionHandleCollection;
    function GetEvents: DNEventDefinitionHandleCollection;
    function GetNestedTypes: DDNC.System.Collections.Immutable.DNImmutableArray<DNTypeDefinitionHandle>;
    function GetMethodImplementations: DNMethodImplementationHandleCollection;
    function GetInterfaceImplementations: DNInterfaceImplementationHandleCollection;
    function GetCustomAttributes: DNCustomAttributeHandleCollection;
    function GetDeclarativeSecurityAttributes: DNDeclarativeSecurityAttributeHandleCollection;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Attributes: DDNC.System.Private.CoreLib.DNTypeAttributes read get_Attributes;
    property IsNested: Boolean read get_IsNested;
    property Name: DNStringHandle read get_Name;
    property Namespace: DNStringHandle read get_Namespace;
    property NamespaceDefinition: DNNamespaceDefinitionHandle read get_NamespaceDefinition;
    property BaseType: DNEntityHandle read get_BaseType;
  end;

  TDNTypeDefinition = class(TDNGenericImport<DNTypeDefinitionClass, DNTypeDefinition>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNTypeDefinitionHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{74022919-4685-5AD8-A9B7-86A4F6DA2159}']
  end;

  [DNTypeName('System.Reflection.Metadata.TypeDefinitionHandle')]
  DNTypeDefinitionHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{9FF9EFEB-390F-3B08-888F-8DB10F732882}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNTypeDefinitionHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNTypeDefinitionHandle = class(TDNGenericImport<DNTypeDefinitionHandleClass, DNTypeDefinitionHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNTypeDefinitionHandleCollectionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{90163C2D-27E5-5A2B-AAE1-7878AC78AED4}']
  end;

  [DNTypeName('System.Reflection.Metadata.TypeDefinitionHandleCollection')]
  DNTypeDefinitionHandleCollection = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{1AF3B841-E5F8-331E-B5A7-8A23A03C88E1}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNTypeDefinitionHandleCollection_Enumerator;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNTypeDefinitionHandleCollection = class(TDNGenericImport<DNTypeDefinitionHandleCollectionClass, DNTypeDefinitionHandleCollection>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNTypeDefinitionHandleCollection_EnumeratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{943529C5-2FC9-53F8-833E-3224BEA1E432}']
  end;

  [DNTypeName('System.Reflection.Metadata.TypeDefinitionHandleCollection+Enumerator')]
  DNTypeDefinitionHandleCollection_Enumerator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{E57610F3-26D6-300F-83A4-C0BB36085060}']
  { getters & setters } 

    function get_Current: DNTypeDefinitionHandle;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNTypeDefinitionHandle read get_Current;
  end;

  TDNTypeDefinitionHandleCollection_Enumerator = class(TDNGenericImport<DNTypeDefinitionHandleCollection_EnumeratorClass, DNTypeDefinitionHandleCollection_Enumerator>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNTypeLayoutClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{552D9BB1-1266-5AF8-AF02-C0300F6CC812}']
  { constructors } 

    {class} function init(size: Int32; packingSize: Int32): DNTypeLayout;

  end;

  [DNTypeName('System.Reflection.Metadata.TypeLayout')]
  DNTypeLayout = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{526D7192-E8D4-3BEE-923D-47CD441D8554}']
  { getters & setters } 

    function get_Size: Int32;
    function get_PackingSize: Int32;
    function get_IsDefault: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Size: Int32 read get_Size;
    property PackingSize: Int32 read get_PackingSize;
    property IsDefault: Boolean read get_IsDefault;
  end;

  TDNTypeLayout = class(TDNGenericImport<DNTypeLayoutClass, DNTypeLayout>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNTypeReferenceClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{90738EE8-2FE8-5B3F-B21D-4D33FCDBB636}']
  end;

  [DNTypeName('System.Reflection.Metadata.TypeReference')]
  DNTypeReference = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{25F07D1C-2D59-312B-934C-9EBAFCBD718B}']
  { getters & setters } 

    function get_ResolutionScope: DNEntityHandle;
    function get_Name: DNStringHandle;
    function get_Namespace: DNStringHandle;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property ResolutionScope: DNEntityHandle read get_ResolutionScope;
    property Name: DNStringHandle read get_Name;
    property Namespace: DNStringHandle read get_Namespace;
  end;

  TDNTypeReference = class(TDNGenericImport<DNTypeReferenceClass, DNTypeReference>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNTypeReferenceHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{84B926C6-B03C-5C17-B348-251FF8B45EAD}']
  end;

  [DNTypeName('System.Reflection.Metadata.TypeReferenceHandle')]
  DNTypeReferenceHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{8CD0B154-B595-3221-8E4F-92AB2357947B}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNTypeReferenceHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNTypeReferenceHandle = class(TDNGenericImport<DNTypeReferenceHandleClass, DNTypeReferenceHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNTypeReferenceHandleCollectionClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{33F60FDC-8462-5742-A4BF-0A86E9AA7738}']
  end;

  [DNTypeName('System.Reflection.Metadata.TypeReferenceHandleCollection')]
  DNTypeReferenceHandleCollection = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{C179AFD9-1A74-3BDF-B2D2-022D8E5F81E6}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetEnumerator: DNTypeReferenceHandleCollection_Enumerator;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNTypeReferenceHandleCollection = class(TDNGenericImport<DNTypeReferenceHandleCollectionClass, DNTypeReferenceHandleCollection>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNTypeReferenceHandleCollection_EnumeratorClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{274E3312-DCF2-5979-A5B0-7B8F95728DBB}']
  end;

  [DNTypeName('System.Reflection.Metadata.TypeReferenceHandleCollection+Enumerator')]
  DNTypeReferenceHandleCollection_Enumerator = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{3ECCCB94-5CE8-3787-ADF5-E3A3E67D55EB}']
  { getters & setters } 

    function get_Current: DNTypeReferenceHandle;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DNTypeReferenceHandle read get_Current;
  end;

  TDNTypeReferenceHandleCollection_Enumerator = class(TDNGenericImport<DNTypeReferenceHandleCollection_EnumeratorClass, DNTypeReferenceHandleCollection_Enumerator>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNTypeSpecificationClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{4BD0F505-7CCB-52C9-883C-08B43F74988C}']
  end;

  [DNTypeName('System.Reflection.Metadata.TypeSpecification')]
  DNTypeSpecification = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{E326E50A-9A6F-35E5-AA54-6A72DDFA2502}']
  { getters & setters } 

    function get_Signature: DNBlobHandle;

  { methods } 

    function GetCustomAttributes: DNCustomAttributeHandleCollection;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Signature: DNBlobHandle read get_Signature;
  end;

  TDNTypeSpecification = class(TDNGenericImport<DNTypeSpecificationClass, DNTypeSpecification>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNTypeSpecificationHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{56F7F38D-DBC9-5498-9F83-12B6006351DD}']
  end;

  [DNTypeName('System.Reflection.Metadata.TypeSpecificationHandle')]
  DNTypeSpecificationHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{B6535DEA-E6B1-3E65-8B70-4A108E11789B}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNTypeSpecificationHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNTypeSpecificationHandle = class(TDNGenericImport<DNTypeSpecificationHandleClass, DNTypeSpecificationHandle>) end;

  //-------------namespace: System.Reflection.Metadata----------------
  DNUserStringHandleClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{0712C3FA-D266-545D-A21E-C8C6487F5261}']
  end;

  [DNTypeName('System.Reflection.Metadata.UserStringHandle')]
  DNUserStringHandle = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{A093272A-5C20-32F6-89A8-CA08D73F31A2}']
  { getters & setters } 

    function get_IsNil: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNUserStringHandle): Boolean; overload;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsNil: Boolean read get_IsNil;
  end;

  TDNUserStringHandle = class(TDNGenericImport<DNUserStringHandleClass, DNUserStringHandle>) end;

  //-------------namespace: System.Reflection.PortableExecutable----------------
  DNCodeViewDebugDirectoryDataClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{BFCC4604-6C86-5360-A687-87F762A9F109}']
  end;

  [DNTypeName('System.Reflection.PortableExecutable.CodeViewDebugDirectoryData')]
  DNCodeViewDebugDirectoryData = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{ECB90950-6D0C-3963-9690-D68990C034B9}']
  { getters & setters } 

    function get_Guid: DDNC.System.Private.CoreLib.DNGuid;
    function get_Age: Int32;
    function get_Path: string;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Guid: DDNC.System.Private.CoreLib.DNGuid read get_Guid;
    property Age: Int32 read get_Age;
    property Path: string read get_Path;
  end;

  TDNCodeViewDebugDirectoryData = class(TDNGenericImport<DNCodeViewDebugDirectoryDataClass, DNCodeViewDebugDirectoryData>) end;

  //-------------namespace: System.Reflection.PortableExecutable----------------
  DNDebugDirectoryEntryClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{096B5976-C46D-58AC-9347-7C5B7344B8F1}']
  { constructors } 

    {class} function init(stamp: UInt32; majorVersion: UInt16; minorVersion: UInt16; &type: DNDebugDirectoryEntryType; dataSize: Int32; dataRelativeVirtualAddress: Int32; dataPointer: Int32): DNDebugDirectoryEntry;

  end;

  [DNTypeName('System.Reflection.PortableExecutable.DebugDirectoryEntry')]
  DNDebugDirectoryEntry = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{332301D0-0578-33EF-AFDC-DCA81DE7500A}']
  { getters & setters } 

    function get_Stamp: UInt32;
    function get_MajorVersion: UInt16;
    function get_MinorVersion: UInt16;
    function get_Type: DNDebugDirectoryEntryType;
    function get_DataSize: Int32;
    function get_DataRelativeVirtualAddress: Int32;
    function get_DataPointer: Int32;
    function get_IsPortableCodeView: Boolean;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Stamp: UInt32 read get_Stamp;
    property MajorVersion: UInt16 read get_MajorVersion;
    property MinorVersion: UInt16 read get_MinorVersion;
    property &Type: DNDebugDirectoryEntryType read get_Type;
    property DataSize: Int32 read get_DataSize;
    property DataRelativeVirtualAddress: Int32 read get_DataRelativeVirtualAddress;
    property DataPointer: Int32 read get_DataPointer;
    property IsPortableCodeView: Boolean read get_IsPortableCodeView;
  end;

  TDNDebugDirectoryEntry = class(TDNGenericImport<DNDebugDirectoryEntryClass, DNDebugDirectoryEntry>) end;

  //-------------namespace: System.Reflection.PortableExecutable----------------
  DNDirectoryEntryClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{1C37E462-1446-5CE9-BFB8-1D162B6045AD}']
  { constructors } 

    {class} function init(relativeVirtualAddress: Int32; size: Int32): DNDirectoryEntry;

  { static fields getter & setter } 

   function __fakeFieldGet_RelativeVirtualAddress: Int32;
   function __fakeFieldGet_Size: Int32;

  { static fields } 

    {class} property RelativeVirtualAddress: Int32 read __fakeFieldGet_RelativeVirtualAddress;
    {class} property Size: Int32 read __fakeFieldGet_Size;

  end;

  [DNTypeName('System.Reflection.PortableExecutable.DirectoryEntry')]
  DNDirectoryEntry = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{07F234D9-47C1-3800-A3EE-94BF750C558D}']
  { fields getter & setter } 

   function __fakeFieldGet_RelativeVirtualAddress: Int32;
   function __fakeFieldGet_Size: Int32;

  { fields } 

   property RelativeVirtualAddress: Int32 read __fakeFieldGet_RelativeVirtualAddress;
   property Size: Int32 read __fakeFieldGet_Size;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNDirectoryEntry = class(TDNGenericImport<DNDirectoryEntryClass, DNDirectoryEntry>) end;

  //-------------namespace: System.Reflection.PortableExecutable----------------
  DNPdbChecksumDebugDirectoryDataClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{FA628659-F211-54F5-8BB1-0521A4C3963D}']
  end;

  [DNTypeName('System.Reflection.PortableExecutable.PdbChecksumDebugDirectoryData')]
  DNPdbChecksumDebugDirectoryData = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{364182FD-B4BA-3BCD-AE85-8FB79F1F9AE8}']
  { getters & setters } 

    function get_AlgorithmName: string;
    function get_Checksum: DDNC.System.Collections.Immutable.DNImmutableArray<Byte>;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property AlgorithmName: string read get_AlgorithmName;
    property Checksum: DDNC.System.Collections.Immutable.DNImmutableArray<Byte> read get_Checksum;
  end;

  TDNPdbChecksumDebugDirectoryData = class(TDNGenericImport<DNPdbChecksumDebugDirectoryDataClass, DNPdbChecksumDebugDirectoryData>) end;

  //-------------namespace: System.Reflection.PortableExecutable----------------
  DNPEMemoryBlockClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{1360D7CD-0F67-5076-83BA-6E13250B8ECD}']
  end;

  [DNTypeName('System.Reflection.PortableExecutable.PEMemoryBlock')]
  DNPEMemoryBlock = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{4CD87192-2EFC-35A0-9260-D7828CA25E1B}']
  { getters & setters } 

    function get_Pointer: PByte;
    function get_Length: Int32;

  { methods } 

    function GetReader: DNBlobReader; overload;
    function GetReader(start: Int32; length: Int32): DNBlobReader; overload;
    function GetContent: DDNC.System.Collections.Immutable.DNImmutableArray<Byte>; overload;
    function GetContent(start: Int32; length: Int32): DDNC.System.Collections.Immutable.DNImmutableArray<Byte>; overload;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Pointer: PByte read get_Pointer;
    property Length: Int32 read get_Length;
  end;

  TDNPEMemoryBlock = class(TDNGenericImport<DNPEMemoryBlockClass, DNPEMemoryBlock>) end;

  //-------------namespace: System.Reflection.PortableExecutable----------------
  DNSectionHeaderClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{C1A546FC-32AA-5270-AD2F-9C8B3E5D8659}']
  end;

  [DNTypeName('System.Reflection.PortableExecutable.SectionHeader')]
  DNSectionHeader = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{4D59C663-3E31-35E1-924F-F9B65403A773}']
  { getters & setters } 

    function get_Name: string;
    function get_VirtualSize: Int32;
    function get_VirtualAddress: Int32;
    function get_SizeOfRawData: Int32;
    function get_PointerToRawData: Int32;
    function get_PointerToRelocations: Int32;
    function get_PointerToLineNumbers: Int32;
    function get_NumberOfRelocations: UInt16;
    function get_NumberOfLineNumbers: UInt16;
    function get_SectionCharacteristics: DNSectionCharacteristics;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Name: string read get_Name;
    property VirtualSize: Int32 read get_VirtualSize;
    property VirtualAddress: Int32 read get_VirtualAddress;
    property SizeOfRawData: Int32 read get_SizeOfRawData;
    property PointerToRawData: Int32 read get_PointerToRawData;
    property PointerToRelocations: Int32 read get_PointerToRelocations;
    property PointerToLineNumbers: Int32 read get_PointerToLineNumbers;
    property NumberOfRelocations: UInt16 read get_NumberOfRelocations;
    property NumberOfLineNumbers: UInt16 read get_NumberOfLineNumbers;
    property SectionCharacteristics: DNSectionCharacteristics read get_SectionCharacteristics;
  end;

  TDNSectionHeader = class(TDNGenericImport<DNSectionHeaderClass, DNSectionHeader>) end;

  //-------------namespace: System.Reflection.PortableExecutable----------------
  DNSectionLocationClass = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{9A485953-750D-5F87-99BA-D05FCF41FCCD}']
  { constructors } 

    {class} function init(relativeVirtualAddress: Int32; pointerToRawData: Int32): DNSectionLocation;

  end;

  [DNTypeName('System.Reflection.PortableExecutable.SectionLocation')]
  DNSectionLocation = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{DC058562-F433-3261-A3AA-4A969BAFB0D7}']
  { getters & setters } 

    function get_RelativeVirtualAddress: Int32;
    function get_PointerToRawData: Int32;

  { methods } 

    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property RelativeVirtualAddress: Int32 read get_RelativeVirtualAddress;
    property PointerToRawData: Int32 read get_PointerToRawData;
  end;

  TDNSectionLocation = class(TDNGenericImport<DNSectionLocationClass, DNSectionLocation>) end;


implementation


initialization
  LoadAssemblyModule('System.Reflection.Metadata, Version=1.4.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a');

finalization

end.
